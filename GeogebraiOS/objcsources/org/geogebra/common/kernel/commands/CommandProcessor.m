//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/commands/CommandProcessor.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "org/geogebra/common/kernel/algos/AlgoFunctionFreehand.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/MySpecialDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/arithmetic/Variable.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/parser/ParseException.h"
#include "org/geogebra/common/kernel/parser/Parser.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/util/Unicode.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonKernelCommandsCommandProcessor () {
 @public
  OrgGeogebraCommonKernelCommandsAlgebraProcessor *algProcessor_;
  JavaLangStringBuilder *sb_;
}

- (void)replaceZvarIfNeededWithNSString:(NSString *)name
withOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsCommandProcessor, algProcessor_, OrgGeogebraCommonKernelCommandsAlgebraProcessor *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsCommandProcessor, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsCommandProcessor_resArgsWithOrgGeogebraCommonKernelArithmeticCommand_(OrgGeogebraCommonKernelCommandsCommandProcessor *self, OrgGeogebraCommonKernelArithmeticCommand *c);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsCommandProcessor_resArgWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelCommandsCommandProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *arg);

__attribute__((unused)) static void OrgGeogebraCommonKernelCommandsCommandProcessor_replaceZvarIfNeededWithNSString_withOrgGeogebraCommonKernelArithmeticCommand_(OrgGeogebraCommonKernelCommandsCommandProcessor *self, NSString *name, OrgGeogebraCommonKernelArithmeticCommand *c);

__attribute__((unused)) static OrgGeogebraCommonMainMyError *OrgGeogebraCommonKernelCommandsCommandProcessor_argErrWithOrgGeogebraCommonMainApp_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelCommandsCommandProcessor *self, OrgGeogebraCommonMainApp *app1, NSString *cmd, id<OrgGeogebraCommonKernelArithmeticExpressionValue> arg);

__attribute__((unused)) static OrgGeogebraCommonMainMyError *OrgGeogebraCommonKernelCommandsCommandProcessor_argErrWithOrgGeogebraCommonMainLocalization_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelCommandsCommandProcessor *self, OrgGeogebraCommonMainLocalization *app1, NSString *cmd, id<OrgGeogebraCommonKernelArithmeticExpressionValue> arg);

@implementation OrgGeogebraCommonKernelCommandsCommandProcessor

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelCommandsCommandProcessor_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)resArgsWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  return OrgGeogebraCommonKernelCommandsCommandProcessor_resArgsWithOrgGeogebraCommonKernelArithmeticCommand_(self, c);
}

- (IOSObjectArray *)resArgsWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                                            withBoolean:(jboolean)keepCAScells {
  jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  IOSObjectArray *arg = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArguments];
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(arg))->size_ type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  for (jint i = 0; i < arg->size_; ++i) {
    [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(arg, i))) resolveVariables];
    if (keepCAScells && [[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(arg, i))) unwrap] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCasCell class]]) {
      IOSObjectArray_Set(result, i, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(arg, i))) unwrap], [OrgGeogebraCommonKernelGeosGeoElement class]));
    }
    else {
      IOSObjectArray_Set(result, i, IOSObjectArray_Get(nil_chk(OrgGeogebraCommonKernelCommandsCommandProcessor_resArgWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, IOSObjectArray_Get(arg, i))), 0));
    }
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return result;
}

- (IOSObjectArray *)resArgWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)arg {
  return OrgGeogebraCommonKernelCommandsCommandProcessor_resArgWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, arg);
}

- (IOSObjectArray *)resArgsLocalNumVarWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                                                           withInt:(jint)varPos
                                                                           withInt:(jint)initPos {
  NSString *localVarName = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getVariableNameWithInt:varPos];
  if (localVarName == nil) {
    @throw OrgGeogebraCommonKernelCommandsCommandProcessor_argErrWithOrgGeogebraCommonMainApp_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, app_, [c getName], [c getArgumentWithInt:varPos]);
  }
  else if ([localVarName isEqual:OrgGeogebraCommonUtilUnicode_get_IMAGINARY_()]) {
    localVarName = @"i";
    OrgGeogebraCommonKernelArithmeticVariable *localVar = [new_OrgGeogebraCommonKernelArithmeticVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernelA_, localVarName) autorelease];
    [c traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_Replacer_getReplacerWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getImaginaryUnit], localVar)];
  }
  else if ([localVarName isEqual:OrgGeogebraCommonUtilUnicode_get_EULER_STRING_()]) {
    localVarName = @"e";
    OrgGeogebraCommonKernelArithmeticVariable *localVar = [new_OrgGeogebraCommonKernelArithmeticVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernelA_, localVarName) autorelease];
    [c traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_Replacer_getReplacerWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticMySpecialDouble_getEulerConstantWithOrgGeogebraCommonKernelKernel_(kernelA_), localVar)];
  }
  OrgGeogebraCommonKernelConstruction *cmdCons = [((OrgGeogebraCommonKernelKernel *) nil_chk([c getKernel])) getConstruction];
  OrgGeogebraCommonKernelGeosGeoNumeric *num = [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cmdCons) autorelease];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cmdCons)) addLocalVariableWithNSString:localVarName withOrgGeogebraCommonKernelGeosGeoElement:num];
  OrgGeogebraCommonKernelCommandsCommandProcessor_replaceZvarIfNeededWithNSString_withOrgGeogebraCommonKernelArithmeticCommand_(self, localVarName, c);
  if (initPos != varPos) {
    jboolean oldval = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    id<OrgGeogebraCommonKernelArithmeticNumberValue> initValue = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(OrgGeogebraCommonKernelCommandsCommandProcessor_resArgWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, [c getArgumentWithInt:initPos])), 0), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
    [cons_ setSuppressLabelCreationWithBoolean:oldval];
    [num setValueWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(initValue)) getDouble]];
  }
  [c setArgumentWithInt:varPos withOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_([c getKernel], num) autorelease]];
  IOSObjectArray *arg = OrgGeogebraCommonKernelCommandsCommandProcessor_resArgsWithOrgGeogebraCommonKernelArithmeticCommand_(self, c);
  [cmdCons removeLocalVariableWithNSString:localVarName];
  return arg;
}

- (void)replaceZvarIfNeededWithNSString:(NSString *)name
withOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  OrgGeogebraCommonKernelCommandsCommandProcessor_replaceZvarIfNeededWithNSString_withOrgGeogebraCommonKernelArithmeticCommand_(self, name, c);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)resArgsForZipWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                                      withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)vars
                                                         withOrgGeogebraCommonKernelGeosGeoListArray:(IOSObjectArray *)over {
  jint numArgs = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  OrgGeogebraCommonKernelConstruction *cmdCons = [((OrgGeogebraCommonKernelKernel *) nil_chk([c getKernel])) getConstruction];
  for (jint varPos = 1; varPos < numArgs; varPos += 2) {
    NSString *localVarName = [c getVariableNameWithInt:varPos];
    if (localVarName == nil && [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:varPos])) isTopLevelCommand]) {
      localVarName = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:varPos])) getTopLevelCommand])) getVariableNameWithInt:0];
    }
    if (localVarName == nil) {
      @throw OrgGeogebraCommonKernelCommandsCommandProcessor_argErrWithOrgGeogebraCommonMainApp_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, app_, [c getName], [c getArgumentWithInt:varPos]);
    }
    OrgGeogebraCommonKernelGeosGeoElement *num = nil;
    OrgGeogebraCommonKernelGeosGeoList *gl = nil;
    if ([c getArgumentNumber] > varPos + 1) {
      gl = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk(OrgGeogebraCommonKernelCommandsCommandProcessor_resArgWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, [c getArgumentWithInt:varPos + 1])), 0), [OrgGeogebraCommonKernelGeosGeoList class]);
    }
    if (gl == nil) {
      num = [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
    }
    else if ([gl size] == 0) {
      if ([gl getTypeStringForXML] != nil) {
        num = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) createGeoElementWithOrgGeogebraCommonKernelConstruction:cons_ withNSString:[gl getTypeStringForXML]];
      }
      else {
        num = [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
      }
    }
    else {
      num = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([gl getWithInt:0])) copyInternalWithOrgGeogebraCommonKernelConstruction:cons_];
    }
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cmdCons)) addLocalVariableWithNSString:localVarName withOrgGeogebraCommonKernelGeosGeoElement:num];
    OrgGeogebraCommonKernelCommandsCommandProcessor_replaceZvarIfNeededWithNSString_withOrgGeogebraCommonKernelArithmeticCommand_(self, localVarName, c);
    [c setArgumentWithInt:varPos withOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_([c getKernel], num) autorelease]];
    IOSObjectArray_Set(nil_chk(vars), varPos / 2, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(num)) toGeoElement]);
    if (gl != nil) {
      IOSObjectArray_Set(nil_chk(over), varPos / 2, gl);
    }
  }
  IOSObjectArray *arg = OrgGeogebraCommonKernelCommandsCommandProcessor_resArgWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, [c getArgumentWithInt:0]);
  return IOSObjectArray_Get(nil_chk(arg), 0);
}

- (IOSObjectArray *)resArgsLocalNumVarWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                                                      withIntArray:(IOSIntArray *)varPos
                                                                      withIntArray:(IOSIntArray *)initPos {
  IOSObjectArray *localVarName = [IOSObjectArray arrayWithLength:((IOSIntArray *) nil_chk(varPos))->size_ type:NSString_class_()];
  for (jint i = 0; i < varPos->size_; i++) {
    IOSObjectArray_Set(localVarName, i, [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getVariableNameWithInt:IOSIntArray_Get(varPos, i)]);
    if (IOSObjectArray_Get(localVarName, i) == nil) {
      @throw OrgGeogebraCommonKernelCommandsCommandProcessor_argErrWithOrgGeogebraCommonMainApp_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, app_, [c getName], [c getArgumentWithInt:IOSIntArray_Get(varPos, i)]);
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(localVarName, i))) isEqual:OrgGeogebraCommonUtilUnicode_get_IMAGINARY_()]) {
      IOSObjectArray_Set(localVarName, i, @"i");
      OrgGeogebraCommonKernelArithmeticVariable *localVar = [new_OrgGeogebraCommonKernelArithmeticVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernelA_, IOSObjectArray_Get(localVarName, i)) autorelease];
      [c traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_Replacer_getReplacerWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getImaginaryUnit], localVar)];
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(localVarName, i))) isEqual:OrgGeogebraCommonUtilUnicode_get_EULER_STRING_()]) {
      IOSObjectArray_Set(localVarName, i, @"e");
      OrgGeogebraCommonKernelArithmeticVariable *localVar = [new_OrgGeogebraCommonKernelArithmeticVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernelA_, IOSObjectArray_Get(localVarName, i)) autorelease];
      [c traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_Replacer_getReplacerWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticMySpecialDouble_getEulerConstantWithOrgGeogebraCommonKernelKernel_(kernelA_), localVar)];
    }
  }
  OrgGeogebraCommonKernelConstruction *cmdCons = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getKernel])) getConstruction];
  IOSObjectArray *num = [IOSObjectArray arrayWithLength:varPos->size_ type:OrgGeogebraCommonKernelGeosGeoNumeric_class_()];
  for (jint i = 0; i < varPos->size_; i++) {
    IOSObjectArray_SetAndConsume(num, i, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cmdCons));
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cmdCons)) addLocalVariableWithNSString:IOSObjectArray_Get(localVarName, i) withOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(num, i)];
    OrgGeogebraCommonKernelCommandsCommandProcessor_replaceZvarIfNeededWithNSString_withOrgGeogebraCommonKernelArithmeticCommand_(self, IOSObjectArray_Get(localVarName, i), c);
  }
  for (jint i = 0; i < varPos->size_; i++) {
    if (IOSIntArray_Get(nil_chk(initPos), i) != IOSIntArray_Get(varPos, i)) {
      jboolean oldval = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
      [cons_ setSuppressLabelCreationWithBoolean:YES];
      id<OrgGeogebraCommonKernelArithmeticNumberValue> initValue = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(OrgGeogebraCommonKernelCommandsCommandProcessor_resArgWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, [c getArgumentWithInt:IOSIntArray_Get(initPos, i)])), 0), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
      [cons_ setSuppressLabelCreationWithBoolean:oldval];
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(IOSObjectArray_Get(num, i))) setValueWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(initValue)) getDouble]];
    }
  }
  for (jint i = 0; i < varPos->size_; i++) [c setArgumentWithInt:IOSIntArray_Get(varPos, i) withOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_([c getKernel], IOSObjectArray_Get(num, i)) autorelease]];
  IOSObjectArray *arg = OrgGeogebraCommonKernelCommandsCommandProcessor_resArgsWithOrgGeogebraCommonKernelArithmeticCommand_(self, c);
  for (jint i = 0; i < varPos->size_; i++) [((OrgGeogebraCommonKernelConstruction *) nil_chk(cmdCons)) removeLocalVariableWithNSString:IOSObjectArray_Get(localVarName, i)];
  return arg;
}

- (OrgGeogebraCommonMainMyError *)argErrWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app1
                                                        withNSString:(NSString *)cmd
                withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)arg {
  return OrgGeogebraCommonKernelCommandsCommandProcessor_argErrWithOrgGeogebraCommonMainApp_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, app1, cmd, arg);
}

- (OrgGeogebraCommonMainMyError *)argErrWithOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)app1
                                                                 withNSString:(NSString *)cmd
                         withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)arg {
  return OrgGeogebraCommonKernelCommandsCommandProcessor_argErrWithOrgGeogebraCommonMainLocalization_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, app1, cmd, arg);
}

- (OrgGeogebraCommonMainMyError *)argNumErrWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app1
                                                           withNSString:(NSString *)cmd
                                                                withInt:(jint)argNumber {
  if (sb_ == nil) OrgGeogebraCommonKernelCommandsCommandProcessor_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  else [sb_ setLengthWithInt:0];
  OrgGeogebraCommonKernelCommandsCommandProcessor_getCommandSyntaxWithJavaLangStringBuilder_withOrgGeogebraCommonMainLocalization_withNSString_withInt_(sb_, [((OrgGeogebraCommonMainApp *) nil_chk(app1)) getLocalization], cmd, argNumber);
  OrgGeogebraCommonMainApp_debugWithNSString_([[self getClass] getName]);
  return [new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_withNSString_withJavaLangThrowable_([app1 getLocalization], [((JavaLangStringBuilder *) nil_chk(sb_)) description], cmd, nil) autorelease];
}

+ (void)getCommandSyntaxWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
            withOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)app
                                     withNSString:(NSString *)cmd
                                          withInt:(jint)argNumber {
  OrgGeogebraCommonKernelCommandsCommandProcessor_getCommandSyntaxWithJavaLangStringBuilder_withOrgGeogebraCommonMainLocalization_withNSString_withInt_(sb, app, cmd, argNumber);
}

+ (OrgGeogebraCommonMainMyError *)chDepErrWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app1
                             withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return OrgGeogebraCommonKernelCommandsCommandProcessor_chDepErrWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonKernelGeosGeoElement_(app1, geo);
}

+ (OrgGeogebraCommonKernelGeosGeoElement *)getBadArgWithBooleanArray:(IOSBooleanArray *)ok
                      withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg {
  return OrgGeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(ok, arg);
}

+ (OrgGeogebraCommonKernelGeosGeoList *)wrapInListWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                     withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)args
                                                                            withInt:(jint)length
                                            withOrgGeogebraCommonPluginGeoClassEnum:(OrgGeogebraCommonPluginGeoClassEnum *)type {
  return OrgGeogebraCommonKernelCommandsCommandProcessor_wrapInListWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelGeosGeoElementArray_withInt_withOrgGeogebraCommonPluginGeoClassEnum_(kernel, args, length, type);
}

+ (OrgGeogebraCommonKernelGeosGeoList *)wrapFreehandFunctionArgInListWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernelA
                                                  withOrgGeogebraCommonKernelAlgosAlgoFunctionFreehand:(OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *)algo {
  return OrgGeogebraCommonKernelCommandsCommandProcessor_wrapFreehandFunctionArgInListWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_(kernelA, algo);
}

- (void)checkDependencyWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                                                         withNSString:(NSString *)name
                                                              withInt:(jint)i
                                                              withInt:(jint)j {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), i))) isChildOrEqualWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, j)]) {
    if ([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getConstruction])) isFileLoading]) {
      OrgGeogebraCommonUtilDebugLog_warnWithNSString_(JreStrcat("$$", @"wrong dependency in ", name));
    }
    else {
      @throw OrgGeogebraCommonKernelCommandsCommandProcessor_argErrWithOrgGeogebraCommonMainApp_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, app_, name, IOSObjectArray_Get(arg, i));
    }
  }
}

- (OrgGeogebraCommonKernelAlgosAlgoDispatcher *)getAlgoDispatcher {
  return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getAlgoDispatcher];
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(loc_);
  RELEASE_(kernelA_);
  RELEASE_(cons_);
  RELEASE_(algProcessor_);
  RELEASE_(sb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CommandProcessor", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x401, "Lorg.geogebra.common.main.MyError;Lorg.geogebra.common.kernel.CircularDefinitionException;", NULL },
    { "resArgsWithOrgGeogebraCommonKernelArithmeticCommand:", "resArgs", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, "Lorg.geogebra.common.main.MyError;", NULL },
    { "resArgsWithOrgGeogebraCommonKernelArithmeticCommand:withBoolean:", "resArgs", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, "Lorg.geogebra.common.main.MyError;", NULL },
    { "resArgWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "resArg", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, "Lorg.geogebra.common.main.MyError;", NULL },
    { "resArgsLocalNumVarWithOrgGeogebraCommonKernelArithmeticCommand:withInt:withInt:", "resArgsLocalNumVar", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "replaceZvarIfNeededWithNSString:withOrgGeogebraCommonKernelArithmeticCommand:", "replaceZvarIfNeeded", "V", 0x2, NULL, NULL },
    { "resArgsForZipWithOrgGeogebraCommonKernelArithmeticCommand:withOrgGeogebraCommonKernelGeosGeoElementArray:withOrgGeogebraCommonKernelGeosGeoListArray:", "resArgsForZip", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "resArgsLocalNumVarWithOrgGeogebraCommonKernelArithmeticCommand:withIntArray:withIntArray:", "resArgsLocalNumVar", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "argErrWithOrgGeogebraCommonMainApp:withNSString:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "argErr", "Lorg.geogebra.common.main.MyError;", 0x14, NULL, NULL },
    { "argErrWithOrgGeogebraCommonMainLocalization:withNSString:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "argErr", "Lorg.geogebra.common.main.MyError;", 0x14, NULL, NULL },
    { "argNumErrWithOrgGeogebraCommonMainApp:withNSString:withInt:", "argNumErr", "Lorg.geogebra.common.main.MyError;", 0x14, NULL, NULL },
    { "getCommandSyntaxWithJavaLangStringBuilder:withOrgGeogebraCommonMainLocalization:withNSString:withInt:", "getCommandSyntax", "V", 0x9, NULL, NULL },
    { "chDepErrWithOrgGeogebraCommonMainApp:withOrgGeogebraCommonKernelGeosGeoElement:", "chDepErr", "Lorg.geogebra.common.main.MyError;", 0x18, NULL, NULL },
    { "getBadArgWithBooleanArray:withOrgGeogebraCommonKernelGeosGeoElementArray:", "getBadArg", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0xc, NULL, NULL },
    { "wrapInListWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelGeosGeoElementArray:withInt:withOrgGeogebraCommonPluginGeoClassEnum:", "wrapInList", "Lorg.geogebra.common.kernel.geos.GeoList;", 0x9, NULL, NULL },
    { "wrapFreehandFunctionArgInListWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelAlgosAlgoFunctionFreehand:", "wrapFreehandFunctionArgInList", "Lorg.geogebra.common.kernel.geos.GeoList;", 0x9, NULL, NULL },
    { "checkDependencyWithOrgGeogebraCommonKernelGeosGeoElementArray:withNSString:withInt:withInt:", "checkDependency", "V", 0x4, NULL, NULL },
    { "getAlgoDispatcher", NULL, "Lorg.geogebra.common.kernel.algos.AlgoDispatcher;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x4, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "loc_", NULL, 0x4, "Lorg.geogebra.common.main.Localization;", NULL, NULL,  },
    { "kernelA_", NULL, 0x4, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cons_", NULL, 0x4, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
    { "algProcessor_", NULL, 0x2, "Lorg.geogebra.common.kernel.commands.AlgebraProcessor;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCommandsCommandProcessor = { 2, "CommandProcessor", "org.geogebra.common.kernel.commands", NULL, 0x401, 19, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCommandsCommandProcessor;
}

@end

void OrgGeogebraCommonKernelCommandsCommandProcessor_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelCommandsCommandProcessor *self, OrgGeogebraCommonKernelKernel *kernel) {
  NSObject_init(self);
  OrgGeogebraCommonKernelCommandsCommandProcessor_set_kernelA_(self, kernel);
  OrgGeogebraCommonKernelCommandsCommandProcessor_set_cons_(self, [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction]);
  OrgGeogebraCommonKernelCommandsCommandProcessor_set_app_(self, [kernel getApplication]);
  OrgGeogebraCommonKernelCommandsCommandProcessor_set_loc_(self, [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization]);
  OrgGeogebraCommonKernelCommandsCommandProcessor_set_algProcessor_(self, [kernel getAlgebraProcessor]);
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsCommandProcessor_resArgsWithOrgGeogebraCommonKernelArithmeticCommand_(OrgGeogebraCommonKernelCommandsCommandProcessor *self, OrgGeogebraCommonKernelArithmeticCommand *c) {
  jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
  [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  IOSObjectArray *arg = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArguments];
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(arg))->size_ type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  for (jint i = 0; i < arg->size_; ++i) {
    [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(arg, i))) resolveVariables];
    IOSObjectArray_Set(result, i, IOSObjectArray_Get(nil_chk(OrgGeogebraCommonKernelCommandsCommandProcessor_resArgWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, IOSObjectArray_Get(arg, i))), 0));
  }
  [self->cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return result;
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsCommandProcessor_resArgWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelCommandsCommandProcessor *self, OrgGeogebraCommonKernelArithmeticExpressionNode *arg) {
  IOSObjectArray *geos = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(self->algProcessor_)) processExpressionNodeWithOrgGeogebraCommonKernelArithmeticExpressionNode:arg];
  if (geos != nil) {
    return geos;
  }
  IOSObjectArray *str = [IOSObjectArray arrayWithObjects:(id[]){ @"IllegalArgument", [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(arg)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()] } count:2 type:NSString_class_()];
  @throw [new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(self->loc_, str) autorelease];
}

void OrgGeogebraCommonKernelCommandsCommandProcessor_replaceZvarIfNeededWithNSString_withOrgGeogebraCommonKernelArithmeticCommand_(OrgGeogebraCommonKernelCommandsCommandProcessor *self, NSString *name, OrgGeogebraCommonKernelArithmeticCommand *c) {
  if ([((NSString *) nil_chk(name)) isEqual:@"z"]) {
    @try {
      [c setArgumentWithInt:0 withOrgGeogebraCommonKernelArithmeticExpressionNode:[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([((OrgGeogebraCommonKernelParserParser *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernelA_)) getParser])) parseGeoGebraExpressionWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentWithInt:0])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_()]])) wrap]];
    }
    @catch (OrgGeogebraCommonKernelParserParseException *e) {
      [((OrgGeogebraCommonKernelParserParseException *) nil_chk(e)) printStackTrace];
    }
  }
}

OrgGeogebraCommonMainMyError *OrgGeogebraCommonKernelCommandsCommandProcessor_argErrWithOrgGeogebraCommonMainApp_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelCommandsCommandProcessor *self, OrgGeogebraCommonMainApp *app1, NSString *cmd, id<OrgGeogebraCommonKernelArithmeticExpressionValue> arg) {
  return OrgGeogebraCommonKernelCommandsCommandProcessor_argErrWithOrgGeogebraCommonMainLocalization_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((OrgGeogebraCommonMainApp *) nil_chk(app1)) getLocalization], cmd, arg);
}

OrgGeogebraCommonMainMyError *OrgGeogebraCommonKernelCommandsCommandProcessor_argErrWithOrgGeogebraCommonMainLocalization_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelCommandsCommandProcessor *self, OrgGeogebraCommonMainLocalization *app1, NSString *cmd, id<OrgGeogebraCommonKernelArithmeticExpressionValue> arg) {
  NSString *localName = [((OrgGeogebraCommonMainLocalization *) nil_chk(app1)) getCommandWithNSString:cmd];
  if (self->sb_ == nil) OrgGeogebraCommonKernelCommandsCommandProcessor_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  else [self->sb_ setLengthWithInt:0];
  jboolean reverseOrder = [app1 isReverseNameDescriptionLanguage];
  if (!reverseOrder) {
    [((JavaLangStringBuilder *) nil_chk(self->sb_)) appendWithNSString:[app1 getCommandWithNSString:@"Command"]];
    [self->sb_ appendWithChar:' '];
    [self->sb_ appendWithNSString:localName];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(self->sb_)) appendWithNSString:localName];
    [self->sb_ appendWithChar:' '];
    [self->sb_ appendWithNSString:[((NSString *) nil_chk([app1 getCommandWithNSString:@"Command"])) lowercaseString]];
  }
  [((JavaLangStringBuilder *) nil_chk(self->sb_)) appendWithNSString:@":\n"];
  [self->sb_ appendWithNSString:[app1 getErrorWithNSString:@"IllegalArgument"]];
  [self->sb_ appendWithNSString:@": "];
  if ([arg isKindOfClass:[OrgGeogebraCommonKernelGeosGeoElement class]]) [self->sb_ appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(arg, [OrgGeogebraCommonKernelGeosGeoElement class])))) getNameDescription]];
  else if (arg != nil) [self->sb_ appendWithNSString:[arg toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  [self->sb_ appendWithNSString:@"\n\n"];
  [self->sb_ appendWithNSString:[app1 getPlainWithNSString:@"Syntax"]];
  [self->sb_ appendWithNSString:@":\n"];
  [self->sb_ appendWithNSString:[app1 getCommandSyntaxWithNSString:cmd]];
  return [new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_withNSString_withJavaLangThrowable_(app1, [self->sb_ description], cmd, nil) autorelease];
}

void OrgGeogebraCommonKernelCommandsCommandProcessor_getCommandSyntaxWithJavaLangStringBuilder_withOrgGeogebraCommonMainLocalization_withNSString_withInt_(JavaLangStringBuilder *sb, OrgGeogebraCommonMainLocalization *app, NSString *cmd, jint argNumber) {
  OrgGeogebraCommonKernelCommandsCommandProcessor_initialize();
  jboolean reverseOrder = [((OrgGeogebraCommonMainLocalization *) nil_chk(app)) isReverseNameDescriptionLanguage];
  if (!reverseOrder) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[app getCommandWithNSString:@"Command"]];
    [sb appendWithChar:' '];
    [sb appendWithNSString:[app getCommandWithNSString:cmd]];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[app getCommandWithNSString:cmd]];
    [sb appendWithChar:' '];
    [sb appendWithNSString:[((NSString *) nil_chk([app getCommandWithNSString:@"Command"])) lowercaseString]];
  }
  if (argNumber > -1) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@":\n"];
    [sb appendWithNSString:[app getErrorWithNSString:@"IllegalArgumentNumber"]];
    [sb appendWithNSString:@": "];
    [sb appendWithInt:argNumber];
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\n\n"];
  [sb appendWithNSString:[app getPlainWithNSString:@"Syntax"]];
  [sb appendWithNSString:@":\n"];
  [sb appendWithNSString:[app getCommandSyntaxWithNSString:cmd]];
}

OrgGeogebraCommonMainMyError *OrgGeogebraCommonKernelCommandsCommandProcessor_chDepErrWithOrgGeogebraCommonMainApp_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonMainApp *app1, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonKernelCommandsCommandProcessor_initialize();
  IOSObjectArray *strs = [IOSObjectArray arrayWithObjects:(id[]){ @"ChangeDependent", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLongDescription] } count:2 type:NSString_class_()];
  return [new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_([((OrgGeogebraCommonMainApp *) nil_chk(app1)) getLocalization], strs) autorelease];
}

OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(IOSBooleanArray *ok, IOSObjectArray *arg) {
  OrgGeogebraCommonKernelCommandsCommandProcessor_initialize();
  for (jint i = 0; i < ((IOSBooleanArray *) nil_chk(ok))->size_; i++) {
    if (!IOSBooleanArray_Get(ok, i)) return IOSObjectArray_Get(nil_chk(arg), i);
  }
  return IOSObjectArray_Get(arg, ((IOSObjectArray *) nil_chk(arg))->size_ - 1);
}

OrgGeogebraCommonKernelGeosGeoList *OrgGeogebraCommonKernelCommandsCommandProcessor_wrapInListWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelGeosGeoElementArray_withInt_withOrgGeogebraCommonPluginGeoClassEnum_(OrgGeogebraCommonKernelKernel *kernel, IOSObjectArray *args, jint length, OrgGeogebraCommonPluginGeoClassEnum *type) {
  OrgGeogebraCommonKernelCommandsCommandProcessor_initialize();
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction];
  jboolean correctType = YES;
  JavaUtilArrayList *geoElementList = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < length; i++) {
    if ([((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk(type)) isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_DEFAULT()] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(args), i))) getGeoClassType] == type) [geoElementList addWithId:IOSObjectArray_Get(nil_chk(args), i)];
    else {
      correctType = NO;
      break;
    }
  }
  OrgGeogebraCommonKernelGeosGeoList *list = nil;
  if (correctType) {
    jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive];
    [cons setSuppressLabelCreationWithBoolean:YES];
    list = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel getAlgoDispatcher])) ListWithNSString:nil withJavaUtilArrayList:geoElementList withBoolean:NO];
    [cons setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  if (list != nil && [list size] == 0) list = nil;
  return list;
}

OrgGeogebraCommonKernelGeosGeoList *OrgGeogebraCommonKernelCommandsCommandProcessor_wrapFreehandFunctionArgInListWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_(OrgGeogebraCommonKernelKernel *kernelA, OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *algo) {
  OrgGeogebraCommonKernelCommandsCommandProcessor_initialize();
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA)) getConstruction];
  OrgGeogebraCommonKernelGeosGeoList *list = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *) nil_chk(algo)) getInput]), 0), [OrgGeogebraCommonKernelGeosGeoList class]);
  jdouble start = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list)) getWithInt:0], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  jdouble end = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([list getWithInt:1], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  jint size = [list size] - 2;
  jdouble step = (end - start) / (size - 1);
  JavaUtilArrayList *geoElementList = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < size; i++) {
    OrgGeogebraCommonKernelGeosGeoPoint *p = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons, start + i * step, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([list getWithInt:2 + i], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble], 1.0) autorelease];
    [geoElementList addWithId:p];
  }
  jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive];
  [cons setSuppressLabelCreationWithBoolean:YES];
  list = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernelA getAlgoDispatcher])) ListWithNSString:nil withJavaUtilArrayList:geoElementList withBoolean:NO];
  [cons setSuppressLabelCreationWithBoolean:oldMacroMode];
  return list;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCommandsCommandProcessor)
