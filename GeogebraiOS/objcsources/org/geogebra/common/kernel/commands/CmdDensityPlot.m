//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/commands/CmdDensityPlot.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoDensityPlot.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/commands/CmdDensityPlot.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoCanvasImage.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/MyError.h"

@interface OrgGeogebraCommonKernelCommandsCmdDensityPlot () {
 @public
  jdouble lowX_;
  jdouble highX_;
  jdouble lowY_;
  jdouble highY_;
  IOSObjectArray *args_;
}

- (void)controlWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCommandsCmdDensityPlot, args_, IOSObjectArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelCommandsCmdDensityPlot_controlWithOrgGeogebraCommonKernelArithmeticCommand_(OrgGeogebraCommonKernelCommandsCmdDensityPlot *self, OrgGeogebraCommonKernelArithmeticCommand *c);

@implementation OrgGeogebraCommonKernelCommandsCmdDensityPlot

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelCommandsCmdDensityPlot_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  {
    OrgGeogebraCommonKernelAlgosAlgoDensityPlot *algo;
    IOSObjectArray *ret;
    switch (n) {
      case 1:
      args_ = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(args_), 0))) isGeoFunctionNVar] || [((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(args_, 0), [OrgGeogebraCommonKernelGeosGeoFunctionNVar class])))) getVarNumber] != 2) {
        @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(args_, 0)];
      }
      algo = new_OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_(cons_, (OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(args_, 0), [OrgGeogebraCommonKernelGeosGeoFunctionNVar class]));
      ret = [IOSObjectArray newArrayWithObjects:(id[]){ [algo getResult] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
      case 5:
      OrgGeogebraCommonKernelCommandsCmdDensityPlot_controlWithOrgGeogebraCommonKernelArithmeticCommand_(self, c);
      algo = new_OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_withBoolean_(cons_, (OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(nil_chk(args_), 0), [OrgGeogebraCommonKernelGeosGeoFunctionNVar class]), lowX_, highX_, lowY_, highY_, YES);
      ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      (void) IOSObjectArray_Set(ret, 0, [algo getResult]);
      return ret;
      case 6:
      OrgGeogebraCommonKernelCommandsCmdDensityPlot_controlWithOrgGeogebraCommonKernelArithmeticCommand_(self, c);
      algo = new_OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_withBoolean_(cons_, (OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(nil_chk(args_), 0), [OrgGeogebraCommonKernelGeosGeoFunctionNVar class]), lowX_, highX_, lowY_, highY_, [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(((OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(args_, 5), [OrgGeogebraCommonKernelGeosGeoBoolean class])))) getBoolean]);
      ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      (void) IOSObjectArray_Set(ret, 0, [algo getResult]);
      return ret;
      default:
      @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

- (void)controlWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  OrgGeogebraCommonKernelCommandsCmdDensityPlot_controlWithOrgGeogebraCommonKernelArithmeticCommand_(self, c);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdDensityPlot", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;Lorg.geogebra.common.kernel.CircularDefinitionException;", NULL },
    { "controlWithOrgGeogebraCommonKernelArithmeticCommand:", "control", "V", 0x2, "Lorg.geogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lowX_", NULL, 0x2, "D", NULL, NULL,  },
    { "highX_", NULL, 0x2, "D", NULL, NULL,  },
    { "lowY_", NULL, 0x2, "D", NULL, NULL,  },
    { "highY_", NULL, 0x2, "D", NULL, NULL,  },
    { "args_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCommandsCmdDensityPlot = { 2, "CmdDensityPlot", "org.geogebra.common.kernel.commands", NULL, 0x1, 3, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCommandsCmdDensityPlot;
}

@end

void OrgGeogebraCommonKernelCommandsCmdDensityPlot_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelCommandsCmdDensityPlot *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCommandProcessor_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelCommandsCmdDensityPlot *new_OrgGeogebraCommonKernelCommandsCmdDensityPlot_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCmdDensityPlot *self = [OrgGeogebraCommonKernelCommandsCmdDensityPlot alloc];
  OrgGeogebraCommonKernelCommandsCmdDensityPlot_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void OrgGeogebraCommonKernelCommandsCmdDensityPlot_controlWithOrgGeogebraCommonKernelArithmeticCommand_(OrgGeogebraCommonKernelCommandsCmdDensityPlot *self, OrgGeogebraCommonKernelArithmeticCommand *c) {
  self->args_ = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(self->args_), 0))) isGeoFunctionNVar] || [((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(self->args_, 0), [OrgGeogebraCommonKernelGeosGeoFunctionNVar class])))) getVarNumber] != 2) {
    @throw [self argErrWithOrgGeogebraCommonMainApp:self->app_ withNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->args_, 0)];
  }
  self->lowX_ = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentWithInt:1])) evaluateDouble];
  self->highX_ = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:2])) evaluateDouble];
  self->lowY_ = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:3])) evaluateDouble];
  self->highY_ = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:4])) evaluateDouble];
  if (JavaLangDouble_isNaNWithDouble_(self->lowX_) || JavaLangDouble_isNaNWithDouble_(self->highX_) || self->lowX_ >= self->highX_) {
    @throw [self argErrWithOrgGeogebraCommonMainApp:self->app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:[c getArgumentWithInt:1]];
  }
  if (JavaLangDouble_isNaNWithDouble_(self->lowY_) || JavaLangDouble_isNaNWithDouble_(self->highY_) || self->lowY_ >= self->highY_) {
    @throw [self argErrWithOrgGeogebraCommonMainApp:self->app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:[c getArgumentWithInt:3]];
  }
  if (self->args_->size_ == 6 && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->args_, 5))) isGeoBoolean]) {
    @throw [self argErrWithOrgGeogebraCommonMainApp:self->app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->args_, 5)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCommandsCmdDensityPlot)
