//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/commands/CmdIf.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentFunction.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentFunctionNVar.h"
#include "org/geogebra/common/kernel/algos/AlgoIf.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/MyNumberPair.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/CmdIf.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionable.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonKernelCommandsCmdIf ()

- (jint)replaceVariablesWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)argument
                                                          withNSStringArray:(IOSObjectArray *)varName
                 withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv;

- (jint)checkAddWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                       withJavaUtilArrayList:(JavaUtilArrayList *)functions
                   withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)fn
                                                     withInt:(jint)vars;

- (IOSObjectArray *)specialFunctionWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                                              withNSStringArray:(IOSObjectArray *)varName
                     withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv;

- (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)resolveFunctionWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                                                                                           withInt:(jint)i
                                                        withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv
                                                                                                           withInt:(jint)vars;

- (OrgGeogebraCommonKernelGeosGeoElement *)IfWithNSString:(NSString *)label
                                    withJavaUtilArrayList:(JavaUtilArrayList *)conditions
                                    withJavaUtilArrayList:(JavaUtilArrayList *)functions
                                                  withInt:(jint)vars;

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrapWithOrgGeogebraCommonKernelArithmeticFunctionalNVar:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)boolFun
                                                  withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv
                                                                                                 withBoolean:(jboolean)mayUseIndependent;

@end

__attribute__((unused)) static jint OrgGeogebraCommonKernelCommandsCmdIf_replaceVariablesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withNSStringArray_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(OrgGeogebraCommonKernelCommandsCmdIf *self, OrgGeogebraCommonKernelArithmeticExpressionNode *argument, IOSObjectArray *varName, IOSObjectArray *fv);

__attribute__((unused)) static jint OrgGeogebraCommonKernelCommandsCmdIf_checkAddWithOrgGeogebraCommonKernelArithmeticCommand_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoElement_withInt_(OrgGeogebraCommonKernelCommandsCmdIf *self, OrgGeogebraCommonKernelArithmeticCommand *c, JavaUtilArrayList *functions, OrgGeogebraCommonKernelGeosGeoElement *fn, jint vars);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelCommandsCmdIf_specialFunctionWithOrgGeogebraCommonKernelArithmeticCommand_withNSStringArray_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(OrgGeogebraCommonKernelCommandsCmdIf *self, OrgGeogebraCommonKernelArithmeticCommand *c, IOSObjectArray *varName, IOSObjectArray *fv);

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> OrgGeogebraCommonKernelCommandsCmdIf_resolveFunctionWithOrgGeogebraCommonKernelArithmeticCommand_withInt_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withInt_(OrgGeogebraCommonKernelCommandsCmdIf *self, OrgGeogebraCommonKernelArithmeticCommand *c, jint i, IOSObjectArray *fv, jint vars);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelCommandsCmdIf_IfWithNSString_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(OrgGeogebraCommonKernelCommandsCmdIf *self, NSString *label, JavaUtilArrayList *conditions, JavaUtilArrayList *functions, jint vars);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelCommandsCmdIf_wrapWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(OrgGeogebraCommonKernelCommandsCmdIf *self, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> boolFun, IOSObjectArray *fv, jboolean mayUseIndependent);

@implementation OrgGeogebraCommonKernelCommandsCmdIf

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelCommandsCmdIf_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  if (n < 2) {
    @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
  if ([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getConstruction])) getRegisteredFunctionVariable] != nil) {
    IOSObjectArray *varName = [((OrgGeogebraCommonKernelConstruction *) nil_chk([kernelA_ getConstruction])) getRegisteredFunctionVariables];
    IOSObjectArray *fv = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(varName))->size_ type:OrgGeogebraCommonKernelArithmeticFunctionVariable_class_()];
    jint r = OrgGeogebraCommonKernelCommandsCmdIf_replaceVariablesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withNSStringArray_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(self, [c getArgumentWithInt:0], varName, fv);
    if (r > 0) {
      return OrgGeogebraCommonKernelCommandsCmdIf_specialFunctionWithOrgGeogebraCommonKernelArithmeticCommand_withNSStringArray_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(self, c, varName, fv);
    }
  }
  arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
  if ([IOSObjectArray_Get(nil_chk(arg), 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoBoolean class]]) {
    JavaUtilArrayList *cond = new_JavaUtilArrayList_init();
    JavaUtilArrayList *alternatives = new_JavaUtilArrayList_init();
    for (jint i = 0; i < n - 1; i += 2) {
      if ([IOSObjectArray_Get(arg, i) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoBoolean class]]) {
        [cond addWithId:(OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, i), [OrgGeogebraCommonKernelGeosGeoBoolean class])];
      }
      else {
        @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, i)];
      }
      [alternatives addWithId:IOSObjectArray_Get(arg, i + 1)];
    }
    if (n % 2 == 1) {
      [alternatives addWithId:IOSObjectArray_Get(arg, n - 1)];
    }
    return [new_OrgGeogebraCommonKernelAlgosAlgoIf_initWithOrgGeogebraCommonKernelConstruction_withNSString_withJavaUtilArrayList_withJavaUtilArrayList_(cons_, [c getLabel], cond, alternatives) getOutput];
  }
  JavaUtilArrayList *conditions = new_JavaUtilArrayList_init();
  JavaUtilArrayList *functions = new_JavaUtilArrayList_init();
  jint vars = 1;
  for (jint i = 0; i < n - 1; i += 2) {
    if ([OrgGeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:IOSObjectArray_Get(arg, i)] && [((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(IOSObjectArray_Get(arg, i), @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar))))) isBooleanFunction]) {
      [conditions addWithId:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(IOSObjectArray_Get(arg, i), @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar))];
      vars = vars > 1 ? vars : ((IOSObjectArray *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(IOSObjectArray_Get(arg, i), @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar))))) getFunctionVariables]))->size_;
    }
    else {
      @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, i)];
    }
    vars = OrgGeogebraCommonKernelCommandsCmdIf_checkAddWithOrgGeogebraCommonKernelArithmeticCommand_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoElement_withInt_(self, c, functions, IOSObjectArray_Get(arg, i + 1), vars);
  }
  if (n % 2 == 1) {
    vars = OrgGeogebraCommonKernelCommandsCmdIf_checkAddWithOrgGeogebraCommonKernelArithmeticCommand_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoElement_withInt_(self, c, functions, IOSObjectArray_Get(arg, n - 1), vars);
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIf_IfWithNSString_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, [c getLabel], conditions, functions, vars) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
}

- (jint)replaceVariablesWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)argument
                                                          withNSStringArray:(IOSObjectArray *)varName
                 withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv {
  return OrgGeogebraCommonKernelCommandsCmdIf_replaceVariablesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withNSStringArray_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(self, argument, varName, fv);
}

- (jint)checkAddWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                       withJavaUtilArrayList:(JavaUtilArrayList *)functions
                   withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)fn
                                                     withInt:(jint)vars {
  return OrgGeogebraCommonKernelCommandsCmdIf_checkAddWithOrgGeogebraCommonKernelArithmeticCommand_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoElement_withInt_(self, c, functions, fn, vars);
}

- (IOSObjectArray *)specialFunctionWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                                              withNSStringArray:(IOSObjectArray *)varName
                     withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv {
  return OrgGeogebraCommonKernelCommandsCmdIf_specialFunctionWithOrgGeogebraCommonKernelArithmeticCommand_withNSStringArray_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(self, c, varName, fv);
}

- (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)resolveFunctionWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c
                                                                                                           withInt:(jint)i
                                                        withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv
                                                                                                           withInt:(jint)vars {
  return OrgGeogebraCommonKernelCommandsCmdIf_resolveFunctionWithOrgGeogebraCommonKernelArithmeticCommand_withInt_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withInt_(self, c, i, fv, vars);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)IfWithNSString:(NSString *)label
                                    withJavaUtilArrayList:(JavaUtilArrayList *)conditions
                                    withJavaUtilArrayList:(JavaUtilArrayList *)functions
                                                  withInt:(jint)vars {
  return OrgGeogebraCommonKernelCommandsCmdIf_IfWithNSString_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, label, conditions, functions, vars);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrapWithOrgGeogebraCommonKernelArithmeticFunctionalNVar:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)boolFun
                                                  withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv
                                                                                                 withBoolean:(jboolean)mayUseIndependent {
  return OrgGeogebraCommonKernelCommandsCmdIf_wrapWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, boolFun, fv, mayUseIndependent);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdIf", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;", NULL },
    { "replaceVariablesWithOrgGeogebraCommonKernelArithmeticExpressionNode:withNSStringArray:withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:", "replaceVariables", "I", 0x2, NULL, NULL },
    { "checkAddWithOrgGeogebraCommonKernelArithmeticCommand:withJavaUtilArrayList:withOrgGeogebraCommonKernelGeosGeoElement:withInt:", "checkAdd", "I", 0x2, NULL, NULL },
    { "specialFunctionWithOrgGeogebraCommonKernelArithmeticCommand:withNSStringArray:withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:", "specialFunction", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "resolveFunctionWithOrgGeogebraCommonKernelArithmeticCommand:withInt:withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:withInt:", "resolveFunction", "Lorg.geogebra.common.kernel.arithmetic.FunctionalNVar;", 0x2, NULL, NULL },
    { "IfWithNSString:withJavaUtilArrayList:withJavaUtilArrayList:withInt:", "If", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
    { "wrapWithOrgGeogebraCommonKernelArithmeticFunctionalNVar:withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:withBoolean:", "wrap", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCommandsCmdIf = { 2, "CmdIf", "org.geogebra.common.kernel.commands", NULL, 0x1, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCommandsCmdIf;
}

@end

void OrgGeogebraCommonKernelCommandsCmdIf_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelCommandsCmdIf *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCommandProcessor_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelCommandsCmdIf *new_OrgGeogebraCommonKernelCommandsCmdIf_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCmdIf *self = [OrgGeogebraCommonKernelCommandsCmdIf alloc];
  OrgGeogebraCommonKernelCommandsCmdIf_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

jint OrgGeogebraCommonKernelCommandsCmdIf_replaceVariablesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withNSStringArray_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(OrgGeogebraCommonKernelCommandsCmdIf *self, OrgGeogebraCommonKernelArithmeticExpressionNode *argument, IOSObjectArray *varName, IOSObjectArray *fv) {
  jint rep = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(varName))->size_; i++) {
    if (IOSObjectArray_Get(nil_chk(fv), i) == nil) {
      (void) IOSObjectArray_Set(fv, i, new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernelA_, IOSObjectArray_Get(varName, i)));
    }
    rep += [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(argument)) replaceVariablesWithNSString:IOSObjectArray_Get(varName, i) withOrgGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(fv, i)];
  }
  return rep;
}

jint OrgGeogebraCommonKernelCommandsCmdIf_checkAddWithOrgGeogebraCommonKernelArithmeticCommand_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoElement_withInt_(OrgGeogebraCommonKernelCommandsCmdIf *self, OrgGeogebraCommonKernelArithmeticCommand *c, JavaUtilArrayList *functions, OrgGeogebraCommonKernelGeosGeoElement *fn, jint vars) {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(fn)) isGeoFunctionable] && !([fn isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]])) {
    [((JavaUtilArrayList *) nil_chk(functions)) addWithId:[((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(fn, @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))) getGeoFunction]];
    return vars;
  }
  else if ([fn isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunctionNVar class]]) {
    [((JavaUtilArrayList *) nil_chk(functions)) addWithId:(OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(fn, [OrgGeogebraCommonKernelGeosGeoFunctionNVar class])];
    return 2;
  }
  else {
    @throw [self argErrWithOrgGeogebraCommonMainApp:self->app_ withNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:fn];
  }
}

IOSObjectArray *OrgGeogebraCommonKernelCommandsCmdIf_specialFunctionWithOrgGeogebraCommonKernelArithmeticCommand_withNSStringArray_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(OrgGeogebraCommonKernelCommandsCmdIf *self, OrgGeogebraCommonKernelArithmeticCommand *c, IOSObjectArray *varName, IOSObjectArray *fv) {
  jboolean oldFlag = [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernelA_)) getConstruction])) isSuppressLabelsActive];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk([self->kernelA_ getConstruction])) setSuppressLabelCreationWithBoolean:YES];
  JavaUtilArrayList *conditions = new_JavaUtilArrayList_init();
  JavaUtilArrayList *functions = new_JavaUtilArrayList_init();
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  jint vars = ((IOSObjectArray *) nil_chk(varName))->size_;
  for (jint i = 0; i < n - 1; i += 2) {
    OrgGeogebraCommonKernelCommandsCmdIf_replaceVariablesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withNSStringArray_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(self, [c getArgumentWithInt:i], varName, fv);
    id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> current = OrgGeogebraCommonKernelCommandsCmdIf_resolveFunctionWithOrgGeogebraCommonKernelArithmeticCommand_withInt_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withInt_(self, c, i, fv, vars);
    if ([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(current)) isBooleanFunction]) {
      [conditions addWithId:current];
    }
    else {
      @throw [self argErrWithOrgGeogebraCommonMainApp:self->app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:current];
    }
    OrgGeogebraCommonKernelCommandsCmdIf_replaceVariablesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withNSStringArray_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(self, [c getArgumentWithInt:i + 1], varName, fv);
    OrgGeogebraCommonKernelCommandsCmdIf_checkAddWithOrgGeogebraCommonKernelArithmeticCommand_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoElement_withInt_(self, c, functions, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(OrgGeogebraCommonKernelCommandsCmdIf_resolveFunctionWithOrgGeogebraCommonKernelArithmeticCommand_withInt_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withInt_(self, c, i + 1, fv, vars), [OrgGeogebraCommonKernelGeosGeoElement class]), vars);
  }
  if (n % 2 == 1) {
    OrgGeogebraCommonKernelCommandsCmdIf_replaceVariablesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withNSStringArray_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(self, [c getArgumentWithInt:n - 1], varName, fv);
    OrgGeogebraCommonKernelCommandsCmdIf_checkAddWithOrgGeogebraCommonKernelArithmeticCommand_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoElement_withInt_(self, c, functions, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(OrgGeogebraCommonKernelCommandsCmdIf_resolveFunctionWithOrgGeogebraCommonKernelArithmeticCommand_withInt_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withInt_(self, c, n - 1, fv, vars), [OrgGeogebraCommonKernelGeosGeoElement class]), vars);
  }
  [((OrgGeogebraCommonKernelConstruction *) nil_chk([self->kernelA_ getConstruction])) setSuppressLabelCreationWithBoolean:oldFlag];
  return [IOSObjectArray newArrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdIf_IfWithNSString_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, [c getLabel], conditions, functions, vars) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
}

id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> OrgGeogebraCommonKernelCommandsCmdIf_resolveFunctionWithOrgGeogebraCommonKernelArithmeticCommand_withInt_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withInt_(OrgGeogebraCommonKernelCommandsCmdIf *self, OrgGeogebraCommonKernelArithmeticCommand *c, jint i, IOSObjectArray *fv, jint vars) {
  [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentWithInt:i])) resolveVariables];
  if ([[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:i])) unwrap] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
    return (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:i])) unwrap], [OrgGeogebraCommonKernelGeosGeoFunction class]);
  }
  if (vars < 2) {
    return (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernelA_)) getAlgebraProcessor])) processFunctionWithOrgGeogebraCommonKernelArithmeticFunction:new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_([c getArgumentWithInt:i], IOSObjectArray_Get(nil_chk(fv), 0))]), 0), [OrgGeogebraCommonKernelGeosGeoFunction class]);
  }
  return (OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernelA_)) getAlgebraProcessor])) processFunctionNVarWithOrgGeogebraCommonKernelArithmeticFunctionNVar:new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_([c getArgumentWithInt:i], fv)]), 0), [OrgGeogebraCommonKernelGeosGeoFunctionNVar class]);
}

OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelCommandsCmdIf_IfWithNSString_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(OrgGeogebraCommonKernelCommandsCmdIf *self, NSString *label, JavaUtilArrayList *conditions, JavaUtilArrayList *functions, jint vars) {
  IOSObjectArray *fv = [((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk([((JavaUtilArrayList *) nil_chk(conditions)) getWithInt:0])) getFunctionVariables];
  OrgGeogebraCommonKernelArithmeticExpressionNode *expr;
  jboolean mayUseIndependent = YES;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(functions)) size]; i++) {
    if ([((id<OrgGeogebraCommonKernelArithmeticInspecting>) nil_chk(OrgGeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_())) checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:[functions getWithInt:i]] || (i < [conditions size] && [OrgGeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_() checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:[conditions getWithInt:i]])) {
      mayUseIndependent = NO;
      break;
    }
  }
  if ([functions size] == 1) {
    expr = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernelA_, OrgGeogebraCommonKernelCommandsCmdIf_wrapWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, [conditions getWithInt:0], fv, mayUseIndependent), OrgGeogebraCommonPluginOperationEnum_get_IF(), OrgGeogebraCommonKernelCommandsCmdIf_wrapWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, [functions getWithInt:0], fv, mayUseIndependent));
  }
  else if ([functions size] == 2 && [conditions size] == 1) {
    expr = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernelA_, new_OrgGeogebraCommonKernelArithmeticMyNumberPair_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernelA_, OrgGeogebraCommonKernelCommandsCmdIf_wrapWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, [conditions getWithInt:0], fv, mayUseIndependent), OrgGeogebraCommonKernelCommandsCmdIf_wrapWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, [functions getWithInt:0], fv, mayUseIndependent)), OrgGeogebraCommonPluginOperationEnum_get_IF_ELSE(), OrgGeogebraCommonKernelCommandsCmdIf_wrapWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, [functions getWithInt:1], fv, mayUseIndependent));
  }
  else {
    OrgGeogebraCommonKernelArithmeticMyList *cond = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(self->kernelA_), *funs = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(self->kernelA_);
    for (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> __strong f in conditions) {
      [cond addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelCommandsCmdIf_wrapWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, f, fv, mayUseIndependent)];
    }
    for (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> __strong f in functions) {
      [funs addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelCommandsCmdIf_wrapWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, f, fv, mayUseIndependent)];
    }
    expr = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernelA_, cond, OrgGeogebraCommonPluginOperationEnum_get_IF_LIST(), funs);
  }
  if (vars < 2) {
    OrgGeogebraCommonKernelArithmeticFunction *fun = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(expr, IOSObjectArray_Get(nil_chk(fv), 0));
    if (mayUseIndependent) {
      return new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(self->cons_, label, fun);
    }
    OrgGeogebraCommonKernelAlgosAlgoDependentFunction *algo = new_OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(self->cons_, label, fun);
    return [algo getFunction];
  }
  OrgGeogebraCommonKernelArithmeticFunctionNVar *fun = new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(expr, fv);
  if (mayUseIndependent) {
    return new_OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self->cons_, label, fun);
  }
  OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar *algo = new_OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self->cons_, label, fun);
  return [algo getFunction];
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelCommandsCmdIf_wrapWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(OrgGeogebraCommonKernelCommandsCmdIf *self, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> boolFun, IOSObjectArray *fv, jboolean mayUseIndependent) {
  if (!mayUseIndependent) {
    if (((IOSObjectArray *) nil_chk(fv))->size_ == 1) {
      return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernelA_, boolFun, OrgGeogebraCommonPluginOperationEnum_get_FUNCTION(), IOSObjectArray_Get(fv, 0));
    }
    OrgGeogebraCommonKernelArithmeticMyList *arg = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(self->kernelA_);
    for (jint i = 0; i < fv->size_; i++) {
      [arg addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(fv, i)];
    }
    return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernelA_, boolFun, OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR(), arg);
  }
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> exp = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(boolFun)) getFunctionExpression])) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernelA_];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fv))->size_; i++) {
    exp = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_getReplacerWithOrgGeogebraCommonKernelArithmeticFunctionVariable_(IOSObjectArray_Get(fv, i))];
  }
  return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) wrap];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCommandsCmdIf)
