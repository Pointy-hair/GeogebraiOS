//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/commands/CmdLaTeX.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoLaTeX.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/commands/CmdLaTeX.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/main/MyError.h"

@interface OrgGeogebraCommonKernelCommandsCmdLaTeX ()

- (OrgGeogebraCommonKernelGeosGeoText *)LaTeXWithNSString:(NSString *)label
                withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)substituteVars
                withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)showName;

@end

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoText *OrgGeogebraCommonKernelCommandsCmdLaTeX_LaTeXWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelCommandsCmdLaTeX *self, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonKernelGeosGeoBoolean *substituteVars, OrgGeogebraCommonKernelGeosGeoBoolean *showName);

@implementation OrgGeogebraCommonKernelCommandsCmdLaTeX

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelCommandsCmdLaTeX_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  {
    OrgGeogebraCommonKernelAlgosAlgoLaTeX *algo;
    IOSObjectArray *ret;
    switch (n) {
      case 1:
      arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c withBoolean:YES];
      algo = new_OrgGeogebraCommonKernelAlgosAlgoLaTeX_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, [c getLabel], IOSObjectArray_Get(nil_chk(arg), 0));
      ret = [IOSObjectArray newArrayWithObjects:(id[]){ [algo getGeoText] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
      case 2:
      arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c withBoolean:YES];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 1))) isGeoBoolean]) {
        IOSObjectArray *ret2 = [IOSObjectArray newArrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdLaTeX_LaTeXWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, [c getLabel], IOSObjectArray_Get(arg, 0), (OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoBoolean class]), nil) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
        return ret2;
      }
      @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      case 3:
      arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c withBoolean:YES];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 1))) isGeoBoolean] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoBoolean]) {
        IOSObjectArray *ret2 = [IOSObjectArray newArrayWithObjects:(id[]){ OrgGeogebraCommonKernelCommandsCmdLaTeX_LaTeXWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, [c getLabel], IOSObjectArray_Get(arg, 0), (OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoBoolean class]), (OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, 2), [OrgGeogebraCommonKernelGeosGeoBoolean class])) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
        return ret2;
      }
      else if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoBoolean]) @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      else @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 2)];
      default:
      @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

- (OrgGeogebraCommonKernelGeosGeoText *)LaTeXWithNSString:(NSString *)label
                withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)substituteVars
                withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)showName {
  return OrgGeogebraCommonKernelCommandsCmdLaTeX_LaTeXWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, label, geo, substituteVars, showName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdLaTeX", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;", NULL },
    { "LaTeXWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoBoolean:withOrgGeogebraCommonKernelGeosGeoBoolean:", "LaTeX", "Lorg.geogebra.common.kernel.geos.GeoText;", 0x12, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCommandsCmdLaTeX = { 2, "CmdLaTeX", "org.geogebra.common.kernel.commands", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCommandsCmdLaTeX;
}

@end

void OrgGeogebraCommonKernelCommandsCmdLaTeX_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelCommandsCmdLaTeX *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCommandProcessor_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelCommandsCmdLaTeX *new_OrgGeogebraCommonKernelCommandsCmdLaTeX_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCmdLaTeX *self = [OrgGeogebraCommonKernelCommandsCmdLaTeX alloc];
  OrgGeogebraCommonKernelCommandsCmdLaTeX_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

OrgGeogebraCommonKernelGeosGeoText *OrgGeogebraCommonKernelCommandsCmdLaTeX_LaTeXWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelCommandsCmdLaTeX *self, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonKernelGeosGeoBoolean *substituteVars, OrgGeogebraCommonKernelGeosGeoBoolean *showName) {
  OrgGeogebraCommonKernelAlgosAlgoLaTeX *algo = new_OrgGeogebraCommonKernelAlgosAlgoLaTeX_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoBoolean_withOrgGeogebraCommonKernelGeosGeoBoolean_(self->cons_, label, geo, substituteVars, showName);
  OrgGeogebraCommonKernelGeosGeoText *t = [algo getGeoText];
  return t;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCommandsCmdLaTeX)
