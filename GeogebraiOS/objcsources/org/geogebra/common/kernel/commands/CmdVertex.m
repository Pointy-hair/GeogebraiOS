//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/commands/CmdVertex.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "org/geogebra/common/kernel/algos/AlgoDrawingPadCorner.h"
#include "org/geogebra/common/kernel/algos/AlgoImageCorner.h"
#include "org/geogebra/common/kernel/algos/AlgoTextCorner.h"
#include "org/geogebra/common/kernel/algos/AlgoVertexConic.h"
#include "org/geogebra/common/kernel/algos/AlgoVertexIneq.h"
#include "org/geogebra/common/kernel/algos/AlgoVertexPolygon.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/CmdVertex.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoImage.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPoly.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/MyError.h"

@implementation OrgGeogebraCommonKernelCommandsCmdVertex

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelCommandsCmdVertex_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray newArrayWithLength:n];
  IOSObjectArray *arg;
  switch (n) {
    case 1:
    arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoConic]) {
      OrgGeogebraCommonKernelAlgosAlgoVertexConic *algo = [self newAlgoVertexConicWithOrgGeogebraCommonKernelConstruction:cons_ withNSStringArray:[c getLabels] withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelKernelNDGeoConicND class])];
      return (IOSObjectArray *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoVertexConic *) nil_chk(algo)) getVertex], [IOSObjectArray class]);
    }
    if ([OrgGeogebraCommonKernelGeosGeoPoly_class_() isInstance:IOSObjectArray_Get(arg, 0)]) {
      OrgGeogebraCommonKernelAlgosAlgoVertexPolygon *algo = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getAlgoDispatcher])) newAlgoVertexPolygonWithOrgGeogebraCommonKernelConstruction:cons_ withNSStringArray:[c getLabels] withOrgGeogebraCommonKernelGeosGeoPoly:(id<OrgGeogebraCommonKernelGeosGeoPoly>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelGeosGeoPoly))];
      return [((OrgGeogebraCommonKernelAlgosAlgoVertexPolygon *) nil_chk(algo)) getVertex];
    }
    if ([IOSObjectArray_Get(arg, 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunctionNVar class]]) {
      OrgGeogebraCommonKernelAlgosAlgoVertexIneq *algo = new_OrgGeogebraCommonKernelAlgosAlgoVertexIneq_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_(cons_, [c getLabels], (OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoFunctionNVar class]));
      return [algo getVertex];
    }
    else if ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 0)]) {
      IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([self cornerOfDrawingPadWithNSString:[c getLabel] withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue)) withOrgGeogebraCommonKernelArithmeticNumberValue:nil], [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else {
      @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    }
    case 2:
    arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([OrgGeogebraCommonKernelGeosGeoPoly_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)])) && (*IOSBooleanArray_GetRef(ok, 1) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)]))) {
      OrgGeogebraCommonKernelAlgosAlgoVertexPolygon *algo = [self newAlgoVertexPolygonWithOrgGeogebraCommonKernelConstruction:cons_ withNSString:[c getLabel] withOrgGeogebraCommonKernelGeosGeoPoly:(id<OrgGeogebraCommonKernelGeosGeoPoly>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelGeosGeoPoly)) withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))];
      IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoVertexPolygon *) nil_chk(algo)) getOneVertex], [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImage])) && (*IOSBooleanArray_GetRef(ok, 1) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)]))) {
      OrgGeogebraCommonKernelAlgosAlgoImageCorner *algo = new_OrgGeogebraCommonKernelAlgosAlgoImageCorner_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoImage_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, [c getLabel], (OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoImage class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue)));
      IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ [algo getCorner] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoText])) && (*IOSBooleanArray_GetRef(ok, 1) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)]))) {
      OrgGeogebraCommonKernelAlgosAlgoTextCorner *algo = new_OrgGeogebraCommonKernelAlgosAlgoTextCorner_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, [c getLabel], (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoText class]), (id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue)));
      IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ [algo getCorner] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 0)])) && (*IOSBooleanArray_GetRef(ok, 1) = ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)]))) {
      IOSObjectArray *ret = [IOSObjectArray newArrayWithObjects:(id[]){ (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([self cornerOfDrawingPadWithNSString:[c getLabel] withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue)) withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))], [OrgGeogebraCommonKernelGeosGeoElement class]) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else {
      @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
    }
    default:
    @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)cornerOfDrawingPadWithNSString:(NSString *)label
                               withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)number
                               withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)ev {
  OrgGeogebraCommonKernelAlgosAlgoDrawingPadCorner *algo = new_OrgGeogebraCommonKernelAlgosAlgoDrawingPadCorner_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, number, ev);
  return [algo getCorner];
}

- (OrgGeogebraCommonKernelAlgosAlgoVertexPolygon *)newAlgoVertexPolygonWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                                                                  withNSString:(NSString *)label
                                                                        withOrgGeogebraCommonKernelGeosGeoPoly:(id<OrgGeogebraCommonKernelGeosGeoPoly>)p
                                                                 withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)v {
  return new_OrgGeogebraCommonKernelAlgosAlgoVertexPolygon_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoly_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, label, p, v);
}

- (OrgGeogebraCommonKernelAlgosAlgoVertexConic *)newAlgoVertexConicWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                                                         withNSStringArray:(IOSObjectArray *)labels
                                                             withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)conic {
  return new_OrgGeogebraCommonKernelAlgosAlgoVertexConic_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoConicND_(cons, labels, conic);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdVertex", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;", NULL },
    { "cornerOfDrawingPadWithNSString:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "cornerOfDrawingPad", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "newAlgoVertexPolygonWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoPoly:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "newAlgoVertexPolygon", "Lorg.geogebra.common.kernel.algos.AlgoVertexPolygon;", 0x4, NULL, NULL },
    { "newAlgoVertexConicWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "newAlgoVertexConic", "Lorg.geogebra.common.kernel.algos.AlgoVertexConic;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCommandsCmdVertex = { 2, "CmdVertex", "org.geogebra.common.kernel.commands", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCommandsCmdVertex;
}

@end

void OrgGeogebraCommonKernelCommandsCmdVertex_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelCommandsCmdVertex *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCommandProcessor_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelCommandsCmdVertex *new_OrgGeogebraCommonKernelCommandsCmdVertex_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCmdVertex *self = [OrgGeogebraCommonKernelCommandsCmdVertex alloc];
  OrgGeogebraCommonKernelCommandsCmdVertex_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCommandsCmdVertex)
