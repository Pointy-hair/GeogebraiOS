//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/locusequ/elements/EquationIntersectSingleRestriction.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersect.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectSingle.h"
#include "org/geogebra/common/kernel/algos/EquationElementInterface.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/locusequ/EquationList.h"
#include "org/geogebra/common/kernel/locusequ/EquationPoint.h"
#include "org/geogebra/common/kernel/locusequ/EquationRestriction.h"
#include "org/geogebra/common/kernel/locusequ/EquationScope.h"
#include "org/geogebra/common/kernel/locusequ/elements/EquationIntersectRestriction.h"
#include "org/geogebra/common/kernel/locusequ/elements/EquationIntersectSingleRestriction.h"

@interface OrgGeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction () {
 @public
  OrgGeogebraCommonKernelLocusequEquationRestriction *internalRestriction_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction, internalRestriction_, OrgGeogebraCommonKernelLocusequEquationRestriction *)

@implementation OrgGeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
          withOrgGeogebraCommonKernelAlgosAlgoIntersectSingle:(OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *)algo
             withOrgGeogebraCommonKernelLocusequEquationScope:(OrgGeogebraCommonKernelLocusequEquationScope *)scope {
  OrgGeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction_initWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelAlgosAlgoIntersectSingle_withOrgGeogebraCommonKernelLocusequEquationScope_(self, geo, algo, scope);
  return self;
}

- (void)computeEquationList {
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *algo = (OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *) check_class_cast([self getAlgo], [OrgGeogebraCommonKernelAlgosAlgoIntersectSingle class]);
  OrgGeogebraCommonKernelLocusequEquationPoint *actualPoint = [((OrgGeogebraCommonKernelLocusequEquationScope *) nil_chk([self getScope])) getPointWithOrgGeogebraCommonKernelGeosGeoPoint:[((OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *) nil_chk(algo)) getPoint]];
  [self setEquationListWithOrgGeogebraCommonKernelLocusequEquationList:[((OrgGeogebraCommonKernelLocusequEquationRestriction *) nil_chk(self->internalRestriction_)) forPointWithOrgGeogebraCommonKernelLocusequEquationPoint:actualPoint]];
}

- (OrgGeogebraCommonKernelLocusequEquationList *)forPointImplWithOrgGeogebraCommonKernelLocusequEquationPoint:(OrgGeogebraCommonKernelLocusequEquationPoint *)p {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelAlgosAlgoIntersectSingle:withOrgGeogebraCommonKernelLocusequEquationScope:", "EquationIntersectSingleRestriction", NULL, 0x1, NULL, NULL },
    { "computeEquationList", NULL, "V", 0x4, NULL, NULL },
    { "forPointImplWithOrgGeogebraCommonKernelLocusequEquationPoint:", "forPointImpl", "Lorg.geogebra.common.kernel.locusequ.EquationList;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "internalRestriction_", NULL, 0x2, "Lorg.geogebra.common.kernel.locusequ.EquationRestriction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction = { 2, "EquationIntersectSingleRestriction", "org.geogebra.common.kernel.locusequ.elements", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction;
}

@end

void OrgGeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction_initWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelAlgosAlgoIntersectSingle_withOrgGeogebraCommonKernelLocusequEquationScope_(OrgGeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction *self, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *algo, OrgGeogebraCommonKernelLocusequEquationScope *scope) {
  (void) OrgGeogebraCommonKernelLocusequElementsEquationIntersectRestriction_initWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelLocusequEquationScope_(self, geo, algo, scope);
  self->internalRestriction_ = (OrgGeogebraCommonKernelLocusequEquationRestriction *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoIntersect *) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *) nil_chk(algo)) getAlgo])) buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonKernelAlgosEquationScopeInterface:scope], [OrgGeogebraCommonKernelLocusequEquationRestriction class]);
}

OrgGeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction *new_OrgGeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction_initWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelAlgosAlgoIntersectSingle_withOrgGeogebraCommonKernelLocusequEquationScope_(OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *algo, OrgGeogebraCommonKernelLocusequEquationScope *scope) {
  OrgGeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction *self = [OrgGeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction alloc];
  OrgGeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction_initWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelAlgosAlgoIntersectSingle_withOrgGeogebraCommonKernelLocusequEquationScope_(self, geo, algo, scope);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction)
