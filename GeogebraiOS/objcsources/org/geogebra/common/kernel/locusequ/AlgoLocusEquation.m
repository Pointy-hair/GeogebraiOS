//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/locusequ/AlgoLocusEquation.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/locusequ/AlgoLocusEquation.h"
#include "org/geogebra/common/kernel/locusequ/CASTranslator.h"
#include "org/geogebra/common/kernel/locusequ/EquationAuxiliarSymbolicPoint.h"
#include "org/geogebra/common/kernel/locusequ/EquationHelpers.h"
#include "org/geogebra/common/kernel/locusequ/EquationList.h"
#include "org/geogebra/common/kernel/locusequ/EquationPoint.h"
#include "org/geogebra/common/kernel/locusequ/EquationScope.h"
#include "org/geogebra/common/kernel/locusequ/EquationSystem.h"
#include "org/geogebra/common/kernel/locusequ/EquationTranslator.h"
#include "org/geogebra/common/kernel/locusequ/arith/Equation.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelLocusequAlgoLocusEquation () {
 @public
  OrgGeogebraCommonKernelGeosGeoPoint *movingPoint_, *locusPoint_;
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly *geoPoly_;
  IOSObjectArray *efficientInput_AlgoLocusEquation_, *standardInput_;
  OrgGeogebraCommonKernelLocusequEquationSystem *old_system_;
}

- (OrgGeogebraCommonKernelLocusequEquationSystem *)getOriginalIdeal;

+ (void)addAlgoIfNotVisitedWithOrgGeogebraCommonKernelLocusequEquationList:(OrgGeogebraCommonKernelLocusequEquationList *)restrictions
                               withOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algo
                          withOrgGeogebraCommonKernelLocusequEquationScope:(OrgGeogebraCommonKernelLocusequEquationScope *)scope
                                                           withJavaUtilSet:(id<JavaUtilSet>)visitedAlgos;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelLocusequAlgoLocusEquation, movingPoint_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelLocusequAlgoLocusEquation, locusPoint_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelLocusequAlgoLocusEquation, geoPoly_, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelLocusequAlgoLocusEquation, efficientInput_AlgoLocusEquation_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelLocusequAlgoLocusEquation, standardInput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelLocusequAlgoLocusEquation, old_system_, OrgGeogebraCommonKernelLocusequEquationSystem *)

__attribute__((unused)) static OrgGeogebraCommonKernelLocusequEquationSystem *OrgGeogebraCommonKernelLocusequAlgoLocusEquation_getOriginalIdeal(OrgGeogebraCommonKernelLocusequAlgoLocusEquation *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelLocusequAlgoLocusEquation_addAlgoIfNotVisitedWithOrgGeogebraCommonKernelLocusequEquationList_withOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelLocusequEquationScope_withJavaUtilSet_(OrgGeogebraCommonKernelLocusequEquationList *restrictions, OrgGeogebraCommonKernelAlgosAlgoElement *algo, OrgGeogebraCommonKernelLocusequEquationScope *scope, id<JavaUtilSet> visitedAlgos);

NSString *OrgGeogebraCommonKernelLocusequAlgoLocusEquation_CLASS_NAME_ = @"AlgoLocusEqu";

@implementation OrgGeogebraCommonKernelLocusequAlgoLocusEquation

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)locusPoint
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)movingPoint {
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, cons, label, locusPoint, movingPoint);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)locusPoint
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)movingPoint {
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, cons, locusPoint, movingPoint);
  return self;
}

- (void)setInputOutput {
  JavaUtilTreeSet *inSet = [new_JavaUtilTreeSet_init() autorelease];
  [inSet addWithId:[((id<OrgGeogebraCommonKernelPath>) nil_chk([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->movingPoint_)) getPath])) toGeoElement]];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->locusPoint_)) getAllPredecessors])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent] || [geo isPointOnPath]) {
      [inSet addWithId:geo];
    }
  }
  [inSet removeWithId:movingPoint_];
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_setAndConsume_efficientInput_AlgoLocusEquation_(self, [IOSObjectArray newArrayWithLength:[inSet size] type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_set_efficientInput_AlgoLocusEquation_(self, [inSet toArrayWithNSObjectArray:efficientInput_AlgoLocusEquation_]);
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_setAndConsume_standardInput_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(standardInput_, 0, self->locusPoint_);
  IOSObjectArray_Set(standardInput_, 1, self->movingPoint_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:self->geoPoly_];
  [self setEfficientDependenciesWithOrgGeogebraCommonKernelGeosGeoElementArray:standardInput_ withOrgGeogebraCommonKernelGeosGeoElementArray:efficientInput_AlgoLocusEquation_];
}

- (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)getPoly {
  return self->geoPoly_;
}

- (void)compute {
  OrgGeogebraCommonKernelLocusequEquationSystem *system = OrgGeogebraCommonKernelLocusequAlgoLocusEquation_getOriginalIdeal(self);
  if (self->geoPoly_ != nil && [self->geoPoly_ isDefined] && system != nil && [system looksSameWithOrgGeogebraCommonKernelLocusequEquationSystem:old_system_]) {
    return;
  }
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_set_old_system_(self, system);
  if (system != nil) {
    OrgGeogebraCommonKernelLocusequEquationTranslator *trans = [new_OrgGeogebraCommonKernelLocusequCASTranslator_initWithOrgGeogebraCommonKernelKernel_([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getKernel]) autorelease];
    @try {
      [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->geoPoly_)) setCoeffWithDoubleArray2:[trans eliminateSystemWithOrgGeogebraCommonKernelLocusequEquationSystem:system]];
      [self->geoPoly_ setDefined];
    }
    @catch (JavaLangException *e) {
      [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->geoPoly_)) setUndefined];
    }
  }
  else {
    [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->geoPoly_)) setUndefined];
  }
}

- (OrgGeogebraCommonKernelLocusequEquationSystem *)getOriginalIdeal {
  return OrgGeogebraCommonKernelLocusequAlgoLocusEquation_getOriginalIdeal(self);
}

+ (void)addAlgoIfNotVisitedWithOrgGeogebraCommonKernelLocusequEquationList:(OrgGeogebraCommonKernelLocusequEquationList *)restrictions
                               withOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algo
                          withOrgGeogebraCommonKernelLocusequEquationScope:(OrgGeogebraCommonKernelLocusequEquationScope *)scope
                                                           withJavaUtilSet:(id<JavaUtilSet>)visitedAlgos {
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_addAlgoIfNotVisitedWithOrgGeogebraCommonKernelLocusequEquationList_withOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelLocusequEquationScope_withJavaUtilSet_(restrictions, algo, scope, visitedAlgos);
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_LocusEquation();
}

- (void)dealloc {
  RELEASE_(movingPoint_);
  RELEASE_(locusPoint_);
  RELEASE_(geoPoly_);
  RELEASE_(efficientInput_AlgoLocusEquation_);
  RELEASE_(standardInput_);
  RELEASE_(old_system_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "AlgoLocusEquation", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "AlgoLocusEquation", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getPoly", NULL, "Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getOriginalIdeal", NULL, "Lorg.geogebra.common.kernel.locusequ.EquationSystem;", 0x2, NULL, NULL },
    { "addAlgoIfNotVisitedWithOrgGeogebraCommonKernelLocusequEquationList:withOrgGeogebraCommonKernelAlgosAlgoElement:withOrgGeogebraCommonKernelLocusequEquationScope:withJavaUtilSet:", "addAlgoIfNotVisited", "V", 0xa, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "movingPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "locusPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "CLASS_NAME_", NULL, 0x19, "Ljava.lang.String;", &OrgGeogebraCommonKernelLocusequAlgoLocusEquation_CLASS_NAME_, NULL,  },
    { "geoPoly_", NULL, 0x2, "Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
    { "efficientInput_AlgoLocusEquation_", "efficientInput", 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "standardInput_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "old_system_", NULL, 0x2, "Lorg.geogebra.common.kernel.locusequ.EquationSystem;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelLocusequAlgoLocusEquation = { 2, "AlgoLocusEquation", "org.geogebra.common.kernel.locusequ", NULL, 0x1, 8, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelLocusequAlgoLocusEquation;
}

@end

void OrgGeogebraCommonKernelLocusequAlgoLocusEquation_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelLocusequAlgoLocusEquation *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *locusPoint, OrgGeogebraCommonKernelGeosGeoPoint *movingPoint) {
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, cons, locusPoint, movingPoint);
  [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->geoPoly_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelLocusequAlgoLocusEquation *new_OrgGeogebraCommonKernelLocusequAlgoLocusEquation_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *locusPoint, OrgGeogebraCommonKernelGeosGeoPoint *movingPoint) {
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation *self = [OrgGeogebraCommonKernelLocusequAlgoLocusEquation alloc];
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, cons, label, locusPoint, movingPoint);
  return self;
}

void OrgGeogebraCommonKernelLocusequAlgoLocusEquation_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelLocusequAlgoLocusEquation *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoPoint *locusPoint, OrgGeogebraCommonKernelGeosGeoPoint *movingPoint) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_set_old_system_(self, nil);
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_set_movingPoint_(self, movingPoint);
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_set_locusPoint_(self, locusPoint);
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_setAndConsume_geoPoly_(self, new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self compute];
}

OrgGeogebraCommonKernelLocusequAlgoLocusEquation *new_OrgGeogebraCommonKernelLocusequAlgoLocusEquation_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoPoint *locusPoint, OrgGeogebraCommonKernelGeosGeoPoint *movingPoint) {
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation *self = [OrgGeogebraCommonKernelLocusequAlgoLocusEquation alloc];
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, cons, locusPoint, movingPoint);
  return self;
}

OrgGeogebraCommonKernelLocusequEquationSystem *OrgGeogebraCommonKernelLocusequAlgoLocusEquation_getOriginalIdeal(OrgGeogebraCommonKernelLocusequAlgoLocusEquation *self) {
  OrgGeogebraCommonKernelLocusequEquationScope *scope = [new_OrgGeogebraCommonKernelLocusequEquationScope_initWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self->locusPoint_, self->movingPoint_) autorelease];
  IOSObjectArray *points = OrgGeogebraCommonKernelLocusequEquationHelpers_getDependentPredecessorPointsForElementWithOrgGeogebraCommonKernelGeosGeoElement_(self->locusPoint_);
  OrgGeogebraCommonKernelLocusequEquationPoint *pequ;
  OrgGeogebraCommonKernelLocusequEquationList *restrictions = [new_OrgGeogebraCommonKernelLocusequEquationList_init() autorelease];
  OrgGeogebraCommonKernelAlgosAlgoElement *algo;
  id<JavaUtilSet> visitedAlgos = [new_JavaUtilHashSet_init() autorelease];
  jboolean constructionIsFeasible = YES;
  {
    IOSObjectArray *a__ = points;
    OrgGeogebraCommonKernelGeosGeoPoint * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgGeogebraCommonKernelGeosGeoPoint * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonKernelGeosGeoPoint *p = *b__++;
      pequ = [scope getPointWithOrgGeogebraCommonKernelGeosGeoPoint:p];
      if (![((OrgGeogebraCommonKernelLocusequEquationPoint *) nil_chk(pequ)) isIndependent]) {
        OrgGeogebraCommonKernelLocusequAlgoLocusEquation_addAlgoIfNotVisitedWithOrgGeogebraCommonKernelLocusequEquationList_withOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelLocusequEquationScope_withJavaUtilSet_(restrictions, [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) getParentAlgorithm], scope, visitedAlgos);
        if ([p getParentAlgorithm] != nil && ![((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([p getParentAlgorithm])) isLocusEquable]) {
          constructionIsFeasible = NO;
          break;
        }
        for (id __strong algoObj in nil_chk([p getAlgorithmList])) {
          algo = (OrgGeogebraCommonKernelAlgosAlgoElement *) check_class_cast(algoObj, [OrgGeogebraCommonKernelAlgosAlgoElement class]);
          OrgGeogebraCommonKernelLocusequAlgoLocusEquation_addAlgoIfNotVisitedWithOrgGeogebraCommonKernelLocusequEquationList_withOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelLocusequEquationScope_withJavaUtilSet_(restrictions, algo, scope, visitedAlgos);
        }
      }
    }
  }
  if (constructionIsFeasible) {
    for (OrgGeogebraCommonKernelLocusequEquationAuxiliarSymbolicPoint * __strong p in nil_chk([scope getAuxiliarSymbolicPoints])) {
      [restrictions addAllWithJavaUtilCollection:[((OrgGeogebraCommonKernelLocusequEquationAuxiliarSymbolicPoint *) nil_chk(p)) getRestrictions]];
    }
    return [new_OrgGeogebraCommonKernelLocusequEquationSystem_initWithOrgGeogebraCommonKernelLocusequEquationList_withOrgGeogebraCommonKernelLocusequEquationScope_(restrictions, scope) autorelease];
  }
  return nil;
}

void OrgGeogebraCommonKernelLocusequAlgoLocusEquation_addAlgoIfNotVisitedWithOrgGeogebraCommonKernelLocusequEquationList_withOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelLocusequEquationScope_withJavaUtilSet_(OrgGeogebraCommonKernelLocusequEquationList *restrictions, OrgGeogebraCommonKernelAlgosAlgoElement *algo, OrgGeogebraCommonKernelLocusequEquationScope *scope, id<JavaUtilSet> visitedAlgos) {
  OrgGeogebraCommonKernelLocusequAlgoLocusEquation_initialize();
  if (![((id<JavaUtilSet>) nil_chk(visitedAlgos)) containsWithId:algo]) {
    [visitedAlgos addWithId:algo];
    OrgGeogebraCommonKernelLocusequEquationList *eqs = [((OrgGeogebraCommonKernelLocusequEquationScope *) nil_chk(scope)) getRestrictionsFromAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:algo];
    OrgGeogebraCommonMainApp_debugWithNSString_(@"[LocusEqu] Restrictions init");
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"[LocusEqu] Construction ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutput]), 0))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]));
    for (OrgGeogebraCommonKernelLocusequArithEquation * __strong eq in nil_chk(eqs)) {
      OrgGeogebraCommonMainApp_debugWithNSString_([((OrgGeogebraCommonKernelLocusequArithEquation *) nil_chk(eq)) description]);
    }
    OrgGeogebraCommonMainApp_debugWithNSString_(@"[LocusEqu] Restrictions end");
    [((OrgGeogebraCommonKernelLocusequEquationList *) nil_chk(restrictions)) addAllWithJavaUtilCollection:eqs];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelLocusequAlgoLocusEquation)
