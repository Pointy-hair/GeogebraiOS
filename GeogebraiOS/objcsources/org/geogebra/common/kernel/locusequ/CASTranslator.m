//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/locusequ/CASTranslator.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gwt/regexp/shared/MatchResult.h"
#include "com/google/gwt/regexp/shared/RegExp.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/geogebra/common/cas/GeoGebraCAS.h"
#include "org/geogebra/common/cas/giac/CASgiac.h"
#include "org/geogebra/common/cas/singularws/SingularWebService.h"
#include "org/geogebra/common/kernel/CASException.h"
#include "org/geogebra/common/kernel/CASGenericInterface.h"
#include "org/geogebra/common/kernel/GeoGebraCasInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/locusequ/CASTranslator.h"
#include "org/geogebra/common/kernel/locusequ/EquationList.h"
#include "org/geogebra/common/kernel/locusequ/EquationSystem.h"
#include "org/geogebra/common/kernel/locusequ/EquationTranslator.h"
#include "org/geogebra/common/kernel/locusequ/arith/Equation.h"
#include "org/geogebra/common/kernel/locusequ/arith/EquationExpression.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonKernelLocusequCASTranslator () {
 @public
  id<JavaUtilSet> varsToEliminate_;
  OrgGeogebraCommonKernelKernel *kernel_;
}

- (NSString *)createSingularScriptWithJavaUtilCollection:(id<JavaUtilCollection>)restrictions;

+ (NSString *)constructRestrictionsWithJavaUtilCollection:(id<JavaUtilCollection>)restrictions;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelLocusequCASTranslator, varsToEliminate_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelLocusequCASTranslator, kernel_, OrgGeogebraCommonKernelKernel *)

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelLocusequCASTranslator_createSingularScriptWithJavaUtilCollection_(OrgGeogebraCommonKernelLocusequCASTranslator *self, id<JavaUtilCollection> restrictions);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelLocusequCASTranslator_constructRestrictionsWithJavaUtilCollection_(id<JavaUtilCollection> restrictions);

@implementation OrgGeogebraCommonKernelLocusequCASTranslator

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelLocusequCASTranslator_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (NSString *)getVarsToEliminate {
  JavaLangStringBuilder *varsString = [new_JavaLangStringBuilder_initWithInt_([((id<JavaUtilSet>) nil_chk(varsToEliminate_)) size]) autorelease];
  IOSObjectArray *vars = [varsToEliminate_ toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[varsToEliminate_ size] type:NSString_class_()]];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(vars))->size_; i++) {
    [varsString appendWithNSString:IOSObjectArray_Get(vars, i)];
    if (i < vars->size_ - 1) {
      [varsString appendWithNSString:@","];
    }
  }
  return [varsString description];
}

- (NSString *)getVars {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"x,y,") autorelease]) appendWithNSString:[self getVarsToEliminate]])) description];
}

- (id<JavaUtilCollection>)translateWithOrgGeogebraCommonKernelLocusequEquationSystem:(OrgGeogebraCommonKernelLocusequEquationSystem *)system {
  [self setSystemWithOrgGeogebraCommonKernelLocusequEquationSystem:system];
  id<JavaUtilList> restrictions = [new_JavaUtilArrayList_initWithInt_([((OrgGeogebraCommonKernelLocusequEquationList *) nil_chk([((OrgGeogebraCommonKernelLocusequEquationSystem *) nil_chk([self getSystem])) getEquations])) size]) autorelease];
  for (OrgGeogebraCommonKernelLocusequArithEquation * __strong equ in nil_chk([((OrgGeogebraCommonKernelLocusequEquationSystem *) nil_chk(system)) getEquations])) {
    [restrictions addWithId:[((OrgGeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([((OrgGeogebraCommonKernelLocusequArithEquation *) nil_chk(equ)) getExpression])) translateWithOrgGeogebraCommonKernelLocusequEquationTranslator:self]];
  }
  return restrictions;
}

- (OrgGeogebraCommonKernelLocusequEquationList *)getLocus {
  return nil;
}

- (JavaLangStringBuilder *)absWithId:(JavaLangStringBuilder *)value {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"abs(") autorelease]) appendWithJavaLangCharSequence:value])) appendWithNSString:@")"];
}

- (JavaLangStringBuilder *)sumWithId:(JavaLangStringBuilder *)a
                              withId:(JavaLangStringBuilder *)b {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"(") autorelease]) appendWithJavaLangCharSequence:a])) appendWithNSString:@"+"])) appendWithJavaLangCharSequence:b])) appendWithNSString:@")"];
}

- (JavaLangStringBuilder *)diffWithId:(JavaLangStringBuilder *)a
                               withId:(JavaLangStringBuilder *)b {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"(") autorelease]) appendWithJavaLangCharSequence:a])) appendWithNSString:@"-"])) appendWithJavaLangCharSequence:b])) appendWithNSString:@")"];
}

- (JavaLangStringBuilder *)productWithId:(JavaLangStringBuilder *)a
                                  withId:(JavaLangStringBuilder *)b {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"(") autorelease]) appendWithJavaLangCharSequence:a])) appendWithNSString:@"*"])) appendWithJavaLangCharSequence:b])) appendWithNSString:@")"];
}

- (JavaLangStringBuilder *)divWithId:(JavaLangStringBuilder *)num
                              withId:(JavaLangStringBuilder *)denom {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"(") autorelease]) appendWithJavaLangCharSequence:num])) appendWithNSString:@"/"])) appendWithJavaLangCharSequence:denom])) appendWithNSString:@")"];
}

- (JavaLangStringBuilder *)expWithId:(JavaLangStringBuilder *)base
                            withLong:(jlong)exp {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"(") autorelease]) appendWithJavaLangCharSequence:base])) appendWithNSString:@"**"])) appendWithLong:exp])) appendWithNSString:@")"];
}

- (JavaLangStringBuilder *)inverseWithId:(JavaLangStringBuilder *)value {
  return [self divWithId:[new_JavaLangStringBuilder_initWithNSString_(@"1") autorelease] withId:value];
}

- (JavaLangStringBuilder *)numberWithDouble:(jdouble)number {
  OrgGeogebraCommonKernelArithmeticMyDouble *md = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, number) autorelease];
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"(") autorelease]) appendWithNSString:[md toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]])) appendWithNSString:@")"];
}

- (JavaLangStringBuilder *)auxiliarSymbolicWithInt:(jint)id_ {
  JavaLangStringBuilder *var = [((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"y") autorelease]) appendWithInt:id_];
  [((id<JavaUtilSet>) nil_chk(self->varsToEliminate_)) addWithId:[((JavaLangStringBuilder *) nil_chk(var)) description]];
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"(") autorelease]) appendWithJavaLangCharSequence:var])) appendWithNSString:@")"];
}

- (JavaLangStringBuilder *)specialSymbolicWithInt:(jint)id_ {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"(") autorelease]) appendWithNSString:(id_ == 1) ? @"x" : @"y"])) appendWithNSString:@")"];
}

- (JavaLangStringBuilder *)symbolicWithInt:(jint)id_ {
  JavaLangStringBuilder *var = [((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"x") autorelease]) appendWithInt:id_];
  [((id<JavaUtilSet>) nil_chk(self->varsToEliminate_)) addWithId:[((JavaLangStringBuilder *) nil_chk(var)) description]];
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"(") autorelease]) appendWithJavaLangCharSequence:var])) appendWithNSString:@")"];
}

- (JavaLangStringBuilder *)oppositeWithId:(JavaLangStringBuilder *)value {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"(-") autorelease]) appendWithJavaLangCharSequence:value])) appendWithNSString:@")"];
}

- (JavaLangStringBuilder *)sqrtWithId:(JavaLangStringBuilder *)value {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) [new_JavaLangStringBuilder_initWithNSString_(@"(sqrt(") autorelease]) appendWithJavaLangCharSequence:value])) appendWithNSString:@"))"];
}

- (IOSObjectArray *)eliminateWithJavaUtilCollection:(id<JavaUtilCollection>)translatedRestrictions {
  NSString *script, *result;
  if (OrgGeogebraCommonMainApp_get_singularWS_() != nil && [OrgGeogebraCommonMainApp_get_singularWS_() isAvailable] && [OrgGeogebraCommonMainApp_get_singularWS_() isFast]) {
    script = OrgGeogebraCommonKernelLocusequCASTranslator_createSingularScriptWithJavaUtilCollection_(self, translatedRestrictions);
    OrgGeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$", @"[LocusEqu] input to singular: ", script));
    @try {
      result = [OrgGeogebraCommonMainApp_get_singularWS_() directCommandWithNSString:script];
    }
    @catch (JavaLangThrowable *e) {
      @throw [new_OrgGeogebraCommonKernelCASException_initWithNSString_(@"Error in SingularWS computation") autorelease];
    }
    OrgGeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$", @"[LocusEqu] output from singular: ", result));
    return OrgGeogebraCommonKernelLocusequCASTranslator_getBivarPolyCoefficientsSingularWithNSString_(result);
  }
  OrgGeogebraCommonCasGeoGebraCAS *cas = (OrgGeogebraCommonCasGeoGebraCAS *) check_class_cast([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS], [OrgGeogebraCommonCasGeoGebraCAS class]);
  script = [((id<OrgGeogebraCommonKernelCASGenericInterface>) nil_chk([((OrgGeogebraCommonCasGeoGebraCAS *) nil_chk(cas)) getCurrentCAS])) createLocusEquationScriptWithNSString:OrgGeogebraCommonKernelLocusequCASTranslator_convertFloatsToRationalsWithNSString_(OrgGeogebraCommonKernelLocusequCASTranslator_constructRestrictionsWithJavaUtilCollection_(translatedRestrictions)) withNSString:[self getVars] withNSString:[self getVarsToEliminate]];
  OrgGeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$", @"[LocusEqu] input to cas: ", script));
  @try {
    [cas evaluateRawWithNSString:OrgGeogebraCommonCasGiacCASgiac_get_closeString_()];
  }
  @catch (JavaLangThrowable *e) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
  }
  result = [cas evaluateWithNSString:script];
  @try {
    [cas evaluateRawWithNSString:OrgGeogebraCommonCasGiacCASgiac_get_initString_()];
  }
  @catch (JavaLangThrowable *e) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
  }
  OrgGeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$", @"[LocusEqu] output from cas: ", result));
  return [((id<OrgGeogebraCommonKernelCASGenericInterface>) nil_chk([cas getCurrentCAS])) getBivarPolyCoefficientsWithNSString:result withOrgGeogebraCommonCasGeoGebraCAS:cas];
}

+ (IOSObjectArray *)getBivarPolyCoefficientsSingularWithNSString:(NSString *)rawResult {
  return OrgGeogebraCommonKernelLocusequCASTranslator_getBivarPolyCoefficientsSingularWithNSString_(rawResult);
}

- (NSString *)createSingularScriptWithJavaUtilCollection:(id<JavaUtilCollection>)restrictions {
  return OrgGeogebraCommonKernelLocusequCASTranslator_createSingularScriptWithJavaUtilCollection_(self, restrictions);
}

+ (NSString *)constructRestrictionsWithJavaUtilCollection:(id<JavaUtilCollection>)restrictions {
  return OrgGeogebraCommonKernelLocusequCASTranslator_constructRestrictionsWithJavaUtilCollection_(restrictions);
}

+ (NSString *)convertFloatsToRationalsWithNSString:(NSString *)input {
  return OrgGeogebraCommonKernelLocusequCASTranslator_convertFloatsToRationalsWithNSString_(input);
}

- (void)dealloc {
  RELEASE_(varsToEliminate_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CASTranslator", NULL, 0x1, NULL, NULL },
    { "getVarsToEliminate", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getVars", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "translateWithOrgGeogebraCommonKernelLocusequEquationSystem:", "translate", "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getLocus", NULL, "Lorg.geogebra.common.kernel.locusequ.EquationList;", 0x1, NULL, NULL },
    { "absWithId:", "abs", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "sumWithId:withId:", "sum", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "diffWithId:withId:", "diff", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "productWithId:withId:", "product", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "divWithId:withId:", "div", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "expWithId:withLong:", "exp", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "inverseWithId:", "inverse", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "numberWithDouble:", "number", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "auxiliarSymbolicWithInt:", "auxiliarSymbolic", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "specialSymbolicWithInt:", "specialSymbolic", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "symbolicWithInt:", "symbolic", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "oppositeWithId:", "opposite", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "sqrtWithId:", "sqrt", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "eliminateWithJavaUtilCollection:", "eliminate", "[[D", 0x1, NULL, NULL },
    { "getBivarPolyCoefficientsSingularWithNSString:", "getBivarPolyCoefficientsSingular", "[[D", 0x9, NULL, NULL },
    { "createSingularScriptWithJavaUtilCollection:", "createSingularScript", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "constructRestrictionsWithJavaUtilCollection:", "constructRestrictions", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "convertFloatsToRationalsWithNSString:", "convertFloatsToRationals", "Ljava.lang.String;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "varsToEliminate_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;",  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.StringBuilder;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelLocusequCASTranslator = { 2, "CASTranslator", "org.geogebra.common.kernel.locusequ", NULL, 0x1, 23, methods, 2, fields, 1, superclass_type_args, 0, NULL, NULL, "Lorg/geogebra/common/kernel/locusequ/EquationTranslator<Ljava/lang/StringBuilder;>;" };
  return &_OrgGeogebraCommonKernelLocusequCASTranslator;
}

@end

void OrgGeogebraCommonKernelLocusequCASTranslator_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelLocusequCASTranslator *self, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelLocusequEquationTranslator_init(self);
  OrgGeogebraCommonKernelLocusequCASTranslator_set_kernel_(self, kernel);
  OrgGeogebraCommonKernelLocusequCASTranslator_setAndConsume_varsToEliminate_(self, new_JavaUtilHashSet_init());
}

OrgGeogebraCommonKernelLocusequCASTranslator *new_OrgGeogebraCommonKernelLocusequCASTranslator_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelLocusequCASTranslator *self = [OrgGeogebraCommonKernelLocusequCASTranslator alloc];
  OrgGeogebraCommonKernelLocusequCASTranslator_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

IOSObjectArray *OrgGeogebraCommonKernelLocusequCASTranslator_getBivarPolyCoefficientsSingularWithNSString_(NSString *rawResult) {
  OrgGeogebraCommonKernelLocusequCASTranslator_initialize();
  IOSObjectArray *allrows = [((NSString *) nil_chk(rawResult)) split:@"\n"];
  IOSObjectArray *flatData = [((NSString *) nil_chk(IOSObjectArray_Get(allrows, ((IOSObjectArray *) nil_chk(allrows))->size_ - 1))) split:@","];
  jint xLength = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(flatData), 0));
  jint yLength = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(flatData, 1));
  IOSObjectArray *result = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ xLength, yLength }];
  jint counter = 2;
  for (jint x = 0; x < xLength; x++) {
    for (jint y = 0; y < yLength; y++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(result, x)), y) = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(flatData, counter));
      ++counter;
    }
  }
  return result;
}

NSString *OrgGeogebraCommonKernelLocusequCASTranslator_createSingularScriptWithJavaUtilCollection_(OrgGeogebraCommonKernelLocusequCASTranslator *self, id<JavaUtilCollection> restrictions) {
  JavaLangStringBuilder *script = [new_JavaLangStringBuilder_init() autorelease];
  NSString *locusLib = OrgGeogebraCommonCasSingularwsSingularWebService_getLocusLib();
  if (((jint) [((NSString *) nil_chk(locusLib)) length]) != 0) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([script appendWithNSString:JreStrcat("$$$$", @"LIB \"", locusLib, @".lib\";ring r=(0,x,y),(", [self getVarsToEliminate])])) appendWithNSString:@"),dp;"])) appendWithNSString:JreStrcat("$$", @"short=0;ideal I=", OrgGeogebraCommonKernelLocusequCASTranslator_convertFloatsToRationalsWithNSString_(OrgGeogebraCommonKernelLocusequCASTranslator_constructRestrictionsWithJavaUtilCollection_(restrictions)))])) appendWithNSString:JreStrcat("$$$", @";def Gp=grobcov(I);list l=", OrgGeogebraCommonCasSingularwsSingularWebService_getLocusCommand(), @"(Gp);")])) appendWithNSString:@"if(size(l)==0){print(\"1,1,1\");exit;}"])) appendWithNSString:@"poly pp=1; int i; for (i=1; i<=size(l); i++) { pp=pp*l[i][1][1]; }"])) appendWithNSString:@"string s=string(pp);int sl=size(s);string pg=\"poly p=\"+s[2,sl-2];"])) appendWithNSString:@"ring rr=0,(x,y),dp;execute(pg);"])) appendWithNSString:@"printf(\"%s,%s,%s\",size(coeffs(p,x)),size(coeffs(p,y)),"])) appendWithNSString:@"coeffs(coeffs(p,x),y));"])) description];
    OrgGeogebraCommonUtilDebugLog_debugWithId_(script);
    return [script description];
  }
  NSString *SINGULAR_COEFFS = @"0";
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([script appendWithNSString:JreStrcat("$$$", @"ring rr=", SINGULAR_COEFFS, @",(")])) appendWithNSString:[self getVars]])) appendWithNSString:@"),dp;ideal m="])) appendWithNSString:OrgGeogebraCommonKernelLocusequCASTranslator_convertFloatsToRationalsWithNSString_(OrgGeogebraCommonKernelLocusequCASTranslator_constructRestrictionsWithJavaUtilCollection_(restrictions))])) appendWithNSString:@";ideal m1=eliminate(m,"])) appendWithNSString:[((NSString *) nil_chk([self getVarsToEliminate])) replaceAll:@"," withReplacement:@"*"]])) appendWithNSString:@");printf(\"%s,%s,%s\",size(coeffs(m1,x)),size(coeffs(m1,y)),"])) appendWithNSString:@"coeffs(coeffs(m1,x),y));"])) description];
}

NSString *OrgGeogebraCommonKernelLocusequCASTranslator_constructRestrictionsWithJavaUtilCollection_(id<JavaUtilCollection> restrictions) {
  OrgGeogebraCommonKernelLocusequCASTranslator_initialize();
  JavaLangStringBuilder *equations = [new_JavaLangStringBuilder_init() autorelease];
  IOSObjectArray *rs = [restrictions toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilCollection>) nil_chk(restrictions)) size] type:JavaLangStringBuilder_class_()]];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(rs))->size_; i++) {
    [equations appendWithJavaLangCharSequence:IOSObjectArray_Get(rs, i)];
    if (i < rs->size_ - 1) {
      [equations appendWithNSString:@" , "];
    }
  }
  return [equations description];
}

NSString *OrgGeogebraCommonKernelLocusequCASTranslator_convertFloatsToRationalsWithNSString_(NSString *input) {
  OrgGeogebraCommonKernelLocusequCASTranslator_initialize();
  JavaLangStringBuffer *output = [new_JavaLangStringBuffer_init() autorelease];
  ComGoogleGwtRegexpSharedRegExp *re = ComGoogleGwtRegexpSharedRegExp_compileWithNSString_withNSString_(@"[\\d]+\\.[\\d]+", @"g");
  jint from = 0;
  for (ComGoogleGwtRegexpSharedMatchResult *mr = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(re)) execWithNSString:input]; mr != nil; mr = [re execWithNSString:input]) {
    NSString *number = [((ComGoogleGwtRegexpSharedMatchResult *) nil_chk(mr)) getGroupWithInt:0];
    if (from <= [mr getIndex] - 1) [output appendWithNSString:[((NSString *) nil_chk(input)) substring:from endIndex:[mr getIndex]]];
    [output appendWithNSString:OrgGeogebraCommonKernelStringTemplate_convertScientificNotationGiacWithNSString_(number)];
    from = [mr getIndex] + ((jint) [((NSString *) nil_chk(number)) length]);
  }
  [output appendWithNSString:[input substring:from endIndex:((jint) [((NSString *) nil_chk(input)) length])]];
  return [output description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelLocusequCASTranslator)
