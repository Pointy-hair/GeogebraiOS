//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/locusequ/arith/EquationExpOperator.java
//


#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/locusequ/EquationTranslator.h"
#include "org/geogebra/common/kernel/locusequ/arith/EquationBinaryOperator.h"
#include "org/geogebra/common/kernel/locusequ/arith/EquationExpOperator.h"
#include "org/geogebra/common/kernel/locusequ/arith/EquationExpression.h"

@implementation OrgGeogebraCommonKernelLocusequArithEquationExpOperator

- (instancetype)initWithOrgGeogebraCommonKernelLocusequArithEquationExpression:(OrgGeogebraCommonKernelLocusequArithEquationExpression *)base
                    withOrgGeogebraCommonKernelLocusequArithEquationExpression:(OrgGeogebraCommonKernelLocusequArithEquationExpression *)exp {
  OrgGeogebraCommonKernelLocusequArithEquationExpOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_withOrgGeogebraCommonKernelLocusequArithEquationExpression_(self, base, exp);
  return self;
}

- (OrgGeogebraCommonKernelLocusequArithEquationExpression *)getBase {
  return [super getFirstExpression];
}

- (OrgGeogebraCommonKernelLocusequArithEquationExpression *)getExp {
  return [super getSecondExpression];
}

- (jboolean)isExp {
  return YES;
}

- (jlong)toLong {
  return J2ObjCFpToLong(JavaLangMath_powWithDouble_withDouble_([((OrgGeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getBase])) toLong], [((OrgGeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getExp])) toLong]));
}

- (NSString *)description {
  return JreStrcat("C$C$C", '(', [((OrgGeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getBase])) description], '^', [((OrgGeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getExp])) description], ')');
}

- (jdouble)operationWithDouble:(jdouble)a
                    withDouble:(jdouble)b {
  if (a == 0 && b == 0) {
    return JavaLangDouble_NaN;
  }
  return JavaLangMath_powWithDouble_withDouble_(a, b);
}

- (id)translateImplWithOrgGeogebraCommonKernelLocusequEquationTranslator:(OrgGeogebraCommonKernelLocusequEquationTranslator *)translator {
  return [((OrgGeogebraCommonKernelLocusequEquationTranslator *) nil_chk(translator)) expWithId:[((OrgGeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getBase])) translateWithOrgGeogebraCommonKernelLocusequEquationTranslator:translator] withLong:[((OrgGeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getExp])) toLong]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelLocusequArithEquationExpression:withOrgGeogebraCommonKernelLocusequArithEquationExpression:", "EquationExpOperator", NULL, 0x1, NULL, NULL },
    { "getBase", NULL, "Lorg.geogebra.common.kernel.locusequ.arith.EquationExpression;", 0x1, NULL, NULL },
    { "getExp", NULL, "Lorg.geogebra.common.kernel.locusequ.arith.EquationExpression;", 0x1, NULL, NULL },
    { "isExp", NULL, "Z", 0x1, NULL, NULL },
    { "toLong", NULL, "J", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "operationWithDouble:withDouble:", "operation", "D", 0x4, NULL, NULL },
    { "translateImplWithOrgGeogebraCommonKernelLocusequEquationTranslator:", "translateImpl", "TT;", 0x4, NULL, "<T:Ljava/lang/Object;>(Lorg/geogebra/common/kernel/locusequ/EquationTranslator<TT;>;)TT;" },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelLocusequArithEquationExpOperator = { 2, "EquationExpOperator", "org.geogebra.common.kernel.locusequ.arith", NULL, 0x1, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelLocusequArithEquationExpOperator;
}

@end

void OrgGeogebraCommonKernelLocusequArithEquationExpOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_withOrgGeogebraCommonKernelLocusequArithEquationExpression_(OrgGeogebraCommonKernelLocusequArithEquationExpOperator *self, OrgGeogebraCommonKernelLocusequArithEquationExpression *base, OrgGeogebraCommonKernelLocusequArithEquationExpression *exp) {
  OrgGeogebraCommonKernelLocusequArithEquationBinaryOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_withOrgGeogebraCommonKernelLocusequArithEquationExpression_(self, base, exp);
}

OrgGeogebraCommonKernelLocusequArithEquationExpOperator *new_OrgGeogebraCommonKernelLocusequArithEquationExpOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_withOrgGeogebraCommonKernelLocusequArithEquationExpression_(OrgGeogebraCommonKernelLocusequArithEquationExpression *base, OrgGeogebraCommonKernelLocusequArithEquationExpression *exp) {
  OrgGeogebraCommonKernelLocusequArithEquationExpOperator *self = [OrgGeogebraCommonKernelLocusequArithEquationExpOperator alloc];
  OrgGeogebraCommonKernelLocusequArithEquationExpOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_withOrgGeogebraCommonKernelLocusequArithEquationExpression_(self, base, exp);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelLocusequArithEquationExpOperator)
