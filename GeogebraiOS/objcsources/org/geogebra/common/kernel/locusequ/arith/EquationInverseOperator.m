//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/locusequ/arith/EquationInverseOperator.java
//


#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Long.h"
#include "org/geogebra/common/kernel/locusequ/EquationTranslator.h"
#include "org/geogebra/common/kernel/locusequ/arith/EquationExpression.h"
#include "org/geogebra/common/kernel/locusequ/arith/EquationInverseOperator.h"
#include "org/geogebra/common/kernel/locusequ/arith/EquationUnaryOperator.h"

@implementation OrgGeogebraCommonKernelLocusequArithEquationInverseOperator

- (instancetype)initWithOrgGeogebraCommonKernelLocusequArithEquationExpression:(OrgGeogebraCommonKernelLocusequArithEquationExpression *)expr {
  OrgGeogebraCommonKernelLocusequArithEquationInverseOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_(self, expr);
  return self;
}

- (OrgGeogebraCommonKernelLocusequArithEquationExpression *)getInverse {
  return [self getOriginalExpression];
}

- (jdouble)operationWithDouble:(jdouble)a {
  if (a == 0) {
    return JavaLangDouble_NaN;
  }
  return 1 / a;
}

- (jlong)toLong {
  jlong value = [((OrgGeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getInverse])) toLong];
  if (value == 0) {
    return JavaLangLong_MAX_VALUE;
  }
  else if (value == 1) {
    return 1;
  }
  else {
    return 0;
  }
}

- (NSString *)description {
  return JreStrcat("$$C", @"(1/", [((OrgGeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getOriginalExpression])) description], ')');
}

- (jboolean)isInverse {
  return YES;
}

- (id)translateImplWithOrgGeogebraCommonKernelLocusequEquationTranslator:(OrgGeogebraCommonKernelLocusequEquationTranslator *)translator {
  return [((OrgGeogebraCommonKernelLocusequEquationTranslator *) nil_chk(translator)) inverseWithId:[((OrgGeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getOriginalExpression])) translateWithOrgGeogebraCommonKernelLocusequEquationTranslator:translator]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelLocusequArithEquationExpression:", "EquationInverseOperator", NULL, 0x1, NULL, NULL },
    { "getInverse", NULL, "Lorg.geogebra.common.kernel.locusequ.arith.EquationExpression;", 0x1, NULL, NULL },
    { "operationWithDouble:", "operation", "D", 0x4, NULL, NULL },
    { "toLong", NULL, "J", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isInverse", NULL, "Z", 0x1, NULL, NULL },
    { "translateImplWithOrgGeogebraCommonKernelLocusequEquationTranslator:", "translateImpl", "TT;", 0x4, NULL, "<T:Ljava/lang/Object;>(Lorg/geogebra/common/kernel/locusequ/EquationTranslator<TT;>;)TT;" },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelLocusequArithEquationInverseOperator = { 2, "EquationInverseOperator", "org.geogebra.common.kernel.locusequ.arith", NULL, 0x1, 7, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelLocusequArithEquationInverseOperator;
}

@end

void OrgGeogebraCommonKernelLocusequArithEquationInverseOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_(OrgGeogebraCommonKernelLocusequArithEquationInverseOperator *self, OrgGeogebraCommonKernelLocusequArithEquationExpression *expr) {
  OrgGeogebraCommonKernelLocusequArithEquationUnaryOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_(self, expr);
}

OrgGeogebraCommonKernelLocusequArithEquationInverseOperator *new_OrgGeogebraCommonKernelLocusequArithEquationInverseOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_(OrgGeogebraCommonKernelLocusequArithEquationExpression *expr) {
  OrgGeogebraCommonKernelLocusequArithEquationInverseOperator *self = [OrgGeogebraCommonKernelLocusequArithEquationInverseOperator alloc];
  OrgGeogebraCommonKernelLocusequArithEquationInverseOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_(self, expr);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelLocusequArithEquationInverseOperator)
