//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/locusequ/arith/EquationOppositeOperator.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/locusequ/EquationTranslator.h"
#include "org/geogebra/common/kernel/locusequ/arith/EquationExpression.h"
#include "org/geogebra/common/kernel/locusequ/arith/EquationOppositeOperator.h"
#include "org/geogebra/common/kernel/locusequ/arith/EquationUnaryOperator.h"

@implementation OrgGeogebraCommonKernelLocusequArithEquationOppositeOperator

- (instancetype)initWithOrgGeogebraCommonKernelLocusequArithEquationExpression:(OrgGeogebraCommonKernelLocusequArithEquationExpression *)expr {
  OrgGeogebraCommonKernelLocusequArithEquationOppositeOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_(self, expr);
  return self;
}

- (OrgGeogebraCommonKernelLocusequArithEquationExpression *)getOpposite {
  return [self getOriginalExpression];
}

- (jboolean)isOpposite {
  return YES;
}

- (jdouble)operationWithDouble:(jdouble)a {
  return -a;
}

- (jlong)toLong {
  return -[((OrgGeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getOriginalExpression])) toLong];
}

- (NSString *)description {
  return JreStrcat("C$", '-', [((OrgGeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getOriginalExpression])) description]);
}

- (id)translateImplWithOrgGeogebraCommonKernelLocusequEquationTranslator:(OrgGeogebraCommonKernelLocusequEquationTranslator *)translator {
  return [((OrgGeogebraCommonKernelLocusequEquationTranslator *) nil_chk(translator)) oppositeWithId:[((OrgGeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getOriginalExpression])) translateWithOrgGeogebraCommonKernelLocusequEquationTranslator:translator]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelLocusequArithEquationExpression:", "EquationOppositeOperator", NULL, 0x1, NULL, NULL },
    { "getOpposite", NULL, "Lorg.geogebra.common.kernel.locusequ.arith.EquationExpression;", 0x1, NULL, NULL },
    { "isOpposite", NULL, "Z", 0x1, NULL, NULL },
    { "operationWithDouble:", "operation", "D", 0x4, NULL, NULL },
    { "toLong", NULL, "J", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "translateImplWithOrgGeogebraCommonKernelLocusequEquationTranslator:", "translateImpl", "TT;", 0x4, NULL, "<T:Ljava/lang/Object;>(Lorg/geogebra/common/kernel/locusequ/EquationTranslator<TT;>;)TT;" },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelLocusequArithEquationOppositeOperator = { 2, "EquationOppositeOperator", "org.geogebra.common.kernel.locusequ.arith", NULL, 0x1, 7, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelLocusequArithEquationOppositeOperator;
}

@end

void OrgGeogebraCommonKernelLocusequArithEquationOppositeOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_(OrgGeogebraCommonKernelLocusequArithEquationOppositeOperator *self, OrgGeogebraCommonKernelLocusequArithEquationExpression *expr) {
  (void) OrgGeogebraCommonKernelLocusequArithEquationUnaryOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_(self, expr);
}

OrgGeogebraCommonKernelLocusequArithEquationOppositeOperator *new_OrgGeogebraCommonKernelLocusequArithEquationOppositeOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_(OrgGeogebraCommonKernelLocusequArithEquationExpression *expr) {
  OrgGeogebraCommonKernelLocusequArithEquationOppositeOperator *self = [OrgGeogebraCommonKernelLocusequArithEquationOppositeOperator alloc];
  OrgGeogebraCommonKernelLocusequArithEquationOppositeOperator_initWithOrgGeogebraCommonKernelLocusequArithEquationExpression_(self, expr);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelLocusequArithEquationOppositeOperator)
