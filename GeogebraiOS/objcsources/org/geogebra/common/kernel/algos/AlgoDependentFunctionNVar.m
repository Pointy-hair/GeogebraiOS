//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/algos/AlgoDependentFunctionNVar.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentFunction.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentFunctionNVar.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/Algos.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar () {
 @public
  OrgGeogebraCommonKernelArithmeticFunctionNVar *fun_;
  OrgGeogebraCommonKernelGeosGeoFunctionNVar *f_;
  OrgGeogebraCommonKernelArithmeticExpressionNode *expression_;
  OrgGeogebraCommonKernelArithmeticFunctionNVar *expandedFun_;
  jboolean expContainsFunctions_;
  JavaLangStringBuilder *sb_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar, fun_, OrgGeogebraCommonKernelArithmeticFunctionNVar *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar, f_, OrgGeogebraCommonKernelGeosGeoFunctionNVar *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar, expression_, OrgGeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar, expandedFun_, OrgGeogebraCommonKernelArithmeticFunctionNVar *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_compute(OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
          withOrgGeogebraCommonKernelArithmeticFunctionNVar:(OrgGeogebraCommonKernelArithmeticFunctionNVar *)fun {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self, cons, label, fun);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
          withOrgGeogebraCommonKernelArithmeticFunctionNVar:(OrgGeogebraCommonKernelArithmeticFunctionNVar *)fun {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self, cons, fun);
  return self;
}

- (OrgGeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return OrgGeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_set_input_(self, [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) getGeoElementVariables]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:f_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoFunctionNVar *)getFunction {
  return f_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_compute(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (sb_ == nil) OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  else [sb_ setLengthWithInt:0];
  if ([((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(f_)) isLabelSet] && ![((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isHideLHS] && (![f_ isBooleanFunction] || [tpl hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML()])) {
    [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[f_ getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sb_ appendWithNSString:@"("];
    [sb_ appendWithNSString:[f_ getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sb_ appendWithNSString:@") = "];
  }
  [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  return [sb_ description];
}

- (void)dealloc {
  RELEASE_(fun_);
  RELEASE_(f_);
  RELEASE_(expression_);
  RELEASE_(expandedFun_);
  RELEASE_(sb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticFunctionNVar:", "AlgoDependentFunctionNVar", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelArithmeticFunctionNVar:", "AlgoDependentFunctionNVar", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFunction", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunctionNVar;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fun_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunctionNVar;", NULL, NULL,  },
    { "expression_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "expandedFun_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", NULL, NULL,  },
    { "expContainsFunctions_", NULL, 0x2, "Z", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar = { 2, "AlgoDependentFunctionNVar", "org.geogebra.common.kernel.algos", NULL, 0x1, 7, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelArithmeticFunctionNVar *fun) {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self, cons, fun);
  [((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(self->f_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar *new_OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelArithmeticFunctionNVar *fun) {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar *self = [OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar alloc];
  OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self, cons, label, fun);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelArithmeticFunctionNVar *fun) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_set_fun_(self, fun);
  OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_setAndConsume_f_(self, new_OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self->f_ setFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar:fun];
  OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_set_expression_(self, [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun)) getExpression]);
  self->expContainsFunctions_ = OrgGeogebraCommonKernelAlgosAlgoDependentFunction_containsFunctionsWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self->expression_);
  if (self->expContainsFunctions_) {
    OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_setAndConsume_expandedFun_(self, new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticFunctionNVar_withOrgGeogebraCommonKernelKernel_(fun, self->kernel_));
  }
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_compute(self);
  [self->f_ setConstructionDefaults];
}

OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar *new_OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelArithmeticFunctionNVar *fun) {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar *self = [OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar alloc];
  OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self, cons, fun);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar_compute(OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar *self) {
  jboolean isDefined = YES;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->input_))->size_; i++) {
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) isDefined]) {
      isDefined = NO;
      break;
    }
  }
  if (isDefined && self->expContainsFunctions_) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = nil;
    @try {
      ev = OrgGeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_]);
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      OrgGeogebraCommonMainApp_debugWithNSString_(@"derivative failed");
    }
    if (ev == nil) {
      [((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(self->f_)) setUndefined];
      return;
    }
    OrgGeogebraCommonKernelArithmeticExpressionNode *node;
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    else node = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ev) autorelease];
    [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(self->expandedFun_)) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:node];
    [((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(self->f_)) setFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar:self->expandedFun_];
    if ([self->f_ isBooleanFunction] && [self->f_ isLabelSet]) [self->f_ resetIneqs];
  }
  [((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(self->f_)) setDefinedWithBoolean:isDefined];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoDependentFunctionNVar)
