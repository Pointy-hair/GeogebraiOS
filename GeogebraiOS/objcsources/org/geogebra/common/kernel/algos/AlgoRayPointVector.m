//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoRayPointVector.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoRayPointVector.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoRay.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoRayPointVector () {
 @public
  OrgGeogebraCommonKernelGeosGeoPoint *P_;
  OrgGeogebraCommonKernelGeosGeoVector *v_;
  OrgGeogebraCommonKernelGeosGeoRay *ray_;
}

- (void)setIncidence;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoRayPointVector, P_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoRayPointVector, v_, OrgGeogebraCommonKernelGeosGeoVector *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoRayPointVector, ray_, OrgGeogebraCommonKernelGeosGeoRay *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoRayPointVector_setIncidence(OrgGeogebraCommonKernelAlgosAlgoRayPointVector *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoRayPointVector_compute(OrgGeogebraCommonKernelAlgosAlgoRayPointVector *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoRayPointVector

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                   withOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)v {
  OrgGeogebraCommonKernelAlgosAlgoRayPointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(self, cons, label, P, v);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                   withOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)v {
  OrgGeogebraCommonKernelAlgosAlgoRayPointVector_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(self, cons, P, v);
  return self;
}

- (void)setIncidence {
  OrgGeogebraCommonKernelAlgosAlgoRayPointVector_setIncidence(self);
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Ray();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_RAY;
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, P_);
  (void) IOSObjectArray_Set(input_, 1, v_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:ray_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoRay *)getRay {
  return ray_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getP {
  return P_;
}

- (OrgGeogebraCommonKernelGeosGeoVector *)getv {
  return v_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoRayPointVector_compute(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"RayThroughAWithDirectionB" withNSString:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(v_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoVector:", "AlgoRayPointVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoVector:", "AlgoRayPointVector", NULL, 0x1, NULL, NULL },
    { "setIncidence", NULL, "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getRay", NULL, "Lorg.geogebra.common.kernel.geos.GeoRay;", 0x1, NULL, NULL },
    { "getP", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x0, NULL, NULL },
    { "getv", NULL, "Lorg.geogebra.common.kernel.geos.GeoVector;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "v_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
    { "ray_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoRay;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoRayPointVector = { 2, "AlgoRayPointVector", "org.geogebra.common.kernel.algos", NULL, 0x1, 11, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoRayPointVector;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoRayPointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(OrgGeogebraCommonKernelAlgosAlgoRayPointVector *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *P, OrgGeogebraCommonKernelGeosGeoVector *v) {
  (void) OrgGeogebraCommonKernelAlgosAlgoRayPointVector_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(self, cons, P, v);
  [((OrgGeogebraCommonKernelGeosGeoRay *) nil_chk(self->ray_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoRayPointVector *new_OrgGeogebraCommonKernelAlgosAlgoRayPointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *P, OrgGeogebraCommonKernelGeosGeoVector *v) {
  OrgGeogebraCommonKernelAlgosAlgoRayPointVector *self = [OrgGeogebraCommonKernelAlgosAlgoRayPointVector alloc];
  OrgGeogebraCommonKernelAlgosAlgoRayPointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(self, cons, label, P, v);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoRayPointVector_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(OrgGeogebraCommonKernelAlgosAlgoRayPointVector *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoPoint *P, OrgGeogebraCommonKernelGeosGeoVector *v) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->P_ = P;
  self->v_ = v;
  self->ray_ = new_OrgGeogebraCommonKernelGeosGeoRay_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_(cons, P);
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoRayPointVector_compute(self);
  OrgGeogebraCommonKernelAlgosAlgoRayPointVector_setIncidence(self);
}

OrgGeogebraCommonKernelAlgosAlgoRayPointVector *new_OrgGeogebraCommonKernelAlgosAlgoRayPointVector_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoPoint *P, OrgGeogebraCommonKernelGeosGeoVector *v) {
  OrgGeogebraCommonKernelAlgosAlgoRayPointVector *self = [OrgGeogebraCommonKernelAlgosAlgoRayPointVector alloc];
  OrgGeogebraCommonKernelAlgosAlgoRayPointVector_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(self, cons, P, v);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoRayPointVector_setIncidence(OrgGeogebraCommonKernelAlgosAlgoRayPointVector *self) {
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->P_)) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->ray_ withBoolean:YES];
}

void OrgGeogebraCommonKernelAlgosAlgoRayPointVector_compute(OrgGeogebraCommonKernelAlgosAlgoRayPointVector *self) {
  OrgGeogebraCommonKernelGeosGeoVec3D_lineThroughPointVectorWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoLine_(self->P_, self->v_, self->ray_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoRayPointVector)
