//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoCommonTangents.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoCommonTangents.h"
#include "org/geogebra/common/kernel/algos/AlgoCommonTangentsND.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "org/geogebra/common/kernel/algos/AlgoTangentPoint.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation OrgGeogebraCommonKernelAlgosAlgoCommonTangents

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c
              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c2 {
  OrgGeogebraCommonKernelAlgosAlgoCommonTangents_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, c, c2);
  return self;
}

- (void)createPointsWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  P_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
  (void) IOSObjectArray_Set(P_, 0, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
  (void) IOSObjectArray_Set(P_, 1, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
}

- (void)setCoordsAsPointWithInt:(jint)index
                     withDouble:(jdouble)x
                     withDouble:(jdouble)y {
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(P_), index), [OrgGeogebraCommonKernelGeosGeoPoint class])))) setCoordsWithDouble:x withDouble:y withDouble:1];
}

- (void)setCoordsAsVectorWithInt:(jint)index
                      withDouble:(jdouble)x
                      withDouble:(jdouble)y {
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(P_), index), [OrgGeogebraCommonKernelGeosGeoPoint class])))) setCoordsWithDouble:x withDouble:y withDouble:0];
}

- (void)initTangents {
  tangents_ = [IOSObjectArray newArrayWithLength:2 + 2 type:OrgGeogebraCommonKernelGeosGeoLine_class_()];
  (void) IOSObjectArray_Set(tangents_, 0, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons_));
  (void) IOSObjectArray_Set(tangents_, 1, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons_));
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 0), [OrgGeogebraCommonKernelGeosGeoLine class])))) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(P_), 0), [OrgGeogebraCommonKernelGeosGeoPoint class])];
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 1), [OrgGeogebraCommonKernelGeosGeoLine class])))) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(P_, 0), [OrgGeogebraCommonKernelGeosGeoPoint class])];
  (void) IOSObjectArray_Set(tangents_, 0 + 2, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons_));
  (void) IOSObjectArray_Set(tangents_, 1 + 2, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons_));
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 0 + 2), [OrgGeogebraCommonKernelGeosGeoLine class])))) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(P_, 1), [OrgGeogebraCommonKernelGeosGeoPoint class])];
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 1 + 2), [OrgGeogebraCommonKernelGeosGeoLine class])))) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(P_, 1), [OrgGeogebraCommonKernelGeosGeoPoint class])];
}

- (OrgGeogebraCommonKernelKernelNDAlgoIntersectND *)createAlgoWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                        withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p
                                                               withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)line
                                                        withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)conic {
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) polarLineWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoLine:line];
  return new_OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_(cons, line, (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(conic, [OrgGeogebraCommonKernelGeosGeoConic class]));
}

- (void)initForNearToRelationship {
  OrgGeogebraCommonKernelAlgosAlgoTangentPoint_initForNearToRelationshipWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDAlgoIntersectND_(tangentPoints_, IOSObjectArray_Get(nil_chk(tangents_), 0), algoIntersect_);
  OrgGeogebraCommonKernelAlgosAlgoTangentPoint_initForNearToRelationshipWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDAlgoIntersectND_(tangentPoints2_, IOSObjectArray_Get(tangents_, 2), algoIntersect2_);
}

- (void)updatePolarLines {
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(IOSObjectArray_Get(nil_chk(c_), 0))) polarLineWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(P_), 0), [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoLine:polar_];
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(IOSObjectArray_Get(c_, 1))) polarLineWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(P_, 1), [OrgGeogebraCommonKernelGeosGeoPoint class]) withOrgGeogebraCommonKernelGeosGeoLine:polar2_];
}

- (jboolean)isIntersectionPointIncidentWithInt:(jint)index
 withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)conic {
  return [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(P_), index), [OrgGeogebraCommonKernelGeosGeoPoint class]) withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION];
}

- (void)updateTangentsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)tangentPoints
                                                                 withInt:(jint)index {
  OrgGeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoLine_((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(P_), index), [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(tangentPoints), 0), [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), 0 + 2 * index), [OrgGeogebraCommonKernelGeosGeoLine class]));
  OrgGeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoLine_((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(P_, index), [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(tangentPoints, 1), [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 1 + 2 * index), [OrgGeogebraCommonKernelGeosGeoLine class]));
}

- (void)setTangentFromPolarWithInt:(jint)i
withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)line {
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), i), [OrgGeogebraCommonKernelGeosGeoLine class])))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:line];
}

- (jdouble)getMidpointXWithInt:(jint)csIndex
                       withInt:(jint)mpIndex {
  return [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(IOSObjectArray_Get(nil_chk(c_), mpIndex)))->b_)) getX];
}

- (jdouble)getMidpointYWithInt:(jint)csIndex
                       withInt:(jint)mpIndex {
  return [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(IOSObjectArray_Get(nil_chk(c_), mpIndex)))->b_)) getY];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "AlgoCommonTangents", NULL, 0x1, NULL, NULL },
    { "createPointsWithOrgGeogebraCommonKernelConstruction:", "createPoints", "V", 0x4, NULL, NULL },
    { "setCoordsAsPointWithInt:withDouble:withDouble:", "setCoordsAsPoint", "V", 0x4, NULL, NULL },
    { "setCoordsAsVectorWithInt:withDouble:withDouble:", "setCoordsAsVector", "V", 0x4, NULL, NULL },
    { "initTangents", NULL, "V", 0x4, NULL, NULL },
    { "createAlgoWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "createAlgo", "Lorg.geogebra.common.kernel.kernelND.AlgoIntersectND;", 0x4, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x1, NULL, NULL },
    { "updatePolarLines", NULL, "V", 0x4, NULL, NULL },
    { "isIntersectionPointIncidentWithInt:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "isIntersectionPointIncident", "Z", 0x4, NULL, NULL },
    { "updateTangentsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:withInt:", "updateTangents", "V", 0x4, NULL, NULL },
    { "setTangentFromPolarWithInt:withOrgGeogebraCommonKernelGeosGeoLine:", "setTangentFromPolar", "V", 0x4, NULL, NULL },
    { "getMidpointXWithInt:withInt:", "getMidpointX", "D", 0x4, NULL, NULL },
    { "getMidpointYWithInt:withInt:", "getMidpointY", "D", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoCommonTangents = { 2, "AlgoCommonTangents", "org.geogebra.common.kernel.algos", NULL, 0x1, 13, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoCommonTangents;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoCommonTangents_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelAlgosAlgoCommonTangents *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, OrgGeogebraCommonKernelKernelNDGeoConicND *c, OrgGeogebraCommonKernelKernelNDGeoConicND *c2) {
  (void) OrgGeogebraCommonKernelAlgosAlgoCommonTangentsND_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, c, c2);
}

OrgGeogebraCommonKernelAlgosAlgoCommonTangents *new_OrgGeogebraCommonKernelAlgosAlgoCommonTangents_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, OrgGeogebraCommonKernelKernelNDGeoConicND *c, OrgGeogebraCommonKernelKernelNDGeoConicND *c2) {
  OrgGeogebraCommonKernelAlgosAlgoCommonTangents *self = [OrgGeogebraCommonKernelAlgosAlgoCommonTangents alloc];
  OrgGeogebraCommonKernelAlgosAlgoCommonTangents_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, c, c2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoCommonTangents)
