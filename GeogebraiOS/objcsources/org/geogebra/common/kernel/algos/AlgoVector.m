//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoVector.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoVector.h"
#include "org/geogebra/common/kernel/algos/SymbolicParameters.h"
#include "org/geogebra/common/kernel/algos/SymbolicParametersAlgo.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/kernel/prover/polynomial/Polynomial.h"

@interface OrgGeogebraCommonKernelAlgosAlgoVector () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> P_, Q_;
  id<OrgGeogebraCommonKernelKernelNDGeoVectorND> v_;
  IOSObjectArray *polynomials_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoVector, P_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoVector, Q_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoVector, v_, id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoVector, polynomials_, IOSObjectArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoVector_compute(OrgGeogebraCommonKernelAlgosAlgoVector *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoVector

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  OrgGeogebraCommonKernelAlgosAlgoVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, P, Q);
  return self;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)createNewVector {
  return new_OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_(cons_);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)newStartPoint {
  return new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelGeosGeoPoint_((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [OrgGeogebraCommonKernelGeosGeoPoint class]));
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Vector();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR;
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(P_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  (void) IOSObjectArray_Set(input_, 1, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(Q_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(v_, [OrgGeogebraCommonKernelGeosGeoElement class])];
  [self setDependencies];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)getVector {
  return v_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getP {
  return P_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getQ {
  return Q_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoVector_compute(self);
}

- (void)setCoords {
  [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v_)) setCoordsWithDoubleArray:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) vectorToWithOrgGeogebraCommonKernelKernelNDGeoPointND:Q_]];
}

- (OrgGeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  return new_OrgGeogebraCommonKernelAlgosSymbolicParameters_initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self);
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if (P_ != nil && Q_ != nil && [OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:P_] && [OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:Q_]) {
    [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(P_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getFreeVariablesWithJavaUtilHashSet:variables];
    [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(Q_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (IOSIntArray *)getDegrees {
  if (P_ != nil && Q_ != nil && [OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:P_] && [OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:Q_]) {
    IOSIntArray *degree1 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(P_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getDegrees];
    IOSIntArray *degree2 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(Q_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getDegrees];
    IOSIntArray *result = [IOSIntArray newArrayWithLength:3];
    *IOSIntArray_GetRef(result, 0) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(nil_chk(degree1), 0) + IOSIntArray_Get(nil_chk(degree2), 2), IOSIntArray_Get(degree2, 0) + IOSIntArray_Get(degree1, 2));
    *IOSIntArray_GetRef(result, 1) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree1, 1) + IOSIntArray_Get(degree2, 2), IOSIntArray_Get(degree2, 1) + IOSIntArray_Get(degree1, 2));
    *IOSIntArray_GetRef(result, 2) = IOSIntArray_Get(degree2, 2) + IOSIntArray_Get(degree1, 2);
    return result;
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if (P_ != nil && Q_ != nil && [OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:P_] && [OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:Q_]) {
    IOSObjectArray *coords1 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(P_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *coords2 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(Q_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *result = [IOSObjectArray newArrayWithLength:3 type:JavaMathBigInteger_class_()];
    (void) IOSObjectArray_Set(result, 0, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(coords2), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(coords1), 2)])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords1, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords2, 2)]]);
    (void) IOSObjectArray_Set(result, 1, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords2, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords1, 2)])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords1, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords2, 2)]]);
    (void) IOSObjectArray_Set(result, 2, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords1, 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords2, 2)]);
    return OrgGeogebraCommonKernelAlgosSymbolicParameters_reduceWithJavaMathBigIntegerArray_(result);
  }
  return nil;
}

- (IOSObjectArray *)getPolynomials {
  if (polynomials_ != nil) {
    return polynomials_;
  }
  if (P_ != nil && Q_ != nil && [OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:P_] && [OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:Q_]) {
    IOSObjectArray *coords1 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(P_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getPolynomials];
    IOSObjectArray *coords2 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(Q_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getPolynomials];
    polynomials_ = [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
    (void) IOSObjectArray_Set(polynomials_, 0, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(coords2), 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(coords1), 2)])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords1, 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords2, 2)]]);
    (void) IOSObjectArray_Set(polynomials_, 1, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords2, 1))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords1, 2)])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords1, 1))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords2, 2)]]);
    (void) IOSObjectArray_Set(polynomials_, 2, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords1, 2))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords2, 2)]);
    return polynomials_;
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "AlgoVector", NULL, 0x1, NULL, NULL },
    { "createNewVector", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
    { "newStartPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "getVector", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x1, NULL, NULL },
    { "getP", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getQ", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setCoords", NULL, "V", 0x4, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lorg.geogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "Q_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "v_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", NULL, NULL,  },
    { "polynomials_", NULL, 0x2, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoVector = { 2, "AlgoVector", "org.geogebra.common.kernel.algos", NULL, 0x1, 16, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoVector;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelAlgosAlgoVector *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, id<OrgGeogebraCommonKernelKernelNDGeoPointND> Q) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->P_ = P;
  self->Q_ = Q;
  self->v_ = [self createNewVector];
  [self setInputOutput];
  @try {
    if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) isLabelSet]) [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->v_)) setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    else {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> startPoint = [self newStartPoint];
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint)) setWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
      [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->v_)) setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:startPoint];
    }
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
  }
  OrgGeogebraCommonKernelAlgosAlgoVector_compute(self);
  [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->v_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoVector *new_OrgGeogebraCommonKernelAlgosAlgoVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, id<OrgGeogebraCommonKernelKernelNDGeoPointND> Q) {
  OrgGeogebraCommonKernelAlgosAlgoVector *self = [OrgGeogebraCommonKernelAlgosAlgoVector alloc];
  OrgGeogebraCommonKernelAlgosAlgoVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, P, Q);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoVector_compute(OrgGeogebraCommonKernelAlgosAlgoVector *self) {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) isFinite] && [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->Q_)) isFinite]) {
    [self setCoords];
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> startPoint = [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->v_)) getStartPoint];
    if (startPoint != nil) if (![startPoint isLabelSet]) {
      [startPoint setWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->P_];
    }
  }
  else {
    [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->v_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoVector)
