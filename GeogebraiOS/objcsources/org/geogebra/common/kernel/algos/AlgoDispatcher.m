//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/algos/AlgoDispatcher.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/KernelCAS.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/Region.h"
#include "org/geogebra/common/kernel/Transform.h"
#include "org/geogebra/common/kernel/TransformDilate.h"
#include "org/geogebra/common/kernel/TransformMirror.h"
#include "org/geogebra/common/kernel/TransformRotate.h"
#include "org/geogebra/common/kernel/TransformTranslate.h"
#include "org/geogebra/common/kernel/algos/AlgoAngleLines.h"
#include "org/geogebra/common/kernel/algos/AlgoAnglePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoAnglePolygon.h"
#include "org/geogebra/common/kernel/algos/AlgoAngleVectors.h"
#include "org/geogebra/common/kernel/algos/AlgoAngularBisectorLines.h"
#include "org/geogebra/common/kernel/algos/AlgoAngularBisectorPoints.h"
#include "org/geogebra/common/kernel/algos/AlgoAreaConic.h"
#include "org/geogebra/common/kernel/algos/AlgoCenterConic.h"
#include "org/geogebra/common/kernel/algos/AlgoCirclePointRadius.h"
#include "org/geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoCircleTwoPoints.h"
#include "org/geogebra/common/kernel/algos/AlgoCircumferenceConic.h"
#include "org/geogebra/common/kernel/algos/AlgoClosestPoint.h"
#include "org/geogebra/common/kernel/algos/AlgoCommonTangents.h"
#include "org/geogebra/common/kernel/algos/AlgoConicFivePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoConicPartCircle.h"
#include "org/geogebra/common/kernel/algos/AlgoConicPartCircumcircle.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentFunction.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentList.h"
#include "org/geogebra/common/kernel/algos/AlgoDiameterLine.h"
#include "org/geogebra/common/kernel/algos/AlgoDiameterVector.h"
#include "org/geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "org/geogebra/common/kernel/algos/AlgoDistanceLineLine.h"
#include "org/geogebra/common/kernel/algos/AlgoDistancePointObject.h"
#include "org/geogebra/common/kernel/algos/AlgoDistancePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoEllipseFociLength.h"
#include "org/geogebra/common/kernel/algos/AlgoEllipseHyperbolaFociPoint.h"
#include "org/geogebra/common/kernel/algos/AlgoHyperbolaFociLength.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersect.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectAbstract.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectConics.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectCurveCurve.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectFunctionLineNewton.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectFunctionsNewton.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectLineCurve.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectLinePolyLine.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectLines.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectPolynomialConic.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectPolynomialLine.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectPolynomials.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectSingle.h"
#include "org/geogebra/common/kernel/algos/AlgoJoinPoints.h"
#include "org/geogebra/common/kernel/algos/AlgoJoinPointsRay.h"
#include "org/geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "org/geogebra/common/kernel/algos/AlgoLengthLocus.h"
#include "org/geogebra/common/kernel/algos/AlgoLineBisector.h"
#include "org/geogebra/common/kernel/algos/AlgoLineBisectorSegment.h"
#include "org/geogebra/common/kernel/algos/AlgoLinePointLine.h"
#include "org/geogebra/common/kernel/algos/AlgoLinePointVector.h"
#include "org/geogebra/common/kernel/algos/AlgoListLength.h"
#include "org/geogebra/common/kernel/algos/AlgoLocus.h"
#include "org/geogebra/common/kernel/algos/AlgoLocusList.h"
#include "org/geogebra/common/kernel/algos/AlgoLocusSlider.h"
#include "org/geogebra/common/kernel/algos/AlgoMidpoint.h"
#include "org/geogebra/common/kernel/algos/AlgoMidpointSegment.h"
#include "org/geogebra/common/kernel/algos/AlgoNSolveODE.h"
#include "org/geogebra/common/kernel/algos/AlgoOrthoLinePointLine.h"
#include "org/geogebra/common/kernel/algos/AlgoOrthoLinePointVector.h"
#include "org/geogebra/common/kernel/algos/AlgoParabolaPointLine.h"
#include "org/geogebra/common/kernel/algos/AlgoPerimeterPoly.h"
#include "org/geogebra/common/kernel/algos/AlgoPointInRegion.h"
#include "org/geogebra/common/kernel/algos/AlgoPointOnPath.h"
#include "org/geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "org/geogebra/common/kernel/algos/AlgoPolygon.h"
#include "org/geogebra/common/kernel/algos/AlgoPolygonIntersection.h"
#include "org/geogebra/common/kernel/algos/AlgoPolygonRegular.h"
#include "org/geogebra/common/kernel/algos/AlgoPolygonUnion.h"
#include "org/geogebra/common/kernel/algos/AlgoRayPointVector.h"
#include "org/geogebra/common/kernel/algos/AlgoSemicircle.h"
#include "org/geogebra/common/kernel/algos/AlgoSlope.h"
#include "org/geogebra/common/kernel/algos/AlgoTangentLine.h"
#include "org/geogebra/common/kernel/algos/AlgoTangentPoint.h"
#include "org/geogebra/common/kernel/algos/AlgoTextfield.h"
#include "org/geogebra/common/kernel/algos/AlgoVector.h"
#include "org/geogebra/common/kernel/algos/AlgoVectorPoint.h"
#include "org/geogebra/common/kernel/algos/AlgoVertexPolygon.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoConicPart.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoLocus.h"
#include "org/geogebra/common/kernel/geos/GeoLocusND.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPoly.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/GeoRay.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/geos/GeoTextField.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/implicit/AlgoImplicitPolyFunction.h"
#include "org/geogebra/common/kernel/implicit/AlgoIntersectImplicitpolyParametric.h"
#include "org/geogebra/common/kernel/implicit/AlgoIntersectImplicitpolys.h"
#include "org/geogebra/common/kernel/implicit/AlgoTangentImplicitpoly.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoVector *OrgGeogebraCommonKernelAlgosAlgoDispatcher_VectorWithNSString_withDouble_withDouble_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, jdouble x, jdouble y);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoVector *OrgGeogebraCommonKernelAlgosAlgoDispatcher_VectorWithDouble_withDouble_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, jdouble x, jdouble y);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelAlgosAlgoDispatcher_PointWithNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, id<OrgGeogebraCommonKernelPath> path, jdouble x, jdouble y, jboolean addToConstruction, jboolean complex, jboolean coords2D);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoSegment *OrgGeogebraCommonKernelAlgosAlgoDispatcher_SegmentWithNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *P, OrgGeogebraCommonKernelGeosGeoPoint *Q);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoAngle *OrgGeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, OrgGeogebraCommonKernelGeosGeoLine *g, OrgGeogebraCommonKernelGeosGeoLine *h);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoAngle *OrgGeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *A, OrgGeogebraCommonKernelGeosGeoPoint *B, OrgGeogebraCommonKernelGeosGeoPoint *C);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelAlgosAlgoDispatcher_PointInWithNSString_withOrgGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, id<OrgGeogebraCommonKernelRegion> region, jdouble x, jdouble y, jboolean addToConstruction, jboolean complex, jboolean coords2D);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoDispatcher_LocusCheckWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, id<OrgGeogebraCommonKernelKernelNDGeoPointND> Q);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelAlgosAlgoDispatcher_TranslateWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoVec3D_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *geoTrans, OrgGeogebraCommonKernelGeosGeoVec3D *v);

jint OrgGeogebraCommonKernelAlgosAlgoDispatcher_DETACH_OFFSET_ = 20;

@implementation OrgGeogebraCommonKernelAlgosAlgoDispatcher

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonKernelAlgosAlgoDispatcher_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (void)removeIntersectionAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoIntersectAbstract:(OrgGeogebraCommonKernelAlgosAlgoIntersectAbstract *)algo {
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) removeWithId:algo];
}

- (void)addIntersectionAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoIntersectAbstract:(OrgGeogebraCommonKernelAlgosAlgoIntersectAbstract *)algo {
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)PointWithNSString:(NSString *)label
                                                withDouble:(jdouble)x
                                                withDouble:(jdouble)y
                                               withBoolean:(jboolean)complex {
  jint mode = complex ? OrgGeogebraCommonKernelKernel_COORD_COMPLEX : OrgGeogebraCommonKernelKernel_COORD_CARTESIAN;
  OrgGeogebraCommonKernelGeosGeoPoint *p = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withInt_(cons_, mode) autorelease];
  [p setCoordsWithDouble:x withDouble:y withDouble:1.0];
  [p setLabelWithNSString:label];
  return p;
}

- (OrgGeogebraCommonKernelGeosGeoVector *)VectorWithNSString:(NSString *)label
                                                  withDouble:(jdouble)x
                                                  withDouble:(jdouble)y {
  return OrgGeogebraCommonKernelAlgosAlgoDispatcher_VectorWithNSString_withDouble_withDouble_(self, label, x, y);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)VectorWithNSString:(NSString *)label {
  return OrgGeogebraCommonKernelAlgosAlgoDispatcher_VectorWithNSString_withDouble_withDouble_(self, label, 0, 0);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)Vector {
  return OrgGeogebraCommonKernelAlgosAlgoDispatcher_VectorWithDouble_withDouble_(self, 0, 0);
}

- (OrgGeogebraCommonKernelGeosGeoVector *)VectorWithDouble:(jdouble)x
                                                withDouble:(jdouble)y {
  return OrgGeogebraCommonKernelAlgosAlgoDispatcher_VectorWithDouble_withDouble_(self, x, y);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)PointWithNSString:(NSString *)label
                           withOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>)path
                                                withDouble:(jdouble)x
                                                withDouble:(jdouble)y
                                               withBoolean:(jboolean)addToConstruction
                                               withBoolean:(jboolean)complex
                                               withBoolean:(jboolean)coords2D {
  return OrgGeogebraCommonKernelAlgosAlgoDispatcher_PointWithNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(self, label, path, x, y, addToConstruction, complex, coords2D);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PointWithNSString:(NSString *)label
                                   withOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>)path
                           withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords
                                                       withBoolean:(jboolean)addToConstruction
                                                       withBoolean:(jboolean)complex
                                                       withBoolean:(jboolean)coords2D {
  return OrgGeogebraCommonKernelAlgosAlgoDispatcher_PointWithNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(self, label, path, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX], [coords getY], addToConstruction, complex, coords2D);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)PointWithNSString:(NSString *)label
                           withOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>)path
          withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)param {
  OrgGeogebraCommonKernelAlgosAlgoPointOnPath *algo = nil;
  if (param == nil) {
    algo = [new_OrgGeogebraCommonKernelAlgosAlgoPointOnPath_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_(cons_, label, path, 0, 0) autorelease];
  }
  else {
    algo = [new_OrgGeogebraCommonKernelAlgosAlgoPointOnPath_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, path, 0, 0, param) autorelease];
  }
  OrgGeogebraCommonKernelGeosGeoPoint *p = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoPointOnPath *) nil_chk(algo)) getP], [OrgGeogebraCommonKernelGeosGeoPoint class]);
  if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) isDefined]) {
    [p setCoordsWithDouble:1 withDouble:0 withDouble:1];
    [algo update];
  }
  if (![p isDefined]) {
    [p setCoordsWithDouble:JavaLangMath_random() withDouble:0 withDouble:1];
    [algo update];
  }
  return p;
}

- (OrgGeogebraCommonKernelGeosGeoLine *)LineWithNSString:(NSString *)label
                 withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                 withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)Q {
  OrgGeogebraCommonKernelAlgosAlgoJoinPoints *algo = [new_OrgGeogebraCommonKernelAlgosAlgoJoinPoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(cons_, label, P, Q) autorelease];
  OrgGeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (OrgGeogebraCommonKernelGeosGeoRay *)RayWithNSString:(NSString *)label
               withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
               withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)Q {
  OrgGeogebraCommonKernelAlgosAlgoJoinPointsRay *algo = [new_OrgGeogebraCommonKernelAlgosAlgoJoinPointsRay_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(cons_, label, P, Q) autorelease];
  return [algo getRay];
}

- (OrgGeogebraCommonKernelGeosGeoRay *)RayWithNSString:(NSString *)label
               withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
              withOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)v {
  OrgGeogebraCommonKernelAlgosAlgoRayPointVector *algo = [new_OrgGeogebraCommonKernelAlgosAlgoRayPointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(cons_, label, P, v) autorelease];
  return [algo getRay];
}

- (OrgGeogebraCommonKernelGeosGeoLine *)LineWithNSString:(NSString *)label
                 withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                  withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l {
  OrgGeogebraCommonKernelAlgosAlgoLinePointLine *algo = [new_OrgGeogebraCommonKernelAlgosAlgoLinePointLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoLine_(cons_, label, P, l) autorelease];
  OrgGeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (OrgGeogebraCommonKernelGeosGeoLine *)OrthogonalLineWithNSString:(NSString *)label
                           withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                          withOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)v {
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector *algo = [new_OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(cons_, label, P, v) autorelease];
  OrgGeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (OrgGeogebraCommonKernelGeosGeoLine *)OrthogonalLineWithNSString:(NSString *)label
                           withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                            withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l {
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointLine *algo = [new_OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoLine_(cons_, label, P, l) autorelease];
  OrgGeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (OrgGeogebraCommonKernelGeosGeoLine *)LineBisectorWithNSString:(NSString *)label
                         withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)A
                         withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)B {
  OrgGeogebraCommonKernelAlgosAlgoLineBisector *algo = [new_OrgGeogebraCommonKernelAlgosAlgoLineBisector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(cons_, label, A, B) autorelease];
  OrgGeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (OrgGeogebraCommonKernelGeosGeoLine *)LineBisectorWithNSString:(NSString *)label
                       withOrgGeogebraCommonKernelGeosGeoSegment:(OrgGeogebraCommonKernelGeosGeoSegment *)s {
  OrgGeogebraCommonKernelAlgosAlgoLineBisectorSegment *algo = [new_OrgGeogebraCommonKernelAlgosAlgoLineBisectorSegment_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoSegment_(cons_, label, s) autorelease];
  OrgGeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (OrgGeogebraCommonKernelGeosGeoLine *)AngularBisectorWithNSString:(NSString *)label
                            withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)A
                            withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)B
                            withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)C {
  OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints *algo = [new_OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(cons_, label, A, B, C) autorelease];
  OrgGeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (IOSObjectArray *)AngularBisectorWithNSStringArray:(IOSObjectArray *)labels
              withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g
              withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)h {
  OrgGeogebraCommonKernelAlgosAlgoAngularBisectorLines *algo = [new_OrgGeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(cons_, labels, g, h) autorelease];
  IOSObjectArray *lines = [algo getLines];
  return lines;
}

- (OrgGeogebraCommonKernelGeosGeoVector *)VectorWithNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                     withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)Q {
  OrgGeogebraCommonKernelAlgosAlgoVector *algo = [new_OrgGeogebraCommonKernelAlgosAlgoVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, P, Q) autorelease];
  OrgGeogebraCommonKernelGeosGeoVector *v = (OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast([algo getVector], [OrgGeogebraCommonKernelGeosGeoVector class]);
  [((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(v)) setEuclidianVisibleWithBoolean:YES];
  [v update];
  return v;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)VectorWithNSString:(NSString *)label
                       withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  id<OrgGeogebraCommonKernelKernelNDGeoVectorND> v = [self createVectorWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPointND:P];
  [((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v)) setEuclidianVisibleWithBoolean:YES];
  [v update];
  return v;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)createVectorWithNSString:(NSString *)label
                             withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonKernelAlgosAlgoVectorPoint *algo = [new_OrgGeogebraCommonKernelAlgosAlgoVectorPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, P) autorelease];
  return [algo getVector];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)SlopeWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g {
  OrgGeogebraCommonKernelAlgosAlgoSlope *algo = [new_OrgGeogebraCommonKernelAlgosAlgoSlope_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_(cons_, label, g) autorelease];
  OrgGeogebraCommonKernelGeosGeoNumeric *slope = [algo getSlope];
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(slope)) update];
  return slope;
}

- (OrgGeogebraCommonKernelGeosGeoSegment *)SegmentWithNSString:(NSString *)label
                       withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                       withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)Q {
  return OrgGeogebraCommonKernelAlgosAlgoDispatcher_SegmentWithNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, label, P, Q);
}

- (OrgGeogebraCommonKernelGeosGeoList *)ListWithNSString:(NSString *)label
                                   withJavaUtilArrayList:(JavaUtilArrayList *)geoElementList
                                             withBoolean:(jboolean)isIndependent {
  if (isIndependent) {
    OrgGeogebraCommonKernelGeosGeoList *list = [new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
    jint size = [((JavaUtilArrayList *) nil_chk(geoElementList)) size];
    for (jint i = 0; i < size; i++) {
      [list addWithOrgGeogebraCommonKernelGeosGeoElement:[geoElementList getWithInt:i]];
    }
    [list setLabelWithNSString:label];
    return list;
  }
  OrgGeogebraCommonKernelAlgosAlgoDependentList *algoList = [new_OrgGeogebraCommonKernelAlgosAlgoDependentList_initWithOrgGeogebraCommonKernelConstruction_withNSString_withJavaUtilArrayList_(cons_, label, geoElementList) autorelease];
  return [algoList getGeoList];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)DependentFunctionWithNSString:(NSString *)label
                            withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)fun {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction *algo = [new_OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(cons_, label, fun) autorelease];
  OrgGeogebraCommonKernelGeosGeoFunction *f = [algo getFunction];
  return f;
}

- (OrgGeogebraCommonKernelGeosGeoTextField *)textfieldWithNSString:(NSString *)label
                         withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoElement {
  OrgGeogebraCommonKernelAlgosAlgoTextfield *at = [new_OrgGeogebraCommonKernelAlgosAlgoTextfield_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, label, geoElement) autorelease];
  return [at getResult];
}

- (OrgGeogebraCommonKernelGeosGeoLine *)LineWithNSString:(NSString *)label
                 withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                withOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)v {
  OrgGeogebraCommonKernelAlgosAlgoLinePointVector *algo = [new_OrgGeogebraCommonKernelAlgosAlgoLinePointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(cons_, label, P, v) autorelease];
  OrgGeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (IOSObjectArray *)SegmentWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)n {
  NSString *pointLabel = nil, *segmentLabel = nil;
  if (labels != nil) {
    switch (labels->size_) {
      case 2:
      pointLabel = IOSObjectArray_Get(labels, 1);
      case 1:
      segmentLabel = IOSObjectArray_Get(labels, 0);
      default:
      ;
    }
  }
  return [self SegmentFixedWithNSString:pointLabel withNSString:segmentLabel withOrgGeogebraCommonKernelKernelNDGeoPointND:A withOrgGeogebraCommonKernelArithmeticNumberValue:n];
}

- (IOSObjectArray *)SegmentFixedWithNSString:(NSString *)pointLabel
                                withNSString:(NSString *)segmentLabel
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)a
withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)n {
  OrgGeogebraCommonKernelGeosGeoPoint *A = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(a, [OrgGeogebraCommonKernelGeosGeoPoint class]);
  OrgGeogebraCommonKernelAlgosAlgoCirclePointRadius *algoCircle = [new_OrgGeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, A, n) autorelease];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoCircle];
  OrgGeogebraCommonKernelAlgosAlgoPointOnPath *algoPoint = [new_OrgGeogebraCommonKernelAlgosAlgoPointOnPath_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_(cons_, pointLabel, [algoCircle getCircle], ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(A))->inhomX_ + [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(n)) getDouble], A->inhomY_) autorelease];
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ OrgGeogebraCommonKernelAlgosAlgoDispatcher_SegmentWithNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, segmentLabel, A, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([algoPoint getP], [OrgGeogebraCommonKernelGeosGeoPoint class])), (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([algoPoint getP], [OrgGeogebraCommonKernelGeosGeoElement class]) } count:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

- (IOSObjectArray *)AngleWithNSStringArray:(IOSObjectArray *)labels
   withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)B
   withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)A
withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)alpha
                               withBoolean:(jboolean)posOrientation {
  NSString *pointLabel = nil, *angleLabel = nil;
  if (labels != nil) {
    switch (labels->size_) {
      case 2:
      pointLabel = IOSObjectArray_Get(labels, 1);
      case 1:
      angleLabel = IOSObjectArray_Get(labels, 0);
      default:
      ;
    }
  }
  OrgGeogebraCommonKernelGeosGeoPoint *C = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([self RotateWithNSString:pointLabel withOrgGeogebraCommonKernelGeosGeoElement:B withOrgGeogebraCommonKernelGeosGeoNumberValue:alpha withOrgGeogebraCommonKernelKernelNDGeoPointND:A]), 0), [OrgGeogebraCommonKernelGeosGeoPoint class]);
  OrgGeogebraCommonKernelGeosGeoAngle *angle;
  if (posOrientation) {
    angle = OrgGeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, angleLabel, B, A, C);
  }
  else {
    angle = OrgGeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, angleLabel, C, A, B);
  }
  [((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(angle)) setAngleStyleWithOrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:OrgGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ANTICLOCKWISE()];
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ angle, C } count:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

- (IOSObjectArray *)RotateWithNSString:(NSString *)label
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoRot
withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)phi
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  OrgGeogebraCommonKernelTransform *t = [new_OrgGeogebraCommonKernelTransformRotate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, phi, Q) autorelease];
  return [t transformWithOrgGeogebraCommonKernelGeosGeoElement:geoRot withNSString:label];
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)AngleWithNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g
                    withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)h {
  return OrgGeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(self, label, g, h);
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)AngleWithNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)v
                  withOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)w {
  OrgGeogebraCommonKernelAlgosAlgoAngleVectors *algo = [new_OrgGeogebraCommonKernelAlgosAlgoAngleVectors_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoVectorND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, v, w) autorelease];
  OrgGeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)AngleWithNSString:(NSString *)label
                   withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)A
                   withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)B
                   withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)C {
  return OrgGeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, label, A, B, C);
}

- (IOSObjectArray *)AnglesWithNSStringArray:(IOSObjectArray *)labels
  withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)poly {
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygon *algo = [new_OrgGeogebraCommonKernelAlgosAlgoAnglePolygon_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_(cons_, labels, poly) autorelease];
  IOSObjectArray *angles = [algo getAngles];
  return angles;
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getDefaultNumberWithBoolean:(jboolean)isAngle {
  return (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getConstructionDefaults])) getDefaultGeoWithInt:isAngle ? OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE : OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER], [OrgGeogebraCommonKernelGeosGeoNumeric class]);
}

- (OrgGeogebraCommonKernelGeosGeoConic *)CircleWithNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)A
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)B
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)C {
  OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints *algo = [new_OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, A, B, C) autorelease];
  OrgGeogebraCommonKernelGeosGeoConic *circle = (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast([algo getCircle], [OrgGeogebraCommonKernelGeosGeoConic class]);
  [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(circle)) setToSpecific];
  [circle update];
  return circle;
}

- (OrgGeogebraCommonKernelGeosGeoConicPart *)CircumcircleArcWithNSString:(NSString *)label
                                 withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)A
                                 withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)B
                                 withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)C {
  OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircle *algo = [new_OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircle_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withInt_(cons_, label, A, B, C, OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC) autorelease];
  return [algo getConicPart];
}

- (OrgGeogebraCommonKernelGeosGeoConicPart *)CircumcircleSectorWithNSString:(NSString *)label
                                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)A
                                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)B
                                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)C {
  OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircle *algo = [new_OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircle_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withInt_(cons_, label, A, B, C, OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) autorelease];
  return [algo getConicPart];
}

- (OrgGeogebraCommonKernelGeosGeoConicPart *)CircleArcSectorWithNSString:(NSString *)label
                                 withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)A
                                 withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)B
                                 withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)C
                                                                 withInt:(jint)type {
  OrgGeogebraCommonKernelAlgosAlgoConicPartCircle *algo = [new_OrgGeogebraCommonKernelAlgosAlgoConicPartCircle_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withInt_(cons_, label, A, B, C, type) autorelease];
  return [algo getConicPart];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)CenterWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonKernelAlgosAlgoCenterConic *algo = [new_OrgGeogebraCommonKernelAlgosAlgoCenterConic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_(cons_, label, c) autorelease];
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> midpoint = [algo getPoint];
  return midpoint;
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)CircleWithNSString:(NSString *)label
                    withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)M
                 withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r {
  OrgGeogebraCommonKernelAlgosAlgoCirclePointRadius *algo = [new_OrgGeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(M, [OrgGeogebraCommonKernelGeosGeoPoint class]), r) autorelease];
  OrgGeogebraCommonKernelGeosGeoConic *circle = [algo getCircle];
  [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(circle)) setToSpecific];
  [circle update];
  return circle;
}

- (OrgGeogebraCommonKernelGeosGeoConic *)CircleWithNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)A
                  withOrgGeogebraCommonKernelGeosGeoSegment:(OrgGeogebraCommonKernelGeosGeoSegment *)segment {
  OrgGeogebraCommonKernelAlgosAlgoCirclePointRadius *algo = [new_OrgGeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoSegment_withBoolean_(cons_, label, A, segment, YES) autorelease];
  OrgGeogebraCommonKernelGeosGeoConic *circle = [algo getCircle];
  [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(circle)) setToSpecific];
  [circle update];
  return circle;
}

- (OrgGeogebraCommonKernelGeosGeoConic *)CircleWithNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)M
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P {
  OrgGeogebraCommonKernelAlgosAlgoCircleTwoPoints *algo = [new_OrgGeogebraCommonKernelAlgosAlgoCircleTwoPoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(cons_, label, M, P) autorelease];
  OrgGeogebraCommonKernelGeosGeoConic *circle = [algo getCircle];
  [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(circle)) setToSpecific];
  [circle update];
  return circle;
}

- (OrgGeogebraCommonKernelGeosGeoConicPart *)SemicircleWithNSString:(NSString *)label
                            withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)M
                            withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P {
  OrgGeogebraCommonKernelAlgosAlgoSemicircle *algo = [new_OrgGeogebraCommonKernelAlgosAlgoSemicircle_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(cons_, label, M, P) autorelease];
  return [algo getSemicircle];
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)ParabolaWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)F
                       withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)l {
  OrgGeogebraCommonKernelAlgosAlgoParabolaPointLine *algo = [new_OrgGeogebraCommonKernelAlgosAlgoParabolaPointLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, F, l) autorelease];
  return [algo getParabola];
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)EllipseWithNSString:(NSString *)label
                     withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                     withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                  withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)a {
  OrgGeogebraCommonKernelAlgosAlgoEllipseFociLength *algo = [new_OrgGeogebraCommonKernelAlgosAlgoEllipseFociLength_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, A, B, a) autorelease];
  return [algo getConic];
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)EllipseHyperbolaWithNSString:(NSString *)label
                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
                                                                    withInt:(jint)type {
  OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint *algo = [new_OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons_, label, A, B, C, type) autorelease];
  return [algo getConic];
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)HyperbolaWithNSString:(NSString *)label
                       withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                       withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                    withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)a {
  OrgGeogebraCommonKernelAlgosAlgoHyperbolaFociLength *algo = [new_OrgGeogebraCommonKernelAlgosAlgoHyperbolaFociLength_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, label, A, B, a) autorelease];
  return [algo getConic];
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)ConicWithNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points {
  OrgGeogebraCommonKernelAlgosAlgoConicFivePoints *algo = [new_OrgGeogebraCommonKernelAlgosAlgoConicFivePoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, label, points) autorelease];
  OrgGeogebraCommonKernelKernelNDGeoConicND *conic = [algo getConic];
  return conic;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)DiameterLineWithNSString:(NSString *)label
                       withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                      withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonKernelAlgosAlgoDiameterLine *algo = [new_OrgGeogebraCommonKernelAlgosAlgoDiameterLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, c, g) autorelease];
  return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getDiameter], [OrgGeogebraCommonKernelGeosGeoElement class]);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)DiameterLineWithNSString:(NSString *)label
                     withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)v
                      withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonKernelAlgosAlgoDiameterVector *algo = [new_OrgGeogebraCommonKernelAlgosAlgoDiameterVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, c, v) autorelease];
  return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getDiameter], [OrgGeogebraCommonKernelGeosGeoElement class]);
}

- (IOSObjectArray *)RegularPolygonWithNSStringArray:(IOSObjectArray *)labels
      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
   withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)n {
  OrgGeogebraCommonKernelAlgosAlgoPolygonRegular *algo = [new_OrgGeogebraCommonKernelAlgosAlgoPolygonRegular_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, A, B, n) autorelease];
  return [algo getOutput];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)AreaWithNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonKernelAlgosAlgoAreaConic *algo = [new_OrgGeogebraCommonKernelAlgosAlgoAreaConic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_(cons_, label, c) autorelease];
  OrgGeogebraCommonKernelGeosGeoNumeric *num = [algo getArea];
  return num;
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)PerimeterWithNSString:(NSString *)label
                       withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)polygon {
  OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly *algo = [new_OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPolygon_(cons_, label, polygon) autorelease];
  return [algo getCircumference];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)CircumferenceWithNSString:(NSString *)label
                       withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)conic {
  OrgGeogebraCommonKernelAlgosAlgoCircumferenceConic *algo = [new_OrgGeogebraCommonKernelAlgosAlgoCircumferenceConic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoConicND_(cons_, label, conic) autorelease];
  return [algo getCircumference];
}

- (IOSObjectArray *)DilateWithNSString:(NSString *)label
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoDil
withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)S {
  OrgGeogebraCommonKernelTransform *t = [new_OrgGeogebraCommonKernelTransformDilate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, r, S) autorelease];
  return [t transformWithOrgGeogebraCommonKernelGeosGeoElement:geoDil withNSString:label];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)DistanceWithNSString:(NSString *)label
                  withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                  withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  OrgGeogebraCommonKernelAlgosAlgoDistancePoints *algo = [new_OrgGeogebraCommonKernelAlgosAlgoDistancePoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, P, Q) autorelease];
  OrgGeogebraCommonKernelGeosGeoNumeric *num = [algo getDistance];
  return num;
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)DistanceWithNSString:(NSString *)label
                  withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                      withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g {
  OrgGeogebraCommonKernelAlgosAlgoDistancePointObject *algo = [new_OrgGeogebraCommonKernelAlgosAlgoDistancePointObject_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, label, P, g) autorelease];
  OrgGeogebraCommonKernelGeosGeoNumeric *num = [algo getDistance];
  return num;
}

- (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)ImplicitPolyWithNSString:(NSString *)label
                              withOrgGeogebraCommonKernelGeosGeoFunctionNVar:(OrgGeogebraCommonKernelGeosGeoFunctionNVar *)func {
  OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction *algo = [new_OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_(cons_, label, func) autorelease];
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly *implicitPoly = [algo getImplicitPoly];
  return implicitPoly;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)PointInWithNSString:(NSString *)label
                           withOrgGeogebraCommonKernelRegion:(id<OrgGeogebraCommonKernelRegion>)region
                                                  withDouble:(jdouble)x
                                                  withDouble:(jdouble)y
                                                 withBoolean:(jboolean)addToConstruction
                                                 withBoolean:(jboolean)complex
                                                 withBoolean:(jboolean)coords2D {
  return OrgGeogebraCommonKernelAlgosAlgoDispatcher_PointInWithNSString_withOrgGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(self, label, region, x, y, addToConstruction, complex, coords2D);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PointInWithNSString:(NSString *)label
                                   withOrgGeogebraCommonKernelRegion:(id<OrgGeogebraCommonKernelRegion>)region
                             withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords
                                                         withBoolean:(jboolean)addToConstruction
                                                         withBoolean:(jboolean)complex
                                                         withBoolean:(jboolean)coords2D {
  return OrgGeogebraCommonKernelAlgosAlgoDispatcher_PointInWithNSString_withOrgGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(self, label, region, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX], [coords getY], addToConstruction, complex, coords2D);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)MidpointWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                      withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)Q {
  OrgGeogebraCommonKernelAlgosAlgoMidpoint *algo = [new_OrgGeogebraCommonKernelAlgosAlgoMidpoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(cons_, label, P, Q) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *M = [algo getPoint];
  return M;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)MidpointWithNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoSegment:(OrgGeogebraCommonKernelGeosGeoSegment *)s {
  OrgGeogebraCommonKernelAlgosAlgoMidpointSegment *algo = [new_OrgGeogebraCommonKernelAlgosAlgoMidpointSegment_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoSegment_(cons_, label, s) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *M = [algo getPoint];
  return M;
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)LengthWithNSString:(NSString *)label
                       withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)list {
  OrgGeogebraCommonKernelAlgosAlgoListLength *algo = [new_OrgGeogebraCommonKernelAlgosAlgoListLength_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(cons_, label, list) autorelease];
  return [algo getLength];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)LengthWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelGeosGeoLocus:(OrgGeogebraCommonKernelGeosGeoLocus *)locus {
  OrgGeogebraCommonKernelAlgosAlgoLengthLocus *algo = [new_OrgGeogebraCommonKernelAlgosAlgoLengthLocus_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLocus_(cons_, label, locus) autorelease];
  return [algo getLength];
}

- (IOSObjectArray *)PolygonWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)P {
  OrgGeogebraCommonKernelAlgosAlgoPolygon *algo = [new_OrgGeogebraCommonKernelAlgosAlgoPolygon_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, labels, P) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PolygonWithNSStringArray:(IOSObjectArray *)labels
      withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)pointList {
  OrgGeogebraCommonKernelAlgosAlgoPolygon *algo = [new_OrgGeogebraCommonKernelAlgosAlgoPolygon_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoList_(cons_, labels, pointList) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PolyLineWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)P
                                  withBoolean:(jboolean)penStroke {
  OrgGeogebraCommonKernelAlgosAlgoPolyLine *algo = [new_OrgGeogebraCommonKernelAlgosAlgoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_(cons_, labels, P, penStroke) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)IntersectPolygonsWithNSStringArray:(IOSObjectArray *)labels
             withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)poly0
             withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)poly1 {
  OrgGeogebraCommonKernelAlgosAlgoPolygonIntersection *algo = [new_OrgGeogebraCommonKernelAlgosAlgoPolygonIntersection_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelGeosGeoPolygon_(cons_, labels, poly0, poly1) autorelease];
  IOSObjectArray *polygon = [algo getOutput];
  return polygon;
}

- (IOSObjectArray *)UnionWithNSStringArray:(IOSObjectArray *)labels
 withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)poly0
 withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)poly1 {
  OrgGeogebraCommonKernelAlgosAlgoPolygonUnion *algo = [new_OrgGeogebraCommonKernelAlgosAlgoPolygonUnion_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelGeosGeoPolygon_(cons_, labels, poly0, poly1) autorelease];
  IOSObjectArray *polygon = [algo getOutput];
  return polygon;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)LocusWithNSString:(NSString *)label
               withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q
               withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  if (!OrgGeogebraCommonKernelAlgosAlgoDispatcher_LocusCheckWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, P, Q)) return nil;
  if ([[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPath] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]]) if ([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([P getPath], [OrgGeogebraCommonKernelGeosGeoList class])))) shouldUseAlgoLocusListWithBoolean:YES]) return [([new_OrgGeogebraCommonKernelAlgosAlgoLocusList_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(cons_, label, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(Q, [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoPoint class])) autorelease]) getLocus];
  return [([new_OrgGeogebraCommonKernelAlgosAlgoLocus_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, Q, P) autorelease]) getLocus];
}

- (jboolean)LocusCheckWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  return OrgGeogebraCommonKernelAlgosAlgoDispatcher_LocusCheckWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, P, Q);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)LocusWithNSString:(NSString *)label
               withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q
                   withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)P {
  if (![((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(P)) isSlider] || ![P isDefined] || ![P isAnimatable] || [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Q)) getPath] != nil || ![P isParentOfWithOrgGeogebraCommonKernelKernelNDGeoElementND:Q]) return nil;
  return [self LocusNoCheckWithNSString:label withOrgGeogebraCommonKernelKernelNDGeoPointND:Q withOrgGeogebraCommonKernelGeosGeoNumeric:P];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)LocusNoCheckWithNSString:(NSString *)label
                      withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q
                          withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)P {
  OrgGeogebraCommonKernelAlgosAlgoLocusSlider *algo = [new_OrgGeogebraCommonKernelAlgosAlgoLocusSlider_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, label, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(Q, [OrgGeogebraCommonKernelGeosGeoPoint class]), P) autorelease];
  return (OrgGeogebraCommonKernelGeosGeoLocus *) check_class_cast([algo getLocus], [OrgGeogebraCommonKernelGeosGeoLocus class]);
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)DistanceWithNSString:(NSString *)label
                   withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                   withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)h {
  OrgGeogebraCommonKernelAlgosAlgoDistanceLineLine *algo = [new_OrgGeogebraCommonKernelAlgosAlgoDistanceLineLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(cons_, label, (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(h, [OrgGeogebraCommonKernelGeosGeoLine class])) autorelease];
  OrgGeogebraCommonKernelGeosGeoNumeric *num = [algo getDistance];
  return num;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)IntersectLinesWithNSString:(NSString *)label
                               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)h {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLines *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectLines_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(cons_, label, (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(h, [OrgGeogebraCommonKernelGeosGeoLine class])) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *S = [algo getPoint];
  return S;
}

- (IOSObjectArray *)NSolveODEWithNSStringArray:(IOSObjectArray *)labels
        withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)fun
     withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)startX
        withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)startY
     withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)endX {
  OrgGeogebraCommonKernelAlgosAlgoNSolveODE *algo = [new_OrgGeogebraCommonKernelAlgosAlgoNSolveODE_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_(cons_, labels, fun, startX, startY, endX) autorelease];
  return [algo getResult];
}

- (IOSObjectArray *)IntersectLinePolyLineWithNSStringArray:(IOSObjectArray *)labels
                    withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g
                withOrgGeogebraCommonKernelGeosGeoPolyLine:(OrgGeogebraCommonKernelGeosGeoPolyLine *)p {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelGeosGeoPoly_(cons_, labels, g, p) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)IntersectLineCurveWithNSStringArray:(IOSObjectArray *)labels
                 withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g
       withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)p {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(cons_, labels, g, p) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)IntersectCurveCurveWithNSStringArray:(IOSObjectArray *)labels
        withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)g
        withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)p {
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(cons_, labels, g, p) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)IntersectCurveCurveSingleWithNSStringArray:(IOSObjectArray *)labels
              withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)c1
              withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)c2
                                                    withDouble:(jdouble)x
                                                    withDouble:(jdouble)y {
  OrgGeogebraCommonKernelGeosGeoPoint *p = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons_, x, y, 1.0) autorelease];
  jdouble t1 = [c1 getClosestParameterWithOrgGeogebraCommonKernelKernelNDGeoPointND:p withDouble:([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(c1)) getMinParameter] + [c1 getMaxParameter]) / 2];
  jdouble t2 = [c2 getClosestParameterWithOrgGeogebraCommonKernelKernelNDGeoPointND:p withDouble:([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(c2)) getMinParameter] + [c2 getMaxParameter]) / 2];
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelGeosGeoNumberValue_(cons_, labels, c1, c2, [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, t1) autorelease], [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, t2) autorelease]) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)IntersectLinePolygonWithNSStringArray:(IOSObjectArray *)labels
                   withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g
                withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)p {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelGeosGeoPoly_(cons_, labels, g, p) autorelease];
  return [algo getOutput];
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectFunctionsWithNSString:(NSString *)label
                             withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                             withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)g
                                withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)A {
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoPoint_(cons_, label, f, g, A) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *S = [algo getIntersectionPoint];
  return S;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectFunctionLineWithNSString:(NSString *)label
                                withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                    withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l
                                   withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)A {
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoPoint_(cons_, label, f, l, A) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *S = [algo getIntersectionPoint];
  return S;
}

- (IOSObjectArray *)IntersectLineConicWithNSStringArray:(IOSObjectArray *)labels
           withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
          withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoLine class]) withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(c, [OrgGeogebraCommonKernelGeosGeoConic class])];
  [((OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(labels, points);
  return points;
}

- (IOSObjectArray *)IntersectConicsWithNSStringArray:(IOSObjectArray *)labels
       withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)a
       withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)b {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(a, [OrgGeogebraCommonKernelGeosGeoConic class]) withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(b, [OrgGeogebraCommonKernelGeosGeoConic class])];
  [((OrgGeogebraCommonKernelAlgosAlgoIntersectConics *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(labels, points);
  return points;
}

- (IOSObjectArray *)IntersectPolynomialsWithNSStringArray:(IOSObjectArray *)labels
               withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)a
               withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)b {
  if (![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(a)) isPolynomialFunctionWithBoolean:NO] || ![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(b)) isPolynomialFunctionWithBoolean:NO]) {
    OrgGeogebraCommonKernelGeosGeoPoint *A = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
    [A setZero];
    NSString *label = labels == nil ? nil : IOSObjectArray_Get(labels, 0);
    OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoPoint_(cons_, label, a, b, A) autorelease];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getIntersectionPoint] } count:1 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
    return ret;
  }
  OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomials *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:a withOrgGeogebraCommonKernelGeosGeoFunction:b];
  [((OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomials *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  [algo setLabelsWithNSStringArray:labels];
  IOSObjectArray *points = [algo getIntersectionPoints];
  return points;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialsSingleWithNSString:(NSString *)label
                                     withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)a
                                     withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)b
                                                                     withDouble:(jdouble)xRW
                                                                     withDouble:(jdouble)yRW {
  if (![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(a)) isPolynomialFunctionWithBoolean:NO] || ![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(b)) isPolynomialFunctionWithBoolean:NO]) return nil;
  OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomials *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:a withOrgGeogebraCommonKernelGeosGeoFunction:b];
  jint index = [((OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomials *) nil_chk(algo)) getClosestPointIndexWithDouble:xRW withDouble:yRW];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, index) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (IOSObjectArray *)IntersectPolynomialLineWithNSStringArray:(IOSObjectArray *)labels
                  withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                      withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l {
  if (![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) isPolynomialFunctionWithBoolean:NO]) {
    OrgGeogebraCommonKernelGeosGeoPoint *A = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
    [A setZero];
    NSString *label = labels == nil ? nil : IOSObjectArray_Get(labels, 0);
    OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoPoint_(cons_, label, f, l, A) autorelease];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getIntersectionPoint] } count:1 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
    return ret;
  }
  OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:f withOrgGeogebraCommonKernelGeosGeoLine:l];
  [((OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  [algo setLabelsWithNSStringArray:labels];
  IOSObjectArray *points = [algo getIntersectionPoints];
  return points;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectConicsSingleWithNSString:(NSString *)label
                                   withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)a
                                   withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)b
                                                                withDouble:(jdouble)xRW
                                                                withDouble:(jdouble)yRW {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoConic:a withOrgGeogebraCommonKernelGeosGeoConic:b];
  jint index = [((OrgGeogebraCommonKernelAlgosAlgoIntersectConics *) nil_chk(algo)) getClosestPointIndexWithDouble:xRW withDouble:yRW];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, index) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (IOSObjectArray *)IntersectPolynomialConicWithNSStringArray:(IOSObjectArray *)labels
                   withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                      withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c {
  OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:f withOrgGeogebraCommonKernelGeosGeoConic:c];
  [((OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  [algo setLabelsWithNSStringArray:labels];
  return points;
}

- (IOSObjectArray *)IntersectImplicitpolyLineWithNSStringArray:(IOSObjectArray *)labels
            withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p
                        withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l {
  OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p withOrgGeogebraCommonKernelGeosGeoLine:l];
  [((OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  [algo setLabelsWithNSStringArray:labels];
  return points;
}

- (IOSObjectArray *)IntersectImplicitpolyPolynomialWithNSStringArray:(IOSObjectArray *)labels
                  withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p
                          withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f {
  OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p withOrgGeogebraCommonKernelGeosGeoFunction:f];
  [((OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  [algo setLabelsWithNSStringArray:labels];
  return points;
}

- (IOSObjectArray *)IntersectImplicitpolysWithNSStringArray:(IOSObjectArray *)labels
         withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p1
         withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p2 {
  OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p1 withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p2];
  [((OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  [algo setLabelsWithNSStringArray:labels];
  return points;
}

- (IOSObjectArray *)IntersectImplicitpolyConicWithNSStringArray:(IOSObjectArray *)labels
             withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                        withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c1 {
  OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p1 withOrgGeogebraCommonKernelGeosGeoConic:c1];
  [((OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  [algo setLabelsWithNSStringArray:labels];
  return points;
}

- (OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                                                                         withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c {
  OrgGeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:f withOrgGeogebraCommonKernelGeosGeoElement:c];
  if (existingAlgo != nil) return (OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *) check_class_cast(existingAlgo, [OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialConic class]);
  OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoConic_(cons_, f, c) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g
                                                                               withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c {
  OrgGeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:g withOrgGeogebraCommonKernelGeosGeoElement:c];
  if (existingAlgo != nil) return (OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *) check_class_cast(existingAlgo, [OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic class]);
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_(cons_, g, c) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (OrgGeogebraCommonKernelAlgosAlgoIntersectConics *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)a
                                                                             withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)b {
  OrgGeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:b];
  if (existingAlgo != nil) return (OrgGeogebraCommonKernelAlgosAlgoIntersectConics *) check_class_cast(existingAlgo, [OrgGeogebraCommonKernelAlgosAlgoIntersectConics class]);
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_(cons_, a, b) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomials *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)a
                                                                                  withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)b {
  OrgGeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:b];
  if (existingAlgo != nil) return (OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomials *) check_class_cast(existingAlgo, [OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomials class]);
  OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomials *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomials_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(cons_, a, b) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)a
                                                                                         withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l {
  OrgGeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:l];
  if (existingAlgo != nil) return (OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *) check_class_cast(existingAlgo, [OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialLine class]);
  OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *algo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialLine_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_(cons_, a, l) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                                                                                            withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l {
  OrgGeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:p withOrgGeogebraCommonKernelGeosGeoElement:l];
  if (existingAlgo != nil) return (OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *) check_class_cast(existingAlgo, [OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric class]);
  OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *algo = [new_OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoLine_(cons_, p, l) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                                                                                        withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f {
  OrgGeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:p withOrgGeogebraCommonKernelGeosGeoElement:f];
  if (existingAlgo != nil) return (OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *) check_class_cast(existingAlgo, [OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric class]);
  OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *algo = [new_OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoFunction_(cons_, p, f) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                                                                                       withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p2 {
  OrgGeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:p1 withOrgGeogebraCommonKernelGeosGeoElement:p2];
  if (existingAlgo != nil) return (OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *) check_class_cast(existingAlgo, [OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys class]);
  OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [new_OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_(cons_, p1, p2) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *)getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                                                                                                  withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c1 {
  OrgGeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:p1 withOrgGeogebraCommonKernelGeosGeoElement:c1];
  if (existingAlgo != nil) return (OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *) check_class_cast(existingAlgo, [OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys class]);
  OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [new_OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoConic_(cons_, p1, c1) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (OrgGeogebraCommonKernelAlgosAlgoElement *)findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)a
                                                                              withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)b {
  jint size = [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) size];
  OrgGeogebraCommonKernelAlgosAlgoElement *algo;
  for (jint i = 0; i < size; i++) {
    algo = [intersectionAlgos_ getWithInt:i];
    IOSObjectArray *input = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
    if ((a == IOSObjectArray_Get(nil_chk(input), 0) && b == IOSObjectArray_Get(input, 1)) || (a == IOSObjectArray_Get(input, 1) && b == IOSObjectArray_Get(input, 0))) return algo;
  }
  return nil;
}

- (IOSObjectArray *)TangentWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonKernelAlgosAlgoTangentPoint *algo = [new_OrgGeogebraCommonKernelAlgosAlgoTangentPoint_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(cons_, labels, P, c) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)CommonTangentsWithNSStringArray:(IOSObjectArray *)labels
      withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c1
      withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c2 {
  OrgGeogebraCommonKernelAlgosAlgoCommonTangents *algo = [new_OrgGeogebraCommonKernelAlgosAlgoCommonTangents_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(cons_, labels, c1, c2) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)TangentWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonKernelAlgosAlgoTangentLine *algo = [new_OrgGeogebraCommonKernelAlgosAlgoTangentLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(cons_, labels, g, c) autorelease];
  return [algo getOutput];
}

- (OrgGeogebraCommonKernelGeosGeoLine *)TangentWithNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f {
  return OrgGeogebraCommonKernelKernelCAS_TangentWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoFunction_(cons_, label, P, f);
}

- (IOSObjectArray *)TangentWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)R
withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p {
  OrgGeogebraCommonKernelImplicitAlgoTangentImplicitpoly *algo = [new_OrgGeogebraCommonKernelImplicitAlgoTangentImplicitpoly_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, labels, p, R) autorelease];
  [algo setLabelsWithNSStringArray:labels];
  IOSObjectArray *tangents = [algo getTangents];
  return tangents;
}

- (IOSObjectArray *)TranslateWithNSString:(NSString *)label
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoTrans
  withOrgGeogebraCommonKernelGeosGeoVec3D:(OrgGeogebraCommonKernelGeosGeoVec3D *)v {
  return OrgGeogebraCommonKernelAlgosAlgoDispatcher_TranslateWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoVec3D_(self, label, geoTrans, v);
}

- (IOSObjectArray *)TranslateNDWithNSString:(NSString *)label
  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoTrans
withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)v {
  return OrgGeogebraCommonKernelAlgosAlgoDispatcher_TranslateWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoVec3D_(self, label, geoTrans, (OrgGeogebraCommonKernelGeosGeoVec3D *) check_class_cast(v, [OrgGeogebraCommonKernelGeosGeoVec3D class]));
}

- (IOSObjectArray *)MirrorWithNSString:(NSString *)label
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoMir
withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)Q {
  OrgGeogebraCommonKernelTransform *t = [new_OrgGeogebraCommonKernelTransformMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_(cons_, Q) autorelease];
  return [t transformWithOrgGeogebraCommonKernelGeosGeoElement:geoMir withNSString:label];
}

- (IOSObjectArray *)MirrorWithNSString:(NSString *)label
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)Q
withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)conic {
  OrgGeogebraCommonKernelTransform *t = [new_OrgGeogebraCommonKernelTransformMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoConic_(cons_, conic) autorelease];
  return [t transformWithOrgGeogebraCommonKernelGeosGeoElement:Q withNSString:label];
}

- (IOSObjectArray *)MirrorWithNSString:(NSString *)label
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoMir
withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g {
  OrgGeogebraCommonKernelTransform *t = [new_OrgGeogebraCommonKernelTransformMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoLine_(cons_, g) autorelease];
  return [t transformWithOrgGeogebraCommonKernelGeosGeoElement:geoMir withNSString:label];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)attachWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                                                                     withOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>)path
                                          withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>)view
                                                             withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)locRW {
  @try {
    jboolean oldLabelCreationFlag = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    jboolean setDefaultColor = NO;
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class])))) getColorFunction] == nil) {
      setDefaultColor = [((OrgGeogebraCommonAwtGColor *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class])))) getObjectColor])) isEqual:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE])) getObjectColor]];
    }
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> newPoint = [self PointWithNSString:nil withOrgGeogebraCommonKernelPath:path withOrgGeogebraCommonKernelMatrixCoords:locRW withBoolean:NO withBoolean:NO withBoolean:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getMode] != OrgGeogebraCommonKernelKernel_COORD_CARTESIAN_3D];
    [cons_ setSuppressLabelCreationWithBoolean:oldLabelCreationFlag];
    [cons_ replaceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class]) withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(newPoint, [OrgGeogebraCommonKernelGeosGeoElement class])];
    if (setDefaultColor) {
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(newPoint)) setObjColorWithOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH])) getObjectColor]];
    }
    return newPoint;
  }
  @catch (JavaLangException *e1) {
    [((JavaLangException *) nil_chk(e1)) printStackTrace];
    return nil;
  }
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)attachWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                                                                   withOrgGeogebraCommonKernelRegion:(id<OrgGeogebraCommonKernelRegion>)region
                                          withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>)view
                                                             withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)locRW {
  @try {
    jboolean oldLabelCreationFlag = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    jboolean setDefaultColor = NO;
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class])))) getColorFunction] == nil) {
      setDefaultColor = [((OrgGeogebraCommonAwtGColor *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class])))) getObjectColor])) isEqual:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE])) getObjectColor]];
    }
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> newPoint = [self PointInWithNSString:nil withOrgGeogebraCommonKernelRegion:region withOrgGeogebraCommonKernelMatrixCoords:locRW withBoolean:NO withBoolean:NO withBoolean:YES];
    [cons_ setSuppressLabelCreationWithBoolean:oldLabelCreationFlag];
    [cons_ replaceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class]) withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(newPoint, [OrgGeogebraCommonKernelGeosGeoElement class])];
    if (setDefaultColor) {
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(newPoint)) setObjColorWithOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_IN_REGION])) getObjectColor]];
    }
    return newPoint;
  }
  @catch (JavaLangException *e1) {
    [((JavaLangException *) nil_chk(e1)) printStackTrace];
    return nil;
  }
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)detachWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p
                                          withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>)view {
  @try {
    jboolean oldLabelCreationFlag = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    jboolean setDefaultColor = NO;
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoElement class])))) getColorFunction] == nil) {
      if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) hasPath]) {
        setDefaultColor = [((OrgGeogebraCommonAwtGColor *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoElement class])) getObjectColor])) isEqual:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH])) getObjectColor]];
      }
      else if ([p hasRegion]) {
        setDefaultColor = [((OrgGeogebraCommonAwtGColor *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoElement class])) getObjectColor])) isEqual:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_IN_REGION])) getObjectColor]];
      }
    }
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> newPoint = [self copyFreePointWithOrgGeogebraCommonKernelKernelNDGeoPointND:p withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:view];
    [cons_ setSuppressLabelCreationWithBoolean:oldLabelCreationFlag];
    [cons_ replaceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoElement class]) withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(newPoint, [OrgGeogebraCommonKernelGeosGeoElement class])];
    if (setDefaultColor) {
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(newPoint)) setObjColorWithOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE])) getObjectColor]];
    }
    return newPoint;
  }
  @catch (JavaLangException *e1) {
    [((JavaLangException *) nil_chk(e1)) printStackTrace];
    return nil;
  }
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)copyFreePointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                                                 withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>)view {
  jdouble xOffset = 0, yOffset = 0;
  if (![((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(view)) isEuclidianView3D]) {
    xOffset = OrgGeogebraCommonKernelAlgosAlgoDispatcher_DETACH_OFFSET_ * [view getInvXscale];
    yOffset = OrgGeogebraCommonKernelAlgosAlgoDispatcher_DETACH_OFFSET_ * [view getInvYscale];
  }
  return [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons_, nil, [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomX] + xOffset, [point getInhomY] + yOffset, 1.0) autorelease];
}

- (jboolean)detachWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                                                     withDouble:(jdouble)d
                                                     withDouble:(jdouble)e
                                                    withBoolean:(jboolean)wasOnPath
                                                    withBoolean:(jboolean)wasOnRegion {
  @try {
    jboolean oldLabelCreationFlag = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    jboolean setDefaultColor = NO;
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class])))) getColorFunction] == nil) {
      if (wasOnPath) {
        setDefaultColor = [((OrgGeogebraCommonAwtGColor *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class])))) getObjectColor])) isEqual:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH])) getObjectColor]];
      }
      else if (wasOnRegion) {
        setDefaultColor = [((OrgGeogebraCommonAwtGColor *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class])))) getObjectColor])) isEqual:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_IN_REGION])) getObjectColor]];
      }
    }
    OrgGeogebraCommonKernelGeosGeoPoint *newPoint = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons_, nil, d, e, 1.0) autorelease];
    [cons_ setSuppressLabelCreationWithBoolean:oldLabelCreationFlag];
    [cons_ replaceWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class]) withOrgGeogebraCommonKernelGeosGeoElement:newPoint];
    if (setDefaultColor) {
      [newPoint setObjColorWithOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE])) getObjectColor]];
    }
  }
  @catch (JavaLangException *e1) {
    [((JavaLangException *) nil_chk(e1)) printStackTrace];
    return NO;
  }
  return YES;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialLineSingleWithNSString:(NSString *)label
                                        withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                            withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l
                                                                        withDouble:(jdouble)xRW
                                                                        withDouble:(jdouble)yRW {
  if (![((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) getConstruction])) isFileLoading] && ![f isPolynomialFunctionWithBoolean:NO]) return nil;
  OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:f withOrgGeogebraCommonKernelGeosGeoLine:l];
  jint index = [((OrgGeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *) nil_chk(algo)) getClosestPointIndexWithDouble:xRW withDouble:yRW];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, index) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialConicSingleWithNSString:(NSString *)label
                                         withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                            withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c
                                                                         withDouble:(jdouble)x
                                                                         withDouble:(jdouble)y {
  OrgGeogebraCommonKernelAlgosAlgoIntersect *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:f withOrgGeogebraCommonKernelGeosGeoConic:c];
  jint idx = [((OrgGeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo)) getClosestPointIndexWithDouble:x withDouble:y];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, idx) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectLineConicSingleWithNSString:(NSString *)label
                                       withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g
                                      withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c
                                                                   withDouble:(jdouble)xRW
                                                                   withDouble:(jdouble)yRW {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoLine:g withOrgGeogebraCommonKernelGeosGeoConic:c];
  jint index = [((OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *) nil_chk(algo)) getClosestPointIndexWithDouble:xRW withDouble:yRW];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, index) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyLineSingleWithNSString:(NSString *)label
                                  withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                              withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l
                                                                          withDouble:(jdouble)x
                                                                          withDouble:(jdouble)y {
  OrgGeogebraCommonKernelAlgosAlgoIntersect *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p withOrgGeogebraCommonKernelGeosGeoLine:l];
  jint idx = [((OrgGeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo)) getClosestPointIndexWithDouble:x withDouble:y];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, idx) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyPolynomialSingleWithNSString:(NSString *)label
                                        withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                                withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                                                                withDouble:(jdouble)x
                                                                                withDouble:(jdouble)y {
  if (![((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) getConstruction])) isFileLoading] && ![f isPolynomialFunctionWithBoolean:NO]) return nil;
  OrgGeogebraCommonKernelAlgosAlgoIntersect *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p withOrgGeogebraCommonKernelGeosGeoFunction:f];
  jint idx = [((OrgGeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo)) getClosestPointIndexWithDouble:x withDouble:y];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, idx) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyConicSingleWithNSString:(NSString *)label
                                   withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                                              withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c1
                                                                           withDouble:(jdouble)x
                                                                           withDouble:(jdouble)y {
  OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p1 withOrgGeogebraCommonKernelGeosGeoConic:c1];
  jint idx = [((OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *) nil_chk(algo)) getClosestPointIndexWithDouble:x withDouble:y];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, idx) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolysSingleWithNSString:(NSString *)label
                               withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                               withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p2
                                                                       withDouble:(jdouble)x
                                                                       withDouble:(jdouble)y {
  OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [self getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p1 withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:p2];
  jint idx = [((OrgGeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *) nil_chk(algo)) getClosestPointIndexWithDouble:x withDouble:y];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, idx) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (OrgGeogebraCommonKernelAlgosAlgoClosestPoint *)getNewAlgoClosestPointWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons2
                                                                                withOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>)path
                                                                  withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  return [new_OrgGeogebraCommonKernelAlgosAlgoClosestPoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelPath_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons2, path, point) autorelease];
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)createLineAngleWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)line1
                                                        withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)line2 {
  OrgGeogebraCommonKernelGeosGeoAngle *angle = nil;
  if (([line1 isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) && ([line2 isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]])) {
    OrgGeogebraCommonKernelGeosGeoSegment *a = (OrgGeogebraCommonKernelGeosGeoSegment *) check_class_cast(line1, [OrgGeogebraCommonKernelGeosGeoSegment class]);
    OrgGeogebraCommonKernelGeosGeoSegment *b = (OrgGeogebraCommonKernelGeosGeoSegment *) check_class_cast(line2, [OrgGeogebraCommonKernelGeosGeoSegment class]);
    OrgGeogebraCommonKernelGeosGeoPoint *a1 = ((OrgGeogebraCommonKernelGeosGeoPoint *) [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(a)) getStartPoint]);
    OrgGeogebraCommonKernelGeosGeoPoint *a2 = ((OrgGeogebraCommonKernelGeosGeoPoint *) [a getEndPoint]);
    OrgGeogebraCommonKernelGeosGeoPoint *b1 = ((OrgGeogebraCommonKernelGeosGeoPoint *) [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(b)) getStartPoint]);
    OrgGeogebraCommonKernelGeosGeoPoint *b2 = ((OrgGeogebraCommonKernelGeosGeoPoint *) [b getEndPoint]);
    if (a1 == b1) {
      angle = OrgGeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, nil, a2, a1, b2);
    }
    else if (a1 == b2) {
      angle = OrgGeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, nil, a2, a1, b1);
    }
    else if (a2 == b1) {
      angle = OrgGeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, nil, a1, a2, b2);
    }
    else if (a2 == b2) {
      angle = OrgGeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, nil, a1, a2, b1);
    }
  }
  if (angle == nil) {
    angle = OrgGeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(self, nil, line1, line2);
  }
  return angle;
}

- (OrgGeogebraCommonKernelAlgosAlgoVertexPolygon *)newAlgoVertexPolygonWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                                                             withNSStringArray:(IOSObjectArray *)labels
                                                                        withOrgGeogebraCommonKernelGeosGeoPoly:(id<OrgGeogebraCommonKernelGeosGeoPoly>)p {
  return [new_OrgGeogebraCommonKernelAlgosAlgoVertexPolygon_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPoly_(cons, labels, p) autorelease];
}

- (void)dealloc {
  RELEASE_(cons_);
  RELEASE_(intersectionAlgos_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "AlgoDispatcher", NULL, 0x1, NULL, NULL },
    { "removeIntersectionAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoIntersectAbstract:", "removeIntersectionAlgorithm", "V", 0x1, NULL, NULL },
    { "addIntersectionAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoIntersectAbstract:", "addIntersectionAlgorithm", "V", 0x1, NULL, NULL },
    { "PointWithNSString:withDouble:withDouble:withBoolean:", "Point", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "VectorWithNSString:withDouble:withDouble:", "Vector", "Lorg.geogebra.common.kernel.geos.GeoVector;", 0x11, NULL, NULL },
    { "VectorWithNSString:", "Vector", "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x1, NULL, NULL },
    { "Vector", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x1, NULL, NULL },
    { "VectorWithDouble:withDouble:", "Vector", "Lorg.geogebra.common.kernel.geos.GeoVector;", 0x11, NULL, NULL },
    { "PointWithNSString:withOrgGeogebraCommonKernelPath:withDouble:withDouble:withBoolean:withBoolean:withBoolean:", "Point", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "PointWithNSString:withOrgGeogebraCommonKernelPath:withOrgGeogebraCommonKernelMatrixCoords:withBoolean:withBoolean:withBoolean:", "Point", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "PointWithNSString:withOrgGeogebraCommonKernelPath:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Point", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "LineWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "Line", "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "RayWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "Ray", "Lorg.geogebra.common.kernel.geos.GeoRay;", 0x11, NULL, NULL },
    { "RayWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoVector:", "Ray", "Lorg.geogebra.common.kernel.geos.GeoRay;", 0x11, NULL, NULL },
    { "LineWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoLine:", "Line", "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "OrthogonalLineWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoVector:", "OrthogonalLine", "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "OrthogonalLineWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoLine:", "OrthogonalLine", "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "LineBisectorWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "LineBisector", "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "LineBisectorWithNSString:withOrgGeogebraCommonKernelGeosGeoSegment:", "LineBisector", "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "AngularBisectorWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "AngularBisector", "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "AngularBisectorWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoLine:", "AngularBisector", "[Lorg.geogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "VectorWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "Vector", "Lorg.geogebra.common.kernel.geos.GeoVector;", 0x11, NULL, NULL },
    { "VectorWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Vector", "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x11, NULL, NULL },
    { "createVectorWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "createVector", "Lorg.geogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
    { "SlopeWithNSString:withOrgGeogebraCommonKernelGeosGeoLine:", "Slope", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "SegmentWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "Segment", "Lorg.geogebra.common.kernel.geos.GeoSegment;", 0x11, NULL, NULL },
    { "ListWithNSString:withJavaUtilArrayList:withBoolean:", "List", "Lorg.geogebra.common.kernel.geos.GeoList;", 0x11, NULL, NULL },
    { "DependentFunctionWithNSString:withOrgGeogebraCommonKernelArithmeticFunction:", "DependentFunction", "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x11, NULL, NULL },
    { "textfieldWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:", "textfield", "Lorg.geogebra.common.kernel.geos.GeoTextField;", 0x1, NULL, NULL },
    { "LineWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoVector:", "Line", "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "SegmentWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Segment", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "SegmentFixedWithNSString:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "SegmentFixed", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "AngleWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoNumberValue:withBoolean:", "Angle", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "RotateWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Rotate", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "AngleWithNSString:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoLine:", "Angle", "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "AngleWithNSString:withOrgGeogebraCommonKernelGeosGeoVector:withOrgGeogebraCommonKernelGeosGeoVector:", "Angle", "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "AngleWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "Angle", "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "AnglesWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoPolygon:", "Angles", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "getDefaultNumberWithBoolean:", "getDefaultNumber", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "CircleWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "Circle", "Lorg.geogebra.common.kernel.geos.GeoConic;", 0x11, NULL, NULL },
    { "CircumcircleArcWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "CircumcircleArc", "Lorg.geogebra.common.kernel.geos.GeoConicPart;", 0x11, NULL, NULL },
    { "CircumcircleSectorWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "CircumcircleSector", "Lorg.geogebra.common.kernel.geos.GeoConicPart;", 0x11, NULL, NULL },
    { "CircleArcSectorWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withInt:", "CircleArcSector", "Lorg.geogebra.common.kernel.geos.GeoConicPart;", 0x11, NULL, NULL },
    { "CenterWithNSString:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "Center", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x11, NULL, NULL },
    { "CircleWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Circle", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "CircleWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoSegment:", "Circle", "Lorg.geogebra.common.kernel.geos.GeoConic;", 0x11, NULL, NULL },
    { "CircleWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "Circle", "Lorg.geogebra.common.kernel.geos.GeoConic;", 0x11, NULL, NULL },
    { "SemicircleWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "Semicircle", "Lorg.geogebra.common.kernel.geos.GeoConicPart;", 0x11, NULL, NULL },
    { "ParabolaWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "Parabola", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "EllipseWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Ellipse", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "EllipseHyperbolaWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "EllipseHyperbola", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "HyperbolaWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "Hyperbola", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "ConicWithNSString:withOrgGeogebraCommonKernelGeosGeoPointArray:", "Conic", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "DiameterLineWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "DiameterLine", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "DiameterLineWithNSString:withOrgGeogebraCommonKernelKernelNDGeoVectorND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "DiameterLine", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "RegularPolygonWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "RegularPolygon", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "AreaWithNSString:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "Area", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "PerimeterWithNSString:withOrgGeogebraCommonKernelGeosGeoPolygon:", "Perimeter", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "CircumferenceWithNSString:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "Circumference", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "DilateWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelGeosGeoPoint:", "Dilate", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "DistanceWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Distance", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "DistanceWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelGeosGeoElement:", "Distance", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "ImplicitPolyWithNSString:withOrgGeogebraCommonKernelGeosGeoFunctionNVar:", "ImplicitPoly", "Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", 0x11, NULL, NULL },
    { "PointInWithNSString:withOrgGeogebraCommonKernelRegion:withDouble:withDouble:withBoolean:withBoolean:withBoolean:", "PointIn", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "PointInWithNSString:withOrgGeogebraCommonKernelRegion:withOrgGeogebraCommonKernelMatrixCoords:withBoolean:withBoolean:withBoolean:", "PointIn", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "MidpointWithNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "Midpoint", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "MidpointWithNSString:withOrgGeogebraCommonKernelGeosGeoSegment:", "Midpoint", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "LengthWithNSString:withOrgGeogebraCommonKernelGeosGeoList:", "Length", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "LengthWithNSString:withOrgGeogebraCommonKernelGeosGeoLocus:", "Length", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "PolygonWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "Polygon", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "PolygonWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoList:", "Polygon", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PolyLineWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:withBoolean:", "PolyLine", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectPolygonsWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelGeosGeoPolygon:", "IntersectPolygons", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "UnionWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelGeosGeoPolygon:", "Union", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "LocusWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Locus", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "LocusCheckWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "LocusCheck", "Z", 0x11, NULL, NULL },
    { "LocusWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelGeosGeoNumeric:", "Locus", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "LocusNoCheckWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelGeosGeoNumeric:", "LocusNoCheck", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "DistanceWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "Distance", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "IntersectLinesWithNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "IntersectLines", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "NSolveODEWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoNumeric:", "NSolveODE", "[Lorg.geogebra.common.kernel.geos.GeoLocus;", 0x11, NULL, NULL },
    { "IntersectLinePolyLineWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoPolyLine:", "IntersectLinePolyLine", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectLineCurveWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoCurveCartesian:", "IntersectLineCurve", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectCurveCurveWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoCurveCartesian:withOrgGeogebraCommonKernelGeosGeoCurveCartesian:", "IntersectCurveCurve", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectCurveCurveSingleWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoCurveCartesian:withOrgGeogebraCommonKernelGeosGeoCurveCartesian:withDouble:withDouble:", "IntersectCurveCurveSingle", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectLinePolygonWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoPolygon:", "IntersectLinePolygon", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectFunctionsWithNSString:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoPoint:", "IntersectFunctions", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectFunctionLineWithNSString:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoPoint:", "IntersectFunctionLine", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectLineConicWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "IntersectLineConic", "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "IntersectConicsWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "IntersectConics", "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "IntersectPolynomialsWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:", "IntersectPolynomials", "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectPolynomialsSingleWithNSString:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:withDouble:withDouble:", "IntersectPolynomialsSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectPolynomialLineWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoLine:", "IntersectPolynomialLine", "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectConicsSingleWithNSString:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoConic:withDouble:withDouble:", "IntersectConicsSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectPolynomialConicWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoConic:", "IntersectPolynomialConic", "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolyLineWithNSStringArray:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoLine:", "IntersectImplicitpolyLine", "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolyPolynomialWithNSStringArray:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoFunction:", "IntersectImplicitpolyPolynomial", "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolysWithNSStringArray:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:", "IntersectImplicitpolys", "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolyConicWithNSStringArray:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoConic:", "IntersectImplicitpolyConic", "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoConic:", "getIntersectionAlgorithm", "Lorg.geogebra.common.kernel.algos.AlgoIntersectPolynomialConic;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoConic:", "getIntersectionAlgorithm", "Lorg.geogebra.common.kernel.algos.AlgoIntersectLineConic;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoConic:", "getIntersectionAlgorithm", "Lorg.geogebra.common.kernel.algos.AlgoIntersectConics;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:", "getIntersectionAlgorithm", "Lorg.geogebra.common.kernel.algos.AlgoIntersectPolynomials;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoLine:", "getIntersectionAlgorithm", "Lorg.geogebra.common.kernel.algos.AlgoIntersectPolynomialLine;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoLine:", "getIntersectionAlgorithm", "Lorg.geogebra.common.kernel.implicit.AlgoIntersectImplicitpolyParametric;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoFunction:", "getIntersectionAlgorithm", "Lorg.geogebra.common.kernel.implicit.AlgoIntersectImplicitpolyParametric;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:", "getIntersectionAlgorithm", "Lorg.geogebra.common.kernel.implicit.AlgoIntersectImplicitpolys;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoConic:", "getIntersectionAlgorithm", "Lorg.geogebra.common.kernel.implicit.AlgoIntersectImplicitpolys;", 0x1, NULL, NULL },
    { "findExistingIntersectionAlgorithmWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "findExistingIntersectionAlgorithm", "Lorg.geogebra.common.kernel.algos.AlgoElement;", 0x1, NULL, NULL },
    { "TangentWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "Tangent", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "CommonTangentsWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "CommonTangents", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "TangentWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "Tangent", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "TangentWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelGeosGeoFunction:", "Tangent", "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "TangentWithNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:", "Tangent", "[Lorg.geogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "TranslateWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoVec3D:", "Translate", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "TranslateNDWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "TranslateND", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "MirrorWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoPoint:", "Mirror", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "MirrorWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoConic:", "Mirror", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "MirrorWithNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoLine:", "Mirror", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "attachWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelPath:withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:withOrgGeogebraCommonKernelMatrixCoords:", "attach", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "attachWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelRegion:withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:withOrgGeogebraCommonKernelMatrixCoords:", "attach", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "detachWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:", "detach", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "copyFreePointWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon:", "copyFreePoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "detachWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:withDouble:withBoolean:withBoolean:", "detach", "Z", 0x1, NULL, NULL },
    { "IntersectPolynomialLineSingleWithNSString:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoLine:withDouble:withDouble:", "IntersectPolynomialLineSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectPolynomialConicSingleWithNSString:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoConic:withDouble:withDouble:", "IntersectPolynomialConicSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectLineConicSingleWithNSString:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoConic:withDouble:withDouble:", "IntersectLineConicSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolyLineSingleWithNSString:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoLine:withDouble:withDouble:", "IntersectImplicitpolyLineSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolyPolynomialSingleWithNSString:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoFunction:withDouble:withDouble:", "IntersectImplicitpolyPolynomialSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolyConicSingleWithNSString:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoConic:withDouble:withDouble:", "IntersectImplicitpolyConicSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolysSingleWithNSString:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withDouble:withDouble:", "IntersectImplicitpolysSingle", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "getNewAlgoClosestPointWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelPath:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "getNewAlgoClosestPoint", "Lorg.geogebra.common.kernel.algos.AlgoClosestPoint;", 0x1, NULL, NULL },
    { "createLineAngleWithOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoLine:", "createLineAngle", "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "newAlgoVertexPolygonWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelGeosGeoPoly:", "newAlgoVertexPolygon", "Lorg.geogebra.common.kernel.algos.AlgoVertexPolygon;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cons_", NULL, 0x4, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
    { "intersectionAlgos_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/algos/AlgoIntersectAbstract;>;",  },
    { "DETACH_OFFSET_", NULL, 0xc, "I", &OrgGeogebraCommonKernelAlgosAlgoDispatcher_DETACH_OFFSET_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoDispatcher = { 2, "AlgoDispatcher", "org.geogebra.common.kernel.algos", NULL, 0x1, 134, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoDispatcher;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoDispatcher_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, OrgGeogebraCommonKernelConstruction *cons) {
  NSObject_init(self);
  OrgGeogebraCommonKernelAlgosAlgoDispatcher_setAndConsume_intersectionAlgos_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonKernelAlgosAlgoDispatcher_set_cons_(self, cons);
}

OrgGeogebraCommonKernelAlgosAlgoDispatcher *new_OrgGeogebraCommonKernelAlgosAlgoDispatcher_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelAlgosAlgoDispatcher *self = [OrgGeogebraCommonKernelAlgosAlgoDispatcher alloc];
  OrgGeogebraCommonKernelAlgosAlgoDispatcher_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

OrgGeogebraCommonKernelGeosGeoVector *OrgGeogebraCommonKernelAlgosAlgoDispatcher_VectorWithNSString_withDouble_withDouble_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, jdouble x, jdouble y) {
  OrgGeogebraCommonKernelGeosGeoVector *v = OrgGeogebraCommonKernelAlgosAlgoDispatcher_VectorWithDouble_withDouble_(self, x, y);
  [((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(v)) setLabelWithNSString:label];
  return v;
}

OrgGeogebraCommonKernelGeosGeoVector *OrgGeogebraCommonKernelAlgosAlgoDispatcher_VectorWithDouble_withDouble_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, jdouble x, jdouble y) {
  OrgGeogebraCommonKernelGeosGeoVector *v = [new_OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_(self->cons_) autorelease];
  [v setCoordsWithDouble:x withDouble:y withDouble:0.0];
  [v setModeWithInt:OrgGeogebraCommonKernelKernel_COORD_CARTESIAN];
  return v;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelAlgosAlgoDispatcher_PointWithNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, id<OrgGeogebraCommonKernelPath> path, jdouble x, jdouble y, jboolean addToConstruction, jboolean complex, jboolean coords2D) {
  OrgGeogebraCommonKernelAlgosAlgoPointOnPath *algo;
  if (!addToConstruction) {
    algo = [new_OrgGeogebraCommonKernelAlgosAlgoPointOnPath_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withDouble_withBoolean_(self->cons_, path, x, y, 0, NO) autorelease];
  }
  else {
    algo = [new_OrgGeogebraCommonKernelAlgosAlgoPointOnPath_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withDouble_(self->cons_, label, path, x, y, 0) autorelease];
  }
  OrgGeogebraCommonKernelGeosGeoPoint *p = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoPointOnPath *) nil_chk(algo)) getP], [OrgGeogebraCommonKernelGeosGeoPoint class]);
  if (complex) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setModeWithInt:OrgGeogebraCommonKernelKernel_COORD_COMPLEX];
    [p update];
  }
  else if (!coords2D) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setCartesian3D];
    [p update];
  }
  return p;
}

OrgGeogebraCommonKernelGeosGeoSegment *OrgGeogebraCommonKernelAlgosAlgoDispatcher_SegmentWithNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *P, OrgGeogebraCommonKernelGeosGeoPoint *Q) {
  OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegment *algo = [new_OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self->cons_, label, P, Q) autorelease];
  OrgGeogebraCommonKernelGeosGeoSegment *s = [algo getSegment];
  return s;
}

OrgGeogebraCommonKernelGeosGeoAngle *OrgGeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, OrgGeogebraCommonKernelGeosGeoLine *g, OrgGeogebraCommonKernelGeosGeoLine *h) {
  OrgGeogebraCommonKernelAlgosAlgoAngleLines *algo = [new_OrgGeogebraCommonKernelAlgosAlgoAngleLines_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self->cons_, label, g, h) autorelease];
  OrgGeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

OrgGeogebraCommonKernelGeosGeoAngle *OrgGeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *A, OrgGeogebraCommonKernelGeosGeoPoint *B, OrgGeogebraCommonKernelGeosGeoPoint *C) {
  OrgGeogebraCommonKernelAlgosAlgoAnglePoints *algo = [new_OrgGeogebraCommonKernelAlgosAlgoAnglePoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self->cons_, label, A, B, C) autorelease];
  OrgGeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelAlgosAlgoDispatcher_PointInWithNSString_withOrgGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, id<OrgGeogebraCommonKernelRegion> region, jdouble x, jdouble y, jboolean addToConstruction, jboolean complex, jboolean coords2D) {
  jboolean oldMacroMode = NO;
  if (!addToConstruction) {
    oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  }
  OrgGeogebraCommonKernelAlgosAlgoPointInRegion *algo = [new_OrgGeogebraCommonKernelAlgosAlgoPointInRegion_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelRegion_withDouble_withDouble_(self->cons_, label, region, x, y) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *p = [algo getP];
  if (complex) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setModeWithInt:OrgGeogebraCommonKernelKernel_COORD_COMPLEX];
  }
  else if (!coords2D) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setCartesian3D];
    [p update];
  }
  if (!addToConstruction) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  return p;
}

jboolean OrgGeogebraCommonKernelAlgosAlgoDispatcher_LocusCheckWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, id<OrgGeogebraCommonKernelKernelNDGeoPointND> Q) {
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPath] == nil || [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Q)) getPath] != nil || ![((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoElement class])) isParentOfWithOrgGeogebraCommonKernelKernelNDGeoElementND:Q]) {
    return NO;
  }
  return YES;
}

IOSObjectArray *OrgGeogebraCommonKernelAlgosAlgoDispatcher_TranslateWithNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoVec3D_(OrgGeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *geoTrans, OrgGeogebraCommonKernelGeosGeoVec3D *v) {
  OrgGeogebraCommonKernelTransform *t = [new_OrgGeogebraCommonKernelTransformTranslate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoVec3D_(self->cons_, v) autorelease];
  return [t transformWithOrgGeogebraCommonKernelGeosGeoElement:geoTrans withNSString:label];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoDispatcher)
