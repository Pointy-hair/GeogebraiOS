//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoUnitVectorVector.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoUnitVector2D.h"
#include "org/geogebra/common/kernel/algos/AlgoUnitVectorVector.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"

@implementation OrgGeogebraCommonKernelAlgosAlgoUnitVectorVector

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
             withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)v {
  OrgGeogebraCommonKernelAlgosAlgoUnitVectorVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(self, cons, label, v);
  return self;
}

- (void)setXY {
  x_ = ((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(((OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(inputGeo_, [OrgGeogebraCommonKernelGeosGeoVector class]))))->x_;
  y_ = ((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(((OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(inputGeo_, [OrgGeogebraCommonKernelGeosGeoVector class]))))->y_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getInputStartPoint {
  return [((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(((OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(inputGeo_, [OrgGeogebraCommonKernelGeosGeoVector class])))) getStartPoint];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "AlgoUnitVectorVector", NULL, 0x1, NULL, NULL },
    { "setXY", NULL, "V", 0x14, NULL, NULL },
    { "getInputStartPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x14, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoUnitVectorVector = { 2, "AlgoUnitVectorVector", "org.geogebra.common.kernel.algos", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoUnitVectorVector;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoUnitVectorVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(OrgGeogebraCommonKernelAlgosAlgoUnitVectorVector *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoVectorND> v) {
  OrgGeogebraCommonKernelAlgosAlgoUnitVector2D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(v, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

OrgGeogebraCommonKernelAlgosAlgoUnitVectorVector *new_OrgGeogebraCommonKernelAlgosAlgoUnitVectorVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoVectorND> v) {
  OrgGeogebraCommonKernelAlgosAlgoUnitVectorVector *self = [OrgGeogebraCommonKernelAlgosAlgoUnitVectorVector alloc];
  OrgGeogebraCommonKernelAlgosAlgoUnitVectorVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(self, cons, label, v);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoUnitVectorVector)
