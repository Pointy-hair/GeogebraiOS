//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoIntersectConics.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/EquationSolver.h"
#include "org/geogebra/common/kernel/EquationSolverInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/LocusEquation.h"
#include "org/geogebra/common/kernel/PointPair.h"
#include "org/geogebra/common/kernel/PointPairList.h"
#include "org/geogebra/common/kernel/SystemOfEquationsSolver.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersect.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectConics.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/EquationElementInterface.h"
#include "org/geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "org/geogebra/common/kernel/prover/polynomial/Variable.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelAlgosAlgoIntersectConics () {
 @public
  OrgGeogebraCommonKernelGeosGeoConic *A_, *B_;
  IOSObjectArray *P_, *D_, *Q_;
  JavaUtilHashMap *botanaPolynomials_;
  JavaUtilHashMap *botanaVars_;
  OrgGeogebraCommonKernelGeosGeoConic *degConic_;
  OrgGeogebraCommonKernelGeosGeoLine *tempLine_;
  IOSIntArray *age_;
  IOSIntArray *permutation_;
  IOSObjectArray *distTable_;
  IOSBooleanArray *isQonPath_;
  IOSBooleanArray *isPalive_;
  jboolean firstIntersection_;
  jboolean isLimitedPathSituation_;
  jboolean isPermutationNeeded_;
  jboolean possibleSpecialCase_;
  jint specialCasePointOnCircleIndex_;
  OrgGeogebraCommonKernelPointPairList *pointList_;
  id<OrgGeogebraCommonKernelEquationSolverInterface> eqnSolver_;
  OrgGeogebraCommonKernelSystemOfEquationsSolver *sysSolver_;
}

- (void)addIncidence;

- (void)matchExistingIntersections;

- (jboolean)handleSpecialCase;

+ (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getPointFrom1on2WithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)A
                                                                 withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)B;

- (void)computeNonContinous;

- (void)computeContinuous;

- (void)handleLimitedPaths;

- (void)updateQonPath;

- (jboolean)pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)Pt;

- (jboolean)isSingularitySituation;

+ (void)moveDefinedPointsToFrontWithOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points;

+ (void)intersectWithDegenerateWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)conic
                               withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)degConic
                          withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points
                                                            withDouble:(jdouble)eps;

+ (jboolean)testPointsWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)A
                      withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)B
                 withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)P
                                                   withDouble:(jdouble)eps;

+ (jdouble)absCrossProductWithDouble:(jdouble)a1
                          withDouble:(jdouble)a2
                          withDouble:(jdouble)b1
                          withDouble:(jdouble)b2;

- (jboolean)calcIntersectionPointsWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)A
                                  withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)B
                             withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points
                                                               withDouble:(jdouble)eps;

- (jboolean)intersectConicsWithEqualSubmatrixSWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c1
                                              withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c2
                                         withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points
                                                                           withDouble:(jdouble)eps;

+ (void)normalizeArrayWithDoubleArray:(IOSDoubleArray *)array;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, A_, OrgGeogebraCommonKernelGeosGeoConic *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, B_, OrgGeogebraCommonKernelGeosGeoConic *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, P_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, D_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, Q_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, botanaPolynomials_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, botanaVars_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, degConic_, OrgGeogebraCommonKernelGeosGeoConic *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, tempLine_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, age_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, permutation_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, distTable_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, isQonPath_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, isPalive_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, pointList_, OrgGeogebraCommonKernelPointPairList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, eqnSolver_, id<OrgGeogebraCommonKernelEquationSolverInterface>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectConics, sysSolver_, OrgGeogebraCommonKernelSystemOfEquationsSolver *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_addIncidence(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initForNearToRelationship(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_compute(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_matchExistingIntersections(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectConics_handleSpecialCase(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self);

__attribute__((unused)) static id<OrgGeogebraCommonKernelKernelNDGeoPointND> OrgGeogebraCommonKernelAlgosAlgoIntersectConics_getPointFrom1on2WithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelGeosGeoConic *A, OrgGeogebraCommonKernelGeosGeoConic *B);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_computeNonContinous(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_computeContinuous(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_handleLimitedPaths(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_updateQonPath(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectConics_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self, OrgGeogebraCommonKernelGeosGeoPoint *Pt);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectConics_isSingularitySituation(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectConicsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self, OrgGeogebraCommonKernelGeosGeoConic *conic1, OrgGeogebraCommonKernelGeosGeoConic *conic2, IOSObjectArray *points);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_moveDefinedPointsToFrontWithOrgGeogebraCommonKernelGeosGeoPointArray_(IOSObjectArray *points);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectWithDegenerateWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(OrgGeogebraCommonKernelGeosGeoConic *conic, OrgGeogebraCommonKernelGeosGeoConic *degConic, IOSObjectArray *points, jdouble eps);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectConics_testPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(OrgGeogebraCommonKernelGeosGeoConic *A, OrgGeogebraCommonKernelGeosGeoConic *B, IOSObjectArray *P, jdouble eps);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelAlgosAlgoIntersectConics_absCrossProductWithDouble_withDouble_withDouble_withDouble_(jdouble a1, jdouble a2, jdouble b1, jdouble b2);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectConics_calcIntersectionPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self, OrgGeogebraCommonKernelGeosGeoConic *A, OrgGeogebraCommonKernelGeosGeoConic *B, IOSObjectArray *points, jdouble eps);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectConicsWithEqualSubmatrixSWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self, OrgGeogebraCommonKernelGeosGeoConic *c1, OrgGeogebraCommonKernelGeosGeoConic *c2, IOSObjectArray *points, jdouble eps);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_normalizeArrayWithDoubleArray_(IOSDoubleArray *array);

@implementation OrgGeogebraCommonKernelAlgosAlgoIntersectConics

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                    withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)A
                    withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)B {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_(self, cons, A, B);
  return self;
}

- (void)addIncidence {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_addIncidence(self);
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, A_);
  (void) IOSObjectArray_Set(input_, 1, B_);
  [super setOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:P_];
  [self noUndefinedPointsInAlgebraView];
  [self setDependencies];
}

- (IOSObjectArray *)getIntersectionPoints {
  return P_;
}

- (OrgGeogebraCommonKernelGeosGeoConic *)getA {
  return A_;
}

- (OrgGeogebraCommonKernelGeosGeoConic *)getB {
  return B_;
}

- (IOSObjectArray *)getLastDefinedIntersectionPoints {
  return D_;
}

- (jboolean)isNearToAlgorithm {
  return YES;
}

- (void)initForNearToRelationship {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initForNearToRelationship(self);
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_compute(self);
}

- (void)matchExistingIntersections {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_matchExistingIntersections(self);
}

- (jboolean)handleSpecialCase {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectConics_handleSpecialCase(self);
}

+ (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getPointFrom1on2WithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)A
                                                                 withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)B {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectConics_getPointFrom1on2WithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_(A, B);
}

- (void)computeNonContinous {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_computeNonContinous(self);
}

- (void)computeContinuous {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_computeContinuous(self);
}

- (void)handleLimitedPaths {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_handleLimitedPaths(self);
}

- (void)updateQonPath {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_updateQonPath(self);
}

- (jboolean)pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)Pt {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectConics_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(self, Pt);
}

- (jboolean)isSingularitySituation {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectConics_isSingularitySituation(self);
}

- (void)intersectConicsWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)conic1
                       withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)conic2
                  withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectConicsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_(self, conic1, conic2, points);
}

+ (void)moveDefinedPointsToFrontWithOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_moveDefinedPointsToFrontWithOrgGeogebraCommonKernelGeosGeoPointArray_(points);
}

+ (void)intersectWithDegenerateWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)conic
                               withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)degConic
                          withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points
                                                            withDouble:(jdouble)eps {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectWithDegenerateWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(conic, degConic, points, eps);
}

+ (jboolean)testPointsWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)A
                      withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)B
                 withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)P
                                                   withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectConics_testPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(A, B, P, eps);
}

+ (jdouble)absCrossProductWithDouble:(jdouble)a1
                          withDouble:(jdouble)a2
                          withDouble:(jdouble)b1
                          withDouble:(jdouble)b2 {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectConics_absCrossProductWithDouble_withDouble_withDouble_withDouble_(a1, a2, b1, b2);
}

- (jboolean)calcIntersectionPointsWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)A
                                  withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)B
                             withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points
                                                               withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectConics_calcIntersectionPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(self, A, B, points, eps);
}

- (jboolean)intersectConicsWithEqualSubmatrixSWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c1
                                              withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c2
                                         withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points
                                                                           withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectConicsWithEqualSubmatrixSWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(self, c1, c2, points, eps);
}

+ (void)normalizeArrayWithDoubleArray:(IOSDoubleArray *)array {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_normalizeArrayWithDoubleArray_(array);
}

+ (void)distanceTableWithOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)D
                                                     withIntArray:(IOSIntArray *)age
                     withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)Q
                                                 withDoubleArray2:(IOSObjectArray *)table {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_distanceTableWithOrgGeogebraCommonKernelGeosGeoPointArray_withIntArray_withOrgGeogebraCommonKernelGeosGeoPointArray_withDoubleArray2_(D, age, Q, table);
}

+ (void)setNearToWithOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)P
                                             withBooleanArray:(IOSBooleanArray *)isPalive
                 withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)Q
                                             withBooleanArray:(IOSBooleanArray *)isQonPath
                                             withDoubleArray2:(IOSObjectArray *)distTable
                     withOrgGeogebraCommonKernelPointPairList:(OrgGeogebraCommonKernelPointPairList *)pointList
                                                 withIntArray:(IOSIntArray *)permutation
                                                  withBoolean:(jboolean)needStrict
                                                   withDouble:(jdouble)eps {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_setNearToWithOrgGeogebraCommonKernelGeosGeoPointArray_withBooleanArray_withOrgGeogebraCommonKernelGeosGeoPointArray_withBooleanArray_withDoubleArray2_withOrgGeogebraCommonKernelPointPairList_withIntArray_withBoolean_withDouble_(P, isPalive, Q, isQonPath, distTable, pointList, permutation, needStrict, eps);
}

+ (void)setNearToWithOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)P
                                             withBooleanArray:(IOSBooleanArray *)isPalive
                 withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)Q
                                             withBooleanArray:(IOSBooleanArray *)isQonPath
                                             withDoubleArray2:(IOSObjectArray *)distTable
                     withOrgGeogebraCommonKernelPointPairList:(OrgGeogebraCommonKernelPointPairList *)pointList
                                                 withIntArray:(IOSIntArray *)permutation {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_setNearToWithOrgGeogebraCommonKernelGeosGeoPointArray_withBooleanArray_withOrgGeogebraCommonKernelGeosGeoPointArray_withBooleanArray_withDoubleArray2_withOrgGeogebraCommonKernelPointPairList_withIntArray_(P, isPalive, Q, isQonPath, distTable, pointList, permutation);
}

- (IOSObjectArray *)getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((JavaUtilHashMap *) nil_chk(botanaVars_)) getWithId:geo];
}

- (IOSObjectArray *)getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (botanaPolynomials_ != nil) {
    IOSObjectArray *ret = [botanaPolynomials_ getWithId:geo];
    if (ret != nil) return ret;
  }
  if (A_ != nil && B_ != nil && [A_ isCircle] && [B_ isCircle]) {
    IOSObjectArray *botanaVarsThis = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
    if (botanaVars_ == nil) {
      botanaVars_ = new_JavaUtilHashMap_init();
    }
    if ([((JavaUtilHashMap *) nil_chk(botanaVars_)) containsKeyWithId:geo]) {
      botanaVarsThis = [botanaVars_ getWithId:geo];
    }
    else {
      botanaVarsThis = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
      (void) IOSObjectArray_Set(botanaVarsThis, 0, new_OrgGeogebraCommonKernelProverPolynomialVariable_init());
      (void) IOSObjectArray_Set(botanaVarsThis, 1, new_OrgGeogebraCommonKernelProverPolynomialVariable_init());
      (void) [botanaVars_ putWithId:geo withId:botanaVarsThis];
    }
    IOSObjectArray *botanaPolynomialsThis = nil;
    IOSObjectArray *botanaVarsOther = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([botanaVars_ keySet])) iterator];
    jboolean found = NO;
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonKernelGeosGeoElement *otherGeo = [it next];
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(otherGeo)) isEqual:geo]) {
        botanaPolynomialsThis = [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
        botanaVarsOther = [botanaVars_ getWithId:otherGeo];
        (void) IOSObjectArray_Set(botanaPolynomialsThis, 2, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(OrgGeogebraCommonKernelProverPolynomialPolynomial_sqrDistanceWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(botanaVarsThis), 0), IOSObjectArray_Get(botanaVarsThis, 1), IOSObjectArray_Get(nil_chk(botanaVarsOther), 0), IOSObjectArray_Get(botanaVarsOther, 1)))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(new_OrgGeogebraCommonKernelProverPolynomialVariable_init())]))) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(1)]);
        found = YES;
      }
    }
    if (!found) {
      botanaPolynomialsThis = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
    }
    IOSObjectArray *vA = [A_ getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    IOSObjectArray *vB = [B_ getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    (void) IOSObjectArray_Set(nil_chk(botanaPolynomialsThis), 0, OrgGeogebraCommonKernelProverPolynomialPolynomial_equidistantWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(vA), 2), IOSObjectArray_Get(vA, 3), IOSObjectArray_Get(vA, 0), IOSObjectArray_Get(vA, 1), IOSObjectArray_Get(nil_chk(botanaVarsThis), 0), IOSObjectArray_Get(botanaVarsThis, 1)));
    (void) IOSObjectArray_Set(botanaPolynomialsThis, 1, OrgGeogebraCommonKernelProverPolynomialPolynomial_equidistantWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(vB), 2), IOSObjectArray_Get(vB, 3), IOSObjectArray_Get(vB, 0), IOSObjectArray_Get(vB, 1), IOSObjectArray_Get(botanaVarsThis, 0), IOSObjectArray_Get(botanaVarsThis, 1)));
    if (botanaPolynomials_ == nil) {
      botanaPolynomials_ = new_JavaUtilHashMap_init();
    }
    (void) [((JavaUtilHashMap *) nil_chk(botanaPolynomials_)) putWithId:geo withId:botanaPolynomialsThis];
    return botanaPolynomialsThis;
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<OrgGeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                         withOrgGeogebraCommonKernelAlgosEquationScopeInterface:(id<OrgGeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return OrgGeogebraCommonKernelLocusEquation_eqnIntersectConicsWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:", "AlgoIntersectConics", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoConic:", "AlgoIntersectConics", NULL, 0x1, NULL, NULL },
    { "addIncidence", NULL, "V", 0x2, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "getIntersectionPoints", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getA", NULL, "Lorg.geogebra.common.kernel.geos.GeoConic;", 0x1, NULL, NULL },
    { "getB", NULL, "Lorg.geogebra.common.kernel.geos.GeoConic;", 0x1, NULL, NULL },
    { "getLastDefinedIntersectionPoints", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x4, NULL, NULL },
    { "isNearToAlgorithm", NULL, "Z", 0x1, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x11, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "matchExistingIntersections", NULL, "V", 0x2, NULL, NULL },
    { "handleSpecialCase", NULL, "Z", 0x2, NULL, NULL },
    { "getPointFrom1on2WithOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoConic:", "getPointFrom1on2", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0xa, NULL, NULL },
    { "computeNonContinous", NULL, "V", 0x2, NULL, NULL },
    { "computeContinuous", NULL, "V", 0x12, NULL, NULL },
    { "handleLimitedPaths", NULL, "V", 0x2, NULL, NULL },
    { "updateQonPath", NULL, "V", 0x2, NULL, NULL },
    { "pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint:", "pointLiesOnBothPaths", "Z", 0x2, NULL, NULL },
    { "isSingularitySituation", NULL, "Z", 0x2, NULL, NULL },
    { "intersectConicsWithOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoPointArray:", "intersectConics", "V", 0x11, NULL, NULL },
    { "moveDefinedPointsToFrontWithOrgGeogebraCommonKernelGeosGeoPointArray:", "moveDefinedPointsToFront", "V", 0xa, NULL, NULL },
    { "intersectWithDegenerateWithOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoPointArray:withDouble:", "intersectWithDegenerate", "V", 0x1a, NULL, NULL },
    { "testPointsWithOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoPointArray:withDouble:", "testPoints", "Z", 0x1a, NULL, NULL },
    { "absCrossProductWithDouble:withDouble:withDouble:withDouble:", "absCrossProduct", "D", 0x1a, NULL, NULL },
    { "calcIntersectionPointsWithOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoPointArray:withDouble:", "calcIntersectionPoints", "Z", 0x12, NULL, NULL },
    { "intersectConicsWithEqualSubmatrixSWithOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoPointArray:withDouble:", "intersectConicsWithEqualSubmatrixS", "Z", 0x2, NULL, NULL },
    { "normalizeArrayWithDoubleArray:", "normalizeArray", "V", 0xa, NULL, NULL },
    { "distanceTableWithOrgGeogebraCommonKernelGeosGeoPointArray:withIntArray:withOrgGeogebraCommonKernelGeosGeoPointArray:withDoubleArray2:", "distanceTable", "V", 0x19, NULL, NULL },
    { "setNearToWithOrgGeogebraCommonKernelGeosGeoPointArray:withBooleanArray:withOrgGeogebraCommonKernelGeosGeoPointArray:withBooleanArray:withDoubleArray2:withOrgGeogebraCommonKernelPointPairList:withIntArray:withBoolean:withDouble:", "setNearTo", "V", 0x18, NULL, NULL },
    { "setNearToWithOrgGeogebraCommonKernelGeosGeoPointArray:withBooleanArray:withOrgGeogebraCommonKernelGeosGeoPointArray:withBooleanArray:withDoubleArray2:withOrgGeogebraCommonKernelPointPairList:withIntArray:", "setNearTo", "V", 0x18, NULL, NULL },
    { "getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lorg.geogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lorg.geogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DIST_MEMORY_SIZE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelAlgosAlgoIntersectConics_DIST_MEMORY_SIZE },
    { "A_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
    { "B_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
    { "P_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "D_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "Q_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "preexistPoints_", NULL, 0x0, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "newPoints_", NULL, 0x0, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoPoint;>;",  },
    { "botanaPolynomials_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/kernel/geos/GeoElement;L[Lorg/geogebra/common/kernel/prover/polynomial/Polynomial;;>;",  },
    { "botanaVars_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/kernel/geos/GeoElement;L[Lorg/geogebra/common/kernel/prover/polynomial/Variable;;>;",  },
    { "degConic_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
    { "tempLine_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "age_", NULL, 0x2, "[I", NULL, NULL,  },
    { "permutation_", NULL, 0x2, "[I", NULL, NULL,  },
    { "distTable_", NULL, 0x2, "[[D", NULL, NULL,  },
    { "isQonPath_", NULL, 0x2, "[Z", NULL, NULL,  },
    { "isPalive_", NULL, 0x2, "[Z", NULL, NULL,  },
    { "firstIntersection_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isLimitedPathSituation_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isPermutationNeeded_", NULL, 0x2, "Z", NULL, NULL,  },
    { "possibleSpecialCase_", NULL, 0x2, "Z", NULL, NULL,  },
    { "specialCasePointOnCircleIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "pointList_", NULL, 0x2, "Lorg.geogebra.common.kernel.PointPairList;", NULL, NULL,  },
    { "eqnSolver_", NULL, 0x2, "Lorg.geogebra.common.kernel.EquationSolverInterface;", NULL, NULL,  },
    { "sysSolver_", NULL, 0x2, "Lorg.geogebra.common.kernel.SystemOfEquationsSolver;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIntersectConics = { 2, "AlgoIntersectConics", "org.geogebra.common.kernel.algos", NULL, 0x1, 37, methods, 25, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoIntersectConics;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self, OrgGeogebraCommonKernelConstruction *cons) {
  (void) OrgGeogebraCommonKernelAlgosAlgoIntersect_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->firstIntersection_ = YES;
  self->isPermutationNeeded_ = YES;
  self->possibleSpecialCase_ = NO;
  self->specialCasePointOnCircleIndex_ = 0;
  self->pointList_ = new_OrgGeogebraCommonKernelPointPairList_init();
  self->eqnSolver_ = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel])) getEquationSolver];
  self->sysSolver_ = [((OrgGeogebraCommonKernelKernel *) nil_chk([cons getKernel])) getSystemOfEquationsSolverWithOrgGeogebraCommonKernelEquationSolverInterface:self->eqnSolver_];
  self->degConic_ = new_OrgGeogebraCommonKernelGeosGeoConic_initWithOrgGeogebraCommonKernelConstruction_(cons);
}

OrgGeogebraCommonKernelAlgosAlgoIntersectConics *new_OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectConics alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoConic *A, OrgGeogebraCommonKernelGeosGeoConic *B) {
  (void) OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->A_ = A;
  self->B_ = B;
  self->isLimitedPathSituation_ = ([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(A)) isLimitedPath] || [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(B)) isLimitedPath]);
  self->P_ = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
  self->D_ = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
  self->Q_ = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
  self->preexistPoints_ = new_JavaUtilArrayList_init();
  self->newPoints_ = new_JavaUtilArrayList_init();
  self->isQonPath_ = [IOSBooleanArray newArrayWithLength:4];
  self->isPalive_ = [IOSBooleanArray newArrayWithLength:4];
  self->age_ = [IOSIntArray newArrayWithLength:4];
  self->permutation_ = [IOSIntArray newArrayWithInts:(jint[]){ 0, 1, 2, 3 } count:4];
  self->distTable_ = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ 4, 4 }];
  for (jint i = 0; i < 4; i++) {
    (void) IOSObjectArray_Set(self->P_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
    (void) IOSObjectArray_Set(self->Q_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
    (void) IOSObjectArray_Set(self->D_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
  }
  self->possibleSpecialCase_ = OrgGeogebraCommonKernelAlgosAlgoIntersectConics_handleSpecialCase(self);
  [self setInputOutput];
  JavaUtilArrayList *list1 = [A getPointsOnConic];
  JavaUtilArrayList *list2 = [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(B)) getPointsOnConic];
  if (list1 != nil && list2 != nil) {
    for (jint i = 0; i < [list1 size]; i++) {
      if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([list1 getWithInt:i])) getIncidenceList] != nil && [((JavaUtilArrayList *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([list1 getWithInt:i])) getIncidenceList])) containsWithId:B]) [self->preexistPoints_ addWithId:[list1 getWithInt:i]];
    }
  }
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initForNearToRelationship(self);
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_compute(self);
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_addIncidence(self);
}

OrgGeogebraCommonKernelAlgosAlgoIntersectConics *new_OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoConic *A, OrgGeogebraCommonKernelGeosGeoConic *B) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectConics alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_(self, cons, A, B);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_addIncidence(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self) {
  for (jint i = 0; i < 4; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->P_), i))) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->A_ withBoolean:NO];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->B_ withBoolean:NO];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initForNearToRelationship(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self) {
  self->isPermutationNeeded_ = YES;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->P_))->size_; i++) {
    *IOSIntArray_GetRef(nil_chk(self->age_), i) = 0;
    *IOSBooleanArray_GetRef(nil_chk(self->isQonPath_), i) = YES;
    *IOSBooleanArray_GetRef(nil_chk(self->isPalive_), i) = NO;
  }
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_compute(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self) {
  if (IOSIntArray_Get(nil_chk(self->permutation_), 3) == 0) {
    OrgGeogebraCommonMainApp_errorWithNSString_(@"error in AlgoIntersectConics");
  }
  if (!([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->A_)) isDefined] && [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->B_)) isDefined])) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->P_))->size_; i++) {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) setUndefined];
    }
    return;
  }
  if (self->possibleSpecialCase_) {
    if (OrgGeogebraCommonKernelAlgosAlgoIntersectConics_handleSpecialCase(self)) return;
  }
  jboolean continuous = self->isPermutationNeeded_ || [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isContinuous];
  if (continuous) {
    OrgGeogebraCommonKernelAlgosAlgoIntersectConics_computeContinuous(self);
  }
  else {
    OrgGeogebraCommonKernelAlgosAlgoIntersectConics_computeNonContinous(self);
  }
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_matchExistingIntersections(self);
  [self avoidDoubleTangentPoint];
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_matchExistingIntersections(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self) {
  if ([((JavaUtilArrayList *) nil_chk(self->preexistPoints_)) size] == 0) return;
  [((JavaUtilArrayList *) nil_chk(self->newPoints_)) clear];
  for (jint i = 0; i < 4; i++) {
    if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->P_), i))) isDefined]) [self->newPoints_ addWithId:IOSObjectArray_Get(self->P_, i)];
  }
  if ([self->newPoints_ size] == 0) return;
  jdouble gap = JavaLangDouble_POSITIVE_INFINITY;
  jdouble minDistance = JavaLangDouble_POSITIVE_INFINITY;
  jdouble d = JavaLangDouble_POSITIVE_INFINITY;
  jint closestPointIndex = 0;
  for (jint i = 0; i < 4; i++) {
    for (jint j = i + 1; j < 4; j++) {
      if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->P_), i))) isDefined] && [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, j))) isDefined]) {
        d = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) distanceWithOrgGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(self->P_, j)];
        if (d < gap) gap = d;
      }
    }
  }
  for (jint i = 0; i < 4; i++) {
    if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->P_), i))) isDefined]) {
      minDistance = JavaLangDouble_POSITIVE_INFINITY;
      for (jint j = 0; j < [self->preexistPoints_ size]; j++) {
        d = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self->preexistPoints_ getWithInt:j])) distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(self->P_, i)];
        if (d < minDistance) {
          minDistance = d;
          closestPointIndex = j;
        }
      }
      if (OrgGeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(gap / 2, minDistance)) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) setCoordsFromPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:[self->preexistPoints_ getWithInt:closestPointIndex]];
    }
  }
}

jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectConics_handleSpecialCase(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self) {
  if (((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->A_))->type_ != OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE || ((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->B_))->type_ != OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE) return NO;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> pointOnConic = OrgGeogebraCommonKernelAlgosAlgoIntersectConics_getPointFrom1on2WithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_(self->A_, self->B_);
  if (pointOnConic == nil) pointOnConic = OrgGeogebraCommonKernelAlgosAlgoIntersectConics_getPointFrom1on2WithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_(self->B_, self->A_);
  if (pointOnConic == nil) return NO;
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectConicsWithEqualSubmatrixSWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(self, self->A_, self->B_, self->Q_, OrgGeogebraCommonKernelKernel_STANDARD_PRECISION);
  jint firstIndex = self->specialCasePointOnCircleIndex_;
  jint secondIndex = (firstIndex + 1) % 2;
  if (self->firstIntersection_ && [self didSetIntersectionPointWithInt:firstIndex]) {
    if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->P_), firstIndex))) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(pointOnConic, [OrgGeogebraCommonKernelGeosGeoElement class])]) {
      jint temp = firstIndex;
      firstIndex = secondIndex;
      secondIndex = temp;
      self->specialCasePointOnCircleIndex_ = firstIndex;
    }
    self->firstIntersection_ = NO;
  }
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->P_), firstIndex))) setCoordsFromPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:pointOnConic];
  jboolean didSetP1 = NO;
  for (jint i = 0; i < 2; i++) {
    if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->Q_), i))) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(self->P_, firstIndex)]) {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, secondIndex))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(self->Q_, i)];
      didSetP1 = YES;
      break;
    }
  }
  if (!didSetP1) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, secondIndex))) setCoordsFromPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:pointOnConic];
  }
  if (self->isLimitedPathSituation_) {
    for (jint i = 0; i < 2; i++) {
      if (!OrgGeogebraCommonKernelAlgosAlgoIntersectConics_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(self, IOSObjectArray_Get(self->P_, i))) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) setUndefined];
    }
  }
  return YES;
}

id<OrgGeogebraCommonKernelKernelNDGeoPointND> OrgGeogebraCommonKernelAlgosAlgoIntersectConics_getPointFrom1on2WithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelGeosGeoConic *A, OrgGeogebraCommonKernelGeosGeoConic *B) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initialize();
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> pointOnConic = nil;
  JavaUtilArrayList *pointsOnConic = [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(A)) getPointsOnConic];
  if (pointsOnConic != nil) {
    jint size = [pointsOnConic size];
    for (jint i = 0; i < size; i++) {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> p = [pointsOnConic getWithInt:i];
      if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) isLabelSet] && [p getIncidenceList] != nil && [((JavaUtilArrayList *) nil_chk([p getIncidenceList])) containsWithId:B]) {
        if ([A isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:p withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION] && [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(B)) isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:p withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION]) pointOnConic = p;
        break;
      }
    }
  }
  return pointOnConic;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_computeNonContinous(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectConicsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_(self, self->A_, self->B_, self->Q_);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->P_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(nil_chk(self->Q_), IOSIntArray_Get(nil_chk(self->permutation_), i))];
  }
  if (self->isLimitedPathSituation_) {
    for (jint i = 0; i < self->P_->size_; i++) {
      if (!OrgGeogebraCommonKernelAlgosAlgoIntersectConics_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(self, IOSObjectArray_Get(self->P_, i))) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) setUndefined];
    }
  }
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_computeContinuous(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self) {
  jboolean noSingularity = !OrgGeogebraCommonKernelAlgosAlgoIntersectConics_isSingularitySituation(self);
  for (jint i = 0; i < 4; i++) {
    jboolean finite = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->P_), i))) isFinite];
    if (noSingularity && finite) {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->D_), i))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(self->P_, i)];
      *IOSIntArray_GetRef(nil_chk(self->age_), i) = 0;
    }
    else {
      (*IOSIntArray_GetRef(nil_chk(self->age_), i))++;
    }
    *IOSBooleanArray_GetRef(nil_chk(self->isPalive_), i) = (IOSBooleanArray_Get(self->isPalive_, i) || finite || ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i)))->labelSet_);
  }
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectConicsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_(self, self->A_, self->B_, self->Q_);
  if (self->isLimitedPathSituation_) {
    OrgGeogebraCommonKernelAlgosAlgoIntersectConics_updateQonPath(self);
  }
  if (self->firstIntersection_) {
    jint count = 0;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->Q_))->size_; i++) {
      if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->Q_, i))) isDefined] && OrgGeogebraCommonKernelAlgosAlgoIntersectConics_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(self, IOSObjectArray_Get(self->Q_, i))) {
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->P_), count))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(self->Q_, i)];
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->D_), count))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(self->P_, count)];
        self->firstIntersection_ = NO;
        count++;
      }
    }
    return;
  }
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_distanceTableWithOrgGeogebraCommonKernelGeosGeoPointArray_withIntArray_withOrgGeogebraCommonKernelGeosGeoPointArray_withDoubleArray2_(self->D_, self->age_, self->Q_, self->distTable_);
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_setNearToWithOrgGeogebraCommonKernelGeosGeoPointArray_withBooleanArray_withOrgGeogebraCommonKernelGeosGeoPointArray_withBooleanArray_withDoubleArray2_withOrgGeogebraCommonKernelPointPairList_withIntArray_withBoolean_withDouble_(self->P_, self->isPalive_, self->Q_, self->isQonPath_, self->distTable_, self->pointList_, self->permutation_, !self->isPermutationNeeded_, 1.0 / JavaLangMath_minWithDouble_withDouble_([((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getXscale], [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getYscale]));
  self->isPermutationNeeded_ = NO;
  if (self->isLimitedPathSituation_) OrgGeogebraCommonKernelAlgosAlgoIntersectConics_handleLimitedPaths(self);
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_handleLimitedPaths(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self) {
  jboolean noSingularity = !OrgGeogebraCommonKernelAlgosAlgoIntersectConics_isSingularitySituation(self);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->P_))->size_; i++) {
    if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) isDefined]) {
      if (!OrgGeogebraCommonKernelAlgosAlgoIntersectConics_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(self, IOSObjectArray_Get(self->P_, i))) {
        if (noSingularity && [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) isFinite]) {
          [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->D_), i))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(self->P_, i)];
          *IOSIntArray_GetRef(nil_chk(self->age_), i) = -1;
        }
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) setUndefined];
      }
    }
  }
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_updateQonPath(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->Q_))->size_; i++) {
    *IOSBooleanArray_GetRef(nil_chk(self->isQonPath_), i) = OrgGeogebraCommonKernelAlgosAlgoIntersectConics_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(self, IOSObjectArray_Get(self->Q_, i));
  }
}

jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectConics_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self, OrgGeogebraCommonKernelGeosGeoPoint *Pt) {
  return [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->A_)) isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:Pt withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION] && [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->B_)) isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:Pt withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION];
}

jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectConics_isSingularitySituation(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self) {
  jint count = 0;
  IOSIntArray *index = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->P_))->size_];
  for (jint i = 0; i < self->P_->size_; i++) {
    if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) isDefined]) {
      *IOSIntArray_GetRef(index, count) = i;
      count++;
      if (count > 2) return NO;
    }
  }
  jboolean ret = (count == 2 && [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, IOSIntArray_Get(index, 0)))) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(self->P_, IOSIntArray_Get(index, 1))]);
  return ret;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectConicsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self, OrgGeogebraCommonKernelGeosGeoConic *conic1, OrgGeogebraCommonKernelGeosGeoConic *conic2, IOSObjectArray *points) {
  if (!([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(conic1)) isDefined] && [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(conic2)) isDefined])) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, i))) setUndefined];
    return;
  }
  jboolean ok = NO;
  jint i = 0;
  if ([conic1 isEqual:conic2]) {
    for (i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, i))) setUndefined];
    }
    return;
  }
  if ([conic1 isLineConic]) {
    OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectWithDegenerateWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(conic2, conic1, points, OrgGeogebraCommonKernelKernel_STANDARD_PRECISION);
    ok = OrgGeogebraCommonKernelAlgosAlgoIntersectConics_testPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(conic1, conic2, points, OrgGeogebraCommonKernelKernel_MIN_PRECISION);
  }
  else if ([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(conic2)) isLineConic]) {
    OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectWithDegenerateWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(conic1, conic2, points, OrgGeogebraCommonKernelKernel_STANDARD_PRECISION);
    ok = OrgGeogebraCommonKernelAlgosAlgoIntersectConics_testPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(conic1, conic2, points, OrgGeogebraCommonKernelKernel_MIN_PRECISION);
  }
  jdouble epsilon = OrgGeogebraCommonKernelKernel_MAX_PRECISION;
  while (!ok && epsilon <= OrgGeogebraCommonKernelKernel_MIN_PRECISION) {
    ok = OrgGeogebraCommonKernelAlgosAlgoIntersectConics_calcIntersectionPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(self, conic1, conic2, points, epsilon);
    epsilon *= 10.0;
  }
  if (!ok) {
    for (i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, i))) setUndefined];
  }
  else if (![((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isContinuous]) {
    OrgGeogebraCommonKernelAlgosAlgoIntersectConics_moveDefinedPointsToFrontWithOrgGeogebraCommonKernelGeosGeoPointArray_(points);
  }
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_moveDefinedPointsToFrontWithOrgGeogebraCommonKernelGeosGeoPointArray_(IOSObjectArray *points) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) {
    if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, i))) isDefined]) {
      jint j = i - 1;
      jboolean move = NO;
      while (j >= 0 && ![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, j))) isDefined]) {
        move = YES;
        j--;
      }
      if (move) {
        j++;
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, j))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(points, i)];
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, i))) setUndefined];
      }
    }
  }
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectWithDegenerateWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(OrgGeogebraCommonKernelGeosGeoConic *conic, OrgGeogebraCommonKernelGeosGeoConic *degConic, IOSObjectArray *points, jdouble eps) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initialize();
  if ([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(degConic)) isDefined]) {
    switch ([degConic getType]) {
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
      OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectLineConicWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(IOSObjectArray_Get(nil_chk(degConic->lines_), 0), conic, points, eps);
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(points), 2))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(points, 0)];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, 3))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(points, 1)];
      OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectLineConicWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(IOSObjectArray_Get(degConic->lines_, 1), conic, points, eps);
      return;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY:
      [degConic enforceDoubleLine];
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
      OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectLineConicWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(IOSObjectArray_Get(nil_chk(degConic->lines_), 0), conic, points, eps);
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(points), 2))) setUndefined];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, 3))) setUndefined];
      return;
      case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(points), 0))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:[degConic getSinglePoint]];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, 1))) setUndefined];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, 2))) setUndefined];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, 3))) setUndefined];
      return;
    }
  }
  for (jint i = 0; i < 4; i++) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(points), i))) setUndefined];
}

jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectConics_testPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(OrgGeogebraCommonKernelGeosGeoConic *A, OrgGeogebraCommonKernelGeosGeoConic *B, IOSObjectArray *P, jdouble eps) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initialize();
  jboolean foundPoint = NO;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(P))->size_; i++) {
    if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(P, i))) isDefined]) {
      if (!([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(A)) isOnFullConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(P, i) withDouble:eps] && [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(B)) isOnFullConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(P, i) withDouble:eps])) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(P, i))) setUndefined];
      else foundPoint = YES;
    }
  }
  return foundPoint;
}

jdouble OrgGeogebraCommonKernelAlgosAlgoIntersectConics_absCrossProductWithDouble_withDouble_withDouble_withDouble_(jdouble a1, jdouble a2, jdouble b1, jdouble b2) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initialize();
  return JavaLangMath_absWithDouble_(a1 * b2 - a2 * b1);
}

jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectConics_calcIntersectionPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self, OrgGeogebraCommonKernelGeosGeoConic *A, OrgGeogebraCommonKernelGeosGeoConic *B, IOSObjectArray *points, jdouble eps) {
  IOSDoubleArray *flatDeg = [IOSDoubleArray newArrayWithLength:6];
  IOSDoubleArray *Amatrix = [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(A)) getFlatMatrix];
  IOSDoubleArray *Bmatrix = [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(B)) getFlatMatrix];
  if (OrgGeogebraCommonKernelAlgosAlgoIntersectConics_absCrossProductWithDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(nil_chk(Amatrix), 0), IOSDoubleArray_Get(Amatrix, 1), IOSDoubleArray_Get(nil_chk(Bmatrix), 0), IOSDoubleArray_Get(Bmatrix, 1)) < eps && OrgGeogebraCommonKernelAlgosAlgoIntersectConics_absCrossProductWithDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(Amatrix, 0), IOSDoubleArray_Get(Amatrix, 3), IOSDoubleArray_Get(Bmatrix, 0), IOSDoubleArray_Get(Bmatrix, 3)) < eps && OrgGeogebraCommonKernelAlgosAlgoIntersectConics_absCrossProductWithDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(Amatrix, 1), IOSDoubleArray_Get(Amatrix, 3), IOSDoubleArray_Get(Bmatrix, 1), IOSDoubleArray_Get(Bmatrix, 3)) < eps) {
    return OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectConicsWithEqualSubmatrixSWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(self, A, B, points, eps);
  }
  IOSDoubleArray *eqn = [IOSDoubleArray newArrayWithLength:4];
  IOSDoubleArray *sol = [IOSDoubleArray newArrayWithLength:3];
  IOSDoubleArray *flatA = [IOSDoubleArray newArrayWithLength:6];
  IOSDoubleArray *flatB = [IOSDoubleArray newArrayWithLength:6];
  for (jint i = 0; i < 6; i++) {
    *IOSDoubleArray_GetRef(flatA, i) = IOSDoubleArray_Get(Amatrix, i);
    *IOSDoubleArray_GetRef(flatB, i) = IOSDoubleArray_Get(Bmatrix, i);
  }
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_normalizeArrayWithDoubleArray_(flatA);
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_normalizeArrayWithDoubleArray_(flatB);
  *IOSDoubleArray_GetRef(eqn, 0) = IOSDoubleArray_Get(flatA, 2) * (IOSDoubleArray_Get(flatA, 0) * IOSDoubleArray_Get(flatA, 1) - IOSDoubleArray_Get(flatA, 3) * IOSDoubleArray_Get(flatA, 3)) + IOSDoubleArray_Get(flatA, 4) * (2.0 * IOSDoubleArray_Get(flatA, 3) * IOSDoubleArray_Get(flatA, 5) - IOSDoubleArray_Get(flatA, 1) * IOSDoubleArray_Get(flatA, 4)) - IOSDoubleArray_Get(flatA, 0) * IOSDoubleArray_Get(flatA, 5) * IOSDoubleArray_Get(flatA, 5);
  *IOSDoubleArray_GetRef(eqn, 1) = IOSDoubleArray_Get(flatB, 0) * (IOSDoubleArray_Get(flatA, 1) * IOSDoubleArray_Get(flatA, 2) - IOSDoubleArray_Get(flatA, 5) * IOSDoubleArray_Get(flatA, 5)) + IOSDoubleArray_Get(flatB, 1) * (IOSDoubleArray_Get(flatA, 0) * IOSDoubleArray_Get(flatA, 2) - IOSDoubleArray_Get(flatA, 4) * IOSDoubleArray_Get(flatA, 4)) + IOSDoubleArray_Get(flatB, 2) * (IOSDoubleArray_Get(flatA, 0) * IOSDoubleArray_Get(flatA, 1) - IOSDoubleArray_Get(flatA, 3) * IOSDoubleArray_Get(flatA, 3)) + 2.0 * (IOSDoubleArray_Get(flatB, 3) * (IOSDoubleArray_Get(flatA, 4) * IOSDoubleArray_Get(flatA, 5) - IOSDoubleArray_Get(flatA, 2) * IOSDoubleArray_Get(flatA, 3)) + IOSDoubleArray_Get(flatB, 4) * (IOSDoubleArray_Get(flatA, 3) * IOSDoubleArray_Get(flatA, 5) - IOSDoubleArray_Get(flatA, 1) * IOSDoubleArray_Get(flatA, 4)) + IOSDoubleArray_Get(flatB, 5) * (IOSDoubleArray_Get(flatA, 3) * IOSDoubleArray_Get(flatA, 4) - IOSDoubleArray_Get(flatA, 0) * IOSDoubleArray_Get(flatA, 5)));
  *IOSDoubleArray_GetRef(eqn, 2) = IOSDoubleArray_Get(flatA, 0) * (IOSDoubleArray_Get(flatB, 1) * IOSDoubleArray_Get(flatB, 2) - IOSDoubleArray_Get(flatB, 5) * IOSDoubleArray_Get(flatB, 5)) + IOSDoubleArray_Get(flatA, 1) * (IOSDoubleArray_Get(flatB, 0) * IOSDoubleArray_Get(flatB, 2) - IOSDoubleArray_Get(flatB, 4) * IOSDoubleArray_Get(flatB, 4)) + IOSDoubleArray_Get(flatA, 2) * (IOSDoubleArray_Get(flatB, 0) * IOSDoubleArray_Get(flatB, 1) - IOSDoubleArray_Get(flatB, 3) * IOSDoubleArray_Get(flatB, 3)) + 2.0 * (IOSDoubleArray_Get(flatA, 3) * (IOSDoubleArray_Get(flatB, 4) * IOSDoubleArray_Get(flatB, 5) - IOSDoubleArray_Get(flatB, 2) * IOSDoubleArray_Get(flatB, 3)) + IOSDoubleArray_Get(flatA, 4) * (IOSDoubleArray_Get(flatB, 3) * IOSDoubleArray_Get(flatB, 5) - IOSDoubleArray_Get(flatB, 1) * IOSDoubleArray_Get(flatB, 4)) + IOSDoubleArray_Get(flatA, 5) * (IOSDoubleArray_Get(flatB, 3) * IOSDoubleArray_Get(flatB, 4) - IOSDoubleArray_Get(flatB, 0) * IOSDoubleArray_Get(flatB, 5)));
  *IOSDoubleArray_GetRef(eqn, 3) = IOSDoubleArray_Get(flatB, 2) * (IOSDoubleArray_Get(flatB, 0) * IOSDoubleArray_Get(flatB, 1) - IOSDoubleArray_Get(flatB, 3) * IOSDoubleArray_Get(flatB, 3)) + IOSDoubleArray_Get(flatB, 4) * (2.0 * IOSDoubleArray_Get(flatB, 3) * IOSDoubleArray_Get(flatB, 5) - IOSDoubleArray_Get(flatB, 1) * IOSDoubleArray_Get(flatB, 4)) - IOSDoubleArray_Get(flatB, 0) * IOSDoubleArray_Get(flatB, 5) * IOSDoubleArray_Get(flatB, 5);
  jint solnr = [((id<OrgGeogebraCommonKernelEquationSolverInterface>) nil_chk(self->eqnSolver_)) solveCubicWithDoubleArray:eqn withDoubleArray:sol withDouble:eps];
  if (solnr > -1) JavaUtilArrays_sortWithDoubleArray_withInt_withInt_(sol, 0, solnr);
  for (jint i = 0; i < solnr; i++) {
    for (jint j = 0; j < 6; j++) {
      *IOSDoubleArray_GetRef(flatDeg, j) = (IOSDoubleArray_Get(flatA, j) + IOSDoubleArray_Get(sol, i) * IOSDoubleArray_Get(flatB, j));
    }
    [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->degConic_)) setDegenerateMatrixFromArrayWithDoubleArray:flatDeg];
    OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectWithDegenerateWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(A, self->degConic_, points, eps);
    if (OrgGeogebraCommonKernelAlgosAlgoIntersectConics_testPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(A, B, points, OrgGeogebraCommonKernelKernel_MIN_PRECISION)) return YES;
    OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectWithDegenerateWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(B, self->degConic_, points, eps);
    if (OrgGeogebraCommonKernelAlgosAlgoIntersectConics_testPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(A, B, points, OrgGeogebraCommonKernelKernel_MIN_PRECISION)) return YES;
  }
  jdouble temp = IOSDoubleArray_Get(eqn, 0);
  *IOSDoubleArray_GetRef(eqn, 0) = IOSDoubleArray_Get(eqn, 3);
  *IOSDoubleArray_GetRef(eqn, 3) = temp;
  temp = IOSDoubleArray_Get(eqn, 1);
  *IOSDoubleArray_GetRef(eqn, 1) = IOSDoubleArray_Get(eqn, 2);
  *IOSDoubleArray_GetRef(eqn, 2) = temp;
  solnr = [self->eqnSolver_ solveCubicWithDoubleArray:eqn withDoubleArray:sol withDouble:eps];
  if (solnr > -1) JavaUtilArrays_sortWithDoubleArray_withInt_withInt_(sol, 0, solnr);
  for (jint i = 0; i < solnr; i++) {
    for (jint j = 0; j < 6; j++) {
      *IOSDoubleArray_GetRef(flatDeg, j) = (IOSDoubleArray_Get(sol, i) * IOSDoubleArray_Get(flatA, j) + IOSDoubleArray_Get(flatB, j));
    }
    [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->degConic_)) setDegenerateMatrixFromArrayWithDoubleArray:flatDeg];
    OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectWithDegenerateWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(A, self->degConic_, points, eps);
    if (OrgGeogebraCommonKernelAlgosAlgoIntersectConics_testPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(A, B, points, OrgGeogebraCommonKernelKernel_MIN_PRECISION)) return YES;
    OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectWithDegenerateWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(B, self->degConic_, points, eps);
    if (OrgGeogebraCommonKernelAlgosAlgoIntersectConics_testPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(A, B, points, OrgGeogebraCommonKernelKernel_MIN_PRECISION)) return YES;
  }
  IOSDoubleArray *param1 = [IOSDoubleArray newArrayWithLength:6];
  *IOSDoubleArray_GetRef(param1, 0) = IOSDoubleArray_Get(Amatrix, 0);
  *IOSDoubleArray_GetRef(param1, 1) = 2 * IOSDoubleArray_Get(Amatrix, 3);
  *IOSDoubleArray_GetRef(param1, 2) = IOSDoubleArray_Get(Amatrix, 1);
  *IOSDoubleArray_GetRef(param1, 3) = 2 * IOSDoubleArray_Get(Amatrix, 4);
  *IOSDoubleArray_GetRef(param1, 4) = 2 * IOSDoubleArray_Get(Amatrix, 5);
  *IOSDoubleArray_GetRef(param1, 5) = IOSDoubleArray_Get(Amatrix, 2);
  IOSDoubleArray *param2 = [IOSDoubleArray newArrayWithLength:6];
  *IOSDoubleArray_GetRef(param2, 0) = IOSDoubleArray_Get(Bmatrix, 0);
  *IOSDoubleArray_GetRef(param2, 1) = 2 * IOSDoubleArray_Get(Bmatrix, 3);
  *IOSDoubleArray_GetRef(param2, 2) = IOSDoubleArray_Get(Bmatrix, 1);
  *IOSDoubleArray_GetRef(param2, 3) = 2 * IOSDoubleArray_Get(Bmatrix, 4);
  *IOSDoubleArray_GetRef(param2, 4) = 2 * IOSDoubleArray_Get(Bmatrix, 5);
  *IOSDoubleArray_GetRef(param2, 5) = IOSDoubleArray_Get(Bmatrix, 2);
  IOSObjectArray *res = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ 4, 2 }];
  solnr = [((OrgGeogebraCommonKernelSystemOfEquationsSolver *) nil_chk(self->sysSolver_)) solveSystemOfQuadraticEquationsWithDoubleArray:param1 withDoubleArray:param2 withDoubleArray2:res withDouble:eps];
  if (solnr == -1) {
    return NO;
  }
  for (jint i = 0; i < solnr; i++) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(points), i))) setCoordsWithDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(res, i)), 0) withDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(res, i)), 1) withDouble:1.0];
  for (jint i = solnr; i < 4; i++) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(points), i))) setUndefined];
  if (OrgGeogebraCommonKernelAlgosAlgoIntersectConics_testPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(A, B, points, OrgGeogebraCommonKernelKernel_MIN_PRECISION)) return YES;
  return NO;
}

jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectConics_intersectConicsWithEqualSubmatrixSWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(OrgGeogebraCommonKernelAlgosAlgoIntersectConics *self, OrgGeogebraCommonKernelGeosGeoConic *c1, OrgGeogebraCommonKernelGeosGeoConic *c2, IOSObjectArray *points, jdouble eps) {
  if (self->tempLine_ == nil) {
    self->tempLine_ = new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
  }
  IOSDoubleArray *c1matrix = [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(c1)) getFlatMatrix];
  IOSDoubleArray *c2matrix = [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(c2)) getFlatMatrix];
  jdouble m2 = JavaLangDouble_NaN;
  for (jint i = 0; i < 6 && JavaLangDouble_isNaNWithDouble_(m2); i++) {
    jdouble m1 = IOSDoubleArray_Get(nil_chk(c1matrix), i);
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_withDouble_(m1, eps)) {
      m2 = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(c2matrix), i)) / m1;
    }
  }
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->tempLine_)) setCoordsWithDouble:2 * (IOSDoubleArray_Get(nil_chk(c1matrix), 4) * m2 - IOSDoubleArray_Get(nil_chk(c2matrix), 4)) withDouble:2 * (IOSDoubleArray_Get(c1matrix, 5) * m2 - IOSDoubleArray_Get(c2matrix, 5)) withDouble:IOSDoubleArray_Get(c1matrix, 2) * m2 - IOSDoubleArray_Get(c2matrix, 2)];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectLineConicWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(self->tempLine_, c1, points, eps);
  if (OrgGeogebraCommonKernelAlgosAlgoIntersectConics_testPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(c1, c2, points, OrgGeogebraCommonKernelKernel_MIN_PRECISION)) return YES;
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectLineConicWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(self->tempLine_, c2, points, eps);
  if (OrgGeogebraCommonKernelAlgosAlgoIntersectConics_testPointsWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(c1, c2, points, OrgGeogebraCommonKernelKernel_MIN_PRECISION)) return YES;
  return NO;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_normalizeArrayWithDoubleArray_(IOSDoubleArray *array) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initialize();
  jdouble max = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(array))->size_; i++) {
    jdouble abs = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(array, i));
    if (abs > max) max = abs;
  }
  for (jint i = 0; i < array->size_; i++) {
    *IOSDoubleArray_GetRef(array, i) /= max;
  }
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_distanceTableWithOrgGeogebraCommonKernelGeosGeoPointArray_withIntArray_withOrgGeogebraCommonKernelGeosGeoPointArray_withDoubleArray2_(IOSObjectArray *D, IOSIntArray *age, IOSObjectArray *Q, IOSObjectArray *table) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initialize();
  jint i, j;
  jboolean foundUndefined = NO;
  jdouble dist, max = -1.0;
  for (i = 0; i < ((IOSObjectArray *) nil_chk(D))->size_; i++) {
    for (j = 0; j < ((IOSObjectArray *) nil_chk(Q))->size_; j++) {
      dist = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(D, i))) distanceSqrWithOrgGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(Q, j)] + IOSIntArray_Get(nil_chk(age), i);
      if (JavaLangDouble_isInfiniteWithDouble_(dist) || JavaLangDouble_isNaNWithDouble_(dist)) {
        dist = -1;
        foundUndefined = YES;
      }
      else if (dist > max) {
        max = dist;
      }
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(table), i)), j) = dist;
    }
  }
  if (foundUndefined) {
    max = max + 1;
    for (j = 0; j < ((IOSObjectArray *) nil_chk(Q))->size_; j++) {
      for (i = 0; i < D->size_; i++) {
        if (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(table), i)), j) == -1) {
          *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(table, i)), j) = max;
        }
      }
    }
  }
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_setNearToWithOrgGeogebraCommonKernelGeosGeoPointArray_withBooleanArray_withOrgGeogebraCommonKernelGeosGeoPointArray_withBooleanArray_withDoubleArray2_withOrgGeogebraCommonKernelPointPairList_withIntArray_withBoolean_withDouble_(IOSObjectArray *P, IOSBooleanArray *isPalive, IOSObjectArray *Q, IOSBooleanArray *isQonPath, IOSObjectArray *distTable, OrgGeogebraCommonKernelPointPairList *pointList, IOSIntArray *permutation, jboolean needStrict, jdouble eps) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initialize();
  jint indexP, indexQ;
  [((OrgGeogebraCommonKernelPointPairList *) nil_chk(pointList)) clear];
  for (indexP = 0; indexP < ((IOSObjectArray *) nil_chk(P))->size_; indexP++) {
    for (indexQ = 0; indexQ < ((IOSObjectArray *) nil_chk(Q))->size_; indexQ++) {
      [pointList insertPointPairWithInt:indexP withBoolean:IOSBooleanArray_Get(nil_chk(isPalive), indexP) withInt:indexQ withBoolean:IOSBooleanArray_Get(nil_chk(isQonPath), indexQ) withDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(distTable), indexP)), indexQ)];
    }
  }
  jdouble gap = JavaLangDouble_POSITIVE_INFINITY;
  jdouble temp;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(Q))->size_; i++) {
    for (jint j = i + 1; j < Q->size_; j++) {
      temp = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(Q, i))) distanceSqrWithOrgGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(Q, j)];
      if (temp < gap) gap = temp;
    }
  }
  if (!needStrict || (gap > eps * eps)) {
    OrgGeogebraCommonKernelPointPair *pair;
    jint currentSize = -1;
    while (![pointList isEmpty] && [pointList size] != currentSize) {
      currentSize = [pointList size];
      pair = [pointList getHead];
      indexP = ((OrgGeogebraCommonKernelPointPair *) nil_chk(pair))->indexP_;
      indexQ = pair->indexQ_;
      if (pair->isPalive_ && pair->isQonPath_ && [pointList getClosestPWithindexQWithInt:pair->indexQ_] == pair->indexP_ && [pointList getClosestQWithindexPWithInt:pair->indexP_] == pair->indexQ_) {
        [pointList removeAllPairsWithOrgGeogebraCommonKernelPointPair:pair];
      }
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(P, indexP))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(Q, indexQ)];
      *IOSIntArray_GetRef(nil_chk(permutation), indexP) = indexQ;
    }
    while (![pointList isEmpty]) {
      pair = [pointList getHead];
      indexP = ((OrgGeogebraCommonKernelPointPair *) nil_chk(pair))->indexP_;
      indexQ = pair->indexQ_;
      [pointList removeAllPairsWithOrgGeogebraCommonKernelPointPair:pair];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(P, indexP))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(Q, indexQ)];
      *IOSIntArray_GetRef(nil_chk(permutation), indexP) = indexQ;
    }
  }
  else {
    for (jint i = 0; i < P->size_; i++) {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(P, i))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(Q, IOSIntArray_Get(nil_chk(permutation), i))];
    }
  }
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectConics_setNearToWithOrgGeogebraCommonKernelGeosGeoPointArray_withBooleanArray_withOrgGeogebraCommonKernelGeosGeoPointArray_withBooleanArray_withDoubleArray2_withOrgGeogebraCommonKernelPointPairList_withIntArray_(IOSObjectArray *P, IOSBooleanArray *isPalive, IOSObjectArray *Q, IOSBooleanArray *isQonPath, IOSObjectArray *distTable, OrgGeogebraCommonKernelPointPairList *pointList, IOSIntArray *permutation) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_initialize();
  jint indexP, indexQ;
  [((OrgGeogebraCommonKernelPointPairList *) nil_chk(pointList)) clear];
  for (indexP = 0; indexP < ((IOSObjectArray *) nil_chk(P))->size_; indexP++) {
    for (indexQ = 0; indexQ < ((IOSObjectArray *) nil_chk(Q))->size_; indexQ++) {
      [pointList insertPointPairWithInt:indexP withBoolean:IOSBooleanArray_Get(nil_chk(isPalive), indexP) withInt:indexQ withBoolean:IOSBooleanArray_Get(nil_chk(isQonPath), indexQ) withDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(distTable), indexP)), indexQ)];
    }
  }
  if ([pointList isStrict]) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"strict list");
    OrgGeogebraCommonKernelPointPair *pair;
    while (![pointList isEmpty]) {
      pair = [pointList getHead];
      indexP = ((OrgGeogebraCommonKernelPointPair *) nil_chk(pair))->indexP_;
      indexQ = pair->indexQ_;
      [pointList removeAllPairsWithOrgGeogebraCommonKernelPointPair:pair];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(P, indexP))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(nil_chk(Q), indexQ)];
      *IOSIntArray_GetRef(nil_chk(permutation), indexP) = indexQ;
    }
  }
  else {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"non strict list");
    for (jint i = 0; i < P->size_; i++) {
      (void) IOSObjectArray_Set(P, i, IOSObjectArray_Get(nil_chk(Q), IOSIntArray_Get(nil_chk(permutation), i)));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIntersectConics)
