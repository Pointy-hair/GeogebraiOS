//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoMirror.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/LocusEquation.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/PathParameter.h"
#include "org/geogebra/common/kernel/Region.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoMirror.h"
#include "org/geogebra/common/kernel/algos/AlgoTransformation.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/EquationElementInterface.h"
#include "org/geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/ConicMirrorable.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoConicPart.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPoly.h"
#include "org/geogebra/common/kernel/geos/GeoRay.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/geos/Mirrorable.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/util/MyMath.h"

@interface OrgGeogebraCommonKernelAlgosAlgoMirror () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoLineND> mirrorLine_;
  OrgGeogebraCommonKernelGeosGeoConic *mirrorConic_;
  OrgGeogebraCommonKernelGeosGeoPoint *transformedPoint_AlgoMirror_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoMirror, mirrorLine_, id<OrgGeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoMirror, mirrorConic_, OrgGeogebraCommonKernelGeosGeoConic *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoMirror, transformedPoint_AlgoMirror_, OrgGeogebraCommonKernelGeosGeoPoint *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMirror_compute(OrgGeogebraCommonKernelAlgosAlgoMirror *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoMirror

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, inArg, p);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, inArg, p);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
                    withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c {
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoConic_(self, cons, label, inArg, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
                    withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c {
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoConic_(self, cons, inArg, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g {
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, inArg, g);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g {
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, inArg, g);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (void)endOfConstructionWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                       withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
                       withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)mirror {
  OrgGeogebraCommonKernelAlgosAlgoMirror_set_mirror_(self, mirror);
  OrgGeogebraCommonKernelAlgosAlgoMirror_set_inGeo_(self, inArg);
  OrgGeogebraCommonKernelAlgosAlgoMirror_set_outGeo_(self, [self getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:inGeo_]);
  if ([OrgGeogebraCommonKernelGeosMirrorable_class_() isInstance:outGeo_]) OrgGeogebraCommonKernelAlgosAlgoMirror_set_out_(self, (id<OrgGeogebraCommonKernelGeosMirrorable>) check_protocol_cast(outGeo_, @protocol(OrgGeogebraCommonKernelGeosMirrorable)));
  [self setInputOutput];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) registerEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:self];
  OrgGeogebraCommonKernelAlgosAlgoMirror_setAndConsume_transformedPoint_AlgoMirror_(self, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
  OrgGeogebraCommonKernelAlgosAlgoMirror_compute(self);
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(inGeo_)) isGeoFunction]) [cons registerEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:self];
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Mirror();
}

- (jint)getRelatedModeID {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(mirror_)) isGeoLine]) {
    return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE;
  }
  else if ([mirror_ isGeoPoint]) {
    return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT;
  }
  else {
    return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_CIRCLE;
  }
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inGeo_);
  IOSObjectArray_Set(input_, 1, mirror_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:outGeo_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResult {
  return outGeo_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoMirror_compute(self);
}

- (void)computeRegardingMirror {
  if (mirror_ == mirrorLine_) {
    if ([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(mirrorLine_)) getStartPoint] == nil) {
      [mirrorLine_ setStandardStartPoint];
    }
    [((id<OrgGeogebraCommonKernelGeosMirrorable>) nil_chk(out_)) mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:mirrorLine_];
  }
  else if (mirror_ == mirrorPoint_) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(outGeo_)) isGeoFunction]) {
      [((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(outGeo_, [OrgGeogebraCommonKernelGeosGeoFunction class])) mirrorWithOrgGeogebraCommonKernelMatrixCoords:[self getMirrorCoords]];
    }
    else {
      [((id<OrgGeogebraCommonKernelGeosMirrorable>) nil_chk(out_)) mirrorWithOrgGeogebraCommonKernelMatrixCoords:[self getMirrorCoords]];
    }
  }
  else [((id<OrgGeogebraCommonKernelGeosConicMirrorable>) nil_chk(((id<OrgGeogebraCommonKernelGeosConicMirrorable>) check_protocol_cast(out_, @protocol(OrgGeogebraCommonKernelGeosConicMirrorable))))) mirrorWithOrgGeogebraCommonKernelGeosGeoConic:mirrorConic_];
}

- (void)setOutGeo {
  if ([mirror_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoConic class]] && [inGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]]) {
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(inGeo_, [OrgGeogebraCommonKernelGeosGeoLine class])))) toGeoConicWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(outGeo_, [OrgGeogebraCommonKernelGeosGeoConic class])];
  }
  else if ([mirror_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoConic class]] && [inGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoConic class]] && [outGeo_ isKindOfClass:[OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]]) {
    [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(((OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(inGeo_, [OrgGeogebraCommonKernelGeosGeoConic class])))) toGeoImplicitPolyWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(outGeo_, [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class])];
  }
  else if ([inGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]] && mirror_ != mirrorPoint_) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(inGeo_, [OrgGeogebraCommonKernelGeosGeoFunction class])))) toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(outGeo_, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class])];
  }
  else if ([OrgGeogebraCommonKernelGeosGeoPoly_class_() isInstance:inGeo_] && mirror_ == mirrorConic_) {
    [((id<OrgGeogebraCommonKernelGeosGeoPoly>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoPoly>) check_protocol_cast(inGeo_, @protocol(OrgGeogebraCommonKernelGeosGeoPoly))))) toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(outGeo_, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class])];
  }
  else [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(outGeo_)) setWithOrgGeogebraCommonKernelGeosGeoElement:inGeo_];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getMirrorCoords {
  return [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(mirrorPoint_)) getInhomCoords];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AMirroredAtB" withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(inGeo_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(mirror_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g
                            withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g2 {
  OrgGeogebraCommonKernelAlgosAlgoMirror_set_inGeo_(self, g);
  OrgGeogebraCommonKernelAlgosAlgoMirror_set_outGeo_(self, g2);
  if (!([outGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]])) OrgGeogebraCommonKernelAlgosAlgoMirror_set_out_(self, (id<OrgGeogebraCommonKernelGeosMirrorable>) check_protocol_cast(outGeo_, @protocol(OrgGeogebraCommonKernelGeosMirrorable)));
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (([OrgGeogebraCommonKernelGeosGeoPoly_class_() isInstance:geo]) && mirror_ == mirrorConic_) return [new_OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
  if (([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) && mirror_ != mirrorPoint_) return [new_OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLimitedPath] && mirror_ == mirrorConic_) return [new_OrgGeogebraCommonKernelGeosGeoConicPart_initWithOrgGeogebraCommonKernelConstruction_withInt_(cons_, OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC) autorelease];
  if ([mirror_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoConic class]] && [geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]]) {
    return [new_OrgGeogebraCommonKernelGeosGeoConic_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
  }
  if ([mirror_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoConic class]] && [geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoConic class]] && (![((OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoConic class])) isCircle] || ![((OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoConic class])) keepsType])) return [new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
  if ([OrgGeogebraCommonKernelGeosGeoPoly_class_() isInstance:geo] || ([geo isLimitedPath] && mirror_ != mirrorConic_)) return [self copyInternalWithOrgGeogebraCommonKernelConstruction:cons_ withOrgGeogebraCommonKernelGeosGeoElement:geo];
  if ([geo isGeoList]) return [new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
  return [self copy__WithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)transformLimitedPathWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)a
                            withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)b {
  if (mirror_ != mirrorConic_) {
    [super transformLimitedPathWithOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:b];
    return;
  }
  OrgGeogebraCommonKernelGeosGeoConicPart *arc = (OrgGeogebraCommonKernelGeosGeoConicPart *) check_class_cast(b, [OrgGeogebraCommonKernelGeosGeoConicPart class]);
  [((OrgGeogebraCommonKernelGeosGeoConicPart *) nil_chk(arc)) setParametersWithDouble:0 withDouble:6.28 withBoolean:YES];
  if ([a isKindOfClass:[OrgGeogebraCommonKernelGeosGeoRay class]]) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(transformedPoint_AlgoMirror_)) removePath];
    [self setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelGeosGeoRay *) nil_chk(((OrgGeogebraCommonKernelGeosGeoRay *) check_class_cast(a, [OrgGeogebraCommonKernelGeosGeoRay class])))) getStartPoint] withOrgGeogebraCommonKernelGeosGeoElement:transformedPoint_AlgoMirror_];
    OrgGeogebraCommonKernelAlgosAlgoMirror_compute(self);
    [arc pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:transformedPoint_AlgoMirror_];
    jdouble d = [((OrgGeogebraCommonKernelPathParameter *) nil_chk([transformedPoint_AlgoMirror_ getPathParameter])) getT];
    [transformedPoint_AlgoMirror_ removePath];
    [transformedPoint_AlgoMirror_ setCoordsWithOrgGeogebraCommonKernelGeosGeoVec2D:[((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(mirrorConic_)) getTranslationVector]];
    [arc pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:transformedPoint_AlgoMirror_];
    jdouble e = [((OrgGeogebraCommonKernelPathParameter *) nil_chk([transformedPoint_AlgoMirror_ getPathParameter])) getT];
    [arc setParametersWithDouble:d * OrgGeogebraCommonKernelKernel_PI_2 withDouble:e * OrgGeogebraCommonKernelKernel_PI_2 withBoolean:YES];
    [transformedPoint_AlgoMirror_ removePath];
    [self setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:[arc getPointParamWithDouble:0.5] withOrgGeogebraCommonKernelGeosGeoElement:transformedPoint_AlgoMirror_];
    OrgGeogebraCommonKernelAlgosAlgoMirror_compute(self);
    if (![((OrgGeogebraCommonKernelGeosGeoRay *) nil_chk(((OrgGeogebraCommonKernelGeosGeoRay *) check_class_cast(a, [OrgGeogebraCommonKernelGeosGeoRay class])))) isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:transformedPoint_AlgoMirror_ withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION]) [arc setParametersWithDouble:d * OrgGeogebraCommonKernelKernel_PI_2 withDouble:e * OrgGeogebraCommonKernelKernel_PI_2 withBoolean:NO];
    [self setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:b];
  }
  else if ([a isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) {
    [arc setParametersWithDouble:0 withDouble:OrgGeogebraCommonKernelKernel_PI_2 withBoolean:YES];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(transformedPoint_AlgoMirror_)) removePath];
    [self setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(((OrgGeogebraCommonKernelGeosGeoSegment *) check_class_cast(a, [OrgGeogebraCommonKernelGeosGeoSegment class])))) getStartPoint] withOrgGeogebraCommonKernelGeosGeoElement:transformedPoint_AlgoMirror_];
    OrgGeogebraCommonKernelAlgosAlgoMirror_compute(self);
    [transformedPoint_AlgoMirror_ removePath];
    [arc pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:transformedPoint_AlgoMirror_];
    jdouble d = [((OrgGeogebraCommonKernelPathParameter *) nil_chk([transformedPoint_AlgoMirror_ getPathParameter])) getT];
    [arc setParametersWithDouble:0 withDouble:OrgGeogebraCommonKernelKernel_PI_2 withBoolean:YES];
    [transformedPoint_AlgoMirror_ removePath];
    [self setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(((OrgGeogebraCommonKernelGeosGeoSegment *) check_class_cast(a, [OrgGeogebraCommonKernelGeosGeoSegment class])))) getEndPoint] withOrgGeogebraCommonKernelGeosGeoElement:transformedPoint_AlgoMirror_];
    OrgGeogebraCommonKernelAlgosAlgoMirror_compute(self);
    [arc pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:transformedPoint_AlgoMirror_];
    jdouble e = [((OrgGeogebraCommonKernelPathParameter *) nil_chk([transformedPoint_AlgoMirror_ getPathParameter])) getT];
    [arc setParametersWithDouble:d * OrgGeogebraCommonKernelKernel_PI_2 withDouble:e * OrgGeogebraCommonKernelKernel_PI_2 withBoolean:YES];
    [transformedPoint_AlgoMirror_ removePath];
    [transformedPoint_AlgoMirror_ setCoordsWithOrgGeogebraCommonKernelGeosGeoVec2D:[((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(mirrorConic_)) getTranslationVector]];
    if ([arc isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:transformedPoint_AlgoMirror_ withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION]) [arc setParametersWithDouble:d * OrgGeogebraCommonKernelKernel_PI_2 withDouble:e * OrgGeogebraCommonKernelKernel_PI_2 withBoolean:NO];
    [self setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:b];
  }
  if ([a isKindOfClass:[OrgGeogebraCommonKernelGeosGeoConicPart class]]) {
    [self transformLimitedConicWithOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:b];
  }
}

- (jboolean)swapOrientationWithOrgGeogebraCommonKernelGeosGeoConicPart:(OrgGeogebraCommonKernelGeosGeoConicPart *)arc {
  if (arc == nil) {
    return YES;
  }
  else if (mirror_ != mirrorConic_) {
    return [arc positiveOrientation];
  }
  OrgGeogebraCommonKernelGeosGeoVec2D *arcCentre = [((OrgGeogebraCommonKernelGeosGeoConicPart *) nil_chk(arc)) getTranslationVector];
  OrgGeogebraCommonKernelGeosGeoVec2D *mirrorCentre = [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(mirrorConic_)) getTranslationVector];
  jdouble dist = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(arcCentre)) getX] - [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(mirrorCentre)) getX], [arcCentre getY] - [mirrorCentre getY]);
  return !OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(dist, IOSDoubleArray_Get(nil_chk(arc->halfAxes_), 0));
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<OrgGeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                         withOrgGeogebraCommonKernelAlgosEquationScopeInterface:(id<OrgGeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return OrgGeogebraCommonKernelLocusEquation_eqnMirrorWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (jdouble)getAreaScaleFactor {
  return -1;
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(inGeo_);
  RELEASE_(outGeo_);
  RELEASE_(mirrorLine_);
  RELEASE_(mirrorPoint_);
  RELEASE_(mirrorConic_);
  RELEASE_(mirror_);
  RELEASE_(transformedPoint_AlgoMirror_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "AlgoMirror", NULL, 0x4, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "AlgoMirror", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoConic:", "AlgoMirror", NULL, 0x0, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoConic:", "AlgoMirror", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "AlgoMirror", NULL, 0x0, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "AlgoMirror", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:", "AlgoMirror", NULL, 0x4, NULL, NULL },
    { "endOfConstructionWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "endOfConstruction", "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "computeRegardingMirror", NULL, "V", 0x4, NULL, NULL },
    { "setOutGeo", NULL, "V", 0x4, NULL, NULL },
    { "getMirrorCoords", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "setTransformedObject", "V", 0x4, NULL, NULL },
    { "getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:", "getResultTemplate", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "transformLimitedPathWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "transformLimitedPath", "V", 0x4, NULL, NULL },
    { "swapOrientationWithOrgGeogebraCommonKernelGeosGeoConicPart:", "swapOrientation", "Z", 0x1, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lorg.geogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
    { "getAreaScaleFactor", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "out_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.Mirrorable;", NULL, NULL,  },
    { "inGeo_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "outGeo_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "mirrorLine_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "mirrorPoint_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "mirrorConic_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
    { "mirror_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "transformedPoint_AlgoMirror_", "transformedPoint", 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoMirror = { 2, "AlgoMirror", "org.geogebra.common.kernel.algos", NULL, 0x1, 24, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoMirror;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelAlgosAlgoMirror *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelKernelNDGeoPointND> p) {
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, inArg, p);
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoMirror *new_OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelKernelNDGeoPointND> p) {
  OrgGeogebraCommonKernelAlgosAlgoMirror *self = [OrgGeogebraCommonKernelAlgosAlgoMirror alloc];
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, inArg, p);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelAlgosAlgoMirror *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelKernelNDGeoPointND> p) {
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoMirror_set_mirrorPoint_(self, p);
  [self endOfConstructionWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelGeosGeoElement:inArg withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoElement class])];
}

OrgGeogebraCommonKernelAlgosAlgoMirror *new_OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelKernelNDGeoPointND> p) {
  OrgGeogebraCommonKernelAlgosAlgoMirror *self = [OrgGeogebraCommonKernelAlgosAlgoMirror alloc];
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, inArg, p);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelAlgosAlgoMirror *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *inArg, OrgGeogebraCommonKernelGeosGeoConic *c) {
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoConic_(self, cons, inArg, c);
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoMirror *new_OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *inArg, OrgGeogebraCommonKernelGeosGeoConic *c) {
  OrgGeogebraCommonKernelAlgosAlgoMirror *self = [OrgGeogebraCommonKernelAlgosAlgoMirror alloc];
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoConic_(self, cons, label, inArg, c);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelAlgosAlgoMirror *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, OrgGeogebraCommonKernelGeosGeoConic *c) {
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoMirror_set_mirrorConic_(self, c);
  [self endOfConstructionWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelGeosGeoElement:inArg withOrgGeogebraCommonKernelGeosGeoElement:c];
}

OrgGeogebraCommonKernelAlgosAlgoMirror *new_OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, OrgGeogebraCommonKernelGeosGeoConic *c) {
  OrgGeogebraCommonKernelAlgosAlgoMirror *self = [OrgGeogebraCommonKernelAlgosAlgoMirror alloc];
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoConic_(self, cons, inArg, c);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonKernelAlgosAlgoMirror *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g) {
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, inArg, g);
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoMirror *new_OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g) {
  OrgGeogebraCommonKernelAlgosAlgoMirror *self = [OrgGeogebraCommonKernelAlgosAlgoMirror alloc];
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, inArg, g);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonKernelAlgosAlgoMirror *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g) {
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoMirror_set_mirrorLine_(self, g);
  [self endOfConstructionWithOrgGeogebraCommonKernelConstruction:cons withOrgGeogebraCommonKernelGeosGeoElement:inArg withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoElement class])];
}

OrgGeogebraCommonKernelAlgosAlgoMirror *new_OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g) {
  OrgGeogebraCommonKernelAlgosAlgoMirror *self = [OrgGeogebraCommonKernelAlgosAlgoMirror alloc];
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, inArg, g);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelAlgosAlgoMirror *self, OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelAlgosAlgoTransformation_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
}

OrgGeogebraCommonKernelAlgosAlgoMirror *new_OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelAlgosAlgoMirror *self = [OrgGeogebraCommonKernelAlgosAlgoMirror alloc];
  OrgGeogebraCommonKernelAlgosAlgoMirror_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoMirror_compute(OrgGeogebraCommonKernelAlgosAlgoMirror *self) {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->mirror_)) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setUndefined];
    return;
  }
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isGeoList]) {
    [self transformListWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->inGeo_, [OrgGeogebraCommonKernelGeosGeoList class]) withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->outGeo_, [OrgGeogebraCommonKernelGeosGeoList class])];
    return;
  }
  [self setOutGeo];
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) isDefined]) {
    return;
  }
  if ([self->inGeo_ isRegion] && self->mirror_ == self->mirrorConic_) {
    OrgGeogebraCommonKernelGeosGeoVec2D *v = [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->mirrorConic_)) getTranslationVector];
    [self->outGeo_ setInverseFillWithBoolean:[((id<OrgGeogebraCommonKernelRegion>) check_protocol_cast(self->inGeo_, @protocol(OrgGeogebraCommonKernelRegion))) isInRegionWithDouble:[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(v)) getX] withDouble:[v getY]] ^ [self->inGeo_ isInverseFill]];
  }
  [self computeRegardingMirror];
  if ([self->inGeo_ isLimitedPath]) [self transformLimitedPathWithOrgGeogebraCommonKernelGeosGeoElement:self->inGeo_ withOrgGeogebraCommonKernelGeosGeoElement:self->outGeo_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoMirror)
