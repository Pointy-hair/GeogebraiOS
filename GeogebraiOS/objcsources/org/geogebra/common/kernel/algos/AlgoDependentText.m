//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoDependentText.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentText.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/Algos.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonKernelAlgosAlgoDependentText () {
 @public
  OrgGeogebraCommonKernelArithmeticExpressionNode *root_;
  OrgGeogebraCommonKernelGeosGeoText *text_;
  OrgGeogebraCommonKernelStringTemplate *oldTpl_;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> numToTrace_;
  jboolean numToTraceSet_;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getSpecialCopyWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en;

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev OBJC_METHOD_FAMILY_NONE;

- (void)setNumToTraceWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentText, root_, OrgGeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentText, text_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentText, oldTpl_, OrgGeogebraCommonKernelStringTemplate *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentText, numToTrace_, id<OrgGeogebraCommonKernelArithmeticExpressionValue>)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoDependentText_compute(OrgGeogebraCommonKernelAlgosAlgoDependentText *self);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelAlgosAlgoDependentText_getSpecialCopyWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelAlgosAlgoDependentText *self, OrgGeogebraCommonKernelArithmeticExpressionNode *en);

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelAlgosAlgoDependentText_copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelAlgosAlgoDependentText *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoDependentText_setNumToTraceWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelAlgosAlgoDependentText *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev);

@implementation OrgGeogebraCommonKernelAlgosAlgoDependentText

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
        withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root {
  OrgGeogebraCommonKernelAlgosAlgoDependentText_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, cons, label, root);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
        withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root {
  OrgGeogebraCommonKernelAlgosAlgoDependentText_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, cons, root);
  return self;
}

- (OrgGeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return OrgGeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TEXT;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getRoot {
  return root_;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_set_input_(self, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) getGeoElementVariables]);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isGeoText]) [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(input_, i), [OrgGeogebraCommonKernelGeosGeoText class])))) addTextDescendantWithOrgGeogebraCommonKernelGeosGeoText:text_];
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:text_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoText *)getGeoText {
  return text_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoDependentText_compute(self);
}

+ (void)nodeToGeoTextWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root
                                  withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)text
                               withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  OrgGeogebraCommonKernelAlgosAlgoDependentText_nodeToGeoTextWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelStringTemplate_(root, text, tpl);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (root_ == nil) return @"";
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (void)setSpreadsheetTraceableText {
  numToTraceSet_ = NO;
  OrgGeogebraCommonKernelArithmeticExpressionNode *copy_ = OrgGeogebraCommonKernelAlgosAlgoDependentText_getSpecialCopyWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, root_);
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text_)) setSpreadsheetTraceableWithOrgGeogebraCommonKernelArithmeticExpressionNode:copy_ withOrgGeogebraCommonKernelArithmeticExpressionValue:numToTrace_];
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getSpecialCopyWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en {
  return OrgGeogebraCommonKernelAlgosAlgoDependentText_getSpecialCopyWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, en);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return OrgGeogebraCommonKernelAlgosAlgoDependentText_copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, ev);
}

- (void)setNumToTraceWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  OrgGeogebraCommonKernelAlgosAlgoDependentText_setNumToTraceWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, ev);
}

- (void)dealloc {
  RELEASE_(root_);
  RELEASE_(text_);
  RELEASE_(oldTpl_);
  RELEASE_(numToTrace_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "AlgoDependentText", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "AlgoDependentText", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getRoot", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getGeoText", NULL, "Lorg.geogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "nodeToGeoTextWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelGeosGeoText:withOrgGeogebraCommonKernelStringTemplate:", "nodeToGeoText", "V", 0x19, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "setSpreadsheetTraceableText", NULL, "V", 0x1, NULL, NULL },
    { "getSpecialCopyWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "getSpecialCopy", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue:", "copy", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x2, NULL, NULL },
    { "setNumToTraceWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "setNumToTrace", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "root_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "text_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "oldTpl_", NULL, 0x2, "Lorg.geogebra.common.kernel.StringTemplate;", NULL, NULL,  },
    { "numToTrace_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "numToTraceSet_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoDependentText = { 2, "AlgoDependentText", "org.geogebra.common.kernel.algos", NULL, 0x1, 14, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoDependentText;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoDependentText_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelAlgosAlgoDependentText *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoDependentText_set_root_(self, root);
  OrgGeogebraCommonKernelAlgosAlgoDependentText_setAndConsume_text_(self, new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self->text_ initSpreadsheetTraceableCase];
  OrgGeogebraCommonKernelAlgosAlgoDependentText_compute(self);
  [self->text_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoDependentText *new_OrgGeogebraCommonKernelAlgosAlgoDependentText_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root) {
  OrgGeogebraCommonKernelAlgosAlgoDependentText *self = [OrgGeogebraCommonKernelAlgosAlgoDependentText alloc];
  OrgGeogebraCommonKernelAlgosAlgoDependentText_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, cons, label, root);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoDependentText_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelAlgosAlgoDependentText *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelArithmeticExpressionNode *root) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoDependentText_set_root_(self, root);
  OrgGeogebraCommonKernelAlgosAlgoDependentText_setAndConsume_text_(self, new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoDependentText_compute(self);
}

OrgGeogebraCommonKernelAlgosAlgoDependentText *new_OrgGeogebraCommonKernelAlgosAlgoDependentText_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelArithmeticExpressionNode *root) {
  OrgGeogebraCommonKernelAlgosAlgoDependentText *self = [OrgGeogebraCommonKernelAlgosAlgoDependentText alloc];
  OrgGeogebraCommonKernelAlgosAlgoDependentText_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, cons, root);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoDependentText_compute(OrgGeogebraCommonKernelAlgosAlgoDependentText *self) {
  OrgGeogebraCommonKernelStringTemplate *tpl = [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) getStringTemplate];
  if (self->oldTpl_ != tpl) {
    OrgGeogebraCommonKernelAlgosAlgoDependentText_set_oldTpl_(self, tpl);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->input_))->size_; i++) {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) isGeoText] && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) isLabelSet] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) getParentAlgorithm] != nil) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:self->text_];
        [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) getParentAlgorithm])) update];
      }
    }
  }
  OrgGeogebraCommonKernelAlgosAlgoDependentText_nodeToGeoTextWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelStringTemplate_(self->root_, self->text_, tpl);
}

void OrgGeogebraCommonKernelAlgosAlgoDependentText_nodeToGeoTextWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticExpressionNode *root, OrgGeogebraCommonKernelGeosGeoText *text, OrgGeogebraCommonKernelStringTemplate *tpl) {
  OrgGeogebraCommonKernelAlgosAlgoDependentText_initialize();
  @try {
    jboolean latex = [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text)) isLaTeX];
    [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root)) setHoldsLaTeXtextWithBoolean:latex];
    NSString *str;
    if (latex) {
      str = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([root evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl])) toLaTeXStringWithBoolean:NO withOrgGeogebraCommonKernelStringTemplate:tpl];
    }
    else {
      str = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([root evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
    }
    [text setTextStringWithNSString:str];
  }
  @catch (JavaLangException *e) {
    [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text)) setUndefined];
  }
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelAlgosAlgoDependentText_getSpecialCopyWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelAlgosAlgoDependentText *self, OrgGeogebraCommonKernelArithmeticExpressionNode *en) {
  OrgGeogebraCommonKernelArithmeticExpressionNode *newNode = nil;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> lev = nil, rev = nil;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getLeft];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [en getRight];
  if (left != nil) {
    lev = OrgGeogebraCommonKernelAlgosAlgoDependentText_copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left);
  }
  if (right != nil) {
    rev = OrgGeogebraCommonKernelAlgosAlgoDependentText_copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, right);
  }
  if (lev != nil) {
    newNode = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, lev, [en getOperation], rev) autorelease];
    newNode->leaf_ = en->leaf_;
  }
  else {
    return nil;
  }
  return newNode;
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelAlgosAlgoDependentText_copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelAlgosAlgoDependentText *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev) {
  if (ev == nil) {
    return nil;
  }
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> ret = nil;
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isNumberValue]) {
    OrgGeogebraCommonKernelAlgosAlgoDependentText_setNumToTraceWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, ev);
    ret = [new_OrgGeogebraCommonKernelArithmeticMyStringBuffer_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, @" ... ") autorelease];
  }
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    ret = OrgGeogebraCommonKernelAlgosAlgoDependentText_getSpecialCopyWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, en);
  }
  else if ([ev isConstant] || ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]])) {
    ret = [ev deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_];
  }
  else if ([ev isGeoElement]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoElement class]);
    OrgGeogebraCommonKernelAlgosAlgoElement *algo = [geo getParentAlgorithm];
    if (algo != nil && ((IOSObjectArray *) nil_chk([algo getInput]))->size_ > 0) {
      OrgGeogebraCommonKernelGeosGeoElement *geo2 = IOSObjectArray_Get(nil_chk([algo getInput]), 0);
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) isNumberValue]) {
        OrgGeogebraCommonKernelAlgosAlgoDependentText_setNumToTraceWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, geo2);
        ret = [new_OrgGeogebraCommonKernelArithmeticMyStringBuffer_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, @" ... ") autorelease];
      }
      else {
        ret = ev;
      }
    }
    else {
      ret = ev;
    }
  }
  else {
    ret = ev;
  }
  return ret;
}

void OrgGeogebraCommonKernelAlgosAlgoDependentText_setNumToTraceWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelAlgosAlgoDependentText *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev) {
  if (!self->numToTraceSet_) {
    OrgGeogebraCommonKernelAlgosAlgoDependentText_set_numToTrace_(self, ev);
    self->numToTraceSet_ = YES;
  }
  else OrgGeogebraCommonKernelAlgosAlgoDependentText_set_numToTrace_(self, nil);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoDependentText)
