//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoOrthoLinePointVector.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoOrthoLinePointVector.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector () {
 @public
  OrgGeogebraCommonKernelGeosGeoPoint *P_;
  OrgGeogebraCommonKernelGeosGeoVector *v_;
  OrgGeogebraCommonKernelGeosGeoLine *g_;
}

- (void)addIncidence;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector, P_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector, v_, OrgGeogebraCommonKernelGeosGeoVector *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector, g_, OrgGeogebraCommonKernelGeosGeoLine *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_addIncidence(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_compute(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                   withOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)v {
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(self, cons, label, P, v);
  return self;
}

- (void)addIncidence {
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_addIncidence(self);
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_OrthogonalLine();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, P_);
  IOSObjectArray_Set(input_, 1, v_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoLine *)getLine {
  return g_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getP {
  return P_;
}

- (OrgGeogebraCommonKernelGeosGeoVector *)getv {
  return v_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_compute(self);
}

- (jint)getInputLengthForXML {
  return [self getInputLengthForXMLMayNeedXOYPlane];
}

- (jint)getInputLengthForCommandDescription {
  return [self getInputLengthForCommandDescriptionMayNeedXOYPlane];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getInputWithInt:(jint)i {
  return [self getInputMaybeXOYPlaneWithInt:i];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"LineThroughAPerpendicularToB" withNSString:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(v_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(P_);
  RELEASE_(v_);
  RELEASE_(g_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoVector:", "AlgoOrthoLinePointVector", NULL, 0x1, NULL, NULL },
    { "addIncidence", NULL, "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getLine", NULL, "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getP", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x0, NULL, NULL },
    { "getv", NULL, "Lorg.geogebra.common.kernel.geos.GeoVector;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getInputLengthForXML", NULL, "I", 0x4, NULL, NULL },
    { "getInputLengthForCommandDescription", NULL, "I", 0x4, NULL, NULL },
    { "getInputWithInt:", "getInput", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "v_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector = { 2, "AlgoOrthoLinePointVector", "org.geogebra.common.kernel.algos", NULL, 0x1, 13, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *P, OrgGeogebraCommonKernelGeosGeoVector *v) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_set_P_(self, P);
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_set_v_(self, v);
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_setAndConsume_g_(self, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self->g_ setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:P];
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_compute(self);
  [self->g_ setLabelWithNSString:label];
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_addIncidence(self);
}

OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector *new_OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *P, OrgGeogebraCommonKernelGeosGeoVector *v) {
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector *self = [OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector alloc];
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(self, cons, label, P, v);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_addIncidence(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector *self) {
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->P_)) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->g_ withBoolean:YES];
}

void OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector_compute(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector *self) {
  OrgGeogebraCommonKernelGeosGeoVec3D_crossWithOrgGeogebraCommonKernelGeosGeoVec3D_withDouble_withDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoVec3D_(self->P_, -((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(self->v_))->y_, self->v_->x_, 0.0, self->g_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointVector)
