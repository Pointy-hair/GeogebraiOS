//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/algos/AlgoIntersectFunctionLineNewton.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectFunctionLineNewton.h"
#include "org/geogebra/common/kernel/algos/AlgoRootNewton.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/TangentAlgo.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton () {
 @public
  OrgGeogebraCommonKernelGeosGeoFunction *f_AlgoIntersectFunctionLineNewton_;
  OrgGeogebraCommonKernelGeosGeoLine *line_;
  OrgGeogebraCommonKernelGeosGeoPoint *startPoint_, *rootPoint_AlgoIntersectFunctionLineNewton_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> tangentPoint_;
  OrgGeogebraCommonKernelArithmeticFunction *diffFunction_;
  jboolean isDefinedAsTangent_;
}

- (void)addIncidence;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton, f_AlgoIntersectFunctionLineNewton_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton, line_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton, startPoint_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton, rootPoint_AlgoIntersectFunctionLineNewton_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton, tangentPoint_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton, diffFunction_, OrgGeogebraCommonKernelArithmeticFunction *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_addIncidence(OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_compute(OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                     withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)line
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)startPoint {
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoPoint_(self, cons, label, f, line, startPoint);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                     withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)line
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)startPoint {
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoPoint_(self, cons, f, line, startPoint);
  return self;
}

- (void)addIncidence {
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_addIncidence(self);
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, f_AlgoIntersectFunctionLineNewton_);
  IOSObjectArray_Set(input_, 1, line_);
  IOSObjectArray_Set(input_, 2, startPoint_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:rootPoint_AlgoIntersectFunctionLineNewton_];
  [self setDependencies];
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_compute(self);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getIntersectionPoint {
  return rootPoint_AlgoIntersectFunctionLineNewton_;
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionPointOfABWithInitialValueC" withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(f_AlgoIntersectFunctionLineNewton_);
  RELEASE_(line_);
  RELEASE_(startPoint_);
  RELEASE_(rootPoint_AlgoIntersectFunctionLineNewton_);
  RELEASE_(tangentPoint_);
  RELEASE_(diffFunction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoPoint:", "AlgoIntersectFunctionLineNewton", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoPoint:", "AlgoIntersectFunctionLineNewton", NULL, 0x1, NULL, NULL },
    { "addIncidence", NULL, "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getIntersectionPoint", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_AlgoIntersectFunctionLineNewton_", "f", 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "startPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "rootPoint_AlgoIntersectFunctionLineNewton_", "rootPoint", 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "tangentPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "diffFunction_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "isDefinedAsTangent_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton = { 2, "AlgoIntersectFunctionLineNewton", "org.geogebra.common.kernel.algos", NULL, 0x1, 9, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoLine *line, OrgGeogebraCommonKernelGeosGeoPoint *startPoint) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoPoint_(self, cons, f, line, startPoint);
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rootPoint_AlgoIntersectFunctionLineNewton_)) setLabelWithNSString:label];
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_addIncidence(self);
}

OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton *new_OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoLine *line, OrgGeogebraCommonKernelGeosGeoPoint *startPoint) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoPoint_(self, cons, label, f, line, startPoint);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoLine *line, OrgGeogebraCommonKernelGeosGeoPoint *startPoint) {
  OrgGeogebraCommonKernelAlgosAlgoRootNewton_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_set_f_AlgoIntersectFunctionLineNewton_(self, f);
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_set_line_(self, line);
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_set_startPoint_(self, startPoint);
  if ([OrgGeogebraCommonKernelAlgosTangentAlgo_class_() isInstance:[((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(line)) getParentAlgorithm]]) {
    id<OrgGeogebraCommonKernelAlgosTangentAlgo> algo = (id<OrgGeogebraCommonKernelAlgosTangentAlgo>) check_protocol_cast([line getParentAlgorithm], @protocol(OrgGeogebraCommonKernelAlgosTangentAlgo));
    OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_set_tangentPoint_(self, [((id<OrgGeogebraCommonKernelAlgosTangentAlgo>) nil_chk(algo)) getTangentPointWithOrgGeogebraCommonKernelGeosGeoElement:f withOrgGeogebraCommonKernelGeosGeoLine:line]);
    self->isDefinedAsTangent_ = (self->tangentPoint_ != nil);
  }
  if (!self->isDefinedAsTangent_) {
    OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_setAndConsume_diffFunction_(self, new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelKernel_(self->kernel_));
  }
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_setAndConsume_rootPoint_AlgoIntersectFunctionLineNewton_(self, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_compute(self);
}

OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton *new_OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoLine *line, OrgGeogebraCommonKernelGeosGeoPoint *startPoint) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoPoint_(self, cons, f, line, startPoint);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_addIncidence(OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton *self) {
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rootPoint_AlgoIntersectFunctionLineNewton_)) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->f_AlgoIntersectFunctionLineNewton_ withBoolean:NO];
  [self->rootPoint_AlgoIntersectFunctionLineNewton_ addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->line_ withBoolean:NO];
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_compute(OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton *self) {
  if (!([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_AlgoIntersectFunctionLineNewton_)) isDefined] && [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->line_)) isDefined] && [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->startPoint_)) isDefined])) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rootPoint_AlgoIntersectFunctionLineNewton_)) setUndefined];
    return;
  }
  if (self->isDefinedAsTangent_) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rootPoint_AlgoIntersectFunctionLineNewton_)) setCoordsFromPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->tangentPoint_];
    return;
  }
  jdouble x;
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->line_))->y_)) {
    x = -self->line_->z_ / self->line_->x_;
  }
  else {
    OrgGeogebraCommonKernelArithmeticFunction_differenceWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelArithmeticFunction_([self->f_AlgoIntersectFunctionLineNewton_ getFunctionWithDouble:((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->startPoint_))->inhomX_], self->line_, self->diffFunction_);
    x = [self calcRootWithOrgGeogebraCommonKernelArithmeticFunction:self->diffFunction_ withDouble:self->startPoint_->inhomX_];
  }
  if (JavaLangDouble_isNaNWithDouble_(x)) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rootPoint_AlgoIntersectFunctionLineNewton_)) setUndefined];
    return;
  }
  jdouble y = [self->f_AlgoIntersectFunctionLineNewton_ evaluateWithDouble:x];
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rootPoint_AlgoIntersectFunctionLineNewton_)) setCoordsWithDouble:x withDouble:y withDouble:1.0];
  if (![self->line_ isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:self->rootPoint_AlgoIntersectFunctionLineNewton_ withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION]) {
    [self->rootPoint_AlgoIntersectFunctionLineNewton_ setUndefined];
    return;
  }
  if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->startPoint_)) isLabelSet] && [self->startPoint_ isIndependent] && [self->rootPoint_AlgoIntersectFunctionLineNewton_ isDefined]) {
    [self->startPoint_ setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:self->rootPoint_AlgoIntersectFunctionLineNewton_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton)
