//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/algos/AlgoAnglePolygonND.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/draw/DrawAngle.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoAngle.h"
#include "org/geogebra/common/kernel/algos/AlgoAnglePointsND.h"
#include "org/geogebra/common/kernel/algos/AlgoAnglePolygonND.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/DrawInformationAlgo.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/Localization.h"

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_compute(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND *self);

@interface OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 : NSObject < OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND *this$0_;
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithOrgGeogebraCommonKernelAlgosAlgoAnglePolygonND:(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1, this$0_, OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_initWithOrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 *self, OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND *outer$);

__attribute__((unused)) static OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 *new_OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_initWithOrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1)

@implementation OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
                  withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)poly
          withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, labels, poly, orientation);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)p
          withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, p, orientation);
  return self;
}

- (void)setPolyAndOrientationWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)p
                     withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_set_poly_(self, p);
}

- (OrgGeogebraCommonKernelAlgosAlgoAnglePointsND *)newAlgoAnglePointsWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  if (labels != nil && labels->size_ == 1 && IOSObjectArray_Get(labels, 0) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(labels, 0))) isEqual:@""]) {
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputAngles_)) setIndexLabelsWithNSString:IOSObjectArray_Get(labels, 0)];
  }
  else {
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputAngles_)) setLabelsWithNSStringArray:labels];
    [outputAngles_ setIndexLabelsWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputAngles_ getElementWithInt:0])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, poly_);
  [self setDependencies];
}

- (IOSObjectArray *)getAngles {
  return [self getOutput];
}

- (OrgGeogebraCommonKernelGeosGeoPolygon *)getPolygon {
  return poly_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_compute(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleOfA" withNSString:[((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *)createOutputPoints {
  return [new_OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_initWithOrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_(self) autorelease]) autorelease];
}

- (jboolean)updateDrawInfoWithDoubleArray:(IOSDoubleArray *)m
                          withDoubleArray:(IOSDoubleArray *)firstVec
withOrgGeogebraCommonEuclidianDrawDrawAngle:(OrgGeogebraCommonEuclidianDrawDrawAngle *)drawable {
  return YES;
}

- (jboolean)getCoordsInD3WithOrgGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)drawCoords {
  return YES;
}

- (void)dealloc {
  RELEASE_(poly_);
  RELEASE_(outputAngles_);
  RELEASE_(algoAngle_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "AlgoAnglePolygonND", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoAnglePolygonND", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoAnglePolygonND", NULL, 0x0, NULL, NULL },
    { "setPolyAndOrientationWithOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "setPolyAndOrientation", "V", 0x4, NULL, NULL },
    { "newAlgoAnglePointsWithOrgGeogebraCommonKernelConstruction:", "newAlgoAnglePoints", "Lorg.geogebra.common.kernel.algos.AlgoAnglePointsND;", 0x404, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x4, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getAngles", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getPolygon", NULL, "Lorg.geogebra.common.kernel.geos.GeoPolygon;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "createOutputPoints", NULL, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", 0x4, NULL, NULL },
    { "updateDrawInfoWithDoubleArray:withDoubleArray:withOrgGeogebraCommonEuclidianDrawDrawAngle:", "updateDrawInfo", "Z", 0x1, NULL, NULL },
    { "getCoordsInD3WithOrgGeogebraCommonKernelMatrixCoordsArray:", "getCoordsInD3", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x19, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_serialVersionUID },
    { "poly_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "outputAngles_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lorg/geogebra/common/kernel/algos/AlgoElement$OutputHandler<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "algoAngle_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgoAnglePointsND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND = { 2, "AlgoAnglePolygonND", "org.geogebra.common.kernel.algos", NULL, 0x401, 14, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND *self, OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelAlgosAlgoAngle_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
}

void OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoPolygon *poly, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, poly, orientation);
  [self setLabelsWithNSStringArray:labels];
  [self update];
}

void OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoPolygon *p, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  OrgGeogebraCommonKernelAlgosAlgoAngle_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  [self setPolyAndOrientationWithOrgGeogebraCommonKernelGeosGeoPolygon:p withOrgGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_set_algoAngle_(self, [self newAlgoAnglePointsWithOrgGeogebraCommonKernelConstruction:cons]);
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_set_outputAngles_(self, [self createOutputPoints]);
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_compute(self);
}

void OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_compute(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND *self) {
  jint length = ((IOSObjectArray *) nil_chk([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) getPoints]))->size_;
  [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputAngles_)) adjustOutputSizeWithInt:length > 0 ? length : 1];
  for (jint i = 0; i < length; i++) {
    [((OrgGeogebraCommonKernelAlgosAlgoAnglePointsND *) nil_chk(self->algoAngle_)) setABCWithOrgGeogebraCommonKernelKernelNDGeoPointND:[self->poly_ getPointNDWithInt:(i + 1) % length] withOrgGeogebraCommonKernelKernelNDGeoPointND:[self->poly_ getPointNDWithInt:i] withOrgGeogebraCommonKernelKernelNDGeoPointND:[self->poly_ getPointNDWithInt:(i + length - 1) % length]];
    [self->algoAngle_ compute];
    OrgGeogebraCommonKernelGeosGeoAngle *angle = (OrgGeogebraCommonKernelGeosGeoAngle *) check_class_cast([self->outputAngles_ getElementWithInt:i], [OrgGeogebraCommonKernelGeosGeoAngle class]);
    [((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(angle)) setWithOrgGeogebraCommonKernelGeosGeoElement:[self->algoAngle_ getAngle]];
    if (!angle->isDrawable__) {
      [angle setDrawableWithBoolean:YES];
    }
    [angle setDrawAlgorithmWithOrgGeogebraCommonKernelAlgosDrawInformationAlgo:[self->algoAngle_ copy__]];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self->algoAngle_];
  }
  for (jint i = length; i < [self->outputAngles_ size]; i++) [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->outputAngles_ getElementWithInt:i])) setUndefined];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND)

@implementation OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1

- (OrgGeogebraCommonKernelGeosGeoAngle *)newElement {
  OrgGeogebraCommonKernelGeosGeoAngle *p = [this$0_ newGeoAngleWithOrgGeogebraCommonKernelConstruction:this$0_->cons_];
  [((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(p)) setValueWithDouble:0];
  [p setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:this$0_];
  return p;
}

- (instancetype)initWithOrgGeogebraCommonKernelAlgosAlgoAnglePolygonND:(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND *)outer$ {
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_initWithOrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelAlgosAlgoAnglePolygonND:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.algos.AlgoAnglePolygonND;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND", "createOutputPoints" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 = { 2, "", "org.geogebra.common.kernel.algos", "AlgoAnglePolygonND", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lorg/geogebra/common/kernel/algos/AlgoElement$elementFactory<Lorg/geogebra/common/kernel/geos/GeoElement;>;" };
  return &_OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_initWithOrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 *self, OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND *outer$) {
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_set_this$0_(self, outer$);
  NSObject_init(self);
}

OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 *new_OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_initWithOrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND *outer$) {
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 *self = [OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1 alloc];
  OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1_initWithOrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoAnglePolygonND_$1)
