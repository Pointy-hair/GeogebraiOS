//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoDependentBoolean.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentBoolean.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/Algos.h"
#include "org/geogebra/common/kernel/algos/SymbolicParameters.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/prover/AlgoAreEqual.h"
#include "org/geogebra/common/kernel/prover/AlgoAreParallel.h"
#include "org/geogebra/common/kernel/prover/AlgoArePerpendicular.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonKernelAlgosAlgoDependentBoolean () {
 @public
  OrgGeogebraCommonKernelArithmeticExpressionNode *root_;
  OrgGeogebraCommonKernelGeosGeoBoolean *bool__;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentBoolean, root_, OrgGeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentBoolean, bool__, OrgGeogebraCommonKernelGeosGeoBoolean *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoDependentBoolean_compute(OrgGeogebraCommonKernelAlgosAlgoDependentBoolean *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoDependentBoolean

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
        withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root {
  OrgGeogebraCommonKernelAlgosAlgoDependentBoolean_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, cons, label, root);
  return self;
}

- (OrgGeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return OrgGeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_set_input_(self, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) getGeoElementVariables]);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:bool__];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoBoolean *)getGeoBoolean {
  return bool__;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoDependentBoolean_compute(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (OrgGeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  return [new_OrgGeogebraCommonKernelAlgosSymbolicParameters_initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self) autorelease];
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) getLeft])) isGeoElement] || ![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([root_ getRight])) isGeoElement]) @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  OrgGeogebraCommonKernelGeosGeoElement *left = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([root_ getLeft], [OrgGeogebraCommonKernelGeosGeoElement class]);
  OrgGeogebraCommonKernelGeosGeoElement *right = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([root_ getRight], [OrgGeogebraCommonKernelGeosGeoElement class]);
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_PERPENDICULAR()]) {
    OrgGeogebraCommonKernelProverAlgoArePerpendicular *algo = [new_OrgGeogebraCommonKernelProverAlgoArePerpendicular_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(right, [OrgGeogebraCommonKernelGeosGeoLine class])) autorelease];
    [algo getFreeVariablesWithJavaUtilHashSet:variables];
    [algo remove];
    return;
  }
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_PARALLEL()]) {
    OrgGeogebraCommonKernelProverAlgoAreParallel *algo = [new_OrgGeogebraCommonKernelProverAlgoAreParallel_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(right, [OrgGeogebraCommonKernelGeosGeoLine class])) autorelease];
    [algo getFreeVariablesWithJavaUtilHashSet:variables];
    [algo remove];
    return;
  }
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()]) {
    OrgGeogebraCommonKernelProverAlgoAreEqual *algo = [new_OrgGeogebraCommonKernelProverAlgoAreEqual_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", left, right) autorelease];
    [algo getFreeVariablesWithJavaUtilHashSet:variables];
    [algo remove];
    return;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSIntArray *)getDegrees {
  if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) getLeft])) isGeoElement] || ![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([root_ getRight])) isGeoElement]) @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  OrgGeogebraCommonKernelGeosGeoElement *left = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([root_ getLeft], [OrgGeogebraCommonKernelGeosGeoElement class]);
  OrgGeogebraCommonKernelGeosGeoElement *right = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([root_ getRight], [OrgGeogebraCommonKernelGeosGeoElement class]);
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_PERPENDICULAR()]) {
    OrgGeogebraCommonKernelProverAlgoArePerpendicular *algo = [new_OrgGeogebraCommonKernelProverAlgoArePerpendicular_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(right, [OrgGeogebraCommonKernelGeosGeoLine class])) autorelease];
    IOSIntArray *ret = [algo getDegrees];
    [algo remove];
    return ret;
  }
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_PARALLEL()]) {
    OrgGeogebraCommonKernelProverAlgoAreParallel *algo = [new_OrgGeogebraCommonKernelProverAlgoAreParallel_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(right, [OrgGeogebraCommonKernelGeosGeoLine class])) autorelease];
    IOSIntArray *ret = [algo getDegrees];
    [algo remove];
    return ret;
  }
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()]) {
    OrgGeogebraCommonKernelProverAlgoAreEqual *algo = [new_OrgGeogebraCommonKernelProverAlgoAreEqual_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", left, right) autorelease];
    IOSIntArray *ret = [algo getDegrees];
    [algo remove];
    return ret;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) getLeft])) isGeoElement] || ![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([root_ getRight])) isGeoElement]) @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  OrgGeogebraCommonKernelGeosGeoElement *left = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([root_ getLeft], [OrgGeogebraCommonKernelGeosGeoElement class]);
  OrgGeogebraCommonKernelGeosGeoElement *right = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([root_ getRight], [OrgGeogebraCommonKernelGeosGeoElement class]);
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_PERPENDICULAR()]) {
    OrgGeogebraCommonKernelProverAlgoArePerpendicular *algo = [new_OrgGeogebraCommonKernelProverAlgoArePerpendicular_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(right, [OrgGeogebraCommonKernelGeosGeoLine class])) autorelease];
    IOSObjectArray *ret = [algo getExactCoordinatesWithJavaUtilHashMap:values];
    [algo remove];
    return ret;
  }
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_PARALLEL()]) {
    OrgGeogebraCommonKernelProverAlgoAreParallel *algo = [new_OrgGeogebraCommonKernelProverAlgoAreParallel_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(right, [OrgGeogebraCommonKernelGeosGeoLine class])) autorelease];
    IOSObjectArray *ret = [algo getExactCoordinatesWithJavaUtilHashMap:values];
    [algo remove];
    return ret;
  }
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()]) {
    OrgGeogebraCommonKernelProverAlgoAreEqual *algo = [new_OrgGeogebraCommonKernelProverAlgoAreEqual_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", left, right) autorelease];
    IOSObjectArray *ret = [algo getExactCoordinatesWithJavaUtilHashMap:values];
    [algo remove];
    return ret;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getPolynomials {
  if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) getLeft])) isGeoElement] || ![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([root_ getRight])) isGeoElement]) @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  OrgGeogebraCommonKernelGeosGeoElement *left = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([root_ getLeft], [OrgGeogebraCommonKernelGeosGeoElement class]);
  OrgGeogebraCommonKernelGeosGeoElement *right = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([root_ getRight], [OrgGeogebraCommonKernelGeosGeoElement class]);
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_PERPENDICULAR()]) {
    OrgGeogebraCommonKernelProverAlgoArePerpendicular *algo = [new_OrgGeogebraCommonKernelProverAlgoArePerpendicular_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(right, [OrgGeogebraCommonKernelGeosGeoLine class])) autorelease];
    IOSObjectArray *ret = [algo getPolynomials];
    [algo remove];
    return ret;
  }
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_PARALLEL()]) {
    OrgGeogebraCommonKernelProverAlgoAreParallel *algo = [new_OrgGeogebraCommonKernelProverAlgoAreParallel_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(right, [OrgGeogebraCommonKernelGeosGeoLine class])) autorelease];
    IOSObjectArray *ret = [algo getPolynomials];
    [algo remove];
    return ret;
  }
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()]) {
    OrgGeogebraCommonKernelProverAlgoAreEqual *algo = [new_OrgGeogebraCommonKernelProverAlgoAreEqual_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", left, right) autorelease];
    IOSObjectArray *ret = [algo getPolynomials];
    [algo remove];
    return ret;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getBotanaPolynomials {
  if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) getLeft])) isGeoElement] || ![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([root_ getRight])) isGeoElement]) @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  OrgGeogebraCommonKernelGeosGeoElement *left = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([root_ getLeft], [OrgGeogebraCommonKernelGeosGeoElement class]);
  OrgGeogebraCommonKernelGeosGeoElement *right = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([root_ getRight], [OrgGeogebraCommonKernelGeosGeoElement class]);
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_PERPENDICULAR()]) {
    OrgGeogebraCommonKernelProverAlgoArePerpendicular *algo = [new_OrgGeogebraCommonKernelProverAlgoArePerpendicular_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(right, [OrgGeogebraCommonKernelGeosGeoLine class])) autorelease];
    IOSObjectArray *ret = [algo getBotanaPolynomials];
    [algo remove];
    return ret;
  }
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_PARALLEL()]) {
    OrgGeogebraCommonKernelProverAlgoAreParallel *algo = [new_OrgGeogebraCommonKernelProverAlgoAreParallel_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(right, [OrgGeogebraCommonKernelGeosGeoLine class])) autorelease];
    IOSObjectArray *ret = [algo getBotanaPolynomials];
    [algo remove];
    return ret;
  }
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([root_ getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()]) {
    OrgGeogebraCommonKernelProverAlgoAreEqual *algo = [new_OrgGeogebraCommonKernelProverAlgoAreEqual_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, @"", left, right) autorelease];
    IOSObjectArray *ret = [algo getBotanaPolynomials];
    [algo remove];
    return ret;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getExpression {
  return root_;
}

- (void)dealloc {
  RELEASE_(root_);
  RELEASE_(bool__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "AlgoDependentBoolean", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getGeoBoolean", NULL, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lorg.geogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getBotanaPolynomials", NULL, "[[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExpression", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "root_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "bool__", "bool", 0x2, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoDependentBoolean = { 2, "AlgoDependentBoolean", "org.geogebra.common.kernel.algos", NULL, 0x1, 13, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoDependentBoolean;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoDependentBoolean_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelAlgosAlgoDependentBoolean *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoDependentBoolean_set_root_(self, root);
  OrgGeogebraCommonKernelAlgosAlgoDependentBoolean_setAndConsume_bool__(self, new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoDependentBoolean_compute(self);
  [self->bool__ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoDependentBoolean *new_OrgGeogebraCommonKernelAlgosAlgoDependentBoolean_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root) {
  OrgGeogebraCommonKernelAlgosAlgoDependentBoolean *self = [OrgGeogebraCommonKernelAlgosAlgoDependentBoolean alloc];
  OrgGeogebraCommonKernelAlgosAlgoDependentBoolean_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, cons, label, root);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoDependentBoolean_compute(OrgGeogebraCommonKernelAlgosAlgoDependentBoolean *self) {
  @try {
    jboolean oldLabelStatus = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) setSuppressLabelCreationWithBoolean:YES];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->root_)) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk([self->kernel_ getConstruction])) setSuppressLabelCreationWithBoolean:oldLabelStatus];
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isGeoElement]) [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->bool__)) setValueWithBoolean:[((OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoBoolean class])) getBoolean]];
    else [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->bool__)) setValueWithBoolean:[((OrgGeogebraCommonKernelArithmeticMyBoolean *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyBoolean class])) getBoolean]];
  }
  @catch (JavaLangException *e) {
    [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->bool__)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoDependentBoolean)
