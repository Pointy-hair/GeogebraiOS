//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoPerimeterPoly.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoPerimeterPoly.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"

@interface OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly () {
 @public
  OrgGeogebraCommonKernelGeosGeoPolygon *polygon_;
  OrgGeogebraCommonKernelGeosGeoNumeric *circum_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly, polygon_, OrgGeogebraCommonKernelGeosGeoPolygon *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly, circum_, OrgGeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly_compute(OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)polygon {
  OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, cons, label, polygon);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)polygon {
  OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, cons, polygon);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Perimeter();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, polygon_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:circum_];
  [self setDependencies];
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly_compute(self);
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getCircumference {
  return circum_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoPolygon:", "AlgoPerimeterPoly", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoPolygon:", "AlgoPerimeterPoly", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getCircumference", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "polygon_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "circum_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly = { 2, "AlgoPerimeterPoly", "org.geogebra.common.kernel.algos", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPolygon *polygon) {
  (void) OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, cons, polygon);
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly *new_OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPolygon *polygon) {
  OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly *self = [OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly alloc];
  OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, cons, label, polygon);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoPolygon *polygon) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->polygon_ = polygon;
  self->circum_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly_compute(self);
}

OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly *new_OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoPolygon *polygon) {
  OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly *self = [OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly alloc];
  OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, cons, polygon);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly_compute(OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly *self) {
  if (![((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->polygon_)) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setUndefined];
    return;
  }
  IOSObjectArray *segment = [self->polygon_ getSegments];
  jdouble length = 0;
  for (jint i = 0; i < [self->polygon_ getPointsLength]; i++) {
    length = length + ([((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(nil_chk(segment), i))) getLength]);
  }
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setValueWithDouble:length];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoPerimeterPoly)
