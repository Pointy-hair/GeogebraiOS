//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoAngleConic.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/euclidian/draw/DrawAngle.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoAngle.h"
#include "org/geogebra/common/kernel/algos/AlgoAngleConic.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoAngleConic () {
 @public
  OrgGeogebraCommonKernelGeosGeoConic *c_;
  OrgGeogebraCommonKernelGeosGeoAngle *angle_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoAngleConic, c_, OrgGeogebraCommonKernelGeosGeoConic *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoAngleConic, angle_, OrgGeogebraCommonKernelGeosGeoAngle *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoAngleConic_compute(OrgGeogebraCommonKernelAlgosAlgoAngleConic *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoAngleConic

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c {
  OrgGeogebraCommonKernelAlgosAlgoAngleConic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoConic_(self, cons, label, c);
  return self;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, c_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:angle_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)getAngle {
  return angle_;
}

- (OrgGeogebraCommonKernelGeosGeoConic *)getConic {
  return c_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoAngleConic_compute(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleOfA" withNSString:[((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(c_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (jboolean)updateDrawInfoWithDoubleArray:(IOSDoubleArray *)m
                          withDoubleArray:(IOSDoubleArray *)firstVec
withOrgGeogebraCommonEuclidianDrawDrawAngle:(OrgGeogebraCommonEuclidianDrawDrawAngle *)drawable {
  *IOSDoubleArray_GetRef(nil_chk(m), 0) = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(c_))->b_)) getX];
  *IOSDoubleArray_GetRef(m, 1) = [c_->b_ getY];
  *IOSDoubleArray_GetRef(nil_chk(firstVec), 0) = 1;
  *IOSDoubleArray_GetRef(firstVec, 1) = 0;
  return YES;
}

- (jboolean)getCoordsInD3WithOrgGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)drawCoords {
  IOSObjectArray_Set(nil_chk(drawCoords), 0, [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(c_)) getMidpoint3D]);
  IOSObjectArray_Set(drawCoords, 1, OrgGeogebraCommonKernelMatrixCoords_get_VX_());
  IOSObjectArray_Set(drawCoords, 2, [c_ getEigenvec3DWithInt:0]);
  return YES;
}

- (void)dealloc {
  RELEASE_(c_);
  RELEASE_(angle_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoConic:", "AlgoAngleConic", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getAngle", NULL, "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "getConic", NULL, "Lorg.geogebra.common.kernel.geos.GeoConic;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "updateDrawInfoWithDoubleArray:withDoubleArray:withOrgGeogebraCommonEuclidianDrawDrawAngle:", "updateDrawInfo", "Z", 0x1, NULL, NULL },
    { "getCoordsInD3WithOrgGeogebraCommonKernelMatrixCoordsArray:", "getCoordsInD3", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "c_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
    { "angle_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoAngle;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoAngleConic = { 2, "AlgoAngleConic", "org.geogebra.common.kernel.algos", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoAngleConic;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoAngleConic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelAlgosAlgoAngleConic *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoConic *c) {
  OrgGeogebraCommonKernelAlgosAlgoAngle_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoAngleConic_set_c_(self, c);
  OrgGeogebraCommonKernelAlgosAlgoAngleConic_setAndConsume_angle_(self, new_OrgGeogebraCommonKernelGeosGeoAngle_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoAngleConic_compute(self);
  [self->angle_ setDrawableWithBoolean:YES];
  [self->angle_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoAngleConic *new_OrgGeogebraCommonKernelAlgosAlgoAngleConic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoConic *c) {
  OrgGeogebraCommonKernelAlgosAlgoAngleConic *self = [OrgGeogebraCommonKernelAlgosAlgoAngleConic alloc];
  OrgGeogebraCommonKernelAlgosAlgoAngleConic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoConic_(self, cons, label, c);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoAngleConic_compute(OrgGeogebraCommonKernelAlgosAlgoAngleConic *self) {
  [((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) setValueWithDouble:JavaLangMath_atan2WithDouble_withDouble_([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->c_))->eigenvec_), 0))) getY], [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(self->c_->eigenvec_, 0))) getX])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoAngleConic)
