//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoRootsPolynomial.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/EquationSolver.h"
#include "org/geogebra/common/kernel/EquationSolverInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersect.h"
#include "org/geogebra/common/kernel/algos/AlgoRootsPolynomial.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "org/geogebra/common/kernel/roots/RealRootFunction.h"
#include "org/geogebra/common/main/Localization.h"

#define OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_ROOTS 0
#define OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_INTERSECT_POLYNOMIALS 1
#define OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_INTERSECT_POLY_LINE 2
#define OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_MULTIPLE_ROOTS 3
#define OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_DELTA 1.0E-4

@interface OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial () {
 @public
  jint mode_;
  OrgGeogebraCommonKernelGeosGeoLine *line_;
  IOSObjectArray *labels_;
  jboolean initLabels_;
  OrgGeogebraCommonKernelArithmeticFunction *diffFunction_;
  OrgGeogebraCommonKernelGeosGeoPoint *tempPoint_;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
                                                withBoolean:(jboolean)setLabels
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)g
                     withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l;

- (void)computePolynomialIntersection;

- (void)computePolyLineIntersection;

- (void)ensureSignChangedWithOrgGeogebraCommonKernelRootsRealRootFunction:(id<OrgGeogebraCommonKernelRootsRealRootFunction>)f;

- (void)addToCurrentRootsWithDoubleArray:(IOSDoubleArray *)roots
                                 withInt:(jint)number;

- (void)removeRootWithInt:(jint)pos;

- (void)removeRootPointWithInt:(jint)pos;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial, line_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial, labels_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial, diffFunction_, OrgGeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial, tempPoint_, OrgGeogebraCommonKernelGeosGeoPoint *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial, ROOTS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial, INTERSECT_POLYNOMIALS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial, INTERSECT_POLY_LINE, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial, MULTIPLE_ROOTS, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial, DELTA, jdouble)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, jboolean setLabels, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoFunction *g, OrgGeogebraCommonKernelGeosGeoLine *l);

__attribute__((unused)) static OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *new_OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, jboolean setLabels, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoFunction *g, OrgGeogebraCommonKernelGeosGeoLine *l) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_computePolynomialIntersection(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_computePolyLineIntersection(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_calcRootsWithOrgGeogebraCommonKernelArithmeticFunction_withInt_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, OrgGeogebraCommonKernelArithmeticFunction *fun, jint derivDegree);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_ensureSignChangedWithOrgGeogebraCommonKernelRootsRealRootFunction_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, id<OrgGeogebraCommonKernelRootsRealRootFunction> f);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_addToCurrentRootsWithDoubleArray_withInt_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, IOSDoubleArray *roots, jint number);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_removeRootWithInt_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, jint pos);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_setRootPointsWithDoubleArray_withInt_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, IOSDoubleArray *roots, jint number);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_removeRootPointWithInt_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, jint pos);

@implementation OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, labels, f);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)g {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, f, g);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                     withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_(self, cons, f, l);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
                                                withBoolean:(jboolean)setLabels
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)g
                     withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_(self, cons, labels, setLabels, f, g, l);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelGeosGeoFunction_(self, f);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, f);
  return self;
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_labels_(self, labels);
  setLabels__ = ![((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  if (labels != nil) [self initRootPointsWithInt:labels->size_];
  [self update];
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Root();
}

- (void)setInputOutput {
  switch (mode_) {
    case OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_MULTIPLE_ROOTS:
    case OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_ROOTS:
    OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, f_);
    break;
    case OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_INTERSECT_POLYNOMIALS:
    OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, f_);
    IOSObjectArray_Set(input_, 1, g_);
    break;
    case OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_INTERSECT_POLY_LINE:
    OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, f_);
    IOSObjectArray_Set(input_, 1, line_);
    break;
  }
  [super setOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:rootPoints_];
  [self noUndefinedPointsInAlgebraView];
  [self setDependencies];
}

- (IOSObjectArray *)getRootPoints {
  return rootPoints_;
}

- (IOSObjectArray *)getIntersectionPoints {
  return rootPoints_;
}

- (IOSObjectArray *)getLastDefinedIntersectionPoints {
  return nil;
}

- (void)compute {
  switch (mode_) {
    case OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_ROOTS:
    [self computeRoots];
    break;
    case OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_MULTIPLE_ROOTS:
    if ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) isDefined]) {
      OrgGeogebraCommonKernelArithmeticFunction *fun = [f_ getFunction];
      [self calcRootsMultipleWithOrgGeogebraCommonKernelArithmeticFunction:fun withInt:0];
    }
    else {
      curRealRoots_ = 0;
    }
    break;
    case OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_INTERSECT_POLYNOMIALS:
    OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_computePolynomialIntersection(self);
    break;
    case OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_INTERSECT_POLY_LINE:
    OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_computePolyLineIntersection(self);
    break;
  }
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_setRootPointsWithDoubleArray_withInt_(self, curRoots_, curRealRoots_);
}

- (void)computeRoots {
  if ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) isDefined]) {
    OrgGeogebraCommonKernelArithmeticFunction *fun = [f_ getFunction];
    OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_calcRootsWithOrgGeogebraCommonKernelArithmeticFunction_withInt_(self, fun, 0);
  }
  else {
    curRealRoots_ = 0;
  }
}

- (void)computePolynomialIntersection {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_computePolynomialIntersection(self);
}

- (void)computePolyLineIntersection {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_computePolyLineIntersection(self);
}

- (void)calcRootsWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)fun
                                                       withInt:(jint)derivDegree {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_calcRootsWithOrgGeogebraCommonKernelArithmeticFunction_withInt_(self, fun, derivDegree);
}

- (id<OrgGeogebraCommonKernelRootsRealRootFunction>)calcRootsMultipleWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)fun
                                                                                                           withInt:(jint)derivDegree {
  JavaUtilLinkedList *factorList;
  OrgGeogebraCommonKernelArithmeticPolyFunction *derivPoly = nil;
  id<OrgGeogebraCommonKernelRootsRealRootFunction> evalFunction = nil;
  if (derivDegree > 0) {
    factorList = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) getSymbolicPolynomialDerivativeFactorsWithInt:derivDegree withBoolean:YES];
    if (factorList == nil) {
      derivPoly = [fun getNumericPolynomialDerivativeWithInt:derivDegree withBoolean:NO];
      evalFunction = derivPoly;
    }
    else {
      evalFunction = [fun getDerivativeWithInt:derivDegree withBoolean:YES];
    }
  }
  else {
    factorList = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) getPolynomialFactorsWithBoolean:NO];
  }
  IOSDoubleArray *roots;
  jint realRoots;
  curRealRoots_ = 0;
  if (factorList != nil) {
    id<JavaUtilIterator> it = [factorList iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonKernelArithmeticPolyFunction *polyFun = [it next];
      if (![((OrgGeogebraCommonKernelArithmeticPolyFunction *) nil_chk(polyFun)) updateCoeffValues]) {
        curRealRoots_ = 0;
        return nil;
      }
      roots = [polyFun getCoeffsCopy];
      realRoots = [((id<OrgGeogebraCommonKernelEquationSolverInterface>) nil_chk(eqnSolver_)) polynomialRootsWithDoubleArray:roots withBoolean:YES];
      OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_addToCurrentRootsWithDoubleArray_withInt_(self, roots, realRoots);
    }
  }
  else if (derivPoly != nil) {
    roots = [derivPoly getCoeffsCopy];
    realRoots = [((id<OrgGeogebraCommonKernelEquationSolverInterface>) nil_chk(eqnSolver_)) polynomialRootsWithDoubleArray:roots withBoolean:NO];
    OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_addToCurrentRootsWithDoubleArray_withInt_(self, roots, realRoots);
  }
  else return nil;
  if (curRealRoots_ > 1) JavaUtilArrays_sortWithDoubleArray_withInt_withInt_(curRoots_, 0, curRealRoots_);
  return evalFunction;
}

- (void)ensureSignChangedWithOrgGeogebraCommonKernelRootsRealRootFunction:(id<OrgGeogebraCommonKernelRootsRealRootFunction>)f {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_ensureSignChangedWithOrgGeogebraCommonKernelRootsRealRootFunction_(self, f);
}

- (void)addToCurrentRootsWithDoubleArray:(IOSDoubleArray *)roots
                                 withInt:(jint)number {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_addToCurrentRootsWithDoubleArray_withInt_(self, roots, number);
}

- (void)removeRootWithInt:(jint)pos {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_removeRootWithInt_(self, pos);
}

- (void)setRootPointsWithDoubleArray:(IOSDoubleArray *)roots
                             withInt:(jint)number {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_setRootPointsWithDoubleArray_withInt_(self, roots, number);
}

- (void)updateLabelsWithInt:(jint)number {
  if (initLabels_) {
    OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(labels_, rootPoints_);
    initLabels_ = NO;
  }
  else {
    for (jint i = 0; i < number; i++) {
      if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(rootPoints_), i))) isLabelSet]) {
        NSString *newLabel = (labels_ != nil && i < labels_->size_) ? IOSObjectArray_Get(labels_, i) : nil;
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(rootPoints_, i))) setLabelWithNSString:newLabel];
      }
    }
  }
  for (jint i = number; i < ((IOSObjectArray *) nil_chk(rootPoints_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(rootPoints_, i))) setUndefined];
  }
}

- (void)removeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)output {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(rootPoints_))->size_; i++) {
    if (IOSObjectArray_Get(rootPoints_, i) == output && ![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(rootPoints_, i))) isDefined]) {
      OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_removeRootPointWithInt_(self, i);
      return;
    }
  }
  [super remove];
}

- (void)initRootPointsWithInt:(jint)number {
  if (((IOSObjectArray *) nil_chk(rootPoints_))->size_ < number) {
    IOSObjectArray *temp = [IOSObjectArray arrayWithLength:number type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
    for (jint i = 0; i < rootPoints_->size_; i++) {
      IOSObjectArray_Set(temp, i, IOSObjectArray_Get(rootPoints_, i));
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(temp, i))) setCoordsWithDouble:0 withDouble:0 withDouble:1];
    }
    for (jint i = rootPoints_->size_; i < temp->size_; i++) {
      IOSObjectArray_SetAndConsume(temp, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_));
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(temp, i))) setCoordsWithDouble:0 withDouble:0 withDouble:1];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(temp, i))) setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
    }
    OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_rootPoints_(self, temp);
    [super setOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:rootPoints_];
  }
}

- (void)removeRootPointWithInt:(jint)pos {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_removeRootPointWithInt_(self, pos);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"RootOfA" withNSString:[((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(f_);
  RELEASE_(g_);
  RELEASE_(line_);
  RELEASE_(rootPoints_);
  RELEASE_(labels_);
  RELEASE_(eqnSolver_);
  RELEASE_(curRoots_);
  RELEASE_(yValFunction_);
  RELEASE_(diffFunction_);
  RELEASE_(tempPoint_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelGeosGeoFunction:", "AlgoRootsPolynomial", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:", "AlgoRootsPolynomial", NULL, 0x0, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoLine:", "AlgoRootsPolynomial", NULL, 0x0, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withBoolean:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoLine:", "AlgoRootsPolynomial", NULL, 0x2, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoFunction:", "AlgoRootsPolynomial", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoFunction:", "AlgoRootsPolynomial", NULL, 0x1, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getRootPoints", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getIntersectionPoints", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getLastDefinedIntersectionPoints", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "computeRoots", NULL, "V", 0x4, NULL, NULL },
    { "computePolynomialIntersection", NULL, "V", 0x2, NULL, NULL },
    { "computePolyLineIntersection", NULL, "V", 0x2, NULL, NULL },
    { "calcRootsWithOrgGeogebraCommonKernelArithmeticFunction:withInt:", "calcRoots", "V", 0x11, NULL, NULL },
    { "calcRootsMultipleWithOrgGeogebraCommonKernelArithmeticFunction:withInt:", "calcRootsMultiple", "Lorg.geogebra.common.kernel.roots.RealRootFunction;", 0x1, NULL, NULL },
    { "ensureSignChangedWithOrgGeogebraCommonKernelRootsRealRootFunction:", "ensureSignChanged", "V", 0x2, NULL, NULL },
    { "addToCurrentRootsWithDoubleArray:withInt:", "addToCurrentRoots", "V", 0x2, NULL, NULL },
    { "removeRootWithInt:", "removeRoot", "V", 0x12, NULL, NULL },
    { "setRootPointsWithDoubleArray:withInt:", "setRootPoints", "V", 0x14, NULL, NULL },
    { "updateLabelsWithInt:", "updateLabels", "V", 0x4, NULL, NULL },
    { "removeWithOrgGeogebraCommonKernelGeosGeoElement:", "remove", "V", 0x1, NULL, NULL },
    { "initRootPointsWithInt:", "initRootPoints", "V", 0x4, NULL, NULL },
    { "removeRootPointWithInt:", "removeRootPoint", "V", 0x2, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ROOTS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_ROOTS },
    { "INTERSECT_POLYNOMIALS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_INTERSECT_POLYNOMIALS },
    { "INTERSECT_POLY_LINE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_INTERSECT_POLY_LINE },
    { "MULTIPLE_ROOTS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_MULTIPLE_ROOTS },
    { "mode_", NULL, 0x2, "I", NULL, NULL,  },
    { "f_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "g_", NULL, 0x0, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "rootPoints_", NULL, 0x4, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "labels_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "initLabels_", NULL, 0x2, "Z", NULL, NULL,  },
    { "setLabels__", "setLabels", 0x4, "Z", NULL, NULL,  },
    { "eqnSolver_", NULL, 0x4, "Lorg.geogebra.common.kernel.EquationSolverInterface;", NULL, NULL,  },
    { "curRoots_", NULL, 0x4, "[D", NULL, NULL,  },
    { "curRealRoots_", NULL, 0x4, "I", NULL, NULL,  },
    { "yValFunction_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "diffFunction_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "tempPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "DELTA_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_DELTA },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial = { 2, "AlgoRootsPolynomial", "org.geogebra.common.kernel.algos", NULL, 0x1, 27, methods, 19, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoFunction *f) {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_(self, cons, labels, ![((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive], f, nil, nil);
}

OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *new_OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoFunction *f) {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self = [OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial alloc];
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, labels, f);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoFunction *g) {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_(self, cons, nil, NO, f, g, nil);
}

OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *new_OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoFunction *g) {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self = [OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial alloc];
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, f, g);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoLine *l) {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_(self, cons, nil, NO, f, nil, l);
}

OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *new_OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoLine *l) {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self = [OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial alloc];
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_(self, cons, f, l);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, jboolean setLabels, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoFunction *g, OrgGeogebraCommonKernelGeosGeoLine *l) {
  OrgGeogebraCommonKernelAlgosAlgoIntersect_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_setAndConsume_curRoots_(self, [IOSDoubleArray newArrayWithLength:30]);
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_f_(self, f);
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_g_(self, g);
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_line_(self, l);
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_setAndConsume_tempPoint_(self, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
  if (g != nil) self->mode_ = OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_INTERSECT_POLYNOMIALS;
  else if (l != nil) {
    self->mode_ = OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_INTERSECT_POLY_LINE;
  }
  else self->mode_ = OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_ROOTS;
  if (self->mode_ != OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_ROOTS) {
    OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_setAndConsume_diffFunction_(self, new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelKernel_(self->kernel_));
  }
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_labels_(self, labels);
  self->setLabels__ = setLabels;
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_eqnSolver_(self, [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel])) getEquationSolver]);
  jint number = labels == nil ? 1 : JavaLangMath_maxWithInt_withInt_(1, labels->size_);
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_setAndConsume_rootPoints_(self, [IOSObjectArray newArrayWithLength:0 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()]);
  [self initRootPointsWithInt:number];
  self->initLabels_ = YES;
  [self setInputOutput];
  [self compute];
  if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->rootPoints_, 0))) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->rootPoints_, 0))) setCoordsWithDouble:0 withDouble:0 withDouble:1];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->rootPoints_, 0))) update];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->rootPoints_, 0))) setUndefined];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->rootPoints_, 0))) update];
  }
}

OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *new_OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, jboolean setLabels, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoFunction *g, OrgGeogebraCommonKernelGeosGeoLine *l) {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self = [OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial alloc];
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoLine_(self, cons, labels, setLabels, f, g, l);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, OrgGeogebraCommonKernelGeosGeoFunction *f) {
  OrgGeogebraCommonKernelAlgosAlgoIntersect_initWithOrgGeogebraCommonKernelConstruction_(self, ((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f))->cons_);
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_setAndConsume_curRoots_(self, [IOSDoubleArray newArrayWithLength:30]);
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_f_(self, f);
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_setAndConsume_tempPoint_(self, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  self->mode_ = OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_MULTIPLE_ROOTS;
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_eqnSolver_(self, [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel])) getEquationSolver]);
  jint number = self->labels_ == nil ? 1 : JavaLangMath_maxWithInt_withInt_(1, self->labels_->size_);
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_setAndConsume_rootPoints_(self, [IOSObjectArray newArrayWithLength:0 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()]);
  [self initRootPointsWithInt:number];
  self->initLabels_ = YES;
  [self setInputOutput];
  [self compute];
  if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->rootPoints_, 0))) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->rootPoints_, 0))) setCoordsWithDouble:0 withDouble:0 withDouble:1];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->rootPoints_, 0))) update];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->rootPoints_, 0))) setUndefined];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->rootPoints_, 0))) update];
  }
}

OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *new_OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction *f) {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self = [OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial alloc];
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelGeosGeoFunction_(self, f);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoFunction *f) {
  OrgGeogebraCommonKernelAlgosAlgoIntersect_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_setAndConsume_curRoots_(self, [IOSDoubleArray newArrayWithLength:30]);
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_f_(self, f);
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_setAndConsume_tempPoint_(self, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
  self->mode_ = OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_ROOTS;
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_eqnSolver_(self, [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel])) getEquationSolver]);
  jint number = 1;
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_setAndConsume_rootPoints_(self, [IOSObjectArray newArrayWithLength:0 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()]);
  [self initRootPointsWithInt:number];
  self->initLabels_ = YES;
  [self setInputOutput];
  [self compute];
}

OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *new_OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoFunction *f) {
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self = [OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial alloc];
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, f);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_computePolynomialIntersection(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self) {
  if ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) isDefined] && [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) isDefined]) {
    OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_yValFunction_(self, [self->f_ getFunction]);
    OrgGeogebraCommonKernelArithmeticFunction_differenceWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_([self->f_ getFunction], [self->g_ getFunction], self->diffFunction_);
    OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_calcRootsWithOrgGeogebraCommonKernelArithmeticFunction_withInt_(self, self->diffFunction_, 0);
    for (jint i = 0; i < self->curRealRoots_; i++) {
      if (!OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([self->f_ evaluateWithDouble:IOSDoubleArray_Get(nil_chk(self->curRoots_), i)], [self->g_ evaluateWithDouble:IOSDoubleArray_Get(self->curRoots_, i)], OrgGeogebraCommonKernelKernel_MIN_PRECISION)) {
        OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_removeRootWithInt_(self, i);
        i--;
      }
    }
  }
  else {
    self->curRealRoots_ = 0;
  }
}

void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_computePolyLineIntersection(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self) {
  if ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) isDefined] && [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->line_)) isDefined]) {
    OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_yValFunction_(self, [self->f_ getFunction]);
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(self->line_->y_)) {
      jdouble x = -self->line_->z_ / self->line_->x_;
      *IOSDoubleArray_GetRef(nil_chk(self->curRoots_), 0) = x;
      self->curRealRoots_ = 1;
    }
    else {
      OrgGeogebraCommonKernelArithmeticFunction_differenceWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelArithmeticFunction_([self->f_ getFunction], self->line_, self->diffFunction_);
      OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_calcRootsWithOrgGeogebraCommonKernelArithmeticFunction_withInt_(self, self->diffFunction_, 0);
    }
    for (jint i = 0; i < self->curRealRoots_; i++) {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->tempPoint_)) setCoordsWithDouble:IOSDoubleArray_Get(nil_chk(self->curRoots_), i) withDouble:[self->f_ evaluateWithDouble:IOSDoubleArray_Get(self->curRoots_, i)] withDouble:1.0];
      if (![self->line_ isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:self->tempPoint_ withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION]) {
        OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_removeRootWithInt_(self, i);
        i--;
      }
    }
  }
  else {
    self->curRealRoots_ = 0;
  }
}

void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_calcRootsWithOrgGeogebraCommonKernelArithmeticFunction_withInt_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, OrgGeogebraCommonKernelArithmeticFunction *fun, jint derivDegree) {
  id<OrgGeogebraCommonKernelRootsRealRootFunction> evalFunction = [self calcRootsMultipleWithOrgGeogebraCommonKernelArithmeticFunction:fun withInt:derivDegree];
  if (self->curRealRoots_ > 1) {
    JavaUtilArrays_sortWithDoubleArray_withInt_withInt_(self->curRoots_, 0, self->curRealRoots_);
    jdouble maxRoot = IOSDoubleArray_Get(nil_chk(self->curRoots_), 0);
    jint maxIndex = 0;
    for (jint i = 1; i < self->curRealRoots_; i++) {
      if ((IOSDoubleArray_Get(self->curRoots_, i) - maxRoot) > OrgGeogebraCommonKernelKernel_MIN_PRECISION) {
        maxRoot = IOSDoubleArray_Get(self->curRoots_, i);
        maxIndex++;
        *IOSDoubleArray_GetRef(self->curRoots_, maxIndex) = maxRoot;
      }
    }
    self->curRealRoots_ = maxIndex + 1;
  }
  if (derivDegree > 0) {
    OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_ensureSignChangedWithOrgGeogebraCommonKernelRootsRealRootFunction_(self, evalFunction);
  }
}

void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_ensureSignChangedWithOrgGeogebraCommonKernelRootsRealRootFunction_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, id<OrgGeogebraCommonKernelRootsRealRootFunction> f) {
  jdouble left, right, leftEval, rightEval;
  jboolean signUnChanged;
  for (jint i = 0; i < self->curRealRoots_; i++) {
    left = IOSDoubleArray_Get(nil_chk(self->curRoots_), i) - OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_DELTA;
    right = IOSDoubleArray_Get(self->curRoots_, i) + OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_DELTA;
    jint count = 0;
    while (JavaLangMath_absWithDouble_(leftEval = [((id<OrgGeogebraCommonKernelRootsRealRootFunction>) nil_chk(f)) evaluateWithDouble:left]) < OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_DELTA && count++ < 100) left = left - OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_DELTA;
    count = 0;
    while (JavaLangMath_absWithDouble_(rightEval = [f evaluateWithDouble:right]) < OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_DELTA && count++ < 100) right = right + OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_DELTA;
    signUnChanged = (leftEval * rightEval > 0);
    if (signUnChanged) {
      OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_removeRootWithInt_(self, i);
      i--;
    }
  }
}

void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_addToCurrentRootsWithDoubleArray_withInt_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, IOSDoubleArray *roots, jint number) {
  jint length = self->curRealRoots_ + number;
  if (length >= ((IOSDoubleArray *) nil_chk(self->curRoots_))->size_) {
    IOSDoubleArray *temp = [IOSDoubleArray arrayWithLength:2 * length];
    for (jint i = 0; i < self->curRealRoots_; i++) {
      *IOSDoubleArray_GetRef(temp, i) = IOSDoubleArray_Get(self->curRoots_, i);
    }
    OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_curRoots_(self, temp);
  }
  for (jint i = 0; i < number; i++) {
    *IOSDoubleArray_GetRef(self->curRoots_, self->curRealRoots_ + i) = IOSDoubleArray_Get(nil_chk(roots), i);
  }
  self->curRealRoots_ += number;
}

void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_removeRootWithInt_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, jint pos) {
  for (jint i = pos + 1; i < self->curRealRoots_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(self->curRoots_), i - 1) = IOSDoubleArray_Get(self->curRoots_, i);
  }
  self->curRealRoots_--;
}

void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_setRootPointsWithDoubleArray_withInt_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, IOSDoubleArray *roots, jint number) {
  [self initRootPointsWithInt:number];
  for (jint i = 0; i < number; i++) {
    if (self->yValFunction_ == nil) {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->rootPoints_), i))) setCoordsWithDouble:IOSDoubleArray_Get(nil_chk(roots), i) withDouble:0.0 withDouble:1.0];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->rootPoints_), i))) setCoordsWithDouble:IOSDoubleArray_Get(nil_chk(roots), i) withDouble:[self->yValFunction_ evaluateWithDouble:IOSDoubleArray_Get(roots, i)] withDouble:1.0];
    }
  }
  for (jint i = number; i < ((IOSObjectArray *) nil_chk(self->rootPoints_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->rootPoints_, i))) setUndefined];
  }
  if (self->setLabels__) [self updateLabelsWithInt:number];
}

void OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_removeRootPointWithInt_(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *self, jint pos) {
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->rootPoints_), pos))) doRemove];
  IOSObjectArray *temp = [IOSObjectArray arrayWithLength:self->rootPoints_->size_ - 1 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
  jint i;
  for (i = 0; i < pos; i++) IOSObjectArray_Set(temp, i, IOSObjectArray_Get(self->rootPoints_, i));
  for (i = pos + 1; i < self->rootPoints_->size_; i++) IOSObjectArray_Set(temp, i - 1, IOSObjectArray_Get(self->rootPoints_, i));
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_set_rootPoints_(self, temp);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial)
