//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoDensityPlot.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/text/DecimalFormat.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GFontRenderContext.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/awt/font/GTextLayout.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoDensityPlot.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/GetCommand.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoCanvasImage.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelAlgosAlgoDensityPlot () {
 @public
  OrgGeogebraCommonKernelGeosGeoCanvasImage *outputImage_;
  OrgGeogebraCommonKernelGeosGeoFunctionNVar *function_;
  jdouble minX_;
  jdouble maxX_;
  jdouble minY_;
  jdouble maxY_;
  jint offset_;
  jint imageSize_;
  jint gridPixel_;
  IOSIntArray *colors_;
  jint i_;
  jint j_;
  OrgGeogebraCommonAwtGColor *color_;
  jdouble incX_;
  jdouble incY_;
  IOSDoubleArray *vals_;
  id<OrgGeogebraCommonAwtGGraphics2D> g_;
  OrgGeogebraCommonKernelArithmeticFunctionNVar *f_;
  JavaTextDecimalFormat *df_;
  id<OrgGeogebraCommonAwtFontGTextLayout> t_;
  OrgGeogebraCommonAwtGFont *font_;
  jdouble scaleX_;
  jdouble scaleY_;
  jint grade_;
  id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon> view_;
  jboolean fixed_;
  jint imagePlusOffset_;
  jdouble value_;
  jboolean prevGrid_;
}

- (void)drawGrid;

- (void)drawAxes;

- (void)deleteAxes;

- (void)showGrid;

+ (jint)colWithDouble:(jdouble)x1;

+ (IOSIntArray *)hlsToRgbWithDouble:(jdouble)h
                         withDouble:(jdouble)l
                         withDouble:(jdouble)s;

+ (IOSIntArray *)rgbColorWithDouble:(jdouble)zre;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDensityPlot, outputImage_, OrgGeogebraCommonKernelGeosGeoCanvasImage *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDensityPlot, function_, OrgGeogebraCommonKernelGeosGeoFunctionNVar *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDensityPlot, colors_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDensityPlot, color_, OrgGeogebraCommonAwtGColor *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDensityPlot, vals_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDensityPlot, g_, id<OrgGeogebraCommonAwtGGraphics2D>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDensityPlot, f_, OrgGeogebraCommonKernelArithmeticFunctionNVar *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDensityPlot, df_, JavaTextDecimalFormat *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDensityPlot, t_, id<OrgGeogebraCommonAwtFontGTextLayout>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDensityPlot, font_, OrgGeogebraCommonAwtGFont *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDensityPlot, view_, id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoDensityPlot_drawGrid(OrgGeogebraCommonKernelAlgosAlgoDensityPlot *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoDensityPlot_drawAxes(OrgGeogebraCommonKernelAlgosAlgoDensityPlot *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoDensityPlot_deleteAxes(OrgGeogebraCommonKernelAlgosAlgoDensityPlot *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoDensityPlot_showGrid(OrgGeogebraCommonKernelAlgosAlgoDensityPlot *self);

__attribute__((unused)) static jint OrgGeogebraCommonKernelAlgosAlgoDensityPlot_colWithDouble_(jdouble x1);

__attribute__((unused)) static IOSIntArray *OrgGeogebraCommonKernelAlgosAlgoDensityPlot_hlsToRgbWithDouble_withDouble_withDouble_(jdouble h, jdouble l, jdouble s);

__attribute__((unused)) static IOSIntArray *OrgGeogebraCommonKernelAlgosAlgoDensityPlot_rgbColorWithDouble_(jdouble zre);

@implementation OrgGeogebraCommonKernelAlgosAlgoDensityPlot

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
             withOrgGeogebraCommonKernelGeosGeoFunctionNVar:(OrgGeogebraCommonKernelGeosGeoFunctionNVar *)function {
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_(self, c, function);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
             withOrgGeogebraCommonKernelGeosGeoFunctionNVar:(OrgGeogebraCommonKernelGeosGeoFunctionNVar *)geoFunctionNVar
                                                 withDouble:(jdouble)lowX
                                                 withDouble:(jdouble)highX
                                                 withDouble:(jdouble)lowY
                                                 withDouble:(jdouble)highY
                                                withBoolean:(jboolean)fixed {
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_withBoolean_(self, cons, geoFunctionNVar, lowX, highX, lowY, highY, fixed);
  return self;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:6 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, function_);
  IOSObjectArray_SetAndConsume(input_, 1, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, minX_));
  IOSObjectArray_SetAndConsume(input_, 2, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, maxX_));
  IOSObjectArray_SetAndConsume(input_, 3, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, minY_));
  IOSObjectArray_SetAndConsume(input_, 4, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, maxY_));
  IOSObjectArray_SetAndConsume(input_, 5, new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(cons_, fixed_));
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:outputImage_];
  [self setDependencies];
}

- (void)compute {
  incX_ = scaleX_ / imageSize_ * grade_;
  incY_ = scaleY_ / imageSize_ * grade_;
  for (j_ = offset_, *IOSDoubleArray_GetRef(nil_chk(vals_), 1) = maxY_; j_ < imagePlusOffset_; *IOSDoubleArray_GetRef(vals_, 1) -= incY_, j_ += grade_) {
    for (i_ = offset_, *IOSDoubleArray_GetRef(vals_, 0) = minX_; i_ < imagePlusOffset_; *IOSDoubleArray_GetRef(vals_, 0) += incX_, i_ += grade_) {
      value_ = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(f_)) evaluateWithDoubleArray:vals_];
      OrgGeogebraCommonKernelAlgosAlgoDensityPlot_set_colors_(self, OrgGeogebraCommonKernelAlgosAlgoDensityPlot_rgbColorWithDouble_(value_));
      OrgGeogebraCommonKernelAlgosAlgoDensityPlot_set_color_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:IOSIntArray_Get(nil_chk(colors_), 0) withInt:IOSIntArray_Get(colors_, 1) withInt:IOSIntArray_Get(colors_, 1)]);
      [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g_)) setColorWithOrgGeogebraCommonAwtGColor:color_];
      [g_ fillRectWithInt:i_ withInt:j_ withInt:grade_ withInt:grade_];
    }
  }
}

- (void)drawGrid {
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_drawGrid(self);
}

- (void)drawAxes {
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_drawAxes(self);
}

- (OrgGeogebraCommonKernelGeosGeoCanvasImage *)getResult {
  return outputImage_;
}

- (id<OrgGeogebraCommonKernelAlgosGetCommand>)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_DensityPlot();
}

- (void)update {
  if (!fixed_) {
    if (minX_ != [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(view_)) getXmin] || minY_ != [view_ getYmin] || maxX_ != [view_ getXmax] || maxY_ != [view_ getYmax]) {
      minX_ = [view_ getXmin];
      minY_ = [view_ getYmin];
      maxX_ = [view_ getXmax];
      maxY_ = [view_ getYmax];
      scaleX_ = maxX_ - minX_;
      scaleY_ = maxY_ - minY_;
      [self compute];
      [self setInputOutput];
    }
  }
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_deleteAxes(self);
  if ([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(view_)) getShowAxisWithInt:OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_X] || [view_ getShowAxisWithInt:OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_Y]) {
    OrgGeogebraCommonKernelAlgosAlgoDensityPlot_drawAxes(self);
  }
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_showGrid(self);
}

- (void)deleteAxes {
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_deleteAxes(self);
}

- (void)showGrid {
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_showGrid(self);
}

+ (jint)colWithDouble:(jdouble)x1 {
  return OrgGeogebraCommonKernelAlgosAlgoDensityPlot_colWithDouble_(x1);
}

+ (IOSIntArray *)hlsToRgbWithDouble:(jdouble)h
                         withDouble:(jdouble)l
                         withDouble:(jdouble)s {
  return OrgGeogebraCommonKernelAlgosAlgoDensityPlot_hlsToRgbWithDouble_withDouble_withDouble_(h, l, s);
}

+ (IOSIntArray *)rgbColorWithDouble:(jdouble)zre {
  return OrgGeogebraCommonKernelAlgosAlgoDensityPlot_rgbColorWithDouble_(zre);
}

- (void)dealloc {
  RELEASE_(outputImage_);
  RELEASE_(function_);
  RELEASE_(colors_);
  RELEASE_(color_);
  RELEASE_(vals_);
  RELEASE_(g_);
  RELEASE_(f_);
  RELEASE_(df_);
  RELEASE_(t_);
  RELEASE_(font_);
  RELEASE_(view_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoFunctionNVar:", "AlgoDensityPlot", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoFunctionNVar:withDouble:withDouble:withDouble:withDouble:withBoolean:", "AlgoDensityPlot", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "drawGrid", NULL, "V", 0x2, NULL, NULL },
    { "drawAxes", NULL, "V", 0x2, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoCanvasImage;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.algos.GetCommand;", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "deleteAxes", NULL, "V", 0x2, NULL, NULL },
    { "showGrid", NULL, "V", 0x2, NULL, NULL },
    { "colWithDouble:", "col", "I", 0xa, NULL, NULL },
    { "hlsToRgbWithDouble:withDouble:withDouble:", "hlsToRgb", "[I", 0xa, NULL, NULL },
    { "rgbColorWithDouble:", "rgbColor", "[I", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "outputImage_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoCanvasImage;", NULL, NULL,  },
    { "function_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunctionNVar;", NULL, NULL,  },
    { "minX_", NULL, 0x2, "D", NULL, NULL,  },
    { "maxX_", NULL, 0x2, "D", NULL, NULL,  },
    { "minY_", NULL, 0x2, "D", NULL, NULL,  },
    { "maxY_", NULL, 0x2, "D", NULL, NULL,  },
    { "offset_", NULL, 0x2, "I", NULL, NULL,  },
    { "imageSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "gridPixel_", NULL, 0x2, "I", NULL, NULL,  },
    { "colors_", NULL, 0x2, "[I", NULL, NULL,  },
    { "i_", NULL, 0x2, "I", NULL, NULL,  },
    { "j_", NULL, 0x2, "I", NULL, NULL,  },
    { "color_", NULL, 0x2, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
    { "incX_", NULL, 0x2, "D", NULL, NULL,  },
    { "incY_", NULL, 0x2, "D", NULL, NULL,  },
    { "vals_", NULL, 0x2, "[D", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lorg.geogebra.common.awt.GGraphics2D;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", NULL, NULL,  },
    { "df_", NULL, 0x2, "Ljava.text.DecimalFormat;", NULL, NULL,  },
    { "t_", NULL, 0x2, "Lorg.geogebra.common.awt.font.GTextLayout;", NULL, NULL,  },
    { "font_", NULL, 0x2, "Lorg.geogebra.common.awt.GFont;", NULL, NULL,  },
    { "scaleX_", NULL, 0x2, "D", NULL, NULL,  },
    { "scaleY_", NULL, 0x2, "D", NULL, NULL,  },
    { "grade_", NULL, 0x2, "I", NULL, NULL,  },
    { "view_", NULL, 0x2, "Lorg.geogebra.common.euclidian.EuclidianViewInterfaceCommon;", NULL, NULL,  },
    { "fixed_", NULL, 0x2, "Z", NULL, NULL,  },
    { "imagePlusOffset_", NULL, 0x2, "I", NULL, NULL,  },
    { "value_", NULL, 0x2, "D", NULL, NULL,  },
    { "prevGrid_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoDensityPlot = { 2, "AlgoDensityPlot", "org.geogebra.common.kernel.algos", NULL, 0x1, 14, methods, 29, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoDensityPlot;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_(OrgGeogebraCommonKernelAlgosAlgoDensityPlot *self, OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelGeosGeoFunctionNVar *function) {
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_withBoolean_(self, c, function, -2, 2, -2, 2, NO);
}

OrgGeogebraCommonKernelAlgosAlgoDensityPlot *new_OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_(OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelGeosGeoFunctionNVar *function) {
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot *self = [OrgGeogebraCommonKernelAlgosAlgoDensityPlot alloc];
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_(self, c, function);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoDensityPlot *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoFunctionNVar *geoFunctionNVar, jdouble lowX, jdouble highX, jdouble lowY, jdouble highY, jboolean fixed) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->offset_ = 30;
  self->imageSize_ = 280;
  self->gridPixel_ = 14;
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_setAndConsume_vals_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_set_font_(self, [((OrgGeogebraCommonAwtGFont *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getFontCanDisplayWithNSString:@"-999"])) deriveFontWithInt:OrgGeogebraCommonAwtGFont_PLAIN withInt:8]);
  self->grade_ = 1;
  if ([((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) isHTML5Applet]) {
    self->grade_ = 2;
    self->offset_ = 25;
  }
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_set_function_(self, geoFunctionNVar);
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_set_f_(self, [((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(self->function_)) getFunction]);
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_set_view_(self, [((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getActiveEuclidianView]);
  self->fixed_ = fixed;
  self->minX_ = -2;
  self->minY_ = -2;
  self->maxX_ = 2;
  self->maxY_ = 2;
  if (fixed) {
    self->minX_ = lowX;
    self->minY_ = lowY;
    self->maxX_ = highX;
    self->maxY_ = highY;
  }
  self->scaleX_ = self->maxX_ - self->minX_;
  self->scaleY_ = self->maxY_ - self->minY_;
  self->imageSize_ /= self->grade_;
  self->gridPixel_ /= self->grade_;
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_setAndConsume_outputImage_(self, new_OrgGeogebraCommonKernelGeosGeoCanvasImage_initWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(cons, self->imageSize_ + 2 * self->offset_, self->imageSize_ + 2 * self->offset_));
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_set_g_(self, [self->outputImage_ getGraphics]);
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(self->g_)) setFontWithOrgGeogebraCommonAwtGFont:self->font_];
  [self->g_ setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_WHITE_()];
  [self->g_ fillRectWithInt:0 withInt:0 withInt:self->imageSize_ + 2 * self->offset_ withInt:self->offset_];
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_setAndConsume_df_(self, new_JavaTextDecimalFormat_initWithNSString_(@"0.##"));
  self->imagePlusOffset_ = self->imageSize_ + self->offset_;
  [self->outputImage_ setAbsoluteScreenLocActiveWithBoolean:YES];
  [self->outputImage_ setAbsoluteScreenLocWithInt:[((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(self->view_)) getViewWidth] / 2 - (self->imageSize_ + 2 * self->offset_) / 2 withInt:[self->view_ getViewHeight] / 2 + (self->imageSize_ + 2 * self->offset_) / 2];
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_deleteAxes(self);
  if (fixed) {
    [self compute];
  }
  [self update];
}

OrgGeogebraCommonKernelAlgosAlgoDensityPlot *new_OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_withBoolean_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoFunctionNVar *geoFunctionNVar, jdouble lowX, jdouble highX, jdouble lowY, jdouble highY, jboolean fixed) {
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot *self = [OrgGeogebraCommonKernelAlgosAlgoDensityPlot alloc];
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_withBoolean_(self, cons, geoFunctionNVar, lowX, highX, lowY, highY, fixed);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoDensityPlot_drawGrid(OrgGeogebraCommonKernelAlgosAlgoDensityPlot *self) {
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(self->g_)) setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_LIGHT_GRAY_()];
  for (self->i_ = self->offset_; self->i_ <= self->imagePlusOffset_; self->i_ += self->gridPixel_ * 5) {
    [self->g_ drawLineWithInt:self->i_ withInt:self->offset_ withInt:self->i_ withInt:self->imagePlusOffset_];
  }
  for (self->i_ = self->offset_; self->i_ <= self->imagePlusOffset_; self->i_ += self->gridPixel_ * 5) {
    [self->g_ drawLineWithInt:self->offset_ withInt:self->i_ withInt:self->imagePlusOffset_ withInt:self->i_];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoDensityPlot_drawAxes(OrgGeogebraCommonKernelAlgosAlgoDensityPlot *self) {
  jdouble xx = self->minX_;
  jdouble yy = self->maxY_;
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(self->g_)) setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_GRAY_()];
  for (self->i_ = self->offset_; self->i_ <= self->imagePlusOffset_; self->i_ += self->gridPixel_ * 5) {
    [self->g_ drawLineWithInt:self->i_ withInt:self->imagePlusOffset_ withInt:self->i_ withInt:self->imagePlusOffset_ + 2];
    [self->g_ drawLineWithInt:self->offset_ - 2 withInt:self->i_ withInt:self->offset_ withInt:self->i_];
  }
  [self->g_ setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_BLACK_()];
  for (self->i_ = self->offset_; self->i_ <= self->imagePlusOffset_; self->i_ += self->gridPixel_ * 5) {
    OrgGeogebraCommonKernelAlgosAlgoDensityPlot_set_t_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newTextLayoutWithNSString:[((JavaTextDecimalFormat *) nil_chk(self->df_)) formatWithDouble:xx] withOrgGeogebraCommonAwtGFont:self->font_ withOrgGeogebraCommonAwtGFontRenderContext:[self->g_ getFontRenderContext]]);
    [self->g_ drawStringWithNSString:[self->df_ formatWithDouble:xx] withFloat:self->i_ - [((id<OrgGeogebraCommonAwtFontGTextLayout>) nil_chk(self->t_)) getAdvance] / 2 withFloat:self->imageSize_ + 2 * self->offset_ - self->offset_ / 3];
    [self->g_ drawStringWithNSString:[self->df_ formatWithDouble:yy] withInt:1 withInt:self->i_ + 4];
    yy -= self->incY_ * self->gridPixel_ * 5 / self->grade_;
    xx += self->incX_ * self->gridPixel_ * 5 / self->grade_;
  }
}

void OrgGeogebraCommonKernelAlgosAlgoDensityPlot_deleteAxes(OrgGeogebraCommonKernelAlgosAlgoDensityPlot *self) {
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(self->g_)) setColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_WHITE_()];
  [self->g_ fillRectWithInt:0 withInt:self->imagePlusOffset_ withInt:self->imagePlusOffset_ + 2 * self->offset_ withInt:self->offset_];
  [self->g_ fillRectWithInt:0 withInt:self->offset_ withInt:self->offset_ withInt:self->imagePlusOffset_];
  [self->g_ fillRectWithInt:0 withInt:0 withInt:self->imagePlusOffset_ + 2 * self->offset_ withInt:self->offset_];
  [self->g_ fillRectWithInt:self->imagePlusOffset_ withInt:self->offset_ withInt:self->offset_ withInt:self->imageSize_];
}

void OrgGeogebraCommonKernelAlgosAlgoDensityPlot_showGrid(OrgGeogebraCommonKernelAlgosAlgoDensityPlot *self) {
  if ([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(self->view_)) getShowGrid]) {
    OrgGeogebraCommonKernelAlgosAlgoDensityPlot_drawGrid(self);
    self->prevGrid_ = YES;
  }
  else {
    if ([self->view_ getShowGrid] != self->prevGrid_ && self->prevGrid_) {
      self->prevGrid_ = NO;
      [self compute];
    }
  }
}

jint OrgGeogebraCommonKernelAlgosAlgoDensityPlot_colWithDouble_(jdouble x1) {
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initialize();
  jint code;
  code = J2ObjCFpToInt((x1 * 256));
  if (code > 255) {
    return 255;
  }
  return (code);
}

IOSIntArray *OrgGeogebraCommonKernelAlgosAlgoDensityPlot_hlsToRgbWithDouble_withDouble_withDouble_(jdouble h, jdouble l, jdouble s) {
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initialize();
  IOSIntArray *rgb = [IOSIntArray arrayWithLength:2];
  jdouble m2;
  if (l < 0.5) {
    m2 = l * (1 + s);
  }
  else {
    m2 = l + s - l * s;
  }
  if (h == 180) {
    *IOSIntArray_GetRef(rgb, 1) = OrgGeogebraCommonKernelAlgosAlgoDensityPlot_colWithDouble_(m2);
    *IOSIntArray_GetRef(rgb, 0) = OrgGeogebraCommonKernelAlgosAlgoDensityPlot_colWithDouble_(2.0 * l - m2);
  }
  else {
    *IOSIntArray_GetRef(rgb, 1) = OrgGeogebraCommonKernelAlgosAlgoDensityPlot_colWithDouble_(2.0 * l - m2);
    *IOSIntArray_GetRef(rgb, 0) = OrgGeogebraCommonKernelAlgosAlgoDensityPlot_colWithDouble_(m2);
  }
  return rgb;
}

IOSIntArray *OrgGeogebraCommonKernelAlgosAlgoDensityPlot_rgbColorWithDouble_(jdouble zre) {
  OrgGeogebraCommonKernelAlgosAlgoDensityPlot_initialize();
  jdouble xx;
  xx = 1.0 - 2.0 * JavaLangMath_atanWithDouble_(JavaLangMath_sqrtWithDouble_(zre * zre)) / JavaLangMath_PI;
  jdouble x1 = xx <= 0.5 ? 2 * xx : 2 - 2 * xx;
  jdouble arg = zre < 0 ? 180 : 0;
  return OrgGeogebraCommonKernelAlgosAlgoDensityPlot_hlsToRgbWithDouble_withDouble_withDouble_(arg, xx, x1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoDensityPlot)
