//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoElement.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/gui/view/algebra/AlgebraView.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/View.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoListElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/DependentAlgo.h"
#include "org/geogebra/common/kernel/algos/EquationElementInterface.h"
#include "org/geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "org/geogebra/common/kernel/algos/GetCommand.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoScriptAction.h"
#include "org/geogebra/common/kernel/geos/ToGeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonKernelAlgosAlgoElement () {
 @public
  IOSObjectArray *output_;
  IOSObjectArray *efficientInput_;
  jboolean isPrintedInXML__;
  id<JavaUtilList> outputHandler_;
  jboolean mayHaveRandomAncestors_;
  JavaUtilArrayList *freeInputPoints_;
  JavaUtilArrayList *inputPoints_;
  OrgGeogebraCommonKernelAlgosAlgoElement *updateAfterAlgo_;
}

+ (JavaUtilTreeSet *)getTempSet;

- (void)setOutputDependencies;

- (void)appendCheckVectorWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
         withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
         withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)getCmdXMLWithNSString:(NSString *)cmdname
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoElement, output_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoElement, efficientInput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoElement, outputHandler_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoElement, freeInputPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoElement, inputPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoElement, updateAfterAlgo_, OrgGeogebraCommonKernelAlgosAlgoElement *)

static JavaUtilTreeSet *OrgGeogebraCommonKernelAlgosAlgoElement_tempSet_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelAlgosAlgoElement, tempSet_, JavaUtilTreeSet *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoElement, tempSet_, JavaUtilTreeSet *)

__attribute__((unused)) static JavaUtilTreeSet *OrgGeogebraCommonKernelAlgosAlgoElement_getTempSet();

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoElement_setOutputDependencies(OrgGeogebraCommonKernelAlgosAlgoElement *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoElement *self, JavaUtilTreeSet *set, jboolean onlyIndependent);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoElement_appendCheckVectorWithJavaLangStringBuilder_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelAlgosAlgoElement *self, JavaLangStringBuilder *sb, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoElement_getXMLWithJavaLangStringBuilder_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoElement *self, JavaLangStringBuilder *sb, jboolean includeOutputGeos);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoElement_getXML_OGPWithJavaLangStringBuilder_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoElement *self, JavaLangStringBuilder *sb, jboolean includeOutputGeos);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelAlgosAlgoElement_getCmdXMLWithNSString_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelAlgosAlgoElement *self, NSString *cmdname, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static jint OrgGeogebraCommonKernelAlgosAlgoElement_getInputLength(OrgGeogebraCommonKernelAlgosAlgoElement *self);

@interface OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler () {
 @public
  OrgGeogebraCommonKernelAlgosAlgoElement *this$0_;
  id<OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory> fac_;
  JavaUtilArrayList *outputList_;
  IOSObjectArray *labels_;
  NSString *indexLabel_;
  jint labelsSetLength_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler, this$0_, OrgGeogebraCommonKernelAlgosAlgoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler, fac_, id<OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler, outputList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler, labels_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler, indexLabel_, NSString *)

@interface OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory : NSObject
@end

@implementation OrgGeogebraCommonKernelAlgosAlgoElement

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                                withBoolean:(jboolean)addToConstructionList {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, c, addToConstructionList);
  return self;
}

- (void)addToConstructionList {
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) addToConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self withBoolean:NO];
}

- (void)setOutputLengthWithInt:(jint)n {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_output_(self, [IOSObjectArray newArrayWithLength:n type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
}

- (void)setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:(id<OrgGeogebraCommonKernelGeosToGeoElement>)g {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_output_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(output_, 0, [((id<OrgGeogebraCommonKernelGeosToGeoElement>) nil_chk(g)) toGeoElement]);
}

- (void)setOutputWithInt:(jint)i
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  IOSObjectArray_Set(nil_chk(output_), i, geo);
}

- (void)setOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)geo {
  OrgGeogebraCommonKernelAlgosAlgoElement_set_output_(self, geo);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getOutputWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(output_), i);
}

- (jint)getOutputLength {
  if (output_ == nil) {
    return 0;
  }
  return ((IOSObjectArray *) nil_chk(output_))->size_;
}

- (void)refreshOutput {
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk([self getOutputHandler])) iterator];
  jint n = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    n += [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk([it next])) size];
  }
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_output_(self, [IOSObjectArray newArrayWithLength:n type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  it = [((id<JavaUtilList>) nil_chk([self getOutputHandler])) iterator];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *handler = [it next];
    for (jint k = 0; k < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(handler)) size]; k++) {
      IOSObjectArray_Set(output_, i++, [handler getElementWithInt:k]);
    }
  }
}

+ (NSString *)getCommandStringWithOrgGeogebraCommonKernelAlgosGetCommand:(id<OrgGeogebraCommonKernelAlgosGetCommand>)classname {
  return OrgGeogebraCommonKernelAlgosAlgoElement_getCommandStringWithOrgGeogebraCommonKernelAlgosGetCommand_(classname);
}

- (void)setInputOutput {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)compute {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initForNearToRelationship {
}

- (jboolean)isNearToAlgorithm {
  return NO;
}

- (void)update {
  if (stopUpdateCascade_) {
    return;
  }
  [self updateUnlabeledRandomGeos];
  [self compute];
  [self updateDependentGeos];
}

- (jboolean)updateUnlabeledRandomGeos {
  if (!mayHaveRandomAncestors_) {
    return NO;
  }
  jboolean ret = NO;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) {
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isLabelSet]) {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) getParentAlgorithm] != nil) {
        if ([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) getParentAlgorithm])) updateUnlabeledRandomGeos] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isRandomGeo]) {
          [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) getParentAlgorithm])) compute];
          ret = YES;
        }
      }
      else {
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isRandomGeo]) {
          [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) updateRandomGeo];
          ret = YES;
        }
      }
    }
  }
  if (!ret) {
    self->mayHaveRandomAncestors_ = NO;
  }
  return ret;
}

- (void)updateDependentGeos {
  for (jint i = 0; i < [self getOutputLength]; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) update];
  }
}

+ (void)updateCascadeAlgosWithJavaUtilArrayList:(JavaUtilArrayList *)algos {
  OrgGeogebraCommonKernelAlgosAlgoElement_updateCascadeAlgosWithJavaUtilArrayList_(algos);
}

+ (JavaUtilTreeSet *)getTempSet {
  return OrgGeogebraCommonKernelAlgosAlgoElement_getTempSet();
}

- (IOSObjectArray *)getOutput {
  return output_;
}

- (IOSObjectArray *)getInput {
  return input_;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getInputWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(input_), i);
}

- (IOSObjectArray *)getInputForUpdateSetPropagation {
  return input_;
}

- (void)setDependencies {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) addAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  }
  [self doSetDependencies];
}

- (void)setDependenciesOutputOnly {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) addToUpdateSetOnlyWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  }
  [self doSetDependencies];
}

- (void)doSetDependencies {
  self->mayHaveRandomAncestors_ = YES;
  OrgGeogebraCommonKernelAlgosAlgoElement_setOutputDependencies(self);
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) addToAlgorithmListWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
}

- (void)setEfficientDependenciesWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)standardInput
                                withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)efficientInput {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(standardInput))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(standardInput, i))) addToAlgorithmListOnlyWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(efficientInput))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(efficientInput, i))) addToUpdateSetOnlyWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  }
  OrgGeogebraCommonKernelAlgosAlgoElement_set_input_(self, standardInput);
  OrgGeogebraCommonKernelAlgosAlgoElement_set_efficientInput_(self, efficientInput);
  [self doSetDependencies];
}

- (void)setOutputDependencies {
  OrgGeogebraCommonKernelAlgosAlgoElement_setOutputDependencies(self);
}

- (void)setOutputDependenciesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)output {
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(output)) setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  if ([output isGeoImage]) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) registerEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:self];
  }
  if (cons_ != output->cons_) {
    [output setConstructionWithOrgGeogebraCommonKernelConstruction:cons_];
  }
}

- (jboolean)euclidianViewUpdate {
  [self update];
  return NO;
}

- (void)removeOutput {
  for (jint i = 0; i < [self getOutputLength]; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) doRemove];
  }
}

- (void)remove {
  if (removed_) return;
  removed_ = YES;
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self];
  [cons_ removeFromAlgorithmListWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  [self removeOutput];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) {
    if (!protectedInput_ && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) canBeRemovedAsInput] && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isLabelSet] && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isGeoCasCell]) [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) remove];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) removeAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  }
  if (efficientInput_ != nil) {
    for (jint i = 0; i < efficientInput_->size_; i++) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(efficientInput_, i))) removeAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
    }
  }
}

- (void)setProtectedInputWithBoolean:(jboolean)flag {
  protectedInput_ = flag;
}

- (void)removeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)outArg {
  [self remove];
}

- (void)removeOutputExceptWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)keepGeo {
  for (jint i = 0; i < [self getOutputLength]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [self getOutputWithInt:i];
    if (geo != keepGeo) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) doRemove];
    }
  }
}

- (void)notifyAdd {
  for (jint i = 0; i < [self getOutputLength]; ++i) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) notifyAdd];
  }
}

- (void)notifyRemove {
  for (jint i = 0; i < [self getOutputLength]; ++i) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) notifyRemove];
  }
}

- (IOSObjectArray *)getGeoElements {
  return [self getOutput];
}

- (jboolean)hasSingleOutputType {
  OrgGeogebraCommonPluginGeoClassEnum *type = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) getGeoClassType];
  for (jint i = 1; i < [self getOutputLength]; ++i) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) getGeoClassType] != type) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)isAlgoElement {
  return YES;
}

- (jboolean)isGeoElement {
  return NO;
}

- (jboolean)isConsProtocolBreakpoint {
  for (jint i = 0; i < [self getOutputLength]; i++) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) isConsProtocolBreakpoint]) {
      return YES;
    }
  }
  return NO;
}

- (jint)compareToWithId:(OrgGeogebraCommonKernelAlgosConstructionElement *)obj {
  check_class_cast(obj, [OrgGeogebraCommonKernelAlgosConstructionElement class]);
  if (self == obj) {
    return 0;
  }
  OrgGeogebraCommonKernelAlgosConstructionElement *ce = obj;
  jint thisIndex = [self getConstructionIndex];
  jint objIndex = [((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) getConstructionIndex];
  if (thisIndex == objIndex) {
    return [super compareToWithId:obj];
  }
  else if (thisIndex < objIndex) {
    return -1;
  }
  return 1;
}

- (jint)getConstructionIndex {
  jint index = [super getConstructionIndex];
  if (index >= 0) {
    return index;
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) {
    jint temp = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) getConstructionIndex];
    if (temp > index) {
      index = temp;
    }
  }
  return index;
}

- (jint)getMinConstructionIndex {
  jint max = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; ++i) {
    jint index = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) getConstructionIndex];
    if (index > max) {
      max = index;
    }
  }
  return max + 1;
}

- (jint)getMaxConstructionIndex {
  JavaUtilArrayList *algoList;
  jint size, index;
  jint min = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) steps];
  for (jint k = 0; k < [self getOutputLength]; ++k) {
    algoList = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:k])) getAlgorithmList];
    size = [((JavaUtilArrayList *) nil_chk(algoList)) size];
    for (jint i = 0; i < size; ++i) {
      index = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([algoList getWithInt:i])) getConstructionIndex];
      if (index < min) {
        min = index;
      }
    }
  }
  return min - 1;
}

- (JavaUtilTreeSet *)getAllIndependentPredecessors {
  JavaUtilTreeSet *set = [new_JavaUtilTreeSet_init() autorelease];
  OrgGeogebraCommonKernelAlgosAlgoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(self, set, YES);
  return set;
}

- (void)addPredecessorsToSetWithJavaUtilTreeSet:(JavaUtilTreeSet *)set
                                    withBoolean:(jboolean)onlyIndependent {
  OrgGeogebraCommonKernelAlgosAlgoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(self, set, onlyIndependent);
}

- (void)addRandomizablePredecessorsToSetWithJavaUtilTreeSet:(JavaUtilTreeSet *)set {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *parent = IOSObjectArray_Get(input_, i);
    if (![((JavaUtilTreeSet *) nil_chk(set)) containsWithId:parent]) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(parent)) addRandomizablePredecessorsToSetWithJavaUtilTreeSet:set];
    }
  }
}

- (JavaUtilArrayList *)getFreeInputPoints {
  if (freeInputPoints_ == nil) {
    OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_freeInputPoints_(self, new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(input_))->size_));
    if (!([OrgGeogebraCommonKernelAlgosDependentAlgo_class_() isInstance:self])) {
      for (jint i = 0; i < input_->size_; i++) {
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isGeoPoint] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isIndependent]) {
          [freeInputPoints_ addWithId:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(input_, i), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))];
        }
      }
    }
  }
  return freeInputPoints_;
}

- (JavaUtilArrayList *)getInputPoints {
  if (inputPoints_ == nil) {
    OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_inputPoints_(self, new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(input_))->size_));
    for (jint i = 0; i < input_->size_; i++) {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isGeoPoint]) {
        [inputPoints_ addWithId:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(input_, i), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))];
      }
    }
  }
  return inputPoints_;
}

- (jboolean)isIndependent {
  return NO;
}

- (NSString *)getNameDescription {
  [((JavaLangStringBuilder *) nil_chk(sbAE_)) setLengthWithInt:0];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isLabelSet]) {
    [sbAE_ appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) getNameDescription]];
  }
  for (jint i = 1; i < [self getOutputLength]; ++i) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) isLabelSet]) {
      [sbAE_ appendWithNSString:@"\n"];
      [sbAE_ appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) getNameDescription]];
    }
  }
  return [sbAE_ description];
}

- (NSString *)getAlgebraDescriptionRegrOutWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbAE_)) setLengthWithInt:0];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isLabelSet]) {
    [sbAE_ appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) getAlgebraDescriptionRegrOutWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  }
  for (jint i = 1; i < [self getOutputLength]; ++i) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) isLabelSet]) {
      [sbAE_ appendWithNSString:@"\n"];
      [sbAE_ appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) getAlgebraDescriptionRegrOutWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    }
  }
  return [sbAE_ description];
}

- (NSString *)getDefinitionDescriptionWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  NSString *cmdname = [self getCommandNameWithOrgGeogebraCommonKernelStringTemplate:tpl];
  if ([((NSString *) nil_chk(cmdname)) isEqual:@"Expression"]) {
    return [self toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  if (input_ == nil) return nil;
  [((JavaLangStringBuilder *) nil_chk(sbAE_)) setLengthWithInt:0];
  if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isPrintLocalizedCommandNames]) {
    [sbAE_ appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getCommandWithNSString:cmdname]];
  }
  else {
    [sbAE_ appendWithNSString:cmdname];
  }
  jint length = [self getInputLengthForCommandDescription];
  [sbAE_ appendWithNSString:[tpl leftSquareBracket]];
  if (length > 0) {
    [sbAE_ appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getInputWithInt:0])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  }
  for (jint i = 1; i < length; ++i) {
    [sbAE_ appendWithNSString:@", "];
    OrgGeogebraCommonKernelAlgosAlgoElement_appendCheckVectorWithJavaLangStringBuilder_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelStringTemplate_(self, sbAE_, [self getInputWithInt:i], tpl);
  }
  [sbAE_ appendWithNSString:[tpl rightSquareBracket]];
  return [sbAE_ description];
}

- (void)appendCheckVectorWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
         withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
         withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  OrgGeogebraCommonKernelAlgosAlgoElement_appendCheckVectorWithJavaLangStringBuilder_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelStringTemplate_(self, sb, geo, tpl);
}

- (NSString *)description {
  return [self toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
}

- (NSString *)getCommandNameWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  NSString *cmdname;
  id<OrgGeogebraCommonKernelAlgosGetCommand> classname;
  classname = [self getClassName];
  cmdname = OrgGeogebraCommonKernelAlgosAlgoElement_getCommandStringWithOrgGeogebraCommonKernelAlgosGetCommand_(classname);
  if (![((NSString *) nil_chk(cmdname)) isEqual:@"Expression"]) {
    if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isUseTempVariablePrefix]) {
      cmdname = [tpl printVariableNameWithNSString:cmdname];
    }
  }
  return cmdname;
}

- (void)getXMLWithBoolean:(jboolean)getlistenersToo
withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonKernelAlgosAlgoElement_getXMLWithJavaLangStringBuilder_withBoolean_(self, sb, YES);
}

- (void)getXML_OGPWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonKernelAlgosAlgoElement_getXML_OGPWithJavaLangStringBuilder_withBoolean_(self, sb, YES);
}

- (NSString *)getXML {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  OrgGeogebraCommonKernelAlgosAlgoElement_getXMLWithJavaLangStringBuilder_withBoolean_(self, sb, YES);
  return [sb description];
}

- (void)getXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                            withBoolean:(jboolean)includeOutputGeos {
  OrgGeogebraCommonKernelAlgosAlgoElement_getXMLWithJavaLangStringBuilder_withBoolean_(self, sb, includeOutputGeos);
}

- (void)getXML_OGPWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                withBoolean:(jboolean)includeOutputGeos {
  OrgGeogebraCommonKernelAlgosAlgoElement_getXML_OGPWithJavaLangStringBuilder_withBoolean_(self, sb, includeOutputGeos);
}

- (void)getOutputXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = 0; i < [self getOutputLength]; i++) {
    geo = [self getOutputWithInt:i];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo getXMLWithBoolean:NO withJavaLangStringBuilder:sb];
    }
  }
}

- (NSString *)getExpXMLWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"<expression"];
  if ([self getOutputLength] == 1) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isLabelSet]) {
      [sb appendWithNSString:@" label=\""];
      OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]);
      [sb appendWithNSString:@"\""];
    }
  }
  [sb appendWithNSString:@" exp=\""];
  OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self toExpStringWithOrgGeogebraCommonKernelStringTemplate:tpl]);
  [sb appendWithNSString:@"\""];
  if ([self getOutputLength] > 0) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isGeoPoint]) {
      [sb appendWithNSString:@" type=\"point\""];
    }
    else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isGeoVector]) {
      [sb appendWithNSString:@" type=\"vector\""];
    }
    else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isGeoLine]) {
      [sb appendWithNSString:@" type=\"line\""];
    }
    else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isGeoPlane]) {
      [sb appendWithNSString:@" type=\"plane\""];
    }
    else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isGeoConic]) {
      [sb appendWithNSString:@" type=\"conic\""];
    }
    else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isGeoQuadric]) {
      [sb appendWithNSString:@" type=\"quadric\""];
    }
    else if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isGeoImplicitPoly]) {
      [sb appendWithNSString:@" type=\"implicitPoly\""];
    }
  }
  [sb appendWithNSString:@" />\n"];
  return [sb description];
}

- (NSString *)getCmdXMLWithNSString:(NSString *)cmdname
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelAlgosAlgoElement_getCmdXMLWithNSString_withOrgGeogebraCommonKernelStringTemplate_(self, cmdname, tpl);
}

- (jint)getInputLength {
  return OrgGeogebraCommonKernelAlgosAlgoElement_getInputLength(self);
}

- (jint)getInputLengthForXML {
  return OrgGeogebraCommonKernelAlgosAlgoElement_getInputLength(self);
}

- (jint)getInputLengthForCommandDescription {
  return OrgGeogebraCommonKernelAlgosAlgoElement_getInputLength(self);
}

- (jint)getInputLengthForXMLMayNeedXOYPlane {
  if (![((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isGettingXMLForReplace] || [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane] == nil) {
    return OrgGeogebraCommonKernelAlgosAlgoElement_getInputLength(self);
  }
  return OrgGeogebraCommonKernelAlgosAlgoElement_getInputLength(self) + 1;
}

- (jint)getInputLengthForCommandDescriptionMayNeedXOYPlane {
  if ([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isSaving] || [kernel_ noNeedToSpecifyXOYPlane]) {
    return OrgGeogebraCommonKernelAlgosAlgoElement_getInputLength(self);
  }
  return OrgGeogebraCommonKernelAlgosAlgoElement_getInputLength(self) + 1;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getInputMaybeXOYPlaneWithInt:(jint)i {
  if (i == OrgGeogebraCommonKernelAlgosAlgoElement_getInputLength(self)) {
    return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane], [OrgGeogebraCommonKernelGeosGeoElement class]);
  }
  return IOSObjectArray_Get(nil_chk(input_), i);
}

- (void)getCmdOutputXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
       withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<output"];
  for (jint i = 0; i < [self getOutputLength]; i++) {
    [sb appendWithNSString:@" a"];
    [sb appendWithInt:i];
    [sb appendWithNSString:@"=\""];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) isLabelSet]) {
      OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]);
    }
    [sb appendWithNSString:@"\""];
  }
  [sb appendWithNSString:@"/>\n"];
}

- (id<OrgGeogebraCommonKernelAlgosGetCommand>)getClassName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setPrintedInXMLWithBoolean:(jboolean)flag {
  isPrintedInXML__ = flag;
  if (flag) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) addToConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self withBoolean:YES];
  }
  else {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self];
  }
}

- (jboolean)isPrintedInXML {
  return isPrintedInXML__;
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toExpStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (jboolean)doStopUpdateCascade {
  return stopUpdateCascade_;
}

- (void)setStopUpdateCascadeWithBoolean:(jboolean)stopUpdateCascade {
  self->stopUpdateCascade_ = stopUpdateCascade;
}

- (jboolean)wantsConstructionProtocolUpdate {
  return NO;
}

- (void)setUpdateAfterAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)updateAfterAlgo {
  OrgGeogebraCommonKernelAlgosAlgoElement_set_updateAfterAlgo_(self, updateAfterAlgo);
}

- (OrgGeogebraCommonKernelAlgosAlgoElement *)getUpdateAfterAlgo {
  return updateAfterAlgo_;
}

- (void)removeOutputFromAlgebraView {
  id<OrgGeogebraCommonKernelView> av = [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getAlgebraView];
  if (av != nil) {
    for (jint i = 0; i < [self getOutputLength]; i++) {
      [av removeWithOrgGeogebraCommonKernelGeosGeoElement:[self getOutputWithInt:i]];
    }
  }
}

- (void)removeOutputFromPicking {
  for (jint i = 0; i < [self getOutputLength]; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) setIsPickableWithBoolean:NO];
  }
}

- (id<JavaUtilList>)getOutputHandler {
  return outputHandler_;
}

- (void)setOutputHandlerWithJavaUtilList:(id<JavaUtilList>)outputHandler {
  OrgGeogebraCommonKernelAlgosAlgoElement_set_outputHandler_(self, outputHandler);
}

- (jboolean)isLaTeXTextCommand {
  return NO;
}

- (id<OrgGeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)element
                                                                         withOrgGeogebraCommonKernelAlgosEquationScopeInterface:(id<OrgGeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return nil;
}

- (jboolean)isLocusEquable {
  return NO;
}

- (void)dealloc {
  RELEASE_(input_);
  RELEASE_(output_);
  RELEASE_(efficientInput_);
  RELEASE_(outputHandler_);
  RELEASE_(freeInputPoints_);
  RELEASE_(inputPoints_);
  RELEASE_(sbAE_);
  RELEASE_(updateAfterAlgo_);
  [super dealloc];
}

+ (IOSObjectArray *)__annotations_toString {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_output_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "AlgoElement", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withBoolean:", "AlgoElement", NULL, 0x4, NULL, NULL },
    { "addToConstructionList", NULL, "V", 0x1, NULL, NULL },
    { "setOutputLengthWithInt:", "setOutputLength", "V", 0x4, NULL, NULL },
    { "setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:", "setOnlyOutput", "V", 0x4, NULL, NULL },
    { "setOutputWithInt:withOrgGeogebraCommonKernelGeosGeoElement:", "setOutput", "V", 0x4, NULL, NULL },
    { "setOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:", "setOutput", "V", 0x4, NULL, NULL },
    { "getOutputWithInt:", "getOutput", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getOutputLength", NULL, "I", 0x1, NULL, NULL },
    { "refreshOutput", NULL, "V", 0x4, NULL, NULL },
    { "getCommandStringWithOrgGeogebraCommonKernelAlgosGetCommand:", "getCommandString", "Ljava.lang.String;", 0x18, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x404, NULL, NULL },
    { "compute", NULL, "V", 0x401, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x1, NULL, NULL },
    { "isNearToAlgorithm", NULL, "Z", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "updateUnlabeledRandomGeos", NULL, "Z", 0x1, NULL, NULL },
    { "updateDependentGeos", NULL, "V", 0x4, NULL, NULL },
    { "updateCascadeAlgosWithJavaUtilArrayList:", "updateCascadeAlgos", "V", 0x9, NULL, NULL },
    { "getTempSet", NULL, "Ljava.util.TreeSet;", 0xa, NULL, NULL },
    { "getOutput", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getInput", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "getInputWithInt:", "getInput", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getInputForUpdateSetPropagation", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setDependencies", NULL, "V", 0x14, NULL, NULL },
    { "setDependenciesOutputOnly", NULL, "V", 0x14, NULL, NULL },
    { "doSetDependencies", NULL, "V", 0x4, NULL, NULL },
    { "setEfficientDependenciesWithOrgGeogebraCommonKernelGeosGeoElementArray:withOrgGeogebraCommonKernelGeosGeoElementArray:", "setEfficientDependencies", "V", 0x14, NULL, NULL },
    { "setOutputDependencies", NULL, "V", 0x2, NULL, NULL },
    { "setOutputDependenciesWithOrgGeogebraCommonKernelGeosGeoElement:", "setOutputDependencies", "V", 0x4, NULL, NULL },
    { "euclidianViewUpdate", NULL, "Z", 0x1, NULL, NULL },
    { "removeOutput", NULL, "V", 0x4, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "setProtectedInputWithBoolean:", "setProtectedInput", "V", 0x1, NULL, NULL },
    { "removeWithOrgGeogebraCommonKernelGeosGeoElement:", "remove", "V", 0x1, NULL, NULL },
    { "removeOutputExceptWithOrgGeogebraCommonKernelGeosGeoElement:", "removeOutputExcept", "V", 0x1, NULL, NULL },
    { "notifyAdd", NULL, "V", 0x11, NULL, NULL },
    { "notifyRemove", NULL, "V", 0x11, NULL, NULL },
    { "getGeoElements", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "hasSingleOutputType", NULL, "Z", 0x11, NULL, NULL },
    { "isAlgoElement", NULL, "Z", 0x11, NULL, NULL },
    { "isGeoElement", NULL, "Z", 0x11, NULL, NULL },
    { "isConsProtocolBreakpoint", NULL, "Z", 0x11, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "getConstructionIndex", NULL, "I", 0x1, NULL, NULL },
    { "getMinConstructionIndex", NULL, "I", 0x1, NULL, NULL },
    { "getMaxConstructionIndex", NULL, "I", 0x1, NULL, NULL },
    { "getAllIndependentPredecessors", NULL, "Ljava.util.TreeSet;", 0x11, NULL, NULL },
    { "addPredecessorsToSetWithJavaUtilTreeSet:withBoolean:", "addPredecessorsToSet", "V", 0x11, NULL, NULL },
    { "addRandomizablePredecessorsToSetWithJavaUtilTreeSet:", "addRandomizablePredecessorsToSet", "V", 0x11, NULL, NULL },
    { "getFreeInputPoints", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getInputPoints", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "isIndependent", NULL, "Z", 0x11, NULL, NULL },
    { "getNameDescription", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAlgebraDescriptionRegrOutWithOrgGeogebraCommonKernelStringTemplate:", "getAlgebraDescriptionRegrOut", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDefinitionDescriptionWithOrgGeogebraCommonKernelStringTemplate:", "getDefinitionDescription", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:", "getCommandDescription", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "appendCheckVectorWithJavaLangStringBuilder:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelStringTemplate:", "appendCheckVector", "V", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getCommandNameWithOrgGeogebraCommonKernelStringTemplate:", "getCommandName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLWithBoolean:withJavaLangStringBuilder:", "getXML", "V", 0x1, NULL, NULL },
    { "getXML_OGPWithJavaLangStringBuilder:", "getXML_OGP", "V", 0x1, NULL, NULL },
    { "getXML", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLWithJavaLangStringBuilder:withBoolean:", "getXML", "V", 0x11, NULL, NULL },
    { "getXML_OGPWithJavaLangStringBuilder:withBoolean:", "getXML_OGP", "V", 0x11, NULL, NULL },
    { "getOutputXMLWithJavaLangStringBuilder:", "getOutputXML", "V", 0x4, NULL, NULL },
    { "getExpXMLWithOrgGeogebraCommonKernelStringTemplate:", "getExpXML", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getCmdXMLWithNSString:withOrgGeogebraCommonKernelStringTemplate:", "getCmdXML", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getInputLength", NULL, "I", 0x14, NULL, NULL },
    { "getInputLengthForXML", NULL, "I", 0x4, NULL, NULL },
    { "getInputLengthForCommandDescription", NULL, "I", 0x4, NULL, NULL },
    { "getInputLengthForXMLMayNeedXOYPlane", NULL, "I", 0x14, NULL, NULL },
    { "getInputLengthForCommandDescriptionMayNeedXOYPlane", NULL, "I", 0x14, NULL, NULL },
    { "getInputMaybeXOYPlaneWithInt:", "getInputMaybeXOYPlane", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "getCmdOutputXMLWithJavaLangStringBuilder:withOrgGeogebraCommonKernelStringTemplate:", "getCmdOutputXML", "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.algos.GetCommand;", 0x401, NULL, NULL },
    { "setPrintedInXMLWithBoolean:", "setPrintedInXML", "V", 0x1, NULL, NULL },
    { "isPrintedInXML", NULL, "Z", 0x4, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toExpStringWithOrgGeogebraCommonKernelStringTemplate:", "toExpString", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "doStopUpdateCascade", NULL, "Z", 0x10, NULL, NULL },
    { "setStopUpdateCascadeWithBoolean:", "setStopUpdateCascade", "V", 0x14, NULL, NULL },
    { "wantsConstructionProtocolUpdate", NULL, "Z", 0x1, NULL, NULL },
    { "setUpdateAfterAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:", "setUpdateAfterAlgo", "V", 0x11, NULL, NULL },
    { "getUpdateAfterAlgo", NULL, "Lorg.geogebra.common.kernel.algos.AlgoElement;", 0x11, NULL, NULL },
    { "removeOutputFromAlgebraView", NULL, "V", 0x1, NULL, NULL },
    { "removeOutputFromPicking", NULL, "V", 0x1, NULL, NULL },
    { "getOutputHandler", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "setOutputHandlerWithJavaUtilList:", "setOutputHandler", "V", 0x1, NULL, NULL },
    { "isLaTeXTextCommand", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lorg.geogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "input_", NULL, 0x1, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "output_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "efficientInput_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "isPrintedInXML__", "isPrintedInXML", 0x2, "Z", NULL, NULL,  },
    { "stopUpdateCascade_", NULL, 0x4, "Z", NULL, NULL,  },
    { "outputHandler_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/geogebra/common/kernel/algos/AlgoElement$OutputHandler<*>;>;",  },
    { "mayHaveRandomAncestors_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tempSet_", NULL, 0xa, "Ljava.util.TreeSet;", &OrgGeogebraCommonKernelAlgosAlgoElement_tempSet_, "Ljava/util/TreeSet<Lorg/geogebra/common/kernel/algos/AlgoElement;>;",  },
    { "removed_", NULL, 0x4, "Z", NULL, NULL,  },
    { "protectedInput_", NULL, 0x1, "Z", NULL, NULL,  },
    { "freeInputPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "inputPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "sbAE_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "updateAfterAlgo_", NULL, 0x2, "Lorg.geogebra.common.kernel.algos.AlgoElement;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", "Lorg.geogebra.common.kernel.algos.AlgoElement$elementFactory;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoElement = { 2, "AlgoElement", "org.geogebra.common.kernel.algos", NULL, 0x401, 92, methods, 14, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoElement;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelAlgosAlgoElement *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, c, YES);
}

void OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoElement *self, OrgGeogebraCommonKernelConstruction *c, jboolean addToConstructionList) {
  OrgGeogebraCommonKernelAlgosConstructionElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->isPrintedInXML__ = YES;
  self->stopUpdateCascade_ = NO;
  self->mayHaveRandomAncestors_ = YES;
  self->removed_ = NO;
  self->protectedInput_ = NO;
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_sbAE_(self, new_JavaLangStringBuilder_init());
  if (addToConstructionList) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(c)) addToConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self withBoolean:NO];
  }
}

NSString *OrgGeogebraCommonKernelAlgosAlgoElement_getCommandStringWithOrgGeogebraCommonKernelAlgosGetCommand_(id<OrgGeogebraCommonKernelAlgosGetCommand> classname) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initialize();
  if (classname == nil) return @"";
  return [((id<OrgGeogebraCommonKernelAlgosGetCommand>) nil_chk(classname)) getCommand];
}

void OrgGeogebraCommonKernelAlgosAlgoElement_updateCascadeAlgosWithJavaUtilArrayList_(JavaUtilArrayList *algos) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initialize();
  if (algos == nil) {
    return;
  }
  jint size = [((JavaUtilArrayList *) nil_chk(algos)) size];
  if (size == 0) {
    return;
  }
  JavaUtilArrayList *geos = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < size; i++) {
    OrgGeogebraCommonKernelAlgosAlgoElement *algo = [algos getWithInt:i];
    [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) compute];
    for (jint j = 0; j < [algo getOutputLength]; j++) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([algo getOutputWithInt:j])) update];
      [geos addWithId:[algo getOutputWithInt:j]];
    }
  }
  OrgGeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(geos, OrgGeogebraCommonKernelAlgosAlgoElement_getTempSet(), YES);
}

JavaUtilTreeSet *OrgGeogebraCommonKernelAlgosAlgoElement_getTempSet() {
  OrgGeogebraCommonKernelAlgosAlgoElement_initialize();
  if (OrgGeogebraCommonKernelAlgosAlgoElement_tempSet_ == nil) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelAlgosAlgoElement_tempSet_, nil, new_JavaUtilTreeSet_init());
  }
  return OrgGeogebraCommonKernelAlgosAlgoElement_tempSet_;
}

void OrgGeogebraCommonKernelAlgosAlgoElement_setOutputDependencies(OrgGeogebraCommonKernelAlgosAlgoElement *self) {
  for (jint i = 0; i < [self getOutputLength]; i++) {
    [self setOutputDependenciesWithOrgGeogebraCommonKernelGeosGeoElement:[self getOutputWithInt:i]];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoElement *self, JavaUtilTreeSet *set, jboolean onlyIndependent) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->input_))->size_; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *parent = IOSObjectArray_Get(self->input_, i);
    if (![((JavaUtilTreeSet *) nil_chk(set)) containsWithId:parent]) {
      if (!onlyIndependent) {
        [set addWithId:parent];
      }
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(parent)) addPredecessorsToSetWithJavaUtilTreeSet:set withBoolean:onlyIndependent];
    }
  }
}

void OrgGeogebraCommonKernelAlgosAlgoElement_appendCheckVectorWithJavaLangStringBuilder_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelAlgosAlgoElement *self, JavaLangStringBuilder *sb, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonKernelStringTemplate *tpl) {
  NSString *cmd = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
  if ([geo isGeoVector]) {
    NSString *vectorCommand = @"Vector[";
    if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isPrintLocalizedCommandNames]) vectorCommand = JreStrcat("$C", [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getCommandWithNSString:@"Vector"], '[');
    jboolean needsWrapping = ![geo isLabelSet] && ![((NSString *) nil_chk(cmd)) hasPrefix:vectorCommand];
    if (needsWrapping) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:vectorCommand];
    }
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:cmd];
    if (needsWrapping) {
      [sb appendWithChar:']'];
    }
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:cmd];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoElement_getXMLWithJavaLangStringBuilder_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoElement *self, JavaLangStringBuilder *sb, jboolean includeOutputGeos) {
  if (!self->isPrintedInXML__) {
    return;
  }
  @try {
    OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_();
    NSString *cmdname = [self getCommandNameWithOrgGeogebraCommonKernelStringTemplate:tpl];
    if ([((NSString *) nil_chk(cmdname)) isEqual:@"Expression"]) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[self getExpXMLWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    }
    else {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:OrgGeogebraCommonKernelAlgosAlgoElement_getCmdXMLWithNSString_withOrgGeogebraCommonKernelStringTemplate_(self, cmdname, tpl)];
    }
    if (includeOutputGeos) {
      [self getOutputXMLWithJavaLangStringBuilder:sb];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoElement_getXML_OGPWithJavaLangStringBuilder_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoElement *self, JavaLangStringBuilder *sb, jboolean includeOutputGeos) {
  if (!self->isPrintedInXML__) {
    return;
  }
  @try {
    OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_ogpTemplate_();
    NSString *cmdname = [self getCommandNameWithOrgGeogebraCommonKernelStringTemplate:tpl];
    if ([((NSString *) nil_chk(cmdname)) isEqual:@"Expression"]) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[self getExpXMLWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    }
    else {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:OrgGeogebraCommonKernelAlgosAlgoElement_getCmdXMLWithNSString_withOrgGeogebraCommonKernelStringTemplate_(self, cmdname, tpl)];
    }
    if (includeOutputGeos) {
      [self getOutputXMLWithJavaLangStringBuilder:sb];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

NSString *OrgGeogebraCommonKernelAlgosAlgoElement_getCmdXMLWithNSString_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelAlgosAlgoElement *self, NSString *cmdname, OrgGeogebraCommonKernelStringTemplate *tpl) {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([self getOutputLength] > 0 && [[self getOutputWithInt:0] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoScriptAction class]]) {
    return @"";
  }
  [sb appendWithNSString:@"<command name=\""];
  if ([@"" isEqual:cmdname]) [sb appendWithNSString:@"AlgoNonCommand"];
  else [sb appendWithNSString:cmdname];
  [sb appendWithNSString:@"\""];
  if (![@"" isEqual:cmdname] && ([self isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoListElement class]] || [((id<OrgGeogebraCommonKernelAlgosGetCommand>) nil_chk([self getClassName])) isEqual:OrgGeogebraCommonKernelCommandsCommandsEnum_get_Cell()] || [((id<OrgGeogebraCommonKernelAlgosGetCommand>) nil_chk([self getClassName])) isEqual:OrgGeogebraCommonKernelCommandsCommandsEnum_get_Object()])) {
    [sb appendWithNSString:@" type=\""];
    [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([self getOutput]), 0))) getXMLtypeString]];
    [sb appendWithNSString:@"\""];
  }
  if ([self getOutputLength] > 0 && [[self getOutputWithInt:0] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
    NSString *varStr = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast([self getOutputWithInt:0], [OrgGeogebraCommonKernelGeosGeoFunction class])))) getVarStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if (![@"x" isEqual:varStr]) {
      [sb appendWithNSString:@" var=\""];
      [sb appendWithNSString:varStr];
      [sb appendWithNSString:@"\""];
    }
  }
  [sb appendWithNSString:@">\n"];
  if (self->input_ != nil) {
    [sb appendWithNSString:@"\t<input"];
    for (jint i = 0; i < [self getInputLengthForXML]; i++) {
      [sb appendWithNSString:@" a"];
      [sb appendWithInt:i];
      [sb appendWithNSString:@"=\""];
      OrgGeogebraCommonKernelGeosGeoElement *inputGeo = [self getInputWithInt:i];
      NSString *cmd = OrgGeogebraCommonUtilStringUtil_encodeXMLWithNSString_([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(inputGeo)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]);
      if ([inputGeo isGeoVector] && ![inputGeo isLabelSet] && ![((NSString *) nil_chk(cmd)) hasPrefix:@"Vector["]) {
        [sb appendWithNSString:@"Vector["];
        [sb appendWithNSString:cmd];
        [sb appendWithNSString:@"]"];
      }
      else {
        [sb appendWithNSString:cmd];
      }
      [sb appendWithNSString:@"\""];
    }
    [sb appendWithNSString:@"/>\n"];
  }
  if ([self getOutputLength] > 0) [self getCmdOutputXMLWithJavaLangStringBuilder:sb withOrgGeogebraCommonKernelStringTemplate:tpl];
  [sb appendWithNSString:@"</command>\n"];
  return [sb description];
}

jint OrgGeogebraCommonKernelAlgosAlgoElement_getInputLength(OrgGeogebraCommonKernelAlgosAlgoElement *self) {
  return ((IOSObjectArray *) nil_chk(self->input_))->size_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoElement)

@implementation OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler

- (instancetype)initWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)outer$
     withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory:(id<OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory>)fac {
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, outer$, fac);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)outer$
     withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory:(id<OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory>)fac
                                              withNSStringArray:(IOSObjectArray *)labels {
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_withNSStringArray_(self, outer$, fac, labels);
  return self;
}

- (void)removeFromHandler {
  [((id<JavaUtilList>) nil_chk([this$0_ getOutputHandler])) removeWithId:self];
}

- (void)adjustOutputSizeWithInt:(jint)size {
  [self adjustOutputSizeWithInt:size withBoolean:YES];
}

- (void)adjustOutputSizeWithInt:(jint)size
                    withBoolean:(jboolean)setDependencies {
  if ([((JavaUtilArrayList *) nil_chk(outputList_)) size] < size) {
    [self augmentOutputSizeWithInt:size - [outputList_ size] withBoolean:setDependencies];
  }
  else {
    for (jint i = size; i < [outputList_ size]; i++) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) setUndefined];
    }
  }
}

- (void)augmentOutputSizeWithInt:(jint)size {
  [self augmentOutputSizeWithInt:size withBoolean:YES];
}

- (void)augmentOutputSizeWithInt:(jint)increment
                     withBoolean:(jboolean)setDependencies {
  jint size = increment + [((JavaUtilArrayList *) nil_chk(outputList_)) size];
  [outputList_ ensureCapacityWithInt:size];
  for (jint i = [outputList_ size]; i < size; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *newGeo = [((id<OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory>) nil_chk(fac_)) newElement];
    [outputList_ addWithId:newGeo];
    if (setDependencies) {
      [this$0_ setOutputDependenciesWithOrgGeogebraCommonKernelGeosGeoElement:newGeo];
    }
  }
  [this$0_ refreshOutput];
  if (setLabels__) {
    [self updateLabels];
  }
}

- (void)addOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)geos
                                                    withBoolean:(jboolean)setDependencies
                                                    withBoolean:(jboolean)refresh {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
    [self addOutputWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withBoolean:setDependencies];
  }
  if (refresh) {
    [this$0_ refreshOutput];
  }
}

- (void)addOutputWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                               withBoolean:(jboolean)setDependencies {
  [((JavaUtilArrayList *) nil_chk(outputList_)) addWithId:geo];
  if (setDependencies) {
    [this$0_ setOutputDependenciesWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_set_labels_(self, labels);
  setLabels__ = ![((OrgGeogebraCommonKernelConstruction *) nil_chk(this$0_->cons_)) isSuppressLabelsActive];
  if (labels != nil) {
    if (labels->size_ == 1) {
      [self setIndexLabelsWithNSString:IOSObjectArray_Get(labels, 0)];
    }
    [self adjustOutputSizeWithInt:labels->size_];
  }
  else {
    [self updateLabels];
  }
}

- (void)setIndexLabelsWithNSString:(NSString *)label {
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_set_indexLabel_(self, label);
  setLabels__ = ![((OrgGeogebraCommonKernelConstruction *) nil_chk(this$0_->cons_)) isSuppressLabelsActive];
  [self updateLabels];
}

- (void)updateLabels {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(outputList_)) size]; i++) {
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) isLabelSet]) {
      if (indexLabel_ != nil) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) setLabelWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) getIndexLabelWithNSString:indexLabel_]];
      }
      else if ((labels_ != nil) && (i < labels_->size_)) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) setLabelWithNSString:IOSObjectArray_Get(labels_, i)];
      }
      else {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) setLabelWithNSString:nil];
      }
    }
  }
}

- (void)setUndefined {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(outputList_)) size]; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) setUndefined];
  }
}

- (void)update {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(outputList_)) size]; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) update];
  }
}

- (void)updateParentAlgorithm {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(outputList_)) size]; i++) {
    [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) getParentAlgorithm])) update];
  }
}

- (id)addLabelWithNSString:(NSString *)label {
  OrgGeogebraCommonKernelGeosGeoElement *geo;
  if (labelsSetLength_ < [((JavaUtilArrayList *) nil_chk(outputList_)) size]) {
    geo = [self getElementWithInt:labelsSetLength_];
  }
  else {
    geo = [((id<OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory>) nil_chk(fac_)) newElement];
    [outputList_ addWithId:geo];
    [this$0_ setOutputDependenciesWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    [this$0_ refreshOutput];
  }
  labelsSetLength_++;
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelWithNSString:label];
  return geo;
}

- (id)getElementWithInt:(jint)i {
  return [((JavaUtilArrayList *) nil_chk(outputList_)) getWithInt:i];
}

- (IOSObjectArray *)getOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)a {
  return [((JavaUtilArrayList *) nil_chk(outputList_)) toArrayWithNSObjectArray:a];
}

- (jint)size {
  return [((JavaUtilArrayList *) nil_chk(outputList_)) size];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(fac_);
  RELEASE_(outputList_);
  RELEASE_(labels_);
  RELEASE_(indexLabel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelAlgosAlgoElement:withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory:", "OutputHandler", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelAlgosAlgoElement:withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory:withNSStringArray:", "OutputHandler", NULL, 0x1, NULL, NULL },
    { "removeFromHandler", NULL, "V", 0x1, NULL, NULL },
    { "adjustOutputSizeWithInt:", "adjustOutputSize", "V", 0x1, NULL, NULL },
    { "adjustOutputSizeWithInt:withBoolean:", "adjustOutputSize", "V", 0x1, NULL, NULL },
    { "augmentOutputSizeWithInt:", "augmentOutputSize", "V", 0x1, NULL, NULL },
    { "augmentOutputSizeWithInt:withBoolean:", "augmentOutputSize", "V", 0x1, NULL, NULL },
    { "addOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:withBoolean:withBoolean:", "addOutput", "V", 0x1, NULL, NULL },
    { "addOutputWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "addOutput", "V", 0x1, NULL, "(TT;Z)V" },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x1, NULL, NULL },
    { "setIndexLabelsWithNSString:", "setIndexLabels", "V", 0x1, NULL, NULL },
    { "updateLabels", NULL, "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "updateParentAlgorithm", NULL, "V", 0x1, NULL, NULL },
    { "addLabelWithNSString:", "addLabel", "TT;", 0x1, NULL, "(Ljava/lang/String;)TT;" },
    { "getElementWithInt:", "getElement", "TT;", 0x1, NULL, "(I)TT;" },
    { "getOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:", "getOutput", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.algos.AlgoElement;", NULL, NULL,  },
    { "fac_", NULL, 0x2, "Lorg.geogebra.common.kernel.algos.AlgoElement$elementFactory;", NULL, "Lorg/geogebra/common/kernel/algos/AlgoElement$elementFactory<TT;>;",  },
    { "outputList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<TT;>;",  },
    { "labels_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "indexLabel_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "setLabels__", "setLabels", 0x1, "Z", NULL, NULL,  },
    { "labelsSetLength_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler = { 2, "OutputHandler", "org.geogebra.common.kernel.algos", "AlgoElement", 0x1, 19, methods, 7, fields, 0, NULL, 0, NULL, NULL, "<T:Lorg/geogebra/common/kernel/geos/GeoElement;>Ljava/lang/Object;" };
  return &_OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_(OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *self, OrgGeogebraCommonKernelAlgosAlgoElement *outer$, id<OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory> fac) {
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_set_this$0_(self, outer$);
  NSObject_init(self);
  self->labelsSetLength_ = 0;
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_set_fac_(self, fac);
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_setAndConsume_outputList_(self, new_JavaUtilArrayList_init());
  if ([outer$ getOutputHandler] == nil) {
    [outer$ setOutputHandlerWithJavaUtilList:[new_JavaUtilArrayList_init() autorelease]];
  }
  [((id<JavaUtilList>) nil_chk([outer$ getOutputHandler])) addWithId:self];
}

OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *new_OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_(OrgGeogebraCommonKernelAlgosAlgoElement *outer$, id<OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory> fac) {
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *self = [OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler alloc];
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, outer$, fac);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_withNSStringArray_(OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *self, OrgGeogebraCommonKernelAlgosAlgoElement *outer$, id<OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory> fac, IOSObjectArray *labels) {
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, outer$, fac);
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_set_labels_(self, labels);
  if (labels != nil) {
    [self adjustOutputSizeWithInt:labels->size_];
  }
}

OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *new_OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_withNSStringArray_(OrgGeogebraCommonKernelAlgosAlgoElement *outer$, id<OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory> fac, IOSObjectArray *labels) {
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *self = [OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler alloc];
  OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_withNSStringArray_(self, outer$, fac, labels);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler)

@implementation OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "TS;", 0x401, NULL, "()TS;" },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory = { 2, "elementFactory", "org.geogebra.common.kernel.algos", "AlgoElement", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "<S:Lorg/geogebra/common/kernel/geos/GeoElement;>Ljava/lang/Object;" };
  return &_OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory)
