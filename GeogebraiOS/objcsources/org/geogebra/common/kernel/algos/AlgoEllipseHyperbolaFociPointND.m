//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoEllipseHyperbolaFociPointND.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoEllipseHyperbolaFociPointND.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND ()

- (void)addIncidence;

@end

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND_addIncidence(OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
          withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation
                                                    withInt:(jint)type {
  OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(self, cons, label, A, B, C, orientation, type);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
          withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation
                                                    withInt:(jint)type {
  OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(self, cons, A, B, C, orientation, type);
  return self;
}

- (void)initCoords {
}

- (void)setOrientationWithOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)newGeoConicWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addIncidence {
  OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND_addIncidence(self);
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  if (type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA) {
    return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Hyperbola();
  }
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Ellipse();
}

- (jint)getRelatedModeID {
  if (type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA) {
    return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS;
  }
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS;
}

- (void)setInput {
  input_ = [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(A_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  (void) IOSObjectArray_Set(input_, 1, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(B_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  (void) IOSObjectArray_Set(input_, 2, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(C_, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

- (void)setInputOutput {
  [self setInput];
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:conic_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)getConic {
  return conic_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getFocus1 {
  return A_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getFocus2 {
  return B_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getExternalPoint {
  return C_;
}

- (void)compute {
  IOSDoubleArray *xyA = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *xyB = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *xyC = [IOSDoubleArray newArrayWithLength:2];
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getA2d])) getInhomCoordsWithDoubleArray:xyA];
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getB2d])) getInhomCoordsWithDoubleArray:xyB];
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getC2d])) getInhomCoordsWithDoubleArray:xyC];
  jdouble length;
  jdouble length1 = JavaLangMath_sqrtWithDouble_((IOSDoubleArray_Get(xyA, 0) - IOSDoubleArray_Get(xyC, 0)) * (IOSDoubleArray_Get(xyA, 0) - IOSDoubleArray_Get(xyC, 0)) + (IOSDoubleArray_Get(xyA, 1) - IOSDoubleArray_Get(xyC, 1)) * (IOSDoubleArray_Get(xyA, 1) - IOSDoubleArray_Get(xyC, 1)));
  jdouble length2 = JavaLangMath_sqrtWithDouble_((IOSDoubleArray_Get(xyB, 0) - IOSDoubleArray_Get(xyC, 0)) * (IOSDoubleArray_Get(xyB, 0) - IOSDoubleArray_Get(xyC, 0)) + (IOSDoubleArray_Get(xyB, 1) - IOSDoubleArray_Get(xyC, 1)) * (IOSDoubleArray_Get(xyB, 1) - IOSDoubleArray_Get(xyC, 1)));
  if (type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA) {
    length = JavaLangMath_absWithDouble_(length1 - length2);
  }
  else {
    length = length1 + length2;
  }
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) setEllipseHyperbolaWithOrgGeogebraCommonKernelGeosGeoPoint:[self getA2d] withOrgGeogebraCommonKernelGeosGeoPoint:[self getB2d] withDouble:length / 2];
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getA2d {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getB2d {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getC2d {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA) {
    return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"HyperbolaWithFociABPassingThroughC" withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(C_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  }
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"EllipseWithFociABPassingThroughC" withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(C_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:withInt:", "AlgoEllipseHyperbolaFociPointND", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:withInt:", "AlgoEllipseHyperbolaFociPointND", NULL, 0x1, NULL, NULL },
    { "initCoords", NULL, "V", 0x4, NULL, NULL },
    { "setOrientationWithOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "setOrientation", "V", 0x4, NULL, NULL },
    { "newGeoConicWithOrgGeogebraCommonKernelConstruction:", "newGeoConic", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x404, NULL, NULL },
    { "addIncidence", NULL, "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInput", NULL, "V", 0x4, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getConic", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "getFocus1", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getFocus2", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getExternalPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getA2d", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x404, NULL, NULL },
    { "getB2d", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x404, NULL, NULL },
    { "getC2d", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x404, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "B_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "C_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "conic_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "type_", NULL, 0x14, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND = { 2, "AlgoEllipseHyperbolaFociPointND", "org.geogebra.common.kernel.algos", NULL, 0x401, 19, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> orientation, jint type) {
  (void) OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(self, cons, A, B, C, orientation, type);
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) setLabelWithNSString:label];
}

void OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> orientation, jint type) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->type_ = type;
  self->A_ = A;
  self->B_ = B;
  self->C_ = C;
  [self setOrientationWithOrgGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  self->conic_ = [self newGeoConicWithOrgGeogebraCommonKernelConstruction:cons];
  [self setInputOutput];
  [self initCoords];
  [self compute];
  OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND_addIncidence(self);
}

void OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND_addIncidence(OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND *self) {
  if (self->C_ != nil) [self->C_ addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->conic_ withBoolean:NO];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPointND)
