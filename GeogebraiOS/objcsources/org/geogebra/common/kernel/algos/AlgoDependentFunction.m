//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoDependentFunction.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentFunction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/Algos.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/Functional.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/MyNumberPair.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonKernelAlgosAlgoDependentFunction () {
 @public
  OrgGeogebraCommonKernelArithmeticFunction *expandedFun_;
  OrgGeogebraCommonKernelArithmeticExpressionNode *expression_;
  jboolean expContainsFunctions_;
  JavaUtilHashSet *unconditionalInput_;
  JavaLangStringBuilder *sb_;
}

- (jboolean)inputDefined;

+ (NSString *)getDerivativeLabelWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)fun;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentFunction, expandedFun_, OrgGeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentFunction, expression_, OrgGeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentFunction, unconditionalInput_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentFunction, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoDependentFunction_compute(OrgGeogebraCommonKernelAlgosAlgoDependentFunction *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoDependentFunction_inputDefined(OrgGeogebraCommonKernelAlgosAlgoDependentFunction *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelAlgosAlgoDependentFunction_getDerivativeLabelWithOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelArithmeticFunction *fun);

@implementation OrgGeogebraCommonKernelAlgosAlgoDependentFunction

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)fun {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(self, cons, label, fun);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
              withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)fun {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_(self, cons, fun);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (OrgGeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return OrgGeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (void)setInputOutput {
  input_ = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) getGeoElementVariables];
  unconditionalInput_ = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fun_ getFunctionExpression])) getUnconditionalVars];
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:f_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getFunction {
  return f_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction_compute(self);
}

- (jboolean)inputDefined {
  return OrgGeogebraCommonKernelAlgosAlgoDependentFunction_inputDefined(self);
}

+ (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)expandFunctionDerivativeNodesWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return OrgGeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithOrgGeogebraCommonKernelArithmeticExpressionValue_(ev);
}

+ (jboolean)containsFunctionsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return OrgGeogebraCommonKernelAlgosAlgoDependentFunction_containsFunctionsWithOrgGeogebraCommonKernelArithmeticExpressionValue_(ev);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (sb_ == nil) sb_ = new_JavaLangStringBuilder_init();
  else [sb_ setLengthWithInt:0];
  if ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) isLabelSet] && ![((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isHideLHS] && (![f_ isBooleanFunction] || [tpl hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML()])) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[f_ getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    (void) [sb_ appendWithNSString:@"("];
    (void) [sb_ appendWithNSString:[f_ getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    (void) [sb_ appendWithNSString:@") = "];
  }
  (void) [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  return [sb_ description];
}

+ (NSString *)getDerivativeLabelWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)fun {
  return OrgGeogebraCommonKernelAlgosAlgoDependentFunction_getDerivativeLabelWithOrgGeogebraCommonKernelArithmeticFunction_(fun);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticFunction:", "AlgoDependentFunction", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelArithmeticFunction:", "AlgoDependentFunction", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:", "AlgoDependentFunction", NULL, 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFunction", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "inputDefined", NULL, "Z", 0x2, NULL, NULL },
    { "expandFunctionDerivativeNodesWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "expandFunctionDerivativeNodes", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x9, NULL, NULL },
    { "containsFunctionsWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "containsFunctions", "Z", 0x9, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDerivativeLabelWithOrgGeogebraCommonKernelArithmeticFunction:", "getDerivativeLabel", "Ljava.lang.String;", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fun_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "f_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "expandedFun_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "expression_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "expContainsFunctions_", NULL, 0x2, "Z", NULL, NULL,  },
    { "unconditionalInput_", NULL, 0x2, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoDependentFunction = { 2, "AlgoDependentFunction", "org.geogebra.common.kernel.algos", NULL, 0x1, 12, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoDependentFunction;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelAlgosAlgoDependentFunction *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelArithmeticFunction *fun) {
  (void) OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_(self, cons, fun);
  NSString *derivativeLabel = nil;
  if (label == nil) {
    derivativeLabel = OrgGeogebraCommonKernelAlgosAlgoDependentFunction_getDerivativeLabelWithOrgGeogebraCommonKernelArithmeticFunction_(fun);
  }
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) setLabelWithNSString:derivativeLabel != nil ? derivativeLabel : label];
}

OrgGeogebraCommonKernelAlgosAlgoDependentFunction *new_OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelArithmeticFunction *fun) {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction *self = [OrgGeogebraCommonKernelAlgosAlgoDependentFunction alloc];
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(self, cons, label, fun);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelAlgosAlgoDependentFunction *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelArithmeticFunction *fun) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->fun_ = fun;
  self->f_ = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self->f_ setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:fun];
  [self->f_ initFunction];
  self->expression_ = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) getExpression];
  self->expContainsFunctions_ = OrgGeogebraCommonKernelAlgosAlgoDependentFunction_containsFunctionsWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self->expression_);
  if (self->expContainsFunctions_) {
    self->expandedFun_ = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelKernel_(fun, self->kernel_);
  }
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction_compute(self);
}

OrgGeogebraCommonKernelAlgosAlgoDependentFunction *new_OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelArithmeticFunction *fun) {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction *self = [OrgGeogebraCommonKernelAlgosAlgoDependentFunction alloc];
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_(self, cons, fun);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelAlgosAlgoDependentFunction *self, OrgGeogebraCommonKernelConstruction *cons) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
}

OrgGeogebraCommonKernelAlgosAlgoDependentFunction *new_OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction *self = [OrgGeogebraCommonKernelAlgosAlgoDependentFunction alloc];
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoDependentFunction_compute(OrgGeogebraCommonKernelAlgosAlgoDependentFunction *self) {
  jboolean isDefined = OrgGeogebraCommonKernelAlgosAlgoDependentFunction_inputDefined(self);
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) setDefinedWithBoolean:isDefined];
  if (isDefined && self->expContainsFunctions_) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = nil;
    @try {
      ev = OrgGeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_]);
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      OrgGeogebraCommonMainApp_debugWithNSString_(@"derivative failed");
    }
    if (ev == nil) {
      [self->f_ setUndefined];
      return;
    }
    OrgGeogebraCommonKernelArithmeticExpressionNode *node;
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    else node = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ev);
    [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(self->expandedFun_)) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:node];
    [self->f_ setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:self->expandedFun_];
    if ([self->f_ isBooleanFunction] && [self->f_ isLabelSet]) [self->f_ resetIneqs];
  }
  else if ([self->f_ isBooleanFunction]) [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self->f_ getFunction])) updateIneqs];
}

jboolean OrgGeogebraCommonKernelAlgosAlgoDependentFunction_inputDefined(OrgGeogebraCommonKernelAlgosAlgoDependentFunction *self) {
  if (self->unconditionalInput_ == nil) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->input_))->size_; i++) {
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) isDefined]) {
        return NO;
      }
    }
    return YES;
  }
  id<JavaUtilIterator> it = [((JavaUtilHashSet *) nil_chk(self->unconditionalInput_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([it next])) isDefined]) {
      return NO;
    }
  }
  return YES;
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithOrgGeogebraCommonKernelArithmeticExpressionValue_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev) {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initialize();
  if (ev != nil && [ev isExpressionNode]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> leftValue = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([node getLeft])) unwrap];
    {
      OrgGeogebraCommonKernelArithmeticFunction *fun;
      OrgGeogebraCommonKernelArithmeticFunctionVariable *x;
      OrgGeogebraCommonKernelArithmeticExpressionNode *funcExpression;
      OrgGeogebraCommonKernelArithmeticFunctionNVar *funN;
      IOSObjectArray *xy;
      OrgGeogebraCommonKernelArithmeticExpressionNode *funNExpression;
      jint order;
      switch ([[node getOperation] ordinal]) {
        case OrgGeogebraCommonPluginOperation_FUNCTION:
        if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftValue)) isExpressionNode]) {
          leftValue = OrgGeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithOrgGeogebraCommonKernelArithmeticExpressionValue_(leftValue);
          [node setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:leftValue];
          if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftValue)) isExpressionNode]) return node;
        }
        if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftValue)) isGeoElement] && [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(leftValue, [OrgGeogebraCommonKernelGeosGeoElement class])) isGeoFunctionConditional]) return node;
        fun = [((id<OrgGeogebraCommonKernelArithmeticFunctional>) check_protocol_cast(leftValue, @protocol(OrgGeogebraCommonKernelArithmeticFunctional))) getFunction];
        x = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) getFunctionVariable];
        funcExpression = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fun getExpression])) getCopyWithOrgGeogebraCommonKernelKernel:[fun getKernel]];
        return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(funcExpression)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:x withOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithOrgGeogebraCommonKernelArithmeticExpressionValue_([node getRight])])) wrap];
        case OrgGeogebraCommonPluginOperation_FUNCTION_NVAR:
        if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftValue)) isExpressionNode]) {
          leftValue = OrgGeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithOrgGeogebraCommonKernelArithmeticExpressionValue_(leftValue);
          [node setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:leftValue];
          if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftValue)) isExpressionNode]) return node;
        }
        funN = [((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(leftValue, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar))))) getFunction];
        xy = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(funN)) getFunctionVariables];
        funNExpression = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([funN getExpression])) getCopyWithOrgGeogebraCommonKernelKernel:[funN getKernel]];
        if (!([[node getRight] isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]])) return ev;
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(xy))->size_; i++) funNExpression = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(funNExpression)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(xy, i) withOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([node getRight], [OrgGeogebraCommonKernelArithmeticMyList class])))) getListElementWithInt:i])])) wrap];
        return (funNExpression);
        case OrgGeogebraCommonPluginOperation_DERIVATIVE:
        if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftValue)) isGeoElement] && [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(leftValue, [OrgGeogebraCommonKernelGeosGeoElement class])) isGeoFunctionConditional]) {
          return node;
        }
        order = (jint) JavaLangMath_roundWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([node getRight], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble]);
        if ([leftValue isExpressionNode] && ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(leftValue, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_$VAR_COL() || [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(leftValue, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_$VAR_ROW() || [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(leftValue, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_$VAR_ROW_COL())) leftValue = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(leftValue, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getLeft];
        if ([leftValue isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCasCell class]]) {
          return [((id<OrgGeogebraCommonKernelArithmeticFunctional>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctional>) check_protocol_cast([((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(leftValue, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) getTwinGeo], @protocol(OrgGeogebraCommonKernelArithmeticFunctional))))) getGeoDerivativeWithInt:order];
        }
        return [((id<OrgGeogebraCommonKernelArithmeticFunctional>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctional>) check_protocol_cast(leftValue, @protocol(OrgGeogebraCommonKernelArithmeticFunctional))))) getGeoDerivativeWithInt:order];
        case OrgGeogebraCommonPluginOperation_$VAR_ROW:
        case OrgGeogebraCommonPluginOperation_$VAR_COL:
        case OrgGeogebraCommonPluginOperation_$VAR_ROW_COL:
        return leftValue;
        default:
        [node setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithOrgGeogebraCommonKernelArithmeticExpressionValue_(leftValue)];
        [node setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithOrgGeogebraCommonKernelArithmeticExpressionValue_([node getRight])];
        return node;
      }
    }
  }
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyNumberPair class]]) {
    [((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) setXWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) getX])];
    [((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) setYWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) getY])];
  }
  return ev;
}

jboolean OrgGeogebraCommonKernelAlgosAlgoDependentFunction_containsFunctionsWithOrgGeogebraCommonKernelArithmeticExpressionValue_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev) {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initialize();
  if (ev != nil && [ev isExpressionNode]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    OrgGeogebraCommonPluginOperationEnum *op = [node getOperation];
    if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(op)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_FUNCTION()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_DERIVATIVE()]) {
      return YES;
    }
    return OrgGeogebraCommonKernelAlgosAlgoDependentFunction_containsFunctionsWithOrgGeogebraCommonKernelArithmeticExpressionValue_([node getLeft]) || OrgGeogebraCommonKernelAlgosAlgoDependentFunction_containsFunctionsWithOrgGeogebraCommonKernelArithmeticExpressionValue_([node getRight]);
  }
  return NO;
}

NSString *OrgGeogebraCommonKernelAlgosAlgoDependentFunction_getDerivativeLabelWithOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelArithmeticFunction *fun) {
  OrgGeogebraCommonKernelAlgosAlgoDependentFunction_initialize();
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) getExpression])) getLeft];
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *enL = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fun getExpression])) getLeft]), [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enL)) getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_DERIVATIVE()]) {
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([enL getLeft])) isGeoElement]) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([enL getLeft], [OrgGeogebraCommonKernelGeosGeoElement class]);
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
          id<OrgGeogebraCommonKernelArithmeticExpressionValue> evR = ([enL getRight]);
          if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:evR]) {
            id<OrgGeogebraCommonKernelArithmeticNumberValue> num = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(evR, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
            jdouble val = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
            if (val > 0.0 && OrgGeogebraCommonKernelKernel_isIntegerWithDouble_(val)) {
              return JreStrcat("$$", [geo getLabelSimple], OrgGeogebraCommonUtilStringUtil_stringWithNSString_withInt_(@"'", J2ObjCFpToInt(val)));
            }
          }
        }
      }
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoDependentFunction)
