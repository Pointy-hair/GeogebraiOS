//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoTranslate.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoTransformation.h"
#include "org/geogebra/common/kernel/algos/AlgoTranslate.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/SymbolicParameters.h"
#include "org/geogebra/common/kernel/algos/SymbolicParametersAlgo.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/geos/Translateable.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoTranslate () {
 @public
  id<OrgGeogebraCommonKernelGeosTranslateable> out_;
  IOSObjectArray *polynomials_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoTranslate, out_, id<OrgGeogebraCommonKernelGeosTranslateable>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoTranslate, polynomials_, IOSObjectArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoTranslate_compute(OrgGeogebraCommonKernelAlgosAlgoTranslate *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoTranslate

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
                    withOrgGeogebraCommonKernelGeosGeoVec3D:(OrgGeogebraCommonKernelGeosGeoVec3D *)v {
  OrgGeogebraCommonKernelAlgosAlgoTranslate_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoVec3D_(self, cons, label, inArg, v);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)v {
  OrgGeogebraCommonKernelAlgosAlgoTranslate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, inArg, v);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Translate();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR;
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, inGeo_);
  (void) IOSObjectArray_Set(input_, 1, v_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:outGeo_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResult {
  return outGeo_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoTranslate_compute(self);
}

- (void)setOutGeo {
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(outGeo_)) setWithOrgGeogebraCommonKernelGeosGeoElement:inGeo_];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getVectorCoords {
  OrgGeogebraCommonKernelGeosGeoVec3D *vec = (OrgGeogebraCommonKernelGeosGeoVec3D *) check_class_cast(v_, [OrgGeogebraCommonKernelGeosGeoVec3D class]);
  return new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(((OrgGeogebraCommonKernelGeosGeoVec3D *) nil_chk(vec))->x_, vec->y_, vec->z_);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"TranslationOfAbyB" withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(inGeo_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(v_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g
                            withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g2 {
  inGeo_ = g;
  outGeo_ = g2;
  if (!([outGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]])) {
    out_ = (id<OrgGeogebraCommonKernelGeosTranslateable>) check_protocol_cast(outGeo_, @protocol(OrgGeogebraCommonKernelGeosTranslateable));
  }
}

- (OrgGeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  return new_OrgGeogebraCommonKernelAlgosSymbolicParameters_initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self);
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if ([inGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]] && [v_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoVector class]]) {
    [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(inGeo_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getFreeVariablesWithJavaUtilHashSet:variables];
    [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(v_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (IOSIntArray *)getDegrees {
  if ([inGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]] && [v_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoVector class]]) {
    IOSIntArray *degree1 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(inGeo_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getDegrees];
    IOSIntArray *degree2 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(v_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getDegrees];
    IOSIntArray *result = [IOSIntArray newArrayWithLength:3];
    *IOSIntArray_GetRef(result, 0) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(nil_chk(degree1), 0) + IOSIntArray_Get(nil_chk(degree2), 2), IOSIntArray_Get(degree2, 0) + IOSIntArray_Get(degree1, 2));
    *IOSIntArray_GetRef(result, 1) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree1, 1) + IOSIntArray_Get(degree2, 2), IOSIntArray_Get(degree2, 1) + IOSIntArray_Get(degree1, 2));
    *IOSIntArray_GetRef(result, 2) = IOSIntArray_Get(degree2, 2) + IOSIntArray_Get(degree1, 2);
    return result;
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if ([inGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]] && [v_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoVector class]]) {
    IOSObjectArray *coords1 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(inGeo_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *coords2 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(v_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *result = [IOSObjectArray newArrayWithLength:3 type:JavaMathBigInteger_class_()];
    (void) IOSObjectArray_Set(result, 0, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(coords1), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(coords2), 2)])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords2, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords1, 2)]]);
    (void) IOSObjectArray_Set(result, 1, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords1, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords2, 2)])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords2, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords1, 2)]]);
    (void) IOSObjectArray_Set(result, 2, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords1, 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords2, 2)]);
    return OrgGeogebraCommonKernelAlgosSymbolicParameters_reduceWithJavaMathBigIntegerArray_(result);
  }
  return nil;
}

- (IOSObjectArray *)getPolynomials {
  if (polynomials_ != nil) {
    return polynomials_;
  }
  if ([inGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]] && [v_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoVector class]]) {
    IOSObjectArray *coords1 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(inGeo_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getPolynomials];
    IOSObjectArray *coords2 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(v_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getPolynomials];
    polynomials_ = [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
    (void) IOSObjectArray_Set(polynomials_, 0, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(coords1), 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(coords2), 2)])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords2, 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords1, 2)]]);
    (void) IOSObjectArray_Set(polynomials_, 1, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords1, 1))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords2, 2)])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords2, 1))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords1, 2)]]);
    (void) IOSObjectArray_Set(polynomials_, 2, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords1, 2))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords2, 2)]);
    return polynomials_;
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (jdouble)getAreaScaleFactor {
  return 1;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoVec3D:", "AlgoTranslate", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "AlgoTranslate", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setOutGeo", NULL, "V", 0x4, NULL, NULL },
    { "getVectorCoords", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "setTransformedObject", "V", 0x4, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lorg.geogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getAreaScaleFactor", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "out_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.Translateable;", NULL, NULL,  },
    { "inGeo_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "outGeo_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "v_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "polynomials_", NULL, 0x2, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoTranslate = { 2, "AlgoTranslate", "org.geogebra.common.kernel.algos", NULL, 0x1, 17, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoTranslate;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoTranslate_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoVec3D_(OrgGeogebraCommonKernelAlgosAlgoTranslate *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *inArg, OrgGeogebraCommonKernelGeosGeoVec3D *v) {
  (void) OrgGeogebraCommonKernelAlgosAlgoTranslate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, inArg, v);
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoTranslate *new_OrgGeogebraCommonKernelAlgosAlgoTranslate_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoVec3D_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *inArg, OrgGeogebraCommonKernelGeosGeoVec3D *v) {
  OrgGeogebraCommonKernelAlgosAlgoTranslate *self = [OrgGeogebraCommonKernelAlgosAlgoTranslate alloc];
  OrgGeogebraCommonKernelAlgosAlgoTranslate_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoVec3D_(self, cons, label, inArg, v);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoTranslate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelAlgosAlgoTranslate *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, OrgGeogebraCommonKernelGeosGeoElement *v) {
  (void) OrgGeogebraCommonKernelAlgosAlgoTransformation_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->v_ = v;
  self->inGeo_ = inArg;
  self->outGeo_ = [self getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:self->inGeo_];
  if ([OrgGeogebraCommonKernelGeosTranslateable_class_() isInstance:self->outGeo_]) self->out_ = (id<OrgGeogebraCommonKernelGeosTranslateable>) check_protocol_cast(self->outGeo_, @protocol(OrgGeogebraCommonKernelGeosTranslateable));
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoTranslate_compute(self);
}

OrgGeogebraCommonKernelAlgosAlgoTranslate *new_OrgGeogebraCommonKernelAlgosAlgoTranslate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, OrgGeogebraCommonKernelGeosGeoElement *v) {
  OrgGeogebraCommonKernelAlgosAlgoTranslate *self = [OrgGeogebraCommonKernelAlgosAlgoTranslate alloc];
  OrgGeogebraCommonKernelAlgosAlgoTranslate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, inArg, v);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoTranslate_compute(OrgGeogebraCommonKernelAlgosAlgoTranslate *self) {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isGeoList]) {
    [self transformListWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->inGeo_, [OrgGeogebraCommonKernelGeosGeoList class]) withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->outGeo_, [OrgGeogebraCommonKernelGeosGeoList class])];
    return;
  }
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->v_)) isDefined]) {
    [((id<OrgGeogebraCommonKernelGeosTranslateable>) nil_chk(self->out_)) setUndefined];
    return;
  }
  [self setOutGeo];
  if (![((id<OrgGeogebraCommonKernelGeosTranslateable>) nil_chk(self->out_)) isDefined]) {
    return;
  }
  [self->out_ translateWithOrgGeogebraCommonKernelMatrixCoords:[self getVectorCoords]];
  if ([self->inGeo_ isLimitedPath]) {
    [self transformLimitedPathWithOrgGeogebraCommonKernelGeosGeoElement:self->inGeo_ withOrgGeogebraCommonKernelGeosGeoElement:self->outGeo_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoTranslate)
