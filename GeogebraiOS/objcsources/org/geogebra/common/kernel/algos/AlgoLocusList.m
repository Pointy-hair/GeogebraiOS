//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoLocusList.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/MyPoint.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/PathMover.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoLocus.h"
#include "org/geogebra/common/kernel/algos/AlgoLocusList.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoLocus.h"
#include "org/geogebra/common/kernel/geos/GeoLocusND.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelAlgosAlgoLocusList () {
 @public
  OrgGeogebraCommonKernelGeosGeoPoint *movingPoint_, *locusPoint_;
  OrgGeogebraCommonKernelGeosGeoLocus *locus_;
  IOSObjectArray *efficientInput_AlgoLocusList_, *standardInput_;
  id<OrgGeogebraCommonKernelPath> path_;
  jboolean foundDefined_;
  JavaUtilTreeSet *Qin_;
  jboolean shouldUpdateScreenBorders_;
}

- (void)fillLocusArrayWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)Q
                      withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P;

+ (jboolean)isPathIterableWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoElement;

- (void)insertPointWithDouble:(jdouble)x
                   withDouble:(jdouble)y
                  withBoolean:(jboolean)lineTo;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusList, movingPoint_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusList, locusPoint_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusList, locus_, OrgGeogebraCommonKernelGeosGeoLocus *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusList, efficientInput_AlgoLocusList_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusList, standardInput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusList, path_, id<OrgGeogebraCommonKernelPath>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusList, Qin_, JavaUtilTreeSet *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoLocusList_fillLocusArrayWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoLocusList *self, OrgGeogebraCommonKernelGeosGeoPoint *Q, OrgGeogebraCommonKernelGeosGeoPoint *P);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoLocusList_compute(OrgGeogebraCommonKernelAlgosAlgoLocusList *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoLocusList_isPathIterableWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *geoElement);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoLocusList_insertPointWithDouble_withDouble_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoLocusList *self, jdouble x, jdouble y, jboolean lineTo);

jint OrgGeogebraCommonKernelAlgosAlgoLocusList_MIN_STEPS_REALLY_ = 16;

@implementation OrgGeogebraCommonKernelAlgosAlgoLocusList

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)Q
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                                                    withInt:(jint)try_steps {
  OrgGeogebraCommonKernelAlgosAlgoLocusList_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withInt_(self, cons, Q, P, try_steps);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)Q
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P {
  OrgGeogebraCommonKernelAlgosAlgoLocusList_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, cons, label, Q, P);
  return self;
}

- (void)fillLocusArrayWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)Q
                      withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P {
  OrgGeogebraCommonKernelAlgosAlgoLocusList_fillLocusArrayWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, Q, P);
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Locus();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_LOCUS;
}

- (JavaUtilArrayList *)getMoveableInputPoints {
  return nil;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getQ {
  return locusPoint_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getLocusPoint {
  return locusPoint_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getMovingPoint {
  return movingPoint_;
}

- (void)setInputOutput {
  JavaUtilTreeSet *inSet = new_JavaUtilTreeSet_init();
  [inSet addWithId:[((id<OrgGeogebraCommonKernelPath>) nil_chk(path_)) toGeoElement]];
  Qin_ = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(locusPoint_)) getAllPredecessors];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(Qin_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent] || [geo isPointOnPath]) {
      [inSet addWithId:geo];
    }
  }
  [inSet removeWithId:movingPoint_];
  efficientInput_AlgoLocusList_ = [IOSObjectArray newArrayWithLength:[inSet size] type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  it = [inSet iterator];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    (void) IOSObjectArray_Set(efficientInput_AlgoLocusList_, i, [it next]);
    i++;
  }
  standardInput_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(standardInput_, 0, locusPoint_);
  (void) IOSObjectArray_Set(standardInput_, 1, movingPoint_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:locus_];
  [self setEfficientDependenciesWithOrgGeogebraCommonKernelGeosGeoElementArray:standardInput_ withOrgGeogebraCommonKernelGeosGeoElementArray:efficientInput_AlgoLocusList_];
}

- (OrgGeogebraCommonKernelGeosGeoLocus *)getLocus {
  return locus_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoLocusList_compute(self);
}

+ (jboolean)isPathIterableWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoElement {
  return OrgGeogebraCommonKernelAlgosAlgoLocusList_isPathIterableWithOrgGeogebraCommonKernelGeosGeoElement_(geoElement);
}

- (void)insertPointWithDouble:(jdouble)x
                   withDouble:(jdouble)y
                  withBoolean:(jboolean)lineTo {
  OrgGeogebraCommonKernelAlgosAlgoLocusList_insertPointWithDouble_withDouble_withBoolean_(self, x, y, lineTo);
}

- (jboolean)euclidianViewUpdate {
  [self updateScreenBorders];
  [self update];
  return NO;
}

- (void)updateScreenBorders {
  shouldUpdateScreenBorders_ = YES;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withInt:", "AlgoLocusList", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "AlgoLocusList", NULL, 0x1, NULL, NULL },
    { "fillLocusArrayWithOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "fillLocusArray", "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getMoveableInputPoints", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getQ", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getLocusPoint", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getMovingPoint", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getLocus", NULL, "Lorg.geogebra.common.kernel.geos.GeoLocus;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "isPathIterableWithOrgGeogebraCommonKernelGeosGeoElement:", "isPathIterable", "Z", 0xa, NULL, NULL },
    { "insertPointWithDouble:withDouble:withBoolean:", "insertPoint", "V", 0x2, NULL, NULL },
    { "euclidianViewUpdate", NULL, "Z", 0x1, NULL, NULL },
    { "updateScreenBorders", NULL, "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_STEPS_REALLY_", NULL, 0x9, "I", &OrgGeogebraCommonKernelAlgosAlgoLocusList_MIN_STEPS_REALLY_, NULL,  },
    { "arrLocus_", NULL, 0x0, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/algos/AlgoElement;>;",  },
    { "movingPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "locusPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "locus_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLocus;", NULL, NULL,  },
    { "efficientInput_AlgoLocusList_", "efficientInput", 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "standardInput_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "path_", NULL, 0x2, "Lorg.geogebra.common.kernel.Path;", NULL, NULL,  },
    { "foundDefined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "Qin_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "shouldUpdateScreenBorders_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoLocusList = { 2, "AlgoLocusList", "org.geogebra.common.kernel.algos", NULL, 0x1, 16, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoLocusList;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoLocusList_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withInt_(OrgGeogebraCommonKernelAlgosAlgoLocusList *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoPoint *Q, OrgGeogebraCommonKernelGeosGeoPoint *P, jint try_steps) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->shouldUpdateScreenBorders_ = NO;
  self->movingPoint_ = P;
  self->locusPoint_ = Q;
  self->path_ = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getPath];
  self->locus_ = new_OrgGeogebraCommonKernelGeosGeoLocus_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoLocusList_compute(self);
  [((id<OrgGeogebraCommonKernelPath>) nil_chk(self->path_)) pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
}

OrgGeogebraCommonKernelAlgosAlgoLocusList *new_OrgGeogebraCommonKernelAlgosAlgoLocusList_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withInt_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoPoint *Q, OrgGeogebraCommonKernelGeosGeoPoint *P, jint try_steps) {
  OrgGeogebraCommonKernelAlgosAlgoLocusList *self = [OrgGeogebraCommonKernelAlgosAlgoLocusList alloc];
  OrgGeogebraCommonKernelAlgosAlgoLocusList_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withInt_(self, cons, Q, P, try_steps);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoLocusList_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoLocusList *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *Q, OrgGeogebraCommonKernelGeosGeoPoint *P) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->shouldUpdateScreenBorders_ = NO;
  self->movingPoint_ = P;
  self->locusPoint_ = Q;
  self->path_ = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getPath];
  self->locus_ = new_OrgGeogebraCommonKernelGeosGeoLocus_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self updateScreenBorders];
  [self setInputOutput];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) registerEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:self];
  OrgGeogebraCommonKernelAlgosAlgoLocusList_compute(self);
  [((id<OrgGeogebraCommonKernelPath>) nil_chk(self->path_)) pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
  [self->locus_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoLocusList *new_OrgGeogebraCommonKernelAlgosAlgoLocusList_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *Q, OrgGeogebraCommonKernelGeosGeoPoint *P) {
  OrgGeogebraCommonKernelAlgosAlgoLocusList *self = [OrgGeogebraCommonKernelAlgosAlgoLocusList alloc];
  OrgGeogebraCommonKernelAlgosAlgoLocusList_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, cons, label, Q, P);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoLocusList_fillLocusArrayWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoLocusList *self, OrgGeogebraCommonKernelGeosGeoPoint *Q, OrgGeogebraCommonKernelGeosGeoPoint *P) {
  if (self->arrLocus_ == nil) self->arrLocus_ = new_JavaUtilArrayList_init();
  OrgGeogebraCommonKernelGeosGeoElement *actel, *pathp;
  OrgGeogebraCommonKernelAlgosAlgoElement *actal;
  id<OrgGeogebraCommonKernelPath> oldel;
  @try {
    jint try_steps = OrgGeogebraCommonKernelPathMover_MIN_STEPS / [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->path_, [OrgGeogebraCommonKernelGeosGeoList class])))) size] + 1;
    if (try_steps < OrgGeogebraCommonKernelAlgosAlgoLocusList_MIN_STEPS_REALLY_) {
      try_steps = OrgGeogebraCommonKernelAlgosAlgoLocusList_MIN_STEPS_REALLY_;
    }
    jint arrLocusSize = [((JavaUtilArrayList *) nil_chk(self->arrLocus_)) size];
    for (jint i = arrLocusSize - 1; i >= [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->path_, [OrgGeogebraCommonKernelGeosGeoList class])))) size]; i--) {
      (void) [self->arrLocus_ removeWithInt:i];
    }
    arrLocusSize = [self->arrLocus_ size];
    for (jint i = 0; i < [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->path_, [OrgGeogebraCommonKernelGeosGeoList class])))) size]; i++) {
      actel = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->path_, [OrgGeogebraCommonKernelGeosGeoList class])))) getWithInt:i];
      if (actel != nil && [OrgGeogebraCommonKernelPath_class_() isInstance:actel]) {
        if (i < arrLocusSize) {
          if ([[self->arrLocus_ getWithInt:i] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoLocusList class]]) {
            oldel = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoLocusList *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoLocusList *) check_class_cast([self->arrLocus_ getWithInt:i], [OrgGeogebraCommonKernelAlgosAlgoLocusList class])))) getMovingPoint])) getPath];
          }
          else if ([[self->arrLocus_ getWithInt:i] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoLocus class]]) {
            oldel = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoLocus *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoLocus *) check_class_cast([self->arrLocus_ getWithInt:i], [OrgGeogebraCommonKernelAlgosAlgoLocus class])))) getMovingPoint])) getPath];
          }
          else {
            oldel = nil;
          }
          if (oldel == actel) {
            if (self->shouldUpdateScreenBorders_) {
              if ([[self->arrLocus_ getWithInt:i] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoLocus class]]) {
                [((OrgGeogebraCommonKernelAlgosAlgoLocus *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoLocus *) check_class_cast([self->arrLocus_ getWithInt:i], [OrgGeogebraCommonKernelAlgosAlgoLocus class])))) updateScreenBorders];
              }
              else if ([[self->arrLocus_ getWithInt:i] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoLocusList class]]) {
                [((OrgGeogebraCommonKernelAlgosAlgoLocusList *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoLocusList *) check_class_cast([self->arrLocus_ getWithInt:i], [OrgGeogebraCommonKernelAlgosAlgoLocusList class])))) updateScreenBorders];
              }
            }
            [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([self->arrLocus_ getWithInt:i])) compute];
            continue;
          }
        }
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) setPathWithOrgGeogebraCommonKernelPath:(id<OrgGeogebraCommonKernelPath>) check_protocol_cast(actel, @protocol(OrgGeogebraCommonKernelPath))];
        if ([actel isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]]) {
          if ([((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(actel, [OrgGeogebraCommonKernelGeosGeoList class])) shouldUseAlgoLocusListWithBoolean:YES]) {
            actal = new_OrgGeogebraCommonKernelAlgosAlgoLocusList_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withInt_(self->cons_, Q, P, try_steps);
            pathp = [((OrgGeogebraCommonKernelAlgosAlgoLocusList *) check_class_cast(actal, [OrgGeogebraCommonKernelAlgosAlgoLocusList class])) getLocus];
          }
          else {
            actal = new_OrgGeogebraCommonKernelAlgosAlgoLocus_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_withBoolean_(self->cons_, Q, P, try_steps, NO);
            pathp = [((OrgGeogebraCommonKernelAlgosAlgoLocus *) check_class_cast(actal, [OrgGeogebraCommonKernelAlgosAlgoLocus class])) getLocus];
          }
        }
        else {
          actal = new_OrgGeogebraCommonKernelAlgosAlgoLocus_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_withBoolean_(self->cons_, Q, P, try_steps, NO);
          pathp = [((OrgGeogebraCommonKernelAlgosAlgoLocus *) check_class_cast(actal, [OrgGeogebraCommonKernelAlgosAlgoLocus class])) getLocus];
        }
        [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromAlgorithmListWithOrgGeogebraCommonKernelAlgosAlgoElement:actal];
        [self->cons_ removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:actal];
        [self->cons_ removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:pathp];
        [P setPathWithOrgGeogebraCommonKernelPath:self->path_];
        if (i < arrLocusSize) (void) [self->arrLocus_ setWithInt:i withId:actal];
        else [self->arrLocus_ addWithId:actal];
      }
      else {
        if (i < arrLocusSize) (void) [self->arrLocus_ setWithInt:i withId:nil];
        else [self->arrLocus_ addWithId:nil];
      }
    }
  }
  @catch (JavaLangException *ex) {
    OrgGeogebraCommonMainApp_errorWithNSString_([((JavaLangException *) nil_chk(ex)) getMessage]);
  }
}

void OrgGeogebraCommonKernelAlgosAlgoLocusList_compute(OrgGeogebraCommonKernelAlgosAlgoLocusList *self) {
  if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->movingPoint_)) isDefined] || !OrgGeogebraCommonKernelAlgosAlgoLocusList_isPathIterableWithOrgGeogebraCommonKernelGeosGeoElement_([((id<OrgGeogebraCommonKernelPath>) nil_chk(self->path_)) toGeoElement])) {
    [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) setUndefined];
    return;
  }
  OrgGeogebraCommonKernelAlgosAlgoLocusList_fillLocusArrayWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, self->locusPoint_, self->movingPoint_);
  [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) clearPoints];
  self->foundDefined_ = NO;
  OrgGeogebraCommonKernelAlgosAlgoElement *actLocus;
  OrgGeogebraCommonKernelGeosGeoLocus *actGeo;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->arrLocus_)) size]; i++) {
    actLocus = [self->arrLocus_ getWithInt:i];
    if ([actLocus isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoLocusList class]]) actGeo = [((OrgGeogebraCommonKernelAlgosAlgoLocusList *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoLocusList *) check_class_cast(actLocus, [OrgGeogebraCommonKernelAlgosAlgoLocusList class])))) getLocus];
    else if ([actLocus isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoLocus class]]) actGeo = (OrgGeogebraCommonKernelGeosGeoLocus *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoLocus *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoLocus *) check_class_cast(actLocus, [OrgGeogebraCommonKernelAlgosAlgoLocus class])))) getLocus], [OrgGeogebraCommonKernelGeosGeoLocus class]);
    else continue;
    for (jint j = 0; j < [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(actGeo)) getPointLength]; j++) {
      OrgGeogebraCommonKernelAlgosAlgoLocusList_insertPointWithDouble_withDouble_withBoolean_(self, ((OrgGeogebraCommonKernelMyPoint *) nil_chk([((JavaUtilArrayList *) nil_chk([actGeo getPoints])) getWithInt:j]))->x_, ((OrgGeogebraCommonKernelMyPoint *) nil_chk([((JavaUtilArrayList *) nil_chk([actGeo getPoints])) getWithInt:j]))->y_, (j == 0) ? NO : ((OrgGeogebraCommonKernelMyPoint *) nil_chk([((JavaUtilArrayList *) nil_chk([actGeo getPoints])) getWithInt:j]))->lineTo_);
    }
    if ([actGeo getPointLength] > 0) self->foundDefined_ = YES;
  }
  [self->locus_ setDefinedWithBoolean:self->foundDefined_];
  self->shouldUpdateScreenBorders_ = NO;
}

jboolean OrgGeogebraCommonKernelAlgosAlgoLocusList_isPathIterableWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *geoElement) {
  OrgGeogebraCommonKernelAlgosAlgoLocusList_initialize();
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geoElement)) isGeoImplicitPoly]) return [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(geoElement, [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class])) isOnScreen];
  return [geoElement isDefined];
}

void OrgGeogebraCommonKernelAlgosAlgoLocusList_insertPointWithDouble_withDouble_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoLocusList *self, jdouble x, jdouble y, jboolean lineTo) {
  [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) insertPointWithDouble:x withDouble:y withBoolean:lineTo];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoLocusList)
