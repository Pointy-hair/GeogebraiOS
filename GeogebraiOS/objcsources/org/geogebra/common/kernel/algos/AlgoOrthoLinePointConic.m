//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoOrthoLinePointConic.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoClosestPoint.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoOrthoLinePointConic.h"
#include "org/geogebra/common/kernel/algos/AlgoPointOnPath.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic () {
 @public
  OrgGeogebraCommonKernelGeosGeoPoint *P_;
  OrgGeogebraCommonKernelGeosGeoConic *l_;
  IOSObjectArray *g_;
  IOSObjectArray *n_;
  IOSObjectArray *algoPoint_;
  OrgGeogebraCommonKernelAlgosAlgoClosestPoint *closestPoint_;
}

- (void)addIncidence;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic, P_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic, l_, OrgGeogebraCommonKernelGeosGeoConic *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic, g_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic, n_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic, algoPoint_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic, closestPoint_, OrgGeogebraCommonKernelAlgosAlgoClosestPoint *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic_addIncidence(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic_compute(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                    withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)l {
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoConic_(self, cons, label, P, l);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_OrthogonalLine();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL;
}

- (void)addIncidence {
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic_addIncidence(self);
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, P_);
  (void) IOSObjectArray_Set(input_, 1, [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(l_)) toGeoElement]);
  [self setOutputLengthWithInt:4];
  for (jint i = 0; i < 4; i++) [self setOutputWithInt:i withOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(g_), i)];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoConic *)getC {
  return l_;
}

- (IOSObjectArray *)getLines {
  return g_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getP {
  return P_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic_compute(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"LineThroughAPerpendicularToB" withNSString:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(l_)) toGeoElement])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoConic:", "AlgoOrthoLinePointConic", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "addIncidence", NULL, "V", 0x2, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "getC", NULL, "Lorg.geogebra.common.kernel.geos.GeoConic;", 0x0, NULL, NULL },
    { "getLines", NULL, "[Lorg.geogebra.common.kernel.geos.GeoLine;", 0x0, NULL, NULL },
    { "getP", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "l_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
    { "g_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "n_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "algoPoint_", NULL, 0x2, "[Lorg.geogebra.common.kernel.algos.AlgoPointOnPath;", NULL, NULL,  },
    { "closestPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.algos.AlgoClosestPoint;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic = { 2, "AlgoOrthoLinePointConic", "org.geogebra.common.kernel.algos", NULL, 0x1, 10, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *P, OrgGeogebraCommonKernelGeosGeoConic *l) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->P_ = P;
  self->l_ = l;
  self->g_ = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelGeosGeoLine_class_()];
  self->n_ = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelGeosGeoNumeric_class_()];
  self->algoPoint_ = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelAlgosAlgoPointOnPath_class_()];
  self->closestPoint_ = new_OrgGeogebraCommonKernelAlgosAlgoClosestPoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelPath_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons, l, P);
  for (jint i = 0; i < 4; i++) {
    (void) IOSObjectArray_Set(self->g_, i, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons));
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->g_, i))) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:P];
    (void) IOSObjectArray_Set(self->n_, i, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons));
    (void) IOSObjectArray_Set(self->algoPoint_, i, new_OrgGeogebraCommonKernelAlgosAlgoPointOnPath_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelPath_withDouble_withDouble_withOrgGeogebraCommonKernelArithmeticNumberValue_(cons, l, 0, 0, IOSObjectArray_Get(self->n_, i)));
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:IOSObjectArray_Get(self->algoPoint_, i)];
  }
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic_compute(self);
  for (jint i = 0; i < 4; i++) [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->g_, 0))) setLabelWithNSString:label];
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic_addIncidence(self);
}

OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic *new_OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *P, OrgGeogebraCommonKernelGeosGeoConic *l) {
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic *self = [OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic alloc];
  OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoConic_(self, cons, label, P, l);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic_addIncidence(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic *self) {
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->P_)) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(self->g_), 0) withBoolean:NO];
}

void OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic_compute(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic *self) {
  OrgGeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoLine_(self->P_, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoClosestPoint *) nil_chk(self->closestPoint_)) getP], [OrgGeogebraCommonKernelGeosGeoPoint class]), IOSObjectArray_Get(nil_chk(self->g_), 0));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoOrthoLinePointConic)
