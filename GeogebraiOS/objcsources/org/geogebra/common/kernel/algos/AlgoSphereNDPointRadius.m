//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoSphereNDPointRadius.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoSphereNDPointRadius.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"

@interface OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> M_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> r_;
  OrgGeogebraCommonKernelGeosGeoElement *rgeo_;
  OrgGeogebraCommonKernelKernelNDGeoQuadricND *sphereND_;
  jint type_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius, M_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius, r_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius, rgeo_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius, sphereND_, OrgGeogebraCommonKernelKernelNDGeoQuadricND *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_compute(OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)M
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r {
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, M, r);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)M
            withOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)segment
                                                withBoolean:(jboolean)dummy {
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoSegmentND_withBoolean_(self, cons, label, M, segment, dummy);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)M
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r {
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, M, r);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)M
            withOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)rgeo {
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoSegmentND_(self, cons, M, rgeo);
  return self;
}

- (OrgGeogebraCommonKernelKernelNDGeoQuadricND *)createSphereNDWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(M_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, rgeo_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:sphereND_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelKernelNDGeoQuadricND *)getSphereND {
  return sphereND_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getM {
  return M_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getCenter {
  return [self getM];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getRGeo {
  return rgeo_;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getRadiusGeo {
  return [self getRGeo];
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_compute(self);
}

- (jint)getType {
  return self->type_;
}

- (void)setRadiusWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)newRadius {
  if (type_ == OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_RADIUS) {
    OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_r_(self, newRadius);
    OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_rgeo_(self, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(newRadius)) toGeoElement]);
    IOSObjectArray_Set(nil_chk(self->input_), 1, rgeo_);
    [self update];
  }
}

- (void)dealloc {
  RELEASE_(M_);
  RELEASE_(r_);
  RELEASE_(rgeo_);
  RELEASE_(sphereND_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoSphereNDPointRadius", NULL, 0x4, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoSegmentND:withBoolean:", "AlgoSphereNDPointRadius", NULL, 0x4, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoSphereNDPointRadius", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoSegmentND:", "AlgoSphereNDPointRadius", NULL, 0x4, NULL, NULL },
    { "createSphereNDWithOrgGeogebraCommonKernelConstruction:", "createSphereND", "Lorg.geogebra.common.kernel.kernelND.GeoQuadricND;", 0x404, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getSphereND", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoQuadricND;", 0x1, NULL, NULL },
    { "getM", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getCenter", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getRGeo", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "getRadiusGeo", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getType", NULL, "I", 0x4, NULL, NULL },
    { "setRadiusWithOrgGeogebraCommonKernelArithmeticNumberValue:", "setRadius", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "M_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "r_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "rgeo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "sphereND_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoQuadricND;", NULL, NULL,  },
    { "type_", NULL, 0x2, "I", NULL, NULL,  },
    { "TYPE_RADIUS_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_RADIUS },
    { "TYPE_SEGMENT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_SEGMENT },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius = { 2, "AlgoSphereNDPointRadius", "org.geogebra.common.kernel.algos", NULL, 0x401, 14, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> M, id<OrgGeogebraCommonKernelArithmeticNumberValue> r) {
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, M, r);
  [((OrgGeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(self->sphereND_)) setLabelWithNSString:label];
}

void OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoSegmentND_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> M, id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> segment, jboolean dummy) {
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoSegmentND_(self, cons, M, segment);
  [((OrgGeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(self->sphereND_)) setLabelWithNSString:label];
}

void OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> M, id<OrgGeogebraCommonKernelArithmeticNumberValue> r) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->type_ = OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_RADIUS;
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_M_(self, M);
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_r_(self, r);
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_rgeo_(self, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) toGeoElement]);
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_sphereND_(self, [self createSphereNDWithOrgGeogebraCommonKernelConstruction:cons]);
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_compute(self);
}

void OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoSegmentND_(OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> M, id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> rgeo) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->type_ = OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_SEGMENT;
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_M_(self, M);
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_rgeo_(self, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(rgeo, [OrgGeogebraCommonKernelGeosGeoElement class]));
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_sphereND_(self, [self createSphereNDWithOrgGeogebraCommonKernelConstruction:cons]);
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_compute(self);
}

void OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_compute(OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius *self) {
  switch (self->type_) {
    case OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_RADIUS:
    [((OrgGeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(self->sphereND_)) setSphereNDWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->M_ withDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->r_)) getDouble]];
    break;
    case OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_SEGMENT:
    [((OrgGeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(self->sphereND_)) setSphereNDWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->M_ withOrgGeogebraCommonKernelKernelNDGeoSegmentND:(OrgGeogebraCommonKernelGeosGeoSegment *) check_class_cast(self->rgeo_, [OrgGeogebraCommonKernelGeosGeoSegment class])];
    break;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoSphereNDPointRadius)
