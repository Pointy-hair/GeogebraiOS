//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoFunctionFreehand.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoFunctionFreehand.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *inputList_;
  OrgGeogebraCommonKernelGeosGeoFunction *g_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand, inputList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand, g_, OrgGeogebraCommonKernelGeosGeoFunction *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_compute(OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)f {
  OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, f);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)f {
  OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, f);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Function();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, inputList_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getFunction {
  return g_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_compute(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if ([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(inputList_)) size] < 4 || ![((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk([inputList_ getElementType])) isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC()]) return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"FreehandFunctionOnIntervalAB" withNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([inputList_ getWithInt:0], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble] withOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[kernel_ formatWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([inputList_ getWithInt:1], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble] withOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getList {
  return inputList_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoFunctionFreehand", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoFunctionFreehand", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFunction", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getList", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand = { 2, "AlgoFunctionFreehand", "org.geogebra.common.kernel.algos", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *f) {
  (void) OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, f);
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *new_OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *f) {
  OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *self = [OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand alloc];
  OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, f);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *f) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->inputList_ = f;
  self->g_ = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons);
  OrgGeogebraCommonKernelArithmeticFunctionVariable *X = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(self->kernel_);
  OrgGeogebraCommonKernelArithmeticExpressionNode *expr = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, X, OrgGeogebraCommonPluginOperationEnum_get_SIN(), nil);
  OrgGeogebraCommonKernelArithmeticFunction *fun = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(expr, X);
  [self->g_ setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:fun];
  [self->g_ setDefinedWithBoolean:NO];
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_compute(self);
}

OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *new_OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *f) {
  OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *self = [OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand alloc];
  OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, f);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand_compute(OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *self) {
  if (!([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) isDefined]) || ![((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk([self->inputList_ getElementType])) isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC()] || [self->inputList_ size] < 4) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  OrgGeogebraCommonKernelArithmeticFunctionVariable *X = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(self->kernel_);
  OrgGeogebraCommonKernelArithmeticExpressionNode *expr = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, X, OrgGeogebraCommonPluginOperationEnum_get_FREEHAND(), self->inputList_);
  OrgGeogebraCommonKernelArithmeticFunction *fun = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(expr, X);
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:fun];
  [self->g_ setDefinedWithBoolean:YES];
  [self->g_ setIntervalWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->inputList_ getWithInt:0], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble] withDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->inputList_ getWithInt:1], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand)
