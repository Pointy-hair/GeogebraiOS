//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoFirstLocus.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/MyPoint.h"
#include "org/geogebra/common/kernel/algos/AlgoFirst.h"
#include "org/geogebra/common/kernel/algos/AlgoFirstLocus.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoLocus.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"

@implementation OrgGeogebraCommonKernelAlgosAlgoFirstLocus

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoLocus:(OrgGeogebraCommonKernelGeosGeoLocus *)inputLocus
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n {
  OrgGeogebraCommonKernelAlgosAlgoFirstLocus_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLocus_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputLocus, n);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_First();
}

- (void)compute {
  JavaUtilArrayList *points = [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLocus *) check_class_cast(inputList_, [OrgGeogebraCommonKernelGeosGeoLocus class])))) getPoints];
  size_ = [((JavaUtilArrayList *) nil_chk(points)) size];
  jint outsize = n_ == nil ? 1 : J2ObjCFpToInt([n_ getDouble]);
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(inputList_)) isDefined] || size_ == 0 || outsize < 0 || outsize > size_) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(outputList_)) setUndefined];
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(outputList_)) setDefinedWithBoolean:YES];
  if (outsize == 0) {
    [outputList_ clear];
    return;
  }
  jint outputListSize = [outputList_ size];
  if ([outputList_ size] > outsize) {
    for (jint i = outputListSize - 1; i >= outsize; i--) {
      [outputList_ removeWithInt:i];
    }
  }
  jboolean oldSuppressLabels = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  for (jint i = 0; i < outsize; i++) {
    OrgGeogebraCommonKernelMyPoint *mp = [points getWithInt:i];
    if (i < [outputList_ size]) {
      OrgGeogebraCommonKernelGeosGeoPoint *p = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([outputList_ getWithInt:i], [OrgGeogebraCommonKernelGeosGeoPoint class]);
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setCoordsWithDouble:((OrgGeogebraCommonKernelMyPoint *) nil_chk(mp))->x_ withDouble:mp->y_ withDouble:1.0];
      [p updateRepaint];
    }
    else {
      OrgGeogebraCommonKernelGeosGeoPoint *p = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons_, nil, ((OrgGeogebraCommonKernelMyPoint *) nil_chk(mp))->x_, mp->y_, 1.0) autorelease];
      [outputList_ addWithOrgGeogebraCommonKernelGeosGeoElement:p];
    }
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldSuppressLabels];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoLocus:withOrgGeogebraCommonKernelGeosGeoNumeric:", "AlgoFirstLocus", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoFirstLocus = { 2, "AlgoFirstLocus", "org.geogebra.common.kernel.algos", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoFirstLocus;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoFirstLocus_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLocus_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelAlgosAlgoFirstLocus *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoLocus *inputLocus, OrgGeogebraCommonKernelGeosGeoNumeric *n) {
  OrgGeogebraCommonKernelAlgosAlgoFirst_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputLocus, n);
}

OrgGeogebraCommonKernelAlgosAlgoFirstLocus *new_OrgGeogebraCommonKernelAlgosAlgoFirstLocus_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLocus_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoLocus *inputLocus, OrgGeogebraCommonKernelGeosGeoNumeric *n) {
  OrgGeogebraCommonKernelAlgosAlgoFirstLocus *self = [OrgGeogebraCommonKernelAlgosAlgoFirstLocus alloc];
  OrgGeogebraCommonKernelAlgosAlgoFirstLocus_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLocus_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputLocus, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoFirstLocus)
