//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoRotateVector.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoRotateVector.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoRotateVector () {
 @public
  OrgGeogebraCommonKernelGeosGeoVector *A_;
  OrgGeogebraCommonKernelGeosGeoNumeric *angle_;
  OrgGeogebraCommonKernelGeosGeoVector *B_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoRotateVector, A_, OrgGeogebraCommonKernelGeosGeoVector *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoRotateVector, angle_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoRotateVector, B_, OrgGeogebraCommonKernelGeosGeoVector *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoRotateVector_compute(OrgGeogebraCommonKernelAlgosAlgoRotateVector *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoRotateVector

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                   withOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)A
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)angle {
  OrgGeogebraCommonKernelAlgosAlgoRotateVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoVector_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, A, angle);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Rotate();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE;
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, A_);
  (void) IOSObjectArray_Set(input_, 1, angle_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:B_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoVector *)getVector {
  return A_;
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getAngle {
  return angle_;
}

- (OrgGeogebraCommonKernelGeosGeoVector *)getRotatedVector {
  return B_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoRotateVector_compute(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"ARotatedByAngleB" withNSString:[((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(A_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(angle_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoVector:withOrgGeogebraCommonKernelGeosGeoNumeric:", "AlgoRotateVector", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getVector", NULL, "Lorg.geogebra.common.kernel.geos.GeoVector;", 0x0, NULL, NULL },
    { "getAngle", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x0, NULL, NULL },
    { "getRotatedVector", NULL, "Lorg.geogebra.common.kernel.geos.GeoVector;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
    { "angle_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "B_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoRotateVector = { 2, "AlgoRotateVector", "org.geogebra.common.kernel.algos", NULL, 0x1, 9, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoRotateVector;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoRotateVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoVector_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelAlgosAlgoRotateVector *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoVector *A, OrgGeogebraCommonKernelGeosGeoNumeric *angle) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->A_ = A;
  self->angle_ = angle;
  self->B_ = new_OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoRotateVector_compute(self);
  [self->B_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoRotateVector *new_OrgGeogebraCommonKernelAlgosAlgoRotateVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoVector_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoVector *A, OrgGeogebraCommonKernelGeosGeoNumeric *angle) {
  OrgGeogebraCommonKernelAlgosAlgoRotateVector *self = [OrgGeogebraCommonKernelAlgosAlgoRotateVector alloc];
  OrgGeogebraCommonKernelAlgosAlgoRotateVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoVector_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, A, angle);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoRotateVector_compute(OrgGeogebraCommonKernelAlgosAlgoRotateVector *self) {
  [((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(self->B_)) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:self->A_];
  [self->B_ rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:self->angle_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoRotateVector)
