//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoDependentListExpression.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentListExpression.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/Algos.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyBoolean.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/VectorValue.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonKernelAlgosAlgoDependentListExpression () {
 @public
  OrgGeogebraCommonKernelArithmeticExpressionNode *root_;
  OrgGeogebraCommonKernelGeosGeoList *list_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentListExpression, root_, OrgGeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoDependentListExpression, list_, OrgGeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_compute(OrgGeogebraCommonKernelAlgosAlgoDependentListExpression *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoDependentListExpression

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
        withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root {
  OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, cons, label, root);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
        withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)root {
  OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, cons, root);
  return self;
}

- (OrgGeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return OrgGeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (void)setInputOutput {
  input_ = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) getGeoElementVariables];
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:list_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getList {
  return list_;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getExpression {
  return root_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_compute(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "AlgoDependentListExpression", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "AlgoDependentListExpression", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getList", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getExpression", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "root_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "list_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoDependentListExpression = { 2, "AlgoDependentListExpression", "org.geogebra.common.kernel.algos", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoDependentListExpression;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelAlgosAlgoDependentListExpression *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root) {
  (void) OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, cons, root);
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoDependentListExpression *new_OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelArithmeticExpressionNode *root) {
  OrgGeogebraCommonKernelAlgosAlgoDependentListExpression *self = [OrgGeogebraCommonKernelAlgosAlgoDependentListExpression alloc];
  OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, cons, label, root);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelAlgosAlgoDependentListExpression *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelArithmeticExpressionNode *root) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->root_ = root;
  self->list_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_compute(self);
}

OrgGeogebraCommonKernelAlgosAlgoDependentListExpression *new_OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelArithmeticExpressionNode *root) {
  OrgGeogebraCommonKernelAlgosAlgoDependentListExpression *self = [OrgGeogebraCommonKernelAlgosAlgoDependentListExpression alloc];
  OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(self, cons, root);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoDependentListExpression_compute(OrgGeogebraCommonKernelAlgosAlgoDependentListExpression *self) {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> evlist = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->root_)) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  OrgGeogebraCommonKernelArithmeticMyList *myList = ([evlist isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]]) ? (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(evlist, [OrgGeogebraCommonKernelArithmeticMyList class]) : [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(evlist, [OrgGeogebraCommonKernelGeosGeoList class])))) getMyList];
  if (![myList isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) setUndefined];
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) setDefinedWithBoolean:YES];
  jint evalListSize = [myList size];
  jint cachedListSize = [self->list_ getCacheSize];
  [self->list_ clear];
  for (jint i = 0; i < evalListSize; i++) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> element = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([myList getListElementWithInt:i])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    OrgGeogebraCommonKernelGeosGeoElement *geo = nil;
    if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:element]) {
      jdouble val = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(element, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
      if (i < cachedListSize) {
        OrgGeogebraCommonKernelGeosGeoElement *cachedGeo = [self->list_ getCachedWithInt:i];
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) isGeoNumeric]) {
          [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(cachedGeo, [OrgGeogebraCommonKernelGeosGeoNumeric class])) setValueWithDouble:val];
          geo = cachedGeo;
        }
      }
      if (geo == nil) {
        geo = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, val);
      }
      [self->list_ addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    else if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:element]) {
      OrgGeogebraCommonKernelGeosGeoVec2D *vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(element, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
      if (i < cachedListSize) {
        OrgGeogebraCommonKernelGeosGeoElement *cachedGeo = [self->list_ getCachedWithInt:i];
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) isGeoPoint]) {
          [((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(cachedGeo, [OrgGeogebraCommonKernelGeosGeoPoint class])) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec2D:vec];
          geo = cachedGeo;
        }
      }
      if (geo == nil) {
        OrgGeogebraCommonKernelGeosGeoPoint *point = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
        [point setCoordsWithOrgGeogebraCommonKernelGeosGeoVec2D:vec];
        geo = point;
      }
      [self->list_ addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    else if ([element isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]]) {
      OrgGeogebraCommonKernelArithmeticMyList *myList2 = (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(element, [OrgGeogebraCommonKernelArithmeticMyList class]);
      OrgGeogebraCommonKernelGeosGeoList *list2 = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
      [list2 clear];
      for (jint j = 0; j < [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(myList2)) size]; j++) {
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> en = [myList2 getListElementWithInt:j];
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(en)) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
        if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]]) {
          OrgGeogebraCommonKernelGeosGeoNumeric *geo2 = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
          [geo2 setValueWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(ev, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble]];
          [list2 addWithOrgGeogebraCommonKernelGeosGeoElement:geo2];
        }
      }
      [self->list_ addWithOrgGeogebraCommonKernelGeosGeoElement:list2];
    }
    else if ([element isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyStringBuffer class]]) {
      OrgGeogebraCommonKernelArithmeticMyStringBuffer *str = (OrgGeogebraCommonKernelArithmeticMyStringBuffer *) check_class_cast(element, [OrgGeogebraCommonKernelArithmeticMyStringBuffer class]);
      if (i < cachedListSize) {
        OrgGeogebraCommonKernelGeosGeoElement *cachedGeo = [self->list_ getCachedWithInt:i];
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) isGeoText]) {
          [((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(cachedGeo, [OrgGeogebraCommonKernelGeosGeoText class])) setTextStringWithNSString:[((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(str)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
          geo = cachedGeo;
        }
      }
      if (geo == nil) {
        OrgGeogebraCommonKernelGeosGeoText *text = new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
        [text setTextStringWithNSString:[((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(str)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
        geo = text;
      }
      [self->list_ addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    else if ([element isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyBoolean class]]) {
      OrgGeogebraCommonKernelArithmeticMyBoolean *bool_ = (OrgGeogebraCommonKernelArithmeticMyBoolean *) check_class_cast(element, [OrgGeogebraCommonKernelArithmeticMyBoolean class]);
      if (i < cachedListSize) {
        OrgGeogebraCommonKernelGeosGeoElement *cachedGeo = [self->list_ getCachedWithInt:i];
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) isGeoBoolean]) {
          [((OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(cachedGeo, [OrgGeogebraCommonKernelGeosGeoBoolean class])) setValueWithBoolean:[((OrgGeogebraCommonKernelArithmeticMyBoolean *) nil_chk(bool_)) getBoolean]];
          geo = cachedGeo;
        }
      }
      if (geo == nil) {
        OrgGeogebraCommonKernelGeosGeoBoolean *geoBool = new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
        [geoBool setValueWithBoolean:[((OrgGeogebraCommonKernelArithmeticMyBoolean *) nil_chk(bool_)) getBoolean]];
        geo = geoBool;
      }
      [self->list_ addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    else if ([element isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
      OrgGeogebraCommonKernelGeosGeoFunction *fun = (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(element, [OrgGeogebraCommonKernelGeosGeoFunction class]);
      if (i < cachedListSize) {
        OrgGeogebraCommonKernelGeosGeoElement *cachedGeo = [self->list_ getCachedWithInt:i];
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) isGeoFunction]) {
          [((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(cachedGeo, [OrgGeogebraCommonKernelGeosGeoFunction class])) setWithOrgGeogebraCommonKernelGeosGeoElement:fun];
          geo = cachedGeo;
        }
      }
      if (geo == nil) {
        OrgGeogebraCommonKernelGeosGeoFunction *geoFun = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
        [geoFun setWithOrgGeogebraCommonKernelGeosGeoElement:fun];
        geo = geoFun;
      }
      [self->list_ addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    else if ([element isKindOfClass:[OrgGeogebraCommonKernelGeosGeoText class]]) {
      OrgGeogebraCommonKernelGeosGeoText *text = (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(element, [OrgGeogebraCommonKernelGeosGeoText class]);
      if (i < cachedListSize) {
        OrgGeogebraCommonKernelGeosGeoElement *cachedGeo = [self->list_ getCachedWithInt:i];
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) isGeoText]) {
          [((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(cachedGeo, [OrgGeogebraCommonKernelGeosGeoText class])) setWithOrgGeogebraCommonKernelGeosGeoElement:text];
          geo = cachedGeo;
        }
      }
      if (geo == nil) {
        OrgGeogebraCommonKernelGeosGeoText *geoFun = new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
        [geoFun setWithOrgGeogebraCommonKernelGeosGeoElement:text];
        geo = geoFun;
      }
      [self->list_ addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    else if ([element isKindOfClass:[OrgGeogebraCommonKernelGeosGeoElement class]]) {
      OrgGeogebraCommonKernelGeosGeoElement *geo0 = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(element, [OrgGeogebraCommonKernelGeosGeoElement class]);
      if (i < cachedListSize) {
        OrgGeogebraCommonKernelGeosGeoElement *cachedGeo = [self->list_ getCachedWithInt:i];
        if ([((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) getGeoClassType])) isEqual:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getGeoClassType]]) {
          [cachedGeo setWithOrgGeogebraCommonKernelGeosGeoElement:geo0];
          geo = cachedGeo;
        }
      }
      if (geo == nil) {
        geo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) copy__];
      }
      [self->list_ addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
    else {
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"unsupported list operation: ", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(element)) getClass]));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoDependentListExpression)
