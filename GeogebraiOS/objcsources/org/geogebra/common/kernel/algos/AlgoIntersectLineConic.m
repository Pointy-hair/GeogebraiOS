//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoIntersectLineConic.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/LocusEquation.h"
#include "org/geogebra/common/kernel/PointPairList.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersect.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectConics.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "org/geogebra/common/kernel/algos/EquationElementInterface.h"
#include "org/geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "org/geogebra/common/kernel/algos/TangentAlgo.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "org/geogebra/common/kernel/prover/polynomial/Variable.h"

@interface OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic () {
 @public
  IOSObjectArray *D_;
  JavaUtilHashMap *botanaPolynomials_;
  JavaUtilHashMap *botanaVars_;
  IOSIntArray *age_;
  IOSIntArray *permutation_;
  IOSObjectArray *distTable_;
  IOSBooleanArray *isQonPath_;
  IOSBooleanArray *isPalive_;
  jboolean isDefinedAsTangent_;
  jboolean firstIntersection_;
  jboolean isPermutationNeeded_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> tangentPoint_;
  OrgGeogebraCommonKernelPointPairList *pointList_;
  jboolean isLimitedPathSituation_;
}

- (void)addIncidence;

- (jboolean)handleSpecialCase;

- (jboolean)handleSpecialCasePointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p;

- (void)computeNonContinous;

- (void)computeContinous;

- (void)handleLimitedPaths;

- (void)updateQonPath;

- (jboolean)pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P;

- (jint)intersectWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c
            withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)sol;

+ (jboolean)testPointsWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g
                     withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c
                withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)P
                                                  withDouble:(jdouble)eps;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic, D_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic, botanaPolynomials_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic, botanaVars_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic, age_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic, permutation_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic, distTable_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic, isQonPath_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic, isPalive_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic, tangentPoint_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic, pointList_, OrgGeogebraCommonKernelPointPairList *)

static IOSDoubleArray *OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_xyz_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic, xyz_, IOSDoubleArray *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic, xyz_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_addIncidence(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_initForNearToRelationship(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleSpecialCase(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleSpecialCasePointWithOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self, OrgGeogebraCommonKernelGeosGeoPoint *p);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_computeNonContinous(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_computeContinous(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleLimitedPaths(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_updateQonPath(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self, OrgGeogebraCommonKernelGeosGeoPoint *P);

__attribute__((unused)) static jint OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self, OrgGeogebraCommonKernelGeosGeoConic *c, IOSObjectArray *sol);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_testPointsWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(OrgGeogebraCommonKernelGeosGeoLine *g, OrgGeogebraCommonKernelGeosGeoConic *c, IOSObjectArray *P, jdouble eps);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic)

@implementation OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                     withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g
                    withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_(self, cons, g, c);
  return self;
}

- (void)addIncidence {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_addIncidence(self);
}

- (void)initElements {
  if (isDefinedAsTangent_) {
    OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_setAndConsume_P_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()]);
    IOSObjectArray_SetAndConsume(P_, 0, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_));
  }
  else {
    OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_setAndConsume_P_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()]);
    OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_setAndConsume_D_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()]);
    OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_setAndConsume_Q_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()]);
    OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_setAndConsume_distTable_(self, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ 2, 2 }]);
    OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_setAndConsume_age_(self, [IOSIntArray newArrayWithLength:2]);
    OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_setAndConsume_permutation_(self, [IOSIntArray newArrayWithLength:2]);
    OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_setAndConsume_isQonPath_(self, [IOSBooleanArray newArrayWithLength:2]);
    OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_setAndConsume_isPalive_(self, [IOSBooleanArray newArrayWithLength:2]);
    for (jint i = 0; i < 2; i++) {
      IOSObjectArray_SetAndConsume(Q_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_));
      IOSObjectArray_SetAndConsume(P_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_));
      IOSObjectArray_SetAndConsume(D_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_));
    }
    possibleSpecialCase_ = OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleSpecialCase(self);
  }
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, c_);
  IOSObjectArray_Set(input_, 1, g_);
  [super setOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:P_];
  [self noUndefinedPointsInAlgebraView];
  [self setDependencies];
}

- (IOSObjectArray *)getIntersectionPoints {
  return P_;
}

- (OrgGeogebraCommonKernelGeosGeoLine *)getLine {
  return g_;
}

- (OrgGeogebraCommonKernelGeosGeoConic *)getConic {
  return c_;
}

- (IOSObjectArray *)getLastDefinedIntersectionPoints {
  return D_;
}

- (jboolean)isNearToAlgorithm {
  return YES;
}

- (void)initForNearToRelationship {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_initForNearToRelationship(self);
}

- (void)compute {
  if (isDefinedAsTangent_) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(P_), 0))) setCoordsFromPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:tangentPoint_];
    return;
  }
  if (possibleSpecialCase_) {
    if (OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleSpecialCase(self)) return;
  }
  jboolean continous = isPermutationNeeded_ || [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isContinuous] || [kernel_ getLoadingMode];
  if (continous) {
    OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_computeContinous(self);
  }
  else {
    OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_computeNonContinous(self);
  }
  [self avoidDoubleTangentPoint];
}

- (jboolean)handleSpecialCase {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleSpecialCase(self);
}

- (jboolean)handleSpecialCasePointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleSpecialCasePointWithOrgGeogebraCommonKernelGeosGeoPoint_(self, p);
}

- (void)computeNonContinous {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_computeNonContinous(self);
}

- (void)computeContinous {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_computeContinous(self);
}

- (void)handleLimitedPaths {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleLimitedPaths(self);
}

- (void)updateQonPath {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_updateQonPath(self);
}

- (jboolean)pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(self, P);
}

- (jint)intersectWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c
            withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)sol {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_(self, c, sol);
}

+ (jint)intersectLineConicWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g
                   withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c
                    withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)sol
                                                      withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectLineConicWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(g, c, sol, eps);
}

+ (jboolean)testPointsWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g
                     withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c
                withOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)P
                                                  withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_testPointsWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(g, c, P, eps);
}

- (IOSObjectArray *)getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((JavaUtilHashMap *) nil_chk(botanaVars_)) getWithId:geo];
}

- (IOSObjectArray *)getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (botanaPolynomials_ != nil) {
    IOSObjectArray *ret = [botanaPolynomials_ getWithId:geo];
    if (ret != nil) return ret;
  }
  if (g_ != nil && c_ != nil && [c_ isCircle]) {
    IOSObjectArray *botanaVarsThis = [IOSObjectArray arrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
    if (botanaVars_ == nil) {
      OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_setAndConsume_botanaVars_(self, new_JavaUtilHashMap_init());
    }
    if ([((JavaUtilHashMap *) nil_chk(botanaVars_)) containsKeyWithId:geo]) {
      botanaVarsThis = [botanaVars_ getWithId:geo];
    }
    else {
      botanaVarsThis = [IOSObjectArray arrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
      IOSObjectArray_SetAndConsume(botanaVarsThis, 0, new_OrgGeogebraCommonKernelProverPolynomialVariable_init());
      IOSObjectArray_SetAndConsume(botanaVarsThis, 1, new_OrgGeogebraCommonKernelProverPolynomialVariable_init());
      [botanaVars_ putWithId:geo withId:botanaVarsThis];
    }
    IOSObjectArray *botanaPolynomialsThis = nil;
    IOSObjectArray *botanaVarsOther = [IOSObjectArray arrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([botanaVars_ keySet])) iterator];
    jboolean found = NO;
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonKernelGeosGeoElement *otherGeo = [it next];
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(otherGeo)) isEqual:geo]) {
        botanaPolynomialsThis = [IOSObjectArray arrayWithLength:3 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
        botanaVarsOther = [botanaVars_ getWithId:otherGeo];
        IOSObjectArray_Set(botanaPolynomialsThis, 2, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(OrgGeogebraCommonKernelProverPolynomialPolynomial_sqrDistanceWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(botanaVarsThis), 0), IOSObjectArray_Get(botanaVarsThis, 1), IOSObjectArray_Get(nil_chk(botanaVarsOther), 0), IOSObjectArray_Get(botanaVarsOther, 1)))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_([new_OrgGeogebraCommonKernelProverPolynomialVariable_init() autorelease]) autorelease]]))) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(1) autorelease]]);
        found = YES;
      }
    }
    if (!found) {
      botanaPolynomialsThis = [IOSObjectArray arrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
    }
    IOSObjectArray *vg = [g_ getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    IOSObjectArray *vc = [c_ getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    IOSObjectArray_Set(nil_chk(botanaPolynomialsThis), 0, OrgGeogebraCommonKernelProverPolynomialPolynomial_collinearWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(vg), 0), IOSObjectArray_Get(vg, 1), IOSObjectArray_Get(vg, 2), IOSObjectArray_Get(vg, 3), IOSObjectArray_Get(nil_chk(botanaVarsThis), 0), IOSObjectArray_Get(botanaVarsThis, 1)));
    IOSObjectArray_Set(botanaPolynomialsThis, 1, OrgGeogebraCommonKernelProverPolynomialPolynomial_equidistantWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(vc), 2), IOSObjectArray_Get(vc, 3), IOSObjectArray_Get(vc, 0), IOSObjectArray_Get(vc, 1), IOSObjectArray_Get(botanaVarsThis, 0), IOSObjectArray_Get(botanaVarsThis, 1)));
    if (botanaPolynomials_ == nil) {
      OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_setAndConsume_botanaPolynomials_(self, new_JavaUtilHashMap_init());
    }
    [((JavaUtilHashMap *) nil_chk(botanaPolynomials_)) putWithId:geo withId:botanaPolynomialsThis];
    return botanaPolynomialsThis;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<OrgGeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                         withOrgGeogebraCommonKernelAlgosEquationScopeInterface:(id<OrgGeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return OrgGeogebraCommonKernelLocusEquation_eqnIntersectLineConicWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(c_);
  RELEASE_(D_);
  RELEASE_(P_);
  RELEASE_(Q_);
  RELEASE_(botanaPolynomials_);
  RELEASE_(botanaVars_);
  RELEASE_(age_);
  RELEASE_(permutation_);
  RELEASE_(distTable_);
  RELEASE_(isQonPath_);
  RELEASE_(isPalive_);
  RELEASE_(tangentPoint_);
  RELEASE_(pointList_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_xyz_, nil, [IOSDoubleArray newArrayWithLength:3]);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoConic:", "AlgoIntersectLineConic", NULL, 0x1, NULL, NULL },
    { "addIncidence", NULL, "V", 0x2, NULL, NULL },
    { "initElements", NULL, "V", 0x4, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "getIntersectionPoints", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "getLine", NULL, "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getConic", NULL, "Lorg.geogebra.common.kernel.geos.GeoConic;", 0x1, NULL, NULL },
    { "getLastDefinedIntersectionPoints", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x4, NULL, NULL },
    { "isNearToAlgorithm", NULL, "Z", 0x1, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x11, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "handleSpecialCase", NULL, "Z", 0x2, NULL, NULL },
    { "handleSpecialCasePointWithOrgGeogebraCommonKernelGeosGeoPoint:", "handleSpecialCasePoint", "Z", 0x2, NULL, NULL },
    { "computeNonContinous", NULL, "V", 0x2, NULL, NULL },
    { "computeContinous", NULL, "V", 0x2, NULL, NULL },
    { "handleLimitedPaths", NULL, "V", 0x2, NULL, NULL },
    { "updateQonPath", NULL, "V", 0x2, NULL, NULL },
    { "pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint:", "pointLiesOnBothPaths", "Z", 0x2, NULL, NULL },
    { "intersectWithOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoPointArray:", "intersect", "I", 0x2, NULL, NULL },
    { "intersectLineConicWithOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelKernelNDGeoConicND:withOrgGeogebraCommonKernelGeosGeoPointArray:withDouble:", "intersectLineConic", "I", 0x39, NULL, NULL },
    { "testPointsWithOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoPointArray:withDouble:", "testPoints", "Z", 0x1a, NULL, NULL },
    { "getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lorg.geogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lorg.geogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "c_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
    { "D_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "P_", NULL, 0x4, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "Q_", NULL, 0x4, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "intersectionType_", NULL, 0x4, "I", NULL, NULL,  },
    { "botanaPolynomials_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/kernel/geos/GeoElement;L[Lorg/geogebra/common/kernel/prover/polynomial/Polynomial;;>;",  },
    { "botanaVars_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/kernel/geos/GeoElement;L[Lorg/geogebra/common/kernel/prover/polynomial/Variable;;>;",  },
    { "age_", NULL, 0x2, "[I", NULL, NULL,  },
    { "permutation_", NULL, 0x2, "[I", NULL, NULL,  },
    { "distTable_", NULL, 0x2, "[[D", NULL, NULL,  },
    { "isQonPath_", NULL, 0x2, "[Z", NULL, NULL,  },
    { "isPalive_", NULL, 0x2, "[Z", NULL, NULL,  },
    { "isDefinedAsTangent_", NULL, 0x2, "Z", NULL, NULL,  },
    { "firstIntersection_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isPermutationNeeded_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tangentPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "pointList_", NULL, 0x2, "Lorg.geogebra.common.kernel.PointPairList;", NULL, NULL,  },
    { "isLimitedPathSituation_", NULL, 0x2, "Z", NULL, NULL,  },
    { "possibleSpecialCase_", NULL, 0x4, "Z", NULL, NULL,  },
    { "specialCasePointOnCircleIndex_", NULL, 0x4, "I", NULL, NULL,  },
    { "INTERSECTION_PRODUCING_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_PRODUCING_LINE },
    { "INTERSECTION_ASYMPTOTIC_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_ASYMPTOTIC_LINE },
    { "INTERSECTION_MEETING_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_MEETING_LINE },
    { "INTERSECTION_TANGENT_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_TANGENT_LINE },
    { "INTERSECTION_SECANT_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_SECANT_LINE },
    { "INTERSECTION_PASSING_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_PASSING_LINE },
    { "xyz_", NULL, 0xa, "[D", &OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_xyz_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic = { 2, "AlgoIntersectLineConic", "org.geogebra.common.kernel.algos", NULL, 0x1, 27, methods, 28, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoLine *g, OrgGeogebraCommonKernelGeosGeoConic *c) {
  OrgGeogebraCommonKernelAlgosAlgoIntersect_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->firstIntersection_ = YES;
  self->isPermutationNeeded_ = YES;
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_setAndConsume_pointList_(self, new_OrgGeogebraCommonKernelPointPairList_init());
  self->possibleSpecialCase_ = NO;
  self->specialCasePointOnCircleIndex_ = 0;
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_set_g_(self, g);
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_set_c_(self, c);
  self->isLimitedPathSituation_ = ([((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g)) isLimitedPath] || [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(c)) isLimitedPath]);
  if ([OrgGeogebraCommonKernelAlgosTangentAlgo_class_() isInstance:[g getParentAlgorithm]]) {
    id<OrgGeogebraCommonKernelAlgosTangentAlgo> algo = (id<OrgGeogebraCommonKernelAlgosTangentAlgo>) check_protocol_cast([g getParentAlgorithm], @protocol(OrgGeogebraCommonKernelAlgosTangentAlgo));
    OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_set_tangentPoint_(self, [((id<OrgGeogebraCommonKernelAlgosTangentAlgo>) nil_chk(algo)) getTangentPointWithOrgGeogebraCommonKernelGeosGeoElement:c withOrgGeogebraCommonKernelGeosGeoLine:g]);
    self->isDefinedAsTangent_ = (self->tangentPoint_ != nil);
  }
  [self initElements];
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_initForNearToRelationship(self);
  [self compute];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_addIncidence(self);
}

OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *new_OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoLine *g, OrgGeogebraCommonKernelGeosGeoConic *c) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_(self, cons, g, c);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_addIncidence(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->P_))->size_; ++i) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->g_ withBoolean:NO];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->c_ withBoolean:NO];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_initForNearToRelationship(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self) {
  if (self->isDefinedAsTangent_) return;
  self->isPermutationNeeded_ = YES;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->P_))->size_; i++) {
    *IOSIntArray_GetRef(nil_chk(self->age_), i) = 0;
    *IOSBooleanArray_GetRef(nil_chk(self->isQonPath_), i) = YES;
    *IOSBooleanArray_GetRef(nil_chk(self->isPalive_), i) = NO;
  }
}

jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleSpecialCase(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self) {
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> existingIntersection = nil;
  JavaUtilArrayList *pointsOnConic = [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->c_)) getPointsOnConic];
  if (pointsOnConic != nil) {
    for (jint i = 0; i < [pointsOnConic size]; ++i) {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> p = [pointsOnConic getWithInt:i];
      if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) isLabelSet]) {
        if ([p getIncidenceList] != nil && [((JavaUtilArrayList *) nil_chk([p getIncidenceList])) containsWithId:self->g_]) {
          existingIntersection = p;
          break;
        }
      }
    }
  }
  if (existingIntersection == nil) {
    if (OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleSpecialCasePointWithOrgGeogebraCommonKernelGeosGeoPoint_(self, [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) getStartPoint])) {
      existingIntersection = [self->g_ getStartPoint];
    }
    else if (OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleSpecialCasePointWithOrgGeogebraCommonKernelGeosGeoPoint_(self, [self->g_ getEndPoint])) {
      existingIntersection = [self->g_ getEndPoint];
    }
  }
  if (existingIntersection == nil) {
    JavaUtilArrayList *pointsOnLine = [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) getPointsOnLine];
    if (pointsOnLine != nil) {
      for (jint i = 0; i < [pointsOnLine size]; ++i) {
        if (OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleSpecialCasePointWithOrgGeogebraCommonKernelGeosGeoPoint_(self, [pointsOnLine getWithInt:i])) {
          existingIntersection = [pointsOnLine getWithInt:i];
          break;
        }
      }
    }
  }
  if (existingIntersection == nil) {
    return NO;
  }
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_(self, self->c_, self->Q_);
  jint firstIndex = self->specialCasePointOnCircleIndex_;
  jint secondIndex = 1 - firstIndex;
  if (self->firstIntersection_ && [self didSetIntersectionPointWithInt:firstIndex]) {
    if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->P_), firstIndex))) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(existingIntersection, [OrgGeogebraCommonKernelGeosGeoElement class])]) {
      jint temp = firstIndex;
      firstIndex = secondIndex;
      secondIndex = temp;
      self->specialCasePointOnCircleIndex_ = firstIndex;
    }
    self->firstIntersection_ = NO;
  }
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->P_), firstIndex))) setCoordsFromPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:existingIntersection];
  jboolean didSetP1 = NO;
  for (jint i = 0; i < 2; i++) {
    if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->Q_), i))) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(self->P_, firstIndex)]) {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, secondIndex))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(self->Q_, i)];
      didSetP1 = YES;
      break;
    }
  }
  if (!didSetP1) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, secondIndex))) setCoordsFromPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:existingIntersection];
  if (self->isLimitedPathSituation_) {
    for (jint i = 0; i < 2; i++) {
      if (!OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(self, IOSObjectArray_Get(self->P_, i))) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) setUndefined];
    }
  }
  return YES;
}

jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleSpecialCasePointWithOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self, OrgGeogebraCommonKernelGeosGeoPoint *p) {
  if (p == nil) {
    return NO;
  }
  if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) isLabelSet]) {
    if ([p getIncidenceList] != nil && [((JavaUtilArrayList *) nil_chk([p getIncidenceList])) containsWithId:self->c_]) {
      return YES;
    }
  }
  return NO;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_computeNonContinous(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_(self, self->c_, self->Q_);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->P_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(nil_chk(self->Q_), IOSIntArray_Get(nil_chk(self->permutation_), i))];
  }
  if (self->isLimitedPathSituation_) {
    for (jint i = 0; i < self->P_->size_; i++) {
      if (!OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(self, IOSObjectArray_Get(self->P_, i))) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) setUndefined];
    }
  }
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_computeContinous(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self) {
  jboolean noSingularity = ![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->P_), 0))) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(self->P_, 1)];
  for (jint i = 0; i < 2; i++) {
    jboolean finite = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) isFinite];
    if (noSingularity && finite) {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->D_), i))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(self->P_, i)];
      *IOSIntArray_GetRef(nil_chk(self->age_), i) = 0;
    }
    else {
      (*IOSIntArray_GetRef(nil_chk(self->age_), i))++;
    }
    *IOSBooleanArray_GetRef(nil_chk(self->isPalive_), i) = (IOSBooleanArray_Get(self->isPalive_, i) || finite || ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i)))->labelSet_);
  }
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_(self, self->c_, self->Q_);
  if (self->isLimitedPathSituation_) {
    OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_updateQonPath(self);
  }
  if (self->firstIntersection_) {
    jint count = 0;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->Q_))->size_; i++) {
      if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->Q_, i))) isDefined] && OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(self, IOSObjectArray_Get(self->Q_, i))) {
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, count))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(self->Q_, i)];
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->D_), count))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(self->P_, count)];
        self->firstIntersection_ = NO;
        count++;
      }
    }
    return;
  }
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_distanceTableWithOrgGeogebraCommonKernelGeosGeoPointArray_withIntArray_withOrgGeogebraCommonKernelGeosGeoPointArray_withDoubleArray2_(self->D_, self->age_, self->Q_, self->distTable_);
  OrgGeogebraCommonKernelAlgosAlgoIntersectConics_setNearToWithOrgGeogebraCommonKernelGeosGeoPointArray_withBooleanArray_withOrgGeogebraCommonKernelGeosGeoPointArray_withBooleanArray_withDoubleArray2_withOrgGeogebraCommonKernelPointPairList_withIntArray_withBoolean_withDouble_(self->P_, self->isPalive_, self->Q_, self->isQonPath_, self->distTable_, self->pointList_, self->permutation_, !self->isPermutationNeeded_, 0.000001);
  self->isPermutationNeeded_ = NO;
  if (self->isLimitedPathSituation_) OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleLimitedPaths(self);
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_handleLimitedPaths(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self) {
  jboolean noSingularity = ![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->P_), 0))) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(self->P_, 1)];
  for (jint i = 0; i < self->P_->size_; i++) {
    if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) isDefined]) {
      if (!OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(self, IOSObjectArray_Get(self->P_, i))) {
        if (noSingularity && [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) isFinite]) {
          [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->D_), i))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(self->P_, i)];
          *IOSIntArray_GetRef(nil_chk(self->age_), i) = -1;
        }
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->P_, i))) setUndefined];
      }
    }
  }
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_updateQonPath(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->Q_))->size_; i++) {
    *IOSBooleanArray_GetRef(nil_chk(self->isQonPath_), i) = OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(self, IOSObjectArray_Get(self->Q_, i));
  }
}

jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_pointLiesOnBothPathsWithOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self, OrgGeogebraCommonKernelGeosGeoPoint *P) {
  return [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:P withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION] && [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->c_)) isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:P withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION];
}

jint OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *self, OrgGeogebraCommonKernelGeosGeoConic *c, IOSObjectArray *sol) {
  jboolean ok = NO;
  jint ret = OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_PASSING_LINE;
  if ([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(c)) isDefined] && [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) isDefined]) {
    jdouble epsilon = 1E-15;
    while (epsilon <= OrgGeogebraCommonKernelKernel_MIN_PRECISION) {
      ret = OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectLineConicWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(self->g_, c, sol, epsilon);
      ok = OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_testPointsWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(self->g_, c, sol, OrgGeogebraCommonKernelKernel_MIN_PRECISION);
      if (ok) {
        break;
      }
      epsilon *= 10.0;
    }
  }
  if (!ok) {
    for (jint i = 0; i < 2; i++) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(sol), i))) setUndefined];
  }
  self->intersectionType_ = ret;
  return ret;
}

jint OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectLineConicWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelKernelNDGeoConicND_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(OrgGeogebraCommonKernelGeosGeoLine *g, OrgGeogebraCommonKernelKernelNDGeoConicND *c, IOSObjectArray *sol, jdouble eps) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_initialize();
  @synchronized(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_class_()) {
    IOSDoubleArray *A = [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) getFlatMatrix];
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g)) getnormalizedCoefficientsWithDoubleArray:OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_xyz_];
    jdouble x = IOSDoubleArray_Get(nil_chk(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_xyz_), 0);
    jdouble y = IOSDoubleArray_Get(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_xyz_, 1);
    jdouble z = IOSDoubleArray_Get(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_xyz_, 2);
    jdouble px, py;
    if (JavaLangMath_absWithDouble_(x) > JavaLangMath_absWithDouble_(y)) {
      px = -z / x;
      py = 0.0;
    }
    else {
      px = 0.0;
      py = -z / y;
    }
    jdouble SvX = IOSDoubleArray_Get(nil_chk(A), 0) * y - IOSDoubleArray_Get(A, 3) * x;
    jdouble SvY = IOSDoubleArray_Get(A, 3) * y - IOSDoubleArray_Get(A, 1) * x;
    jdouble u = y * SvX - x * SvY;
    jdouble d = px * SvX + py * SvY + IOSDoubleArray_Get(A, 4) * y - IOSDoubleArray_Get(A, 5) * x;
    jdouble w = [c evaluateWithDouble:px withDouble:py];
    jdouble delta = JavaLangMath_minWithDouble_withDouble_(OrgGeogebraCommonKernelKernel_MIN_PRECISION, JavaLangMath_maxWithDouble_withDouble_(1, JavaLangMath_absWithDouble_(2 * d) + JavaLangMath_absWithDouble_(u) + JavaLangMath_absWithDouble_(w)) * eps);
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_withDouble_(u, eps)) {
      if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_withDouble_(d, eps)) {
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_withDouble_(w, eps)) {
          [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(sol), 0))) setUndefined];
          [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(sol, 1))) setUndefined];
          return OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_PRODUCING_LINE;
        }
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(sol), 0))) setUndefined];
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(sol, 1))) setUndefined];
        return OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_ASYMPTOTIC_LINE;
      }
      jdouble t0 = -w / (2.0 * d);
      if (d < 0) {
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(sol), 0))) setCoordsWithDouble:px + t0 * y withDouble:py - t0 * x withDouble:1.0];
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(sol, 1))) setUndefined];
      }
      else {
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(sol), 0))) setUndefined];
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(sol, 1))) setCoordsWithDouble:px + t0 * y withDouble:py - t0 * x withDouble:1.0];
      }
      return OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_MEETING_LINE;
    }
    jdouble dis = d * d - u * w;
    if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(dis, 0, delta)) {
      jdouble t1 = -d / u;
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(sol), 0))) setCoordsWithDouble:px + t1 * y withDouble:py - t1 * x withDouble:1.0];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(sol, 1))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(sol, 0)];
      return OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_TANGENT_LINE;
    }
    if (c->type_ == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE) {
      jdouble t1 = -d / u;
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(sol), 0))) setCoordsWithDouble:px + t1 * y withDouble:py - t1 * x withDouble:1.0];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(sol, 1))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(sol, 0)];
      return OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_SECANT_LINE;
    }
    if (dis > 0) {
      dis = JavaLangMath_sqrtWithDouble_(dis);
      jboolean swap = d < 0.0;
      if (swap) {
        dis = -dis;
      }
      jdouble q = -(d + dis);
      jdouble t1 = swap ? w / q : q / u;
      jdouble t2 = swap ? q / u : w / q;
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(sol), 0))) setCoordsWithDouble:px + t1 * y withDouble:py - t1 * x withDouble:1.0];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(sol, 1))) setCoordsWithDouble:px + t2 * y withDouble:py - t2 * x withDouble:1.0];
      return OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_SECANT_LINE;
    }
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(sol), 0))) setUndefined];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(sol, 1))) setUndefined];
    return OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_PASSING_LINE;
  }
}

jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_testPointsWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoPointArray_withDouble_(OrgGeogebraCommonKernelGeosGeoLine *g, OrgGeogebraCommonKernelGeosGeoConic *c, IOSObjectArray *P, jdouble eps) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_initialize();
  jboolean foundPoint = NO;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(P))->size_; i++) {
    if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(P, i))) isDefined]) {
      if (!([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(c)) isOnFullConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(P, i) withDouble:eps] && [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g)) isOnFullLineWithOrgGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(P, i) withDouble:eps])) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(P, i))) setUndefined];
      else foundPoint = YES;
    }
  }
  return foundPoint;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic)
