//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoIntersectLineCurve.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/EquationSolver.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectLineCurve.h"
#include "org/geogebra/common/kernel/algos/AlgoRoots.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve () {
 @public
  OrgGeogebraCommonKernelGeosGeoLine *line_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve, line_, OrgGeogebraCommonKernelGeosGeoLine *)

@interface OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 : NSObject < OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *this$0_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve:(OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1, this$0_, OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_(OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 *self, OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *outer$);

__attribute__((unused)) static OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 *new_OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_(OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1)

@implementation OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                          withNSStringArray:(IOSObjectArray *)labels
                     withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)l
           withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)p {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(self, c, labels, l, p);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  if (labels != nil && labels->size_ == 1 && IOSObjectArray_Get(labels, 0) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(labels, 0))) isEqual:@""]) {
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) setIndexLabelsWithNSString:IOSObjectArray_Get(labels, 0)];
  }
  else {
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) setLabelsWithNSStringArray:labels];
    [outputPoints_ setIndexLabelsWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputPoints_ getElementWithInt:0])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
}

- (OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *)createOutputPoints {
  return [new_OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_(self) autorelease]) autorelease];
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, line_);
  IOSObjectArray_Set(input_, 1, curve_);
  [self setDependencies];
}

- (void)compute {
  OrgGeogebraCommonKernelMatrixCoords *coeffs = [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(line_)) getCoords];
  OrgGeogebraCommonKernelArithmeticExpressionNode *xFun = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve_)) getFunX])) getExpression];
  OrgGeogebraCommonKernelArithmeticExpressionNode *yFun = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([curve_ getFunY])) getExpression];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *fv = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([curve_ getFunX])) getFunctionVariable];
  OrgGeogebraCommonKernelArithmeticExpressionNode *enx, *eny;
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coeffs)) getZ])) {
    enx = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [coeffs getX]) autorelease], OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), xFun) autorelease];
    eny = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [coeffs getY]) autorelease], OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), yFun) autorelease];
    enx = [enx plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:eny];
  }
  else {
    enx = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [coeffs getX] / [coeffs getZ]) autorelease], OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), xFun) autorelease];
    eny = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [coeffs getY] / [coeffs getZ]) autorelease], OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), yFun) autorelease];
    enx = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([enx plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:eny])) plusWithDouble:1];
  }
  OrgGeogebraCommonKernelGeosGeoFunction *geoFun = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enx)) buildFunctionWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv];
  IOSDoubleArray *roots = nil;
  jint outputSize = -1;
  JavaUtilArrayList *polyRoots = [new_JavaUtilArrayList_init() autorelease];
  if ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(geoFun)) isPolynomialFunctionWithBoolean:YES]) {
    JavaUtilLinkedList *factorList = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([geoFun getFunction])) getPolynomialFactorsWithBoolean:NO];
    if (factorList != nil) {
      id<JavaUtilIterator> it = [factorList iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        OrgGeogebraCommonKernelArithmeticPolyFunction *polyFun = [it next];
        if ([((OrgGeogebraCommonKernelArithmeticPolyFunction *) nil_chk(polyFun)) updateCoeffValues]) {
          roots = [polyFun getCoeffsCopy];
          jint n = [((OrgGeogebraCommonKernelEquationSolver *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getKernel])) getEquationSolver])) polynomialRootsWithDoubleArray:roots withBoolean:YES];
          for (jint i = 0; i < n; i++) {
            [polyRoots addWithId:JavaLangDouble_valueOfWithDouble_(IOSDoubleArray_Get(nil_chk(roots), i))];
          }
        }
        else {
          outputSize = -1;
          break;
        }
      }
    }
  }
  if ([polyRoots size] > 0) {
    outputSize = [polyRoots size];
    roots = [IOSDoubleArray arrayWithLength:outputSize];
    for (jint i = 0; i < outputSize; i++) {
      *IOSDoubleArray_GetRef(roots, i) = [((JavaLangDouble *) nil_chk([polyRoots getWithInt:i])) doubleValue];
    }
  }
  else {
    roots = OrgGeogebraCommonKernelAlgosAlgoRoots_findRootsWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_withInt_(geoFun, [curve_ getMinParameter], [curve_ getMaxParameter], 100);
    outputSize = roots == nil || roots->size_ == 0 ? 1 : roots->size_;
  }
  [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) adjustOutputSizeWithInt:outputSize];
  jint index = 0;
  if (roots != nil) {
    for (index = 0; index < outputSize; index++) {
      jdouble paramVal = IOSDoubleArray_Get(roots, index);
      OrgGeogebraCommonKernelGeosGeoPoint *point = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([outputPoints_ getElementWithInt:index], [OrgGeogebraCommonKernelGeosGeoPoint class]);
      if (paramVal < [curve_ getMinParameter] || paramVal > [curve_ getMaxParameter]) {
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(point)) setUndefined];
      }
      else {
        [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv)) setWithDouble:paramVal];
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(point)) setCoordsWithDouble:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(xFun)) evaluateDouble] withDouble:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(yFun)) evaluateDouble] withDouble:1.0];
        if (!([line_ isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:point withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION])) {
          [point setUndefined];
        }
      }
    }
  }
  for (; index < [outputPoints_ size]; index++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputPoints_ getElementWithInt:index])) setUndefined];
  }
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionPointOfAB" withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk((line_))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk((curve_))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(line_);
  RELEASE_(curve_);
  RELEASE_(outputPoints_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoCurveCartesian:", "AlgoIntersectLineCurve", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:", "AlgoIntersectLineCurve", NULL, 0x1, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x4, NULL, NULL },
    { "createOutputPoints", NULL, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "line_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "curve_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoCurveCartesian;", NULL, NULL,  },
    { "outputPoints_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lorg/geogebra/common/kernel/algos/AlgoElement$OutputHandler<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve = { 2, "AlgoIntersectLineCurve", "org.geogebra.common.kernel.algos", NULL, 0x1, 9, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *self, OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoLine *l, OrgGeogebraCommonKernelGeosGeoCurveCartesian *p) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_set_outputPoints_(self, [self createOutputPoints]);
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_set_line_(self, l);
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_set_curve_(self, p);
  [self compute];
  [self setInputOutput];
  [self setLabelsWithNSStringArray:labels];
  [self update];
}

OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *new_OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoLine *l, OrgGeogebraCommonKernelGeosGeoCurveCartesian *p) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(self, c, labels, l, p);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
}

OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *new_OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve)

@implementation OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1

- (OrgGeogebraCommonKernelGeosGeoPoint *)newElement {
  OrgGeogebraCommonKernelGeosGeoPoint *p = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(this$0_->cons_) autorelease];
  [p setCoordsWithDouble:0 withDouble:0 withDouble:1];
  [p setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:this$0_];
  return p;
}

- (instancetype)initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve:(OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *)outer$ {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.algos.AlgoIntersectLineCurve;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve", "createOutputPoints" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 = { 2, "", "org.geogebra.common.kernel.algos", "AlgoIntersectLineCurve", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lorg/geogebra/common/kernel/algos/AlgoElement$elementFactory<Lorg/geogebra/common/kernel/geos/GeoElement;>;" };
  return &_OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_(OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 *self, OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *outer$) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_set_this$0_(self, outer$);
  NSObject_init(self);
}

OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 *new_OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_(OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve *outer$) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1)
