//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoIntersectSingle.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/LocusEquation.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersect.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectConics.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectSingle.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/EquationElementInterface.h"
#include "org/geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoIntersectSingle () {
 @public
  OrgGeogebraCommonKernelAlgosAlgoIntersect *algo_;
  id<OrgGeogebraCommonKernelGeosGeoNumberValue> index_;
  OrgGeogebraCommonKernelGeosGeoPoint *refPoint_;
  OrgGeogebraCommonKernelGeosGeoPoint *point_;
  IOSObjectArray *parentOutput_;
  jint idx_;
}

- (void)addIncidence;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectSingle, algo_, OrgGeogebraCommonKernelAlgosAlgoIntersect *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectSingle, index_, id<OrgGeogebraCommonKernelGeosGeoNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectSingle, refPoint_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectSingle, point_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectSingle, parentOutput_, IOSObjectArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_addIncidence(OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initForNearToRelationship(OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoIntersectSingle

- (instancetype)initWithNSString:(NSString *)label
withOrgGeogebraCommonKernelAlgosAlgoIntersect:(OrgGeogebraCommonKernelAlgosAlgoIntersect *)algo
withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)refPoint {
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoPoint_(self, label, algo, refPoint);
  return self;
}

- (instancetype)initWithNSString:(NSString *)label
withOrgGeogebraCommonKernelAlgosAlgoIntersect:(OrgGeogebraCommonKernelAlgosAlgoIntersect *)algo
withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)index {
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, label, algo, index);
  return self;
}

- (instancetype)initWithNSString:(NSString *)label
withOrgGeogebraCommonKernelAlgosAlgoIntersect:(OrgGeogebraCommonKernelAlgosAlgoIntersect *)algo
                         withInt:(jint)index {
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withInt_(self, label, algo, index);
  return self;
}

- (void)addIncidence {
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_addIncidence(self);
}

- (jboolean)showUndefinedPointsInAlgebraView {
  return YES;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (void)setInputOutput {
  if (refPoint_ == nil) {
    OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, IOSObjectArray_Get(((OrgGeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo_))->input_, 0));
    IOSObjectArray_Set(input_, 1, IOSObjectArray_Get(algo_->input_, 1));
    IOSObjectArray_Set(input_, 2, [((id<OrgGeogebraCommonKernelGeosGeoNumberValue>) nil_chk(index_)) toGeoElement]);
  }
  else {
    OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, IOSObjectArray_Get(((OrgGeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo_))->input_, 0));
    IOSObjectArray_Set(input_, 1, IOSObjectArray_Get(algo_->input_, 1));
    IOSObjectArray_Set(input_, 2, refPoint_);
  }
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:point_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelAlgosAlgoIntersect *)getAlgo {
  return self->algo_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getPoint {
  return point_;
}

- (IOSObjectArray *)getIntersectionPoints {
  return (IOSObjectArray *) check_class_cast([super getOutput], [IOSObjectArray class]);
}

- (IOSObjectArray *)getLastDefinedIntersectionPoints {
  return nil;
}

- (jboolean)isNearToAlgorithm {
  return YES;
}

- (void)initForNearToRelationship {
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initForNearToRelationship(self);
}

- (void)compute {
  if (index_ != nil) idx_ = JavaLangMath_maxWithInt_withInt_(0, J2ObjCFpToInt([index_ getDouble]) - 1);
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_set_parentOutput_(self, [((OrgGeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo_)) getIntersectionPoints]);
  if (point_ != nil) {
    if ([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getLoadingMode] && point_->hasUpdatePrevilege_) {
      [algo_ setIntersectionPointWithInt:idx_ withOrgGeogebraCommonKernelKernelNDGeoPointND:point_];
      point_->hasUpdatePrevilege_ = NO;
    }
  }
  if (refPoint_ != nil) if ([refPoint_ isDefined]) idx_ = [algo_ getClosestPointIndexWithOrgGeogebraCommonKernelGeosGeoPoint:refPoint_];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) isDefined] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) isDefined] && idx_ < ((IOSObjectArray *) nil_chk(parentOutput_))->size_) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(point_)) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(parentOutput_, idx_)];
    if ([point_ getIncidenceList] != nil) {
      for (jint i = 0; i < parentOutput_->size_; ++i) {
        if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(parentOutput_, idx_))) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(parentOutput_, i)]) [((JavaUtilArrayList *) nil_chk([point_ getIncidenceList])) removeWithId:IOSObjectArray_Get(parentOutput_, i)];
      }
    }
    [point_ addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(parentOutput_, idx_) withBoolean:NO];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(point_)) setUndefined];
    JavaUtilArrayList *al = [point_ getIncidenceList];
    if (al != nil) for (jint i = 0; i < ((IOSObjectArray *) nil_chk(parentOutput_))->size_; ++i) {
      [al removeWithId:IOSObjectArray_Get(parentOutput_, i)];
    }
  }
}

- (void)remove {
  [super remove];
  [((OrgGeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo_)) removeUser];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (refPoint_ == nil) {
    return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionPointOfAB" withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  }
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionPointOfABNearC" withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 2))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<OrgGeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                         withOrgGeogebraCommonKernelAlgosEquationScopeInterface:(id<OrgGeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return OrgGeogebraCommonKernelLocusEquation_eqnIntersectSingleWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (void)dealloc {
  RELEASE_(algo_);
  RELEASE_(index_);
  RELEASE_(refPoint_);
  RELEASE_(point_);
  RELEASE_(parentOutput_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withOrgGeogebraCommonKernelAlgosAlgoIntersect:withOrgGeogebraCommonKernelGeosGeoPoint:", "AlgoIntersectSingle", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withOrgGeogebraCommonKernelAlgosAlgoIntersect:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "AlgoIntersectSingle", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withOrgGeogebraCommonKernelAlgosAlgoIntersect:withInt:", "AlgoIntersectSingle", NULL, 0x1, NULL, NULL },
    { "addIncidence", NULL, "V", 0x2, NULL, NULL },
    { "showUndefinedPointsInAlgebraView", NULL, "Z", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "getAlgo", NULL, "Lorg.geogebra.common.kernel.algos.AlgoIntersect;", 0x1, NULL, NULL },
    { "getPoint", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getIntersectionPoints", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getLastDefinedIntersectionPoints", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x4, NULL, NULL },
    { "isNearToAlgorithm", NULL, "Z", 0x1, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x11, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lorg.geogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "algo_", NULL, 0x2, "Lorg.geogebra.common.kernel.algos.AlgoIntersect;", NULL, NULL,  },
    { "index_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumberValue;", NULL, NULL,  },
    { "refPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "point_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "parentOutput_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "idx_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIntersectSingle = { 2, "AlgoIntersectSingle", "org.geogebra.common.kernel.algos", NULL, 0x1, 19, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *self, NSString *label, OrgGeogebraCommonKernelAlgosAlgoIntersect *algo, OrgGeogebraCommonKernelGeosGeoPoint *refPoint) {
  OrgGeogebraCommonKernelAlgosAlgoIntersect_initWithOrgGeogebraCommonKernelConstruction_(self, ((OrgGeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo))->cons_);
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_set_algo_(self, algo);
  [algo addUser];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_set_refPoint_(self, refPoint);
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_setAndConsume_point_(self, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(algo->cons_));
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initForNearToRelationship(self);
  [self compute];
  [self->point_ setLabelWithNSString:label];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_addIncidence(self);
}

OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoPoint_(NSString *label, OrgGeogebraCommonKernelAlgosAlgoIntersect *algo, OrgGeogebraCommonKernelGeosGeoPoint *refPoint) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectSingle alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoPoint_(self, label, algo, refPoint);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *self, NSString *label, OrgGeogebraCommonKernelAlgosAlgoIntersect *algo, id<OrgGeogebraCommonKernelGeosGeoNumberValue> index) {
  OrgGeogebraCommonKernelAlgosAlgoIntersect_initWithOrgGeogebraCommonKernelConstruction_(self, ((OrgGeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo))->cons_);
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_set_algo_(self, algo);
  [algo addUser];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_set_index_(self, index);
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_set_refPoint_(self, nil);
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_setAndConsume_point_(self, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(algo->cons_));
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initForNearToRelationship(self);
  [self compute];
  [self->point_ setLabelWithNSString:label];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_addIncidence(self);
}

OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoNumberValue_(NSString *label, OrgGeogebraCommonKernelAlgosAlgoIntersect *algo, id<OrgGeogebraCommonKernelGeosGeoNumberValue> index) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectSingle alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, label, algo, index);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withInt_(OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *self, NSString *label, OrgGeogebraCommonKernelAlgosAlgoIntersect *algo, jint index) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, label, algo, [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_([((OrgGeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo)) getConstruction], index + 1) autorelease]);
}

OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *new_OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withInt_(NSString *label, OrgGeogebraCommonKernelAlgosAlgoIntersect *algo, jint index) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectSingle alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withOrgGeogebraCommonKernelAlgosAlgoIntersect_withInt_(self, label, algo, index);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_addIncidence(OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *self) {
  if ([self->algo_ isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoIntersectConics class]]) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->point_)) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelAlgosAlgoIntersectConics *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoIntersectConics *) check_class_cast(self->algo_, [OrgGeogebraCommonKernelAlgosAlgoIntersectConics class])))) getA] withBoolean:NO];
    [self->point_ addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelAlgosAlgoIntersectConics *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoIntersectConics *) check_class_cast(self->algo_, [OrgGeogebraCommonKernelAlgosAlgoIntersectConics class])))) getB] withBoolean:NO];
  }
  else if ([self->algo_ isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic class]]) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->point_)) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *) check_class_cast(self->algo_, [OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic class])))) getLine] withBoolean:NO];
    [self->point_ addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic *) check_class_cast(self->algo_, [OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic class])))) getConic] withBoolean:NO];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_initForNearToRelationship(OrgGeogebraCommonKernelAlgosAlgoIntersectSingle *self) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectSingle_set_parentOutput_(self, [((OrgGeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(self->algo_)) getIntersectionPoints]);
  [self->algo_ initForNearToRelationship];
  [self->algo_ setIntersectionPointWithInt:self->idx_ withOrgGeogebraCommonKernelKernelNDGeoPointND:self->point_];
  [self->algo_ compute];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIntersectSingle)
