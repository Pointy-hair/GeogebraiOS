//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/SymbolicParameters.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/kernel/algos/SymbolicParameters.h"
#include "org/geogebra/common/kernel/algos/SymbolicParametersAlgo.h"
#include "org/geogebra/common/kernel/algos/SymbolicParametersBotanaAlgo.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "org/geogebra/common/kernel/prover/polynomial/Variable.h"

@interface OrgGeogebraCommonKernelAlgosSymbolicParameters () {
 @public
  JavaUtilHashSet *variables_;
  id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo> spa_;
}

- (void)initFreeVariables OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosSymbolicParameters, variables_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosSymbolicParameters, spa_, id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosSymbolicParameters_initFreeVariables(OrgGeogebraCommonKernelAlgosSymbolicParameters *self);

@implementation OrgGeogebraCommonKernelAlgosSymbolicParameters

- (instancetype)initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo:(id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>)spa {
  OrgGeogebraCommonKernelAlgosSymbolicParameters_initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self, spa);
  return self;
}

- (IOSIntArray *)getDegrees {
  return [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(spa_)) getDegrees];
}

+ (IOSIntArray *)getMaxDegreeWithIntArray:(IOSIntArray *)degree1
                             withIntArray:(IOSIntArray *)degree2 {
  return OrgGeogebraCommonKernelAlgosSymbolicParameters_getMaxDegreeWithIntArray_withIntArray_(degree1, degree2);
}

+ (IOSIntArray *)addDegreeWithIntArray:(IOSIntArray *)degree1
                          withIntArray:(IOSIntArray *)degree2 {
  return OrgGeogebraCommonKernelAlgosSymbolicParameters_addDegreeWithIntArray_withIntArray_(degree1, degree2);
}

+ (IOSIntArray *)crossDegreeWithIntArray:(IOSIntArray *)degree1
                            withIntArray:(IOSIntArray *)degree2 {
  return OrgGeogebraCommonKernelAlgosSymbolicParameters_crossDegreeWithIntArray_withIntArray_(degree1, degree2);
}

+ (IOSObjectArray *)crossProductWithJavaMathBigIntegerArray:(IOSObjectArray *)a
                                withJavaMathBigIntegerArray:(IOSObjectArray *)b {
  return OrgGeogebraCommonKernelAlgosSymbolicParameters_crossProductWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(a, b);
}

- (jint)getDimension {
  if (variables_ == nil) {
    OrgGeogebraCommonKernelAlgosSymbolicParameters_initFreeVariables(self);
  }
  return [((JavaUtilHashSet *) nil_chk(variables_)) size];
}

- (JavaUtilHashSet *)getFreeVariables {
  if (variables_ == nil) {
    OrgGeogebraCommonKernelAlgosSymbolicParameters_initFreeVariables(self);
  }
  return variables_;
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  return [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(spa_)) getExactCoordinatesWithJavaUtilHashMap:values];
}

+ (IOSObjectArray *)reduceWithJavaMathBigIntegerArray:(IOSObjectArray *)vect {
  return OrgGeogebraCommonKernelAlgosSymbolicParameters_reduceWithJavaMathBigIntegerArray_(vect);
}

- (void)initFreeVariables {
  OrgGeogebraCommonKernelAlgosSymbolicParameters_initFreeVariables(self);
}

+ (JavaMathBigInteger *)det4WithJavaMathBigIntegerArray2:(IOSObjectArray *)matrix {
  return OrgGeogebraCommonKernelAlgosSymbolicParameters_det4WithJavaMathBigIntegerArray2_(matrix);
}

+ (IOSObjectArray *)addBotanaVarsJoinPointsWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input {
  return OrgGeogebraCommonKernelAlgosSymbolicParameters_addBotanaVarsJoinPointsWithOrgGeogebraCommonKernelGeosGeoElementArray_(input);
}

+ (IOSObjectArray *)botanaPolynomialsMidpointWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)P
                                             withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)Q
                              withOrgGeogebraCommonKernelProverPolynomialVariableArray:(IOSObjectArray *)botanaVars {
  return OrgGeogebraCommonKernelAlgosSymbolicParameters_botanaPolynomialsMidpointWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelProverPolynomialVariableArray_(P, Q, botanaVars);
}

+ (IOSObjectArray *)botanaPolynomialsLineBisectorWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)Ax
                                                 withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)Ay
                                                 withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)Bx
                                                 withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)By
                                            withOrgGeogebraCommonKernelProverPolynomialVariableArray:(IOSObjectArray *)botanaVars {
  return OrgGeogebraCommonKernelAlgosSymbolicParameters_botanaPolynomialsLineBisectorWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariableArray_(Ax, Ay, Bx, By, botanaVars);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo:", "SymbolicParameters", NULL, 0x1, NULL, NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getMaxDegreeWithIntArray:withIntArray:", "getMaxDegree", "[I", 0x9, NULL, NULL },
    { "addDegreeWithIntArray:withIntArray:", "addDegree", "[I", 0x9, NULL, NULL },
    { "crossDegreeWithIntArray:withIntArray:", "crossDegree", "[I", 0x9, NULL, NULL },
    { "crossProductWithJavaMathBigIntegerArray:withJavaMathBigIntegerArray:", "crossProduct", "[Ljava.math.BigInteger;", 0x9, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getFreeVariables", NULL, "Ljava.util.HashSet;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "reduceWithJavaMathBigIntegerArray:", "reduce", "[Ljava.math.BigInteger;", 0x9, NULL, NULL },
    { "initFreeVariables", NULL, "V", 0x2, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "det4WithJavaMathBigIntegerArray2:", "det4", "Ljava.math.BigInteger;", 0x9, NULL, NULL },
    { "addBotanaVarsJoinPointsWithOrgGeogebraCommonKernelGeosGeoElementArray:", "addBotanaVarsJoinPoints", "[Lorg.geogebra.common.kernel.prover.polynomial.Variable;", 0x9, NULL, NULL },
    { "botanaPolynomialsMidpointWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelProverPolynomialVariableArray:", "botanaPolynomialsMidpoint", "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "botanaPolynomialsLineBisectorWithOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariableArray:", "botanaPolynomialsLineBisector", "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "degree_", NULL, 0x4, "[I", NULL, NULL,  },
    { "variables_", NULL, 0x2, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lorg/geogebra/common/kernel/prover/polynomial/Variable;>;",  },
    { "spa_", NULL, 0x2, "Lorg.geogebra.common.kernel.algos.SymbolicParametersAlgo;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosSymbolicParameters = { 2, "SymbolicParameters", "org.geogebra.common.kernel.algos", NULL, 0x1, 15, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosSymbolicParameters;
}

@end

void OrgGeogebraCommonKernelAlgosSymbolicParameters_initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_(OrgGeogebraCommonKernelAlgosSymbolicParameters *self, id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo> spa) {
  (void) NSObject_init(self);
  self->spa_ = spa;
}

OrgGeogebraCommonKernelAlgosSymbolicParameters *new_OrgGeogebraCommonKernelAlgosSymbolicParameters_initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_(id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo> spa) {
  OrgGeogebraCommonKernelAlgosSymbolicParameters *self = [OrgGeogebraCommonKernelAlgosSymbolicParameters alloc];
  OrgGeogebraCommonKernelAlgosSymbolicParameters_initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self, spa);
  return self;
}

IOSIntArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_getMaxDegreeWithIntArray_withIntArray_(IOSIntArray *degree1, IOSIntArray *degree2) {
  OrgGeogebraCommonKernelAlgosSymbolicParameters_initialize();
  if (degree1 == nil || degree2 == nil || degree1->size_ != 3 || degree2->size_ != 3) return nil;
  IOSIntArray *maxDegree = [IOSIntArray newArrayWithLength:3];
  *IOSIntArray_GetRef(maxDegree, 0) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(nil_chk(degree1), 0), IOSIntArray_Get(nil_chk(degree2), 0));
  *IOSIntArray_GetRef(maxDegree, 1) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree1, 1), IOSIntArray_Get(degree2, 1));
  *IOSIntArray_GetRef(maxDegree, 2) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree1, 2), IOSIntArray_Get(degree2, 2));
  return maxDegree;
}

IOSIntArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_addDegreeWithIntArray_withIntArray_(IOSIntArray *degree1, IOSIntArray *degree2) {
  OrgGeogebraCommonKernelAlgosSymbolicParameters_initialize();
  if (degree1 == nil || degree2 == nil || degree1->size_ != 3 || degree2->size_ != 3) return nil;
  IOSIntArray *addDegree = [IOSIntArray newArrayWithLength:3];
  *IOSIntArray_GetRef(addDegree, 0) = IOSIntArray_Get(nil_chk(degree1), 0) + IOSIntArray_Get(nil_chk(degree2), 0);
  *IOSIntArray_GetRef(addDegree, 1) = IOSIntArray_Get(degree1, 1) + IOSIntArray_Get(degree2, 1);
  *IOSIntArray_GetRef(addDegree, 2) = IOSIntArray_Get(degree1, 2) + IOSIntArray_Get(degree2, 2);
  return addDegree;
}

IOSIntArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_crossDegreeWithIntArray_withIntArray_(IOSIntArray *degree1, IOSIntArray *degree2) {
  OrgGeogebraCommonKernelAlgosSymbolicParameters_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:3];
  *IOSIntArray_GetRef(result, 0) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(nil_chk(degree1), 1) + IOSIntArray_Get(nil_chk(degree2), 2), IOSIntArray_Get(degree1, 2) + IOSIntArray_Get(degree2, 1));
  *IOSIntArray_GetRef(result, 1) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree1, 0) + IOSIntArray_Get(degree2, 2), IOSIntArray_Get(degree1, 2) + IOSIntArray_Get(degree2, 0));
  *IOSIntArray_GetRef(result, 2) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree1, 1) + IOSIntArray_Get(degree2, 0), IOSIntArray_Get(degree1, 0) + IOSIntArray_Get(degree2, 1));
  return result;
}

IOSObjectArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_crossProductWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *a, IOSObjectArray *b) {
  OrgGeogebraCommonKernelAlgosSymbolicParameters_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:3 type:JavaMathBigInteger_class_()];
  (void) IOSObjectArray_Set(result, 0, [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(a), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(b), 2)]))) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(a, 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(b, 1)]]);
  (void) IOSObjectArray_Set(result, 1, [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(a, 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(b, 0)]))) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(a, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(b, 2)]]);
  (void) IOSObjectArray_Set(result, 2, [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(a, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(b, 1)]))) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(a, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(b, 0)]]);
  return OrgGeogebraCommonKernelAlgosSymbolicParameters_reduceWithJavaMathBigIntegerArray_(result);
}

IOSObjectArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_reduceWithJavaMathBigIntegerArray_(IOSObjectArray *vect) {
  OrgGeogebraCommonKernelAlgosSymbolicParameters_initialize();
  JavaMathBigInteger *gcd = new_JavaMathBigInteger_initWithNSString_(@"0");
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(vect))->size_; i++) {
    gcd = [gcd gcdWithJavaMathBigInteger:IOSObjectArray_Get(vect, i)];
  }
  if ([((JavaMathBigInteger *) nil_chk(gcd)) isEqual:JavaMathBigInteger_get_ZERO_()]) {
    gcd = JavaMathBigInteger_get_ONE_();
  }
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:vect->size_ type:JavaMathBigInteger_class_()];
  for (jint i = 0; i < vect->size_; i++) {
    (void) IOSObjectArray_Set(result, i, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(vect, i))) divideWithJavaMathBigInteger:gcd]);
  }
  return result;
}

void OrgGeogebraCommonKernelAlgosSymbolicParameters_initFreeVariables(OrgGeogebraCommonKernelAlgosSymbolicParameters *self) {
  self->variables_ = new_JavaUtilHashSet_init();
  [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(self->spa_)) getFreeVariablesWithJavaUtilHashSet:self->variables_];
}

JavaMathBigInteger *OrgGeogebraCommonKernelAlgosSymbolicParameters_det4WithJavaMathBigIntegerArray2_(IOSObjectArray *matrix) {
  OrgGeogebraCommonKernelAlgosSymbolicParameters_initialize();
  JavaMathBigInteger *complex$1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix), 0)), 3))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]];
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(complex$1)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]];
}

IOSObjectArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_addBotanaVarsJoinPointsWithOrgGeogebraCommonKernelGeosGeoElementArray_(IOSObjectArray *input) {
  OrgGeogebraCommonKernelAlgosSymbolicParameters_initialize();
  IOSObjectArray *botanaVars = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
  IOSObjectArray *line1vars = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
  IOSObjectArray *line2vars = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
  line1vars = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(IOSObjectArray_Get(nil_chk(input), 0), @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(input, 0)];
  line2vars = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(IOSObjectArray_Get(input, 1), @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(input, 1)];
  (void) IOSObjectArray_Set(botanaVars, 0, IOSObjectArray_Get(nil_chk(line1vars), 0));
  (void) IOSObjectArray_Set(botanaVars, 1, IOSObjectArray_Get(line1vars, 1));
  (void) IOSObjectArray_Set(botanaVars, 2, IOSObjectArray_Get(nil_chk(line2vars), 0));
  (void) IOSObjectArray_Set(botanaVars, 3, IOSObjectArray_Get(line2vars, 1));
  return botanaVars;
}

IOSObjectArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_botanaPolynomialsMidpointWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelProverPolynomialVariableArray_(OrgGeogebraCommonKernelGeosGeoElement *P, OrgGeogebraCommonKernelGeosGeoElement *Q, IOSObjectArray *botanaVars) {
  OrgGeogebraCommonKernelAlgosSymbolicParameters_initialize();
  IOSObjectArray *fv1 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(P, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:P];
  IOSObjectArray *fv2 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(Q, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:Q];
  IOSObjectArray *botanaPolynomials = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
  (void) IOSObjectArray_Set(botanaPolynomials, 0, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([(new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(2)) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(botanaVars), 0))])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(fv1), 0))])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(fv2), 0))]);
  (void) IOSObjectArray_Set(botanaPolynomials, 1, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([(new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(2)) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(botanaVars, 1))])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(fv1, 1))])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(fv2, 1))]);
  return botanaPolynomials;
}

IOSObjectArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_botanaPolynomialsLineBisectorWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariableArray_(OrgGeogebraCommonKernelProverPolynomialVariable *Ax, OrgGeogebraCommonKernelProverPolynomialVariable *Ay, OrgGeogebraCommonKernelProverPolynomialVariable *Bx, OrgGeogebraCommonKernelProverPolynomialVariable *By, IOSObjectArray *botanaVars) {
  OrgGeogebraCommonKernelAlgosSymbolicParameters_initialize();
  IOSObjectArray *botanaPolynomials = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
  OrgGeogebraCommonKernelProverPolynomialPolynomial *a1 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(Ax);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *a2 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(Ay);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *c1 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(botanaVars), 0));
  OrgGeogebraCommonKernelProverPolynomialPolynomial *c2 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(botanaVars, 1));
  OrgGeogebraCommonKernelProverPolynomialPolynomial *d1 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(botanaVars, 2));
  OrgGeogebraCommonKernelProverPolynomialPolynomial *d2 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(botanaVars, 3));
  (void) IOSObjectArray_Set(botanaPolynomials, 0, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([(new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(2)) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:c1])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(Ax)])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(Bx)]);
  (void) IOSObjectArray_Set(botanaPolynomials, 1, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([(new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(2)) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:c2])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(Ay)])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(By)]);
  (void) IOSObjectArray_Set(botanaPolynomials, 2, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([d2 subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:c2]))) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:c1]))) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:a1]);
  (void) IOSObjectArray_Set(botanaPolynomials, 3, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([d1 subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:c1]))) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:c2]))) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:a2]);
  return botanaPolynomials;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosSymbolicParameters)
