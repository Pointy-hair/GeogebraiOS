//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoPolygonOperation.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/LinearRing.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/geom/impl/CoordinateArraySequence.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "org/geogebra/common/kernel/algos/AlgoPolygonOperation.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonKernelAlgosAlgoPolygonOperation () {
 @public
  OrgGeogebraCommonKernelGeosGeoPolygon *inPoly0_;
  OrgGeogebraCommonKernelGeosGeoPolygon *inPoly1_;
  OrgGeogebraCommonKernelGeosGeoPolygon *poly_;
  IOSObjectArray *points_;
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum *operationType_;
  jboolean labelPointsAndSegments_;
  jboolean labelsNeedIniting_;
}

- (void)setOutput;

- (void)updateSegmentsAndPointsLabels;

- (void)updatePointsArrayWithInt:(jint)n;

- (void)removePointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)oldPoint;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation, inPoly0_, OrgGeogebraCommonKernelGeosGeoPolygon *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation, inPoly1_, OrgGeogebraCommonKernelGeosGeoPolygon *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation, poly_, OrgGeogebraCommonKernelGeosGeoPolygon *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation, points_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation, operationType_, OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_compute(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_updateSegmentsAndPointsLabels(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_updatePointsArrayWithInt_(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation *self, jint n);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_removePointWithOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation *self, OrgGeogebraCommonKernelGeosGeoPoint *oldPoint);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum *new_OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation OrgGeogebraCommonKernelAlgosAlgoPolygonOperation

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
                  withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)inPoly0
                  withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)inPoly1
withOrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum:(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum *)operationType {
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_(self, cons, labels, inPoly0, inPoly1, operationType);
  return self;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inPoly0_);
  IOSObjectArray_Set(input_, 1, inPoly1_);
  for (jint i = 0; i < input_->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) addAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  }
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) addToAlgorithmListWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:poly_];
  [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  [cons_ addToAlgorithmListWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
}

- (void)setOutput {
  if (points_ == nil) return;
  if (!labelPointsAndSegments_) {
    [super setOutputLengthWithInt:1];
    [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:poly_];
  }
  else {
    IOSObjectArray *segments = [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) getSegments];
    IOSObjectArray *pts = [poly_ getPoints];
    jint size = 1 + ((IOSObjectArray *) nil_chk(segments))->size_ + ((IOSObjectArray *) nil_chk(pts))->size_;
    [super setOutputLengthWithInt:size];
    jint k = 0;
    [super setOutputWithInt:k withOrgGeogebraCommonKernelGeosGeoElement:poly_];
    for (jint i = 0; i < segments->size_; i++) {
      [super setOutputWithInt:++k withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(segments, i), [OrgGeogebraCommonKernelGeosGeoElement class])];
    }
    for (jint i = 0; i < pts->size_; i++) {
      [super setOutputWithInt:++k withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(pts, i), [OrgGeogebraCommonKernelGeosGeoElement class])];
    }
  }
}

- (OrgGeogebraCommonKernelGeosGeoPolygon *)getPoly {
  return poly_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_compute(self);
}

- (void)updateSegmentsAndPointsLabels {
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_updateSegmentsAndPointsLabels(self);
}

- (void)updatePointsArrayWithInt:(jint)n {
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_updatePointsArrayWithInt_(self, n);
}

- (void)removePointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)oldPoint {
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_removePointWithOrgGeogebraCommonKernelGeosGeoPoint_(self, oldPoint);
}

- (void)dealloc {
  RELEASE_(inPoly0_);
  RELEASE_(inPoly1_);
  RELEASE_(poly_);
  RELEASE_(points_);
  RELEASE_(operationType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum:", "AlgoPolygonOperation", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "setOutput", NULL, "V", 0x2, NULL, NULL },
    { "getPoly", NULL, "Lorg.geogebra.common.kernel.geos.GeoPolygon;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "updateSegmentsAndPointsLabels", NULL, "V", 0x2, NULL, NULL },
    { "updatePointsArrayWithInt:", "updatePointsArray", "V", 0x2, NULL, NULL },
    { "removePointWithOrgGeogebraCommonKernelGeosGeoPoint:", "removePoint", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inPoly0_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "inPoly1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "poly_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "points_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "operationType_", NULL, 0x2, "Lorg.geogebra.common.kernel.algos.AlgoPolygonOperation$PolyOperation;", NULL, NULL,  },
    { "labelPointsAndSegments_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelsNeedIniting_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.algos.AlgoPolygonOperation$PolyOperation;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoPolygonOperation = { 2, "AlgoPolygonOperation", "org.geogebra.common.kernel.algos", NULL, 0x401, 8, methods, 7, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoPolygonOperation;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoPolygon *inPoly0, OrgGeogebraCommonKernelGeosGeoPolygon *inPoly1, OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum *operationType) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_set_operationType_(self, operationType);
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_set_inPoly0_(self, inPoly0);
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_set_inPoly1_(self, inPoly1);
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_setAndConsume_points_(self, [IOSObjectArray newArrayWithLength:0 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()]);
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_setAndConsume_poly_(self, new_OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, self->points_));
  self->labelPointsAndSegments_ = YES;
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_compute(self);
  jint labelsLength = labels == nil ? 0 : labels->size_;
  self->labelsNeedIniting_ = YES;
  if (self->labelPointsAndSegments_) {
    [self->poly_ initLabelsWithNSStringArray:labels];
  }
  else if (labelsLength == 1) {
    [self->poly_ setLabelWithNSString:IOSObjectArray_Get(nil_chk(labels), 0)];
  }
  else {
    [self->poly_ setLabelWithNSString:nil];
  }
  self->labelsNeedIniting_ = NO;
}

void OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_compute(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation *self) {
  IOSObjectArray *pts0 = [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->inPoly0_)) getPoints];
  IOSObjectArray *pts1 = [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->inPoly1_)) getPoints];
  if (((IOSObjectArray *) nil_chk(pts0))->size_ == 0 || ((IOSObjectArray *) nil_chk(pts1))->size_ == 0) {
    return;
  }
  IOSObjectArray *coordinates0 = [IOSObjectArray arrayWithLength:pts0->size_ + 1 type:ComVividsolutionsJtsGeomCoordinate_class_()];
  IOSObjectArray *coordinates1 = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(pts1))->size_ + 1 type:ComVividsolutionsJtsGeomCoordinate_class_()];
  OrgGeogebraCommonKernelMatrixCoords *xy;
  for (jint i = 0; i < pts0->size_; i++) {
    xy = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(pts0, i))) getCoordsInD2];
    IOSObjectArray_SetAndConsume(coordinates0, i, new_ComVividsolutionsJtsGeomCoordinate_initWithDouble_withDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(xy)) getWithInt:1], [xy getWithInt:2]));
  }
  xy = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(pts0, 0))) getCoordsInD2];
  IOSObjectArray_SetAndConsume(coordinates0, pts0->size_, new_ComVividsolutionsJtsGeomCoordinate_initWithDouble_withDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(xy)) getWithInt:1], [xy getWithInt:2]));
  for (jint i = 0; i < pts1->size_; i++) {
    xy = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(pts1, i))) getCoordsInD2];
    IOSObjectArray_SetAndConsume(coordinates1, i, new_ComVividsolutionsJtsGeomCoordinate_initWithDouble_withDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(xy)) getWithInt:1], [xy getWithInt:2]));
  }
  xy = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(pts1, 0))) getCoordsInD2];
  IOSObjectArray_SetAndConsume(coordinates1, pts1->size_, new_ComVividsolutionsJtsGeomCoordinate_initWithDouble_withDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(xy)) getWithInt:1], [xy getWithInt:2]));
  ComVividsolutionsJtsGeomImplCoordinateArraySequence *cas0 = [new_ComVividsolutionsJtsGeomImplCoordinateArraySequence_initWithComVividsolutionsJtsGeomCoordinateArray_(coordinates0) autorelease];
  ComVividsolutionsJtsGeomImplCoordinateArraySequence *cas1 = [new_ComVividsolutionsJtsGeomImplCoordinateArraySequence_initWithComVividsolutionsJtsGeomCoordinateArray_(coordinates1) autorelease];
  ComVividsolutionsJtsGeomGeometryFactory *fact = [new_ComVividsolutionsJtsGeomGeometryFactory_init() autorelease];
  ComVividsolutionsJtsGeomGeometry *geom;
  @try {
    ComVividsolutionsJtsGeomLinearRing *linear0 = [fact createLinearRingWithComVividsolutionsJtsGeomCoordinateSequence:cas0];
    ComVividsolutionsJtsGeomLinearRing *linear1 = [fact createLinearRingWithComVividsolutionsJtsGeomCoordinateSequence:cas1];
    ComVividsolutionsJtsGeomPolygon *poly0 = [new_ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRingArray_withComVividsolutionsJtsGeomGeometryFactory_(linear0, nil, fact) autorelease];
    ComVividsolutionsJtsGeomPolygon *poly1 = [new_ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRingArray_withComVividsolutionsJtsGeomGeometryFactory_(linear1, nil, fact) autorelease];
    switch ([self->operationType_ ordinal]) {
      default:
      case OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperation_INTERSECTION:
      geom = [poly1 intersectionWithComVividsolutionsJtsGeomGeometry:poly0];
      break;
      case OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperation_UNION:
      geom = [poly1 union__WithComVividsolutionsJtsGeomGeometry:poly0];
      break;
      case OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperation_DIFFERENCE:
      geom = [poly1 differenceWithComVividsolutionsJtsGeomGeometry:poly0];
      break;
    }
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_updatePointsArrayWithInt_(self, 0);
    [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:self->points_];
    [self setOutput];
    [self->poly_ setUndefined];
    return;
  }
  if (!([geom isKindOfClass:[ComVividsolutionsJtsGeomPolygon class]])) {
    OrgGeogebraCommonUtilDebugLog_warnWithNSString_(JreStrcat("$$", @"result not a polygon: ", [((ComVividsolutionsJtsGeomGeometry *) nil_chk(geom)) getGeometryType]));
    jint dim = [geom getDimension];
    jint ng = [geom getNumGeometries];
    if (dim == 2) {
      jint ng2 = 0;
      jint j2 = 0;
      for (jint j = 0; j < ng; j++) {
        if ([((ComVividsolutionsJtsGeomGeometry *) nil_chk([geom getGeometryNWithInt:j])) getDimension] == 2) {
          ng2++;
          j2 = j;
        }
      }
      if (ng2 == 1) {
        geom = [geom getGeometryNWithInt:j2];
      }
      else {
        OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_updatePointsArrayWithInt_(self, 0);
        [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:self->points_];
        [self setOutput];
        [self->poly_ setUndefined];
        OrgGeogebraCommonUtilDebugLog_warnWithNSString_(JreStrcat("$I$", @"There are ", ng2, @" polygons"));
        return;
      }
    }
    else {
      OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_updatePointsArrayWithInt_(self, 0);
      [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:self->points_];
      [self setOutput];
      [self->poly_ setUndefined];
      OrgGeogebraCommonUtilDebugLog_warnWithNSString_(@"Dimension less than 2");
      return;
    }
  }
  ComVividsolutionsJtsGeomPolygon *poly2 = (ComVividsolutionsJtsGeomPolygon *) check_class_cast(geom, [ComVividsolutionsJtsGeomPolygon class]);
  IOSObjectArray *coordinates2 = [((ComVividsolutionsJtsGeomPolygon *) nil_chk(poly2)) getCoordinates];
  jint n = ((IOSObjectArray *) nil_chk(coordinates2))->size_;
  jint oldPointNumber = ((IOSObjectArray *) nil_chk(self->points_))->size_;
  if (n != oldPointNumber) {
    OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_updatePointsArrayWithInt_(self, n);
    [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:self->points_];
    [self setOutput];
  }
  for (jint k = 0; k < n; k++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, k))) setCoordsWithDouble:((ComVividsolutionsJtsGeomCoordinate *) nil_chk(IOSObjectArray_Get(coordinates2, k)))->x_ withDouble:((ComVividsolutionsJtsGeomCoordinate *) nil_chk(IOSObjectArray_Get(coordinates2, k)))->y_ withDouble:1];
  }
  [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) calcArea];
  if (n != oldPointNumber) {
    OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_updateSegmentsAndPointsLabels(self);
  }
}

void OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_updateSegmentsAndPointsLabels(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation *self) {
  if (self->labelsNeedIniting_) return;
  jboolean pointsSegmentsShowLabel = ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getLabelingStyle] == OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_ALWAYS_ON) || ([((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getLabelingStyle] == OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_USE_DEFAULTS && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getConstructionDefaults])) getDefaultGeoWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_SEGMENT])) isLabelVisible]);
  if (self->labelPointsAndSegments_) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->points_))->size_; i++) {
      if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, i))) isLabelSet]) {
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, i))) setLabelWithNSString:nil];
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, i))) setLabelVisibleWithBoolean:pointsSegmentsShowLabel];
      }
    }
  }
  IOSObjectArray *segments = [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) getSegments];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(segments))->size_; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *seg = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(segments, i), [OrgGeogebraCommonKernelGeosGeoElement class]);
    if (self->labelPointsAndSegments_) {
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(seg)) isLabelSet]) {
        [seg setLabelWithNSString:nil];
        [seg setAuxiliaryObjectWithBoolean:YES];
        [seg setLabelVisibleWithBoolean:pointsSegmentsShowLabel];
      }
      else {
        pointsSegmentsShowLabel = (pointsSegmentsShowLabel || [seg isLabelVisible]);
      }
    }
    [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(seg)) getParentAlgorithm])) update];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_updatePointsArrayWithInt_(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation *self, jint n) {
  IOSObjectArray *oldPoints = self->points_;
  jint oldPointsLength = oldPoints == nil ? 0 : oldPoints->size_;
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_setAndConsume_points_(self, [IOSObjectArray newArrayWithLength:n type:OrgGeogebraCommonKernelGeosGeoPoint_class_()]);
  for (jint i = 0; i < oldPointsLength; i++) {
    if (i < self->points_->size_) {
      IOSObjectArray_Set(self->points_, i, IOSObjectArray_Get(nil_chk(oldPoints), i));
    }
    else {
      OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_removePointWithOrgGeogebraCommonKernelGeosGeoPoint_(self, IOSObjectArray_Get(nil_chk(oldPoints), i));
    }
  }
  for (jint i = oldPointsLength; i < self->points_->size_; i++) {
    OrgGeogebraCommonKernelGeosGeoPoint *newPoint = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(self->cons_) autorelease];
    [newPoint setCoordsWithDouble:0 withDouble:0 withDouble:1];
    [newPoint setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
    [newPoint setEuclidianVisibleWithBoolean:YES];
    [newPoint setAuxiliaryObjectWithBoolean:YES];
    IOSObjectArray_Set(self->points_, i, newPoint);
  }
}

void OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_removePointWithOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation *self, OrgGeogebraCommonKernelGeosGeoPoint *oldPoint) {
  JavaUtilArrayList *algoList = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(oldPoint)) getAlgorithmList];
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(algoList)) size]; k++) {
    OrgGeogebraCommonKernelAlgosAlgoElement *algo = [algoList getWithInt:k];
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(self->input_))->size_; j++) [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, j))) removeFromUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:algo];
  }
  [oldPoint setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:nil];
  for (jint k = 0; k < [algoList size]; k++) {
    OrgGeogebraCommonKernelAlgosAlgoElement *algo = [algoList getWithInt:k];
    if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegment class]] && [((OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegment *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegment *) check_class_cast(algo, [OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegment class])))) getPoly] == self->poly_) {
      continue;
    }
    [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) remove];
  }
  [algoList clear];
  [oldPoint doRemove];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum)

OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum *OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_values_[3];

@implementation OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_values() {
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_values_ count:3 type:OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_values();
}

+ (OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum *OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_initialize();
  for (int i = 0; i < 3; i++) {
    OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum *e = OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum class]) {
    OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_INTERSECTION = new_OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_initWithNSString_withInt_(@"INTERSECTION", 0);
    OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_UNION = new_OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_initWithNSString_withInt_(@"UNION", 1);
    OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_DIFFERENCE = new_OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_initWithNSString_withInt_(@"DIFFERENCE", 2);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "INTERSECTION", "INTERSECTION", 0x4019, "Lorg.geogebra.common.kernel.algos.AlgoPolygonOperation$PolyOperation;", &OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_INTERSECTION, NULL,  },
    { "UNION", "UNION", 0x4019, "Lorg.geogebra.common.kernel.algos.AlgoPolygonOperation$PolyOperation;", &OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_UNION, NULL,  },
    { "DIFFERENCE", "DIFFERENCE", 0x4019, "Lorg.geogebra.common.kernel.algos.AlgoPolygonOperation$PolyOperation;", &OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_DIFFERENCE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.algos.AlgoPolygonOperation$PolyOperation;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum = { 2, "PolyOperation", "org.geogebra.common.kernel.algos", "AlgoPolygonOperation", 0x4019, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/kernel/algos/AlgoPolygonOperation$PolyOperation;>;" };
  return &_OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum *new_OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum *self = [OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum alloc];
  OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoPolygonOperation_PolyOperationEnum)
