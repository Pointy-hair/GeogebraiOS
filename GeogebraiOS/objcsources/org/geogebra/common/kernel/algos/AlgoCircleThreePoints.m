//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoCircleThreePoints.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/LocusEquation.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/EquationElementInterface.h"
#include "org/geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "org/geogebra/common/kernel/algos/SymbolicParametersBotanaAlgo.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "org/geogebra/common/kernel/prover/polynomial/Variable.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/util/MyMath.h"

@interface OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> A_, B_, C_;
  IOSObjectArray *botanaVars_;
  IOSObjectArray *botanaPolynomials_;
  OrgGeogebraCommonKernelGeosGeoLine *s0_, *s1_;
  OrgGeogebraCommonKernelGeosGeoPoint *center_;
  IOSDoubleArray *det_;
  jdouble ax_, ay_, bx_, by_, cx_, cy_, ABx_, ABy_, ACx_, ACy_, BCx_, BCy_, maxDet_;
  jint casenr_;
}

- (void)setIncidence;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints, A_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints, B_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints, C_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints, botanaVars_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints, botanaPolynomials_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints, s0_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints, s1_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints, center_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints, det_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_setIncidence(OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C {
  OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, A, B, C);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C {
  OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, A, B, C);
  return self;
}

- (void)setIncidence {
  OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_setIncidence(self);
}

- (void)setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C {
  self->A_ = A;
  self->B_ = B;
  self->C_ = C;
}

- (void)createCircle {
  circle_ = new_OrgGeogebraCommonKernelGeosGeoConic_initWithOrgGeogebraCommonKernelConstruction_(cons_);
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Circle();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS;
}

- (void)setInputOutput {
  [self setInput];
  [self setOutput];
  [self setDependencies];
}

- (void)setInput {
  input_ = [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) toGeoElement]);
  (void) IOSObjectArray_Set(input_, 1, [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B_)) toGeoElement]);
  (void) IOSObjectArray_Set(input_, 2, [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(C_)) toGeoElement]);
}

- (void)setOutput {
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:circle_];
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)getCircle {
  return circle_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getA {
  return (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(A_, [OrgGeogebraCommonKernelGeosGeoPoint class]);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getB {
  return (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(B_, [OrgGeogebraCommonKernelGeosGeoPoint class]);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getC {
  return (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(C_, [OrgGeogebraCommonKernelGeosGeoPoint class]);
}

- (void)compute {
  if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getA])) isFinite] || ![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getB])) isFinite] || ![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getC])) isFinite]) {
    [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle_)) setUndefined];
    return;
  }
  ax_ = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getA]))->inhomX_;
  ay_ = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getA]))->inhomY_;
  bx_ = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getB]))->inhomX_;
  by_ = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getB]))->inhomY_;
  cx_ = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getC]))->inhomX_;
  cy_ = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getC]))->inhomY_;
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(ax_, bx_) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(ay_, by_)) {
    if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(ax_, cx_) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(ay_, cy_)) {
      [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle_)) setCircleWithOrgGeogebraCommonKernelGeosGeoPoint:[self getA] withDouble:0.0];
      return;
    }
    ACx_ = cx_ - ax_;
    ACy_ = cy_ - ay_;
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(center_)) setCoordsWithDouble:-ACy_ withDouble:ACx_ withDouble:0.0];
    [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle_)) setCircleWithOrgGeogebraCommonKernelGeosGeoPoint:center_ withOrgGeogebraCommonKernelGeosGeoPoint:[self getA]];
    return;
  }
  else if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(ax_, cx_) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(ay_, cy_)) {
    ABx_ = bx_ - ax_;
    ABy_ = by_ - ay_;
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(center_)) setCoordsWithDouble:-ABy_ withDouble:ABx_ withDouble:0.0];
    [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle_)) setCircleWithOrgGeogebraCommonKernelGeosGeoPoint:center_ withOrgGeogebraCommonKernelGeosGeoPoint:[self getA]];
    return;
  }
  else if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(bx_, cx_) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(by_, cy_)) {
    ACx_ = cx_ - ax_;
    ACy_ = cy_ - ay_;
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(center_)) setCoordsWithDouble:-ACy_ withDouble:ACx_ withDouble:0.0];
    [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle_)) setCircleWithOrgGeogebraCommonKernelGeosGeoPoint:center_ withOrgGeogebraCommonKernelGeosGeoPoint:[self getA]];
    return;
  }
  ABx_ = bx_ - ax_;
  ABy_ = by_ - ay_;
  ACx_ = cx_ - ax_;
  ACy_ = cy_ - ay_;
  BCx_ = cx_ - bx_;
  BCy_ = cy_ - by_;
  jdouble lengthAB = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(ABx_, ABy_);
  jdouble lengthAC = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(ACx_, ACy_);
  jdouble lengthBC = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(BCx_, BCy_);
  *IOSDoubleArray_GetRef(nil_chk(det_), 0) = JavaLangMath_absWithDouble_(ABx_ * ACy_ - ABy_ * ACx_) / (lengthAB * lengthAC);
  *IOSDoubleArray_GetRef(det_, 1) = JavaLangMath_absWithDouble_(ACx_ * BCy_ - ACy_ * BCx_) / (lengthAC * lengthBC);
  *IOSDoubleArray_GetRef(det_, 2) = JavaLangMath_absWithDouble_(ABx_ * BCy_ - ABy_ * BCx_) / (lengthAB * lengthBC);
  maxDet_ = IOSDoubleArray_Get(det_, 0);
  casenr_ = 0;
  if (IOSDoubleArray_Get(det_, 1) > maxDet_) {
    casenr_ = 1;
    maxDet_ = IOSDoubleArray_Get(det_, 1);
  }
  if (IOSDoubleArray_Get(det_, 2) > maxDet_) {
    casenr_ = 2;
    maxDet_ = IOSDoubleArray_Get(det_, 2);
  }
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(maxDet_)) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(center_)) setCoordsWithDouble:-ABy_ withDouble:ABx_ withDouble:0.0];
    [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle_)) setCircleWithOrgGeogebraCommonKernelGeosGeoPoint:center_ withOrgGeogebraCommonKernelGeosGeoPoint:[self getA]];
  }
  else {
    switch (casenr_) {
      case 0:
      ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(s0_))->x_ = ABx_;
      s0_->y_ = ABy_;
      s0_->z_ = -((ax_ + bx_) * s0_->x_ + (ay_ + by_) * s0_->y_) / 2.0;
      ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(s1_))->x_ = ACx_;
      s1_->y_ = ACy_;
      s1_->z_ = -((ax_ + cx_) * s1_->x_ + (ay_ + cy_) * s1_->y_) / 2.0;
      break;
      case 1:
      ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(s1_))->x_ = ACx_;
      s1_->y_ = ACy_;
      s1_->z_ = -((ax_ + cx_) * s1_->x_ + (ay_ + cy_) * s1_->y_) / 2.0;
      ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(s0_))->x_ = BCx_;
      s0_->y_ = BCy_;
      s0_->z_ = -((bx_ + cx_) * s0_->x_ + (by_ + cy_) * s0_->y_) / 2.0;
      break;
      case 2:
      ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(s0_))->x_ = ABx_;
      s0_->y_ = ABy_;
      s0_->z_ = -((ax_ + bx_) * s0_->x_ + (ay_ + by_) * s0_->y_) / 2.0;
      ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(s1_))->x_ = BCx_;
      s1_->y_ = BCy_;
      s1_->z_ = -((bx_ + cx_) * s1_->x_ + (by_ + cy_) * s1_->y_) / 2.0;
      break;
    }
    OrgGeogebraCommonKernelGeosGeoVec3D_crossWithOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoVec3D_(s0_, s1_, center_);
    [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle_)) setCircleWithOrgGeogebraCommonKernelGeosGeoPoint:center_ withDouble:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(center_)) distanceWithOrgGeogebraCommonKernelGeosGeoPoint:[self getA]]];
  }
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"CircleThroughABC" withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(C_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (IOSObjectArray *)getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return botanaVars_;
}

- (IOSObjectArray *)getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (botanaPolynomials_ != nil) {
    return botanaPolynomials_;
  }
  IOSObjectArray *circle1vars = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
  IOSObjectArray *circle2vars = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
  IOSObjectArray *circle3vars = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
  circle1vars = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(IOSObjectArray_Get(nil_chk(input_), 0), @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(input_, 0)];
  if (botanaVars_ == nil) {
    botanaVars_ = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
    (void) IOSObjectArray_Set(botanaVars_, 0, new_OrgGeogebraCommonKernelProverPolynomialVariable_init());
    (void) IOSObjectArray_Set(botanaVars_, 1, new_OrgGeogebraCommonKernelProverPolynomialVariable_init());
    (void) IOSObjectArray_Set(botanaVars_, 2, IOSObjectArray_Get(nil_chk(circle1vars), 0));
    (void) IOSObjectArray_Set(botanaVars_, 3, IOSObjectArray_Get(circle1vars, 1));
  }
  IOSObjectArray *centerVars = [IOSObjectArray newArrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk(botanaVars_), 0), IOSObjectArray_Get(botanaVars_, 1) } count:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
  circle2vars = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(IOSObjectArray_Get(input_, 1), @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(input_, 1)];
  circle3vars = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(IOSObjectArray_Get(input_, 2), @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(input_, 2)];
  botanaPolynomials_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
  (void) IOSObjectArray_Set(botanaPolynomials_, 0, OrgGeogebraCommonKernelProverPolynomialPolynomial_equidistantWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(circle1vars), 0), IOSObjectArray_Get(circle1vars, 1), IOSObjectArray_Get(centerVars, 0), IOSObjectArray_Get(centerVars, 1), IOSObjectArray_Get(nil_chk(circle2vars), 0), IOSObjectArray_Get(circle2vars, 1)));
  (void) IOSObjectArray_Set(botanaPolynomials_, 1, OrgGeogebraCommonKernelProverPolynomialPolynomial_equidistantWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(circle1vars, 0), IOSObjectArray_Get(circle1vars, 1), IOSObjectArray_Get(centerVars, 0), IOSObjectArray_Get(centerVars, 1), IOSObjectArray_Get(nil_chk(circle3vars), 0), IOSObjectArray_Get(circle3vars, 1)));
  return botanaPolynomials_;
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<OrgGeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                         withOrgGeogebraCommonKernelAlgosEquationScopeInterface:(id<OrgGeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return OrgGeogebraCommonKernelLocusEquation_eqnCircleThreePointsWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "AlgoCircleThreePoints", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "AlgoCircleThreePoints", NULL, 0x1, NULL, NULL },
    { "setIncidence", NULL, "V", 0x2, NULL, NULL },
    { "setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "setPoints", "V", 0x4, NULL, NULL },
    { "createCircle", NULL, "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "setInput", NULL, "V", 0x4, NULL, NULL },
    { "setOutput", NULL, "V", 0x4, NULL, NULL },
    { "getCircle", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "getA", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getB", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getC", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lorg.geogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lorg.geogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "B_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "C_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "circle_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "botanaVars_", NULL, 0x2, "[Lorg.geogebra.common.kernel.prover.polynomial.Variable;", NULL, NULL,  },
    { "botanaPolynomials_", NULL, 0x2, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
    { "s0_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "s1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "center_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "det_", NULL, 0x2, "[D", NULL, NULL,  },
    { "ax_", NULL, 0x82, "D", NULL, NULL,  },
    { "ay_", NULL, 0x82, "D", NULL, NULL,  },
    { "bx_", NULL, 0x82, "D", NULL, NULL,  },
    { "by_", NULL, 0x82, "D", NULL, NULL,  },
    { "cx_", NULL, 0x82, "D", NULL, NULL,  },
    { "cy_", NULL, 0x82, "D", NULL, NULL,  },
    { "ABx_", NULL, 0x82, "D", NULL, NULL,  },
    { "ABy_", NULL, 0x82, "D", NULL, NULL,  },
    { "ACx_", NULL, 0x82, "D", NULL, NULL,  },
    { "ACy_", NULL, 0x82, "D", NULL, NULL,  },
    { "BCx_", NULL, 0x82, "D", NULL, NULL,  },
    { "BCy_", NULL, 0x82, "D", NULL, NULL,  },
    { "maxDet_", NULL, 0x82, "D", NULL, NULL,  },
    { "casenr_", NULL, 0x82, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints = { 2, "AlgoCircleThreePoints", "org.geogebra.common.kernel.algos", NULL, 0x1, 20, methods, 24, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C) {
  (void) OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, A, B, C);
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->circle_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints *new_OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C) {
  OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints *self = [OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints alloc];
  OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, A, B, C);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->det_ = [IOSDoubleArray newArrayWithLength:3];
  [self setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointND:A withOrgGeogebraCommonKernelKernelNDGeoPointND:B withOrgGeogebraCommonKernelKernelNDGeoPointND:C];
  [self createCircle];
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->circle_)) addPointOnConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:[self getA]];
  [self->circle_ addPointOnConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:[self getB]];
  [self->circle_ addPointOnConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:[self getC]];
  self->s0_ = new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons);
  self->s1_ = new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons);
  self->center_ = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  [self compute];
  OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_setIncidence(self);
}

OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints *new_OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C) {
  OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints *self = [OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints alloc];
  OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, A, B, C);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints_setIncidence(OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints *self) {
  if ([self->A_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]]) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->A_, [OrgGeogebraCommonKernelGeosGeoPoint class])))) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->circle_ withBoolean:NO];
  if ([self->B_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]]) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->B_, [OrgGeogebraCommonKernelGeosGeoPoint class])))) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->circle_ withBoolean:NO];
  if ([self->C_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]]) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->C_, [OrgGeogebraCommonKernelGeosGeoPoint class])))) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->circle_ withBoolean:NO];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints)
