//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoIntersectLines.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/LocusEquation.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectAbstract.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectLines.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/EquationElementInterface.h"
#include "org/geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "org/geogebra/common/kernel/algos/SymbolicParameters.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "org/geogebra/common/kernel/prover/polynomial/Variable.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoIntersectLines () {
 @public
  OrgGeogebraCommonKernelGeosGeoLine *g_, *h_;
  OrgGeogebraCommonKernelGeosGeoPoint *S_;
  IOSObjectArray *polynomials_;
  IOSObjectArray *botanaPolynomials_;
  IOSObjectArray *botanaVars_;
}

- (void)addIncidence;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLines, g_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLines, h_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLines, S_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLines, polynomials_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLines, botanaPolynomials_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLines, botanaVars_, IOSObjectArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectLines_addIncidence(OrgGeogebraCommonKernelAlgosAlgoIntersectLines *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectLines_compute(OrgGeogebraCommonKernelAlgosAlgoIntersectLines *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoIntersectLines

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g
                     withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)h {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLines_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(self, cons, label, g, h);
  return self;
}

- (void)addIncidence {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLines_addIncidence(self);
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, g_);
  IOSObjectArray_Set(input_, 1, h_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:S_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getPoint {
  return S_;
}

- (OrgGeogebraCommonKernelGeosGeoLine *)geth {
  return g_;
}

- (OrgGeogebraCommonKernelGeosGeoLine *)getg {
  return h_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLines_compute(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionPointOfAB" withNSString:[((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(h_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (OrgGeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  return [new_OrgGeogebraCommonKernelAlgosSymbolicParameters_initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self) autorelease];
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if (([g_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) || ([h_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]])) {
    @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  }
  if (g_ != nil && h_ != nil) {
    [g_ getFreeVariablesWithJavaUtilHashSet:variables];
    [h_ getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSIntArray *)getDegrees {
  if (([g_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) || ([h_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]])) {
    @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  }
  if (g_ != nil && h_ != nil) {
    IOSIntArray *degree1 = [g_ getDegrees];
    IOSIntArray *degree2 = [h_ getDegrees];
    return OrgGeogebraCommonKernelAlgosSymbolicParameters_crossDegreeWithIntArray_withIntArray_(degree1, degree2);
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if (([g_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) || ([h_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]])) {
    @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  }
  if (g_ != nil && h_ != nil) {
    IOSObjectArray *coords1 = [g_ getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *coords2 = [h_ getExactCoordinatesWithJavaUtilHashMap:values];
    return OrgGeogebraCommonKernelAlgosSymbolicParameters_crossProductWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(coords1, coords2);
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getPolynomials {
  if (polynomials_ != nil) {
    return polynomials_;
  }
  if (([g_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) || ([h_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]])) {
    @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  }
  if (g_ != nil && h_ != nil) {
    IOSObjectArray *coords1 = [g_ getPolynomials];
    IOSObjectArray *coords2 = [h_ getPolynomials];
    OrgGeogebraCommonKernelAlgosAlgoIntersectLines_set_polynomials_(self, OrgGeogebraCommonKernelProverPolynomialPolynomial_crossProductWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(coords1, coords2));
    return polynomials_;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return botanaVars_;
}

- (IOSObjectArray *)getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (botanaPolynomials_ != nil) {
    return botanaPolynomials_;
  }
  if (g_ != nil && h_ != nil) {
    if (botanaVars_ == nil) {
      OrgGeogebraCommonKernelAlgosAlgoIntersectLines_setAndConsume_botanaVars_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()]);
      IOSObjectArray_SetAndConsume(botanaVars_, 0, new_OrgGeogebraCommonKernelProverPolynomialVariable_init());
      IOSObjectArray_SetAndConsume(botanaVars_, 1, new_OrgGeogebraCommonKernelProverPolynomialVariable_init());
    }
    IOSObjectArray *fv = [g_ getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:g_];
    OrgGeogebraCommonKernelAlgosAlgoIntersectLines_setAndConsume_botanaPolynomials_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()]);
    IOSObjectArray_Set(botanaPolynomials_, 0, OrgGeogebraCommonKernelProverPolynomialPolynomial_collinearWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(fv), 0), IOSObjectArray_Get(fv, 1), IOSObjectArray_Get(fv, 2), IOSObjectArray_Get(fv, 3), IOSObjectArray_Get(nil_chk(botanaVars_), 0), IOSObjectArray_Get(botanaVars_, 1)));
    fv = [h_ getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:h_];
    IOSObjectArray_Set(botanaPolynomials_, 1, OrgGeogebraCommonKernelProverPolynomialPolynomial_collinearWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(fv), 0), IOSObjectArray_Get(fv, 1), IOSObjectArray_Get(fv, 2), IOSObjectArray_Get(fv, 3), IOSObjectArray_Get(botanaVars_, 0), IOSObjectArray_Get(botanaVars_, 1)));
    return botanaPolynomials_;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<OrgGeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                         withOrgGeogebraCommonKernelAlgosEquationScopeInterface:(id<OrgGeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return OrgGeogebraCommonKernelLocusEquation_eqnIntersectLinesWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(h_);
  RELEASE_(S_);
  RELEASE_(polynomials_);
  RELEASE_(botanaPolynomials_);
  RELEASE_(botanaVars_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoLine:", "AlgoIntersectLines", NULL, 0x1, NULL, NULL },
    { "addIncidence", NULL, "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getPoint", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "geth", NULL, "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getg", NULL, "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lorg.geogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lorg.geogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lorg.geogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "h_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "S_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "polynomials_", NULL, 0x2, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
    { "botanaPolynomials_", NULL, 0x2, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
    { "botanaVars_", NULL, 0x2, "[Lorg.geogebra.common.kernel.prover.polynomial.Variable;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIntersectLines = { 2, "AlgoIntersectLines", "org.geogebra.common.kernel.algos", NULL, 0x1, 19, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoIntersectLines;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIntersectLines_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelAlgosAlgoIntersectLines *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoLine *g, OrgGeogebraCommonKernelGeosGeoLine *h) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectAbstract_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoIntersectLines_set_g_(self, g);
  OrgGeogebraCommonKernelAlgosAlgoIntersectLines_set_h_(self, h);
  OrgGeogebraCommonKernelAlgosAlgoIntersectLines_setAndConsume_S_(self, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLines_compute(self);
  [self->S_ setLabelWithNSString:label];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLines_addIncidence(self);
}

OrgGeogebraCommonKernelAlgosAlgoIntersectLines *new_OrgGeogebraCommonKernelAlgosAlgoIntersectLines_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoLine *g, OrgGeogebraCommonKernelGeosGeoLine *h) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLines *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectLines alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLines_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(self, cons, label, g, h);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectLines_addIncidence(OrgGeogebraCommonKernelAlgosAlgoIntersectLines *self) {
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->S_)) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->g_ withBoolean:NO];
  [self->S_ addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->h_ withBoolean:NO];
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectLines_compute(OrgGeogebraCommonKernelAlgosAlgoIntersectLines *self) {
  OrgGeogebraCommonKernelGeosGeoVec3D_crossWithOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoVec3D_(self->g_, self->h_, self->S_);
  if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->S_)) isDefined]) {
    if (!([((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:self->S_ withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION] && [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->h_)) isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:self->S_ withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION])) [self->S_ setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIntersectLines)
