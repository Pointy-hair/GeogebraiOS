//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoListLCM.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoListLCM.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"

@interface OrgGeogebraCommonKernelAlgosAlgoListLCM () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *geoList_;
  OrgGeogebraCommonKernelGeosGeoNumeric *num_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoListLCM, geoList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoListLCM, num_, OrgGeogebraCommonKernelGeosGeoNumeric *)

static JavaMathBigInteger *OrgGeogebraCommonKernelAlgosAlgoListLCM_bigZero_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelAlgosAlgoListLCM, bigZero_, JavaMathBigInteger *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoListLCM_compute(OrgGeogebraCommonKernelAlgosAlgoListLCM *self);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelAlgosAlgoListLCM)

@implementation OrgGeogebraCommonKernelAlgosAlgoListLCM

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList {
  OrgGeogebraCommonKernelAlgosAlgoListLCM_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_LCM();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geoList_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:num_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getLCM {
  return num_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoListLCM_compute(self);
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(num_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelAlgosAlgoListLCM class]) {
    JreStrongAssign(&OrgGeogebraCommonKernelAlgosAlgoListLCM_bigZero_, nil, JavaMathBigInteger_valueOfWithLong_(0));
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelAlgosAlgoListLCM)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoListLCM", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getLCM", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bigZero_", NULL, 0x1a, "Ljava.math.BigInteger;", &OrgGeogebraCommonKernelAlgosAlgoListLCM_bigZero_, NULL,  },
    { "geoList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "num_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoListLCM = { 2, "AlgoListLCM", "org.geogebra.common.kernel.algos", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoListLCM;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoListLCM_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAlgosAlgoListLCM *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoListLCM_set_geoList_(self, geoList);
  OrgGeogebraCommonKernelAlgosAlgoListLCM_setAndConsume_num_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoListLCM_compute(self);
  [self->num_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoListLCM *new_OrgGeogebraCommonKernelAlgosAlgoListLCM_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  OrgGeogebraCommonKernelAlgosAlgoListLCM *self = [OrgGeogebraCommonKernelAlgosAlgoListLCM alloc];
  OrgGeogebraCommonKernelAlgosAlgoListLCM_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoListLCM_compute(OrgGeogebraCommonKernelAlgosAlgoListLCM *self) {
  jint size = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) size];
  if (![self->geoList_ isDefined] || size == 0) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->num_)) setUndefined];
    return;
  }
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoList_ getGeoElementForPropertiesDialog])) isGeoNumeric]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->num_)) setUndefined];
    return;
  }
  jdouble nd = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(([self->geoList_ getWithInt:0]), [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
  if (!OrgGeogebraCommonKernelKernel_isIntegerWithDouble_(nd)) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->num_)) setUndefined];
    return;
  }
  JavaMathBigInteger *lcm = JavaMathBigInteger_valueOfWithLong_(J2ObjCFpToLong(OrgGeogebraCommonKernelKernel_checkIntegerWithDouble_(nd)));
  for (jint i = 1; i < [self->geoList_ size]; i++) {
    nd = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(([self->geoList_ getWithInt:i]), [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    if (!OrgGeogebraCommonKernelKernel_isIntegerWithDouble_(nd)) {
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->num_)) setUndefined];
      return;
    }
    JavaMathBigInteger *n = JavaMathBigInteger_valueOfWithLong_(J2ObjCFpToLong(nd));
    if ([((JavaMathBigInteger *) nil_chk(n)) compareToWithId:OrgGeogebraCommonKernelAlgosAlgoListLCM_bigZero_] == 0) {
      lcm = OrgGeogebraCommonKernelAlgosAlgoListLCM_bigZero_;
    }
    else {
      JavaMathBigInteger *product = [n multiplyWithJavaMathBigInteger:lcm];
      lcm = [((JavaMathBigInteger *) nil_chk(product)) divideWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(lcm)) gcdWithJavaMathBigInteger:n]];
    }
  }
  jdouble resultD = JavaLangMath_absWithDouble_([((JavaMathBigInteger *) nil_chk(lcm)) doubleValue]);
  if (JavaLangMath_absWithDouble_([lcm doubleValue]) > 1e15) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->num_)) setUndefined];
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->num_)) setValueWithDouble:resultD];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoListLCM)
