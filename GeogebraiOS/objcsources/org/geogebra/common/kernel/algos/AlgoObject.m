//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoObject.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/Iterator.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoObject.h"
#include "org/geogebra/common/kernel/algos/AlgorithmSet.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonKernelAlgosAlgoObject () {
 @public
  OrgGeogebraCommonKernelGeosGeoElement *geo_;
  OrgGeogebraCommonKernelGeosGeoText *text_;
  NSString *currentLabel_;
  OrgGeogebraCommonKernelGeosGeoElement *refObject_;
  IOSObjectArray *inputForUpdateSetPropagation_;
}

- (void)updateReferencedObject;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoObject, geo_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoObject, text_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoObject, currentLabel_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoObject, refObject_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoObject, inputForUpdateSetPropagation_, IOSObjectArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoObject_compute(OrgGeogebraCommonKernelAlgosAlgoObject *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoObject_updateReferencedObject(OrgGeogebraCommonKernelAlgosAlgoObject *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoObject

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)text {
  OrgGeogebraCommonKernelAlgosAlgoObject_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, text);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Object();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, text_);
  OrgGeogebraCommonKernelAlgosAlgoObject_setAndConsume_inputForUpdateSetPropagation_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(inputForUpdateSetPropagation_, 0, text_);
  OrgGeogebraCommonKernelAlgosAlgoObject_updateReferencedObject(self);
  if (refObject_ != nil) {
    OrgGeogebraCommonKernelAlgosAlgoObject_set_geo_(self, [refObject_ copyInternalWithOrgGeogebraCommonKernelConstruction:cons_]);
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:refObject_];
    [geo_ setUseVisualDefaultsWithBoolean:NO];
  }
  else {
    OrgGeogebraCommonKernelAlgosAlgoObject_set_geo_(self, [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getOutputGeo]);
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) setUndefined];
  }
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:geo_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResult {
  return geo_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoObject_compute(self);
}

- (void)updateReferencedObject {
  OrgGeogebraCommonKernelAlgosAlgoObject_updateReferencedObject(self);
}

- (IOSObjectArray *)getInputForUpdateSetPropagation {
  if (refObject_ == nil) {
    return input_;
  }
  return inputForUpdateSetPropagation_;
}

- (void)dealloc {
  RELEASE_(geo_);
  RELEASE_(text_);
  RELEASE_(currentLabel_);
  RELEASE_(refObject_);
  RELEASE_(inputForUpdateSetPropagation_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoText:", "AlgoObject", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "updateReferencedObject", NULL, "V", 0x2, NULL, NULL },
    { "getInputForUpdateSetPropagation", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "text_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "currentLabel_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "refObject_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "inputForUpdateSetPropagation_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoObject = { 2, "AlgoObject", "org.geogebra.common.kernel.algos", NULL, 0x1, 7, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoObject;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoObject_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelAlgosAlgoObject *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoText *text) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoObject_set_text_(self, text);
  if (![((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text)) isLabelSet]) [text setPrintDecimalsWithInt:0 withBoolean:YES];
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoObject_compute(self);
  [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) registerRenameListenerAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoObject *new_OrgGeogebraCommonKernelAlgosAlgoObject_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoText *text) {
  OrgGeogebraCommonKernelAlgosAlgoObject *self = [OrgGeogebraCommonKernelAlgosAlgoObject alloc];
  OrgGeogebraCommonKernelAlgosAlgoObject_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, text);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoObject_compute(OrgGeogebraCommonKernelAlgosAlgoObject *self) {
  OrgGeogebraCommonKernelAlgosAlgoObject_updateReferencedObject(self);
  if (self->refObject_ != nil && [self->refObject_ getGeoClassType] == [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getGeoClassType]) {
    [self->geo_ setWithOrgGeogebraCommonKernelGeosGeoElement:self->refObject_];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setUndefined];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoObject_updateReferencedObject(OrgGeogebraCommonKernelAlgosAlgoObject *self) {
  OrgGeogebraCommonKernelAlgosAlgoObject_set_currentLabel_(self, [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) getTextString]);
  OrgGeogebraCommonKernelAlgosAlgoObject_set_refObject_(self, [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:self->currentLabel_]);
  IOSObjectArray_Set(nil_chk(self->inputForUpdateSetPropagation_), 1, self->refObject_);
  if (self->refObject_ != nil) {
    [self->refObject_ addToUpdateSetOnlyWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
    if (self->geo_ != nil) {
      id<JavaUtilIterator> it = [((OrgGeogebraCommonKernelAlgosAlgorithmSet *) nil_chk([self->geo_ getAlgoUpdateSet])) getIterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        [self->refObject_ addToUpdateSetOnlyWithOrgGeogebraCommonKernelAlgosAlgoElement:[it next]];
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoObject)
