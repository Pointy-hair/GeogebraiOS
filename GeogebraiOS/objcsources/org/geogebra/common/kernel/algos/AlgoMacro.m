//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoMacro.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Locateable.h"
#include "org/geogebra/common/kernel/Macro.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoMacro.h"
#include "org/geogebra/common/kernel/algos/Algos.h"
#include "org/geogebra/common/kernel/algos/DrawInformationAlgo.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonKernelAlgosAlgoMacro () {
 @public
  OrgGeogebraCommonKernelMacro *macro_;
  IOSObjectArray *macroInput_, *macroOutput_;
  JavaUtilHashMap *macroToAlgoMap_;
  JavaUtilArrayList *macroOutputAndReferencedGeos_;
  JavaUtilArrayList *algoOutputAndReferencedGeos_;
}

- (jboolean)isMacroInputObjectWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)macroGeo;

- (void)createOutputObjects;

- (void)initMap OBJC_METHOD_FAMILY_NONE;

- (void)mapWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)macroGeo
           withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)algoGeo;

- (OrgGeogebraCommonKernelGeosGeoElement *)getAlgoGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)macroGeo;

- (OrgGeogebraCommonKernelGeosGeoElement *)createAlgoCopyWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)macroGeo;

- (void)initSpecialReferencesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)macroGeo
                             withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)algoGeo OBJC_METHOD_FAMILY_NONE;

- (void)initLineWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)macroLine
                withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)line OBJC_METHOD_FAMILY_NONE;

- (void)initConicWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)macroConic
                 withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)conic OBJC_METHOD_FAMILY_NONE;

- (void)initLocateableWithOrgGeogebraCommonKernelLocateable:(id<OrgGeogebraCommonKernelLocateable>)macroLocateable
                      withOrgGeogebraCommonKernelLocateable:(id<OrgGeogebraCommonKernelLocateable>)locateable OBJC_METHOD_FAMILY_NONE;

- (void)initPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)macroPoly
                   withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)poly OBJC_METHOD_FAMILY_NONE;

- (void)replaceReferencedMacroObjectsWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)exp;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoMacro, macro_, OrgGeogebraCommonKernelMacro *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoMacro, macroInput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoMacro, macroOutput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoMacro, macroToAlgoMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoMacro, macroOutputAndReferencedGeos_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoMacro, algoOutputAndReferencedGeos_, JavaUtilArrayList *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMacro_compute(OrgGeogebraCommonKernelAlgosAlgoMacro *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoMacro_isMacroInputObjectWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoElement *macroGeo);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMacro_setMacroConstructionState(OrgGeogebraCommonKernelAlgosAlgoMacro *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMacro_getMacroConstructionState(OrgGeogebraCommonKernelAlgosAlgoMacro *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMacro_createOutputObjects(OrgGeogebraCommonKernelAlgosAlgoMacro *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMacro_initMap(OrgGeogebraCommonKernelAlgosAlgoMacro *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMacro_mapWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoElement *macroGeo, OrgGeogebraCommonKernelGeosGeoElement *algoGeo);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoElement *macroGeo);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelAlgosAlgoMacro_createAlgoCopyWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoElement *macroGeo);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMacro_initSpecialReferencesWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoElement *macroGeo, OrgGeogebraCommonKernelGeosGeoElement *algoGeo);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMacro_initLineWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoLine *macroLine, OrgGeogebraCommonKernelGeosGeoLine *line);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMacro_initConicWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoConic *macroConic, OrgGeogebraCommonKernelGeosGeoConic *conic);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMacro_initLocateableWithOrgGeogebraCommonKernelLocateable_withOrgGeogebraCommonKernelLocateable_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, id<OrgGeogebraCommonKernelLocateable> macroLocateable, id<OrgGeogebraCommonKernelLocateable> locateable);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMacro_initPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoPolygon *macroPoly, OrgGeogebraCommonKernelGeosGeoPolygon *poly);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMacro_initListWithOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoList *macroList, OrgGeogebraCommonKernelGeosGeoList *geoList);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMacro_initFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelArithmeticFunctionNVar *fun);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMacro_replaceReferencedMacroObjectsWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelArithmeticExpressionNode *exp);

@implementation OrgGeogebraCommonKernelAlgosAlgoMacro

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
                           withOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)macro
             withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input {
  OrgGeogebraCommonKernelAlgosAlgoMacro_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelMacro_withOrgGeogebraCommonKernelGeosGeoElementArray_(self, cons, labels, macro, input);
  return self;
}

- (void)remove {
  if (removed_) return;
  [((OrgGeogebraCommonKernelMacro *) nil_chk(macro_)) unregisterAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoMacroInterface:self];
  [super remove];
}

- (OrgGeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return OrgGeogebraCommonKernelAlgosAlgosEnum_get_AlgoMacro();
}

- (NSString *)getCommandNameWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelMacro *) nil_chk(macro_)) getCommandName];
}

- (void)setInputOutput {
  [self setDependencies];
}

- (OrgGeogebraCommonKernelMacro *)getMacro {
  return macro_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoMacro_compute(self);
}

- (jboolean)isMacroInputObjectWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)macroGeo {
  return OrgGeogebraCommonKernelAlgosAlgoMacro_isMacroInputObjectWithOrgGeogebraCommonKernelGeosGeoElement_(self, macroGeo);
}

- (void)setMacroConstructionState {
  OrgGeogebraCommonKernelAlgosAlgoMacro_setMacroConstructionState(self);
}

- (void)getMacroConstructionState {
  OrgGeogebraCommonKernelAlgosAlgoMacro_getMacroConstructionState(self);
}

- (void)createOutputObjects {
  OrgGeogebraCommonKernelAlgosAlgoMacro_createOutputObjects(self);
}

- (void)initMap {
  OrgGeogebraCommonKernelAlgosAlgoMacro_initMap(self);
}

- (void)mapWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)macroGeo
           withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)algoGeo {
  OrgGeogebraCommonKernelAlgosAlgoMacro_mapWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, macroGeo, algoGeo);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getAlgoGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)macroGeo {
  return OrgGeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, macroGeo);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)createAlgoCopyWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)macroGeo {
  return OrgGeogebraCommonKernelAlgosAlgoMacro_createAlgoCopyWithOrgGeogebraCommonKernelGeosGeoElement_(self, macroGeo);
}

- (void)initSpecialReferencesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)macroGeo
                             withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)algoGeo {
  OrgGeogebraCommonKernelAlgosAlgoMacro_initSpecialReferencesWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, macroGeo, algoGeo);
}

- (void)initLineWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)macroLine
                withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)line {
  OrgGeogebraCommonKernelAlgosAlgoMacro_initLineWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(self, macroLine, line);
}

- (void)initConicWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)macroConic
                 withOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)conic {
  OrgGeogebraCommonKernelAlgosAlgoMacro_initConicWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_(self, macroConic, conic);
}

- (void)initLocateableWithOrgGeogebraCommonKernelLocateable:(id<OrgGeogebraCommonKernelLocateable>)macroLocateable
                      withOrgGeogebraCommonKernelLocateable:(id<OrgGeogebraCommonKernelLocateable>)locateable {
  OrgGeogebraCommonKernelAlgosAlgoMacro_initLocateableWithOrgGeogebraCommonKernelLocateable_withOrgGeogebraCommonKernelLocateable_(self, macroLocateable, locateable);
}

- (void)initPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)macroPoly
                   withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)poly {
  OrgGeogebraCommonKernelAlgosAlgoMacro_initPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, macroPoly, poly);
}

- (void)initListWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)macroList
                withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList {
  OrgGeogebraCommonKernelAlgosAlgoMacro_initListWithOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, macroList, geoList);
}

- (void)initFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar:(OrgGeogebraCommonKernelArithmeticFunctionNVar *)fun {
  OrgGeogebraCommonKernelAlgosAlgoMacro_initFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar_(self, fun);
}

- (void)replaceReferencedMacroObjectsWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)exp {
  OrgGeogebraCommonKernelAlgosAlgoMacro_replaceReferencedMacroObjectsWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, exp);
}

- (jboolean)drawBeforeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoElement
                      withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)other {
  jint myIndex = 0, otherIndex = 0;
  for (jint i = 0; i < [self getOutputLength]; i++) {
    if ([((JavaUtilArrayList *) nil_chk(self->algoOutputAndReferencedGeos_)) getWithInt:i] == geoElement) {
      myIndex = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((JavaUtilArrayList *) nil_chk(self->macroOutputAndReferencedGeos_)) getWithInt:i])) getConstructionIndex];
    }
    if ([self->algoOutputAndReferencedGeos_ getWithInt:i] == other) {
      otherIndex = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((JavaUtilArrayList *) nil_chk(self->macroOutputAndReferencedGeos_)) getWithInt:i])) getConstructionIndex];
    }
  }
  return myIndex < otherIndex;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelMacro:withOrgGeogebraCommonKernelGeosGeoElementArray:", "AlgoMacro", NULL, 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "getCommandNameWithOrgGeogebraCommonKernelStringTemplate:", "getCommandName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getMacro", NULL, "Lorg.geogebra.common.kernel.Macro;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "isMacroInputObjectWithOrgGeogebraCommonKernelGeosGeoElement:", "isMacroInputObject", "Z", 0x2, NULL, NULL },
    { "setMacroConstructionState", NULL, "V", 0x10, NULL, NULL },
    { "getMacroConstructionState", NULL, "V", 0x10, NULL, NULL },
    { "createOutputObjects", NULL, "V", 0x2, NULL, NULL },
    { "initMap", NULL, "V", 0x2, NULL, NULL },
    { "mapWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "map", "V", 0x2, NULL, NULL },
    { "getAlgoGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "getAlgoGeo", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "createAlgoCopyWithOrgGeogebraCommonKernelGeosGeoElement:", "createAlgoCopy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "initSpecialReferencesWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "initSpecialReferences", "V", 0x2, NULL, NULL },
    { "initLineWithOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoLine:", "initLine", "V", 0x2, NULL, NULL },
    { "initConicWithOrgGeogebraCommonKernelGeosGeoConic:withOrgGeogebraCommonKernelGeosGeoConic:", "initConic", "V", 0x2, NULL, NULL },
    { "initLocateableWithOrgGeogebraCommonKernelLocateable:withOrgGeogebraCommonKernelLocateable:", "initLocateable", "V", 0x2, NULL, NULL },
    { "initPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelGeosGeoPolygon:", "initPolygon", "V", 0x2, NULL, NULL },
    { "initListWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:", "initList", "V", 0x11, NULL, NULL },
    { "initFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar:", "initFunction", "V", 0x11, NULL, NULL },
    { "replaceReferencedMacroObjectsWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "replaceReferencedMacroObjects", "V", 0x2, NULL, NULL },
    { "drawBeforeWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "drawBefore", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "macro_", NULL, 0x2, "Lorg.geogebra.common.kernel.Macro;", NULL, NULL,  },
    { "macroInput_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "macroOutput_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "macroToAlgoMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lorg/geogebra/common/kernel/geos/GeoElement;Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "macroOutputAndReferencedGeos_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "algoOutputAndReferencedGeos_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoMacro = { 2, "AlgoMacro", "org.geogebra.common.kernel.algos", NULL, 0x1, 24, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoMacro;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoMacro_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelMacro_withOrgGeogebraCommonKernelGeosGeoElementArray_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, OrgGeogebraCommonKernelMacro *macro, IOSObjectArray *input) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->input_ = input;
  self->macro_ = macro;
  self->macroInput_ = [((OrgGeogebraCommonKernelMacro *) nil_chk(macro)) getMacroInput];
  self->macroOutput_ = [macro getMacroOutput];
  [macro registerAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoMacroInterface:self];
  OrgGeogebraCommonKernelAlgosAlgoMacro_createOutputObjects(self);
  OrgGeogebraCommonKernelAlgosAlgoMacro_initMap(self);
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoMacro_compute(self);
  if ([((OrgGeogebraCommonKernelConstruction *) nil_chk([macro getMacroConstruction])) hasEuclidianViewCE]) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) registerEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:self];
  }
  OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(labels, [self getOutput]);
  if ([macro isCopyCaptionsAndVisibility]) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->macroOutput_))->size_; i++) if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroOutput_, i))) isSetEuclidianVisible]) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) setEuclidianVisibleWithBoolean:NO];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) update];
    }
  }
  else {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->macroOutput_))->size_; i++) if ([IOSObjectArray_Get(self->macroOutput_, i) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoAngle class]]) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) setEuclidianVisibleWithBoolean:NO];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) update];
    }
  }
}

OrgGeogebraCommonKernelAlgosAlgoMacro *new_OrgGeogebraCommonKernelAlgosAlgoMacro_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelMacro_withOrgGeogebraCommonKernelGeosGeoElementArray_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, OrgGeogebraCommonKernelMacro *macro, IOSObjectArray *input) {
  OrgGeogebraCommonKernelAlgosAlgoMacro *self = [OrgGeogebraCommonKernelAlgosAlgoMacro alloc];
  OrgGeogebraCommonKernelAlgosAlgoMacro_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelMacro_withOrgGeogebraCommonKernelGeosGeoElementArray_(self, cons, labels, macro, input);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoMacro_compute(OrgGeogebraCommonKernelAlgosAlgoMacro *self) {
  @try {
    OrgGeogebraCommonKernelAlgosAlgoMacro_setMacroConstructionState(self);
    [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelMacro *) nil_chk(self->macro_)) getMacroConstruction])) updateAllAlgorithms];
    OrgGeogebraCommonKernelAlgosAlgoMacro_getMacroConstructionState(self);
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"AlgoMacro compute():\n");
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    for (jint i = 0; i < [self getOutputLength]; i++) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) setUndefined];
    }
  }
}

jboolean OrgGeogebraCommonKernelAlgosAlgoMacro_isMacroInputObjectWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoElement *macroGeo) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->macroInput_))->size_; i++) {
    if (macroGeo == IOSObjectArray_Get(self->macroInput_, i)) return YES;
  }
  return NO;
}

void OrgGeogebraCommonKernelAlgosAlgoMacro_setMacroConstructionState(OrgGeogebraCommonKernelAlgosAlgoMacro *self) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->macroInput_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroInput_, i))) setWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(self->input_), i)];
    @try {
      if ([IOSObjectArray_Get(self->macroInput_, i) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoVector class]]) [((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(((OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(self->macroInput_, i), [OrgGeogebraCommonKernelGeosGeoVector class])))) setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:nil];
    }
    @catch (JavaLangException *e) {
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"Exception while handling vector input: ", e));
    }
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroInput_, i))) setRealLabelWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) getLabelSimple]];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoMacro_getMacroConstructionState(OrgGeogebraCommonKernelAlgosAlgoMacro *self) {
  jint size = [((JavaUtilArrayList *) nil_chk(self->macroOutputAndReferencedGeos_)) size];
  for (jint i = 0; i < size; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *macroGeo = [self->macroOutputAndReferencedGeos_ getWithInt:i];
    OrgGeogebraCommonKernelGeosGeoElement *algoGeo = [((JavaUtilArrayList *) nil_chk(self->algoOutputAndReferencedGeos_)) getWithInt:i];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(macroGeo)) isDefined]) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(algoGeo)) setWithOrgGeogebraCommonKernelGeosGeoElement:macroGeo];
      OrgGeogebraCommonKernelAlgosAlgoElement *drawAlgo = [macroGeo getParentAlgorithm];
      if ([((OrgGeogebraCommonKernelMacro *) nil_chk(self->macro_)) isCopyCaptionsAndVisibility]) {
        [algoGeo setAdvancedVisualStyleCopyWithOrgGeogebraCommonKernelGeosGeoElement:macroGeo];
      }
      jboolean oldVisible = [algoGeo isSetEuclidianVisible];
      if ([OrgGeogebraCommonKernelAlgosDrawInformationAlgo_class_() isInstance:drawAlgo]) {
        [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(algoGeo, [OrgGeogebraCommonKernelGeosGeoNumeric class])) setDrawableWithBoolean:YES withBoolean:oldVisible];
        [algoGeo setDrawAlgorithmWithOrgGeogebraCommonKernelAlgosDrawInformationAlgo:[((id<OrgGeogebraCommonKernelAlgosDrawInformationAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosDrawInformationAlgo>) check_protocol_cast(drawAlgo, @protocol(OrgGeogebraCommonKernelAlgosDrawInformationAlgo))))) copy__]];
      }
    }
    else [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(algoGeo)) setUndefined];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoMacro_createOutputObjects(OrgGeogebraCommonKernelAlgosAlgoMacro *self) {
  [self setOutputLengthWithInt:((IOSObjectArray *) nil_chk(self->macroOutput_))->size_];
  jint layer = [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getMaxLayerUsed];
  for (jint i = 0; i < self->macroOutput_->size_; i++) {
    [self setOutputWithInt:i withOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroOutput_, i))) copyInternalWithOrgGeogebraCommonKernelConstruction:self->cons_]];
    OrgGeogebraCommonKernelGeosGeoElement *out = [self getOutputWithInt:i];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(out)) setUseVisualDefaultsWithBoolean:NO];
    [out setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(self->macroOutput_, i)];
    [out setLayerWithInt:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroOutput_, i))) getLayer]];
    [out setAdvancedVisualStyleCopyWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(self->macroOutput_, i)];
    if ([((OrgGeogebraCommonKernelMacro *) nil_chk(self->macro_)) isCopyCaptionsAndVisibility]) {
      [out setCaptionWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroOutput_, i))) getRawCaption]];
    }
    [out setLayerWithInt:layer];
    OrgGeogebraCommonKernelAlgosAlgoElement *drawAlgo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroOutput_, i))) getParentAlgorithm];
    if ([OrgGeogebraCommonKernelAlgosDrawInformationAlgo_class_() isInstance:drawAlgo]) {
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(out, [OrgGeogebraCommonKernelGeosGeoNumeric class])) setDrawableWithBoolean:YES];
      [out setDrawAlgorithmWithOrgGeogebraCommonKernelAlgosDrawInformationAlgo:[((id<OrgGeogebraCommonKernelAlgosDrawInformationAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosDrawInformationAlgo>) check_protocol_cast(drawAlgo, @protocol(OrgGeogebraCommonKernelAlgosDrawInformationAlgo))))) copy__]];
    }
    [out setAlgoMacroOutputWithBoolean:YES];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoMacro_initMap(OrgGeogebraCommonKernelAlgosAlgoMacro *self) {
  self->macroToAlgoMap_ = new_JavaUtilHashMap_init();
  self->macroOutputAndReferencedGeos_ = new_JavaUtilArrayList_init();
  self->algoOutputAndReferencedGeos_ = new_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->macroInput_))->size_; i++) {
    OrgGeogebraCommonKernelAlgosAlgoMacro_mapWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(self->macroInput_, i), IOSObjectArray_Get(nil_chk(self->input_), i));
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->macroOutput_))->size_; i++) {
    OrgGeogebraCommonKernelAlgosAlgoMacro_mapWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(self->macroOutput_, i), [self getOutputWithInt:i]);
  }
  for (jint i = 0; i < self->macroOutput_->size_; i++) {
    OrgGeogebraCommonKernelAlgosAlgoMacro_initSpecialReferencesWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(self->macroOutput_, i), [self getOutputWithInt:i]);
  }
}

void OrgGeogebraCommonKernelAlgosAlgoMacro_mapWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoElement *macroGeo, OrgGeogebraCommonKernelGeosGeoElement *algoGeo) {
  if ([((JavaUtilHashMap *) nil_chk(self->macroToAlgoMap_)) getWithId:macroGeo] == nil) {
    (void) [self->macroToAlgoMap_ putWithId:macroGeo withId:algoGeo];
    if (!OrgGeogebraCommonKernelAlgosAlgoMacro_isMacroInputObjectWithOrgGeogebraCommonKernelGeosGeoElement_(self, macroGeo)) {
      [((JavaUtilArrayList *) nil_chk(self->macroOutputAndReferencedGeos_)) addWithId:macroGeo];
      [((JavaUtilArrayList *) nil_chk(self->algoOutputAndReferencedGeos_)) addWithId:algoGeo];
    }
  }
}

OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoElement *macroGeo) {
  if (macroGeo == nil) return nil;
  OrgGeogebraCommonKernelGeosGeoElement *algoGeo = [((JavaUtilHashMap *) nil_chk(self->macroToAlgoMap_)) getWithId:macroGeo];
  if (algoGeo == nil) {
    algoGeo = OrgGeogebraCommonKernelAlgosAlgoMacro_createAlgoCopyWithOrgGeogebraCommonKernelGeosGeoElement_(self, macroGeo);
    OrgGeogebraCommonKernelAlgosAlgoMacro_mapWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, macroGeo, algoGeo);
  }
  return algoGeo;
}

OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelAlgosAlgoMacro_createAlgoCopyWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoElement *macroGeo) {
  OrgGeogebraCommonKernelGeosGeoElement *algoGeo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(macroGeo)) copyInternalWithOrgGeogebraCommonKernelConstruction:self->cons_];
  return algoGeo;
}

void OrgGeogebraCommonKernelAlgosAlgoMacro_initSpecialReferencesWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoElement *macroGeo, OrgGeogebraCommonKernelGeosGeoElement *algoGeo) {
  switch ([[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(macroGeo)) getGeoClassType] ordinal]) {
    case OrgGeogebraCommonPluginGeoClass_INTERVAL:
    case OrgGeogebraCommonPluginGeoClass_FUNCTION:
    OrgGeogebraCommonKernelAlgosAlgoMacro_initFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar_(self, [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(algoGeo, [OrgGeogebraCommonKernelGeosGeoFunction class])))) getFunction]);
    break;
    case OrgGeogebraCommonPluginGeoClass_FUNCTIONCONDITIONAL:
    break;
    case OrgGeogebraCommonPluginGeoClass_LIST:
    OrgGeogebraCommonKernelAlgosAlgoMacro_initListWithOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(macroGeo, [OrgGeogebraCommonKernelGeosGeoList class]), (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(algoGeo, [OrgGeogebraCommonKernelGeosGeoList class]));
    break;
    case OrgGeogebraCommonPluginGeoClass_LINE:
    OrgGeogebraCommonKernelAlgosAlgoMacro_initLineWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(self, (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(macroGeo, [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(algoGeo, [OrgGeogebraCommonKernelGeosGeoLine class]));
    break;
    case OrgGeogebraCommonPluginGeoClass_POLYGON:
    OrgGeogebraCommonKernelAlgosAlgoMacro_initPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelGeosGeoPolygon_(self, (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(macroGeo, [OrgGeogebraCommonKernelGeosGeoPolygon class]), (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(algoGeo, [OrgGeogebraCommonKernelGeosGeoPolygon class]));
    break;
    case OrgGeogebraCommonPluginGeoClass_CONIC:
    OrgGeogebraCommonKernelAlgosAlgoMacro_initConicWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_(self, (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(macroGeo, [OrgGeogebraCommonKernelGeosGeoConic class]), (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(algoGeo, [OrgGeogebraCommonKernelGeosGeoConic class]));
    break;
    case OrgGeogebraCommonPluginGeoClass_TEXT:
    case OrgGeogebraCommonPluginGeoClass_VECTOR:
    case OrgGeogebraCommonPluginGeoClass_IMAGE:
    OrgGeogebraCommonKernelAlgosAlgoMacro_initLocateableWithOrgGeogebraCommonKernelLocateable_withOrgGeogebraCommonKernelLocateable_(self, (id<OrgGeogebraCommonKernelLocateable>) check_protocol_cast(macroGeo, @protocol(OrgGeogebraCommonKernelLocateable)), (id<OrgGeogebraCommonKernelLocateable>) check_protocol_cast(algoGeo, @protocol(OrgGeogebraCommonKernelLocateable)));
    break;
    default:
    ;
  }
}

void OrgGeogebraCommonKernelAlgosAlgoMacro_initLineWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoLine *macroLine, OrgGeogebraCommonKernelGeosGeoLine *line) {
  OrgGeogebraCommonKernelGeosGeoPoint *startPoint = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(OrgGeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(macroLine)) getStartPoint]), [OrgGeogebraCommonKernelGeosGeoPoint class]);
  OrgGeogebraCommonKernelGeosGeoPoint *endPoint = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(OrgGeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, [macroLine getEndPoint]), [OrgGeogebraCommonKernelGeosGeoPoint class]);
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(line)) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:startPoint];
  [line setEndPointWithOrgGeogebraCommonKernelGeosGeoPoint:endPoint];
}

void OrgGeogebraCommonKernelAlgosAlgoMacro_initConicWithOrgGeogebraCommonKernelGeosGeoConic_withOrgGeogebraCommonKernelGeosGeoConic_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoConic *macroConic, OrgGeogebraCommonKernelGeosGeoConic *conic) {
  JavaUtilArrayList *macroPoints = [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(macroConic)) getPointsOnConic];
  if (macroPoints == nil) return;
  jint size = [((JavaUtilArrayList *) nil_chk(macroPoints)) size];
  JavaUtilArrayList *points = new_JavaUtilArrayList_initWithInt_(size);
  for (jint i = 0; i < size; i++) {
    [points addWithId:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(OrgGeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([macroPoints getWithInt:i], [OrgGeogebraCommonKernelGeosGeoElement class])), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))];
  }
  [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(conic)) setPointsOnConicWithJavaUtilArrayList:points];
}

void OrgGeogebraCommonKernelAlgosAlgoMacro_initLocateableWithOrgGeogebraCommonKernelLocateable_withOrgGeogebraCommonKernelLocateable_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, id<OrgGeogebraCommonKernelLocateable> macroLocateable, id<OrgGeogebraCommonKernelLocateable> locateable) {
  IOSObjectArray *macroStartPoints = [((id<OrgGeogebraCommonKernelLocateable>) nil_chk(macroLocateable)) getStartPoints];
  if (macroStartPoints == nil) return;
  @try {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(macroStartPoints))->size_; i++) {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(OrgGeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(macroStartPoints, i), [OrgGeogebraCommonKernelGeosGeoElement class])), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
      [((id<OrgGeogebraCommonKernelLocateable>) nil_chk(locateable)) initStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:point withInt:i];
    }
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"AlgoMacro.initLocateable:");
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoMacro_initPolygonWithOrgGeogebraCommonKernelGeosGeoPolygon_withOrgGeogebraCommonKernelGeosGeoPolygon_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoPolygon *macroPoly, OrgGeogebraCommonKernelGeosGeoPolygon *poly) {
  IOSObjectArray *macroPolyPoints = [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(macroPoly)) getPoints];
  IOSObjectArray *polyPoints = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(macroPolyPoints))->size_ type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
  for (jint i = 0; i < macroPolyPoints->size_; i++) {
    (void) IOSObjectArray_Set(polyPoints, i, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(OrgGeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(macroPolyPoints, i), [OrgGeogebraCommonKernelGeosGeoElement class])), [OrgGeogebraCommonKernelGeosGeoPoint class]));
  }
  [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly)) setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:polyPoints];
}

void OrgGeogebraCommonKernelAlgosAlgoMacro_initListWithOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelGeosGeoList *macroList, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  jint size = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(macroList)) size];
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(geoList)) clear];
  [geoList ensureCapacityWithInt:size];
  for (jint i = 0; i < size; i++) {
    [geoList addWithOrgGeogebraCommonKernelGeosGeoElement:OrgGeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, [macroList getWithInt:i])];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoMacro_initFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelArithmeticFunctionNVar *fun) {
  OrgGeogebraCommonKernelAlgosAlgoMacro_replaceReferencedMacroObjectsWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun)) getExpression]);
}

void OrgGeogebraCommonKernelAlgosAlgoMacro_replaceReferencedMacroObjectsWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelAlgosAlgoMacro *self, OrgGeogebraCommonKernelArithmeticExpressionNode *exp) {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) getLeft];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [exp getRight];
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isGeoElement]) {
    OrgGeogebraCommonKernelGeosGeoElement *referencedGeo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoElement class]);
    if ([((OrgGeogebraCommonKernelMacro *) nil_chk(self->macro_)) isInMacroConstructionWithOrgGeogebraCommonKernelGeosGeoElement:referencedGeo]) {
      [exp setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, referencedGeo)];
    }
  }
  else if ([left isExpressionNode]) {
    OrgGeogebraCommonKernelAlgosAlgoMacro_replaceReferencedMacroObjectsWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class]));
  }
  if (right == nil) return;
  else if ([right isGeoElement]) {
    OrgGeogebraCommonKernelGeosGeoElement *referencedGeo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(right, [OrgGeogebraCommonKernelGeosGeoElement class]);
    if ([((OrgGeogebraCommonKernelMacro *) nil_chk(self->macro_)) isInMacroConstructionWithOrgGeogebraCommonKernelGeosGeoElement:referencedGeo]) {
      [exp setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, referencedGeo)];
    }
  }
  else if ([right isExpressionNode]) {
    OrgGeogebraCommonKernelAlgosAlgoMacro_replaceReferencedMacroObjectsWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class]));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoMacro)
