//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoIntersectLinePolyLine.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/TreeMap.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectLinePolyLine.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPoly.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine () {
 @public
  JavaUtilTreeMap *newCoords_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine, newCoords_, JavaUtilTreeMap *)

@interface OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 : NSObject < OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *this$0_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine:(OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1, this$0_, OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_(OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 *self, OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *outer$);

__attribute__((unused)) static OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 *new_OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_(OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1)

@implementation OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                          withNSStringArray:(IOSObjectArray *)labels
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                     withOrgGeogebraCommonKernelGeosGeoPoly:(id<OrgGeogebraCommonKernelGeosGeoPoly>)p {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelGeosGeoPoly_(self, c, labels, g, p);
  return self;
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  if (labels != nil && labels->size_ == 1 && IOSObjectArray_Get(labels, 0) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(labels, 0))) isEqual:@""]) {
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) setIndexLabelsWithNSString:IOSObjectArray_Get(labels, 0)];
  }
  else {
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) setLabelsWithNSStringArray:labels];
    [outputPoints_ setIndexLabelsWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputPoints_ getElementWithInt:0])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
}

- (OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *)createOutputPoints {
  return [new_OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_(self) autorelease]) autorelease];
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(pi_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  [self setDependencies];
}

- (void)intersectionsCoordsWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
                             withOrgGeogebraCommonKernelGeosGeoPolyLine:(OrgGeogebraCommonKernelGeosGeoPolyLine *)p
                                                    withJavaUtilTreeMap:(JavaUtilTreeMap *)newCoords {
  jdouble min = [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g)) getMinParameter];
  jdouble max = [g getMaxParameter];
  OrgGeogebraCommonKernelMatrixCoords *gCoords = [((OrgGeogebraCommonKernelGeosGeoVec3D *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoVec3D class])) getCoords];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelGeosGeoPolyLine *) nil_chk(p)) getNumPoints] - 1; i++) {
    OrgGeogebraCommonKernelMatrixCoords *segStart = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([p getPointWithInt:i])) getCoords];
    OrgGeogebraCommonKernelMatrixCoords *segEnd = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([p getPointWithInt:i + 1])) getCoords];
    OrgGeogebraCommonKernelMatrixCoords *coords = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(segStart)) crossProductWithOrgGeogebraCommonKernelMatrixCoords:segEnd])) crossProductWithOrgGeogebraCommonKernelMatrixCoords:gCoords];
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getLast])) {
      if ([((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoLine class])) isOnPathWithOrgGeogebraCommonKernelMatrixCoords:segStart withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION] && [((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoLine class])) isOnPathWithOrgGeogebraCommonKernelMatrixCoords:segEnd withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION]) {
        [((JavaUtilTreeMap *) nil_chk(newCoords)) putWithId:JavaLangDouble_valueOfWithDouble_([((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoLine class])) getPossibleParameterWithOrgGeogebraCommonKernelMatrixCoords:segStart]) withId:segStart];
        [newCoords putWithId:JavaLangDouble_valueOfWithDouble_([((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoLine class])) getPossibleParameterWithOrgGeogebraCommonKernelMatrixCoords:segEnd]) withId:segEnd];
      }
    }
    else if (OrgGeogebraCommonKernelGeosGeoSegment_checkOnPathWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withBoolean_withDouble_(segStart, segEnd, coords, NO, OrgGeogebraCommonKernelKernel_STANDARD_PRECISION)) {
      jdouble t = [((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoLine class])) getPossibleParameterWithOrgGeogebraCommonKernelMatrixCoords:coords];
      if (t >= min && t <= max) [((JavaUtilTreeMap *) nil_chk(newCoords)) putWithId:JavaLangDouble_valueOfWithDouble_(t) withId:coords];
    }
  }
}

- (void)compute {
  [((JavaUtilTreeMap *) nil_chk(newCoords_)) clear];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_set_p_(self, (OrgGeogebraCommonKernelGeosGeoPolyLine *) check_class_cast([((id<OrgGeogebraCommonKernelGeosGeoPoly>) nil_chk(pi_)) getBoundary], [OrgGeogebraCommonKernelGeosGeoPolyLine class]));
  [self intersectionsCoordsWithOrgGeogebraCommonKernelKernelNDGeoLineND:g_ withOrgGeogebraCommonKernelGeosGeoPolyLine:p_ withJavaUtilTreeMap:newCoords_];
  [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) adjustOutputSizeWithInt:[newCoords_ size] > 0 ? [newCoords_ size] : 1];
  jint index = 0;
  for (OrgGeogebraCommonKernelMatrixCoords * __strong coords in nil_chk([newCoords_ values])) {
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([outputPoints_ getElementWithInt:index], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
    [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:coords withBoolean:NO];
    [point updateCoords];
    index++;
  }
  for (; index < [outputPoints_ size]; index++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputPoints_ getElementWithInt:index])) setUndefined];
  }
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionPointOfAB" withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoElement class])))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(pi_, [OrgGeogebraCommonKernelGeosGeoElement class])))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(p_);
  RELEASE_(pi_);
  RELEASE_(outputPoints_);
  RELEASE_(newCoords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelGeosGeoPoly:", "AlgoIntersectLinePolyLine", NULL, 0x1, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x4, NULL, NULL },
    { "createOutputPoints", NULL, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "intersectionsCoordsWithOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelGeosGeoPolyLine:withJavaUtilTreeMap:", "intersectionsCoords", "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "p_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoPolyLine;", NULL, NULL,  },
    { "pi_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoPoly;", NULL, NULL,  },
    { "outputPoints_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lorg/geogebra/common/kernel/algos/AlgoElement$OutputHandler<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "newCoords_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Ljava/lang/Double;Lorg/geogebra/common/kernel/Matrix/Coords;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine = { 2, "AlgoIntersectLinePolyLine", "org.geogebra.common.kernel.algos", NULL, 0x1, 9, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelGeosGeoPoly_(OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *self, OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, id<OrgGeogebraCommonKernelGeosGeoPoly> p) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_set_outputPoints_(self, [self createOutputPoints]);
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_set_g_(self, g);
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_set_pi_(self, p);
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_setAndConsume_newCoords_(self, new_JavaUtilTreeMap_initWithJavaUtilComparator_(OrgGeogebraCommonKernelKernel_DoubleComparatorWithDouble_(OrgGeogebraCommonKernelKernel_STANDARD_PRECISION)));
  [self compute];
  [self setInputOutput];
  [self setLabelsWithNSStringArray:labels];
  [self update];
}

OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *new_OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelGeosGeoPoly_(OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, id<OrgGeogebraCommonKernelGeosGeoPoly> p) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelGeosGeoPoly_(self, c, labels, g, p);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine)

@implementation OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1

- (OrgGeogebraCommonKernelGeosGeoPoint *)newElement {
  OrgGeogebraCommonKernelGeosGeoPoint *p = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(this$0_->cons_) autorelease];
  [p setCoordsWithDouble:0 withDouble:0 withDouble:1];
  [p setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:this$0_];
  return p;
}

- (instancetype)initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine:(OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *)outer$ {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.algos.AlgoIntersectLinePolyLine;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine", "createOutputPoints" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 = { 2, "", "org.geogebra.common.kernel.algos", "AlgoIntersectLinePolyLine", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lorg/geogebra/common/kernel/algos/AlgoElement$elementFactory<Lorg/geogebra/common/kernel/geos/GeoElement;>;" };
  return &_OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_(OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 *self, OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *outer$) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_set_this$0_(self, outer$);
  NSObject_init(self);
}

OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 *new_OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_(OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *outer$) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1)
