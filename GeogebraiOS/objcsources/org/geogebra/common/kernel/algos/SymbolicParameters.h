//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/SymbolicParameters.java
//

#ifndef _OrgGeogebraCommonKernelAlgosSymbolicParameters_H_
#define _OrgGeogebraCommonKernelAlgosSymbolicParameters_H_

#include "J2ObjC_header.h"

@class IOSIntArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class JavaUtilHashMap;
@class JavaUtilHashSet;
@class OrgGeogebraCommonKernelGeosGeoElement;
@class OrgGeogebraCommonKernelProverPolynomialVariable;
@protocol OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo;

@interface OrgGeogebraCommonKernelAlgosSymbolicParameters : NSObject {
 @public
  IOSIntArray *degree_;
}

#pragma mark Public

- (instancetype)initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo:(id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>)spa;

+ (IOSObjectArray *)addBotanaVarsJoinPointsWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input;

+ (IOSIntArray *)addDegreeWithIntArray:(IOSIntArray *)degree1
                          withIntArray:(IOSIntArray *)degree2;

+ (IOSObjectArray *)botanaPolynomialsLineBisectorWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)Ax
                                                 withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)Ay
                                                 withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)Bx
                                                 withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)By
                                            withOrgGeogebraCommonKernelProverPolynomialVariableArray:(IOSObjectArray *)botanaVars;

+ (IOSObjectArray *)botanaPolynomialsMidpointWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)P
                                             withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)Q
                              withOrgGeogebraCommonKernelProverPolynomialVariableArray:(IOSObjectArray *)botanaVars;

+ (IOSIntArray *)crossDegreeWithIntArray:(IOSIntArray *)degree1
                            withIntArray:(IOSIntArray *)degree2;

+ (IOSObjectArray *)crossProductWithJavaMathBigIntegerArray:(IOSObjectArray *)a
                                withJavaMathBigIntegerArray:(IOSObjectArray *)b;

+ (JavaMathBigInteger *)det4WithJavaMathBigIntegerArray2:(IOSObjectArray *)matrix;

- (IOSIntArray *)getDegrees;

- (jint)getDimension;

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values;

- (JavaUtilHashSet *)getFreeVariables;

+ (IOSIntArray *)getMaxDegreeWithIntArray:(IOSIntArray *)degree1
                             withIntArray:(IOSIntArray *)degree2;

+ (IOSObjectArray *)reduceWithJavaMathBigIntegerArray:(IOSObjectArray *)vect;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelAlgosSymbolicParameters)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosSymbolicParameters, degree_, IOSIntArray *)

FOUNDATION_EXPORT void OrgGeogebraCommonKernelAlgosSymbolicParameters_initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_(OrgGeogebraCommonKernelAlgosSymbolicParameters *self, id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo> spa);

FOUNDATION_EXPORT OrgGeogebraCommonKernelAlgosSymbolicParameters *new_OrgGeogebraCommonKernelAlgosSymbolicParameters_initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_(id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo> spa) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IOSIntArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_getMaxDegreeWithIntArray_withIntArray_(IOSIntArray *degree1, IOSIntArray *degree2);

FOUNDATION_EXPORT IOSIntArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_addDegreeWithIntArray_withIntArray_(IOSIntArray *degree1, IOSIntArray *degree2);

FOUNDATION_EXPORT IOSIntArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_crossDegreeWithIntArray_withIntArray_(IOSIntArray *degree1, IOSIntArray *degree2);

FOUNDATION_EXPORT IOSObjectArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_crossProductWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *a, IOSObjectArray *b);

FOUNDATION_EXPORT IOSObjectArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_reduceWithJavaMathBigIntegerArray_(IOSObjectArray *vect);

FOUNDATION_EXPORT JavaMathBigInteger *OrgGeogebraCommonKernelAlgosSymbolicParameters_det4WithJavaMathBigIntegerArray2_(IOSObjectArray *matrix);

FOUNDATION_EXPORT IOSObjectArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_addBotanaVarsJoinPointsWithOrgGeogebraCommonKernelGeosGeoElementArray_(IOSObjectArray *input);

FOUNDATION_EXPORT IOSObjectArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_botanaPolynomialsMidpointWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelProverPolynomialVariableArray_(OrgGeogebraCommonKernelGeosGeoElement *P, OrgGeogebraCommonKernelGeosGeoElement *Q, IOSObjectArray *botanaVars);

FOUNDATION_EXPORT IOSObjectArray *OrgGeogebraCommonKernelAlgosSymbolicParameters_botanaPolynomialsLineBisectorWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariableArray_(OrgGeogebraCommonKernelProverPolynomialVariable *Ax, OrgGeogebraCommonKernelProverPolynomialVariable *Ay, OrgGeogebraCommonKernelProverPolynomialVariable *Bx, OrgGeogebraCommonKernelProverPolynomialVariable *By, IOSObjectArray *botanaVars);

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelAlgosSymbolicParameters)

#endif // _OrgGeogebraCommonKernelAlgosSymbolicParameters_H_
