//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoAnglePointsND.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/euclidian/draw/DrawAngle.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoAngle.h"
#include "org/geogebra/common/kernel/algos/AlgoAnglePointsND.h"
#include "org/geogebra/common/kernel/algos/AlgoAnglePolygon.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/Localization.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation OrgGeogebraCommonKernelAlgosAlgoAnglePointsND

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
          withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  OrgGeogebraCommonKernelAlgosAlgoAnglePointsND_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, A, B, C, orientation);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
          withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  OrgGeogebraCommonKernelAlgosAlgoAnglePointsND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, A, B, C, orientation);
  return self;
}

- (void)setInputWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
            withOrgGeogebraCommonKernelKernelNDGeoDirectionND:(id<OrgGeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  self->An_ = A;
  self->Bn_ = B;
  self->Cn_ = C;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonKernelAlgosAlgoAnglePointsND_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (void)setABCWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C {
  self->An_ = A;
  self->Bn_ = B;
  self->Cn_ = C;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                    withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                    withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
                          withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonKernelAlgosAlgoAnglePointsND_initWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelConstruction_(self, A, B, C, cons);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
                    withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
                    withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C {
  OrgGeogebraCommonKernelAlgosAlgoAnglePointsND_initWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, A, B, C);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                                withBoolean:(jboolean)addToConstructionList {
  OrgGeogebraCommonKernelAlgosAlgoAnglePointsND_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, c, addToConstructionList);
  return self;
}

- (void)setAlgoAnglePolygonWithOrgGeogebraCommonKernelAlgosAlgoAnglePolygon:(OrgGeogebraCommonKernelAlgosAlgoAnglePolygon *)algo {
  algoAnglePoly_ = algo;
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(An_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  (void) IOSObjectArray_Set(input_, 1, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(Bn_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  (void) IOSObjectArray_Set(input_, 2, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(Cn_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:angle_];
  [self setDependencies];
}

- (void)remove {
  if (removed_) return;
  if (algoAnglePoly_ != nil) [algoAnglePoly_ remove];
  else [super remove];
}

- (jint)getConstructionIndex {
  if (algoAnglePoly_ != nil) {
    return [algoAnglePoly_ getConstructionIndex];
  }
  return [super getConstructionIndex];
}

- (OrgGeogebraCommonKernelGeosGeoAngle *)getAngle {
  return angle_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getA {
  return An_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getB {
  return Bn_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getC {
  return Cn_;
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (algoAnglePoly_ != nil) {
    return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleBetweenABCofD" withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(An_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Bn_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Cn_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk([algoAnglePoly_ getPolygon])) getNameDescription]];
  }
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleBetweenABC" withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(An_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Bn_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Cn_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (jboolean)updateDrawInfoWithDoubleArray:(IOSDoubleArray *)m
                          withDoubleArray:(IOSDoubleArray *)firstVec
withOrgGeogebraCommonEuclidianDrawDrawAngle:(OrgGeogebraCommonEuclidianDrawDrawAngle *)drawable {
  OrgGeogebraCommonKernelMatrixCoords *v = [((OrgGeogebraCommonEuclidianDrawDrawAngle *) nil_chk(drawable)) getCoordsInViewWithOrgGeogebraCommonKernelKernelNDGeoPointND:Bn_];
  if (![drawable inViewWithOrgGeogebraCommonKernelMatrixCoords:v]) {
    return NO;
  }
  *IOSDoubleArray_GetRef(nil_chk(m), 0) = IOSDoubleArray_Get(nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) get]), 0);
  *IOSDoubleArray_GetRef(m, 1) = IOSDoubleArray_Get(nil_chk([v get]), 1);
  OrgGeogebraCommonKernelMatrixCoords *ptCoords = [drawable getCoordsInViewWithOrgGeogebraCommonKernelKernelNDGeoPointND:An_];
  if (![drawable inViewWithOrgGeogebraCommonKernelMatrixCoords:ptCoords]) {
    return NO;
  }
  OrgGeogebraCommonKernelMatrixCoords *coords2 = [drawable getCoordsInViewWithOrgGeogebraCommonKernelKernelNDGeoPointND:Cn_];
  if (![drawable inViewWithOrgGeogebraCommonKernelMatrixCoords:coords2]) {
    return NO;
  }
  *IOSDoubleArray_GetRef(nil_chk(firstVec), 0) = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(ptCoords)) getX] - IOSDoubleArray_Get(m, 0);
  *IOSDoubleArray_GetRef(firstVec, 1) = [ptCoords getY] - IOSDoubleArray_Get(m, 1);
  IOSDoubleArray *vertexScreen = [IOSDoubleArray newArrayWithLength:2];
  *IOSDoubleArray_GetRef(vertexScreen, 0) = IOSDoubleArray_Get(m, 0);
  *IOSDoubleArray_GetRef(vertexScreen, 1) = IOSDoubleArray_Get(m, 1);
  IOSDoubleArray *firstVecScreen = [IOSDoubleArray newArrayWithLength:2];
  *IOSDoubleArray_GetRef(firstVecScreen, 0) = [ptCoords getX];
  *IOSDoubleArray_GetRef(firstVecScreen, 1) = [ptCoords getY];
  IOSDoubleArray *secondVecScreen = [IOSDoubleArray newArrayWithLength:2];
  *IOSDoubleArray_GetRef(secondVecScreen, 0) = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords2)) getX];
  *IOSDoubleArray_GetRef(secondVecScreen, 1) = [coords2 getY];
  [drawable toScreenCoordsWithDoubleArray:vertexScreen];
  [drawable toScreenCoordsWithDoubleArray:firstVecScreen];
  [drawable toScreenCoordsWithDoubleArray:secondVecScreen];
  *IOSDoubleArray_GetRef(firstVecScreen, 0) -= IOSDoubleArray_Get(vertexScreen, 0);
  *IOSDoubleArray_GetRef(firstVecScreen, 1) -= IOSDoubleArray_Get(vertexScreen, 1);
  *IOSDoubleArray_GetRef(secondVecScreen, 0) -= IOSDoubleArray_Get(vertexScreen, 0);
  *IOSDoubleArray_GetRef(secondVecScreen, 1) -= IOSDoubleArray_Get(vertexScreen, 1);
  [drawable setMaxRadiusWithDouble:0.5 * JavaLangMath_sqrtWithDouble_(JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(firstVecScreen, 0) * IOSDoubleArray_Get(firstVecScreen, 0) + IOSDoubleArray_Get(firstVecScreen, 1) * IOSDoubleArray_Get(firstVecScreen, 1), IOSDoubleArray_Get(secondVecScreen, 0) * IOSDoubleArray_Get(secondVecScreen, 0) + IOSDoubleArray_Get(secondVecScreen, 1) * IOSDoubleArray_Get(secondVecScreen, 1)))];
  return YES;
}

- (jboolean)getCoordsInD3WithOrgGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)drawCoords {
  OrgGeogebraCommonKernelMatrixCoords *center = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getB])) getInhomCoordsInD3];
  (void) IOSObjectArray_Set(nil_chk(drawCoords), 0, center);
  (void) IOSObjectArray_Set(drawCoords, 1, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getA])) getInhomCoordsInD3])) subWithOrgGeogebraCommonKernelMatrixCoords:center]);
  (void) IOSObjectArray_Set(drawCoords, 2, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getC])) getInhomCoordsInD3])) subWithOrgGeogebraCommonKernelMatrixCoords:center]);
  return YES;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoAnglePointsND", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoAnglePointsND", NULL, 0x1, NULL, NULL },
    { "setInputWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoDirectionND:", "setInput", "V", 0x4, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:", "AlgoAnglePointsND", NULL, 0x4, NULL, NULL },
    { "setABCWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "setABC", "V", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelConstruction:", "AlgoAnglePointsND", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "AlgoAnglePointsND", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withBoolean:", "AlgoAnglePointsND", NULL, 0x4, NULL, NULL },
    { "setAlgoAnglePolygonWithOrgGeogebraCommonKernelAlgosAlgoAnglePolygon:", "setAlgoAnglePolygon", "V", 0x0, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "getConstructionIndex", NULL, "I", 0x1, NULL, NULL },
    { "getAngle", NULL, "Lorg.geogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "getA", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getB", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getC", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "updateDrawInfoWithDoubleArray:withDoubleArray:withOrgGeogebraCommonEuclidianDrawDrawAngle:", "updateDrawInfo", "Z", 0x1, NULL, NULL },
    { "getCoordsInD3WithOrgGeogebraCommonKernelMatrixCoordsArray:", "getCoordsInD3", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "An_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "Bn_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "Cn_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "angle_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoAngle;", NULL, NULL,  },
    { "algoAnglePoly_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgoAnglePolygon;", NULL, NULL,  },
    { "bx_", NULL, 0x84, "D", NULL, NULL,  },
    { "by_", NULL, 0x84, "D", NULL, NULL,  },
    { "vx_", NULL, 0x84, "D", NULL, NULL,  },
    { "vy_", NULL, 0x84, "D", NULL, NULL,  },
    { "wx_", NULL, 0x84, "D", NULL, NULL,  },
    { "wy_", NULL, 0x84, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoAnglePointsND = { 2, "AlgoAnglePointsND", "org.geogebra.common.kernel.algos", NULL, 0x401, 19, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoAnglePointsND;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoAnglePointsND_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonKernelAlgosAlgoAnglePointsND *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  (void) OrgGeogebraCommonKernelAlgosAlgoAnglePointsND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, A, B, C, orientation);
  [((OrgGeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) setLabelWithNSString:label];
}

void OrgGeogebraCommonKernelAlgosAlgoAnglePointsND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoDirectionND_(OrgGeogebraCommonKernelAlgosAlgoAnglePointsND *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C, id<OrgGeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  (void) OrgGeogebraCommonKernelAlgosAlgoAngle_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  [self setInputWithOrgGeogebraCommonKernelKernelNDGeoPointND:A withOrgGeogebraCommonKernelKernelNDGeoPointND:B withOrgGeogebraCommonKernelKernelNDGeoPointND:C withOrgGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  self->angle_ = [self newGeoAngleWithOrgGeogebraCommonKernelConstruction:cons];
  [self setInputOutput];
  [self compute];
}

void OrgGeogebraCommonKernelAlgosAlgoAnglePointsND_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelAlgosAlgoAnglePointsND *self, OrgGeogebraCommonKernelConstruction *cons) {
  (void) OrgGeogebraCommonKernelAlgosAlgoAngle_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->angle_ = new_OrgGeogebraCommonKernelGeosGeoAngle_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self->angle_ setDrawableWithBoolean:YES];
}

void OrgGeogebraCommonKernelAlgosAlgoAnglePointsND_initWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelAlgosAlgoAnglePointsND *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C, OrgGeogebraCommonKernelConstruction *cons) {
  (void) OrgGeogebraCommonKernelAlgosAlgoAngle_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->cons_ = cons;
  self->An_ = A;
  self->Bn_ = B;
  self->Cn_ = C;
}

void OrgGeogebraCommonKernelAlgosAlgoAnglePointsND_initWithOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelAlgosAlgoAnglePointsND *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C) {
  (void) OrgGeogebraCommonKernelAlgosAlgoAngle_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A)) toGeoElement]))->cons_, NO);
  self->An_ = A;
  self->Bn_ = B;
  self->Cn_ = C;
}

void OrgGeogebraCommonKernelAlgosAlgoAnglePointsND_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoAnglePointsND *self, OrgGeogebraCommonKernelConstruction *c, jboolean addToConstructionList) {
  (void) OrgGeogebraCommonKernelAlgosAlgoAngle_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, c, addToConstructionList);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoAnglePointsND)
