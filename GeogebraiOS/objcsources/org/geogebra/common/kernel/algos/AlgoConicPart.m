//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoConicPart.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoConicPart.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicPartND.h"

@implementation OrgGeogebraCommonKernelAlgosAlgoConicPart

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                    withInt:(jint)type {
  OrgGeogebraCommonKernelAlgosAlgoConicPart_initWithOrgGeogebraCommonKernelConstruction_withInt_(self, cons, type);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC:
    return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Arc();
    default:
    return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Sector();
  }
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)getConicPart {
  return conicPart_;
}

- (void)compute {
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conicPart_)) setWithOrgGeogebraCommonKernelGeosGeoElement:conic_];
  [((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(conicPart_, @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND))) setParametersWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(startParam_)) getDouble] withDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(endParam_)) getDouble] withBoolean:YES];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withInt:", "AlgoConicPart", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getConicPart", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "conic_", NULL, 0x1, "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "startParam_", NULL, 0x1, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "endParam_", NULL, 0x1, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "conicPart_", NULL, 0x1, "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "type_", NULL, 0x1, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoConicPart = { 2, "AlgoConicPart", "org.geogebra.common.kernel.algos", NULL, 0x401, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoConicPart;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoConicPart_initWithOrgGeogebraCommonKernelConstruction_withInt_(OrgGeogebraCommonKernelAlgosAlgoConicPart *self, OrgGeogebraCommonKernelConstruction *cons, jint type) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->type_ = type;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoConicPart)
