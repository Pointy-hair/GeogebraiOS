//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoTangentLine.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "org/geogebra/common/kernel/algos/AlgoTangentLine.h"
#include "org/geogebra/common/kernel/algos/AlgoTangentLineND.h"
#include "org/geogebra/common/kernel/algos/AlgoTangentPoint.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonKernelAlgosAlgoTangentLine () {
 @public
  OrgGeogebraCommonKernelGeosGeoVector *direction_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoTangentLine, direction_, OrgGeogebraCommonKernelGeosGeoVector *)

@implementation OrgGeogebraCommonKernelAlgosAlgoTangentLine

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonKernelAlgosAlgoTangentLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, label, g, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g
              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonKernelAlgosAlgoTangentLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, g, c);
  return self;
}

- (void)initDiameterAndDirection {
  OrgGeogebraCommonKernelAlgosAlgoTangentLineND_setAndConsume_diameter_(self, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons_));
  OrgGeogebraCommonKernelAlgosAlgoTangentLine_setAndConsume_direction_(self, new_OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_(cons_));
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class])))) getDirectionWithOrgGeogebraCommonKernelGeosGeoVec3D:direction_];
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) diameterLineWithOrgGeogebraCommonKernelGeosGeoVector:direction_ withOrgGeogebraCommonKernelGeosGeoLine:diameter_];
  OrgGeogebraCommonKernelAlgosAlgoTangentLineND_setAndConsume_algoIntersect_(self, new_OrgGeogebraCommonKernelAlgosAlgoIntersectLineConic_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoConic_(cons_, diameter_, (OrgGeogebraCommonKernelGeosGeoConic *) check_class_cast(c_, [OrgGeogebraCommonKernelGeosGeoConic class])));
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoIntersect_];
  OrgGeogebraCommonKernelAlgosAlgoTangentLineND_set_tangentPoints_(self, [algoIntersect_ getIntersectionPoints]);
}

- (void)setTangents {
  OrgGeogebraCommonKernelAlgosAlgoTangentLineND_setAndConsume_tangents_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoLine_class_()]);
  IOSObjectArray_SetAndConsume(tangents_, 0, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons_));
  IOSObjectArray_SetAndConsume(tangents_, 1, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons_));
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 0), [OrgGeogebraCommonKernelGeosGeoLine class])))) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(tangentPoints_), 0), [OrgGeogebraCommonKernelGeosGeoPoint class])];
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 1), [OrgGeogebraCommonKernelGeosGeoLine class])))) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(tangentPoints_, 1), [OrgGeogebraCommonKernelGeosGeoPoint class])];
}

- (void)initForNearToRelationship {
  OrgGeogebraCommonKernelAlgosAlgoTangentPoint_initForNearToRelationshipWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDAlgoIntersectND_(tangentPoints_, IOSObjectArray_Get(nil_chk(tangents_), 0), algoIntersect_);
}

- (void)updateDiameterLine {
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class])))) getDirectionWithOrgGeogebraCommonKernelGeosGeoVec3D:direction_];
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) diameterLineWithOrgGeogebraCommonKernelGeosGeoVector:direction_ withOrgGeogebraCommonKernelGeosGeoLine:diameter_];
}

- (void)updateTangentWithInt:(jint)index {
  OrgGeogebraCommonKernelGeosGeoLine *tangent = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), index), [OrgGeogebraCommonKernelGeosGeoLine class]);
  OrgGeogebraCommonKernelGeosGeoLine *line = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoLine class]);
  OrgGeogebraCommonKernelGeosGeoPoint *point = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(tangentPoints_), index), [OrgGeogebraCommonKernelGeosGeoPoint class]);
  ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(tangent))->x_ = ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(line))->x_;
  tangent->y_ = line->y_;
  tangent->z_ = -(((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(point))->inhomX_ * line->x_ + point->inhomY_ * line->y_);
}

- (void)dealloc {
  RELEASE_(direction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "AlgoTangentLine", NULL, 0x0, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoLineND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "AlgoTangentLine", NULL, 0x1, NULL, NULL },
    { "initDiameterAndDirection", NULL, "V", 0x4, NULL, NULL },
    { "setTangents", NULL, "V", 0x4, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x1, NULL, NULL },
    { "updateDiameterLine", NULL, "V", 0x4, NULL, NULL },
    { "updateTangentWithInt:", "updateTangent", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "direction_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoTangentLine = { 2, "AlgoTangentLine", "org.geogebra.common.kernel.algos", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoTangentLine;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoTangentLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelAlgosAlgoTangentLine *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonKernelKernelNDGeoConicND *c) {
  OrgGeogebraCommonKernelAlgosAlgoTangentLineND_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, label, g, c);
}

OrgGeogebraCommonKernelAlgosAlgoTangentLine *new_OrgGeogebraCommonKernelAlgosAlgoTangentLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonKernelKernelNDGeoConicND *c) {
  OrgGeogebraCommonKernelAlgosAlgoTangentLine *self = [OrgGeogebraCommonKernelAlgosAlgoTangentLine alloc];
  OrgGeogebraCommonKernelAlgosAlgoTangentLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, label, g, c);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoTangentLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelAlgosAlgoTangentLine *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonKernelKernelNDGeoConicND *c) {
  OrgGeogebraCommonKernelAlgosAlgoTangentLineND_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, g, c);
}

OrgGeogebraCommonKernelAlgosAlgoTangentLine *new_OrgGeogebraCommonKernelAlgosAlgoTangentLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g, OrgGeogebraCommonKernelKernelNDGeoConicND *c) {
  OrgGeogebraCommonKernelAlgosAlgoTangentLine *self = [OrgGeogebraCommonKernelAlgosAlgoTangentLine alloc];
  OrgGeogebraCommonKernelAlgosAlgoTangentLine_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoLineND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, g, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoTangentLine)
