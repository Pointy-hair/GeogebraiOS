//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoLocusSliderND.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/awt/GRectangle2D.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Macro.h"
#include "org/geogebra/common/kernel/MacroKernel.h"
#include "org/geogebra/common/kernel/MyPoint.h"
#include "org/geogebra/common/kernel/PathMover.h"
#include "org/geogebra/common/kernel/SliderMover.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoLocusSliderND.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLocusND.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelAlgosAlgoLocusSliderND () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> locusPoint_;
  OrgGeogebraCommonKernelGeosGeoNumeric *movingSlider_;
  IOSObjectArray *efficientInput_AlgoLocusSliderND_, *standardInput_;
  OrgGeogebraCommonKernelSliderMover *sliderMover_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> Qcopy_;
  OrgGeogebraCommonKernelGeosGeoNumeric *Pcopy_, *PstartPos_;
  jboolean continuous_;
  jboolean foundDefined_;
  jboolean maxTimeExceeded_;
  OrgGeogebraCommonKernelConstruction *macroCons_;
  OrgGeogebraCommonKernelMacroKernel *macroKernel_;
  JavaUtilTreeSet *locusConsOrigElements_;
  JavaUtilTreeSet *Qin_;
  jint views_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (void)buildLocusMacroConstructionWithJavaUtilTreeSet:(JavaUtilTreeSet *)locusConsElements;

- (void)resetMacroConstruction;

- (void)pcopyUpdateCascade;

- (void)clearCache;

- (id)getCachedPointWithDouble:(jdouble)param;

- (void)updateScreenBordersWithInt:(jint)v;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND, locusPoint_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND, movingSlider_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND, efficientInput_AlgoLocusSliderND_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND, standardInput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND, sliderMover_, OrgGeogebraCommonKernelSliderMover *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND, Qcopy_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND, Pcopy_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND, PstartPos_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND, macroCons_, OrgGeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND, macroKernel_, OrgGeogebraCommonKernelMacroKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND, locusConsOrigElements_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND, Qin_, JavaUtilTreeSet *)

static jint OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_MAX_Y_PIXEL_DIST_ = 5;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND, MAX_Y_PIXEL_DIST_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND, MAX_Y_PIXEL_DIST_, jint)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_init__(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_buildLocusMacroConstructionWithJavaUtilTreeSet_(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self, JavaUtilTreeSet *locusConsElements);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_resetMacroConstruction(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_compute(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_pcopyUpdateCascade(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_clearCache(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self);

__attribute__((unused)) static id OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_getCachedPointWithDouble_(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self, jdouble param);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_updateScreenBordersWithInt_(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self, jint v);

jint OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_MAX_TIME_FOR_ONE_STEP_ = 500;
jint OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_MAX_X_PIXEL_DIST_ = 5;

@implementation OrgGeogebraCommonKernelAlgosAlgoLocusSliderND

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)P {
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, Q, P);
  return self;
}

- (void)createMaxDistances {
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_maxXdist_(self, [IOSDoubleArray newArrayWithLength:3]);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_maxYdist_(self, [IOSDoubleArray newArrayWithLength:3]);
}

- (void)createStartPosWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgGeogebraCommonKernelGeosGeoLocusND *)newGeoLocusWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Locus();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_LOCUS;
}

- (JavaUtilArrayList *)getMoveableInputPoints {
  return nil;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getQ {
  return locusPoint_;
}

- (void)init__ {
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_init__(self);
}

- (void)setInputOutput {
  JavaUtilTreeSet *inSet = [new_JavaUtilTreeSet_init() autorelease];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(Qin_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent] || [geo isPointOnPath]) {
      [inSet addWithId:geo];
    }
  }
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_efficientInput_AlgoLocusSliderND_(self, [IOSObjectArray newArrayWithLength:[inSet size] type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  it = [inSet iterator];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(efficientInput_AlgoLocusSliderND_, i, [it next]);
    i++;
  }
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_standardInput_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(standardInput_, 0, [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(locusPoint_)) toGeoElement]);
  IOSObjectArray_Set(standardInput_, 1, movingSlider_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:locus_];
  [self setEfficientDependenciesWithOrgGeogebraCommonKernelGeosGeoElementArray:standardInput_ withOrgGeogebraCommonKernelGeosGeoElementArray:efficientInput_AlgoLocusSliderND_];
}

- (OrgGeogebraCommonKernelGeosGeoLocusND *)getLocus {
  return locus_;
}

- (void)buildLocusMacroConstructionWithJavaUtilTreeSet:(JavaUtilTreeSet *)locusConsElements {
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_buildLocusMacroConstructionWithJavaUtilTreeSet_(self, locusConsElements);
}

- (void)resetMacroConstruction {
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_resetMacroConstruction(self);
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_compute(self);
}

- (jboolean)differentFromLastWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)qcopy2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)areEqualWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)qstartPos2
                    withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)qcopy2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)distanceOKWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  IOSBooleanArray *distanceOK = [IOSBooleanArray arrayWithBooleans:(jboolean[]){ NO, NO, NO } count:3];
  for (jint i = 0; i < distanceOK->size_; i++) {
    if (IOSBooleanArray_Get(nil_chk(lastFarAway_), i) && [self isFarAwayWithOrgGeogebraCommonKernelKernelNDGeoPointND:Q withInt:i]) {
      *IOSBooleanArray_GetRef(distanceOK, i) = [self distanceOKWithOrgGeogebraCommonKernelKernelNDGeoPointND:Q withOrgGeogebraCommonAwtGRectangle2D:IOSObjectArray_Get(nil_chk(nearToScreenRect_), i)];
    }
    else {
      *IOSBooleanArray_GetRef(distanceOK, i) = [self distanceSmallWithOrgGeogebraCommonKernelKernelNDGeoPointND:Q withBoolean:NO];
    }
  }
  for (jint i = 0; i < distanceOK->size_; i++) {
    if (!IOSBooleanArray_Get(distanceOK, i)) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)isFarAwayWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                                                           withInt:(jint)i {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)distanceOKWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)qcopy2
                               withOrgGeogebraCommonAwtGRectangle2D:(id<OrgGeogebraCommonAwtGRectangle2D>)nearToScreenRect3 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)pcopyUpdateCascade {
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_pcopyUpdateCascade(self);
}

- (void)clearCache {
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_clearCache(self);
}

- (id)newCache {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getCachedPointWithDouble:(jdouble)param {
  return OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_getCachedPointWithDouble_(self, param);
}

- (void)putCachedPointWithDouble:(jdouble)param
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)QCopy {
  cacheIndex_++;
  if (cacheIndex_ >= ((IOSDoubleArray *) nil_chk(paramCache_))->size_) cacheIndex_ = 0;
  *IOSDoubleArray_GetRef(paramCache_, cacheIndex_) = param;
  [self setQCopyCacheWithOrgGeogebraCommonKernelMyPoint:IOSObjectArray_Get(nil_chk(qcopyCache_), cacheIndex_) withOrgGeogebraCommonKernelKernelNDGeoPointND:QCopy];
}

- (void)setQCopyCacheWithOrgGeogebraCommonKernelMyPoint:(OrgGeogebraCommonKernelMyPoint *)t
          withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)qCopy2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)insertPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                                                     withBoolean:(jboolean)lineTo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)distanceSmallWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q
                                                           withBoolean:(jboolean)orInsteadOfAnd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isVisibleInEV1 {
  if (![((OrgGeogebraCommonKernelGeosGeoLocusND *) nil_chk(locus_)) isVisibleInViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN]) return NO;
  if (![((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getEuclidianView1])) isShowing]) return NO;
  return YES;
}

- (jboolean)isVisibleInEV2 {
  if (![((OrgGeogebraCommonKernelGeosGeoLocusND *) nil_chk(locus_)) isVisibleInViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2]) return NO;
  if (![((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) hasEuclidianView2WithInt:1]) return NO;
  return YES;
}

- (void)updateScreenBordersIfNecessary {
  if ([self isVisibleInEV1] != IOSBooleanArray_Get(nil_chk(visibleEV_), 0) || [self isVisibleInEV2] != IOSBooleanArray_Get(visibleEV_, 1) || [self isVisibleInEV2] != IOSBooleanArray_Get(visibleEV_, 2)) {
    [self updateScreenBorders];
  }
}

- (jboolean)isVisibleInEVWithInt:(jint)i {
  switch (i) {
    case 1:
    if (![((OrgGeogebraCommonKernelGeosGeoLocusND *) nil_chk(locus_)) isVisibleInViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN]) return NO;
    if (![((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getEuclidianView1])) isShowing]) return NO;
    return YES;
    case 2:
    if (![((OrgGeogebraCommonKernelGeosGeoLocusND *) nil_chk(locus_)) isVisibleInViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2]) return NO;
    if (![((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) hasEuclidianView2WithInt:1]) return NO;
    return YES;
    case 3:
    if (![((OrgGeogebraCommonKernelGeosGeoLocusND *) nil_chk(locus_)) isVisibleInView3D]) return NO;
    if ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isEuclidianView3Dinited]) return [((id<OrgGeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) getEuclidianView3D])) isShowing];
  }
  return NO;
}

- (void)updateScreenBorders {
  for (jint i = 0; i < ((IOSBooleanArray *) nil_chk(visibleEV_))->size_; i++) {
    *IOSBooleanArray_GetRef(visibleEV_, i) = [self isVisibleInEVWithInt:i + 1];
  }
  if (IOSBooleanArray_Get(visibleEV_, 0) && IOSBooleanArray_Get(visibleEV_, 1)) {
    views_ = 2;
  }
  else {
    views_ = 1;
  }
  if (IOSBooleanArray_Get(visibleEV_, 2)) {
    views_++;
  }
  for (jint i = 0; i < visibleEV_->size_; i++) {
    if (IOSBooleanArray_Get(visibleEV_, i)) {
      OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_updateScreenBordersWithInt_(self, i);
    }
  }
}

- (void)updateScreenBordersWithInt:(jint)v {
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_updateScreenBordersWithInt_(self, v);
}

- (void)setMaxDistancesWithInt:(jint)v {
  jdouble widthRW = IOSDoubleArray_Get(nil_chk(xmax_), v) - IOSDoubleArray_Get(nil_chk(xmin_), v);
  jdouble heightRW = IOSDoubleArray_Get(nil_chk(ymax_), v) - IOSDoubleArray_Get(nil_chk(ymin_), v);
  if (v == 0) {
    *IOSDoubleArray_GetRef(nil_chk(maxXdist_), v) = OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_MAX_X_PIXEL_DIST_ / [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXscaleWithBoolean:YES withBoolean:NO];
    *IOSDoubleArray_GetRef(nil_chk(maxYdist_), v) = OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_MAX_Y_PIXEL_DIST_ / [kernel_ getYscaleWithBoolean:YES withBoolean:NO];
  }
  else {
    *IOSDoubleArray_GetRef(nil_chk(maxXdist_), v) = OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_MAX_X_PIXEL_DIST_ / [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXscaleWithBoolean:NO withBoolean:YES];
    *IOSDoubleArray_GetRef(nil_chk(maxYdist_), v) = OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_MAX_Y_PIXEL_DIST_ / [kernel_ getYscaleWithBoolean:NO withBoolean:YES];
  }
  *IOSDoubleArray_GetRef(nil_chk(farXmin_), v) = IOSDoubleArray_Get(xmin_, v) - widthRW / 2;
  *IOSDoubleArray_GetRef(nil_chk(farXmax_), v) = IOSDoubleArray_Get(xmax_, v) + widthRW / 2;
  *IOSDoubleArray_GetRef(nil_chk(farYmin_), v) = IOSDoubleArray_Get(ymin_, v) - heightRW / 2;
  *IOSDoubleArray_GetRef(nil_chk(farYmax_), v) = IOSDoubleArray_Get(ymax_, v) + heightRW / 2;
}

- (jboolean)euclidianViewUpdate {
  [self updateScreenBorders];
  [self update];
  return NO;
}

- (IOSObjectArray *)createQCopyCache {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(locusPoint_);
  RELEASE_(movingSlider_);
  RELEASE_(locus_);
  RELEASE_(efficientInput_AlgoLocusSliderND_);
  RELEASE_(standardInput_);
  RELEASE_(sliderMover_);
  RELEASE_(Qcopy_);
  RELEASE_(QstartPos_);
  RELEASE_(Pcopy_);
  RELEASE_(PstartPos_);
  RELEASE_(maxXdist_);
  RELEASE_(maxYdist_);
  RELEASE_(xmin_);
  RELEASE_(xmax_);
  RELEASE_(ymin_);
  RELEASE_(ymax_);
  RELEASE_(farXmin_);
  RELEASE_(farXmax_);
  RELEASE_(farYmin_);
  RELEASE_(farYmax_);
  RELEASE_(nearToScreenRect_);
  RELEASE_(lastFarAway_);
  RELEASE_(macroCons_);
  RELEASE_(macroKernel_);
  RELEASE_(locusConsOrigElements_);
  RELEASE_(Qin_);
  RELEASE_(paramCache_);
  RELEASE_(qcopyCache_);
  RELEASE_(visibleEV_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelGeosGeoNumeric:", "AlgoLocusSliderND", NULL, 0x1, NULL, NULL },
    { "createMaxDistances", NULL, "V", 0x4, NULL, NULL },
    { "createStartPosWithOrgGeogebraCommonKernelConstruction:", "createStartPos", "V", 0x404, NULL, NULL },
    { "newGeoLocusWithOrgGeogebraCommonKernelConstruction:", "newGeoLocus", "Lorg.geogebra.common.kernel.geos.GeoLocusND;", 0x404, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getMoveableInputPoints", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getQ", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "init__", "init", "V", 0x2, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getLocus", NULL, "Lorg.geogebra.common.kernel.geos.GeoLocusND;", 0x1, NULL, NULL },
    { "buildLocusMacroConstructionWithJavaUtilTreeSet:", "buildLocusMacroConstruction", "V", 0x2, NULL, NULL },
    { "resetMacroConstruction", NULL, "V", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "differentFromLastWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "differentFromLast", "Z", 0x404, NULL, NULL },
    { "areEqualWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "areEqual", "Z", 0x404, NULL, NULL },
    { "distanceOKWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "distanceOK", "Z", 0x4, NULL, NULL },
    { "isFarAwayWithOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "isFarAway", "Z", 0x404, NULL, NULL },
    { "distanceOKWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonAwtGRectangle2D:", "distanceOK", "Z", 0x404, NULL, NULL },
    { "pcopyUpdateCascade", NULL, "V", 0x2, NULL, NULL },
    { "clearCache", NULL, "V", 0x2, NULL, NULL },
    { "newCache", NULL, "TT;", 0x404, NULL, "()TT;" },
    { "getCachedPointWithDouble:", "getCachedPoint", "TT;", 0x2, NULL, "(D)TT;" },
    { "putCachedPointWithDouble:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "putCachedPoint", "V", 0x4, NULL, NULL },
    { "setQCopyCacheWithOrgGeogebraCommonKernelMyPoint:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "setQCopyCache", "V", 0x404, NULL, "(TT;Lorg/geogebra/common/kernel/kernelND/GeoPointND;)V" },
    { "insertPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:withBoolean:", "insertPoint", "V", 0x404, NULL, NULL },
    { "distanceSmallWithOrgGeogebraCommonKernelKernelNDGeoPointND:withBoolean:", "distanceSmall", "Z", 0x404, NULL, NULL },
    { "isVisibleInEV1", NULL, "Z", 0x0, NULL, NULL },
    { "isVisibleInEV2", NULL, "Z", 0x0, NULL, NULL },
    { "updateScreenBordersIfNecessary", NULL, "V", 0x0, NULL, NULL },
    { "isVisibleInEVWithInt:", "isVisibleInEV", "Z", 0x0, NULL, NULL },
    { "updateScreenBorders", NULL, "V", 0x0, NULL, NULL },
    { "updateScreenBordersWithInt:", "updateScreenBorders", "V", 0x2, NULL, NULL },
    { "setMaxDistancesWithInt:", "setMaxDistances", "V", 0x4, NULL, NULL },
    { "euclidianViewUpdate", NULL, "Z", 0x1, NULL, NULL },
    { "createQCopyCache", NULL, "[Lorg.geogebra.common.kernel.MyPoint;", 0x404, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_TIME_FOR_ONE_STEP_", NULL, 0x9, "I", &OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_MAX_TIME_FOR_ONE_STEP_, NULL,  },
    { "MAX_X_PIXEL_DIST_", NULL, 0xc, "I", &OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_MAX_X_PIXEL_DIST_, NULL,  },
    { "MAX_Y_PIXEL_DIST_", NULL, 0xa, "I", &OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_MAX_Y_PIXEL_DIST_, NULL,  },
    { "locusPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "movingSlider_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "locus_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoLocusND;", NULL, "Lorg/geogebra/common/kernel/geos/GeoLocusND<TT;>;",  },
    { "efficientInput_AlgoLocusSliderND_", "efficientInput", 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "standardInput_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "sliderMover_", NULL, 0x2, "Lorg.geogebra.common.kernel.SliderMover;", NULL, NULL,  },
    { "pointCount_", NULL, 0x4, "I", NULL, NULL,  },
    { "Qcopy_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "QstartPos_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "Pcopy_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "PstartPos_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "lastX_", NULL, 0x4, "D", NULL, NULL,  },
    { "lastY_", NULL, 0x4, "D", NULL, NULL,  },
    { "maxXdist_", NULL, 0x4, "[D", NULL, NULL,  },
    { "maxYdist_", NULL, 0x4, "[D", NULL, NULL,  },
    { "xmin_", NULL, 0x14, "[D", NULL, NULL,  },
    { "xmax_", NULL, 0x14, "[D", NULL, NULL,  },
    { "ymin_", NULL, 0x14, "[D", NULL, NULL,  },
    { "ymax_", NULL, 0x14, "[D", NULL, NULL,  },
    { "farXmin_", NULL, 0x14, "[D", NULL, NULL,  },
    { "farXmax_", NULL, 0x14, "[D", NULL, NULL,  },
    { "farYmin_", NULL, 0x14, "[D", NULL, NULL,  },
    { "farYmax_", NULL, 0x14, "[D", NULL, NULL,  },
    { "nearToScreenRect_", NULL, 0x4, "[Lorg.geogebra.common.awt.GRectangle2D;", NULL, NULL,  },
    { "continuous_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lastFarAway_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "foundDefined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "maxTimeExceeded_", NULL, 0x2, "Z", NULL, NULL,  },
    { "macroCons_", NULL, 0x2, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
    { "macroKernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.MacroKernel;", NULL, NULL,  },
    { "locusConsOrigElements_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lorg/geogebra/common/kernel/algos/ConstructionElement;>;",  },
    { "Qin_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "views_", NULL, 0x2, "I", NULL, NULL,  },
    { "paramCache_", NULL, 0x4, "[D", NULL, NULL,  },
    { "qcopyCache_", NULL, 0x4, "[Lorg.geogebra.common.kernel.MyPoint;", NULL, "[TT;",  },
    { "cacheIndex_", NULL, 0x4, "I", NULL, NULL,  },
    { "visibleEV_", NULL, 0x4, "[Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoLocusSliderND = { 2, "AlgoLocusSliderND", "org.geogebra.common.kernel.algos", NULL, 0x401, 36, methods, 40, fields, 0, NULL, 0, NULL, NULL, "<T:Lorg/geogebra/common/kernel/MyPoint;>Lorg/geogebra/common/kernel/algos/AlgoElement;Lorg/geogebra/common/kernel/algos/AlgoLocusSliderInterface;" };
  return &_OrgGeogebraCommonKernelAlgosAlgoLocusSliderND;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> Q, OrgGeogebraCommonKernelGeosGeoNumeric *P) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_xmin_(self, [IOSDoubleArray newArrayWithLength:3]);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_xmax_(self, [IOSDoubleArray newArrayWithLength:3]);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_ymin_(self, [IOSDoubleArray newArrayWithLength:3]);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_ymax_(self, [IOSDoubleArray newArrayWithLength:3]);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_farXmin_(self, [IOSDoubleArray newArrayWithLength:3]);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_farXmax_(self, [IOSDoubleArray newArrayWithLength:3]);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_farYmin_(self, [IOSDoubleArray newArrayWithLength:3]);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_farYmax_(self, [IOSDoubleArray newArrayWithLength:3]);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_nearToScreenRect_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangle2D], [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newRectangle2D], [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newRectangle2D] } count:3 type:OrgGeogebraCommonAwtGRectangle2D_class_()]);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_lastFarAway_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO, NO } count:3]);
  self->views_ = 1;
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_paramCache_(self, [IOSDoubleArray newArrayWithLength:3]);
  self->cacheIndex_ = 0;
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_visibleEV_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO, NO } count:3]);
  [self createMaxDistances];
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_set_movingSlider_(self, P);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_set_locusPoint_(self, Q);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_sliderMover_(self, new_OrgGeogebraCommonKernelSliderMover_initWithOrgGeogebraCommonKernelGeosGeoNumeric_(P));
  [self createStartPosWithOrgGeogebraCommonKernelConstruction:cons];
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_PstartPos_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons));
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_set_qcopyCache_(self, [self createQCopyCache]);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_set_locus_(self, [self newGeoLocusWithOrgGeogebraCommonKernelConstruction:cons]);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_init__(self);
  [self updateScreenBorders];
  [self setInputOutput];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) registerEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:self];
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_compute(self);
  [((OrgGeogebraCommonKernelGeosGeoLocusND *) nil_chk(self->locus_)) setLabelWithNSString:label];
}

void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_init__(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self) {
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_set_Qin_(self, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->locusPoint_)) toGeoElement])) getAllPredecessors]);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_setAndConsume_locusConsOrigElements_(self, new_JavaUtilTreeSet_init());
  JavaUtilTreeSet *usedAlgoIds = [new_JavaUtilTreeSet_init() autorelease];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(self->Qin_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *parent = [it next];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(parent)) isLabelSet] && [parent isChildOfWithOrgGeogebraCommonKernelGeosGeoElement:self->movingSlider_]) {
      OrgGeogebraCommonKernelMacro_addDependentElementWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_(parent, self->locusConsOrigElements_, usedAlgoIds);
    }
  }
  jboolean isLabeledP = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->movingSlider_)) isLabelSet];
  if (!isLabeledP) {
    [self->movingSlider_ setLabelSimpleWithNSString:[self->movingSlider_ getDefaultLabel]];
    self->movingSlider_->labelSet_ = YES;
  }
  jboolean isLabeledQ = [self->locusPoint_ isLabelSet];
  if (!isLabeledQ) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->locusPoint_ toGeoElement])) setLabelSimpleWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->locusPoint_ toGeoElement])) getDefaultLabel]];
    ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->locusPoint_ toGeoElement]))->labelSet_ = YES;
  }
  [self->locusConsOrigElements_ addWithId:self->movingSlider_];
  OrgGeogebraCommonKernelMacro_addDependentElementWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_([self->locusPoint_ toGeoElement], self->locusConsOrigElements_, usedAlgoIds);
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_buildLocusMacroConstructionWithJavaUtilTreeSet_(self, self->locusConsOrigElements_);
  if (!isLabeledP) self->movingSlider_->labelSet_ = NO;
  if (!isLabeledQ) ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->locusPoint_ toGeoElement]))->labelSet_ = NO;
}

void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_buildLocusMacroConstructionWithJavaUtilTreeSet_(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self, JavaUtilTreeSet *locusConsElements) {
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_set_macroKernel_(self, [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) newMacroKernel]);
  [((OrgGeogebraCommonKernelMacroKernel *) nil_chk(self->macroKernel_)) setGlobalVariableLookupWithBoolean:YES];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(locusConsElements)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelAlgosConstructionElement *ce = [it next];
    if ([((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isGeoElement]) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(ce, [OrgGeogebraCommonKernelGeosGeoElement class]);
      [self->macroKernel_ addReservedLabelWithNSString:[geo getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    }
  }
  @try {
    NSString *locusConsXML = [((JavaLangStringBuilder *) nil_chk(OrgGeogebraCommonKernelMacro_buildMacroXMLWithOrgGeogebraCommonKernelKernel_withJavaUtilSet_(self->kernel_, locusConsElements))) description];
    [self->macroKernel_ loadXMLWithNSString:locusConsXML];
    OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_set_Pcopy_(self, (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->macroKernel_ lookupLabelWithNSString:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->movingSlider_)) getLabelSimple]], [OrgGeogebraCommonKernelGeosGeoNumeric class]));
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->Pcopy_)) setFixedWithBoolean:NO];
    OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_set_Qcopy_(self, (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self->macroKernel_ lookupLabelWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->locusPoint_)) toGeoElement])) getLabelSimple]], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
    OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_set_macroCons_(self, [self->macroKernel_ getConstruction]);
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    [((OrgGeogebraCommonKernelGeosGeoLocusND *) nil_chk(self->locus_)) setUndefined];
    OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_set_macroCons_(self, nil);
  }
}

void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_resetMacroConstruction(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self) {
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(self->locusConsOrigElements_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelAlgosConstructionElement *ce = [it next];
    if ([((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isGeoElement]) {
      OrgGeogebraCommonKernelGeosGeoElement *geoOrig = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(ce, [OrgGeogebraCommonKernelGeosGeoElement class]);
      if (![geoOrig isGeoFunction]) {
        OrgGeogebraCommonKernelGeosGeoElement *geoCopy = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->macroCons_)) lookupLabelWithNSString:[geoOrig getLabelSimple]];
        if (geoCopy != nil) {
          @try {
            [geoCopy setWithOrgGeogebraCommonKernelGeosGeoElement:geoOrig];
            [geoCopy update];
          }
          @catch (JavaLangException *e) {
            OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"AlgoLocusSlider: error in resetMacroConstruction(): ", [((JavaLangException *) nil_chk(e)) getMessage]));
          }
        }
      }
    }
  }
}

void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_compute(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self) {
  if (![((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->movingSlider_)) isDefined] || ![self->movingSlider_ isSlider] || ![self->movingSlider_ isAnimatable] || self->macroCons_ == nil) {
    [((OrgGeogebraCommonKernelGeosGeoLocusND *) nil_chk(self->locus_)) setUndefined];
    return;
  }
  [self updateScreenBordersIfNecessary];
  [((OrgGeogebraCommonKernelGeosGeoLocusND *) nil_chk(self->locus_)) clearPoints];
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_clearCache(self);
  self->pointCount_ = 0;
  self->lastX_ = JavaLangDouble_MAX_VALUE;
  self->lastY_ = JavaLangDouble_MAX_VALUE;
  self->maxTimeExceeded_ = NO;
  self->foundDefined_ = NO;
  jboolean prevQcopyDefined = NO;
  jint max_runs;
  self->continuous_ = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isContinuous];
  [((OrgGeogebraCommonKernelMacroKernel *) nil_chk(self->macroKernel_)) setContinuousWithBoolean:self->continuous_];
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_resetMacroConstruction(self);
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->macroCons_)) updateConstruction];
  [((OrgGeogebraCommonKernelSliderMover *) nil_chk(self->sliderMover_)) init__WithOrgGeogebraCommonKernelGeosGeoNumeric:self->Pcopy_];
  if (self->continuous_) {
    max_runs = OrgGeogebraCommonKernelGeosGeoLocusND_MAX_PATH_RUNS;
  }
  else {
    max_runs = 1;
  }
  OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_pcopyUpdateCascade(self);
  prevQcopyDefined = ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->Qcopy_)) isDefined] && ![self->Qcopy_ isInfinite]);
  jint runs = 1;
  jint MAX_LOOPS = 2 * OrgGeogebraCommonKernelPathMover_MAX_POINTS * self->views_;
  jint whileLoops = 0;
  do {
    jboolean finishedRun = NO;
    while (!finishedRun && !self->maxTimeExceeded_ && self->pointCount_ <= OrgGeogebraCommonKernelPathMover_MAX_POINTS * self->views_ && whileLoops <= MAX_LOOPS) {
      whileLoops++;
      jboolean parameterJump = ![self->sliderMover_ getNextWithOrgGeogebraCommonKernelGeosGeoNumeric:self->Pcopy_];
      jboolean stepChanged = NO;
      OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_pcopyUpdateCascade(self);
      if ([self->Qcopy_ isDefined] && ![self->Qcopy_ isInfinite]) {
        if (!parameterJump) {
          while ([self->Qcopy_ isDefined] && ![self->Qcopy_ isInfinite] && ![self distanceOKWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_] && !self->maxTimeExceeded_) {
            jboolean smallerStep = [self->sliderMover_ smallerStep];
            if (!smallerStep) break;
            stepChanged = YES;
            [self->sliderMover_ stepBack];
            [self->sliderMover_ getNextWithOrgGeogebraCommonKernelGeosGeoNumeric:self->Pcopy_];
            OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_pcopyUpdateCascade(self);
          }
          if ([self->Qcopy_ isDefined] && ![self->Qcopy_ isInfinite]) {
            [self insertPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_ withBoolean:[self distanceSmallWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_ withBoolean:YES]];
            prevQcopyDefined = YES;
          }
        }
        else {
          [self insertPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_ withBoolean:[self distanceSmallWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_ withBoolean:YES]];
          prevQcopyDefined = YES;
        }
      }
      else {
        if (prevQcopyDefined && !parameterJump) {
          [self->sliderMover_ stepBack];
          if (![self->sliderMover_ smallerStep]) {
            prevQcopyDefined = NO;
          }
          else stepChanged = YES;
        }
      }
      if (!stepChanged) {
        [self->sliderMover_ biggerStep];
      }
      if (![self->sliderMover_ hasNext]) {
        if ([self distanceSmallWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->QstartPos_ withBoolean:YES]) {
          [self insertPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->QstartPos_ withBoolean:YES];
          finishedRun = YES;
        }
        else {
          while (![self->sliderMover_ hasNext] && [self->sliderMover_ smallerStep]) {
          }
          if (![self->sliderMover_ hasNext]) finishedRun = YES;
        }
      }
    }
    if (self->maxTimeExceeded_) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:@"AlgoLocusSlider: max time exceeded"];
      return;
    }
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->Pcopy_)) setWithOrgGeogebraCommonKernelGeosGeoElement:self->PstartPos_];
    OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_pcopyUpdateCascade(self);
    if ([self differentFromLastWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_]) [self insertPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_ withBoolean:[self distanceSmallWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_ withBoolean:YES]];
    if ([self->sliderMover_ hasPositiveOrientation]) {
      jboolean equal = [self areEqualWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->QstartPos_ withOrgGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_];
      if (equal) break;
    }
    [self->sliderMover_ resetStartParameter];
    runs++;
  }
  while (runs < max_runs);
  [self->locus_ setDefinedWithBoolean:self->foundDefined_];
}

void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_pcopyUpdateCascade(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self) {
  if (self->continuous_) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->Pcopy_)) updateCascade];
  }
  else {
    jdouble param = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->Pcopy_)) getValue];
    OrgGeogebraCommonAwtGPoint2D *cachedPoint = OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_getCachedPointWithDouble_(self, param);
    if (cachedPoint == nil) {
      jlong startTime = JavaLangSystem_currentTimeMillis();
      [self->Pcopy_ updateCascade];
      jlong updateTime = JavaLangSystem_currentTimeMillis() - startTime;
      if (updateTime > OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_MAX_TIME_FOR_ONE_STEP_) {
        OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$J", @"AlgoLocusSlider: max time exceeded ", updateTime));
        self->maxTimeExceeded_ = YES;
      }
      [self putCachedPointWithDouble:param withOrgGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_];
    }
    else {
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->Qcopy_)) setCoordsWithDouble:[cachedPoint getX] withDouble:[cachedPoint getY] withDouble:1.0];
    }
  }
  if (!self->foundDefined_ && [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->Qcopy_)) isDefined] && ![self->Qcopy_ isInfinite]) {
    [((OrgGeogebraCommonKernelSliderMover *) nil_chk(self->sliderMover_)) init__WithOrgGeogebraCommonKernelGeosGeoNumeric:self->Pcopy_];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->PstartPos_)) setWithOrgGeogebraCommonKernelGeosGeoElement:self->Pcopy_];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->QstartPos_)) toGeoElement])) setWithOrgGeogebraCommonKernelGeosGeoElement:[self->Qcopy_ toGeoElement]];
    self->foundDefined_ = YES;
    [self insertPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_ withBoolean:NO];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_clearCache(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self) {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(self->paramCache_))->size_; i++) {
    *IOSDoubleArray_GetRef(self->paramCache_, i) = JavaLangDouble_NaN;
    if (IOSObjectArray_Get(nil_chk(self->qcopyCache_), i) == nil) IOSObjectArray_Set(self->qcopyCache_, i, [self newCache]);
  }
}

id OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_getCachedPointWithDouble_(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self, jdouble param) {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(self->paramCache_))->size_; i++) {
    if (param == IOSDoubleArray_Get(self->paramCache_, i)) return IOSObjectArray_Get(nil_chk(self->qcopyCache_), i);
  }
  return nil;
}

void OrgGeogebraCommonKernelAlgosAlgoLocusSliderND_updateScreenBordersWithInt_(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND *self, jint v) {
  if (v == 0) {
    *IOSDoubleArray_GetRef(nil_chk(self->xmax_), v) = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getXmaxWithBoolean:YES withBoolean:NO];
    *IOSDoubleArray_GetRef(nil_chk(self->xmin_), v) = [self->kernel_ getXminWithBoolean:YES withBoolean:NO];
    *IOSDoubleArray_GetRef(nil_chk(self->ymax_), v) = [self->kernel_ getYmaxWithBoolean:YES withBoolean:NO];
    *IOSDoubleArray_GetRef(nil_chk(self->ymin_), v) = [self->kernel_ getYminWithBoolean:YES withBoolean:NO];
  }
  else {
    *IOSDoubleArray_GetRef(nil_chk(self->xmax_), v) = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getXmaxWithBoolean:NO withBoolean:YES];
    *IOSDoubleArray_GetRef(nil_chk(self->xmin_), v) = [self->kernel_ getXminWithBoolean:NO withBoolean:YES];
    *IOSDoubleArray_GetRef(nil_chk(self->ymax_), v) = [self->kernel_ getYmaxWithBoolean:NO withBoolean:YES];
    *IOSDoubleArray_GetRef(nil_chk(self->ymin_), v) = [self->kernel_ getYminWithBoolean:NO withBoolean:YES];
  }
  [self setMaxDistancesWithInt:v];
  [((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk(IOSObjectArray_Get(nil_chk(self->nearToScreenRect_), v))) setFrameWithDouble:IOSDoubleArray_Get(nil_chk(self->farXmin_), v) withDouble:IOSDoubleArray_Get(nil_chk(self->farYmin_), v) withDouble:IOSDoubleArray_Get(nil_chk(self->farXmax_), v) - IOSDoubleArray_Get(self->farXmin_, v) withDouble:IOSDoubleArray_Get(nil_chk(self->farYmax_), v) - IOSDoubleArray_Get(self->farYmin_, v)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoLocusSliderND)
