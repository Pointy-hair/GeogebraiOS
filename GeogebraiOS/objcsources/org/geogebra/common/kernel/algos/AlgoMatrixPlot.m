//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoMatrixPlot.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GGraphics2D.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoMatrixPlot.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoCanvasImage.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/util/GgbMat.h"

@interface OrgGeogebraCommonKernelAlgosAlgoMatrixPlot () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *inputList_;
  OrgGeogebraCommonKernelGeosGeoCanvasImage *outputImage_;
  IOSObjectArray *data_;
}

- (void)drawPlot;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoMatrixPlot, inputList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoMatrixPlot, outputImage_, OrgGeogebraCommonKernelGeosGeoCanvasImage *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoMatrixPlot, data_, IOSObjectArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_compute(OrgGeogebraCommonKernelAlgosAlgoMatrixPlot *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_drawPlot(OrgGeogebraCommonKernelAlgosAlgoMatrixPlot *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoMatrixPlot

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)inputList {
  OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)inputList {
  OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_MatrixPlot();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, inputList_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:outputImage_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoCanvasImage *)getResult {
  return outputImage_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_compute(self);
}

- (void)drawPlot {
  OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_drawPlot(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoMatrixPlot", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoMatrixPlot", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoCanvasImage;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "drawPlot", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "outputImage_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoCanvasImage;", NULL, NULL,  },
    { "data_", NULL, 0x2, "[[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoMatrixPlot = { 2, "AlgoMatrixPlot", "org.geogebra.common.kernel.algos", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoMatrixPlot;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAlgosAlgoMatrixPlot *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  (void) OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  [((OrgGeogebraCommonKernelGeosGeoCanvasImage *) nil_chk(self->outputImage_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoMatrixPlot *new_OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgGeogebraCommonKernelAlgosAlgoMatrixPlot *self = [OrgGeogebraCommonKernelAlgosAlgoMatrixPlot alloc];
  OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAlgosAlgoMatrixPlot *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->inputList_ = inputList;
  self->outputImage_ = new_OrgGeogebraCommonKernelGeosGeoCanvasImage_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_compute(self);
}

OrgGeogebraCommonKernelAlgosAlgoMatrixPlot *new_OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgGeogebraCommonKernelAlgosAlgoMatrixPlot *self = [OrgGeogebraCommonKernelAlgosAlgoMatrixPlot alloc];
  OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_compute(OrgGeogebraCommonKernelAlgosAlgoMatrixPlot *self) {
  OrgGeogebraCommonUtilGgbMat *matrix = new_OrgGeogebraCommonUtilGgbMat_initWithOrgGeogebraCommonKernelGeosGeoList_(self->inputList_);
  if ([matrix isUndefined]) {
    [((OrgGeogebraCommonKernelGeosGeoCanvasImage *) nil_chk(self->outputImage_)) setUndefined];
    return;
  }
  self->data_ = [matrix getData];
  OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_drawPlot(self);
}

void OrgGeogebraCommonKernelAlgosAlgoMatrixPlot_drawPlot(OrgGeogebraCommonKernelAlgosAlgoMatrixPlot *self) {
  id<OrgGeogebraCommonAwtGGraphics2D> g = [((OrgGeogebraCommonKernelGeosGeoCanvasImage *) nil_chk(self->outputImage_)) getGraphics];
  jint width = [self->outputImage_ getWidth];
  jint height = [self->outputImage_ getHeight];
  [((id<OrgGeogebraCommonAwtGGraphics2D>) nil_chk(g)) setPaintWithOrgGeogebraCommonAwtGPaint:OrgGeogebraCommonAwtGColor_get_WHITE_()];
  [g fillRectWithInt:0 withInt:0 withInt:width withInt:height];
  jint rowStep = height / ((IOSObjectArray *) nil_chk(self->data_))->size_;
  jint columnStep = width / ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(self->data_, 0)))->size_;
  for (jint row = 0; row < self->data_->size_; row += 1) {
    for (jint col = 0; col < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(self->data_, 0)))->size_; col += 1) {
      jint c = J2ObjCFpToInt((IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->data_, row)), col) * 256)) % 256;
      [g setColorWithOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:c withInt:c withInt:c withInt:150]];
      [g fillRectWithInt:columnStep * (col) withInt:rowStep * (row) withInt:columnStep withInt:rowStep];
    }
  }
  [g setPaintWithOrgGeogebraCommonAwtGPaint:OrgGeogebraCommonAwtGColor_get_BLACK_()];
  for (jint row = 0; row <= height; row += rowStep) {
    [g drawLineWithInt:0 withInt:row withInt:width withInt:row];
  }
  for (jint col = 0; col <= width; col += columnStep) {
    [g drawLineWithInt:col withInt:0 withInt:col withInt:height];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoMatrixPlot)
