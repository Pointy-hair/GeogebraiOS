//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoConicPartCircumcircleND.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoConicPart.h"
#include "org/geogebra/common/kernel/algos/AlgoConicPartCircumcircleND.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND () {
 @public
  OrgGeogebraCommonKernelGeosGeoLine *line_;
}

- (void)setIncidence;

- (void)computeDegenerate;

- (void)computeCircle;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND, line_, OrgGeogebraCommonKernelGeosGeoLine *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_setIncidence(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeDegenerate(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeCircle(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAx(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAy(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBx(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBy(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCx(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCy(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
                                                    withInt:(jint)type {
  OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, cons, label, A, B, C, type);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)B
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)C
                                                    withInt:(jint)type {
  OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, cons, A, B, C, type);
  return self;
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)createConicPartWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                                                              withInt:(jint)type {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints *)getAlgo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setIncidence {
  OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_setIncidence(self);
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC:
    return OrgGeogebraCommonKernelCommandsCommandsEnum_get_CircumcircleArc();
    default:
    return OrgGeogebraCommonKernelCommandsCommandsEnum_get_CircumcircleSector();
  }
}

- (jint)getRelatedModeID {
  switch (type_) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC:
    return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS;
    default:
    return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS;
  }
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(A_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(B_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 2, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(C_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:conicPart_];
  [self setDependencies];
}

- (void)compute {
  if (![((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) isDefined]) {
    [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conicPart_)) setUndefined];
    return;
  }
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conicPart_)) setWithOrgGeogebraCommonKernelGeosGeoElement:conic_];
  switch ([conicPart_ getType]) {
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeDegenerate(self);
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeCircle(self);
    break;
    case OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    [self computeSinglePoint];
    break;
    default:
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I", @"AlgoCirclePartPoints: unexpected conic type: ", [conicPart_ getType]));
    [conicPart_ setUndefined];
  }
}

- (void)computeDegenerate {
  OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeDegenerate(self);
}

- (void)computeCircle {
  OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeCircle(self);
}

- (void)computeSinglePoint {
  [((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(conicPart_, @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND))))) setParametersToSinglePoint];
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getA {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getB {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getC {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getAx {
  return OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAx(self);
}

- (jdouble)getAy {
  return OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAy(self);
}

- (jdouble)getBx {
  return OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBx(self);
}

- (jdouble)getBy {
  return OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBy(self);
}

- (jdouble)getCx {
  return OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCx(self);
}

- (jdouble)getCy {
  return OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCy(self);
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(B_);
  RELEASE_(C_);
  RELEASE_(line_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "AlgoConicPartCircumcircleND", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "AlgoConicPartCircumcircleND", NULL, 0x1, NULL, NULL },
    { "createConicPartWithOrgGeogebraCommonKernelConstruction:withInt:", "createConicPart", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x404, NULL, NULL },
    { "getAlgo", NULL, "Lorg.geogebra.common.kernel.algos.AlgoCircleThreePoints;", 0x404, NULL, NULL },
    { "setIncidence", NULL, "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "computeDegenerate", NULL, "V", 0x2, NULL, NULL },
    { "computeCircle", NULL, "V", 0x2, NULL, NULL },
    { "computeSinglePoint", NULL, "V", 0x4, NULL, NULL },
    { "getA", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x401, NULL, NULL },
    { "getB", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x401, NULL, NULL },
    { "getC", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x401, NULL, NULL },
    { "getAx", NULL, "D", 0x14, NULL, NULL },
    { "getAy", NULL, "D", 0x14, NULL, NULL },
    { "getBx", NULL, "D", 0x14, NULL, NULL },
    { "getBy", NULL, "D", 0x14, NULL, NULL },
    { "getCx", NULL, "D", 0x14, NULL, NULL },
    { "getCy", NULL, "D", 0x14, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "B_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "C_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND = { 2, "AlgoConicPartCircumcircleND", "org.geogebra.common.kernel.algos", NULL, 0x401, 21, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C, jint type) {
  OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, cons, A, B, C, type);
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conicPart_)) setLabelWithNSString:label];
}

void OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoPointND_withInt_(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, id<OrgGeogebraCommonKernelKernelNDGeoPointND> B, id<OrgGeogebraCommonKernelKernelNDGeoPointND> C, jint type) {
  OrgGeogebraCommonKernelAlgosAlgoConicPart_initWithOrgGeogebraCommonKernelConstruction_withInt_(self, cons, type);
  OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_set_A_(self, A);
  OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_set_B_(self, B);
  OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_set_C_(self, C);
  OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints *algo = [self getAlgo];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo];
  OrgGeogebraCommonKernelAlgosAlgoConicPart_set_conic_(self, [((OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints *) nil_chk(algo)) getCircle]);
  OrgGeogebraCommonKernelAlgosAlgoConicPart_set_conicPart_(self, [self createConicPartWithOrgGeogebraCommonKernelConstruction:cons withInt:type]);
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conicPart_)) addPointOnConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:A];
  [self->conicPart_ addPointOnConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:B];
  [self->conicPart_ addPointOnConicWithOrgGeogebraCommonKernelKernelNDGeoPointND:C];
  [self setInputOutput];
  [self compute];
  OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_setIncidence(self);
}

void OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_setIncidence(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->A_)) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->conicPart_ withBoolean:NO];
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->B_)) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->conicPart_ withBoolean:NO];
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->C_)) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->conicPart_ withBoolean:NO];
}

void OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeDegenerate(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  if (self->line_ == nil) {
    OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_set_line_(self, IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conicPart_)) getLines]), 0));
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->line_)) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:[self getA]];
    [self->line_ setEndPointWithOrgGeogebraCommonKernelGeosGeoPoint:[self getC]];
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk([self->conicPart_ getLines]), 1))) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:[self getC]];
  }
  OrgGeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoLine_([self getA], [self getC], self->line_);
  jdouble lambda = OrgGeogebraCommonKernelGeosGeoPoint_affineRatioWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_([self getA], [self getC], [self getB]);
  if (lambda < 0 || lambda > 1) {
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conicPart_)) getLines]), 1))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:self->line_];
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->line_)) changeSign];
    [((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(self->conicPart_, @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND))) setParametersWithDouble:0 withDouble:1 withBoolean:NO];
  }
  else {
    [((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(self->conicPart_, @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND))))) setParametersWithDouble:0 withDouble:1 withBoolean:YES];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeCircle(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  jdouble alpha = JavaLangMath_atan2WithDouble_withDouble_(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAy(self) - [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conicPart_)) getTranslationVector])) getY], OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAx(self) - [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([self->conicPart_ getTranslationVector])) getX]);
  jdouble beta = JavaLangMath_atan2WithDouble_withDouble_(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCy(self) - [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([self->conicPart_ getTranslationVector])) getY], OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCx(self) - [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([self->conicPart_ getTranslationVector])) getX]);
  jdouble det = (OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBx(self) - OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAx(self)) * (OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCy(self) - OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAy(self)) - (OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBy(self) - OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAy(self)) * (OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCx(self) - OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAx(self));
  [((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(self->conicPart_, @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND))) setParametersWithDouble:alpha withDouble:beta withBoolean:det > 0];
}

jdouble OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAx(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  return ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getA]))->inhomX_;
}

jdouble OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAy(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  return ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getA]))->inhomY_;
}

jdouble OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBx(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  return ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getB]))->inhomX_;
}

jdouble OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBy(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  return ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getB]))->inhomY_;
}

jdouble OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCx(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  return ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getC]))->inhomX_;
}

jdouble OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCy(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  return ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getC]))->inhomY_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoConicPartCircumcircleND)
