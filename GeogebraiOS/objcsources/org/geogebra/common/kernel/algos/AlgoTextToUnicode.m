//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoTextToUnicode.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoTextToUnicode.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"

@implementation OrgGeogebraCommonKernelAlgosAlgoTextToUnicode

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)text {
  OrgGeogebraCommonKernelAlgosAlgoTextToUnicode_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, text);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_TextToUnicode();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, text_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:list_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return list_;
}

- (void)compute {
  NSString *t = [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text_)) getTextString];
  if (t == nil) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list_)) setUndefined];
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list_)) setDefinedWithBoolean:YES];
  [list_ clear];
  jint size = ((jint) [((NSString *) nil_chk(t)) length]);
  if (size == 0) return;
  for (jint i = 0; i < size; i++) {
    OrgGeogebraCommonKernelGeosGeoNumeric *num = [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
    [num setValueWithDouble:[t charAtWithInt:i]];
    [list_ addWithOrgGeogebraCommonKernelGeosGeoElement:num];
  }
}

- (void)dealloc {
  RELEASE_(text_);
  RELEASE_(list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoText:", "AlgoTextToUnicode", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "text_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "list_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoTextToUnicode = { 2, "AlgoTextToUnicode", "org.geogebra.common.kernel.algos", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoTextToUnicode;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoTextToUnicode_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelAlgosAlgoTextToUnicode *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoText *text) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoTextToUnicode_set_text_(self, text);
  OrgGeogebraCommonKernelAlgosAlgoTextToUnicode_setAndConsume_list_(self, new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self compute];
  [self->list_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoTextToUnicode *new_OrgGeogebraCommonKernelAlgosAlgoTextToUnicode_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoText *text) {
  OrgGeogebraCommonKernelAlgosAlgoTextToUnicode *self = [OrgGeogebraCommonKernelAlgosAlgoTextToUnicode alloc];
  OrgGeogebraCommonKernelAlgosAlgoTextToUnicode_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoText_(self, cons, label, text);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoTextToUnicode)
