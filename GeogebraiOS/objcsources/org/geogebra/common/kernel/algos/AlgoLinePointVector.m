//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoLinePointVector.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoLinePointVector.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoLinePointVector () {
 @public
  OrgGeogebraCommonKernelGeosGeoPoint *P_;
  OrgGeogebraCommonKernelGeosGeoVector *v_;
  OrgGeogebraCommonKernelGeosGeoLine *g_;
}

- (void)addIncidence;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLinePointVector, P_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLinePointVector, v_, OrgGeogebraCommonKernelGeosGeoVector *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoLinePointVector, g_, OrgGeogebraCommonKernelGeosGeoLine *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoLinePointVector_addIncidence(OrgGeogebraCommonKernelAlgosAlgoLinePointVector *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoLinePointVector_compute(OrgGeogebraCommonKernelAlgosAlgoLinePointVector *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoLinePointVector

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                   withOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)v {
  OrgGeogebraCommonKernelAlgosAlgoLinePointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(self, cons, label, P, v);
  return self;
}

- (void)addIncidence {
  OrgGeogebraCommonKernelAlgosAlgoLinePointVector_addIncidence(self);
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Line();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, P_);
  (void) IOSObjectArray_Set(input_, 1, v_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoLine *)getLine {
  return g_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getP {
  return P_;
}

- (OrgGeogebraCommonKernelGeosGeoVector *)getv {
  return v_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoLinePointVector_compute(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"LineThroughAwithDirectionB" withNSString:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(v_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoVector:", "AlgoLinePointVector", NULL, 0x1, NULL, NULL },
    { "addIncidence", NULL, "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getLine", NULL, "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getP", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x0, NULL, NULL },
    { "getv", NULL, "Lorg.geogebra.common.kernel.geos.GeoVector;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "v_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoLinePointVector = { 2, "AlgoLinePointVector", "org.geogebra.common.kernel.algos", NULL, 0x1, 9, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoLinePointVector;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoLinePointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(OrgGeogebraCommonKernelAlgosAlgoLinePointVector *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *P, OrgGeogebraCommonKernelGeosGeoVector *v) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->P_ = P;
  self->v_ = v;
  self->g_ = new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self->g_ setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:P];
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoLinePointVector_compute(self);
  [self->g_ setLabelWithNSString:label];
  OrgGeogebraCommonKernelAlgosAlgoLinePointVector_addIncidence(self);
}

OrgGeogebraCommonKernelAlgosAlgoLinePointVector *new_OrgGeogebraCommonKernelAlgosAlgoLinePointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *P, OrgGeogebraCommonKernelGeosGeoVector *v) {
  OrgGeogebraCommonKernelAlgosAlgoLinePointVector *self = [OrgGeogebraCommonKernelAlgosAlgoLinePointVector alloc];
  OrgGeogebraCommonKernelAlgosAlgoLinePointVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVector_(self, cons, label, P, v);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoLinePointVector_addIncidence(OrgGeogebraCommonKernelAlgosAlgoLinePointVector *self) {
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->P_)) addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self->g_ withBoolean:YES];
}

void OrgGeogebraCommonKernelAlgosAlgoLinePointVector_compute(OrgGeogebraCommonKernelAlgosAlgoLinePointVector *self) {
  OrgGeogebraCommonKernelGeosGeoVec3D_lineThroughPointVectorWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoLine_(self->P_, self->v_, self->g_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoLinePointVector)
