//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoShearOrStretch.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/MatrixTransformable.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoShearOrStretch.h"
#include "org/geogebra/common/kernel/algos/AlgoTransformation.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoConicPart.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoPoly.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/geos/Translateable.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/util/MyMath.h"

@interface OrgGeogebraCommonKernelAlgosAlgoShearOrStretch () {
 @public
  id<OrgGeogebraCommonKernelMatrixTransformable> out_;
  OrgGeogebraCommonKernelGeosGeoElement *inGeo_, *outGeo_;
  OrgGeogebraCommonKernelGeosGeoVec3D *line_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> num_;
  jboolean shear_;
  jdouble n_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoShearOrStretch, out_, id<OrgGeogebraCommonKernelMatrixTransformable>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoShearOrStretch, inGeo_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoShearOrStretch, outGeo_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoShearOrStretch, line_, OrgGeogebraCommonKernelGeosGeoVec3D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoShearOrStretch, num_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoShearOrStretch_compute(OrgGeogebraCommonKernelAlgosAlgoShearOrStretch *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoShearOrStretch

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
                    withOrgGeogebraCommonKernelGeosGeoVec3D:(OrgGeogebraCommonKernelGeosGeoVec3D *)l
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)num
                                                withBoolean:(jboolean)shear {
  OrgGeogebraCommonKernelAlgosAlgoShearOrStretch_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(self, cons, inArg, l, num, shear);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  if (shear_) return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Shear();
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Stretch();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:num_ == nil ? 2 : 3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, inGeo_);
  (void) IOSObjectArray_Set(input_, 1, line_);
  if (num_ != nil) (void) IOSObjectArray_Set(input_, 2, [num_ toGeoElement]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:outGeo_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResult {
  return outGeo_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoShearOrStretch_compute(self);
}

- (void)setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g
                            withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g2 {
  inGeo_ = g;
  outGeo_ = g2;
  if (!([outGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]])) out_ = (id<OrgGeogebraCommonKernelMatrixTransformable>) check_protocol_cast(outGeo_, @protocol(OrgGeogebraCommonKernelMatrixTransformable));
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) return new_OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  return [super getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)transformLimitedPathWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)a
                            withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)b {
  if (!([a isKindOfClass:[OrgGeogebraCommonKernelGeosGeoConicPart class]])) {
    [super transformLimitedPathWithOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:b];
  }
  else {
    [super transformLimitedConicWithOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:b];
  }
}

- (jboolean)swapOrientationWithOrgGeogebraCommonKernelGeosGeoConicPart:(OrgGeogebraCommonKernelGeosGeoConicPart *)arc {
  if (shear_ || num_ == nil) return (arc == nil || [arc positiveOrientation]);
  return (arc == nil || [arc positiveOrientation]) ^ ([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num_)) getDouble] < 0);
}

- (jdouble)getAreaScaleFactor {
  if (shear_) {
    return 1;
  }
  return n_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoVec3D:withOrgGeogebraCommonKernelArithmeticNumberValue:withBoolean:", "AlgoShearOrStretch", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "setTransformedObject", "V", 0x4, NULL, NULL },
    { "getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:", "getResultTemplate", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "transformLimitedPathWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "transformLimitedPath", "V", 0x4, NULL, NULL },
    { "swapOrientationWithOrgGeogebraCommonKernelGeosGeoConicPart:", "swapOrientation", "Z", 0x1, NULL, NULL },
    { "getAreaScaleFactor", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "out_", NULL, 0x2, "Lorg.geogebra.common.kernel.MatrixTransformable;", NULL, NULL,  },
    { "inGeo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "outGeo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVec3D;", NULL, NULL,  },
    { "num_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "shear_", NULL, 0x2, "Z", NULL, NULL,  },
    { "n_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoShearOrStretch = { 2, "AlgoShearOrStretch", "org.geogebra.common.kernel.algos", NULL, 0x1, 10, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoShearOrStretch;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoShearOrStretch_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(OrgGeogebraCommonKernelAlgosAlgoShearOrStretch *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, OrgGeogebraCommonKernelGeosGeoVec3D *l, id<OrgGeogebraCommonKernelArithmeticNumberValue> num, jboolean shear) {
  (void) OrgGeogebraCommonKernelAlgosAlgoTransformation_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->shear_ = shear;
  self->line_ = l;
  self->num_ = num;
  self->inGeo_ = inArg;
  if ([OrgGeogebraCommonKernelGeosGeoPoly_class_() isInstance:self->inGeo_] || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isLimitedPath]) {
    self->outGeo_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(inArg)) copyInternalWithOrgGeogebraCommonKernelConstruction:cons];
    self->out_ = (id<OrgGeogebraCommonKernelMatrixTransformable>) check_protocol_cast(self->outGeo_, @protocol(OrgGeogebraCommonKernelMatrixTransformable));
  }
  else if ([self->inGeo_ isGeoList]) {
    self->outGeo_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  }
  else if ([self->inGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
    self->out_ = new_OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_(cons);
    self->outGeo_ = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->out_, [OrgGeogebraCommonKernelGeosGeoElement class]);
  }
  else {
    self->out_ = (id<OrgGeogebraCommonKernelMatrixTransformable>) check_protocol_cast([self->inGeo_ copy__], @protocol(OrgGeogebraCommonKernelMatrixTransformable));
    self->outGeo_ = [((id<OrgGeogebraCommonKernelMatrixTransformable>) nil_chk(self->out_)) toGeoElement];
  }
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoShearOrStretch_compute(self);
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isGeoFunction]) [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) registerEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:self];
}

OrgGeogebraCommonKernelAlgosAlgoShearOrStretch *new_OrgGeogebraCommonKernelAlgosAlgoShearOrStretch_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, OrgGeogebraCommonKernelGeosGeoVec3D *l, id<OrgGeogebraCommonKernelArithmeticNumberValue> num, jboolean shear) {
  OrgGeogebraCommonKernelAlgosAlgoShearOrStretch *self = [OrgGeogebraCommonKernelAlgosAlgoShearOrStretch alloc];
  OrgGeogebraCommonKernelAlgosAlgoShearOrStretch_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(self, cons, inArg, l, num, shear);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoShearOrStretch_compute(OrgGeogebraCommonKernelAlgosAlgoShearOrStretch *self) {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isGeoList]) {
    [self transformListWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->inGeo_, [OrgGeogebraCommonKernelGeosGeoList class]) withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->outGeo_, [OrgGeogebraCommonKernelGeosGeoList class])];
    return;
  }
  if ([self->inGeo_ isGeoFunction]) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->inGeo_, [OrgGeogebraCommonKernelGeosGeoFunction class])) toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(self->outGeo_, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class])];
  }
  else [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setWithOrgGeogebraCommonKernelGeosGeoElement:self->inGeo_];
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) isDefined]) {
    return;
  }
  id<OrgGeogebraCommonKernelGeosTranslateable> tranOut = (id<OrgGeogebraCommonKernelGeosTranslateable>) check_protocol_cast(self->out_, @protocol(OrgGeogebraCommonKernelGeosTranslateable));
  jdouble qx = 0.0, qy = 0.0, s, c;
  self->n_ = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(((OrgGeogebraCommonKernelGeosGeoVec3D *) nil_chk(self->line_))->x_, self->line_->y_);
  if ([self->line_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]]) {
    if (JavaLangMath_absWithDouble_(self->line_->x_) > JavaLangMath_absWithDouble_(self->line_->y_)) {
      qx = self->line_->z_ / self->line_->x_;
    }
    else {
      qy = self->line_->z_ / self->line_->y_;
    }
    s = -self->line_->x_ / self->n_;
    c = self->line_->y_ / self->n_;
    self->n_ = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->num_)) getDouble];
  }
  else {
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> sp = [((OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(self->line_, [OrgGeogebraCommonKernelGeosGeoVector class])) getStartPoint];
    if (sp != nil) {
      OrgGeogebraCommonKernelMatrixCoords *qCoords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([((OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(self->line_, [OrgGeogebraCommonKernelGeosGeoVector class])) getStartPoint])) getCoordsInD2];
      qx = -[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(qCoords)) getX];
      qy = -[qCoords getY];
    }
    c = -self->line_->y_ / self->n_;
    s = self->line_->x_ / self->n_;
  }
  [((id<OrgGeogebraCommonKernelGeosTranslateable>) nil_chk(tranOut)) translateWithOrgGeogebraCommonKernelMatrixCoords:new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(qx, qy, 0)];
  if (self->shear_) {
    [((id<OrgGeogebraCommonKernelMatrixTransformable>) nil_chk(self->out_)) matrixTransformWithDouble:1 - c * s * self->n_ withDouble:c * c * self->n_ withDouble:-s * s * self->n_ withDouble:1 + s * c * self->n_];
  }
  else {
    [((id<OrgGeogebraCommonKernelMatrixTransformable>) nil_chk(self->out_)) matrixTransformWithDouble:c * c + s * s * self->n_ withDouble:c * s * (1 - self->n_) withDouble:c * s * (1 - self->n_) withDouble:s * s + c * c * self->n_];
  }
  [tranOut translateWithOrgGeogebraCommonKernelMatrixCoords:new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(-qx, -qy, 0)];
  if ([self->inGeo_ isLimitedPath]) {
    [self transformLimitedPathWithOrgGeogebraCommonKernelGeosGeoElement:self->inGeo_ withOrgGeogebraCommonKernelGeosGeoElement:self->outGeo_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoShearOrStretch)
