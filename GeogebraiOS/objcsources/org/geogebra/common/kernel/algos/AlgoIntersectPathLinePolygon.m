//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoIntersectPathLinePolygon.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/TreeMap.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectPathLinePolygon.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/GeoRay.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/kernelND/GeoElementND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon () {
 @public
  jboolean hasLabels_;
  OrgGeogebraCommonKernelMatrixCoords *project1_, *project2_;
  IOSDoubleArray *lineCoords_, *tmp_;
  OrgGeogebraCommonKernelMatrixCoords *project_;
  IOSDoubleArray *parameters_;
}

+ (jboolean)onSegmentWithDouble:(jdouble)t;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon, project1_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon, project2_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon, lineCoords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon, tmp_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon, project_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon, parameters_, IOSDoubleArray *)

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_onSegmentWithDouble_(jdouble t);

@interface OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 : NSObject < OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *this$0_;
}

- (OrgGeogebraCommonKernelGeosGeoSegment *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithOrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon:(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1, this$0_, OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 *self, OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *outer$);

__attribute__((unused)) static OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 *new_OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1)

@implementation OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)p {
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, c, geo, p);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                          withNSStringArray:(IOSObjectArray *)labels
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)p {
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, c, labels, geo, p);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (void)setFirstInputWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  self->g_ = (id<OrgGeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoLineND));
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getFirstInput {
  return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(g_, [OrgGeogebraCommonKernelGeosGeoElement class]);
}

- (void)setSecondInputWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  self->p_ = (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPolygon class]);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getSecondInput {
  return p_;
}

- (OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *)createOutputSegments {
  return new_OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, new_OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_(self));
}

- (void)setSegmentVisualPropertiesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)segment {
  if ([((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_)) size] > 0) {
    OrgGeogebraCommonKernelGeosGeoElement *seg0 = [outputSegments_ getElementWithInt:0];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(segment)) setAllVisualPropertiesWithOrgGeogebraCommonKernelGeosGeoElement:seg0 withBoolean:NO];
    [segment setViewFlagsWithJavaUtilList:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(seg0)) getViewSet]];
    [segment setVisibleInView3DWithOrgGeogebraCommonKernelGeosGeoElement:seg0];
    [segment setVisibleInViewForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:seg0];
  }
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_IntersectPath();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECTION_CURVE;
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, [self getFirstInput]);
  (void) IOSObjectArray_Set(input_, 1, [self getSecondInput]);
  [self setDependencies];
}

- (void)setIntersectionLine {
  o1_ = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  d1_ = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([g_ getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithOrgGeogebraCommonKernelMatrixCoords:o1_];
}

- (jboolean)checkParameterWithDouble:(jdouble)t1 {
  return [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) respectLimitedPathWithDouble:t1];
}

- (void)intersectionsCoordsWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)p {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) getSegments]))->size_; i++) {
    id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> seg = IOSObjectArray_Get(nil_chk([p getSegments]), i);
    if ([((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) isDefined]) {
      OrgGeogebraCommonKernelMatrixCoords *o2 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([seg getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
      OrgGeogebraCommonKernelMatrixCoords *d2 = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([seg getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithOrgGeogebraCommonKernelMatrixCoords:o2];
      if (project1_ == nil) {
        project1_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
        project2_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
        lineCoords_ = [IOSDoubleArray newArrayWithLength:2];
        tmp_ = [IOSDoubleArray newArrayWithLength:4];
      }
      OrgGeogebraCommonKernelMatrixCoordMatrixUtil_nearestPointsFromTwoLinesWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_(o1_, d1_, o2, d2, ((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(project1_))->val_, ((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(project2_))->val_, lineCoords_, tmp_);
      if (!JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(lineCoords_), 0)) && [project1_ equalsForKernelWithOrgGeogebraCommonKernelMatrixCoords:project2_ withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION]) {
        jdouble t1 = IOSDoubleArray_Get(lineCoords_, 0);
        jdouble t2 = IOSDoubleArray_Get(lineCoords_, 1);
        if ([self checkParameterWithDouble:t1] && OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_onSegmentWithDouble_(t2)) [self addCoordsWithDouble:t1 withOrgGeogebraCommonKernelMatrixCoords:project1_ withOrgGeogebraCommonKernelKernelNDGeoElementND:seg];
      }
    }
  }
}

+ (jboolean)onSegmentWithDouble:(jdouble)t {
  return OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_onSegmentWithDouble_(t);
}

- (jboolean)checkMidpointWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)p
                           withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)a
                           withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)b {
  OrgGeogebraCommonKernelMatrixCoords *midpoint = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(a)) addWithOrgGeogebraCommonKernelMatrixCoords:b])) mulWithDouble:0.5];
  return [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) isInRegionWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(midpoint)) getX] withDouble:[midpoint getY]];
}

- (void)addStartEndPoints {
  if ([g_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) {
    (void) [((JavaUtilTreeMap *) nil_chk(newCoords_)) putWithId:JavaLangDouble_valueOfWithDouble_(0.0) withId:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getStartPoint])) getInhomCoordsInD2]];
    (void) [newCoords_ putWithId:JavaLangDouble_valueOfWithDouble_(1.0) withId:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([g_ getEndPoint])) getInhomCoordsInD2]];
  }
  else if ([g_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoRay class]]) (void) [((JavaUtilTreeMap *) nil_chk(newCoords_)) putWithId:JavaLangDouble_valueOfWithDouble_(0.0) withId:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getStartPoint])) getInhomCoordsInD2]];
}

- (void)addPolygonPoints {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(p_)) getPoints]))->size_; i++) {
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> geoPoint = IOSObjectArray_Get(nil_chk([p_ getPointsND]), i);
    if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(geoPoint)) isDefined]) {
      OrgGeogebraCommonKernelMatrixCoords *point = [geoPoint getInhomCoordsInD3];
      [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(point)) projectLineWithOrgGeogebraCommonKernelMatrixCoords:o1_ withOrgGeogebraCommonKernelMatrixCoords:d1_ withOrgGeogebraCommonKernelMatrixCoords:project_ withDoubleArray:parameters_];
      if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(project_)) equalsForKernelWithOrgGeogebraCommonKernelMatrixCoords:point withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION]) {
        jdouble t1 = IOSDoubleArray_Get(nil_chk(parameters_), 0);
        if ([self checkParameterWithDouble:t1]) [self addCoordsWithDouble:t1 withOrgGeogebraCommonKernelMatrixCoords:project_ withOrgGeogebraCommonKernelKernelNDGeoElementND:geoPoint];
      }
    }
  }
}

- (void)addCoordsWithDouble:(jdouble)parameter
withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords
withOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)parent {
  (void) [((JavaUtilTreeMap *) nil_chk(newCoords_)) putWithId:JavaLangDouble_valueOfWithDouble_(parameter) withId:new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX], [coords getY])];
}

- (void)setNewCoords {
  [((JavaUtilTreeMap *) nil_chk(newCoords_)) clear];
  [self setIntersectionLine];
  [self addStartEndPoints];
  [self addPolygonPoints];
  [self intersectionsCoordsWithOrgGeogebraCommonKernelGeosGeoPolygon:p_];
}

- (void)compute {
  [self setNewCoords];
  if ([((JavaUtilTreeMap *) nil_chk(newCoords_)) size] < 2) {
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_)) adjustOutputSizeWithInt:1];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputSegments_ getElementWithInt:0])) setUndefined];
  }
  else {
    JavaUtilArrayList *segmentList = new_JavaUtilArrayList_init();
    IOSObjectArray *points = [IOSObjectArray newArrayWithLength:[newCoords_ size] type:OrgGeogebraCommonKernelMatrixCoords_class_()];
    (void) [((id<JavaUtilCollection>) nil_chk([newCoords_ values])) toArrayWithNSObjectArray:points];
    OrgGeogebraCommonKernelMatrixCoords *b = IOSObjectArray_Get(points, 0);
    OrgGeogebraCommonKernelMatrixCoords *startSegment = nil;
    OrgGeogebraCommonKernelMatrixCoords *endSegment = nil;
    for (jint i = 1; i < [newCoords_ size]; i++) {
      OrgGeogebraCommonKernelMatrixCoords *a = b;
      b = IOSObjectArray_Get(points, i);
      if ([self checkMidpointWithOrgGeogebraCommonKernelGeosGeoPolygon:p_ withOrgGeogebraCommonKernelMatrixCoords:a withOrgGeogebraCommonKernelMatrixCoords:b]) {
        if (startSegment == nil) startSegment = a;
        endSegment = b;
      }
      else {
        if (startSegment != nil) {
          [segmentList addWithId:[IOSObjectArray newArrayWithObjects:(id[]){ startSegment, endSegment } count:2 type:OrgGeogebraCommonKernelMatrixCoords_class_()]];
          startSegment = nil;
        }
      }
    }
    if (startSegment != nil) [segmentList addWithId:[IOSObjectArray newArrayWithObjects:(id[]){ startSegment, endSegment } count:2 type:OrgGeogebraCommonKernelMatrixCoords_class_()]];
    if ([segmentList size] == 0) {
      [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_)) adjustOutputSizeWithInt:1];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputSegments_ getElementWithInt:0])) setUndefined];
    }
    else {
      [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_)) adjustOutputSizeWithInt:[segmentList size]];
      if (hasLabels_) {
        [outputSegments_ updateLabels];
      }
      jint indexSegment = 0;
      for (IOSObjectArray * __strong seg in segmentList) {
        id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> segment = (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast([outputSegments_ getElementWithInt:indexSegment], @protocol(OrgGeogebraCommonKernelKernelNDGeoSegmentND));
        OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_setSegmentWithOrgGeogebraCommonKernelKernelNDGeoSegmentND_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(segment, IOSObjectArray_Get(nil_chk(seg), 0), IOSObjectArray_Get(seg, 1));
        indexSegment++;
      }
    }
  }
}

+ (void)setSegmentWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)seg
                          withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)start
                          withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)end {
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_setSegmentWithOrgGeogebraCommonKernelKernelNDGeoSegmentND_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(seg, start, end);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionOfAandB" withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getFirstInput])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getSecondInput])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  if (labels != nil && labels->size_ == 1 && [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_)) size] > 1 && IOSObjectArray_Get(labels, 0) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(labels, 0))) isEqual:@""]) {
    [outputSegments_ setIndexLabelsWithNSString:IOSObjectArray_Get(labels, 0)];
  }
  else {
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_)) setLabelsWithNSStringArray:labels];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "AlgoIntersectPathLinePolygon", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "AlgoIntersectPathLinePolygon", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:", "AlgoIntersectPathLinePolygon", NULL, 0x1, NULL, NULL },
    { "setFirstInputWithOrgGeogebraCommonKernelGeosGeoElement:", "setFirstInput", "V", 0x4, NULL, NULL },
    { "getFirstInput", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "setSecondInputWithOrgGeogebraCommonKernelGeosGeoElement:", "setSecondInput", "V", 0x4, NULL, NULL },
    { "getSecondInput", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "createOutputSegments", NULL, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", 0x4, NULL, NULL },
    { "setSegmentVisualPropertiesWithOrgGeogebraCommonKernelGeosGeoElement:", "setSegmentVisualProperties", "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "setIntersectionLine", NULL, "V", 0x4, NULL, NULL },
    { "checkParameterWithDouble:", "checkParameter", "Z", 0x4, NULL, NULL },
    { "intersectionsCoordsWithOrgGeogebraCommonKernelGeosGeoPolygon:", "intersectionsCoords", "V", 0x4, NULL, NULL },
    { "onSegmentWithDouble:", "onSegment", "Z", 0x1a, NULL, NULL },
    { "checkMidpointWithOrgGeogebraCommonKernelGeosGeoPolygon:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "checkMidpoint", "Z", 0x4, NULL, NULL },
    { "addStartEndPoints", NULL, "V", 0x4, NULL, NULL },
    { "addPolygonPoints", NULL, "V", 0x4, NULL, NULL },
    { "addCoordsWithDouble:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelKernelNDGeoElementND:", "addCoords", "V", 0x4, NULL, NULL },
    { "setNewCoords", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setSegmentWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "setSegment", "V", 0x1c, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "p_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "outputSegments_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lorg/geogebra/common/kernel/algos/AlgoElement$OutputHandler<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "newCoords_", NULL, 0x4, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Ljava/lang/Double;Lorg/geogebra/common/kernel/Matrix/Coords;>;",  },
    { "hasLabels_", NULL, 0x2, "Z", NULL, NULL,  },
    { "o1_", NULL, 0x4, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "d1_", NULL, 0x4, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "project1_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "project2_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "lineCoords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "tmp_", NULL, 0x2, "[D", NULL, NULL,  },
    { "project_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "parameters_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon = { 2, "AlgoIntersectPathLinePolygon", "org.geogebra.common.kernel.algos", NULL, 0x1, 25, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *self, OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonKernelGeosGeoElement *p) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->hasLabels_ = NO;
  self->project_ = OrgGeogebraCommonKernelMatrixCoords_createInhomCoorsInD3();
  self->parameters_ = [IOSDoubleArray newArrayWithLength:2];
  self->outputSegments_ = [self createOutputSegments];
  [self setFirstInputWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  [self setSecondInputWithOrgGeogebraCommonKernelGeosGeoElement:p];
  self->newCoords_ = new_JavaUtilTreeMap_initWithJavaUtilComparator_(OrgGeogebraCommonKernelKernel_DoubleComparatorWithDouble_(OrgGeogebraCommonKernelKernel_STANDARD_PRECISION));
  [self setInputOutput];
}

OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *new_OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonKernelGeosGeoElement *p) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, c, geo, p);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *self, OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonKernelGeosGeoElement *p) {
  (void) OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, c, geo, p);
  if (![((OrgGeogebraCommonKernelConstruction *) nil_chk(c)) isSuppressLabelsActive]) {
    [self setLabelsWithNSStringArray:labels];
    self->hasLabels_ = YES;
  }
  [self update];
}

OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *new_OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonKernelGeosGeoElement *p) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, c, labels, geo, p);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *self, OrgGeogebraCommonKernelConstruction *c) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->hasLabels_ = NO;
  self->project_ = OrgGeogebraCommonKernelMatrixCoords_createInhomCoorsInD3();
  self->parameters_ = [IOSDoubleArray newArrayWithLength:2];
}

OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *new_OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

jboolean OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_onSegmentWithDouble_(jdouble t) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initialize();
  return OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(t, 0) && OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(1, t);
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_setSegmentWithOrgGeogebraCommonKernelKernelNDGeoSegmentND_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> seg, OrgGeogebraCommonKernelMatrixCoords *start, OrgGeogebraCommonKernelMatrixCoords *end) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initialize();
  [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) setTwoPointsInhomCoordsWithOrgGeogebraCommonKernelMatrixCoords:start withOrgGeogebraCommonKernelMatrixCoords:end];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon)

@implementation OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1

- (OrgGeogebraCommonKernelGeosGeoSegment *)newElement {
  OrgGeogebraCommonKernelGeosGeoSegment *a = new_OrgGeogebraCommonKernelGeosGeoSegment_initWithOrgGeogebraCommonKernelConstruction_(this$0_->cons_);
  OrgGeogebraCommonKernelGeosGeoPoint *aS = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(this$0_->cons_);
  [aS setCoordsWithDouble:0 withDouble:0 withDouble:1];
  OrgGeogebraCommonKernelGeosGeoPoint *aE = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(this$0_->cons_);
  [aE setCoordsWithDouble:0 withDouble:0 withDouble:1];
  [a setPointsWithOrgGeogebraCommonKernelGeosGeoPoint:aS withOrgGeogebraCommonKernelGeosGeoPoint:aE];
  [a setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:this$0_];
  [this$0_ setSegmentVisualPropertiesWithOrgGeogebraCommonKernelGeosGeoElement:a];
  return a;
}

- (instancetype)initWithOrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon:(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *)outer$ {
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoSegment;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.algos.AlgoIntersectPathLinePolygon;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon", "createOutputSegments" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 = { 2, "", "org.geogebra.common.kernel.algos", "AlgoIntersectPathLinePolygon", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lorg/geogebra/common/kernel/algos/AlgoElement$elementFactory<Lorg/geogebra/common/kernel/geos/GeoElement;>;" };
  return &_OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 *self, OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 *new_OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *outer$) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1)
