//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoIf.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIf.h"
#include "org/geogebra/common/kernel/algos/DrawInformationAlgo.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/MyNumberPair.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/Test.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonKernelAlgosAlgoIf () {
 @public
  OrgGeogebraCommonKernelGeosGeoElement *result_;
  JavaUtilArrayList *alternatives_;
  JavaUtilArrayList *conditions_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIf, result_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIf, alternatives_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIf, conditions_, JavaUtilArrayList *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIf_compute(OrgGeogebraCommonKernelAlgosAlgoIf *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoIf

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                                      withJavaUtilArrayList:(JavaUtilArrayList *)conditions
                                      withJavaUtilArrayList:(JavaUtilArrayList *)alternatives {
  OrgGeogebraCommonKernelAlgosAlgoIf_initWithOrgGeogebraCommonKernelConstruction_withNSString_withJavaUtilArrayList_withJavaUtilArrayList_(self, cons, label, conditions, alternatives);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_If();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(conditions_)) size] + [((JavaUtilArrayList *) nil_chk(alternatives_)) size] type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  for (jint i = 0; i < [self->conditions_ size]; i++) {
    (void) IOSObjectArray_Set(input_, 2 * i, [conditions_ getWithInt:i]);
    (void) IOSObjectArray_Set(input_, 2 * i + 1, [alternatives_ getWithInt:i]);
  }
  if ([alternatives_ size] > [conditions_ size]) {
    (void) IOSObjectArray_Set(input_, input_->size_ - 1, [alternatives_ getWithInt:[alternatives_ size] - 1]);
  }
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:result_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return result_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoIf_compute(self);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)toExpression {
  if ([((JavaUtilArrayList *) nil_chk(self->alternatives_)) size] == 1) {
    return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) convertNumberValueToExpressionNodeWithOrgGeogebraCommonKernelGeosGeoElement:[((JavaUtilArrayList *) nil_chk(self->conditions_)) getWithInt:0]], OrgGeogebraCommonPluginOperationEnum_get_IF(), [kernel_ convertNumberValueToExpressionNodeWithOrgGeogebraCommonKernelGeosGeoElement:[self->alternatives_ getWithInt:0]]);
  }
  else if ([((JavaUtilArrayList *) nil_chk(self->conditions_)) size] == 1) {
    return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyNumberPair_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) convertNumberValueToExpressionNodeWithOrgGeogebraCommonKernelGeosGeoElement:[self->conditions_ getWithInt:0]], [kernel_ convertNumberValueToExpressionNodeWithOrgGeogebraCommonKernelGeosGeoElement:[self->alternatives_ getWithInt:0]]), OrgGeogebraCommonPluginOperationEnum_get_IF_ELSE(), [kernel_ convertNumberValueToExpressionNodeWithOrgGeogebraCommonKernelGeosGeoElement:[self->alternatives_ getWithInt:1]]);
  }
  OrgGeogebraCommonKernelArithmeticMyList *cond = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(kernel_), *funs = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(kernel_);
  for (OrgGeogebraCommonKernelGeosGeoBoolean * __strong f in nil_chk(conditions_)) {
    [cond addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) convertNumberValueToExpressionNodeWithOrgGeogebraCommonKernelGeosGeoElement:f]];
  }
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong f in alternatives_) {
    [funs addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) convertNumberValueToExpressionNodeWithOrgGeogebraCommonKernelGeosGeoElement:f]];
  }
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, cond, OrgGeogebraCommonPluginOperationEnum_get_IF_LIST(), funs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withJavaUtilArrayList:withJavaUtilArrayList:", "AlgoIf", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toExpression", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "alternatives_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "conditions_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoBoolean;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIf = { 2, "AlgoIf", "org.geogebra.common.kernel.algos", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoIf;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIf_initWithOrgGeogebraCommonKernelConstruction_withNSString_withJavaUtilArrayList_withJavaUtilArrayList_(OrgGeogebraCommonKernelAlgosAlgoIf *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, JavaUtilArrayList *conditions, JavaUtilArrayList *alternatives) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->conditions_ = conditions;
  self->alternatives_ = alternatives;
  self->result_ = [((JavaUtilArrayList *) nil_chk(alternatives)) getWithInt:0];
  jint i = 1;
  while (i < [alternatives size] && OrgGeogebraCommonKernelGeosTestEnum_canSetWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_([alternatives getWithInt:i], self->result_)) {
    self->result_ = [alternatives getWithInt:i];
    i++;
  }
  self->result_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->result_)) copyInternalWithOrgGeogebraCommonKernelConstruction:cons];
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoIf_compute(self);
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->result_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoIf *new_OrgGeogebraCommonKernelAlgosAlgoIf_initWithOrgGeogebraCommonKernelConstruction_withNSString_withJavaUtilArrayList_withJavaUtilArrayList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, JavaUtilArrayList *conditions, JavaUtilArrayList *alternatives) {
  OrgGeogebraCommonKernelAlgosAlgoIf *self = [OrgGeogebraCommonKernelAlgosAlgoIf alloc];
  OrgGeogebraCommonKernelAlgosAlgoIf_initWithOrgGeogebraCommonKernelConstruction_withNSString_withJavaUtilArrayList_withJavaUtilArrayList_(self, cons, label, conditions, alternatives);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIf_compute(OrgGeogebraCommonKernelAlgosAlgoIf *self) {
  @try {
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->conditions_)) size]; i++) {
      if ([((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk([self->conditions_ getWithInt:i])) getBoolean]) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->result_)) setWithOrgGeogebraCommonKernelGeosGeoElement:[((JavaUtilArrayList *) nil_chk(self->alternatives_)) getWithInt:i]];
        if ([OrgGeogebraCommonKernelAlgosDrawInformationAlgo_class_() isInstance:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->alternatives_ getWithInt:i])) getDrawAlgorithm]]) {
          [self->result_ setDrawAlgorithmWithOrgGeogebraCommonKernelAlgosDrawInformationAlgo:[((id<OrgGeogebraCommonKernelAlgosDrawInformationAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosDrawInformationAlgo>) check_protocol_cast([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->alternatives_ getWithInt:i])) getDrawAlgorithm], @protocol(OrgGeogebraCommonKernelAlgosDrawInformationAlgo))))) copy__]];
        }
        return;
      }
      OrgGeogebraCommonKernelGeosGeoElement *last = [self->alternatives_ getWithInt:[((JavaUtilArrayList *) nil_chk(self->alternatives_)) size] - 1];
      if ([self->conditions_ size] == [self->alternatives_ size]) [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->result_)) setUndefined];
      else [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->result_)) setWithOrgGeogebraCommonKernelGeosGeoElement:last];
      if ([OrgGeogebraCommonKernelAlgosDrawInformationAlgo_class_() isInstance:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(last)) getDrawAlgorithm]]) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->result_)) setDrawAlgorithmWithOrgGeogebraCommonKernelAlgosDrawInformationAlgo:[((id<OrgGeogebraCommonKernelAlgosDrawInformationAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosDrawInformationAlgo>) check_protocol_cast([last getDrawAlgorithm], @protocol(OrgGeogebraCommonKernelAlgosDrawInformationAlgo))))) copy__]];
      }
    }
  }
  @catch (JavaLangException *e) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->result_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIf)
