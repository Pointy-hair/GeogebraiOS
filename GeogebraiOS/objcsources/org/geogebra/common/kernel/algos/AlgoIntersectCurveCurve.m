//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoIntersectCurveCurve.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectCurveCurve.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersectLineCurve.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve () {
 @public
  OrgGeogebraCommonKernelGeosGeoCurveCartesian *curve2_;
  id<OrgGeogebraCommonKernelGeosGeoNumberValue> t1_, t2_;
  jboolean numeric_;
}

- (void)checkPointInRangeWithDouble:(jdouble)p1
                         withDouble:(jdouble)p2
withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)point;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve, curve2_, OrgGeogebraCommonKernelGeosGeoCurveCartesian *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve, t1_, id<OrgGeogebraCommonKernelGeosGeoNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve, t2_, id<OrgGeogebraCommonKernelGeosGeoNumberValue>)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_checkPointInRangeWithDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *self, jdouble p1, jdouble p2, OrgGeogebraCommonKernelGeosGeoPoint *point);

@interface OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 : NSObject < OrgGeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *this$0_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithOrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve:(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1, this$0_, OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 *self, OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *outer$);

__attribute__((unused)) static OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 *new_OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1)

@implementation OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                          withNSStringArray:(IOSObjectArray *)labels
           withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)c1
           withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)c2 {
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(self, c, labels, c1, c2);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                          withNSStringArray:(IOSObjectArray *)labels
           withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)c1
           withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)c2
              withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)t1
              withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)t2 {
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, c, labels, c1, c2, t1, t2);
  return self;
}

- (OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *)createOutputPoints {
  return [new_OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_(self) autorelease]) autorelease];
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (void)setInputOutput {
  if (t1_ != nil) {
    OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 2, [t1_ toGeoElement]);
    IOSObjectArray_Set(input_, 3, [((id<OrgGeogebraCommonKernelGeosGeoNumberValue>) nil_chk(t2_)) toGeoElement]);
  }
  else {
    OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  }
  IOSObjectArray_Set(nil_chk(input_), 0, curve_);
  IOSObjectArray_Set(input_, 1, curve2_);
  [self setDependencies];
}

- (void)compute {
  jint index = 0;
  if (numeric_) {
    OrgGeogebraCommonKernelArithmeticFunction *funx1 = [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve_)) getFunX];
    OrgGeogebraCommonKernelArithmeticFunction *funx2 = [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve2_)) getFunX];
    OrgGeogebraCommonKernelArithmeticFunction *funy1 = [curve_ getFunY];
    OrgGeogebraCommonKernelArithmeticFunction *funy2 = [curve2_ getFunY];
    OrgGeogebraCommonKernelArithmeticExpressionNode *enx1 = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(funx1)) getExpression];
    OrgGeogebraCommonKernelArithmeticExpressionNode *eny1 = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(funy1)) getExpression];
    OrgGeogebraCommonKernelArithmeticExpressionNode *enx2 = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(funx2)) getExpression];
    OrgGeogebraCommonKernelArithmeticExpressionNode *eny2 = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(funy2)) getExpression];
    OrgGeogebraCommonKernelArithmeticFunctionVariable *fVarx1 = [funx1 getFunctionVariable];
    OrgGeogebraCommonKernelArithmeticFunctionVariable *fVarx2 = [funx2 getFunctionVariable];
    OrgGeogebraCommonKernelArithmeticFunctionVariable *fVary1 = [funy1 getFunctionVariable];
    OrgGeogebraCommonKernelArithmeticFunctionVariable *fVary2 = [funy2 getFunctionVariable];
    OrgGeogebraCommonKernelArithmeticExpressionNode *j00 = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enx1)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fVarx1 withOrgGeogebraCommonKernelKernel:kernel_];
    OrgGeogebraCommonKernelArithmeticExpressionNode *minusj10 = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enx2)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fVarx2 withOrgGeogebraCommonKernelKernel:kernel_];
    OrgGeogebraCommonKernelArithmeticExpressionNode *j01 = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(eny1)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fVary1 withOrgGeogebraCommonKernelKernel:kernel_];
    OrgGeogebraCommonKernelArithmeticExpressionNode *minusj11 = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(eny2)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fVary2 withOrgGeogebraCommonKernelKernel:kernel_];
    jdouble x1 = [((id<OrgGeogebraCommonKernelGeosGeoNumberValue>) nil_chk(t1_)) getDouble];
    jdouble y1 = [((id<OrgGeogebraCommonKernelGeosGeoNumberValue>) nil_chk(t2_)) getDouble];
    jdouble x0 = x1 + 1;
    jdouble y0 = y1 + 1;
    jint count = 0;
    jint maxCount = 100;
    jdouble EPS = 1e-15;
    while (count < maxCount && (JavaLangMath_absWithDouble_(x0 - x1) > EPS || JavaLangMath_absWithDouble_(y0 - y1) > EPS)) {
      count++;
      x0 = x1;
      y0 = y1;
      [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fVarx1)) setWithDouble:x0];
      [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fVarx2)) setWithDouble:y0];
      [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fVary1)) setWithDouble:x0];
      [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fVary2)) setWithDouble:y0];
      jdouble j00Eval = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(j00)) evaluateDouble];
      jdouble j01Eval = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(j01)) evaluateDouble];
      jdouble j10Eval = -[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(minusj10)) evaluateDouble];
      jdouble j11Eval = -[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(minusj11)) evaluateDouble];
      jdouble f1Eval = [enx1 evaluateDouble] - [enx2 evaluateDouble];
      jdouble f2Eval = [eny1 evaluateDouble] - [eny2 evaluateDouble];
      jdouble determinant = j00Eval * j11Eval - j01Eval * j10Eval;
      x1 = x0 - (j11Eval * f1Eval - j10Eval * f2Eval) / determinant;
      y1 = y0 - (j00Eval * f2Eval - j01Eval * f1Eval) / determinant;
    }
    if (count >= maxCount || JavaLangDouble_isNaNWithDouble_(x1) || JavaLangDouble_isNaNWithDouble_(y1)) {
      x1 = JavaLangDouble_NaN;
      y1 = JavaLangDouble_NaN;
    }
    [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) adjustOutputSizeWithInt:index + 1];
    OrgGeogebraCommonKernelGeosGeoPoint *point = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([outputPoints_ getElementWithInt:index], [OrgGeogebraCommonKernelGeosGeoPoint class]);
    index++;
    OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_checkPointInRangeWithDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoPoint_(self, x1, y1, point);
  }
  else {
    NSString *fv1 = [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve_)) getFunX])) getFunctionVariable])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    NSString *fv2 = [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve2_)) getFunX])) getFunctionVariable])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    NSString *c1X = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([curve_ getFunX])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_fullFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML())];
    NSString *c1Y = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([curve_ getFunY])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_fullFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML())];
    NSString *c2X = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([curve2_ getFunX])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_fullFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML())];
    NSString *c2Y = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([curve2_ getFunY])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_fullFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML())];
    if ([((NSString *) nil_chk(fv1)) isEqual:fv2]) {
      fv2 = JreStrcat("$C", fv2, '2');
      c2X = [((NSString *) nil_chk(c2X)) replaceAll:fv1 withReplacement:fv2];
      c2Y = [((NSString *) nil_chk(c2Y)) replaceAll:fv1 withReplacement:fv2];
    }
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
    [sb appendWithNSString:@"Solve[{"];
    [sb appendWithNSString:c1X];
    [sb appendWithChar:'='];
    [sb appendWithNSString:c2X];
    [sb appendWithChar:','];
    [sb appendWithNSString:c1Y];
    [sb appendWithChar:'='];
    [sb appendWithNSString:c2Y];
    [sb appendWithNSString:@"},{"];
    [sb appendWithNSString:fv1];
    [sb appendWithChar:','];
    [sb appendWithNSString:fv2];
    [sb appendWithNSString:@"}]"];
    NSString *result = @"";
    @try {
      result = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) evaluateGeoGebraCASWithNSString:[sb description] withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil];
    }
    @catch (JavaLangThrowable *e) {
      for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size]; i++) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputPoints_ getElementWithInt:i])) setUndefined];
      }
      [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
      return;
    }
    OrgGeogebraCommonKernelCommandsAlgebraProcessor *ap = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor];
    jint firstBrace = [((NSString *) nil_chk(result)) indexOfString:@"{"];
    jint currentBrace = [result indexOfString:@"{" fromIndex:firstBrace + 1];
    while (currentBrace > -1) {
      jint nextComma = [result indexOfString:@"," fromIndex:currentBrace + 1];
      jint nextCloseBrace = [result indexOfString:@"}" fromIndex:currentBrace + 1];
      if (nextComma > -1 && nextCloseBrace > -1) {
        [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) adjustOutputSizeWithInt:index + 1];
        OrgGeogebraCommonKernelGeosGeoPoint *point = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([outputPoints_ getElementWithInt:index], [OrgGeogebraCommonKernelGeosGeoPoint class]);
        index++;
        NSString *s1 = [((NSString *) nil_chk([result substring:currentBrace + 1 endIndex:nextComma])) replaceAll:@" " withReplacement:@""];
        NSString *s2 = [((NSString *) nil_chk([result substring:nextComma + 1 endIndex:nextCloseBrace])) replaceAll:@" " withReplacement:@""];
        if ([((NSString *) nil_chk(s1)) hasPrefix:JreStrcat("$C", fv1, '=')] && [((NSString *) nil_chk(s2)) hasPrefix:JreStrcat("$C", fv2, '=')]) {
          jdouble p1 = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(ap)) evaluateToDoubleWithNSString:[s1 substring:((jint) [fv1 length]) + 1] withBoolean:YES];
          jdouble p2 = [ap evaluateToDoubleWithNSString:[s2 substring:((jint) [((NSString *) nil_chk(fv2)) length]) + 1] withBoolean:YES];
          OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_checkPointInRangeWithDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoPoint_(self, p1, p2, point);
        }
        else if ([s1 hasPrefix:JreStrcat("$C", fv2, '=')] && [((NSString *) nil_chk(s2)) hasPrefix:JreStrcat("$C", fv1, '=')]) {
          jdouble p2 = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(ap)) evaluateToDoubleWithNSString:[s1 substring:((jint) [((NSString *) nil_chk(fv2)) length]) + 1] withBoolean:YES];
          jdouble p1 = [ap evaluateToDoubleWithNSString:[s2 substring:((jint) [fv1 length]) + 1] withBoolean:YES];
          OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_checkPointInRangeWithDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoPoint_(self, p1, p2, point);
        }
        else {
          OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$C$", @"problem: ", s1, ' ', s2));
          [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(point)) setUndefined];
        }
        currentBrace = [result indexOfString:@"{" fromIndex:currentBrace + 1];
      }
      else {
        OrgGeogebraCommonMainApp_debugWithNSString_(@"problem with result");
        currentBrace = -1;
      }
    }
  }
  for (; index < [((OrgGeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size]; index++) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([outputPoints_ getElementWithInt:index])) setUndefined];
  }
}

- (void)checkPointInRangeWithDouble:(jdouble)p1
                         withDouble:(jdouble)p2
withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)point {
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_checkPointInRangeWithDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoPoint_(self, p1, p2, point);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionPointOfAB" withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk((curve_))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk((curve2_))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(curve2_);
  RELEASE_(t1_);
  RELEASE_(t2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelGeosGeoCurveCartesian:withOrgGeogebraCommonKernelGeosGeoCurveCartesian:", "AlgoIntersectCurveCurve", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelGeosGeoCurveCartesian:withOrgGeogebraCommonKernelGeosGeoCurveCartesian:withOrgGeogebraCommonKernelGeosGeoNumberValue:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "AlgoIntersectCurveCurve", NULL, 0x1, NULL, NULL },
    { "createOutputPoints", NULL, "Lorg.geogebra.common.kernel.algos.AlgoElement$OutputHandler;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "checkPointInRangeWithDouble:withDouble:withOrgGeogebraCommonKernelGeosGeoPoint:", "checkPointInRange", "V", 0x2, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "curve2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoCurveCartesian;", NULL, NULL,  },
    { "t1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumberValue;", NULL, NULL,  },
    { "t2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumberValue;", NULL, NULL,  },
    { "numeric_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve = { 2, "AlgoIntersectCurveCurve", "org.geogebra.common.kernel.algos", NULL, 0x1, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *self, OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoCurveCartesian *c1, OrgGeogebraCommonKernelGeosGeoCurveCartesian *c2) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->numeric_ = NO;
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) addCASAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_set_outputPoints_(self, [self createOutputPoints]);
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_set_curve_(self, c1);
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_set_curve2_(self, c2);
  [self compute];
  [self setInputOutput];
  [self setLabelsWithNSStringArray:labels];
  [self update];
}

OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *new_OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoCurveCartesian *c1, OrgGeogebraCommonKernelGeosGeoCurveCartesian *c2) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(self, c, labels, c1, c2);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *self, OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoCurveCartesian *c1, OrgGeogebraCommonKernelGeosGeoCurveCartesian *c2, id<OrgGeogebraCommonKernelGeosGeoNumberValue> t1, id<OrgGeogebraCommonKernelGeosGeoNumberValue> t2) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->numeric_ = NO;
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) addCASAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_set_outputPoints_(self, [self createOutputPoints]);
  OrgGeogebraCommonKernelAlgosAlgoIntersectLineCurve_set_curve_(self, c1);
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_set_curve2_(self, c2);
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_set_t1_(self, t1);
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_set_t2_(self, t2);
  self->numeric_ = YES;
  [self compute];
  [self setInputOutput];
  [self setLabelsWithNSStringArray:labels];
  [self update];
}

OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *new_OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *labels, OrgGeogebraCommonKernelGeosGeoCurveCartesian *c1, OrgGeogebraCommonKernelGeosGeoCurveCartesian *c2, id<OrgGeogebraCommonKernelGeosGeoNumberValue> t1, id<OrgGeogebraCommonKernelGeosGeoNumberValue> t2) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, c, labels, c1, c2, t1, t2);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_checkPointInRangeWithDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *self, jdouble p1, jdouble p2, OrgGeogebraCommonKernelGeosGeoPoint *point) {
  if (OrgGeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(p1, [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(self->curve_)) getMinParameter]) && OrgGeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_([self->curve_ getMaxParameter], p1) && OrgGeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(p2, [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(self->curve2_)) getMinParameter]) && OrgGeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_([self->curve2_ getMaxParameter], p2)) {
    jdouble x = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self->curve_ getFunX])) evaluateWithDouble:p1];
    jdouble y = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self->curve_ getFunY])) evaluateWithDouble:p1];
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(point)) setCoordsWithDouble:x withDouble:y withDouble:1.0];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(point)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve)

@implementation OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1

- (OrgGeogebraCommonKernelGeosGeoPoint *)newElement {
  OrgGeogebraCommonKernelGeosGeoPoint *p = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(this$0_->cons_) autorelease];
  [p setCoordsWithDouble:0 withDouble:0 withDouble:1];
  [p setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:this$0_];
  return p;
}

- (instancetype)initWithOrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve:(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *)outer$ {
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.algos.AlgoIntersectCurveCurve;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve", "createOutputPoints" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 = { 2, "", "org.geogebra.common.kernel.algos", "AlgoIntersectCurveCurve", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lorg/geogebra/common/kernel/algos/AlgoElement$elementFactory<Lorg/geogebra/common/kernel/geos/GeoElement;>;" };
  return &_OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 *self, OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *outer$) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_set_this$0_(self, outer$);
  NSObject_init(self);
}

OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 *new_OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve *outer$) {
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 *self = [OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 alloc];
  OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_initWithOrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1)
