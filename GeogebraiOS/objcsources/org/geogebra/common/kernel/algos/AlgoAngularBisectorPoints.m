//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/algos/AlgoAngularBisectorPoints.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/LocusEquation.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoAngularBisectorPoints.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/EquationElementInterface.h"
#include "org/geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/util/MyMath.h"

@interface OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints () {
 @public
  OrgGeogebraCommonKernelGeosGeoPoint *A_, *B_, *C_;
  OrgGeogebraCommonKernelGeosGeoLine *bisector_;
  OrgGeogebraCommonKernelGeosGeoLine *g_, *h_;
  OrgGeogebraCommonKernelGeosGeoVector *wv_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints, A_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints, B_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints, C_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints, bisector_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints, g_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints, h_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints, wv_, OrgGeogebraCommonKernelGeosGeoVector *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_compute(OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)A
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)B
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)C {
  OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, cons, label, A, B, C);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_AngularBisector();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_ANGULAR_BISECTOR;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, A_);
  IOSObjectArray_Set(input_, 1, B_);
  IOSObjectArray_Set(input_, 2, C_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:bisector_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoLine *)getLine {
  return bisector_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getA {
  return A_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getB {
  return B_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getC {
  return C_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_compute(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleBisectorOfABC" withNSString:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(A_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(B_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(C_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<OrgGeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                         withOrgGeogebraCommonKernelAlgosEquationScopeInterface:(id<OrgGeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return OrgGeogebraCommonKernelLocusEquation_eqnAngularBisectorPointsWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(B_);
  RELEASE_(C_);
  RELEASE_(bisector_);
  RELEASE_(g_);
  RELEASE_(h_);
  RELEASE_(wv_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "AlgoAngularBisectorPoints", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getLine", NULL, "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getA", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getB", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getC", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lorg.geogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "B_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "C_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "bisector_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "h_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "wv_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints = { 2, "AlgoAngularBisectorPoints", "org.geogebra.common.kernel.algos", NULL, 0x1, 12, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *A, OrgGeogebraCommonKernelGeosGeoPoint *B, OrgGeogebraCommonKernelGeosGeoPoint *C) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_set_A_(self, A);
  OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_set_B_(self, B);
  OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_set_C_(self, C);
  OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_setAndConsume_bisector_(self, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self->bisector_ setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:B];
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_setAndConsume_g_(self, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons));
  OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_setAndConsume_h_(self, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons));
  OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_setAndConsume_wv_(self, new_OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self->wv_ setCoordsWithDouble:0 withDouble:0 withDouble:0];
  OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_compute(self);
  [self->bisector_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints *new_OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *A, OrgGeogebraCommonKernelGeosGeoPoint *B, OrgGeogebraCommonKernelGeosGeoPoint *C) {
  OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints *self = [OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints alloc];
  OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, cons, label, A, B, C);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints_compute(OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints *self) {
  jboolean infiniteB = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->B_)) isInfinite];
  OrgGeogebraCommonKernelGeosGeoVec3D_crossWithOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoVec3D_(self->B_, self->A_, self->g_);
  OrgGeogebraCommonKernelGeosGeoVec3D_crossWithOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoVec3D_(self->B_, self->C_, self->h_);
  jdouble gx = ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_))->y_;
  jdouble gy = -self->g_->x_;
  jdouble lenG = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(gx, gy);
  gx /= lenG;
  gy /= lenG;
  jdouble hx = ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->h_))->y_;
  jdouble hy = -self->h_->x_;
  jdouble lenH = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(hx, hy);
  hx /= lenH;
  hy /= lenH;
  jdouble wx, wy;
  if (infiniteB) {
    wx = gx;
    wy = gy;
    ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->bisector_))->z_ = (self->g_->z_ / lenG + self->h_->z_ / lenH) / 2.0;
    if ([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isContinuous]) {
      if ([self->bisector_ isDefined]) {
        ((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->x_ = self->bisector_->y_;
        self->wv_->y_ = -self->bisector_->x_;
      }
      if (((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->x_ * wx + self->wv_->y_ * wy >= 0) {
        self->wv_->x_ = wx;
        self->wv_->y_ = wy;
      }
      else {
        self->wv_->x_ = -wx;
        self->wv_->y_ = -wy;
        self->bisector_->z_ = -self->bisector_->z_;
      }
    }
    else {
      ((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->x_ = wx;
      self->wv_->y_ = wy;
    }
    self->bisector_->x_ = -((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->y_;
    self->bisector_->y_ = self->wv_->x_;
  }
  else {
    jdouble ip = gx * hx + gy * hy;
    if (ip >= 0.0) {
      wx = gx + hx;
      wy = gy + hy;
    }
    else {
      wx = hy - gy;
      wy = gx - hx;
      if (gx * hy < gy * hx) {
        wx = -wx;
        wy = -wy;
      }
    }
    jdouble length = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(wx, wy);
    wx /= length;
    wy /= length;
    if ([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isContinuous]) {
      if ([((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->bisector_)) isDefined]) {
        ((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->x_ = self->bisector_->y_;
        self->wv_->y_ = -self->bisector_->x_;
      }
      if (((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->x_ * wx + self->wv_->y_ * wy >= 0) {
        self->wv_->x_ = wx;
        self->wv_->y_ = wy;
      }
      else {
        self->wv_->x_ = -wx;
        self->wv_->y_ = -wy;
      }
    }
    else {
      ((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->x_ = wx;
      self->wv_->y_ = wy;
    }
    ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->bisector_))->x_ = -((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->y_;
    self->bisector_->y_ = self->wv_->x_;
    self->bisector_->z_ = -(self->B_->inhomX_ * self->bisector_->x_ + self->B_->inhomY_ * self->bisector_->y_);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoAngularBisectorPoints)
