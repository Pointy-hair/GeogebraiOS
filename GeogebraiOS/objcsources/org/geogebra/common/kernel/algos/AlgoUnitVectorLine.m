//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoUnitVectorLine.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoUnitVector2D.h"
#include "org/geogebra/common/kernel/algos/AlgoUnitVectorLine.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation OrgGeogebraCommonKernelAlgosAlgoUnitVectorLine

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
               withOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g {
  OrgGeogebraCommonKernelAlgosAlgoUnitVectorLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, g);
  return self;
}

- (void)setXY {
  x_ = ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(inputGeo_, [OrgGeogebraCommonKernelGeosGeoLine class]))))->y_;
  y_ = -((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(inputGeo_, [OrgGeogebraCommonKernelGeosGeoLine class]))))->x_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getInputStartPoint {
  return [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(inputGeo_, [OrgGeogebraCommonKernelGeosGeoLine class])))) getStartPoint];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoLineND:", "AlgoUnitVectorLine", NULL, 0x1, NULL, NULL },
    { "setXY", NULL, "V", 0x14, NULL, NULL },
    { "getInputStartPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x14, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoUnitVectorLine = { 2, "AlgoUnitVectorLine", "org.geogebra.common.kernel.algos", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoUnitVectorLine;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoUnitVectorLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonKernelAlgosAlgoUnitVectorLine *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g) {
  OrgGeogebraCommonKernelAlgosAlgoUnitVector2D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoElement class]));
}

OrgGeogebraCommonKernelAlgosAlgoUnitVectorLine *new_OrgGeogebraCommonKernelAlgosAlgoUnitVectorLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoLineND> g) {
  OrgGeogebraCommonKernelAlgosAlgoUnitVectorLine *self = [OrgGeogebraCommonKernelAlgosAlgoUnitVectorLine alloc];
  OrgGeogebraCommonKernelAlgosAlgoUnitVectorLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, g);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoUnitVectorLine)
