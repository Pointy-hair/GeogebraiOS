//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoSlope.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoSlope.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/DrawInformationAlgo.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/main/Localization.h"

@interface OrgGeogebraCommonKernelAlgosAlgoSlope () {
 @public
  OrgGeogebraCommonKernelGeosGeoLine *g_;
  OrgGeogebraCommonKernelGeosGeoNumeric *slope_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoSlope, g_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoSlope, slope_, OrgGeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoSlope_compute(OrgGeogebraCommonKernelAlgosAlgoSlope *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoSlope

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g {
  OrgGeogebraCommonKernelAlgosAlgoSlope_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_(self, cons, label, g);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g {
  OrgGeogebraCommonKernelAlgosAlgoSlope_initWithOrgGeogebraCommonKernelGeosGeoLine_(self, g);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Slope();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SLOPE;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, g_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:slope_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getSlope {
  return slope_;
}

- (OrgGeogebraCommonKernelGeosGeoLine *)getg {
  return g_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoSlope_compute(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"SlopeOfA" withNSString:[((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (id<OrgGeogebraCommonKernelAlgosDrawInformationAlgo>)copy__ {
  return [new_OrgGeogebraCommonKernelAlgosAlgoSlope_initWithOrgGeogebraCommonKernelGeosGeoLine_([((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g_)) copy__]) autorelease];
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(slope_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoLine:", "AlgoSlope", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoLine:", "AlgoSlope", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getSlope", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "getg", NULL, "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.algos.DrawInformationAlgo;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "slope_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoSlope = { 2, "AlgoSlope", "org.geogebra.common.kernel.algos", NULL, 0x1, 10, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoSlope;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoSlope_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelAlgosAlgoSlope *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoLine *g) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoSlope_set_g_(self, g);
  OrgGeogebraCommonKernelAlgosAlgoSlope_setAndConsume_slope_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoSlope_compute(self);
  [self->slope_ setLabelWithNSString:label];
  [self->slope_ setDrawableWithBoolean:YES];
}

OrgGeogebraCommonKernelAlgosAlgoSlope *new_OrgGeogebraCommonKernelAlgosAlgoSlope_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoLine *g) {
  OrgGeogebraCommonKernelAlgosAlgoSlope *self = [OrgGeogebraCommonKernelAlgosAlgoSlope alloc];
  OrgGeogebraCommonKernelAlgosAlgoSlope_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_(self, cons, label, g);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoSlope_initWithOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelAlgosAlgoSlope *self, OrgGeogebraCommonKernelGeosGeoLine *g) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g))->cons_, NO);
  OrgGeogebraCommonKernelAlgosAlgoSlope_set_g_(self, g);
}

OrgGeogebraCommonKernelAlgosAlgoSlope *new_OrgGeogebraCommonKernelAlgosAlgoSlope_initWithOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelGeosGeoLine *g) {
  OrgGeogebraCommonKernelAlgosAlgoSlope *self = [OrgGeogebraCommonKernelAlgosAlgoSlope alloc];
  OrgGeogebraCommonKernelAlgosAlgoSlope_initWithOrgGeogebraCommonKernelGeosGeoLine_(self, g);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoSlope_compute(OrgGeogebraCommonKernelAlgosAlgoSlope *self) {
  if ([((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) isDefined] && !OrgGeogebraCommonKernelKernel_isZeroWithDouble_(self->g_->y_)) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->slope_)) setValueWithDouble:-self->g_->x_ / self->g_->y_];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->slope_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoSlope)
