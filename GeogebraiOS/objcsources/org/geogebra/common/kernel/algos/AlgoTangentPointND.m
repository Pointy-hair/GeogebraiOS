//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoTangentPointND.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/LocusEquation.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoTangentPointND.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/EquationElementInterface.h"
#include "org/geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/Localization.h"

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoTangentPointND_compute(OrgGeogebraCommonKernelAlgosAlgoTangentPointND *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoTangentPointND

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                          withNSStringArray:(IOSObjectArray *)labels
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonKernelAlgosAlgoTangentPointND_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, P, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
              withOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonKernelAlgosAlgoTangentPointND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, P, c);
  return self;
}

- (void)setPolar {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setTangents {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Tangent();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TANGENTS;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(P_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, c_);
  IOSObjectArray *out = [IOSObjectArray arrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  for (jint i = 0; i < 2; i++) {
    IOSObjectArray_Set(out, i, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), i), [OrgGeogebraCommonKernelGeosGeoElement class]));
  }
  [super setOutputWithOrgGeogebraCommonKernelGeosGeoElementArray:out];
  [self setDependencies];
}

- (jboolean)checkUndefined {
  return [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) isDegenerate];
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoTangentPointND_compute(self);
}

- (void)setTangentFromPolarWithInt:(jint)i {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isIntersectionPointIncident {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)updatePolarLine {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateTangents {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"TangentToAThroughB" withNSString:[((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<OrgGeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                         withOrgGeogebraCommonKernelAlgosEquationScopeInterface:(id<OrgGeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return OrgGeogebraCommonKernelLocusEquation_eqnTangentPointWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelAlgosAlgoElement_withOrgGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getTangentPointWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                   withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)line {
  if (geo != c_) return nil;
  if (line == IOSObjectArray_Get(nil_chk(tangents_), 0)) return IOSObjectArray_Get(nil_chk(tangentPoints_), 0);
  else if (line == IOSObjectArray_Get(tangents_, 1)) return IOSObjectArray_Get(nil_chk(tangentPoints_), 1);
  else return nil;
}

- (void)dealloc {
  RELEASE_(P_);
  RELEASE_(c_);
  RELEASE_(tangents_);
  RELEASE_(polar_);
  RELEASE_(algoIntersect_);
  RELEASE_(tangentPoints_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSStringArray:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "AlgoTangentPointND", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoConicND:", "AlgoTangentPointND", NULL, 0x0, NULL, NULL },
    { "setPolar", NULL, "V", 0x404, NULL, NULL },
    { "setTangents", NULL, "V", 0x404, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "checkUndefined", NULL, "Z", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setTangentFromPolarWithInt:", "setTangentFromPolar", "V", 0x404, NULL, NULL },
    { "isIntersectionPointIncident", NULL, "Z", 0x404, NULL, NULL },
    { "updatePolarLine", NULL, "V", 0x404, NULL, NULL },
    { "updateTangents", NULL, "V", 0x404, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lorg.geogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
    { "getTangentPointWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoLine:", "getTangentPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "c_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "tangents_", NULL, 0x4, "[Lorg.geogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "polar_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "algoIntersect_", NULL, 0x4, "Lorg.geogebra.common.kernel.kernelND.AlgoIntersectND;", NULL, NULL,  },
    { "tangentPoints_", NULL, 0x4, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "equalLines_", NULL, 0x4, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoTangentPointND = { 2, "AlgoTangentPointND", "org.geogebra.common.kernel.algos", NULL, 0x401, 17, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoTangentPointND;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoTangentPointND_initWithOrgGeogebraCommonKernelConstruction_withNSStringArray_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelAlgosAlgoTangentPointND *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, OrgGeogebraCommonKernelKernelNDGeoConicND *c) {
  OrgGeogebraCommonKernelAlgosAlgoTangentPointND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(self, cons, P, c);
  OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(labels, [self getOutput]);
}

void OrgGeogebraCommonKernelAlgosAlgoTangentPointND_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelAlgosAlgoTangentPointND *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, OrgGeogebraCommonKernelKernelNDGeoConicND *c) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->equalLines_ = NO;
  OrgGeogebraCommonKernelAlgosAlgoTangentPointND_set_P_(self, P);
  OrgGeogebraCommonKernelAlgosAlgoTangentPointND_set_c_(self, c);
  [self setPolar];
  [self setTangents];
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoTangentPointND_compute(self);
  self->equalLines_ = [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(nil_chk(self->tangents_), 0))) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(self->tangents_, 1), [OrgGeogebraCommonKernelGeosGeoElement class])];
  if (self->equalLines_) {
    [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(self->tangents_, 1))) setUndefined];
    [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(self->tangentPoints_), 1))) setUndefined];
  }
}

void OrgGeogebraCommonKernelAlgosAlgoTangentPointND_compute(OrgGeogebraCommonKernelAlgosAlgoTangentPointND *self) {
  if ([self checkUndefined]) {
    [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(nil_chk(self->tangents_), 0))) setUndefined];
    [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(self->tangents_, 1))) setUndefined];
    return;
  }
  [self updatePolarLine];
  if ([self isIntersectionPointIncident]) {
    [self setTangentFromPolarWithInt:0];
    [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(self->tangentPoints_), 0))) setCoordsFromPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->P_];
    if (self->equalLines_) {
      [((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(nil_chk(self->tangents_), 1))) setUndefined];
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(self->tangentPoints_, 1))) setUndefined];
    }
    else {
      [self setTangentFromPolarWithInt:1];
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(self->tangentPoints_, 1))) setCoordsFromPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->P_];
    }
  }
  else {
    [((OrgGeogebraCommonKernelKernelNDAlgoIntersectND *) nil_chk(self->algoIntersect_)) update];
    [self updateTangents];
    self->equalLines_ = NO;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoTangentPointND)
