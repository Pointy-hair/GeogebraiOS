//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/algos/AlgoUnitOrthoVectorVector.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoUnitOrthoVectorVector.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/util/MyMath.h"

@interface OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector () {
 @public
  OrgGeogebraCommonKernelGeosGeoVector *v_;
  OrgGeogebraCommonKernelGeosGeoVector *n_;
  jdouble length_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector, v_, OrgGeogebraCommonKernelGeosGeoVector *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector, n_, OrgGeogebraCommonKernelGeosGeoVector *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector_compute(OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                   withOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)v {
  OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoVector_(self, cons, label, v);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_UnitOrthogonalVector();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, v_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:n_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoVector *)getVector {
  return n_;
}

- (OrgGeogebraCommonKernelGeosGeoVector *)getv {
  return v_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector_compute(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"UnitVectorPerpendicularToA" withNSString:[((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(v_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(v_);
  RELEASE_(n_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoVector:", "AlgoUnitOrthoVectorVector", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getVector", NULL, "Lorg.geogebra.common.kernel.geos.GeoVector;", 0x1, NULL, NULL },
    { "getv", NULL, "Lorg.geogebra.common.kernel.geos.GeoVector;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "v_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
    { "length_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector = { 2, "AlgoUnitOrthoVectorVector", "org.geogebra.common.kernel.algos", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoVector_(OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoVector *v) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector_set_v_(self, v);
  OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector_setAndConsume_n_(self, new_OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_(cons));
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> possStartPoint = [((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(v)) getStartPoint];
  if (possStartPoint != nil && [possStartPoint isLabelSet]) {
    @try {
      [self->n_ setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:possStartPoint];
    }
    @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    }
  }
  [self setInputOutput];
  self->n_->z_ = 0.0;
  OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector_compute(self);
  [self->n_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector *new_OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoVector_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoVector *v) {
  OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector *self = [OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector alloc];
  OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoVector_(self, cons, label, v);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector_compute(OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector *self) {
  self->length_ = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(self->v_))->x_, self->v_->y_);
  ((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(self->n_))->x_ = -self->v_->y_ / self->length_;
  self->n_->y_ = self->v_->x_ / self->length_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoUnitOrthoVectorVector)
