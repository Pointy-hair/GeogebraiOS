//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/algos/AlgoIntersect.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/System.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoIntersect.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation OrgGeogebraCommonKernelAlgosAlgoIntersect

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelAlgosAlgoIntersect_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (void)avoidDoubleTangentPoint {
  IOSObjectArray *points = [self getIntersectionPoints];
  if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(points), 1))) isLabelSet] && [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, 0))) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(points, 1)]) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, 1))) setUndefined];
  }
}

- (jint)getClosestPointIndexWithDouble:(jdouble)xRW
                            withDouble:(jdouble)yRW {
  IOSObjectArray *P = [self getIntersectionPoints];
  jdouble x, y, lengthSqr, mindist = JavaLangDouble_POSITIVE_INFINITY;
  jint minIndex = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(P))->size_; i++) {
    x = (((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(P, i)))->inhomX_ - xRW);
    y = (((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(P, i)))->inhomY_ - yRW);
    lengthSqr = x * x + y * y;
    if (lengthSqr < mindist) {
      mindist = lengthSqr;
      minIndex = i;
    }
  }
  return minIndex;
}

- (jint)getClosestPointIndexWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)refPoint {
  IOSObjectArray *P = [self getIntersectionPoints];
  jdouble x, y, lengthSqr, mindist = JavaLangDouble_POSITIVE_INFINITY;
  jint minIndex = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(P))->size_; i++) {
    x = (((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(P, i)))->inhomX_ - [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(refPoint)) getInhomX]);
    y = (((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(P, i)))->inhomY_ - [refPoint getInhomY]);
    lengthSqr = x * x + y * y;
    if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(mindist, lengthSqr)) {
      mindist = lengthSqr;
      minIndex = i;
    }
  }
  return minIndex;
}

- (IOSObjectArray *)getIntersectionPoints {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getCopyOfIntersectionPoints {
  IOSObjectArray *orig = [self getIntersectionPoints];
  IOSObjectArray *copy_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(orig))->size_ type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(orig, 0, copy_, 0, copy_->size_);
  return copy_;
}

- (IOSObjectArray *)getLastDefinedIntersectionPoints {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setCoordsWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)destination
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)source {
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(destination, [OrgGeogebraCommonKernelGeosGeoPoint class])))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(source, [OrgGeogebraCommonKernelGeosGeoPoint class])];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "AlgoIntersect", NULL, 0x1, NULL, NULL },
    { "avoidDoubleTangentPoint", NULL, "V", 0x4, NULL, NULL },
    { "getClosestPointIndexWithDouble:withDouble:", "getClosestPointIndex", "I", 0x1, NULL, NULL },
    { "getClosestPointIndexWithOrgGeogebraCommonKernelGeosGeoPoint:", "getClosestPointIndex", "I", 0x0, NULL, NULL },
    { "getIntersectionPoints", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x401, NULL, NULL },
    { "getCopyOfIntersectionPoints", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getLastDefinedIntersectionPoints", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x404, NULL, NULL },
    { "setCoordsWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "setCoords", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoIntersect = { 2, "AlgoIntersect", "org.geogebra.common.kernel.algos", NULL, 0x401, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoIntersect;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoIntersect_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelAlgosAlgoIntersect *self, OrgGeogebraCommonKernelConstruction *c) {
  (void) OrgGeogebraCommonKernelKernelNDAlgoIntersectND_initWithOrgGeogebraCommonKernelConstruction_(self, c);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoIntersect)
