//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/algos/AlgoProductMatrices.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoProductMatrices.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"

@interface OrgGeogebraCommonKernelAlgosAlgoProductMatrices () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *geoList_;
  OrgGeogebraCommonKernelGeosGeoList *result_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoProductMatrices, geoList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAlgosAlgoProductMatrices, result_, OrgGeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAlgosAlgoProductMatrices_compute(OrgGeogebraCommonKernelAlgosAlgoProductMatrices *self);

@implementation OrgGeogebraCommonKernelAlgosAlgoProductMatrices

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList {
  OrgGeogebraCommonKernelAlgosAlgoProductMatrices_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Product();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geoList_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:result_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResult {
  return result_;
}

- (void)compute {
  OrgGeogebraCommonKernelAlgosAlgoProductMatrices_compute(self);
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoProductMatrices", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAlgosAlgoProductMatrices = { 2, "AlgoProductMatrices", "org.geogebra.common.kernel.algos", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAlgosAlgoProductMatrices;
}

@end

void OrgGeogebraCommonKernelAlgosAlgoProductMatrices_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAlgosAlgoProductMatrices *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAlgosAlgoProductMatrices_set_geoList_(self, geoList);
  OrgGeogebraCommonKernelAlgosAlgoProductMatrices_setAndConsume_result_(self, new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelAlgosAlgoProductMatrices_compute(self);
  [self->result_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAlgosAlgoProductMatrices *new_OrgGeogebraCommonKernelAlgosAlgoProductMatrices_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  OrgGeogebraCommonKernelAlgosAlgoProductMatrices *self = [OrgGeogebraCommonKernelAlgosAlgoProductMatrices alloc];
  OrgGeogebraCommonKernelAlgosAlgoProductMatrices_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

void OrgGeogebraCommonKernelAlgosAlgoProductMatrices_compute(OrgGeogebraCommonKernelAlgosAlgoProductMatrices *self) {
  jint size = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) size];
  if (![self->geoList_ isDefined] || size == 0 || ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoList_ getWithInt:0])) isMatrix]) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  OrgGeogebraCommonKernelGeosGeoList *matrix = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([self->geoList_ getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class]);
  if (size == 1) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setWithOrgGeogebraCommonKernelGeosGeoElement:matrix];
    return;
  }
  IOSObjectArray *working = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(matrix)) size], [matrix size] }];
  IOSObjectArray *working2 = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ [matrix size], [matrix size] }];
  for (jint r = 0; r < [matrix size]; r++) {
    for (jint c = 0; c < [matrix size]; c++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(working2, r)), c) = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([matrix getWithInt:r withInt:c])) evaluateDouble];
    }
  }
  for (jint i = 1; i < size; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *p = [self->geoList_ getWithInt:i];
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(p)) isMatrix]) {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    matrix = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoList class]);
    if ([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([matrix getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class])))) size] != [matrix size]) {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    for (jint r = 0; r < [matrix size]; r++) {
      for (jint c = 0; c < [matrix size]; c++) {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(working, r)), c) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(working2, r)), c);
      }
    }
    for (jint r = 0; r < [matrix size]; r++) {
      for (jint c = 0; c < [matrix size]; c++) {
        jdouble count = 0;
        for (jint n = 0; n < [matrix size]; n++) {
          count += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(working, r)), n) * [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([matrix getWithInt:n withInt:c])) evaluateDouble];
        }
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(working2, r)), c) = count;
      }
    }
  }
  OrgGeogebraCommonKernelGeosGeoList *ret = [new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(self->cons_) autorelease];
  for (jint r = 0; r < [matrix size]; r++) {
    OrgGeogebraCommonKernelGeosGeoList *row = [new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(self->cons_) autorelease];
    for (jint c = 0; c < [matrix size]; c++) {
      [row addWithOrgGeogebraCommonKernelGeosGeoElement:[new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self->cons_, IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(working2, r)), c)) autorelease]];
    }
    [ret addWithOrgGeogebraCommonKernelGeosGeoElement:row];
  }
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setWithOrgGeogebraCommonKernelGeosGeoElement:ret];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAlgosAlgoProductMatrices)
