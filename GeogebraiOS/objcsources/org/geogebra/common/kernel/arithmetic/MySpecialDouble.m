//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/arithmetic/MySpecialDouble.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/math/BigDecimal.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MySpecialDouble.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/Unicode.h"

@interface OrgGeogebraCommonKernelArithmeticMySpecialDouble () {
 @public
  NSString *strToString_;
  NSString *originalString_;
  jboolean keepOriginalString_;
  jboolean isLetterConstant_;
  jboolean scientificNotation_;
  jboolean setFromOutside_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticMySpecialDouble, strToString_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticMySpecialDouble, originalString_, NSString *)

static OrgGeogebraCommonKernelArithmeticMySpecialDouble *OrgGeogebraCommonKernelArithmeticMySpecialDouble_eulerConstant_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticMySpecialDouble, eulerConstant_, OrgGeogebraCommonKernelArithmeticMySpecialDouble *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticMySpecialDouble, eulerConstant_, OrgGeogebraCommonKernelArithmeticMySpecialDouble *)

@implementation OrgGeogebraCommonKernelArithmeticMySpecialDouble

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                           withDouble:(jdouble)val
                                         withNSString:(NSString *)str {
  OrgGeogebraCommonKernelArithmeticMySpecialDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_withNSString_(self, kernel, val, str);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticMySpecialDouble:(OrgGeogebraCommonKernelArithmeticMySpecialDouble *)sd {
  OrgGeogebraCommonKernelArithmeticMySpecialDouble_initWithOrgGeogebraCommonKernelArithmeticMySpecialDouble_(self, sd);
  return self;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel1 {
  if ([self isEulerConstant]) return OrgGeogebraCommonKernelArithmeticMySpecialDouble_getEulerConstantWithOrgGeogebraCommonKernelKernel_(kernel1);
  OrgGeogebraCommonKernelArithmeticMySpecialDouble *ret = [new_OrgGeogebraCommonKernelArithmeticMySpecialDouble_initWithOrgGeogebraCommonKernelArithmeticMySpecialDouble_(self) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble_set_kernel_(ret, kernel1);
  return ret;
}

- (void)setKeepOriginalString {
  keepOriginalString_ = YES;
}

+ (OrgGeogebraCommonKernelArithmeticMySpecialDouble *)getEulerConstantWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return OrgGeogebraCommonKernelArithmeticMySpecialDouble_getEulerConstantWithOrgGeogebraCommonKernelKernel_(kernel);
}

- (jboolean)isEulerConstant {
  return [self getDouble] == JavaLangMath_E;
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (setFromOutside_) {
    return [super toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  if (!isLetterConstant_) {
    if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
      return OrgGeogebraCommonKernelStringTemplate_convertScientificNotationGiacWithNSString_(originalString_);
    }
    if (keepOriginalString_ || (![tpl useScientificWithBoolean:((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_))->useSignificantFigures_] && ![((NSString *) nil_chk(strToString_)) contains:@"."]) || [tpl allowMoreDigits]) {
      if (scientificNotation_) {
        return [tpl convertScientificNotationWithNSString:strToString_];
      }
      return strToString_;
    }
    return [super toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *printForm = [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType];
  jchar ch;
  switch ([printForm ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    ch = [((NSString *) nil_chk(strToString_)) charAtWithInt:0];
    switch (ch) {
      case OrgGeogebraCommonUtilUnicode_pi:
      return @"pi";
      case OrgGeogebraCommonUtilUnicode_DEGREE_CHAR:
      return @"pi/180";
      case OrgGeogebraCommonUtilUnicode_eulerChar:
      if ([strToString_ isEqual:OrgGeogebraCommonUtilUnicode_get_EULER_GAMMA_STRING_()]) {
        return @"euler\\_gamma";
      }
      return @"e";
    }
    break;
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    ch = [((NSString *) nil_chk(strToString_)) charAtWithInt:0];
    switch (ch) {
      case OrgGeogebraCommonUtilUnicode_pi:
      return @"\\pi";
      case OrgGeogebraCommonUtilUnicode_DEGREE_CHAR:
      return @"^{\\circ}";
      case OrgGeogebraCommonUtilUnicode_eulerChar:
      if ([strToString_ isEqual:OrgGeogebraCommonUtilUnicode_get_EULER_GAMMA_STRING_()]) {
        return @"\\mathit{e_{\\gamma}}";
      }
      return @"\\textit{e}";
    }
    break;
    default:
    break;
  }
  return strToString_;
}

- (void)setWithDouble:(jdouble)val {
  [super setWithDouble:val];
  setFromOutside_ = YES;
}

- (void)dealloc {
  RELEASE_(strToString_);
  RELEASE_(originalString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:withDouble:withNSString:", "MySpecialDouble", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelArithmeticMySpecialDouble:", "MySpecialDouble", NULL, 0x1, NULL, NULL },
    { "deepCopyWithOrgGeogebraCommonKernelKernel:", "deepCopy", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "setKeepOriginalString", NULL, "V", 0x1, NULL, NULL },
    { "getEulerConstantWithOrgGeogebraCommonKernelKernel:", "getEulerConstant", "Lorg.geogebra.common.kernel.arithmetic.MySpecialDouble;", 0x9, NULL, NULL },
    { "isEulerConstant", NULL, "Z", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setWithDouble:", "set", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "strToString_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "originalString_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "keepOriginalString_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isLetterConstant_", NULL, 0x2, "Z", NULL, NULL,  },
    { "scientificNotation_", NULL, 0x2, "Z", NULL, NULL,  },
    { "setFromOutside_", NULL, 0x2, "Z", NULL, NULL,  },
    { "eulerConstant_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.MySpecialDouble;", &OrgGeogebraCommonKernelArithmeticMySpecialDouble_eulerConstant_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticMySpecialDouble = { 2, "MySpecialDouble", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 8, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticMySpecialDouble;
}

@end

void OrgGeogebraCommonKernelArithmeticMySpecialDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_withNSString_(OrgGeogebraCommonKernelArithmeticMySpecialDouble *self, OrgGeogebraCommonKernelKernel *kernel, jdouble val, NSString *str) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self, kernel, val);
  self->scientificNotation_ = NO;
  OrgGeogebraCommonKernelArithmeticMySpecialDouble_set_originalString_(self, OrgGeogebraCommonUtilStringUtil_cannonicNumberWithNSString_(str));
  OrgGeogebraCommonKernelArithmeticMySpecialDouble_set_strToString_(self, self->originalString_);
  if (self->strToString_ == nil) OrgGeogebraCommonKernelArithmeticMySpecialDouble_set_strToString_(self, @"0");
  jchar firstChar = [((NSString *) nil_chk(self->strToString_)) charAtWithInt:0];
  self->isLetterConstant_ = (OrgGeogebraCommonUtilStringUtil_isLetterWithChar_(firstChar) || firstChar == OrgGeogebraCommonUtilUnicode_DEGREE_CHAR);
  self->scientificNotation_ = ([self->strToString_ indexOfString:@"E"] > 0);
  self->keepOriginalString_ = (!self->isLetterConstant_ && (self->scientificNotation_ || JavaLangDouble_isInfiniteWithDouble_(val)));
  if (self->keepOriginalString_) {
    JavaMathBigDecimal *bd = [new_JavaMathBigDecimal_initWithNSString_(self->strToString_) autorelease];
    jdouble absVal = JavaLangMath_absWithDouble_(val);
    if (absVal >= 10E-3 && absVal < 10E7) {
      bd = [bd stripTrailingZeros];
      OrgGeogebraCommonKernelArithmeticMySpecialDouble_set_strToString_(self, [((JavaMathBigDecimal *) nil_chk(bd)) toPlainString]);
    }
    else {
      OrgGeogebraCommonKernelArithmeticMySpecialDouble_set_strToString_(self, OrgGeogebraCommonKernelArithmeticMyDouble_toStringWithJavaMathBigDecimal_(bd));
      self->scientificNotation_ = ([((NSString *) nil_chk(self->strToString_)) indexOfString:@"E"] > 0);
    }
  }
}

OrgGeogebraCommonKernelArithmeticMySpecialDouble *new_OrgGeogebraCommonKernelArithmeticMySpecialDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_withNSString_(OrgGeogebraCommonKernelKernel *kernel, jdouble val, NSString *str) {
  OrgGeogebraCommonKernelArithmeticMySpecialDouble *self = [OrgGeogebraCommonKernelArithmeticMySpecialDouble alloc];
  OrgGeogebraCommonKernelArithmeticMySpecialDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_withNSString_(self, kernel, val, str);
  return self;
}

void OrgGeogebraCommonKernelArithmeticMySpecialDouble_initWithOrgGeogebraCommonKernelArithmeticMySpecialDouble_(OrgGeogebraCommonKernelArithmeticMySpecialDouble *self, OrgGeogebraCommonKernelArithmeticMySpecialDouble *sd) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelArithmeticMyDouble_(self, sd);
  self->scientificNotation_ = NO;
  OrgGeogebraCommonKernelArithmeticMySpecialDouble_set_originalString_(self, ((OrgGeogebraCommonKernelArithmeticMySpecialDouble *) nil_chk(sd))->originalString_);
  OrgGeogebraCommonKernelArithmeticMySpecialDouble_set_strToString_(self, sd->strToString_);
  self->keepOriginalString_ = sd->keepOriginalString_;
  self->isLetterConstant_ = sd->isLetterConstant_;
  self->scientificNotation_ = sd->scientificNotation_;
  self->setFromOutside_ = sd->setFromOutside_;
}

OrgGeogebraCommonKernelArithmeticMySpecialDouble *new_OrgGeogebraCommonKernelArithmeticMySpecialDouble_initWithOrgGeogebraCommonKernelArithmeticMySpecialDouble_(OrgGeogebraCommonKernelArithmeticMySpecialDouble *sd) {
  OrgGeogebraCommonKernelArithmeticMySpecialDouble *self = [OrgGeogebraCommonKernelArithmeticMySpecialDouble alloc];
  OrgGeogebraCommonKernelArithmeticMySpecialDouble_initWithOrgGeogebraCommonKernelArithmeticMySpecialDouble_(self, sd);
  return self;
}

OrgGeogebraCommonKernelArithmeticMySpecialDouble *OrgGeogebraCommonKernelArithmeticMySpecialDouble_getEulerConstantWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticMySpecialDouble_initialize();
  if (OrgGeogebraCommonKernelArithmeticMySpecialDouble_eulerConstant_ == nil) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticMySpecialDouble_eulerConstant_, nil, new_OrgGeogebraCommonKernelArithmeticMySpecialDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_withNSString_(kernel, JavaLangMath_E, OrgGeogebraCommonUtilUnicode_get_EULER_STRING_()));
  }
  return OrgGeogebraCommonKernelArithmeticMySpecialDouble_eulerConstant_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticMySpecialDouble)
