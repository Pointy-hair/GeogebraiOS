//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/arithmetic/ValidExpression.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Set.h"
#include "java/util/Vector.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/AssignmentType.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/Operation.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgGeogebraCommonKernelArithmeticValidExpression () {
 @public
  JavaUtilVector *labels_;
  jboolean inTree_;
}

- (void)initLabels OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticValidExpression, labels_, JavaUtilVector *)

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticValidExpression_initLabels(OrgGeogebraCommonKernelArithmeticValidExpression *self);

@interface OrgGeogebraCommonKernelArithmeticValidExpression_$1 : NSObject < OrgGeogebraCommonKernelArithmeticInspecting >

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelArithmeticValidExpression_$1)

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticValidExpression_$1_init(OrgGeogebraCommonKernelArithmeticValidExpression_$1 *self);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticValidExpression_$1 *new_OrgGeogebraCommonKernelArithmeticValidExpression_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelArithmeticValidExpression_$1)

@interface OrgGeogebraCommonKernelArithmeticValidExpression_$2 : NSObject < OrgGeogebraCommonKernelArithmeticInspecting > {
 @public
  NSString *val$name_;
}

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v;

- (instancetype)initWithNSString:(NSString *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelArithmeticValidExpression_$2)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticValidExpression_$2, val$name_, NSString *)

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticValidExpression_$2_initWithNSString_(OrgGeogebraCommonKernelArithmeticValidExpression_$2 *self, NSString *capture$0);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticValidExpression_$2 *new_OrgGeogebraCommonKernelArithmeticValidExpression_$2_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelArithmeticValidExpression_$2)

@implementation OrgGeogebraCommonKernelArithmeticValidExpression

- (void)addLabelWithNSString:(NSString *)label {
  OrgGeogebraCommonKernelArithmeticValidExpression_initLabels(self);
  [((JavaUtilVector *) nil_chk(labels_)) addWithId:label];
}

- (void)initLabels {
  OrgGeogebraCommonKernelArithmeticValidExpression_initLabels(self);
}

- (void)addLabelWithJavaUtilVector:(JavaUtilVector *)labellist {
  OrgGeogebraCommonKernelArithmeticValidExpression_initLabels(self);
  [((JavaUtilVector *) nil_chk(labels_)) addAllWithJavaUtilCollection:labellist];
}

- (jint)labelCount {
  if (labels_ == nil) {
    return 0;
  }
  return [((JavaUtilVector *) nil_chk(labels_)) size];
}

- (NSString *)getLabelWithInt:(jint)index {
  if (index < 0 || index >= [self labelCount]) {
    return nil;
  }
  return [((JavaUtilVector *) nil_chk(labels_)) getWithInt:index];
}

- (IOSObjectArray *)getLabels {
  jint size = [self labelCount];
  if (size == 0) {
    return nil;
  }
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:size type:NSString_class_()];
  for (jint i = 0; i < size; i++) {
    (void) IOSObjectArray_Set(ret, i, [((JavaUtilVector *) nil_chk(labels_)) getWithInt:i]);
  }
  return ret;
}

- (NSString *)getLabel {
  return [self getLabelWithInt:0];
}

- (void)setLabelWithNSString:(NSString *)label {
  OrgGeogebraCommonKernelArithmeticValidExpression_initLabels(self);
  [((JavaUtilVector *) nil_chk(labels_)) clear];
  [labels_ addWithId:label];
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)str {
  OrgGeogebraCommonKernelArithmeticValidExpression_initLabels(self);
  [((JavaUtilVector *) nil_chk(labels_)) clear];
  if (str == nil) return;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(str))->size_; i++) {
    [labels_ addWithId:IOSObjectArray_Get(str, i)];
  }
}

- (jboolean)isVariable {
  return NO;
}

- (jboolean)isInTree {
  return inTree_;
}

- (void)setInTreeWithBoolean:(jboolean)flag {
  inTree_ = flag;
}

- (jboolean)isGeoElement {
  return NO;
}

- (jboolean)isTopLevelCommand {
  return NO;
}

- (OrgGeogebraCommonKernelArithmeticCommand *)getTopLevelCommand {
  return nil;
}

- (NSString *)getLabelForAssignment {
  return [self getLabel];
}

- (NSString *)toAssignmentStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                  withOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:(OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum *)assignmentType {
  if (labels_ == nil) {
    return [self toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  switch ([assignmentType ordinal]) {
    case OrgGeogebraCommonKernelArithmeticAssignmentType_DEFAULT:
    (void) [sb appendWithNSString:[self getLabelForAssignment]];
    (void) [sb appendWithNSString:[self getAssignmentOperator]];
    break;
    case OrgGeogebraCommonKernelArithmeticAssignmentType_DELAYED:
    (void) [sb appendWithNSString:[self getLabelForAssignment]];
    (void) [sb appendWithNSString:[self getDelayedAssignmentOperator]];
    break;
    case OrgGeogebraCommonKernelArithmeticAssignmentType_NONE:
    break;
  }
  (void) [sb appendWithNSString:[self toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  return [sb description];
}

- (NSString *)toAssignmentLaTeXStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                       withOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:(OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum *)assignmentType {
  if (labels_ == nil) {
    return [self toLaTeXStringWithBoolean:YES withOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  switch ([assignmentType ordinal]) {
    case OrgGeogebraCommonKernelArithmeticAssignmentType_DEFAULT:
    (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:[self getLabelForAssignment]]];
    (void) [sb appendWithNSString:[self getAssignmentOperatorLaTeX]];
    break;
    case OrgGeogebraCommonKernelArithmeticAssignmentType_DELAYED:
    (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:[self getLabelForAssignment]]];
    (void) [sb appendWithNSString:[self getDelayedAssignmentOperatorLaTeX]];
    break;
    case OrgGeogebraCommonKernelArithmeticAssignmentType_NONE:
    break;
  }
  (void) [sb appendWithNSString:[self toLaTeXStringWithBoolean:YES withOrgGeogebraCommonKernelStringTemplate:tpl]];
  return [sb description];
}

- (NSString *)getAssignmentOperator {
  return @":=";
}

- (NSString *)getDelayedAssignmentOperator {
  return @"::=";
}

- (NSString *)getAssignmentOperatorLaTeX {
  return @" \\, :=  \\, ";
}

- (NSString *)getDelayedAssignmentOperatorLaTeX {
  return @" \\, ::= \\, ";
}

- (void)addCommandsWithJavaUtilSet:(id<JavaUtilSet>)cmds {
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluateWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return self;
}

- (jdouble)evaluateDouble {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [self evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:ev]) return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(ev, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  return JavaLangDouble_NaN;
}

- (OrgGeogebraCommonKernelArithmeticFunction *)evaluateComplex {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [self evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  return (OrgGeogebraCommonKernelArithmeticFunction *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticFunction class]);
}

- (NSString *)description {
  return [self toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)traverseWithOrgGeogebraCommonKernelArithmeticTraversing:(id<OrgGeogebraCommonKernelArithmeticTraversing>)t {
  return [((id<OrgGeogebraCommonKernelArithmeticTraversing>) nil_chk(t)) processWithOrgGeogebraCommonKernelArithmeticExpressionValue:self];
}

- (jboolean)inspectWithOrgGeogebraCommonKernelArithmeticInspecting:(id<OrgGeogebraCommonKernelArithmeticInspecting>)t {
  return [((id<OrgGeogebraCommonKernelArithmeticInspecting>) nil_chk(t)) checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:self];
}

+ (NSString *)debugStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)s {
  return OrgGeogebraCommonKernelArithmeticValidExpression_debugStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_(s);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)unwrap {
  return self;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrap {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasCoords {
  return NO;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                      withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"derivative from ", [self getClass]));
  return nil;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                    withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"integral from ", [self getClass]));
  return nil;
}

- (jboolean)isExpressionNode {
  return NO;
}

- (jboolean)evaluatesToText {
  return NO;
}

- (jboolean)evaluatesToList {
  return NO;
}

- (jboolean)evaluatesToNonComplex2DVector {
  return NO;
}

- (jboolean)evaluatesToVectorNotPoint {
  return NO;
}

- (jboolean)evaluatesTo3DVector {
  return NO;
}

+ (NSString *)printWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)x2
                                                            withBoolean:(jboolean)values
                              withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticValidExpression_printWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(x2, values, tpl);
}

- (jboolean)containsFunctionVariable {
  return [self inspectWithOrgGeogebraCommonKernelArithmeticInspecting:new_OrgGeogebraCommonKernelArithmeticValidExpression_$1_init()];
}

- (jboolean)containsFunctionVariableWithNSString:(NSString *)name {
  return [self inspectWithOrgGeogebraCommonKernelArithmeticInspecting:new_OrgGeogebraCommonKernelArithmeticValidExpression_$2_initWithNSString_(name)];
}

- (jboolean)evaluatesToNumberWithBoolean:(jboolean)def {
  return [self isNumberValue];
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  return self;
}

+ (IOSObjectArray *)__annotations_toString {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addLabelWithNSString:", "addLabel", "V", 0x1, NULL, NULL },
    { "initLabels", NULL, "V", 0x2, NULL, NULL },
    { "addLabelWithJavaUtilVector:", "addLabel", "V", 0x1, NULL, NULL },
    { "labelCount", NULL, "I", 0x1, NULL, NULL },
    { "getLabelWithInt:", "getLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLabels", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLabel", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setLabelWithNSString:", "setLabel", "V", 0x1, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x1, NULL, NULL },
    { "isVariable", NULL, "Z", 0x1, NULL, NULL },
    { "isInTree", NULL, "Z", 0x11, NULL, NULL },
    { "setInTreeWithBoolean:", "setInTree", "V", 0x11, NULL, NULL },
    { "isGeoElement", NULL, "Z", 0x11, NULL, NULL },
    { "isTopLevelCommand", NULL, "Z", 0x1, NULL, NULL },
    { "getTopLevelCommand", NULL, "Lorg.geogebra.common.kernel.arithmetic.Command;", 0x1, NULL, NULL },
    { "getLabelForAssignment", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toAssignmentStringWithOrgGeogebraCommonKernelStringTemplate:withOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:", "toAssignmentString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toAssignmentLaTeXStringWithOrgGeogebraCommonKernelStringTemplate:withOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:", "toAssignmentLaTeXString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getAssignmentOperator", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDelayedAssignmentOperator", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAssignmentOperatorLaTeX", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDelayedAssignmentOperatorLaTeX", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "addCommandsWithJavaUtilSet:", "addCommands", "V", 0x11, NULL, NULL },
    { "evaluateWithOrgGeogebraCommonKernelStringTemplate:", "evaluate", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "evaluateDouble", NULL, "D", 0x1, NULL, NULL },
    { "evaluateComplex", NULL, "Lorg.geogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "traverseWithOrgGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "inspectWithOrgGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x1, NULL, NULL },
    { "debugStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "debugString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "unwrap", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "wrap", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x401, NULL, NULL },
    { "hasCoords", NULL, "Z", 0x1, NULL, NULL },
    { "derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelKernel:", "derivative", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelKernel:", "integral", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "isExpressionNode", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToText", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToList", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToNonComplex2DVector", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToVectorNotPoint", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesTo3DVector", NULL, "Z", 0x1, NULL, NULL },
    { "printWithOrgGeogebraCommonKernelArithmeticExpressionValue:withBoolean:withOrgGeogebraCommonKernelStringTemplate:", "print", "Ljava.lang.String;", 0xc, NULL, NULL },
    { "containsFunctionVariable", NULL, "Z", 0x11, NULL, NULL },
    { "containsFunctionVariableWithNSString:", "containsFunctionVariable", "Z", 0x11, NULL, NULL },
    { "evaluatesToNumberWithBoolean:", "evaluatesToNumber", "Z", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "labels_", NULL, 0x2, "Ljava.util.Vector;", NULL, "Ljava/util/Vector<Ljava/lang/String;>;",  },
    { "inTree_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticValidExpression = { 2, "ValidExpression", "org.geogebra.common.kernel.arithmetic", NULL, 0x401, 48, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticValidExpression;
}

@end

void OrgGeogebraCommonKernelArithmeticValidExpression_initLabels(OrgGeogebraCommonKernelArithmeticValidExpression *self) {
  if (self->labels_ == nil) self->labels_ = new_JavaUtilVector_init();
}

NSString *OrgGeogebraCommonKernelArithmeticValidExpression_debugStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> s) {
  OrgGeogebraCommonKernelArithmeticValidExpression_initialize();
  if (s == nil) return @"<null>";
  if ([s isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) return JreStrcat("$$C@C$C", @"ExNode(", OrgGeogebraCommonKernelArithmeticValidExpression_debugStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(s, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getLeft]), ',', [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(s, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getOperation], ',', OrgGeogebraCommonKernelArithmeticValidExpression_debugStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(s, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getRight]), ')');
  if ([s isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]]) return JreStrcat("$$$$C", @"Eq(", OrgGeogebraCommonKernelArithmeticValidExpression_debugStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(s, [OrgGeogebraCommonKernelArithmeticEquation class])))) getLHS]), @",=,", OrgGeogebraCommonKernelArithmeticValidExpression_debugStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(s, [OrgGeogebraCommonKernelArithmeticEquation class])))) getRHS]), ')');
  if ([s isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]]) {
    JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(@"MyList(");
    for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(s, [OrgGeogebraCommonKernelArithmeticMyList class])))) size]; i++) {
      if (i > 0) (void) [sb appendWithNSString:@","];
      (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticValidExpression_debugStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(s, [OrgGeogebraCommonKernelArithmeticMyList class])))) getListElementWithInt:i])];
    }
    (void) [sb appendWithChar:')'];
    return [sb description];
  }
  if ([s isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
    JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(@"Cmd:");
    (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(((OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(s, [OrgGeogebraCommonKernelArithmeticCommand class])))) getName]];
    (void) [sb appendWithNSString:@"("];
    for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(((OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(s, [OrgGeogebraCommonKernelArithmeticCommand class])))) getArgumentNumber]; i++) {
      if (i > 0) (void) [sb appendWithNSString:@","];
      (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticValidExpression_debugStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(((OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(s, [OrgGeogebraCommonKernelArithmeticCommand class])))) getArgumentWithInt:i])) unwrap])];
    }
    (void) [sb appendWithChar:')'];
    return [sb description];
  }
  return JreStrcat("$C$C", [((NSString *) nil_chk([((NSString *) nil_chk([[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(s)) getClass] getName])) replaceAll:@"geogebra.common.kernel.arithmetic." withReplacement:@""])) replaceAll:@"geogebra.common.kernel.geos.Geo" withReplacement:@"G"], '(', [s toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()], ')');
}

NSString *OrgGeogebraCommonKernelArithmeticValidExpression_printWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> x2, jboolean values, OrgGeogebraCommonKernelStringTemplate *tpl) {
  OrgGeogebraCommonKernelArithmeticValidExpression_initialize();
  if (values) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x2)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x2)) isGeoElement] ? [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(x2, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] : [x2 toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

void OrgGeogebraCommonKernelArithmeticValidExpression_init(OrgGeogebraCommonKernelArithmeticValidExpression *self) {
  (void) NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticValidExpression)

@implementation OrgGeogebraCommonKernelArithmeticValidExpression_$1

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v {
  return [v isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]];
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticValidExpression_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "check", "Z", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelArithmeticValidExpression", "containsFunctionVariable" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticValidExpression_$1 = { 2, "", "org.geogebra.common.kernel.arithmetic", "ValidExpression", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonKernelArithmeticValidExpression_$1;
}

@end

void OrgGeogebraCommonKernelArithmeticValidExpression_$1_init(OrgGeogebraCommonKernelArithmeticValidExpression_$1 *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticValidExpression_$1 *new_OrgGeogebraCommonKernelArithmeticValidExpression_$1_init() {
  OrgGeogebraCommonKernelArithmeticValidExpression_$1 *self = [OrgGeogebraCommonKernelArithmeticValidExpression_$1 alloc];
  OrgGeogebraCommonKernelArithmeticValidExpression_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticValidExpression_$1)

@implementation OrgGeogebraCommonKernelArithmeticValidExpression_$2

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v {
  return [v isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && (val$name_ == nil || [val$name_ isEqual:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionVariable *) check_class_cast(v, [OrgGeogebraCommonKernelArithmeticFunctionVariable class])))) getSetVarString]]);
}

- (instancetype)initWithNSString:(NSString *)capture$0 {
  OrgGeogebraCommonKernelArithmeticValidExpression_$2_initWithNSString_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "check", "Z", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$name_", NULL, 0x1012, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelArithmeticValidExpression", "containsFunctionVariableWithNSString:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticValidExpression_$2 = { 2, "", "org.geogebra.common.kernel.arithmetic", "ValidExpression", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonKernelArithmeticValidExpression_$2;
}

@end

void OrgGeogebraCommonKernelArithmeticValidExpression_$2_initWithNSString_(OrgGeogebraCommonKernelArithmeticValidExpression_$2 *self, NSString *capture$0) {
  self->val$name_ = capture$0;
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticValidExpression_$2 *new_OrgGeogebraCommonKernelArithmeticValidExpression_$2_initWithNSString_(NSString *capture$0) {
  OrgGeogebraCommonKernelArithmeticValidExpression_$2 *self = [OrgGeogebraCommonKernelArithmeticValidExpression_$2 alloc];
  OrgGeogebraCommonKernelArithmeticValidExpression_$2_initWithNSString_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticValidExpression_$2)
