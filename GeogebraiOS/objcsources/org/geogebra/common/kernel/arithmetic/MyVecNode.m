//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/arithmetic/MyVecNode.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyParseError.h"

@interface OrgGeogebraCommonKernelArithmeticMyVecNode () {
 @public
  jint mode_;
  OrgGeogebraCommonKernelKernel *kernel_;
  jboolean isCASVector__;
}

- (void)setCoordsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)x
                 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)y;

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                    withBoolean:(jboolean)values;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticMyVecNode, kernel_, OrgGeogebraCommonKernelKernel *)

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticMyVecNode_setCoordsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticMyVecNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> x, id<OrgGeogebraCommonKernelArithmeticExpressionValue> y);

__attribute__((unused)) static IOSDoubleArray *OrgGeogebraCommonKernelArithmeticMyVecNode_getCoords(OrgGeogebraCommonKernelArithmeticMyVecNode *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelArithmeticMyVecNode_toStringWithOrgGeogebraCommonKernelStringTemplate_withBoolean_(OrgGeogebraCommonKernelArithmeticMyVecNode *self, OrgGeogebraCommonKernelStringTemplate *tpl, jboolean values);

@implementation OrgGeogebraCommonKernelArithmeticMyVecNode

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelArithmeticMyVecNode_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)x
 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)y {
  OrgGeogebraCommonKernelArithmeticMyVecNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, kernel, x, y);
  return self;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel1 {
  OrgGeogebraCommonKernelArithmeticMyVecNode *ret = new_OrgGeogebraCommonKernelArithmeticMyVecNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel1, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x_)) deepCopyWithOrgGeogebraCommonKernelKernel:kernel1], [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(y_)) deepCopyWithOrgGeogebraCommonKernelKernel:kernel1]);
  ret->mode_ = mode_;
  if ([self isCASVector]) {
    [ret setCASVector];
  }
  return ret;
}

- (void)resolveVariables {
  [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x_)) resolveVariables];
  [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(y_)) resolveVariables];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getX {
  return x_;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getY {
  return y_;
}

- (void)setPolarCoordsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)r
                      withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)phi {
  OrgGeogebraCommonKernelArithmeticMyVecNode_setCoordsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, r, phi);
  mode_ = OrgGeogebraCommonKernelKernel_COORD_POLAR;
}

- (jboolean)hasPolarCoords {
  return mode_ == OrgGeogebraCommonKernelKernel_COORD_POLAR;
}

- (void)setCoordsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)x
                 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)y {
  OrgGeogebraCommonKernelArithmeticMyVecNode_setCoordsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, x, y);
}

- (IOSDoubleArray *)getCoords {
  return OrgGeogebraCommonKernelArithmeticMyVecNode_getCoords(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticMyVecNode_toStringWithOrgGeogebraCommonKernelStringTemplate_withBoolean_(self, tpl, NO);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                    withBoolean:(jboolean)values {
  return OrgGeogebraCommonKernelArithmeticMyVecNode_toStringWithOrgGeogebraCommonKernelStringTemplate_withBoolean_(self, tpl, values);
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticMyVecNode_toStringWithOrgGeogebraCommonKernelStringTemplate_withBoolean_(self, tpl, YES);
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticMyVecNode_toStringWithOrgGeogebraCommonKernelStringTemplate_withBoolean_(self, tpl, !symbolic);
}

- (OrgGeogebraCommonKernelGeosGeoVec2D *)getVector {
  OrgGeogebraCommonKernelGeosGeoVec2D *ret = new_OrgGeogebraCommonKernelGeosGeoVec2D_initWithOrgGeogebraCommonKernelKernel_withDoubleArray_(kernel_, OrgGeogebraCommonKernelArithmeticMyVecNode_getCoords(self));
  [ret setModeWithInt:mode_];
  return ret;
}

- (jboolean)isConstant {
  return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x_)) isConstant] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(y_)) isConstant];
}

- (jboolean)isLeaf {
  return YES;
}

- (jint)getMode {
  return mode_;
}

- (JavaUtilHashSet *)getVariables {
  JavaUtilHashSet *temp, *varset = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x_)) getVariables];
  if (varset == nil) {
    varset = new_JavaUtilHashSet_init();
  }
  temp = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(y_)) getVariables];
  if (temp != nil) [((JavaUtilHashSet *) nil_chk(varset)) addAllWithJavaUtilCollection:temp];
  return varset;
}

- (void)setModeWithInt:(jint)mode {
  self->mode_ = mode;
}

- (jboolean)evaluatesToNonComplex2DVector {
  return self->mode_ != OrgGeogebraCommonKernelKernel_COORD_COMPLEX;
}

- (jboolean)evaluatesToVectorNotPoint {
  return isCASVector__;
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

- (NSString *)toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (OrgGeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)traverseWithOrgGeogebraCommonKernelArithmeticTraversing:(id<OrgGeogebraCommonKernelArithmeticTraversing>)t {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> v = [((id<OrgGeogebraCommonKernelArithmeticTraversing>) nil_chk(t)) processWithOrgGeogebraCommonKernelArithmeticExpressionValue:self];
  if (v != self) return v;
  x_ = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x_)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:t];
  y_ = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(y_)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:t];
  return self;
}

- (jboolean)inspectWithOrgGeogebraCommonKernelArithmeticInspecting:(id<OrgGeogebraCommonKernelArithmeticInspecting>)t {
  return [((id<OrgGeogebraCommonKernelArithmeticInspecting>) nil_chk(t)) checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:self] || [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x_)) inspectWithOrgGeogebraCommonKernelArithmeticInspecting:t] || [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(y_)) inspectWithOrgGeogebraCommonKernelArithmeticInspecting:t];
}

- (jboolean)hasCoords {
  return YES;
}

- (void)setCASVector {
  isCASVector__ = YES;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self);
}

- (jboolean)isCASVector {
  return isCASVector__;
}

- (jint)getDimension {
  return 2;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "MyVecNode", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "MyVecNode", NULL, 0x1, NULL, NULL },
    { "deepCopyWithOrgGeogebraCommonKernelKernel:", "deepCopy", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "getX", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getY", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "setPolarCoordsWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "setPolarCoords", "V", 0x1, NULL, NULL },
    { "hasPolarCoords", NULL, "Z", 0x1, NULL, NULL },
    { "setCoordsWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "setCoords", "V", 0x2, NULL, NULL },
    { "getCoords", NULL, "[D", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:withBoolean:", "toString", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getVector", NULL, "Lorg.geogebra.common.kernel.geos.GeoVec2D;", 0x1, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "getMode", NULL, "I", 0x1, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "setModeWithInt:", "setMode", "V", 0x1, NULL, NULL },
    { "evaluatesToNonComplex2DVector", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToVectorNotPoint", NULL, "Z", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lorg.geogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "traverseWithOrgGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "inspectWithOrgGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x1, NULL, NULL },
    { "hasCoords", NULL, "Z", 0x1, NULL, NULL },
    { "setCASVector", NULL, "V", 0x1, NULL, NULL },
    { "wrap", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "isCASVector", NULL, "Z", 0x1, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "y_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "mode_", NULL, 0x2, "I", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "isCASVector__", "isCASVector", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticMyVecNode = { 2, "MyVecNode", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 33, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticMyVecNode;
}

@end

void OrgGeogebraCommonKernelArithmeticMyVecNode_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticMyVecNode *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->mode_ = OrgGeogebraCommonKernelKernel_COORD_CARTESIAN;
  self->isCASVector__ = NO;
  self->kernel_ = kernel;
}

OrgGeogebraCommonKernelArithmeticMyVecNode *new_OrgGeogebraCommonKernelArithmeticMyVecNode_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticMyVecNode *self = [OrgGeogebraCommonKernelArithmeticMyVecNode alloc];
  OrgGeogebraCommonKernelArithmeticMyVecNode_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void OrgGeogebraCommonKernelArithmeticMyVecNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticMyVecNode *self, OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> x, id<OrgGeogebraCommonKernelArithmeticExpressionValue> y) {
  (void) OrgGeogebraCommonKernelArithmeticMyVecNode_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  OrgGeogebraCommonKernelArithmeticMyVecNode_setCoordsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, x, y);
}

OrgGeogebraCommonKernelArithmeticMyVecNode *new_OrgGeogebraCommonKernelArithmeticMyVecNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> x, id<OrgGeogebraCommonKernelArithmeticExpressionValue> y) {
  OrgGeogebraCommonKernelArithmeticMyVecNode *self = [OrgGeogebraCommonKernelArithmeticMyVecNode alloc];
  OrgGeogebraCommonKernelArithmeticMyVecNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, kernel, x, y);
  return self;
}

void OrgGeogebraCommonKernelArithmeticMyVecNode_setCoordsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticMyVecNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> x, id<OrgGeogebraCommonKernelArithmeticExpressionValue> y) {
  self->x_ = x;
  self->y_ = y;
}

IOSDoubleArray *OrgGeogebraCommonKernelArithmeticMyVecNode_getCoords(OrgGeogebraCommonKernelArithmeticMyVecNode *self) {
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_();
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> evx = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->x_)) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl];
  if (!([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:evx])) {
    IOSObjectArray *str = [IOSObjectArray newArrayWithObjects:(id[]){ @"NumberExpected", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(evx)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl] } count:2 type:NSString_class_()];
    @throw new_OrgGeogebraCommonMainMyParseError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getLocalization], str);
  }
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> evy = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->y_)) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl];
  if (!([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:evy])) {
    IOSObjectArray *str = [IOSObjectArray newArrayWithObjects:(id[]){ @"NumberExpected", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(evy)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl] } count:2 type:NSString_class_()];
    @throw new_OrgGeogebraCommonMainMyParseError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getLocalization], str);
  }
  if (self->mode_ == OrgGeogebraCommonKernelKernel_COORD_POLAR) {
    jdouble r = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(evx, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    jdouble phi = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(evy, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    IOSDoubleArray *ret = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ r * JavaLangMath_cosWithDouble_(phi), r * JavaLangMath_sinWithDouble_(phi) } count:2];
    return ret;
  }
  IOSDoubleArray *ret = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(evx, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble], [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(evy, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble] } count:2];
  return ret;
}

NSString *OrgGeogebraCommonKernelArithmeticMyVecNode_toStringWithOrgGeogebraCommonKernelStringTemplate_withBoolean_(OrgGeogebraCommonKernelArithmeticMyVecNode *self, OrgGeogebraCommonKernelStringTemplate *tpl, jboolean values) {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  switch ([[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    if (self->mode_ == OrgGeogebraCommonKernelKernel_COORD_POLAR) {
      (void) [sb appendWithNSString:@"point(("];
      (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticValidExpression_printWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self->x_, values, tpl)];
      (void) [sb appendWithNSString:@")*cos("];
      (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticValidExpression_printWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self->y_, values, tpl)];
      (void) [sb appendWithNSString:@"),("];
      (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticValidExpression_printWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self->x_, values, tpl)];
      (void) [sb appendWithNSString:@")*sin("];
      (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticValidExpression_printWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self->y_, values, tpl)];
      (void) [sb appendWithNSString:@"))"];
    }
    else {
      (void) [sb appendWithNSString:[self isCASVector] ? @"ggbvect[" : @"point("];
      (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticValidExpression_printWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self->x_, values, tpl)];
      (void) [sb appendWithChar:','];
      (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticValidExpression_printWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self->y_, values, tpl)];
      (void) [sb appendWithNSString:[self isCASVector] ? @"]" : @")"];
    }
    break;
    default:
    if (self->isCASVector__ && [((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([tpl getStringType])) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
      (void) [sb appendWithNSString:@" \\binom{"];
      (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticValidExpression_printWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self->x_, values, tpl)];
      (void) [sb appendWithNSString:@"}{"];
      (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticValidExpression_printWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self->y_, values, tpl)];
      (void) [sb appendWithNSString:@"}"];
    }
    else {
      (void) [sb appendWithNSString:[tpl leftBracket]];
      (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticValidExpression_printWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self->x_, values, tpl)];
      if (self->mode_ == OrgGeogebraCommonKernelKernel_COORD_CARTESIAN) {
        (void) [sb appendWithNSString:@", "];
      }
      else {
        (void) [sb appendWithNSString:@"; "];
      }
      (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticValidExpression_printWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self->y_, values, tpl)];
      (void) [sb appendWithNSString:[tpl rightBracket]];
    }
    break;
  }
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticMyVecNode)
