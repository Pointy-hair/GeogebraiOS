//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/arithmetic/ExpressionNodeEvaluator.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/GeoGebraCasInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/BooleanValue.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/Evaluatable.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeEvaluator.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/arithmetic/ListValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyBoolean.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "org/geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/TextValue.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/arithmetic/VectorNDValue.h"
#include "org/geogebra/common/kernel/arithmetic/VectorValue.h"
#include "org/geogebra/common/kernel/arithmetic3D/Vector3DValue.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionable.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/kernelND/Geo3DVec.h"
#include "org/geogebra/common/kernel/kernelND/GeoVecInterface.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator () {
 @public
  OrgGeogebraCommonMainLocalization *l10n_;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)handleSpecialWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt
                                                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                                                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right
                                                                                 withOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation
                                                                                withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator, l10n_, OrgGeogebraCommonMainLocalization *)

static OrgGeogebraCommonKernelStringTemplate *OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator, errorTemplate_, OrgGeogebraCommonKernelStringTemplate *)

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_multiply2DWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_withOrgGeogebraCommonKernelArithmeticVectorValue_(OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator *self, OrgGeogebraCommonKernelArithmeticMyList *myList, jint rows, jint cols, id<OrgGeogebraCommonKernelArithmeticVectorValue> rt);

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_multiply2DWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_withOrgGeogebraCommonKernelArithmeticVectorNDValue_withOrgGeogebraCommonKernelGeosGeoVec2D_(OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator *self, OrgGeogebraCommonKernelArithmeticMyList *myList, jint rows, jint cols, id<OrgGeogebraCommonKernelArithmeticVectorNDValue> rt, OrgGeogebraCommonKernelGeosGeoVec2D *myVec);

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_handleSpecialWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> lt, id<OrgGeogebraCommonKernelArithmeticExpressionValue> rt, id<OrgGeogebraCommonKernelArithmeticExpressionValue> left, id<OrgGeogebraCommonKernelArithmeticExpressionValue> right, OrgGeogebraCommonPluginOperationEnum *operation, OrgGeogebraCommonKernelStringTemplate *tpl);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator)

@implementation OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator

- (instancetype)initWithOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)l10n
                        withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_initWithOrgGeogebraCommonMainLocalization_withOrgGeogebraCommonKernelKernel_(self, l10n, kernel);
  return self;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluateWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)expressionNode
                                                                          withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  jboolean leaf = ((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expressionNode))->leaf_;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [expressionNode getLeft];
  if (leaf) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [expressionNode getRight];
  OrgGeogebraCommonPluginOperationEnum *operation = [expressionNode getOperation];
  jboolean holdsLaTeXtext = expressionNode->holdsLaTeXtext_;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> lt, rt;
  lt = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl];
  if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]]) {
    [expressionNode setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:lt];
  }
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(operation)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION()]) {
    return lt;
  }
  rt = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> special = OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_handleSpecialWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelStringTemplate_(self, lt, rt, left, right, operation, tpl);
  if (special != nil) return special;
  return [self handleOpWithOrgGeogebraCommonPluginOperationEnum:operation withOrgGeogebraCommonKernelArithmeticExpressionValue:lt withOrgGeogebraCommonKernelArithmeticExpressionValue:rt withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:holdsLaTeXtext];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)handleOpWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op
                                                    withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                    withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt
                                                    withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                                                    withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right
                                                               withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                                                             withBoolean:(jboolean)holdsLaTeX {
  return [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(op)) handleWithOrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator:self withOrgGeogebraCommonKernelArithmeticExpressionValue:lt withOrgGeogebraCommonKernelArithmeticExpressionValue:rt withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:holdsLaTeX];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)multiplyWithOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)myList
                                                         withOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>)rt {
  if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
    return OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_multiply2DWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_withOrgGeogebraCommonKernelArithmeticVectorValue_(self, myList, [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(myList)) getMatrixRows], [myList getMatrixCols], (id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue)));
  }
  return nil;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)multiply2DWithOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)myList
                                                                                                      withInt:(jint)rows
                                                                                                      withInt:(jint)cols
                                                             withOrgGeogebraCommonKernelArithmeticVectorValue:(id<OrgGeogebraCommonKernelArithmeticVectorValue>)rt {
  return OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_multiply2DWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_withOrgGeogebraCommonKernelArithmeticVectorValue_(self, myList, rows, cols, rt);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)multiply2DWithOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)myList
                                                                                                      withInt:(jint)rows
                                                                                                      withInt:(jint)cols
                                                           withOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>)rt
                                                                      withOrgGeogebraCommonKernelGeosGeoVec2D:(OrgGeogebraCommonKernelGeosGeoVec2D *)myVec {
  return OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_multiply2DWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_withOrgGeogebraCommonKernelArithmeticVectorNDValue_withOrgGeogebraCommonKernelGeosGeoVec2D_(self, myList, rows, cols, rt, myVec);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)handleSpecialWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt
                                                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                                                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right
                                                                                 withOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation
                                                                                withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_handleSpecialWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelStringTemplate_(self, lt, rt, left, right, operation, tpl);
}

+ (OrgGeogebraCommonKernelArithmeticMyBoolean *)evalEqualsWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                       withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                       withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt {
  return OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_evalEqualsWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, lt, rt);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)handleXcoordWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)arg
                                                                                withOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op {
  if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:arg]) {
    return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(arg, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector])) getX]);
  }
  else if ([OrgGeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:arg]) {
    return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, IOSDoubleArray_Get(nil_chk([((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(arg, @protocol(OrgGeogebraCommonKernelArithmetic3DVector3DValue))))) getPointAsDouble]), 0));
  }
  else if ([arg isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]]) {
    return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(arg, [OrgGeogebraCommonKernelGeosGeoLine class]))))->x_);
  }
  else return [self polynomialOrDieWithOrgGeogebraCommonKernelArithmeticExpressionValue:arg withOrgGeogebraCommonPluginOperationEnum:op withNSString:op == OrgGeogebraCommonPluginOperationEnum_get_XCOORD() ? @"x(" : @"real("];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)handleYcoordWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)arg
                                                                                withOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op {
  if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:arg]) {
    return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(arg, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector])) getY]);
  }
  else if ([OrgGeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:arg]) {
    return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, IOSDoubleArray_Get(nil_chk([((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(arg, @protocol(OrgGeogebraCommonKernelArithmetic3DVector3DValue))))) getPointAsDouble]), 1));
  }
  else if ([arg isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]]) {
    return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(arg, [OrgGeogebraCommonKernelGeosGeoLine class]))))->y_);
  }
  else return [self polynomialOrDieWithOrgGeogebraCommonKernelArithmeticExpressionValue:arg withOrgGeogebraCommonPluginOperationEnum:op withNSString:op == OrgGeogebraCommonPluginOperationEnum_get_YCOORD() ? @"y(" : @"imaginary("];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)handleMultWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                  withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt
                                                                             withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                                                                           withBoolean:(jboolean)holdsLaTeXtext {
  OrgGeogebraCommonKernelArithmeticMyDouble *num;
  OrgGeogebraCommonKernelArithmeticMyStringBuffer *msb;
  if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:lt]) {
    if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt]) {
      num = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getNumber];
      OrgGeogebraCommonKernelArithmeticMyDouble_multWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticMyDouble_(num, (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue)), num);
      return num;
    }
    else if ([OrgGeogebraCommonKernelArithmeticVectorNDValue_class_() isInstance:rt]) {
      return [self multiplyWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue)) withOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorNDValue))];
    }
  }
  if ([OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:lt]) {
    msb = [((id<OrgGeogebraCommonKernelArithmeticTextValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticTextValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticTextValue))))) getText];
    if (holdsLaTeXtext) {
      [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) toLaTeXStringWithBoolean:NO withOrgGeogebraCommonKernelStringTemplate:tpl]];
    }
    else {
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) isGeoElement]) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(rt, [OrgGeogebraCommonKernelGeosGeoElement class]);
        [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) appendWithNSString:[geo toDefinedValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) appendWithNSString:[rt toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
    }
    return msb;
  }
  else if ([OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:rt]) {
    msb = [((id<OrgGeogebraCommonKernelArithmeticTextValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticTextValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticTextValue))))) getText];
    if (holdsLaTeXtext) {
      [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) insertWithInt:0 withNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) toLaTeXStringWithBoolean:NO withOrgGeogebraCommonKernelStringTemplate:tpl]];
    }
    else {
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) isGeoElement]) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(lt, [OrgGeogebraCommonKernelGeosGeoElement class]);
        [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) insertWithInt:0 withNSString:[geo toDefinedValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) insertWithInt:0 withNSString:[lt toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
    }
    return msb;
  }
  else if ([OrgGeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt]) {
    num = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getNumber];
    OrgGeogebraCommonKernelArithmeticMyDouble_multWithOrgGeogebraCommonKernelArithmeticMyDouble_withDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_(num, [((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticBooleanValue))))) getDouble], num);
    return num;
  }
  else if ([OrgGeogebraCommonKernelArithmeticVectorNDValue_class_() isInstance:lt]) {
    if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt]) {
      return [self multiplyWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue)) withOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorNDValue))];
    }
    else if ([OrgGeogebraCommonKernelArithmeticVectorNDValue_class_() isInstance:rt]) {
      if ([((id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorNDValue))))) getMode] == OrgGeogebraCommonKernelKernel_COORD_COMPLEX || [((id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorNDValue))))) getMode] == OrgGeogebraCommonKernelKernel_COORD_COMPLEX) {
        return [self complexMultWithOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorNDValue)) withOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorNDValue)) withOrgGeogebraCommonKernelKernel:kernel_];
      }
      return [self innerProductWithOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorNDValue)) withOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorNDValue)) withOrgGeogebraCommonKernelKernel:kernel_];
    }
    return [self illegalBinaryWithOrgGeogebraCommonKernelArithmeticExpressionValue:lt withOrgGeogebraCommonKernelArithmeticExpressionValue:rt withNSString:@"IllegalMultiplication" withNSString:@"*"];
  }
  else if ([OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:lt]) {
    msb = [((id<OrgGeogebraCommonKernelArithmeticTextValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticTextValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticTextValue))))) getText];
    if (holdsLaTeXtext) {
      [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) toLaTeXStringWithBoolean:NO withOrgGeogebraCommonKernelStringTemplate:tpl]];
    }
    else {
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) isGeoElement]) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(rt, [OrgGeogebraCommonKernelGeosGeoElement class]);
        [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) appendWithNSString:[geo toDefinedValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) appendWithNSString:[rt toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
    }
    return msb;
  }
  else if ([OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:rt]) {
    msb = [((id<OrgGeogebraCommonKernelArithmeticTextValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticTextValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticTextValue))))) getText];
    if (holdsLaTeXtext) {
      [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) insertWithInt:0 withNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) toLaTeXStringWithBoolean:NO withOrgGeogebraCommonKernelStringTemplate:tpl]];
    }
    else {
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) isGeoElement]) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(lt, [OrgGeogebraCommonKernelGeosGeoElement class]);
        [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) insertWithInt:0 withNSString:[geo toDefinedValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) insertWithInt:0 withNSString:[lt toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
    }
    return msb;
  }
  return [self illegalBinaryWithOrgGeogebraCommonKernelArithmeticExpressionValue:lt withOrgGeogebraCommonKernelArithmeticExpressionValue:rt withNSString:@"IllegalMultiplication" withNSString:@"*"];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)multiplyWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)en
                                                              withOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>)ev {
  OrgGeogebraCommonKernelGeosGeoVec2D *vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(ev, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
  OrgGeogebraCommonKernelGeosGeoVec2D_multWithOrgGeogebraCommonKernelGeosGeoVec2D_withDouble_withOrgGeogebraCommonKernelGeosGeoVec2D_(vec, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(en)) getDouble], vec);
  return vec;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)complexMultWithOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>)ev1
                                                                   withOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>)ev2
                                                                                    withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelGeosGeoVec2D *vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(ev1, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
  OrgGeogebraCommonKernelGeosGeoVec2D_complexMultiplyWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_(vec, [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(ev2, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector], vec);
  return vec;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)innerProductWithOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>)ev1
                                                                    withOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>)ev2
                                                                                     withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelArithmeticMyDouble *num = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_(kernel);
  OrgGeogebraCommonKernelGeosGeoVec2D_innerWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelArithmeticMyDouble_([((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(ev1, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector], [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(ev2, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector], num);
  return num;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)handlePlusWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                  withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt
                                                                             withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                                                                           withBoolean:(jboolean)holdsLaTeXtext {
  IOSObjectArray *str;
  OrgGeogebraCommonKernelArithmeticMyDouble *num;
  OrgGeogebraCommonKernelGeosGeoVec2D *vec;
  OrgGeogebraCommonKernelArithmeticMyStringBuffer *msb;
  if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt]) {
    num = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getNumber];
    OrgGeogebraCommonKernelArithmeticMyDouble_addWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticMyDouble_(num, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getNumber], num);
    return num;
  }
  else if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
    vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
    OrgGeogebraCommonKernelGeosGeoVec2D_addWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_(vec, [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector], vec);
    return vec;
  }
  else if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt]) {
    vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
    OrgGeogebraCommonKernelGeosGeoVec2D_addWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoVec2D_(vec, ((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))), vec);
    return vec;
  }
  else if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
    vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
    OrgGeogebraCommonKernelGeosGeoVec2D_addWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoVec2D_(vec, ((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))), vec);
    return vec;
  }
  else if ([OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
    OrgGeogebraCommonKernelArithmeticMyList *list = [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList];
    if ([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list)) size] > 0) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [list getListElementWithInt:0];
      if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:ev]) {
        vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
        OrgGeogebraCommonKernelGeosGeoVec2D_addWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelArithmeticListValue_withOrgGeogebraCommonKernelGeosGeoVec2D_(vec, ((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticListValue))), vec);
        return vec;
      }
    }
    OrgGeogebraCommonKernelArithmeticMyList *myList = [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList];
    [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(myList)) applyRightWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_PLUS() withOrgGeogebraCommonKernelArithmeticExpressionValue:rt withOrgGeogebraCommonKernelStringTemplate:tpl];
    return myList;
  }
  else if ([OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:rt] && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt]) {
    OrgGeogebraCommonKernelArithmeticMyList *list = [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList];
    if ([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list)) size] > 0) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [list getListElementWithInt:0];
      if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:ev]) {
        vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
        OrgGeogebraCommonKernelGeosGeoVec2D_addWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelArithmeticListValue_withOrgGeogebraCommonKernelGeosGeoVec2D_(vec, ((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticListValue))), vec);
        return vec;
      }
    }
    OrgGeogebraCommonKernelArithmeticMyList *myList = [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList];
    [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(myList)) applyLeftWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_PLUS() withOrgGeogebraCommonKernelArithmeticExpressionValue:lt withOrgGeogebraCommonKernelStringTemplate:tpl];
    return myList;
  }
  else if ([OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:lt]) {
    msb = [((id<OrgGeogebraCommonKernelArithmeticTextValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticTextValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticTextValue))))) getText];
    if (holdsLaTeXtext) {
      [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) toLaTeXStringWithBoolean:NO withOrgGeogebraCommonKernelStringTemplate:tpl]];
    }
    else {
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) isGeoElement]) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(rt, [OrgGeogebraCommonKernelGeosGeoElement class]);
        [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) appendWithNSString:[geo toDefinedValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) appendWithNSString:[rt toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
    }
    return msb;
  }
  else if ([OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:rt]) {
    msb = [((id<OrgGeogebraCommonKernelArithmeticTextValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticTextValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticTextValue))))) getText];
    if (holdsLaTeXtext) {
      [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) insertWithInt:0 withNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) toLaTeXStringWithBoolean:NO withOrgGeogebraCommonKernelStringTemplate:tpl]];
    }
    else {
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) isGeoElement]) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(lt, [OrgGeogebraCommonKernelGeosGeoElement class]);
        [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) insertWithInt:0 withNSString:[geo toDefinedValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        [((OrgGeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(msb)) insertWithInt:0 withNSString:[lt toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
    }
    return msb;
  }
  else {
    str = [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalAddition", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_], @"+", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_] } count:4 type:NSString_class_()];
    OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("@@", [lt getClass], [rt getClass]));
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(l10n_, str);
  }
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)handleDivideWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                    withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt
                                                                    withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                                                                    withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right {
  IOSObjectArray *str;
  OrgGeogebraCommonKernelArithmeticMyDouble *num;
  OrgGeogebraCommonKernelGeosGeoVec2D *vec;
  if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt]) {
    if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:lt]) {
      num = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getNumber];
      OrgGeogebraCommonKernelArithmeticMyDouble_divWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_(num, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getNumber], num);
      return num;
    }
    else if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt]) {
      vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
      OrgGeogebraCommonKernelGeosGeoVec2D_divWithOrgGeogebraCommonKernelGeosGeoVec2D_withDouble_withOrgGeogebraCommonKernelGeosGeoVec2D_(vec, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble], vec);
      return vec;
    }
    else if ([lt isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
      return OrgGeogebraCommonKernelGeosGeoFunction_applyNumberSymbWithOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(lt, [OrgGeogebraCommonKernelGeosGeoFunction class]), right, YES);
    }
    else {
      str = [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalDivision", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_], @"/", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_] } count:4 type:NSString_class_()];
      @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(l10n_, str);
    }
  }
  else if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
    vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
    OrgGeogebraCommonKernelGeosGeoVec2D_complexDivideWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_(vec, [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector], vec);
    return vec;
  }
  else if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
    vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
    OrgGeogebraCommonKernelGeosGeoVec2D_complexDivideWithOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue)), [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector], vec);
    return vec;
  }
  else if (([rt isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:lt]) {
    return OrgGeogebraCommonKernelGeosGeoFunction_applyNumberSymbWithOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(rt, [OrgGeogebraCommonKernelGeosGeoFunction class]), left, NO);
  }
  else {
    str = [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalDivision", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_], @"/", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_] } count:4 type:NSString_class_()];
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(l10n_, str);
  }
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)handleMinusWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                   withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt {
  IOSObjectArray *str;
  OrgGeogebraCommonKernelArithmeticMyDouble *num;
  OrgGeogebraCommonKernelGeosGeoVec2D *vec;
  if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt]) {
    num = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getNumber];
    OrgGeogebraCommonKernelArithmeticMyDouble_subWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticMyDouble_(num, (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue)), num);
    return num;
  }
  else if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
    vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
    OrgGeogebraCommonKernelGeosGeoVec2D_subWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_(vec, [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector], vec);
    return vec;
  }
  else if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt]) {
    vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
    OrgGeogebraCommonKernelGeosGeoVec2D_subWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoVec2D_(vec, ((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))), vec);
    return vec;
  }
  else if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
    vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
    OrgGeogebraCommonKernelGeosGeoVec2D_subWithOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))), vec, vec);
    return vec;
  }
  else if ([OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
    vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
    OrgGeogebraCommonKernelGeosGeoVec2D_subWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelArithmeticListValue_withOrgGeogebraCommonKernelGeosGeoVec2D_withBoolean_(vec, ((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticListValue))), vec, NO);
    return vec;
  }
  else if ([OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:rt] && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt]) {
    vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
    OrgGeogebraCommonKernelGeosGeoVec2D_subWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelArithmeticListValue_withOrgGeogebraCommonKernelGeosGeoVec2D_withBoolean_(vec, ((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticListValue))), vec, YES);
    return vec;
  }
  else {
    str = [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalSubtraction", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_], @"-", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_] } count:4 type:NSString_class_()];
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("@C@", [lt getClass], ',', [rt getClass]));
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(l10n_, str);
  }
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)handlePowerWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                   withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt
                                                                   withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right {
  IOSObjectArray *str;
  OrgGeogebraCommonKernelArithmeticMyDouble *num;
  OrgGeogebraCommonKernelGeosGeoVec2D *vec, *vec2;
  if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt]) {
    num = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getNumber];
    jdouble base = [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble];
    OrgGeogebraCommonKernelArithmeticMyDouble *exponent = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getNumber];
    if (base == JavaLangMath_E) {
      return [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(exponent)) exp];
    }
    if ((base < 0) && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isExpressionNode] && [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_DIVIDE()) {
      [num setWithDouble:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_negPowerWithDouble_withOrgGeogebraCommonKernelArithmeticExpressionValue_(base, right)];
      return num;
    }
    OrgGeogebraCommonKernelArithmeticMyDouble_powWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_(num, exponent, num);
    return num;
  }
  else if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt]) {
    vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
    if ([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(vec)) getMode] == OrgGeogebraCommonKernelKernel_COORD_COMPLEX) {
      OrgGeogebraCommonKernelGeosGeoVec2D_complexPowerWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoVec2D_(vec, ((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))), vec);
      return vec;
    }
    num = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getNumber];
    if ([((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble] == 2.0) {
      OrgGeogebraCommonKernelGeosGeoVec2D_innerWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelArithmeticMyDouble_(vec, vec, num);
      return num;
    }
    [num setWithDouble:JavaLangDouble_NaN];
    return num;
  }
  else if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
    vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
    vec2 = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
    OrgGeogebraCommonKernelGeosGeoVec2D_complexPowerWithOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_(vec, vec2, vec);
    return vec;
  }
  else if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
    num = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getNumber];
    vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
    OrgGeogebraCommonKernelGeosGeoVec2D_complexPowerWithOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoVec2D_withOrgGeogebraCommonKernelGeosGeoVec2D_(num, vec, vec);
    return vec;
  }
  else {
    OrgGeogebraCommonMainApp_printStacktraceWithId_(@"ExpressionNodeEvaluator.handlePower()");
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@$@", @"Problem in ExpressionNodeEvaluator.handlePower(): lt :", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) getClass], @", rt: ", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) getClass]));
    str = [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalExponent", [lt toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_], @"^", [rt toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_] } count:4 type:NSString_class_()];
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(l10n_, str);
  }
}

+ (jdouble)negPowerWithDouble:(jdouble)base
withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right {
  return OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_negPowerWithDouble_withOrgGeogebraCommonKernelArithmeticExpressionValue_(base, right);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)handleFunctionWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                      withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt
                                                                      withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left {
  IOSObjectArray *str;
  if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt]) {
    if ([OrgGeogebraCommonKernelArithmeticEvaluatable_class_() isInstance:lt]) {
      id<OrgGeogebraCommonKernelArithmeticNumberValue> arg = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
      if (([lt isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) && [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(lt, [OrgGeogebraCommonKernelGeosGeoFunction class])))) isBooleanFunction]) {
        return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel_, [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(lt, [OrgGeogebraCommonKernelGeosGeoFunction class])))) evaluateBooleanWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(arg)) getDouble]]);
      }
      return [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(arg)) getNumber])) applyWithOrgGeogebraCommonKernelArithmeticEvaluatable:(id<OrgGeogebraCommonKernelArithmeticEvaluatable>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticEvaluatable))];
    }
    else if ([lt isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCasCell class]] && [[((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(lt, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) getOutputValidExpression] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunction class]]) {
      OrgGeogebraCommonKernelArithmeticExpressionNode *node = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, lt, OrgGeogebraCommonPluginOperationEnum_get_FUNCTION(), rt);
      OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *fex = OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_getCollector();
      node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([node wrap])) getCopyWithOrgGeogebraCommonKernelKernel:kernel_])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:fex], [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
      NSString *result = [((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS])) evaluateGeoGebraCASWithOrgGeogebraCommonKernelArithmeticValidExpression:node withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericNoLocal_() withOrgGeogebraCommonKernelGeosGeoCasCell:nil withOrgGeogebraCommonKernelKernel:kernel_];
      jboolean mode = [kernel_ isSilentMode];
      [kernel_ setSilentModeWithBoolean:YES];
      OrgGeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) processAlgebraCommandWithNSString:result withBoolean:NO]), 0);
      [kernel_ setSilentModeWithBoolean:mode];
      return geo;
    }
    else if ([left isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCasCell class]] && [[((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) getTwinGeo] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]]) {
      return [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getNumber])) applyWithOrgGeogebraCommonKernelArithmeticEvaluatable:(id<OrgGeogebraCommonKernelArithmeticEvaluatable>) check_protocol_cast([((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) getTwinGeo], @protocol(OrgGeogebraCommonKernelArithmeticEvaluatable))];
    }
    else {
      OrgGeogebraCommonUtilDebugLog_debugWithId_(lt);
    }
  }
  else if ([rt isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]]) {
    if ([OrgGeogebraCommonKernelArithmeticEvaluatable_class_() isInstance:lt]) {
      OrgGeogebraCommonKernelGeosGeoPoint *pt = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(rt, [OrgGeogebraCommonKernelGeosGeoPoint class]);
      if ([lt isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
        OrgGeogebraCommonKernelArithmeticFunctionNVar *fun = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(lt, [OrgGeogebraCommonKernelGeosGeoFunction class])))) getFunction];
        if ([((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun)) isBooleanFunction]) {
          return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel_, [fun evaluateBooleanWithOrgGeogebraCommonKernelGeosGeoPoint:pt]);
        }
        return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [fun evaluateWithOrgGeogebraCommonKernelGeosGeoPoint:pt]);
      }
      else if ([OrgGeogebraCommonKernelGeosGeoFunctionable_class_() isInstance:lt]) {
        return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk([((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction])) getFunction])) evaluateWithOrgGeogebraCommonKernelGeosGeoPoint:pt]);
      }
      else {
        OrgGeogebraCommonMainApp_errorWithNSString_(@"missing case in ExpressionNodeEvaluator");
      }
    }
  }
  str = [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalArgument", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_] } count:2 type:NSString_class_()];
  @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(l10n_, str);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)handleFunctionNVarWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                          withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt {
  if ([OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:rt] && ([OrgGeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:lt])) {
    OrgGeogebraCommonKernelArithmeticFunctionNVar *funN = [((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar))))) getFunction];
    id<OrgGeogebraCommonKernelArithmeticListValue> list = (id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticListValue));
    if ([((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(funN)) getVarNumber] == [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(list)) size]) {
      IOSDoubleArray *args = [list toDouble];
      if (args != nil) {
        if ([funN isBooleanFunction]) {
          return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel_, [funN evaluateBooleanWithDoubleArray:args]);
        }
        return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [funN evaluateWithDoubleArray:args]);
      }
      return lt;
    }
    else if ([list size] == 1) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk([list getMyList])) getListElementWithInt:0])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      if (([funN getVarNumber] == 2) && ([ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]])) {
        OrgGeogebraCommonKernelGeosGeoPoint *pt = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoPoint class]);
        if ([funN isBooleanFunction]) {
          return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel_, [funN evaluateBooleanWithOrgGeogebraCommonKernelGeosGeoPoint:pt]);
        }
        return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [funN evaluateWithOrgGeogebraCommonKernelGeosGeoPoint:pt]);
      }
      else if (([funN getVarNumber] == 2) && ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyVecNode class]])) {
        OrgGeogebraCommonKernelArithmeticMyVecNode *pt = (OrgGeogebraCommonKernelArithmeticMyVecNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyVecNode class]);
        IOSDoubleArray *vals = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyVecNode *) nil_chk(pt)) getX])) evaluateDouble], [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([pt getY])) evaluateDouble] } count:2];
        if ([funN isBooleanFunction]) {
          return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel_, [funN evaluateBooleanWithDoubleArray:vals]);
        }
        return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [funN evaluateWithDoubleArray:vals]);
      }
      else if (([OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:ev]) && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(ev, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList])) getListElementWithInt:0])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
        IOSDoubleArray *vals = [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(ev, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) toDouble];
        if (vals != nil) {
          if ([funN isBooleanFunction]) {
            return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel_, [funN evaluateBooleanWithDoubleArray:vals]);
          }
          return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [funN evaluateWithDoubleArray:vals]);
        }
      }
      else if ([OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:ev]) {
        OrgGeogebraCommonKernelArithmeticMyList *l = [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(ev, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList];
        OrgGeogebraCommonKernelArithmeticMyList *ret = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(kernel_);
        for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(l)) size]; i++) {
          OrgGeogebraCommonKernelArithmeticMyList *lArg = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(kernel_);
          [lArg addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:[l getListElementWithInt:i]];
          [ret addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, funN, OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR(), lArg)];
        }
        return ret;
      }
      return lt;
    }
  }
  IOSObjectArray *str3 = [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalArgument", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_] } count:2 type:NSString_class_()];
  @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(l10n_, str3);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)illegalBooleanWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)arg
                                                                                                              withNSString:(NSString *)opname {
  IOSObjectArray *str = [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalBoolean", opname, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(arg)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_] } count:3 type:NSString_class_()];
  @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(l10n_, str);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)illegalArgumentWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                       withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt
                                                                                                               withNSString:(NSString *)opname {
  IOSObjectArray *str = [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalArgument", opname, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_], @",", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_], @")" } count:6 type:NSString_class_()];
  @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(l10n_, str);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)illegalArgumentWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)arg {
  IOSObjectArray *str = [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalArgument", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(arg)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_] } count:2 type:NSString_class_()];
  @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(l10n_, str);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)illegalBinaryWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt
                                                                                                             withNSString:(NSString *)type
                                                                                                             withNSString:(NSString *)opname {
  IOSObjectArray *str = [IOSObjectArray newArrayWithObjects:(id[]){ type, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_], opname, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_] } count:4 type:NSString_class_()];
  @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(l10n_, str);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)illegalComparisonWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                         withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt
                                                                                                                 withNSString:(NSString *)opname {
  IOSObjectArray *str = [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalComparison", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_], opname, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_] } count:4 type:NSString_class_()];
  @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(l10n_, str);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)illegalListOpWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt
                                                                                                             withNSString:(NSString *)opname {
  IOSObjectArray *str = [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalListOperation", [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_], opname, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_] } count:4 type:NSString_class_()];
  @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(l10n_, str);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)polynomialOrDieWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                                   withOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op
                                                                                                               withNSString:(NSString *)opname {
  return [self polynomialOrDieWithOrgGeogebraCommonKernelArithmeticExpressionValue:lt withOrgGeogebraCommonPluginOperationEnum:op withNSString:opname withNSString:@")"];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)polynomialOrDieWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                                   withOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op
                                                                                                               withNSString:(NSString *)prefix
                                                                                                               withNSString:(NSString *)suffix {
  IOSObjectArray *strings = [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalArgument", prefix, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_], suffix } count:4 type:NSString_class_()];
  @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(l10n_, strings);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)handleVectorProductWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lt
                                                                           withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt
                                                                                      withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                                                                                    withBoolean:(jboolean)holdsLaTeXtext {
  if ([OrgGeogebraCommonKernelArithmeticVectorNDValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticVectorNDValue_class_() isInstance:rt]) {
    return [self vectorProductWithOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorNDValue)) withOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorNDValue))];
  }
  return [self illegalBinaryWithOrgGeogebraCommonKernelArithmeticExpressionValue:lt withOrgGeogebraCommonKernelArithmeticExpressionValue:rt withNSString:@"IllegalMultiplication" withNSString:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strVECTORPRODUCT_()];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)vectorProductWithOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>)v1
                                                                     withOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>)v2 {
  id<OrgGeogebraCommonKernelKernelNDGeoVecInterface> vec1 = [((id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) nil_chk(v1)) getVector];
  id<OrgGeogebraCommonKernelKernelNDGeoVecInterface> vec2 = [((id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) nil_chk(v2)) getVector];
  OrgGeogebraCommonKernelArithmeticMyDouble *num = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_(kernel_);
  OrgGeogebraCommonKernelGeosGeoVec2D_vectorProductWithOrgGeogebraCommonKernelKernelNDGeoVecInterface_withOrgGeogebraCommonKernelKernelNDGeoVecInterface_withOrgGeogebraCommonKernelArithmeticMyDouble_(vec1, vec2, num);
  return num;
}

- (OrgGeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator class]) {
    OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_ = OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_();
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainLocalization:withOrgGeogebraCommonKernelKernel:", "ExpressionNodeEvaluator", NULL, 0x1, NULL, NULL },
    { "evaluateWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelStringTemplate:", "evaluate", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "handleOpWithOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelStringTemplate:withBoolean:", "handleOp", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x4, NULL, NULL },
    { "multiplyWithOrgGeogebraCommonKernelArithmeticMyList:withOrgGeogebraCommonKernelArithmeticVectorNDValue:", "multiply", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x4, NULL, NULL },
    { "multiply2DWithOrgGeogebraCommonKernelArithmeticMyList:withInt:withInt:withOrgGeogebraCommonKernelArithmeticVectorValue:", "multiply2D", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x14, NULL, NULL },
    { "multiply2DWithOrgGeogebraCommonKernelArithmeticMyList:withInt:withInt:withOrgGeogebraCommonKernelArithmeticVectorNDValue:withOrgGeogebraCommonKernelGeosGeoVec2D:", "multiply2D", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x14, NULL, NULL },
    { "handleSpecialWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelStringTemplate:", "handleSpecial", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x2, NULL, NULL },
    { "evalEqualsWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "evalEquals", "Lorg.geogebra.common.kernel.arithmetic.MyBoolean;", 0x9, NULL, NULL },
    { "handleXcoordWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonPluginOperationEnum:", "handleXcoord", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "handleYcoordWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonPluginOperationEnum:", "handleYcoord", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "handleMultWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelStringTemplate:withBoolean:", "handleMult", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "multiplyWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticVectorNDValue:", "multiply", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x4, NULL, NULL },
    { "complexMultWithOrgGeogebraCommonKernelArithmeticVectorNDValue:withOrgGeogebraCommonKernelArithmeticVectorNDValue:withOrgGeogebraCommonKernelKernel:", "complexMult", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x4, NULL, NULL },
    { "innerProductWithOrgGeogebraCommonKernelArithmeticVectorNDValue:withOrgGeogebraCommonKernelArithmeticVectorNDValue:withOrgGeogebraCommonKernelKernel:", "innerProduct", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x4, NULL, NULL },
    { "handlePlusWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelStringTemplate:withBoolean:", "handlePlus", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "handleDivideWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "handleDivide", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "handleMinusWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "handleMinus", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "handlePowerWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "handlePower", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "negPowerWithDouble:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "negPower", "D", 0x8, NULL, NULL },
    { "handleFunctionWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "handleFunction", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "handleFunctionNVarWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "handleFunctionNVar", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "illegalBooleanWithOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:", "illegalBoolean", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "illegalArgumentWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:", "illegalArgument", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "illegalArgumentWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "illegalArgument", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "illegalBinaryWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:", "illegalBinary", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "illegalComparisonWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:", "illegalComparison", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "illegalListOpWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:", "illegalListOp", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "polynomialOrDieWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonPluginOperationEnum:withNSString:", "polynomialOrDie", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "polynomialOrDieWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonPluginOperationEnum:withNSString:withNSString:", "polynomialOrDie", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "handleVectorProductWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelStringTemplate:withBoolean:", "handleVectorProduct", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "vectorProductWithOrgGeogebraCommonKernelArithmeticVectorNDValue:withOrgGeogebraCommonKernelArithmeticVectorNDValue:", "vectorProduct", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x4, NULL, NULL },
    { "getKernel", NULL, "Lorg.geogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "errorTemplate_", NULL, 0x1a, "Lorg.geogebra.common.kernel.StringTemplate;", &OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_errorTemplate_, NULL,  },
    { "l10n_", NULL, 0x2, "Lorg.geogebra.common.main.Localization;", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator = { 2, "ExpressionNodeEvaluator", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 32, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator;
}

@end

void OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_initWithOrgGeogebraCommonMainLocalization_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator *self, OrgGeogebraCommonMainLocalization *l10n, OrgGeogebraCommonKernelKernel *kernel) {
  (void) NSObject_init(self);
  self->l10n_ = l10n;
  self->kernel_ = kernel;
}

OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator *new_OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_initWithOrgGeogebraCommonMainLocalization_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonMainLocalization *l10n, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator *self = [OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator alloc];
  OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_initWithOrgGeogebraCommonMainLocalization_withOrgGeogebraCommonKernelKernel_(self, l10n, kernel);
  return self;
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_multiply2DWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_withOrgGeogebraCommonKernelArithmeticVectorValue_(OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator *self, OrgGeogebraCommonKernelArithmeticMyList *myList, jint rows, jint cols, id<OrgGeogebraCommonKernelArithmeticVectorValue> rt) {
  return OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_multiply2DWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_withOrgGeogebraCommonKernelArithmeticVectorNDValue_withOrgGeogebraCommonKernelGeosGeoVec2D_(self, myList, rows, cols, rt, [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(rt)) getVector]);
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_multiply2DWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_withOrgGeogebraCommonKernelArithmeticVectorNDValue_withOrgGeogebraCommonKernelGeosGeoVec2D_(OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator *self, OrgGeogebraCommonKernelArithmeticMyList *myList, jint rows, jint cols, id<OrgGeogebraCommonKernelArithmeticVectorNDValue> rt, OrgGeogebraCommonKernelGeosGeoVec2D *myVec) {
  if ((rows == 2) && (cols == 2)) {
    OrgGeogebraCommonKernelGeosGeoVec2D_multiplyMatrixWithOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelKernelNDGeoVecInterface_withOrgGeogebraCommonKernelGeosGeoVec2D_(myList, [((id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) nil_chk(rt)) getVector], myVec);
    return myVec;
  }
  else if ((rows == 3) && (cols == 3)) {
    [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(myVec)) multiplyMatrixAffineWithOrgGeogebraCommonKernelArithmeticMyList:myList withOrgGeogebraCommonKernelArithmeticExpressionValue:rt];
    return myVec;
  }
  return nil;
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_handleSpecialWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> lt, id<OrgGeogebraCommonKernelArithmeticExpressionValue> rt, id<OrgGeogebraCommonKernelArithmeticExpressionValue> left, id<OrgGeogebraCommonKernelArithmeticExpressionValue> right, OrgGeogebraCommonPluginOperationEnum *operation, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if ([OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:lt]) {
    if ((operation == OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY()) && [OrgGeogebraCommonKernelArithmeticVectorNDValue_class_() isInstance:rt]) {
      OrgGeogebraCommonKernelArithmeticMyList *myList = [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList];
      if ([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(myList)) isMatrix]) {
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> ret = [self multiplyWithOrgGeogebraCommonKernelArithmeticMyList:myList withOrgGeogebraCommonKernelArithmeticVectorNDValue:(id<OrgGeogebraCommonKernelArithmeticVectorNDValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorNDValue))];
        if (ret != nil) {
          return ret;
        }
      }
    }
    else if ((operation == OrgGeogebraCommonPluginOperationEnum_get_VECTORPRODUCT()) && [OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:rt]) {
      OrgGeogebraCommonKernelArithmeticMyList *listL = [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl], @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList];
      OrgGeogebraCommonKernelArithmeticMyList *listR = [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl], @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList];
      if ((([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(listL)) size] == 3) && ([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(listR)) size] == 3)) || (([listL size] == 2) && ([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(listR)) size] == 2))) {
        [listL vectorProductWithOrgGeogebraCommonKernelArithmeticMyList:listR];
        return listL;
      }
    }
    if ((operation != OrgGeogebraCommonPluginOperationEnum_get_IF_LIST()) && (operation != OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()) && (operation != OrgGeogebraCommonPluginOperationEnum_get_NOT_EQUAL()) && (operation != OrgGeogebraCommonPluginOperationEnum_get_IS_SUBSET_OF()) && (operation != OrgGeogebraCommonPluginOperationEnum_get_IS_SUBSET_OF_STRICT()) && (operation != OrgGeogebraCommonPluginOperationEnum_get_SET_DIFFERENCE()) && (operation != OrgGeogebraCommonPluginOperationEnum_get_ELEMENT_OF()) && (operation != OrgGeogebraCommonPluginOperationEnum_get_IS_ELEMENT_OF()) && !([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) && !([OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:rt])) {
      OrgGeogebraCommonKernelArithmeticMyList *myList = [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList];
      [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(myList)) applyRightWithOrgGeogebraCommonPluginOperationEnum:operation withOrgGeogebraCommonKernelArithmeticExpressionValue:rt withOrgGeogebraCommonKernelStringTemplate:tpl];
      return myList;
    }
  }
  else if ([OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:rt] && ![((OrgGeogebraCommonPluginOperationEnum *) nil_chk(operation)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()] && ![operation isEqual:OrgGeogebraCommonPluginOperationEnum_get_NOT_EQUAL()] && ![operation isEqual:OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR()] && ![operation isEqual:OrgGeogebraCommonPluginOperationEnum_get_FREEHAND()] && ![operation isEqual:OrgGeogebraCommonPluginOperationEnum_get_DATA()] && !([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt] && [operation isPlusorMinus]) && !([OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:lt]) && ![operation isEqual:OrgGeogebraCommonPluginOperationEnum_get_IS_ELEMENT_OF()]) {
    if (operation == OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY() && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt]) {
      OrgGeogebraCommonKernelArithmeticMyList *myList = [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList];
      jboolean isMatrix = [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(myList)) isMatrix];
      jint rows = [myList getMatrixRows];
      jint cols = [myList getMatrixCols];
      if (isMatrix && (rows == 2) && (cols == 2)) {
        OrgGeogebraCommonKernelGeosGeoVec2D *myVec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector];
        [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(myVec)) multiplyMatrixLeftWithOrgGeogebraCommonKernelArithmeticMyList:myList];
        return myVec;
      }
    }
    OrgGeogebraCommonKernelArithmeticMyList *myList = [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList];
    [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(myList)) applyLeftWithOrgGeogebraCommonPluginOperationEnum:operation withOrgGeogebraCommonKernelArithmeticExpressionValue:lt withOrgGeogebraCommonKernelStringTemplate:tpl];
    return myList;
  }
  else if (([OrgGeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:lt]) && ([OrgGeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:rt]) && ![((OrgGeogebraCommonPluginOperationEnum *) nil_chk(operation)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()] && ![operation isEqual:OrgGeogebraCommonPluginOperationEnum_get_NOT_EQUAL()]) {
    return OrgGeogebraCommonKernelGeosGeoFunction_operationSymbWithOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(operation, (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar)), (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar)));
  }
  else if (([OrgGeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:lt]) && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt] && ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(operation)) ordinal] < [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_FUNCTION())) ordinal])) {
    return OrgGeogebraCommonKernelGeosGeoFunction_applyNumberSymbWithOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(operation, (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar)), right, YES);
  }
  else if (([OrgGeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:rt]) && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:lt]) {
    return OrgGeogebraCommonKernelGeosGeoFunction_applyNumberSymbWithOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(operation, (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar)), left, NO);
  }
  return nil;
}

OrgGeogebraCommonKernelArithmeticMyBoolean *OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_evalEqualsWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> lt, id<OrgGeogebraCommonKernelArithmeticExpressionValue> rt) {
  OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_initialize();
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_();
  if ([OrgGeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:rt]) {
    return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel, [((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticBooleanValue))))) getBoolean] == [((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticBooleanValue))))) getBoolean]);
  }
  else if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt]) {
    return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel, OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble], [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble]));
  }
  else if ([OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:rt]) {
    NSString *strL = [((id<OrgGeogebraCommonKernelArithmeticTextValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticTextValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticTextValue))))) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
    NSString *strR = [((id<OrgGeogebraCommonKernelArithmeticTextValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticTextValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticTextValue))))) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
    if ((strL == nil) || (strR == nil)) {
      return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel, NO);
    }
    return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel, [((NSString *) nil_chk(strL)) isEqual:strR]);
  }
  else if ([OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:rt]) {
    OrgGeogebraCommonKernelArithmeticMyList *list1 = [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList];
    OrgGeogebraCommonKernelArithmeticMyList *list2 = [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList];
    jint size = [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list1)) size];
    if (size != [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list2)) size]) {
      return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel, NO);
    }
    for (jint i = 0; i < size; i++) {
      if (![((OrgGeogebraCommonKernelArithmeticMyBoolean *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_evalEqualsWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list1 getListElementWithInt:i])) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl], [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list2 getListElementWithInt:i])) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl]))) getBoolean]) {
        return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel, NO);
      }
    }
    return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel, YES);
  }
  else if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lt)) isGeoElement] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) isGeoElement]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo1 = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(lt, [OrgGeogebraCommonKernelGeosGeoElement class]);
    OrgGeogebraCommonKernelGeosGeoElement *geo2 = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(rt, [OrgGeogebraCommonKernelGeosGeoElement class]);
    return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel, [geo1 isEqualWithOrgGeogebraCommonKernelGeosGeoElement:geo2]);
  }
  else if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
    id<OrgGeogebraCommonKernelArithmeticVectorValue> vec1 = (id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue));
    id<OrgGeogebraCommonKernelArithmeticVectorValue> vec2 = (id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue));
    return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([vec1 getVector])) isEqualWithOrgGeogebraCommonKernelGeosGeoVec2D:[((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(vec2)) getVector]]);
  }
  else if ([OrgGeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:lt] && [OrgGeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:rt]) {
    id<OrgGeogebraCommonKernelArithmetic3DVector3DValue> vec1 = (id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmetic3DVector3DValue));
    id<OrgGeogebraCommonKernelArithmetic3DVector3DValue> vec2 = (id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmetic3DVector3DValue));
    return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel, [((id<OrgGeogebraCommonKernelKernelNDGeo3DVec>) nil_chk([vec1 getVector])) isEqualWithOrgGeogebraCommonKernelKernelNDGeo3DVec:[((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(vec2)) getVector]]);
  }
  return new_OrgGeogebraCommonKernelArithmeticMyBoolean_initWithOrgGeogebraCommonKernelKernel_withBoolean_(kernel, NO);
}

jdouble OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_negPowerWithDouble_withOrgGeogebraCommonKernelArithmeticExpressionValue_(jdouble base, id<OrgGeogebraCommonKernelArithmeticExpressionValue> right) {
  OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_initialize();
  OrgGeogebraCommonKernelArithmeticExpressionNode *node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
  jdouble a = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(node)) getLeft])) evaluateDouble];
  jlong al = JavaLangMath_roundWithDouble_(a);
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(a, al)) {
    jdouble b = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([node getRight])) evaluateDouble];
    jlong bl = JavaLangMath_roundWithDouble_(b);
    if (b == 0) {
      return (JavaLangDouble_NaN);
    }
    else if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(b, bl)) {
      jlong gcd = OrgGeogebraCommonKernelKernel_gcdWithLong_withLong_(al, bl);
      al = al / gcd;
      bl = bl / gcd;
      if (al != 1) {
        base = JavaLangMath_powWithDouble_withDouble_(base, al);
      }
      if (base > 0) {
        return JavaLangMath_powWithDouble_withDouble_(base, 1.0 / bl);
      }
      jboolean oddB = (JavaLangMath_absWithLong_(bl) % 2) == 1;
      if (oddB) {
        return (-JavaLangMath_powWithDouble_withDouble_(-base, 1.0 / bl));
      }
      return (JavaLangDouble_NaN);
    }
  }
  return OrgGeogebraCommonKernelArithmeticMyDouble_powWithDouble_withDouble_(base, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluateDouble]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator)
