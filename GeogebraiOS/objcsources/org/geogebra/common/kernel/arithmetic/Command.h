//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/arithmetic/Command.java
//

#ifndef _OrgGeogebraCommonKernelArithmeticCommand_H_
#define _OrgGeogebraCommonKernelArithmeticCommand_H_

#include "J2ObjC_header.h"
#include "org/geogebra/common/kernel/arithmetic/GetItem.h"
#include "org/geogebra/common/kernel/arithmetic/ReplaceChildrenByValues.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"

@class IOSIntArray;
@class IOSObjectArray;
@class JavaUtilArrayList;
@class JavaUtilHashSet;
@class OrgGeogebraCommonKernelArithmeticExpressionNode;
@class OrgGeogebraCommonKernelArithmeticFunctionVariable;
@class OrgGeogebraCommonKernelGeosGeoElement;
@class OrgGeogebraCommonKernelKernel;
@class OrgGeogebraCommonKernelMacro;
@class OrgGeogebraCommonKernelStringTemplate;
@protocol OrgGeogebraCommonKernelArithmeticExpressionValue;
@protocol OrgGeogebraCommonKernelArithmeticInspecting;
@protocol OrgGeogebraCommonKernelArithmeticTraversing;

@interface OrgGeogebraCommonKernelArithmeticCommand : OrgGeogebraCommonKernelArithmeticValidExpression < OrgGeogebraCommonKernelArithmeticReplaceChildrenByValues, OrgGeogebraCommonKernelArithmeticGetItem >

#pragma mark Public

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                         withNSString:(NSString *)name
                                          withBoolean:(jboolean)translateName;

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                         withNSString:(NSString *)name
                                          withBoolean:(jboolean)translateName
                                          withBoolean:(jboolean)allowEvaluationForTypeCheck;

- (void)addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)arg;

- (jboolean)containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev;

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel1;

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluateWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (IOSObjectArray *)evaluateMultiple;

- (jboolean)evaluatesTo3DVector;

- (jboolean)evaluatesToList;

- (jboolean)evaluatesToNonComplex2DVector;

- (jboolean)evaluatesToText;

- (jboolean)evaluatesToVectorNotPoint;

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getArgumentWithInt:(jint)i;

- (jint)getArgumentNumber;

- (IOSObjectArray *)getArguments;

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getItemWithInt:(jint)i;

- (OrgGeogebraCommonKernelKernel *)getKernel;

- (jint)getLength;

- (OrgGeogebraCommonKernelMacro *)getMacro;

- (NSString *)getName;

- (IOSIntArray *)getOutputSizes;

- (OrgGeogebraCommonKernelArithmeticCommand *)getTopLevelCommand;

- (NSString *)getVariableNameWithInt:(jint)i;

- (JavaUtilHashSet *)getVariables;

- (jboolean)hasCoords;

- (jboolean)inspectWithOrgGeogebraCommonKernelArithmeticInspecting:(id<OrgGeogebraCommonKernelArithmeticInspecting>)t;

- (jboolean)isConstant;

- (jboolean)isLeaf;

- (jboolean)isNumberValue;

- (jboolean)isTopLevelCommand;

- (void)replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

- (jint)replaceVariablesWithNSString:(NSString *)varName
withOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fVar;

- (void)resolveVariables;

- (void)setArgumentWithInt:(jint)i
withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en;

- (void)setMacroWithOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)macro;

- (void)setOutputSizesWithIntArray:(IOSIntArray *)sizes;

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)traverseWithOrgGeogebraCommonKernelArithmeticTraversing:(id<OrgGeogebraCommonKernelArithmeticTraversing>)t;

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrap;

+ (OrgGeogebraCommonKernelArithmeticExpressionNode *)xyzCASWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en
                                                                                                       withInt:(jint)i
                                                                                                   withBoolean:(jboolean)mayCheck
                                                                                         withJavaUtilArrayList:(JavaUtilArrayList *)undecided;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelArithmeticCommand)

FOUNDATION_EXPORT void OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_(OrgGeogebraCommonKernelArithmeticCommand *self, OrgGeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName);

FOUNDATION_EXPORT OrgGeogebraCommonKernelArithmeticCommand *new_OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_(OrgGeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(OrgGeogebraCommonKernelArithmeticCommand *self, OrgGeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName, jboolean allowEvaluationForTypeCheck);

FOUNDATION_EXPORT OrgGeogebraCommonKernelArithmeticCommand *new_OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(OrgGeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName, jboolean allowEvaluationForTypeCheck) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticCommand_xyzCASWithOrgGeogebraCommonKernelArithmeticExpressionNode_withInt_withBoolean_withJavaUtilArrayList_(OrgGeogebraCommonKernelArithmeticExpressionNode *en, jint i, jboolean mayCheck, JavaUtilArrayList *undecided);

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelArithmeticCommand)

#endif // _OrgGeogebraCommonKernelArithmeticCommand_H_
