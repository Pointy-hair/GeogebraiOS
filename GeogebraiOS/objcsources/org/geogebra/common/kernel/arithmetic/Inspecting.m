//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/arithmetic/Inspecting.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/MyBoolean.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "org/geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "org/geogebra/common/kernel/arithmetic/Polynomial.h"
#include "org/geogebra/common/kernel/arithmetic/Variable.h"
#include "org/geogebra/common/kernel/geos/GeoDummyVariable.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/plugin/Operation.h"

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum *new_OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum *new_OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum *new_OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker ()

+ (jboolean)setTypeWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v;

@end

static jint OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_type_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker, type_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker, type_, jint)

static jint OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_dim_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker, dim_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker, dim_, jint)

static OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker *OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_checker_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker, checker_, OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker, checker_, OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker *)

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionValue_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> v);

@interface OrgGeogebraCommonKernelArithmeticInspecting_$1 : NSObject < OrgGeogebraCommonKernelArithmeticInspecting >

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelArithmeticInspecting_$1)

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticInspecting_$1_init(OrgGeogebraCommonKernelArithmeticInspecting_$1 *self);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticInspecting_$1 *new_OrgGeogebraCommonKernelArithmeticInspecting_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelArithmeticInspecting_$1)

@interface OrgGeogebraCommonKernelArithmeticInspecting_$2 : NSObject < OrgGeogebraCommonKernelArithmeticInspecting >

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelArithmeticInspecting_$2)

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticInspecting_$2_init(OrgGeogebraCommonKernelArithmeticInspecting_$2 *self);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticInspecting_$2 *new_OrgGeogebraCommonKernelArithmeticInspecting_$2_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelArithmeticInspecting_$2)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticInspecting)

id<OrgGeogebraCommonKernelArithmeticInspecting> OrgGeogebraCommonKernelArithmeticInspecting_dynamicGeosFinder_;
id<OrgGeogebraCommonKernelArithmeticInspecting> OrgGeogebraCommonKernelArithmeticInspecting_textFinder_;

@implementation OrgGeogebraCommonKernelArithmeticInspecting

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticInspecting class]) {
    OrgGeogebraCommonKernelArithmeticInspecting_dynamicGeosFinder_ = new_OrgGeogebraCommonKernelArithmeticInspecting_$1_init();
    OrgGeogebraCommonKernelArithmeticInspecting_textFinder_ = new_OrgGeogebraCommonKernelArithmeticInspecting_$2_init();
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticInspecting)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "check", "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dynamicGeosFinder_", NULL, 0x19, "Lorg.geogebra.common.kernel.arithmetic.Inspecting;", &OrgGeogebraCommonKernelArithmeticInspecting_dynamicGeosFinder_, NULL,  },
    { "textFinder_", NULL, 0x19, "Lorg.geogebra.common.kernel.arithmetic.Inspecting;", &OrgGeogebraCommonKernelArithmeticInspecting_textFinder_, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.arithmetic.Inspecting$IneqFinder;", "Lorg.geogebra.common.kernel.arithmetic.Inspecting$CommandFinder;", "Lorg.geogebra.common.kernel.arithmetic.Inspecting$ExtendedCommandFinder;", "Lorg.geogebra.common.kernel.arithmetic.Inspecting$UnplottableChecker;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticInspecting = { 2, "Inspecting", "org.geogebra.common.kernel.arithmetic", NULL, 0x609, 1, methods, 2, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticInspecting;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticInspecting)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum)

OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum *OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_values_[1];

@implementation OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v {
  return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v)) isExpressionNode] && [((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(v, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getOperation])) isInequality];
}

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_values() {
  OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_values_ count:1 type:OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_values();
}

+ (OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum *OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_initialize();
  for (int i = 0; i < 1; i++) {
    OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum *e = OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum class]) {
    OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_INSTANCE = new_OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_initWithNSString_withInt_(@"INSTANCE", 0);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "check", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "INSTANCE", 0x4019, "Lorg.geogebra.common.kernel.arithmetic.Inspecting$IneqFinder;", &OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_INSTANCE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.arithmetic.Inspecting$IneqFinder;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum = { 2, "IneqFinder", "org.geogebra.common.kernel.arithmetic", "Inspecting", 0x4019, 1, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/kernel/arithmetic/Inspecting$IneqFinder;>;Lorg/geogebra/common/kernel/arithmetic/Inspecting;" };
  return &_OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum;
}

@end

void OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum *self, NSString *__name, jint __ordinal) {
  (void) JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum *new_OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum *self = [OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum alloc];
  OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum)

OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum *OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_values_[1];

@implementation OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v {
  return [v isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]];
}

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_values() {
  OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_values_ count:1 type:OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_values();
}

+ (OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum *OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_initialize();
  for (int i = 0; i < 1; i++) {
    OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum *e = OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum class]) {
    OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_INSTANCE = new_OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_initWithNSString_withInt_(@"INSTANCE", 0);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "check", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "INSTANCE", 0x4019, "Lorg.geogebra.common.kernel.arithmetic.Inspecting$CommandFinder;", &OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_INSTANCE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.arithmetic.Inspecting$CommandFinder;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum = { 2, "CommandFinder", "org.geogebra.common.kernel.arithmetic", "Inspecting", 0x4019, 1, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/kernel/arithmetic/Inspecting$CommandFinder;>;Lorg/geogebra/common/kernel/arithmetic/Inspecting;" };
  return &_OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum;
}

@end

void OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum *self, NSString *__name, jint __ordinal) {
  (void) JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum *new_OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum *self = [OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum alloc];
  OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum)

OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum *OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_values_[1];

@implementation OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v {
  if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
    return YES;
  }
  if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(v, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_DERIVATIVE()]) {
      return YES;
    }
  }
  return NO;
}

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_values() {
  OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_values_ count:1 type:OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_values();
}

+ (OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum *OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_initialize();
  for (int i = 0; i < 1; i++) {
    OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum *e = OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum class]) {
    OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_INSTANCE = new_OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_initWithNSString_withInt_(@"INSTANCE", 0);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "check", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "INSTANCE", 0x4019, "Lorg.geogebra.common.kernel.arithmetic.Inspecting$ExtendedCommandFinder;", &OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_INSTANCE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.arithmetic.Inspecting$ExtendedCommandFinder;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum = { 2, "ExtendedCommandFinder", "org.geogebra.common.kernel.arithmetic", "Inspecting", 0x4019, 1, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/kernel/arithmetic/Inspecting$ExtendedCommandFinder;>;Lorg/geogebra/common/kernel/arithmetic/Inspecting;" };
  return &_OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum;
}

@end

void OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum *self, NSString *__name, jint __ordinal) {
  (void) JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum *new_OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum *self = [OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum alloc];
  OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticInspecting_ExtendedCommandFinderEnum)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker)

@implementation OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v {
  switch (OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_type_) {
    case 0:
    break;
    case 1:
    return NO;
    case 2:
    if ([v isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) {
      OrgGeogebraCommonKernelGeosGeoDummyVariable *gdv = (OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast(v, [OrgGeogebraCommonKernelGeosGeoDummyVariable class]);
      NSString *varString = [((OrgGeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(gdv)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      if (![((NSString *) nil_chk(varString)) isEqual:@"x"] && ![varString isEqual:@"y"] && (OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_dim_ < 3 || ![varString isEqual:@"z"])) {
        OrgGeogebraCommonKernelGeosGeoElement *subst = [gdv getElementWithSameName];
        if (subst != nil && ![subst getSendValueToCas]) {
          return NO;
        }
        return YES;
      }
    }
    return NO;
    case 3:
    if ([v isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) {
      OrgGeogebraCommonKernelGeosGeoElement *subst = [((OrgGeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(((OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast(v, [OrgGeogebraCommonKernelGeosGeoDummyVariable class])))) getElementWithSameName];
      if (subst != nil && ![subst getSendValueToCas]) {
        return NO;
      }
      return YES;
    }
    return NO;
    case 4:
    case 5:
    case 6:
    return NO;
    case 10:
    return YES;
    case 11:
    if ([v isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) {
      OrgGeogebraCommonKernelGeosGeoDummyVariable *gdv = (OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast(v, [OrgGeogebraCommonKernelGeosGeoDummyVariable class]);
      if (![((NSString *) nil_chk([((OrgGeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(gdv)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@"x"]) {
        return YES;
      }
    }
    else if (!([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]] || [v isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]] || [v isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]] || [v isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyVecNode class]] || [v isKindOfClass:[OrgGeogebraCommonKernelGeosGeoVector class]] || [v isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]])) {
      return YES;
    }
    return NO;
    default:
    return NO;
  }
  return OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionValue_(v);
}

+ (jboolean)setTypeWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v {
  return OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionValue_(v);
}

+ (OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker *)getCheckerWithInt:(jint)dimension {
  return OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_getCheckerWithInt_(dimension);
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_init(self);
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker class]) {
    OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_checker_ = new_OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_init();
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "check", "Z", 0x1, NULL, NULL },
    { "setTypeWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "setType", "Z", 0xa, NULL, NULL },
    { "getCheckerWithInt:", "getChecker", "Lorg.geogebra.common.kernel.arithmetic.Inspecting$UnplottableChecker;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type_", NULL, 0xa, "I", &OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_type_, NULL,  },
    { "dim_", NULL, 0xa, "I", &OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_dim_, NULL,  },
    { "checker_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Inspecting$UnplottableChecker;", &OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_checker_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker = { 2, "UnplottableChecker", "org.geogebra.common.kernel.arithmetic", "Inspecting", 0x9, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker;
}

@end

jboolean OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_setTypeWithOrgGeogebraCommonKernelArithmeticExpressionValue_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> v) {
  OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_initialize();
  if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
    OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_type_ = 1;
    return NO;
  }
  else if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]]) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(v, [OrgGeogebraCommonKernelArithmeticEquation class])))) getRHS])) unwrap];
    if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) evaluatesToNumberWithBoolean:YES] && ![ev evaluatesToNumberWithBoolean:YES]) {
      return YES;
    }
    OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_type_ = 2;
    return NO;
  }
  else if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunction class]]) {
    OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_type_ = 3;
    return NO;
  }
  else if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyBoolean class]]) {
    OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_type_ = 4;
    return YES;
  }
  else if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]]) {
    OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_type_ = 5;
    return NO;
  }
  else if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]]) {
    OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_type_ = 6;
    return NO;
  }
  else if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticPolynomial class]]) {
    OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_type_ = 8;
    return NO;
  }
  else if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]] || [v isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) {
    if ([((NSString *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@"x"]) {
      return NO;
    }
    return YES;
  }
  else if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_type_ = 11;
    return NO;
  }
  else if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]]) {
    OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_type_ = 10;
    return YES;
  }
  return NO;
}

OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker *OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_getCheckerWithInt_(jint dimension) {
  OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_initialize();
  OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_type_ = 0;
  OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_dim_ = dimension;
  return OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_checker_;
}

void OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_init(OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker *new_OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_init() {
  OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker *self = [OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker alloc];
  OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticInspecting_UnplottableChecker)

@implementation OrgGeogebraCommonKernelArithmeticInspecting_$1

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v {
  if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v)) isGeoElement]) {
    return NO;
  }
  OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(v, [OrgGeogebraCommonKernelGeosGeoElement class]);
  return (![geo isIndependent] || [geo isLabelSet] || [geo isLocalVariable] || [v isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]] || [geo isGeoCasCell] || [geo isRandomGeo]);
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticInspecting_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "check", "Z", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticInspecting_$1 = { 2, "", "org.geogebra.common.kernel.arithmetic", "Inspecting", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticInspecting_$1;
}

@end

void OrgGeogebraCommonKernelArithmeticInspecting_$1_init(OrgGeogebraCommonKernelArithmeticInspecting_$1 *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticInspecting_$1 *new_OrgGeogebraCommonKernelArithmeticInspecting_$1_init() {
  OrgGeogebraCommonKernelArithmeticInspecting_$1 *self = [OrgGeogebraCommonKernelArithmeticInspecting_$1 alloc];
  OrgGeogebraCommonKernelArithmeticInspecting_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticInspecting_$1)

@implementation OrgGeogebraCommonKernelArithmeticInspecting_$2

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v {
  return ([v isKindOfClass:[OrgGeogebraCommonKernelGeosGeoText class]] || [v isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyStringBuffer class]]);
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticInspecting_$2_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "check", "Z", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticInspecting_$2 = { 2, "", "org.geogebra.common.kernel.arithmetic", "Inspecting", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticInspecting_$2;
}

@end

void OrgGeogebraCommonKernelArithmeticInspecting_$2_init(OrgGeogebraCommonKernelArithmeticInspecting_$2 *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticInspecting_$2 *new_OrgGeogebraCommonKernelArithmeticInspecting_$2_init() {
  OrgGeogebraCommonKernelArithmeticInspecting_$2 *self = [OrgGeogebraCommonKernelArithmeticInspecting_$2 alloc];
  OrgGeogebraCommonKernelArithmeticInspecting_$2_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticInspecting_$2)
