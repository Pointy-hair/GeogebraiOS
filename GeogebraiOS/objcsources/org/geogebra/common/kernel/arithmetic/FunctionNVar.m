//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/arithmetic/FunctionNVar.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/BooleanValue.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/arithmetic/IneqTree.h"
#include "org/geogebra/common/kernel/arithmetic/Inequality.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/parser/Parser.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/MaxSizeHashMap.h"
#include "org/geogebra/common/util/MyMath.h"

#define OrgGeogebraCommonKernelArithmeticFunctionNVar_MAX_CAS_EVAL_MAP_SIZE 100

@interface OrgGeogebraCommonKernelArithmeticFunctionNVar () {
 @public
  OrgGeogebraCommonKernelArithmeticIneqTree *ineqs_;
  OrgGeogebraCommonKernelArithmeticExpressionNode *casEvalExpression_;
  NSString *casEvalStringSymbolic_;
  OrgGeogebraCommonUtilMaxSizeHashMap *casEvalMap_;
}

- (void)fixStructure;

- (jboolean)initTypeWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev OBJC_METHOD_FAMILY_NONE;

- (OrgGeogebraCommonUtilMaxSizeHashMap *)getCasEvalMap;

- (OrgGeogebraCommonKernelArithmeticFunctionNVar *)lookupCasEvalMapWithNSString:(NSString *)casString;

- (jboolean)initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)fe
                     withOrgGeogebraCommonKernelArithmeticFunctionalNVar:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)functional
                           withOrgGeogebraCommonKernelArithmeticIneqTree:(OrgGeogebraCommonKernelArithmeticIneqTree *)tree
                                                             withBoolean:(jboolean)negate OBJC_METHOD_FAMILY_NONE;

+ (OrgGeogebraCommonPluginOperationEnum *)adjustOpWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op
                                                                               withBoolean:(jboolean)negate;

- (void)translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en
                                                           withDouble:(jdouble)vx
                                                              withInt:(jint)varNo;

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)shiftXnodeWithDouble:(jdouble)vx
                                                                  withInt:(jint)varNo;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticFunctionNVar, ineqs_, OrgGeogebraCommonKernelArithmeticIneqTree *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticFunctionNVar, casEvalExpression_, OrgGeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticFunctionNVar, casEvalStringSymbolic_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticFunctionNVar, casEvalMap_, OrgGeogebraCommonUtilMaxSizeHashMap *)

static JavaUtilArrayList *OrgGeogebraCommonKernelArithmeticFunctionNVar_undecided_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticFunctionNVar, undecided_, JavaUtilArrayList *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticFunctionNVar, undecided_, JavaUtilArrayList *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticFunctionNVar, MAX_CAS_EVAL_MAP_SIZE, jint)

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticFunctionNVar_getExpression(OrgGeogebraCommonKernelArithmeticFunctionNVar *self);

__attribute__((unused)) static jint OrgGeogebraCommonKernelArithmeticFunctionNVar_getVarNumber(OrgGeogebraCommonKernelArithmeticFunctionNVar *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticFunctionNVar_fixStructure(OrgGeogebraCommonKernelArithmeticFunctionNVar *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticFunctionNVar_initTypeWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelArithmeticFunctionNVar_evaluateWithDoubleArray_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, IOSDoubleArray *vals);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticFunctionNVar_evaluateBooleanWithDoubleArray_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, IOSDoubleArray *vals);

__attribute__((unused)) static OrgGeogebraCommonUtilMaxSizeHashMap *OrgGeogebraCommonKernelArithmeticFunctionNVar_getCasEvalMap(OrgGeogebraCommonKernelArithmeticFunctionNVar *self);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticFunctionNVar *OrgGeogebraCommonKernelArithmeticFunctionNVar_lookupCasEvalMapWithNSString_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, NSString *casString);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticIneqTree_withBoolean_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, OrgGeogebraCommonKernelArithmeticExpressionNode *fe, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> functional, OrgGeogebraCommonKernelArithmeticIneqTree *tree, jboolean negate);

__attribute__((unused)) static OrgGeogebraCommonPluginOperationEnum *OrgGeogebraCommonKernelArithmeticFunctionNVar_adjustOpWithOrgGeogebraCommonPluginOperationEnum_withBoolean_(OrgGeogebraCommonPluginOperationEnum *op, jboolean negate);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticFunctionNVar_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_withInt_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, OrgGeogebraCommonKernelArithmeticExpressionNode *en, jdouble vx, jint varNo);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticFunctionNVar_shiftXnodeWithDouble_withInt_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, jdouble vx, jint varNo);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticFunctionNVar)

@implementation OrgGeogebraCommonKernelArithmeticFunctionNVar

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)expression {
  OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, expression);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)exp
             withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fVars {
  OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(self, exp, fVars);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticFunctionNVar:(OrgGeogebraCommonKernelArithmeticFunctionNVar *)f
                                    withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticFunctionNVar_withOrgGeogebraCommonKernelKernel_(self, f, kernel);
  return self;
}

- (jboolean)isFunctionVariableWithNSString:(NSString *)var {
  if (fVars_ == nil) {
    return NO;
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fVars_))->size_; i++) {
    if ([((NSString *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(fVars_, i))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:var]) {
      return YES;
    }
  }
  return NO;
}

- (OrgGeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (OrgGeogebraCommonKernelArithmeticFunctionNVar *)deepCopyWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel1 {
  return [new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticFunctionNVar_withOrgGeogebraCommonKernelKernel_(self, kernel1) autorelease];
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getExpression {
  return OrgGeogebraCommonKernelArithmeticFunctionNVar_getExpression(self);
}

- (void)resolveVariables {
  [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) resolveVariables];
}

- (void)replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (expression_ != nil) {
    [expression_ replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (void)setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)exp {
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, exp);
}

- (void)setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)exp
              withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)vars {
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, exp);
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_fVars_(self, vars);
}

- (OrgGeogebraCommonKernelArithmeticFunctionNVar *)getFunction {
  return self;
}

- (IOSObjectArray *)getFunctionVariables {
  return fVars_;
}

- (NSString *)getVarStringWithInt:(jint)i
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(fVars_), i))) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (jint)getVarNumber {
  return OrgGeogebraCommonKernelArithmeticFunctionNVar_getVarNumber(self);
}

- (NSString *)getVarStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  return [((JavaLangStringBuilder *) nil_chk([self appendVarStringWithJavaLangStringBuilder:sb withOrgGeogebraCommonKernelStringTemplate:tpl])) description];
}

- (JavaLangStringBuilder *)appendVarStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                          withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fVars_))->size_ - 1; i++) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(fVars_, i))) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithNSString:@", "];
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(fVars_, fVars_->size_ - 1))) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  return sb;
}

- (jboolean)initFunction {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fVars_))->size_; i++) {
    OrgGeogebraCommonKernelArithmeticFunctionVariable *fVar = IOSObjectArray_Get(fVars_, i);
    OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *s = OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_getReplacerWithOrgGeogebraCommonKernelArithmeticFunctionVariable_(fVar);
    [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:s];
    jint replacements = [((OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *) nil_chk(s)) getReplacements];
    isConstantFunction__ = (isConstantFunction__ && replacements == 0);
  }
  [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) resolveVariables];
  [expression_ simplifyConstantIntegers];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev;
  @try {
    ev = [expression_ evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  }
  @catch (OrgGeogebraCommonMainMyError *err) {
    @try {
      OrgGeogebraCommonKernelArithmeticFunctionNVar_fixStructure(self);
      ev = [expression_ evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    }
    @catch (JavaLangThrowable *th) {
      @throw err;
    }
  }
  return OrgGeogebraCommonKernelArithmeticFunctionNVar_initTypeWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, ev);
}

- (void)fixStructure {
  OrgGeogebraCommonKernelArithmeticFunctionNVar_fixStructure(self);
}

- (jboolean)initTypeWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return OrgGeogebraCommonKernelArithmeticFunctionNVar_initTypeWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, ev);
}

- (jboolean)isBooleanFunction {
  return isBooleanFunction__;
}

- (jboolean)isConstantFunction {
  if (isConstantFunction__) return YES;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fVars_))->size_; i++) if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(fVars_, i)]) return NO;
  return YES;
}

- (jboolean)isConstant {
  return NO;
}

- (jboolean)isLeaf {
  return YES;
}

- (jdouble)evaluateWithDoubleArray:(IOSDoubleArray *)vals {
  return OrgGeogebraCommonKernelArithmeticFunctionNVar_evaluateWithDoubleArray_(self, vals);
}

- (jboolean)evaluateBooleanWithDoubleArray:(IOSDoubleArray *)vals {
  return OrgGeogebraCommonKernelArithmeticFunctionNVar_evaluateBooleanWithDoubleArray_(self, vals);
}

- (JavaUtilHashSet *)getVariables {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) getVariables];
}

- (IOSObjectArray *)getGeoElementVariables {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) getGeoElementVariables];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (OrgGeogebraCommonKernelArithmeticFunctionNVar *)evalCasCommandWithNSString:(NSString *)ggbCasCmd
                                                                  withBoolean:(jboolean)symb
                     withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:(OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(80) autorelease];
  jboolean useCaching = YES;
  jboolean symbolic = symb;
  symbolic = (symbolic && ![((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) containsGeoFunctionNVar]);
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_prefixedDefault_();
  if (casEvalExpression_ != expression_ || (symbolic && casEvalStringSymbolic_ == nil)) {
    OrgGeogebraCommonKernelArithmeticFunctionNVar_set_casEvalExpression_(self, expression_);
    if (symbolic) {
      OrgGeogebraCommonKernelArithmeticFunctionNVar_set_casEvalStringSymbolic_(self, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) getCASstringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:YES]);
    }
    useCaching = (symbolic && ![((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) containsCasEvaluableFunction]);
  }
  NSString *expString = symbolic ? casEvalStringSymbolic_ : [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) getCASstringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:NO];
  NSString *casString = [((NSString *) nil_chk(ggbCasCmd)) replaceAll:@"%" withReplacement:expString];
  OrgGeogebraCommonKernelArithmeticFunctionNVar *resultFun = nil;
  @try {
    if (useCaching) {
      resultFun = OrgGeogebraCommonKernelArithmeticFunctionNVar_lookupCasEvalMapWithNSString_(self, casString);
      if (resultFun != nil) {
        return resultFun;
      }
    }
    OrgGeogebraCommonMainApp_debugWithNSString_(casString);
    NSString *result = symbolic ? [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) evaluateGeoGebraCASWithNSString:casString withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:arbconst] : [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) evaluateCachedGeoGebraCASWithNSString:casString withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:arbconst];
    [sb setLengthWithInt:0];
    [sb appendWithNSString:@"f("];
    [sb appendWithNSString:[self getVarStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    [sb appendWithNSString:@") = "];
    [sb appendWithNSString:result];
    if (OrgGeogebraCommonKernelArithmeticFunctionNVar_getVarNumber(self) == 1) {
      resultFun = ([((OrgGeogebraCommonKernelParserParser *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getParser])) parseFunctionWithNSString:[sb description]]);
    }
    else {
      resultFun = ([((OrgGeogebraCommonKernelParserParser *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getParser])) parseFunctionNVarWithNSString:[sb description]]);
    }
    [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(resultFun)) initFunction];
  }
  @catch (JavaLangError *err) {
    [((JavaLangError *) nil_chk(err)) printStackTrace];
    resultFun = nil;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    resultFun = nil;
  }
  @catch (JavaLangThrowable *e) {
    resultFun = nil;
  }
  if (useCaching && resultFun != nil) {
    [((OrgGeogebraCommonUtilMaxSizeHashMap *) nil_chk(OrgGeogebraCommonKernelArithmeticFunctionNVar_getCasEvalMap(self))) putWithId:casString withId:resultFun];
  }
  return resultFun;
}

- (OrgGeogebraCommonUtilMaxSizeHashMap *)getCasEvalMap {
  return OrgGeogebraCommonKernelArithmeticFunctionNVar_getCasEvalMap(self);
}

- (OrgGeogebraCommonKernelArithmeticFunctionNVar *)lookupCasEvalMapWithNSString:(NSString *)casString {
  return OrgGeogebraCommonKernelArithmeticFunctionNVar_lookupCasEvalMapWithNSString_(self, casString);
}

- (void)clearCasEvalMapWithNSString:(NSString *)label {
  if (casEvalMap_ == nil) return;
  [((OrgGeogebraCommonUtilMaxSizeHashMap *) nil_chk(casEvalMap_)) clear];
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

- (NSString *)getLabelForAssignment {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:[self getLabel]];
  [sb appendWithNSString:@"("];
  [sb appendWithNSString:[self getVarStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  [sb appendWithNSString:@")"];
  return [sb description];
}

- (OrgGeogebraCommonKernelArithmeticIneqTree *)getIneqs {
  return ineqs_;
}

- (jboolean)initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)fe
                     withOrgGeogebraCommonKernelArithmeticFunctionalNVar:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)functional {
  if (ineqs_ == nil || fe == OrgGeogebraCommonKernelArithmeticFunctionNVar_getExpression(self)) OrgGeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_ineqs_(self, new_OrgGeogebraCommonKernelArithmeticIneqTree_init());
  jboolean b = OrgGeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, fe, functional, ineqs_, NO);
  [((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk(ineqs_)) recomputeSize];
  return b;
}

- (jboolean)initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)fe
                     withOrgGeogebraCommonKernelArithmeticFunctionalNVar:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)functional
                           withOrgGeogebraCommonKernelArithmeticIneqTree:(OrgGeogebraCommonKernelArithmeticIneqTree *)tree
                                                             withBoolean:(jboolean)negate {
  return OrgGeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, fe, functional, tree, negate);
}

+ (OrgGeogebraCommonPluginOperationEnum *)adjustOpWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op
                                                                               withBoolean:(jboolean)negate {
  return OrgGeogebraCommonKernelArithmeticFunctionNVar_adjustOpWithOrgGeogebraCommonPluginOperationEnum_withBoolean_(op, negate);
}

- (jboolean)updateIneqs {
  if (ineqs_ == nil) return NO;
  return [((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk(ineqs_)) updateCoef];
}

- (jdouble)evaluateWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)pt {
  if (((IOSObjectArray *) nil_chk(fVars_))->size_ == 1 && [@"y" isEqual:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(fVars_, 0))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) return OrgGeogebraCommonKernelArithmeticFunctionNVar_evaluateWithDoubleArray_(self, [IOSDoubleArray arrayWithDoubles:(jdouble[]){ ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(pt))->y_ / pt->z_ } count:1]);
  return OrgGeogebraCommonKernelArithmeticFunctionNVar_evaluateWithDoubleArray_(self, [IOSDoubleArray arrayWithDoubles:(jdouble[]){ ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(pt))->x_ / pt->z_, pt->y_ / pt->z_ } count:2]);
}

- (jboolean)evaluateBooleanWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)pt {
  if (((IOSObjectArray *) nil_chk(fVars_))->size_ == 1 && [@"y" isEqual:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(fVars_, 0))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) return OrgGeogebraCommonKernelArithmeticFunctionNVar_evaluateBooleanWithDoubleArray_(self, [IOSDoubleArray arrayWithDoubles:(jdouble[]){ ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(pt))->y_ / pt->z_ } count:1]);
  return OrgGeogebraCommonKernelArithmeticFunctionNVar_evaluateBooleanWithDoubleArray_(self, [IOSDoubleArray arrayWithDoubles:(jdouble[]){ ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(pt))->x_ / pt->z_, pt->y_ / pt->z_ } count:2]);
}

- (void)translateWithDouble:(jdouble)vx
                 withDouble:(jdouble)vy {
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(vx)) {
    OrgGeogebraCommonKernelArithmeticFunctionNVar_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_withInt_(self, expression_, vx, 0);
  }
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(vy)) {
    OrgGeogebraCommonKernelArithmeticFunctionNVar_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_withInt_(self, expression_, vy, 1);
  }
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) isLeaf] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expression_ getLeft])) isExpressionNode]) {
    OrgGeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_expression_(self, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([expression_ getLeft], [OrgGeogebraCommonKernelArithmeticExpressionNode class])));
  }
  else {
    OrgGeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_expression_(self, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(expression_));
  }
}

- (void)translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en
                                                           withDouble:(jdouble)vx
                                                              withInt:(jint)varNo {
  OrgGeogebraCommonKernelArithmeticFunctionNVar_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_withInt_(self, en, vx, varNo);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)shiftXnodeWithDouble:(jdouble)vx
                                                                  withInt:(jint)varNo {
  return OrgGeogebraCommonKernelArithmeticFunctionNVar_shiftXnodeWithDouble_withInt_(self, vx, varNo);
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11 {
  OrgGeogebraCommonKernelArithmeticExpressionNode *dummy = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_init() autorelease];
  [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(fVars_), 0) withOrgGeogebraCommonKernelArithmeticExpressionValue:dummy])) wrap];
  OrgGeogebraCommonKernelArithmeticMyDouble *ma00 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, a00) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble *ma01 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, a01) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble *ma10 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, a10) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble *ma11 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, a11) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *newX = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ma00, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 0)) autorelease]) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ma01, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 1)) autorelease]];
  OrgGeogebraCommonKernelArithmeticExpressionNode *newY = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ma10, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 0)) autorelease]) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ma11, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 1)) autorelease]];
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expression_ replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(fVars_, 1) withOrgGeogebraCommonKernelArithmeticExpressionValue:newY])) wrap]);
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:dummy withOrgGeogebraCommonKernelArithmeticExpressionValue:newX])) wrap]);
  [self initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode:expression_ withOrgGeogebraCommonKernelArithmeticFunctionalNVar:self];
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  OrgGeogebraCommonKernelArithmeticExpressionNode *dummy = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_init() autorelease];
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(fVars_), 0) withOrgGeogebraCommonKernelArithmeticExpressionValue:dummy])) wrap]);
  IOSObjectArray *b = OrgGeogebraCommonUtilMyMath_adjointWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(a00, a01, a02, a10, a11, a12, a20, a21, a22);
  IOSObjectArray *mbTrans = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ 3, 3 } type:OrgGeogebraCommonKernelArithmeticMyDouble_class_()];
  for (jint i = 0; i < 3; i++) for (jint j = 0; j < 3; j++) IOSObjectArray_SetAndConsume(nil_chk(IOSObjectArray_Get(mbTrans, i)), j, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(b), j)), i)));
  OrgGeogebraCommonKernelArithmeticExpressionNode *newZ = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 2)), 0), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 0)) autorelease]) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 2)), 1), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 1)) autorelease]])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 2)), 2)];
  OrgGeogebraCommonKernelArithmeticExpressionNode *newX = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 0)), 0), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 0)) autorelease]) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 0)), 1), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 1)) autorelease]])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 0)), 2)];
  OrgGeogebraCommonKernelArithmeticExpressionNode *newY = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 1)), 0), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 0)) autorelease]) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 1)), 1), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 1)) autorelease]])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 1)), 2)];
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(fVars_, 1) withOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(newY)) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:newZ]])) wrap]);
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:dummy withOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(newX)) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:newZ]])) wrap]);
  [self initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode:expression_ withOrgGeogebraCommonKernelArithmeticFunctionalNVar:self];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)traverseWithOrgGeogebraCommonKernelArithmeticTraversing:(id<OrgGeogebraCommonKernelArithmeticTraversing>)t {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((id<OrgGeogebraCommonKernelArithmeticTraversing>) nil_chk(t)) processWithOrgGeogebraCommonKernelArithmeticExpressionValue:self];
  if (ev != self) return ev;
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:t])) wrap]);
  return self;
}

- (jboolean)inspectWithOrgGeogebraCommonKernelArithmeticInspecting:(id<OrgGeogebraCommonKernelArithmeticInspecting>)t {
  return [((id<OrgGeogebraCommonKernelArithmeticInspecting>) nil_chk(t)) checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:self] || [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) inspectWithOrgGeogebraCommonKernelArithmeticInspecting:t];
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getFunctionExpression {
  return expression_;
}

- (jboolean)isDefined {
  return YES;
}

- (void)setDefinedWithBoolean:(jboolean)b {
}

- (OrgGeogebraCommonKernelArithmeticFunctionNVar *)getDerivativeNoCASWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                                                   withInt:(jint)n {
  OrgGeogebraCommonKernelArithmeticExpressionNode *expDeriv = expression_;
  for (jint i = 0; i < n; i++) {
    expDeriv = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expDeriv)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel_];
  }
  [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expDeriv)) simplifyConstantIntegers];
  return [new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(expDeriv, fVars_) autorelease];
}

- (OrgGeogebraCommonKernelArithmeticFunctionNVar *)getIntegralNoCASWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv {
  return [new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel_], fVars_) autorelease];
}

- (void)fillVariablesWithOrgGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)oldVars {
  if (oldVars == nil) {
    return;
  }
  jint length = ((IOSObjectArray *) nil_chk(oldVars))->size_;
  if (((IOSObjectArray *) nil_chk(fVars_))->size_ >= length) {
    return;
  }
  IOSObjectArray *newVars = [IOSObjectArray arrayWithLength:length type:OrgGeogebraCommonKernelArithmeticFunctionVariable_class_()];
  JavaUtilTreeSet *usedNames = [new_JavaUtilTreeSet_init() autorelease];
  for (jint i = 0; i < fVars_->size_; i++) {
    IOSObjectArray_Set(newVars, i, IOSObjectArray_Get(fVars_, i));
    [usedNames addWithId:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(fVars_, i))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  jint pos = fVars_->size_;
  for (jint i = 0; i < oldVars->size_ && pos < length; i++) {
    if (![usedNames containsWithId:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(oldVars, i))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
      IOSObjectArray_Set(newVars, pos, IOSObjectArray_Get(oldVars, i));
      pos++;
    }
  }
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_fVars_(self, newVars);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self) autorelease];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                      withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                    withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel0 {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel0];
}

- (jboolean)hasCoords {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) hasCoords];
}

- (void)dealloc {
  RELEASE_(expression_);
  RELEASE_(fVars_);
  RELEASE_(ineqs_);
  RELEASE_(kernel_);
  RELEASE_(casEvalExpression_);
  RELEASE_(casEvalStringSymbolic_);
  RELEASE_(casEvalMap_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticFunctionNVar class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticFunctionNVar_undecided_, nil, new_JavaUtilArrayList_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticFunctionNVar)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "FunctionNVar", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:", "FunctionNVar", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:", "FunctionNVar", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelArithmeticFunctionNVar:withOrgGeogebraCommonKernelKernel:", "FunctionNVar", NULL, 0x1, NULL, NULL },
    { "isFunctionVariableWithNSString:", "isFunctionVariable", "Z", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lorg.geogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "deepCopyWithOrgGeogebraCommonKernelKernel:", "deepCopy", "Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", 0x1, NULL, NULL },
    { "getExpression", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:", "replaceChildrenByValues", "V", 0x1, NULL, NULL },
    { "setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "setExpression", "V", 0x1, NULL, NULL },
    { "setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:", "setExpression", "V", 0x1, NULL, NULL },
    { "getFunction", NULL, "Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", 0x1, NULL, NULL },
    { "getFunctionVariables", NULL, "[Lorg.geogebra.common.kernel.arithmetic.FunctionVariable;", 0x1, NULL, NULL },
    { "getVarStringWithInt:withOrgGeogebraCommonKernelStringTemplate:", "getVarString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getVarNumber", NULL, "I", 0x11, NULL, NULL },
    { "getVarStringWithOrgGeogebraCommonKernelStringTemplate:", "getVarString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "appendVarStringWithJavaLangStringBuilder:withOrgGeogebraCommonKernelStringTemplate:", "appendVarString", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "initFunction", NULL, "Z", 0x1, NULL, NULL },
    { "fixStructure", NULL, "V", 0x2, NULL, NULL },
    { "initTypeWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "initType", "Z", 0x2, NULL, NULL },
    { "isBooleanFunction", NULL, "Z", 0x11, NULL, NULL },
    { "isConstantFunction", NULL, "Z", 0x11, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "evaluateWithDoubleArray:", "evaluate", "D", 0x11, NULL, NULL },
    { "evaluateBooleanWithDoubleArray:", "evaluateBoolean", "Z", 0x11, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "getGeoElementVariables", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "evalCasCommandWithNSString:withBoolean:withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:", "evalCasCommand", "Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", 0x11, NULL, NULL },
    { "getCasEvalMap", NULL, "Lorg.geogebra.common.util.MaxSizeHashMap;", 0x2, NULL, NULL },
    { "lookupCasEvalMapWithNSString:", "lookupCasEvalMap", "Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", 0x2, NULL, NULL },
    { "clearCasEvalMapWithNSString:", "clearCasEvalMap", "V", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "getLabelForAssignment", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getIneqs", NULL, "Lorg.geogebra.common.kernel.arithmetic.IneqTree;", 0x1, NULL, NULL },
    { "initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticFunctionalNVar:", "initIneqs", "Z", 0x1, NULL, NULL },
    { "initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticFunctionalNVar:withOrgGeogebraCommonKernelArithmeticIneqTree:withBoolean:", "initIneqs", "Z", 0x2, NULL, NULL },
    { "adjustOpWithOrgGeogebraCommonPluginOperationEnum:withBoolean:", "adjustOp", "Lorg.geogebra.common.plugin.Operation;", 0xa, NULL, NULL },
    { "updateIneqs", NULL, "Z", 0x1, NULL, NULL },
    { "evaluateWithOrgGeogebraCommonKernelGeosGeoPoint:", "evaluate", "D", 0x1, NULL, NULL },
    { "evaluateBooleanWithOrgGeogebraCommonKernelGeosGeoPoint:", "evaluateBoolean", "Z", 0x1, NULL, NULL },
    { "translateWithDouble:withDouble:", "translate", "V", 0x1, NULL, NULL },
    { "translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode:withDouble:withInt:", "translateX", "V", 0x2, NULL, NULL },
    { "shiftXnodeWithDouble:withInt:", "shiftXnode", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "traverseWithOrgGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "inspectWithOrgGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x1, NULL, NULL },
    { "getFunctionExpression", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setDefinedWithBoolean:", "setDefined", "V", 0x1, NULL, NULL },
    { "getDerivativeNoCASWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withInt:", "getDerivativeNoCAS", "Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", 0x1, NULL, NULL },
    { "getIntegralNoCASWithOrgGeogebraCommonKernelArithmeticFunctionVariable:", "getIntegralNoCAS", "Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", 0x1, NULL, NULL },
    { "fillVariablesWithOrgGeogebraCommonKernelArithmeticFunctionVariableArray:", "fillVariables", "V", 0x1, NULL, NULL },
    { "wrap", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelKernel:", "derivative", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelKernel:", "integral", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, NULL, NULL },
    { "hasCoords", NULL, "Z", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "expression_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "fVars_", NULL, 0x4, "[Lorg.geogebra.common.kernel.arithmetic.FunctionVariable;", NULL, NULL,  },
    { "ineqs_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.IneqTree;", NULL, NULL,  },
    { "isBooleanFunction__", "isBooleanFunction", 0x4, "Z", NULL, NULL,  },
    { "isConstantFunction__", "isConstantFunction", 0x4, "Z", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "undecided_", NULL, 0xa, "Ljava.util.ArrayList;", &OrgGeogebraCommonKernelArithmeticFunctionNVar_undecided_, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/arithmetic/ExpressionNode;>;",  },
    { "casEvalExpression_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "casEvalStringSymbolic_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "MAX_CAS_EVAL_MAP_SIZE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelArithmeticFunctionNVar_MAX_CAS_EVAL_MAP_SIZE },
    { "casEvalMap_", NULL, 0x2, "Lorg.geogebra.common.util.MaxSizeHashMap;", NULL, "Lorg/geogebra/common/util/MaxSizeHashMap<Ljava/lang/String;Lorg/geogebra/common/kernel/arithmetic/FunctionNVar;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticFunctionNVar = { 2, "FunctionNVar", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 64, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticFunctionNVar;
}

@end

void OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, OrgGeogebraCommonKernelArithmeticExpressionNode *expression) {
  OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->isBooleanFunction__ = NO;
  self->isConstantFunction__ = NO;
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_kernel_(self, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression)) getKernel]);
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, expression);
}

OrgGeogebraCommonKernelArithmeticFunctionNVar *new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelArithmeticExpressionNode *expression) {
  OrgGeogebraCommonKernelArithmeticFunctionNVar *self = [OrgGeogebraCommonKernelArithmeticFunctionNVar alloc];
  OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, expression);
  return self;
}

void OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, OrgGeogebraCommonKernelArithmeticExpressionNode *exp, IOSObjectArray *fVars) {
  OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->isBooleanFunction__ = NO;
  self->isConstantFunction__ = NO;
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_kernel_(self, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) getKernel]);
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, exp);
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_fVars_(self, fVars);
}

OrgGeogebraCommonKernelArithmeticFunctionNVar *new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(OrgGeogebraCommonKernelArithmeticExpressionNode *exp, IOSObjectArray *fVars) {
  OrgGeogebraCommonKernelArithmeticFunctionNVar *self = [OrgGeogebraCommonKernelArithmeticFunctionNVar alloc];
  OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(self, exp, fVars);
  return self;
}

void OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->isBooleanFunction__ = NO;
  self->isConstantFunction__ = NO;
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_kernel_(self, kernel);
}

OrgGeogebraCommonKernelArithmeticFunctionNVar *new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticFunctionNVar *self = [OrgGeogebraCommonKernelArithmeticFunctionNVar alloc];
  OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticFunctionNVar_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, OrgGeogebraCommonKernelArithmeticFunctionNVar *f, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->isBooleanFunction__ = NO;
  self->isConstantFunction__ = NO;
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(f))->expression_)) getCopyWithOrgGeogebraCommonKernelKernel:kernel]);
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_fVars_(self, f->fVars_);
  self->isBooleanFunction__ = f->isBooleanFunction__;
  self->isConstantFunction__ = f->isConstantFunction__;
  OrgGeogebraCommonKernelArithmeticFunctionNVar_set_kernel_(self, kernel);
}

OrgGeogebraCommonKernelArithmeticFunctionNVar *new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticFunctionNVar_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticFunctionNVar *f, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticFunctionNVar *self = [OrgGeogebraCommonKernelArithmeticFunctionNVar alloc];
  OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticFunctionNVar_withOrgGeogebraCommonKernelKernel_(self, f, kernel);
  return self;
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticFunctionNVar_getExpression(OrgGeogebraCommonKernelArithmeticFunctionNVar *self) {
  return self->expression_;
}

jint OrgGeogebraCommonKernelArithmeticFunctionNVar_getVarNumber(OrgGeogebraCommonKernelArithmeticFunctionNVar *self) {
  return ((IOSObjectArray *) nil_chk(self->fVars_))->size_;
}

void OrgGeogebraCommonKernelArithmeticFunctionNVar_fixStructure(OrgGeogebraCommonKernelArithmeticFunctionNVar *self) {
  OrgGeogebraCommonKernelArithmeticFunctionVariable *xVar = nil, *yVar = nil, *zVar = nil;
  {
    IOSObjectArray *a__ = self->fVars_;
    OrgGeogebraCommonKernelArithmeticFunctionVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgGeogebraCommonKernelArithmeticFunctionVariable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonKernelArithmeticFunctionVariable *fVar = *b__++;
      if ([@"x" isEqual:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fVar)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) xVar = fVar;
      else if ([@"y" isEqual:[fVar toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) yVar = fVar;
      else if ([@"z" isEqual:[fVar toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) zVar = fVar;
    }
  }
  [((JavaUtilArrayList *) nil_chk(OrgGeogebraCommonKernelArithmeticFunctionNVar_undecided_)) clear];
  [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) replaceXYZnodesWithOrgGeogebraCommonKernelArithmeticFunctionVariable:xVar withOrgGeogebraCommonKernelArithmeticFunctionVariable:yVar withOrgGeogebraCommonKernelArithmeticFunctionVariable:zVar withJavaUtilArrayList:OrgGeogebraCommonKernelArithmeticFunctionNVar_undecided_];
  for (OrgGeogebraCommonKernelArithmeticExpressionNode * __strong en in OrgGeogebraCommonKernelArithmeticFunctionNVar_undecided_) [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) setOperationWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY()];
  [OrgGeogebraCommonKernelArithmeticFunctionNVar_undecided_ clear];
}

jboolean OrgGeogebraCommonKernelArithmeticFunctionNVar_initTypeWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev) {
  if ([OrgGeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:ev]) {
    self->isBooleanFunction__ = YES;
  }
  else if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:ev]) {
    self->isBooleanFunction__ = NO;
  }
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]]) {
    OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, OrgGeogebraCommonKernelArithmeticFunctionNVar_getExpression(nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticFunctionNVar class])))));
    OrgGeogebraCommonKernelArithmeticFunctionNVar_set_fVars_(self, [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticFunctionNVar class])))) getFunctionVariables]);
  }
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
    OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoFunction class])))) getFunctionExpression]);
    OrgGeogebraCommonKernelArithmeticFunctionNVar_set_fVars_(self, [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoFunction class])))) getFunction])) getFunctionVariables]);
  }
  else {
    return NO;
  }
  return YES;
}

jdouble OrgGeogebraCommonKernelArithmeticFunctionNVar_evaluateWithDoubleArray_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, IOSDoubleArray *vals) {
  if (self->isBooleanFunction__) {
    return OrgGeogebraCommonKernelArithmeticFunctionNVar_evaluateBooleanWithDoubleArray_(self, vals) ? 1 : 0;
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->fVars_))->size_; i++) {
    [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(self->fVars_, i))) setWithDouble:IOSDoubleArray_Get(nil_chk(vals), i)];
  }
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) evaluateDouble];
}

jboolean OrgGeogebraCommonKernelArithmeticFunctionNVar_evaluateBooleanWithDoubleArray_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, IOSDoubleArray *vals) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->fVars_))->size_; i++) [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(self->fVars_, i))) setWithDouble:IOSDoubleArray_Get(nil_chk(vals), i)];
  return [((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @protocol(OrgGeogebraCommonKernelArithmeticBooleanValue))))) getBoolean];
}

OrgGeogebraCommonUtilMaxSizeHashMap *OrgGeogebraCommonKernelArithmeticFunctionNVar_getCasEvalMap(OrgGeogebraCommonKernelArithmeticFunctionNVar *self) {
  if (self->casEvalMap_ == nil) {
    OrgGeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_casEvalMap_(self, new_OrgGeogebraCommonUtilMaxSizeHashMap_initWithInt_(OrgGeogebraCommonKernelArithmeticFunctionNVar_MAX_CAS_EVAL_MAP_SIZE));
  }
  return self->casEvalMap_;
}

OrgGeogebraCommonKernelArithmeticFunctionNVar *OrgGeogebraCommonKernelArithmeticFunctionNVar_lookupCasEvalMapWithNSString_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, NSString *casString) {
  if (self->casEvalMap_ == nil) {
    return nil;
  }
  return [((OrgGeogebraCommonUtilMaxSizeHashMap *) nil_chk(self->casEvalMap_)) getWithId:casString];
}

jboolean OrgGeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticIneqTree_withBoolean_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, OrgGeogebraCommonKernelArithmeticExpressionNode *fe, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> functional, OrgGeogebraCommonKernelArithmeticIneqTree *tree, jboolean negate) {
  OrgGeogebraCommonPluginOperationEnum *op = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(fe)) getOperation];
  OrgGeogebraCommonKernelArithmeticExpressionNode *leftTree = [fe getLeftTree];
  OrgGeogebraCommonKernelArithmeticExpressionNode *rightTree = [fe getRightTree];
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(op)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER_EQUAL()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS_EQUAL()]) {
    OrgGeogebraCommonKernelArithmeticInequality *newIneq = [new_OrgGeogebraCommonKernelArithmeticInequality_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(self->kernel_, leftTree, rightTree, OrgGeogebraCommonKernelArithmeticFunctionNVar_adjustOpWithOrgGeogebraCommonPluginOperationEnum_withBoolean_(op, negate), [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([self getFunction])) getFunctionVariables], functional) autorelease];
    if ([newIneq getType] != OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_INVALID()) {
      if ([newIneq getType] != OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_1VAR_X() && [newIneq getType] != OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_1VAR_Y()) [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([newIneq getBorder])) setInverseFillWithBoolean:[newIneq isAboveBorder]];
      [((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk(tree)) setIneqWithOrgGeogebraCommonKernelArithmeticInequality:newIneq];
    }
    return [newIneq getType] != OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_INVALID();
  }
  else if ([op isEqual:OrgGeogebraCommonPluginOperationEnum_get_AND()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_AND_INTERVAL()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_OR()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_NOT_EQUAL()]) {
    [((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk(tree)) setOperationWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonKernelArithmeticFunctionNVar_adjustOpWithOrgGeogebraCommonPluginOperationEnum_withBoolean_(op, negate)];
    [tree setLeftWithOrgGeogebraCommonKernelArithmeticIneqTree:[new_OrgGeogebraCommonKernelArithmeticIneqTree_init() autorelease]];
    [tree setRightWithOrgGeogebraCommonKernelArithmeticIneqTree:[new_OrgGeogebraCommonKernelArithmeticIneqTree_init() autorelease]];
    return OrgGeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, leftTree, functional, [tree getLeft], negate) && OrgGeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, rightTree, functional, [tree getRight], negate);
  }
  else if ([op isEqual:OrgGeogebraCommonPluginOperationEnum_get_NOT()]) {
    return OrgGeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, leftTree, functional, tree, !negate);
  }
  else if ([op isEqual:OrgGeogebraCommonPluginOperationEnum_get_IMPLICATION()]) {
    [((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk(tree)) setOperationWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_OR()];
    [tree setLeftWithOrgGeogebraCommonKernelArithmeticIneqTree:[new_OrgGeogebraCommonKernelArithmeticIneqTree_init() autorelease]];
    [tree setRightWithOrgGeogebraCommonKernelArithmeticIneqTree:[new_OrgGeogebraCommonKernelArithmeticIneqTree_init() autorelease]];
    return OrgGeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, leftTree, functional, [tree getLeft], !negate) && OrgGeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, rightTree, functional, [tree getRight], negate);
  }
  else if ([op isEqual:OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR()]) {
    id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> nv = (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(leftTree)) getLeft], @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar));
    OrgGeogebraCommonKernelArithmeticExpressionNode *subExpr = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticFunctionNVar_getExpression(nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(nv)) getFunction])))) getCopyWithOrgGeogebraCommonKernelKernel:self->kernel_];
    IOSObjectArray *subVars = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([nv getFunction])) getFunctionVariables];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subVars))->size_; i++) [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(subExpr)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(subVars, i) withOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rightTree)) getLeft], [OrgGeogebraCommonKernelArithmeticMyList class])))) getListElementWithInt:i]];
    return OrgGeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, subExpr, functional, tree, negate);
  }
  else return NO;
}

OrgGeogebraCommonPluginOperationEnum *OrgGeogebraCommonKernelArithmeticFunctionNVar_adjustOpWithOrgGeogebraCommonPluginOperationEnum_withBoolean_(OrgGeogebraCommonPluginOperationEnum *op, jboolean negate) {
  OrgGeogebraCommonKernelArithmeticFunctionNVar_initialize();
  if (negate == NO) return op;
  switch ([op ordinal]) {
    case OrgGeogebraCommonPluginOperation_AND:
    return OrgGeogebraCommonPluginOperationEnum_get_OR();
    case OrgGeogebraCommonPluginOperation_OR:
    return OrgGeogebraCommonPluginOperationEnum_get_AND();
    case OrgGeogebraCommonPluginOperation_GREATER_EQUAL:
    return OrgGeogebraCommonPluginOperationEnum_get_LESS();
    case OrgGeogebraCommonPluginOperation_GREATER:
    return OrgGeogebraCommonPluginOperationEnum_get_LESS_EQUAL();
    case OrgGeogebraCommonPluginOperation_LESS_EQUAL:
    return OrgGeogebraCommonPluginOperationEnum_get_GREATER();
    case OrgGeogebraCommonPluginOperation_LESS:
    return OrgGeogebraCommonPluginOperationEnum_get_GREATER_EQUAL();
    case OrgGeogebraCommonPluginOperation_EQUAL_BOOLEAN:
    return OrgGeogebraCommonPluginOperationEnum_get_NOT_EQUAL();
    case OrgGeogebraCommonPluginOperation_NOT_EQUAL:
    return OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN();
    default:
    break;
  }
  return OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION();
}

void OrgGeogebraCommonKernelArithmeticFunctionNVar_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_withInt_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, OrgGeogebraCommonKernelArithmeticExpressionNode *en, jdouble vx, jint varNo) {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getLeft];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [en getRight];
  if (left == IOSObjectArray_Get(nil_chk(self->fVars_), varNo)) {
    @try {
      OrgGeogebraCommonKernelArithmeticMyDouble *num = (OrgGeogebraCommonKernelArithmeticMyDouble *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticMyDouble class]);
      jdouble temp;
      switch ([[en getOperation] ordinal]) {
        case OrgGeogebraCommonPluginOperation_PLUS:
        temp = [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble] - vx;
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(temp)) {
          OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:en withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fVars_, varNo)])) wrap]);
        }
        else if (temp < 0) {
          [en setOperationWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_MINUS()];
          [num setWithDouble:-temp];
        }
        else {
          [num setWithDouble:temp];
        }
        return;
        case OrgGeogebraCommonPluginOperation_MINUS:
        temp = [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble] + vx;
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(temp)) {
          OrgGeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:en withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fVars_, varNo)])) wrap]);
        }
        else if (temp < 0) {
          [en setOperationWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_PLUS()];
          [num setWithDouble:-temp];
        }
        else {
          [num setWithDouble:temp];
        }
        return;
        default:
        [en setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticFunctionNVar_shiftXnodeWithDouble_withInt_(self, vx, varNo)];
      }
    }
    @catch (JavaLangException *e) {
      [en setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticFunctionNVar_shiftXnodeWithDouble_withInt_(self, vx, varNo)];
    }
  }
  else if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    OrgGeogebraCommonKernelArithmeticFunctionNVar_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_withInt_(self, (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class]), vx, varNo);
  }
  if (right == IOSObjectArray_Get(self->fVars_, varNo)) {
    [en setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticFunctionNVar_shiftXnodeWithDouble_withInt_(self, vx, varNo)];
  }
  else if ([right isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    OrgGeogebraCommonKernelArithmeticFunctionNVar_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_withInt_(self, (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class]), vx, varNo);
  }
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticFunctionNVar_shiftXnodeWithDouble_withInt_(OrgGeogebraCommonKernelArithmeticFunctionNVar *self, jdouble vx, jint varNo) {
  OrgGeogebraCommonKernelArithmeticExpressionNode *node;
  if (vx > 0) {
    node = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, IOSObjectArray_Get(nil_chk(self->fVars_), varNo), OrgGeogebraCommonPluginOperationEnum_get_MINUS(), [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, vx) autorelease]) autorelease];
  }
  else {
    node = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, IOSObjectArray_Get(nil_chk(self->fVars_), varNo), OrgGeogebraCommonPluginOperationEnum_get_PLUS(), [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, -vx) autorelease]) autorelease];
  }
  return node;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticFunctionNVar)
