//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/arithmetic/Term.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Arrays.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/Term.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/plugin/Operation.h"

#define OrgGeogebraCommonKernelArithmeticTerm_serialVersionUID 1LL

@interface OrgGeogebraCommonKernelArithmeticTerm () {
 @public
  JavaLangStringBuilder *variables_;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)addWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)a
                                                           withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)b
                                                                              withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel;

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)subWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)a
                                                           withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)b
                                                                              withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel;

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)a
                                                                withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)b
                                                                                   withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel;

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)a
                                                              withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)b
                                                                                 withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel;

+ (void)sortWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (NSString *)coeffStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                    withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)variableStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTerm, variables_, JavaLangStringBuilder *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTerm, serialVersionUID, jlong)

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticTerm_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticTerm *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> a, id<OrgGeogebraCommonKernelArithmeticExpressionValue> b, OrgGeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticTerm_subWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticTerm *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> a, id<OrgGeogebraCommonKernelArithmeticExpressionValue> b, OrgGeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticTerm_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticTerm *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> a, id<OrgGeogebraCommonKernelArithmeticExpressionValue> b, OrgGeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticTerm_divideWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticTerm *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> a, id<OrgGeogebraCommonKernelArithmeticExpressionValue> b, OrgGeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticTerm_sortWithJavaLangStringBuilder_(JavaLangStringBuilder *sb);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelArithmeticTerm_coeffStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticTerm *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelArithmeticTerm_variableStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticTerm *self, OrgGeogebraCommonKernelStringTemplate *tpl);

@implementation OrgGeogebraCommonKernelArithmeticTerm

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)coeff
                                                            withNSString:(NSString *)vars {
  OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(self, coeff, vars);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                           withDouble:(jdouble)coeff
                                         withNSString:(NSString *)vars {
  OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelKernel_withDouble_withNSString_(self, kernel, coeff, vars);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)coeff
                                               withJavaLangStringBuilder:(JavaLangStringBuilder *)vars {
  OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaLangStringBuilder_(self, coeff, vars);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticTerm:(OrgGeogebraCommonKernelArithmeticTerm *)t
                            withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticTerm_withOrgGeogebraCommonKernelKernel_(self, t, kernel);
  return self;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getCoefficient {
  return coefficient_;
}

- (void)setCoefficientWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)coeff {
  coefficient_ = coeff;
}

- (NSString *)getVars {
  return [((JavaLangStringBuilder *) nil_chk(variables_)) description];
}

- (void)setVariablesWithNSString:(NSString *)vars {
  [((JavaLangStringBuilder *) nil_chk(variables_)) setLengthWithInt:0];
  (void) [variables_ appendWithNSString:vars];
}

- (void)setVariablesWithJavaLangStringBuilder:(JavaLangStringBuilder *)vars {
  [((JavaLangStringBuilder *) nil_chk(variables_)) setLengthWithInt:0];
  (void) [variables_ appendWithJavaLangCharSequence:vars];
}

- (jboolean)hasNoVars {
  return [((JavaLangStringBuilder *) nil_chk(variables_)) length] == 0;
}

- (jboolean)hasIntegerCoeff {
  return OrgGeogebraCommonKernelKernel_isIntegerWithDouble_([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(coefficient_)) evaluateDouble]);
}

- (jint)degree {
  return [((JavaLangStringBuilder *) nil_chk(variables_)) length];
}

- (jint)degreeWithChar:(jchar)var {
  jint count = 0;
  for (jint i = 0; i < [((JavaLangStringBuilder *) nil_chk(variables_)) length]; i++) {
    if ([variables_ charAtWithInt:i] == var) count++;
  }
  return count;
}

- (void)addToCoefficientWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)number
                                           withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  [self setCoefficientWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticTerm_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, coefficient_, number, kernel)];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)addWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)a
                                                           withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)b
                                                                              withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return OrgGeogebraCommonKernelArithmeticTerm_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, a, b, kernel);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)subWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)a
                                                           withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)b
                                                                              withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return OrgGeogebraCommonKernelArithmeticTerm_subWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, a, b, kernel);
}

- (void)multiplyWithOrgGeogebraCommonKernelArithmeticTerm:(OrgGeogebraCommonKernelArithmeticTerm *)t
                        withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  [self setCoefficientWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticTerm_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, coefficient_, ((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk(t))->coefficient_, kernel)];
  (void) [((JavaLangStringBuilder *) nil_chk(variables_)) appendWithJavaLangCharSequence:t->variables_];
  OrgGeogebraCommonKernelArithmeticTerm_sortWithJavaLangStringBuilder_(variables_);
}

- (void)multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)number
                                   withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  [self setCoefficientWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticTerm_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, coefficient_, number, kernel)];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)a
                                                                withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)b
                                                                                   withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return OrgGeogebraCommonKernelArithmeticTerm_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, a, b, kernel);
}

- (void)divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)number
                                 withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  [self setCoefficientWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticTerm_divideWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, coefficient_, number, kernel)];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)a
                                                              withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)b
                                                                                 withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return OrgGeogebraCommonKernelArithmeticTerm_divideWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, a, b, kernel);
}

+ (void)sortWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonKernelArithmeticTerm_sortWithJavaLangStringBuilder_(sb);
}

- (jboolean)isEqual:(id)o {
  OrgGeogebraCommonKernelArithmeticTerm *t;
  if ([o isKindOfClass:[OrgGeogebraCommonKernelArithmeticTerm class]]) {
    t = (OrgGeogebraCommonKernelArithmeticTerm *) check_class_cast(o, [OrgGeogebraCommonKernelArithmeticTerm class]);
    return (coefficient_ == ((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk(t))->coefficient_ && [((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(variables_)) description])) isEqual:[t->variables_ description]]);
  }
  return NO;
}

- (NSUInteger)hash {
  NSAssert(NO, @"hashCode not designed");
  return 42;
}

- (jboolean)containsWithNSString:(NSString *)var {
  return ([((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(variables_)) description])) indexOfString:var] >= 0);
}

- (jint)compareToWithId:(id)o {
  (void) check_class_cast(o, [NSObject class]);
  return [((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk(((OrgGeogebraCommonKernelArithmeticTerm *) check_class_cast(o, [OrgGeogebraCommonKernelArithmeticTerm class]))))->variables_)) description])) compareToWithId:[variables_ description]];
}

- (NSString *)description {
  return [self toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(coefficient_, 0, YES)) return @"0";
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(coefficient_, 1, YES)) {
    if (((jint) [((NSString *) nil_chk(OrgGeogebraCommonKernelArithmeticTerm_variableStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl))) length]) > 0) {
      return OrgGeogebraCommonKernelArithmeticTerm_variableStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
    }
    return @"1";
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  NSString *var = OrgGeogebraCommonKernelArithmeticTerm_variableStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(coefficient_, -1, YES) && ((jint) [((NSString *) nil_chk(var)) length]) > 0) {
    (void) [sb appendWithChar:'-'];
    (void) [sb appendWithNSString:var];
  }
  else {
    (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticTerm_coeffStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelStringTemplate_(self, coefficient_, tpl)];
    if (var != nil) {
      (void) [sb appendWithChar:' '];
      (void) [sb appendWithNSString:var];
    }
  }
  return [sb description];
}

- (NSString *)coeffStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                    withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticTerm_coeffStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelStringTemplate_(self, ev, tpl);
}

- (NSString *)variableStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticTerm_variableStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

+ (IOSObjectArray *)__annotations_toString {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:", "Term", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:withDouble:withNSString:", "Term", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelArithmeticExpressionValue:withJavaLangStringBuilder:", "Term", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelArithmeticTerm:withOrgGeogebraCommonKernelKernel:", "Term", NULL, 0x1, NULL, NULL },
    { "getCoefficient", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "setCoefficientWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "setCoefficient", "V", 0x0, NULL, NULL },
    { "getVars", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "setVariablesWithNSString:", "setVariables", "V", 0x0, NULL, NULL },
    { "setVariablesWithJavaLangStringBuilder:", "setVariables", "V", 0x0, NULL, NULL },
    { "hasNoVars", NULL, "Z", 0x0, NULL, NULL },
    { "hasIntegerCoeff", NULL, "Z", 0x0, NULL, NULL },
    { "degree", NULL, "I", 0x0, NULL, NULL },
    { "degreeWithChar:", "degree", "I", 0x0, NULL, NULL },
    { "addToCoefficientWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelKernel:", "addToCoefficient", "V", 0x0, NULL, NULL },
    { "addWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelKernel:", "add", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x2, NULL, NULL },
    { "subWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelKernel:", "sub", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x2, NULL, NULL },
    { "multiplyWithOrgGeogebraCommonKernelArithmeticTerm:withOrgGeogebraCommonKernelKernel:", "multiply", "V", 0x0, NULL, NULL },
    { "multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelKernel:", "multiply", "V", 0x0, NULL, NULL },
    { "multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelKernel:", "multiply", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x2, NULL, NULL },
    { "divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelKernel:", "divide", "V", 0x0, NULL, NULL },
    { "divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelKernel:", "divide", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x2, NULL, NULL },
    { "sortWithJavaLangStringBuilder:", "sort", "V", 0xa, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "containsWithNSString:", "contains", "Z", 0x0, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "coeffStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelStringTemplate:", "coeffString", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "variableStringWithOrgGeogebraCommonKernelStringTemplate:", "variableString", "Ljava.lang.String;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraCommonKernelArithmeticTerm_serialVersionUID },
    { "coefficient_", NULL, 0x0, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "variables_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTerm = { 2, "Term", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 30, methods, 3, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Ljava/lang/Object;>;Ljava/io/Serializable;" };
  return &_OrgGeogebraCommonKernelArithmeticTerm;
}

@end

void OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(OrgGeogebraCommonKernelArithmeticTerm *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> coeff, NSString *vars) {
  (void) OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaLangStringBuilder_(self, coeff, new_JavaLangStringBuilder_initWithNSString_(vars));
}

OrgGeogebraCommonKernelArithmeticTerm *new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> coeff, NSString *vars) {
  OrgGeogebraCommonKernelArithmeticTerm *self = [OrgGeogebraCommonKernelArithmeticTerm alloc];
  OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(self, coeff, vars);
  return self;
}

void OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelKernel_withDouble_withNSString_(OrgGeogebraCommonKernelArithmeticTerm *self, OrgGeogebraCommonKernelKernel *kernel, jdouble coeff, NSString *vars) {
  (void) OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaLangStringBuilder_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, coeff), new_JavaLangStringBuilder_initWithNSString_(vars));
}

OrgGeogebraCommonKernelArithmeticTerm *new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelKernel_withDouble_withNSString_(OrgGeogebraCommonKernelKernel *kernel, jdouble coeff, NSString *vars) {
  OrgGeogebraCommonKernelArithmeticTerm *self = [OrgGeogebraCommonKernelArithmeticTerm alloc];
  OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelKernel_withDouble_withNSString_(self, kernel, coeff, vars);
  return self;
}

void OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaLangStringBuilder_(OrgGeogebraCommonKernelArithmeticTerm *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> coeff, JavaLangStringBuilder *vars) {
  (void) NSObject_init(self);
  [self setCoefficientWithOrgGeogebraCommonKernelArithmeticExpressionValue:coeff];
  self->variables_ = vars;
}

OrgGeogebraCommonKernelArithmeticTerm *new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaLangStringBuilder_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> coeff, JavaLangStringBuilder *vars) {
  OrgGeogebraCommonKernelArithmeticTerm *self = [OrgGeogebraCommonKernelArithmeticTerm alloc];
  OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaLangStringBuilder_(self, coeff, vars);
  return self;
}

void OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticTerm_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticTerm *self, OrgGeogebraCommonKernelArithmeticTerm *t, OrgGeogebraCommonKernelKernel *kernel) {
  (void) NSObject_init(self);
  self->variables_ = new_JavaLangStringBuilder_initWithNSString_([((JavaLangStringBuilder *) nil_chk(((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk(t))->variables_)) description]);
  [self setCoefficientWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticExpressionNode_copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(t->coefficient_, kernel)];
}

OrgGeogebraCommonKernelArithmeticTerm *new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticTerm_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticTerm *t, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticTerm *self = [OrgGeogebraCommonKernelArithmeticTerm alloc];
  OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticTerm_withOrgGeogebraCommonKernelKernel_(self, t, kernel);
  return self;
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticTerm_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticTerm *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> a, id<OrgGeogebraCommonKernelArithmeticExpressionValue> b, OrgGeogebraCommonKernelKernel *kernel) {
  jboolean aconst = NO;
  jboolean bconst = NO;
  jdouble aval, bval;
  if (aconst && bconst) {
    aval = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(a)) evaluateDouble];
    bval = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(b)) evaluateDouble];
    return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, aval + bval);
  }
  else if (aconst) {
    aval = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(a)) evaluateDouble];
    if (aval == 0.0) {
      return b;
    }
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(b)) isExpressionNode]) {
      OrgGeogebraCommonKernelArithmeticExpressionNode *ben = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(b, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ben getLeft])) isConstant]) {
        switch ([[ben getOperation] ordinal]) {
          case OrgGeogebraCommonPluginOperation_PLUS:
          return OrgGeogebraCommonKernelArithmeticTerm_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, OrgGeogebraCommonKernelArithmeticTerm_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, a, [ben getLeft], kernel), [ben getRight], kernel);
          case OrgGeogebraCommonPluginOperation_MINUS:
          return OrgGeogebraCommonKernelArithmeticTerm_subWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, OrgGeogebraCommonKernelArithmeticTerm_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, a, [ben getLeft], kernel), [ben getRight], kernel);
          default:
          break;
        }
      }
    }
    return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, a, OrgGeogebraCommonPluginOperationEnum_get_PLUS(), b);
  }
  else if (bconst) return OrgGeogebraCommonKernelArithmeticTerm_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, b, a, kernel);
  else return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, a, OrgGeogebraCommonPluginOperationEnum_get_PLUS(), b);
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticTerm_subWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticTerm *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> a, id<OrgGeogebraCommonKernelArithmeticExpressionValue> b, OrgGeogebraCommonKernelKernel *kernel) {
  return OrgGeogebraCommonKernelArithmeticTerm_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, a, OrgGeogebraCommonKernelArithmeticTerm_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, -1.0), b, kernel), kernel);
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticTerm_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticTerm *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> a, id<OrgGeogebraCommonKernelArithmeticExpressionValue> b, OrgGeogebraCommonKernelKernel *kernel) {
  jboolean aconst = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(a)) isConstant];
  jboolean bconst = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(b)) isConstant];
  jdouble aval, bval;
  if (aconst && bconst) {
    aval = [a evaluateDouble];
    bval = [b evaluateDouble];
    return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, aval * bval);
  }
  else if (aconst) {
    aval = [a evaluateDouble];
    if (aval == 0.0) return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, 0.0);
    else if (aval == 1.0) return b;
    else {
      if ([b isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
        OrgGeogebraCommonKernelArithmeticExpressionNode *ben = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(b, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
        if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ben getLeft])) isConstant]) {
          switch ([[ben getOperation] ordinal]) {
            case OrgGeogebraCommonPluginOperation_MULTIPLY:
            return OrgGeogebraCommonKernelArithmeticTerm_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, OrgGeogebraCommonKernelArithmeticTerm_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, a, [ben getLeft], kernel), [ben getRight], kernel);
            case OrgGeogebraCommonPluginOperation_DIVIDE:
            return OrgGeogebraCommonKernelArithmeticTerm_divideWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, OrgGeogebraCommonKernelArithmeticTerm_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, a, [ben getLeft], kernel), [ben getRight], kernel);
            default:
            break;
          }
        }
      }
      return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, a, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), b);
    }
  }
  else if (bconst) return OrgGeogebraCommonKernelArithmeticTerm_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, b, a, kernel);
  else return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, a, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), b);
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticTerm_divideWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticTerm *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> a, id<OrgGeogebraCommonKernelArithmeticExpressionValue> b, OrgGeogebraCommonKernelKernel *kernel) {
  jboolean aconst = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(a)) isConstant];
  jboolean bconst = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(b)) isConstant];
  jdouble aval, bval;
  if (aconst && bconst) {
    aval = [a evaluateDouble];
    bval = [b evaluateDouble];
    return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, aval / bval);
  }
  else if (aconst) {
    aval = [a evaluateDouble];
    if (aval == 0.0) {
      return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, 0.0);
    }
    if ([b isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
      OrgGeogebraCommonKernelArithmeticExpressionNode *ben = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(b, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
      switch ([[ben getOperation] ordinal]) {
        case OrgGeogebraCommonPluginOperation_DIVIDE:
        return OrgGeogebraCommonKernelArithmeticTerm_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, OrgGeogebraCommonKernelArithmeticTerm_divideWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(self, a, [ben getLeft], kernel), [ben getRight], kernel);
        default:
        break;
      }
    }
    return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, a, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), b);
  }
  else if (bconst) {
    bval = [b evaluateDouble];
    if (bval == 1.0) {
      return a;
    }
    return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, a, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), b);
  }
  else return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, a, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), b);
}

void OrgGeogebraCommonKernelArithmeticTerm_sortWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  OrgGeogebraCommonKernelArithmeticTerm_initialize();
  jint len = [((JavaLangStringBuilder *) nil_chk(sb)) length];
  IOSCharArray *chVariables = [IOSCharArray newArrayWithLength:len];
  [sb getCharsWithInt:0 withInt:len withCharArray:chVariables withInt:0];
  JavaUtilArrays_sortWithCharArray_withInt_withInt_(chVariables, 0, len);
  [sb setLengthWithInt:0];
  (void) [sb appendWithCharArray:chVariables];
}

NSString *OrgGeogebraCommonKernelArithmeticTerm_coeffStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticTerm *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoElement class]]) return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoElement class])))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *n = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) isLeaf] || OrgGeogebraCommonKernelArithmeticExpressionNode_opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue_(n) >= [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY())) ordinal] || [((JavaLangStringBuilder *) nil_chk(self->variables_)) length] == 0) {
      return [n toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
    }
    JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
    (void) [sb appendWithChar:'('];
    (void) [sb appendWithNSString:[n toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    (void) [sb appendWithChar:')'];
    return [sb description];
  }
  else return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

NSString *OrgGeogebraCommonKernelArithmeticTerm_variableStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticTerm *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  NSString *str = [((JavaLangStringBuilder *) nil_chk(self->variables_)) description];
  if (([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) && [self->variables_ length] >= 1) {
    JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(@"(");
    for (jint i = 0; i < ((jint) [((NSString *) nil_chk(str)) length]); i++) {
      if (i > 0) (void) [sb appendWithChar:'*'];
      (void) [sb appendWithNSString:[tpl printVariableNameWithNSString:JreStrcat("C", [str charAtWithInt:0])]];
    }
    (void) [sb appendWithChar:')'];
    return [sb description];
  }
  switch ([self->variables_ length]) {
    case 1:
    return str;
    case 2:
    if ([((NSString *) nil_chk(str)) isEqual:@"xx"]) {
      return @"x\u00b2";
    }
    if ([str isEqual:@"yy"]) {
      return @"y\u00b2";
    }
    if ([str isEqual:@"xy"]) {
      return @"xy";
    }
    default:
    return @"";
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTerm)
