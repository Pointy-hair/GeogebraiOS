//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/arithmetic/ExpressionValue.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"

@interface OrgGeogebraCommonKernelArithmeticExpressionValue : NSObject
@end

@implementation OrgGeogebraCommonKernelArithmeticExpressionValue

+ (IOSObjectArray *)__annotations_toString {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isConstant", NULL, "Z", 0x401, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x401, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x401, NULL, NULL },
    { "evaluatesToNonComplex2DVector", NULL, "Z", 0x401, NULL, NULL },
    { "evaluatesToVectorNotPoint", NULL, "Z", 0x401, NULL, NULL },
    { "evaluatesTo3DVector", NULL, "Z", 0x401, NULL, NULL },
    { "evaluatesToList", NULL, "Z", 0x401, NULL, NULL },
    { "evaluatesToText", NULL, "Z", 0x401, NULL, NULL },
    { "isExpressionNode", NULL, "Z", 0x401, NULL, NULL },
    { "isGeoElement", NULL, "Z", 0x401, NULL, NULL },
    { "isVariable", NULL, "Z", 0x401, NULL, NULL },
    { "isInTree", NULL, "Z", 0x401, NULL, NULL },
    { "setInTreeWithBoolean:", "setInTree", "V", 0x401, NULL, NULL },
    { "containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x401, NULL, NULL },
    { "deepCopyWithOrgGeogebraCommonKernelKernel:", "deepCopy", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x401, NULL, NULL },
    { "evaluateDouble", NULL, "D", 0x401, NULL, NULL },
    { "evaluateWithOrgGeogebraCommonKernelStringTemplate:", "evaluate", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x401, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x401, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x401, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "traverseWithOrgGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x401, NULL, NULL },
    { "inspectWithOrgGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x401, NULL, NULL },
    { "unwrap", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x401, NULL, NULL },
    { "wrap", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x401, NULL, NULL },
    { "hasCoords", NULL, "Z", 0x401, NULL, NULL },
    { "derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelKernel:", "derivative", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x401, NULL, NULL },
    { "integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelKernel:", "integral", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x401, NULL, NULL },
    { "evaluatesToNumberWithBoolean:", "evaluatesToNumber", "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticExpressionValue = { 2, "ExpressionValue", "org.geogebra.common.kernel.arithmetic", NULL, 0x609, 32, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticExpressionValue;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticExpressionValue)
