//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/arithmetic/MyDouble.java
//


#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/math/BigDecimal.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/Evaluatable.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/arithmetic/VectorValue.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/MyMath.h"
#include "org/geogebra/common/util/MyMath2.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/Unicode.h"

@interface OrgGeogebraCommonKernelArithmeticMyDouble () {
 @public
  jdouble val_;
  jboolean isAngle__;
}

- (void)checkZero;

+ (jdouble)doRoundWithDouble:(jdouble)x;

@end

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelArithmeticMyDouble_toValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticMyDouble *self, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticMyDouble_checkZero(OrgGeogebraCommonKernelArithmeticMyDouble *self);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticMyDouble *OrgGeogebraCommonKernelArithmeticMyDouble_round(OrgGeogebraCommonKernelArithmeticMyDouble *self);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelArithmeticMyDouble_doRoundWithDouble_(jdouble x);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelArithmeticMyDouble_getDouble(OrgGeogebraCommonKernelArithmeticMyDouble *self);

jdouble OrgGeogebraCommonKernelArithmeticMyDouble_LARGEST_INTEGER_ = 9007199254740992.0;

@implementation OrgGeogebraCommonKernelArithmeticMyDouble

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                           withDouble:(jdouble)x {
  OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self, kernel, x);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)d {
  OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelArithmeticMyDouble_(self, d);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                         withNSString:(NSString *)power {
  OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withNSString_(self, kernel, power);
  return self;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel1 {
  OrgGeogebraCommonKernelArithmeticMyDouble *ret = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelArithmeticMyDouble_(self);
  ret->kernel_ = kernel1;
  return ret;
}

- (void)setWithDouble:(jdouble)x {
  val_ = x;
}

- (void)resolveVariables {
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (isAngle__) {
    jdouble angleVal = OrgGeogebraCommonKernelKernel_convertToAngleValueWithDouble_(val_);
    return [((JavaLangStringBuilder *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatAngleWithDouble:angleVal withOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:NO])) description];
  }
  NSString *ret = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:(val_) withOrgGeogebraCommonKernelStringTemplate:tpl];
  switch ([[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    if (val_ == JavaLangMath_PI) {
      return @"pi";
    }
    if (val_ == JavaLangMath_E) {
      return @"e";
    }
    if ([((NSString *) nil_chk(ret)) indexOf:'.'] > -1) {
      return OrgGeogebraCommonUtilStringUtil_wrapInExactWithNSString_(ret);
    }
    return ret;
    default:
    return ret;
  }
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticMyDouble_toValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (void)setAngle {
  isAngle__ = YES;
}

- (jboolean)isAngle {
  return isAngle__;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)random {
  val_ = [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getRandomNumber];
  isAngle__ = NO;
  return self;
}

+ (void)addWithOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)a
        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)b
           withOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)c {
  OrgGeogebraCommonKernelArithmeticMyDouble_addWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticMyDouble_(a, b, c);
}

+ (void)subWithOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)a
        withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)b
           withOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)c {
  OrgGeogebraCommonKernelArithmeticMyDouble_subWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticMyDouble_(a, b, c);
}

+ (void)multWithOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)a
         withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)b
            withOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)c {
  OrgGeogebraCommonKernelArithmeticMyDouble_multWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticMyDouble_(a, b, c);
}

+ (void)multWithOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)a
                                               withDouble:(jdouble)b
            withOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)c {
  OrgGeogebraCommonKernelArithmeticMyDouble_multWithOrgGeogebraCommonKernelArithmeticMyDouble_withDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_(a, b, c);
}

+ (void)divWithOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)a
           withOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)b
           withOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)c {
  OrgGeogebraCommonKernelArithmeticMyDouble_divWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_(a, b, c);
}

+ (void)powWithOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)a
           withOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)b
           withOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)c {
  OrgGeogebraCommonKernelArithmeticMyDouble_powWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_(a, b, c);
}

+ (jdouble)powWithDouble:(jdouble)a
              withDouble:(jdouble)b {
  return OrgGeogebraCommonKernelArithmeticMyDouble_powWithDouble_withDouble_(a, b);
}

+ (void)powDoubleSgnChangeWithOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)a
                          withOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)b
                          withOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *)c {
  OrgGeogebraCommonKernelArithmeticMyDouble_powDoubleSgnChangeWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_(a, b, c);
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)cos {
  val_ = JavaLangMath_cosWithDouble_(val_);
  isAngle__ = NO;
  OrgGeogebraCommonKernelArithmeticMyDouble_checkZero(self);
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)sin {
  val_ = JavaLangMath_sinWithDouble_(val_);
  isAngle__ = NO;
  OrgGeogebraCommonKernelArithmeticMyDouble_checkZero(self);
  return self;
}

- (void)checkZero {
  OrgGeogebraCommonKernelArithmeticMyDouble_checkZero(self);
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)tan {
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(fmod(JavaLangMath_absWithDouble_(val_), JavaLangMath_PI), OrgGeogebraCommonKernelKernel_PI_HALF)) {
    val_ = JavaLangDouble_NaN;
  }
  else {
    val_ = JavaLangMath_tanWithDouble_(val_);
    OrgGeogebraCommonKernelArithmeticMyDouble_checkZero(self);
  }
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)acos {
  isAngle__ = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getInverseTrigReturnsAngle];
  [self setWithDouble:JavaLangMath_acosWithDouble_(val_)];
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)asin {
  isAngle__ = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getInverseTrigReturnsAngle];
  [self setWithDouble:JavaLangMath_asinWithDouble_(val_)];
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)atan {
  isAngle__ = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getInverseTrigReturnsAngle];
  [self setWithDouble:JavaLangMath_atanWithDouble_(val_)];
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)atan2WithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)y {
  isAngle__ = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getInverseTrigReturnsAngle];
  [self setWithDouble:JavaLangMath_atan2WithDouble_withDouble_(val_, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(y)) getDouble])];
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)log {
  val_ = JavaLangMath_logWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)logWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)base {
  val_ = JavaLangMath_logWithDouble_(val_) / JavaLangMath_logWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(base)) getDouble]);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)erf {
  val_ = OrgGeogebraCommonUtilMyMath2_erfWithDouble_withDouble_withDouble_(0.0, 1.0, val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)inverf {
  val_ = OrgGeogebraCommonUtilMyMath2_inverfWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)polygammaWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)order {
  val_ = OrgGeogebraCommonUtilMyMath2_polyGammaWithOrgGeogebraCommonKernelArithmeticNumberValue_withDouble_(order, val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)psi {
  val_ = OrgGeogebraCommonUtilMyMath2_psiWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)log10 {
  val_ = JavaLangMath_logWithDouble_(val_) / OrgGeogebraCommonUtilMyMath_get_LOG10_();
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)log2 {
  val_ = JavaLangMath_logWithDouble_(val_) / OrgGeogebraCommonUtilMyMath_get_LOG2_();
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)exp {
  val_ = JavaLangMath_expWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)sqrt {
  val_ = JavaLangMath_sqrtWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)cbrt {
  val_ = OrgGeogebraCommonUtilMyMath_cbrtWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (void)addWithDouble:(jdouble)a {
  val_ += a;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)abs {
  val_ = JavaLangMath_absWithDouble_(val_);
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)floor {
  if (isAngle__ && [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAngleUnit] == OrgGeogebraCommonKernelKernel_ANGLE_DEGREE) {
    [self setWithDouble:OrgGeogebraCommonKernelKernel_PI_180 * JavaLangMath_floorWithDouble_(OrgGeogebraCommonKernelKernel_checkIntegerWithDouble_(val_ * OrgGeogebraCommonKernelKernel_CONST_180_PI))];
  }
  else {
    [self setWithDouble:JavaLangMath_floorWithDouble_(OrgGeogebraCommonKernelKernel_checkIntegerWithDouble_(val_))];
  }
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)ceil {
  if (isAngle__ && [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAngleUnit] == OrgGeogebraCommonKernelKernel_ANGLE_DEGREE) {
    [self setWithDouble:OrgGeogebraCommonKernelKernel_PI_180 * JavaLangMath_ceilWithDouble_(OrgGeogebraCommonKernelKernel_checkIntegerWithDouble_(val_ * OrgGeogebraCommonKernelKernel_CONST_180_PI))];
  }
  else {
    [self setWithDouble:JavaLangMath_ceilWithDouble_(OrgGeogebraCommonKernelKernel_checkIntegerWithDouble_(val_))];
  }
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)round {
  return OrgGeogebraCommonKernelArithmeticMyDouble_round(self);
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)roundWithDouble:(jdouble)digits {
  if (!OrgGeogebraCommonKernelKernel_isIntegerWithDouble_(digits)) {
    [self setWithDouble:JavaLangDouble_NaN];
  }
  jdouble pow = JavaLangMath_powWithDouble_withDouble_(10, digits);
  [self setWithDouble:val_ * pow];
  (void) OrgGeogebraCommonKernelArithmeticMyDouble_round(self);
  [self setWithDouble:val_ / pow];
  return self;
}

+ (jdouble)doRoundWithDouble:(jdouble)x {
  return OrgGeogebraCommonKernelArithmeticMyDouble_doRoundWithDouble_(x);
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)sgn {
  val_ = OrgGeogebraCommonUtilMyMath_sgnWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)cosh {
  val_ = OrgGeogebraCommonUtilMyMath_coshWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)sinh {
  val_ = OrgGeogebraCommonUtilMyMath_sinhWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)tanh {
  val_ = OrgGeogebraCommonUtilMyMath_tanhWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)acosh {
  val_ = OrgGeogebraCommonUtilMyMath_acoshWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)asinh {
  val_ = OrgGeogebraCommonUtilMyMath_asinhWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)csc {
  val_ = OrgGeogebraCommonUtilMyMath_cscWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)sec {
  val_ = OrgGeogebraCommonUtilMyMath_secWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)cot {
  val_ = OrgGeogebraCommonUtilMyMath_cotWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)csch {
  val_ = OrgGeogebraCommonUtilMyMath_cschWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)sech {
  val_ = OrgGeogebraCommonUtilMyMath_sechWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)coth {
  val_ = OrgGeogebraCommonUtilMyMath_cothWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)atanh {
  val_ = OrgGeogebraCommonUtilMyMath_atanhWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)cosineIntegral {
  val_ = OrgGeogebraCommonUtilMyMath2_ciWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)sineIntegral {
  val_ = OrgGeogebraCommonUtilMyMath2_siWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)expIntegral {
  val_ = OrgGeogebraCommonUtilMyMath2_eiWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)factorial {
  val_ = OrgGeogebraCommonUtilMyMath2_factorialWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)gamma {
  val_ = OrgGeogebraCommonUtilMyMath2_gammaWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)applyWithOrgGeogebraCommonKernelArithmeticEvaluatable:(id<OrgGeogebraCommonKernelArithmeticEvaluatable>)lt {
  val_ = [((id<OrgGeogebraCommonKernelArithmeticEvaluatable>) nil_chk(lt)) evaluateWithDouble:val_];
  isAngle__ = NO;
  return self;
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)getNumber {
  return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelArithmeticMyDouble_(self);
}

- (jboolean)isConstant {
  return YES;
}

- (JavaUtilHashSet *)getVariables {
  return nil;
}

- (jboolean)isLeaf {
  return YES;
}

- (jdouble)getDouble {
  return OrgGeogebraCommonKernelArithmeticMyDouble_getDouble(self);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)toGeoElement {
  OrgGeogebraCommonKernelGeosGeoNumeric *num = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction], val_);
  return num;
}

- (jboolean)isNumberValue {
  return YES;
}

- (jboolean)containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

+ (jdouble)parsePercentageWithOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)app
                                                   withNSString:(NSString *)str {
  return OrgGeogebraCommonKernelArithmeticMyDouble_parsePercentageWithOrgGeogebraCommonMainLocalization_withNSString_(app, str);
}

+ (jdouble)parseDoubleWithOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)app
                                               withNSString:(NSString *)str {
  return OrgGeogebraCommonKernelArithmeticMyDouble_parseDoubleWithOrgGeogebraCommonMainLocalization_withNSString_(app, str);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)gammaIncompleteRegularizedWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)lt {
  val_ = OrgGeogebraCommonUtilMyMath2_gammaIncompleteRegularizedWithDouble_withDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(lt)) getDouble], val_);
  isAngle__ = NO;
  return self;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)gammaIncompleteWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)lt {
  val_ = OrgGeogebraCommonUtilMyMath2_gammaIncompleteWithDouble_withDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(lt)) getDouble], val_);
  isAngle__ = NO;
  return self;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)betaWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)lt {
  val_ = OrgGeogebraCommonUtilMyMath2_betaWithDouble_withDouble_(val_, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(lt)) getDouble]);
  isAngle__ = NO;
  return self;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)betaIncompleteWithOrgGeogebraCommonKernelArithmeticVectorValue:(id<OrgGeogebraCommonKernelArithmeticVectorValue>)lt {
  OrgGeogebraCommonKernelGeosGeoVec2D *vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(lt)) getVector];
  val_ = OrgGeogebraCommonUtilMyMath2_betaIncompleteWithDouble_withDouble_withDouble_([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(vec)) getX], [vec getY], val_);
  isAngle__ = NO;
  return self;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)betaIncompleteRegularizedWithOrgGeogebraCommonKernelArithmeticVectorValue:(id<OrgGeogebraCommonKernelArithmeticVectorValue>)lt {
  OrgGeogebraCommonKernelGeosGeoVec2D *vec = [((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(lt)) getVector];
  val_ = OrgGeogebraCommonUtilMyMath2_betaIncompleteRegularizedWithDouble_withDouble_withDouble_([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(vec)) getX], [vec getY], val_);
  isAngle__ = NO;
  return self;
}

- (NSString *)toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticMyDouble_toValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (jint)compareToWithId:(id)arg0 {
  (void) check_class_cast(arg0, [NSObject class]);
  if ([arg0 isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]]) {
    OrgGeogebraCommonKernelArithmeticMyDouble *d = (OrgGeogebraCommonKernelArithmeticMyDouble *) check_class_cast(arg0, [OrgGeogebraCommonKernelArithmeticMyDouble class]);
    if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(val_, OrgGeogebraCommonKernelArithmeticMyDouble_getDouble(nil_chk(d)))) {
      return 0;
    }
    return val_ - OrgGeogebraCommonKernelArithmeticMyDouble_getDouble(d) < 0 ? -1 : 1;
  }
  return 0;
}

- (jboolean)isEqual:(id)d {
  if (d == nil) {
    return NO;
  }
  if ([d isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]]) {
    return OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(OrgGeogebraCommonKernelArithmeticMyDouble_getDouble(nil_chk(((OrgGeogebraCommonKernelArithmeticMyDouble *) check_class_cast(d, [OrgGeogebraCommonKernelArithmeticMyDouble class])))), val_);
  }
  return NO;
}

- (NSUInteger)hash {
  return J2ObjCFpToInt((val_ * 1000));
}

- (jboolean)isDefined {
  return !JavaLangDouble_isNaNWithDouble_(val_);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)fractionalPart {
  return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, val_ > 0 ? val_ - JavaLangMath_floorWithDouble_(val_) : val_ - JavaLangMath_ceilWithDouble_(val_));
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)zeta {
  return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, OrgGeogebraCommonUtilMyMath2_zetaWithDouble_(val_));
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                      withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel0 {
  return new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel0, 0);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                    withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel0 {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel0, self, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), fv);
}

+ (jboolean)isFiniteWithDouble:(jdouble)d {
  return OrgGeogebraCommonKernelArithmeticMyDouble_isFiniteWithDouble_(d);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self);
}

+ (NSString *)toStringWithDouble:(jdouble)x {
  return OrgGeogebraCommonKernelArithmeticMyDouble_toStringWithDouble_(x);
}

+ (NSString *)toStringWithJavaMathBigDecimal:(JavaMathBigDecimal *)bd {
  return OrgGeogebraCommonKernelArithmeticMyDouble_toStringWithJavaMathBigDecimal_(bd);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "MyDouble", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:withDouble:", "MyDouble", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelArithmeticMyDouble:", "MyDouble", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:withNSString:", "MyDouble", NULL, 0x1, NULL, NULL },
    { "deepCopyWithOrgGeogebraCommonKernelKernel:", "deepCopy", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "setWithDouble:", "set", "V", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "setAngle", NULL, "V", 0x1, NULL, NULL },
    { "isAngle", NULL, "Z", 0x1, NULL, NULL },
    { "random", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "addWithOrgGeogebraCommonKernelArithmeticMyDouble:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticMyDouble:", "add", "V", 0x19, NULL, NULL },
    { "subWithOrgGeogebraCommonKernelArithmeticMyDouble:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticMyDouble:", "sub", "V", 0x19, NULL, NULL },
    { "multWithOrgGeogebraCommonKernelArithmeticMyDouble:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticMyDouble:", "mult", "V", 0x19, NULL, NULL },
    { "multWithOrgGeogebraCommonKernelArithmeticMyDouble:withDouble:withOrgGeogebraCommonKernelArithmeticMyDouble:", "mult", "V", 0x19, NULL, NULL },
    { "divWithOrgGeogebraCommonKernelArithmeticMyDouble:withOrgGeogebraCommonKernelArithmeticMyDouble:withOrgGeogebraCommonKernelArithmeticMyDouble:", "div", "V", 0x19, NULL, NULL },
    { "powWithOrgGeogebraCommonKernelArithmeticMyDouble:withOrgGeogebraCommonKernelArithmeticMyDouble:withOrgGeogebraCommonKernelArithmeticMyDouble:", "pow", "V", 0x19, NULL, NULL },
    { "powWithDouble:withDouble:", "pow", "D", 0x19, NULL, NULL },
    { "powDoubleSgnChangeWithOrgGeogebraCommonKernelArithmeticMyDouble:withOrgGeogebraCommonKernelArithmeticMyDouble:withOrgGeogebraCommonKernelArithmeticMyDouble:", "powDoubleSgnChange", "V", 0x19, NULL, NULL },
    { "cos", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "sin", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "checkZero", NULL, "V", 0x2, NULL, NULL },
    { "tan", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "acos", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "asin", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "atan", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "atan2WithOrgGeogebraCommonKernelArithmeticNumberValue:", "atan2", "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "log", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "logWithOrgGeogebraCommonKernelArithmeticNumberValue:", "log", "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "erf", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "inverf", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "polygammaWithOrgGeogebraCommonKernelArithmeticNumberValue:", "polygamma", "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "psi", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "log10", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "log2", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "exp", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "sqrt", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "cbrt", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "addWithDouble:", "add", "V", 0x11, NULL, NULL },
    { "abs", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "floor", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "ceil", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "round", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "roundWithDouble:", "round", "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "doRoundWithDouble:", "doRound", "D", 0x1a, NULL, NULL },
    { "sgn", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "cosh", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "sinh", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "tanh", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "acosh", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "asinh", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "csc", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "sec", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "cot", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "csch", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "sech", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "coth", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "atanh", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "cosineIntegral", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "sineIntegral", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "expIntegral", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "factorial", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "gamma", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "applyWithOrgGeogebraCommonKernelArithmeticEvaluatable:", "apply", "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "getNumber", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x11, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x11, NULL, NULL },
    { "getDouble", NULL, "D", 0x11, NULL, NULL },
    { "toGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "parsePercentageWithOrgGeogebraCommonMainLocalization:withNSString:", "parsePercentage", "D", 0x9, NULL, NULL },
    { "parseDoubleWithOrgGeogebraCommonMainLocalization:withNSString:", "parseDouble", "D", 0x9, NULL, NULL },
    { "gammaIncompleteRegularizedWithOrgGeogebraCommonKernelArithmeticNumberValue:", "gammaIncompleteRegularized", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "gammaIncompleteWithOrgGeogebraCommonKernelArithmeticNumberValue:", "gammaIncomplete", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "betaWithOrgGeogebraCommonKernelArithmeticNumberValue:", "beta", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "betaIncompleteWithOrgGeogebraCommonKernelArithmeticVectorValue:", "betaIncomplete", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "betaIncompleteRegularizedWithOrgGeogebraCommonKernelArithmeticVectorValue:", "betaIncompleteRegularized", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "fractionalPart", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "zeta", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelKernel:", "derivative", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelKernel:", "integral", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "isFiniteWithDouble:", "isFinite", "Z", 0x9, NULL, NULL },
    { "wrap", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "toStringWithDouble:", "toString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toStringWithJavaMathBigDecimal:", "toString", "Ljava.lang.String;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val_", NULL, 0x2, "D", NULL, NULL,  },
    { "isAngle__", "isAngle", 0x2, "Z", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "LARGEST_INTEGER_", NULL, 0x9, "D", &OrgGeogebraCommonKernelArithmeticMyDouble_LARGEST_INTEGER_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticMyDouble = { 2, "MyDouble", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 94, methods, 4, fields, 0, NULL, 0, NULL, NULL, "Lorg/geogebra/common/kernel/arithmetic/ValidExpression;Lorg/geogebra/common/kernel/arithmetic/NumberValue;Ljava/lang/Comparable<Ljava/lang/Object;>;" };
  return &_OrgGeogebraCommonKernelArithmeticMyDouble;
}

@end

void OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticMyDouble *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self, kernel, 0.0);
}

OrgGeogebraCommonKernelArithmeticMyDouble *new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticMyDouble *self = [OrgGeogebraCommonKernelArithmeticMyDouble alloc];
  OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(OrgGeogebraCommonKernelArithmeticMyDouble *self, OrgGeogebraCommonKernelKernel *kernel, jdouble x) {
  (void) OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->isAngle__ = NO;
  self->kernel_ = kernel;
  self->val_ = x;
}

OrgGeogebraCommonKernelArithmeticMyDouble *new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(OrgGeogebraCommonKernelKernel *kernel, jdouble x) {
  OrgGeogebraCommonKernelArithmeticMyDouble *self = [OrgGeogebraCommonKernelArithmeticMyDouble alloc];
  OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self, kernel, x);
  return self;
}

void OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelArithmeticMyDouble_(OrgGeogebraCommonKernelArithmeticMyDouble *self, OrgGeogebraCommonKernelArithmeticMyDouble *d) {
  (void) OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->isAngle__ = NO;
  self->kernel_ = ((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(d))->kernel_;
  self->val_ = d->val_;
  self->isAngle__ = d->isAngle__;
}

OrgGeogebraCommonKernelArithmeticMyDouble *new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelArithmeticMyDouble_(OrgGeogebraCommonKernelArithmeticMyDouble *d) {
  OrgGeogebraCommonKernelArithmeticMyDouble *self = [OrgGeogebraCommonKernelArithmeticMyDouble alloc];
  OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelArithmeticMyDouble_(self, d);
  return self;
}

void OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withNSString_(OrgGeogebraCommonKernelArithmeticMyDouble *self, OrgGeogebraCommonKernelKernel *kernel, NSString *power) {
  (void) OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->isAngle__ = NO;
  self->kernel_ = kernel;
  jint sign = 1;
  jint start = 0;
  if ([((NSString *) nil_chk(power)) charAtWithInt:0] == OrgGeogebraCommonUtilUnicode_Superscript_Minus) {
    start = 1;
    sign = -1;
  }
  self->val_ = 0;
  for (jint i = 0; i < ((jint) [power length]) - start; i++) {
    switch ([power charAtWithInt:((jint) [power length]) - 1 - i]) {
      case OrgGeogebraCommonUtilUnicode_Superscript_0:
      break;
      case OrgGeogebraCommonUtilUnicode_Superscript_1:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i);
      break;
      case OrgGeogebraCommonUtilUnicode_Superscript_2:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 2;
      break;
      case OrgGeogebraCommonUtilUnicode_Superscript_3:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 3;
      break;
      case OrgGeogebraCommonUtilUnicode_Superscript_4:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 4;
      break;
      case OrgGeogebraCommonUtilUnicode_Superscript_5:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 5;
      break;
      case OrgGeogebraCommonUtilUnicode_Superscript_6:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 6;
      break;
      case OrgGeogebraCommonUtilUnicode_Superscript_7:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 7;
      break;
      case OrgGeogebraCommonUtilUnicode_Superscript_8:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 8;
      break;
      case OrgGeogebraCommonUtilUnicode_Superscript_9:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 9;
      break;
      default:
      self->val_ = JavaLangDouble_NaN;
      return;
    }
  }
  self->val_ = self->val_ * sign;
}

OrgGeogebraCommonKernelArithmeticMyDouble *new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withNSString_(OrgGeogebraCommonKernelKernel *kernel, NSString *power) {
  OrgGeogebraCommonKernelArithmeticMyDouble *self = [OrgGeogebraCommonKernelArithmeticMyDouble alloc];
  OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withNSString_(self, kernel, power);
  return self;
}

NSString *OrgGeogebraCommonKernelArithmeticMyDouble_toValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticMyDouble *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  return [self toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

void OrgGeogebraCommonKernelArithmeticMyDouble_addWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticMyDouble_(OrgGeogebraCommonKernelArithmeticMyDouble *a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, OrgGeogebraCommonKernelArithmeticMyDouble *c) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initialize();
  ((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(c))->isAngle__ = (((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(a))->isAngle__ && [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) isAngle]);
  [c setWithDouble:a->val_ + [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) getDouble]];
}

void OrgGeogebraCommonKernelArithmeticMyDouble_subWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticMyDouble_(OrgGeogebraCommonKernelArithmeticMyDouble *a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, OrgGeogebraCommonKernelArithmeticMyDouble *c) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initialize();
  ((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(c))->isAngle__ = (((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(a))->isAngle__ && [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) isAngle]);
  [c setWithDouble:a->val_ - [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) getDouble]];
}

void OrgGeogebraCommonKernelArithmeticMyDouble_multWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticMyDouble_(OrgGeogebraCommonKernelArithmeticMyDouble *a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, OrgGeogebraCommonKernelArithmeticMyDouble *c) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initialize();
  ((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(c))->isAngle__ = (((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(a))->isAngle__ || [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) isAngle]);
  jdouble bval = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) getDouble];
  if (JavaLangDouble_isNaNWithDouble_(a->val_) || JavaLangDouble_isNaNWithDouble_(bval)) {
    [c setWithDouble:JavaLangDouble_NaN];
    return;
  }
  if (JavaLangDouble_isInfiniteWithDouble_(a->val_) && JavaLangDouble_isInfiniteWithDouble_(bval) && JavaLangMath_signumWithDouble_(a->val_) != JavaLangMath_signumWithDouble_(bval)) {
    [c setWithDouble:JavaLangDouble_NaN];
    return;
  }
  [c setWithDouble:a->val_ * bval];
}

void OrgGeogebraCommonKernelArithmeticMyDouble_multWithOrgGeogebraCommonKernelArithmeticMyDouble_withDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_(OrgGeogebraCommonKernelArithmeticMyDouble *a, jdouble b, OrgGeogebraCommonKernelArithmeticMyDouble *c) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initialize();
  ((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(c))->isAngle__ = ((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(a))->isAngle__;
  if (JavaLangDouble_isNaNWithDouble_(a->val_) || JavaLangDouble_isNaNWithDouble_(b)) {
    [c setWithDouble:JavaLangDouble_NaN];
    return;
  }
  if (JavaLangDouble_isInfiniteWithDouble_(a->val_) && JavaLangDouble_isInfiniteWithDouble_(b) && JavaLangMath_signumWithDouble_(a->val_) != JavaLangMath_signumWithDouble_(b)) {
    [c setWithDouble:JavaLangDouble_NaN];
    return;
  }
  [c setWithDouble:a->val_ * b];
}

void OrgGeogebraCommonKernelArithmeticMyDouble_divWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_(OrgGeogebraCommonKernelArithmeticMyDouble *a, OrgGeogebraCommonKernelArithmeticMyDouble *b, OrgGeogebraCommonKernelArithmeticMyDouble *c) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initialize();
  ((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(c))->isAngle__ = (((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(a))->isAngle__ && !((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(b))->isAngle__);
  [c setWithDouble:a->val_ / ((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(b))->val_];
}

void OrgGeogebraCommonKernelArithmeticMyDouble_powWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_(OrgGeogebraCommonKernelArithmeticMyDouble *a, OrgGeogebraCommonKernelArithmeticMyDouble *b, OrgGeogebraCommonKernelArithmeticMyDouble *c) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initialize();
  ((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(c))->isAngle__ = (((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(a))->isAngle__ && !((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(b))->isAngle__);
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(b))->val_) && (JavaLangDouble_isInfiniteWithDouble_(a->val_) || JavaLangDouble_isNaNWithDouble_(a->val_))) {
    [c setWithDouble:JavaLangDouble_NaN];
    return;
  }
  [c setWithDouble:JavaLangMath_powWithDouble_withDouble_(a->val_, b->val_)];
}

jdouble OrgGeogebraCommonKernelArithmeticMyDouble_powWithDouble_withDouble_(jdouble a, jdouble b) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initialize();
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(b) && (JavaLangDouble_isInfiniteWithDouble_(a) || JavaLangDouble_isNaNWithDouble_(a))) {
    return JavaLangDouble_NaN;
  }
  return JavaLangMath_powWithDouble_withDouble_(a, b);
}

void OrgGeogebraCommonKernelArithmeticMyDouble_powDoubleSgnChangeWithOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_withOrgGeogebraCommonKernelArithmeticMyDouble_(OrgGeogebraCommonKernelArithmeticMyDouble *a, OrgGeogebraCommonKernelArithmeticMyDouble *b, OrgGeogebraCommonKernelArithmeticMyDouble *c) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initialize();
  ((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(c))->isAngle__ = (((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(a))->isAngle__ && !((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(b))->isAngle__);
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(b))->val_) && (JavaLangDouble_isInfiniteWithDouble_(a->val_) || JavaLangDouble_isNaNWithDouble_(a->val_))) {
    [c setWithDouble:JavaLangDouble_NaN];
    return;
  }
  [c setWithDouble:-JavaLangMath_powWithDouble_withDouble_(-a->val_, b->val_)];
}

void OrgGeogebraCommonKernelArithmeticMyDouble_checkZero(OrgGeogebraCommonKernelArithmeticMyDouble *self) {
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(self->val_)) self->val_ = 0;
}

OrgGeogebraCommonKernelArithmeticMyDouble *OrgGeogebraCommonKernelArithmeticMyDouble_round(OrgGeogebraCommonKernelArithmeticMyDouble *self) {
  if (self->isAngle__ && [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAngleUnit] == OrgGeogebraCommonKernelKernel_ANGLE_DEGREE) {
    [self setWithDouble:OrgGeogebraCommonKernelKernel_PI_180 * OrgGeogebraCommonKernelArithmeticMyDouble_doRoundWithDouble_(self->val_ * OrgGeogebraCommonKernelKernel_CONST_180_PI)];
  }
  else {
    [self setWithDouble:OrgGeogebraCommonKernelArithmeticMyDouble_doRoundWithDouble_(self->val_)];
  }
  return self;
}

jdouble OrgGeogebraCommonKernelArithmeticMyDouble_doRoundWithDouble_(jdouble x) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initialize();
  return JavaLangMath_floorWithDouble_(x + 0.5);
}

jdouble OrgGeogebraCommonKernelArithmeticMyDouble_getDouble(OrgGeogebraCommonKernelArithmeticMyDouble *self) {
  return self->val_;
}

jdouble OrgGeogebraCommonKernelArithmeticMyDouble_parsePercentageWithOrgGeogebraCommonMainLocalization_withNSString_(OrgGeogebraCommonMainLocalization *app, NSString *str) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initialize();
  return OrgGeogebraCommonKernelArithmeticMyDouble_parseDoubleWithOrgGeogebraCommonMainLocalization_withNSString_(app, [str substring:0 endIndex:((jint) [((NSString *) nil_chk(str)) length]) - 1]) / 100;
}

jdouble OrgGeogebraCommonKernelArithmeticMyDouble_parseDoubleWithOrgGeogebraCommonMainLocalization_withNSString_(OrgGeogebraCommonMainLocalization *app, NSString *str) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  [sb setLengthWithInt:0];
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(str)) length]); i++) {
    jint ch = [str charAtWithInt:i];
    if (ch <= (jint) 0x30) {
      (void) [sb appendWithNSString:JreStrcat("C", [str charAtWithInt:i])];
      continue;
    }
    else if (ch <= (jint) 0x39) ch -= (jint) 0x30;
    else if (ch <= (jint) 0x100) {
      (void) [sb appendWithNSString:JreStrcat("C", [str charAtWithInt:i])];
      continue;
    }
    else if (ch <= (jint) 0x669) ch -= (jint) 0x660;
    else if (ch == (jint) 0x66b) {
      (void) [sb appendWithNSString:@"."];
      continue;
    }
    else if (ch <= (jint) 0x6f9) ch -= (jint) 0x6f0;
    else if (ch <= (jint) 0x96f) ch -= (jint) 0x966;
    else if (ch <= (jint) 0x9ef) ch -= (jint) 0x9e6;
    else if (ch <= (jint) 0xa6f) ch -= (jint) 0xa66;
    else if (ch <= (jint) 0xaef) ch -= (jint) 0xae6;
    else if (ch <= (jint) 0xb6f) ch -= (jint) 0xb66;
    else if (ch <= (jint) 0xbef) ch -= (jint) 0xbe6;
    else if (ch <= (jint) 0xc6f) ch -= (jint) 0xc66;
    else if (ch <= (jint) 0xcef) ch -= (jint) 0xce6;
    else if (ch <= (jint) 0xd6f) ch -= (jint) 0xd66;
    else if (ch <= (jint) 0xe59) ch -= (jint) 0xe50;
    else if (ch <= (jint) 0xed9) ch -= (jint) 0xed0;
    else if (ch <= (jint) 0xf29) ch -= (jint) 0xf20;
    else if (ch <= (jint) 0x1049) ch -= (jint) 0x1040;
    else if (ch <= (jint) 0x17e9) ch -= (jint) 0x17e0;
    else if (ch <= (jint) 0x1819) ch -= (jint) 0x1810;
    else if (ch <= (jint) 0x1b59) ch -= (jint) 0x1b50;
    else if (ch <= (jint) 0x1bb9) ch -= (jint) 0x1bb0;
    else if (ch <= (jint) 0x1c49) ch -= (jint) 0x1c40;
    else if (ch <= (jint) 0x1c59) ch -= (jint) 0x1c50;
    else if (ch <= (jint) 0xa8d9) ch -= (jint) 0xa8d0;
    else {
      (void) [sb appendWithNSString:JreStrcat("C", [str charAtWithInt:i])];
      continue;
    }
    (void) [sb appendWithNSString:JreStrcat("I", ch)];
  }
  @try {
    return OrgGeogebraCommonUtilStringUtil_parseDoubleWithNSString_([sb description]);
  }
  @catch (JavaLangException *e) {
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(app, @"InvalidInput");
  }
}

jboolean OrgGeogebraCommonKernelArithmeticMyDouble_isFiniteWithDouble_(jdouble d) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initialize();
  return !JavaLangDouble_isNaNWithDouble_(d) && !JavaLangDouble_isInfiniteWithDouble_(d);
}

NSString *OrgGeogebraCommonKernelArithmeticMyDouble_toStringWithDouble_(jdouble x) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initialize();
  NSString *ret = JavaLangDouble_toStringWithDouble_(x);
  if ([((NSString *) nil_chk(ret)) indexOf:'e'] > -1) {
    return [ret replace:'e' withChar:'E'];
  }
  return ret;
}

NSString *OrgGeogebraCommonKernelArithmeticMyDouble_toStringWithJavaMathBigDecimal_(JavaMathBigDecimal *bd) {
  OrgGeogebraCommonKernelArithmeticMyDouble_initialize();
  NSString *ret = [((JavaMathBigDecimal *) nil_chk(bd)) description];
  if ([((NSString *) nil_chk(ret)) indexOf:'e'] > -1) {
    return [ret replace:'e' withChar:'E'];
  }
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticMyDouble)
