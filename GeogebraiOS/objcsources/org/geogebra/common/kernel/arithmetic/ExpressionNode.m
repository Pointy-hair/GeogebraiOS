//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/arithmetic/ExpressionNode.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/export/MathmlTemplate.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoFractionText.h"
#include "org/geogebra/common/kernel/arithmetic/BooleanValue.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeEvaluator.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/Functional.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/ListValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyBoolean.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/MyNumberPair.h"
#include "org/geogebra/common/kernel/arithmetic/MySpecialDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "org/geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/Polynomial.h"
#include "org/geogebra/common/kernel/arithmetic/ReplaceChildrenByValues.h"
#include "org/geogebra/common/kernel/arithmetic/Term.h"
#include "org/geogebra/common/kernel/arithmetic/TextValue.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/arithmetic/Variable.h"
#include "org/geogebra/common/kernel/arithmetic/VectorValue.h"
#include "org/geogebra/common/kernel/arithmetic3D/MyVec3DNode.h"
#include "org/geogebra/common/kernel/arithmetic3D/Vector3DValue.h"
#include "org/geogebra/common/kernel/geos/CasEvaluableFunction.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoDummyVariable.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/Unicode.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonKernelArithmeticExpressionNode () {
 @public
  OrgGeogebraCommonMainLocalization *loc_;
  OrgGeogebraCommonKernelKernel *kernel_;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> left_, right_;
  OrgGeogebraCommonPluginOperationEnum *operation_;
  jboolean forceVector_, forcePoint_, forceFunction_;
  jboolean brackets_;
}

- (void)simplifyAndEvalCommands;

- (void)doResolveVariables;

- (OrgGeogebraCommonKernelArithmeticPolynomial *)makePolyTreeFromFunctionWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)func
                                                                         withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ;

+ (jboolean)polynomialOperationWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation2;

- (jboolean)expandForOGPWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev;

- (NSString *)getTreeClassWithNSString:(NSString *)prefix;

+ (NSString *)checkMathmlWithNSString:(NSString *)str
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

+ (NSString *)degFixWithNSString:(NSString *)string
withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel;

+ (void)trigWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                                 withNSString:(NSString *)leftStr
                    withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                 withNSString:(NSString *)mathml
                                 withNSString:(NSString *)latex
                                 withNSString:(NSString *)psTricks
                                 withNSString:(NSString *)key
                                 withNSString:(NSString *)libreOffice
    withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
        withOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)loc
                                  withBoolean:(jboolean)needDegrees;

+ (void)trigWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                                 withNSString:(NSString *)leftStr
                    withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                 withNSString:(NSString *)mathml
                                 withNSString:(NSString *)latex
                                 withNSString:(NSString *)psTricks
                                 withNSString:(NSString *)key
                                 withNSString:(NSString *)libreOffice
                                 withNSString:(NSString *)giac
    withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
        withOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)loc
                                  withBoolean:(jboolean)needDegrees;

+ (void)appendReduceFunctionWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                                         withNSString:(NSString *)string;

+ (jboolean)isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                      withDouble:(jdouble)v;

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)exp;

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)linearIntegralWithInt:(jint)i
                                  withOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op
                     withOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv;

+ (jdouble)getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev2;

+ (jdouble)getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                   withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev2;

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrapWithDouble:(jdouble)n;

- (jboolean)checkForFreeVarsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                    withNSString:(NSString *)name;

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)denR
                                                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)denL;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticExpressionNode, loc_, OrgGeogebraCommonMainLocalization *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticExpressionNode, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticExpressionNode, left_, id<OrgGeogebraCommonKernelArithmeticExpressionValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticExpressionNode, right_, id<OrgGeogebraCommonKernelArithmeticExpressionValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticExpressionNode, operation_, OrgGeogebraCommonPluginOperationEnum *)

__attribute__((unused)) static OrgGeogebraCommonPluginOperationEnum *OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(OrgGeogebraCommonKernelArithmeticExpressionNode *self);

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(OrgGeogebraCommonKernelArithmeticExpressionNode *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticExpressionNode_setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> l);

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(OrgGeogebraCommonKernelArithmeticExpressionNode *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticExpressionNode_setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> r);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyLeafs(OrgGeogebraCommonKernelArithmeticExpressionNode *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyAndEvalCommands(OrgGeogebraCommonKernelArithmeticExpressionNode *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyConstantIntegers(OrgGeogebraCommonKernelArithmeticExpressionNode *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticExpressionNode_doResolveVariables(OrgGeogebraCommonKernelArithmeticExpressionNode *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_includesDivisionByWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> val);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_includesNonContinuousIntegral(OrgGeogebraCommonKernelArithmeticExpressionNode *self);

__attribute__((unused)) static jint OrgGeogebraCommonKernelArithmeticExpressionNode_replaceVariablesWithNSString_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, NSString *varName, OrgGeogebraCommonKernelArithmeticFunctionVariable *fVar);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_containsCasEvaluableFunction(OrgGeogebraCommonKernelArithmeticExpressionNode *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_containsGeoFunctionNVar(OrgGeogebraCommonKernelArithmeticExpressionNode *self);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticPolynomial *OrgGeogebraCommonKernelArithmeticExpressionNode_makePolynomialTreeWithOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, OrgGeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticPolynomial *OrgGeogebraCommonKernelArithmeticExpressionNode_makePolyTreeFromFunctionWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, OrgGeogebraCommonKernelArithmeticFunction *func, OrgGeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_polynomialOperationWithOrgGeogebraCommonPluginOperationEnum_(OrgGeogebraCommonPluginOperationEnum *operation2);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_isConstant(OrgGeogebraCommonKernelArithmeticExpressionNode *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_hasOperations(OrgGeogebraCommonKernelArithmeticExpressionNode *self);

__attribute__((unused)) static JavaUtilHashSet *OrgGeogebraCommonKernelArithmeticExpressionNode_getVariables(OrgGeogebraCommonKernelArithmeticExpressionNode *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(OrgGeogebraCommonKernelArithmeticExpressionNode *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_expandForOGPWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelArithmeticExpressionNode_getTreeClassWithNSString_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, NSString *prefix);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelArithmeticExpressionNode_toStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelArithmeticExpressionNode_toValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelArithmeticExpressionNode_checkMathmlWithNSString_withOrgGeogebraCommonKernelStringTemplate_(NSString *str, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelArithmeticExpressionNode_degFixWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(NSString *string, id<OrgGeogebraCommonKernelArithmeticExpressionValue> left, OrgGeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> left, NSString *leftStr, JavaLangStringBuilder *sb, NSString *mathml, NSString *latex, NSString *psTricks, NSString *key, NSString *libreOffice, OrgGeogebraCommonKernelStringTemplate *tpl, OrgGeogebraCommonMainLocalization *loc, jboolean needDegrees);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> left, NSString *leftStr, JavaLangStringBuilder *sb, NSString *mathml, NSString *latex, NSString *psTricks, NSString *key, NSString *libreOffice, NSString *giac, OrgGeogebraCommonKernelStringTemplate *tpl, OrgGeogebraCommonMainLocalization *loc, jboolean needDegrees);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticExpressionNode_appendReduceFunctionWithJavaLangStringBuilder_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(JavaLangStringBuilder *sb, id<OrgGeogebraCommonKernelArithmeticExpressionValue> left, NSString *string);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, jdouble v);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> exp);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticExpressionNode_linearIntegralWithInt_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, jint i, OrgGeogebraCommonPluginOperationEnum *op, OrgGeogebraCommonKernelArithmeticFunctionVariable *fv);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticFunctionVariable *fv, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev2);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticFunctionVariable *fv, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev2);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithDouble_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, jdouble n);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_checkForFreeVarsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, NSString *name);

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticExpressionNode_multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> denR, id<OrgGeogebraCommonKernelArithmeticExpressionValue> denL);

@implementation OrgGeogebraCommonKernelArithmeticExpressionNode

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticExpressionNode_init(self);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
             withOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation
 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, kernel, left, operation, right);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)leaf {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, kernel, leaf);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)node {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, node);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel2
                                           withDouble:(jdouble)d {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(self, kernel2, d);
  return self;
}

- (OrgGeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (OrgGeogebraCommonPluginOperationEnum *)getOperation {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(self);
}

- (void)setOperationWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op {
  operation_ = op;
}

- (void)setHoldsLaTeXtextWithBoolean:(jboolean)flag {
  holdsLaTeXtext_ = flag;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getLeft {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(self);
}

- (void)setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)l {
  OrgGeogebraCommonKernelArithmeticExpressionNode_setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, l);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getLeftTree {
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isExpressionNode]) {
    return (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
  }
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, left_);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getRight {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(self);
}

- (void)setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)r {
  OrgGeogebraCommonKernelArithmeticExpressionNode_setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, r);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getRightTree {
  if (right_ == nil) {
    return nil;
  }
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) isExpressionNode]) {
    return (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
  }
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, right_);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel1 {
  return [self getCopyWithOrgGeogebraCommonKernelKernel:kernel1];
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getCopyWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel1 {
  OrgGeogebraCommonKernelArithmeticExpressionNode *newNode = nil;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> lev = nil, rev = nil;
  if (left_ != nil) {
    lev = OrgGeogebraCommonKernelArithmeticExpressionNode_copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(left_, kernel1);
  }
  if (right_ != nil) {
    rev = OrgGeogebraCommonKernelArithmeticExpressionNode_copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(right_, kernel1);
  }
  if (lev != nil) {
    newNode = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel1, lev, operation_, rev);
    newNode->leaf_ = leaf_;
  }
  else {
    return nil;
  }
  ((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(newNode))->forceVector_ = forceVector_;
  newNode->forcePoint_ = forcePoint_;
  newNode->forceFunction_ = forceFunction_;
  return newNode;
}

+ (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                                 withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(ev, kernel);
}

- (void)simplifyLeafs {
  OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyLeafs(self);
}

- (void)simplifyAndEvalCommands {
  OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyAndEvalCommands(self);
}

- (void)simplifyConstantIntegers {
  OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyConstantIntegers(self);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluateWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getExpressionNodeEvaluator])) evaluateWithOrgGeogebraCommonKernelArithmeticExpressionNode:self withOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (void)resolveVariables {
  OrgGeogebraCommonKernelArithmeticExpressionNode_doResolveVariables(self);
  OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyAndEvalCommands(self);
  OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyLeafs(self);
  switch ([operation_ ordinal]) {
    case OrgGeogebraCommonPluginOperation_POWER:
    if (([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:left_]) && ([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(left_, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble] == JavaLangMath_E)) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:@"e"];
      if ((geo != nil) && [geo needsReplacingInExpressionNode]) {
        operation_ = OrgGeogebraCommonPluginOperationEnum_get_EXP();
        left_ = right_;
        [((OrgGeogebraCommonKernelConstruction *) nil_chk([kernel_ getConstruction])) removeLabelWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      }
    }
    break;
    case OrgGeogebraCommonPluginOperation_MULTIPLY:
    case OrgGeogebraCommonPluginOperation_DIVIDE:
    case OrgGeogebraCommonPluginOperation_PLUS:
    case OrgGeogebraCommonPluginOperation_MINUS:
    if (([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:left_]) && ([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(left_, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble] == JavaLangMath_E)) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:@"e"];
      if ((geo != nil) && [geo needsReplacingInExpressionNode]) {
        left_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0), OrgGeogebraCommonPluginOperationEnum_get_EXP(), nil);
        [((OrgGeogebraCommonKernelConstruction *) nil_chk([kernel_ getConstruction])) removeLabelWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      }
    }
    else if (([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right_]) && ([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(right_, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble] == JavaLangMath_E)) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:@"e"];
      if ((geo != nil) && [geo needsReplacingInExpressionNode]) {
        right_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0), OrgGeogebraCommonPluginOperationEnum_get_EXP(), nil);
        [((OrgGeogebraCommonKernelConstruction *) nil_chk([kernel_ getConstruction])) removeLabelWithOrgGeogebraCommonKernelGeosGeoElement:geo];
      }
    }
    break;
    default:
    break;
  }
}

- (void)doResolveVariables {
  OrgGeogebraCommonKernelArithmeticExpressionNode_doResolveVariables(self);
}

- (jboolean)shouldEvaluateToGeoVector {
  if (forcePoint_) {
    return NO;
  }
  if (forceVector_) {
    return YES;
  }
  jboolean evalToVector = NO;
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isExpressionNode]) {
    evalToVector = ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) shouldEvaluateToGeoVector]);
  }
  else if ([left_ isGeoElement]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left_, [OrgGeogebraCommonKernelGeosGeoElement class]);
    evalToVector = ([geo isGeoVector] || [geo isNumberValue]);
  }
  else if ([left_ isNumberValue]) {
    evalToVector = YES;
  }
  if ((right_ != nil) && evalToVector) {
    if ([right_ isExpressionNode]) {
      evalToVector = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) shouldEvaluateToGeoVector];
    }
    else if ([right_ isGeoElement]) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(right_, [OrgGeogebraCommonKernelGeosGeoElement class]);
      evalToVector = ([geo isGeoVector] || [geo isNumberValue]);
    }
    else if ([right_ isNumberValue]) {
      evalToVector = YES;
    }
  }
  return evalToVector;
}

- (jboolean)includesDivisionByWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)val {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_includesDivisionByWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, val);
}

- (jboolean)includesNonContinuousIntegral {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_includesNonContinuousIntegral(self);
}

- (jint)replaceVariablesWithNSString:(NSString *)varName
withOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fVar {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_replaceVariablesWithNSString_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(self, varName, fVar);
}

- (jint)replaceXYZnodesWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)xVar
                       withOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)yVar
                       withOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)zVar
                                                       withJavaUtilArrayList:(JavaUtilArrayList *)undecided {
  if ((xVar == nil) && ((yVar == nil) & (zVar == nil))) {
    return 0;
  }
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isExpressionNode]) {
    [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) replaceXYZnodesWithOrgGeogebraCommonKernelArithmeticFunctionVariable:xVar withOrgGeogebraCommonKernelArithmeticFunctionVariable:yVar withOrgGeogebraCommonKernelArithmeticFunctionVariable:zVar withJavaUtilArrayList:undecided];
  }
  if ((right_ != nil) && [right_ isExpressionNode]) {
    [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) replaceXYZnodesWithOrgGeogebraCommonKernelArithmeticFunctionVariable:xVar withOrgGeogebraCommonKernelArithmeticFunctionVariable:yVar withOrgGeogebraCommonKernelArithmeticFunctionVariable:zVar withJavaUtilArrayList:undecided];
  }
  switch ([operation_ ordinal]) {
    case OrgGeogebraCommonPluginOperation_XCOORD:
    if (xVar != nil) {
      [((JavaUtilArrayList *) nil_chk(undecided)) addWithId:self];
      operation_ = OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION();
      right_ = left_;
      left_ = xVar;
    }
    break;
    case OrgGeogebraCommonPluginOperation_YCOORD:
    if (yVar != nil) {
      [((JavaUtilArrayList *) nil_chk(undecided)) addWithId:self];
      operation_ = OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION();
      right_ = left_;
      left_ = yVar;
    }
    break;
    case OrgGeogebraCommonPluginOperation_ZCOORD:
    if (zVar != nil) {
      [((JavaUtilArrayList *) nil_chk(undecided)) addWithId:self];
      operation_ = OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION();
      right_ = left_;
      left_ = zVar;
    }
    break;
    case OrgGeogebraCommonPluginOperation_POWER:
    if ([left_ isExpressionNode] && ((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))->operation_ == OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION() && ![((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) hasBrackets]) {
      right_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))), OrgGeogebraCommonPluginOperationEnum_get_POWER(), right_);
      left_ = OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])));
      operation_ = OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY();
    }
    break;
    case OrgGeogebraCommonPluginOperation_FACTORIAL:
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isExpressionNode] && ((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))->operation_ == OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION() && ![((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) hasBrackets]) {
      right_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))), OrgGeogebraCommonPluginOperationEnum_get_FACTORIAL(), nil);
      left_ = OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])));
      operation_ = OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY();
    }
    case OrgGeogebraCommonPluginOperation_SQRT_SHORT:
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isExpressionNode] && ((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))->operation_ == OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION() && ![((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) hasBrackets]) {
      right_ = OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])));
      left_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))), OrgGeogebraCommonPluginOperationEnum_get_SQRT(), nil);
      operation_ = OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY();
    }
    default:
    break;
  }
  return [((JavaUtilArrayList *) nil_chk(undecided)) size];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)traverseWithOrgGeogebraCommonKernelArithmeticTraversing:(id<OrgGeogebraCommonKernelArithmeticTraversing>)t {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((id<OrgGeogebraCommonKernelArithmeticTraversing>) nil_chk(t)) processWithOrgGeogebraCommonKernelArithmeticExpressionValue:self];
  if (ev != self) return ev;
  left_ = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:t];
  if (right_ != nil) right_ = [right_ traverseWithOrgGeogebraCommonKernelArithmeticTraversing:t];
  return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) unwrap])) wrap];
}

- (jboolean)inspectWithOrgGeogebraCommonKernelArithmeticInspecting:(id<OrgGeogebraCommonKernelArithmeticInspecting>)t {
  return [((id<OrgGeogebraCommonKernelArithmeticInspecting>) nil_chk(t)) checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:self] || [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) inspectWithOrgGeogebraCommonKernelArithmeticInspecting:t] || (right_ != nil && [right_ inspectWithOrgGeogebraCommonKernelArithmeticInspecting:t]);
}

- (void)replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isGeoElement]) {
    OrgGeogebraCommonKernelGeosGeoElement *treeGeo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left_, [OrgGeogebraCommonKernelGeosGeoElement class]);
    if ((left_ == geo) || [treeGeo isChildOfWithOrgGeogebraCommonKernelGeosGeoElement:geo]) {
      left_ = [treeGeo copyInternalWithOrgGeogebraCommonKernelConstruction:[treeGeo getConstruction]];
    }
  }
  else if ([OrgGeogebraCommonKernelArithmeticReplaceChildrenByValues_class_() isInstance:left_]) {
    [((id<OrgGeogebraCommonKernelArithmeticReplaceChildrenByValues>) check_protocol_cast(left_, @protocol(OrgGeogebraCommonKernelArithmeticReplaceChildrenByValues))) replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  if (right_ != nil) {
    if ([right_ isGeoElement]) {
      OrgGeogebraCommonKernelGeosGeoElement *treeGeo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(right_, [OrgGeogebraCommonKernelGeosGeoElement class]);
      if ((right_ == geo) || [treeGeo isChildOfWithOrgGeogebraCommonKernelGeosGeoElement:geo]) {
        right_ = [treeGeo copyInternalWithOrgGeogebraCommonKernelConstruction:[treeGeo getConstruction]];
      }
    }
    else if ([OrgGeogebraCommonKernelArithmeticReplaceChildrenByValues_class_() isInstance:right_]) {
      [((id<OrgGeogebraCommonKernelArithmeticReplaceChildrenByValues>) check_protocol_cast(right_, @protocol(OrgGeogebraCommonKernelArithmeticReplaceChildrenByValues))) replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (jboolean)containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if (leaf_) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:ev];
  }
  return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:ev] || [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:ev];
}

- (jboolean)containsCasEvaluableFunction {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_containsCasEvaluableFunction(self);
}

- (jboolean)containsGeoFunctionNVar {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_containsGeoFunctionNVar(self);
}

- (OrgGeogebraCommonKernelArithmeticPolynomial *)makePolynomialTreeWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_makePolynomialTreeWithOrgGeogebraCommonKernelArithmeticEquation_(self, equ);
}

- (OrgGeogebraCommonKernelArithmeticPolynomial *)makePolyTreeFromFunctionWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)func
                                                                         withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_makePolyTreeFromFunctionWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticEquation_(self, func, equ);
}

+ (jboolean)polynomialOperationWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation2 {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_polynomialOperationWithOrgGeogebraCommonPluginOperationEnum_(operation2);
}

- (jboolean)isConstant {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_isConstant(self);
}

- (jboolean)evaluatesToNonComplex2DVector {
  if (operation_ == OrgGeogebraCommonPluginOperationEnum_get_RANDOM() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_XCOORD() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_YCOORD() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_ZCOORD() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_ABS() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_ARG() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_ALT()) {
    return NO;
  }
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self)) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesToNonComplex2DVector];
  }
  if (OrgGeogebraCommonPluginOperationEnum_isSimpleFunctionWithOrgGeogebraCommonPluginOperationEnum_(operation_) || operation_ == OrgGeogebraCommonPluginOperationEnum_get_CONJUGATE()) {
    return NO;
  }
  jboolean leftVector = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesToNonComplex2DVector];
  jboolean rightVector = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) evaluatesToNonComplex2DVector];
  jboolean ret = leftVector || rightVector;
  if (leftVector && rightVector && (operation_ == OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_VECTORPRODUCT())) {
    ret = NO;
  }
  return ret;
}

- (jboolean)evaluatesToVectorNotPoint {
  if (operation_ == OrgGeogebraCommonPluginOperationEnum_get_RANDOM() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_XCOORD() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_YCOORD() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_ZCOORD() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_ABS() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_ARG() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_ALT()) {
    return NO;
  }
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self)) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesToVectorNotPoint];
  }
  if (OrgGeogebraCommonPluginOperationEnum_isSimpleFunctionWithOrgGeogebraCommonPluginOperationEnum_(operation_) || operation_ == OrgGeogebraCommonPluginOperationEnum_get_CONJUGATE()) {
    return NO;
  }
  jboolean leftVector = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesToVectorNotPoint];
  jboolean rightVector = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) evaluatesToVectorNotPoint];
  jboolean ret = leftVector || rightVector;
  if (leftVector && rightVector && (operation_ == OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_VECTORPRODUCT())) {
    ret = NO;
  }
  return ret;
}

- (jboolean)evaluatesTo3DVector {
  if (operation_ == OrgGeogebraCommonPluginOperationEnum_get_RANDOM() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_XCOORD() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_YCOORD() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_ZCOORD()) {
    return NO;
  }
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self)) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesTo3DVector];
  }
  jboolean leftVector = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesTo3DVector];
  jboolean rightVector = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) evaluatesTo3DVector];
  jboolean ret = leftVector || rightVector;
  if (leftVector && rightVector && operation_ == OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY()) {
    ret = NO;
  }
  return ret;
}

- (void)setForceVector {
  forceVector_ = YES;
}

- (jboolean)isForcedVector {
  return forceVector_;
}

- (void)setForcePoint {
  forcePoint_ = YES;
}

- (jboolean)isForcedPoint {
  return forcePoint_;
}

- (void)setForceFunction {
  forceFunction_ = YES;
}

- (jboolean)isForcedFunction {
  return forceFunction_;
}

- (jboolean)hasOperations {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_hasOperations(self);
}

- (JavaUtilHashSet *)getVariables {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_getVariables(self);
}

- (IOSObjectArray *)getGeoElementVariables {
  JavaUtilHashSet *varset = OrgGeogebraCommonKernelArithmeticExpressionNode_getVariables(self);
  if (varset == nil) {
    return nil;
  }
  id<JavaUtilIterator> i = [((JavaUtilHashSet *) nil_chk(varset)) iterator];
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[varset size] type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  jint j = 0;
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    (void) IOSObjectArray_Set(ret, j++, [i next]);
  }
  return ret;
}

- (jboolean)isLeaf {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self);
}

- (jboolean)isSingleGeoElement {
  return leaf_ && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isGeoElement];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getSingleGeoElement {
  return (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left_, [OrgGeogebraCommonKernelGeosGeoElement class]);
}

- (jboolean)isSingleVariable {
  return (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self) && ([left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]]));
}

- (jboolean)isImaginaryUnit {
  return (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self) && ([left_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoVec2D class]]) && [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(((OrgGeogebraCommonKernelGeosGeoVec2D *) check_class_cast(left_, [OrgGeogebraCommonKernelGeosGeoVec2D class])))) isImaginaryUnit]);
}

- (jboolean)containsMyStringBuffer {
  if (([left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyStringBuffer class]]) || ([right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyStringBuffer class]])) {
    return YES;
  }
  jboolean ret = NO;
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isExpressionNode]) {
    ret = (ret || [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) containsMyStringBuffer]);
  }
  if ((right_ != nil) && [right_ isExpressionNode]) {
    ret = (ret || [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) containsMyStringBuffer]);
  }
  return ret;
}

- (NSString *)getCASstringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                        withBoolean:(jboolean)symbolic {
  NSString *ret = nil;
  @try {
    if (leaf_) {
      if (symbolic && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isGeoElement]) {
        ret = [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left_, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
      }
      else if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isExpressionNode]) {
        ret = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getCASstringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:symbolic];
      }
      else {
        ret = symbolic ? [left_ toStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : [left_ toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
      }
    }
    else {
      NSString *leftStr = nil, *rightStr = nil;
      if (symbolic && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isGeoElement]) {
        leftStr = [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left_, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
      }
      else if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isExpressionNode]) {
        leftStr = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getCASstringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:symbolic];
      }
      else {
        leftStr = symbolic ? [left_ toStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : [left_ toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
      }
      if (right_ != nil) {
        if (symbolic && [right_ isGeoElement]) {
          rightStr = [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(right_, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
        }
        else if ([right_ isExpressionNode]) {
          rightStr = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getCASstringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:symbolic];
        }
        else {
          rightStr = symbolic ? [right_ toStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : [right_ toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
        }
      }
      ret = OrgGeogebraCommonKernelArithmeticExpressionNode_operationToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withNSString_withNSString_withBoolean_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonKernelKernel_(left_, right_, operation_, leftStr, rightStr, !symbolic, tpl, kernel_);
    }
  }
  @finally {
  }
  return ret;
}

- (NSString *)getTreeClass {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_getTreeClassWithNSString_(self, @"");
}

- (jboolean)expandForOGPWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_expandForOGPWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, ev);
}

- (NSString *)getTreeClassWithNSString:(NSString *)prefix {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_getTreeClassWithNSString_(self, prefix);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_toStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_toValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self)) {
    if (left_ != nil) {
      return [left_ toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
    }
  }
  NSString *leftStr = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  NSString *rightStr = nil;
  if (right_ != nil) {
    rightStr = [right_ toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return OrgGeogebraCommonKernelArithmeticExpressionNode_operationToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withNSString_withNSString_withBoolean_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonKernelKernel_(left_, right_, operation_, leftStr, rightStr, YES, tpl, kernel_);
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  NSString *ret;
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self)) {
    if (left_ != nil) {
      ret = [left_ toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl];
      return OrgGeogebraCommonKernelArithmeticExpressionNode_checkMathmlWithNSString_withOrgGeogebraCommonKernelStringTemplate_(ret, tpl);
    }
  }
  NSString *leftStr = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl];
  NSString *rightStr = nil;
  if (right_ != nil) {
    rightStr = [right_ toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl];
    if (((operation_ == OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR()) || (operation_ == OrgGeogebraCommonPluginOperationEnum_get_ELEMENT_OF())) && ([right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]])) {
      rightStr = [rightStr substring:7 endIndex:((jint) [((NSString *) nil_chk(rightStr)) length]) - 9];
      rightStr = [((NSString *) nil_chk(rightStr)) concat:@"}"];
    }
  }
  ret = OrgGeogebraCommonKernelArithmeticExpressionNode_operationToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withNSString_withNSString_withBoolean_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonKernelKernel_(left_, right_, operation_, leftStr, rightStr, !symbolic, tpl, kernel_);
  return OrgGeogebraCommonKernelArithmeticExpressionNode_checkMathmlWithNSString_withOrgGeogebraCommonKernelStringTemplate_(ret, tpl);
}

+ (NSString *)checkMathmlWithNSString:(NSString *)str
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_checkMathmlWithNSString_withOrgGeogebraCommonKernelStringTemplate_(str, tpl);
}

+ (NSString *)operationToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                               withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)right
                                           withOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation
                                                                       withNSString:(NSString *)leftStr
                                                                       withNSString:(NSString *)rightStr
                                                                        withBoolean:(jboolean)valueForm
                                          withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                  withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_operationToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withNSString_withNSString_withBoolean_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonKernelKernel_(left, right, operation, leftStr, rightStr, valueForm, tpl, kernel);
}

+ (NSString *)degFixWithNSString:(NSString *)string
withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_degFixWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(string, left, kernel);
}

+ (void)trigWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                                 withNSString:(NSString *)leftStr
                    withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                 withNSString:(NSString *)mathml
                                 withNSString:(NSString *)latex
                                 withNSString:(NSString *)psTricks
                                 withNSString:(NSString *)key
                                 withNSString:(NSString *)libreOffice
    withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
        withOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)loc
                                  withBoolean:(jboolean)needDegrees {
  OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, mathml, latex, psTricks, key, libreOffice, tpl, loc, needDegrees);
}

+ (void)trigWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                                 withNSString:(NSString *)leftStr
                    withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                 withNSString:(NSString *)mathml
                                 withNSString:(NSString *)latex
                                 withNSString:(NSString *)psTricks
                                 withNSString:(NSString *)key
                                 withNSString:(NSString *)libreOffice
                                 withNSString:(NSString *)giac
    withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
        withOrgGeogebraCommonMainLocalization:(OrgGeogebraCommonMainLocalization *)loc
                                  withBoolean:(jboolean)needDegrees {
  OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, mathml, latex, psTricks, key, libreOffice, giac, tpl, loc, needDegrees);
}

+ (void)appendReduceFunctionWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)left
                                         withNSString:(NSString *)string {
  OrgGeogebraCommonKernelArithmeticExpressionNode_appendReduceFunctionWithJavaLangStringBuilder_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(sb, left, string);
}

+ (jboolean)isMultiplyOrDivideWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)exp {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_isMultiplyOrDivideWithOrgGeogebraCommonKernelArithmeticExpressionNode_(exp);
}

+ (jint)opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue_(ev);
}

- (jboolean)isNumberValue {
  return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isNumberValue];
}

- (jboolean)evaluatesToList {
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self)) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesToList];
  }
  if (OrgGeogebraCommonPluginOperationEnum_isSimpleFunctionWithOrgGeogebraCommonPluginOperationEnum_(operation_) || operation_ == OrgGeogebraCommonPluginOperationEnum_get_FUNCTION()) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesToList];
  }
  if (operation_ == OrgGeogebraCommonPluginOperationEnum_get_IS_ELEMENT_OF() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_IS_SUBSET_OF() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_IS_SUBSET_OF_STRICT() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_NOT_EQUAL() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_FREEHAND() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_DATA() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_ELEMENT_OF() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR()) {
    return NO;
  }
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesToList] || (right_ != nil && [right_ evaluatesToList])) {
    return YES;
  }
  return NO;
}

- (jboolean)evaluatesToText {
  if (leaf_) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesToText];
  }
  return ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(operation_)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_PLUS()] || [operation_ isEqual:OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY()]) && ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesToText] || [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) evaluatesToText]);
}

- (jboolean)isExpressionNode {
  return YES;
}

+ (jboolean)isEqualWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev1
                   withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev2 {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(ev1, ev2);
}

+ (jboolean)isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                   withDouble:(jdouble)val
                                                                  withBoolean:(jboolean)symbolic {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(ev, val, symbolic);
}

- (jboolean)isTopLevelCommand {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self) && ([left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]);
}

- (OrgGeogebraCommonKernelArithmeticCommand *)getTopLevelCommand {
  if ([self isTopLevelCommand]) {
    return (OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticCommand class]);
  }
  return nil;
}

- (JavaLangDouble *)getCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv {
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self)) {
    if ([((NSString *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_toStringWithOrgGeogebraCommonKernelStringTemplate_(self, OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()))) isEqual:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
      return JavaLangDouble_valueOfWithDouble_(1.0);
    }
    return JavaLangDouble_valueOfWithDouble_(0.0);
  }
  JavaLangDouble *lc = [self getLeftTree] == nil ? nil : [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getLeftTree])) getCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv];
  JavaLangDouble *rc = [self getRightTree] == nil ? nil : [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getRightTree])) getCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv];
  if ((lc == nil) || (rc == nil)) {
    return nil;
  }
  switch ([self->operation_ ordinal]) {
    case OrgGeogebraCommonPluginOperation_PLUS:
    return JavaLangDouble_valueOfWithDouble_([lc doubleValue] + [rc doubleValue]);
    case OrgGeogebraCommonPluginOperation_MINUS:
    return JavaLangDouble_valueOfWithDouble_([lc doubleValue] - [rc doubleValue]);
    case OrgGeogebraCommonPluginOperation_MULTIPLY:
    if (![((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getRightTree])) containsFunctionVariable]) {
      return JavaLangDouble_valueOfWithDouble_([lc doubleValue] * [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getRightTree])) evaluateDouble]);
    }
    else if (![((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getLeftTree])) containsFunctionVariable]) {
      return JavaLangDouble_valueOfWithDouble_([rc doubleValue] * [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getLeftTree])) evaluateDouble]);
    }
    break;
    case OrgGeogebraCommonPluginOperation_DIVIDE:
    if (![((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getRightTree])) containsFunctionVariable]) {
      return JavaLangDouble_valueOfWithDouble_([lc doubleValue] / [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getRightTree])) evaluateDouble]);
    }
    break;
    default:
    break;
  }
  if (([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv] || [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv])) {
    return nil;
  }
  return JavaLangDouble_valueOfWithDouble_(0.0);
}

+ (jboolean)chainedBooleanOpWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_chainedBooleanOpWithOrgGeogebraCommonPluginOperationEnum_(op);
}

+ (jboolean)isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                      withDouble:(jdouble)v {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(ev, v);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v2 {
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(v2, 0)) return self;
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self) && OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(left_, 0)) return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v2)) wrap];
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_PLUS(), v2);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)lessThanWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v2 {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_LESS(), v2);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)lessThanWithDouble:(jdouble)d {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_LESS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, d));
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)lessThanEqualWithDouble:(jdouble)d {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_LESS_EQUAL(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, d));
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)erf {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_ERF(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)abs {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_ABS(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)sec {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_SEC(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)tan {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_TAN(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)sech {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_SECH(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)tanh {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_TANH(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)cosech {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_CSCH(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)coth {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_COTH(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)cosec {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_CSC(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)cot {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_COT(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)factorial {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_FACTORIAL(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)ln {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_LOG(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)gamma {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_GAMMA(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)gammaIncompleteReverseArgsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v2 {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, v2, OrgGeogebraCommonPluginOperationEnum_get_GAMMA_INCOMPLETE(), self);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)gammaIncompleteWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v2 {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_GAMMA_INCOMPLETE(), v2);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)betaWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v2 {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_BETA(), v2);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)exp {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_EXP(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)polygammaWithDouble:(jdouble)n {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithDouble_(self, n), OrgGeogebraCommonPluginOperationEnum_get_POLYGAMMA(), self);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)sin {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_SIN(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)sinh {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_SINH(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)cosh {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_COSH(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)cos {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_COS(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)reciprocate {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_POWER(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, -1));
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)sqrt {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_SQRT(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)cbrt {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_CBRT(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)sgn {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_SGN(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)atan {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_ARCTAN(), nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)reverseSign {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, -1.0), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), self);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)reverseSign2 {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 0.0), OrgGeogebraCommonPluginOperationEnum_get_MINUS(), self);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)betaRegularizedWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v1
                                                                    withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v2 {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyNumberPair_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, v1), OrgGeogebraCommonPluginOperationEnum_get_BETA_INCOMPLETE_REGULARIZED(), v2);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)square {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_POWER(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 2.0));
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v2 {
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(v2, 0)) return self;
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self) && OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(left_, 0)) return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v2)) wrap])) reverseSign];
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), v2);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)plusWithDouble:(jdouble)d {
  if (d == 0) {
    return self;
  }
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_PLUS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, d));
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)plusRWithDouble:(jdouble)d {
  if (d == 0) {
    return self;
  }
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, d), OrgGeogebraCommonPluginOperationEnum_get_PLUS(), self);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)multiplyWithDouble:(jdouble)d {
  if (d == 0 || OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(self, 0)) {
    return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 0);
  }
  else if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(1, d)) {
    return self;
  }
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, d));
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)multiplyRWithDouble:(jdouble)d {
  if (d == 0) {
    return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 0);
  }
  else if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(1, d)) {
    return self;
  }
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, d), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), self);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)powerWithDouble:(jdouble)d {
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(d)) {
    return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1);
  }
  else if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(1, d) || OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(self, 1) || OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(self, 0)) {
    return self;
  }
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_POWER(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, d));
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)subtractWithDouble:(jdouble)d {
  if (d == 0) {
    return self;
  }
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, d));
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)subtractRWithDouble:(jdouble)d {
  if (d == 0) {
    return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, -1), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), self);
  }
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, d), OrgGeogebraCommonPluginOperationEnum_get_MINUS(), self);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v2 {
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(v2, 0) || OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(self, 1)) return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v2)) wrap];
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(v2, 1) || OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(self, 0)) return self;
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, v2, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), self);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)multiplyRWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v2 {
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(v2, 0)) return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v2)) wrap];
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(v2, 1)) return self;
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), v2);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)powerWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v2 {
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(v2, 0)) return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1);
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(v2, 1)) return self;
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_POWER(), v2);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)powerRWithDouble:(jdouble)d {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, d), OrgGeogebraCommonPluginOperationEnum_get_POWER(), self);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v2 {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), v2);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)divideWithDouble:(jdouble)d {
  if (d == 1) {
    return self;
  }
  if (d == -1) {
    return [self multiplyRWithDouble:-1];
  }
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, d));
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)and__WithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v2 {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_AND(), v2);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)negation {
  OrgGeogebraCommonPluginOperationEnum *opNegated = [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(self->operation_)) negate];
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_NOT())) isEqual:opNegated]) {
    return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_NOT(), nil);
  }
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, left_, opNegated, right_);
}

- (jboolean)replacePowersRootsWithBoolean:(jboolean)toRoot
                                  withInt:(jint)maxRoot {
  jboolean didReplacement = NO;
  if (toRoot && OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(self) == OrgGeogebraCommonPluginOperationEnum_get_POWER() && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(self))) isExpressionNode]) {
    jboolean hit = NO;
    OrgGeogebraCommonKernelArithmeticExpressionNode *rightLeaf = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(self), [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if ((OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(nil_chk(rightLeaf)) == OrgGeogebraCommonPluginOperationEnum_get_DIVIDE()) && OrgGeogebraCommonKernelArithmeticExpressionNode_isConstant(rightLeaf)) {
      if ([((NSString *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(rightLeaf))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@"2"]) {
        [self setOperationWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_SQRT()];
        hit = YES;
      }
      else if ([((NSString *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(rightLeaf))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@"3"]) {
        [self setOperationWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_CBRT()];
        hit = YES;
      }
      else if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(rightLeaf))) unwrap])) isExpressionNode] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(rightLeaf)] && OrgGeogebraCommonKernelKernel_isIntegerWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(rightLeaf), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble]) && [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(rightLeaf), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble] <= maxRoot) {
        [self setOperationWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_NROOT()];
        OrgGeogebraCommonKernelArithmeticExpressionNode_setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(rightLeaf), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble]));
        hit = YES;
      }
      if (hit) {
        didReplacement = YES;
        if ([((NSString *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(rightLeaf))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@"1"]) {
          if (operation_ != OrgGeogebraCommonPluginOperationEnum_get_NROOT()) OrgGeogebraCommonKernelArithmeticExpressionNode_setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, JavaLangDouble_NaN));
        }
        else {
          jdouble c = 1;
          if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(rightLeaf))) isConstant]) c = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(rightLeaf))) evaluateDouble];
          if (c < 0) {
            OrgGeogebraCommonKernelArithmeticExpressionNode_setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(self))) wrap])) powerWithDouble:-c], OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(self), OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(self)));
            [self setOperationWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_DIVIDE()];
            OrgGeogebraCommonKernelArithmeticExpressionNode_setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0));
          }
          else OrgGeogebraCommonKernelArithmeticExpressionNode_setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(self), OrgGeogebraCommonPluginOperationEnum_get_POWER(), OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(rightLeaf)));
        }
      }
    }
  }
  else if (!toRoot) {
    jboolean hit = NO;
    OrgGeogebraCommonKernelArithmeticExpressionNode *power = nil;
    if (OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(self) == OrgGeogebraCommonPluginOperationEnum_get_SQRT()) {
      power = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1), OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 2));
      hit = YES;
    }
    else if (OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(self) == OrgGeogebraCommonPluginOperationEnum_get_CBRT()) {
      power = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1), OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 3));
      hit = YES;
    }
    else if (OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(self) == OrgGeogebraCommonPluginOperationEnum_get_NROOT()) {
      power = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1), OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), right_);
      hit = YES;
    }
    if (hit) {
      didReplacement = YES;
      [self setOperationWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_POWER()];
      OrgGeogebraCommonKernelArithmeticExpressionNode_setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, power);
    }
  }
  return didReplacement;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)oldObj
                                                               withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)newObj {
  return [self traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_Replacer_getReplacerWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(oldObj, newObj)];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)buildFunctionWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv {
  OrgGeogebraCommonKernelArithmeticFunction *tempFun = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(self, fv);
  [tempFun initFunction];
  return new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction], tempFun);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)unwrap {
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self)) return OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(self);
  return self;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return self;
}

- (jboolean)hasCoords {
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self)) return left_ != nil && [left_ hasCoords];
  if (operation_ == OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR()) {
    OrgGeogebraCommonMainApp_printStacktraceWithId_(JreStrcat("@C@CZ", left_, ',', [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) getClass], ',', [left_ hasCoords]));
  }
  return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(self))) hasCoords] || [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(self))) hasCoords];
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                   withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  {
    OrgGeogebraCommonKernelArithmeticMyNumberPair *np;
    OrgGeogebraCommonKernelArithmeticMyList *rtDiff;
    OrgGeogebraCommonKernelArithmeticMyList *rt;
    switch ([operation_ ordinal]) {
      case OrgGeogebraCommonPluginOperation_LESS:
      case OrgGeogebraCommonPluginOperation_LESS_EQUAL:
      case OrgGeogebraCommonPluginOperation_GREATER:
      case OrgGeogebraCommonPluginOperation_GREATER_EQUAL:
      case OrgGeogebraCommonPluginOperation_NOT:
      case OrgGeogebraCommonPluginOperation_XCOORD:
      case OrgGeogebraCommonPluginOperation_YCOORD:
      case OrgGeogebraCommonPluginOperation_ZCOORD:
      return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, 0.0);
      case OrgGeogebraCommonPluginOperation_POWER:
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) isNumberValue] && ![right_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_([right_ evaluateDouble])) {
          return OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, 0.0));
        }
        if ([right_ isConstant]) {
          jdouble rightDoub = [right_ evaluateDouble];
          if (!OrgGeogebraCommonKernelKernel_isIntegerWithDouble_(rightDoub)) {
            IOSDoubleArray *fraction = OrgGeogebraCommonKernelAlgosAlgoFractionText_DecimalToFractionWithDouble_withDouble_(rightDoub, OrgGeogebraCommonKernelKernel_STANDARD_PRECISION);
            jdouble a = IOSDoubleArray_Get(nil_chk(fraction), 0);
            jdouble b = IOSDoubleArray_Get(fraction, 1);
            if (b == 0) {
              return OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, JavaLangDouble_NaN));
            }
            OrgGeogebraCommonKernelArithmeticExpressionNode *newPower = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, a - b)))) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, b)];
            return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) powerWithOrgGeogebraCommonKernelArithmeticExpressionValue:newPower])) multiplyWithDouble:a])) divideWithDouble:b])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]];
          }
        }
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) powerWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, right_))) subtractWithDouble:1]])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:right_];
      }
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) powerWithOrgGeogebraCommonKernelArithmeticExpressionValue:right_])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [right_ derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) ln]])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, right_))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]])) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_]]];
      case OrgGeogebraCommonPluginOperation_NO_OPERATION:
      return OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]);
      case OrgGeogebraCommonPluginOperation_DIVIDE:
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) isNumberValue] && ![right_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel])) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:right_];
      }
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:right_])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [right_ derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_]])) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, right_))) square]];
      case OrgGeogebraCommonPluginOperation_MULTIPLY:
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) isNumberValue] && ![right_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:right_];
      }
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isNumberValue] && ![left_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, right_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_];
      }
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[right_ derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, right_))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[left_ derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]]];
      case OrgGeogebraCommonPluginOperation_PLUS:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]];
      case OrgGeogebraCommonPluginOperation_MINUS:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]];
      case OrgGeogebraCommonPluginOperation_SIN:
      return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_COS(), nil) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk((left_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]];
      case OrgGeogebraCommonPluginOperation_COS:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_SIN(), nil) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk((left_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]])) multiplyWithDouble:-1];
      case OrgGeogebraCommonPluginOperation_TAN:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_SEC(), nil) square])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk((left_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]];
      case OrgGeogebraCommonPluginOperation_SEC:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_SEC(), nil) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_TAN(), nil)])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk((left_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]];
      case OrgGeogebraCommonPluginOperation_CSC:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_CSC(), nil) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_COT(), nil)])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk((left_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]])) multiplyWithDouble:-1];
      case OrgGeogebraCommonPluginOperation_COT:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_CSC(), nil) square])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk((left_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]])) multiplyWithDouble:-1];
      case OrgGeogebraCommonPluginOperation_SINH:
      return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_COSH(), nil) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk((left_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]];
      case OrgGeogebraCommonPluginOperation_COSH:
      return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_SINH(), nil) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk((left_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]];
      case OrgGeogebraCommonPluginOperation_TANH:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_SECH(), nil) square])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk((left_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]];
      case OrgGeogebraCommonPluginOperation_SECH:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_SECH(), nil) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_TANH(), nil)])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk((left_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]])) multiplyWithDouble:-1];
      case OrgGeogebraCommonPluginOperation_CSCH:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_CSCH(), nil) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_COTH(), nil)])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk((left_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]])) multiplyWithDouble:-1];
      case OrgGeogebraCommonPluginOperation_COTH:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_CSCH(), nil) square])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk((left_))) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]])) multiplyWithDouble:-1];
      case OrgGeogebraCommonPluginOperation_ARCSIN:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) square])) subtractRWithDouble:1])) sqrt]];
      case OrgGeogebraCommonPluginOperation_ARCCOS:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) square])) subtractRWithDouble:1])) sqrt]])) multiplyWithDouble:-1];
      case OrgGeogebraCommonPluginOperation_ARCTAN:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) square])) plusWithDouble:1]];
      case OrgGeogebraCommonPluginOperation_ASINH:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) square])) plusWithDouble:1])) sqrt]];
      case OrgGeogebraCommonPluginOperation_ACOSH:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) plusWithDouble:1])) sqrt])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) subtractWithDouble:1])) sqrt]]];
      case OrgGeogebraCommonPluginOperation_ATANH:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) square])) subtractRWithDouble:1]];
      case OrgGeogebraCommonPluginOperation_ABS:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) abs]];
      case OrgGeogebraCommonPluginOperation_SGN:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, 0)))) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv];
      case OrgGeogebraCommonPluginOperation_EXP:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) exp]];
      case OrgGeogebraCommonPluginOperation_SI:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) sin])) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_]];
      case OrgGeogebraCommonPluginOperation_CI:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) cos])) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_]];
      case OrgGeogebraCommonPluginOperation_EI:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) exp])) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_]];
      case OrgGeogebraCommonPluginOperation_ERF:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithDouble_(self, 2)])) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) square])) exp])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithDouble_(self, JavaLangMath_PI))) sqrt]]];
      case OrgGeogebraCommonPluginOperation_PSI:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) polygammaWithDouble:1]];
      case OrgGeogebraCommonPluginOperation_POLYGAMMA:
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isNumberValue] && ![left_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
        jdouble n = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(left_, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))) getDouble];
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, right_))) polygammaWithDouble:n + 1]];
      }
      break;
      case OrgGeogebraCommonPluginOperation_IF_ELSE:
      np = (OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticMyNumberPair class]);
      np = new_OrgGeogebraCommonKernelArithmeticMyNumberPair_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, ((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(np))->x_, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(np->y_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]);
      return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, np, OrgGeogebraCommonPluginOperationEnum_get_IF_ELSE(), [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]);
      case OrgGeogebraCommonPluginOperation_IF:
      return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_IF(), [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]);
      case OrgGeogebraCommonPluginOperation_IF_LIST:
      rtDiff = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(kernel);
      rt = (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(right_, [OrgGeogebraCommonKernelArithmeticMyList class]);
      for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(rt)) size]; i++) {
        [rtDiff addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([rt getListElementWithInt:i])) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]];
      }
      return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_IF_LIST(), rtDiff);
      case OrgGeogebraCommonPluginOperation_LOG:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_];
      case OrgGeogebraCommonPluginOperation_LOG10:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) divideWithDouble:JavaLangMath_logWithDouble_(10)];
      case OrgGeogebraCommonPluginOperation_LOG2:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) divideWithDouble:JavaLangMath_logWithDouble_(2)];
      case OrgGeogebraCommonPluginOperation_LOGB:
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isNumberValue] && ![left_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:right_])) divideWithDouble:JavaLangMath_logWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(left_, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))) getDouble])];
      }
      break;
      case OrgGeogebraCommonPluginOperation_NROOT:
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) isNumberValue] && ![right_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) nrootWithOrgGeogebraCommonKernelArithmeticExpressionValue:right_]])) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:right_]];
      }
      break;
      case OrgGeogebraCommonPluginOperation_SQRT:
      case OrgGeogebraCommonPluginOperation_SQRT_SHORT:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) powerWithDouble:-0.5]])) divideWithDouble:2];
      case OrgGeogebraCommonPluginOperation_CBRT:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) square])) cbrt]])) divideWithDouble:3];
      case OrgGeogebraCommonPluginOperation_FUNCTION:
      if ([left_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
        OrgGeogebraCommonKernelArithmeticFunction *fun = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(left_, [OrgGeogebraCommonKernelGeosGeoFunction class])))) getFunction];
        OrgGeogebraCommonKernelArithmeticFunctionVariable *fv2 = IOSObjectArray_Get(nil_chk(((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun))->fVars_), 0);
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> deriv = [fun derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv2 withOrgGeogebraCommonKernelKernel:kernel];
        OrgGeogebraCommonKernelArithmeticFunction *fun2 = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(deriv, [OrgGeogebraCommonKernelArithmeticExpressionNode class]), fv2);
        OrgGeogebraCommonKernelGeosGeoFunction *geoFun = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction], fun2);
        OrgGeogebraCommonKernelArithmeticExpressionNode *ret = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, geoFun, OrgGeogebraCommonPluginOperationEnum_get_FUNCTION(), right_) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]];
        return ret;
      }
      break;
      case OrgGeogebraCommonPluginOperation_$VAR_COL:
      break;
      case OrgGeogebraCommonPluginOperation_$VAR_ROW:
      break;
      case OrgGeogebraCommonPluginOperation_$VAR_ROW_COL:
      break;
      case OrgGeogebraCommonPluginOperation_AND:
      break;
      case OrgGeogebraCommonPluginOperation_AND_INTERVAL:
      break;
      case OrgGeogebraCommonPluginOperation_ARBCOMPLEX:
      break;
      case OrgGeogebraCommonPluginOperation_ARBCONST:
      break;
      case OrgGeogebraCommonPluginOperation_ARBINT:
      break;
      case OrgGeogebraCommonPluginOperation_ARCTAN2:
      break;
      case OrgGeogebraCommonPluginOperation_ARG:
      break;
      case OrgGeogebraCommonPluginOperation_ALT:
      break;
      case OrgGeogebraCommonPluginOperation_BETA:
      break;
      case OrgGeogebraCommonPluginOperation_BETA_INCOMPLETE:
      break;
      case OrgGeogebraCommonPluginOperation_BETA_INCOMPLETE_REGULARIZED:
      break;
      case OrgGeogebraCommonPluginOperation_CEIL:
      break;
      case OrgGeogebraCommonPluginOperation_CONJUGATE:
      break;
      case OrgGeogebraCommonPluginOperation_DERIVATIVE:
      break;
      case OrgGeogebraCommonPluginOperation_DIFF:
      break;
      case OrgGeogebraCommonPluginOperation_ELEMENT_OF:
      break;
      case OrgGeogebraCommonPluginOperation_EQUAL_BOOLEAN:
      break;
      case OrgGeogebraCommonPluginOperation_FACTORIAL:
      break;
      case OrgGeogebraCommonPluginOperation_FLOOR:
      break;
      case OrgGeogebraCommonPluginOperation_FRACTIONAL_PART:
      break;
      case OrgGeogebraCommonPluginOperation_FREEHAND:
      break;
      case OrgGeogebraCommonPluginOperation_FUNCTION_NVAR:
      break;
      case OrgGeogebraCommonPluginOperation_GAMMA:
      break;
      case OrgGeogebraCommonPluginOperation_GAMMA_INCOMPLETE:
      break;
      case OrgGeogebraCommonPluginOperation_GAMMA_INCOMPLETE_REGULARIZED:
      break;
      case OrgGeogebraCommonPluginOperation_IMAGINARY:
      break;
      case OrgGeogebraCommonPluginOperation_IMPLICATION:
      break;
      case OrgGeogebraCommonPluginOperation_INTEGRAL:
      break;
      case OrgGeogebraCommonPluginOperation_IS_ELEMENT_OF:
      break;
      case OrgGeogebraCommonPluginOperation_IS_SUBSET_OF:
      break;
      case OrgGeogebraCommonPluginOperation_IS_SUBSET_OF_STRICT:
      break;
      case OrgGeogebraCommonPluginOperation_MULTIPLY_OR_FUNCTION:
      break;
      case OrgGeogebraCommonPluginOperation_NOT_EQUAL:
      break;
      case OrgGeogebraCommonPluginOperation_OR:
      break;
      case OrgGeogebraCommonPluginOperation_PARALLEL:
      break;
      case OrgGeogebraCommonPluginOperation_PERPENDICULAR:
      break;
      case OrgGeogebraCommonPluginOperation_RANDOM:
      break;
      case OrgGeogebraCommonPluginOperation_REAL:
      break;
      case OrgGeogebraCommonPluginOperation_ROUND:
      break;
      case OrgGeogebraCommonPluginOperation_SET_DIFFERENCE:
      break;
      case OrgGeogebraCommonPluginOperation_SUBSTITUTION:
      break;
      case OrgGeogebraCommonPluginOperation_SUM:
      break;
      case OrgGeogebraCommonPluginOperation_VECTORPRODUCT:
      break;
      case OrgGeogebraCommonPluginOperation_VEC_FUNCTION:
      break;
      case OrgGeogebraCommonPluginOperation_ZETA:
      break;
      default:
      break;
    }
  }
  OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unhandled operation in derivative() (no CAS version): ", [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(operation_)) description]));
  return OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithDouble_(self, JavaLangDouble_NaN);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)exp {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, exp);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                 withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  {
    jdouble coeff;
    OrgGeogebraCommonKernelArithmeticMyNumberPair *np;
    switch ([operation_ ordinal]) {
      case OrgGeogebraCommonPluginOperation_XCOORD:
      case OrgGeogebraCommonPluginOperation_YCOORD:
      case OrgGeogebraCommonPluginOperation_ZCOORD:
      return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, self, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), fv);
      case OrgGeogebraCommonPluginOperation_POWER:
      if (left_ == fv && ![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
        jdouble index = [right_ evaluateDouble];
        if (!JavaLangDouble_isNaNWithDouble_(index) && !JavaLangDouble_isInfiniteWithDouble_(index)) {
          if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(index + 1)) {
            return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_LOG(), nil);
          }
          return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) powerWithDouble:index + 1])) divideWithDouble:index + 1];
        }
      }
      else if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
        if (right_ == fv) {
          jdouble base = [left_ evaluateDouble];
          if (!JavaLangDouble_isNaNWithDouble_(base) && !JavaLangDouble_isInfiniteWithDouble_(base)) {
            if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(base, 1)) {
              return OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, fv);
            }
            if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(base, 0)) {
              return [self divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) ln]];
            }
          }
        }
      }
      else if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) isNumberValue] && ![right_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
        jdouble index = [right_ evaluateDouble];
        if (!JavaLangDouble_isNaNWithDouble_(index) && !JavaLangDouble_isInfiniteWithDouble_(index)) {
          jdouble coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
          if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
            if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(index, -1)) {
              return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) abs])) ln])) divideWithDouble:coeff];
            }
            return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) powerWithDouble:index + 1])) divideWithDouble:coeff * ((index + 1))];
          }
          coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
          if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
            if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(index, -1)) {
              return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) abs])) ln])) multiplyWithDouble:coeff];
            }
            return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) powerWithDouble:index + 1])) multiplyWithDouble:coeff / ((index + 1))];
          }
        }
      }
      break;
      case OrgGeogebraCommonPluginOperation_NO_OPERATION:
      return OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]);
      case OrgGeogebraCommonPluginOperation_DIVIDE:
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) isNumberValue] && ![right_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:right_];
      }
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isNumberValue] && ![left_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv] && right_ == fv) {
        return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, fv, OrgGeogebraCommonPluginOperationEnum_get_LOG(), nil) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_];
      }
      break;
      case OrgGeogebraCommonPluginOperation_MULTIPLY:
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) isNumberValue] && ![right_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyRWithOrgGeogebraCommonKernelArithmeticExpressionValue:right_];
      }
      else if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isNumberValue] && ![left_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [right_ integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) multiplyRWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_];
      }
      break;
      case OrgGeogebraCommonPluginOperation_PLUS:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]];
      case OrgGeogebraCommonPluginOperation_MINUS:
      return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]))) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]];
      case OrgGeogebraCommonPluginOperation_SIN:
      return OrgGeogebraCommonKernelArithmeticExpressionNode_linearIntegralWithInt_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(self, -1, OrgGeogebraCommonPluginOperationEnum_get_COS(), fv);
      case OrgGeogebraCommonPluginOperation_COS:
      return OrgGeogebraCommonKernelArithmeticExpressionNode_linearIntegralWithInt_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(self, 1, OrgGeogebraCommonPluginOperationEnum_get_SIN(), fv);
      case OrgGeogebraCommonPluginOperation_TAN:
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) sec])) abs])) ln])) divideWithDouble:coeff];
      }
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) sec])) abs])) ln])) multiplyWithDouble:coeff];
      }
      break;
      case OrgGeogebraCommonPluginOperation_SEC:
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) sec])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) tan]])) abs])) ln])) divideWithDouble:coeff];
      }
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) sec])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) tan]])) abs])) ln])) multiplyWithDouble:coeff];
      }
      break;
      case OrgGeogebraCommonPluginOperation_CSC:
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) cosec])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) cot]])) abs])) ln])) divideWithDouble:-coeff];
      }
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) cosec])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) cot]])) abs])) ln])) multiplyWithDouble:-coeff];
      }
      break;
      case OrgGeogebraCommonPluginOperation_COT:
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) sin])) abs])) ln])) divideWithDouble:coeff];
      }
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) sin])) abs])) ln])) multiplyWithDouble:coeff];
      }
      break;
      case OrgGeogebraCommonPluginOperation_SINH:
      return OrgGeogebraCommonKernelArithmeticExpressionNode_linearIntegralWithInt_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(self, 1, OrgGeogebraCommonPluginOperationEnum_get_COSH(), fv);
      case OrgGeogebraCommonPluginOperation_COSH:
      return OrgGeogebraCommonKernelArithmeticExpressionNode_linearIntegralWithInt_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(self, 1, OrgGeogebraCommonPluginOperationEnum_get_SINH(), fv);
      case OrgGeogebraCommonPluginOperation_TANH:
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) cosh])) abs])) ln])) divideWithDouble:coeff];
      }
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) cosh])) abs])) ln])) multiplyWithDouble:coeff];
      }
      break;
      case OrgGeogebraCommonPluginOperation_SECH:
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) exp])) atan])) divideWithDouble:coeff / 2];
      }
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) exp])) atan])) multiplyWithDouble:2 * coeff];
      }
      break;
      case OrgGeogebraCommonPluginOperation_CSCH:
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) cosech])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) coth]])) abs])) ln])) divideWithDouble:-coeff];
      }
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) cosech])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) coth]])) abs])) ln])) multiplyWithDouble:-coeff];
      }
      break;
      case OrgGeogebraCommonPluginOperation_COTH:
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) sinh])) abs])) ln])) divideWithDouble:coeff];
      }
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) sinh])) abs])) ln])) multiplyWithDouble:coeff];
      }
      break;
      case OrgGeogebraCommonPluginOperation_EXP:
      return OrgGeogebraCommonKernelArithmeticExpressionNode_linearIntegralWithInt_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(self, 1, OrgGeogebraCommonPluginOperationEnum_get_EXP(), fv);
      case OrgGeogebraCommonPluginOperation_ARCSIN:
      case OrgGeogebraCommonPluginOperation_ARCCOS:
      case OrgGeogebraCommonPluginOperation_ARCTAN:
      case OrgGeogebraCommonPluginOperation_ASINH:
      case OrgGeogebraCommonPluginOperation_ACOSH:
      case OrgGeogebraCommonPluginOperation_ATANH:
      case OrgGeogebraCommonPluginOperation_ABS:
      case OrgGeogebraCommonPluginOperation_SGN:
      case OrgGeogebraCommonPluginOperation_SI:
      case OrgGeogebraCommonPluginOperation_CI:
      case OrgGeogebraCommonPluginOperation_EI:
      case OrgGeogebraCommonPluginOperation_ERF:
      case OrgGeogebraCommonPluginOperation_PSI:
      case OrgGeogebraCommonPluginOperation_POLYGAMMA:
      case OrgGeogebraCommonPluginOperation_LOGB:
      break;
      case OrgGeogebraCommonPluginOperation_IF_ELSE:
      np = (OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticMyNumberPair class]);
      np = new_OrgGeogebraCommonKernelArithmeticMyNumberPair_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, ((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(np))->x_, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(np->y_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]);
      return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, np, OrgGeogebraCommonPluginOperationEnum_get_IF_ELSE(), [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]);
      case OrgGeogebraCommonPluginOperation_IF:
      return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left_, OrgGeogebraCommonPluginOperationEnum_get_IF(), [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel]);
      case OrgGeogebraCommonPluginOperation_LOG:
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) ln])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) divideWithDouble:coeff];
      }
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) ln])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) multiplyWithDouble:coeff];
      }
      break;
      case OrgGeogebraCommonPluginOperation_LOG10:
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) ln])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithDouble_(self, 10))) ln])) multiplyWithDouble:coeff]];
      }
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) ln])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) multiplyWithDouble:coeff])) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithDouble_(self, 10))) ln]];
      }
      break;
      case OrgGeogebraCommonPluginOperation_LOG2:
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) ln])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithDouble_(self, 2))) ln])) multiplyWithDouble:coeff]];
      }
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) ln])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) multiplyWithDouble:coeff])) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithDouble_(self, 2))) ln]];
      }
      break;
      case OrgGeogebraCommonPluginOperation_NROOT:
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) isNumberValue] && ![right_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
        coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
        if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
          return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) nrootWithOrgGeogebraCommonKernelArithmeticExpressionValue:right_])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:right_])) divideWithDouble:([right_ evaluateDouble] + 1) * coeff];
        }
        coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
        if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
          return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) nrootWithOrgGeogebraCommonKernelArithmeticExpressionValue:right_])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:right_])) divideWithDouble:([right_ evaluateDouble] + 1) / coeff];
        }
      }
      break;
      case OrgGeogebraCommonPluginOperation_SQRT:
      case OrgGeogebraCommonPluginOperation_SQRT_SHORT:
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) sqrt])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) divideWithDouble:coeff * 3.0 / 2.0];
      }
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) sqrt])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) multiplyWithDouble:coeff * 2.0 / 3.0];
      }
      break;
      case OrgGeogebraCommonPluginOperation_CBRT:
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) cbrt])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) divideWithDouble:coeff * 4.0 / 3.0];
      }
      coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, left_);
      if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left_))) cbrt])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:left_])) multiplyWithDouble:coeff * 3.0 / 4.0];
      }
      break;
      default:
      break;
    }
  }
  OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unhandled operation in integral() (no CAS version): ", [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(operation_)) description]));
  return OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithDouble_(self, JavaLangDouble_NaN);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)nrootWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)n {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_NROOT(), n);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)linearIntegralWithInt:(jint)i
                                  withOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op
                     withOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_linearIntegralWithInt_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(self, i, op, fv);
}

+ (jdouble)getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev2 {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, ev2);
}

+ (jdouble)getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                   withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev2 {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, ev2);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrapWithDouble:(jdouble)n {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithDouble_(self, n);
}

- (jboolean)isConditional {
  return operation_ == OrgGeogebraCommonPluginOperationEnum_get_IF() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_IF_ELSE() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_IF_LIST();
}

- (jboolean)isConditionalOldFashion {
  return operation_ == OrgGeogebraCommonPluginOperationEnum_get_IF() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_IF_ELSE();
}

- (jboolean)isConditionalDeep {
  return [self isConditional] || ([left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]] && [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) isConditionalDeep]) || ([right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]] && [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) isConditionalDeep]);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)ifElseWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ifBranch
                                                           withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)elseBranch {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyNumberPair_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, ifBranch), OrgGeogebraCommonPluginOperationEnum_get_IF_ELSE(), elseBranch);
}

- (jdouble)evaluateDouble {
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self)) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluateDouble];
  }
  {
    jdouble lt;
    switch ([operation_ ordinal]) {
      case OrgGeogebraCommonPluginOperation_PLUS:
      return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluateDouble] + [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) evaluateDouble];
      case OrgGeogebraCommonPluginOperation_MINUS:
      return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluateDouble] - [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) evaluateDouble];
      case OrgGeogebraCommonPluginOperation_DIVIDE:
      return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluateDouble] / [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) evaluateDouble];
      case OrgGeogebraCommonPluginOperation_POWER:
      if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) isNumberValue]) {
        return [super evaluateDouble];
      }
      lt = [left_ evaluateDouble];
      if (lt < 0 && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) isExpressionNode] && OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))) == OrgGeogebraCommonPluginOperationEnum_get_DIVIDE()) {
        return OrgGeogebraCommonKernelArithmeticExpressionNodeEvaluator_negPowerWithDouble_withOrgGeogebraCommonKernelArithmeticExpressionValue_(lt, right_);
      }
      return JavaLangMath_powWithDouble_withDouble_([left_ evaluateDouble], [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) evaluateDouble]);
      case OrgGeogebraCommonPluginOperation_SIN:
      return JavaLangMath_sinWithDouble_([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluateDouble]);
      case OrgGeogebraCommonPluginOperation_COS:
      return JavaLangMath_cosWithDouble_([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluateDouble]);
      case OrgGeogebraCommonPluginOperation_SQRT:
      return JavaLangMath_sqrtWithDouble_([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluateDouble]);
      default:
      break;
    }
  }
  return [super evaluateDouble];
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)replaceCasCommands {
  return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_get_replacer_()])) wrap];
}

- (jboolean)hasBrackets {
  return brackets_;
}

- (void)setBracketsWithBoolean:(jboolean)brackets {
  self->brackets_ = brackets;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)applyWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation2 {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, operation2, nil);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)applyWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation2
                                              withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)arg {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, operation2, arg);
}

- (jboolean)containsFreeFunctionVariableWithNSString:(NSString *)name {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_checkForFreeVarsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(self, left_, name) || (right_ != nil && OrgGeogebraCommonKernelArithmeticExpressionNode_checkForFreeVarsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(self, right_, name)) || (operation_ == OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR() && [right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]] && [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(((OrgGeogebraCommonKernelArithmeticValidExpression *) check_class_cast(right_, [OrgGeogebraCommonKernelArithmeticValidExpression class])))) containsFunctionVariableWithNSString:name]);
}

- (jboolean)checkForFreeVarsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                    withNSString:(NSString *)name {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_checkForFreeVarsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(self, ev, name);
}

- (jboolean)evaluatesToNumberWithBoolean:(jboolean)def {
  if (operation_ == OrgGeogebraCommonPluginOperationEnum_get_RANDOM() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_XCOORD() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_YCOORD() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_ZCOORD() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_ABS() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_ARG() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_ALT()) {
    return YES;
  }
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self) || OrgGeogebraCommonPluginOperationEnum_isSimpleFunctionWithOrgGeogebraCommonPluginOperationEnum_(self->operation_)) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesToNumberWithBoolean:def];
  }
  if (right_ != nil && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesToNumberWithBoolean:def] && [right_ evaluatesToNumberWithBoolean:def]) {
    return YES;
  }
  if (right_ != nil && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesToNumberWithBoolean:def] && ![right_ evaluatesToNumberWithBoolean:def]) {
    return NO;
  }
  if (right_ != nil && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesToNumberWithBoolean:def] && ![right_ evaluatesToNumberWithBoolean:def]) {
    return self->operation_ == OrgGeogebraCommonPluginOperationEnum_get_POWER();
  }
  if (right_ != nil && ![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) evaluatesToNumberWithBoolean:def] && ![right_ evaluatesToNumberWithBoolean:def]) {
    if (operation_ == OrgGeogebraCommonPluginOperationEnum_get_PLUS() || operation_ == OrgGeogebraCommonPluginOperationEnum_get_MINUS()) {
      return NO;
    }
  }
  return def;
}

- (JavaUtilHashSet *)getUnconditionalVars {
  if (![self isConditionalDeep]) {
    return nil;
  }
  if (leaf_) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) getVariables];
  }
  if ([self isConditional]) {
    return new_JavaUtilHashSet_init();
  }
  JavaUtilHashSet *leftVars = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left_)) getVariables];
  JavaUtilHashSet *rightVars = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right_)) getVariables];
  if (leftVars == nil) {
    return rightVars;
  }
  else if (rightVars == nil) {
    return leftVars;
  }
  else {
    [leftVars addAllWithJavaUtilCollection:rightVars];
    return leftVars;
  }
}

- (void)getFractionWithOrgGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)parts
                                                                 withBoolean:(jboolean)expandPlus {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> numL, numR, denL = nil, denR = nil;
  if ([left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getFractionWithOrgGeogebraCommonKernelArithmeticExpressionValueArray:parts withBoolean:expandPlus];
    numL = IOSObjectArray_Get(nil_chk(parts), 0);
    denL = IOSObjectArray_Get(parts, 1);
  }
  else {
    numL = left_;
  }
  if ([right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getFractionWithOrgGeogebraCommonKernelArithmeticExpressionValueArray:parts withBoolean:expandPlus];
    numR = IOSObjectArray_Get(nil_chk(parts), 0);
    denR = IOSObjectArray_Get(parts, 1);
  }
  else {
    numR = right_;
  }
  switch ([operation_ ordinal]) {
    case OrgGeogebraCommonPluginOperation_MULTIPLY:
    (void) IOSObjectArray_Set(nil_chk(parts), 0, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(numL)) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:numR]);
    (void) IOSObjectArray_Set(parts, 1, OrgGeogebraCommonKernelArithmeticExpressionNode_multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, denR, denL));
    return;
    case OrgGeogebraCommonPluginOperation_DIVIDE:
    (void) IOSObjectArray_Set(nil_chk(parts), 0, OrgGeogebraCommonKernelArithmeticExpressionNode_multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, denR, numL));
    (void) IOSObjectArray_Set(parts, 1, OrgGeogebraCommonKernelArithmeticExpressionNode_multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, denL, numR));
    return;
    case OrgGeogebraCommonPluginOperation_PLUS:
    if (expandPlus) {
      (void) IOSObjectArray_Set(nil_chk(parts), 0, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, denR, numL))) wrap])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticExpressionNode_multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, denL, numR)]);
      (void) IOSObjectArray_Set(parts, 1, OrgGeogebraCommonKernelArithmeticExpressionNode_multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, denR, denL));
      return;
    }
    case OrgGeogebraCommonPluginOperation_MINUS:
    if (expandPlus) {
      (void) IOSObjectArray_Set(nil_chk(parts), 0, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, denR, numL))) wrap])) subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticExpressionNode_multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, denL, numR)]);
      (void) IOSObjectArray_Set(parts, 1, OrgGeogebraCommonKernelArithmeticExpressionNode_multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, denR, denL));
      return;
    }
    default:
    (void) IOSObjectArray_Set(nil_chk(parts), 0, self);
    (void) IOSObjectArray_Set(parts, 1, nil);
    return;
  }
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)denR
                                                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)denL {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, denR, denL);
}

+ (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)multiplySpecialWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ret
                                                                       withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)f
                                                                                          withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                                                                                                withBoolean:(jboolean)giacParsing {
  return OrgGeogebraCommonKernelArithmeticExpressionNode_multiplySpecialWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_withBoolean_(ret, f, kernel, giacParsing);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ExpressionNode", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "ExpressionNode", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "ExpressionNode", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "ExpressionNode", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:withDouble:", "ExpressionNode", NULL, 0x1, NULL, NULL },
    { "getKernel", NULL, "Lorg.geogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "getOperation", NULL, "Lorg.geogebra.common.plugin.Operation;", 0x11, NULL, NULL },
    { "setOperationWithOrgGeogebraCommonPluginOperationEnum:", "setOperation", "V", 0x1, NULL, NULL },
    { "setHoldsLaTeXtextWithBoolean:", "setHoldsLaTeXtext", "V", 0x1, NULL, NULL },
    { "getLeft", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, NULL, NULL },
    { "setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "setLeft", "V", 0x11, NULL, NULL },
    { "getLeftTree", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "getRight", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, NULL, NULL },
    { "setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "setRight", "V", 0x11, NULL, NULL },
    { "getRightTree", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "deepCopyWithOrgGeogebraCommonKernelKernel:", "deepCopy", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCopyWithOrgGeogebraCommonKernelKernel:", "getCopy", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelKernel:", "copy", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x9, NULL, NULL },
    { "simplifyLeafs", NULL, "V", 0x11, NULL, NULL },
    { "simplifyAndEvalCommands", NULL, "V", 0x12, NULL, NULL },
    { "simplifyConstantIntegers", NULL, "V", 0x11, NULL, NULL },
    { "evaluateWithOrgGeogebraCommonKernelStringTemplate:", "evaluate", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x11, NULL, NULL },
    { "doResolveVariables", NULL, "V", 0x2, NULL, NULL },
    { "shouldEvaluateToGeoVector", NULL, "Z", 0x1, NULL, NULL },
    { "includesDivisionByWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "includesDivisionBy", "Z", 0x11, NULL, NULL },
    { "includesNonContinuousIntegral", NULL, "Z", 0x11, NULL, NULL },
    { "replaceVariablesWithNSString:withOrgGeogebraCommonKernelArithmeticFunctionVariable:", "replaceVariables", "I", 0x11, NULL, NULL },
    { "replaceXYZnodesWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelArithmeticFunctionVariable:withJavaUtilArrayList:", "replaceXYZnodes", "I", 0x4, NULL, NULL },
    { "traverseWithOrgGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "inspectWithOrgGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x1, NULL, NULL },
    { "replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:", "replaceChildrenByValues", "V", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "containsCasEvaluableFunction", NULL, "Z", 0x11, NULL, NULL },
    { "containsGeoFunctionNVar", NULL, "Z", 0x11, NULL, NULL },
    { "makePolynomialTreeWithOrgGeogebraCommonKernelArithmeticEquation:", "makePolynomialTree", "Lorg.geogebra.common.kernel.arithmetic.Polynomial;", 0x14, NULL, NULL },
    { "makePolyTreeFromFunctionWithOrgGeogebraCommonKernelArithmeticFunction:withOrgGeogebraCommonKernelArithmeticEquation:", "makePolyTreeFromFunction", "Lorg.geogebra.common.kernel.arithmetic.Polynomial;", 0x2, NULL, NULL },
    { "polynomialOperationWithOrgGeogebraCommonPluginOperationEnum:", "polynomialOperation", "Z", 0xa, NULL, NULL },
    { "isConstant", NULL, "Z", 0x11, NULL, NULL },
    { "evaluatesToNonComplex2DVector", NULL, "Z", 0x11, NULL, NULL },
    { "evaluatesToVectorNotPoint", NULL, "Z", 0x11, NULL, NULL },
    { "evaluatesTo3DVector", NULL, "Z", 0x11, NULL, NULL },
    { "setForceVector", NULL, "V", 0x1, NULL, NULL },
    { "isForcedVector", NULL, "Z", 0x11, NULL, NULL },
    { "setForcePoint", NULL, "V", 0x1, NULL, NULL },
    { "isForcedPoint", NULL, "Z", 0x11, NULL, NULL },
    { "setForceFunction", NULL, "V", 0x1, NULL, NULL },
    { "isForcedFunction", NULL, "Z", 0x11, NULL, NULL },
    { "hasOperations", NULL, "Z", 0x11, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x11, NULL, NULL },
    { "getGeoElementVariables", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x11, NULL, NULL },
    { "isSingleGeoElement", NULL, "Z", 0x11, NULL, NULL },
    { "getSingleGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "isSingleVariable", NULL, "Z", 0x1, NULL, NULL },
    { "isImaginaryUnit", NULL, "Z", 0x1, NULL, NULL },
    { "containsMyStringBuffer", NULL, "Z", 0x1, NULL, NULL },
    { "getCASstringWithOrgGeogebraCommonKernelStringTemplate:withBoolean:", "getCASstring", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTreeClass", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "expandForOGPWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "expandForOGP", "Z", 0x12, NULL, NULL },
    { "getTreeClassWithNSString:", "getTreeClass", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "checkMathmlWithNSString:withOrgGeogebraCommonKernelStringTemplate:", "checkMathml", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "operationToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonPluginOperationEnum:withNSString:withNSString:withBoolean:withOrgGeogebraCommonKernelStringTemplate:withOrgGeogebraCommonKernelKernel:", "operationToString", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "degFixWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelKernel:", "degFix", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "trigWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:withJavaLangStringBuilder:withNSString:withNSString:withNSString:withNSString:withNSString:withOrgGeogebraCommonKernelStringTemplate:withOrgGeogebraCommonMainLocalization:withBoolean:", "trig", "V", 0xa, NULL, NULL },
    { "trigWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:withJavaLangStringBuilder:withNSString:withNSString:withNSString:withNSString:withNSString:withNSString:withOrgGeogebraCommonKernelStringTemplate:withOrgGeogebraCommonMainLocalization:withBoolean:", "trig", "V", 0xa, NULL, NULL },
    { "appendReduceFunctionWithJavaLangStringBuilder:withOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:", "appendReduceFunction", "V", 0xa, NULL, NULL },
    { "isMultiplyOrDivideWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "isMultiplyOrDivide", "Z", 0x9, NULL, NULL },
    { "opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "opID", "I", 0x9, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToList", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToText", NULL, "Z", 0x1, NULL, NULL },
    { "isExpressionNode", NULL, "Z", 0x11, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "isEqual", "Z", 0x9, NULL, NULL },
    { "isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withDouble:withBoolean:", "isEqualString", "Z", 0x19, NULL, NULL },
    { "isTopLevelCommand", NULL, "Z", 0x1, NULL, NULL },
    { "getTopLevelCommand", NULL, "Lorg.geogebra.common.kernel.arithmetic.Command;", 0x1, NULL, NULL },
    { "getCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable:", "getCoefficient", "Ljava.lang.Double;", 0x1, NULL, NULL },
    { "chainedBooleanOpWithOrgGeogebraCommonPluginOperationEnum:", "chainedBooleanOp", "Z", 0x9, NULL, NULL },
    { "isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue:withDouble:", "isConstantDouble", "Z", 0xa, NULL, NULL },
    { "plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "plus", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "lessThanWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "lessThan", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "lessThanWithDouble:", "lessThan", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "lessThanEqualWithDouble:", "lessThanEqual", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "erf", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "abs", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "sec", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "tan", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "sech", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "tanh", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "cosech", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "coth", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "cosec", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "cot", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "factorial", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "ln", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "gamma", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "gammaIncompleteReverseArgsWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "gammaIncompleteReverseArgs", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "gammaIncompleteWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "gammaIncomplete", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "betaWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "beta", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "exp", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "polygammaWithDouble:", "polygamma", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "sin", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "sinh", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "cosh", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "cos", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "reciprocate", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "sqrt", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "cbrt", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "sgn", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "atan", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "reverseSign", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "reverseSign2", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "betaRegularizedWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "betaRegularized", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "square", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "subtractWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "subtract", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "plusWithDouble:", "plus", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "plusRWithDouble:", "plusR", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "multiplyWithDouble:", "multiply", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "multiplyRWithDouble:", "multiplyR", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "powerWithDouble:", "power", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "subtractWithDouble:", "subtract", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "subtractRWithDouble:", "subtractR", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "multiply", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "multiplyRWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "multiplyR", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "powerWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "power", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "powerRWithDouble:", "powerR", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "divide", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "divideWithDouble:", "divide", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "and__WithOrgGeogebraCommonKernelArithmeticExpressionValue:", "and", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "negation", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "replacePowersRootsWithBoolean:withInt:", "replacePowersRoots", "Z", 0x1, NULL, NULL },
    { "replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "replace", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "buildFunctionWithOrgGeogebraCommonKernelArithmeticFunctionVariable:", "buildFunction", "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "unwrap", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "wrap", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "hasCoords", NULL, "Z", 0x1, NULL, NULL },
    { "derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelKernel:", "derivative", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "wrap", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelKernel:", "integral", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "nrootWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "nroot", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "linearIntegralWithInt:withOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelArithmeticFunctionVariable:", "linearIntegral", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "getLinearCoefficient", "D", 0xa, NULL, NULL },
    { "getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "getLinearCoefficientDiv", "D", 0xa, NULL, NULL },
    { "wrapWithDouble:", "wrap", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "isConditional", NULL, "Z", 0x1, NULL, NULL },
    { "isConditionalOldFashion", NULL, "Z", 0x1, NULL, NULL },
    { "isConditionalDeep", NULL, "Z", 0x1, NULL, NULL },
    { "ifElseWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "ifElse", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "evaluateDouble", NULL, "D", 0x1, NULL, NULL },
    { "replaceCasCommands", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "hasBrackets", NULL, "Z", 0x1, NULL, NULL },
    { "setBracketsWithBoolean:", "setBrackets", "V", 0x1, NULL, NULL },
    { "applyWithOrgGeogebraCommonPluginOperationEnum:", "apply", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "applyWithOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "apply", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "containsFreeFunctionVariableWithNSString:", "containsFreeFunctionVariable", "Z", 0x1, NULL, NULL },
    { "checkForFreeVarsWithOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:", "checkForFreeVars", "Z", 0x2, NULL, NULL },
    { "evaluatesToNumberWithBoolean:", "evaluatesToNumber", "Z", 0x1, NULL, NULL },
    { "getUnconditionalVars", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "getFractionWithOrgGeogebraCommonKernelArithmeticExpressionValueArray:withBoolean:", "getFraction", "V", 0x1, NULL, NULL },
    { "multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "multiplyCheck", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x2, NULL, NULL },
    { "multiplySpecialWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelKernel:withBoolean:", "multiplySpecial", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "loc_", NULL, 0x2, "Lorg.geogebra.common.main.Localization;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "left_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "right_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "operation_", NULL, 0x2, "Lorg.geogebra.common.plugin.Operation;", NULL, NULL,  },
    { "forceVector_", NULL, 0x2, "Z", NULL, NULL,  },
    { "forcePoint_", NULL, 0x2, "Z", NULL, NULL,  },
    { "forceFunction_", NULL, 0x2, "Z", NULL, NULL,  },
    { "holdsLaTeXtext_", NULL, 0x1, "Z", NULL, NULL,  },
    { "leaf_", NULL, 0x1, "Z", NULL, NULL,  },
    { "brackets_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticExpressionNode = { 2, "ExpressionNode", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 166, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticExpressionNode;
}

@end

void OrgGeogebraCommonKernelArithmeticExpressionNode_init(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  (void) OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->operation_ = OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION();
  self->forceVector_ = NO;
  self->forcePoint_ = NO;
  self->forceFunction_ = NO;
  self->holdsLaTeXtext_ = NO;
  self->leaf_ = NO;
}

OrgGeogebraCommonKernelArithmeticExpressionNode *new_OrgGeogebraCommonKernelArithmeticExpressionNode_init() {
  OrgGeogebraCommonKernelArithmeticExpressionNode *self = [OrgGeogebraCommonKernelArithmeticExpressionNode alloc];
  OrgGeogebraCommonKernelArithmeticExpressionNode_init(self);
  return self;
}

void OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> left, OrgGeogebraCommonPluginOperationEnum *operation, id<OrgGeogebraCommonKernelArithmeticExpressionValue> right) {
  (void) OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->operation_ = OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION();
  self->forceVector_ = NO;
  self->forcePoint_ = NO;
  self->forceFunction_ = NO;
  self->holdsLaTeXtext_ = NO;
  self->leaf_ = NO;
  self->kernel_ = kernel;
  self->loc_ = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getLocalization];
  self->operation_ = operation;
  OrgGeogebraCommonKernelArithmeticExpressionNode_setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, left);
  if (right != nil) {
    OrgGeogebraCommonKernelArithmeticExpressionNode_setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, right);
  }
  else {
    OrgGeogebraCommonKernelArithmeticExpressionNode_setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, JavaLangDouble_NaN));
  }
}

OrgGeogebraCommonKernelArithmeticExpressionNode *new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> left, OrgGeogebraCommonPluginOperationEnum *operation, id<OrgGeogebraCommonKernelArithmeticExpressionValue> right) {
  OrgGeogebraCommonKernelArithmeticExpressionNode *self = [OrgGeogebraCommonKernelArithmeticExpressionNode alloc];
  OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, kernel, left, operation, right);
  return self;
}

void OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> leaf) {
  (void) OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->operation_ = OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION();
  self->forceVector_ = NO;
  self->forcePoint_ = NO;
  self->forceFunction_ = NO;
  self->holdsLaTeXtext_ = NO;
  self->leaf_ = NO;
  self->kernel_ = kernel;
  self->loc_ = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getLocalization];
  OrgGeogebraCommonKernelArithmeticExpressionNode_setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, leaf);
  self->leaf_ = YES;
}

OrgGeogebraCommonKernelArithmeticExpressionNode *new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> leaf) {
  OrgGeogebraCommonKernelArithmeticExpressionNode *self = [OrgGeogebraCommonKernelArithmeticExpressionNode alloc];
  OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, kernel, leaf);
  return self;
}

void OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, OrgGeogebraCommonKernelArithmeticExpressionNode *node) {
  (void) OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->operation_ = OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION();
  self->forceVector_ = NO;
  self->forcePoint_ = NO;
  self->forceFunction_ = NO;
  self->holdsLaTeXtext_ = NO;
  self->leaf_ = NO;
  self->kernel_ = ((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(node))->kernel_;
  self->loc_ = node->loc_;
  self->leaf_ = node->leaf_;
  self->operation_ = node->operation_;
  OrgGeogebraCommonKernelArithmeticExpressionNode_setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, node->left_);
  OrgGeogebraCommonKernelArithmeticExpressionNode_setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, node->right_);
}

OrgGeogebraCommonKernelArithmeticExpressionNode *new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelArithmeticExpressionNode *node) {
  OrgGeogebraCommonKernelArithmeticExpressionNode *self = [OrgGeogebraCommonKernelArithmeticExpressionNode alloc];
  OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, node);
  return self;
}

void OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, OrgGeogebraCommonKernelKernel *kernel2, jdouble d) {
  (void) OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, kernel2, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel2, d));
}

OrgGeogebraCommonKernelArithmeticExpressionNode *new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(OrgGeogebraCommonKernelKernel *kernel2, jdouble d) {
  OrgGeogebraCommonKernelArithmeticExpressionNode *self = [OrgGeogebraCommonKernelArithmeticExpressionNode alloc];
  OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withDouble_(self, kernel2, d);
  return self;
}

OrgGeogebraCommonPluginOperationEnum *OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  return self->operation_;
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  return self->left_;
}

void OrgGeogebraCommonKernelArithmeticExpressionNode_setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> l) {
  self->left_ = l;
  [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) setInTreeWithBoolean:YES];
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  return self->right_;
}

void OrgGeogebraCommonKernelArithmeticExpressionNode_setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> r) {
  self->right_ = r;
  if (self->right_ != nil) {
    [self->right_ setInTreeWithBoolean:YES];
  }
  self->leaf_ = (self->operation_ == OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION());
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticExpressionNode_copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  if (ev == nil) {
    return nil;
  }
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> ret = nil;
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    ret = [en getCopyWithOrgGeogebraCommonKernelKernel:kernel];
  }
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]]) {
    OrgGeogebraCommonKernelArithmeticMyList *en = (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyList class]);
    ret = [en getCopyWithOrgGeogebraCommonKernelKernel:kernel];
  }
  else if (([ev inspectWithOrgGeogebraCommonKernelArithmeticInspecting:OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_get_INSTANCE()]) || [ev isConstant] || [ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]] || [ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]] || [ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyVecNode class]] || [ev isKindOfClass:[OrgGeogebraCommonKernelArithmetic3DMyVec3DNode class]]) {
    ret = [ev deepCopyWithOrgGeogebraCommonKernelKernel:kernel];
  }
  else {
    ret = ev;
  }
  return ret;
}

void OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyLeafs(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) isExpressionNode]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if (node->leaf_) {
      self->left_ = node->left_;
      OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyLeafs(self);
    }
  }
  if (self->right_ != nil) {
    if ([self->right_ isExpressionNode]) {
      OrgGeogebraCommonKernelArithmeticExpressionNode *node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
      if (node->leaf_) {
        self->right_ = node->left_;
        OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyLeafs(self);
      }
    }
  }
}

void OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyAndEvalCommands(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  if ([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isResolveUnkownVarsAsDummyGeos]) {
    return;
  }
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) isExpressionNode]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyAndEvalCommands(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])));
  }
  else if ([self->left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
    self->left_ = [((OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticCommand class])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  }
  if (self->right_ != nil) {
    if ([self->right_ isExpressionNode]) {
      OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyAndEvalCommands(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])));
    }
    else if ([self->right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
      self->right_ = [((OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticCommand class])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    }
  }
}

void OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyConstantIntegers(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) isExpressionNode]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if ([self->left_ isConstant]) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> eval = [node evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:eval]) {
        if (OrgGeogebraCommonKernelKernel_isIntegerWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(eval, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble])) {
          self->left_ = eval;
        }
      }
      else {
        self->left_ = eval;
      }
    }
    else {
      OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyConstantIntegers(node);
    }
  }
  if ((self->right_ != nil) && [self->right_ isExpressionNode]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if ([self->right_ isConstant]) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> eval = [node evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:eval]) {
        if (OrgGeogebraCommonKernelKernel_isIntegerWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(eval, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble])) {
          self->right_ = eval;
        }
      }
      else {
        self->right_ = eval;
      }
    }
    else {
      OrgGeogebraCommonKernelArithmeticExpressionNode_simplifyConstantIntegers(node);
    }
  }
}

void OrgGeogebraCommonKernelArithmeticExpressionNode_doResolveVariables(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) isVariable]) {
    self->left_ = [((OrgGeogebraCommonKernelArithmeticVariable *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticVariable class])) resolveAsExpressionValue];
  }
  else {
    [self->left_ resolveVariables];
  }
  if (self->right_ != nil) {
    if ([self->right_ isVariable]) {
      self->right_ = [((OrgGeogebraCommonKernelArithmeticVariable *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticVariable class])) resolveAsExpressionValue];
    }
    else {
      [self->right_ resolveVariables];
    }
  }
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_includesDivisionByWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> val) {
  if (self->operation_ == OrgGeogebraCommonPluginOperationEnum_get_DIVIDE()) {
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->right_)) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:val]) {
      return YES;
    }
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) isExpressionNode] && OrgGeogebraCommonKernelArithmeticExpressionNode_includesDivisionByWithOrgGeogebraCommonKernelArithmeticExpressionValue_(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])), val)) {
      return YES;
    }
  }
  else {
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) isExpressionNode] && OrgGeogebraCommonKernelArithmeticExpressionNode_includesDivisionByWithOrgGeogebraCommonKernelArithmeticExpressionValue_(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])), val)) {
      return YES;
    }
    if ((self->right_ != nil) && [self->right_ isExpressionNode] && OrgGeogebraCommonKernelArithmeticExpressionNode_includesDivisionByWithOrgGeogebraCommonKernelArithmeticExpressionValue_(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])), val)) {
      return YES;
    }
  }
  return NO;
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_includesNonContinuousIntegral(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  if (OrgGeogebraCommonPluginOperationEnum_integralIsNonContinuousWithOrgGeogebraCommonPluginOperationEnum_(self->operation_)) {
    return YES;
  }
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) isExpressionNode] && OrgGeogebraCommonKernelArithmeticExpressionNode_includesNonContinuousIntegral(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) {
    return YES;
  }
  if ((self->right_ != nil) && [self->right_ isExpressionNode] && OrgGeogebraCommonKernelArithmeticExpressionNode_includesNonContinuousIntegral(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) {
    return YES;
  }
  return NO;
}

jint OrgGeogebraCommonKernelArithmeticExpressionNode_replaceVariablesWithNSString_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, NSString *varName, OrgGeogebraCommonKernelArithmeticFunctionVariable *fVar) {
  jint replacements = 0;
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) isExpressionNode]) {
    replacements += OrgGeogebraCommonKernelArithmeticExpressionNode_replaceVariablesWithNSString_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])), varName, fVar);
  }
  else if ([self->left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]]) {
    replacements += [((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticMyList class])) replaceVariablesWithNSString:varName withOrgGeogebraCommonKernelArithmeticFunctionVariable:fVar];
  }
  else if ([self->left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]]) {
    if ([((NSString *) nil_chk(varName)) isEqual:[((OrgGeogebraCommonKernelArithmeticVariable *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticVariable class])) getNameWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
      self->left_ = fVar;
      replacements++;
    }
  }
  else if ([self->left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
    replacements += [((OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticCommand class])) replaceVariablesWithNSString:varName withOrgGeogebraCommonKernelArithmeticFunctionVariable:fVar];
  }
  if ([self->left_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) {
    if ([((NSString *) nil_chk(varName)) isEqual:[((OrgGeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(((OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast(self->left_, [OrgGeogebraCommonKernelGeosGeoDummyVariable class])))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
      self->left_ = fVar;
      replacements++;
    }
  }
  else if ([self->left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
    if ([((NSString *) nil_chk(varName)) isEqual:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionVariable *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticFunctionVariable class])))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
      self->left_ = fVar;
      replacements++;
    }
  }
  if (self->right_ != nil) {
    if ([self->right_ isExpressionNode]) {
      replacements += OrgGeogebraCommonKernelArithmeticExpressionNode_replaceVariablesWithNSString_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])), varName, fVar);
    }
    else if ([self->right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]]) {
      replacements += [((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticMyList class])) replaceVariablesWithNSString:varName withOrgGeogebraCommonKernelArithmeticFunctionVariable:fVar];
    }
    else if ([self->right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]]) {
      if ([((NSString *) nil_chk(varName)) isEqual:[((OrgGeogebraCommonKernelArithmeticVariable *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticVariable class])) getNameWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
        self->right_ = fVar;
        replacements++;
      }
    }
    else if ([self->right_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) {
      if ([((NSString *) nil_chk(varName)) isEqual:[((OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast(self->right_, [OrgGeogebraCommonKernelGeosGeoDummyVariable class])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
        self->right_ = fVar;
        replacements++;
      }
    }
    else if ([self->right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
      if ([((NSString *) nil_chk(varName)) isEqual:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticFunctionVariable class])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
        self->right_ = fVar;
        replacements++;
      }
    }
  }
  return replacements;
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_containsCasEvaluableFunction(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  if (([OrgGeogebraCommonKernelGeosCasEvaluableFunction_class_() isInstance:self->left_]) || ([OrgGeogebraCommonKernelGeosCasEvaluableFunction_class_() isInstance:self->right_])) {
    return YES;
  }
  if (([self->left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) && OrgGeogebraCommonKernelArithmeticExpressionNode_containsCasEvaluableFunction(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))))) {
    return YES;
  }
  if (([self->right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) && OrgGeogebraCommonKernelArithmeticExpressionNode_containsCasEvaluableFunction(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))))) {
    return YES;
  }
  return NO;
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_containsGeoFunctionNVar(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  if (([self->left_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunctionNVar class]]) || ([self->right_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunctionNVar class]])) {
    return YES;
  }
  if (([self->left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) && OrgGeogebraCommonKernelArithmeticExpressionNode_containsGeoFunctionNVar(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))))) {
    return YES;
  }
  if (([self->right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) && OrgGeogebraCommonKernelArithmeticExpressionNode_containsGeoFunctionNVar(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))))) {
    return YES;
  }
  return NO;
}

OrgGeogebraCommonKernelArithmeticPolynomial *OrgGeogebraCommonKernelArithmeticExpressionNode_makePolynomialTreeWithOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, OrgGeogebraCommonKernelArithmeticEquation *equ) {
  OrgGeogebraCommonKernelArithmeticPolynomial *lt;
  OrgGeogebraCommonKernelArithmeticPolynomial *rt = nil;
  if (self->operation_ == OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR()) {
    if (([OrgGeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:self->left_]) && ([self->right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]])) {
      OrgGeogebraCommonKernelArithmeticMyList *list = ((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticMyList class]));
      OrgGeogebraCommonKernelArithmeticFunctionNVar *func = [((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(self->left_, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar))))) getFunction];
      OrgGeogebraCommonKernelArithmeticExpressionNode *expr = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(func)) getExpression])) getCopyWithOrgGeogebraCommonKernelKernel:self->kernel_];
      if (((IOSObjectArray *) nil_chk([func getFunctionVariables]))->size_ == [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list)) size]) {
        for (jint i = 0; i < [list size]; i++) {
          id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [list getListElementWithInt:i];
          if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
            OrgGeogebraCommonKernelArithmeticExpressionNode *en = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getCopyWithOrgGeogebraCommonKernelKernel:self->kernel_];
            if (![((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) isFunctionDependent]) {
              [equ setFunctionDependentWithBoolean:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) containsFunctionVariable]];
            }
            ev = en;
          }
          else if ([[list getListElementWithInt:i] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
            [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) setFunctionDependentWithBoolean:YES];
          }
          expr = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expr)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk([func getFunctionVariables]), i) withOrgGeogebraCommonKernelArithmeticExpressionValue:ev])) wrap];
        }
      }
      else {
        @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_(self->loc_, [IOSObjectArray newArrayWithObjects:(id[]){ @"IllegalArgumentNumber" } count:1 type:NSString_class_()]);
      }
      if ([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) isFunctionDependent]) {
        return OrgGeogebraCommonKernelArithmeticExpressionNode_makePolynomialTreeWithOrgGeogebraCommonKernelArithmeticEquation_(nil_chk(expr), equ);
      }
    }
  }
  else if (self->operation_ == OrgGeogebraCommonPluginOperationEnum_get_FUNCTION()) {
    if ([self->left_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
      OrgGeogebraCommonKernelArithmeticFunction *func = [((id<OrgGeogebraCommonKernelArithmeticFunctional>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctional>) check_protocol_cast(self->left_, @protocol(OrgGeogebraCommonKernelArithmeticFunctional))))) getFunction];
      return OrgGeogebraCommonKernelArithmeticExpressionNode_makePolyTreeFromFunctionWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticEquation_(self, func, equ);
    }
    else if ([self->left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]] && OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) == OrgGeogebraCommonPluginOperationEnum_get_DERIVATIVE()) {
      OrgGeogebraCommonKernelArithmeticFunction *base = [((id<OrgGeogebraCommonKernelArithmeticFunctional>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctional>) check_protocol_cast(OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))), @protocol(OrgGeogebraCommonKernelArithmeticFunctional))))) getFunction];
      jint deg = J2ObjCFpToInt(JavaLangMath_ceilWithDouble_([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))))) evaluateDouble]));
      for (jint i = 0; i < deg; i++) {
        base = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctional>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctional>) check_protocol_cast(OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))), @protocol(OrgGeogebraCommonKernelArithmeticFunctional))))) getFunction])) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(base)) getFunctionVariable] withOrgGeogebraCommonKernelKernel:self->kernel_])) wrap], [base getFunctionVariable]);
      }
      return OrgGeogebraCommonKernelArithmeticExpressionNode_makePolyTreeFromFunctionWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticEquation_(self, base, equ);
    }
  }
  if (!OrgGeogebraCommonKernelArithmeticExpressionNode_polynomialOperationWithOrgGeogebraCommonPluginOperationEnum_(self->operation_)) {
    if ([self->left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticValidExpression class]] && [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(((OrgGeogebraCommonKernelArithmeticValidExpression *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticValidExpression class])))) containsFunctionVariable]) {
      [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) setIsPolynomialWithBoolean:NO];
    }
    if ([self->right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticValidExpression class]] && [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(((OrgGeogebraCommonKernelArithmeticValidExpression *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticValidExpression class])))) containsFunctionVariable]) {
      [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) setIsPolynomialWithBoolean:NO];
    }
    return new_OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticTerm_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->left_, self->operation_, self->right_), @""));
  }
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) isExpressionNode]) {
    lt = OrgGeogebraCommonKernelArithmeticExpressionNode_makePolynomialTreeWithOrgGeogebraCommonKernelArithmeticEquation_(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])), equ);
  }
  else if ([self->left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
    lt = new_OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticFunctionVariable class])) getSetVarString]);
  }
  else {
    lt = new_OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticTerm_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(self->left_, @""));
  }
  if (self->right_ != nil) {
    if ([self->right_ isExpressionNode]) {
      rt = OrgGeogebraCommonKernelArithmeticExpressionNode_makePolynomialTreeWithOrgGeogebraCommonKernelArithmeticEquation_(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])), equ);
    }
    else if ([self->right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
      rt = new_OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticFunctionVariable class])) getSetVarString]);
    }
    else {
      if ([self->right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]]) {
        OrgGeogebraCommonKernelArithmeticMyList *list = (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticMyList class]);
        for (jint i = 0; i < [list size]; i++) {
          id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [list getListElementWithInt:i];
          if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
            (void) OrgGeogebraCommonKernelArithmeticExpressionNode_makePolynomialTreeWithOrgGeogebraCommonKernelArithmeticEquation_(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))), equ);
          }
        }
      }
      return [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(lt)) applyWithOrgGeogebraCommonPluginOperationEnum:self->operation_ withOrgGeogebraCommonKernelArithmeticExpressionValue:self->right_ withOrgGeogebraCommonKernelArithmeticEquation:equ];
    }
  }
  return [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(lt)) applyWithOrgGeogebraCommonPluginOperationEnum:self->operation_ withOrgGeogebraCommonKernelArithmeticPolynomial:rt withOrgGeogebraCommonKernelArithmeticEquation:equ];
}

OrgGeogebraCommonKernelArithmeticPolynomial *OrgGeogebraCommonKernelArithmeticExpressionNode_makePolyTreeFromFunctionWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, OrgGeogebraCommonKernelArithmeticFunction *func, OrgGeogebraCommonKernelArithmeticEquation *equ) {
  if ([self->right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    if (![((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) isFunctionDependent]) {
      [equ setFunctionDependentWithBoolean:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) containsFunctionVariable]];
    }
  }
  else if ([self->right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
    [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) setFunctionDependentWithBoolean:YES];
  }
  if ([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) isFunctionDependent]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *expr = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(func)) getExpression])) getCopyWithOrgGeogebraCommonKernelKernel:self->kernel_];
    expr = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expr)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:[func getFunctionVariable] withOrgGeogebraCommonKernelArithmeticExpressionValue:self->right_])) wrap];
    return OrgGeogebraCommonKernelArithmeticExpressionNode_makePolynomialTreeWithOrgGeogebraCommonKernelArithmeticEquation_(nil_chk(expr), equ);
  }
  return new_OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticTerm_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->left_, self->operation_, self->right_), @""));
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_polynomialOperationWithOrgGeogebraCommonPluginOperationEnum_(OrgGeogebraCommonPluginOperationEnum *operation2) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  switch ([operation2 ordinal]) {
    case OrgGeogebraCommonPluginOperation_NO_OPERATION:
    case OrgGeogebraCommonPluginOperation_PLUS:
    case OrgGeogebraCommonPluginOperation_MINUS:
    case OrgGeogebraCommonPluginOperation_MULTIPLY:
    case OrgGeogebraCommonPluginOperation_MULTIPLY_OR_FUNCTION:
    case OrgGeogebraCommonPluginOperation_DIVIDE:
    case OrgGeogebraCommonPluginOperation_POWER:
    case OrgGeogebraCommonPluginOperation_FUNCTION:
    case OrgGeogebraCommonPluginOperation_FUNCTION_NVAR:
    return YES;
    default:
    return NO;
  }
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_isConstant(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self)) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) isConstant];
  }
  return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) isConstant] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->right_)) isConstant];
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_hasOperations(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  if (self->leaf_) {
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) isExpressionNode]) {
      OrgGeogebraCommonKernelArithmeticExpressionNode_hasOperations(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])));
    }
    else {
      return NO;
    }
  }
  return (self->right_ != nil);
}

JavaUtilHashSet *OrgGeogebraCommonKernelArithmeticExpressionNode_getVariables(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  if (self->leaf_) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) getVariables];
  }
  JavaUtilHashSet *leftVars = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) getVariables];
  JavaUtilHashSet *rightVars = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->right_)) getVariables];
  if (leftVars == nil) {
    return rightVars;
  }
  else if (rightVars == nil) {
    return leftVars;
  }
  else {
    [leftVars addAllWithJavaUtilCollection:rightVars];
    return leftVars;
  }
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(OrgGeogebraCommonKernelArithmeticExpressionNode *self) {
  return self->leaf_;
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_expandForOGPWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev) {
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(self->operation_)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()] && [ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) return NO;
  return (([self->operation_ isEqual:OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()] || [self->operation_ isEqual:OrgGeogebraCommonPluginOperationEnum_get_DIVIDE()] || [self->operation_ isEqual:OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY()] || [self->operation_ isEqual:OrgGeogebraCommonPluginOperationEnum_get_MINUS()] || [self->operation_ isEqual:OrgGeogebraCommonPluginOperationEnum_get_PLUS()] || [self->operation_ isEqual:OrgGeogebraCommonPluginOperationEnum_get_POWER()]) && ([ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]] || [ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPolygon class]] || [ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]));
}

NSString *OrgGeogebraCommonKernelArithmeticExpressionNode_getTreeClassWithNSString_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, NSString *prefix) {
  NSString *ret = @"";
  ret = JreStrcat("$$", ret, @"-\n");
  if (self->left_ != nil) {
    ret = JreStrcat("$$", ret, JreStrcat("$$", prefix, @"  \\l:"));
    if ([self->left_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
      ret = JreStrcat("$$", ret, OrgGeogebraCommonKernelArithmeticExpressionNode_getTreeClassWithNSString_(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->left_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])), JreStrcat("$$", prefix, @"   ")));
    }
    else {
      ret = JreStrcat("$@", ret, [self->left_ getClass]);
    }
    ret = JreStrcat("$C", ret, 0x000a);
  }
  if (self->right_ != nil) {
    ret = JreStrcat("$$", ret, JreStrcat("$$", prefix, @"  \\r:"));
    if ([self->right_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
      ret = JreStrcat("$$", ret, OrgGeogebraCommonKernelArithmeticExpressionNode_getTreeClassWithNSString_(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->right_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])), JreStrcat("$$", prefix, @"   ")));
    }
    else {
      ret = JreStrcat("$@", ret, [self->right_ getClass]);
    }
    ret = JreStrcat("$C", ret, 0x000a);
  }
  return ret;
}

NSString *OrgGeogebraCommonKernelArithmeticExpressionNode_toStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if (self->leaf_) {
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) isGeoElement]) {
      return [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->left_, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
    }
    return [self->left_ toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  NSString *leftStr = nil, *rightStr = nil;
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) isGeoElement]) {
    if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType])) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_OGP()] && OrgGeogebraCommonKernelArithmeticExpressionNode_expandForOGPWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, self->left_)) {
      leftStr = [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->left_, [OrgGeogebraCommonKernelGeosGeoElement class])) getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:tpl];
    }
    else leftStr = [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->left_, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  else {
    leftStr = [self->left_ toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  if (self->right_ != nil) {
    if ([self->right_ isGeoElement]) {
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType])) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_OGP()] && OrgGeogebraCommonKernelArithmeticExpressionNode_expandForOGPWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, self->right_)) {
        rightStr = [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->right_, [OrgGeogebraCommonKernelGeosGeoElement class])) getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:tpl];
      }
      else rightStr = [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->right_, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
    }
    else {
      rightStr = [self->right_ toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
    }
  }
  return OrgGeogebraCommonKernelArithmeticExpressionNode_operationToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withNSString_withNSString_withBoolean_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonKernelKernel_(self->left_, self->right_, self->operation_, leftStr, rightStr, NO, tpl, self->kernel_);
}

NSString *OrgGeogebraCommonKernelArithmeticExpressionNode_toValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if (OrgGeogebraCommonKernelArithmeticExpressionNode_isLeaf(self)) {
    if (self->left_ != nil) {
      return [self->left_ toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
    }
  }
  NSString *leftStr = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(self->left_)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  NSString *rightStr = nil;
  if (self->right_ != nil) {
    rightStr = [self->right_ toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return OrgGeogebraCommonKernelArithmeticExpressionNode_operationToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withNSString_withNSString_withBoolean_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonKernelKernel_(self->left_, self->right_, self->operation_, leftStr, rightStr, YES, tpl, self->kernel_);
}

NSString *OrgGeogebraCommonKernelArithmeticExpressionNode_checkMathmlWithNSString_withOrgGeogebraCommonKernelStringTemplate_(NSString *str, OrgGeogebraCommonKernelStringTemplate *tpl) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()] && [((NSString *) nil_chk(str)) charAtWithInt:0] != '<') {
    return JreStrcat("$$$", @"<ci>", str, @"</ci>");
  }
  return str;
}

NSString *OrgGeogebraCommonKernelArithmeticExpressionNode_operationToStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withNSString_withNSString_withBoolean_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonKernelKernel_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> left, id<OrgGeogebraCommonKernelArithmeticExpressionValue> right, OrgGeogebraCommonPluginOperationEnum *operation, NSString *leftStr, NSString *rightStr, jboolean valueForm, OrgGeogebraCommonKernelStringTemplate *tpl, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> leftEval;
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *stringType = [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType];
  OrgGeogebraCommonMainLocalization *loc = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getLocalization];
  {
    OrgGeogebraCommonKernelArithmeticMyList *cond;
    OrgGeogebraCommonKernelArithmeticMyList *fn;
    switch ([operation ordinal]) {
      case OrgGeogebraCommonPluginOperation_NO_OPERATION:
      return leftStr;
      case OrgGeogebraCommonPluginOperation_NOT:
      return [tpl notStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:left withNSString:leftStr];
      case OrgGeogebraCommonPluginOperation_OR:
      return [tpl orStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withNSString:leftStr withNSString:rightStr];
      case OrgGeogebraCommonPluginOperation_AND_INTERVAL:
      return [tpl andIntervalStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withNSString:leftStr withNSString:rightStr withBoolean:valueForm];
      case OrgGeogebraCommonPluginOperation_AND:
      return [tpl andStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withNSString:leftStr withNSString:rightStr];
      case OrgGeogebraCommonPluginOperation_IMPLICATION:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<implies/>", leftStr, rightStr);
      }
      else {
        [tpl appendWithJavaLangStringBuilder:sb withNSString:leftStr withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonPluginOperationEnum:operation];
        (void) [sb appendWithChar:' '];
        switch ([stringType ordinal]) {
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
          if ([tpl isInsertLineBreaks]) {
            (void) [sb appendWithNSString:@"\\-"];
          }
          (void) [sb appendWithNSString:@"\\to"];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
          (void) [sb appendWithNSString:@"toward"];
          break;
          default:
          (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strIMPLIES_()];
        }
        (void) [sb appendWithChar:' '];
        [tpl appendWithJavaLangStringBuilder:sb withNSString:rightStr withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation];
      }
      break;
      case OrgGeogebraCommonPluginOperation_EQUAL_BOOLEAN:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<eq/>", leftStr, rightStr);
      }
      else if ([stringType isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_OGP()]) {
        (void) [sb appendWithNSString:JreStrcat("$$C$C", @"AreEqual[", leftStr, ',', rightStr, ']')];
      }
      else {
        if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([tpl getStringType])) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
          (void) [sb appendWithNSString:@"when(ggb\\_is\\_zero(simplify("];
          [tpl appendWithJavaLangStringBuilder:sb withNSString:leftStr withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonPluginOperationEnum:operation];
          (void) [sb appendWithNSString:@"-("];
          [tpl appendWithJavaLangStringBuilder:sb withNSString:rightStr withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation];
          (void) [sb appendWithNSString:@"))),true,false)"];
        }
        else {
          [tpl infixBinaryWithJavaLangStringBuilder:sb withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation withNSString:leftStr withNSString:rightStr withOrgGeogebraCommonKernelStringTemplate:tpl withNSString:[tpl equalSign]];
        }
      }
      break;
      case OrgGeogebraCommonPluginOperation_NOT_EQUAL:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<neq/>", leftStr, rightStr);
      }
      else {
        [tpl infixBinaryWithJavaLangStringBuilder:sb withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation withNSString:leftStr withNSString:rightStr withOrgGeogebraCommonKernelStringTemplate:tpl withNSString:[tpl notEqualSign]];
      }
      break;
      case OrgGeogebraCommonPluginOperation_IS_ELEMENT_OF:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<in/>", leftStr, rightStr);
      }
      else if ([stringType isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
        (void) [sb appendWithNSString:@"when(count\\_eq("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:','];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@")==0,false,true)"];
      }
      else {
        [tpl appendWithJavaLangStringBuilder:sb withNSString:leftStr withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonPluginOperationEnum:operation];
        (void) [sb appendWithChar:' '];
        switch ([stringType ordinal]) {
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
          if ([tpl isInsertLineBreaks]) {
            (void) [sb appendWithNSString:@"\\-"];
          }
          (void) [sb appendWithNSString:@"\\in"];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
          (void) [sb appendWithNSString:@" in "];
          break;
          default:
          (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strIS_ELEMENT_OF_()];
        }
        (void) [sb appendWithChar:' '];
        [tpl appendWithJavaLangStringBuilder:sb withNSString:rightStr withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation];
      }
      break;
      case OrgGeogebraCommonPluginOperation_IS_SUBSET_OF:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<subset/>", leftStr, rightStr);
      }
      else if ([stringType isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
        (void) [sb appendWithNSString:@"when(("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@") union ("];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@")==("];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@") union {},true,false"];
      }
      else {
        [tpl infixBinaryWithJavaLangStringBuilder:sb withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation withNSString:leftStr withNSString:rightStr withOrgGeogebraCommonKernelStringTemplate:tpl withNSString:[tpl subsetSign]];
      }
      break;
      case OrgGeogebraCommonPluginOperation_IS_SUBSET_OF_STRICT:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<prsubset/>", leftStr, rightStr);
      }
      else if ([stringType isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
        (void) [sb appendWithNSString:@"when(("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@") union ("];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@")==("];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@") union {} && dim("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@"union {})<dim("];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@"union {}),true,false"];
      }
      else {
        [tpl infixBinaryWithJavaLangStringBuilder:sb withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation withNSString:leftStr withNSString:rightStr withOrgGeogebraCommonKernelStringTemplate:tpl withNSString:[tpl strictSubsetSign]];
      }
      break;
      case OrgGeogebraCommonPluginOperation_SET_DIFFERENCE:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<setdiff/>", leftStr, rightStr);
      }
      else if ([stringType isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
        (void) [sb appendWithChar:'('];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@" minus "];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithChar:')'];
      }
      else {
        [tpl appendWithJavaLangStringBuilder:sb withNSString:leftStr withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonPluginOperationEnum:operation];
        (void) [sb appendWithChar:' '];
        switch ([stringType ordinal]) {
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
          if ([tpl isInsertLineBreaks]) {
            (void) [sb appendWithNSString:@"\\-"];
          }
          (void) [sb appendWithNSString:@"\\setminus"];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
          (void) [sb appendWithNSString:@" setminus "];
          break;
          default:
          (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strSET_DIFFERENCE_()];
        }
        (void) [sb appendWithChar:' '];
        if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isExpressionNode] && OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(nil_chk([right wrap])) == OrgGeogebraCommonPluginOperationEnum_get_SET_DIFFERENCE()) {
          (void) [sb appendWithNSString:[tpl leftBracket]];
          (void) [sb appendWithNSString:rightStr];
          (void) [sb appendWithNSString:[tpl rightBracket]];
        }
        else {
          [tpl appendWithJavaLangStringBuilder:sb withNSString:rightStr withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation];
        }
      }
      break;
      case OrgGeogebraCommonPluginOperation_LESS:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<lt/>", leftStr, rightStr);
      }
      else {
        [tpl infixBinaryWithJavaLangStringBuilder:sb withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation withNSString:leftStr withNSString:rightStr withOrgGeogebraCommonKernelStringTemplate:tpl withNSString:[tpl lessSign]];
      }
      break;
      case OrgGeogebraCommonPluginOperation_GREATER:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<gt/>", leftStr, rightStr);
      }
      else {
        [tpl infixBinaryWithJavaLangStringBuilder:sb withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation withNSString:leftStr withNSString:rightStr withOrgGeogebraCommonKernelStringTemplate:tpl withNSString:[tpl greaterSign]];
      }
      break;
      case OrgGeogebraCommonPluginOperation_LESS_EQUAL:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<leq/>", leftStr, rightStr);
      }
      else {
        [tpl infixBinaryWithJavaLangStringBuilder:sb withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation withNSString:leftStr withNSString:rightStr withOrgGeogebraCommonKernelStringTemplate:tpl withNSString:[tpl leqSign]];
      }
      break;
      case OrgGeogebraCommonPluginOperation_GREATER_EQUAL:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<qeq/>", leftStr, rightStr);
      }
      else {
        [tpl infixBinaryWithJavaLangStringBuilder:sb withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation withNSString:leftStr withNSString:rightStr withOrgGeogebraCommonKernelStringTemplate:tpl withNSString:[tpl geqSign]];
      }
      break;
      case OrgGeogebraCommonPluginOperation_PARALLEL:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_OGP()]) {
        (void) [sb appendWithNSString:JreStrcat("$$C$C", @"AreParallel[", leftStr, ',', rightStr, ']')];
        break;
      }
      [tpl infixBinaryWithJavaLangStringBuilder:sb withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation withNSString:leftStr withNSString:rightStr withOrgGeogebraCommonKernelStringTemplate:tpl withNSString:[tpl parallelSign]];
      break;
      case OrgGeogebraCommonPluginOperation_PERPENDICULAR:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_OGP()]) {
        (void) [sb appendWithNSString:JreStrcat("$$C$C", @"ArePerpendicular[", leftStr, ',', rightStr, ']')];
        break;
      }
      [tpl infixBinaryWithJavaLangStringBuilder:sb withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation withNSString:leftStr withNSString:rightStr withOrgGeogebraCommonKernelStringTemplate:tpl withNSString:[tpl perpSign]];
      break;
      case OrgGeogebraCommonPluginOperation_VECTORPRODUCT:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<vectorproduct/>", leftStr, rightStr);
      }
      else if ([stringType isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
        (void) [sb appendWithNSString:@"[[[ggbcrossarg0:="];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@"], [ggbcrossarg1:="];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@"]],when(is3dpoint(ggbcrossarg0)||is3dpoint(ggbcrossarg1),point(cross(ggbcrossarg0,ggbcrossarg1)),cross(ggbcrossarg0,ggbcrossarg1))][1]"];
      }
      else {
        [tpl appendWithJavaLangStringBuilder:sb withNSString:leftStr withOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonPluginOperationEnum:operation];
        (void) [sb appendWithChar:' '];
        switch ([stringType ordinal]) {
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
          if ([tpl isInsertLineBreaks]) {
            (void) [sb appendWithNSString:@"\\-"];
          }
          (void) [sb appendWithNSString:@"\\times"];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
          (void) [sb appendWithNSString:@" cdot "];
          break;
          default:
          (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_strVECTORPRODUCT_()];
        }
        (void) [sb appendWithChar:' '];
        [tpl appendWithJavaLangStringBuilder:sb withNSString:rightStr withOrgGeogebraCommonKernelArithmeticExpressionValue:right withOrgGeogebraCommonPluginOperationEnum:operation];
      }
      break;
      case OrgGeogebraCommonPluginOperation_PLUS:
      return [tpl plusStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withNSString:leftStr withNSString:rightStr withBoolean:valueForm];
      case OrgGeogebraCommonPluginOperation_MINUS:
      return [tpl minusStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withNSString:leftStr withNSString:rightStr withBoolean:valueForm withOrgGeogebraCommonMainLocalization:loc];
      case OrgGeogebraCommonPluginOperation_MULTIPLY:
      return [tpl multiplyStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withNSString:leftStr withNSString:rightStr withBoolean:valueForm withOrgGeogebraCommonMainLocalization:loc];
      case OrgGeogebraCommonPluginOperation_DIVIDE:
      return [tpl divideStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withNSString:leftStr withNSString:rightStr withBoolean:valueForm];
      case OrgGeogebraCommonPluginOperation_POWER:
      return [tpl powerStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:left withOrgGeogebraCommonKernelArithmeticExpressionValue:right withNSString:leftStr withNSString:rightStr withBoolean:valueForm];
      case OrgGeogebraCommonPluginOperation_FACTORIAL:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<factorial/>", leftStr, nil);
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"fact {"];
        if (([((NSString *) nil_chk(leftStr)) charAtWithInt:0] != '-') && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf]) {
          (void) [sb appendWithNSString:leftStr];
        }
        else {
          (void) [sb appendWithChar:'('];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithChar:')'];
        }
        (void) [sb appendWithNSString:@" }"];
        break;
        default:
        if ((([((NSString *) nil_chk(leftStr)) charAtWithInt:0] != '-') && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf]) || (OrgGeogebraCommonKernelArithmeticExpressionNode_opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue_(left) > [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_POWER())) ordinal])) {
          (void) [sb appendWithNSString:leftStr];
        }
        else {
          (void) [sb appendWithNSString:[tpl leftBracket]];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithNSString:[tpl rightBracket]];
        }
        (void) [sb appendWithChar:'!'];
        break;
      }
      break;
      case OrgGeogebraCommonPluginOperation_COS:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<cos/>", @"\\cos", @"COS(", @"cos", @"cos", tpl, loc, YES);
      break;
      case OrgGeogebraCommonPluginOperation_SIN:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<sin/>", @"\\sin", @"SIN(", @"sin", @"sin", tpl, loc, YES);
      break;
      case OrgGeogebraCommonPluginOperation_TAN:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<tan/>", @"\\tan", @"TAN(", @"tan", @"tan", tpl, loc, YES);
      break;
      case OrgGeogebraCommonPluginOperation_CSC:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<csc/>", @"\\csc", @"CSC(", @"csc", @"csc", tpl, loc, YES);
      break;
      case OrgGeogebraCommonPluginOperation_SEC:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<sec/>", @"\\sec", @"SEC(", @"sec", @"sec", tpl, loc, YES);
      break;
      case OrgGeogebraCommonPluginOperation_COT:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<cot/>", @"\\cot", @"COT(", @"cot", @"cot", tpl, loc, YES);
      break;
      case OrgGeogebraCommonPluginOperation_CSCH:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<csch/>", @"\\csch", @"CSCH(", @"csch", @"func csch", tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_SECH:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<sech/>", @"\\sech", @"SECH(", @"sech", @"func sech", tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_COTH:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<coth/>", @"\\coth", @"COTH(", @"coth", @"coth", tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_ARCCOS:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<arccos/>", @"\\arccos", @"ACOS(", @"acos", @"arccos", OrgGeogebraCommonKernelArithmeticExpressionNode_degFixWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(@"acos", left, kernel), tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_ARCSIN:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<arcsin/>", @"\\arcsin", @"ASIN(", @"asin", @"arcsin", OrgGeogebraCommonKernelArithmeticExpressionNode_degFixWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(@"asin", left, kernel), tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_ARCTAN:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<arctan/>", @"\\arctan", @"ATAN(", @"atan", @"arctan", OrgGeogebraCommonKernelArithmeticExpressionNode_degFixWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(@"atan", left, kernel), tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_ARCTAN2:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<atan/>", leftStr, rightStr);
      }
      else {
        switch ([stringType ordinal]) {
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
          (void) [sb appendWithNSString:@"atan2 \\left( "];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
          (void) [sb appendWithNSString:@"func atan2 left( "];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
          (void) [sb appendWithNSString:@"ATAN2("];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
          (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticExpressionNode_degFixWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(@"atan2", left, kernel)];
          (void) [sb appendWithNSString:@"("];
          break;
          default:
          (void) [sb appendWithNSString:@"atan2("];
        }
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:','];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:[tpl rightBracket]];
      }
      break;
      case OrgGeogebraCommonPluginOperation_COSH:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<cosh/>", @"\\cosh", @"COSH(", @"cosh", @"cosh", tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_SINH:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<sinh/>", @"\\sinh", @"SINH(", @"sinh", @"sinh", tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_TANH:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<tanh/>", @"\\tanh", @"TANH(", @"tanh", @"tanh", tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_ACOSH:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<arccosh/>", @"\\acosh", @"ACOSH(", @"acosh", @"arcosh", tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_ASINH:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<arcsinh/>", @"\\asinh", @"ASINH(", @"asinh", @"arsinh", tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_ATANH:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<arctanh/>", @"\\atanh", @"ATANH(", @"atanh", @"artanh", tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_REAL:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<real/>", @"\\real", @"", @"real", @"real", @"re", tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_IMAGINARY:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<imaginary/>", @"\\imaginary", @"", @"imaginary", @"imaginary", @"im", tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_FRACTIONAL_PART:
      OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, @"<todo/>", @"\\fractionalPart", @"", @"fractionalPart", @"fractionalPart", @"fractionalPart", tpl, loc, NO);
      break;
      case OrgGeogebraCommonPluginOperation_ZETA:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\zeta\\left( "];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"func zeta left ("];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        (void) [sb appendWithNSString:@"Zeta("];
        break;
        default:
        (void) [sb appendWithNSString:@"zeta("];
      }
      (void) [sb appendWithNSString:leftStr];
      (void) [sb appendWithNSString:[tpl rightBracket]];
      break;
      case OrgGeogebraCommonPluginOperation_CI:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\Ci \\left( "];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"func Ci left ("];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        OrgGeogebraCommonKernelArithmeticExpressionNode_appendReduceFunctionWithJavaLangStringBuilder_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(sb, left, @"Ci");
        break;
        default:
        (void) [sb appendWithNSString:@"cosIntegral("];
      }
      (void) [sb appendWithNSString:leftStr];
      (void) [sb appendWithNSString:[tpl rightBracket]];
      break;
      case OrgGeogebraCommonPluginOperation_SI:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\Si \\left( "];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"func Si left ("];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        OrgGeogebraCommonKernelArithmeticExpressionNode_appendReduceFunctionWithJavaLangStringBuilder_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(sb, left, @"Si");
        break;
        default:
        (void) [sb appendWithNSString:@"sinIntegral("];
      }
      (void) [sb appendWithNSString:leftStr];
      (void) [sb appendWithNSString:[tpl rightBracket]];
      break;
      case OrgGeogebraCommonPluginOperation_EI:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\Ei \\left( "];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"func Ei left ("];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        OrgGeogebraCommonKernelArithmeticExpressionNode_appendReduceFunctionWithJavaLangStringBuilder_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(sb, left, @"Ei");
        break;
        default:
        (void) [sb appendWithNSString:@"expIntegral("];
      }
      (void) [sb appendWithNSString:leftStr];
      (void) [sb appendWithNSString:[tpl rightBracket]];
      break;
      case OrgGeogebraCommonPluginOperation_ARBCONST:
      (void) [sb appendWithNSString:@"arbconst("];
      (void) [sb appendWithNSString:leftStr];
      (void) [sb appendWithNSString:@")"];
      break;
      case OrgGeogebraCommonPluginOperation_ARBINT:
      (void) [sb appendWithNSString:@"arbint("];
      (void) [sb appendWithNSString:leftStr];
      (void) [sb appendWithNSString:@")"];
      break;
      case OrgGeogebraCommonPluginOperation_ARBCOMPLEX:
      (void) [sb appendWithNSString:@"arbcomplex("];
      (void) [sb appendWithNSString:leftStr];
      (void) [sb appendWithNSString:@")"];
      break;
      case OrgGeogebraCommonPluginOperation_EXP:
      {
        jboolean addParentheses;
        switch ([stringType ordinal]) {
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
          OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<exp/>", leftStr, nil);
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
          (void) [sb appendWithNSString:@"func "];
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
          addParentheses = ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isExpressionNode] && [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))))) isEqual:OrgGeogebraCommonPluginOperationEnum_get_POWER()]);
          (void) [sb appendWithNSString:@"\\mathit{e}^{"];
          if (addParentheses) {
            (void) [sb appendWithNSString:[tpl leftBracket]];
          }
          (void) [sb appendWithNSString:leftStr];
          if (addParentheses) {
            (void) [sb appendWithNSString:[tpl rightBracket]];
          }
          (void) [sb appendWithChar:'}'];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
          (void) [sb appendWithNSString:@"exp("];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithChar:')'];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
          (void) [sb appendWithNSString:@"EXP("];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithChar:')'];
          break;
          default:
          (void) [sb appendWithNSString:OrgGeogebraCommonUtilUnicode_get_EULER_STRING_()];
          if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf]) {
            (void) [sb appendWithNSString:@"^"];
            (void) [sb appendWithNSString:leftStr];
          }
          else {
            (void) [sb appendWithNSString:@"^("];
            (void) [sb appendWithNSString:leftStr];
            (void) [sb appendWithChar:')'];
          }
          break;
        }
      }
      break;
      case OrgGeogebraCommonPluginOperation_LOG:
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<ln/>", leftStr, nil);
      }
      else {
        switch ([stringType ordinal]) {
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
          (void) [sb appendWithNSString:@"\\ln \\left( "];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
          (void) [sb appendWithNSString:@"ln left ( "];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
          (void) [sb appendWithNSString:@"log("];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PGF:
          default:
          (void) [sb appendWithNSString:@"ln("];
          break;
        }
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:[tpl rightBracket]];
      }
      break;
      case OrgGeogebraCommonPluginOperation_LOGB:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(sb, @"<log/>", @"<logbase>", leftStr, @"</logbase>", @"", rightStr, @"");
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\log_{"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:'}'];
        (void) [sb appendWithNSString:[tpl leftBracket]];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:[tpl rightBracket]];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"log_{"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:'}'];
        (void) [sb appendWithNSString:[tpl leftBracket]];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:[tpl rightBracket]];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PGF:
        (void) [sb appendWithNSString:@"ln("];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@")/ln("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
        break;
        default:
        (void) [sb appendWithNSString:@"log("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@", "];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithChar:')'];
        break;
      }
      break;
      case OrgGeogebraCommonPluginOperation_POLYGAMMA:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\psi_{"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:'}'];
        (void) [sb appendWithNSString:[tpl leftBracket]];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:[tpl rightBracket]];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        OrgGeogebraCommonKernelArithmeticExpressionNode_appendReduceFunctionWithJavaLangStringBuilder_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(sb, left, @"Psi");
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithChar:','];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
        break;
        default:
        (void) [sb appendWithNSString:@"polygamma("];
        (void) [sb appendWithNSString:leftStr];
        if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()]) (void) [sb appendWithNSString:@"\",\""];
        else (void) [sb appendWithNSString:@", "];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithChar:')'];
        break;
      }
      break;
      case OrgGeogebraCommonPluginOperation_ERF:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\erf"];
        (void) [sb appendWithNSString:[tpl leftBracket]];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:[tpl rightBracket]];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"func "];
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        default:
        (void) [sb appendWithNSString:@"erf("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
        break;
      }
      break;
      case OrgGeogebraCommonPluginOperation_PSI:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\psi"];
        (void) [sb appendWithNSString:[tpl leftBracket]];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:[tpl rightBracket]];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        OrgGeogebraCommonKernelArithmeticExpressionNode_appendReduceFunctionWithJavaLangStringBuilder_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(sb, left, @"Psi");
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"func "];
        default:
        (void) [sb appendWithNSString:@"psi("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
        break;
      }
      break;
      case OrgGeogebraCommonPluginOperation_LOG10:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<log/>", leftStr, nil);
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\log_{10} \\left("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@"\\right)"];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"log_10 ("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@")"];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
        (void) [sb appendWithNSString:@"log("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PGF:
        (void) [sb appendWithNSString:@"log10("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
        break;
        default:
        (void) [sb appendWithNSString:@"lg("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
        break;
      }
      break;
      case OrgGeogebraCommonPluginOperation_LOG2:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\log_{2} \\left("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@"\\right)"];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"log_2 ("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@")"];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        (void) [sb appendWithNSString:@"log("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@")/log(2)"];
        break;
        default:
        (void) [sb appendWithNSString:@"ld("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
        break;
      }
      break;
      case OrgGeogebraCommonPluginOperation_NROOT:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<root/>", leftStr, nil);
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\sqrt["];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@"]{"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:'}'];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"nroot{"];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@"},{"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:'}'];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA:
        (void) [sb appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getFunctionWithNSString:@"nroot"]];
        (void) [sb appendWithNSString:@"("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:','];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithChar:')'];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        if ([((NSString *) nil_chk(leftStr)) isEqual:OrgGeogebraCommonUtilUnicode_get_EULER_STRING_()]) {
          (void) [sb appendWithNSString:@"exp(1/("];
          (void) [sb appendWithNSString:rightStr];
          (void) [sb appendWithNSString:@"))"];
        }
        else {
          (void) [sb appendWithNSString:@"surd("];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithChar:','];
          (void) [sb appendWithNSString:rightStr];
          (void) [sb appendWithNSString:@")"];
        }
        break;
        default:
        (void) [sb appendWithNSString:@"("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@")^(1/("];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@"))"];
        break;
      }
      break;
      case OrgGeogebraCommonPluginOperation_SQRT_SHORT:
      case OrgGeogebraCommonPluginOperation_SQRT:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<root/>", leftStr, nil);
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\sqrt{"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:'}'];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"sqrt{"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:'}'];
        break;
        default:
        (void) [sb appendWithNSString:@"sqrt("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
      }
      break;
      case OrgGeogebraCommonPluginOperation_CBRT:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(sb, @"<root/>", @"<degree>", @"3", @"</degree>", @"", leftStr, @"");
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\sqrt[3]{"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:'}'];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"nroot{3}{"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:'}'];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        (void) [sb appendWithNSString:@"surd("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@",3)"];
        break;
        default:
        (void) [sb appendWithNSString:@"cbrt("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
      }
      break;
      case OrgGeogebraCommonPluginOperation_ABS:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<abs/>", leftStr, nil);
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\left|"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@"\\right|"];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"abs{"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:'}'];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        (void) [sb appendWithNSString:@"normal(ggbabs("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@"))"];
        break;
        default:
        (void) [sb appendWithNSString:@"abs("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
      }
      break;
      case OrgGeogebraCommonPluginOperation_SGN:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\sgn("];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        (void) [sb appendWithNSString:@"sign("];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"func "];
        default:
        (void) [sb appendWithNSString:@"sgn("];
      }
      (void) [sb appendWithNSString:leftStr];
      (void) [sb appendWithChar:')'];
      break;
      case OrgGeogebraCommonPluginOperation_CONJUGATE:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<conjugate/>", leftStr, nil);
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\overline{"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@"}"];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"overline{"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@"}"];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        (void) [sb appendWithNSString:@"conj("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
        break;
        default:
        (void) [sb appendWithNSString:@"conjugate("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
      }
      break;
      case OrgGeogebraCommonPluginOperation_ARG:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<arg/>", leftStr, nil);
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\arg \\left( "];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@"\\right)"];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        (void) [sb appendWithNSString:@"arg("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"func "];
        default:
        (void) [sb appendWithNSString:@"arg("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
      }
      break;
      case OrgGeogebraCommonPluginOperation_ALT:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<alt/>", leftStr, nil);
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\alt \\left( "];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@"\\right)"];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        (void) [sb appendWithNSString:@"ggbalt("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"func "];
        default:
        (void) [sb appendWithNSString:@"alt("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
      }
      break;
      case OrgGeogebraCommonPluginOperation_FLOOR:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<floor/>", leftStr, nil);
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        if (![((OrgGeogebraCommonMainApp *) nil_chk([kernel getApplication])) isLatexMathQuillStyleWithOrgGeogebraCommonKernelStringTemplate:tpl]) {
          (void) [sb appendWithNSString:@"\\left"];
        }
        (void) [sb appendWithNSString:@"\\lfloor "];
        (void) [sb appendWithNSString:leftStr];
        if (![((OrgGeogebraCommonMainApp *) nil_chk([kernel getApplication])) isLatexMathQuillStyleWithOrgGeogebraCommonKernelStringTemplate:tpl]) {
          (void) [sb appendWithNSString:@"\\right"];
        }
        (void) [sb appendWithNSString:@"\\rfloor "];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@" left lfloor "];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@" right rfloor"];
        break;
        default:
        (void) [sb appendWithNSString:@"floor("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
      }
      break;
      case OrgGeogebraCommonPluginOperation_CEIL:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
        OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<ceiling/>", leftStr, nil);
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        if (![((OrgGeogebraCommonMainApp *) nil_chk([kernel getApplication])) isHTML5Applet]) {
          (void) [sb appendWithNSString:@"\\left"];
        }
        (void) [sb appendWithNSString:@"\\lceil "];
        (void) [sb appendWithNSString:leftStr];
        if (![((OrgGeogebraCommonMainApp *) nil_chk([kernel getApplication])) isHTML5Applet]) {
          (void) [sb appendWithNSString:@"\\right"];
        }
        (void) [sb appendWithNSString:@"\\rceil "];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"left lceil "];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@" right rceil"];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
        (void) [sb appendWithNSString:@"ceiling("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
        break;
        default:
        (void) [sb appendWithNSString:@"ceil("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:')'];
      }
      break;
      case OrgGeogebraCommonPluginOperation_ROUND:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\round \\left( "];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"func round left ("];
        default:
        (void) [sb appendWithNSString:@"round("];
      }
      (void) [sb appendWithNSString:leftStr];
      if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right] && (!JavaLangDouble_isNaNWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(right, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble]) || [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isGeoElement])) {
        (void) [sb appendWithNSString:@", "];
        (void) [sb appendWithNSString:rightStr];
      }
      (void) [sb appendWithNSString:[tpl rightBracket]];
      break;
      case OrgGeogebraCommonPluginOperation_GAMMA:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\Gamma \\left( "];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"%GAMMA left ("];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        (void) [sb appendWithNSString:@"Gamma("];
        break;
        default:
        (void) [sb appendWithNSString:@"gamma("];
      }
      (void) [sb appendWithNSString:leftStr];
      (void) [sb appendWithNSString:[tpl rightBracket]];
      break;
      case OrgGeogebraCommonPluginOperation_GAMMA_INCOMPLETE:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\gamma \\left( "];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"%GAMMA left ("];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        (void) [sb appendWithNSString:@"igamma("];
        break;
        default:
        (void) [sb appendWithNSString:@"gamma("];
      }
      (void) [sb appendWithNSString:leftStr];
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()]) (void) [sb appendWithNSString:@"\",\""];
      else (void) [sb appendWithNSString:@", "];
      (void) [sb appendWithNSString:rightStr];
      (void) [sb appendWithNSString:[tpl rightBracket]];
      break;
      case OrgGeogebraCommonPluginOperation_GAMMA_INCOMPLETE_REGULARIZED:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"P \\left( "];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"func gammaRegularized left ("];
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        (void) [sb appendWithNSString:@"igamma("];
        break;
        default:
        (void) [sb appendWithNSString:@"gammaRegularized("];
      }
      (void) [sb appendWithNSString:leftStr];
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()]) (void) [sb appendWithNSString:@"\",\""];
      else (void) [sb appendWithNSString:@", "];
      (void) [sb appendWithNSString:rightStr];
      if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()) {
        (void) [sb appendWithNSString:@",1"];
      }
      (void) [sb appendWithNSString:[tpl rightBracket]];
      break;
      case OrgGeogebraCommonPluginOperation_BETA:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\Beta \\left( "];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"%BETA left("];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        (void) [sb appendWithNSString:@"Beta("];
        break;
        default:
        (void) [sb appendWithNSString:@"beta("];
      }
      (void) [sb appendWithNSString:leftStr];
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()]) (void) [sb appendWithNSString:@"\",\""];
      else (void) [sb appendWithNSString:@", "];
      (void) [sb appendWithNSString:rightStr];
      (void) [sb appendWithNSString:[tpl rightBracket]];
      break;
      case OrgGeogebraCommonPluginOperation_BETA_INCOMPLETE:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"\\Beta \\left( "];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"%BETA left("];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        (void) [sb appendWithNSString:@"Beta("];
        break;
        default:
        (void) [sb appendWithNSString:@"beta("];
      }
      (void) [sb appendWithNSString:leftStr];
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()]) (void) [sb appendWithNSString:@"\",\""];
      else (void) [sb appendWithNSString:@", "];
      (void) [sb appendWithNSString:rightStr];
      (void) [sb appendWithNSString:[tpl rightBracket]];
      break;
      case OrgGeogebraCommonPluginOperation_BETA_INCOMPLETE_REGULARIZED:
      switch ([stringType ordinal]) {
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        (void) [sb appendWithNSString:@"I \\left( "];
        break;
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        (void) [sb appendWithNSString:@"func betaRegularized left ("];
        case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        (void) [sb appendWithNSString:@"Beta("];
        break;
        default:
        (void) [sb appendWithNSString:@"betaRegularized("];
      }
      (void) [sb appendWithNSString:leftStr];
      if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()]) (void) [sb appendWithNSString:@"\",\""];
      else (void) [sb appendWithNSString:@", "];
      (void) [sb appendWithNSString:rightStr];
      if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()) {
        (void) [sb appendWithNSString:@",1"];
      }
      (void) [sb appendWithNSString:[tpl rightBracket]];
      break;
      case OrgGeogebraCommonPluginOperation_RANDOM:
      if (valueForm) {
        (void) [sb appendWithNSString:leftStr];
      }
      else {
        switch ([stringType ordinal]) {
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
          (void) [sb appendWithNSString:@"rand(0,1)"];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
          (void) [sb appendWithNSString:@"func "];
          default:
          (void) [sb appendWithNSString:@"random()"];
        }
      }
      break;
      case OrgGeogebraCommonPluginOperation_XCOORD:
      if (stringType != OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC() && valueForm && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:(leftEval = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl])]) {
        (void) [sb appendWithNSString:[kernel formatWithDouble:[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(leftEval, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector])) getX] withOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else if (stringType != OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC() && valueForm && [OrgGeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:(leftEval = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl])]) {
        (void) [sb appendWithNSString:[kernel formatWithDouble:IOSDoubleArray_Get(nil_chk([((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(leftEval, @protocol(OrgGeogebraCommonKernelArithmetic3DVector3DValue))))) getPointAsDouble]), 0) withOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else if (valueForm && ([(leftEval = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl]) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]])) {
        (void) [sb appendWithNSString:[kernel formatWithDouble:[((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(leftEval, [OrgGeogebraCommonKernelGeosGeoLine class])))) getX] withOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        switch ([stringType ordinal]) {
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
          (void) [sb appendWithNSString:@" x \\left( "];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithNSString:[tpl rightBracket]];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
          (void) [sb appendWithNSString:@"func x left ("];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithNSString:[tpl rightBracket]];
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
          (void) [sb appendWithNSString:@"xcoord("];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithNSString:@")"];
          break;
          default:
          (void) [sb appendWithNSString:@"x("];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithChar:')'];
        }
      }
      break;
      case OrgGeogebraCommonPluginOperation_YCOORD:
      leftEval = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl];
      if (stringType != OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC() && valueForm && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:leftEval]) {
        (void) [sb appendWithNSString:[kernel formatWithDouble:[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(leftEval, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector])) getY] withOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else if (stringType != OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC() && valueForm && [OrgGeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:(leftEval = [left evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl])]) {
        (void) [sb appendWithNSString:[kernel formatWithDouble:IOSDoubleArray_Get(nil_chk([((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(leftEval, @protocol(OrgGeogebraCommonKernelArithmetic3DVector3DValue))))) getPointAsDouble]), 1) withOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else if (valueForm && ([(leftEval = [left evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl]) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]])) {
        (void) [sb appendWithNSString:[kernel formatWithDouble:[((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(leftEval, [OrgGeogebraCommonKernelGeosGeoLine class])))) getY] withOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        switch ([stringType ordinal]) {
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
          (void) [sb appendWithNSString:@" y \\left( "];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithNSString:@"\\right)"];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
          (void) [sb appendWithNSString:@"func y left ("];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithNSString:[tpl rightBracket]];
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
          (void) [sb appendWithNSString:@"ycoord("];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithNSString:@")"];
          break;
          default:
          (void) [sb appendWithNSString:@"y("];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithChar:')'];
        }
      }
      break;
      case OrgGeogebraCommonPluginOperation_ZCOORD:
      if (stringType != OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC() && valueForm && [OrgGeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:(leftEval = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl])]) {
        (void) [sb appendWithNSString:[kernel formatWithDouble:IOSDoubleArray_Get(nil_chk([((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(leftEval, @protocol(OrgGeogebraCommonKernelArithmetic3DVector3DValue))))) getPointAsDouble]), 2) withOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else if (valueForm && ([(leftEval = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl]) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]])) {
        (void) [sb appendWithNSString:[kernel formatWithDouble:[((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(leftEval, [OrgGeogebraCommonKernelGeosGeoLine class])))) getZ] withOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        switch ([stringType ordinal]) {
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
          (void) [sb appendWithNSString:@" z \\left( "];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithNSString:@"\\right)"];
          break;
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
          (void) [sb appendWithNSString:@"func z left ("];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithNSString:[tpl rightBracket]];
          case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
          (void) [sb appendWithNSString:@"zcoord("];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithNSString:@")"];
          break;
          default:
          (void) [sb appendWithNSString:@"z("];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithChar:')'];
        }
      }
      break;
      case OrgGeogebraCommonPluginOperation_MULTIPLY_OR_FUNCTION:
      OrgGeogebraCommonUtilDebugLog_debugWithNSString_(@"Operation not resolved");
      case OrgGeogebraCommonPluginOperation_FUNCTION:
      if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC() && [OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:right]) {
        id<OrgGeogebraCommonKernelArithmeticListValue> list = (id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(right, @protocol(OrgGeogebraCommonKernelArithmeticListValue));
        (void) [sb appendWithNSString:@"seq("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:'('];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@"[j]),j,0,"];
        (void) [sb appendWithInt:[((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(list)) size] - 1];
        (void) [sb appendWithChar:')'];
        break;
      }
      if ([left isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
        OrgGeogebraCommonKernelGeosGeoFunction *geo = (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoFunction class]);
        if ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(geo)) isLabelSet]) {
          if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()]) (void) [sb appendWithNSString:@"func "];
          (void) [sb appendWithNSString:[geo getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
          (void) [sb appendWithNSString:[tpl leftBracket]];
          (void) [sb appendWithNSString:rightStr];
          (void) [sb appendWithNSString:[tpl rightBracket]];
        }
        else {
          OrgGeogebraCommonKernelArithmeticFunctionVariable *var = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([geo getFunction])) getFunctionVariable];
          NSString *oldVarStr = [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(var)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
          [var setVarStringWithNSString:rightStr];
          if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()]) (void) [sb appendWithNSString:@"func "];
          NSString *rhString = [((NSString *) nil_chk(oldVarStr)) isEqual:rightStr] ? leftStr : [geo getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
          (void) [sb appendWithNSString:rhString];
          [var setVarStringWithNSString:oldVarStr];
        }
      }
      else if (valueForm && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isExpressionNode]) {
        OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
        switch ([en->operation_ ordinal]) {
          case OrgGeogebraCommonPluginOperation_$VAR_ROW:
          case OrgGeogebraCommonPluginOperation_$VAR_COL:
          case OrgGeogebraCommonPluginOperation_$VAR_ROW_COL:
          (void) [sb appendWithNSString:[tpl leftBracket]];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithNSString:[tpl rightBracket]];
          break;
          default:
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithNSString:[tpl leftBracket]];
          (void) [sb appendWithNSString:rightStr];
          (void) [sb appendWithNSString:[tpl rightBracket]];
          break;
        }
      }
      else {
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:[tpl leftBracket]];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:[tpl rightBracket]];
      }
      break;
      case OrgGeogebraCommonPluginOperation_ELEMENT_OF:
      (void) [sb appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getCommandWithNSString:@"Element"]];
      (void) [sb appendWithChar:'['];
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isGeoElement]) {
        (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        (void) [sb appendWithNSString:leftStr];
      }
      (void) [sb appendWithNSString:@", "];
      (void) [sb appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticMyList class])))) getListElementWithInt:0])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      (void) [sb appendWithChar:']'];
      break;
      case OrgGeogebraCommonPluginOperation_FUNCTION_NVAR:
      if (valueForm) {
        if (([OrgGeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:left]) && ([right isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]])) {
          OrgGeogebraCommonKernelArithmeticFunctionNVar *func = [((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(left, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar))))) getFunction];
          OrgGeogebraCommonKernelArithmeticExpressionNode *en = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(func)) getExpression])) getCopyWithOrgGeogebraCommonKernelKernel:kernel];
          for (jint i = 0; (i < [func getVarNumber]) && (i < [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticMyList class])))) size]); i++) {
            (void) [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk([func getFunctionVariables]), i) withOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticMyList class])))) getListElementWithInt:i]];
          }
          if (![((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
            (void) [sb appendWithNSString:[tpl leftBracket]];
          }
          (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticExpressionNode_toValueStringWithOrgGeogebraCommonKernelStringTemplate_(nil_chk(en), tpl)];
          if (![stringType isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
            (void) [sb appendWithNSString:[tpl rightBracket]];
          }
        }
        else if ([left isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) {
          (void) [sb appendWithNSString:[tpl leftBracket]];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithNSString:[tpl leftBracket]];
          (void) [sb appendWithNSString:[rightStr substring:1 endIndex:((jint) [((NSString *) nil_chk(rightStr)) length]) - 1]];
          (void) [sb appendWithNSString:[tpl rightBracket]];
          (void) [sb appendWithNSString:[tpl rightBracket]];
        }
        else {
          (void) [sb appendWithNSString:[tpl leftBracket]];
          (void) [sb appendWithNSString:leftStr];
          (void) [sb appendWithNSString:[tpl rightBracket]];
        }
      }
      else {
        if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isGeoElement]) {
          (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        }
        else {
          (void) [sb appendWithNSString:leftStr];
        }
        if (![left isGeoElement] || [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoElement class])) isLabelSet] || [left isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]] || [left isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCasCell class]]) {
          (void) [sb appendWithNSString:[tpl leftBracket]];
          if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([tpl getStringType])) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
            (void) [sb appendWithNSString:[rightStr substring:2 endIndex:((jint) [((NSString *) nil_chk(rightStr)) length]) - 2]];
          }
          else {
            (void) [sb appendWithNSString:[rightStr substring:1 endIndex:((jint) [((NSString *) nil_chk(rightStr)) length]) - 1]];
          }
          (void) [sb appendWithNSString:[tpl rightBracket]];
        }
      }
      break;
      case OrgGeogebraCommonPluginOperation_VEC_FUNCTION:
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isGeoElement] && [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoElement class])) isGeoCurveCartesian]) {
        (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        (void) [sb appendWithNSString:leftStr];
      }
      (void) [sb appendWithNSString:[tpl leftBracket]];
      (void) [sb appendWithNSString:rightStr];
      (void) [sb appendWithNSString:[tpl rightBracket]];
      break;
      case OrgGeogebraCommonPluginOperation_DIFF:
      if ([tpl hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
        (void) [sb appendWithNSString:@"diff("];
      }
      else {
        (void) [sb appendWithNSString:@"ggbdiff("];
      }
      (void) [sb appendWithNSString:leftStr];
      (void) [sb appendWithChar:','];
      (void) [sb appendWithNSString:rightStr];
      (void) [sb appendWithNSString:@")"];
      case OrgGeogebraCommonPluginOperation_DERIVATIVE:
      if ([tpl hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
        (void) [sb appendWithNSString:@"diff("];
        (void) [sb appendWithNSString:leftStr];
        break;
      }
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isGeoElement] && [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoElement class])) isLabelSet]) {
        (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        (void) [sb appendWithNSString:leftStr];
      }
      if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) unwrap]]) {
        jint order = (jint) JavaLangMath_roundWithDouble_([right evaluateDouble]);
        for (; order > 0; order--) {
          (void) [sb appendWithChar:'\''];
        }
      }
      else {
        (void) [sb appendWithId:right];
      }
      break;
      case OrgGeogebraCommonPluginOperation_$VAR_ROW:
      if (valueForm || [tpl hasCASType]) {
        (void) [sb appendWithNSString:leftStr];
      }
      else {
        OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoElement class]);
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getSpreadsheetCoords] != nil) {
          (void) [sb appendWithNSString:[geo getSpreadsheetLabelWithDollarsWithBoolean:NO withBoolean:YES]];
        }
        else {
          (void) [sb appendWithNSString:leftStr];
        }
      }
      break;
      case OrgGeogebraCommonPluginOperation_$VAR_COL:
      if (valueForm || [tpl hasCASType]) {
        (void) [sb appendWithNSString:leftStr];
      }
      else {
        if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isGeoElement]) {
          (void) [sb appendWithChar:'$'];
          (void) [sb appendWithNSString:leftStr];
          break;
        }
        OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoElement class]);
        if ([geo getSpreadsheetCoords] != nil) {
          (void) [sb appendWithNSString:[geo getSpreadsheetLabelWithDollarsWithBoolean:YES withBoolean:NO]];
        }
        else {
          (void) [sb appendWithNSString:leftStr];
        }
      }
      break;
      case OrgGeogebraCommonPluginOperation_$VAR_ROW_COL:
      if (valueForm || [tpl hasCASType]) {
        (void) [sb appendWithNSString:leftStr];
      }
      else {
        OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(left, [OrgGeogebraCommonKernelGeosGeoElement class]);
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getSpreadsheetCoords] != nil) {
          (void) [sb appendWithNSString:[geo getSpreadsheetLabelWithDollarsWithBoolean:YES withBoolean:YES]];
        }
        else {
          (void) [sb appendWithNSString:leftStr];
        }
      }
      break;
      case OrgGeogebraCommonPluginOperation_FREEHAND:
      (void) [sb appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getPlainWithNSString:@"Function.freehand"]];
      (void) [sb appendWithChar:'('];
      (void) [sb appendWithNSString:leftStr];
      (void) [sb appendWithChar:')'];
      break;
      case OrgGeogebraCommonPluginOperation_DATA:
      if ([tpl isPrintLocalizedCommandNames]) {
        (void) [sb appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getCommandWithNSString:@"DataFunction"]];
      }
      else {
        (void) [sb appendWithNSString:@"DataFunction"];
      }
      (void) [sb appendWithChar:'['];
      if ([tpl hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML()]) {
        (void) [sb appendWithNSString:rightStr];
      }
      (void) [sb appendWithChar:']'];
      break;
      case OrgGeogebraCommonPluginOperation_INTEGRAL:
      if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()) {
        (void) [sb appendWithNSString:@"\\int "];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@"d"];
        (void) [sb appendWithNSString:rightStr];
      }
      else if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()) {
        (void) [sb appendWithNSString:@"int "];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@" d"];
        (void) [sb appendWithNSString:rightStr];
      }
      else {
        if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()) {
          (void) [sb appendWithNSString:@"int("];
        }
        else {
          (void) [sb appendWithNSString:@"gGbInTeGrAl("];
        }
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:','];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@")"];
      }
      break;
      case OrgGeogebraCommonPluginOperation_SUM:
      if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()) {
        (void) [sb appendWithNSString:@"\\sum_{"];
        (void) [sb appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticMyNumberPair class]))))->y_)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [sb appendWithNSString:@"="];
        (void) [sb appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticMyNumberPair class]))))->x_)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [sb appendWithNSString:@"}^{"];
        (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticMyNumberPair class]))))->y_ toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [sb appendWithNSString:@"}"];
        (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticMyNumberPair class]))))->x_ toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()) {
        (void) [sb appendWithNSString:@"sum from{"];
        (void) [sb appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticMyNumberPair class]))))->y_)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [sb appendWithNSString:@"="];
        (void) [sb appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticMyNumberPair class]))))->x_)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [sb appendWithNSString:@"} to{"];
        (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticMyNumberPair class]))))->y_ toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [sb appendWithNSString:@"}"];
        (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticMyNumberPair class]))))->x_ toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()) {
          (void) [sb appendWithNSString:@"sum("];
        }
        else {
          (void) [sb appendWithNSString:@"gGbSuM("];
        }
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:','];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@")"];
      }
      break;
      case OrgGeogebraCommonPluginOperation_SUBSTITUTION:
      if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()) {
        (void) [sb appendWithNSString:@"\\left."];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@"\\right\\mid_{"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@"}"];
      }
      else if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()) {
        (void) [sb appendWithNSString:@"left none"];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@"right rline_{"];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@"}"];
      }
      else {
        if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()) {
          (void) [sb appendWithNSString:@"subst("];
        }
        else {
          (void) [sb appendWithNSString:@"gGbSuBsTiTuTiOn("];
        }
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:','];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@")"];
      }
      break;
      case OrgGeogebraCommonPluginOperation_IF:
      if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()) {
        (void) [sb appendWithNSString:@"when("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:','];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@",undef)"];
      }
      else {
        if ([tpl isPrintLocalizedCommandNames]) {
          (void) [sb appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getCommandWithNSString:@"If"]];
        }
        else {
          (void) [sb appendWithNSString:@"If"];
        }
        (void) [sb appendWithChar:'['];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithChar:','];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithChar:']'];
      }
      break;
      case OrgGeogebraCommonPluginOperation_IF_ELSE:
      if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()) {
        (void) [sb appendWithNSString:@"when("];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@","];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@")"];
      }
      else {
        if ([tpl isPrintLocalizedCommandNames]) {
          (void) [sb appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getCommandWithNSString:@"If"]];
        }
        else {
          (void) [sb appendWithNSString:@"If"];
        }
        (void) [sb appendWithNSString:@"["];
        (void) [sb appendWithNSString:leftStr];
        (void) [sb appendWithNSString:@","];
        (void) [sb appendWithNSString:rightStr];
        (void) [sb appendWithNSString:@"]"];
      }
      break;
      case OrgGeogebraCommonPluginOperation_IF_LIST:
      if (stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()) {
        (void) [sb appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getCommandWithNSString:@"piecewise("]];
      }
      else if ([tpl isPrintLocalizedCommandNames]) {
        (void) [sb appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getCommandWithNSString:@"If"]];
        (void) [sb appendWithNSString:@"["];
      }
      else {
        (void) [sb appendWithNSString:@"If"];
        (void) [sb appendWithNSString:@"["];
      }
      cond = (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticMyList class]);
      fn = (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticMyList class]);
      for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(cond)) size]; i++) {
        if (i > 0) {
          (void) [sb appendWithNSString:@", "];
        }
        (void) [sb appendWithNSString:valueForm ? [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cond getListElementWithInt:i])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cond getListElementWithInt:i])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [sb appendWithNSString:@", "];
        (void) [sb appendWithNSString:valueForm ? [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(fn)) getListElementWithInt:i])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(fn)) getListElementWithInt:i])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      if ([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(fn)) size] > [cond size]) {
        (void) [sb appendWithNSString:@", "];
        (void) [sb appendWithNSString:valueForm ? [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([fn getListElementWithInt:[fn size] - 1])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([fn getListElementWithInt:[fn size] - 1])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      (void) [sb appendWithNSString:stringType == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC() ? @")" : @"]"];
      break;
      default:
      (void) [sb appendWithNSString:JreStrcat("$@", @"unhandled operation ", operation)];
    }
  }
  return [sb description];
}

NSString *OrgGeogebraCommonKernelArithmeticExpressionNode_degFixWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(NSString *string, id<OrgGeogebraCommonKernelArithmeticExpressionValue> left, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  if ([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getInverseTrigReturnsAngle]) {
    return JreStrcat("$$", @"deg", string);
  }
  return string;
}

void OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> left, NSString *leftStr, JavaLangStringBuilder *sb, NSString *mathml, NSString *latex, NSString *psTricks, NSString *key, NSString *libreOffice, OrgGeogebraCommonKernelStringTemplate *tpl, OrgGeogebraCommonMainLocalization *loc, jboolean needDegrees) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(kernel, left, leftStr, sb, mathml, latex, psTricks, key, libreOffice, key, tpl, loc, needDegrees);
}

void OrgGeogebraCommonKernelArithmeticExpressionNode_trigWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_withJavaLangStringBuilder_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_withOrgGeogebraCommonKernelStringTemplate_withOrgGeogebraCommonMainLocalization_withBoolean_(OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> left, NSString *leftStr, JavaLangStringBuilder *sb, NSString *mathml, NSString *latex, NSString *psTricks, NSString *key, NSString *libreOffice, NSString *giac, OrgGeogebraCommonKernelStringTemplate *tpl, OrgGeogebraCommonMainLocalization *loc, jboolean needDegrees) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
    OrgGeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, mathml, leftStr, nil);
  }
  else {
    switch ([[tpl getStringType] ordinal]) {
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      if ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getApplication])) isLatexMathQuillStyleWithOrgGeogebraCommonKernelStringTemplate:tpl]) {
        NSString *translatedKey = [((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getFunctionWithNSString:key];
        if ([@"exp lg ln log sin cos tan cot sec csc sinh cosh tanh coth sech csch arcsin arccos arctan asin acos atan asinh acosh atanh arcsinh arccosh arctanh" indexOfString:translatedKey] > -1) {
          (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" \\"];
          (void) [sb appendWithNSString:translatedKey];
        }
        else if ([@"cossech arcsh arcch arcth argsh argch argth arcos arcosh arsinh artanh arch arsh arth ch sh th cth sen tg asen atg arcsen arctg senh tgh asenh atgh arcsenh arctgh cotg cotgh" indexOfString:translatedKey] > -1) {
          (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" \\"];
          (void) [sb appendWithNSString:translatedKey];
        }
        else {
          (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" "];
          (void) [sb appendWithNSString:translatedKey];
          (void) [sb appendWithNSString:@" "];
        }
      }
      else if ([tpl isPrintLocalizedCommandNames]) {
        (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\operatorname{"];
        (void) [sb appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getFunctionWithNSString:key]];
        (void) [sb appendWithNSString:@"}"];
      }
      else {
        (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:latex];
      }
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" \\left( "];
      break;
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
      if (![((NSString *) nil_chk(libreOffice)) isEqual:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getFunctionWithNSString:key]]) {
        (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"func "];
      }
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[loc getFunctionWithNSString:key]];
      (void) [sb appendWithNSString:@" left( "];
      break;
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:giac];
      (void) [sb appendWithChar:'('];
      break;
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:psTricks];
      break;
      default:
      if ([tpl isPrintLocalizedCommandNames]) {
        (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk(loc)) getFunctionWithNSString:key]];
      }
      else {
        (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:key];
      }
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"("];
    }
    if (needDegrees && [tpl hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_PGF()]) {
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("C$$", '(', leftStr, @") 180/pi")];
    }
    else {
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:leftStr];
    }
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[tpl rightBracket]];
  }
}

void OrgGeogebraCommonKernelArithmeticExpressionNode_appendReduceFunctionWithJavaLangStringBuilder_withOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(JavaLangStringBuilder *sb, id<OrgGeogebraCommonKernelArithmeticExpressionValue> left, NSString *string) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  if ([OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:left]) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"applyfunction("];
    (void) [sb appendWithNSString:string];
    (void) [sb appendWithNSString:@","];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:string];
    (void) [sb appendWithChar:'('];
  }
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_isMultiplyOrDivideWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelArithmeticExpressionNode *exp) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  return [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(nil_chk(exp)))) isEqual:OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY()] || [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(exp))) isEqual:OrgGeogebraCommonPluginOperationEnum_get_DIVIDE()];
}

jint OrgGeogebraCommonKernelArithmeticExpressionNode_opIDWithOrgGeogebraCommonKernelArithmeticExpressionValue_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) {
    OrgGeogebraCommonPluginOperationEnum *op = ((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))->operation_;
    if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(op)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS_EQUAL()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER_EQUAL()]) {
      return [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonPluginOperationEnum_get_NOT_EQUAL())) ordinal] - 1;
    }
    return [op ordinal];
  }
  return -1;
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev1, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev2) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:ev1] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:ev2]) {
    return OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(ev1, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble], [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(ev2, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble], OrgGeogebraCommonKernelKernel_STANDARD_PRECISION);
  }
  else if ([OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:ev1] && [OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:ev2]) {
    return [((NSString *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticTextValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticTextValue>) check_protocol_cast(ev1, @protocol(OrgGeogebraCommonKernelArithmeticTextValue))))) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:[((id<OrgGeogebraCommonKernelArithmeticTextValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticTextValue>) check_protocol_cast(ev2, @protocol(OrgGeogebraCommonKernelArithmeticTextValue))))) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  else if ([OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:ev1] && [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:ev2]) {
    return [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(ev1, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector])) isEqualWithOrgGeogebraCommonKernelGeosGeoVec2D:[((id<OrgGeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(ev2, @protocol(OrgGeogebraCommonKernelArithmeticVectorValue))))) getVector]];
  }
  else if ([OrgGeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:ev1] && [OrgGeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:ev2]) {
    return [((OrgGeogebraCommonKernelArithmeticMyBoolean *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast(ev1, @protocol(OrgGeogebraCommonKernelArithmeticBooleanValue))))) getMyBoolean])) getBoolean] == [((OrgGeogebraCommonKernelArithmeticMyBoolean *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast(ev2, @protocol(OrgGeogebraCommonKernelArithmeticBooleanValue))))) getMyBoolean])) getBoolean];
  }
  else if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev1)) isGeoElement] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev2)) isGeoElement]) {
    return [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(ev1, [OrgGeogebraCommonKernelGeosGeoElement class])) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(ev2, [OrgGeogebraCommonKernelGeosGeoElement class]))];
  }
  else if ([OrgGeogebraCommonKernelArithmeticFunctional_class_() isInstance:ev1] && [OrgGeogebraCommonKernelArithmeticFunctional_class_() isInstance:ev2]) {
    return [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctional>) check_protocol_cast(ev1, @protocol(OrgGeogebraCommonKernelArithmeticFunctional))) getGeoFunction])) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:[((id<OrgGeogebraCommonKernelArithmeticFunctional>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctional>) check_protocol_cast(ev2, @protocol(OrgGeogebraCommonKernelArithmeticFunctional))))) getGeoFunction]];
  }
  return NO;
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, jdouble val, jboolean symbolic) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isLeaf] && ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:ev])) {
    if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] || [ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) {
      return NO;
    }
    else if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticMySpecialDouble class]]) {
      return NO;
    }
    if (symbolic) {
      if ([ev isGeoElement]) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoElement class]);
        if ([geo isLabelSet] || [geo isLocalVariable] || ![geo isIndependent]) {
          return NO;
        }
      }
    }
    id<OrgGeogebraCommonKernelArithmeticNumberValue> nv = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(ev, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
    return [nv getDouble] == val;
  }
  return NO;
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_chainedBooleanOpWithOrgGeogebraCommonPluginOperationEnum_(OrgGeogebraCommonPluginOperationEnum *op) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  switch ([op ordinal]) {
    case OrgGeogebraCommonPluginOperation_EQUAL_BOOLEAN:
    case OrgGeogebraCommonPluginOperation_NOT_EQUAL:
    case OrgGeogebraCommonPluginOperation_IS_SUBSET_OF:
    case OrgGeogebraCommonPluginOperation_IS_SUBSET_OF_STRICT:
    case OrgGeogebraCommonPluginOperation_LESS:
    case OrgGeogebraCommonPluginOperation_LESS_EQUAL:
    case OrgGeogebraCommonPluginOperation_GREATER:
    case OrgGeogebraCommonPluginOperation_GREATER_EQUAL:
    case OrgGeogebraCommonPluginOperation_PERPENDICULAR:
    case OrgGeogebraCommonPluginOperation_PARALLEL:
    return YES;
    default:
    return NO;
  }
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_isConstantDoubleWithOrgGeogebraCommonKernelArithmeticExpressionValue_withDouble_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, jdouble v) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> base = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) unwrap];
  return [base isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(base)) isConstant] && v == [((OrgGeogebraCommonKernelArithmeticMyDouble *) check_class_cast(base, [OrgGeogebraCommonKernelArithmeticMyDouble class])) getDouble];
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> exp) {
  return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) wrap];
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticExpressionNode_linearIntegralWithInt_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, jint i, OrgGeogebraCommonPluginOperationEnum *op, OrgGeogebraCommonKernelArithmeticFunctionVariable *fv) {
  if (self->left_ == fv) {
    return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->left_, op, nil) multiplyRWithDouble:i];
  }
  jdouble coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, self->left_);
  if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
    return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->left_, op, nil) multiplyRWithDouble:i])) divideWithDouble:coeff];
  }
  coeff = OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(fv, self->left_);
  if (!JavaLangDouble_isNaNWithDouble_(coeff)) {
    return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->left_, op, nil) multiplyWithDouble:coeff])) multiplyRWithDouble:i];
  }
  OrgGeogebraCommonMainApp_debugWithNSString_(@"not linear integral");
  return OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithDouble_(self, JavaLangDouble_NaN);
}

jdouble OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticFunctionVariable *fv, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev2) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  if (ev2 == fv) {
    return 1;
  }
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = ev2;
  jdouble factor = 1;
  OrgGeogebraCommonPluginOperationEnum *op;
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode] && [(op = OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) isPlusorMinus]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(en->left_)) isNumberValue] && ![en->left_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
      ev = en->right_;
      factor = [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(op)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_PLUS()] ? 1 : -1;
    }
    else if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(en->right_)) isNumberValue] && ![en->right_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
      ev = en->left_;
      factor = 1;
    }
  }
  if (ev == fv) {
    return factor;
  }
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode] && [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))))) isEqual:OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY()]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if (en->left_ == fv && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(en->right_)) isNumberValue] && ![en->right_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
      return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(en->right_, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))) getDouble] * factor;
    }
    else if (en->right_ == fv && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(en->left_)) isNumberValue] && ![en->left_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
      return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(en->left_, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))) getDouble] * factor;
    }
  }
  return JavaLangDouble_NaN;
}

jdouble OrgGeogebraCommonKernelArithmeticExpressionNode_getLinearCoefficientDivWithOrgGeogebraCommonKernelArithmeticFunctionVariable_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticFunctionVariable *fv, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev2) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = ev2;
  jdouble factor = 1;
  OrgGeogebraCommonPluginOperationEnum *op;
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode] && [(op = OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) isPlusorMinus]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(en->left_)) isNumberValue] && ![en->left_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
      ev = en->right_;
      factor = [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(op)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_PLUS()] ? 1 : -1;
    }
    else if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(en->right_)) isNumberValue] && ![en->right_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
      ev = en->left_;
      factor = 1;
    }
  }
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode] && [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]))))) isEqual:OrgGeogebraCommonPluginOperationEnum_get_DIVIDE()]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if (en->left_ == fv && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(en->right_)) isNumberValue] && ![en->right_ containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv]) {
      return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(en->right_, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))) getDouble] * factor;
    }
  }
  return JavaLangDouble_NaN;
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticExpressionNode_wrapWithDouble_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, jdouble n) {
  return [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, n) wrap];
}

jboolean OrgGeogebraCommonKernelArithmeticExpressionNode_checkForFreeVarsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, NSString *name) {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
    return name == nil || [name isEqual:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionVariable *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticFunctionVariable class])))) getSetVarString]];
  }
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) containsFreeFunctionVariableWithNSString:name];
  }
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyVecNode class]]) {
    return OrgGeogebraCommonKernelArithmeticExpressionNode_checkForFreeVarsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(self, [((OrgGeogebraCommonKernelArithmeticMyVecNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyVecNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyVecNode class])))) getX], name) || OrgGeogebraCommonKernelArithmeticExpressionNode_checkForFreeVarsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(self, [((OrgGeogebraCommonKernelArithmeticMyVecNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyVecNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyVecNode class])))) getY], name);
  }
  return NO;
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticExpressionNode_multiplyCheckWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticExpressionNode *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> denR, id<OrgGeogebraCommonKernelArithmeticExpressionValue> denL) {
  return denL == nil ? denR : (denR == nil ? ((id) denL) : [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([denL wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:denR]);
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticExpressionNode_multiplySpecialWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_withBoolean_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ret, id<OrgGeogebraCommonKernelArithmeticExpressionValue> f, OrgGeogebraCommonKernelKernel *kernel, jboolean giacParsing) {
  OrgGeogebraCommonKernelArithmeticExpressionNode_initialize();
  NSString *leftImg;
  OrgGeogebraCommonMainApp *app = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getApplication];
  if ([ret isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]]) {
    leftImg = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ret)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    OrgGeogebraCommonPluginOperationEnum *op = [((OrgGeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app)) getParserFunctions])) getWithNSString:leftImg withInt:1];
    if (op != nil && [kernel lookupLabelWithNSString:leftImg] == nil && ![@"x" isEqual:leftImg] && ![@"y" isEqual:leftImg] && ![@"z" isEqual:leftImg]) {
      return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, f, op, nil);
    }
  }
  else if ([ret isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]] && OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) == OrgGeogebraCommonPluginOperationEnum_get_POWER() && [OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]]) {
    leftImg = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    OrgGeogebraCommonPluginOperationEnum *op = [((OrgGeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(app)) getParserFunctions])) getWithNSString:leftImg withInt:1];
    if (op != nil && [kernel lookupLabelWithNSString:leftImg] == nil && ![@"x" isEqual:leftImg] && ![@"y" isEqual:leftImg] && ![@"z" isEqual:leftImg]) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> exponent = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))))) unwrap];
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exponent)) isConstant] && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(-1, [exponent evaluateDouble])) {
        return [kernel inverseTrigWithOrgGeogebraCommonPluginOperationEnum:op withOrgGeogebraCommonKernelArithmeticExpressionValue:f];
      }
      return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, f, op, nil) powerWithOrgGeogebraCommonKernelArithmeticExpressionValue:exponent];
    }
  }
  else if ([ret isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]] && OrgGeogebraCommonKernelArithmeticExpressionNode_getOperation(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) == OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY()) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> bf = OrgGeogebraCommonKernelArithmeticExpressionNode_multiplySpecialWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_withBoolean_(OrgGeogebraCommonKernelArithmeticExpressionNode_getRight(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))), f, kernel, giacParsing);
    return bf == nil ? nil : new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, OrgGeogebraCommonKernelArithmeticExpressionNode_getLeft(nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), bf);
  }
  if (giacParsing) {
    if ([ret isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]]) {
      ret = new_OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(kernel, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ret)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()], YES, YES);
      [((OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(ret, [OrgGeogebraCommonKernelArithmeticCommand class])) addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(f)) wrap]];
      return ret;
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticExpressionNode)
