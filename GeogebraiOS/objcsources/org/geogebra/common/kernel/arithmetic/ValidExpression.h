//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/arithmetic/ValidExpression.java
//

#ifndef _OrgGeogebraCommonKernelArithmeticValidExpression_H_
#define _OrgGeogebraCommonKernelArithmeticValidExpression_H_

#include "J2ObjC_header.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"

@class IOSObjectArray;
@class JavaUtilVector;
@class OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum;
@class OrgGeogebraCommonKernelArithmeticCommand;
@class OrgGeogebraCommonKernelArithmeticExpressionNode;
@class OrgGeogebraCommonKernelArithmeticFunction;
@class OrgGeogebraCommonKernelArithmeticFunctionVariable;
@class OrgGeogebraCommonKernelKernel;
@class OrgGeogebraCommonKernelStringTemplate;
@protocol JavaUtilSet;
@protocol OrgGeogebraCommonKernelArithmeticInspecting;
@protocol OrgGeogebraCommonKernelArithmeticTraversing;

@interface OrgGeogebraCommonKernelArithmeticValidExpression : NSObject < OrgGeogebraCommonKernelArithmeticExpressionValue >

#pragma mark Public

- (instancetype)init;

- (void)addCommandsWithJavaUtilSet:(id<JavaUtilSet>)cmds;

- (void)addLabelWithNSString:(NSString *)label;

- (void)addLabelWithJavaUtilVector:(JavaUtilVector *)labellist;

- (jboolean)containsFunctionVariable;

- (jboolean)containsFunctionVariableWithNSString:(NSString *)name;

+ (NSString *)debugStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)s;

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                      withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel;

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluateWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (OrgGeogebraCommonKernelArithmeticFunction *)evaluateComplex;

- (jdouble)evaluateDouble;

- (jboolean)evaluatesTo3DVector;

- (jboolean)evaluatesToList;

- (jboolean)evaluatesToNonComplex2DVector;

- (jboolean)evaluatesToNumberWithBoolean:(jboolean)def;

- (jboolean)evaluatesToText;

- (jboolean)evaluatesToVectorNotPoint;

- (NSString *)getAssignmentOperator;

- (NSString *)getAssignmentOperatorLaTeX;

- (NSString *)getDelayedAssignmentOperator;

- (NSString *)getDelayedAssignmentOperatorLaTeX;

- (NSString *)getLabel;

- (NSString *)getLabelWithInt:(jint)index;

- (NSString *)getLabelForAssignment;

- (IOSObjectArray *)getLabels;

- (OrgGeogebraCommonKernelArithmeticCommand *)getTopLevelCommand;

- (jboolean)hasCoords;

- (jboolean)inspectWithOrgGeogebraCommonKernelArithmeticInspecting:(id<OrgGeogebraCommonKernelArithmeticInspecting>)t;

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                    withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel;

- (jboolean)isExpressionNode;

- (jboolean)isGeoElement;

- (jboolean)isInTree;

- (jboolean)isTopLevelCommand;

- (jboolean)isVariable;

- (jint)labelCount;

- (void)setInTreeWithBoolean:(jboolean)flag;

- (void)setLabelWithNSString:(NSString *)label;

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)str;

- (NSString *)toAssignmentLaTeXStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                       withOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:(OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum *)assignmentType;

- (NSString *)toAssignmentStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                  withOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:(OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum *)assignmentType;

- (NSString *)description;

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)traverseWithOrgGeogebraCommonKernelArithmeticTraversing:(id<OrgGeogebraCommonKernelArithmeticTraversing>)t;

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)unwrap;

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrap;

#pragma mark Protected

+ (NSString *)printWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)x2
                                                            withBoolean:(jboolean)values
                              withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelArithmeticValidExpression)

FOUNDATION_EXPORT NSString *OrgGeogebraCommonKernelArithmeticValidExpression_debugStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> s);

FOUNDATION_EXPORT NSString *OrgGeogebraCommonKernelArithmeticValidExpression_printWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> x2, jboolean values, OrgGeogebraCommonKernelStringTemplate *tpl);

FOUNDATION_EXPORT void OrgGeogebraCommonKernelArithmeticValidExpression_init(OrgGeogebraCommonKernelArithmeticValidExpression *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelArithmeticValidExpression)

#endif // _OrgGeogebraCommonKernelArithmeticValidExpression_H_
