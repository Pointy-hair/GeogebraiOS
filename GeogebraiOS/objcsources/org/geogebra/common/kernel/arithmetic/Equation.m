//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/arithmetic/Equation.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/Polynomial.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/arithmetic/Variable.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonKernelArithmeticEquation () {
 @public
  OrgGeogebraCommonKernelArithmeticExpressionNode *lhs_;
  OrgGeogebraCommonKernelArithmeticExpressionNode *rhs_;
  OrgGeogebraCommonKernelArithmeticPolynomial *leftPoly_, *rightPoly_;
  OrgGeogebraCommonKernelArithmeticPolynomial *normalForm_;
  jboolean isFunctionDependent__;
  OrgGeogebraCommonKernelKernel *kernel_;
  jboolean forcePlane_, forceLine_;
  jboolean forceConic_, forceImplicitPoly_;
  jboolean forceQuadric_;
  JavaUtilArrayList *variableDegrees_;
  jboolean isPolynomial__;
}

+ (jboolean)containsVarWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v
                                                                   withChar:(jchar)var;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticEquation, lhs_, OrgGeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticEquation, rhs_, OrgGeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticEquation, leftPoly_, OrgGeogebraCommonKernelArithmeticPolynomial *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticEquation, rightPoly_, OrgGeogebraCommonKernelArithmeticPolynomial *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticEquation, normalForm_, OrgGeogebraCommonKernelArithmeticPolynomial *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticEquation, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticEquation, variableDegrees_, JavaUtilArrayList *)

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelArithmeticEquation_toValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticEquation *self, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticEquation_containsVarWithOrgGeogebraCommonKernelArithmeticExpressionValue_withChar_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> v, jchar var);

@implementation OrgGeogebraCommonKernelArithmeticEquation

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lhs
 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rhs {
  OrgGeogebraCommonKernelArithmeticEquation_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, kernel, lhs, rhs);
  return self;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getRHS {
  return rhs_;
}

- (void)setRHSWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)rhs {
  if (rhs != nil) OrgGeogebraCommonKernelArithmeticEquation_set_rhs_(self, rhs);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getLHS {
  return lhs_;
}

- (void)setLHSWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)lhs {
  if (lhs != nil) OrgGeogebraCommonKernelArithmeticEquation_set_lhs_(self, lhs);
}

- (void)setForceLine {
  forceLine_ = YES;
}

- (jboolean)isForcedLine {
  return forceLine_;
}

- (void)setForcePlane {
  forcePlane_ = YES;
}

- (jboolean)isForcedPlane {
  return forcePlane_;
}

- (void)setForceQuadric {
  forceQuadric_ = YES;
}

- (jboolean)isForcedQuadric {
  return forceQuadric_;
}

- (jboolean)isForcedConic {
  return forceConic_;
}

- (void)setForceConic {
  self->forceConic_ = YES;
}

- (jboolean)isForcedImplicitPoly {
  return forceImplicitPoly_;
}

- (void)setForceImplicitPoly {
  self->forceImplicitPoly_ = YES;
}

- (void)applyOperationWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation
          withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                   withBoolean:(jboolean)switchOrder {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> left, right;
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]]) {
    OrgGeogebraCommonKernelArithmeticEquation *equ = (OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticEquation class]);
    left = ((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ))->lhs_;
    right = equ->rhs_;
  }
  else {
    left = ev;
    right = ev;
  }
  if (switchOrder) {
    OrgGeogebraCommonKernelArithmeticEquation_setAndConsume_lhs_(self, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, left, operation, lhs_));
    OrgGeogebraCommonKernelArithmeticEquation_setAndConsume_rhs_(self, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, right, operation, rhs_));
  }
  else {
    OrgGeogebraCommonKernelArithmeticEquation_setAndConsume_lhs_(self, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, lhs_, operation, left));
    OrgGeogebraCommonKernelArithmeticEquation_setAndConsume_rhs_(self, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, rhs_, operation, right));
  }
}

- (void)initEquation {
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(lhs_)) isLeaf] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([lhs_ getLeft])) isVariable]) {
    OrgGeogebraCommonKernelArithmeticVariable *leftVar = (OrgGeogebraCommonKernelArithmeticVariable *) check_class_cast([lhs_ getLeft], [OrgGeogebraCommonKernelArithmeticVariable class]);
    [lhs_ setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticVariable *) nil_chk(leftVar)) resolveWithBoolean:NO withBoolean:YES]];
  }
  else {
    [lhs_ resolveVariables];
  }
  [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs_)) resolveVariables];
  self->isPolynomial__ = YES;
  OrgGeogebraCommonKernelArithmeticEquation_set_variableDegrees_(self, nil);
  OrgGeogebraCommonKernelArithmeticEquation_set_leftPoly_(self, OrgGeogebraCommonKernelArithmeticPolynomial_fromNodeWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticEquation_(lhs_, self));
  OrgGeogebraCommonKernelArithmeticEquation_set_rightPoly_(self, OrgGeogebraCommonKernelArithmeticPolynomial_fromNodeWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticEquation_(rhs_, self));
  OrgGeogebraCommonKernelArithmeticEquation_setAndConsume_normalForm_(self, new_OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticPolynomial_(kernel_, rightPoly_));
  [normalForm_ multiplyWithDouble:-1.0];
  [normalForm_ addWithOrgGeogebraCommonKernelArithmeticPolynomial:leftPoly_ withOrgGeogebraCommonKernelArithmeticEquation:self];
}

- (void)setFunctionDependentWithBoolean:(jboolean)isFunctionDependent {
  self->isFunctionDependent__ = isFunctionDependent;
}

- (jboolean)isFunctionDependent {
  return isFunctionDependent__;
}

- (OrgGeogebraCommonKernelArithmeticPolynomial *)getNormalForm {
  return normalForm_;
}

- (jint)degree {
  return [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(normalForm_)) degree];
}

- (jint)singleDegree {
  return [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(normalForm_)) singleDegree];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getCoefficientWithNSString:(NSString *)variables {
  return [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(normalForm_)) getCoefficientWithNSString:variables];
}

- (jdouble)getCoeffValueWithNSString:(NSString *)variables {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [self getCoefficientWithNSString:variables];
  @try {
    id<OrgGeogebraCommonKernelArithmeticNumberValue> nv = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(ev, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
    return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(nv)) getDouble];
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$$@", @"getCoeffValue(", variables, @") failed:", e));
    return JavaLangDouble_NaN;
  }
}

- (IOSObjectArray *)getGeoElementVariables {
  id<JavaUtilSet> varSet;
  id<JavaUtilSet> leftVars = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(lhs_)) getVariables];
  id<JavaUtilSet> rightVars = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs_)) getVariables];
  if (leftVars == nil) {
    varSet = rightVars;
  }
  else if (rightVars == nil) {
    varSet = leftVars;
  }
  else {
    [leftVars addAllWithJavaUtilCollection:rightVars];
    varSet = leftVars;
  }
  if (varSet == nil) {
    return [IOSObjectArray arrayWithLength:0 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  }
  id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk(varSet)) iterator];
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[varSet size] type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  jint j = 0;
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    IOSObjectArray_Set(ret, j++, [i next]);
  }
  return ret;
}

- (jboolean)isExplicitWithNSString:(NSString *)var {
  OrgGeogebraCommonKernelArithmeticPolynomial *lhsp = leftPoly_;
  OrgGeogebraCommonKernelArithmeticPolynomial *rhsp = rightPoly_;
  return ([((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(lhsp)) length] == 1 && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([lhsp getCoefficientWithNSString:var])) evaluateDouble] == 1 && ![((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(rhsp)) containsWithNSString:var]) || ([((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(rhsp)) length] == 1 && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([rhsp getCoefficientWithNSString:var])) evaluateDouble] == 1 && ![lhsp containsWithNSString:var]);
}

- (jboolean)isImplicit {
  return ![self isExplicitWithNSString:@"x"] && ![self isExplicitWithNSString:@"y"] && ![self isExplicitWithNSString:@"z"];
}

- (jboolean)containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(lhs_)) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:ev] || [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs_)) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:ev];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel1 {
  OrgGeogebraCommonKernelArithmeticEquation *ret = [new_OrgGeogebraCommonKernelArithmeticEquation_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel1, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(lhs_)) getCopyWithOrgGeogebraCommonKernelKernel:kernel1], [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs_)) getCopyWithOrgGeogebraCommonKernelKernel:kernel1]) autorelease];
  ret->forceConic_ = forceConic_;
  ret->forceLine_ = forceLine_;
  ret->forcePlane_ = forcePlane_;
  ret->forceQuadric_ = forceQuadric_;
  ret->forceImplicitPoly_ = forceImplicitPoly_;
  return ret;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluateWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  jboolean oldFlag = [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) isSuppressLabelsActive];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk([kernel_ getConstruction])) setSuppressLabelCreationWithBoolean:YES];
  OrgGeogebraCommonKernelGeosGeoElement *ge = IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) processEquationWithOrgGeogebraCommonKernelArithmeticEquation:self]), 0);
  [((OrgGeogebraCommonKernelConstruction *) nil_chk([kernel_ getConstruction])) setSuppressLabelCreationWithBoolean:oldFlag];
  return ge;
}

- (JavaUtilHashSet *)getVariables {
  JavaUtilHashSet *leftVars = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(lhs_)) getVariables];
  JavaUtilHashSet *rightVars = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs_)) getVariables];
  if (leftVars == nil) {
    return rightVars;
  }
  else if (rightVars == nil) {
    return leftVars;
  }
  else {
    [leftVars addAllWithJavaUtilCollection:rightVars];
    return leftVars;
  }
}

- (jboolean)isConstant {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(lhs_)) isConstant] && [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs_)) isConstant];
}

- (jboolean)isLeaf {
  return NO;
}

- (jboolean)isNumberValue {
  return NO;
}

- (void)resolveVariables {
  [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(lhs_)) resolveVariables];
  [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs_)) resolveVariables];
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if (lhs_ != nil) [sb appendWithNSString:[lhs_ toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl]];
  else [sb appendWithChar:'0'];
  [sb appendWithNSString:@" = "];
  if (rhs_ != nil) [sb appendWithNSString:[rhs_ toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl]];
  else [sb appendWithChar:'0'];
  return [sb description];
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticEquation_toValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self toStringWithOrgGeogebraCommonKernelStringTemplate:tpl withOrgGeogebraCommonKernelArithmeticExpressionNode:self->lhs_];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
            withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)lhs1 {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if (lhs1 != nil) [sb appendWithNSString:[lhs1 toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  else [sb appendWithChar:'0'];
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType])) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
    if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(lhs1)) evaluatesToList] || [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs_)) evaluatesToList]) {
      [sb appendWithNSString:@"%="];
    }
    else {
      [sb appendWithNSString:@"="];
    }
  }
  else {
    [sb appendWithNSString:@" = "];
  }
  if (rhs_ != nil) [sb appendWithNSString:[rhs_ toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  else [sb appendWithChar:'0'];
  return [sb description];
}

- (NSString *)getAssignmentOperator {
  return @": ";
}

- (NSString *)getAssignmentOperatorLaTeX {
  return @": \\, ";
}

- (NSString *)toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticEquation_toValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (OrgGeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)traverseWithOrgGeogebraCommonKernelArithmeticTraversing:(id<OrgGeogebraCommonKernelArithmeticTraversing>)t {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> v = [((id<OrgGeogebraCommonKernelArithmeticTraversing>) nil_chk(t)) processWithOrgGeogebraCommonKernelArithmeticExpressionValue:self];
  if (v != self) {
    return v;
  }
  OrgGeogebraCommonKernelArithmeticEquation_set_lhs_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(lhs_)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:t])) wrap]);
  OrgGeogebraCommonKernelArithmeticEquation_set_rhs_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs_)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:t])) wrap]);
  return v;
}

- (jboolean)inspectWithOrgGeogebraCommonKernelArithmeticInspecting:(id<OrgGeogebraCommonKernelArithmeticInspecting>)t {
  return [((id<OrgGeogebraCommonKernelArithmeticInspecting>) nil_chk(t)) checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:self] || [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(lhs_)) inspectWithOrgGeogebraCommonKernelArithmeticInspecting:t] || [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs_)) inspectWithOrgGeogebraCommonKernelArithmeticInspecting:t];
}

- (jboolean)containsZ {
  return OrgGeogebraCommonKernelArithmeticEquation_containsVarWithOrgGeogebraCommonKernelArithmeticExpressionValue_withChar_(lhs_, 'z') || OrgGeogebraCommonKernelArithmeticEquation_containsVarWithOrgGeogebraCommonKernelArithmeticExpressionValue_withChar_(rhs_, 'z');
}

+ (jboolean)containsVarWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v
                                                                   withChar:(jchar)var {
  return OrgGeogebraCommonKernelArithmeticEquation_containsVarWithOrgGeogebraCommonKernelArithmeticExpressionValue_withChar_(v, var);
}

- (void)addVariableDegreeWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)gn {
  if (self->variableDegrees_ == nil) {
    OrgGeogebraCommonKernelArithmeticEquation_setAndConsume_variableDegrees_(self, new_JavaUtilArrayList_init());
  }
  [((JavaUtilArrayList *) nil_chk(self->variableDegrees_)) addWithId:gn];
}

- (jboolean)hasVariableDegree {
  return variableDegrees_ != nil;
}

- (void)setIsPolynomialWithBoolean:(jboolean)b {
  self->isPolynomial__ = b;
}

- (jboolean)isPolynomial {
  if (!isPolynomial__) {
    return NO;
  }
  if (self->variableDegrees_ == nil) {
    return YES;
  }
  for (id<OrgGeogebraCommonKernelArithmeticExpressionValue> __strong ev in nil_chk(self->variableDegrees_)) {
    jdouble exp = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) evaluateDouble];
    if (!OrgGeogebraCommonKernelKernel_isIntegerWithDouble_(exp) || OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(0, exp)) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)mayBePolynomial {
  return isPolynomial__;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self) autorelease];
}

- (void)dealloc {
  RELEASE_(lhs_);
  RELEASE_(rhs_);
  RELEASE_(leftPoly_);
  RELEASE_(rightPoly_);
  RELEASE_(normalForm_);
  RELEASE_(kernel_);
  RELEASE_(variableDegrees_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "Equation", NULL, 0x1, NULL, NULL },
    { "getRHS", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "setRHSWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "setRHS", "V", 0x1, NULL, NULL },
    { "getLHS", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "setLHSWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "setLHS", "V", 0x1, NULL, NULL },
    { "setForceLine", NULL, "V", 0x1, NULL, NULL },
    { "isForcedLine", NULL, "Z", 0x11, NULL, NULL },
    { "setForcePlane", NULL, "V", 0x11, NULL, NULL },
    { "isForcedPlane", NULL, "Z", 0x11, NULL, NULL },
    { "setForceQuadric", NULL, "V", 0x11, NULL, NULL },
    { "isForcedQuadric", NULL, "Z", 0x11, NULL, NULL },
    { "isForcedConic", NULL, "Z", 0x1, NULL, NULL },
    { "setForceConic", NULL, "V", 0x1, NULL, NULL },
    { "isForcedImplicitPoly", NULL, "Z", 0x1, NULL, NULL },
    { "setForceImplicitPoly", NULL, "V", 0x1, NULL, NULL },
    { "applyOperationWithOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelArithmeticExpressionValue:withBoolean:", "applyOperation", "V", 0x1, NULL, NULL },
    { "initEquation", NULL, "V", 0x1, NULL, NULL },
    { "setFunctionDependentWithBoolean:", "setFunctionDependent", "V", 0x1, NULL, NULL },
    { "isFunctionDependent", NULL, "Z", 0x1, NULL, NULL },
    { "getNormalForm", NULL, "Lorg.geogebra.common.kernel.arithmetic.Polynomial;", 0x1, NULL, NULL },
    { "degree", NULL, "I", 0x1, NULL, NULL },
    { "singleDegree", NULL, "I", 0x1, NULL, NULL },
    { "getCoefficientWithNSString:", "getCoefficient", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCoeffValueWithNSString:", "getCoeffValue", "D", 0x1, NULL, NULL },
    { "getGeoElementVariables", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "isExplicitWithNSString:", "isExplicit", "Z", 0x1, NULL, NULL },
    { "isImplicit", NULL, "Z", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x1, NULL, NULL },
    { "deepCopyWithOrgGeogebraCommonKernelKernel:", "deepCopy", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "evaluateWithOrgGeogebraCommonKernelStringTemplate:", "evaluate", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAssignmentOperator", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAssignmentOperatorLaTeX", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lorg.geogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "traverseWithOrgGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "inspectWithOrgGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x1, NULL, NULL },
    { "containsZ", NULL, "Z", 0x1, NULL, NULL },
    { "containsVarWithOrgGeogebraCommonKernelArithmeticExpressionValue:withChar:", "containsVar", "Z", 0x1a, NULL, NULL },
    { "addVariableDegreeWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "addVariableDegree", "V", 0x1, NULL, NULL },
    { "hasVariableDegree", NULL, "Z", 0x1, NULL, NULL },
    { "setIsPolynomialWithBoolean:", "setIsPolynomial", "V", 0x1, NULL, NULL },
    { "isPolynomial", NULL, "Z", 0x1, NULL, NULL },
    { "mayBePolynomial", NULL, "Z", 0x1, NULL, NULL },
    { "wrap", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lhs_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "rhs_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "leftPoly_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Polynomial;", NULL, NULL,  },
    { "rightPoly_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Polynomial;", NULL, NULL,  },
    { "normalForm_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Polynomial;", NULL, NULL,  },
    { "isFunctionDependent__", "isFunctionDependent", 0x2, "Z", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "forcePlane_", NULL, 0x2, "Z", NULL, NULL,  },
    { "forceLine_", NULL, 0x2, "Z", NULL, NULL,  },
    { "forceConic_", NULL, 0x2, "Z", NULL, NULL,  },
    { "forceImplicitPoly_", NULL, 0x2, "Z", NULL, NULL,  },
    { "forceQuadric_", NULL, 0x2, "Z", NULL, NULL,  },
    { "variableDegrees_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/arithmetic/ExpressionValue;>;",  },
    { "isPolynomial__", "isPolynomial", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticEquation = { 2, "Equation", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 53, methods, 14, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticEquation;
}

@end

void OrgGeogebraCommonKernelArithmeticEquation_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticEquation *self, OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> lhs, id<OrgGeogebraCommonKernelArithmeticExpressionValue> rhs) {
  OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->forcePlane_ = NO;
  self->forceLine_ = NO;
  self->forceConic_ = NO;
  self->forceImplicitPoly_ = NO;
  self->forceQuadric_ = NO;
  OrgGeogebraCommonKernelArithmeticEquation_set_variableDegrees_(self, nil);
  self->isPolynomial__ = YES;
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(lhs)) isExpressionNode]) OrgGeogebraCommonKernelArithmeticEquation_set_lhs_(self, (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(lhs, [OrgGeogebraCommonKernelArithmeticExpressionNode class]));
  else OrgGeogebraCommonKernelArithmeticEquation_setAndConsume_lhs_(self, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, lhs));
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rhs)) isExpressionNode]) OrgGeogebraCommonKernelArithmeticEquation_set_rhs_(self, (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(rhs, [OrgGeogebraCommonKernelArithmeticExpressionNode class]));
  else OrgGeogebraCommonKernelArithmeticEquation_setAndConsume_rhs_(self, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, rhs));
  OrgGeogebraCommonKernelArithmeticEquation_set_kernel_(self, kernel);
  self->isFunctionDependent__ = NO;
}

OrgGeogebraCommonKernelArithmeticEquation *new_OrgGeogebraCommonKernelArithmeticEquation_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> lhs, id<OrgGeogebraCommonKernelArithmeticExpressionValue> rhs) {
  OrgGeogebraCommonKernelArithmeticEquation *self = [OrgGeogebraCommonKernelArithmeticEquation alloc];
  OrgGeogebraCommonKernelArithmeticEquation_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self, kernel, lhs, rhs);
  return self;
}

NSString *OrgGeogebraCommonKernelArithmeticEquation_toValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticEquation *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if (self->lhs_ != nil) [sb appendWithNSString:[self->lhs_ toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  else [sb appendWithChar:'0'];
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType])) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
    if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->lhs_)) evaluatesToList] || [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->rhs_)) evaluatesToList]) {
      [sb appendWithNSString:@"%="];
    }
    else {
      [sb appendWithNSString:@"="];
    }
  }
  else {
    [sb appendWithNSString:@" = "];
  }
  if (self->rhs_ != nil) {
    [sb appendWithNSString:[self->rhs_ toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  }
  else {
    [sb appendWithChar:'0'];
  }
  return [sb description];
}

jboolean OrgGeogebraCommonKernelArithmeticEquation_containsVarWithOrgGeogebraCommonKernelArithmeticExpressionValue_withChar_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> v, jchar var) {
  OrgGeogebraCommonKernelArithmeticEquation_initialize();
  if (v == nil) {
    return NO;
  }
  if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(v, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if (OrgGeogebraCommonKernelArithmeticEquation_containsVarWithOrgGeogebraCommonKernelArithmeticExpressionValue_withChar_([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(node)) getLeft], var)) {
      return YES;
    }
    return OrgGeogebraCommonKernelArithmeticEquation_containsVarWithOrgGeogebraCommonKernelArithmeticExpressionValue_withChar_([node getRight], var);
  }
  if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
    NSString *vVar = [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionVariable *) check_class_cast(v, [OrgGeogebraCommonKernelArithmeticFunctionVariable class])))) getSetVarString];
    return ((jint) [((NSString *) nil_chk(vVar)) length]) == 1 && [vVar charAtWithInt:0] == var;
  }
  if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticPolynomial class]]) {
    return ![((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(((OrgGeogebraCommonKernelArithmeticPolynomial *) check_class_cast(v, [OrgGeogebraCommonKernelArithmeticPolynomial class])))) isFreeOfWithChar:var];
  }
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticEquation)
