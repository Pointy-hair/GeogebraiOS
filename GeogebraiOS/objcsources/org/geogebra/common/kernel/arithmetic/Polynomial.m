//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/arithmetic/Polynomial.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/Polynomial.h"
#include "org/geogebra/common/kernel/arithmetic/Term.h"
#include "org/geogebra/common/plugin/Operation.h"

#define OrgGeogebraCommonKernelArithmeticPolynomial_serialVersionUID 1LL

@interface OrgGeogebraCommonKernelArithmeticPolynomial () {
 @public
  JavaUtilArrayList *terms_;
  OrgGeogebraCommonKernelKernel *kernel_;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel;

- (void)appendWithOrgGeogebraCommonKernelArithmeticTerm:(OrgGeogebraCommonKernelArithmeticTerm *)t;

- (void)subWithOrgGeogebraCommonKernelArithmeticPolynomial:(OrgGeogebraCommonKernelArithmeticPolynomial *)e
             withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)eq;

- (void)addWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)number
                  withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ;

- (void)subWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)number
                  withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ;

- (void)multiplyWithOrgGeogebraCommonKernelArithmeticPolynomial:(OrgGeogebraCommonKernelArithmeticPolynomial *)e
                  withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ;

- (void)multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)number;

- (void)divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)number;

- (void)powerWithInt:(jint)p
withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)eq;

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (JavaUtilHashSet *)getVariables;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticPolynomial, terms_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticPolynomial, kernel_, OrgGeogebraCommonKernelKernel *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticPolynomial, serialVersionUID, jlong)

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticPolynomial *self, OrgGeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticPolynomial *new_OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticPolynomial_appendWithOrgGeogebraCommonKernelArithmeticTerm_(OrgGeogebraCommonKernelArithmeticPolynomial *self, OrgGeogebraCommonKernelArithmeticTerm *t);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticPolynomial_subWithOrgGeogebraCommonKernelArithmeticPolynomial_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticPolynomial *self, OrgGeogebraCommonKernelArithmeticPolynomial *e, OrgGeogebraCommonKernelArithmeticEquation *eq);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticPolynomial_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticPolynomial *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> number, OrgGeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticPolynomial_subWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticPolynomial *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> number, OrgGeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticPolynomial_multiplyWithOrgGeogebraCommonKernelArithmeticPolynomial_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticPolynomial *self, OrgGeogebraCommonKernelArithmeticPolynomial *e, OrgGeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticPolynomial_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticPolynomial *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> number);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticPolynomial_divideWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticPolynomial *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> number);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticPolynomial_powerWithInt_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticPolynomial *self, jint p, OrgGeogebraCommonKernelArithmeticEquation *eq);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelArithmeticPolynomial_toStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticPolynomial *self, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static JavaUtilHashSet *OrgGeogebraCommonKernelArithmeticPolynomial_getVariables(OrgGeogebraCommonKernelArithmeticPolynomial *self);

@implementation OrgGeogebraCommonKernelArithmeticPolynomial

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
            withOrgGeogebraCommonKernelArithmeticTerm:(OrgGeogebraCommonKernelArithmeticTerm *)t {
  OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticTerm_(self, kernel, t);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                         withNSString:(NSString *)vars {
  OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withNSString_(self, kernel, vars);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
      withOrgGeogebraCommonKernelArithmeticPolynomial:(OrgGeogebraCommonKernelArithmeticPolynomial *)poly {
  OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticPolynomial_(self, kernel, poly);
  return self;
}

- (OrgGeogebraCommonKernelArithmeticTerm *)getTermWithInt:(jint)i {
  return [((JavaUtilArrayList *) nil_chk(terms_)) getWithInt:i];
}

- (jint)length {
  return [((JavaUtilArrayList *) nil_chk(terms_)) size];
}

- (jboolean)isEmpty {
  return [((JavaUtilArrayList *) nil_chk(terms_)) size] == 0;
}

- (jboolean)isVarWithNSString:(NSString *)var {
  if ([self length] != 1) return NO;
  @try {
    OrgGeogebraCommonKernelArithmeticTerm *t = [((JavaUtilArrayList *) nil_chk(terms_)) getWithInt:0];
    return ([((NSString *) nil_chk([((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk(t)) getVars])) isEqual:var] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([t getCoefficient])) isConstant] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([t getCoefficient])) evaluateDouble] == 1.0);
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

- (void)appendWithOrgGeogebraCommonKernelArithmeticTerm:(OrgGeogebraCommonKernelArithmeticTerm *)t {
  OrgGeogebraCommonKernelArithmeticPolynomial_appendWithOrgGeogebraCommonKernelArithmeticTerm_(self, t);
}

- (void)addWithOrgGeogebraCommonKernelArithmeticPolynomial:(OrgGeogebraCommonKernelArithmeticPolynomial *)e
             withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)eq {
  for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(e)) length]; i++) {
    OrgGeogebraCommonKernelArithmeticPolynomial_appendWithOrgGeogebraCommonKernelArithmeticTerm_(self, [e getTermWithInt:i]);
  }
  [self simplifyWithOrgGeogebraCommonKernelArithmeticEquation:eq];
}

- (void)subWithOrgGeogebraCommonKernelArithmeticPolynomial:(OrgGeogebraCommonKernelArithmeticPolynomial *)e
             withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)eq {
  OrgGeogebraCommonKernelArithmeticPolynomial_subWithOrgGeogebraCommonKernelArithmeticPolynomial_withOrgGeogebraCommonKernelArithmeticEquation_(self, e, eq);
}

- (void)addWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)number
                  withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  OrgGeogebraCommonKernelArithmeticPolynomial_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticEquation_(self, number, equ);
}

- (void)subWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)number
                  withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  OrgGeogebraCommonKernelArithmeticPolynomial_subWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticEquation_(self, number, equ);
}

- (void)multiplyWithOrgGeogebraCommonKernelArithmeticPolynomial:(OrgGeogebraCommonKernelArithmeticPolynomial *)e
                  withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  OrgGeogebraCommonKernelArithmeticPolynomial_multiplyWithOrgGeogebraCommonKernelArithmeticPolynomial_withOrgGeogebraCommonKernelArithmeticEquation_(self, e, equ);
}

- (void)multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)number {
  OrgGeogebraCommonKernelArithmeticPolynomial_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, number);
}

- (void)divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)number {
  OrgGeogebraCommonKernelArithmeticPolynomial_divideWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, number);
}

- (void)multiplyWithDouble:(jdouble)d {
  OrgGeogebraCommonKernelArithmeticPolynomial_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, d) autorelease]);
}

- (void)powerWithInt:(jint)p
withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)eq {
  OrgGeogebraCommonKernelArithmeticPolynomial_powerWithInt_withOrgGeogebraCommonKernelArithmeticEquation_(self, p, eq);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getConstantCoefficient {
  return [self getCoefficientWithNSString:@""];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getCoefficientWithNSString:(NSString *)variables {
  OrgGeogebraCommonKernelArithmeticTerm *t, *newTerm = [new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_([new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 0.0) autorelease], variables) autorelease];
  for (jint i = 0; i < [self length]; i++) {
    t = [self getTermWithInt:i];
    if ([((NSString *) nil_chk([((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk(t)) getVars])) isEqual:variables]) [newTerm addToCoefficientWithOrgGeogebraCommonKernelArithmeticExpressionValue:t->coefficient_ withOrgGeogebraCommonKernelKernel:kernel_];
  }
  return newTerm->coefficient_;
}

- (jdouble)getCoeffValueWithNSString:(NSString *)variables {
  return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self getCoefficientWithNSString:variables])) evaluateDouble];
}

- (void)simplifyWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)eq {
  JavaUtilArrayList *list;
  IOSObjectArray *t;
  OrgGeogebraCommonKernelArithmeticTerm *ti, *tj;
  NSString *vars;
  jint i, j, len;
  list = [new_JavaUtilArrayList_init() autorelease];
  t = [((JavaUtilArrayList *) nil_chk(terms_)) toArray];
  len = ((IOSObjectArray *) nil_chk(t))->size_;
  for (i = 0; i < len; i++) {
    ti = (OrgGeogebraCommonKernelArithmeticTerm *) check_class_cast(IOSObjectArray_Get(t, i), [OrgGeogebraCommonKernelArithmeticTerm class]);
    if (ti != nil) {
      vars = [ti getVars];
      for (j = i + 1; j < len; j++) {
        tj = (OrgGeogebraCommonKernelArithmeticTerm *) check_class_cast(IOSObjectArray_Get(t, j), [OrgGeogebraCommonKernelArithmeticTerm class]);
        if (tj != nil && [((NSString *) nil_chk(vars)) isEqual:[tj getVars]]) {
          [ti addToCoefficientWithOrgGeogebraCommonKernelArithmeticExpressionValue:tj->coefficient_ withOrgGeogebraCommonKernelKernel:kernel_];
          IOSObjectArray_Set(t, j, nil);
        }
      }
      if (!([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ti->coefficient_)) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]])) {
        if (eq != nil) {
          [eq setIsPolynomialWithBoolean:NO];
        }
        return;
      }
      if (![ti->coefficient_ isConstant] || [ti->coefficient_ evaluateDouble] != 0.0) {
        [list addWithId:ti];
      }
    }
  }
  if ([list size] == 0) {
    [list addWithId:[new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_([new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 0.0) autorelease], @"") autorelease]];
  }
  OrgGeogebraCommonKernelArithmeticPolynomial_set_terms_(self, list);
}

- (jboolean)containsWithNSString:(NSString *)var {
  id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(terms_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    if ([((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk([i next])) containsWithNSString:var]) return YES;
  }
  return NO;
}

- (jint)degree {
  jint deg = 0;
  jint varLen;
  if ([((JavaUtilArrayList *) nil_chk(terms_)) size] == 0) return -1;
  id<JavaUtilIterator> i = [terms_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    varLen = [((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk([i next])) degree];
    if (varLen > deg) deg = varLen;
  }
  return deg;
}

- (jboolean)isFreeOfWithChar:(jchar)var {
  if ([((JavaUtilArrayList *) nil_chk(terms_)) size] == 0) return YES;
  id<JavaUtilIterator> i = [terms_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    OrgGeogebraCommonKernelArithmeticTerm *t = [i next];
    if ([((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk(t)) degreeWithChar:var] > 0) return NO;
  }
  return YES;
}

- (jint)singleDegree {
  jint deg = 0;
  jint varLen;
  if ([((JavaUtilArrayList *) nil_chk(terms_)) size] == 0) return -1;
  id<JavaUtilIterator> i = [terms_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    OrgGeogebraCommonKernelArithmeticTerm *t = [i next];
    varLen = [((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk(t)) degreeWithChar:'x'];
    if (varLen > deg) deg = varLen;
    varLen = [t degreeWithChar:'y'];
    if (varLen > deg) deg = varLen;
    varLen = [t degreeWithChar:'z'];
    if (varLen > deg) deg = varLen;
  }
  return deg;
}

- (NSString *)description {
  return JreStrcat("$$", @"POLY", OrgGeogebraCommonKernelArithmeticPolynomial_toStringWithOrgGeogebraCommonKernelStringTemplate_(self, OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()));
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticPolynomial_toStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (IOSObjectArray *)getCoeff {
  [self simplifyWithOrgGeogebraCommonKernelArithmeticEquation:nil];
  id<JavaUtilIterator> it = [((JavaUtilArrayList *) nil_chk(terms_)) iterator];
  jint degX = 0;
  jint degY = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelArithmeticTerm *t = [it next];
    degX = JavaLangMath_maxWithInt_withInt_(degX, [((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk(t)) degreeWithChar:'x']);
    degY = JavaLangMath_maxWithInt_withInt_(degY, [t degreeWithChar:'y']);
  }
  IOSObjectArray *coeff = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ degX + 1, degY + 1 } type:OrgGeogebraCommonKernelArithmeticExpressionValue_class_()];
  it = [terms_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelArithmeticTerm *t = [it next];
    IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(coeff, [((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk(t)) degreeWithChar:'x'])), [t degreeWithChar:'y'], [t getCoefficient]);
  }
  return coeff;
}

- (JavaUtilHashSet *)getVariables {
  return OrgGeogebraCommonKernelArithmeticPolynomial_getVariables(self);
}

- (jboolean)isConstant {
  JavaUtilHashSet *vars = OrgGeogebraCommonKernelArithmeticPolynomial_getVariables(self);
  return (vars == nil || [vars size] == 0);
}

+ (OrgGeogebraCommonKernelArithmeticPolynomial *)fromNodeWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)lhs
                                                               withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)eqn {
  return OrgGeogebraCommonKernelArithmeticPolynomial_fromNodeWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticEquation_(lhs, eqn);
}

- (OrgGeogebraCommonKernelArithmeticPolynomial *)applyWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation
                                               withOrgGeogebraCommonKernelArithmeticPolynomial:(OrgGeogebraCommonKernelArithmeticPolynomial *)rt
                                                 withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  switch ([operation ordinal]) {
    case OrgGeogebraCommonPluginOperation_PLUS:
    [self addWithOrgGeogebraCommonKernelArithmeticPolynomial:rt withOrgGeogebraCommonKernelArithmeticEquation:equ];
    break;
    case OrgGeogebraCommonPluginOperation_MINUS:
    OrgGeogebraCommonKernelArithmeticPolynomial_subWithOrgGeogebraCommonKernelArithmeticPolynomial_withOrgGeogebraCommonKernelArithmeticEquation_(self, rt, equ);
    break;
    case OrgGeogebraCommonPluginOperation_MULTIPLY_OR_FUNCTION:
    case OrgGeogebraCommonPluginOperation_MULTIPLY:
    OrgGeogebraCommonKernelArithmeticPolynomial_multiplyWithOrgGeogebraCommonKernelArithmeticPolynomial_withOrgGeogebraCommonKernelArithmeticEquation_(self, rt, equ);
    break;
    case OrgGeogebraCommonPluginOperation_DIVIDE:
    case OrgGeogebraCommonPluginOperation_POWER:
    if ([((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(rt)) degree] != 0) {
      [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) setIsPolynomialWithBoolean:NO];
      return rt;
    }
    return [self applyWithOrgGeogebraCommonPluginOperationEnum:operation withOrgGeogebraCommonKernelArithmeticExpressionValue:[rt getConstantCoefficient] withOrgGeogebraCommonKernelArithmeticEquation:equ];
    default:
    break;
  }
  return self;
}

- (OrgGeogebraCommonKernelArithmeticPolynomial *)applyWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation
                                          withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rt
                                                 withOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *)equ {
  {
    jdouble power;
    switch ([operation ordinal]) {
      case OrgGeogebraCommonPluginOperation_PLUS:
      OrgGeogebraCommonKernelArithmeticPolynomial_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticEquation_(self, rt, equ);
      break;
      case OrgGeogebraCommonPluginOperation_MINUS:
      OrgGeogebraCommonKernelArithmeticPolynomial_subWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticEquation_(self, rt, equ);
      break;
      case OrgGeogebraCommonPluginOperation_MULTIPLY_OR_FUNCTION:
      case OrgGeogebraCommonPluginOperation_MULTIPLY:
      OrgGeogebraCommonKernelArithmeticPolynomial_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, rt);
      break;
      case OrgGeogebraCommonPluginOperation_POWER:
      power = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) evaluateDouble];
      if ([((id<OrgGeogebraCommonKernelArithmeticInspecting>) nil_chk(OrgGeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_())) checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:rt]) {
        if (!([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:[rt evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]])) {
          [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) setIsPolynomialWithBoolean:NO];
        }
        else {
          OrgGeogebraCommonKernelArithmeticPolynomial_powerWithInt_withOrgGeogebraCommonKernelArithmeticEquation_(self, J2ObjCFpToInt(power), equ);
        }
        [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) addVariableDegreeWithOrgGeogebraCommonKernelArithmeticExpressionValue:rt];
      }
      else if ([self degree] == 0) {
        OrgGeogebraCommonKernelArithmeticTerm_set_coefficient_(nil_chk([((JavaUtilArrayList *) nil_chk(terms_)) getWithInt:0]), [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk([terms_ getWithInt:0]))->coefficient_)) wrap])) powerWithOrgGeogebraCommonKernelArithmeticExpressionValue:rt]);
      }
      else if (!OrgGeogebraCommonKernelKernel_isIntegerWithDouble_(power) || OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(0, power)) {
        [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) setIsPolynomialWithBoolean:NO];
      }
      else {
        OrgGeogebraCommonKernelArithmeticPolynomial_powerWithInt_withOrgGeogebraCommonKernelArithmeticEquation_(self, J2ObjCFpToInt(power), equ);
      }
      break;
      case OrgGeogebraCommonPluginOperation_DIVIDE:
      OrgGeogebraCommonKernelArithmeticPolynomial_divideWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, rt);
      break;
      default:
      break;
    }
  }
  return self;
}

- (void)dealloc {
  RELEASE_(terms_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "Polynomial", NULL, 0x2, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelArithmeticTerm:", "Polynomial", NULL, 0x0, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:withNSString:", "Polynomial", NULL, 0x0, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelArithmeticPolynomial:", "Polynomial", NULL, 0x0, NULL, NULL },
    { "getTermWithInt:", "getTerm", "Lorg.geogebra.common.kernel.arithmetic.Term;", 0x0, NULL, NULL },
    { "length", NULL, "I", 0x0, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x0, NULL, NULL },
    { "isVarWithNSString:", "isVar", "Z", 0x0, NULL, NULL },
    { "appendWithOrgGeogebraCommonKernelArithmeticTerm:", "append", "V", 0x2, NULL, NULL },
    { "addWithOrgGeogebraCommonKernelArithmeticPolynomial:withOrgGeogebraCommonKernelArithmeticEquation:", "add", "V", 0x0, NULL, NULL },
    { "subWithOrgGeogebraCommonKernelArithmeticPolynomial:withOrgGeogebraCommonKernelArithmeticEquation:", "sub", "V", 0x2, NULL, NULL },
    { "addWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticEquation:", "add", "V", 0x2, NULL, NULL },
    { "subWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticEquation:", "sub", "V", 0x2, NULL, NULL },
    { "multiplyWithOrgGeogebraCommonKernelArithmeticPolynomial:withOrgGeogebraCommonKernelArithmeticEquation:", "multiply", "V", 0x2, NULL, NULL },
    { "multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "multiply", "V", 0x2, NULL, NULL },
    { "divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "divide", "V", 0x2, NULL, NULL },
    { "multiplyWithDouble:", "multiply", "V", 0x0, NULL, NULL },
    { "powerWithInt:withOrgGeogebraCommonKernelArithmeticEquation:", "power", "V", 0x2, NULL, NULL },
    { "getConstantCoefficient", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCoefficientWithNSString:", "getCoefficient", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCoeffValueWithNSString:", "getCoeffValue", "D", 0x1, NULL, NULL },
    { "simplifyWithOrgGeogebraCommonKernelArithmeticEquation:", "simplify", "V", 0x0, NULL, NULL },
    { "containsWithNSString:", "contains", "Z", 0x0, NULL, NULL },
    { "degree", NULL, "I", 0x1, NULL, NULL },
    { "isFreeOfWithChar:", "isFreeOf", "Z", 0x1, NULL, NULL },
    { "singleDegree", NULL, "I", 0x0, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getCoeff", NULL, "[[Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x2, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "fromNodeWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticEquation:", "fromNode", "Lorg.geogebra.common.kernel.arithmetic.Polynomial;", 0x8, NULL, NULL },
    { "applyWithOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelArithmeticPolynomial:withOrgGeogebraCommonKernelArithmeticEquation:", "apply", "Lorg.geogebra.common.kernel.arithmetic.Polynomial;", 0x0, NULL, NULL },
    { "applyWithOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticEquation:", "apply", "Lorg.geogebra.common.kernel.arithmetic.Polynomial;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraCommonKernelArithmeticPolynomial_serialVersionUID },
    { "terms_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/arithmetic/Term;>;",  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticPolynomial = { 2, "Polynomial", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 34, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticPolynomial;
}

@end

void OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticPolynomial *self, OrgGeogebraCommonKernelKernel *kernel) {
  NSObject_init(self);
  OrgGeogebraCommonKernelArithmeticPolynomial_setAndConsume_terms_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonKernelArithmeticPolynomial_set_kernel_(self, kernel);
}

OrgGeogebraCommonKernelArithmeticPolynomial *new_OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticPolynomial *self = [OrgGeogebraCommonKernelArithmeticPolynomial alloc];
  OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticTerm_(OrgGeogebraCommonKernelArithmeticPolynomial *self, OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelArithmeticTerm *t) {
  OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  [((JavaUtilArrayList *) nil_chk(self->terms_)) addWithId:t];
}

OrgGeogebraCommonKernelArithmeticPolynomial *new_OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticTerm_(OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelArithmeticTerm *t) {
  OrgGeogebraCommonKernelArithmeticPolynomial *self = [OrgGeogebraCommonKernelArithmeticPolynomial alloc];
  OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticTerm_(self, kernel, t);
  return self;
}

void OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withNSString_(OrgGeogebraCommonKernelArithmeticPolynomial *self, OrgGeogebraCommonKernelKernel *kernel, NSString *vars) {
  OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  [((JavaUtilArrayList *) nil_chk(self->terms_)) addWithId:[new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelKernel_withDouble_withNSString_(kernel, 1.0, vars) autorelease]];
}

OrgGeogebraCommonKernelArithmeticPolynomial *new_OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withNSString_(OrgGeogebraCommonKernelKernel *kernel, NSString *vars) {
  OrgGeogebraCommonKernelArithmeticPolynomial *self = [OrgGeogebraCommonKernelArithmeticPolynomial alloc];
  OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withNSString_(self, kernel, vars);
  return self;
}

void OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticPolynomial_(OrgGeogebraCommonKernelArithmeticPolynomial *self, OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelArithmeticPolynomial *poly) {
  OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(poly)) length]; i++) {
    OrgGeogebraCommonKernelArithmeticPolynomial_appendWithOrgGeogebraCommonKernelArithmeticTerm_(self, [new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticTerm_withOrgGeogebraCommonKernelKernel_([((JavaUtilArrayList *) nil_chk(poly->terms_)) getWithInt:i], kernel) autorelease]);
  }
}

OrgGeogebraCommonKernelArithmeticPolynomial *new_OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticPolynomial_(OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelArithmeticPolynomial *poly) {
  OrgGeogebraCommonKernelArithmeticPolynomial *self = [OrgGeogebraCommonKernelArithmeticPolynomial alloc];
  OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticPolynomial_(self, kernel, poly);
  return self;
}

void OrgGeogebraCommonKernelArithmeticPolynomial_appendWithOrgGeogebraCommonKernelArithmeticTerm_(OrgGeogebraCommonKernelArithmeticPolynomial *self, OrgGeogebraCommonKernelArithmeticTerm *t) {
  [((JavaUtilArrayList *) nil_chk(self->terms_)) addWithId:t];
}

void OrgGeogebraCommonKernelArithmeticPolynomial_subWithOrgGeogebraCommonKernelArithmeticPolynomial_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticPolynomial *self, OrgGeogebraCommonKernelArithmeticPolynomial *e, OrgGeogebraCommonKernelArithmeticEquation *eq) {
  OrgGeogebraCommonKernelArithmeticPolynomial *temp = [new_OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticPolynomial_(self->kernel_, e) autorelease];
  [temp multiplyWithDouble:-1.0];
  [self addWithOrgGeogebraCommonKernelArithmeticPolynomial:temp withOrgGeogebraCommonKernelArithmeticEquation:eq];
}

void OrgGeogebraCommonKernelArithmeticPolynomial_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticPolynomial *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> number, OrgGeogebraCommonKernelArithmeticEquation *equ) {
  OrgGeogebraCommonKernelArithmeticPolynomial_appendWithOrgGeogebraCommonKernelArithmeticTerm_(self, [new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(number, @"") autorelease]);
  [self simplifyWithOrgGeogebraCommonKernelArithmeticEquation:equ];
}

void OrgGeogebraCommonKernelArithmeticPolynomial_subWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticPolynomial *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> number, OrgGeogebraCommonKernelArithmeticEquation *equ) {
  OrgGeogebraCommonKernelArithmeticTerm *subTerm = [new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(number, @"") autorelease];
  [subTerm multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, -1.0) autorelease] withOrgGeogebraCommonKernelKernel:self->kernel_];
  OrgGeogebraCommonKernelArithmeticPolynomial_appendWithOrgGeogebraCommonKernelArithmeticTerm_(self, subTerm);
  [self simplifyWithOrgGeogebraCommonKernelArithmeticEquation:equ];
}

void OrgGeogebraCommonKernelArithmeticPolynomial_multiplyWithOrgGeogebraCommonKernelArithmeticPolynomial_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticPolynomial *self, OrgGeogebraCommonKernelArithmeticPolynomial *e, OrgGeogebraCommonKernelArithmeticEquation *equ) {
  JavaUtilArrayList *temp = [new_JavaUtilArrayList_init() autorelease];
  jint i, j;
  OrgGeogebraCommonKernelArithmeticTerm *ti, *newTerm;
  for (i = 0; i < [self length]; i++) {
    ti = [self getTermWithInt:i];
    for (j = 0; j < [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(e)) length]; j++) {
      newTerm = [new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticTerm_withOrgGeogebraCommonKernelKernel_(ti, self->kernel_) autorelease];
      [newTerm multiplyWithOrgGeogebraCommonKernelArithmeticTerm:[e getTermWithInt:j] withOrgGeogebraCommonKernelKernel:self->kernel_];
      [temp addWithId:newTerm];
    }
  }
  OrgGeogebraCommonKernelArithmeticPolynomial_set_terms_(self, temp);
  [self simplifyWithOrgGeogebraCommonKernelArithmeticEquation:equ];
}

void OrgGeogebraCommonKernelArithmeticPolynomial_multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticPolynomial *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> number) {
  for (jint i = 0; i < [self length]; i++) {
    [((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk([((JavaUtilArrayList *) nil_chk(self->terms_)) getWithInt:i])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:number withOrgGeogebraCommonKernelKernel:self->kernel_];
  }
}

void OrgGeogebraCommonKernelArithmeticPolynomial_divideWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticPolynomial *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> number) {
  for (jint i = 0; i < [self length]; i++) {
    [((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk([self getTermWithInt:i])) divideWithOrgGeogebraCommonKernelArithmeticExpressionValue:number withOrgGeogebraCommonKernelKernel:self->kernel_];
  }
}

void OrgGeogebraCommonKernelArithmeticPolynomial_powerWithInt_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticPolynomial *self, jint p, OrgGeogebraCommonKernelArithmeticEquation *eq) {
  if (p == 0) {
    [((JavaUtilArrayList *) nil_chk(self->terms_)) clear];
    OrgGeogebraCommonKernelArithmeticPolynomial_appendWithOrgGeogebraCommonKernelArithmeticTerm_(self, [new_OrgGeogebraCommonKernelArithmeticTerm_initWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_([new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1) autorelease], @"") autorelease]);
    return;
  }
  if (p < 2 || p == JavaLangInteger_MAX_VALUE) {
    return;
  }
  OrgGeogebraCommonKernelArithmeticPolynomial *exp = [new_OrgGeogebraCommonKernelArithmeticPolynomial_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticPolynomial_(self->kernel_, self) autorelease];
  OrgGeogebraCommonKernelArithmeticPolynomial_multiplyWithOrgGeogebraCommonKernelArithmeticPolynomial_withOrgGeogebraCommonKernelArithmeticEquation_(self, exp, eq);
  OrgGeogebraCommonKernelArithmeticPolynomial_powerWithInt_withOrgGeogebraCommonKernelArithmeticEquation_(self, p / 2, eq);
  if (p % 2 == 1) {
    OrgGeogebraCommonKernelArithmeticPolynomial_multiplyWithOrgGeogebraCommonKernelArithmeticPolynomial_withOrgGeogebraCommonKernelArithmeticEquation_(self, exp, eq);
  }
}

NSString *OrgGeogebraCommonKernelArithmeticPolynomial_toStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticPolynomial *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  jint size = [((JavaUtilArrayList *) nil_chk(self->terms_)) size];
  if (size == 0) return nil;
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  NSString *termStr;
  jboolean first = YES;
  for (jint i = 0; i < size; i++) {
    termStr = [((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk([self->terms_ getWithInt:i])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
    if (termStr != nil && ((jint) [termStr length]) > 0) {
      if (first) {
        [sb appendWithNSString:termStr];
        first = NO;
      }
      else {
        if ([termStr charAtWithInt:0] == '-') {
          [sb appendWithNSString:@" - "];
          [sb appendWithNSString:[termStr substring:1]];
        }
        else {
          [sb appendWithNSString:@" + "];
          [sb appendWithNSString:termStr];
        }
      }
    }
  }
  return [sb description];
}

JavaUtilHashSet *OrgGeogebraCommonKernelArithmeticPolynomial_getVariables(OrgGeogebraCommonKernelArithmeticPolynomial *self) {
  JavaUtilHashSet *temp, *vars = [new_JavaUtilHashSet_init() autorelease];
  id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(self->terms_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    temp = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticTerm *) nil_chk([i next])) getCoefficient])) getVariables];
    if (temp != nil) {
      [vars addAllWithJavaUtilCollection:temp];
    }
  }
  return vars;
}

OrgGeogebraCommonKernelArithmeticPolynomial *OrgGeogebraCommonKernelArithmeticPolynomial_fromNodeWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticEquation_(OrgGeogebraCommonKernelArithmeticExpressionNode *lhs, OrgGeogebraCommonKernelArithmeticEquation *eqn) {
  OrgGeogebraCommonKernelArithmeticPolynomial_initialize();
  OrgGeogebraCommonKernelArithmeticExpressionNode *leftEN = [lhs getCopyWithOrgGeogebraCommonKernelKernel:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(lhs)) getKernel]];
  OrgGeogebraCommonKernelArithmeticPolynomial *poly = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(leftEN)) makePolynomialTreeWithOrgGeogebraCommonKernelArithmeticEquation:eqn];
  return poly;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticPolynomial)
