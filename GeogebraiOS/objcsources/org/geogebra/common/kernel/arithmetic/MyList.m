//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/arithmetic/MyList.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/ListValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/ReplaceChildrenByValues.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/arithmetic/Variable.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/GgbMat.h"

@interface OrgGeogebraCommonKernelArithmeticMyList () {
 @public
  OrgGeogebraCommonKernelKernel *kernel_;
  jint matrixRows_;
  jint matrixCols_;
  JavaUtilArrayList *listElements_;
  jboolean isDefined__;
}

- (void)matrixMultiplyWithOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)LHlist
                      withOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)RHlist;

- (void)applyWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation
 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)value
                                          withBoolean:(jboolean)right
            withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (void)setIdentityMatrix;

+ (jboolean)isEquationWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ex;

- (jboolean)isMatrixWithOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)LHlist;

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                    withBoolean:(jboolean)valueMode;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticMyList, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticMyList, listElements_, JavaUtilArrayList *)

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticMyList_matrixMultiplyWithOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelArithmeticMyList_(OrgGeogebraCommonKernelArithmeticMyList *self, OrgGeogebraCommonKernelArithmeticMyList *LHlist, OrgGeogebraCommonKernelArithmeticMyList *RHlist);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticMyList_applyWithOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticMyList *self, OrgGeogebraCommonPluginOperationEnum *operation, id<OrgGeogebraCommonKernelArithmeticExpressionValue> value, jboolean right, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticMyList_setIdentityMatrix(OrgGeogebraCommonKernelArithmeticMyList *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticMyList_isEquationWithOrgGeogebraCommonKernelArithmeticExpressionValue_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ex);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticMyList_isMatrixWithOrgGeogebraCommonKernelArithmeticMyList_(OrgGeogebraCommonKernelArithmeticMyList *self, OrgGeogebraCommonKernelArithmeticMyList *LHlist);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelArithmeticMyList_toStringWithOrgGeogebraCommonKernelStringTemplate_withBoolean_(OrgGeogebraCommonKernelArithmeticMyList *self, OrgGeogebraCommonKernelStringTemplate *tpl, jboolean valueMode);

@implementation OrgGeogebraCommonKernelArithmeticMyList

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                              withInt:(jint)size {
  OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_withInt_(self, kernel, size);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                          withBoolean:(jboolean)isFlatList {
  OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_withBoolean_(self, kernel, isFlatList);
  return self;
}

- (void)addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)arg {
  [((JavaUtilArrayList *) nil_chk(listElements_)) addWithId:arg];
  matrixRows_ = -1;
  matrixCols_ = -1;
}

- (IOSDoubleArray *)toDouble {
  @try {
    IOSDoubleArray *valueArray = [IOSDoubleArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(listElements_)) size]];
    for (jint i = 0; i < valueArray->size_; i++) {
      *IOSDoubleArray_GetRef(valueArray, i) = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([listElements_ getWithInt:i])) evaluateDouble];
    }
    return valueArray;
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (jint)replaceVariablesWithNSString:(NSString *)varName
withOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fVar {
  jint replacements = 0;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(listElements_)) size]; i++) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> element = [listElements_ getWithInt:i];
    if ([element isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
      replacements += [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(element, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) replaceVariablesWithNSString:varName withOrgGeogebraCommonKernelArithmeticFunctionVariable:fVar];
    }
    else if ([element isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]]) {
      if ([((NSString *) nil_chk(varName)) isEqual:[((OrgGeogebraCommonKernelArithmeticVariable *) nil_chk(((OrgGeogebraCommonKernelArithmeticVariable *) check_class_cast(element, [OrgGeogebraCommonKernelArithmeticVariable class])))) getNameWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
        (void) [listElements_ setWithInt:i withId:fVar];
        replacements++;
      }
    }
  }
  return replacements;
}

- (void)applyRightWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation
      withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)value
                 withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  OrgGeogebraCommonKernelArithmeticMyList_applyWithOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self, operation, value, YES, tpl);
}

- (void)applyLeftWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation
     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)value
                withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  OrgGeogebraCommonKernelArithmeticMyList_applyWithOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self, operation, value, NO, tpl);
}

- (void)matrixMultiplyWithOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)LHlist
                      withOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)RHlist {
  OrgGeogebraCommonKernelArithmeticMyList_matrixMultiplyWithOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelArithmeticMyList_(self, LHlist, RHlist);
}

- (void)applyWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)operation
 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)value
                                          withBoolean:(jboolean)right
            withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  OrgGeogebraCommonKernelArithmeticMyList_applyWithOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self, operation, value, right, tpl);
}

- (void)setIdentityMatrix {
  OrgGeogebraCommonKernelArithmeticMyList_setIdentityMatrix(self);
}

- (jint)getMatrixRows {
  if (matrixRows_ != -1 && matrixCols_ != -1) return matrixRows_;
  [self isMatrix];
  return matrixRows_;
}

- (jint)getMatrixCols {
  if (matrixRows_ != -1 && matrixCols_ != -1) return matrixCols_;
  [self isMatrix];
  return matrixCols_;
}

- (OrgGeogebraCommonKernelArithmeticMyList *)invert {
  OrgGeogebraCommonUtilGgbMat *g = new_OrgGeogebraCommonUtilGgbMat_initWithOrgGeogebraCommonKernelArithmeticMyList_(self);
  [g inverseImmediate];
  OrgGeogebraCommonKernelArithmeticMyList *gl = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(kernel_);
  [g getMyListWithOrgGeogebraCommonKernelArithmeticMyList:gl withOrgGeogebraCommonKernelKernel:kernel_];
  return [gl getMyList];
}

- (jboolean)isMatrix {
  return OrgGeogebraCommonKernelArithmeticMyList_isMatrixWithOrgGeogebraCommonKernelArithmeticMyList_(self, self);
}

- (void)clear {
  [((JavaUtilArrayList *) nil_chk(listElements_)) clear];
}

+ (jboolean)isEquationWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ex {
  return OrgGeogebraCommonKernelArithmeticMyList_isEquationWithOrgGeogebraCommonKernelArithmeticExpressionValue_(ex);
}

- (jboolean)isMatrixWithOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)LHlist {
  return OrgGeogebraCommonKernelArithmeticMyList_isMatrixWithOrgGeogebraCommonKernelArithmeticMyList_(self, LHlist);
}

+ (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getCellWithOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)list
                                                                                                   withInt:(jint)row
                                                                                                   withInt:(jint)col {
  return OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, row, col);
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticMyList_toStringWithOrgGeogebraCommonKernelStringTemplate_withBoolean_(self, tpl, YES);
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *toLaTeXString = new_JavaLangStringBuilder_init();
  if ([self size] == 0) {
    return @"\\left\\{ \\right\\}";
  }
  else if ([self isMatrix]) {
    if ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isLatexMathQuillStyleWithOrgGeogebraCommonKernelStringTemplate:tpl]) {
      (void) [toLaTeXString appendWithNSString:@"\\left(\\ggbtable{"];
      for (jint i = 0; i < [self size]; i++) {
        id<OrgGeogebraCommonKernelArithmeticListValue> singleValue = (id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self getListElementWithInt:i])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @protocol(OrgGeogebraCommonKernelArithmeticListValue));
        (void) [toLaTeXString appendWithNSString:@"\\ggbtr{"];
        for (jint j = 0; j < [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(singleValue)) size]; j++) {
          (void) [toLaTeXString appendWithNSString:@"\\ggbtd{"];
          (void) [toLaTeXString appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([singleValue getListElementWithInt:j])) toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl]];
          (void) [toLaTeXString appendWithNSString:@"}"];
        }
        (void) [toLaTeXString appendWithNSString:@"}"];
      }
      (void) [toLaTeXString appendWithNSString:@"}\\right)"];
    }
    else {
      (void) [toLaTeXString appendWithNSString:@"\\left(\\begin{array}{"];
      for (jint i = 0; i < matrixCols_; i++) {
        (void) [toLaTeXString appendWithNSString:@"r"];
      }
      (void) [toLaTeXString appendWithNSString:@"}"];
      for (jint i = 0; i < [self size]; i++) {
        id<OrgGeogebraCommonKernelArithmeticListValue> singleValue = (id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self getListElementWithInt:i])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @protocol(OrgGeogebraCommonKernelArithmeticListValue));
        if ([((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(singleValue)) size] > 0) {
          (void) [toLaTeXString appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([singleValue getListElementWithInt:0])) toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl]];
          for (jint j = 1; j < [singleValue size]; j++) {
            (void) [toLaTeXString appendWithNSString:@"&"];
            (void) [toLaTeXString appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([singleValue getListElementWithInt:j])) toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl]];
          }
        }
        (void) [toLaTeXString appendWithNSString:@"\\\\"];
      }
      (void) [toLaTeXString appendWithNSString:@"\\end{array}\\right)"];
    }
  }
  else {
    (void) [toLaTeXString appendWithNSString:@" \\left\\{ "];
    jint lastIndex = [((JavaUtilArrayList *) nil_chk(listElements_)) size] - 1;
    if (lastIndex > -1) {
      for (jint i = 0; i < lastIndex; i++) {
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> exp = [listElements_ getWithInt:i];
        (void) [toLaTeXString appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [toLaTeXString appendWithNSString:@", "];
      }
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> exp = [listElements_ getWithInt:lastIndex];
      (void) [toLaTeXString appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl]];
    }
    (void) [toLaTeXString appendWithNSString:@" \\right\\} "];
  }
  return [toLaTeXString description];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticMyList_toStringWithOrgGeogebraCommonKernelStringTemplate_withBoolean_(self, tpl, NO);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                    withBoolean:(jboolean)valueMode {
  return OrgGeogebraCommonKernelArithmeticMyList_toStringWithOrgGeogebraCommonKernelStringTemplate_withBoolean_(self, tpl, valueMode);
}

- (jint)size {
  return [((JavaUtilArrayList *) nil_chk(listElements_)) size];
}

- (void)resolveVariables {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(listElements_)) size]; i++) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> en = [listElements_ getWithInt:i];
    [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(en)) resolveVariables];
  }
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getListElementWithInt:(jint)i {
  return [((JavaUtilArrayList *) nil_chk(listElements_)) getWithInt:i];
}

- (jboolean)isConstant {
  return [((JavaUtilHashSet *) nil_chk([self getVariables])) size] == 0;
}

- (jboolean)isLeaf {
  return YES;
}

- (jboolean)isNumberValue {
  return NO;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel1 {
  jint size = [((JavaUtilArrayList *) nil_chk(listElements_)) size];
  OrgGeogebraCommonKernelArithmeticMyList *c = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_withInt_(kernel1, [self size]);
  for (jint i = 0; i < size; i++) {
    [c addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([listElements_ getWithInt:i])) deepCopyWithOrgGeogebraCommonKernelKernel:kernel1]];
  }
  return c;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)deepCopyExGeoWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel1 {
  jint size = [((JavaUtilArrayList *) nil_chk(listElements_)) size];
  OrgGeogebraCommonKernelArithmeticMyList *c = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_withInt_(kernel1, [self size]);
  for (jint i = 0; i < size; i++) {
    [c addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticExpressionNode_copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_([listElements_ getWithInt:i], kernel1)];
  }
  return c;
}

- (JavaUtilHashSet *)getVariables {
  JavaUtilHashSet *varSet = new_JavaUtilHashSet_init();
  jint size = [((JavaUtilArrayList *) nil_chk(listElements_)) size];
  for (jint i = 0; i < size; i++) {
    JavaUtilHashSet *s = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([listElements_ getWithInt:i])) getVariables];
    if (s != nil) [varSet addAllWithJavaUtilCollection:s];
  }
  return varSet;
}

- (jboolean)evaluatesToList {
  return YES;
}

- (jboolean)containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

- (OrgGeogebraCommonKernelArithmeticMyList *)getMyList {
  if ([self isInTree]) {
    return (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([self deepCopyWithOrgGeogebraCommonKernelKernel:kernel_], [OrgGeogebraCommonKernelArithmeticMyList class]);
  }
  return self;
}

+ (jboolean)isElementOfWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)a
                                withOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)myList {
  return OrgGeogebraCommonKernelArithmeticMyList_isElementOfWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticMyList_(a, myList);
}

+ (jboolean)listContainsWithOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)list1
                        withOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)list2
                          withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticMyList_listContainsWithOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelStringTemplate_(list1, list2, tpl);
}

+ (jboolean)listContainsStrictWithOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)list1
                              withOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)list2
                                withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticMyList_listContainsStrictWithOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelStringTemplate_(list1, list2, tpl);
}

+ (OrgGeogebraCommonKernelArithmeticMyList *)setDifferenceWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                                withOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)list1
                                                withOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)list2 {
  return OrgGeogebraCommonKernelArithmeticMyList_setDifferenceWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelArithmeticMyList_(kernel, list1, list2);
}

- (NSString *)toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (void)vectorProductWithOrgGeogebraCommonKernelArithmeticMyList:(OrgGeogebraCommonKernelArithmeticMyList *)list {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> ax = [self getListElementWithInt:0];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> ay = [self getListElementWithInt:1];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> bx = [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list)) getListElementWithInt:0];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> by = [list getListElementWithInt:1];
  OrgGeogebraCommonKernelArithmeticExpressionNode *en = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ax, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), by);
  OrgGeogebraCommonKernelArithmeticExpressionNode *en2 = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ay, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), bx);
  OrgGeogebraCommonKernelArithmeticExpressionNode *x, *y, *z;
  if ([list size] == 2 || [self size] == 2) {
    [((JavaUtilArrayList *) nil_chk(listElements_)) addWithInt:2 withId:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, en, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), en2)];
    (void) [listElements_ setWithInt:0 withId:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 0.0), OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil)];
    (void) [listElements_ setWithInt:1 withId:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 0.0), OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil)];
    return;
  }
  z = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, en, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), en2);
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> az = [self getListElementWithInt:2];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> bz = [list getListElementWithInt:2];
  en = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ay, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), bz);
  en2 = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, az, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), by);
  x = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, en, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), en2);
  en = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, az, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), bx);
  en2 = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ax, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), bz);
  y = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, en, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), en2);
  (void) [((JavaUtilArrayList *) nil_chk(listElements_)) setWithInt:0 withId:x];
  (void) [listElements_ setWithInt:1 withId:y];
  (void) [listElements_ setWithInt:2 withId:z];
}

- (OrgGeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (jboolean)isDefined {
  return isDefined__;
}

- (void)replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  for (jint i = 0; i < [self size]; i++) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> insert = [self getListElementWithInt:i];
    if ([OrgGeogebraCommonKernelArithmeticReplaceChildrenByValues_class_() isInstance:insert]) [((id<OrgGeogebraCommonKernelArithmeticReplaceChildrenByValues>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticReplaceChildrenByValues>) check_protocol_cast(insert, @protocol(OrgGeogebraCommonKernelArithmeticReplaceChildrenByValues))))) replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (OrgGeogebraCommonKernelArithmeticMyList *)getCopyWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel2 {
  OrgGeogebraCommonKernelArithmeticMyList *ret = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_withInt_(kernel_, [self size]);
  for (jint i = 0; i < [self size]; i++) {
    [ret->listElements_ addWithId:OrgGeogebraCommonKernelArithmeticExpressionNode_copy__WithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_([((JavaUtilArrayList *) nil_chk(listElements_)) getWithInt:i], kernel2)];
  }
  return ret;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)traverseWithOrgGeogebraCommonKernelArithmeticTraversing:(id<OrgGeogebraCommonKernelArithmeticTraversing>)t {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> v = [((id<OrgGeogebraCommonKernelArithmeticTraversing>) nil_chk(t)) processWithOrgGeogebraCommonKernelArithmeticExpressionValue:self];
  for (jint i = 0; i < [self size]; i++) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> insert = [self getListElementWithInt:i];
    (void) [((JavaUtilArrayList *) nil_chk(listElements_)) setWithInt:i withId:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(insert)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:t]];
  }
  return v;
}

- (jboolean)inspectWithOrgGeogebraCommonKernelArithmeticInspecting:(id<OrgGeogebraCommonKernelArithmeticInspecting>)t {
  if ([((id<OrgGeogebraCommonKernelArithmeticInspecting>) nil_chk(t)) checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:self]) return YES;
  for (jint i = 0; i < [self size]; i++) {
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(([self getListElementWithInt:i]))) inspectWithOrgGeogebraCommonKernelArithmeticInspecting:t]) {
      return YES;
    }
  }
  return NO;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getItemWithInt:(jint)i {
  return [((JavaUtilArrayList *) nil_chk(listElements_)) getWithInt:i];
}

- (jint)getLength {
  return [((JavaUtilArrayList *) nil_chk(listElements_)) size];
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self);
}

- (void)addQueWithDouble:(jdouble)val
                 withInt:(jint)offset {
  if ([((JavaUtilArrayList *) nil_chk(listElements_)) size] < offset + 1) {
    return;
  }
  OrgGeogebraCommonKernelArithmeticMyDouble *removed = (OrgGeogebraCommonKernelArithmeticMyDouble *) check_class_cast([listElements_ getWithInt:offset], [OrgGeogebraCommonKernelArithmeticMyDouble class]);
  for (jint read = offset + 1; read < [listElements_ size]; read++) {
    (void) [listElements_ setWithInt:read - 1 withId:[listElements_ getWithInt:read]];
  }
  [removed addWithDouble:val - [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(removed)) getDouble]];
  (void) [listElements_ setWithInt:[listElements_ size] - 1 withId:removed];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "MyList", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:withInt:", "MyList", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:withBoolean:", "MyList", NULL, 0x1, NULL, NULL },
    { "addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "addListElement", "V", 0x1, NULL, NULL },
    { "toDouble", NULL, "[D", 0x1, NULL, NULL },
    { "replaceVariablesWithNSString:withOrgGeogebraCommonKernelArithmeticFunctionVariable:", "replaceVariables", "I", 0x1, NULL, NULL },
    { "applyRightWithOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelStringTemplate:", "applyRight", "V", 0x11, NULL, NULL },
    { "applyLeftWithOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelStringTemplate:", "applyLeft", "V", 0x11, NULL, NULL },
    { "matrixMultiplyWithOrgGeogebraCommonKernelArithmeticMyList:withOrgGeogebraCommonKernelArithmeticMyList:", "matrixMultiply", "V", 0x12, NULL, NULL },
    { "applyWithOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelArithmeticExpressionValue:withBoolean:withOrgGeogebraCommonKernelStringTemplate:", "apply", "V", 0x2, NULL, NULL },
    { "setIdentityMatrix", NULL, "V", 0x2, NULL, NULL },
    { "getMatrixRows", NULL, "I", 0x1, NULL, NULL },
    { "getMatrixCols", NULL, "I", 0x1, NULL, NULL },
    { "invert", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyList;", 0x1, NULL, NULL },
    { "isMatrix", NULL, "Z", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "isEquationWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "isEquation", "Z", 0xa, NULL, NULL },
    { "isMatrixWithOrgGeogebraCommonKernelArithmeticMyList:", "isMatrix", "Z", 0x2, NULL, NULL },
    { "getCellWithOrgGeogebraCommonKernelArithmeticMyList:withInt:withInt:", "getCell", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x9, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:withBoolean:", "toString", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "getListElementWithInt:", "getListElement", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "deepCopyWithOrgGeogebraCommonKernelKernel:", "deepCopy", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "deepCopyExGeoWithOrgGeogebraCommonKernelKernel:", "deepCopyExGeo", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "evaluatesToList", NULL, "Z", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "getMyList", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyList;", 0x1, NULL, NULL },
    { "isElementOfWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticMyList:", "isElementOf", "Z", 0x9, NULL, NULL },
    { "listContainsWithOrgGeogebraCommonKernelArithmeticMyList:withOrgGeogebraCommonKernelArithmeticMyList:withOrgGeogebraCommonKernelStringTemplate:", "listContains", "Z", 0x9, NULL, NULL },
    { "listContainsStrictWithOrgGeogebraCommonKernelArithmeticMyList:withOrgGeogebraCommonKernelArithmeticMyList:withOrgGeogebraCommonKernelStringTemplate:", "listContainsStrict", "Z", 0x9, NULL, NULL },
    { "setDifferenceWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelArithmeticMyList:withOrgGeogebraCommonKernelArithmeticMyList:", "setDifference", "Lorg.geogebra.common.kernel.arithmetic.MyList;", 0x9, NULL, NULL },
    { "toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "vectorProductWithOrgGeogebraCommonKernelArithmeticMyList:", "vectorProduct", "V", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lorg.geogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:", "replaceChildrenByValues", "V", 0x1, NULL, NULL },
    { "getCopyWithOrgGeogebraCommonKernelKernel:", "getCopy", "Lorg.geogebra.common.kernel.arithmetic.MyList;", 0x1, NULL, NULL },
    { "traverseWithOrgGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "inspectWithOrgGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x1, NULL, NULL },
    { "getItemWithInt:", "getItem", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getLength", NULL, "I", 0x1, NULL, NULL },
    { "wrap", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "addQueWithDouble:withInt:", "addQue", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "matrixRows_", NULL, 0x2, "I", NULL, NULL,  },
    { "matrixCols_", NULL, 0x2, "I", NULL, NULL,  },
    { "listElements_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/arithmetic/ExpressionValue;>;",  },
    { "isDefined__", "isDefined", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticMyList = { 2, "MyList", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 51, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticMyList;
}

@end

void OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticMyList *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_withInt_(self, kernel, 20);
}

OrgGeogebraCommonKernelArithmeticMyList *new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticMyList *self = [OrgGeogebraCommonKernelArithmeticMyList alloc];
  OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_withInt_(OrgGeogebraCommonKernelArithmeticMyList *self, OrgGeogebraCommonKernelKernel *kernel, jint size) {
  (void) OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->matrixRows_ = -1;
  self->matrixCols_ = -1;
  self->isDefined__ = YES;
  self->kernel_ = kernel;
  self->listElements_ = new_JavaUtilArrayList_initWithInt_(size);
}

OrgGeogebraCommonKernelArithmeticMyList *new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_withInt_(OrgGeogebraCommonKernelKernel *kernel, jint size) {
  OrgGeogebraCommonKernelArithmeticMyList *self = [OrgGeogebraCommonKernelArithmeticMyList alloc];
  OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_withInt_(self, kernel, size);
  return self;
}

void OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_withBoolean_(OrgGeogebraCommonKernelArithmeticMyList *self, OrgGeogebraCommonKernelKernel *kernel, jboolean isFlatList) {
  (void) OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  if (isFlatList) {
    self->matrixRows_ = self->matrixCols_ = 0;
  }
}

OrgGeogebraCommonKernelArithmeticMyList *new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_withBoolean_(OrgGeogebraCommonKernelKernel *kernel, jboolean isFlatList) {
  OrgGeogebraCommonKernelArithmeticMyList *self = [OrgGeogebraCommonKernelArithmeticMyList alloc];
  OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_withBoolean_(self, kernel, isFlatList);
  return self;
}

void OrgGeogebraCommonKernelArithmeticMyList_matrixMultiplyWithOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelArithmeticMyList_(OrgGeogebraCommonKernelArithmeticMyList *self, OrgGeogebraCommonKernelArithmeticMyList *LHlist, OrgGeogebraCommonKernelArithmeticMyList *RHlist) {
  jint LHcols = [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(LHlist)) getMatrixCols], LHrows = [LHlist getMatrixRows];
  jint RHcols = [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(RHlist)) getMatrixCols];
  OrgGeogebraCommonKernelArithmeticExpressionNode *totalNode;
  OrgGeogebraCommonKernelArithmeticExpressionNode *tempNode;
  [((JavaUtilArrayList *) nil_chk(self->listElements_)) clear];
  if (LHcols != [RHlist getMatrixRows]) {
    self->isDefined__ = NO;
    return;
  }
  self->isDefined__ = YES;
  for (jint row = 0; row < LHrows; row++) {
    OrgGeogebraCommonKernelArithmeticMyList *col1 = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(self->kernel_);
    for (jint col = 0; col < RHcols; col++) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> totalVal = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0.0));
      for (jint i = 0; i < LHcols; i++) {
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> leftV = OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(LHlist, i, row);
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> rightV = OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(RHlist, col, i);
        tempNode = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, leftV, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), rightV);
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> operationResult = [tempNode evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
        totalNode = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, totalVal, OrgGeogebraCommonPluginOperationEnum_get_PLUS(), operationResult);
        totalVal = [totalNode evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      }
      tempNode = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, totalVal);
      [col1 addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:tempNode];
    }
    OrgGeogebraCommonKernelArithmeticExpressionNode *col1a = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, col1);
    [self->listElements_ addWithId:col1a];
  }
  self->matrixRows_ = -1;
  self->matrixCols_ = -1;
}

void OrgGeogebraCommonKernelArithmeticMyList_applyWithOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticMyList *self, OrgGeogebraCommonPluginOperationEnum *operation, id<OrgGeogebraCommonKernelArithmeticExpressionValue> value, jboolean right, OrgGeogebraCommonKernelStringTemplate *tpl) {
  jint size = [self size];
  if (right && operation == OrgGeogebraCommonPluginOperationEnum_get_POWER() && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:value] && [self isMatrix]) {
    jdouble power = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(value, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    if (!OrgGeogebraCommonKernelKernel_isIntegerWithDouble_(power)) {
      [((JavaUtilArrayList *) nil_chk(self->listElements_)) clear];
      return;
    }
    power = JavaLangMath_roundWithDouble_(power);
    if (power == 0) {
      OrgGeogebraCommonKernelArithmeticMyList_setIdentityMatrix(self);
    }
    if (power < 0) {
      self->listElements_ = ((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk([self invert]))->listElements_;
      power *= -1;
      if (power == 1) {
        OrgGeogebraCommonKernelArithmeticMyList *RHlist = (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([self deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_], [OrgGeogebraCommonKernelArithmeticMyList class]);
        OrgGeogebraCommonKernelArithmeticMyList_setIdentityMatrix(nil_chk(RHlist));
        OrgGeogebraCommonKernelArithmeticMyList_matrixMultiplyWithOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelArithmeticMyList_(self, (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([self deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_], [OrgGeogebraCommonKernelArithmeticMyList class]), RHlist);
        return;
      }
    }
    if (power != 1) {
      OrgGeogebraCommonKernelArithmeticMyList *LHlist, *RHlist;
      RHlist = (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([self deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_], [OrgGeogebraCommonKernelArithmeticMyList class]);
      while (power > 1.0) {
        LHlist = (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([self deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_], [OrgGeogebraCommonKernelArithmeticMyList class]);
        OrgGeogebraCommonKernelArithmeticMyList_matrixMultiplyWithOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelArithmeticMyList_(self, LHlist, RHlist);
        power--;
      }
      return;
    }
  }
  OrgGeogebraCommonKernelArithmeticMyList *valueList = [OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:value] ? [((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(value, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList] : nil;
  if (operation == OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY() && valueList != nil) {
    OrgGeogebraCommonKernelArithmeticMyList *LHlist, *RHlist;
    if (!right) {
      LHlist = valueList;
      RHlist = (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([self deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_], [OrgGeogebraCommonKernelArithmeticMyList class]);
    }
    else {
      RHlist = valueList;
      LHlist = (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([self deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_], [OrgGeogebraCommonKernelArithmeticMyList class]);
    }
    jboolean isMatrix = ([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(LHlist)) isMatrix] && [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(RHlist)) isMatrix]);
    if (isMatrix) {
      OrgGeogebraCommonKernelArithmeticMyList_matrixMultiplyWithOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelArithmeticMyList_(self, LHlist, RHlist);
      return;
    }
  }
  self->matrixRows_ = -1;
  self->matrixCols_ = -1;
  if (size == 0 || (valueList != nil && size != [valueList size])) {
    [((JavaUtilArrayList *) nil_chk(self->listElements_)) clear];
    return;
  }
  OrgGeogebraCommonKernelArithmeticExpressionNode *tempNode = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [((JavaUtilArrayList *) nil_chk(self->listElements_)) getWithInt:0]);
  [tempNode setOperationWithOrgGeogebraCommonPluginOperationEnum:operation];
  jboolean b = [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) isSuppressLabelsActive];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk([self->kernel_ getConstruction])) setSuppressLabelCreationWithBoolean:YES];
  for (jint i = 0; i < size; i++) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> singleValue = valueList == nil ? [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(value)) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_] : [valueList getListElementWithInt:i];
    if (right) {
      [tempNode setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:[self->listElements_ getWithInt:i]];
      [tempNode setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue:singleValue];
    }
    else {
      [tempNode setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:singleValue];
      [tempNode setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue:[self->listElements_ getWithInt:i]];
    }
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> operationResult = [tempNode evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl];
    if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(operationResult)) isExpressionNode]) {
      operationResult = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, operationResult);
    }
    (void) [self->listElements_ setWithInt:i withId:operationResult];
  }
  [((OrgGeogebraCommonKernelConstruction *) nil_chk([self->kernel_ getConstruction])) setSuppressLabelCreationWithBoolean:b];
}

void OrgGeogebraCommonKernelArithmeticMyList_setIdentityMatrix(OrgGeogebraCommonKernelArithmeticMyList *self) {
  [self isMatrix];
  [((JavaUtilArrayList *) nil_chk(self->listElements_)) clear];
  if (self->matrixRows_ == self->matrixCols_) for (jint row = 0; row < self->matrixRows_; row++) {
    OrgGeogebraCommonKernelArithmeticMyList *col1 = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(self->kernel_);
    for (jint col = 0; col < self->matrixCols_; col++) {
      OrgGeogebraCommonKernelArithmeticExpressionNode *md = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, row == col ? 1 : 0));
      [col1 addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:md];
    }
    OrgGeogebraCommonKernelArithmeticExpressionNode *col1a = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, col1);
    [self->listElements_ addWithId:col1a];
  }
}

jboolean OrgGeogebraCommonKernelArithmeticMyList_isEquationWithOrgGeogebraCommonKernelArithmeticExpressionValue_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ex) {
  OrgGeogebraCommonKernelArithmeticMyList_initialize();
  if ([ex isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]] || ([ex isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]] && [[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ex, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getLeft] isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]])) return YES;
  return NO;
}

jboolean OrgGeogebraCommonKernelArithmeticMyList_isMatrixWithOrgGeogebraCommonKernelArithmeticMyList_(OrgGeogebraCommonKernelArithmeticMyList *self, OrgGeogebraCommonKernelArithmeticMyList *LHlist) {
  if (self->matrixRows_ > 0 && self->matrixCols_ > 0) return YES;
  if (self->matrixRows_ == 0 && self->matrixCols_ == 0) return NO;
  @try {
    jboolean isMatrix = YES;
    jint LHrows = [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(LHlist)) size], LHcols = 0;
    if (OrgGeogebraCommonKernelArithmeticMyList_isEquationWithOrgGeogebraCommonKernelArithmeticExpressionValue_([LHlist getListElementWithInt:0])) return NO;
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> singleValue = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([LHlist getListElementWithInt:0])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if (singleValue == nil) {
      self->matrixRows_ = self->matrixCols_ = 0;
      return NO;
    }
    if ([OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:singleValue]) {
      LHcols = [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(singleValue, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList])) size];
      if (LHcols > 0 && OrgGeogebraCommonKernelArithmeticMyList_isEquationWithOrgGeogebraCommonKernelArithmeticExpressionValue_([((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(singleValue, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getListElementWithInt:0])) return NO;
      if (LHrows > 1) for (jint i = 1; i < LHrows; i++) {
        if (OrgGeogebraCommonKernelArithmeticMyList_isEquationWithOrgGeogebraCommonKernelArithmeticExpressionValue_([LHlist getListElementWithInt:i])) return NO;
        singleValue = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([LHlist getListElementWithInt:i])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
        if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(singleValue)) evaluatesToList]) {
          OrgGeogebraCommonKernelArithmeticMyList *list = [((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(singleValue, @protocol(OrgGeogebraCommonKernelArithmeticListValue))) getMyList];
          if ([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list)) size] != LHcols) isMatrix = NO;
          else if (([list size] > 0) && OrgGeogebraCommonKernelArithmeticMyList_isEquationWithOrgGeogebraCommonKernelArithmeticExpressionValue_([list getListElementWithInt:0])) isMatrix = NO;
        }
        else isMatrix = NO;
      }
    }
    else isMatrix = NO;
    if (isMatrix) {
      self->matrixCols_ = LHcols;
      self->matrixRows_ = LHrows;
    }
    else {
      self->matrixCols_ = 0;
      self->matrixRows_ = 0;
    }
    return isMatrix;
  }
  @catch (JavaLangThrowable *e) {
    self->matrixRows_ = self->matrixCols_ = 0;
    return NO;
  }
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(OrgGeogebraCommonKernelArithmeticMyList *list, jint row, jint col) {
  OrgGeogebraCommonKernelArithmeticMyList_initialize();
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> singleValue = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list)) getListElementWithInt:col])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  if ([OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:singleValue]) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ret = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticListValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticListValue>) check_protocol_cast(singleValue, @protocol(OrgGeogebraCommonKernelArithmeticListValue))))) getMyList])) getListElementWithInt:row]))) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    return ret;
  }
  return nil;
}

NSString *OrgGeogebraCommonKernelArithmeticMyList_toStringWithOrgGeogebraCommonKernelStringTemplate_withBoolean_(OrgGeogebraCommonKernelArithmeticMyList *self, OrgGeogebraCommonKernelStringTemplate *tpl, jboolean valueMode) {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    (void) [sb appendWithNSString:@"\\{"];
  }
  else (void) [sb appendWithNSString:@"{"];
  jint lastIndex = [((JavaUtilArrayList *) nil_chk(self->listElements_)) size] - 1;
  if (lastIndex > -1) {
    for (jint i = 0; i < lastIndex; i++) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> exp = [self->listElements_ getWithInt:i];
      (void) [sb appendWithNSString:valueMode ? [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      (void) [sb appendWithNSString:@", "];
    }
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> exp = [self->listElements_ getWithInt:lastIndex];
    (void) [sb appendWithNSString:valueMode ? [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  }
  if ([tpl hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    (void) [sb appendWithNSString:@"\\}"];
  }
  else (void) [sb appendWithNSString:@"}"];
  return [sb description];
}

jboolean OrgGeogebraCommonKernelArithmeticMyList_isElementOfWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticMyList_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> a, OrgGeogebraCommonKernelArithmeticMyList *myList) {
  OrgGeogebraCommonKernelArithmeticMyList_initialize();
  for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(myList)) size]; i++) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([myList getListElementWithInt:i])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if (ev == nil) {
      OrgGeogebraCommonMainApp_debugWithNSString_([[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([myList getListElementWithInt:i])) getClass] getName]);
      continue;
    }
    if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(a, ev)) return YES;
  }
  return NO;
}

jboolean OrgGeogebraCommonKernelArithmeticMyList_listContainsWithOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticMyList *list1, OrgGeogebraCommonKernelArithmeticMyList *list2, OrgGeogebraCommonKernelStringTemplate *tpl) {
  OrgGeogebraCommonKernelArithmeticMyList_initialize();
  if ([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list2)) size] == 0) {
    return YES;
  }
  for (jint i = 0; i < [list2 size]; i++) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev2 = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list2 getListElementWithInt:i])) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl];
    jboolean hasEqualMember = NO;
    for (jint j = 0; j < [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list1)) size]; j++) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev1 = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list1 getListElementWithInt:j])) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl];
      if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(ev1, ev2)) {
        hasEqualMember = YES;
        break;
      }
    }
    if (!hasEqualMember) return NO;
  }
  return YES;
}

jboolean OrgGeogebraCommonKernelArithmeticMyList_listContainsStrictWithOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticMyList *list1, OrgGeogebraCommonKernelArithmeticMyList *list2, OrgGeogebraCommonKernelStringTemplate *tpl) {
  OrgGeogebraCommonKernelArithmeticMyList_initialize();
  if ([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list2)) size] == 0) {
    return ([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list1)) size] != 0);
  }
  for (jint i = 0; i < [list2 size]; i++) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev2 = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list2 getListElementWithInt:i])) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl];
    jboolean hasEqualMember = NO;
    for (jint j = 0; j < [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list1)) size]; j++) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev1 = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list1 getListElementWithInt:j])) evaluateWithOrgGeogebraCommonKernelStringTemplate:tpl];
      if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(ev1, ev2)) {
        hasEqualMember = YES;
        break;
      }
    }
    if (!hasEqualMember) return NO;
  }
  for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list1)) size]; i++) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev1 = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list1 getListElementWithInt:i])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    jboolean hasEqualMember = NO;
    for (jint j = 0; j < [list2 size]; j++) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev2 = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list2 getListElementWithInt:j])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(ev1, ev2)) {
        hasEqualMember = YES;
        break;
      }
    }
    if (!hasEqualMember) return YES;
  }
  return NO;
}

OrgGeogebraCommonKernelArithmeticMyList *OrgGeogebraCommonKernelArithmeticMyList_setDifferenceWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticMyList_withOrgGeogebraCommonKernelArithmeticMyList_(OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelArithmeticMyList *list1, OrgGeogebraCommonKernelArithmeticMyList *list2) {
  OrgGeogebraCommonKernelArithmeticMyList_initialize();
  if ([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list2)) size] == 0) return list1;
  OrgGeogebraCommonKernelArithmeticMyList *ret = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(kernel);
  if ([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list1)) size] == 0) return ret;
  for (jint i = 0; i < [list1 size]; i++) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev0 = [list1 getListElementWithInt:i];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev1 = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev0)) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    jboolean addToList = YES;
    for (jint j = 0; j < [list2 size]; j++) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev2 = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list2 getListElementWithInt:j])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      if (OrgGeogebraCommonKernelArithmeticExpressionNode_isEqualWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(ev1, ev2)) {
        addToList = NO;
        break;
      }
    }
    if (addToList) [ret addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:ev0];
  }
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticMyList)
