//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/arithmetic/Inequality.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoRootsPolynomial.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/arithmetic/Inequality.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/Polynomial.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonKernelArithmeticInequality () {
 @public
  OrgGeogebraCommonPluginOperationEnum *op_;
  OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum *type_;
  OrgGeogebraCommonKernelGeosGeoConic *conicBorder_;
  OrgGeogebraCommonKernelGeosGeoLine *lineBorder_;
  OrgGeogebraCommonKernelGeosGeoFunction *funBorder_;
  OrgGeogebraCommonKernelGeosGeoElement *border_;
  OrgGeogebraCommonKernelKernel *kernel_;
  jboolean isAboveBorder__;
  OrgGeogebraCommonKernelArithmeticExpressionNode *normal_;
  IOSObjectArray *fv_;
  OrgGeogebraCommonKernelArithmeticMyDouble *coef_;
  IOSObjectArray *zeros_;
  OrgGeogebraCommonKernelArithmeticMyDouble *zeroDummy0_, *zeroDummy1_;
}

- (void)update;

- (void)setAboveBorderFromConic;

- (void)init1varFunctionWithInt:(jint)varIndex OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)RootMultipleWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticInequality, op_, OrgGeogebraCommonPluginOperationEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticInequality, type_, OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticInequality, conicBorder_, OrgGeogebraCommonKernelGeosGeoConic *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticInequality, lineBorder_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticInequality, funBorder_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticInequality, border_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticInequality, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticInequality, normal_, OrgGeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticInequality, fv_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticInequality, coef_, OrgGeogebraCommonKernelArithmeticMyDouble *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticInequality, zeros_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticInequality, zeroDummy0_, OrgGeogebraCommonKernelArithmeticMyDouble *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticInequality, zeroDummy1_, OrgGeogebraCommonKernelArithmeticMyDouble *)

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticInequality_update(OrgGeogebraCommonKernelArithmeticInequality *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticInequality_setAboveBorderFromConic(OrgGeogebraCommonKernelArithmeticInequality *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticInequality_init1varFunctionWithInt_(OrgGeogebraCommonKernelArithmeticInequality *self, jint varIndex);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelArithmeticInequality_RootMultipleWithOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction *f);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum *new_OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation OrgGeogebraCommonKernelArithmeticInequality

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)lhs
 withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)rhs
             withOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op
withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv
  withOrgGeogebraCommonKernelArithmeticFunctionalNVar:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)function {
  OrgGeogebraCommonKernelArithmeticInequality_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(self, kernel, lhs, rhs, op, fv, function);
  return self;
}

- (void)update {
  OrgGeogebraCommonKernelArithmeticInequality_update(self);
}

- (void)setAboveBorderFromConic {
  OrgGeogebraCommonKernelArithmeticInequality_setAboveBorderFromConic(self);
}

- (void)init1varFunctionWithInt:(jint)varIndex {
  OrgGeogebraCommonKernelArithmeticInequality_init1varFunctionWithInt_(self, varIndex);
}

+ (IOSObjectArray *)RootMultipleWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f {
  return OrgGeogebraCommonKernelArithmeticInequality_RootMultipleWithOrgGeogebraCommonKernelGeosGeoFunction_(f);
}

- (void)updateCoef {
  JavaLangDouble *coefVal = nil, *otherVal = nil;
  if (type_ == OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_Y()) {
    coefVal = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(normal_)) getCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(nil_chk(fv_), 1)];
    otherVal = [normal_ getCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(fv_, 0)];
  }
  else if (type_ == OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_X()) {
    coefVal = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(normal_)) getCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(nil_chk(fv_), 0)];
    otherVal = [normal_ getCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(fv_, 1)];
  }
  if (coefVal == nil || [coefVal doubleValue] == 0 || (otherVal != nil && JavaLangMath_absWithDouble_([otherVal doubleValue]) > JavaLangMath_absWithDouble_([coefVal doubleValue]))) OrgGeogebraCommonKernelArithmeticInequality_update(self);
  else {
    isAboveBorder__ = ([coefVal doubleValue] > 0);
    [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(coef_)) setWithDouble:-[coefVal doubleValue]];
  }
}

- (NSString *)description {
  return @"inequality";
}

- (jboolean)isStrict {
  return ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(op_)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER()] || [op_ isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS()]);
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getFunBorder {
  return funBorder_;
}

- (jboolean)isAboveBorder {
  return isAboveBorder__;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getBorder {
  return border_;
}

- (OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum *)getType {
  return type_;
}

- (OrgGeogebraCommonKernelGeosGeoConic *)getConicBorder {
  return conicBorder_;
}

- (OrgGeogebraCommonKernelGeosGeoLine *)getLineBorder {
  return lineBorder_;
}

- (IOSObjectArray *)getZeros {
  return zeros_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:withOrgGeogebraCommonKernelArithmeticFunctionalNVar:", "Inequality", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x2, NULL, NULL },
    { "setAboveBorderFromConic", NULL, "V", 0x2, NULL, NULL },
    { "init1varFunctionWithInt:", "init1varFunction", "V", 0x2, NULL, NULL },
    { "RootMultipleWithOrgGeogebraCommonKernelGeosGeoFunction:", "RootMultiple", "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1a, NULL, NULL },
    { "updateCoef", NULL, "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isStrict", NULL, "Z", 0x1, NULL, NULL },
    { "getFunBorder", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "isAboveBorder", NULL, "Z", 0x1, NULL, NULL },
    { "getBorder", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getType", NULL, "Lorg.geogebra.common.kernel.arithmetic.Inequality$IneqType;", 0x1, NULL, NULL },
    { "getConicBorder", NULL, "Lorg.geogebra.common.kernel.geos.GeoConic;", 0x1, NULL, NULL },
    { "getLineBorder", NULL, "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getZeros", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "op_", NULL, 0x2, "Lorg.geogebra.common.plugin.Operation;", NULL, NULL,  },
    { "type_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Inequality$IneqType;", NULL, NULL,  },
    { "conicBorder_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
    { "lineBorder_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "funBorder_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "border_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "isAboveBorder__", "isAboveBorder", 0x2, "Z", NULL, NULL,  },
    { "normal_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "fv_", NULL, 0x2, "[Lorg.geogebra.common.kernel.arithmetic.FunctionVariable;", NULL, NULL,  },
    { "coef_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
    { "zeros_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "zeroDummy0_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
    { "zeroDummy1_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.arithmetic.Inequality$IneqType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticInequality = { 2, "Inequality", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 15, methods, 14, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticInequality;
}

@end

void OrgGeogebraCommonKernelArithmeticInequality_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(OrgGeogebraCommonKernelArithmeticInequality *self, OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> lhs, id<OrgGeogebraCommonKernelArithmeticExpressionValue> rhs, OrgGeogebraCommonPluginOperationEnum *op, IOSObjectArray *fv, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> function) {
  (void) NSObject_init(self);
  self->op_ = OrgGeogebraCommonPluginOperationEnum_get_LESS();
  self->op_ = op;
  self->kernel_ = kernel;
  self->fv_ = fv;
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(op)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER()] || [op isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER_EQUAL()]) {
    self->normal_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, lhs, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), rhs);
  }
  else {
    self->normal_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, rhs, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), lhs);
  }
  OrgGeogebraCommonKernelArithmeticInequality_update(self);
}

OrgGeogebraCommonKernelArithmeticInequality *new_OrgGeogebraCommonKernelArithmeticInequality_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(OrgGeogebraCommonKernelKernel *kernel, id<OrgGeogebraCommonKernelArithmeticExpressionValue> lhs, id<OrgGeogebraCommonKernelArithmeticExpressionValue> rhs, OrgGeogebraCommonPluginOperationEnum *op, IOSObjectArray *fv, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> function) {
  OrgGeogebraCommonKernelArithmeticInequality *self = [OrgGeogebraCommonKernelArithmeticInequality alloc];
  OrgGeogebraCommonKernelArithmeticInequality_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(self, kernel, lhs, rhs, op, fv, function);
  return self;
}

void OrgGeogebraCommonKernelArithmeticInequality_update(OrgGeogebraCommonKernelArithmeticInequality *self) {
  if (((IOSObjectArray *) nil_chk(self->fv_))->size_ == 1) {
    OrgGeogebraCommonKernelArithmeticInequality_init1varFunctionWithInt_(self, 0);
    if (![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->funBorder_)) isPolynomialFunctionWithBoolean:NO]) {
      self->type_ = OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_INVALID();
    }
    else if ([((NSString *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(self->fv_, 0))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@"y"]) {
      self->type_ = OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_1VAR_Y();
    }
    else self->type_ = OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_1VAR_X();
    return;
  }
  if (self->zeroDummy0_ != nil) (void) [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->normal_)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:self->zeroDummy0_ withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fv_, 0)])) wrap];
  if (self->zeroDummy1_ != nil) (void) [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->normal_)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:self->zeroDummy1_ withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fv_, 1)])) wrap];
  JavaLangDouble *coefY = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->normal_)) getCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(self->fv_, 1)];
  JavaLangDouble *coefX = [self->normal_ getCoefficientWithOrgGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(self->fv_, 0)];
  OrgGeogebraCommonKernelArithmeticFunction *fun = nil;
  if (coefY != nil && !OrgGeogebraCommonKernelKernel_isZeroWithDouble_([coefY doubleValue]) && !JavaLangDouble_isNaNWithDouble_([coefY doubleValue]) && coefX == nil) {
    self->coef_ = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, -[coefY doubleValue]);
    self->isAboveBorder__ = ([coefY doubleValue] > 0);
    OrgGeogebraCommonKernelArithmeticExpressionNode *m = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->normal_, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), self->coef_), OrgGeogebraCommonPluginOperationEnum_get_PLUS(), IOSObjectArray_Get(self->fv_, 1));
    [m simplifyLeafs];
    fun = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(m, IOSObjectArray_Get(self->fv_, 0));
    self->type_ = OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_Y();
  }
  else if (coefX != nil && !OrgGeogebraCommonKernelKernel_isZeroWithDouble_([coefX doubleValue]) && !JavaLangDouble_isNaNWithDouble_([coefX doubleValue]) && coefY == nil) {
    self->coef_ = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, -[coefX doubleValue]);
    self->isAboveBorder__ = ([coefX doubleValue] > 0);
    OrgGeogebraCommonKernelArithmeticExpressionNode *m = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->normal_, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), self->coef_), OrgGeogebraCommonPluginOperationEnum_get_PLUS(), IOSObjectArray_Get(self->fv_, 0));
    [m simplifyLeafs];
    fun = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(m, IOSObjectArray_Get(self->fv_, 1));
    self->type_ = OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_X();
  }
  else if (coefX != nil && OrgGeogebraCommonKernelKernel_isZeroWithDouble_([coefX doubleValue]) && coefY == nil) {
    self->zeroDummy0_ = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0);
    (void) [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self->normal_ replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fv_, 0) withOrgGeogebraCommonKernelArithmeticExpressionValue:self->zeroDummy0_])) wrap];
    OrgGeogebraCommonKernelArithmeticInequality_init1varFunctionWithInt_(self, 1);
    self->type_ = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->funBorder_)) isPolynomialFunctionWithBoolean:NO] ? OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_1VAR_Y() : OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_INVALID();
  }
  else if (coefY != nil && OrgGeogebraCommonKernelKernel_isZeroWithDouble_([coefY doubleValue]) && coefX == nil) {
    self->zeroDummy1_ = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0);
    (void) [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self->normal_ replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fv_, 1) withOrgGeogebraCommonKernelArithmeticExpressionValue:self->zeroDummy1_])) wrap];
    OrgGeogebraCommonKernelArithmeticInequality_init1varFunctionWithInt_(self, 0);
    self->type_ = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->funBorder_)) isPolynomialFunctionWithBoolean:NO] ? OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_1VAR_X() : OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_INVALID();
  }
  else {
    OrgGeogebraCommonKernelArithmeticFunctionVariable *xVar = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"x");
    OrgGeogebraCommonKernelArithmeticFunctionVariable *yVar = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"y");
    OrgGeogebraCommonKernelArithmeticExpressionNode *replaced = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([self->normal_ deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_], [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fv_, 0) withOrgGeogebraCommonKernelArithmeticExpressionValue:xVar])) wrap])) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fv_, 1) withOrgGeogebraCommonKernelArithmeticExpressionValue:yVar])) wrap];
    OrgGeogebraCommonKernelArithmeticEquation *equ = new_OrgGeogebraCommonKernelArithmeticEquation_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, replaced, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0));
    [equ initEquation];
    if (![equ isPolynomial]) {
      self->type_ = OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_INVALID();
      return;
    }
    OrgGeogebraCommonKernelArithmeticPolynomial *newBorder = [equ getNormalForm];
    if ([((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(newBorder)) degree] < 2) {
      if (self->lineBorder_ == nil) self->lineBorder_ = new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]);
      IOSObjectArray *evs = [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk([equ getNormalForm])) getCoeff];
      [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->lineBorder_)) setCoordsWithDouble:OrgGeogebraCommonKernelGeosGeoConic_evalCoeffWithOrgGeogebraCommonKernelArithmeticExpressionValueArray2_withInt_withInt_(evs, 1, 0) withDouble:OrgGeogebraCommonKernelGeosGeoConic_evalCoeffWithOrgGeogebraCommonKernelArithmeticExpressionValueArray2_withInt_withInt_(evs, 0, 1) withDouble:OrgGeogebraCommonKernelGeosGeoConic_evalCoeffWithOrgGeogebraCommonKernelArithmeticExpressionValueArray2_withInt_withInt_(evs, 0, 0)];
      self->type_ = OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_LINEAR();
      self->border_ = self->lineBorder_;
      self->isAboveBorder__ = ([((JavaLangDouble *) nil_chk(coefY)) doubleValue] < 0 || ([coefY doubleValue] == 0.0 && [((JavaLangDouble *) nil_chk(coefX)) doubleValue] > 0));
    }
    else if ([newBorder degree] == 2) {
      if (self->conicBorder_ == nil) self->conicBorder_ = new_OrgGeogebraCommonKernelGeosGeoConic_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]);
      [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->conicBorder_)) setCoeffsWithOrgGeogebraCommonKernelArithmeticExpressionValueArray2:[((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk([equ getNormalForm])) getCoeff]];
      self->type_ = OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_CONIC();
      self->border_ = self->conicBorder_;
      OrgGeogebraCommonKernelArithmeticInequality_setAboveBorderFromConic(self);
    }
    else {
      self->type_ = OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_INVALID();
      return;
    }
  }
  OrgGeogebraCommonUtilDebugLog_traceWithNSString_(JreStrcat("@C@C@", self->type_, ':', coefX, ',', coefY));
  if (self->type_ == OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_X() || self->type_ == OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_Y()) {
    self->funBorder_ = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]);
    [self->funBorder_ setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:fun];
    if (self->type_ == OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_X()) {
      [self->funBorder_ swapEval];
    }
  }
  if (self->funBorder_ != nil) self->border_ = self->funBorder_;
  if ([self isStrict]) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->border_)) setLineTypeWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->border_)) setLineTypeWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL];
  }
}

void OrgGeogebraCommonKernelArithmeticInequality_setAboveBorderFromConic(OrgGeogebraCommonKernelArithmeticInequality *self) {
  if ([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(self->conicBorder_)) getType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY || [self->conicBorder_ getType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT) {
    self->isAboveBorder__ = ([self->conicBorder_ evaluateInSignificantPoint] >= 0);
    return;
  }
  self->isAboveBorder__ = ([self->conicBorder_ evaluateInSignificantPoint] < 0);
}

void OrgGeogebraCommonKernelArithmeticInequality_init1varFunctionWithInt_(OrgGeogebraCommonKernelArithmeticInequality *self, jint varIndex) {
  OrgGeogebraCommonKernelConstruction *cons = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction];
  jboolean supress = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive];
  [cons setSuppressLabelCreationWithBoolean:YES];
  self->funBorder_ = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self->funBorder_ setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(self->normal_, IOSObjectArray_Get(nil_chk(self->fv_), varIndex))];
  self->zeros_ = OrgGeogebraCommonKernelArithmeticInequality_RootMultipleWithOrgGeogebraCommonKernelGeosGeoFunction_(self->funBorder_);
  [cons setSuppressLabelCreationWithBoolean:supress];
  self->border_ = self->funBorder_;
  if ([self isStrict]) {
    [self->border_ setLineTypeWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT];
  }
  else [self->border_ setLineTypeWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL];
}

IOSObjectArray *OrgGeogebraCommonKernelArithmeticInequality_RootMultipleWithOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction *f) {
  OrgGeogebraCommonKernelArithmeticInequality_initialize();
  if (![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) isPolynomialFunctionWithBoolean:YES]) return nil;
  OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial *algo = new_OrgGeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithOrgGeogebraCommonKernelGeosGeoFunction_(f);
  IOSObjectArray *g = [algo getRootPoints];
  return g;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticInequality)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum)

OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum *OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_values_[8];

@implementation OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_values() {
  OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_values_ count:8 type:OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_values();
}

+ (OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum *OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initialize();
  for (int i = 0; i < 8; i++) {
    OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum *e = OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum class]) {
    OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_INVALID = new_OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_INVALID", 0);
    OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_PARAMETRIC_X = new_OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_PARAMETRIC_X", 1);
    OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_PARAMETRIC_Y = new_OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_PARAMETRIC_Y", 2);
    OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_LINEAR = new_OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_LINEAR", 3);
    OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_CONIC = new_OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_CONIC", 4);
    OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_IMPLICIT = new_OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_IMPLICIT", 5);
    OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_1VAR_X = new_OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_1VAR_X", 6);
    OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_1VAR_Y = new_OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_1VAR_Y", 7);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "INEQUALITY_INVALID", "INEQUALITY_INVALID", 0x4019, "Lorg.geogebra.common.kernel.arithmetic.Inequality$IneqType;", &OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_INVALID, NULL,  },
    { "INEQUALITY_PARAMETRIC_X", "INEQUALITY_PARAMETRIC_X", 0x4019, "Lorg.geogebra.common.kernel.arithmetic.Inequality$IneqType;", &OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_PARAMETRIC_X, NULL,  },
    { "INEQUALITY_PARAMETRIC_Y", "INEQUALITY_PARAMETRIC_Y", 0x4019, "Lorg.geogebra.common.kernel.arithmetic.Inequality$IneqType;", &OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_PARAMETRIC_Y, NULL,  },
    { "INEQUALITY_LINEAR", "INEQUALITY_LINEAR", 0x4019, "Lorg.geogebra.common.kernel.arithmetic.Inequality$IneqType;", &OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_LINEAR, NULL,  },
    { "INEQUALITY_CONIC", "INEQUALITY_CONIC", 0x4019, "Lorg.geogebra.common.kernel.arithmetic.Inequality$IneqType;", &OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_CONIC, NULL,  },
    { "INEQUALITY_IMPLICIT", "INEQUALITY_IMPLICIT", 0x4019, "Lorg.geogebra.common.kernel.arithmetic.Inequality$IneqType;", &OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_IMPLICIT, NULL,  },
    { "INEQUALITY_1VAR_X", "INEQUALITY_1VAR_X", 0x4019, "Lorg.geogebra.common.kernel.arithmetic.Inequality$IneqType;", &OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_1VAR_X, NULL,  },
    { "INEQUALITY_1VAR_Y", "INEQUALITY_1VAR_Y", 0x4019, "Lorg.geogebra.common.kernel.arithmetic.Inequality$IneqType;", &OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_1VAR_Y, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.arithmetic.Inequality$IneqType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum = { 2, "IneqType", "org.geogebra.common.kernel.arithmetic", "Inequality", 0x4019, 0, NULL, 8, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/kernel/arithmetic/Inequality$IneqType;>;" };
  return &_OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum;
}

@end

void OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum *self, NSString *__name, jint __ordinal) {
  (void) JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum *new_OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum *self = [OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum alloc];
  OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum)
