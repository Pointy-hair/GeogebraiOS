//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/arithmetic/Function.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/BooleanValue.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/MyNumberPair.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "org/geogebra/common/kernel/arithmetic/Polynomial.h"
#include "org/geogebra/common/kernel/arithmetic/SymbolicPolyFunction.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/parser/Parser.h"
#include "org/geogebra/common/kernel/roots/RealRootDerivFunction.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/Operation.h"

#define OrgGeogebraCommonKernelArithmeticFunction_MAX_EXPAND_DEGREE 10.0

@interface OrgGeogebraCommonKernelArithmeticFunction () {
 @public
  OrgGeogebraCommonKernelArithmeticFunction *derivative__;
  OrgGeogebraCommonKernelArithmeticExpressionNode *factorParentExp_;
  JavaUtilLinkedList *symbolicPolyFactorList_;
  JavaUtilLinkedList *numericPolyFactorList_;
  jboolean symbolicPolyFactorListDefined_;
  OrgGeogebraCommonKernelArithmeticExpressionNode *zeroExpr_;
  OrgGeogebraCommonKernelGeosGeoFunction *geoDeriv_;
}

- (void)translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en
                                                           withDouble:(jdouble)vx;

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)shiftXnodeWithDouble:(jdouble)xShift;

- (void)addNumberWithDouble:(jdouble)n;

- (JavaUtilLinkedList *)getNumericPolynomialFactorsWithBoolean:(jboolean)rootFindingSimplification;

- (jboolean)addPolynomialFactorsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                    withJavaUtilList:(id<JavaUtilList>)l
                                                                         withBoolean:(jboolean)symbolic
                                                                         withBoolean:(jboolean)rootFindingSimplification
                                                                         withBoolean:(jboolean)assumeFalseIfCASNeeded;

- (OrgGeogebraCommonKernelArithmeticPolyFunction *)expandToPolyFunctionNoCasWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                                                                     withBoolean:(jboolean)symbolic;

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)evaluateToExpressionNodeWithNSString:(NSString *)str;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticFunction, derivative__, OrgGeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticFunction, factorParentExp_, OrgGeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticFunction, symbolicPolyFactorList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticFunction, numericPolyFactorList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticFunction, zeroExpr_, OrgGeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticFunction, geoDeriv_, OrgGeogebraCommonKernelGeosGeoFunction *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticFunction, MAX_EXPAND_DEGREE, jdouble)

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticFunction_evaluateBooleanWithDouble_(OrgGeogebraCommonKernelArithmeticFunction *self, jdouble x);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticFunction_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_(OrgGeogebraCommonKernelArithmeticFunction *self, OrgGeogebraCommonKernelArithmeticExpressionNode *en, jdouble vx);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticFunction_shiftXnodeWithDouble_(OrgGeogebraCommonKernelArithmeticFunction *self, jdouble xShift);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticFunction_translateYWithDouble_(OrgGeogebraCommonKernelArithmeticFunction *self, jdouble vy);

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticFunction_addNumberWithDouble_(OrgGeogebraCommonKernelArithmeticFunction *self, jdouble n);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticPolyFunction *OrgGeogebraCommonKernelArithmeticFunction_getNumericPolynomialDerivativeWithInt_withBoolean_(OrgGeogebraCommonKernelArithmeticFunction *self, jint n, jboolean skipCASfallback);

__attribute__((unused)) static JavaUtilLinkedList *OrgGeogebraCommonKernelArithmeticFunction_getNumericPolynomialFactorsWithBoolean_(OrgGeogebraCommonKernelArithmeticFunction *self, jboolean rootFindingSimplification);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(OrgGeogebraCommonKernelArithmeticFunction *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, id<JavaUtilList> l, jboolean symbolic, jboolean rootFindingSimplification, jboolean assumeFalseIfCASNeeded);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticPolyFunction *OrgGeogebraCommonKernelArithmeticFunction_expandToPolyFunctionNoCasWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(OrgGeogebraCommonKernelArithmeticFunction *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, jboolean symbolic);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticFunction_evaluateToExpressionNodeWithNSString_(OrgGeogebraCommonKernelArithmeticFunction *self, NSString *str);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticFunction *OrgGeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_(OrgGeogebraCommonKernelArithmeticFunction *self, jint n, jboolean fast);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticFunction *OrgGeogebraCommonKernelArithmeticFunction_getDerivativeNoFractionsWithInt_withBoolean_(OrgGeogebraCommonKernelArithmeticFunction *self, jint n, jboolean fast);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticFunction *OrgGeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_withBoolean_(OrgGeogebraCommonKernelArithmeticFunction *self, jint n, jboolean keepFractions, jboolean fast);

@interface OrgGeogebraCommonKernelArithmeticFunction_DerivFunction : NSObject < OrgGeogebraCommonKernelRootsRealRootDerivFunction > {
 @public
  OrgGeogebraCommonKernelArithmeticFunction *fun_, *derivative_;
  IOSDoubleArray *ret_;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)outer$
                    withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)fun
                    withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)derivative;

- (IOSDoubleArray *)evaluateDerivFuncWithDouble:(jdouble)x;

- (jdouble)evaluateWithDouble:(jdouble)x;

- (jdouble)evaluateDerivativeWithDouble:(jdouble)x;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelArithmeticFunction_DerivFunction)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticFunction_DerivFunction, fun_, OrgGeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticFunction_DerivFunction, derivative_, OrgGeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticFunction_DerivFunction, ret_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticFunction_DerivFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelArithmeticFunction_DerivFunction *self, OrgGeogebraCommonKernelArithmeticFunction *outer$, OrgGeogebraCommonKernelArithmeticFunction *fun, OrgGeogebraCommonKernelArithmeticFunction *derivative);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticFunction_DerivFunction *new_OrgGeogebraCommonKernelArithmeticFunction_DerivFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelArithmeticFunction *outer$, OrgGeogebraCommonKernelArithmeticFunction *fun, OrgGeogebraCommonKernelArithmeticFunction *derivative) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelArithmeticFunction_DerivFunction)

@interface OrgGeogebraCommonKernelArithmeticFunction_$1 : NSObject < OrgGeogebraCommonKernelArithmeticInspecting >

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelArithmeticFunction_$1)

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticFunction_$1_init(OrgGeogebraCommonKernelArithmeticFunction_$1 *self);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticFunction_$1 *new_OrgGeogebraCommonKernelArithmeticFunction_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelArithmeticFunction_$1)

@implementation OrgGeogebraCommonKernelArithmeticFunction

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)expression {
  OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, expression);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)exp
                  withOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fVar {
  OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(self, exp, fVar);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)f
                                withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelKernel_(self, f, kernel);
  return self;
}

- (OrgGeogebraCommonKernelArithmeticFunction *)deepCopyWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel1 {
  return new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelKernel_(self, kernel1);
}

- (void)setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)exp
                   withOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)var {
  [super setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:exp withOrgGeogebraCommonKernelArithmeticFunctionVariableArray:[IOSObjectArray newArrayWithObjects:(id[]){ var } count:1 type:OrgGeogebraCommonKernelArithmeticFunctionVariable_class_()]];
  derivative__ = nil;
}

- (OrgGeogebraCommonKernelArithmeticFunction *)getFunction {
  return self;
}

- (OrgGeogebraCommonKernelArithmeticFunctionVariable *)getFunctionVariable {
  return IOSObjectArray_Get(nil_chk(fVars_), 0);
}

- (NSString *)getVarStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (fVars_ == nil) {
    return [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:@"x"];
  }
  return [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(fVars_), 0))) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (jboolean)initFunction {
  if (fVars_ == nil) {
    fVars_ = [IOSObjectArray newArrayWithObjects:(id[]){ new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(kernel_) } count:1 type:OrgGeogebraCommonKernelArithmeticFunctionVariable_class_()];
  }
  return [super initFunction];
}

- (void)initFunctionVars {
  if (fVars_ == nil) {
    fVars_ = [IOSObjectArray newArrayWithObjects:(id[]){ new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(kernel_) } count:1 type:OrgGeogebraCommonKernelArithmeticFunctionVariable_class_()];
  }
}

- (jdouble)evaluateWithDouble:(jdouble)x {
  if (isBooleanFunction__) {
    return OrgGeogebraCommonKernelArithmeticFunction_evaluateBooleanWithDouble_(self, x) ? 1 : 0;
  }
  [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(fVars_), 0))) setWithDouble:x];
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) evaluateDouble];
}

- (jboolean)evaluateBooleanWithDouble:(jdouble)x {
  return OrgGeogebraCommonKernelArithmeticFunction_evaluateBooleanWithDouble_(self, x);
}

- (void)translateWithDouble:(jdouble)vx
                 withDouble:(jdouble)vy {
  jboolean isLeaf = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) isLeaf];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [expression_ getLeft];
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(vx)) {
    if (isLeaf && left == IOSObjectArray_Get(nil_chk(fVars_), 0)) {
      expression_ = OrgGeogebraCommonKernelArithmeticFunction_shiftXnodeWithDouble_(self, vx);
    }
    else {
      OrgGeogebraCommonKernelArithmeticFunction_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, expression_, vx);
    }
  }
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(vy)) {
    if (isLeaf && left != IOSObjectArray_Get(nil_chk(fVars_), 0)) {
      OrgGeogebraCommonKernelArithmeticMyDouble *c = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) getLeft], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getNumber];
      [c setWithDouble:OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_([((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(c)) getDouble] + vy)];
      [expression_ setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:c];
    }
    else {
      OrgGeogebraCommonKernelArithmeticFunction_translateYWithDouble_(self, vy);
    }
  }
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) isLeaf] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expression_ getLeft])) isExpressionNode]) {
    expression_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([expression_ getLeft], [OrgGeogebraCommonKernelArithmeticExpressionNode class]));
  }
  else {
    expression_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(expression_);
  }
}

- (void)translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en
                                                           withDouble:(jdouble)vx {
  OrgGeogebraCommonKernelArithmeticFunction_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, en, vx);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)shiftXnodeWithDouble:(jdouble)xShift {
  return OrgGeogebraCommonKernelArithmeticFunction_shiftXnodeWithDouble_(self, xShift);
}

- (void)translateYWithDouble:(jdouble)vy {
  OrgGeogebraCommonKernelArithmeticFunction_translateYWithDouble_(self, vy);
}

- (void)addNumberWithDouble:(jdouble)n {
  OrgGeogebraCommonKernelArithmeticFunction_addNumberWithDouble_(self, n);
}

- (JavaUtilLinkedList *)getPolynomialFactorsWithBoolean:(jboolean)rootFindingSimplification {
  JavaUtilLinkedList *result = [self getSymbolicPolynomialFactorsWithBoolean:rootFindingSimplification withBoolean:NO];
  if (result == nil) {
    result = OrgGeogebraCommonKernelArithmeticFunction_getNumericPolynomialFactorsWithBoolean_(self, rootFindingSimplification);
  }
  return result;
}

- (JavaUtilLinkedList *)getSymbolicPolynomialDerivativeFactorsWithInt:(jint)n
                                                          withBoolean:(jboolean)rootFindingSimplification {
  OrgGeogebraCommonKernelArithmeticFunction *deriv = OrgGeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_(self, n, NO);
  if (deriv == nil) return nil;
  return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(deriv)) getSymbolicPolynomialFactorsWithBoolean:rootFindingSimplification withBoolean:NO];
}

- (OrgGeogebraCommonKernelArithmeticPolyFunction *)getNumericPolynomialDerivativeWithInt:(jint)n
                                                                             withBoolean:(jboolean)skipCASfallback {
  return OrgGeogebraCommonKernelArithmeticFunction_getNumericPolynomialDerivativeWithInt_withBoolean_(self, n, skipCASfallback);
}

- (OrgGeogebraCommonKernelArithmeticPolyFunction *)getNumericPolynomialIntegral {
  OrgGeogebraCommonKernelArithmeticPolyFunction *poly = [self expandToPolyFunctionWithOrgGeogebraCommonKernelArithmeticExpressionValue:expression_ withBoolean:NO withBoolean:YES];
  if (poly != nil) {
    poly = [poly getIntegral];
  }
  return poly;
}

- (JavaUtilLinkedList *)getSymbolicPolynomialFactorsWithBoolean:(jboolean)rootFindingSimplification
                                                    withBoolean:(jboolean)assumeFalseIfCASNeeded {
  if (factorParentExp_ != expression_) {
    factorParentExp_ = expression_;
    if (symbolicPolyFactorList_ == nil) symbolicPolyFactorList_ = new_JavaUtilLinkedList_init();
    else [symbolicPolyFactorList_ clear];
    symbolicPolyFactorListDefined_ = OrgGeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, expression_, symbolicPolyFactorList_, YES, rootFindingSimplification, assumeFalseIfCASNeeded);
  }
  if (symbolicPolyFactorListDefined_ && [((JavaUtilLinkedList *) nil_chk(symbolicPolyFactorList_)) size] > 0) {
    return symbolicPolyFactorList_;
  }
  return nil;
}

- (JavaUtilLinkedList *)getNumericPolynomialFactorsWithBoolean:(jboolean)rootFindingSimplification {
  return OrgGeogebraCommonKernelArithmeticFunction_getNumericPolynomialFactorsWithBoolean_(self, rootFindingSimplification);
}

- (jboolean)addPolynomialFactorsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                    withJavaUtilList:(id<JavaUtilList>)l
                                                                         withBoolean:(jboolean)symbolic
                                                                         withBoolean:(jboolean)rootFindingSimplification
                                                                         withBoolean:(jboolean)assumeFalseIfCASNeeded {
  return OrgGeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, ev, l, symbolic, rootFindingSimplification, assumeFalseIfCASNeeded);
}

- (OrgGeogebraCommonKernelArithmeticPolyFunction *)expandToPolyFunctionWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                                                                withBoolean:(jboolean)symbolic
                                                                                                                withBoolean:(jboolean)assumeFalseIfCASNeeded {
  OrgGeogebraCommonKernelArithmeticPolyFunction *polyFunNoCas = OrgGeogebraCommonKernelArithmeticFunction_expandToPolyFunctionNoCasWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(self, ev, symbolic);
  [self initFunction];
  if (polyFunNoCas != nil || assumeFalseIfCASNeeded) return polyFunNoCas;
  OrgGeogebraCommonKernelArithmeticExpressionNode *node;
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) {
    node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
  }
  else {
    node = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ev);
  }
  NSString *function, *var;
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_giacTemplate_();
  @try {
    function = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(node)) getCASstringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:symbolic];
    var = [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(fVars_), 0))) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  @catch (JavaLangNullPointerException *e) {
    return nil;
  }
  @finally {
  }
  IOSObjectArray *strCoeffs = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getPolynomialCoeffsWithNSString:function withNSString:var];
  if (strCoeffs == nil) return nil;
  jint degree = ((IOSObjectArray *) nil_chk(strCoeffs))->size_ - 1;
  if (symbolic) {
    OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction *symbPolyFun = new_OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction_initWithInt_(degree);
    IOSObjectArray *symbCoeffs = [symbPolyFun getSymbolicCoeffs];
    for (jint i = 0; i < strCoeffs->size_; i++) {
      (void) IOSObjectArray_Set(nil_chk(symbCoeffs), degree - i, OrgGeogebraCommonKernelArithmeticFunction_evaluateToExpressionNodeWithNSString_(self, IOSObjectArray_Get(strCoeffs, i)));
      if (IOSObjectArray_Get(symbCoeffs, degree - i) == nil) return nil;
      [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(symbCoeffs, degree - i))) simplifyConstantIntegers];
    }
    return symbPolyFun;
  }
  @try {
    OrgGeogebraCommonKernelArithmeticPolyFunction *polyFun = new_OrgGeogebraCommonKernelArithmeticPolyFunction_initWithInt_(degree);
    for (jint i = 0; i < strCoeffs->size_; i++) {
      *IOSDoubleArray_GetRef(nil_chk(polyFun->coeffs_), degree - i) = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelArithmeticFunction_evaluateToExpressionNodeWithNSString_(self, IOSObjectArray_Get(strCoeffs, i)))) evaluateDouble];
    }
    return polyFun;
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"error in buildPolyFunction:");
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

- (OrgGeogebraCommonKernelArithmeticPolyFunction *)expandToPolyFunctionNoCasWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                                                                     withBoolean:(jboolean)symbolic {
  return OrgGeogebraCommonKernelArithmeticFunction_expandToPolyFunctionNoCasWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(self, ev, symbolic);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)evaluateToExpressionNodeWithNSString:(NSString *)str {
  return OrgGeogebraCommonKernelArithmeticFunction_evaluateToExpressionNodeWithNSString_(self, str);
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getGeoDerivativeWithInt:(jint)n {
  if (geoDeriv_ == nil) geoDeriv_ = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]);
  OrgGeogebraCommonKernelArithmeticFunction *deriv = OrgGeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_(self, n, NO);
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(geoDeriv_)) setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:deriv];
  [geoDeriv_ setDefinedWithBoolean:deriv != nil];
  return geoDeriv_;
}

- (OrgGeogebraCommonKernelArithmeticFunction *)getDerivativeWithInt:(jint)n
                                                        withBoolean:(jboolean)fast {
  return OrgGeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_(self, n, fast);
}

- (OrgGeogebraCommonKernelArithmeticFunction *)getDerivativeNoFractionsWithInt:(jint)n
                                                                   withBoolean:(jboolean)fast {
  return OrgGeogebraCommonKernelArithmeticFunction_getDerivativeNoFractionsWithInt_withBoolean_(self, n, fast);
}

- (OrgGeogebraCommonKernelArithmeticFunction *)getDerivativeWithInt:(jint)n
                                                        withBoolean:(jboolean)keepFractions
                                                        withBoolean:(jboolean)fast {
  return OrgGeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_withBoolean_(self, n, keepFractions, fast);
}

+ (OrgGeogebraCommonKernelArithmeticFunction *)getDerivativeQuotientWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)funX
                                                                    withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)funY {
  return OrgGeogebraCommonKernelArithmeticFunction_getDerivativeQuotientWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(funX, funY);
}

+ (void)differenceWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)a
                  withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)b
                  withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)c {
  OrgGeogebraCommonKernelArithmeticFunction_differenceWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(a, b, c);
}

+ (void)differenceWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)f
                         withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)line
                  withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)c {
  OrgGeogebraCommonKernelArithmeticFunction_differenceWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelArithmeticFunction_(f, line, c);
}

- (id<OrgGeogebraCommonKernelRootsRealRootDerivFunction>)getRealRootDerivFunction {
  OrgGeogebraCommonKernelArithmeticFunction *deriv = OrgGeogebraCommonKernelArithmeticFunction_getDerivativeNoFractionsWithInt_withBoolean_(self, 1, YES);
  if (deriv == nil) {
    return nil;
  }
  return new_OrgGeogebraCommonKernelArithmeticFunction_DerivFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(self, self, deriv);
}

- (jboolean)includesDivisionByVariable {
  if (expression_ == nil) {
    return NO;
  }
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) includesDivisionByWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(fVars_), 0)];
}

- (jboolean)includesNonContinuousIntegral {
  if (expression_ == nil) {
    return NO;
  }
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) includesNonContinuousIntegral];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getGeoFunction {
  OrgGeogebraCommonKernelGeosGeoFunction *gf = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]);
  [gf setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:self];
  return gf;
}

- (OrgGeogebraCommonKernelArithmeticFunction *)getDerivativeNoCASWithInt:(jint)n {
  OrgGeogebraCommonKernelArithmeticExpressionNode *expDeriv = expression_;
  for (jint i = 0; i < n; i++) {
    expDeriv = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expDeriv)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(nil_chk(fVars_), 0) withOrgGeogebraCommonKernelKernel:kernel_];
  }
  [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expDeriv)) simplifyConstantIntegers];
  return new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(expDeriv, IOSObjectArray_Get(nil_chk(fVars_), 0));
}

- (OrgGeogebraCommonKernelArithmeticFunction *)getIntegralNoCAS {
  return new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(nil_chk(fVars_), 0) withOrgGeogebraCommonKernelKernel:kernel_], IOSObjectArray_Get(fVars_, 0));
}

- (IOSDoubleArray *)evaluateDerivFuncWithDouble:(jdouble)x {
  IOSDoubleArray *ret = [IOSDoubleArray newArrayWithLength:2];
  *IOSDoubleArray_GetRef(ret, 0) = [self evaluateWithDouble:x];
  if (isBooleanFunction__) {
    *IOSDoubleArray_GetRef(ret, 1) = JavaLangDouble_NaN;
    return ret;
  }
  if (derivative__ == nil) {
    derivative__ = OrgGeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_withBoolean_(self, 1, NO, YES);
  }
  *IOSDoubleArray_GetRef(ret, 1) = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(derivative__)) evaluateWithDouble:x];
  return ret;
}

- (jdouble)evaluateDerivativeWithDouble:(jdouble)x {
  if (isBooleanFunction__) {
    return JavaLangDouble_NaN;
  }
  if (derivative__ == nil) {
    derivative__ = OrgGeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_withBoolean_(self, 1, NO, YES);
  }
  return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(derivative__)) evaluateWithDouble:x];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                      withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel0 {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:fv withOrgGeogebraCommonKernelKernel:kernel0];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "Function", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticFunctionVariable:", "Function", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:", "Function", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelArithmeticFunction:withOrgGeogebraCommonKernelKernel:", "Function", NULL, 0x1, NULL, NULL },
    { "deepCopyWithOrgGeogebraCommonKernelKernel:", "deepCopy", "Lorg.geogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticFunctionVariable:", "setExpression", "V", 0x1, NULL, NULL },
    { "getFunction", NULL, "Lorg.geogebra.common.kernel.arithmetic.Function;", 0x11, NULL, NULL },
    { "getFunctionVariable", NULL, "Lorg.geogebra.common.kernel.arithmetic.FunctionVariable;", 0x1, NULL, NULL },
    { "getVarStringWithOrgGeogebraCommonKernelStringTemplate:", "getVarString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "initFunction", NULL, "Z", 0x1, NULL, NULL },
    { "initFunctionVars", NULL, "V", 0x1, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "evaluateBooleanWithDouble:", "evaluateBoolean", "Z", 0x11, NULL, NULL },
    { "translateWithDouble:withDouble:", "translate", "V", 0x11, NULL, NULL },
    { "translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode:withDouble:", "translateX", "V", 0x12, NULL, NULL },
    { "shiftXnodeWithDouble:", "shiftXnode", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x12, NULL, NULL },
    { "translateYWithDouble:", "translateY", "V", 0x11, NULL, NULL },
    { "addNumberWithDouble:", "addNumber", "V", 0x12, NULL, NULL },
    { "getPolynomialFactorsWithBoolean:", "getPolynomialFactors", "Ljava.util.LinkedList;", 0x11, NULL, NULL },
    { "getSymbolicPolynomialDerivativeFactorsWithInt:withBoolean:", "getSymbolicPolynomialDerivativeFactors", "Ljava.util.LinkedList;", 0x11, NULL, NULL },
    { "getNumericPolynomialDerivativeWithInt:withBoolean:", "getNumericPolynomialDerivative", "Lorg.geogebra.common.kernel.arithmetic.PolyFunction;", 0x11, NULL, NULL },
    { "getNumericPolynomialIntegral", NULL, "Lorg.geogebra.common.kernel.arithmetic.PolyFunction;", 0x11, NULL, NULL },
    { "getSymbolicPolynomialFactorsWithBoolean:withBoolean:", "getSymbolicPolynomialFactors", "Ljava.util.LinkedList;", 0x1, NULL, NULL },
    { "getNumericPolynomialFactorsWithBoolean:", "getNumericPolynomialFactors", "Ljava.util.LinkedList;", 0x2, NULL, NULL },
    { "addPolynomialFactorsWithOrgGeogebraCommonKernelArithmeticExpressionValue:withJavaUtilList:withBoolean:withBoolean:withBoolean:", "addPolynomialFactors", "Z", 0x2, NULL, NULL },
    { "expandToPolyFunctionWithOrgGeogebraCommonKernelArithmeticExpressionValue:withBoolean:withBoolean:", "expandToPolyFunction", "Lorg.geogebra.common.kernel.arithmetic.PolyFunction;", 0x1, NULL, NULL },
    { "expandToPolyFunctionNoCasWithOrgGeogebraCommonKernelArithmeticExpressionValue:withBoolean:", "expandToPolyFunctionNoCas", "Lorg.geogebra.common.kernel.arithmetic.PolyFunction;", 0x2, NULL, NULL },
    { "evaluateToExpressionNodeWithNSString:", "evaluateToExpressionNode", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "getGeoDerivativeWithInt:", "getGeoDerivative", "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "getDerivativeWithInt:withBoolean:", "getDerivative", "Lorg.geogebra.common.kernel.arithmetic.Function;", 0x11, NULL, NULL },
    { "getDerivativeNoFractionsWithInt:withBoolean:", "getDerivativeNoFractions", "Lorg.geogebra.common.kernel.arithmetic.Function;", 0x11, NULL, NULL },
    { "getDerivativeWithInt:withBoolean:withBoolean:", "getDerivative", "Lorg.geogebra.common.kernel.arithmetic.Function;", 0x10, NULL, NULL },
    { "getDerivativeQuotientWithOrgGeogebraCommonKernelArithmeticFunction:withOrgGeogebraCommonKernelArithmeticFunction:", "getDerivativeQuotient", "Lorg.geogebra.common.kernel.arithmetic.Function;", 0x9, NULL, NULL },
    { "differenceWithOrgGeogebraCommonKernelArithmeticFunction:withOrgGeogebraCommonKernelArithmeticFunction:withOrgGeogebraCommonKernelArithmeticFunction:", "difference", "V", 0x19, NULL, NULL },
    { "differenceWithOrgGeogebraCommonKernelArithmeticFunction:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelArithmeticFunction:", "difference", "V", 0x19, NULL, NULL },
    { "getRealRootDerivFunction", NULL, "Lorg.geogebra.common.kernel.roots.RealRootDerivFunction;", 0x11, NULL, NULL },
    { "includesDivisionByVariable", NULL, "Z", 0x11, NULL, NULL },
    { "includesNonContinuousIntegral", NULL, "Z", 0x11, NULL, NULL },
    { "getGeoFunction", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "getDerivativeNoCASWithInt:", "getDerivativeNoCAS", "Lorg.geogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "getIntegralNoCAS", NULL, "Lorg.geogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "evaluateDerivFuncWithDouble:", "evaluateDerivFunc", "[D", 0x1, NULL, NULL },
    { "evaluateDerivativeWithDouble:", "evaluateDerivative", "D", 0x1, NULL, NULL },
    { "derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelKernel:", "derivative", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "derivative__", "derivative", 0x2, "Lorg.geogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "MAX_EXPAND_DEGREE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelArithmeticFunction_MAX_EXPAND_DEGREE },
    { "factorParentExp_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "symbolicPolyFactorList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/geogebra/common/kernel/arithmetic/PolyFunction;>;",  },
    { "numericPolyFactorList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/geogebra/common/kernel/arithmetic/PolyFunction;>;",  },
    { "symbolicPolyFactorListDefined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "zeroExpr_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "geoDeriv_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.arithmetic.Function$DerivFunction;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticFunction = { 2, "Function", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 44, methods, 8, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticFunction;
}

@end

void OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelArithmeticFunction *self, OrgGeogebraCommonKernelArithmeticExpressionNode *expression) {
  (void) OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, expression);
  self->zeroExpr_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0));
}

OrgGeogebraCommonKernelArithmeticFunction *new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(OrgGeogebraCommonKernelArithmeticExpressionNode *expression) {
  OrgGeogebraCommonKernelArithmeticFunction *self = [OrgGeogebraCommonKernelArithmeticFunction alloc];
  OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, expression);
  return self;
}

void OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(OrgGeogebraCommonKernelArithmeticFunction *self, OrgGeogebraCommonKernelArithmeticExpressionNode *exp, OrgGeogebraCommonKernelArithmeticFunctionVariable *fVar) {
  (void) OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(self, exp, [IOSObjectArray newArrayWithObjects:(id[]){ fVar } count:1 type:OrgGeogebraCommonKernelArithmeticFunctionVariable_class_()]);
  self->zeroExpr_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0));
}

OrgGeogebraCommonKernelArithmeticFunction *new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(OrgGeogebraCommonKernelArithmeticExpressionNode *exp, OrgGeogebraCommonKernelArithmeticFunctionVariable *fVar) {
  OrgGeogebraCommonKernelArithmeticFunction *self = [OrgGeogebraCommonKernelArithmeticFunction alloc];
  OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(self, exp, fVar);
  return self;
}

void OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticFunction *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  self->zeroExpr_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0));
  self->fVars_ = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelArithmeticFunctionVariable_class_()];
}

OrgGeogebraCommonKernelArithmeticFunction *new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticFunction *self = [OrgGeogebraCommonKernelArithmeticFunction alloc];
  OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticFunction *self, OrgGeogebraCommonKernelArithmeticFunction *f, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_(self, [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f))->expression_)) getCopyWithOrgGeogebraCommonKernelKernel:kernel]);
  self->zeroExpr_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0));
  self->fVars_ = f->fVars_;
  self->isBooleanFunction__ = f->isBooleanFunction__;
  self->isConstantFunction__ = f->isConstantFunction__;
  self->kernel_ = kernel;
}

OrgGeogebraCommonKernelArithmeticFunction *new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticFunction *f, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticFunction *self = [OrgGeogebraCommonKernelArithmeticFunction alloc];
  OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelKernel_(self, f, kernel);
  return self;
}

jboolean OrgGeogebraCommonKernelArithmeticFunction_evaluateBooleanWithDouble_(OrgGeogebraCommonKernelArithmeticFunction *self, jdouble x) {
  [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(self->fVars_), 0))) setWithDouble:x];
  return [((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @protocol(OrgGeogebraCommonKernelArithmeticBooleanValue))))) getBoolean];
}

void OrgGeogebraCommonKernelArithmeticFunction_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_(OrgGeogebraCommonKernelArithmeticFunction *self, OrgGeogebraCommonKernelArithmeticExpressionNode *en, jdouble vx) {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getLeft];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [en getRight];
  if (left == IOSObjectArray_Get(nil_chk(self->fVars_), 0)) {
    @try {
      OrgGeogebraCommonKernelArithmeticMyDouble *num = (OrgGeogebraCommonKernelArithmeticMyDouble *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticMyDouble class]);
      jdouble temp;
      switch ([[en getOperation] ordinal]) {
        case OrgGeogebraCommonPluginOperation_PLUS:
        temp = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_([((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble] - vx);
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(temp)) {
          self->expression_ = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:en withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fVars_, 0)])) wrap];
        }
        else if (temp < 0) {
          [en setOperationWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_MINUS()];
          [num setWithDouble:-temp];
        }
        else {
          [num setWithDouble:temp];
        }
        return;
        case OrgGeogebraCommonPluginOperation_MINUS:
        temp = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_([((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble] + vx);
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(temp)) {
          self->expression_ = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:en withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fVars_, 0)])) wrap];
        }
        else if (temp < 0) {
          [en setOperationWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_PLUS()];
          [num setWithDouble:-temp];
        }
        else {
          [num setWithDouble:temp];
        }
        return;
        default:
        [en setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticFunction_shiftXnodeWithDouble_(self, vx)];
      }
    }
    @catch (JavaLangException *e) {
      [en setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticFunction_shiftXnodeWithDouble_(self, vx)];
    }
  }
  else if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    OrgGeogebraCommonKernelArithmeticFunction_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class]), vx);
  }
  else if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyNumberPair class]]) {
    OrgGeogebraCommonKernelArithmeticFunction_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) getX])) wrap], vx);
    OrgGeogebraCommonKernelArithmeticFunction_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) getY])) wrap], vx);
  }
  else if ([left isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]]) {
    for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticMyList class])))) size]; i++) {
      OrgGeogebraCommonKernelArithmeticFunction_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticMyList class])))) getListElementWithInt:i])) wrap], vx);
    }
  }
  if (right == IOSObjectArray_Get(self->fVars_, 0)) {
    [en setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticFunction_shiftXnodeWithDouble_(self, vx)];
  }
  else if ([right isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    OrgGeogebraCommonKernelArithmeticFunction_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class]), vx);
  }
  else if ([right isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]]) {
    for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticMyList class])))) size]; i++) {
      OrgGeogebraCommonKernelArithmeticFunction_translateXWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticMyList class])))) getListElementWithInt:i])) wrap], vx);
    }
  }
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticFunction_shiftXnodeWithDouble_(OrgGeogebraCommonKernelArithmeticFunction *self, jdouble xShift) {
  jdouble vx = xShift;
  vx = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(vx);
  OrgGeogebraCommonKernelArithmeticExpressionNode *node;
  if (vx > 0) {
    node = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, IOSObjectArray_Get(nil_chk(self->fVars_), 0), OrgGeogebraCommonPluginOperationEnum_get_MINUS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, vx));
  }
  else {
    node = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, IOSObjectArray_Get(nil_chk(self->fVars_), 0), OrgGeogebraCommonPluginOperationEnum_get_PLUS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, -vx));
  }
  return node;
}

void OrgGeogebraCommonKernelArithmeticFunction_translateYWithDouble_(OrgGeogebraCommonKernelArithmeticFunction *self, jdouble vy) {
  if ([[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) getRight] isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]]) {
    OrgGeogebraCommonKernelArithmeticMyDouble *num = (OrgGeogebraCommonKernelArithmeticMyDouble *) check_class_cast([self->expression_ getRight], [OrgGeogebraCommonKernelArithmeticMyDouble class]);
    if (num == IOSObjectArray_Get(nil_chk(self->fVars_), 0)) {
      OrgGeogebraCommonKernelArithmeticFunction_addNumberWithDouble_(self, OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(vy));
      return;
    }
    jdouble temp;
    switch ([[self->expression_ getOperation] ordinal]) {
      case OrgGeogebraCommonPluginOperation_PLUS:
      temp = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_([((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble] + vy);
      if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(temp)) {
        self->expression_ = [self->expression_ getLeftTree];
      }
      else if (temp < 0) {
        [self->expression_ setOperationWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_MINUS()];
        [num setWithDouble:-temp];
      }
      else {
        [num setWithDouble:temp];
      }
      break;
      case OrgGeogebraCommonPluginOperation_MINUS:
      temp = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_([((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble] - vy);
      if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(temp)) {
        self->expression_ = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) getLeftTree];
      }
      else if (temp < 0) {
        [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) setOperationWithOrgGeogebraCommonPluginOperationEnum:OrgGeogebraCommonPluginOperationEnum_get_PLUS()];
        [num setWithDouble:-temp];
      }
      else {
        [num setWithDouble:temp];
      }
      break;
      default:
      OrgGeogebraCommonKernelArithmeticFunction_addNumberWithDouble_(self, vy);
    }
  }
  else {
    OrgGeogebraCommonKernelArithmeticFunction_addNumberWithDouble_(self, vy);
  }
}

void OrgGeogebraCommonKernelArithmeticFunction_addNumberWithDouble_(OrgGeogebraCommonKernelArithmeticFunction *self, jdouble n) {
  if (n > 0) {
    self->expression_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->expression_, OrgGeogebraCommonPluginOperationEnum_get_PLUS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, n));
  }
  else {
    self->expression_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->expression_, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, -n));
  }
}

OrgGeogebraCommonKernelArithmeticPolyFunction *OrgGeogebraCommonKernelArithmeticFunction_getNumericPolynomialDerivativeWithInt_withBoolean_(OrgGeogebraCommonKernelArithmeticFunction *self, jint n, jboolean skipCASfallback) {
  OrgGeogebraCommonKernelArithmeticPolyFunction *poly = [self expandToPolyFunctionWithOrgGeogebraCommonKernelArithmeticExpressionValue:self->expression_ withBoolean:NO withBoolean:skipCASfallback];
  if (poly != nil) {
    for (jint i = 0; i < n; i++) {
      poly = [poly getDerivative];
    }
  }
  return poly;
}

JavaUtilLinkedList *OrgGeogebraCommonKernelArithmeticFunction_getNumericPolynomialFactorsWithBoolean_(OrgGeogebraCommonKernelArithmeticFunction *self, jboolean rootFindingSimplification) {
  if (self->numericPolyFactorList_ == nil) self->numericPolyFactorList_ = new_JavaUtilLinkedList_init();
  else [self->numericPolyFactorList_ clear];
  jboolean success = OrgGeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, self->expression_, self->numericPolyFactorList_, NO, rootFindingSimplification, NO);
  if (success && [((JavaUtilLinkedList *) nil_chk(self->numericPolyFactorList_)) size] > 0) {
    return self->numericPolyFactorList_;
  }
  return nil;
}

jboolean OrgGeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(OrgGeogebraCommonKernelArithmeticFunction *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, id<JavaUtilList> l, jboolean symbolic, jboolean rootFindingSimplification, jboolean assumeFalseIfCASNeeded) {
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    switch ([[node getOperation] ordinal]) {
      case OrgGeogebraCommonPluginOperation_MULTIPLY:
      return OrgGeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, [node getLeft], l, symbolic, rootFindingSimplification, assumeFalseIfCASNeeded) && OrgGeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, [node getRight], l, symbolic, rootFindingSimplification, assumeFalseIfCASNeeded);
      case OrgGeogebraCommonPluginOperation_POWER:
      case OrgGeogebraCommonPluginOperation_DIVIDE:
      if (!rootFindingSimplification) break;
      if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([node getRight])) containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(self->fVars_), 0)]) return NO;
      if (!symbolic || [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([node getRight])) isConstant]) {
        jdouble rightVal;
        @try {
          rightVal = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([node getRight])) evaluateDouble];
        }
        @catch (JavaLangException *e) {
          [((JavaLangException *) nil_chk(e)) printStackTrace];
          return NO;
        }
        if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([node getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_POWER()]) {
          if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(rightVal)) return OrgGeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1), l, symbolic, rootFindingSimplification, assumeFalseIfCASNeeded);
          else if (rightVal > 0) return OrgGeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, [node getLeft], l, symbolic, rootFindingSimplification, assumeFalseIfCASNeeded);
        }
        else {
          if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(rightVal)) {
            return NO;
          }
          return OrgGeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, [node getLeft], l, symbolic, rootFindingSimplification, assumeFalseIfCASNeeded);
        }
      }
      break;
      case OrgGeogebraCommonPluginOperation_ABS:
      case OrgGeogebraCommonPluginOperation_SGN:
      case OrgGeogebraCommonPluginOperation_SQRT:
      if (!rootFindingSimplification) break;
      return OrgGeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, [node getLeft], l, symbolic, rootFindingSimplification, assumeFalseIfCASNeeded);
      default:
      break;
    }
  }
  if (![ev isConstant]) {
    OrgGeogebraCommonKernelArithmeticPolyFunction *factor = [self expandToPolyFunctionWithOrgGeogebraCommonKernelArithmeticExpressionValue:ev withBoolean:symbolic withBoolean:assumeFalseIfCASNeeded];
    if (factor == nil) return NO;
    [((id<JavaUtilList>) nil_chk(l)) addWithId:factor];
  }
  return YES;
}

OrgGeogebraCommonKernelArithmeticPolyFunction *OrgGeogebraCommonKernelArithmeticFunction_expandToPolyFunctionNoCasWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(OrgGeogebraCommonKernelArithmeticFunction *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, jboolean symbolic) {
  OrgGeogebraCommonKernelArithmeticPolyFunction *polyFun = nil;
  OrgGeogebraCommonKernelArithmeticFunctionVariable *xVar = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"x");
  IOSObjectArray *coeff = nil;
  jint terms = -1;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> evCopy = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_];
  OrgGeogebraCommonKernelArithmeticExpressionNode *replaced;
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *varep = OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_([((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(self->fVars_), 0))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()], xVar, self->kernel_);
  if ([evCopy isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    replaced = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(evCopy, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:varep])) wrap];
  }
  else {
    replaced = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([(new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, evCopy)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:varep])) wrap];
  }
  OrgGeogebraCommonKernelArithmeticEquation *equ = new_OrgGeogebraCommonKernelArithmeticEquation_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, replaced, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0));
  @try {
    coeff = [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(OrgGeogebraCommonKernelArithmeticPolynomial_fromNodeWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticEquation_(replaced, equ))) getCoeff];
    terms = ((IOSObjectArray *) nil_chk(coeff))->size_;
  }
  @catch (JavaLangThrowable *t) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("@$", ev, @" couldn't be transformed to polynomial"));
  }
  if (terms == -1 || ![equ isPolynomial]) return nil;
  if (!symbolic) {
    IOSDoubleArray *coeffValues = [IOSDoubleArray newArrayWithLength:terms];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(coeff))->size_; i++) {
      if ([IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), 0) isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
        *IOSDoubleArray_GetRef(coeffValues, i) = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), 0))) evaluateDouble];
      }
      else {
        *IOSDoubleArray_GetRef(coeffValues, i) = [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), 0)] ? [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), 0), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble] : 0;
      }
    }
    polyFun = new_OrgGeogebraCommonKernelArithmeticPolyFunction_initWithDoubleArray_(coeffValues);
  }
  else {
    IOSObjectArray *coeffExpr = [IOSObjectArray newArrayWithLength:terms type:OrgGeogebraCommonKernelArithmeticExpressionNode_class_()];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(coeff))->size_; i++) {
      (void) IOSObjectArray_Set(coeffExpr, i, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), 0) == nil ? self->zeroExpr_ : new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), 0)));
    }
    polyFun = new_OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNodeArray_(coeffExpr);
  }
  return polyFun;
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticFunction_evaluateToExpressionNodeWithNSString_(OrgGeogebraCommonKernelArithmeticFunction *self, NSString *str) {
  @try {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = [((OrgGeogebraCommonKernelParserParser *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getParser])) parseExpressionWithNSString:str];
    [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) resolveVariables];
    return en;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
  @catch (JavaLangError *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"error in evaluateToExpressionNode: ", str));
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

OrgGeogebraCommonKernelArithmeticFunction *OrgGeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_(OrgGeogebraCommonKernelArithmeticFunction *self, jint n, jboolean fast) {
  return OrgGeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_withBoolean_(self, n, YES, fast);
}

OrgGeogebraCommonKernelArithmeticFunction *OrgGeogebraCommonKernelArithmeticFunction_getDerivativeNoFractionsWithInt_withBoolean_(OrgGeogebraCommonKernelArithmeticFunction *self, jint n, jboolean fast) {
  return OrgGeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_withBoolean_(self, n, NO, fast);
}

OrgGeogebraCommonKernelArithmeticFunction *OrgGeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_withBoolean_(OrgGeogebraCommonKernelArithmeticFunction *self, jint n, jboolean keepFractions, jboolean fast) {
  OrgGeogebraCommonKernelArithmeticPolyFunction *polyDeriv = OrgGeogebraCommonKernelArithmeticFunction_getNumericPolynomialDerivativeWithInt_withBoolean_(self, n, YES);
  if (polyDeriv != nil) {
    jboolean factor = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getExpression])) inspectWithOrgGeogebraCommonKernelArithmeticInspecting:new_OrgGeogebraCommonKernelArithmeticFunction_$1_init()];
    if (factor) {
      return [self getDerivativeNoCASWithInt:n];
    }
    return [polyDeriv getFunctionWithOrgGeogebraCommonKernelKernel:self->kernel_ withOrgGeogebraCommonKernelArithmeticFunctionVariable:[self getFunctionVariable]];
  }
  if (fast || ![((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) useCASforDerivatives]) {
    return [self getDerivativeNoCASWithInt:n];
  }
  NSString *varStr = [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(self->fVars_), 0))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_prefixedDefault_()];
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:@"Derivative["];
  if (!keepFractions) (void) [sb appendWithNSString:@"Numeric["];
  (void) [sb appendWithNSString:@"%"];
  if (!keepFractions) (void) [sb appendWithNSString:@"]"];
  (void) [sb appendWithNSString:@","];
  (void) [sb appendWithNSString:varStr];
  (void) [sb appendWithNSString:@","];
  (void) [sb appendWithInt:n];
  (void) [sb appendWithNSString:@"]"];
  return (OrgGeogebraCommonKernelArithmeticFunction *) check_class_cast([self evalCasCommandWithNSString:[sb description] withBoolean:YES withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil], [OrgGeogebraCommonKernelArithmeticFunction class]);
}

OrgGeogebraCommonKernelArithmeticFunction *OrgGeogebraCommonKernelArithmeticFunction_getDerivativeQuotientWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelArithmeticFunction *funX, OrgGeogebraCommonKernelArithmeticFunction *funY) {
  OrgGeogebraCommonKernelArithmeticFunction_initialize();
  if (((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(funX))->fVars_ == nil) return nil;
  OrgGeogebraCommonKernelArithmeticFunction *xDashed = [funX getDerivativeNoCASWithInt:1];
  OrgGeogebraCommonKernelArithmeticFunction *yDashed = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(funY)) getDerivativeNoCASWithInt:1];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *fv = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(xDashed)) getFunctionVariable];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> yDashedEv = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(yDashed)) getExpression])) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:[yDashed getFunctionVariable] withOrgGeogebraCommonKernelArithmeticExpressionValue:fv];
  OrgGeogebraCommonKernelArithmeticExpressionNode *en = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_([funX getKernel], yDashedEv, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), [xDashed getExpression]);
  return new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(en, fv);
}

void OrgGeogebraCommonKernelArithmeticFunction_differenceWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelArithmeticFunction *a, OrgGeogebraCommonKernelArithmeticFunction *b, OrgGeogebraCommonKernelArithmeticFunction *c) {
  OrgGeogebraCommonKernelArithmeticFunction_initialize();
  OrgGeogebraCommonKernelArithmeticExpressionNode *left = ((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(a))->expression_;
  OrgGeogebraCommonKernelArithmeticExpressionNode *right = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(b))->expression_)) getCopyWithOrgGeogebraCommonKernelKernel:a->kernel_];
  (void) [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(right)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(b->fVars_), 0) withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(a->fVars_, 0)];
  OrgGeogebraCommonKernelArithmeticExpressionNode *diffExp = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(a->kernel_, left, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), right);
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(c)) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:diffExp];
  (void) IOSObjectArray_Set(c->fVars_, 0, IOSObjectArray_Get(a->fVars_, 0));
}

void OrgGeogebraCommonKernelArithmeticFunction_differenceWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelArithmeticFunction *f, OrgGeogebraCommonKernelGeosGeoLine *line, OrgGeogebraCommonKernelArithmeticFunction *c) {
  OrgGeogebraCommonKernelArithmeticFunction_initialize();
  jdouble coeffX = [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(line)) getX] / [line getY];
  jdouble coeffConst = [line getZ] / [line getY];
  OrgGeogebraCommonKernelArithmeticExpressionNode *temp;
  if (coeffX > 0) {
    temp = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f))->kernel_, f->expression_, OrgGeogebraCommonPluginOperationEnum_get_PLUS(), new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(f->kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(f->kernel_, coeffX), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(nil_chk(f->fVars_), 0)));
  }
  else {
    temp = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f))->kernel_, f->expression_, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(f->kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(f->kernel_, -coeffX), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(nil_chk(f->fVars_), 0)));
  }
  if (coeffConst > 0) {
    temp = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f))->kernel_, temp, OrgGeogebraCommonPluginOperationEnum_get_PLUS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(f->kernel_, coeffConst));
  }
  else {
    temp = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f))->kernel_, temp, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(f->kernel_, -coeffConst));
  }
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(c)) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:temp];
  (void) IOSObjectArray_Set(nil_chk(c->fVars_), 0, IOSObjectArray_Get(((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f))->fVars_, 0));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticFunction)

@implementation OrgGeogebraCommonKernelArithmeticFunction_DerivFunction

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)outer$
                    withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)fun
                    withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)derivative {
  OrgGeogebraCommonKernelArithmeticFunction_DerivFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(self, outer$, fun, derivative);
  return self;
}

- (IOSDoubleArray *)evaluateDerivFuncWithDouble:(jdouble)x {
  *IOSDoubleArray_GetRef(nil_chk(ret_), 0) = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) evaluateWithDouble:x];
  *IOSDoubleArray_GetRef(ret_, 1) = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(derivative_)) evaluateWithDouble:x];
  return ret_;
}

- (jdouble)evaluateWithDouble:(jdouble)x {
  return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) evaluateWithDouble:x];
}

- (jdouble)evaluateDerivativeWithDouble:(jdouble)x {
  return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(derivative_)) evaluateWithDouble:x];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelArithmeticFunction:withOrgGeogebraCommonKernelArithmeticFunction:withOrgGeogebraCommonKernelArithmeticFunction:", "DerivFunction", NULL, 0x0, NULL, NULL },
    { "evaluateDerivFuncWithDouble:", "evaluateDerivFunc", "[D", 0x1, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "evaluateDerivativeWithDouble:", "evaluateDerivative", "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fun_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "derivative_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "ret_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticFunction_DerivFunction = { 2, "DerivFunction", "org.geogebra.common.kernel.arithmetic", "Function", 0x2, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticFunction_DerivFunction;
}

@end

void OrgGeogebraCommonKernelArithmeticFunction_DerivFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelArithmeticFunction_DerivFunction *self, OrgGeogebraCommonKernelArithmeticFunction *outer$, OrgGeogebraCommonKernelArithmeticFunction *fun, OrgGeogebraCommonKernelArithmeticFunction *derivative) {
  (void) NSObject_init(self);
  self->ret_ = [IOSDoubleArray newArrayWithLength:2];
  self->fun_ = fun;
  self->derivative_ = derivative;
}

OrgGeogebraCommonKernelArithmeticFunction_DerivFunction *new_OrgGeogebraCommonKernelArithmeticFunction_DerivFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelArithmeticFunction *outer$, OrgGeogebraCommonKernelArithmeticFunction *fun, OrgGeogebraCommonKernelArithmeticFunction *derivative) {
  OrgGeogebraCommonKernelArithmeticFunction_DerivFunction *self = [OrgGeogebraCommonKernelArithmeticFunction_DerivFunction alloc];
  OrgGeogebraCommonKernelArithmeticFunction_DerivFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(self, outer$, fun, derivative);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticFunction_DerivFunction)

@implementation OrgGeogebraCommonKernelArithmeticFunction_$1

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v {
  if ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]] && [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(v, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_POWER()) {
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(v, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getLeft])) unwrap])) isExpressionNode] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(v, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getRight])) evaluateDouble] > OrgGeogebraCommonKernelArithmeticFunction_MAX_EXPAND_DEGREE) {
      return YES;
    }
  }
  return NO;
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticFunction_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "check", "Z", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelArithmeticFunction", "getDerivativeWithInt:withBoolean:withBoolean:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticFunction_$1 = { 2, "", "org.geogebra.common.kernel.arithmetic", "Function", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonKernelArithmeticFunction_$1;
}

@end

void OrgGeogebraCommonKernelArithmeticFunction_$1_init(OrgGeogebraCommonKernelArithmeticFunction_$1 *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticFunction_$1 *new_OrgGeogebraCommonKernelArithmeticFunction_$1_init() {
  OrgGeogebraCommonKernelArithmeticFunction_$1 *self = [OrgGeogebraCommonKernelArithmeticFunction_$1 alloc];
  OrgGeogebraCommonKernelArithmeticFunction_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticFunction_$1)
