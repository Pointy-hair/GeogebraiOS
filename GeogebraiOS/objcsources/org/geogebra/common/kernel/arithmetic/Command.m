//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/arithmetic/Command.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "org/geogebra/common/kernel/CASGenericInterface.h"
#include "org/geogebra/common/kernel/GeoGebraCasInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Macro.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/ListValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MySpecialDouble.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/arithmetic/Variable.h"
#include "org/geogebra/common/kernel/arithmetic/VectorValue.h"
#include "org/geogebra/common/kernel/arithmetic3D/Vector3DValue.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/Unicode.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonKernelArithmeticCommand () {
 @public
  JavaUtilArrayList *args_;
  NSString *name_;
  OrgGeogebraCommonKernelKernel *kernel_;
  OrgGeogebraCommonMainApp *app_;
  IOSObjectArray *evalGeos_;
  OrgGeogebraCommonKernelMacro *macro_;
  jboolean allowEvaluationForTypeCheck_;
  JavaLangStringBuilder *sbToString_;
  IOSIntArray *outputSizes_;
}

- (NSString *)toStringWithBoolean:(jboolean)symbolic
                      withBoolean:(jboolean)LaTeX
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

+ (NSString *)toStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                               withBoolean:(jboolean)symbolic
                                                               withBoolean:(jboolean)LaTeX
                                 withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticCommand, args_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticCommand, name_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticCommand, kernel_, OrgGeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticCommand, app_, OrgGeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticCommand, evalGeos_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticCommand, macro_, OrgGeogebraCommonKernelMacro *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticCommand, sbToString_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticCommand, outputSizes_, IOSIntArray *)

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelArithmeticCommand_toStringWithBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticCommand *self, jboolean symbolic, jboolean LaTeX, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelArithmeticCommand_toStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, jboolean symbolic, jboolean LaTeX, OrgGeogebraCommonKernelStringTemplate *tpl);

@implementation OrgGeogebraCommonKernelArithmeticCommand

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                         withNSString:(NSString *)name
                                          withBoolean:(jboolean)translateName {
  OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_(self, kernel, name, translateName);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                         withNSString:(NSString *)name
                                          withBoolean:(jboolean)translateName
                                          withBoolean:(jboolean)allowEvaluationForTypeCheck {
  OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(self, kernel, name, translateName, allowEvaluationForTypeCheck);
  return self;
}

- (OrgGeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (void)addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)arg {
  [((JavaUtilArrayList *) nil_chk(args_)) addWithId:arg];
}

- (NSString *)getVariableNameWithInt:(jint)i {
  if (i >= [((JavaUtilArrayList *) nil_chk(args_)) size]) return nil;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([args_ getWithInt:i])) getLeft];
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]]) return [((OrgGeogebraCommonKernelArithmeticVariable *) nil_chk(((OrgGeogebraCommonKernelArithmeticVariable *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticVariable class])))) getNameWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoElement class]]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = ((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoElement class]));
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoElement class])))) getLabelSimple];
  }
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
    return [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionVariable *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticFunctionVariable class])))) getSetVarString];
  }
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunction class]]) {
    NSString *str = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if (((jint) [((NSString *) nil_chk(str)) length]) == 1 && OrgGeogebraCommonUtilStringUtil_isLetterWithChar_([str charAtWithInt:0])) return str;
  }
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoVec2D class]]) {
    if ([((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(((OrgGeogebraCommonKernelGeosGeoVec2D *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoVec2D class])))) isImaginaryUnit]) {
      return OrgGeogebraCommonUtilUnicode_get_IMAGINARY_();
    }
  }
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticMySpecialDouble class]]) {
    if ([((OrgGeogebraCommonKernelArithmeticMySpecialDouble *) nil_chk(((OrgGeogebraCommonKernelArithmeticMySpecialDouble *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMySpecialDouble class])))) isEulerConstant]) {
      return OrgGeogebraCommonUtilUnicode_get_EULER_STRING_();
    }
  }
  return nil;
}

- (IOSObjectArray *)getArguments {
  return [((JavaUtilArrayList *) nil_chk(args_)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:OrgGeogebraCommonKernelArithmeticExpressionNode_class_()]];
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getArgumentWithInt:(jint)i {
  return [((JavaUtilArrayList *) nil_chk(args_)) getWithInt:i];
}

- (void)setArgumentWithInt:(jint)i
withOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en {
  (void) [((JavaUtilArrayList *) nil_chk(args_)) setWithInt:i withId:en];
}

- (jint)getArgumentNumber {
  return [((JavaUtilArrayList *) nil_chk(args_)) size];
}

- (NSString *)getName {
  return name_;
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticCommand_toStringWithBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self, YES, NO, tpl);
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticCommand_toStringWithBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self, NO, NO, tpl);
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticCommand_toStringWithBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self, symbolic, YES, tpl);
}

- (NSString *)toStringWithBoolean:(jboolean)symbolic
                      withBoolean:(jboolean)LaTeX
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticCommand_toStringWithBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self, symbolic, LaTeX, tpl);
}

+ (NSString *)toStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                               withBoolean:(jboolean)symbolic
                                                               withBoolean:(jboolean)LaTeX
                                 withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelArithmeticCommand_toStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(ev, symbolic, LaTeX, tpl);
}

- (IOSObjectArray *)evaluateMultiple {
  IOSObjectArray *geos = nil;
  geos = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) processCommandWithOrgGeogebraCommonKernelArithmeticCommand:self withBoolean:NO];
  return geos;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluateWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (evalGeos_ == nil) evalGeos_ = [self evaluateMultiple];
  if (evalGeos_ != nil && evalGeos_->size_ >= 1) {
    return IOSObjectArray_Get(evalGeos_, 0);
  }
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"invalid command evaluation: ", name_));
  @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getLocalization], JreStrcat("$$@", [((OrgGeogebraCommonMainLocalization *) nil_chk([app_ getLocalization])) getErrorWithNSString:@"InvalidInput"], @":\n", self));
}

- (void)resolveVariables {
  if ([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isResolveUnkownVarsAsDummyGeos]) {
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(args_)) size]; i++) {
      [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([args_ getWithInt:i])) resolveVariables];
    }
    allowEvaluationForTypeCheck_ = NO;
  }
}

- (jboolean)isConstant {
  if (evalGeos_ == nil) evalGeos_ = [self evaluateMultiple];
  if (evalGeos_ == nil || evalGeos_->size_ == 0) @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getLocalization], JreStrcat("$$@", [((OrgGeogebraCommonMainLocalization *) nil_chk([app_ getLocalization])) getErrorWithNSString:@"InvalidInput"], @":\n", self));
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(evalGeos_))->size_; i++) if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(evalGeos_, i))) isConstant]) return NO;
  return YES;
}

- (jboolean)isLeaf {
  return YES;
}

- (jboolean)isNumberValue {
  if (!allowEvaluationForTypeCheck_) {
    return NO;
  }
  @try {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isNumberValue];
  }
  @catch (OrgGeogebraCommonMainMyError *ex) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((id<OrgGeogebraCommonKernelCASGenericInterface>) nil_chk([((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS])) getCurrentCAS])) evaluateToExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:self withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withOrgGeogebraCommonKernelKernel:kernel_];
    if (ev != nil) return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ev unwrap])) isNumberValue];
    @throw ex;
  }
}

- (jboolean)evaluatesToNonComplex2DVector {
  if (!allowEvaluationForTypeCheck_) {
    return NO;
  }
  @try {
    return [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:[self evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  @catch (OrgGeogebraCommonMainMyError *ex) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((id<OrgGeogebraCommonKernelCASGenericInterface>) nil_chk([((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS])) getCurrentCAS])) evaluateToExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:self withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withOrgGeogebraCommonKernelKernel:kernel_];
    if (ev != nil) return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ev unwrap])) evaluatesToNonComplex2DVector];
    @throw ex;
  }
}

- (jboolean)evaluatesToVectorNotPoint {
  if (!allowEvaluationForTypeCheck_) {
    return NO;
  }
  @try {
    return [OrgGeogebraCommonKernelArithmeticVectorValue_class_() isInstance:[self evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  @catch (OrgGeogebraCommonMainMyError *ex) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((id<OrgGeogebraCommonKernelCASGenericInterface>) nil_chk([((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS])) getCurrentCAS])) evaluateToExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:self withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withOrgGeogebraCommonKernelKernel:kernel_];
    if (ev != nil) return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ev unwrap])) evaluatesToNonComplex2DVector];
    @throw ex;
  }
}

- (jboolean)evaluatesToText {
  if (!allowEvaluationForTypeCheck_) {
    return NO;
  }
  if ([((OrgGeogebraCommonMainApp *) nil_chk(app_)) getInternalCommandWithNSString:name_] == nil && [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getMacroWithNSString:name_] == nil) {
    return NO;
  }
  @try {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) evaluatesToText];
  }
  @catch (OrgGeogebraCommonMainMyError *ex) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((id<OrgGeogebraCommonKernelCASGenericInterface>) nil_chk([((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS])) getCurrentCAS])) evaluateToExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:self withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withOrgGeogebraCommonKernelKernel:kernel_];
    if (ev != nil) return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ev unwrap])) evaluatesToText];
    @throw ex;
  }
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel1 {
  OrgGeogebraCommonKernelArithmeticCommand *c = new_OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_(kernel1, name_, NO);
  jint size = [((JavaUtilArrayList *) nil_chk(args_)) size];
  for (jint i = 0; i < size; i++) {
    [c addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([args_ getWithInt:i])) getCopyWithOrgGeogebraCommonKernelKernel:kernel1]];
  }
  return c;
}

- (void)replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  jint size = [((JavaUtilArrayList *) nil_chk(args_)) size];
  for (jint i = 0; i < size; i++) {
    [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([args_ getWithInt:i])) replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (JavaUtilHashSet *)getVariables {
  JavaUtilHashSet *set = new_JavaUtilHashSet_init();
  jint size = [((JavaUtilArrayList *) nil_chk(args_)) size];
  for (jint i = 0; i < size; i++) {
    id<JavaUtilSet> s = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([args_ getWithInt:i])) getVariables];
    if (s != nil) [set addAllWithJavaUtilCollection:s];
  }
  return set;
}

- (jboolean)containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

- (jboolean)evaluatesToList {
  if ([@"x" isEqual:[self getName]] || [@"y" isEqual:[self getName]] || [@"z" isEqual:[self getName]] || [@"If" isEqual:[self getName]]) {
    return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:0])) evaluatesToList];
  }
  if (!allowEvaluationForTypeCheck_) {
    return NO;
  }
  @try {
    return [OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:[self evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  @catch (OrgGeogebraCommonMainMyError *ex) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((id<OrgGeogebraCommonKernelCASGenericInterface>) nil_chk([((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS])) getCurrentCAS])) evaluateToExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:self withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withOrgGeogebraCommonKernelKernel:kernel_];
    if (ev != nil) return [OrgGeogebraCommonKernelArithmeticListValue_class_() isInstance:[ev unwrap]];
    @throw ex;
  }
}

- (OrgGeogebraCommonKernelMacro *)getMacro {
  return macro_;
}

- (void)setMacroWithOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)macro {
  self->macro_ = macro;
}

- (jboolean)evaluatesTo3DVector {
  if (!allowEvaluationForTypeCheck_) {
    return NO;
  }
  @try {
    return [OrgGeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:[self evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  @catch (OrgGeogebraCommonMainMyError *ex) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((id<OrgGeogebraCommonKernelCASGenericInterface>) nil_chk([((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS])) getCurrentCAS])) evaluateToExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:self withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withOrgGeogebraCommonKernelKernel:kernel_];
    if (ev != nil) return [OrgGeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:[ev unwrap]];
    @throw ex;
  }
}

- (jboolean)isTopLevelCommand {
  return YES;
}

- (OrgGeogebraCommonKernelArithmeticCommand *)getTopLevelCommand {
  return self;
}

- (NSString *)toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)traverseWithOrgGeogebraCommonKernelArithmeticTraversing:(id<OrgGeogebraCommonKernelArithmeticTraversing>)t {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> v = [((id<OrgGeogebraCommonKernelArithmeticTraversing>) nil_chk(t)) processWithOrgGeogebraCommonKernelArithmeticExpressionValue:self];
  if (v != self) return v;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(args_)) size]; i++) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([args_ getWithInt:i])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:t])) wrap];
    (void) [args_ setWithInt:i withId:en];
  }
  return self;
}

- (jboolean)inspectWithOrgGeogebraCommonKernelArithmeticInspecting:(id<OrgGeogebraCommonKernelArithmeticInspecting>)t {
  if ([((id<OrgGeogebraCommonKernelArithmeticInspecting>) nil_chk(t)) checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:self]) return YES;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(args_)) size]; i++) {
    if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([args_ getWithInt:i])) inspectWithOrgGeogebraCommonKernelArithmeticInspecting:t]) return YES;
  }
  return NO;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getItemWithInt:(jint)i {
  return [((JavaUtilArrayList *) nil_chk(args_)) getWithInt:i];
}

- (jboolean)hasCoords {
  if ([@"x" isEqual:name_] || [@"y" isEqual:name_] || [@"z" isEqual:name_]) return NO;
  return YES;
}

- (void)setOutputSizesWithIntArray:(IOSIntArray *)sizes {
  outputSizes_ = sizes;
}

- (IOSIntArray *)getOutputSizes {
  return outputSizes_;
}

- (jint)getLength {
  return [self getArgumentNumber];
}

- (jint)replaceVariablesWithNSString:(NSString *)varName
withOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fVar {
  jint replacements = 0;
  for (OrgGeogebraCommonKernelArithmeticExpressionNode * __strong arg in nil_chk(args_)) {
    replacements += [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(arg)) replaceVariablesWithNSString:varName withOrgGeogebraCommonKernelArithmeticFunctionVariable:fVar];
  }
  return replacements;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self);
}

+ (OrgGeogebraCommonKernelArithmeticExpressionNode *)xyzCASWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en
                                                                                                       withInt:(jint)i
                                                                                                   withBoolean:(jboolean)mayCheck
                                                                                         withJavaUtilArrayList:(JavaUtilArrayList *)undecided {
  return OrgGeogebraCommonKernelArithmeticCommand_xyzCASWithOrgGeogebraCommonKernelArithmeticExpressionNode_withInt_withBoolean_withJavaUtilArrayList_(en, i, mayCheck, undecided);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:withNSString:withBoolean:", "Command", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernel:withNSString:withBoolean:withBoolean:", "Command", NULL, 0x1, NULL, NULL },
    { "getKernel", NULL, "Lorg.geogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "addArgument", "V", 0x1, NULL, NULL },
    { "getVariableNameWithInt:", "getVariableName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getArguments", NULL, "[Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "getArgumentWithInt:", "getArgument", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "setArgumentWithInt:withOrgGeogebraCommonKernelArithmeticExpressionNode:", "setArgument", "V", 0x1, NULL, NULL },
    { "getArgumentNumber", NULL, "I", 0x1, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithBoolean:withBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelArithmeticExpressionValue:withBoolean:withBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "evaluateMultiple", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "evaluateWithOrgGeogebraCommonKernelStringTemplate:", "evaluate", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToNonComplex2DVector", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToVectorNotPoint", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToText", NULL, "Z", 0x1, NULL, NULL },
    { "deepCopyWithOrgGeogebraCommonKernelKernel:", "deepCopy", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:", "replaceChildrenByValues", "V", 0x1, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "evaluatesToList", NULL, "Z", 0x1, NULL, NULL },
    { "getMacro", NULL, "Lorg.geogebra.common.kernel.Macro;", 0x11, NULL, NULL },
    { "setMacroWithOrgGeogebraCommonKernelMacro:", "setMacro", "V", 0x11, NULL, NULL },
    { "evaluatesTo3DVector", NULL, "Z", 0x11, NULL, NULL },
    { "isTopLevelCommand", NULL, "Z", 0x1, NULL, NULL },
    { "getTopLevelCommand", NULL, "Lorg.geogebra.common.kernel.arithmetic.Command;", 0x1, NULL, NULL },
    { "toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "traverseWithOrgGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "inspectWithOrgGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x1, NULL, NULL },
    { "getItemWithInt:", "getItem", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "hasCoords", NULL, "Z", 0x1, NULL, NULL },
    { "setOutputSizesWithIntArray:", "setOutputSizes", "V", 0x1, NULL, NULL },
    { "getOutputSizes", NULL, "[I", 0x1, NULL, NULL },
    { "getLength", NULL, "I", 0x1, NULL, NULL },
    { "replaceVariablesWithNSString:withOrgGeogebraCommonKernelArithmeticFunctionVariable:", "replaceVariables", "I", 0x1, NULL, NULL },
    { "wrap", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "xyzCASWithOrgGeogebraCommonKernelArithmeticExpressionNode:withInt:withBoolean:withJavaUtilArrayList:", "xyzCAS", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "args_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/arithmetic/ExpressionNode;>;",  },
    { "name_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "evalGeos_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "macro_", NULL, 0x2, "Lorg.geogebra.common.kernel.Macro;", NULL, NULL,  },
    { "allowEvaluationForTypeCheck_", NULL, 0x2, "Z", NULL, NULL,  },
    { "sbToString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "outputSizes_", NULL, 0x2, "[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticCommand = { 2, "Command", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 45, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticCommand;
}

@end

void OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_(OrgGeogebraCommonKernelArithmeticCommand *self, OrgGeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName) {
  (void) OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(self, kernel, name, translateName, YES);
}

OrgGeogebraCommonKernelArithmeticCommand *new_OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_(OrgGeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName) {
  OrgGeogebraCommonKernelArithmeticCommand *self = [OrgGeogebraCommonKernelArithmeticCommand alloc];
  OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_(self, kernel, name, translateName);
  return self;
}

void OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(OrgGeogebraCommonKernelArithmeticCommand *self, OrgGeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName, jboolean allowEvaluationForTypeCheck) {
  (void) OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  self->args_ = new_JavaUtilArrayList_init();
  self->allowEvaluationForTypeCheck_ = YES;
  self->kernel_ = kernel;
  self->app_ = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getApplication];
  self->allowEvaluationForTypeCheck_ = allowEvaluationForTypeCheck;
  if (translateName && ![kernel isUsingInternalCommandNames]) {
    self->name_ = [((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getReverseCommandWithNSString:name];
    if (self->name_ == nil) self->name_ = name;
  }
  else {
    self->name_ = name;
  }
}

OrgGeogebraCommonKernelArithmeticCommand *new_OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(OrgGeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName, jboolean allowEvaluationForTypeCheck) {
  OrgGeogebraCommonKernelArithmeticCommand *self = [OrgGeogebraCommonKernelArithmeticCommand alloc];
  OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(self, kernel, name, translateName, allowEvaluationForTypeCheck);
  return self;
}

NSString *OrgGeogebraCommonKernelArithmeticCommand_toStringWithBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelArithmeticCommand *self, jboolean symbolic, jboolean LaTeX, OrgGeogebraCommonKernelStringTemplate *tpl) {
  {
    jint size;
    switch ([[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      return [((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk(([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getGeoGebraCAS]))) getCASCommandWithNSString:self->name_ withJavaUtilArrayList:self->args_ withBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl];
      case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      if (self->sbToString_ == nil) self->sbToString_ = new_JavaLangStringBuilder_init();
      [((JavaLangStringBuilder *) nil_chk(self->sbToString_)) setLengthWithInt:0];
      if ([((NSString *) nil_chk(self->name_)) isEqual:@"Integral"]) {
        (void) [self->sbToString_ appendWithNSString:@"\\int"];
        id<JavaUtilSet> vars = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:0])) getVariables];
        NSString *var = @"x";
        if (vars != nil && ![vars isEmpty]) var = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((id<JavaUtilIterator>) nil_chk([vars iterator])) next])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
        switch ([self getArgumentNumber]) {
          case 1:
          (void) [self->sbToString_ appendWithNSString:@" "];
          (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:0])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
          break;
          case 2:
          (void) [self->sbToString_ appendWithNSString:@" "];
          (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:0])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
          var = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:1])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
          break;
          case 3:
          (void) [self->sbToString_ appendWithNSString:@"\\limits_{"];
          (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:1])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
          (void) [self->sbToString_ appendWithNSString:@"}^{"];
          (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:2])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
          (void) [self->sbToString_ appendWithNSString:@"}"];
          (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:0])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
          break;
          case 4:
          (void) [self->sbToString_ appendWithNSString:@"\\limits_{"];
          (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:2])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
          (void) [self->sbToString_ appendWithNSString:@"}^{"];
          (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:3])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
          (void) [self->sbToString_ appendWithNSString:@"}"];
          (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:0])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
          var = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:1])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
          break;
          default:
          break;
        }
        (void) [self->sbToString_ appendWithNSString:@"\\,\\mathrm{d}"];
        (void) [self->sbToString_ appendWithNSString:var];
        return [self->sbToString_ description];
      }
      else if ([self->name_ isEqual:@"Sum"] && [self getArgumentNumber] == 4) {
        (void) [self->sbToString_ appendWithNSString:@"\\sum_{"];
        (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((JavaUtilArrayList *) nil_chk(self->args_)) getWithInt:1])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [self->sbToString_ appendWithNSString:@"="];
        (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->args_ getWithInt:2])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [self->sbToString_ appendWithNSString:@"}^{"];
        (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->args_ getWithInt:3])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [self->sbToString_ appendWithNSString:@"}"];
        (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->args_ getWithInt:0])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        return [self->sbToString_ description];
      }
      else if ([self->name_ isEqual:@"Product"] && [self getArgumentNumber] == 4) {
        (void) [self->sbToString_ appendWithNSString:@"\\prod_{"];
        (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((JavaUtilArrayList *) nil_chk(self->args_)) getWithInt:1])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [self->sbToString_ appendWithNSString:@"="];
        (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->args_ getWithInt:2])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [self->sbToString_ appendWithNSString:@"}^{"];
        (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->args_ getWithInt:3])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [self->sbToString_ appendWithNSString:@"}"];
        (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->args_ getWithInt:0])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        return [self->sbToString_ description];
      }
      default:
      if (self->sbToString_ == nil) self->sbToString_ = new_JavaLangStringBuilder_init();
      [((JavaLangStringBuilder *) nil_chk(self->sbToString_)) setLengthWithInt:0];
      if ([tpl isPrintLocalizedCommandNames]) {
        (void) [self->sbToString_ appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization])) getCommandWithNSString:self->name_]];
      }
      else {
        (void) [self->sbToString_ appendWithNSString:self->name_];
      }
      if (LaTeX) {
        (void) [self->sbToString_ appendWithNSString:@" \\left"];
      }
      (void) [self->sbToString_ appendWithChar:'['];
      size = [((JavaUtilArrayList *) nil_chk(self->args_)) size];
      for (jint i = 0; i < size; i++) {
        (void) [self->sbToString_ appendWithNSString:OrgGeogebraCommonKernelArithmeticCommand_toStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_([self->args_ getWithInt:i], symbolic, LaTeX, tpl)];
        (void) [self->sbToString_ appendWithChar:','];
      }
      if (size > 0) (void) [self->sbToString_ deleteCharAtWithInt:[self->sbToString_ length] - 1];
      if (LaTeX) {
        (void) [self->sbToString_ appendWithNSString:@" \\right"];
      }
      (void) [self->sbToString_ appendWithChar:']'];
      return [self->sbToString_ description];
    }
  }
}

NSString *OrgGeogebraCommonKernelArithmeticCommand_toStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, jboolean symbolic, jboolean LaTeX, OrgGeogebraCommonKernelStringTemplate *tpl) {
  OrgGeogebraCommonKernelArithmeticCommand_initialize();
  if (LaTeX) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return symbolic ? [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelArithmeticCommand_xyzCASWithOrgGeogebraCommonKernelArithmeticExpressionNode_withInt_withBoolean_withJavaUtilArrayList_(OrgGeogebraCommonKernelArithmeticExpressionNode *en, jint i, jboolean mayCheck, JavaUtilArrayList *undecided) {
  OrgGeogebraCommonKernelArithmeticCommand_initialize();
  IOSObjectArray *ops = [IOSObjectArray newArrayWithObjects:(id[]){ OrgGeogebraCommonPluginOperationEnum_get_XCOORD(), OrgGeogebraCommonPluginOperationEnum_get_YCOORD(), OrgGeogebraCommonPluginOperationEnum_get_ZCOORD() } count:3 type:OrgGeogebraCommonPluginOperationEnum_class_()];
  OrgGeogebraCommonKernelKernel *k = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getKernel];
  OrgGeogebraCommonKernelArithmeticExpressionNode *en2;
  if ([en evaluatesToList]) {
    OrgGeogebraCommonKernelArithmeticCommand *cmd = new_OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(k, @"Element", YES, mayCheck);
    [cmd addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:en];
    [cmd addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(k, i + 1) wrap]];
    en2 = [cmd wrap];
  }
  else if ([en hasCoords]) {
    en2 = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(k, [en unwrap], IOSObjectArray_Get(ops, i), nil);
  }
  else {
    jchar funName = (jchar) ('x' + i);
    en2 = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(k, new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(k, JreStrcat("C", funName)), OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION(), en);
    [((JavaUtilArrayList *) nil_chk(undecided)) addWithId:en2];
  }
  OrgGeogebraCommonUtilDebugLog_debugWithId_(en2);
  return en2;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticCommand)
