//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/arithmetic/MyStringBuffer.java
//


#include "J2ObjC_source.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"

@interface OrgGeogebraCommonKernelArithmeticMyStringBuffer () {
 @public
  JavaLangStringBuilder *sb_;
  OrgGeogebraCommonKernelKernel *kernel_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticMyStringBuffer, sb_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticMyStringBuffer, kernel_, OrgGeogebraCommonKernelKernel *)

@implementation OrgGeogebraCommonKernelArithmeticMyStringBuffer

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                         withNSString:(NSString *)str {
  OrgGeogebraCommonKernelArithmeticMyStringBuffer_initWithOrgGeogebraCommonKernelKernel_withNSString_(self, kernel, str);
  return self;
}

- (void)appendWithNSString:(NSString *)str {
  [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:str];
}

- (void)insertWithInt:(jint)pos
         withNSString:(NSString *)str {
  [((JavaLangStringBuilder *) nil_chk(sb_)) insertWithInt:pos withNSString:str];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *temp = [new_JavaLangStringBuilder_init() autorelease];
  [temp appendWithNSString:@"\""];
  [temp appendWithJavaLangCharSequence:sb_];
  [temp appendWithNSString:@"\""];
  return [temp description];
}

- (void)resolveVariables {
}

- (jboolean)isConstant {
  return YES;
}

- (jboolean)isLeaf {
  return YES;
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)evaluatesToText {
  return YES;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernelForCopy {
  return [self getText];
}

- (JavaUtilHashSet *)getVariables {
  return nil;
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((JavaLangStringBuilder *) nil_chk(sb_)) description];
}

- (NSString *)toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuffer *sb2 = [new_JavaLangStringBuffer_initWithInt_([((JavaLangStringBuilder *) nil_chk(sb_)) length] + 2) autorelease];
  [sb2 appendWithChar:'"'];
  [sb2 appendWithJavaLangCharSequence:sb_];
  [sb2 appendWithChar:'"'];
  return [sb2 description];
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((JavaLangStringBuilder *) nil_chk(sb_)) description];
}

- (OrgGeogebraCommonKernelArithmeticMyStringBuffer *)getText {
  return [new_OrgGeogebraCommonKernelArithmeticMyStringBuffer_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, [((JavaLangStringBuilder *) nil_chk(sb_)) description]) autorelease];
}

- (jboolean)containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

- (OrgGeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self) autorelease];
}

- (void)dealloc {
  RELEASE_(sb_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:withNSString:", "MyStringBuffer", NULL, 0x1, NULL, NULL },
    { "appendWithNSString:", "append", "V", 0x1, NULL, NULL },
    { "insertWithInt:withNSString:", "insert", "V", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToText", NULL, "Z", 0x1, NULL, NULL },
    { "deepCopyWithOrgGeogebraCommonKernelKernel:", "deepCopy", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getText", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyStringBuffer;", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "getKernel", NULL, "Lorg.geogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "wrap", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticMyStringBuffer = { 2, "MyStringBuffer", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 18, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticMyStringBuffer;
}

@end

void OrgGeogebraCommonKernelArithmeticMyStringBuffer_initWithOrgGeogebraCommonKernelKernel_withNSString_(OrgGeogebraCommonKernelArithmeticMyStringBuffer *self, OrgGeogebraCommonKernelKernel *kernel, NSString *str) {
  OrgGeogebraCommonKernelArithmeticValidExpression_init(self);
  OrgGeogebraCommonKernelArithmeticMyStringBuffer_setAndConsume_sb_(self, new_JavaLangStringBuilder_initWithNSString_(str));
  OrgGeogebraCommonKernelArithmeticMyStringBuffer_set_kernel_(self, kernel);
}

OrgGeogebraCommonKernelArithmeticMyStringBuffer *new_OrgGeogebraCommonKernelArithmeticMyStringBuffer_initWithOrgGeogebraCommonKernelKernel_withNSString_(OrgGeogebraCommonKernelKernel *kernel, NSString *str) {
  OrgGeogebraCommonKernelArithmeticMyStringBuffer *self = [OrgGeogebraCommonKernelArithmeticMyStringBuffer alloc];
  OrgGeogebraCommonKernelArithmeticMyStringBuffer_initWithOrgGeogebraCommonKernelKernel_withNSString_(self, kernel, str);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticMyStringBuffer)
