//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/arithmetic/SymbolicPolyFunction.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "org/geogebra/common/kernel/arithmetic/SymbolicPolyFunction.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction () {
 @public
  IOSObjectArray *symbCoeffs_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction, symbCoeffs_, IOSObjectArray *)

@implementation OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction

- (instancetype)initWithInt:(jint)degree {
  OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction_initWithInt_(self, degree);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticExpressionNodeArray:(IOSObjectArray *)coeff {
  OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNodeArray_(self, coeff);
  return self;
}

- (IOSObjectArray *)getSymbolicCoeffs {
  return symbCoeffs_;
}

- (jboolean)updateCoeffValues {
  @try {
    jdouble coeff;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(symbCoeffs_))->size_; i++) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> eval = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(symbCoeffs_, i))) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      coeff = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(eval, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
      if (JavaLangDouble_isNaNWithDouble_(coeff) || JavaLangDouble_isInfiniteWithDouble_(coeff)) return NO;
      *IOSDoubleArray_GetRef(nil_chk(coeffs_), i) = coeff;
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"updateCoeffValues: ");
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
  @catch (JavaLangError *err) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"updateCoeffValues: ");
    [((JavaLangError *) nil_chk(err)) printStackTrace];
    return NO;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "SymbolicPolyFunction", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelArithmeticExpressionNodeArray:", "SymbolicPolyFunction", NULL, 0x1, NULL, NULL },
    { "getSymbolicCoeffs", NULL, "[Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "updateCoeffValues", NULL, "Z", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "symbCoeffs_", NULL, 0x2, "[Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction = { 2, "SymbolicPolyFunction", "org.geogebra.common.kernel.arithmetic", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction;
}

@end

void OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction_initWithInt_(OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction *self, jint degree) {
  (void) OrgGeogebraCommonKernelArithmeticPolyFunction_initWithInt_(self, degree);
  self->symbCoeffs_ = [IOSObjectArray newArrayWithLength:degree + 1 type:OrgGeogebraCommonKernelArithmeticExpressionNode_class_()];
}

OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction *new_OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction_initWithInt_(jint degree) {
  OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction *self = [OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction alloc];
  OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction_initWithInt_(self, degree);
  return self;
}

void OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNodeArray_(OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction *self, IOSObjectArray *coeff) {
  (void) OrgGeogebraCommonKernelArithmeticPolyFunction_initWithInt_(self, ((IOSObjectArray *) nil_chk(coeff))->size_ - 1);
  self->symbCoeffs_ = coeff;
}

OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction *new_OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNodeArray_(IOSObjectArray *coeff) {
  OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction *self = [OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction alloc];
  OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNodeArray_(self, coeff);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticSymbolicPolyFunction)
