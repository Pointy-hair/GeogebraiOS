//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/arithmetic/Traversing.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gwt/regexp/shared/RegExp.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/gui/view/spreadsheet/RelativeCopy.h"
#include "org/geogebra/common/kernel/CASGenericInterface.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/GeoGebraCasInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/MyNumberPair.h"
#include "org/geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/arithmetic/Variable.h"
#include "org/geogebra/common/kernel/arithmetic3D/MyVec3DNode.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoDummyVariable.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonKernelArithmeticTraversing : NSObject
@end

@interface OrgGeogebraCommonKernelArithmeticTraversing_Replacer () {
 @public
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> oldObj_;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> newObj_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_Replacer, oldObj_, id<OrgGeogebraCommonKernelArithmeticExpressionValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_Replacer, newObj_, id<OrgGeogebraCommonKernelArithmeticExpressionValue>)

static OrgGeogebraCommonKernelArithmeticTraversing_Replacer *OrgGeogebraCommonKernelArithmeticTraversing_Replacer_replacer_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_Replacer, replacer_, OrgGeogebraCommonKernelArithmeticTraversing_Replacer *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_Replacer, replacer_, OrgGeogebraCommonKernelArithmeticTraversing_Replacer *)

@interface OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer () {
 @public
  OrgGeogebraCommonMainApp *app_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer, app_, OrgGeogebraCommonMainApp *)

static OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer *OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_replacer_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer, replacer_, OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer, replacer_, OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer *)

static OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover *OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover_remover_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover, remover_, OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover *)

@interface OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer () {
 @public
  OrgGeogebraCommonKernelArithmeticFunctionVariable *fv_;
  jint replacements_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer, fv_, OrgGeogebraCommonKernelArithmeticFunctionVariable *)

static OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_replacer_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer, replacer_, OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer, replacer_, OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *)

@interface OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer () {
 @public
  NSString *var_;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> newObj_;
  jboolean didReplacement__;
  jboolean replaceFVs_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer, var_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer, newObj_, id<OrgGeogebraCommonKernelArithmeticExpressionValue>)

static OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer, replacer_, OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer, replacer_, OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *)

@interface OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer () {
 @public
  id<JavaUtilList> vars_;
  id<JavaUtilList> newObjs_;
  jint replacements_;
  OrgGeogebraCommonKernelKernel *kernel_;
}

+ (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev;

+ (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getVarWithNSString:(NSString *)var;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer, vars_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer, newObjs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer, kernel_, OrgGeogebraCommonKernelKernel *)

static OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer, replacer_, OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer, replacer_, OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *)

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_containsWithOrgGeogebraCommonKernelArithmeticExpressionValue_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev);

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getVarWithNSString_(NSString *var);

@interface OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer () {
 @public
  jint dx_;
  jint dy_;
  JavaUtilArrayList *variables_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer, variables_, JavaUtilArrayList *)

@interface OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables () {
 @public
  OrgGeogebraCommonKernelKernel *kernel_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables, kernel_, OrgGeogebraCommonKernelKernel *)

@interface OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables () {
 @public
  JavaUtilTreeSet *tree_;
  JavaUtilTreeSet *localTree_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables, tree_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables, localTree_, JavaUtilTreeSet *)

@interface OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables () {
 @public
  JavaUtilArrayList *al_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables, al_, JavaUtilArrayList *)

@interface OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer () {
 @public
  OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer, arbconst_, OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *)

static OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_replacer_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer, replacer_, OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer, replacer_, OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *)

@interface OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer () {
 @public
  jboolean toRoot_;
}

@end

static jint OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_MAX_ROOT_ = 99;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer, MAX_ROOT_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer, MAX_ROOT_, jint)

static OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_replacer_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer, replacer_, OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer, replacer_, OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *)

static OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover *OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover_collector_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover, collector_, OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover, collector_, OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover *)

@interface OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector () {
 @public
  id<JavaUtilSet> commands_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector, commands_, id<JavaUtilSet>)

static OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector *OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_collector_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector, collector_, OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector, collector_, OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector *)

@interface OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector () {
 @public
  id<JavaUtilSet> commands_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector, commands_, id<JavaUtilSet>)

static OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector *OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_collector_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector, collector_, OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector, collector_, OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector *)

@interface OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector () {
 @public
  id<JavaUtilSet> commands_;
}

- (void)addWithOrgGeogebraCommonKernelGeosGeoDummyVariable:(OrgGeogebraCommonKernelGeosGeoDummyVariable *)dummy;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector, commands_, id<JavaUtilSet>)

static OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_collector_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector, collector_, OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector, collector_, OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *)

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_addWithOrgGeogebraCommonKernelGeosGeoDummyVariable_(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *self, OrgGeogebraCommonKernelGeosGeoDummyVariable *dummy);

@interface OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector () {
 @public
  id<JavaUtilSet> commands_;
}

- (void)addWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)dummy;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector, commands_, id<JavaUtilSet>)

static OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_collector_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector, collector_, OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector, collector_, OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *)

__attribute__((unused)) static void OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> dummy);

@interface OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer () {
 @public
  id<JavaUtilSet> commands_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer, commands_, id<JavaUtilSet>)

static OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_collector_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer, collector_, OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer, collector_, OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *)

@interface OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander ()

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)expandWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

+ (jboolean)containsWithOrgGeogebraCommonKernelGeosGeoDummyVariable:(OrgGeogebraCommonKernelGeosGeoDummyVariable *)gdv;

@end

static OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_collector_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander, collector_, OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander, collector_, OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *)

static IOSObjectArray *OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_variables_ = nil;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander, variables_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander, variables_, IOSObjectArray *)

__attribute__((unused)) static id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_containsWithOrgGeogebraCommonKernelGeosGeoDummyVariable_(OrgGeogebraCommonKernelGeosGeoDummyVariable *gdv);

static OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator *OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_creator_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator, creator_, OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator, creator_, OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator *)

static OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover *OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_remover_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover, remover_, OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover, remover_, OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover *)

static IOSObjectArray *OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_commands_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover, commands_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover, commands_, IOSObjectArray *)

@implementation OrgGeogebraCommonKernelArithmeticTraversing

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x401, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.arithmetic.Traversing$Replacer;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$CommandReplacer;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$GgbVectRemover;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$VariablePolyReplacer;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$GeoDummyReplacer;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$VariableReplacer;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$SpreadsheetVariableRenamer;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$ReplaceUndefinedVariables;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$CollectUndefinedVariables;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$CollectFunctionVariables;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$ArbconstReplacer;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$PowerRootReplacer;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$DiffReplacer;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$PrefixRemover;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$CommandCollector;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$FVarCollector;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$NonFunctionCollector;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$DummyVariableCollector;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$NonFunctionReplacer;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$FunctionExpander;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$FunctionCreator;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$CommandRemover;", "Lorg.geogebra.common.kernel.arithmetic.Traversing$CASCommandReplacer;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing = { 2, "Traversing", "org.geogebra.common.kernel.arithmetic", NULL, 0x609, 1, methods, 0, NULL, 0, NULL, 23, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_Replacer)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_Replacer

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if (ev == oldObj_) return newObj_;
  return ev;
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_Replacer *)getReplacerWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)original
                                                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)replacement {
  return OrgGeogebraCommonKernelArithmeticTraversing_Replacer_getReplacerWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(original, replacement);
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_Replacer_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(oldObj_);
  RELEASE_(newObj_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_Replacer class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_Replacer_replacer_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_Replacer_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_Replacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getReplacerWithOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "getReplacer", "Lorg.geogebra.common.kernel.arithmetic.Traversing$Replacer;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "oldObj_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "newObj_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "replacer_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$Replacer;", &OrgGeogebraCommonKernelArithmeticTraversing_Replacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_Replacer = { 2, "Replacer", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_Replacer;
}

@end

OrgGeogebraCommonKernelArithmeticTraversing_Replacer *OrgGeogebraCommonKernelArithmeticTraversing_Replacer_getReplacerWithOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> original, id<OrgGeogebraCommonKernelArithmeticExpressionValue> replacement) {
  OrgGeogebraCommonKernelArithmeticTraversing_Replacer_initialize();
  OrgGeogebraCommonKernelArithmeticTraversing_Replacer_set_oldObj_(nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_Replacer_replacer_), original);
  OrgGeogebraCommonKernelArithmeticTraversing_Replacer_set_newObj_(OrgGeogebraCommonKernelArithmeticTraversing_Replacer_replacer_, replacement);
  return OrgGeogebraCommonKernelArithmeticTraversing_Replacer_replacer_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_Replacer_init(OrgGeogebraCommonKernelArithmeticTraversing_Replacer *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_Replacer *new_OrgGeogebraCommonKernelArithmeticTraversing_Replacer_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_Replacer *self = [OrgGeogebraCommonKernelArithmeticTraversing_Replacer alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_Replacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_Replacer)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
    OrgGeogebraCommonKernelArithmeticCommand *c = (OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticCommand class]);
    NSString *cmdName = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getReverseCommandWithNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName]];
    JavaLangThrowable *t = nil;
    @try {
      OrgGeogebraCommonKernelCommandsCommandsEnum_valueOfWithNSString_(cmdName);
    }
    @catch (JavaLangThrowable *t1) {
      t = t1;
    }
    if (t == nil) return ev;
    OrgGeogebraCommonKernelArithmeticMyList *argList = [new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_([c getKernel]) autorelease];
    for (jint i = 0; i < [c getArgumentNumber]; i++) {
      [argList addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([c getItemWithInt:i])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:self]];
    }
    return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_([c getKernel], [new_OrgGeogebraCommonKernelGeosGeoDummyVariable_initWithOrgGeogebraCommonKernelConstruction_withNSString_([((OrgGeogebraCommonKernelKernel *) nil_chk([c getKernel])) getConstruction], [c getName]) autorelease], OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR(), argList) autorelease];
  }
  return ev;
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer *)getReplacerWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  return OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_getReplacerWithOrgGeogebraCommonMainApp_(app);
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(app_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_replacer_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getReplacerWithOrgGeogebraCommonMainApp:", "getReplacer", "Lorg.geogebra.common.kernel.arithmetic.Traversing$CommandReplacer;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lorg.geogebra.common.main.App;", NULL, NULL,  },
    { "replacer_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$CommandReplacer;", &OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer = { 2, "CommandReplacer", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer;
}

@end

OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer *OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_getReplacerWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_initialize();
  OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_set_app_(nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_replacer_), app);
  return OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_replacer_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_init(OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer *new_OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer *self = [OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
    OrgGeogebraCommonKernelArithmeticCommand *command = (OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticCommand class]);
    if ([((NSString *) nil_chk([((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(command)) getName])) isEqual:@"ggbvect"]) {
      OrgGeogebraCommonKernelArithmeticExpressionNode *en = [command getArgumentWithInt:0];
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> unwrapped = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) unwrap];
      if ([unwrapped isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyVecNode class]]) {
        OrgGeogebraCommonKernelArithmeticMyVecNode *vecNode = (OrgGeogebraCommonKernelArithmeticMyVecNode *) check_class_cast(unwrapped, [OrgGeogebraCommonKernelArithmeticMyVecNode class]);
        [((OrgGeogebraCommonKernelArithmeticMyVecNode *) nil_chk(vecNode)) setCASVector];
        return vecNode;
      }
      else if ([unwrapped isKindOfClass:[OrgGeogebraCommonKernelArithmetic3DMyVec3DNode class]]) {
        OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *vec3DNode = (OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *) check_class_cast(unwrapped, [OrgGeogebraCommonKernelArithmetic3DMyVec3DNode class]);
        [((OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *) nil_chk(vec3DNode)) setCASVector];
        return vec3DNode;
      }
    }
  }
  return ev;
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover *)getInstance {
  return OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover_getInstance();
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover_init(self);
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover_remover_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getInstance", NULL, "Lorg.geogebra.common.kernel.arithmetic.Traversing$GgbVectRemover;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "remover_", NULL, 0x1a, "Lorg.geogebra.common.kernel.arithmetic.Traversing$GgbVectRemover;", &OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover_remover_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover = { 2, "GgbVectRemover", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover;
}

@end

OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover *OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover_getInstance() {
  OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover_initialize();
  return OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover_remover_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover_init(OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover *new_OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover *self = [OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if (([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]] || [ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] || [ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) && [((NSString *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv_)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
    replacements_++;
    return fv_;
  }
  return ev;
}

- (jint)getReplacements {
  return replacements_;
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *)getReplacerWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv {
  return OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_getReplacerWithOrgGeogebraCommonKernelArithmeticFunctionVariable_(fv);
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(fv_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_replacer_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getReplacements", NULL, "I", 0x1, NULL, NULL },
    { "getReplacerWithOrgGeogebraCommonKernelArithmeticFunctionVariable:", "getReplacer", "Lorg.geogebra.common.kernel.arithmetic.Traversing$VariablePolyReplacer;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fv_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.FunctionVariable;", NULL, NULL,  },
    { "replacements_", NULL, 0x2, "I", NULL, NULL,  },
    { "replacer_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$VariablePolyReplacer;", &OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer = { 2, "VariablePolyReplacer", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer;
}

@end

OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_getReplacerWithOrgGeogebraCommonKernelArithmeticFunctionVariable_(OrgGeogebraCommonKernelArithmeticFunctionVariable *fv) {
  OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_initialize();
  OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_set_fv_(nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_replacer_), fv);
  return OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_replacer_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_init(OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *new_OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *self = [OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  jboolean hitClass = [ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]] || (replaceFVs_ && [ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]);
  if (!hitClass || ![((NSString *) nil_chk(var_)) isEqual:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
    return ev;
  }
  didReplacement__ = YES;
  return newObj_;
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *)getReplacerWithNSString:(NSString *)varStr
                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)replacement
                                                                              withBoolean:(jboolean)replaceFVs {
  return OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_getReplacerWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(varStr, replacement, replaceFVs);
}

- (jboolean)didReplacement {
  return didReplacement__;
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(var_);
  RELEASE_(newObj_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getReplacerWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionValue:withBoolean:", "getReplacer", "Lorg.geogebra.common.kernel.arithmetic.Traversing$GeoDummyReplacer;", 0x9, NULL, NULL },
    { "didReplacement", NULL, "Z", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "var_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "newObj_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "didReplacement__", "didReplacement", 0x2, "Z", NULL, NULL,  },
    { "replaceFVs_", NULL, 0x2, "Z", NULL, NULL,  },
    { "replacer_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$GeoDummyReplacer;", &OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer = { 2, "GeoDummyReplacer", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer;
}

@end

OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_getReplacerWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(NSString *varStr, id<OrgGeogebraCommonKernelArithmeticExpressionValue> replacement, jboolean replaceFVs) {
  OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_initialize();
  OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_set_var_(nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_), varStr);
  OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_set_newObj_(OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_, replacement);
  OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_->didReplacement__ = NO;
  OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_->replaceFVs_ = replaceFVs;
  return OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_init(OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *new_OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *self = [OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> val;
  if ((val = OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_containsWithOrgGeogebraCommonKernelArithmeticExpressionValue_(ev)) != nil) return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, val) autorelease];
  if (!([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]] || [ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] || [ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]])) return ev;
  if ((val = OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getVarWithNSString_([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) == nil) {
    return ev;
  }
  replacements_++;
  return val;
}

- (jint)getReplacements {
  return replacements_;
}

+ (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_containsWithOrgGeogebraCommonKernelArithmeticExpressionValue_(ev);
}

+ (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)getVarWithNSString:(NSString *)var {
  return OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getVarWithNSString_(var);
}

+ (void)addVarsWithNSString:(NSString *)varStr
withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)replacement {
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_addVarsWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_(varStr, replacement);
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *)getReplacerWithNSString:(NSString *)varStr
                                     withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)replacement
                                                        withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(varStr, replacement, kernel);
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *)getReplacer {
  return OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacer();
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(vars_);
  RELEASE_(newObjs_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getReplacements", NULL, "I", 0x1, NULL, NULL },
    { "containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0xa, NULL, NULL },
    { "getVarWithNSString:", "getVar", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0xa, NULL, NULL },
    { "addVarsWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "addVars", "V", 0x9, NULL, NULL },
    { "getReplacerWithNSString:withOrgGeogebraCommonKernelArithmeticExpressionValue:withOrgGeogebraCommonKernelKernel:", "getReplacer", "Lorg.geogebra.common.kernel.arithmetic.Traversing$VariableReplacer;", 0x9, NULL, NULL },
    { "getReplacer", NULL, "Lorg.geogebra.common.kernel.arithmetic.Traversing$VariableReplacer;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vars_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/String;>;",  },
    { "newObjs_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/geogebra/common/kernel/arithmetic/ExpressionValue;>;",  },
    { "replacements_", NULL, 0x2, "I", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "replacer_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$VariableReplacer;", &OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer = { 2, "VariableReplacer", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 8, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer;
}

@end

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_containsWithOrgGeogebraCommonKernelArithmeticExpressionValue_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev) {
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_initialize();
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(((OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *) nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_))->newObjs_)) size]; i++) {
    if ([OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->newObjs_ getWithInt:i] == ev) {
      return [OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->newObjs_ getWithInt:i];
    }
  }
  return nil;
}

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getVarWithNSString_(NSString *var) {
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_initialize();
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(((OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *) nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_))->vars_)) size]; i++) {
    if ([((NSString *) nil_chk(var)) isEqual:[OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->vars_ getWithInt:i]]) {
      return [((id<JavaUtilList>) nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->newObjs_)) getWithInt:i];
    }
  }
  return nil;
}

void OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_addVarsWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_(NSString *varStr, id<OrgGeogebraCommonKernelArithmeticExpressionValue> replacement) {
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_initialize();
  [((id<JavaUtilList>) nil_chk(((OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *) nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_))->vars_)) addWithId:varStr];
  [((id<JavaUtilList>) nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->newObjs_)) addWithId:replacement];
}

OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(NSString *varStr, id<OrgGeogebraCommonKernelArithmeticExpressionValue> replacement, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_initialize();
  [((id<JavaUtilList>) nil_chk(((OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *) nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_))->vars_)) clear];
  [((id<JavaUtilList>) nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->newObjs_)) clear];
  [OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->vars_ addWithId:varStr];
  [OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->newObjs_ addWithId:replacement];
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->replacements_ = 0;
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_set_kernel_(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_, kernel);
  return OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_;
}

OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacer() {
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_initialize();
  [((id<JavaUtilList>) nil_chk(((OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *) nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_))->vars_)) clear];
  [((id<JavaUtilList>) nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->newObjs_)) clear];
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->replacements_ = 0;
  return OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_init(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *self) {
  NSObject_init(self);
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_setAndConsume_vars_(self, new_JavaUtilArrayList_init());
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_setAndConsume_newObjs_(self, new_JavaUtilArrayList_init());
}

OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *new_OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *self = [OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer

- (instancetype)initWithInt:(jint)dx
                    withInt:(jint)dy {
  OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer_initWithInt_withInt_(self, dx, dy);
  return self;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]] && ![((JavaUtilArrayList *) nil_chk(variables_)) containsWithId:ev]) {
    OrgGeogebraCommonKernelArithmeticVariable *v = (OrgGeogebraCommonKernelArithmeticVariable *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticVariable class]);
    NSString *name = [((OrgGeogebraCommonKernelArithmeticVariable *) nil_chk(v)) getNameWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if ([((ComGoogleGwtRegexpSharedRegExp *) nil_chk(OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_get_spreadsheetPattern_())) testWithNSString:name]) {
      NSString *newName = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_updateCellNameWithOffsetWithNSString_withInt_withInt_(name, dx_, dy_);
      [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([v getKernel])) getConstruction])) lookupLabelWithNSString:newName withBoolean:YES];
      [v setNameWithNSString:newName];
      [variables_ addWithId:v];
    }
  }
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoElement class]]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoElement class]);
    NSString *name = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelSimple];
    if ([((ComGoogleGwtRegexpSharedRegExp *) nil_chk(OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_get_spreadsheetPattern_())) testWithNSString:name]) {
      NSString *newName = OrgGeogebraCommonGuiViewSpreadsheetRelativeCopy_updateCellNameWithOffsetWithNSString_withInt_withInt_(name, dx_, dy_);
      return [((OrgGeogebraCommonKernelConstruction *) nil_chk([geo getConstruction])) lookupLabelWithNSString:newName withBoolean:YES];
    }
  }
  return ev;
}

- (void)dealloc {
  RELEASE_(variables_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "SpreadsheetVariableRenamer", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dx_", NULL, 0x2, "I", NULL, NULL,  },
    { "dy_", NULL, 0x2, "I", NULL, NULL,  },
    { "variables_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/arithmetic/Variable;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer = { 2, "SpreadsheetVariableRenamer", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 2, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer;
}

@end

void OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer_initWithInt_withInt_(OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer *self, jint dx, jint dy) {
  NSObject_init(self);
  OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer_setAndConsume_variables_(self, new_JavaUtilArrayList_init());
  self->dx_ = dx;
  self->dy_ = dy;
  [self->variables_ clear];
}

OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer *new_OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer_initWithInt_withInt_(jint dx, jint dy) {
  OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer *self = [OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer_initWithInt_withInt_(self, dx, dy);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]]) {
    OrgGeogebraCommonKernelArithmeticVariable *v = (OrgGeogebraCommonKernelArithmeticVariable *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticVariable class]);
    NSString *name = [((OrgGeogebraCommonKernelArithmeticVariable *) nil_chk(v)) getNameWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> replace = [kernel_ lookupLabelWithNSString:name withBoolean:YES withBoolean:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isResolveUnkownVarsAsDummyGeos]];
    if (replace == nil) {
      replace = OrgGeogebraCommonKernelArithmeticVariable_replacementWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, name);
    }
    if ([replace isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]] && ![((NSString *) nil_chk(name)) isEqual:[((OrgGeogebraCommonKernelConstruction *) nil_chk([kernel_ getConstruction])) getRegisteredFunctionVariable]]) {
      name = [((OrgGeogebraCommonKernelArithmeticVariable *) nil_chk(((OrgGeogebraCommonKernelArithmeticVariable *) check_class_cast(replace, [OrgGeogebraCommonKernelArithmeticVariable class])))) getNameWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      OrgGeogebraCommonKernelGeosGeoNumeric *slider = [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_([kernel_ getConstruction], name, 1) autorelease];
      OrgGeogebraCommonKernelGeosGeoNumeric_setSliderFromDefaultWithOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(slider, NO);
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"autocreating slider ", name));
    }
  }
  return ev;
}

- (void)dealloc {
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "ReplaceUndefinedVariables", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x12, "Lorg.geogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables = { 2, "ReplaceUndefinedVariables", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables;
}

@end

void OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables *self, OrgGeogebraCommonKernelKernel *kernel) {
  NSObject_init(self);
  OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables_set_kernel_(self, kernel);
}

OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables *new_OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables *self = [OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables

- (JavaUtilTreeSet *)getResult {
  [((JavaUtilTreeSet *) nil_chk(tree_)) removeAllWithJavaUtilCollection:localTree_];
  return tree_;
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_init(self);
  return self;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]]) {
    OrgGeogebraCommonKernelArithmeticVariable *v = (OrgGeogebraCommonKernelArithmeticVariable *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticVariable class]);
    NSString *name = [((OrgGeogebraCommonKernelArithmeticVariable *) nil_chk(v)) getNameWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> ret;
    ret = [((OrgGeogebraCommonKernelKernel *) nil_chk([v getKernel])) lookupLabelWithNSString:name];
    if (ret == nil) {
      ret = OrgGeogebraCommonKernelArithmeticVariable_replacementWithOrgGeogebraCommonKernelKernel_withNSString_([v getKernel], name);
    }
    if ([ret isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]] && ![((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([v getKernel])) getConstruction])) isRegistredFunctionVariableWithNSString:name]) {
      [((JavaUtilTreeSet *) nil_chk(tree_)) addWithId:[((OrgGeogebraCommonKernelArithmeticVariable *) nil_chk(((OrgGeogebraCommonKernelArithmeticVariable *) check_class_cast(ret, [OrgGeogebraCommonKernelArithmeticVariable class])))) getNameWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    }
  }
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
    OrgGeogebraCommonKernelArithmeticCommand *com = (OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticCommand class]);
    if (([@"Sequence" isEqual:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(com)) getName]] && [com getArgumentNumber] > 1) || [@"KeepIf" isEqual:[com getName]] || [@"CountIf" isEqual:[com getName]]) {
      [((JavaUtilTreeSet *) nil_chk(localTree_)) addWithId:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([com getArgumentWithInt:1])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    }
    else if ([@"Zip" isEqual:[com getName]]) {
      for (jint i = 1; i < [com getArgumentNumber]; i += 2) {
        [((JavaUtilTreeSet *) nil_chk(localTree_)) addWithId:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([com getArgumentWithInt:i])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      }
    }
    else if ([@"TriangleCurve" isEqual:[com getName]]) {
      [((JavaUtilTreeSet *) nil_chk(localTree_)) addWithId:@"A"];
      [localTree_ addWithId:@"B"];
      [localTree_ addWithId:@"C"];
    }
  }
  return ev;
}

- (void)dealloc {
  RELEASE_(tree_);
  RELEASE_(localTree_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getResult", NULL, "Ljava.util.TreeSet;", 0x1, NULL, NULL },
    { "init", "CollectUndefinedVariables", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "tree_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Ljava/lang/String;>;",  },
    { "localTree_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Ljava/lang/String;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables = { 2, "CollectUndefinedVariables", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables;
}

@end

void OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_init(OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables *self) {
  NSObject_init(self);
  OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_setAndConsume_tree_(self, new_JavaUtilTreeSet_init());
  OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_setAndConsume_localTree_(self, new_JavaUtilTreeSet_init());
}

OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables *new_OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables *self = [OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables

- (JavaUtilArrayList *)getResult {
  return al_;
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables_init(self);
  return self;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
    [((JavaUtilArrayList *) nil_chk(al_)) addWithId:(OrgGeogebraCommonKernelArithmeticFunctionVariable *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticFunctionVariable class])];
  }
  return ev;
}

- (void)dealloc {
  RELEASE_(al_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getResult", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "init", "CollectFunctionVariables", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "al_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/arithmetic/FunctionVariable;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables = { 2, "CollectFunctionVariables", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables;
}

@end

void OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables_init(OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables *self) {
  NSObject_init(self);
  OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables_setAndConsume_al_(self, new_JavaUtilArrayList_init());
}

OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables *new_OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables *self = [OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) return ev;
  OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
  if ([en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_ARBCONST()) {
    return [((OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *) nil_chk(arbconst_)) nextConstWithOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *) check_class_cast([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getLeft])) unwrap], [OrgGeogebraCommonKernelArithmeticMyDouble class])];
  }
  if ([en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_ARBINT()) {
    return [((OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *) nil_chk(arbconst_)) nextIntWithOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *) check_class_cast([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getLeft])) unwrap], [OrgGeogebraCommonKernelArithmeticMyDouble class])];
  }
  if ([en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_ARBCOMPLEX()) {
    return [((OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *) nil_chk(arbconst_)) nextComplexWithOrgGeogebraCommonKernelArithmeticMyDouble:(OrgGeogebraCommonKernelArithmeticMyDouble *) check_class_cast([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getLeft])) unwrap], [OrgGeogebraCommonKernelArithmeticMyDouble class])];
  }
  return en;
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *)getReplacerWithOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:(OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst {
  return OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_getReplacerWithOrgGeogebraCommonKernelArithmeticMyArbitraryConstant_(arbconst);
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(arbconst_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_replacer_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getReplacerWithOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:", "getReplacer", "Lorg.geogebra.common.kernel.arithmetic.Traversing$ArbconstReplacer;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "arbconst_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyArbitraryConstant;", NULL, NULL,  },
    { "replacer_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$ArbconstReplacer;", &OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer = { 2, "ArbconstReplacer", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer;
}

@end

OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_getReplacerWithOrgGeogebraCommonKernelArithmeticMyArbitraryConstant_(OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst) {
  OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_initialize();
  OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_set_arbconst_(nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_replacer_), arbconst);
  return OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_replacer_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_init(OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *new_OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *self = [OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) return ev;
  [((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) replacePowersRootsWithBoolean:toRoot_ withInt:OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_MAX_ROOT_];
  return ev;
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *)getReplacerWithBoolean:(jboolean)toRoot {
  return OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_getReplacerWithBoolean_(toRoot);
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_init(self);
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_replacer_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getReplacerWithBoolean:", "getReplacer", "Lorg.geogebra.common.kernel.arithmetic.Traversing$PowerRootReplacer;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "toRoot_", NULL, 0x2, "Z", NULL, NULL,  },
    { "MAX_ROOT_", NULL, 0xa, "I", &OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_MAX_ROOT_, NULL,  },
    { "replacer_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$PowerRootReplacer;", &OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer = { 2, "PowerRootReplacer", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer;
}

@end

OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_getReplacerWithBoolean_(jboolean toRoot) {
  OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_initialize();
  ((OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *) nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_replacer_))->toRoot_ = toRoot;
  return OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_replacer_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_init(OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *new_OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *self = [OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_PowerRootReplacer)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer)

OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer *OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer_INSTANCE_;

@implementation OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if (![((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) {
    return ev;
  }
  OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
  if ([en getOperation] != OrgGeogebraCommonPluginOperationEnum_get_DIFF()) {
    return ev;
  }
  OrgGeogebraCommonKernelKernel *kernel = [en getKernel];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> expr = [en getLeft];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> var = [en getRight];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> deg;
  if ([expr isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyNumberPair class]]) {
    var = ((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(expr, [OrgGeogebraCommonKernelArithmeticMyNumberPair class]))))->y_;
    expr = ((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(expr, [OrgGeogebraCommonKernelArithmeticMyNumberPair class]))))->x_;
    deg = [en getRight];
  }
  else {
    deg = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, 1) autorelease];
  }
  NSString *expStr = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(expr)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  jint nameEnd = [((NSString *) nil_chk(expStr)) indexOf:'('];
  if ([expStr indexOf:'['] > 0) {
    nameEnd = nameEnd > 0 ? JavaLangMath_minWithInt_withInt_(nameEnd, [expStr indexOf:'[']) : [expStr indexOf:'['];
  }
  NSString *funLabel = nameEnd > 0 ? [expStr substring:0 endIndex:nameEnd] : expStr;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> diffArg = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, JavaLangDouble_NaN) autorelease];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> mult = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, 1) autorelease];
  if ([[expr unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
    diffArg = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(((OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast([expr unwrap], [OrgGeogebraCommonKernelArithmeticCommand class])))) getArgumentWithInt:0];
    if ([[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(diffArg)) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [((NSString *) nil_chk([diffArg toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(var)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
    }
    else if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(deg)) evaluateDouble], 1)) {
      id<OrgGeogebraCommonKernelCASGenericInterface> cas = [((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getGeoGebraCAS])) getCurrentCAS];
      OrgGeogebraCommonKernelArithmeticCommand *derivCommand = [new_OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_(kernel, @"Derivative", NO) autorelease];
      [derivCommand addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:[diffArg wrap]];
      [derivCommand addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(var)) wrap]];
      [derivCommand addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:[deg wrap]];
      mult = [((id<OrgGeogebraCommonKernelCASGenericInterface>) nil_chk(cas)) evaluateToExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:derivCommand withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withOrgGeogebraCommonKernelKernel:kernel];
    }
    else {
      OrgGeogebraCommonMainApp_printStacktraceWithId_(OrgGeogebraCommonKernelArithmeticValidExpression_debugStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_(diffArg));
      OrgGeogebraCommonMainApp_printStacktraceWithId_(OrgGeogebraCommonKernelArithmeticValidExpression_debugStringWithOrgGeogebraCommonKernelArithmeticExpressionValue_(var));
      mult = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, JavaLangDouble_NaN) autorelease];
    }
  }
  OrgGeogebraCommonKernelArithmeticExpressionNode *derivative = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_OrgGeogebraCommonKernelArithmeticVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel, funLabel) autorelease], OrgGeogebraCommonPluginOperationEnum_get_DERIVATIVE(), deg) autorelease];
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, derivative, OrgGeogebraCommonPluginOperationEnum_get_FUNCTION(), diffArg) autorelease]) multiplyRWithOrgGeogebraCommonKernelArithmeticExpressionValue:mult];
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer_init(self);
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer_INSTANCE_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE_", NULL, 0x19, "Lorg.geogebra.common.kernel.arithmetic.Traversing$DiffReplacer;", &OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer_INSTANCE_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer = { 2, "DiffReplacer", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer;
}

@end

void OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer_init(OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer *new_OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer *self = [OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_DiffReplacer)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticVariable class]]) {
    return [new_OrgGeogebraCommonKernelArithmeticVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_([((OrgGeogebraCommonKernelArithmeticVariable *) nil_chk(((OrgGeogebraCommonKernelArithmeticVariable *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticVariable class])))) getKernel], [((NSString *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) replace:OrgGeogebraCommonKernelKernel_get_TMP_VARIABLE_PREFIX_() withSequence:@""]) autorelease];
  }
  return ev;
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover *)getCollector {
  return OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover_getCollector();
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover_init(self);
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover_collector_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCollector", NULL, "Lorg.geogebra.common.kernel.arithmetic.Traversing$PrefixRemover;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "collector_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$PrefixRemover;", &OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover_collector_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover = { 2, "PrefixRemover", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover;
}

@end

OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover *OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover_getCollector() {
  OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover_initialize();
  return OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover_collector_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover_init(OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover *new_OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover *self = [OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_PrefixRemover)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) [((id<JavaUtilSet>) nil_chk(commands_)) addWithId:(OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticCommand class])];
  return ev;
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector *)getCollectorWithJavaUtilSet:(id<JavaUtilSet>)commands {
  return OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_getCollectorWithJavaUtilSet_(commands);
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(commands_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_collector_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCollectorWithJavaUtilSet:", "getCollector", "Lorg.geogebra.common.kernel.arithmetic.Traversing$CommandCollector;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "commands_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Lorg/geogebra/common/kernel/arithmetic/Command;>;",  },
    { "collector_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$CommandCollector;", &OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_collector_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector = { 2, "CommandCollector", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector;
}

@end

OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector *OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_getCollectorWithJavaUtilSet_(id<JavaUtilSet> commands) {
  OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_initialize();
  OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_set_commands_(nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_collector_), commands);
  return OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_collector_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_init(OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector *new_OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector *self = [OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]]) {
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) wrap];
  }
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) [((id<JavaUtilSet>) nil_chk(commands_)) addWithId:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionVariable *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticFunctionVariable class])))) getSetVarString]];
  return ev;
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector *)getCollectorWithJavaUtilSet:(id<JavaUtilSet>)commands {
  return OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_getCollectorWithJavaUtilSet_(commands);
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(commands_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_collector_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCollectorWithJavaUtilSet:", "getCollector", "Lorg.geogebra.common.kernel.arithmetic.Traversing$FVarCollector;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "commands_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;",  },
    { "collector_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$FVarCollector;", &OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_collector_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector = { 2, "FVarCollector", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector;
}

@end

OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector *OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_getCollectorWithJavaUtilSet_(id<JavaUtilSet> commands) {
  OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_initialize();
  OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_set_commands_(nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_collector_), commands);
  return OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_collector_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_init(OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector *new_OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector *self = [OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_FVarCollector)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if ([[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getRight] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) {
      OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_addWithOrgGeogebraCommonKernelGeosGeoDummyVariable_(self, ((OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast([en getRight], [OrgGeogebraCommonKernelGeosGeoDummyVariable class])));
    }
    if ([en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_FUNCTION() || [en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR() || [en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_DERIVATIVE()) return en;
    if ([[en getLeft] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) {
      OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_addWithOrgGeogebraCommonKernelGeosGeoDummyVariable_(self, ((OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast([en getLeft], [OrgGeogebraCommonKernelGeosGeoDummyVariable class])));
    }
  }
  return ev;
}

- (void)addWithOrgGeogebraCommonKernelGeosGeoDummyVariable:(OrgGeogebraCommonKernelGeosGeoDummyVariable *)dummy {
  OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_addWithOrgGeogebraCommonKernelGeosGeoDummyVariable_(self, dummy);
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *)getCollectorWithJavaUtilSet:(id<JavaUtilSet>)commands {
  return OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_getCollectorWithJavaUtilSet_(commands);
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(commands_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_collector_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "addWithOrgGeogebraCommonKernelGeosGeoDummyVariable:", "add", "V", 0x2, NULL, NULL },
    { "getCollectorWithJavaUtilSet:", "getCollector", "Lorg.geogebra.common.kernel.arithmetic.Traversing$NonFunctionCollector;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "commands_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;",  },
    { "collector_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$NonFunctionCollector;", &OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_collector_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector = { 2, "NonFunctionCollector", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector;
}

@end

void OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_addWithOrgGeogebraCommonKernelGeosGeoDummyVariable_(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *self, OrgGeogebraCommonKernelGeosGeoDummyVariable *dummy) {
  NSString *str = [((OrgGeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(dummy)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  if ([((OrgGeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([dummy getKernel])) getApplication])) getParserFunctions])) isReservedWithNSString:str]) return;
  [((id<JavaUtilSet>) nil_chk(self->commands_)) addWithId:str];
}

OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_getCollectorWithJavaUtilSet_(id<JavaUtilSet> commands) {
  OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_initialize();
  OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_set_commands_(nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_collector_), commands);
  return OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_collector_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_init(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *new_OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *self = [OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionCollector)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if ([[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getRight] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]] || [[en getRight] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
      OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [en getRight]);
    }
    if ([en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_FUNCTION() || [en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR() || [en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_DERIVATIVE()) return en;
    if ([[en getLeft] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]] || [[en getLeft] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
      OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, [en getLeft]);
    }
  }
  return ev;
}

- (void)addWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)dummy {
  OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_(self, dummy);
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *)getCollectorWithJavaUtilSet:(id<JavaUtilSet>)commands {
  return OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_getCollectorWithJavaUtilSet_(commands);
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(commands_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_collector_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "addWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "add", "V", 0x2, NULL, NULL },
    { "getCollectorWithJavaUtilSet:", "getCollector", "Lorg.geogebra.common.kernel.arithmetic.Traversing$DummyVariableCollector;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "commands_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;",  },
    { "collector_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$DummyVariableCollector;", &OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_collector_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector = { 2, "DummyVariableCollector", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector;
}

@end

void OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_addWithOrgGeogebraCommonKernelArithmeticExpressionValue_(OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> dummy) {
  NSString *str = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(dummy)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  [((id<JavaUtilSet>) nil_chk(self->commands_)) addWithId:str];
}

OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_getCollectorWithJavaUtilSet_(id<JavaUtilSet> commands) {
  OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_initialize();
  OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_set_commands_(nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_collector_), commands);
  return OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_collector_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_init(OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *new_OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *self = [OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_POWER() && [[en getLeft] isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
      OrgGeogebraCommonKernelArithmeticCommand *c = (OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast([en getLeft], [OrgGeogebraCommonKernelArithmeticCommand class]);
      if ([((id<JavaUtilSet>) nil_chk(commands_)) containsWithId:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName]]) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelGeosGeoDummyVariable *) [new_OrgGeogebraCommonKernelGeosGeoDummyVariable_initWithOrgGeogebraCommonKernelConstruction_withNSString_([((OrgGeogebraCommonKernelKernel *) nil_chk([c getKernel])) getConstruction], [c getName]) autorelease]) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:0])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:self])) wrap])) powerWithOrgGeogebraCommonKernelArithmeticExpressionValue:[en getRight]]];
      }
    }
    if ([en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_FACTORIAL() && [[en getLeft] isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
      OrgGeogebraCommonKernelArithmeticCommand *c = (OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast([en getLeft], [OrgGeogebraCommonKernelArithmeticCommand class]);
      if ([((id<JavaUtilSet>) nil_chk(commands_)) containsWithId:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName]]) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelGeosGeoDummyVariable *) [new_OrgGeogebraCommonKernelGeosGeoDummyVariable_initWithOrgGeogebraCommonKernelConstruction_withNSString_([((OrgGeogebraCommonKernelKernel *) nil_chk([c getKernel])) getConstruction], [c getName]) autorelease]) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:0])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:self])) wrap])) factorial]];
      }
    }
    if ([en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_SQRT_SHORT() && [[en getLeft] isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
      OrgGeogebraCommonKernelArithmeticCommand *c = (OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast([en getLeft], [OrgGeogebraCommonKernelArithmeticCommand class]);
      if ([((id<JavaUtilSet>) nil_chk(commands_)) containsWithId:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName]]) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelGeosGeoDummyVariable *) [new_OrgGeogebraCommonKernelGeosGeoDummyVariable_initWithOrgGeogebraCommonKernelConstruction_withNSString_([((OrgGeogebraCommonKernelKernel *) nil_chk([c getKernel])) getConstruction], [c getName]) autorelease]) wrap])) sqrt])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:0])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:self]];
      }
    }
  }
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
    OrgGeogebraCommonKernelArithmeticCommand *c = (OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticCommand class]);
    if ([((id<JavaUtilSet>) nil_chk(commands_)) containsWithId:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName]] && [c getArgumentNumber] == 1) return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelGeosGeoDummyVariable *) [new_OrgGeogebraCommonKernelGeosGeoDummyVariable_initWithOrgGeogebraCommonKernelConstruction_withNSString_([((OrgGeogebraCommonKernelKernel *) nil_chk([c getKernel])) getConstruction], [c getName]) autorelease]) wrap])) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:0])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:self]];
  }
  return ev;
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *)getCollectorWithJavaUtilSet:(id<JavaUtilSet>)commands {
  return OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_getCollectorWithJavaUtilSet_(commands);
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(commands_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_collector_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCollectorWithJavaUtilSet:", "getCollector", "Lorg.geogebra.common.kernel.arithmetic.Traversing$NonFunctionReplacer;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "commands_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;",  },
    { "collector_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$NonFunctionReplacer;", &OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_collector_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer = { 2, "NonFunctionReplacer", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer;
}

@end

OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_getCollectorWithJavaUtilSet_(id<JavaUtilSet> commands) {
  OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_initialize();
  OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_set_commands_(nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_collector_), commands);
  return OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_collector_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_init(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *new_OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *self = [OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)expandWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

+ (jboolean)containsWithOrgGeogebraCommonKernelGeosGeoDummyVariable:(OrgGeogebraCommonKernelGeosGeoDummyVariable *)gdv {
  return OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_containsWithOrgGeogebraCommonKernelGeosGeoDummyVariable_(gdv);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_FUNCTION() || [en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR() || [en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_VEC_FUNCTION()) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> geo = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getLeft])) unwrap];
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> deriv = nil;
      if ([geo isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]] && [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(geo, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_DERIVATIVE()) {
        deriv = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(geo, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getRight])) evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
        geo = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(geo, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) getLeft])) unwrap];
      }
      if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) {
        geo = [((OrgGeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(((OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoDummyVariable class])))) getElementWithSameName];
      }
      OrgGeogebraCommonKernelArithmeticExpressionNode *en2 = nil;
      IOSObjectArray *fv = nil;
      if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCurveCartesian class]]) {
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> en2x = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class])))) getFunX])) getFunctionExpression])) getCopyWithOrgGeogebraCommonKernelKernel:[((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class])))) getKernel]])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:self];
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> en2y = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class])))) getFunY])) getFunctionExpression])) getCopyWithOrgGeogebraCommonKernelKernel:[((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class])))) getKernel]])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:self];
        en2 = [((OrgGeogebraCommonKernelArithmeticMyVecNode *) [new_OrgGeogebraCommonKernelArithmeticMyVecNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class])))) getKernel], en2x, en2y) autorelease]) wrap];
        fv = [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class])))) getFunctionVariables];
      }
      if ([OrgGeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:geo]) {
        en2 = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar))))) getFunctionExpression])) getCopyWithOrgGeogebraCommonKernelKernel:[((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar))))) getKernel]])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:self], [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
        fv = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar))))) getFunction])) getFunctionVariables];
      }
      if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCasCell class]]) {
        OrgGeogebraCommonKernelArithmeticValidExpression *ve = [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) getOutputValidExpression];
        if ([((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) isKeepInputUsed]) {
          ve = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithOrgGeogebraCommonKernelGeosGeoElement_(self, (OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) wrap];
        }
        en2 = [[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]] ? [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast([ve unwrap], [OrgGeogebraCommonKernelArithmeticFunctionNVar class])))) getExpression] : [ve wrap];
        en2 = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en2 traverseWithOrgGeogebraCommonKernelArithmeticTraversing:self])) wrap];
        en2 = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en2)) getCopyWithOrgGeogebraCommonKernelKernel:[((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) getKernel]];
        fv = [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) getFunctionVariables];
      }
      if (deriv != nil) {
        id<OrgGeogebraCommonKernelCASGenericInterface> cas = [((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([en getKernel])) getGeoGebraCAS])) getCurrentCAS];
        OrgGeogebraCommonKernelArithmeticCommand *derivCommand = [new_OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_([en getKernel], @"Derivative", NO) autorelease];
        [derivCommand addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:en2];
        [derivCommand addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(fv), 0))) wrap]];
        [derivCommand addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:[deriv wrap]];
        en2 = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<OrgGeogebraCommonKernelCASGenericInterface>) nil_chk(cas)) evaluateToExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:derivCommand withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withOrgGeogebraCommonKernelKernel:[en getKernel]])) wrap];
      }
      if (fv != nil) {
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> argument = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getRight])) wrap])) getCopyWithOrgGeogebraCommonKernelKernel:[en getKernel]])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:self])) unwrap];
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> ithArg = argument;
        OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer *vr = OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacer();
        for (jint i = 0; i < fv->size_; i++) {
          if ([en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR()) {
            ithArg = [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast(argument, [OrgGeogebraCommonKernelArithmeticMyList class])))) getListElementWithInt:i];
          }
          OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_addVarsWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_([((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(fv, i))) getSetVarString], ithArg);
        }
        en2 = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en2)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:vr])) wrap];
        return en2;
      }
    }
    else if ([en getOperation] == OrgGeogebraCommonPluginOperationEnum_get_DERIVATIVE()) {
    }
    else {
      OrgGeogebraCommonKernelGeosGeoElement *geo = nil;
      if ([[en getLeft] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]] && !OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_containsWithOrgGeogebraCommonKernelGeosGeoDummyVariable_((OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast([en getLeft], [OrgGeogebraCommonKernelGeosGeoDummyVariable class]))) {
        geo = [((OrgGeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(((OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast([en getLeft], [OrgGeogebraCommonKernelGeosGeoDummyVariable class])))) getElementWithSameName];
        if (geo != nil) {
          [en setLeftWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo)];
        }
      }
    }
    if ([en getRight] != nil) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = nil;
      if ([[en getRight] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]] && !OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_containsWithOrgGeogebraCommonKernelGeosGeoDummyVariable_((OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast([en getRight], [OrgGeogebraCommonKernelGeosGeoDummyVariable class]))) {
        geo = [((OrgGeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(((OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast([en getRight], [OrgGeogebraCommonKernelGeosGeoDummyVariable class])))) getElementWithSameName];
        if (geo != nil) {
          [en setRightWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo)];
        }
      }
    }
  }
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]] && !OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_containsWithOrgGeogebraCommonKernelGeosGeoDummyVariable_((OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoDummyVariable class]))) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(((OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoDummyVariable class])))) getElementWithSameName];
    if (geo != nil) return OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
  }
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCasCell class]]) {
    if ([((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) isKeepInputUsed]) {
      return OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithOrgGeogebraCommonKernelGeosGeoElement_(self, (OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoCasCell class]));
    }
    return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) getOutputValidExpression])) wrap])) getCopyWithOrgGeogebraCommonKernelKernel:[((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(ev, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) getKernel]];
  }
  else if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]]) {
    JreStrongAssign(&OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_variables_, nil, ((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticFunctionNVar class]))))->fVars_);
  }
  return ev;
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *)getCollector {
  return OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_getCollector();
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_init(self);
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_collector_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "expandWithOrgGeogebraCommonKernelGeosGeoElement:", "expand", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x2, NULL, NULL },
    { "containsWithOrgGeogebraCommonKernelGeosGeoDummyVariable:", "contains", "Z", 0xa, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCollector", NULL, "Lorg.geogebra.common.kernel.arithmetic.Traversing$FunctionExpander;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "collector_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$FunctionExpander;", &OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_collector_, NULL,  },
    { "variables_", NULL, 0xa, "[Lorg.geogebra.common.kernel.arithmetic.FunctionVariable;", &OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_variables_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander = { 2, "FunctionExpander", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander;
}

@end

id<OrgGeogebraCommonKernelArithmeticExpressionValue> OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  if ([OrgGeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:geo]) return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar))))) getFunctionExpression])) deepCopyWithOrgGeogebraCommonKernelKernel:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getKernel]])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:self];
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCasCell class]]) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("@C@", geo, ':', [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) getOutputValidExpression]));
    return [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCasCell class])))) getOutputValidExpression])) deepCopyWithOrgGeogebraCommonKernelKernel:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getKernel]])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:self])) unwrap];
  }
  return geo;
}

jboolean OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_containsWithOrgGeogebraCommonKernelGeosGeoDummyVariable_(OrgGeogebraCommonKernelGeosGeoDummyVariable *gdv) {
  OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_initialize();
  if (OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_variables_ == nil) {
    return NO;
  }
  {
    IOSObjectArray *a__ = OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_variables_;
    OrgGeogebraCommonKernelArithmeticFunctionVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgGeogebraCommonKernelArithmeticFunctionVariable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonKernelArithmeticFunctionVariable *funvar = *b__++;
      if ([((NSString *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(funvar)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:[((OrgGeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(gdv)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
        return YES;
      }
    }
  }
  return NO;
}

OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_getCollector() {
  OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_initialize();
  JreStrongAssign(&OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_variables_, nil, nil);
  return OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_collector_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_init(OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *new_OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *self = [OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]]) {
    OrgGeogebraCommonKernelArithmeticEquation *eq = (OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticEquation class]);
    if ([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(eq)) getLHS] != nil && [[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([eq getLHS])) getLeft] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) {
      OrgGeogebraCommonKernelGeosGeoDummyVariable *gdv = (OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([eq getLHS])) getLeft], [OrgGeogebraCommonKernelGeosGeoDummyVariable class]);
      if ([((NSString *) nil_chk([((OrgGeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(gdv)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@"y"]) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([eq getRHS])) unwrap];
      }
    }
  }
  return ev;
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator *)getCreator {
  return OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_getCreator();
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_init(self);
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_creator_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCreator", NULL, "Lorg.geogebra.common.kernel.arithmetic.Traversing$FunctionCreator;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "creator_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$FunctionCreator;", &OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_creator_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator = { 2, "FunctionCreator", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator;
}

@end

OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator *OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_getCreator() {
  OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_initialize();
  return OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_creator_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_init(OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator *new_OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator *self = [OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover)

@implementation OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
    OrgGeogebraCommonKernelArithmeticCommand *ec = (OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticCommand class]);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_commands_))->size_; i++) {
      if ([((NSString *) nil_chk([((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(ec)) getName])) isEqual:IOSObjectArray_Get(OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_commands_, i)]) {
        return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([ec getArgumentWithInt:0])) unwrap];
      }
    }
  }
  return ev;
}

+ (OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover *)getRemoverWithNSStringArray:(IOSObjectArray *)commands1 {
  return OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_getRemoverWithNSStringArray_(commands1);
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_init(self);
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_remover_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getRemoverWithNSStringArray:", "getRemover", "Lorg.geogebra.common.kernel.arithmetic.Traversing$CommandRemover;", 0x89, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "remover_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$CommandRemover;", &OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_remover_, NULL,  },
    { "commands_", NULL, 0xa, "[Ljava.lang.String;", &OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_commands_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover = { 2, "CommandRemover", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover;
}

@end

OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover *OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_getRemoverWithNSStringArray_(IOSObjectArray *commands1) {
  OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_initialize();
  JreStrongAssign(&OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_commands_, nil, commands1);
  return OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_remover_;
}

void OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_init(OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover *new_OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover *self = [OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer)

OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer *OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_replacer_;

@implementation OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)processWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
    OrgGeogebraCommonKernelArithmeticCommand *ec = (OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticCommand class]);
    if ([@"x" isEqual:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(ec)) getName]]) {
      return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_([ec getKernel], [ec getArgumentWithInt:0], OrgGeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
    }
    else if ([@"y" isEqual:[ec getName]]) {
      return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_([ec getKernel], [ec getArgumentWithInt:0], OrgGeogebraCommonPluginOperationEnum_get_YCOORD(), nil) autorelease];
    }
    else if ([@"z" isEqual:[ec getName]]) {
      return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_([ec getKernel], [ec getArgumentWithInt:0], OrgGeogebraCommonPluginOperationEnum_get_ZCOORD(), nil) autorelease];
    }
  }
  return ev;
}

- (instancetype)init {
  OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_init(self);
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_replacer_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "replacer_", NULL, 0x9, "Lorg.geogebra.common.kernel.arithmetic.Traversing$CASCommandReplacer;", &OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer = { 2, "CASCommandReplacer", "org.geogebra.common.kernel.arithmetic", "Traversing", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer;
}

@end

void OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_init(OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer *new_OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_init() {
  OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer *self = [OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer alloc];
  OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelArithmeticTraversing_CASCommandReplacer)
