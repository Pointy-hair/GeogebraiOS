//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/implicit/AlgoImplicitPolyFunction.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/Polynomial.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/implicit/AlgoImplicitPolyFunction.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/MyError.h"

@interface OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction () {
 @public
  OrgGeogebraCommonKernelGeosGeoFunctionNVar *function_;
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly *implicitPoly_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction, function_, OrgGeogebraCommonKernelGeosGeoFunctionNVar *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction, implicitPoly_, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)

@implementation OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
             withOrgGeogebraCommonKernelGeosGeoFunctionNVar:(OrgGeogebraCommonKernelGeosGeoFunctionNVar *)func {
  OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_(self, c, label, func);
  return self;
}

- (void)compute {
  [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(implicitPoly_)) setDefined];
  OrgGeogebraCommonKernelArithmeticFunctionNVar *f = [((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(function_)) getFunction];
  IOSObjectArray *fvars = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(f)) getFunctionVariables];
  if (((IOSObjectArray *) nil_chk(fvars))->size_ != 2) {
    [implicitPoly_ setUndefined];
    return;
  }
  @try {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([f getExpression])) getCopyWithOrgGeogebraCommonKernelKernel:kernel_];
    OrgGeogebraCommonKernelArithmeticEquation *equ = [new_OrgGeogebraCommonKernelArithmeticEquation_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, en, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_(kernel_) autorelease]) autorelease];
    [equ initEquation];
    OrgGeogebraCommonKernelArithmeticPolynomial *poly = [equ getNormalForm];
    [implicitPoly_ setCoeffWithOrgGeogebraCommonKernelArithmeticExpressionValueArray2:[((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(poly)) getCoeff]];
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_([((OrgGeogebraCommonMainMyError *) nil_chk(e)) getMessage]);
    [implicitPoly_ setUndefined];
  }
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ function_ } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:implicitPoly_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_ImplicitCurve();
}

- (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)getImplicitPoly {
  return implicitPoly_;
}

- (void)dealloc {
  RELEASE_(function_);
  RELEASE_(implicitPoly_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoFunctionNVar:", "AlgoImplicitPolyFunction", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getImplicitPoly", NULL, "Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "function_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunctionNVar;", NULL, NULL,  },
    { "implicitPoly_", NULL, 0x2, "Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction = { 2, "AlgoImplicitPolyFunction", "org.geogebra.common.kernel.implicit", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction;
}

@end

void OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_(OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, OrgGeogebraCommonKernelGeosGeoFunctionNVar *func) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction_set_function_(self, func);
  OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction_setAndConsume_implicitPoly_(self, new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  [self setInputOutput];
  [self compute];
  [self->implicitPoly_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction *new_OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_(OrgGeogebraCommonKernelConstruction *c, NSString *label, OrgGeogebraCommonKernelGeosGeoFunctionNVar *func) {
  OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction *self = [OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction alloc];
  OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunctionNVar_(self, c, label, func);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelImplicitAlgoImplicitPolyFunction)
