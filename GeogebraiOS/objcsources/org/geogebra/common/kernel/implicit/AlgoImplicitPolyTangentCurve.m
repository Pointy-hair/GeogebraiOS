//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/implicit/AlgoImplicitPolyTangentCurve.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/implicit/AlgoImplicitPolyTangentCurve.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/implicit/PolynomialUtils.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve () {
 @public
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly *poly_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> point_;
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly *tangentPoly_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve, poly_, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve, point_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve, tangentPoly_, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)

@implementation OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
         withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)poly
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point
                                               withNSString:(NSString *)label
                                                withBoolean:(jboolean)addToConstructionList
                                                withBoolean:(jboolean)calcPath {
  OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelKernelNDGeoPointND_withNSString_withBoolean_withBoolean_(self, c, poly, point, label, addToConstructionList, calcPath);
  return self;
}

- (void)compute {
  IOSObjectArray *coeff = [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(poly_)) getCoeff];
  jdouble x = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getInhomX];
  jdouble y = [point_ getInhomY];
  IOSObjectArray *newCoeff = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(coeff))->size_ type:IOSClass_doubleArray(1)];
  jint maxDeg = [poly_ getDeg];
  for (jint i = 0; i < coeff->size_; i++) {
    (void) IOSObjectArray_SetAndConsume(newCoeff, i, [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff, i)))->size_]);
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff, i)))->size_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(newCoeff, i)), j) = (maxDeg - (i + j)) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), j);
      if (i + 1 < coeff->size_ && j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff, i + 1)))->size_) {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(newCoeff, i)), j) += x * (i + 1) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff, i + 1)), j);
      }
      if (j + 1 < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff, i)))->size_) {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(newCoeff, i)), j) += y * (j + 1) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), j + 1);
      }
    }
  }
  [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(tangentPoly_)) setCoeffWithDoubleArray2:OrgGeogebraCommonKernelImplicitPolynomialUtils_coeffMinDegWithDoubleArray2_(newCoeff)];
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithObjects:(id[]){ poly_, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point_, [OrgGeogebraCommonKernelGeosGeoElement class]) } count:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:tangentPoly_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Tangent();
}

- (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)getTangentCurve {
  return tangentPoly_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelKernelNDGeoPointND:withNSString:withBoolean:withBoolean:", "AlgoImplicitPolyTangentCurve", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getTangentCurve", NULL, "Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "poly_", NULL, 0x2, "Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
    { "point_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "tangentPoly_", NULL, 0x2, "Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve = { 2, "AlgoImplicitPolyTangentCurve", "org.geogebra.common.kernel.implicit", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve;
}

@end

void OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelKernelNDGeoPointND_withNSString_withBoolean_withBoolean_(OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve *self, OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *poly, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point, NSString *label, jboolean addToConstructionList, jboolean calcPath) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, c, addToConstructionList);
  self->poly_ = poly;
  self->point_ = point;
  self->tangentPoly_ = new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_(c);
  if (!calcPath) {
    [self->tangentPoly_ preventPathCreation];
  }
  [self setInputOutput];
  [self compute];
  if (label != nil) {
    [self->tangentPoly_ setLabelWithNSString:label];
  }
}

OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve *new_OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelKernelNDGeoPointND_withNSString_withBoolean_withBoolean_(OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *poly, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point, NSString *label, jboolean addToConstructionList, jboolean calcPath) {
  OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve *self = [OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve alloc];
  OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelKernelNDGeoPointND_withNSString_withBoolean_withBoolean_(self, c, poly, point, label, addToConstructionList, calcPath);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve)
