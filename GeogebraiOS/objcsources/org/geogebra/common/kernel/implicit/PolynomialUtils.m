//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/implicit/PolynomialUtils.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/math/BigDecimal.h"
#include "org/apache/commons/math/analysis/polynomials/PolynomialFunction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/implicit/PolynomialUtils.h"
#include "org/geogebra/common/kernel/polynomial/BigPolynomial.h"

@interface OrgGeogebraCommonKernelImplicitPolynomialUtils ()

+ (jboolean)rootPolishingWithDoubleArray:(IOSDoubleArray *)pair
withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p1
withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p2
                         withDoubleArray:(IOSDoubleArray *)line;

@end

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelImplicitPolynomialUtils_rootPolishingWithDoubleArray_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withDoubleArray_(IOSDoubleArray *pair, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p1, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p2, IOSDoubleArray *line);

@implementation OrgGeogebraCommonKernelImplicitPolynomialUtils

+ (IOSDoubleArray *)polynomialDivisionWithDoubleArray:(IOSDoubleArray *)cp
                                      withDoubleArray:(IOSDoubleArray *)cd {
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_polynomialDivisionWithDoubleArray_withDoubleArray_(cp, cd);
}

+ (OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)polynomialDivisionWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)p
                                                                                 withOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)d {
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_polynomialDivisionWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_withOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_(p, d);
}

+ (jint)getDegreeWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)p {
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_getDegreeWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_(p);
}

+ (jint)getDegreeWithDoubleArray:(IOSDoubleArray *)c {
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_getDegreeWithDoubleArray_(c);
}

+ (jdouble)getLeadingCoeffWithDoubleArray:(IOSDoubleArray *)c {
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_getLeadingCoeffWithDoubleArray_(c);
}

+ (jdouble)getLeadingCoeffWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)p {
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_getLeadingCoeffWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_(p);
}

+ (jint)getDegreeWithOrgGeogebraCommonKernelPolynomialBigPolynomial:(OrgGeogebraCommonKernelPolynomialBigPolynomial *)poly {
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_getDegreeWithOrgGeogebraCommonKernelPolynomialBigPolynomial_(poly);
}

+ (jdouble)evalWithDoubleArray:(IOSDoubleArray *)c
                    withDouble:(jdouble)x {
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_evalWithDoubleArray_withDouble_(c, x);
}

+ (IOSObjectArray *)coeffMinDegWithDoubleArray2:(IOSObjectArray *)coeff {
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_coeffMinDegWithDoubleArray2_(coeff);
}

+ (jboolean)rootPolishingWithDoubleArray:(IOSDoubleArray *)pair
withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                         withDoubleArray:(IOSDoubleArray *)line {
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_rootPolishingWithDoubleArray_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withDoubleArray_(pair, p1, line);
}

+ (jboolean)rootPolishingWithDoubleArray:(IOSDoubleArray *)pair
withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p1
withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p2 {
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_rootPolishingWithDoubleArray_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_(pair, p1, p2);
}

+ (jboolean)rootPolishingWithDoubleArray:(IOSDoubleArray *)pair
withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p1
withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)p2
                         withDoubleArray:(IOSDoubleArray *)line {
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_rootPolishingWithDoubleArray_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withDoubleArray_(pair, p1, p2, line);
}

- (instancetype)init {
  OrgGeogebraCommonKernelImplicitPolynomialUtils_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "polynomialDivisionWithDoubleArray:withDoubleArray:", "polynomialDivision", "[D", 0x9, NULL, NULL },
    { "polynomialDivisionWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:withOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:", "polynomialDivision", "Lorg.apache.commons.math.analysis.polynomials.PolynomialFunction;", 0x9, NULL, NULL },
    { "getDegreeWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:", "getDegree", "I", 0x9, NULL, NULL },
    { "getDegreeWithDoubleArray:", "getDegree", "I", 0x9, NULL, NULL },
    { "getLeadingCoeffWithDoubleArray:", "getLeadingCoeff", "D", 0x9, NULL, NULL },
    { "getLeadingCoeffWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:", "getLeadingCoeff", "D", 0x9, NULL, NULL },
    { "getDegreeWithOrgGeogebraCommonKernelPolynomialBigPolynomial:", "getDegree", "I", 0x9, NULL, NULL },
    { "evalWithDoubleArray:withDouble:", "eval", "D", 0x9, NULL, NULL },
    { "coeffMinDegWithDoubleArray2:", "coeffMinDeg", "[[D", 0x9, NULL, NULL },
    { "rootPolishingWithDoubleArray:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withDoubleArray:", "rootPolishing", "Z", 0x9, NULL, NULL },
    { "rootPolishingWithDoubleArray:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:", "rootPolishing", "Z", 0x9, NULL, NULL },
    { "rootPolishingWithDoubleArray:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withDoubleArray:", "rootPolishing", "Z", 0xa, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelImplicitPolynomialUtils = { 2, "PolynomialUtils", "org.geogebra.common.kernel.implicit", NULL, 0x1, 13, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelImplicitPolynomialUtils;
}

@end

IOSDoubleArray *OrgGeogebraCommonKernelImplicitPolynomialUtils_polynomialDivisionWithDoubleArray_withDoubleArray_(IOSDoubleArray *cp, IOSDoubleArray *cd) {
  OrgGeogebraCommonKernelImplicitPolynomialUtils_initialize();
  IOSDoubleArray *cq;
  IOSDoubleArray *cpclone;
  cpclone = [IOSDoubleArray arrayWithLength:((IOSDoubleArray *) nil_chk(cp))->size_];
  for (jint i = 0; i < cp->size_; i++) {
    *IOSDoubleArray_GetRef(cpclone, i) = IOSDoubleArray_Get(cp, i);
  }
  jint degD = ((IOSDoubleArray *) nil_chk(cd))->size_ - 1;
  while (degD >= 0 && OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(cd, degD))) {
    degD--;
  }
  if (degD < 0) {
    @throw [new_JavaLangArithmeticException_initWithNSString_(@"divide by zero polynomial") autorelease];
  }
  if (cpclone->size_ - 1 < degD) {
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0 } count:1];
  }
  cq = [IOSDoubleArray arrayWithLength:cpclone->size_ - degD];
  jdouble lcd = IOSDoubleArray_Get(cd, degD);
  jint k = cpclone->size_ - 1;
  for (jint i = cq->size_ - 1; i >= 0; i--) {
    *IOSDoubleArray_GetRef(cq, i) = IOSDoubleArray_Get(cpclone, k) / lcd;
    for (jint j = 0; j <= degD - 1; j++) {
      *IOSDoubleArray_GetRef(cpclone, j + i) = IOSDoubleArray_Get(cpclone, j + i) - IOSDoubleArray_Get(cq, i) * IOSDoubleArray_Get(cd, j);
    }
    k--;
  }
  return cq;
}

OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *OrgGeogebraCommonKernelImplicitPolynomialUtils_polynomialDivisionWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_withOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *p, OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *d) {
  OrgGeogebraCommonKernelImplicitPolynomialUtils_initialize();
  return [new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_(OrgGeogebraCommonKernelImplicitPolynomialUtils_polynomialDivisionWithDoubleArray_withDoubleArray_([((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(p)) getCoefficients], [((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(d)) getCoefficients])) autorelease];
}

jint OrgGeogebraCommonKernelImplicitPolynomialUtils_getDegreeWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *p) {
  OrgGeogebraCommonKernelImplicitPolynomialUtils_initialize();
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_getDegreeWithDoubleArray_([((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(p)) getCoefficients]);
}

jint OrgGeogebraCommonKernelImplicitPolynomialUtils_getDegreeWithDoubleArray_(IOSDoubleArray *c) {
  OrgGeogebraCommonKernelImplicitPolynomialUtils_initialize();
  for (jint i = ((IOSDoubleArray *) nil_chk(c))->size_ - 1; i >= 0; i--) {
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(c, i))) return i;
  }
  return -1;
}

jdouble OrgGeogebraCommonKernelImplicitPolynomialUtils_getLeadingCoeffWithDoubleArray_(IOSDoubleArray *c) {
  OrgGeogebraCommonKernelImplicitPolynomialUtils_initialize();
  jint d = OrgGeogebraCommonKernelImplicitPolynomialUtils_getDegreeWithDoubleArray_(c);
  if (d >= 0) return IOSDoubleArray_Get(nil_chk(c), d);
  return 0;
}

jdouble OrgGeogebraCommonKernelImplicitPolynomialUtils_getLeadingCoeffWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *p) {
  OrgGeogebraCommonKernelImplicitPolynomialUtils_initialize();
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_getLeadingCoeffWithDoubleArray_([((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(p)) getCoefficients]);
}

jint OrgGeogebraCommonKernelImplicitPolynomialUtils_getDegreeWithOrgGeogebraCommonKernelPolynomialBigPolynomial_(OrgGeogebraCommonKernelPolynomialBigPolynomial *poly) {
  OrgGeogebraCommonKernelImplicitPolynomialUtils_initialize();
  for (jint i = [((OrgGeogebraCommonKernelPolynomialBigPolynomial *) nil_chk(poly)) degree]; i >= 0; i--) {
    if (!OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([((JavaMathBigDecimal *) nil_chk([poly getCoeffWithInt:i])) doubleValue], 0., OrgGeogebraCommonKernelKernel_MAX_DOUBLE_PRECISION)) return i;
  }
  return -1;
}

jdouble OrgGeogebraCommonKernelImplicitPolynomialUtils_evalWithDoubleArray_withDouble_(IOSDoubleArray *c, jdouble x) {
  OrgGeogebraCommonKernelImplicitPolynomialUtils_initialize();
  if (((IOSDoubleArray *) nil_chk(c))->size_ == 0) return 0;
  jdouble s = IOSDoubleArray_Get(c, c->size_ - 1);
  for (jint i = c->size_ - 2; i >= 0; i--) {
    s *= x;
    s += IOSDoubleArray_Get(c, i);
  }
  return s;
}

IOSObjectArray *OrgGeogebraCommonKernelImplicitPolynomialUtils_coeffMinDegWithDoubleArray2_(IOSObjectArray *coeff) {
  OrgGeogebraCommonKernelImplicitPolynomialUtils_initialize();
  IOSObjectArray *newCoeffMinDeg = nil;
  for (jint i = ((IOSObjectArray *) nil_chk(coeff))->size_ - 1; i >= 0; i--) {
    for (jint j = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff, i)))->size_ - 1; j >= 0; j--) {
      if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), j))) {
        if (newCoeffMinDeg == nil) {
          newCoeffMinDeg = [IOSObjectArray arrayWithLength:i + 1 type:IOSClass_doubleArray(1)];
        }
        if (IOSObjectArray_Get(nil_chk(newCoeffMinDeg), i) == nil) {
          IOSObjectArray_SetAndConsume(newCoeffMinDeg, i, [IOSDoubleArray newArrayWithLength:j + 1]);
        }
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(newCoeffMinDeg, i)), j) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), j);
      }
    }
    if (newCoeffMinDeg != nil && IOSObjectArray_Get(newCoeffMinDeg, i) == nil) {
      IOSObjectArray_SetAndConsume(newCoeffMinDeg, i, [IOSDoubleArray newArrayWithLength:1]);
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(newCoeffMinDeg, i)), 0) = 0;
    }
  }
  if (newCoeffMinDeg == nil) {
    newCoeffMinDeg = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ 1, 1 }];
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(newCoeffMinDeg, 0)), 0) = 0;
  }
  return newCoeffMinDeg;
}

jboolean OrgGeogebraCommonKernelImplicitPolynomialUtils_rootPolishingWithDoubleArray_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withDoubleArray_(IOSDoubleArray *pair, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p1, IOSDoubleArray *line) {
  OrgGeogebraCommonKernelImplicitPolynomialUtils_initialize();
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_rootPolishingWithDoubleArray_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withDoubleArray_(pair, p1, nil, line);
}

jboolean OrgGeogebraCommonKernelImplicitPolynomialUtils_rootPolishingWithDoubleArray_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_(IOSDoubleArray *pair, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p1, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p2) {
  OrgGeogebraCommonKernelImplicitPolynomialUtils_initialize();
  return OrgGeogebraCommonKernelImplicitPolynomialUtils_rootPolishingWithDoubleArray_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withDoubleArray_(pair, p1, p2, nil);
}

jboolean OrgGeogebraCommonKernelImplicitPolynomialUtils_rootPolishingWithDoubleArray_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withDoubleArray_(IOSDoubleArray *pair, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p1, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *p2, IOSDoubleArray *line) {
  OrgGeogebraCommonKernelImplicitPolynomialUtils_initialize();
  jdouble x = IOSDoubleArray_Get(nil_chk(pair), 0), y = IOSDoubleArray_Get(pair, 1);
  jdouble p, q;
  if (p1 == nil) {
    return NO;
  }
  if (p2 == nil && (line == nil || line->size_ != 3)) {
    return NO;
  }
  p = [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(p1)) evalPolyAtWithDouble:x withDouble:y];
  if (p2 != nil) q = [p2 evalPolyAtWithDouble:x withDouble:y];
  else q = IOSDoubleArray_Get(nil_chk(line), 0) + x * IOSDoubleArray_Get(line, 1) + y * IOSDoubleArray_Get(line, 2);
  jdouble lastErr = JavaLangDouble_MAX_VALUE;
  jdouble err = JavaLangMath_absWithDouble_(p) + JavaLangMath_absWithDouble_(q);
  jint n = 0;
  jint MAX_ITERATIONS = 20;
  while (err < 10 * lastErr && err > OrgGeogebraCommonKernelKernel_STANDARD_PRECISION && ++n < MAX_ITERATIONS) {
    jdouble px, py;
    jdouble qx, qy;
    px = [p1 evalDiffXPolyAtWithDouble:x withDouble:y];
    py = [p1 evalDiffYPolyAtWithDouble:x withDouble:y];
    if (p2 != nil) {
      qx = [p2 evalDiffXPolyAtWithDouble:x withDouble:y];
      qy = [p2 evalDiffYPolyAtWithDouble:x withDouble:y];
    }
    else {
      qx = IOSDoubleArray_Get(nil_chk(line), 1);
      qy = IOSDoubleArray_Get(line, 2);
    }
    jdouble det = px * qy - py * qx;
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(det)) {
      break;
    }
    x -= (p * qy - q * py) / det;
    y -= (q * px - p * qx) / det;
    lastErr = err;
    p = [p1 evalPolyAtWithDouble:x withDouble:y];
    if (p2 != nil) {
      q = [p2 evalPolyAtWithDouble:x withDouble:y];
    }
    else {
      q = IOSDoubleArray_Get(nil_chk(line), 0) + x * IOSDoubleArray_Get(line, 1) + y * IOSDoubleArray_Get(line, 2);
    }
    err = JavaLangMath_absWithDouble_(p) + JavaLangMath_absWithDouble_(q);
  }
  *IOSDoubleArray_GetRef(pair, 0) = x;
  *IOSDoubleArray_GetRef(pair, 1) = y;
  return err < OrgGeogebraCommonKernelKernel_STANDARD_PRECISION;
}

void OrgGeogebraCommonKernelImplicitPolynomialUtils_init(OrgGeogebraCommonKernelImplicitPolynomialUtils *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelImplicitPolynomialUtils *new_OrgGeogebraCommonKernelImplicitPolynomialUtils_init() {
  OrgGeogebraCommonKernelImplicitPolynomialUtils *self = [OrgGeogebraCommonKernelImplicitPolynomialUtils alloc];
  OrgGeogebraCommonKernelImplicitPolynomialUtils_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelImplicitPolynomialUtils)
