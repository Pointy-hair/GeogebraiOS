//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/implicit/GeoImplicitPoly.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/apache/commons/math/linear/Array2DRowRealMatrix.h"
#include "org/apache/commons/math/linear/DecompositionSolver.h"
#include "org/apache/commons/math/linear/LUDecompositionImpl.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/MacroConstruction.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/MyPoint.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/PathMover.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoClosestPoint.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoPointOnPath.h"
#include "org/geogebra/common/kernel/algos/AlgorithmSet.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/Polynomial.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoLocus.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoUserInputElement.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/implicit/PolynomialUtils.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/GeoClass.h"

#define OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MIN_GRAD 1.0E-8
#define OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MIN_STEP_SIZE 0.1
#define OrgGeogebraCommonKernelImplicitGeoImplicitPoly_START_STEP_SIZE 0.5
#define OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MAX_STEP_SIZE 1.0
#define OrgGeogebraCommonKernelImplicitGeoImplicitPoly_SING_RADIUS 1.0
#define OrgGeogebraCommonKernelImplicitGeoImplicitPoly_NEAR_SING 0.001
#define OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MAX_STEPS 10000

@interface OrgGeogebraCommonKernelImplicitGeoImplicitPoly () {
 @public
  IOSObjectArray *coeff_;
  IOSObjectArray *coeffSquarefree_;
  jint degX_;
  jint degY_;
  jboolean defined_;
  jboolean isConstant__;
  jboolean calcPath_;
  jboolean trace_;
  OrgGeogebraCommonKernelGeosGeoLocus *locus_;
  id<JavaUtilList> singularitiesCollection_;
  id<JavaUtilList> boundaryIntersectCollection_;
  IOSObjectArray *remember_;
  IOSObjectArray *grid_;
  jint gridWidth_;
  jint gridHeight_;
  jdouble scaleX_;
  jdouble scaleY_;
  jdouble minGap_;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
                                           withDoubleArray2:(IOSObjectArray *)coeff
                                                withBoolean:(jboolean)calcPath;

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
            withOrgGeogebraCommonKernelArithmeticPolynomial:(OrgGeogebraCommonKernelArithmeticPolynomial *)poly
                                                withBoolean:(jboolean)calcPath;

+ (IOSObjectArray *)coeffFromConicWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c;

+ (void)addPowWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                withInt:(jint)exp
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

+ (void)appendMultiplyWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

+ (void)polyMultWithDoubleArray2:(IOSObjectArray *)polyDest
                withDoubleArray2:(IOSObjectArray *)polySrc
                         withInt:(jint)degDestX
                         withInt:(jint)degDestY
                         withInt:(jint)degSrcX
                         withInt:(jint)degSrcY;

- (void)getFactors;

- (jdouble)scaledNormSquaredWithDouble:(jdouble)x
                            withDouble:(jdouble)y;

- (void)startPathWithInt:(jint)width
                 withInt:(jint)height
              withDouble:(jdouble)x
              withDouble:(jdouble)y
withOrgGeogebraCommonKernelGeosGeoLocus:(OrgGeogebraCommonKernelGeosGeoLocus *)loc1;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly, coeff_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly, coeffSquarefree_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly, locus_, OrgGeogebraCommonKernelGeosGeoLocus *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly, singularitiesCollection_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly, boundaryIntersectCollection_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly, remember_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly, grid_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly, MIN_GRAD, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly, MIN_STEP_SIZE, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly, START_STEP_SIZE, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly, MAX_STEP_SIZE, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly, SING_RADIUS, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly, NEAR_SING, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly, MAX_STEPS, jint)

__attribute__((unused)) static void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray2_withBoolean_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, IOSObjectArray *coeff, jboolean calcPath);

__attribute__((unused)) static OrgGeogebraCommonKernelImplicitGeoImplicitPoly *new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray2_withBoolean_(OrgGeogebraCommonKernelConstruction *c, NSString *label, IOSObjectArray *coeff, jboolean calcPath) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticPolynomial_withBoolean_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, OrgGeogebraCommonKernelArithmeticPolynomial *poly, jboolean calcPath);

__attribute__((unused)) static OrgGeogebraCommonKernelImplicitGeoImplicitPoly *new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticPolynomial_withBoolean_(OrgGeogebraCommonKernelConstruction *c, NSString *label, OrgGeogebraCommonKernelArithmeticPolynomial *poly, jboolean calcPath) NS_RETURNS_RETAINED;

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelImplicitGeoImplicitPoly_coeffFromConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelKernelNDGeoConicND *c);

__attribute__((unused)) static void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_addPowWithJavaLangStringBuilder_withInt_withOrgGeogebraCommonKernelStringTemplate_(JavaLangStringBuilder *sb, jint exp, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_appendMultiplyWithJavaLangStringBuilder_(JavaLangStringBuilder *sb);

__attribute__((unused)) static void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_polyMultWithDoubleArray2_withDoubleArray2_withInt_withInt_withInt_withInt_(IOSObjectArray *polyDest, IOSObjectArray *polySrc, jint degDestX, jint degDestY, jint degSrcX, jint degSrcY);

__attribute__((unused)) static void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_getFactors(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelImplicitGeoImplicitPoly_scaledNormSquaredWithDouble_withDouble_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self, jdouble x, jdouble y);

__attribute__((unused)) static void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_startPathWithInt_withInt_withDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoLocus_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self, jint width, jint height, jdouble x, jdouble y, OrgGeogebraCommonKernelGeosGeoLocus *loc1);

@interface OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect : NSObject {
 @public
  jdouble x_, y_, width_, height_;
  IOSIntArray *eval_;
}

- (instancetype)initWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)width
                    withDouble:(jdouble)height;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect, eval_, IOSIntArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect_initWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *self, jdouble x, jdouble y, jdouble width, jdouble height);

__attribute__((unused)) static OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect_initWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble width, jdouble height) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect)

@implementation OrgGeogebraCommonKernelImplicitGeoImplicitPoly

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
                                           withDoubleArray2:(IOSObjectArray *)coeff
                                                withBoolean:(jboolean)calcPath {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray2_withBoolean_(self, c, label, coeff, calcPath);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
                                           withDoubleArray2:(IOSObjectArray *)coeff {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray2_(self, c, label, coeff);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
            withOrgGeogebraCommonKernelArithmeticPolynomial:(OrgGeogebraCommonKernelArithmeticPolynomial *)poly
                                                withBoolean:(jboolean)calcPath {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticPolynomial_withBoolean_(self, c, label, poly, calcPath);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
            withOrgGeogebraCommonKernelArithmeticPolynomial:(OrgGeogebraCommonKernelArithmeticPolynomial *)poly {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticPolynomial_(self, c, label, poly);
  return self;
}

+ (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)createImplicitPolyWithoutPathWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                                                                                        withDoubleArray2:(IOSObjectArray *)coeff {
  return OrgGeogebraCommonKernelImplicitGeoImplicitPoly_createImplicitPolyWithoutPathWithOrgGeogebraCommonKernelConstruction_withDoubleArray2_(c, coeff);
}

- (void)preventPathCreation {
  calcPath_ = NO;
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) unregisterEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:self];
}

- (instancetype)initWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)g {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly_(self, g);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, c);
  return self;
}

+ (IOSObjectArray *)coeffFromConicWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)c {
  return OrgGeogebraCommonKernelImplicitGeoImplicitPoly_coeffFromConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(c);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  return new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly_(self);
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_IMPLICIT_POLY();
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [self getLineStyleXMLWithJavaLangStringBuilder:sb];
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coefficients rep=\"array\" data=\""];
  (void) [sb appendWithNSString:@"["];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(coeff_))->size_; i++) {
    if (i > 0) (void) [sb appendWithChar:','];
    (void) [sb appendWithNSString:@"["];
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff_, i)))->size_; j++) {
      if (j > 0) (void) [sb appendWithChar:','];
      (void) [sb appendWithDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff_, i)), j)];
    }
    (void) [sb appendWithNSString:@"]"];
  }
  (void) [sb appendWithNSString:@"]"];
  (void) [sb appendWithNSString:@"\" />\n"];
}

- (jboolean)isDefined {
  return defined_;
}

- (jboolean)isOnScreen {
  return defined_ && [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) isDefined] && [((JavaUtilArrayList *) nil_chk([locus_ getPoints])) size] > 0;
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)Geo {
  if ([Geo isKindOfClass:[OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]]) {
    OrgGeogebraCommonKernelImplicitGeoImplicitPoly *imp = (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(Geo, [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]);
    for (jint i = 0; i < JavaLangMath_maxWithInt_withInt_(((IOSObjectArray *) nil_chk(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(imp))->coeff_))->size_, coeff_->size_); i++) {
      jint l = 0;
      if (i < imp->coeff_->size_) l = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(imp->coeff_, i)))->size_;
      if (i < coeff_->size_) {
        l = JavaLangMath_maxWithInt_withInt_(l, ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff_, i)))->size_);
      }
      for (jint j = 0; j < l; j++) {
        jdouble c = 0;
        if (i < imp->coeff_->size_) {
          if (j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(imp->coeff_, i)))->size_) {
            c = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(imp->coeff_, i)), j);
          }
        }
        jdouble d = 0;
        if (i < coeff_->size_) {
          if (j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff_, i)))->size_) {
            d = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff_, i)), j);
          }
        }
        if (!OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(c, d)) return NO;
      }
    }
    return YES;
  }
  return NO;
}

- (jboolean)isGeoImplicitPoly {
  return YES;
}

- (jboolean)isPath {
  return YES;
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelKernelNDGeoConicND class]]) {
    [self setCoeffWithDoubleArray2:OrgGeogebraCommonKernelImplicitGeoImplicitPoly_coeffFromConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_((OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [OrgGeogebraCommonKernelKernelNDGeoConicND class]))];
    return;
  }
  else if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]]) {
    OrgGeogebraCommonKernelGeosGeoLine *l = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoLine class]);
    [self setCoeffWithDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(l)) getZ], [l getY] } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ [l getX], 0 } count:2] } count:2 type:IOSClass_doubleArray(1)]];
    return;
  }
  else if (!([geo isKindOfClass:[OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]])) {
    [self setUndefined];
    return;
  }
  [super setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  [self setCoeffWithDoubleArray2:[((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(geo, [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class])))) getCoeff] withBoolean:NO];
  id<JavaUtilList> list = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getViewSet];
  jboolean needsNewLocus = NO;
  if (list == nil) {
    needsNewLocus = ![self isVisibleInViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN];
  }
  else {
    for (jint i = 0; i < [list size]; i++) {
      if (![self isVisibleInViewWithInt:[((JavaLangInteger *) nil_chk([list getWithInt:i])) intValue]]) {
        needsNewLocus = YES;
        break;
      }
    }
  }
  if (needsNewLocus) {
    [self updatePath];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) setWithOrgGeogebraCommonKernelGeosGeoElement:((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(geo, [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]))->locus_];
  }
  self->defined_ = [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(geo, [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class])) isDefined];
}

- (void)setUndefined {
  defined_ = NO;
}

- (void)setDefined {
  defined_ = YES;
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return YES;
}

+ (void)addPowWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                withInt:(jint)exp
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_addPowWithJavaLangStringBuilder_withInt_withOrgGeogebraCommonKernelStringTemplate_(sb, exp, tpl);
}

- (NSString *)toRawValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (coeff_ == nil) return @"";
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  jboolean first = YES;
  for (jint i = ((IOSObjectArray *) nil_chk(coeff_))->size_ - 1; i >= 0; i--) {
    for (jint j = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff_, i)))->size_ - 1; j >= 0; j--) {
      if (i == 0 && j == 0) {
        if (first) {
          (void) [sb appendWithNSString:@"0"];
        }
        (void) [sb appendWithNSString:@"= "];
        (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:-IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff_, 0)), 0) withOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        NSString *number = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff_, i)), j) withOrgGeogebraCommonKernelStringTemplate:tpl];
        jboolean pos = YES;
        if ([((NSString *) nil_chk(number)) charAtWithInt:0] == '-') {
          pos = NO;
          number = [number substring:1];
        }
        if (![((NSString *) nil_chk(number)) isEqual:@"0"] && IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff_, i)), j) != 0) {
          if (pos) {
            if (!first) {
              (void) [sb appendWithChar:'+'];
            }
          }
          else {
            (void) [sb appendWithChar:'-'];
          }
          if (!first) {
            (void) [sb appendWithChar:' '];
          }
          first = NO;
          if (![number isEqual:@"1"] && IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff_, i)), j) != 1) {
            (void) [sb appendWithNSString:number];
            if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
              OrgGeogebraCommonKernelImplicitGeoImplicitPoly_appendMultiplyWithJavaLangStringBuilder_(sb);
            }
          }
          if (i > 0) {
            (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:@"x"]];
          }
          OrgGeogebraCommonKernelImplicitGeoImplicitPoly_addPowWithJavaLangStringBuilder_withInt_withOrgGeogebraCommonKernelStringTemplate_(sb, i, tpl);
          if (j > 0) {
            if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
              OrgGeogebraCommonKernelImplicitGeoImplicitPoly_appendMultiplyWithJavaLangStringBuilder_(sb);
            }
            else if (i > 0) {
              (void) [sb appendWithChar:' '];
            }
            (void) [sb appendWithNSString:[tpl printVariableNameWithNSString:@"y"]];
          }
          OrgGeogebraCommonKernelImplicitGeoImplicitPoly_addPowWithJavaLangStringBuilder_withInt_withOrgGeogebraCommonKernelStringTemplate_(sb, j, tpl);
          (void) [sb appendWithChar:' '];
        }
      }
    }
  }
  return [sb description];
}

+ (void)appendMultiplyWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_appendMultiplyWithJavaLangStringBuilder_(sb);
}

- (void)setCoeffWithDoubleArray2:(IOSObjectArray *)c {
  [self setCoeffWithDoubleArray2:c withBoolean:YES];
}

- (void)setCoeffWithDoubleArray2:(IOSObjectArray *)c
                     withBoolean:(jboolean)calcPath {
  isConstant__ = YES;
  degX_ = -1;
  degY_ = -1;
  coeffSquarefree_ = nil;
  degX_ = ((IOSObjectArray *) nil_chk(c))->size_ - 1;
  coeff_ = [IOSObjectArray newArrayWithLength:c->size_ type:IOSClass_doubleArray(1)];
  for (jint i = 0; i < c->size_; i++) {
    (void) IOSObjectArray_SetAndConsume(coeff_, i, [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(c, i)))->size_]);
    if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(c, i)))->size_ > degY_ + 1) degY_ = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(c, i)))->size_ - 1;
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(c, i)))->size_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeff_, i)), j) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(c, i)), j);
      if (JavaLangDouble_isInfiniteWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff_, i)), j))) {
        [self setUndefined];
      }
      isConstant__ = (isConstant__ && (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(c, i)), j) == 0 || (i == 0 && j == 0)));
    }
  }
  if (calcPath && self->calcPath_) [self updatePath];
}

- (void)setCoeffWithOrgGeogebraCommonKernelArithmeticExpressionValueArray2:(IOSObjectArray *)ev {
  [self setCoeffWithOrgGeogebraCommonKernelArithmeticExpressionValueArray2:ev withBoolean:YES];
}

- (void)setCoeffWithOrgGeogebraCommonKernelArithmeticExpressionValueArray2:(IOSObjectArray *)ev
                                                               withBoolean:(jboolean)calcPath {
  isConstant__ = YES;
  degX_ = -1;
  degY_ = -1;
  coeff_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(ev))->size_ type:IOSClass_doubleArray(1)];
  degX_ = ev->size_ - 1;
  coeffSquarefree_ = nil;
  for (jint i = 0; i < ev->size_; i++) {
    (void) IOSObjectArray_SetAndConsume(coeff_, i, [IOSDoubleArray newArrayWithLength:((IOSObjectArray *) nil_chk(IOSObjectArray_Get(ev, i)))->size_]);
    if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(ev, i)))->size_ > degY_ + 1) degY_ = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(ev, i)))->size_ - 1;
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(ev, i)))->size_; j++) {
      if (IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(ev, i)), j) == nil) *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeff_, i)), j) = 0;
      else *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeff_, i)), j) = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(ev, i)), j))) evaluateDouble];
      if (JavaLangDouble_isInfiniteWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff_, i)), j))) {
        [self setUndefined];
      }
      isConstant__ = (isConstant__ && (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff_, i)), j)) || (i == 0 && j == 0)));
    }
  }
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_getFactors(self);
  if (calcPath && self->calcPath_) [self updatePath];
}

- (IOSObjectArray *)getCoeffWithBoolean:(jboolean)squarefree {
  if (squarefree && coeffSquarefree_ != nil) {
    return coeffSquarefree_;
  }
  return coeff_;
}

- (IOSObjectArray *)getCoeff {
  return coeff_;
}

- (jdouble)evalPolyAtWithDouble:(jdouble)x
                     withDouble:(jdouble)y {
  return [self evalPolyAtWithDouble:x withDouble:y withBoolean:NO];
}

- (jdouble)evalPolyAtWithDouble:(jdouble)x
                     withDouble:(jdouble)y
                    withBoolean:(jboolean)squarefree {
  return OrgGeogebraCommonKernelImplicitGeoImplicitPoly_evalPolyCoeffAtWithDouble_withDouble_withDoubleArray2_(x, y, [self getCoeffWithBoolean:squarefree]);
}

+ (jdouble)evalPolyCoeffAtWithDouble:(jdouble)x
                          withDouble:(jdouble)y
                    withDoubleArray2:(IOSObjectArray *)coeff {
  return OrgGeogebraCommonKernelImplicitGeoImplicitPoly_evalPolyCoeffAtWithDouble_withDouble_withDoubleArray2_(x, y, coeff);
}

- (jdouble)evalDiffXPolyAtWithDouble:(jdouble)x
                          withDouble:(jdouble)y {
  return [self evalDiffXPolyAtWithDouble:x withDouble:y withBoolean:NO];
}

- (jdouble)evalDiffXPolyAtWithDouble:(jdouble)x
                          withDouble:(jdouble)y
                         withBoolean:(jboolean)squarefree {
  jdouble sum = 0;
  jdouble zs = 0;
  IOSObjectArray *coeff1 = [self getCoeffWithBoolean:squarefree];
  if (coeff1 != nil) for (jint i = coeff1->size_ - 1; i >= 1; i--) {
    zs = 0;
    for (jint j = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff1, i)))->size_ - 1; j >= 0; j--) {
      zs = y * zs + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff1, i)), j);
    }
    sum = sum * x + i * zs;
  }
  return sum;
}

- (jdouble)evalDiffYPolyAtWithDouble:(jdouble)x
                          withDouble:(jdouble)y {
  return [self evalDiffYPolyAtWithDouble:x withDouble:y withBoolean:NO];
}

- (jdouble)evalDiffYPolyAtWithDouble:(jdouble)x
                          withDouble:(jdouble)y
                         withBoolean:(jboolean)squarefree {
  jdouble sum = 0;
  jdouble zs = 0;
  IOSObjectArray *coeff1 = [self getCoeffWithBoolean:squarefree];
  if (coeff1 != nil) for (jint i = coeff1->size_ - 1; i >= 0; i--) {
    zs = 0;
    for (jint j = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff1, i)))->size_ - 1; j >= 1; j--) {
      zs = y * zs + j * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff1, i)), j);
    }
    sum = sum * x + zs;
  }
  return sum;
}

- (void)plugInRatPolyWithDoubleArray2:(IOSObjectArray *)pX
                     withDoubleArray2:(IOSObjectArray *)pY
                     withDoubleArray2:(IOSObjectArray *)qX
                     withDoubleArray2:(IOSObjectArray *)qY {
  jint degXpX = ((IOSObjectArray *) nil_chk(pX))->size_ - 1;
  jint degYpX = 0;
  for (jint i = 0; i < pX->size_; i++) {
    if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(pX, i)))->size_ - 1 > degYpX) degYpX = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(pX, i)))->size_ - 1;
  }
  jint degXqX = -1;
  jint degYqX = -1;
  if (qX != nil) {
    degXqX = qX->size_ - 1;
    for (jint i = 0; i < qX->size_; i++) {
      if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(qX, i)))->size_ - 1 > degYqX) degYqX = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(qX, i)))->size_ - 1;
    }
  }
  jint degXpY = ((IOSObjectArray *) nil_chk(pY))->size_ - 1;
  jint degYpY = 0;
  for (jint i = 0; i < pY->size_; i++) {
    if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(pY, i)))->size_ - 1 > degYpY) degYpY = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(pY, i)))->size_ - 1;
  }
  jint degXqY = -1;
  jint degYqY = -1;
  if (qY != nil) {
    degXqY = qY->size_ - 1;
    for (jint i = 0; i < qY->size_; i++) {
      if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(qY, i)))->size_ - 1 > degYqY) degYqY = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(qY, i)))->size_ - 1;
    }
  }
  jboolean sameDenom = NO;
  if (qX != nil && qY != nil) {
    sameDenom = YES;
    if (degXqX == degXqY && degYqX == degYqY) {
      for (jint i = 0; i < qX->size_; i++) if (!JavaUtilArrays_equalsWithDoubleArray_withDoubleArray_(IOSObjectArray_Get(qY, i), IOSObjectArray_Get(qX, i))) {
        sameDenom = NO;
        break;
      }
    }
  }
  jint commDeg = 0;
  if (sameDenom) {
    commDeg = [self getDeg];
  }
  jint newDegX = JavaLangMath_maxWithInt_withInt_(degXpX, degXqX) * degX_ + JavaLangMath_maxWithInt_withInt_(degXpY, degXqY) * degY_;
  jint newDegY = JavaLangMath_maxWithInt_withInt_(degYpX, degYqX) * degX_ + JavaLangMath_maxWithInt_withInt_(degYpY, degYqY) * degY_;
  IOSObjectArray *newCoeff = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ newDegX + 1, newDegY + 1 }];
  IOSObjectArray *tmpCoeff = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ newDegX + 1, newDegY + 1 }];
  IOSObjectArray *ratXCoeff = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ newDegX + 1, newDegY + 1 }];
  IOSObjectArray *ratYCoeff = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ newDegX + 1, newDegY + 1 }];
  jint tmpCoeffDegX = 0;
  jint tmpCoeffDegY = 0;
  jint newCoeffDegX = 0;
  jint newCoeffDegY = 0;
  jint ratXCoeffDegX = 0;
  jint ratXCoeffDegY = 0;
  jint ratYCoeffDegX = 0;
  jint ratYCoeffDegY = 0;
  for (jint i = 0; i < newDegX; i++) {
    for (jint j = 0; j < newDegY; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(newCoeff, i)), j) = 0;
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(tmpCoeff, i)), j) = 0;
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(ratXCoeff, i)), j) = 0;
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(ratYCoeff, i)), j) = 0;
    }
  }
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(ratXCoeff, 0)), 0) = 1;
  for (jint x = ((IOSObjectArray *) nil_chk(coeff_))->size_ - 1; x >= 0; x--) {
    if (qY != nil) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(ratYCoeff, 0)), 0) = 1;
      ratYCoeffDegX = 0;
      ratYCoeffDegY = 0;
    }
    jint startY = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff_, x)))->size_ - 1;
    if (sameDenom) startY = commDeg - x;
    for (jint y = startY; y >= 0; y--) {
      if (qY == nil || y == startY) {
        if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff_, x)))->size_ > y) *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(tmpCoeff, 0)), 0) += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff_, x)), y);
      }
      else {
        OrgGeogebraCommonKernelImplicitGeoImplicitPoly_polyMultWithDoubleArray2_withDoubleArray2_withInt_withInt_withInt_withInt_(ratYCoeff, qY, ratYCoeffDegX, ratYCoeffDegY, degXqY, degYqY);
        ratYCoeffDegX += degXqY;
        ratYCoeffDegY += degYqY;
        if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff_, x)))->size_ > y) for (jint i = 0; i <= ratYCoeffDegX; i++) {
          for (jint j = 0; j <= ratYCoeffDegY; j++) {
            *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(tmpCoeff, i)), j) += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff_, x)), y) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(ratYCoeff, i)), j);
            if (y == 0) {
              *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(ratYCoeff, i)), j) = 0;
            }
          }
        }
        tmpCoeffDegX = JavaLangMath_maxWithInt_withInt_(tmpCoeffDegX, ratYCoeffDegX);
        tmpCoeffDegY = JavaLangMath_maxWithInt_withInt_(tmpCoeffDegY, ratYCoeffDegY);
      }
      if (y > 0) {
        OrgGeogebraCommonKernelImplicitGeoImplicitPoly_polyMultWithDoubleArray2_withDoubleArray2_withInt_withInt_withInt_withInt_(tmpCoeff, pY, tmpCoeffDegX, tmpCoeffDegY, degXpY, degYpY);
        tmpCoeffDegX += degXpY;
        tmpCoeffDegY += degYpY;
      }
    }
    if (qX != nil && x != coeff_->size_ - 1 && !sameDenom) {
      OrgGeogebraCommonKernelImplicitGeoImplicitPoly_polyMultWithDoubleArray2_withDoubleArray2_withInt_withInt_withInt_withInt_(ratXCoeff, qX, ratXCoeffDegX, ratXCoeffDegY, degXqX, degYqX);
      ratXCoeffDegX += degXqX;
      ratXCoeffDegY += degYqX;
      OrgGeogebraCommonKernelImplicitGeoImplicitPoly_polyMultWithDoubleArray2_withDoubleArray2_withInt_withInt_withInt_withInt_(tmpCoeff, ratXCoeff, tmpCoeffDegX, tmpCoeffDegY, ratXCoeffDegX, ratXCoeffDegY);
      tmpCoeffDegX += ratXCoeffDegX;
      tmpCoeffDegY += ratXCoeffDegY;
    }
    for (jint i = 0; i <= tmpCoeffDegX; i++) {
      for (jint j = 0; j <= tmpCoeffDegY; j++) {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(newCoeff, i)), j) += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(tmpCoeff, i)), j);
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(tmpCoeff, i)), j) = 0;
      }
    }
    newCoeffDegX = JavaLangMath_maxWithInt_withInt_(newCoeffDegX, tmpCoeffDegX);
    newCoeffDegY = JavaLangMath_maxWithInt_withInt_(newCoeffDegY, tmpCoeffDegY);
    tmpCoeffDegX = 0;
    tmpCoeffDegY = 0;
    if (x > 0) {
      OrgGeogebraCommonKernelImplicitGeoImplicitPoly_polyMultWithDoubleArray2_withDoubleArray2_withInt_withInt_withInt_withInt_(newCoeff, pX, newCoeffDegX, newCoeffDegY, degXpX, degYpX);
      newCoeffDegX += degXpX;
      newCoeffDegY += degYpX;
    }
  }
  coeff_ = OrgGeogebraCommonKernelImplicitPolynomialUtils_coeffMinDegWithDoubleArray2_(newCoeff);
  degX_ = ((IOSObjectArray *) nil_chk(coeff_))->size_ - 1;
  degY_ = 0;
  for (jint i = 0; i < coeff_->size_; i++) {
    degY_ = JavaLangMath_maxWithInt_withInt_(degY_, ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff_, i)))->size_ - 1);
  }
  [self setValidInputFormWithBoolean:NO];
  [self updatePath];
  if (algoUpdateSet_ != nil) {
    jdouble a = 0, ax = 0, ay = 0, b = 0, bx = 0, by = 0;
    if (qX == nil && qY == nil && degXpX <= 1 && degYpX <= 1 && degXpY <= 1 && degYpY <= 1) {
      if ((degXpX != 1 || degYpX != 1 || ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(pX, 1)))->size_ == 1 || OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(pX, 1)), 1))) && (degXpY != 1 || degYpY != 1 || ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(pY, 1)))->size_ == 1 || OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(pY, 1)), 1)))) {
        if (pX->size_ > 0) {
          if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(pX, 0)))->size_ > 0) {
            a = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(pX, 0)), 0);
          }
          if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(pX, 0)))->size_ > 1) {
            ay = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(pX, 0)), 1);
          }
        }
        if (pX->size_ > 1) {
          ax = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(pX, 1)), 0);
        }
        if (pY->size_ > 0) {
          if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(pY, 0)))->size_ > 0) {
            b = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(pY, 0)), 0);
          }
          if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(pY, 0)))->size_ > 1) {
            by = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(pY, 0)), 1);
          }
        }
        if (pY->size_ > 1) {
          bx = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(pY, 1)), 0);
        }
        jdouble det = ax * by - bx * ay;
        if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(det)) {
          IOSObjectArray *iX = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ (b * ay - a * by) / det, -ay / det } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ by / det } count:1] } count:2 type:IOSClass_doubleArray(1)];
          IOSObjectArray *iY = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -(b * ax - a * bx) / det, ax / det } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -bx / det } count:1] } count:2 type:IOSClass_doubleArray(1)];
          id<JavaUtilIterator> it = [algoUpdateSet_ getIterator];
          while (it != nil && [it hasNext]) {
            OrgGeogebraCommonKernelAlgosAlgoElement *elem = [((id<JavaUtilIterator>) nil_chk(it)) next];
            if ([elem isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoPointOnPath class]] && [self isIndependent]) {
              OrgGeogebraCommonKernelGeosGeoPoint *point = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoPointOnPath *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoPointOnPath *) check_class_cast(elem, [OrgGeogebraCommonKernelAlgosAlgoPointOnPath class])))) getP], [OrgGeogebraCommonKernelGeosGeoPoint class]);
              if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(point)) getZ])) {
                jdouble x = [point getX] / [point getZ];
                jdouble y = [point getY] / [point getZ];
                jdouble px = OrgGeogebraCommonKernelImplicitGeoImplicitPoly_evalPolyCoeffAtWithDouble_withDouble_withDoubleArray2_(x, y, iX);
                jdouble py = OrgGeogebraCommonKernelImplicitGeoImplicitPoly_evalPolyCoeffAtWithDouble_withDouble_withDoubleArray2_(x, y, iY);
                [point setCoordsWithDouble:px withDouble:py withDouble:1];
                [point updateCoords];
              }
            }
          }
        }
      }
    }
  }
}

- (void)plugInPolyWithDoubleArray2:(IOSObjectArray *)polyX
                  withDoubleArray2:(IOSObjectArray *)polyY {
  [self plugInRatPolyWithDoubleArray2:polyX withDoubleArray2:polyY withDoubleArray2:nil withDoubleArray2:nil];
}

+ (void)polyMultWithDoubleArray2:(IOSObjectArray *)polyDest
                withDoubleArray2:(IOSObjectArray *)polySrc
                         withInt:(jint)degDestX
                         withInt:(jint)degDestY
                         withInt:(jint)degSrcX
                         withInt:(jint)degSrcY {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_polyMultWithDoubleArray2_withDoubleArray2_withInt_withInt_withInt_withInt_(polyDest, polySrc, degDestX, degDestY, degSrcX, degSrcY);
}

- (jboolean)isConstant {
  return isConstant__;
}

- (jint)getDegX {
  return degX_;
}

- (jint)getDegY {
  return degY_;
}

- (void)getFactors {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_getFactors(self);
}

- (jdouble)distanceWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p {
  OrgGeogebraCommonKernelAlgosAlgoClosestPoint *algo = new_OrgGeogebraCommonKernelAlgosAlgoClosestPoint_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelPath_withOrgGeogebraCommonKernelKernelNDGeoPointND_(cons_, self, p);
  [algo remove];
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> pointOnCurve = [algo getP];
  return [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:pointOnCurve];
}

- (void)throughPointsWithOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points {
  JavaUtilArrayList *p = new_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) [p addWithId:IOSObjectArray_Get(points, i)];
  [self throughPointsWithJavaUtilArrayList:p];
}

- (void)throughPointsWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)points {
  JavaUtilArrayList *p = new_JavaUtilArrayList_init();
  for (jint i = 0; i < [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(points)) size]; i++) [p addWithId:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([points getWithInt:i], [OrgGeogebraCommonKernelGeosGeoPoint class])];
  [self throughPointsWithJavaUtilArrayList:p];
}

- (void)throughPointsWithJavaUtilArrayList:(JavaUtilArrayList *)points {
  if (J2ObjCFpToInt(JavaLangMath_sqrtWithDouble_(9 + 8 * [((JavaUtilArrayList *) nil_chk(points)) size])) != JavaLangMath_sqrtWithDouble_(9 + 8 * [points size])) {
    [self setUndefined];
    return;
  }
  jint degree = J2ObjCFpToInt((0.5 * JavaLangMath_sqrtWithDouble_(8 * (1 + [points size])))) - 1;
  jint realDegree = degree;
  id<OrgApacheCommonsMathLinearRealMatrix> extendMatrix = new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithInt_withInt_([points size], [points size] + 1);
  id<OrgApacheCommonsMathLinearRealMatrix> matrix = new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithInt_withInt_([points size], [points size]);
  IOSObjectArray *coeffMatrix = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ degree + 1, degree + 1 }];
  id<OrgApacheCommonsMathLinearDecompositionSolver> solver;
  IOSDoubleArray *matrixRow = [IOSDoubleArray newArrayWithLength:[points size] + 1];
  IOSDoubleArray *results;
  for (jint i = 0; i < [points size]; i++) {
    jdouble x = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([points getWithInt:i]))->x_ / ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([points getWithInt:i]))->z_;
    jdouble y = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([points getWithInt:i]))->y_ / ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([points getWithInt:i]))->z_;
    for (jint j = 0, m = 0; j < degree + 1; j++) for (jint k = 0; j + k != degree + 1; k++) *IOSDoubleArray_GetRef(matrixRow, m++) = JavaLangMath_powWithDouble_withDouble_(x, j) * JavaLangMath_powWithDouble_withDouble_(y, k);
    [extendMatrix setRowWithInt:i withDoubleArray:matrixRow];
  }
  jint solutionColumn = 0, noPoints = [points size];
  do {
    if (solutionColumn > noPoints) {
      noPoints = noPoints - realDegree - 1;
      if (noPoints < 2) {
        [self setUndefined];
        return;
      }
      extendMatrix = new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithInt_withInt_(noPoints, noPoints + 1);
      realDegree -= 1;
      matrixRow = [IOSDoubleArray newArrayWithLength:noPoints + 1];
      for (jint i = 0; i < noPoints; i++) {
        jdouble x = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([points getWithInt:i]))->x_;
        jdouble y = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([points getWithInt:i]))->y_;
        for (jint j = 0, m = 0; j < realDegree + 1; j++) for (jint k = 0; j + k != realDegree + 1; k++) *IOSDoubleArray_GetRef(matrixRow, m++) = JavaLangMath_powWithDouble_withDouble_(x, j) * JavaLangMath_powWithDouble_withDouble_(y, k);
        [extendMatrix setRowWithInt:i withDoubleArray:matrixRow];
      }
      matrix = new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithInt_withInt_(noPoints, noPoints);
      solutionColumn = 0;
    }
    results = [extendMatrix getColumnWithInt:solutionColumn];
    for (jint i = 0, j = 0; i < noPoints + 1; i++) {
      if (i == solutionColumn) continue;
      [matrix setColumnWithInt:j++ withDoubleArray:[extendMatrix getColumnWithInt:i]];
    }
    solutionColumn++;
    solver = [new_OrgApacheCommonsMathLinearLUDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(matrix) getSolver];
  }
  while (![((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk(solver)) isNonSingular]);
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(results))->size_; i++) *IOSDoubleArray_GetRef(results, i) *= -1;
  IOSDoubleArray *partialSolution = [((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk(solver)) solveWithDoubleArray:results];
  IOSDoubleArray *solution = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(partialSolution))->size_ + 1];
  for (jint i = 0, j = 0; i < solution->size_; i++) if (i == solutionColumn - 1) *IOSDoubleArray_GetRef(solution, i) = 1;
  else {
    *IOSDoubleArray_GetRef(solution, i) = (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(partialSolution, j))) ? 0 : IOSDoubleArray_Get(partialSolution, j);
    j++;
  }
  for (jint i = 0, k = 0; i < realDegree + 1; i++) for (jint j = 0; i + j < realDegree + 1; j++) *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeffMatrix, i)), j) = IOSDoubleArray_Get(solution, k++);
  [self setCoeffWithDoubleArray2:coeffMatrix withBoolean:YES];
  [self setDefined];
  for (jint i = 0; i < [points size]; i++) if (![self isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:[points getWithInt:i] withDouble:1]) {
    [self setUndefined];
    return;
  }
}

- (void)polishPointOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) updateCoords2D];
  jdouble x = [PI getX2D];
  jdouble y = [PI getY2D];
  jdouble dx, dy;
  dx = [self evalDiffXPolyAtWithDouble:x withDouble:y];
  dy = [self evalDiffYPolyAtWithDouble:x withDouble:y];
  jdouble d = JavaLangMath_absWithDouble_(dx) + JavaLangMath_absWithDouble_(dy);
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(d)) return;
  dx /= d;
  dy /= d;
  IOSDoubleArray *pair = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ x, y } count:2];
  IOSDoubleArray *line = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ y * dx - x * dy, dy, -dx } count:3];
  if (OrgGeogebraCommonKernelImplicitPolynomialUtils_rootPolishingWithDoubleArray_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withDoubleArray_(pair, self, line)) {
    [PI setCoords2DWithDouble:IOSDoubleArray_Get(pair, 0) withDouble:IOSDoubleArray_Get(pair, 1) withDouble:1];
  }
}

- (void)pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  if ([((JavaUtilArrayList *) nil_chk([((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) getPoints])) size] > 0) {
    [locus_ pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI];
    [self polishPointOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI];
  }
}

- (void)pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI]) {
    [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI];
    return;
  }
  if ([((JavaUtilArrayList *) nil_chk([((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) getPoints])) size] > 0) {
    [locus_ pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI];
    [self polishPointOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI];
  }
}

- (jboolean)isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  return [self isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI withDouble:OrgGeogebraCommonKernelKernel_STANDARD_PRECISION];
}

- (jboolean)isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI
                                                       withDouble:(jdouble)eps {
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) isDefined]) return NO;
  jdouble px, py, pz;
  if ([PI isGeoElement3D]) {
    OrgGeogebraCommonKernelMatrixCoords *coords = [PI getInhomCoordsInD3];
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getZ])) {
      return NO;
    }
    px = [coords getX];
    py = [coords getY];
  }
  else {
    OrgGeogebraCommonKernelGeosGeoPoint *P = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(PI, [OrgGeogebraCommonKernelGeosGeoPoint class]);
    px = P->x_;
    py = P->y_;
    pz = P->z_;
    if ([P isFinite]) {
      px /= pz;
      py /= pz;
    }
  }
  jdouble value = [self evalPolyAtWithDouble:px withDouble:py];
  return JavaLangMath_absWithDouble_(value) < OrgGeogebraCommonKernelKernel_MIN_PRECISION;
}

- (jdouble)getMinParameter {
  return [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) getMinParameter];
}

- (jdouble)getMaxParameter {
  return [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) getMaxParameter];
}

- (jboolean)isClosedPath {
  return [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) isClosedPath];
}

- (id<OrgGeogebraCommonKernelPathMover>)createPathMover {
  return [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) createPathMover];
}

- (jboolean)isTraceable {
  return YES;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (jboolean)getTrace {
  return trace_;
}

- (jint)getDeg {
  jint deg = 0;
  for (jint d = degX_ + degY_; d >= 0; d--) {
    for (jint x = 0; x <= degX_; x++) {
      jint y = d - x;
      if (y >= 0 && y < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(coeff_), x)))->size_) {
        if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff_, x)), y)) > OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) {
          deg = d;
          d = 0;
          break;
        }
      }
    }
  }
  return deg;
}

- (void)mirrorWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c {
  if ([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(c)) getCircleRadius] < 10e-2) {
    [self setUndefined];
    return;
  }
  jdouble cx = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([c getMidpoint])) getX];
  jdouble cy = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([c getMidpoint])) getY];
  jdouble cr = [c getCircleRadius];
  [self plugInRatPolyWithDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ cx * cx * cx + cx * cy * cy - cx * cr * cr, -2 * cx * cy, cx } count:3], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -2 * cx * cx + cr * cr, 0, 0 } count:3], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ cx, 0, 0 } count:3] } count:3 type:IOSClass_doubleArray(1)] withDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ cx * cx * cy + cy * cy * cy - cy * cr * cr, -2 * cy * cy + cr * cr, cy } count:3], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -2 * cx * cy, 0, 0 } count:3], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ cy, 0, 0 } count:3] } count:3 type:IOSClass_doubleArray(1)] withDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ cx * cx + cy * cy, -2 * cy, 1 } count:3], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -2 * cx, 0, 0 } count:3], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1, 0, 0 } count:3] } count:3 type:IOSClass_doubleArray(1)] withDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ cx * cx + cy * cy, -2 * cy, 1 } count:3], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -2 * cx, 0, 0 } count:3], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1, 0, 0 } count:3] } count:3 type:IOSClass_doubleArray(1)]];
}

- (void)mirrorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)Q {
  [self plugInPolyWithDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 2 * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(Q)) getX] } count:1], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -1 } count:1] } count:2 type:IOSClass_doubleArray(1)] withDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 2 * [Q getY], -1 } count:2] } count:1 type:IOSClass_doubleArray(1)]];
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g1 {
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g1)) isDefined]) {
    [self setUndefined];
    return;
  }
  OrgGeogebraCommonKernelGeosGeoLine *g = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g1, [OrgGeogebraCommonKernelGeosGeoLine class]);
  IOSDoubleArray *dir = [IOSDoubleArray newArrayWithLength:2];
  [g getDirectionWithDoubleArray:dir];
  jdouble dx = IOSDoubleArray_Get(dir, 0);
  jdouble dy = IOSDoubleArray_Get(dir, 1);
  jdouble x = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([g getStartPoint]))->inhomX_;
  jdouble y = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([g getStartPoint]))->inhomY_;
  jdouble n = 1 / (dx * dx + dy * dy);
  [self plugInPolyWithDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 2 * n * dy * (x * dy - y * dx), 2 * n * dx * dy } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1 - 2 * dy * dy * n, 0 } count:2] } count:2 type:IOSClass_doubleArray(1)] withDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 2 * n * dx * (y * dx - x * dy), 1 - 2 * n * dx * dx } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 2 * n * dx * dy, 0 } count:2] } count:2 type:IOSClass_doubleArray(1)]];
}

- (void)translateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  [self translateWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX] withDouble:[v getY]];
}

- (void)translateWithDouble:(jdouble)vx
                 withDouble:(jdouble)vy {
  jdouble a = -vx;
  jdouble b = -vy;
  [self plugInPolyWithDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ a } count:1], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1 } count:1] } count:2 type:IOSClass_doubleArray(1)] withDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ b, 1 } count:2] } count:1 type:IOSClass_doubleArray(1)]];
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiValue {
  jdouble phi = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(-phi);
  [self plugInPolyWithDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, -sin } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ cos, 0 } count:2] } count:2 type:IOSClass_doubleArray(1)] withDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, cos } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ sin, 0 } count:2] } count:2 type:IOSClass_doubleArray(1)]];
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiValue
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonKernelMatrixCoords *S = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoords];
  jdouble phi = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(-phi);
  jdouble x = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(S)) getX];
  jdouble y = [S getY];
  [self plugInPolyWithDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ x * (1 - cos) + y * sin, -sin } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ cos, 0 } count:2] } count:2 type:IOSClass_doubleArray(1)] withDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -x * sin + y * (1 - cos), cos } count:2], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ sin, 0 } count:2] } count:2 type:IOSClass_doubleArray(1)]];
}

- (void)dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)rval
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)S {
  jdouble r = 1 / [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble];
  [self plugInPolyWithDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ (1 - r) * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(S)) getX] } count:1], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ r } count:1] } count:2 type:IOSClass_doubleArray(1)] withDoubleArray2:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ (1 - r) * [S getY], r } count:2] } count:1 type:IOSClass_doubleArray(1)]];
}

- (jboolean)isTranslateable {
  return YES;
}

- (jchar)getLabelDelimiter {
  return ':';
}

- (jboolean)euclidianViewUpdate {
  if ([self isDefined]) {
    [self updatePath];
    return YES;
  }
  return NO;
}

- (jint)epsSignumWithDouble:(jdouble)x {
  if (x > OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) return 1;
  if (x < -OrgGeogebraCommonKernelKernel_STANDARD_PRECISION) return -1;
  return 0;
}

- (void)updatePath {
  IOSDoubleArray *viewBounds = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getViewBoundsForGeoWithOrgGeogebraCommonKernelGeosGeoElement:self];
  if (IOSDoubleArray_Get(nil_chk(viewBounds), 0) == JavaLangDouble_POSITIVE_INFINITY) {
    viewBounds = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -10, 10, -10, 10, 10, 10 } count:6];
  }
  gridWidth_ = JavaLangMath_minWithInt_withInt_(60, JavaLangMath_maxWithInt_withInt_(30, J2ObjCFpToInt((IOSDoubleArray_Get(viewBounds, 4) * (IOSDoubleArray_Get(viewBounds, 1) - IOSDoubleArray_Get(viewBounds, 0)) / 40))));
  gridHeight_ = JavaLangMath_minWithInt_withInt_(60, JavaLangMath_maxWithInt_withInt_(30, J2ObjCFpToInt((IOSDoubleArray_Get(viewBounds, 5) * (IOSDoubleArray_Get(viewBounds, 3) - IOSDoubleArray_Get(viewBounds, 2)) / 30))));
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("ICICD", gridWidth_, 'x', gridHeight_, ',', (IOSDoubleArray_Get(viewBounds, 1) - IOSDoubleArray_Get(viewBounds, 0))));
  [self updatePathWithDouble:IOSDoubleArray_Get(viewBounds, 0) withDouble:IOSDoubleArray_Get(viewBounds, 2) withDouble:IOSDoubleArray_Get(viewBounds, 1) - IOSDoubleArray_Get(viewBounds, 0) withDouble:IOSDoubleArray_Get(viewBounds, 3) - IOSDoubleArray_Get(viewBounds, 2) withDouble:1. / IOSDoubleArray_Get(viewBounds, 4) / IOSDoubleArray_Get(viewBounds, 5)];
}

- (void)updatePathWithDouble:(jdouble)rectX
                  withDouble:(jdouble)rectY
                  withDouble:(jdouble)rectW
                  withDouble:(jdouble)rectH
                  withDouble:(jdouble)resolution {
  if (!calcPath_ || [cons_ isKindOfClass:[OrgGeogebraCommonKernelMacroConstruction class]]) return;
  [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) clearPoints];
  singularitiesCollection_ = new_JavaUtilArrayList_init();
  boundaryIntersectCollection_ = new_JavaUtilArrayList_init();
  grid_ = [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ gridWidth_, gridHeight_ } type:OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect_class_()];
  remember_ = [IOSBooleanArray newArrayWithDimensions:2 lengths:(jint[]){ gridWidth_, gridHeight_ }];
  jdouble prec = 5;
  scaleX_ = prec * JavaLangMath_sqrtWithDouble_(resolution);
  scaleY_ = prec * JavaLangMath_sqrtWithDouble_(resolution);
  jdouble grw = rectW / gridWidth_;
  jdouble grh = rectH / gridHeight_;
  jdouble x = rectX;
  jint e;
  for (jint w = 0; w < gridWidth_; w++) {
    jdouble y = rectY;
    for (jint h = 0; h < gridHeight_; h++) {
      e = [self epsSignumWithDouble:[self evalPolyAtWithDouble:x withDouble:y withBoolean:YES]];
      (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(grid_, w)), h, new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect_initWithDouble_withDouble_withDouble_withDouble_(x, y, grw, grh));
      *IOSIntArray_GetRef(nil_chk(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->eval_), 0) = e;
      if (w > 0) {
        *IOSIntArray_GetRef(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w - 1)), h)))->eval_, 1) = e;
        if (h > 0) {
          *IOSIntArray_GetRef(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h - 1)))->eval_, 2) = e;
          *IOSIntArray_GetRef(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w - 1)), h - 1)))->eval_, 3) = e;
        }
      }
      else if (h > 0) *IOSIntArray_GetRef(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h - 1)))->eval_, 2) = e;
      y += grh;
    }
    e = [self epsSignumWithDouble:[self evalPolyAtWithDouble:x withDouble:y withBoolean:YES]];
    *IOSIntArray_GetRef(nil_chk(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), gridHeight_ - 1)))->eval_), 2) = e;
    if (w > 0) *IOSIntArray_GetRef(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w - 1)), gridHeight_ - 1)))->eval_, 3) = e;
    x += grw;
  }
  jdouble y = rectY;
  for (jint h = 0; h < gridHeight_; h++) {
    e = [self epsSignumWithDouble:[self evalPolyAtWithDouble:x withDouble:y withBoolean:YES]];
    *IOSIntArray_GetRef(nil_chk(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, gridWidth_ - 1)), h)))->eval_), 1) = e;
    if (h > 0) *IOSIntArray_GetRef(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, gridWidth_ - 1)), h - 1)))->eval_, 3) = e;
    y += grh;
  }
  *IOSIntArray_GetRef(nil_chk(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, gridWidth_ - 1)), gridHeight_ - 1)))->eval_), 3) = [self epsSignumWithDouble:[self evalPolyAtWithDouble:x withDouble:y withBoolean:YES]];
  for (jint w = 0; w < gridWidth_; w++) {
    for (jint h = 0; h < gridHeight_; h++) {
      *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(remember_, w)), h) = NO;
      if (IOSIntArray_Get(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->eval_, 0) == 0) {
        *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(remember_, w)), h) = YES;
        continue;
      }
      for (jint i = 1; i < 4; i++) {
        if (IOSIntArray_Get(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->eval_, 0) != IOSIntArray_Get(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->eval_, i)) {
          *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(remember_, w)), h) = YES;
          break;
        }
      }
    }
  }
  for (jint w = 0; w < gridWidth_; w++) {
    for (jint h = 0; h < gridHeight_; h++) {
      if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(remember_, w)), h)) {
        if (IOSIntArray_Get(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->eval_, 0) == 0) {
          OrgGeogebraCommonKernelImplicitGeoImplicitPoly_startPathWithInt_withInt_withDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoLocus_(self, w, h, ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->x_, ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->y_, locus_);
        }
        else {
          jdouble xs, ys;
          if (IOSIntArray_Get(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->eval_, 0) != IOSIntArray_Get(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->eval_, 3)) {
            jdouble a = [self bisecWithDouble:((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->x_ withDouble:((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->y_ withDouble:((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->x_ + ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->width_ withDouble:((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->y_ + ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->height_];
            xs = ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->x_ + a * ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->width_;
            ys = ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->y_ + a * ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->height_;
          }
          else if (IOSIntArray_Get(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->eval_, 1) != IOSIntArray_Get(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->eval_, 2)) {
            jdouble a = [self bisecWithDouble:((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->x_ + ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->width_ withDouble:((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->y_ withDouble:((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->x_ withDouble:((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->y_ + ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->height_];
            xs = ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->x_ + (1 - a) * ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->width_;
            ys = ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->y_ + a * ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->height_;
          }
          else {
            jdouble a = [self bisecWithDouble:((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->x_ withDouble:((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->y_ withDouble:((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->x_ + ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->width_ withDouble:((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->y_];
            xs = ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->x_ + a * ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->width_;
            ys = ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(grid_, w)), h)))->y_;
          }
          OrgGeogebraCommonKernelImplicitGeoImplicitPoly_startPathWithInt_withInt_withDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoLocus_(self, w, h, xs, ys, locus_);
        }
      }
    }
  }
  if (algoUpdateSet_ != nil) {
    id<JavaUtilIterator> it = [algoUpdateSet_ getIterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonKernelAlgosAlgoElement *elem = [it next];
      if ([elem isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoPointOnPath class]]) {
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(elem)) getInput]))->size_; i++) {
          if (IOSObjectArray_Get(nil_chk([elem getInput]), i) == self) {
            OrgGeogebraCommonKernelAlgosAlgoPointOnPath *ap = (OrgGeogebraCommonKernelAlgosAlgoPointOnPath *) check_class_cast(elem, [OrgGeogebraCommonKernelAlgosAlgoPointOnPath class]);
            if ([ap getPath] == self) {
              [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([ap getP])) setCoordsWithOrgGeogebraCommonKernelMatrixCoords:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk([ap getP])) getCoords] withBoolean:YES];
            }
            break;
          }
        }
      }
    }
  }
}

- (jdouble)scaledNormSquaredWithDouble:(jdouble)x
                            withDouble:(jdouble)y {
  return OrgGeogebraCommonKernelImplicitGeoImplicitPoly_scaledNormSquaredWithDouble_withDouble_(self, x, y);
}

- (void)startPathWithInt:(jint)width
                 withInt:(jint)height
              withDouble:(jdouble)x
              withDouble:(jdouble)y
withOrgGeogebraCommonKernelGeosGeoLocus:(OrgGeogebraCommonKernelGeosGeoLocus *)loc1 {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_startPathWithInt_withInt_withDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoLocus_(self, width, height, x, y, loc1);
}

- (jdouble)bisecWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2 {
  jint e1 = [self epsSignumWithDouble:[self evalPolyAtWithDouble:x1 withDouble:y1 withBoolean:YES]];
  jint e2 = [self epsSignumWithDouble:[self evalPolyAtWithDouble:x2 withDouble:y2 withBoolean:YES]];
  if (e1 == 0) return 0.;
  if (e2 == 0) return 1.;
  jdouble a1 = 0;
  jdouble a2 = 1;
  jint e;
  if (e1 != e2) {
    while (a2 - a1 > OrgGeogebraCommonKernelKernel_MAX_PRECISION) {
      e = [self epsSignumWithDouble:[self evalPolyAtWithDouble:x1 + (x2 - x1) * (a2 + a1) / 2 withDouble:y1 + (y2 - y1) * (a2 + a1) / 2 withBoolean:YES]];
      if (e == 0) {
        return (a2 + a1) / 2;
      }
      if (e == e1) {
        a1 = (a2 + a1) / 2;
      }
      else {
        a2 = (a1 + a2) / 2;
      }
    }
    return (a1 + a2) / 2;
  }
  return JavaLangDouble_NaN;
}

- (OrgGeogebraCommonKernelGeosGeoLocus *)getLocus {
  return locus_;
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoImplicitPoly", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withDoubleArray2:withBoolean:", "GeoImplicitPoly", NULL, 0x2, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withDoubleArray2:", "GeoImplicitPoly", NULL, 0x4, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticPolynomial:withBoolean:", "GeoImplicitPoly", NULL, 0x2, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticPolynomial:", "GeoImplicitPoly", NULL, 0x1, NULL, NULL },
    { "createImplicitPolyWithoutPathWithOrgGeogebraCommonKernelConstruction:withDoubleArray2:", "createImplicitPolyWithoutPath", "Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", 0x9, NULL, NULL },
    { "preventPathCreation", NULL, "V", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly:", "GeoImplicitPoly", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelKernelNDGeoConicND:", "GeoImplicitPoly", NULL, 0x1, NULL, NULL },
    { "coeffFromConicWithOrgGeogebraCommonKernelKernelNDGeoConicND:", "coeffFromConic", "[[D", 0xa, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "isOnScreen", NULL, "Z", 0x1, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "isGeoImplicitPoly", NULL, "Z", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "setDefined", NULL, "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "addPowWithJavaLangStringBuilder:withInt:withOrgGeogebraCommonKernelStringTemplate:", "addPow", "V", 0xa, NULL, NULL },
    { "toRawValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toRawValueString", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "appendMultiplyWithJavaLangStringBuilder:", "appendMultiply", "V", 0xa, NULL, NULL },
    { "setCoeffWithDoubleArray2:", "setCoeff", "V", 0x1, NULL, NULL },
    { "setCoeffWithDoubleArray2:withBoolean:", "setCoeff", "V", 0x1, NULL, NULL },
    { "setCoeffWithOrgGeogebraCommonKernelArithmeticExpressionValueArray2:", "setCoeff", "V", 0x1, NULL, NULL },
    { "setCoeffWithOrgGeogebraCommonKernelArithmeticExpressionValueArray2:withBoolean:", "setCoeff", "V", 0x1, NULL, NULL },
    { "getCoeffWithBoolean:", "getCoeff", "[[D", 0x1, NULL, NULL },
    { "getCoeff", NULL, "[[D", 0x1, NULL, NULL },
    { "evalPolyAtWithDouble:withDouble:", "evalPolyAt", "D", 0x1, NULL, NULL },
    { "evalPolyAtWithDouble:withDouble:withBoolean:", "evalPolyAt", "D", 0x1, NULL, NULL },
    { "evalPolyCoeffAtWithDouble:withDouble:withDoubleArray2:", "evalPolyCoeffAt", "D", 0x9, NULL, NULL },
    { "evalDiffXPolyAtWithDouble:withDouble:", "evalDiffXPolyAt", "D", 0x1, NULL, NULL },
    { "evalDiffXPolyAtWithDouble:withDouble:withBoolean:", "evalDiffXPolyAt", "D", 0x1, NULL, NULL },
    { "evalDiffYPolyAtWithDouble:withDouble:", "evalDiffYPolyAt", "D", 0x1, NULL, NULL },
    { "evalDiffYPolyAtWithDouble:withDouble:withBoolean:", "evalDiffYPolyAt", "D", 0x1, NULL, NULL },
    { "plugInRatPolyWithDoubleArray2:withDoubleArray2:withDoubleArray2:withDoubleArray2:", "plugInRatPoly", "V", 0x1, NULL, NULL },
    { "plugInPolyWithDoubleArray2:withDoubleArray2:", "plugInPoly", "V", 0x1, NULL, NULL },
    { "polyMultWithDoubleArray2:withDoubleArray2:withInt:withInt:withInt:withInt:", "polyMult", "V", 0xa, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "getDegX", NULL, "I", 0x1, NULL, NULL },
    { "getDegY", NULL, "I", 0x1, NULL, NULL },
    { "getFactors", NULL, "V", 0x2, NULL, NULL },
    { "distanceWithOrgGeogebraCommonKernelGeosGeoPoint:", "distance", "D", 0x11, NULL, NULL },
    { "throughPointsWithOrgGeogebraCommonKernelGeosGeoPointArray:", "throughPoints", "V", 0x1, NULL, NULL },
    { "throughPointsWithOrgGeogebraCommonKernelGeosGeoList:", "throughPoints", "V", 0x1, NULL, NULL },
    { "throughPointsWithJavaUtilArrayList:", "throughPoints", "V", 0x1, NULL, NULL },
    { "polishPointOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "polishPointOnPath", "V", 0x4, NULL, NULL },
    { "pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lorg.geogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "getDeg", NULL, "I", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelGeosGeoConic:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "translateWithOrgGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "translateWithDouble:withDouble:", "translate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x1, NULL, NULL },
    { "getLabelDelimiter", NULL, "C", 0x4, NULL, NULL },
    { "euclidianViewUpdate", NULL, "Z", 0x1, NULL, NULL },
    { "epsSignumWithDouble:", "epsSignum", "I", 0x1, NULL, NULL },
    { "updatePath", NULL, "V", 0x1, NULL, NULL },
    { "updatePathWithDouble:withDouble:withDouble:withDouble:withDouble:", "updatePath", "V", 0x1, NULL, NULL },
    { "scaledNormSquaredWithDouble:withDouble:", "scaledNormSquared", "D", 0x2, NULL, NULL },
    { "startPathWithInt:withInt:withDouble:withDouble:withOrgGeogebraCommonKernelGeosGeoLocus:", "startPath", "V", 0x2, NULL, NULL },
    { "bisecWithDouble:withDouble:withDouble:withDouble:", "bisec", "D", 0x1, NULL, NULL },
    { "getLocus", NULL, "Lorg.geogebra.common.kernel.geos.GeoLocus;", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "coeff_", NULL, 0x2, "[[D", NULL, NULL,  },
    { "coeffSquarefree_", NULL, 0x2, "[[D", NULL, NULL,  },
    { "degX_", NULL, 0x2, "I", NULL, NULL,  },
    { "degY_", NULL, 0x2, "I", NULL, NULL,  },
    { "defined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isConstant__", "isConstant", 0x2, "Z", NULL, NULL,  },
    { "calcPath_", NULL, 0x2, "Z", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
    { "locus_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLocus;", NULL, NULL,  },
    { "singularitiesCollection_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<L[D;>;",  },
    { "boundaryIntersectCollection_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<L[D;>;",  },
    { "remember_", NULL, 0x2, "[[Z", NULL, NULL,  },
    { "grid_", NULL, 0x2, "[[Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly$GridRect;", NULL, NULL,  },
    { "gridWidth_", NULL, 0x2, "I", NULL, NULL,  },
    { "gridHeight_", NULL, 0x2, "I", NULL, NULL,  },
    { "scaleX_", NULL, 0x2, "D", NULL, NULL,  },
    { "scaleY_", NULL, 0x2, "D", NULL, NULL,  },
    { "minGap_", NULL, 0x2, "D", NULL, NULL,  },
    { "MIN_GRAD_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MIN_GRAD },
    { "MIN_STEP_SIZE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MIN_STEP_SIZE },
    { "START_STEP_SIZE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelImplicitGeoImplicitPoly_START_STEP_SIZE },
    { "MAX_STEP_SIZE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MAX_STEP_SIZE },
    { "SING_RADIUS_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelImplicitGeoImplicitPoly_SING_RADIUS },
    { "NEAR_SING_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelImplicitGeoImplicitPoly_NEAR_SING },
    { "MAX_STEPS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MAX_STEPS },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly$GridRect;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelImplicitGeoImplicitPoly = { 2, "GeoImplicitPoly", "org.geogebra.common.kernel.implicit", NULL, 0x1, 83, methods, 25, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelImplicitGeoImplicitPoly;
}

@end

void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self, OrgGeogebraCommonKernelConstruction *c) {
  (void) OrgGeogebraCommonKernelGeosGeoUserInputElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->defined_ = YES;
  self->gridWidth_ = 30;
  self->gridHeight_ = 30;
  self->minGap_ = 0.001;
  self->degX_ = -1;
  self->degY_ = -1;
  self->coeffSquarefree_ = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ 0, 0 }];
  self->coeff_ = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ 0, 0 }];
  self->locus_ = new_OrgGeogebraCommonKernelGeosGeoLocus_initWithOrgGeogebraCommonKernelConstruction_(c);
  [self->locus_ setDefinedWithBoolean:YES];
  self->calcPath_ = YES;
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(c)) registerEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:self];
}

OrgGeogebraCommonKernelImplicitGeoImplicitPoly *new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self = [OrgGeogebraCommonKernelImplicitGeoImplicitPoly alloc];
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray2_withBoolean_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, IOSObjectArray *coeff, jboolean calcPath) {
  (void) OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  [self setLabelWithNSString:label];
  self->calcPath_ = calcPath;
  [self setCoeffWithDoubleArray2:coeff withBoolean:calcPath];
  if (!calcPath) [((OrgGeogebraCommonKernelConstruction *) nil_chk(c)) unregisterEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:self];
}

OrgGeogebraCommonKernelImplicitGeoImplicitPoly *new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray2_withBoolean_(OrgGeogebraCommonKernelConstruction *c, NSString *label, IOSObjectArray *coeff, jboolean calcPath) {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self = [OrgGeogebraCommonKernelImplicitGeoImplicitPoly alloc];
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray2_withBoolean_(self, c, label, coeff, calcPath);
  return self;
}

void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray2_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, IOSObjectArray *coeff) {
  (void) OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray2_withBoolean_(self, c, label, coeff, YES);
}

OrgGeogebraCommonKernelImplicitGeoImplicitPoly *new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray2_(OrgGeogebraCommonKernelConstruction *c, NSString *label, IOSObjectArray *coeff) {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self = [OrgGeogebraCommonKernelImplicitGeoImplicitPoly alloc];
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray2_(self, c, label, coeff);
  return self;
}

void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticPolynomial_withBoolean_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, OrgGeogebraCommonKernelArithmeticPolynomial *poly, jboolean calcPath) {
  (void) OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  [self setLabelWithNSString:label];
  self->calcPath_ = calcPath;
  [self setCoeffWithOrgGeogebraCommonKernelArithmeticExpressionValueArray2:[((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk(poly)) getCoeff] withBoolean:calcPath];
  if (!calcPath) [((OrgGeogebraCommonKernelConstruction *) nil_chk(c)) unregisterEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:self];
}

OrgGeogebraCommonKernelImplicitGeoImplicitPoly *new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticPolynomial_withBoolean_(OrgGeogebraCommonKernelConstruction *c, NSString *label, OrgGeogebraCommonKernelArithmeticPolynomial *poly, jboolean calcPath) {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self = [OrgGeogebraCommonKernelImplicitGeoImplicitPoly alloc];
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticPolynomial_withBoolean_(self, c, label, poly, calcPath);
  return self;
}

void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticPolynomial_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, OrgGeogebraCommonKernelArithmeticPolynomial *poly) {
  (void) OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticPolynomial_withBoolean_(self, c, label, poly, YES);
}

OrgGeogebraCommonKernelImplicitGeoImplicitPoly *new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticPolynomial_(OrgGeogebraCommonKernelConstruction *c, NSString *label, OrgGeogebraCommonKernelArithmeticPolynomial *poly) {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self = [OrgGeogebraCommonKernelImplicitGeoImplicitPoly alloc];
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticPolynomial_(self, c, label, poly);
  return self;
}

OrgGeogebraCommonKernelImplicitGeoImplicitPoly *OrgGeogebraCommonKernelImplicitGeoImplicitPoly_createImplicitPolyWithoutPathWithOrgGeogebraCommonKernelConstruction_withDoubleArray2_(OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *coeff) {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initialize();
  return new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDoubleArray2_withBoolean_(c, nil, coeff, NO);
}

void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *g) {
  (void) OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_(self, ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(g))->cons_);
  [self setWithOrgGeogebraCommonKernelGeosGeoElement:g];
}

OrgGeogebraCommonKernelImplicitGeoImplicitPoly *new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *g) {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self = [OrgGeogebraCommonKernelImplicitGeoImplicitPoly alloc];
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelImplicitGeoImplicitPoly_(self, g);
  return self;
}

void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self, OrgGeogebraCommonKernelKernelNDGeoConicND *c) {
  (void) OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_(self, [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) getConstruction]);
  self->coeff_ = OrgGeogebraCommonKernelImplicitGeoImplicitPoly_coeffFromConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(c);
  self->degX_ = 2;
  self->degY_ = 2;
}

OrgGeogebraCommonKernelImplicitGeoImplicitPoly *new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelKernelNDGeoConicND *c) {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self = [OrgGeogebraCommonKernelImplicitGeoImplicitPoly alloc];
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelKernelNDGeoConicND_(self, c);
  return self;
}

IOSObjectArray *OrgGeogebraCommonKernelImplicitGeoImplicitPoly_coeffFromConicWithOrgGeogebraCommonKernelKernelNDGeoConicND_(OrgGeogebraCommonKernelKernelNDGeoConicND *c) {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initialize();
  IOSObjectArray *mat = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ 3, 3 }];
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(mat, 0)), 0) = IOSDoubleArray_Get(nil_chk([((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) getMatrix]), 2);
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(mat, 1)), 1) = 2 * IOSDoubleArray_Get(nil_chk([c getMatrix]), 3);
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(mat, 2)), 2) = 0;
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(mat, 1)), 0) = 2 * IOSDoubleArray_Get(nil_chk([c getMatrix]), 4);
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(mat, 0)), 1) = 2 * IOSDoubleArray_Get(nil_chk([c getMatrix]), 5);
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(mat, 2)), 0) = IOSDoubleArray_Get(nil_chk([c getMatrix]), 0);
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(mat, 0)), 2) = IOSDoubleArray_Get(nil_chk([c getMatrix]), 1);
  *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(mat, 2)), 1) = *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(mat, 1)), 2) = 0;
  return mat;
}

void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_addPowWithJavaLangStringBuilder_withInt_withOrgGeogebraCommonKernelStringTemplate_(JavaLangStringBuilder *sb, jint exp, OrgGeogebraCommonKernelStringTemplate *tpl) {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initialize();
  if (exp > 1) {
    if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType])) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'^'];
      (void) [sb appendWithChar:'{'];
      (void) [sb appendWithInt:exp];
      (void) [sb appendWithChar:'}'];
    }
    else if (([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([tpl getStringType])) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML()]) || ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([tpl getStringType])) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()])) {
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'^'];
      (void) [sb appendWithInt:exp];
    }
    else {
      NSString *p = @"";
      jint i = exp;
      while (i > 0) {
        jint c = i % 10;
        switch (c) {
          case 1:
          p = JreStrcat("C$", 0x00b9, p);
          break;
          case 2:
          p = JreStrcat("C$", 0x00b2, p);
          break;
          case 3:
          p = JreStrcat("C$", 0x00b3, p);
          break;
          default:
          p = JreStrcat("C$", (jchar) (0x2070 + c), p);
        }
        i = i / 10;
      }
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:p];
    }
  }
}

void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_appendMultiplyWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initialize();
  if ([((JavaLangStringBuilder *) nil_chk(sb)) length] == 0) {
    return;
  }
  jchar ch = [sb charAtWithInt:[sb length] - 1];
  if (ch != '*' && ch != ' ') {
    (void) [sb appendWithChar:'*'];
  }
}

jdouble OrgGeogebraCommonKernelImplicitGeoImplicitPoly_evalPolyCoeffAtWithDouble_withDouble_withDoubleArray2_(jdouble x, jdouble y, IOSObjectArray *coeff) {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initialize();
  jdouble sum = 0;
  jdouble zs = 0;
  if (coeff != nil) for (jint i = coeff->size_ - 1; i >= 0; i--) {
    zs = 0;
    for (jint j = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff, i)))->size_ - 1; j >= 0; j--) {
      zs = y * zs + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), j);
    }
    sum = sum * x + zs;
  }
  return sum;
}

void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_polyMultWithDoubleArray2_withDoubleArray2_withInt_withInt_withInt_withInt_(IOSObjectArray *polyDest, IOSObjectArray *polySrc, jint degDestX, jint degDestY, jint degSrcX, jint degSrcY) {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initialize();
  IOSObjectArray *result = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ degDestX + degSrcX + 1, degDestY + degSrcY + 1 }];
  for (jint n = 0; n <= degDestX + degSrcX; n++) {
    for (jint m = 0; m <= degDestY + degSrcY; m++) {
      jdouble sum = 0;
      for (jint k = JavaLangMath_maxWithInt_withInt_(0, n - degSrcX); k <= JavaLangMath_minWithInt_withInt_(n, degDestX); k++) for (jint j = JavaLangMath_maxWithInt_withInt_(0, m - degSrcY); j <= JavaLangMath_minWithInt_withInt_(m, degDestY); j++) sum += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(polyDest), k)), j) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(polySrc), n - k)), m - j);
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(result, n)), m) = sum;
    }
  }
  for (jint n = 0; n <= degDestX + degSrcX; n++) {
    for (jint m = 0; m <= degDestY + degSrcY; m++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(polyDest), n)), m) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(result, n)), m);
    }
  }
}

void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_getFactors(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self) {
}

jdouble OrgGeogebraCommonKernelImplicitGeoImplicitPoly_scaledNormSquaredWithDouble_withDouble_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self, jdouble x, jdouble y) {
  return x * x / self->scaleX_ / self->scaleX_ + y * y / self->scaleY_ / self->scaleY_;
}

void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_startPathWithInt_withInt_withDouble_withDouble_withOrgGeogebraCommonKernelGeosGeoLocus_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *self, jint width, jint height, jdouble x, jdouble y, OrgGeogebraCommonKernelGeosGeoLocus *loc1) {
  jint w = width;
  jint h = height;
  jdouble sx = x;
  jdouble sy = y;
  jdouble lx = JavaLangDouble_NaN;
  jdouble ly = JavaLangDouble_NaN;
  jboolean first = YES;
  jdouble stepSize = OrgGeogebraCommonKernelImplicitGeoImplicitPoly_START_STEP_SIZE * JavaLangMath_maxWithDouble_withDouble_(self->scaleX_, self->scaleY_);
  jdouble startX = x;
  jdouble startY = y;
  JavaUtilArrayList *firstDirPoints = new_JavaUtilArrayList_init();
  [firstDirPoints addWithId:new_OrgGeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(x, y, YES)];
  jint s = 0;
  jint lastW = w;
  jint lastH = h;
  jint startW = w;
  jint startH = h;
  jboolean nearSing = NO;
  jdouble lastGradX = JavaLangDouble_POSITIVE_INFINITY;
  jdouble lastGradY = JavaLangDouble_POSITIVE_INFINITY;
  while (s < OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MAX_STEPS) {
    s++;
    jboolean reachedSingularity = NO;
    jboolean reachedEnd = NO;
    if (!JavaLangDouble_isNaNWithDouble_(lx) && !JavaLangDouble_isNaNWithDouble_(ly)) {
      if ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_scaledNormSquaredWithDouble_withDouble_(self, startX - sx, startY - sy) < OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MAX_STEP_SIZE * OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MAX_STEP_SIZE) && (OrgGeogebraCommonKernelImplicitGeoImplicitPoly_scaledNormSquaredWithDouble_withDouble_(self, startX - sx, startY - sy) < OrgGeogebraCommonKernelImplicitGeoImplicitPoly_scaledNormSquaredWithDouble_withDouble_(self, startX - lx, startY - ly))) {
        if (firstDirPoints != nil) {
          OrgGeogebraCommonKernelMyPoint *firstPoint = [firstDirPoints getWithInt:0];
          ((OrgGeogebraCommonKernelMyPoint *) nil_chk(firstPoint))->lineTo_ = NO;
          [((JavaUtilArrayList *) nil_chk([((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(loc1)) getPoints])) addAllWithJavaUtilCollection:firstDirPoints];
        }
        [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(loc1)) insertPointWithDouble:x withDouble:y withBoolean:YES];
        return;
      }
    }
    if (w > ((IOSObjectArray *) nil_chk(self->grid_))->size_ || h > ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->grid_, w)))->size_ || IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->grid_, w)), h) == nil) {
      if (w > self->grid_->size_ || h > ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->grid_, w)))->size_) {
        OrgGeogebraCommonMainApp_printStacktraceWithId_(JreStrcat("$ICICI", @"GRID", self->grid_->size_, ',', w, ',', h));
      }
      else {
        OrgGeogebraCommonMainApp_printStacktraceWithId_(JreStrcat("$ICICICICI", @"GRID NULL", self->grid_->size_, ',', w, ',', h, ',', self->gridWidth_, ',', self->gridHeight_));
      }
    }
    while (sx < ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->grid_, w)), h)))->x_) {
      if (w > 0) w--;
      else {
        reachedEnd = YES;
        break;
      }
    }
    while (sx > ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->grid_, w)), h)))->x_ + ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->grid_, w)), h)))->width_) {
      if (w < self->grid_->size_ - 1) w++;
      else {
        reachedEnd = YES;
        break;
      }
    }
    while (sy < ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->grid_, w)), h)))->y_) {
      if (h > 0) h--;
      else {
        reachedEnd = YES;
        break;
      }
    }
    while (sy > ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->grid_, w)), h)))->y_ + ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->grid_, w)), h)))->height_) {
      if (h < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->grid_, w)))->size_ - 1) h++;
      else {
        reachedEnd = YES;
        break;
      }
    }
    if (reachedEnd) {
      [((id<JavaUtilList>) nil_chk(self->boundaryIntersectCollection_)) addWithId:[IOSDoubleArray newArrayWithDoubles:(jdouble[]){ sx, sy } count:2]];
    }
    if (lastW != w || lastH != h) {
      jint dw = J2ObjCFpToInt(JavaLangMath_signumWithFloat_(lastW - w));
      jint dh = J2ObjCFpToInt(JavaLangMath_signumWithFloat_(lastH - h));
      for (jint i = 0; i <= JavaLangMath_absWithInt_(lastW - w); i++) {
        for (jint j = 0; j <= JavaLangMath_absWithInt_(lastH - h); j++) {
          *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->remember_), lastW - dw * i)), lastH - dh * j) = NO;
        }
      }
    }
    lastW = w;
    lastH = h;
    jdouble gradX = 0;
    jdouble gradY = 0;
    if (!reachedEnd) {
      gradX = [self evalDiffXPolyAtWithDouble:sx withDouble:sy withBoolean:YES];
      gradY = [self evalDiffYPolyAtWithDouble:sx withDouble:sy withBoolean:YES];
      if (nearSing || (JavaLangMath_absWithDouble_(gradX) < OrgGeogebraCommonKernelImplicitGeoImplicitPoly_NEAR_SING && JavaLangMath_absWithDouble_(gradY) < OrgGeogebraCommonKernelImplicitGeoImplicitPoly_NEAR_SING)) {
        for (IOSDoubleArray * __strong pair in nil_chk(self->singularitiesCollection_)) {
          if ((OrgGeogebraCommonKernelImplicitGeoImplicitPoly_scaledNormSquaredWithDouble_withDouble_(self, IOSDoubleArray_Get(nil_chk(pair), 0) - sx, IOSDoubleArray_Get(pair, 1) - sy) < OrgGeogebraCommonKernelImplicitGeoImplicitPoly_SING_RADIUS * OrgGeogebraCommonKernelImplicitGeoImplicitPoly_SING_RADIUS)) {
            sx = IOSDoubleArray_Get(pair, 0);
            sy = IOSDoubleArray_Get(pair, 1);
            reachedSingularity = YES;
            reachedEnd = YES;
            break;
          }
        }
        if (!reachedEnd) {
          if (gradX * gradX + gradY * gradY > lastGradX * lastGradX + lastGradY * lastGradY) {
            [self->singularitiesCollection_ addWithId:[IOSDoubleArray newArrayWithDoubles:(jdouble[]){ sx, sy } count:2]];
            reachedEnd = YES;
            reachedSingularity = YES;
          }
          else if (JavaLangMath_absWithDouble_(gradX) < OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MIN_GRAD && JavaLangMath_absWithDouble_(gradY) < OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MIN_GRAD) {
            [self->singularitiesCollection_ addWithId:[IOSDoubleArray newArrayWithDoubles:(jdouble[]){ sx, sy } count:2]];
            reachedEnd = YES;
            reachedSingularity = YES;
          }
          lastGradX = gradX;
          lastGradY = gradY;
          nearSing = YES;
        }
      }
    }
    jdouble a = 0, nX = 0, nY = 0;
    if (!reachedEnd) {
      a = 1 / (JavaLangMath_absWithDouble_(gradX) + JavaLangMath_absWithDouble_(gradY));
      gradX = a * gradX;
      gradY = a * gradY;
      a = JavaLangMath_sqrtWithDouble_(gradX * gradX + gradY * gradY);
      gradX = gradX / a;
      gradY = gradY / a;
      nX = -gradY;
      nY = gradX;
      if (!JavaLangDouble_isNaNWithDouble_(lx) && !JavaLangDouble_isNaNWithDouble_(ly)) {
        jdouble c = (lx - sx) * nX + (ly - sy) * nY;
        if (c > 0) {
          nX = -nX;
          nY = -nY;
        }
      }
      else {
        if (!first) {
          nX = -nX;
          nY -= nY;
        }
      }
      lx = sx;
      ly = sy;
    }
    while (!reachedEnd) {
      sx = lx + nX * stepSize;
      sy = ly + nY * stepSize;
      jint e = [self epsSignumWithDouble:[self evalPolyAtWithDouble:sx withDouble:sy withBoolean:YES]];
      if (e == 0) {
        if (stepSize * 2 <= OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MAX_STEP_SIZE * JavaLangMath_maxWithDouble_withDouble_(self->scaleX_, self->scaleY_)) stepSize *= 2;
        break;
      }
      gradX = [self evalDiffXPolyAtWithDouble:sx withDouble:sy withBoolean:YES];
      gradY = [self evalDiffYPolyAtWithDouble:sx withDouble:sy withBoolean:YES];
      if (JavaLangMath_absWithDouble_(gradX) < OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MIN_GRAD && JavaLangMath_absWithDouble_(gradY) < OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MIN_GRAD) {
        stepSize /= 2;
        if (stepSize > OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MIN_STEP_SIZE * JavaLangMath_maxWithDouble_withDouble_(self->scaleX_, self->scaleY_)) continue;
        [((id<JavaUtilList>) nil_chk(self->singularitiesCollection_)) addWithId:[IOSDoubleArray newArrayWithDoubles:(jdouble[]){ sx, sy } count:2]];
        reachedEnd = YES;
        break;
      }
      a = JavaLangMath_sqrtWithDouble_(gradX * gradX + gradY * gradY);
      gradX *= stepSize / a;
      gradY *= stepSize / a;
      if (e > 0) {
        gradX = -gradX;
        gradY = -gradY;
      }
      jint e1 = [self epsSignumWithDouble:[self evalPolyAtWithDouble:sx + gradX withDouble:sy + gradY withBoolean:YES]];
      if (e1 == 0) {
        sx = sx + gradX;
        sy = sy + gradY;
        break;
      }
      if (e1 != e) {
        a = [self bisecWithDouble:sx withDouble:sy withDouble:sx + gradX withDouble:sy + gradY];
        sx += a * gradX;
        sy += a * gradY;
        break;
      }
      stepSize /= 2;
      if (stepSize > OrgGeogebraCommonKernelImplicitGeoImplicitPoly_MIN_STEP_SIZE * JavaLangMath_maxWithDouble_withDouble_(self->scaleX_, self->scaleY_)) continue;
      reachedEnd = YES;
      break;
    }
    if (!reachedEnd || reachedSingularity) {
      if (reachedSingularity || ((lx - sx) * (lx - sx) + (ly - sy) * (ly - sy) > self->minGap_ * self->minGap_)) {
        if (firstDirPoints != nil) {
          [firstDirPoints addWithId:new_OrgGeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(sx, sy, YES)];
        }
        else {
          [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(loc1)) insertPointWithDouble:sx withDouble:sy withBoolean:YES];
        }
      }
    }
    if (reachedEnd) {
      if (!first) {
        return;
      }
      lastGradX = JavaLangDouble_POSITIVE_INFINITY;
      lastGradY = JavaLangDouble_POSITIVE_INFINITY;
      JavaUtilArrayList *pointList = [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(loc1)) getPoints];
      if ([firstDirPoints size] > 0) {
        OrgGeogebraCommonKernelMyPoint *lastPoint = [firstDirPoints getWithInt:[firstDirPoints size] - 1];
        ((OrgGeogebraCommonKernelMyPoint *) nil_chk(lastPoint))->lineTo_ = NO;
        [pointList ensureCapacityWithInt:[((JavaUtilArrayList *) nil_chk(pointList)) size] + [firstDirPoints size]];
        for (jint i = [firstDirPoints size] - 1; i >= 0; i--) {
          [pointList addWithId:[firstDirPoints getWithInt:i]];
        }
      }
      firstDirPoints = nil;
      sx = startX;
      sy = startY;
      lx = JavaLangDouble_NaN;
      ly = JavaLangDouble_NaN;
      w = startW;
      h = startH;
      lastW = w;
      lastH = h;
      first = NO;
      reachedEnd = NO;
      reachedSingularity = NO;
      nearSing = NO;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelImplicitGeoImplicitPoly)

@implementation OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect

- (instancetype)initWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)width
                    withDouble:(jdouble)height {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect_initWithDouble_withDouble_withDouble_withDouble_(self, x, y, width, height);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:withDouble:withDouble:", "GridRect", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x0, "D", NULL, NULL,  },
    { "y_", NULL, 0x0, "D", NULL, NULL,  },
    { "width_", NULL, 0x0, "D", NULL, NULL,  },
    { "height_", NULL, 0x0, "D", NULL, NULL,  },
    { "eval_", NULL, 0x0, "[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect = { 2, "GridRect", "org.geogebra.common.kernel.implicit", "GeoImplicitPoly", 0xa, 1, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect;
}

@end

void OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect_initWithDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *self, jdouble x, jdouble y, jdouble width, jdouble height) {
  (void) NSObject_init(self);
  self->x_ = x;
  self->y_ = y;
  self->width_ = width;
  self->height_ = height;
  self->eval_ = [IOSIntArray newArrayWithLength:4];
}

OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect_initWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble width, jdouble height) {
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect *self = [OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect alloc];
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect_initWithDouble_withDouble_withDouble_withDouble_(self, x, y, width, height);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelImplicitGeoImplicitPoly_GridRect)
