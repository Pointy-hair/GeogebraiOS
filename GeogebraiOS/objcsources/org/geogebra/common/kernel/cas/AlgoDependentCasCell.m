//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/cas/AlgoDependentCasCell.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/Algos.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/cas/AlgoDependentCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"

@interface OrgGeogebraCommonKernelCasAlgoDependentCasCell () {
 @public
  OrgGeogebraCommonKernelGeosGeoCasCell *casCell_;
}

- (void)initInput OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoDependentCasCell, casCell_, OrgGeogebraCommonKernelGeosGeoCasCell *)

__attribute__((unused)) static void OrgGeogebraCommonKernelCasAlgoDependentCasCell_initInput(OrgGeogebraCommonKernelCasAlgoDependentCasCell *self);

@implementation OrgGeogebraCommonKernelCasAlgoDependentCasCell

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoCasCell:(OrgGeogebraCommonKernelGeosGeoCasCell *)casCell {
  OrgGeogebraCommonKernelCasAlgoDependentCasCell_initWithOrgGeogebraCommonKernelGeosGeoCasCell_(self, casCell);
  return self;
}

- (OrgGeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return OrgGeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (void)initInput {
  OrgGeogebraCommonKernelCasAlgoDependentCasCell_initInput(self);
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelGeosGeoElement *twinGeo = [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell_)) getTwinGeo];
  [self setOutputLengthWithInt:twinGeo == nil ? 1 : 2];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:casCell_];
  if (twinGeo != nil) [self setOutputWithInt:1 withOrgGeogebraCommonKernelGeosGeoElement:twinGeo];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoCasCell *)getCasCell {
  return casCell_;
}

- (void)compute {
  jboolean inputDefined = YES;
  {
    IOSObjectArray *a__ = input_;
    OrgGeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgGeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = *b__++;
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined]) {
        inputDefined = NO;
        break;
      }
    }
  }
  if (inputDefined) {
    [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell_)) computeOutput];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell_)) setUndefined];
  }
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)getExpXMLWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell_)) getXML];
}

- (NSString *)getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (input_ == nil) return nil;
  if ([self getCasCell] != nil && [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk([self getCasCell])) getInputVE] != nil) {
    if ([[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk([self getCasCell])) getInputVE])) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]) {
      OrgGeogebraCommonKernelArithmeticCommand *cmd = (OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk([self getCasCell])) getInputVE])) unwrap], [OrgGeogebraCommonKernelArithmeticCommand class]);
      return [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(cmd)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
    }
  }
  return [super getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (void)update {
  if (stopUpdateCascade_) {
    return;
  }
  [self updateUnlabeledRandomGeos];
  jboolean hadTwinGeo = [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell_)) hasTwinGeo];
  [self compute];
  if (!hadTwinGeo && [casCell_ hasTwinGeo]) {
    [self setInputOutput];
    [casCell_ setLabelOfTwinGeo];
  }
  [self updateDependentGeos];
}

- (void)dealloc {
  RELEASE_(casCell_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelGeosGeoCasCell:", "AlgoDependentCasCell", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "initInput", NULL, "V", 0x2, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getCasCell", NULL, "Lorg.geogebra.common.kernel.geos.GeoCasCell;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getExpXMLWithOrgGeogebraCommonKernelStringTemplate:", "getExpXML", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:", "getCommandDescription", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "casCell_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoCasCell;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCasAlgoDependentCasCell = { 2, "AlgoDependentCasCell", "org.geogebra.common.kernel.cas", NULL, 0x1, 10, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCasAlgoDependentCasCell;
}

@end

void OrgGeogebraCommonKernelCasAlgoDependentCasCell_initWithOrgGeogebraCommonKernelGeosGeoCasCell_(OrgGeogebraCommonKernelCasAlgoDependentCasCell *self, OrgGeogebraCommonKernelGeosGeoCasCell *casCell) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell)) getConstruction]);
  OrgGeogebraCommonKernelCasAlgoDependentCasCell_set_casCell_(self, casCell);
  self->protectedInput_ = YES;
  OrgGeogebraCommonKernelCasAlgoDependentCasCell_initInput(self);
  if ([casCell isOutputEmpty]) {
    [self compute];
  }
  else {
    [casCell updateTwinGeoWithBoolean:NO];
  }
  [self setInputOutput];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) updateCasCellRows];
  [casCell setLabelOfTwinGeo];
  if ([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([casCell getInputVE])) isTopLevelCommand]) {
    if ([@"SlopeField" isEqual:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([casCell getInputVE])) getTopLevelCommand])) getName]]) {
      [self->cons_ registerEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:self];
    }
  }
}

OrgGeogebraCommonKernelCasAlgoDependentCasCell *new_OrgGeogebraCommonKernelCasAlgoDependentCasCell_initWithOrgGeogebraCommonKernelGeosGeoCasCell_(OrgGeogebraCommonKernelGeosGeoCasCell *casCell) {
  OrgGeogebraCommonKernelCasAlgoDependentCasCell *self = [OrgGeogebraCommonKernelCasAlgoDependentCasCell alloc];
  OrgGeogebraCommonKernelCasAlgoDependentCasCell_initWithOrgGeogebraCommonKernelGeosGeoCasCell_(self, casCell);
  return self;
}

void OrgGeogebraCommonKernelCasAlgoDependentCasCell_initInput(OrgGeogebraCommonKernelCasAlgoDependentCasCell *self) {
  JavaUtilTreeSet *geoVars = [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(self->casCell_)) getGeoElementVariables];
  if (geoVars == nil) {
    OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:0 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  }
  else {
    IOSObjectArray *geos = [IOSObjectArray arrayWithLength:[geoVars size] type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
    OrgGeogebraCommonKernelAlgosAlgoElement_set_input_(self, [geoVars toArrayWithNSObjectArray:geos]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCasAlgoDependentCasCell)
