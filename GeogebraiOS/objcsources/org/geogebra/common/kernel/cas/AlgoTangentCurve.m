//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/cas/AlgoTangentCurve.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/PathParameter.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentPoint.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoPointOnPath.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/cas/AlgoDerivative.h"
#include "org/geogebra/common/kernel/cas/AlgoTangentCurve.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonKernelCasAlgoTangentCurve () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> P_;
  OrgGeogebraCommonKernelGeosGeoCurveCartesian *f_, *df_;
  OrgGeogebraCommonKernelGeosGeoLine *tangent_;
  OrgGeogebraCommonKernelGeosGeoPoint *T_;
  jboolean pointOnCurve_;
  jboolean pointOnCurveSpecial_;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> pointOnCurveSpecialParam_;
  OrgGeogebraCommonKernelCasAlgoDerivative *algo_;
  IOSDoubleArray *feval_;
  IOSDoubleArray *dfeval_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoTangentCurve, P_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoTangentCurve, f_, OrgGeogebraCommonKernelGeosGeoCurveCartesian *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoTangentCurve, df_, OrgGeogebraCommonKernelGeosGeoCurveCartesian *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoTangentCurve, tangent_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoTangentCurve, T_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoTangentCurve, pointOnCurveSpecialParam_, id<OrgGeogebraCommonKernelArithmeticExpressionValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoTangentCurve, algo_, OrgGeogebraCommonKernelCasAlgoDerivative *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoTangentCurve, feval_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoTangentCurve, dfeval_, IOSDoubleArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelCasAlgoTangentCurve_compute(OrgGeogebraCommonKernelCasAlgoTangentCurve *self);

@implementation OrgGeogebraCommonKernelCasAlgoTangentCurve

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
           withOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)f {
  OrgGeogebraCommonKernelCasAlgoTangentCurve_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(self, cons, label, P, f);
  return self;
}

- (void)initialize__WithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)f1 {
  OrgGeogebraCommonKernelCasAlgoTangentCurve_set_f_(self, f1);
  pointOnCurve_ = NO;
  if ([[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoPointOnPath class]]) {
    OrgGeogebraCommonKernelAlgosAlgoPointOnPath *algoPOP = (OrgGeogebraCommonKernelAlgosAlgoPointOnPath *) check_class_cast([P_ getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoPointOnPath class]);
    pointOnCurve_ = ([((OrgGeogebraCommonKernelAlgosAlgoPointOnPath *) nil_chk(algoPOP)) getPath] == f_);
  }
  else if ([[P_ getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoDependentPoint class]]) {
    OrgGeogebraCommonKernelAlgosAlgoDependentPoint *algoDP = (OrgGeogebraCommonKernelAlgosAlgoDependentPoint *) check_class_cast([P_ getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoDependentPoint class]);
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = [((OrgGeogebraCommonKernelAlgosAlgoDependentPoint *) nil_chk(algoDP)) getExpressionNode];
    if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_VEC_FUNCTION() && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getLeft])) unwrap] == f_) {
      pointOnCurveSpecial_ = YES;
      OrgGeogebraCommonKernelCasAlgoTangentCurve_set_pointOnCurveSpecialParam_(self, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getRight])) unwrap]);
    }
  }
  if (pointOnCurve_ || pointOnCurveSpecial_) {
    OrgGeogebraCommonKernelCasAlgoTangentCurve_set_T_(self, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [OrgGeogebraCommonKernelGeosGeoPoint class]));
  }
  else {
    OrgGeogebraCommonKernelCasAlgoTangentCurve_setAndConsume_T_(self, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_));
  }
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(tangent_)) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:T_];
  OrgGeogebraCommonKernelCasAlgoTangentCurve_setAndConsume_algo_(self, new_OrgGeogebraCommonKernelCasAlgoDerivative_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosCasEvaluableFunction_withBoolean_(cons_, f_, YES));
  OrgGeogebraCommonKernelCasAlgoTangentCurve_set_df_(self, (OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast([algo_ getResult], [OrgGeogebraCommonKernelGeosGeoCurveCartesian class]));
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algo_];
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Tangent();
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TANGENTS;
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(P_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, f_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:tangent_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoLine *)getTangent {
  return tangent_;
}

- (OrgGeogebraCommonKernelGeosGeoCurveCartesian *)getCurve {
  return f_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getPoint {
  return P_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getTangentPoint {
  return T_;
}

- (void)compute {
  OrgGeogebraCommonKernelCasAlgoTangentCurve_compute(self);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getTangentPointWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                           withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)line {
  if (geo == f_ && line == tangent_) {
    return [self getTangentPoint];
  }
  return nil;
}

- (void)dealloc {
  RELEASE_(P_);
  RELEASE_(f_);
  RELEASE_(df_);
  RELEASE_(tangent_);
  RELEASE_(T_);
  RELEASE_(pointOnCurveSpecialParam_);
  RELEASE_(algo_);
  RELEASE_(feval_);
  RELEASE_(dfeval_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelGeosGeoCurveCartesian:", "AlgoTangentCurve", NULL, 0x1, NULL, NULL },
    { "initialize__WithOrgGeogebraCommonKernelGeosGeoCurveCartesian:", "initialize", "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getTangent", NULL, "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getCurve", NULL, "Lorg.geogebra.common.kernel.geos.GeoCurveCartesian;", 0x0, NULL, NULL },
    { "getPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x0, NULL, NULL },
    { "getTangentPoint", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getTangentPointWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoLine:", "getTangentPoint", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoCurveCartesian;", NULL, NULL,  },
    { "df_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoCurveCartesian;", NULL, NULL,  },
    { "tangent_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "T_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "pointOnCurve_", NULL, 0x2, "Z", NULL, NULL,  },
    { "pointOnCurveSpecial_", NULL, 0x2, "Z", NULL, NULL,  },
    { "pointOnCurveSpecialParam_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "algo_", NULL, 0x2, "Lorg.geogebra.common.kernel.cas.AlgoDerivative;", NULL, NULL,  },
    { "feval_", NULL, 0x2, "[D", NULL, NULL,  },
    { "dfeval_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCasAlgoTangentCurve = { 2, "AlgoTangentCurve", "org.geogebra.common.kernel.cas", NULL, 0x1, 11, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCasAlgoTangentCurve;
}

@end

void OrgGeogebraCommonKernelCasAlgoTangentCurve_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(OrgGeogebraCommonKernelCasAlgoTangentCurve *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, OrgGeogebraCommonKernelGeosGeoCurveCartesian *f) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelCasAlgoTangentCurve_setAndConsume_feval_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonKernelCasAlgoTangentCurve_setAndConsume_dfeval_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonKernelCasAlgoTangentCurve_setAndConsume_tangent_(self, new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons));
  OrgGeogebraCommonKernelCasAlgoTangentCurve_set_P_(self, P);
  [self initialize__WithOrgGeogebraCommonKernelGeosGeoCurveCartesian:f];
  [self setInputOutput];
  OrgGeogebraCommonKernelCasAlgoTangentCurve_compute(self);
  [self->tangent_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelCasAlgoTangentCurve *new_OrgGeogebraCommonKernelCasAlgoTangentCurve_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, OrgGeogebraCommonKernelGeosGeoCurveCartesian *f) {
  OrgGeogebraCommonKernelCasAlgoTangentCurve *self = [OrgGeogebraCommonKernelCasAlgoTangentCurve alloc];
  OrgGeogebraCommonKernelCasAlgoTangentCurve_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelGeosGeoCurveCartesian_(self, cons, label, P, f);
  return self;
}

void OrgGeogebraCommonKernelCasAlgoTangentCurve_compute(OrgGeogebraCommonKernelCasAlgoTangentCurve *self) {
  if (!([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(self->f_)) isDefined] && [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) isDefined])) {
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->tangent_)) setUndefined];
    return;
  }
  if (self->df_ == nil || ![self->df_ isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->tangent_)) setUndefined];
    return;
  }
  jdouble tvalue;
  if (self->pointOnCurve_) {
    tvalue = ((OrgGeogebraCommonKernelPathParameter *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getPathParameter]))->t_;
  }
  else if (self->pointOnCurveSpecialParam_ != nil) {
    tvalue = [self->pointOnCurveSpecialParam_ evaluateDouble];
  }
  else {
    tvalue = [self->f_ getClosestParameterWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->P_ withDouble:[self->f_ getMinParameter]];
  }
  [self->f_ evaluateCurveWithDouble:tvalue withDoubleArray:self->feval_];
  [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(self->df_)) evaluateCurveWithDouble:tvalue withDoubleArray:self->dfeval_];
  [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->tangent_)) setCoordsWithDouble:-IOSDoubleArray_Get(nil_chk(self->dfeval_), 1) withDouble:IOSDoubleArray_Get(self->dfeval_, 0) withDouble:IOSDoubleArray_Get(nil_chk(self->feval_), 0) * IOSDoubleArray_Get(self->dfeval_, 1) - IOSDoubleArray_Get(self->dfeval_, 0) * IOSDoubleArray_Get(self->feval_, 1)];
  if (!self->pointOnCurve_ && !self->pointOnCurveSpecial_) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->T_)) setCoordsWithDouble:IOSDoubleArray_Get(self->feval_, 0) withDouble:IOSDoubleArray_Get(self->feval_, 1) withDouble:1.0];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCasAlgoTangentCurve)
