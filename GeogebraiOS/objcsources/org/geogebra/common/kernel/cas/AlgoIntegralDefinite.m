//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/cas/AlgoIntegralDefinite.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "org/apache/commons/math/ConvergenceException.h"
#include "org/apache/commons/math/FunctionEvaluationException.h"
#include "org/apache/commons/math/MaxIterationsExceededException.h"
#include "org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoFunctionFreehand.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/DrawInformationAlgo.h"
#include "org/geogebra/common/kernel/algos/GetCommand.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "org/geogebra/common/kernel/cas/AlgoIntegral.h"
#include "org/geogebra/common/kernel/cas/AlgoIntegralDefinite.h"
#include "org/geogebra/common/kernel/cas/AlgoUsingTempCASalgo.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/roots/RealRootAdapter.h"
#include "org/geogebra/common/kernel/roots/RealRootFunction.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"

#define OrgGeogebraCommonKernelCasAlgoIntegralDefinite_FIRST_ORDER 3
#define OrgGeogebraCommonKernelCasAlgoIntegralDefinite_SECOND_ORDER 5
#define OrgGeogebraCommonKernelCasAlgoIntegralDefinite_MAX_ITER 5
#define OrgGeogebraCommonKernelCasAlgoIntegralDefinite_MAX_GAUSS_QUAD_CALLS 500

@interface OrgGeogebraCommonKernelCasAlgoIntegralDefinite () {
 @public
  OrgGeogebraCommonKernelGeosGeoFunction *f_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> a_, b_;
  OrgGeogebraCommonKernelGeosGeoBoolean *evaluate_;
  OrgGeogebraCommonKernelGeosGeoElement *ageo_, *bgeo_;
  OrgGeogebraCommonKernelGeosGeoNumeric *n_;
  jboolean numeric_;
  OrgGeogebraCommonKernelGeosGeoFunction *symbIntegral_;
  jboolean evaluateNumerically_;
}

- (void)computeSpecial;

- (jdouble)freehandIntegrationWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f2
                                                              withDouble:(jdouble)lowerLimitUser
                                                              withDouble:(jdouble)upperLimitUser;

+ (jdouble)doAdaptiveGaussQuadWithOrgGeogebraCommonKernelRootsRealRootFunction:(id<OrgGeogebraCommonKernelRootsRealRootFunction>)fun
                                                                    withDouble:(jdouble)a
                                                                    withDouble:(jdouble)b;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, f_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, a_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, b_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, evaluate_, OrgGeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, ageo_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, bgeo_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, n_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, symbIntegral_, OrgGeogebraCommonKernelGeosGeoFunction *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, FIRST_ORDER, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, SECOND_ORDER, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, MAX_ITER, jint)

static OrgApacheCommonsMathAnalysisIntegrationLegendreGaussIntegrator *OrgGeogebraCommonKernelCasAlgoIntegralDefinite_firstGauss_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, firstGauss_, OrgApacheCommonsMathAnalysisIntegrationLegendreGaussIntegrator *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, firstGauss_, OrgApacheCommonsMathAnalysisIntegrationLegendreGaussIntegrator *)

static OrgApacheCommonsMathAnalysisIntegrationLegendreGaussIntegrator *OrgGeogebraCommonKernelCasAlgoIntegralDefinite_secondGauss_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, secondGauss_, OrgApacheCommonsMathAnalysisIntegrationLegendreGaussIntegrator *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, secondGauss_, OrgApacheCommonsMathAnalysisIntegrationLegendreGaussIntegrator *)

static jint OrgGeogebraCommonKernelCasAlgoIntegralDefinite_adaptiveGaussQuadCounter_ = 0;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, adaptiveGaussQuadCounter_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, adaptiveGaussQuadCounter_, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelCasAlgoIntegralDefinite, MAX_GAUSS_QUAD_CALLS, jint)

__attribute__((unused)) static void OrgGeogebraCommonKernelCasAlgoIntegralDefinite_compute(OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelCasAlgoIntegralDefinite_computeSpecial(OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelCasAlgoIntegralDefinite_freehandIntegrationWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self, OrgGeogebraCommonKernelGeosGeoFunction *f2, jdouble lowerLimitUser, jdouble upperLimitUser);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelCasAlgoIntegralDefinite_doAdaptiveGaussQuadWithOrgGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(id<OrgGeogebraCommonKernelRootsRealRootFunction> fun, jdouble a, jdouble b);

@implementation OrgGeogebraCommonKernelCasAlgoIntegralDefinite

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)a
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)b
                                                withBoolean:(jboolean)numeric {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(self, cons, label, f, a, b, numeric);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)a
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)b
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)evaluate {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, f, a, b, evaluate);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)a
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)b
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)evaluate {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, f, a, b, evaluate);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)a
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)b
                  withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)evaluate
                                                withBoolean:(jboolean)num {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_withBoolean_(self, cons, f, a, b, evaluate, num);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
              withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)a
              withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)b
                     withOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)evaluate {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, f, a, b, evaluate);
  return self;
}

- (id<OrgGeogebraCommonKernelAlgosGetCommand>)getClassName {
  return numeric_ ? OrgGeogebraCommonKernelCommandsCommandsEnum_get_NIntegral() : OrgGeogebraCommonKernelCommandsCommandsEnum_get_Integral();
}

- (void)setInputOutput {
  if (evaluate_ == nil) {
    OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, f_);
    IOSObjectArray_Set(input_, 1, ageo_);
    IOSObjectArray_Set(input_, 2, bgeo_);
  }
  else {
    OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, f_);
    IOSObjectArray_Set(input_, 1, ageo_);
    IOSObjectArray_Set(input_, 2, bgeo_);
    IOSObjectArray_Set(input_, 3, evaluate_);
  }
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:n_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getIntegral {
  return n_;
}

- (jdouble)getIntegralValue {
  return [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(n_)) getValue];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getFunction {
  return f_;
}

- (id<OrgGeogebraCommonKernelArithmeticNumberValue>)getA {
  return a_;
}

- (id<OrgGeogebraCommonKernelArithmeticNumberValue>)getB {
  return b_;
}

- (void)compute {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_compute(self);
}

- (void)computeSpecial {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_computeSpecial(self);
}

- (jdouble)freehandIntegrationWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f2
                                                              withDouble:(jdouble)lowerLimitUser
                                                              withDouble:(jdouble)upperLimitUser {
  return OrgGeogebraCommonKernelCasAlgoIntegralDefinite_freehandIntegrationWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(self, f2, lowerLimitUser, upperLimitUser);
}

+ (jdouble)numericIntegrationWithOrgGeogebraCommonKernelRootsRealRootFunction:(id<OrgGeogebraCommonKernelRootsRealRootFunction>)fun
                                                                   withDouble:(jdouble)a
                                                                   withDouble:(jdouble)b {
  return OrgGeogebraCommonKernelCasAlgoIntegralDefinite_numericIntegrationWithOrgGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(fun, a, b);
}

+ (jdouble)doAdaptiveGaussQuadWithOrgGeogebraCommonKernelRootsRealRootFunction:(id<OrgGeogebraCommonKernelRootsRealRootFunction>)fun
                                                                    withDouble:(jdouble)a
                                                                    withDouble:(jdouble)b {
  return OrgGeogebraCommonKernelCasAlgoIntegralDefinite_doAdaptiveGaussQuadWithOrgGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(fun, a, b);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntegralOfAfromBtoC" withNSString:[((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(ageo_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl] withNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(bgeo_)) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (id<OrgGeogebraCommonKernelAlgosDrawInformationAlgo>)copy__ {
  if (evaluate_ != nil) return [new_OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) copy__], [OrgGeogebraCommonKernelGeosGeoFunction class]), (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) deepCopyWithOrgGeogebraCommonKernelKernel:kernel_], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue)), (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) deepCopyWithOrgGeogebraCommonKernelKernel:kernel_], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue)), [evaluate_ copy__]) autorelease];
  return [new_OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) copy__], [OrgGeogebraCommonKernelGeosGeoFunction class]), (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) deepCopyWithOrgGeogebraCommonKernelKernel:kernel_], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue)), (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) deepCopyWithOrgGeogebraCommonKernelKernel:kernel_], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue)), nil) autorelease];
}

- (jboolean)evaluateOnly {
  return evaluate_ != nil && ![evaluate_ getBoolean];
}

- (void)refreshCASResults {
  OrgGeogebraCommonKernelCasAlgoIntegral *algoInt = [new_OrgGeogebraCommonKernelCasAlgoIntegral_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosCasEvaluableFunction_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(cons_, f_, nil, NO) autorelease];
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_set_symbIntegral_(self, (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast([algoInt getResult], [OrgGeogebraCommonKernelGeosGeoFunction class]));
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoInt];
  OrgGeogebraCommonKernelCasAlgoUsingTempCASalgo_set_algoCAS_(self, algoInt);
}

- (void)dealloc {
  RELEASE_(f_);
  RELEASE_(a_);
  RELEASE_(b_);
  RELEASE_(evaluate_);
  RELEASE_(ageo_);
  RELEASE_(bgeo_);
  RELEASE_(n_);
  RELEASE_(symbIntegral_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withBoolean:", "AlgoIntegralDefinite", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelGeosGeoBoolean:", "AlgoIntegralDefinite", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelGeosGeoBoolean:", "AlgoIntegralDefinite", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelGeosGeoBoolean:withBoolean:", "AlgoIntegralDefinite", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelGeosGeoBoolean:", "AlgoIntegralDefinite", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.algos.GetCommand;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getIntegral", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "getIntegralValue", NULL, "D", 0x0, NULL, NULL },
    { "getFunction", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "getA", NULL, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", 0x1, NULL, NULL },
    { "getB", NULL, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "computeSpecial", NULL, "V", 0x2, NULL, NULL },
    { "freehandIntegrationWithOrgGeogebraCommonKernelGeosGeoFunction:withDouble:withDouble:", "freehandIntegration", "D", 0x2, NULL, NULL },
    { "numericIntegrationWithOrgGeogebraCommonKernelRootsRealRootFunction:withDouble:withDouble:", "numericIntegration", "D", 0x9, NULL, NULL },
    { "doAdaptiveGaussQuadWithOrgGeogebraCommonKernelRootsRealRootFunction:withDouble:withDouble:", "doAdaptiveGaussQuad", "D", 0xa, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.algos.DrawInformationAlgo;", 0x1, NULL, NULL },
    { "evaluateOnly", NULL, "Z", 0x1, NULL, NULL },
    { "refreshCASResults", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "a_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "b_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "evaluate_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "ageo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "bgeo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "numeric_", NULL, 0x2, "Z", NULL, NULL,  },
    { "symbIntegral_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "evaluateNumerically_", NULL, 0x2, "Z", NULL, NULL,  },
    { "FIRST_ORDER_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelCasAlgoIntegralDefinite_FIRST_ORDER },
    { "SECOND_ORDER_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelCasAlgoIntegralDefinite_SECOND_ORDER },
    { "MAX_ITER_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelCasAlgoIntegralDefinite_MAX_ITER },
    { "firstGauss_", NULL, 0xa, "Lorg.apache.commons.math.analysis.integration.LegendreGaussIntegrator;", &OrgGeogebraCommonKernelCasAlgoIntegralDefinite_firstGauss_, NULL,  },
    { "secondGauss_", NULL, 0xa, "Lorg.apache.commons.math.analysis.integration.LegendreGaussIntegrator;", &OrgGeogebraCommonKernelCasAlgoIntegralDefinite_secondGauss_, NULL,  },
    { "adaptiveGaussQuadCounter_", NULL, 0xa, "I", &OrgGeogebraCommonKernelCasAlgoIntegralDefinite_adaptiveGaussQuadCounter_, NULL,  },
    { "MAX_GAUSS_QUAD_CALLS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelCasAlgoIntegralDefinite_MAX_GAUSS_QUAD_CALLS },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCasAlgoIntegralDefinite = { 2, "AlgoIntegralDefinite", "org.geogebra.common.kernel.cas", NULL, 0x1, 21, methods, 17, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCasAlgoIntegralDefinite;
}

@end

void OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, jboolean numeric) {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_withBoolean_(self, cons, f, a, b, nil, numeric);
  self->numeric_ = numeric;
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelCasAlgoIntegralDefinite *new_OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, jboolean numeric) {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self = [OrgGeogebraCommonKernelCasAlgoIntegralDefinite alloc];
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(self, cons, label, f, a, b, numeric);
  return self;
}

void OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, OrgGeogebraCommonKernelGeosGeoBoolean *evaluate) {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, f, a, b, evaluate);
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelCasAlgoIntegralDefinite *new_OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, OrgGeogebraCommonKernelGeosGeoBoolean *evaluate) {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self = [OrgGeogebraCommonKernelCasAlgoIntegralDefinite alloc];
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, f, a, b, evaluate);
  return self;
}

void OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoFunction *f, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, OrgGeogebraCommonKernelGeosGeoBoolean *evaluate) {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_withBoolean_(self, cons, f, a, b, evaluate, NO);
}

OrgGeogebraCommonKernelCasAlgoIntegralDefinite *new_OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoFunction *f, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, OrgGeogebraCommonKernelGeosGeoBoolean *evaluate) {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self = [OrgGeogebraCommonKernelCasAlgoIntegralDefinite alloc];
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, cons, f, a, b, evaluate);
  return self;
}

void OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_withBoolean_(OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoFunction *f, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, OrgGeogebraCommonKernelGeosGeoBoolean *evaluate, jboolean num) {
  OrgGeogebraCommonKernelCasAlgoUsingTempCASalgo_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->evaluateNumerically_ = num;
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_set_f_(self, f);
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_setAndConsume_n_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons));
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_set_a_(self, a);
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_set_b_(self, b);
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_set_ageo_(self, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(a)) toGeoElement]);
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_set_bgeo_(self, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) toGeoElement]);
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_set_evaluate_(self, evaluate);
  if ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) isHTML5Applet]) {
    self->evaluateNumerically_ = YES;
  }
  if ((evaluate == nil || [evaluate getBoolean]) && ![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) isGeoFunctionConditional] && ![f isFreehandFunction] && !self->evaluateNumerically_) {
    [self refreshCASResults];
  }
  [self setInputOutput];
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_compute(self);
  [self->n_ setDrawableWithBoolean:YES];
}

OrgGeogebraCommonKernelCasAlgoIntegralDefinite *new_OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_withBoolean_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoFunction *f, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, OrgGeogebraCommonKernelGeosGeoBoolean *evaluate, jboolean num) {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self = [OrgGeogebraCommonKernelCasAlgoIntegralDefinite alloc];
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_withBoolean_(self, cons, f, a, b, evaluate, num);
  return self;
}

void OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self, OrgGeogebraCommonKernelGeosGeoFunction *f, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, OrgGeogebraCommonKernelGeosGeoBoolean *evaluate) {
  OrgGeogebraCommonKernelCasAlgoUsingTempCASalgo_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) getConstruction], NO);
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_set_f_(self, f);
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_set_a_(self, a);
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_set_b_(self, b);
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_set_evaluate_(self, evaluate);
}

OrgGeogebraCommonKernelCasAlgoIntegralDefinite *new_OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(OrgGeogebraCommonKernelGeosGeoFunction *f, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> b, OrgGeogebraCommonKernelGeosGeoBoolean *evaluate) {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self = [OrgGeogebraCommonKernelCasAlgoIntegralDefinite alloc];
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelGeosGeoBoolean_(self, f, a, b, evaluate);
  return self;
}

void OrgGeogebraCommonKernelCasAlgoIntegralDefinite_compute(OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self) {
  if (![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) isDefined] || ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->ageo_)) isDefined] || ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->bgeo_)) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setUndefined];
    return;
  }
  jdouble lowerLimit = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->a_)) getDouble];
  jdouble upperLimit = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->b_)) getDouble];
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(lowerLimit, upperLimit)) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:0];
    return;
  }
  jdouble fa = [self->f_ evaluateWithDouble:lowerLimit];
  jdouble fb = [self->f_ evaluateWithDouble:upperLimit];
  if (JavaLangDouble_isNaNWithDouble_(fa) || JavaLangDouble_isInfiniteWithDouble_(fa) || JavaLangDouble_isNaNWithDouble_(fb) || JavaLangDouble_isInfiniteWithDouble_(fb)) {
    if (!self->evaluateNumerically_ && ![self evaluateOnly] && ![self->f_ isFreehandFunction]) {
      OrgGeogebraCommonKernelCasAlgoIntegralDefinite_computeSpecial(self);
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setUndefined];
    }
    return;
  }
  if ([self evaluateOnly]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:JavaLangDouble_NaN];
    return;
  }
  if (self->symbIntegral_ != nil && [self->symbIntegral_ isDefined] && ![self->f_ includesDivisionByVar] && ![self->f_ includesNonContinuousIntegral]) {
    jdouble val = [self->symbIntegral_ evaluateWithDouble:upperLimit] - [self->symbIntegral_ evaluateWithDouble:lowerLimit];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:val];
    if ([self->n_ isDefined]) return;
  }
  else if (self->symbIntegral_ != nil && [self->symbIntegral_ isDefined] && !self->evaluateNumerically_) {
    OrgGeogebraCommonKernelCasAlgoIntegralDefinite_computeSpecial(self);
    return;
  }
  if ([self->f_ isFreehandFunction]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:OrgGeogebraCommonKernelCasAlgoIntegralDefinite_freehandIntegrationWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(self, self->f_, lowerLimit, upperLimit)];
  }
  else {
    OrgGeogebraCommonKernelArithmeticFunction *inFun = [self->f_ getFunction];
    OrgGeogebraCommonKernelArithmeticPolyFunction *polyIntegral = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(inFun)) getNumericPolynomialIntegral];
    if (polyIntegral != nil) {
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:[polyIntegral evaluateWithDouble:upperLimit] - [polyIntegral evaluateWithDouble:lowerLimit]];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:OrgGeogebraCommonKernelCasAlgoIntegralDefinite_numericIntegrationWithOrgGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(self->f_, lowerLimit, upperLimit)];
    }
  }
}

void OrgGeogebraCommonKernelCasAlgoIntegralDefinite_computeSpecial(OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self) {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(30) autorelease];
  [sb appendWithNSString:@"evalf(integrate("];
  [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_giacTemplate_()]];
  [sb appendWithNSString:@","];
  [sb appendWithNSString:[self->f_ getVarStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  [sb appendWithNSString:@","];
  [sb appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->a_)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_maxPrecision13_()]];
  [sb appendWithNSString:@","];
  [sb appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->b_)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_maxPrecision13_()]];
  [sb appendWithNSString:@"))"];
  NSString *result;
  @try {
    result = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) evaluateRawGeoGebraCASWithNSString:[sb description]];
    if ([((NSString *) nil_chk(result)) hasPrefix:@"{"]) {
      result = IOSObjectArray_Get(nil_chk([result split:@","]), 0);
      result = [((NSString *) nil_chk(result)) substring:1];
    }
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:[((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self->kernel_ getAlgebraProcessor])) evaluateToDoubleWithNSString:result withBoolean:YES]];
  }
  @catch (JavaLangThrowable *e) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setUndefined];
  }
}

jdouble OrgGeogebraCommonKernelCasAlgoIntegralDefinite_freehandIntegrationWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(OrgGeogebraCommonKernelCasAlgoIntegralDefinite *self, OrgGeogebraCommonKernelGeosGeoFunction *f2, jdouble lowerLimitUser, jdouble upperLimitUser) {
  jint multiplier = 1;
  jdouble lowerLimit = lowerLimitUser;
  jdouble upperLimit = upperLimitUser;
  if (lowerLimit > upperLimit) {
    jdouble temp = lowerLimit;
    lowerLimit = upperLimit;
    upperLimit = temp;
    multiplier = -1;
  }
  OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *algo = (OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f2)) getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand class]);
  OrgGeogebraCommonKernelGeosGeoList *list = [((OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *) nil_chk(algo)) getList];
  jdouble a1 = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list)) getWithInt:0], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  jdouble b1 = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([list getWithInt:1], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  if (lowerLimit < a1 || upperLimit > b1) {
    return JavaLangDouble_NaN;
  }
  jdouble nn = [list size] - 2;
  jdouble step = (b1 - a1) / (nn - 1);
  jint startGap = J2ObjCFpToInt(JavaLangMath_ceilWithDouble_((lowerLimit - a1) / step));
  jint endGap = J2ObjCFpToInt(JavaLangMath_ceilWithDouble_((b1 - upperLimit) / step));
  jdouble startx = a1 + step * startGap;
  jdouble endx = b1 - step * endGap;
  jint noOfSteps = (jint) JavaLangMath_roundWithDouble_((b1 - a1) / step - endGap - startGap) + 1;
  jdouble area = 0;
  jdouble sum = 0;
  if (noOfSteps > 0) {
    for (jint i = 0; i < noOfSteps; i++) {
      jdouble y = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([list getWithInt:2 + i + startGap], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
      if (i == 0 || (i == noOfSteps - 1)) {
        sum += y;
      }
      else {
        sum += 2 * y;
      }
    }
    area = sum * step / 2.0;
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(startx - lowerLimit)) {
      area += (startx - lowerLimit) * ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) evaluateWithDouble:startx] + [self->f_ evaluateWithDouble:lowerLimit]) / 2.0;
    }
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(endx - upperLimit)) {
      area += (upperLimit - endx) * ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) evaluateWithDouble:endx] + [self->f_ evaluateWithDouble:upperLimit]) / 2.0;
    }
  }
  else {
    area = (upperLimit - lowerLimit) * ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) evaluateWithDouble:lowerLimit] + [self->f_ evaluateWithDouble:upperLimit]) / 2.0;
  }
  return OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(area) * multiplier;
}

jdouble OrgGeogebraCommonKernelCasAlgoIntegralDefinite_numericIntegrationWithOrgGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(id<OrgGeogebraCommonKernelRootsRealRootFunction> fun, jdouble a, jdouble b) {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initialize();
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_adaptiveGaussQuadCounter_ = 0;
  if (a > b) {
    return -OrgGeogebraCommonKernelCasAlgoIntegralDefinite_doAdaptiveGaussQuadWithOrgGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(fun, b, a);
  }
  return OrgGeogebraCommonKernelCasAlgoIntegralDefinite_doAdaptiveGaussQuadWithOrgGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(fun, a, b);
}

jdouble OrgGeogebraCommonKernelCasAlgoIntegralDefinite_doAdaptiveGaussQuadWithOrgGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(id<OrgGeogebraCommonKernelRootsRealRootFunction> fun, jdouble a, jdouble b) {
  OrgGeogebraCommonKernelCasAlgoIntegralDefinite_initialize();
  if (++OrgGeogebraCommonKernelCasAlgoIntegralDefinite_adaptiveGaussQuadCounter_ > OrgGeogebraCommonKernelCasAlgoIntegralDefinite_MAX_GAUSS_QUAD_CALLS) {
    return JavaLangDouble_NaN;
  }
  if (OrgGeogebraCommonKernelCasAlgoIntegralDefinite_firstGauss_ == nil) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelCasAlgoIntegralDefinite_firstGauss_, nil, new_OrgApacheCommonsMathAnalysisIntegrationLegendreGaussIntegrator_initWithInt_withInt_(OrgGeogebraCommonKernelCasAlgoIntegralDefinite_FIRST_ORDER, OrgGeogebraCommonKernelCasAlgoIntegralDefinite_MAX_ITER));
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelCasAlgoIntegralDefinite_secondGauss_, nil, new_OrgApacheCommonsMathAnalysisIntegrationLegendreGaussIntegrator_initWithInt_withInt_(OrgGeogebraCommonKernelCasAlgoIntegralDefinite_SECOND_ORDER, OrgGeogebraCommonKernelCasAlgoIntegralDefinite_MAX_ITER));
  }
  jdouble firstSum = 0;
  jdouble secondSum = 0;
  jboolean error = NO;
  @try {
    firstSum = [((OrgApacheCommonsMathAnalysisIntegrationLegendreGaussIntegrator *) nil_chk(OrgGeogebraCommonKernelCasAlgoIntegralDefinite_firstGauss_)) integrateWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:([new_OrgGeogebraCommonKernelRootsRealRootAdapter_initWithOrgGeogebraCommonKernelRootsRealRootFunction_(fun) autorelease]) withDouble:a withDouble:b];
    if (JavaLangDouble_isNaNWithDouble_(firstSum)) return JavaLangDouble_NaN;
    secondSum = [((OrgApacheCommonsMathAnalysisIntegrationLegendreGaussIntegrator *) nil_chk(OrgGeogebraCommonKernelCasAlgoIntegralDefinite_secondGauss_)) integrateWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:([new_OrgGeogebraCommonKernelRootsRealRootAdapter_initWithOrgGeogebraCommonKernelRootsRealRootFunction_(fun) autorelease]) withDouble:a withDouble:b];
    if (JavaLangDouble_isNaNWithDouble_(secondSum)) return JavaLangDouble_NaN;
  }
  @catch (OrgApacheCommonsMathMaxIterationsExceededException *e) {
    error = YES;
  }
  @catch (OrgApacheCommonsMathConvergenceException *e) {
    error = YES;
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    return JavaLangDouble_NaN;
  }
  @catch (JavaLangIllegalArgumentException *e) {
    return JavaLangDouble_NaN;
  }
  jboolean equal = !error && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(firstSum, secondSum, OrgGeogebraCommonKernelKernel_STANDARD_PRECISION);
  if (equal) {
    return secondSum;
  }
  jdouble mid = (a + b) / 2;
  jdouble left = OrgGeogebraCommonKernelCasAlgoIntegralDefinite_doAdaptiveGaussQuadWithOrgGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(fun, a, mid);
  if (JavaLangDouble_isNaNWithDouble_(left)) {
    return JavaLangDouble_NaN;
  }
  return left + OrgGeogebraCommonKernelCasAlgoIntegralDefinite_doAdaptiveGaussQuadWithOrgGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(fun, mid, b);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCasAlgoIntegralDefinite)
