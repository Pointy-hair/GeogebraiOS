//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/cas/AlgoFactors.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "org/geogebra/common/kernel/cas/AlgoFactors.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"

@interface OrgGeogebraCommonKernelCasAlgoFactors () {
 @public
  OrgGeogebraCommonKernelGeosGeoFunction *f_;
  OrgGeogebraCommonKernelGeosGeoList *g_;
  JavaLangStringBuilder *sb_;
  OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoFactors, f_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoFactors, g_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoFactors, sb_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoFactors, arbconst_, OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *)

__attribute__((unused)) static void OrgGeogebraCommonKernelCasAlgoFactors_compute(OrgGeogebraCommonKernelCasAlgoFactors *self);

@implementation OrgGeogebraCommonKernelCasAlgoFactors

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f {
  OrgGeogebraCommonKernelCasAlgoFactors_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Factors();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, f_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return g_;
}

- (void)compute {
  OrgGeogebraCommonKernelCasAlgoFactors_compute(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoFunction:", "AlgoFactors", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "arbconst_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyArbitraryConstant;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCasAlgoFactors = { 2, "AlgoFactors", "org.geogebra.common.kernel.cas", NULL, 0x1, 5, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCasAlgoFactors;
}

@end

void OrgGeogebraCommonKernelCasAlgoFactors_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelCasAlgoFactors *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->sb_ = new_JavaLangStringBuilder_init();
  self->arbconst_ = new_OrgGeogebraCommonKernelArithmeticMyArbitraryConstant_initWithOrgGeogebraCommonKernelAlgosConstructionElement_(self);
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) addCASAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  self->f_ = f;
  self->g_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelCasAlgoFactors_compute(self);
  [self->g_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelCasAlgoFactors *new_OrgGeogebraCommonKernelCasAlgoFactors_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f) {
  OrgGeogebraCommonKernelCasAlgoFactors *self = [OrgGeogebraCommonKernelCasAlgoFactors alloc];
  OrgGeogebraCommonKernelCasAlgoFactors_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f);
  return self;
}

void OrgGeogebraCommonKernelCasAlgoFactors_compute(OrgGeogebraCommonKernelCasAlgoFactors *self) {
  if (![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->g_)) setUndefined];
    return;
  }
  @try {
    IOSObjectArray *funVarStr = [self->f_ getTempVarCASStringWithBoolean:NO];
    [((JavaLangStringBuilder *) nil_chk(self->sb_)) setLengthWithInt:0];
    (void) [self->sb_ appendWithNSString:@"Numeric(Factors("];
    (void) [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(funVarStr), 0)];
    (void) [self->sb_ appendWithNSString:@"))"];
    NSString *listOut = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) evaluateCachedGeoGebraCASWithNSString:[self->sb_ description] withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:self->arbconst_];
    if (listOut == nil || ((jint) [listOut length]) == 0) {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->g_)) setUndefined];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->g_)) setWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self->kernel_ getAlgebraProcessor])) evaluateToListWithNSString:listOut]];
      for (jint i = 0; i < [self->g_ size] && [[self->g_ getWithInt:i] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]]; i++) {
        OrgGeogebraCommonKernelGeosGeoList *factor = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([self->g_ getWithInt:i], [OrgGeogebraCommonKernelGeosGeoList class]);
        if ([[((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(factor)) getWithInt:0] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) {
          OrgGeogebraCommonKernelGeosGeoElement *constant = [factor getWithInt:0];
          OrgGeogebraCommonKernelGeosGeoElement *exponent = [factor getWithInt:1];
          [factor removeWithInt:1];
          [factor removeWithInt:0];
          OrgGeogebraCommonKernelGeosGeoFunction *fn = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
          [fn setWithOrgGeogebraCommonKernelGeosGeoElement:constant];
          [factor addWithOrgGeogebraCommonKernelGeosGeoElement:fn];
          [factor addWithOrgGeogebraCommonKernelGeosGeoElement:exponent];
        }
      }
    }
  }
  @catch (JavaLangThrowable *th) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->g_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCasAlgoFactors)
