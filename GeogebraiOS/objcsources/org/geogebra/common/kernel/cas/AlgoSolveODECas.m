//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/cas/AlgoSolveODECas.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "org/geogebra/common/kernel/cas/AlgoSolveODECas.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/CasEvaluableFunction.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionable.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelCasAlgoSolveODECas () {
 @public
  id<OrgGeogebraCommonKernelGeosCasEvaluableFunction> f_;
  OrgGeogebraCommonKernelGeosGeoElement *g_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> pt_;
  OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst_;
  NSString *oldCASstring_;
}

- (void)findPathThroughPoint;

- (void)updateGWithNSString:(NSString *)casString;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoSolveODECas, f_, id<OrgGeogebraCommonKernelGeosCasEvaluableFunction>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoSolveODECas, g_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoSolveODECas, pt_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoSolveODECas, arbconst_, OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoSolveODECas, oldCASstring_, NSString *)

__attribute__((unused)) static void OrgGeogebraCommonKernelCasAlgoSolveODECas_findPathThroughPoint(OrgGeogebraCommonKernelCasAlgoSolveODECas *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelCasAlgoSolveODECas_updateGWithNSString_(OrgGeogebraCommonKernelCasAlgoSolveODECas *self, NSString *casString);

@implementation OrgGeogebraCommonKernelCasAlgoSolveODECas

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
        withOrgGeogebraCommonKernelGeosCasEvaluableFunction:(id<OrgGeogebraCommonKernelGeosCasEvaluableFunction>)f {
  OrgGeogebraCommonKernelCasAlgoSolveODECas_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosCasEvaluableFunction_(self, cons, label, f);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
        withOrgGeogebraCommonKernelGeosCasEvaluableFunction:(id<OrgGeogebraCommonKernelGeosCasEvaluableFunction>)f
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)pt {
  OrgGeogebraCommonKernelCasAlgoSolveODECas_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosCasEvaluableFunction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, f, pt);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_SolveODE();
}

- (void)setInputOutput {
  if (pt_ == nil) {
    input_ = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f_)) toGeoElement] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  }
  else {
    input_ = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f_)) toGeoElement], [pt_ toGeoElement] } count:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  }
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:g_];
  [self setDependencies];
}

- (void)compute {
  if (![((id<OrgGeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f_)) isDefined] && g_ != nil) {
    [g_ setUndefined];
    return;
  }
  NSString *funExp = [f_ toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_prefixedDefault_()];
  if ([((NSString *) nil_chk(funExp)) indexOf:'='] > -1) {
    funExp = IOSObjectArray_Get(nil_chk([funExp split:@"="]), 1);
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  [sb setLengthWithInt:0];
  (void) [sb appendWithNSString:@"SolveODE("];
  (void) [sb appendWithNSString:funExp];
  if (pt_ != nil) {
    (void) [sb appendWithNSString:@","];
    (void) [sb appendWithNSString:[pt_ toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_prefixedDefault_()]];
  }
  (void) [sb appendWithNSString:@")"];
  NSString *casString = [sb description];
  if (![((NSString *) nil_chk(casString)) isEqual:oldCASstring_]) {
    OrgGeogebraCommonKernelCasAlgoSolveODECas_updateGWithNSString_(self, casString);
    oldCASstring_ = casString;
  }
  if (pt_ != nil && [((OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *) nil_chk(arbconst_)) getTotalNumberOfConsts] == 1) {
    OrgGeogebraCommonKernelCasAlgoSolveODECas_findPathThroughPoint(self);
  }
}

- (void)findPathThroughPoint {
  OrgGeogebraCommonKernelCasAlgoSolveODECas_findPathThroughPoint(self);
}

- (void)updateGWithNSString:(NSString *)casString {
  OrgGeogebraCommonKernelCasAlgoSolveODECas_updateGWithNSString_(self, casString);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResult {
  return g_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosCasEvaluableFunction:", "AlgoSolveODECas", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosCasEvaluableFunction:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "AlgoSolveODECas", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "findPathThroughPoint", NULL, "V", 0x2, NULL, NULL },
    { "updateGWithNSString:", "updateG", "V", 0x2, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.CasEvaluableFunction;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "pt_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "arbconst_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyArbitraryConstant;", NULL, NULL,  },
    { "oldCASstring_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCasAlgoSolveODECas = { 2, "AlgoSolveODECas", "org.geogebra.common.kernel.cas", NULL, 0x1, 8, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCasAlgoSolveODECas;
}

@end

void OrgGeogebraCommonKernelCasAlgoSolveODECas_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosCasEvaluableFunction_(OrgGeogebraCommonKernelCasAlgoSolveODECas *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelGeosCasEvaluableFunction> f) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->arbconst_ = new_OrgGeogebraCommonKernelArithmeticMyArbitraryConstant_initWithOrgGeogebraCommonKernelAlgosConstructionElement_(self);
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) addCASAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  self->f_ = f;
  [self compute];
  [self setInputOutput];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->g_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelCasAlgoSolveODECas *new_OrgGeogebraCommonKernelCasAlgoSolveODECas_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosCasEvaluableFunction_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelGeosCasEvaluableFunction> f) {
  OrgGeogebraCommonKernelCasAlgoSolveODECas *self = [OrgGeogebraCommonKernelCasAlgoSolveODECas alloc];
  OrgGeogebraCommonKernelCasAlgoSolveODECas_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosCasEvaluableFunction_(self, cons, label, f);
  return self;
}

void OrgGeogebraCommonKernelCasAlgoSolveODECas_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosCasEvaluableFunction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelCasAlgoSolveODECas *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelGeosCasEvaluableFunction> f, id<OrgGeogebraCommonKernelKernelNDGeoPointND> pt) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->arbconst_ = new_OrgGeogebraCommonKernelArithmeticMyArbitraryConstant_initWithOrgGeogebraCommonKernelAlgosConstructionElement_(self);
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) addCASAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  self->f_ = f;
  self->pt_ = pt;
  [self compute];
  [self setInputOutput];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->g_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelCasAlgoSolveODECas *new_OrgGeogebraCommonKernelCasAlgoSolveODECas_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosCasEvaluableFunction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelGeosCasEvaluableFunction> f, id<OrgGeogebraCommonKernelKernelNDGeoPointND> pt) {
  OrgGeogebraCommonKernelCasAlgoSolveODECas *self = [OrgGeogebraCommonKernelCasAlgoSolveODECas alloc];
  OrgGeogebraCommonKernelCasAlgoSolveODECas_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosCasEvaluableFunction_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, f, pt);
  return self;
}

void OrgGeogebraCommonKernelCasAlgoSolveODECas_findPathThroughPoint(OrgGeogebraCommonKernelCasAlgoSolveODECas *self) {
  OrgGeogebraCommonKernelGeosGeoNumeric *c1 = [((OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *) nil_chk(self->arbconst_)) getConstWithInt:0];
  if (c1 == nil) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->g_)) setUndefined];
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(c1)) setAlgebraVisibleWithBoolean:NO];
}

void OrgGeogebraCommonKernelCasAlgoSolveODECas_updateGWithNSString_(OrgGeogebraCommonKernelCasAlgoSolveODECas *self, NSString *casString) {
  NSString *functionOut;
  jboolean ok = NO;
  @try {
    functionOut = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) evaluateGeoGebraCASWithNSString:casString withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:self->arbconst_];
    jboolean flag = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    [self->cons_ setSuppressLabelCreationWithBoolean:YES];
    IOSObjectArray *res = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self->kernel_ getAlgebraProcessor])) processAlgebraCommandNoExceptionHandlingWithNSString:functionOut withBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO];
    [self->cons_ setSuppressLabelCreationWithBoolean:flag];
    if (res != nil && res->size_ > 0) {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(res, 0))) isGeoFunctionable]) {
        (void) IOSObjectArray_Set(res, 0, [((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(res, 0), @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction]);
      }
      if (self->g_ == nil) {
        self->g_ = IOSObjectArray_Get(res, 0);
      }
      else {
        [self->g_ setWithOrgGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(res, 0)];
      }
      ok = YES;
    }
  }
  @catch (JavaLangThrowable *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"AlgoSolveODECas: ", [((JavaLangThrowable *) nil_chk(e)) getMessage]));
  }
  if (!ok) {
    if (self->g_ != nil) {
      [self->g_ setUndefined];
    }
    else {
      self->g_ = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCasAlgoSolveODECas)
