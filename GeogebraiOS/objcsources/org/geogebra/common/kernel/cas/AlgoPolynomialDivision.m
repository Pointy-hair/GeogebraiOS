//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/cas/AlgoPolynomialDivision.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "org/geogebra/common/kernel/cas/AlgoPolynomialDivision.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"

@interface OrgGeogebraCommonKernelCasAlgoPolynomialDivision () {
 @public
  OrgGeogebraCommonKernelGeosGeoFunction *f1_, *f2_;
  OrgGeogebraCommonKernelGeosGeoFunction *g_, *h_;
  OrgGeogebraCommonKernelGeosGeoList *result_;
  JavaLangStringBuilder *sb_;
  OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoPolynomialDivision, f1_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoPolynomialDivision, f2_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoPolynomialDivision, g_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoPolynomialDivision, h_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoPolynomialDivision, result_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoPolynomialDivision, sb_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelCasAlgoPolynomialDivision, arbconst_, OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *)

__attribute__((unused)) static void OrgGeogebraCommonKernelCasAlgoPolynomialDivision_compute(OrgGeogebraCommonKernelCasAlgoPolynomialDivision *self);

@implementation OrgGeogebraCommonKernelCasAlgoPolynomialDivision

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f1
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f2 {
  OrgGeogebraCommonKernelCasAlgoPolynomialDivision_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f1, f2);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Division();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, f1_);
  IOSObjectArray_Set(input_, 1, f2_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:result_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

- (void)compute {
  OrgGeogebraCommonKernelCasAlgoPolynomialDivision_compute(self);
}

- (void)dealloc {
  RELEASE_(f1_);
  RELEASE_(f2_);
  RELEASE_(g_);
  RELEASE_(h_);
  RELEASE_(result_);
  RELEASE_(sb_);
  RELEASE_(arbconst_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:", "AlgoPolynomialDivision", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "f2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "h_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "arbconst_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyArbitraryConstant;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelCasAlgoPolynomialDivision = { 2, "AlgoPolynomialDivision", "org.geogebra.common.kernel.cas", NULL, 0x1, 5, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelCasAlgoPolynomialDivision;
}

@end

void OrgGeogebraCommonKernelCasAlgoPolynomialDivision_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelCasAlgoPolynomialDivision *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f1, OrgGeogebraCommonKernelGeosGeoFunction *f2) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelCasAlgoPolynomialDivision_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  OrgGeogebraCommonKernelCasAlgoPolynomialDivision_setAndConsume_arbconst_(self, new_OrgGeogebraCommonKernelArithmeticMyArbitraryConstant_initWithOrgGeogebraCommonKernelAlgosConstructionElement_(self));
  OrgGeogebraCommonKernelCasAlgoPolynomialDivision_set_f1_(self, f1);
  OrgGeogebraCommonKernelCasAlgoPolynomialDivision_set_f2_(self, f2);
  OrgGeogebraCommonKernelCasAlgoPolynomialDivision_setAndConsume_g_(self, new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons));
  OrgGeogebraCommonKernelCasAlgoPolynomialDivision_setAndConsume_h_(self, new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons));
  OrgGeogebraCommonKernelCasAlgoPolynomialDivision_setAndConsume_result_(self, new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:self->g_];
  [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:self->h_];
  [self setInputOutput];
  OrgGeogebraCommonKernelCasAlgoPolynomialDivision_compute(self);
  [self->result_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelCasAlgoPolynomialDivision *new_OrgGeogebraCommonKernelCasAlgoPolynomialDivision_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f1, OrgGeogebraCommonKernelGeosGeoFunction *f2) {
  OrgGeogebraCommonKernelCasAlgoPolynomialDivision *self = [OrgGeogebraCommonKernelCasAlgoPolynomialDivision alloc];
  OrgGeogebraCommonKernelCasAlgoPolynomialDivision_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f1, f2);
  return self;
}

void OrgGeogebraCommonKernelCasAlgoPolynomialDivision_compute(OrgGeogebraCommonKernelCasAlgoPolynomialDivision *self) {
  if (![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f1_)) isDefined] || ![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f2_)) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  @try {
    IOSObjectArray *funVarStr1 = [self->f1_ getTempVarCASStringWithBoolean:NO];
    IOSObjectArray *funVarStr2 = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f2_)) getTempVarCASStringWithBoolean:NO];
    [((JavaLangStringBuilder *) nil_chk(self->sb_)) setLengthWithInt:0];
    [self->sb_ appendWithNSString:@"Div("];
    [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(funVarStr1), 0)];
    [self->sb_ appendWithNSString:@","];
    [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(funVarStr2), 0)];
    [self->sb_ appendWithNSString:@")"];
    NSString *functionOut = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) evaluateCachedGeoGebraCASWithNSString:[self->sb_ description] withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:self->arbconst_];
    if (functionOut == nil || ((jint) [functionOut length]) == 0) {
      [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self->kernel_ getAlgebraProcessor])) evaluateToFunctionWithNSString:functionOut withBoolean:NO]];
    }
    [self->sb_ setLengthWithInt:0];
    [self->sb_ appendWithNSString:@"Mod("];
    [self->sb_ appendWithNSString:IOSObjectArray_Get(funVarStr1, 0)];
    [self->sb_ appendWithNSString:@","];
    [self->sb_ appendWithNSString:IOSObjectArray_Get(funVarStr2, 0)];
    [self->sb_ appendWithNSString:@")"];
    functionOut = [self->kernel_ evaluateCachedGeoGebraCASWithNSString:[self->sb_ description] withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:self->arbconst_];
    if (functionOut == nil || ((jint) [functionOut length]) == 0) {
      [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->h_)) setUndefined];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->h_)) setWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self->kernel_ getAlgebraProcessor])) evaluateToFunctionWithNSString:functionOut withBoolean:NO]];
    }
  }
  @catch (JavaLangThrowable *th) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelCasAlgoPolynomialDivision)
