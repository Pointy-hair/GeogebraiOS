//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/advanced/CmdDivisorsOrDivisorsSum.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/advanced/AlgoDivisorsSum.h"
#include "org/geogebra/common/kernel/advanced/CmdDivisorsOrDivisorsSum.h"
#include "org/geogebra/common/kernel/commands/CmdOneNumber.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"

@interface OrgGeogebraCommonKernelAdvancedCmdDivisorsOrDivisorsSum () {
 @public
  jboolean sum_;
}

@end

@implementation OrgGeogebraCommonKernelAdvancedCmdDivisorsOrDivisorsSum

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                          withBoolean:(jboolean)sum {
  OrgGeogebraCommonKernelAdvancedCmdDivisorsOrDivisorsSum_initWithOrgGeogebraCommonKernelKernel_withBoolean_(self, kernel, sum);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResultWithOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)num
                                                                                     withNSString:(NSString *)label {
  OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum *algo = new_OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(cons_, label, num, sum_);
  return [algo getResult];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:withBoolean:", "CmdDivisorsOrDivisorsSum", NULL, 0x1, NULL, NULL },
    { "getResultWithOrgGeogebraCommonKernelGeosGeoNumberValue:withNSString:", "getResult", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sum_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedCmdDivisorsOrDivisorsSum = { 2, "CmdDivisorsOrDivisorsSum", "org.geogebra.common.kernel.advanced", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedCmdDivisorsOrDivisorsSum;
}

@end

void OrgGeogebraCommonKernelAdvancedCmdDivisorsOrDivisorsSum_initWithOrgGeogebraCommonKernelKernel_withBoolean_(OrgGeogebraCommonKernelAdvancedCmdDivisorsOrDivisorsSum *self, OrgGeogebraCommonKernelKernel *kernel, jboolean sum) {
  (void) OrgGeogebraCommonKernelCommandsCmdOneNumber_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  self->sum_ = sum;
}

OrgGeogebraCommonKernelAdvancedCmdDivisorsOrDivisorsSum *new_OrgGeogebraCommonKernelAdvancedCmdDivisorsOrDivisorsSum_initWithOrgGeogebraCommonKernelKernel_withBoolean_(OrgGeogebraCommonKernelKernel *kernel, jboolean sum) {
  OrgGeogebraCommonKernelAdvancedCmdDivisorsOrDivisorsSum *self = [OrgGeogebraCommonKernelAdvancedCmdDivisorsOrDivisorsSum alloc];
  OrgGeogebraCommonKernelAdvancedCmdDivisorsOrDivisorsSum_initWithOrgGeogebraCommonKernelKernel_withBoolean_(self, kernel, sum);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedCmdDivisorsOrDivisorsSum)
