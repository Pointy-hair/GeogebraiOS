//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/advanced/AlgoIsPrime.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/advanced/AlgoIsPrime.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/cas/AlgoPrimeFactorization.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"

@interface OrgGeogebraCommonKernelAdvancedAlgoIsPrime () {
 @public
  OrgGeogebraCommonKernelGeosGeoBoolean *result_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> number_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoIsPrime, result_, OrgGeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoIsPrime, number_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)

@implementation OrgGeogebraCommonKernelAdvancedAlgoIsPrime

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)number {
  OrgGeogebraCommonKernelAdvancedAlgoIsPrime_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, number);
  return self;
}

- (void)setInputOutput {
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:result_];
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(number_)) toGeoElement] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  [self setDependencies];
}

- (void)compute {
  jdouble n = JavaLangMath_roundWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(number_)) getDouble]);
  [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(result_)) setDefined];
  if (n == 1) {
    [result_ setValueWithBoolean:NO];
    return;
  }
  if (n < 2 || n > OrgGeogebraCommonKernelCasAlgoPrimeFactorization_get_LARGEST_INTEGER_()) {
    [result_ setUndefined];
    return;
  }
  [result_ setValueWithBoolean:YES];
  for (jint i = 2; i <= n / i; i++) {
    if (fmod(n, i) == 0) {
      [result_ setValueWithBoolean:NO];
      return;
    }
  }
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_IsPrime();
}

- (OrgGeogebraCommonKernelGeosGeoBoolean *)getResult {
  return result_;
}

- (void)dealloc {
  RELEASE_(result_);
  RELEASE_(number_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoIsPrime", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "number_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedAlgoIsPrime = { 2, "AlgoIsPrime", "org.geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedAlgoIsPrime;
}

@end

void OrgGeogebraCommonKernelAdvancedAlgoIsPrime_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelAdvancedAlgoIsPrime *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelArithmeticNumberValue> number) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAdvancedAlgoIsPrime_setAndConsume_result_(self, new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_(cons));
  OrgGeogebraCommonKernelAdvancedAlgoIsPrime_set_number_(self, number);
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAdvancedAlgoIsPrime *new_OrgGeogebraCommonKernelAdvancedAlgoIsPrime_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelArithmeticNumberValue> number) {
  OrgGeogebraCommonKernelAdvancedAlgoIsPrime *self = [OrgGeogebraCommonKernelAdvancedAlgoIsPrime alloc];
  OrgGeogebraCommonKernelAdvancedAlgoIsPrime_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, number);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedAlgoIsPrime)
