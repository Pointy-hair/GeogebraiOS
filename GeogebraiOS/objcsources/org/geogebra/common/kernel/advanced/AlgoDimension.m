//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/advanced/AlgoDimension.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/advanced/AlgoDimension.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"

@interface OrgGeogebraCommonKernelAdvancedAlgoDimension () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *matrixDimension_;
  OrgGeogebraCommonKernelGeosGeoNumeric *firstDimension_, *secondDimension_;
  jboolean matrix_;
  OrgGeogebraCommonKernelGeosGeoList *list_;
  OrgGeogebraCommonKernelGeosGeoElement *point_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoDimension, matrixDimension_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoDimension, firstDimension_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoDimension, secondDimension_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoDimension, list_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoDimension, point_, OrgGeogebraCommonKernelGeosGeoElement *)

@implementation OrgGeogebraCommonKernelAdvancedAlgoDimension

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)geoList {
  OrgGeogebraCommonKernelAdvancedAlgoDimension_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geoList {
  OrgGeogebraCommonKernelAdvancedAlgoDimension_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, geoList);
  return self;
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, point_ == nil ? list_ : [point_ toGeoElement]);
  if (matrix_) {
    [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:matrixDimension_];
  }
  else {
    [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:firstDimension_];
  }
  [self setDependencies];
}

- (void)compute {
  if (point_ != nil) {
    if (![point_ isDefined]) {
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(firstDimension_)) setUndefined];
      return;
    }
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(firstDimension_)) setValueWithDouble:[point_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]] || [point_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoVector class]] ? 2 : 3];
    return;
  }
  if (![((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list_)) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getResult])) setUndefined];
    return;
  }
  jint size = [list_ size];
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(firstDimension_)) setValueWithDouble:size];
  if (matrix_) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(matrixDimension_)) setDefinedWithBoolean:YES];
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([list_ getWithInt:0])) isGeoList]) {
      [matrixDimension_ setUndefined];
      return;
    }
    jint n = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([list_ getWithInt:0], [OrgGeogebraCommonKernelGeosGeoList class])))) size];
    for (jint i = 0; i < size; i++) {
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([list_ getWithInt:i])) isGeoList] || [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([list_ getWithInt:i], [OrgGeogebraCommonKernelGeosGeoList class])))) size] != n) {
        [matrixDimension_ setUndefined];
        return;
      }
    }
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(secondDimension_)) setValueWithDouble:n];
  }
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResult {
  return matrix_ ? matrixDimension_ : firstDimension_;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Dimension();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoDimension", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoElement:", "AlgoDimension", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "matrixDimension_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "firstDimension_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "secondDimension_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "matrix_", NULL, 0x2, "Z", NULL, NULL,  },
    { "list_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "point_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedAlgoDimension = { 2, "AlgoDimension", "org.geogebra.common.kernel.advanced", NULL, 0x1, 6, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedAlgoDimension;
}

@end

void OrgGeogebraCommonKernelAdvancedAlgoDimension_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAdvancedAlgoDimension *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->list_ = geoList;
  self->firstDimension_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons);
  self->matrix_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) isMatrix];
  if (self->matrix_) {
    self->matrixDimension_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
    self->secondDimension_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons);
    [self->matrixDimension_ addWithOrgGeogebraCommonKernelGeosGeoElement:self->firstDimension_];
    [self->matrixDimension_ addWithOrgGeogebraCommonKernelGeosGeoElement:self->secondDimension_];
  }
  [self setInputOutput];
  [self compute];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getResult])) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAdvancedAlgoDimension *new_OrgGeogebraCommonKernelAdvancedAlgoDimension_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *geoList) {
  OrgGeogebraCommonKernelAdvancedAlgoDimension *self = [OrgGeogebraCommonKernelAdvancedAlgoDimension alloc];
  OrgGeogebraCommonKernelAdvancedAlgoDimension_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

void OrgGeogebraCommonKernelAdvancedAlgoDimension_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelAdvancedAlgoDimension *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *geoList) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->point_ = geoList;
  self->firstDimension_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons);
  self->matrix_ = NO;
  [self setInputOutput];
  [self compute];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getResult])) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAdvancedAlgoDimension *new_OrgGeogebraCommonKernelAdvancedAlgoDimension_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *geoList) {
  OrgGeogebraCommonKernelAdvancedAlgoDimension *self = [OrgGeogebraCommonKernelAdvancedAlgoDimension alloc];
  OrgGeogebraCommonKernelAdvancedAlgoDimension_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, geoList);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedAlgoDimension)
