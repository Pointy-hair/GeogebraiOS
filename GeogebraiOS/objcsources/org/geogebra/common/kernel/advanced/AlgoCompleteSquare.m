//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/advanced/AlgoCompleteSquare.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/advanced/AlgoCompleteSquare.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/cas/AlgoCoefficients.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/Operation.h"

@interface OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare () {
 @public
  OrgGeogebraCommonKernelGeosGeoFunction *f_, *square_;
  OrgGeogebraCommonKernelArithmeticFunctionVariable *fv_;
  OrgGeogebraCommonKernelArithmeticMyDouble *a_, *h_, *k_;
  jint lastDeg_;
  OrgGeogebraCommonKernelCasAlgoCoefficients *algoCoef_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare, f_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare, square_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare, fv_, OrgGeogebraCommonKernelArithmeticFunctionVariable *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare, a_, OrgGeogebraCommonKernelArithmeticMyDouble *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare, h_, OrgGeogebraCommonKernelArithmeticMyDouble *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare, k_, OrgGeogebraCommonKernelArithmeticMyDouble *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare, algoCoef_, OrgGeogebraCommonKernelCasAlgoCoefficients *)

@implementation OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f {
  OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f);
  return self;
}

- (void)compute {
  jint degInt;
  OrgGeogebraCommonKernelGeosGeoList *coefs = nil;
  [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv_)) setVarStringWithNSString:[((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) getVarStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  jdouble r = [f_ evaluateWithDouble:0];
  jdouble s = [f_ evaluateWithDouble:1];
  jdouble p = 0.5 * (s + [f_ evaluateWithDouble:-1]) - r;
  jdouble q = s - p - r;
  jboolean isQuadratic = ![f_ isGeoFunctionConditional];
  IOSDoubleArray *checkpoints = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 1000, -1000, JavaLangMath_PI, JavaLangMath_E } count:4];
  for (jint i = 0; i < checkpoints->size_; i++) {
    jdouble x = IOSDoubleArray_Get(checkpoints, i);
    if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(p * x * x + q * x + r - [f_ evaluateWithDouble:x])) {
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("DCDCDCD", p, ',', q, ',', r, ',', (p * x * x + q * x + r - [f_ evaluateWithDouble:x])));
      isQuadratic = NO;
    }
  }
  if (!isQuadratic) {
    if (algoCoef_ == nil) {
      OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare_setAndConsume_algoCoef_(self, new_OrgGeogebraCommonKernelCasAlgoCoefficients_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoFunction_(cons_, f_));
      [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoCoef_];
    }
    coefs = [((OrgGeogebraCommonKernelCasAlgoCoefficients *) nil_chk(algoCoef_)) getResult];
    OrgGeogebraCommonMainApp_debugWithNSString_([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(coefs)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
    degInt = [coefs size] - 1;
    isQuadratic = ([coefs isDefined] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([coefs getWithInt:0])) isDefined]);
    for (jint i = 1; i < degInt; i++) {
      if (2 * i != degInt && !OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([coefs getWithInt:i], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble])) {
        isQuadratic = NO;
      }
      p = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([coefs getWithInt:0], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
      q = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([coefs getWithInt:degInt / 2], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
      r = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([coefs getWithInt:degInt], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    }
  }
  else {
    degInt = 2;
  }
  if (degInt % 2 == 1 || degInt < 2 || !isQuadratic) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(square_)) setUndefined];
    return;
  }
  if (lastDeg_ != degInt) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *squareE;
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> fvPower;
    if (degInt == 2) fvPower = fv_;
    else fvPower = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, fv_, OrgGeogebraCommonPluginOperationEnum_get_POWER(), [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, degInt / 2) autorelease]) autorelease];
    squareE = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, a_, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), [((OrgGeogebraCommonKernelArithmeticExpressionNode *) [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, fvPower, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), h_) autorelease]) powerWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 2) autorelease]]) autorelease], OrgGeogebraCommonPluginOperationEnum_get_PLUS(), k_) autorelease];
    [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(square_)) getFunction])) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:squareE];
  }
  lastDeg_ = degInt;
  [fv_ setVarStringWithNSString:[f_ getVarStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(square_)) setDefinedWithBoolean:!JavaLangDouble_isNaNWithDouble_(r)];
  [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(a_)) setWithDouble:p];
  [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(h_)) setWithDouble:-q / (2 * p)];
  [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(k_)) setWithDouble:r - q * q / (p * 4)];
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, f_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:square_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getResult {
  return square_;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_CompleteSquare();
}

- (void)dealloc {
  RELEASE_(f_);
  RELEASE_(square_);
  RELEASE_(fv_);
  RELEASE_(a_);
  RELEASE_(h_);
  RELEASE_(k_);
  RELEASE_(algoCoef_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoFunction:", "AlgoCompleteSquare", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "square_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "fv_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.FunctionVariable;", NULL, NULL,  },
    { "a_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
    { "h_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
    { "k_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
    { "lastDeg_", NULL, 0x2, "I", NULL, NULL,  },
    { "algoCoef_", NULL, 0x2, "Lorg.geogebra.common.kernel.cas.AlgoCoefficients;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare = { 2, "AlgoCompleteSquare", "org.geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare;
}

@end

void OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare_set_f_(self, f);
  OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare_setAndConsume_a_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_(self->kernel_));
  OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare_setAndConsume_h_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_(self->kernel_));
  OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare_setAndConsume_k_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_(self->kernel_));
  OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare_setAndConsume_fv_(self, new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(self->kernel_));
  OrgGeogebraCommonKernelArithmeticExpressionNode *squareE = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->a_) autorelease];
  OrgGeogebraCommonKernelArithmeticFunction *squareF = [new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(squareE, self->fv_) autorelease];
  [squareF initFunction];
  OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare_setAndConsume_square_(self, new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self->square_ setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:squareF];
  [self compute];
  self->lastDeg_ = 0;
  [self->square_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare *new_OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f) {
  OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare *self = [OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare alloc];
  OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedAlgoCompleteSquare)
