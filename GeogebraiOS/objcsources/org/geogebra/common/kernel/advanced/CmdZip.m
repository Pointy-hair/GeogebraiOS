//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/advanced/CmdZip.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/advanced/AlgoZip.h"
#include "org/geogebra/common/kernel/advanced/CmdZip.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/main/MyError.h"

@implementation OrgGeogebraCommonKernelAdvancedCmdZip

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelAdvancedCmdZip_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  if (n < 3) @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  OrgGeogebraCommonKernelGeosGeoElement *arg = nil;
  IOSObjectArray *vars = [IOSObjectArray newArrayWithLength:n / 2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  IOSObjectArray *over = [IOSObjectArray newArrayWithLength:(n - 1) / 2 type:OrgGeogebraCommonKernelGeosGeoList_class_()];
  jboolean oldval = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  @try {
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    arg = [self resArgsForZipWithOrgGeogebraCommonKernelArithmeticCommand:c withOrgGeogebraCommonKernelGeosGeoElementArray:vars withOrgGeogebraCommonKernelGeosGeoListArray:over];
  }
  @finally {
    {
      IOSObjectArray *a__ = vars;
      OrgGeogebraCommonKernelGeosGeoElement * const *b__ = a__->buffer_;
      OrgGeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgGeogebraCommonKernelGeosGeoElement *localVar = *b__++;
        if (localVar != nil) [cons_ removeLocalVariableWithNSString:[localVar getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      }
    }
    [cons_ setSuppressLabelCreationWithBoolean:oldval];
  }
  OrgGeogebraCommonKernelAdvancedAlgoZip *algo = new_OrgGeogebraCommonKernelAdvancedAlgoZip_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElementArray_withOrgGeogebraCommonKernelGeosGeoListArray_(cons_, [c getLabel], arg, vars, over);
  return [algo getOutput];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdZip", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, "Lorg.geogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedCmdZip = { 2, "CmdZip", "org.geogebra.common.kernel.advanced", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedCmdZip;
}

@end

void OrgGeogebraCommonKernelAdvancedCmdZip_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelAdvancedCmdZip *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCommandProcessor_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelAdvancedCmdZip *new_OrgGeogebraCommonKernelAdvancedCmdZip_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelAdvancedCmdZip *self = [OrgGeogebraCommonKernelAdvancedCmdZip alloc];
  OrgGeogebraCommonKernelAdvancedCmdZip_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedCmdZip)
