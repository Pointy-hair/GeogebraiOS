//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/advanced/AlgoMatrixRank.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/advanced/AlgoMatrixRank.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/util/GgbMat.h"

@interface OrgGeogebraCommonKernelAdvancedAlgoMatrixRank () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *inputList_;
  OrgGeogebraCommonKernelGeosGeoNumeric *rank_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoMatrixRank, inputList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoMatrixRank, rank_, OrgGeogebraCommonKernelGeosGeoNumeric *)

@implementation OrgGeogebraCommonKernelAdvancedAlgoMatrixRank

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)matrix {
  OrgGeogebraCommonKernelAdvancedAlgoMatrixRank_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, matrix);
  return self;
}

- (void)setInputOutput {
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:rank_];
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ inputList_ } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  [self setDependencies];
}

- (void)compute {
  OrgGeogebraCommonUtilGgbMat *matrix = [new_OrgGeogebraCommonUtilGgbMat_initWithOrgGeogebraCommonKernelGeosGeoList_(inputList_) autorelease];
  if ([matrix isUndefined]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(rank_)) setUndefined];
    return;
  }
  [matrix reducedRowEchelonFormImmediate];
  jint rows = [matrix getRowDimension];
  jint cols = [matrix getColumnDimension];
  for (jint i = 0; i < rows; i++) {
    jboolean onlyZeros = YES;
    for (jint j = 0; j < cols; j++) {
      if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_([matrix getEntryWithInt:i withInt:j])) {
        onlyZeros = NO;
        break;
      }
    }
    if (onlyZeros) {
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(rank_)) setValueWithDouble:i];
      return;
    }
  }
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(rank_)) setValueWithDouble:rows];
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_MatrixRank();
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getResult {
  return rank_;
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(rank_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoMatrixRank", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "rank_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedAlgoMatrixRank = { 2, "AlgoMatrixRank", "org.geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedAlgoMatrixRank;
}

@end

void OrgGeogebraCommonKernelAdvancedAlgoMatrixRank_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAdvancedAlgoMatrixRank *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *matrix) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAdvancedAlgoMatrixRank_set_inputList_(self, matrix);
  OrgGeogebraCommonKernelAdvancedAlgoMatrixRank_setAndConsume_rank_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self compute];
  [self->rank_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAdvancedAlgoMatrixRank *new_OrgGeogebraCommonKernelAdvancedAlgoMatrixRank_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *matrix) {
  OrgGeogebraCommonKernelAdvancedAlgoMatrixRank *self = [OrgGeogebraCommonKernelAdvancedAlgoMatrixRank alloc];
  OrgGeogebraCommonKernelAdvancedAlgoMatrixRank_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, matrix);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedAlgoMatrixRank)
