//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/advanced/AlgoSlopeField.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/MyPoint.h"
#include "org/geogebra/common/kernel/advanced/AlgoSlopeField.h"
#include "org/geogebra/common/kernel/algos/AlgoDenominator.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoNumerator.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoLocus.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelAdvancedAlgoSlopeField () {
 @public
  id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> func_;
  OrgGeogebraCommonKernelGeosGeoNumeric *n_, *lengthRatio_, *minX_, *minY_, *maxX_, *maxY_;
  OrgGeogebraCommonKernelGeosGeoLocus *locus_;
  OrgGeogebraCommonKernelAlgosAlgoNumerator *numAlgo_;
  OrgGeogebraCommonKernelAlgosAlgoDenominator *denAlgo_;
  id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> num_, den_;
  jboolean quotient_;
  OrgGeogebraCommonEuclidianEuclidianView *mainView_;
}

- (void)drawLineWithDouble:(jdouble)dx
                withDouble:(jdouble)dy
                withDouble:(jdouble)length
                withDouble:(jdouble)xx
                withDouble:(jdouble)yy;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoSlopeField, func_, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoSlopeField, n_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoSlopeField, lengthRatio_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoSlopeField, minX_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoSlopeField, minY_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoSlopeField, maxX_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoSlopeField, maxY_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoSlopeField, locus_, OrgGeogebraCommonKernelGeosGeoLocus *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoSlopeField, numAlgo_, OrgGeogebraCommonKernelAlgosAlgoNumerator *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoSlopeField, denAlgo_, OrgGeogebraCommonKernelAlgosAlgoDenominator *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoSlopeField, num_, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoSlopeField, den_, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoSlopeField, mainView_, OrgGeogebraCommonEuclidianEuclidianView *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAdvancedAlgoSlopeField_compute(OrgGeogebraCommonKernelAdvancedAlgoSlopeField *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAdvancedAlgoSlopeField_drawLineWithDouble_withDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonKernelAdvancedAlgoSlopeField *self, jdouble dx, jdouble dy, jdouble length, jdouble xx, jdouble yy);

@implementation OrgGeogebraCommonKernelAdvancedAlgoSlopeField

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
        withOrgGeogebraCommonKernelArithmeticFunctionalNVar:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)func
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)n
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)lengthRatio
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)minX
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)minY
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)maxX
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)maxY {
  OrgGeogebraCommonKernelAdvancedAlgoSlopeField_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, func, n, lengthRatio, minX, minY, maxX, maxY);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_SlopeField();
}

- (void)setInputOutput {
  jint noOfInputs = 1;
  if (n_ != nil) noOfInputs++;
  if (lengthRatio_ != nil) noOfInputs++;
  if (minX_ != nil) noOfInputs++;
  if (minY_ != nil) noOfInputs++;
  if (maxX_ != nil) noOfInputs++;
  if (maxY_ != nil) noOfInputs++;
  input_ = [IOSObjectArray newArrayWithLength:noOfInputs type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  jint i = 0;
  (void) IOSObjectArray_Set(input_, i++, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(func_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  if (n_ != nil) (void) IOSObjectArray_Set(input_, i++, n_);
  if (lengthRatio_ != nil) (void) IOSObjectArray_Set(input_, i++, lengthRatio_);
  if (minX_ != nil) (void) IOSObjectArray_Set(input_, i++, minX_);
  if (minY_ != nil) (void) IOSObjectArray_Set(input_, i++, minY_);
  if (maxX_ != nil) (void) IOSObjectArray_Set(input_, i++, maxX_);
  if (maxY_ != nil) (void) IOSObjectArray_Set(input_, i++, maxY_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:locus_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoLocus *)getResult {
  return locus_;
}

- (void)compute {
  OrgGeogebraCommonKernelAdvancedAlgoSlopeField_compute(self);
}

- (void)drawLineWithDouble:(jdouble)dx
                withDouble:(jdouble)dy
                withDouble:(jdouble)length
                withDouble:(jdouble)xx
                withDouble:(jdouble)yy {
  OrgGeogebraCommonKernelAdvancedAlgoSlopeField_drawLineWithDouble_withDouble_withDouble_withDouble_withDouble_(self, dx, dy, length, xx, yy);
}

- (void)remove {
  if (removed_) return;
  [super remove];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(func_, [OrgGeogebraCommonKernelGeosGeoElement class])))) removeAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:numAlgo_];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(func_, [OrgGeogebraCommonKernelGeosGeoElement class])))) removeAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:denAlgo_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticFunctionalNVar:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoNumeric:", "AlgoSlopeField", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoLocus;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "drawLineWithDouble:withDouble:withDouble:withDouble:withDouble:", "drawLine", "V", 0x2, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "func_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.FunctionalNVar;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "lengthRatio_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "minX_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "minY_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "maxX_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "maxY_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "locus_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLocus;", NULL, NULL,  },
    { "al_", NULL, 0x0, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/MyPoint;>;",  },
    { "numAlgo_", NULL, 0x2, "Lorg.geogebra.common.kernel.algos.AlgoNumerator;", NULL, NULL,  },
    { "denAlgo_", NULL, 0x2, "Lorg.geogebra.common.kernel.algos.AlgoDenominator;", NULL, NULL,  },
    { "num_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.FunctionalNVar;", NULL, NULL,  },
    { "den_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.FunctionalNVar;", NULL, NULL,  },
    { "quotient_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mainView_", NULL, 0x2, "Lorg.geogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedAlgoSlopeField = { 2, "AlgoSlopeField", "org.geogebra.common.kernel.advanced", NULL, 0x1, 7, methods, 15, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedAlgoSlopeField;
}

@end

void OrgGeogebraCommonKernelAdvancedAlgoSlopeField_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelAdvancedAlgoSlopeField *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> func, OrgGeogebraCommonKernelGeosGeoNumeric *n, OrgGeogebraCommonKernelGeosGeoNumeric *lengthRatio, OrgGeogebraCommonKernelGeosGeoNumeric *minX, OrgGeogebraCommonKernelGeosGeoNumeric *minY, OrgGeogebraCommonKernelGeosGeoNumeric *maxX, OrgGeogebraCommonKernelGeosGeoNumeric *maxY) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->func_ = func;
  self->n_ = n;
  self->lengthRatio_ = lengthRatio;
  self->minX_ = minX;
  self->minY_ = minY;
  self->maxX_ = maxX;
  self->maxY_ = maxY;
  self->numAlgo_ = new_OrgGeogebraCommonKernelAlgosAlgoNumerator_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(cons, func);
  self->denAlgo_ = new_OrgGeogebraCommonKernelAlgosAlgoDenominator_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(cons, func);
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self->numAlgo_];
  [cons removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self->denAlgo_];
  self->num_ = (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(IOSObjectArray_Get(nil_chk([self->numAlgo_ getGeoElements]), 0), @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar));
  self->den_ = (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(IOSObjectArray_Get(nil_chk([self->denAlgo_ getGeoElements]), 0), @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar));
  self->quotient_ = ([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(self->num_)) isDefined] && [((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(self->den_)) isDefined]);
  if (!self->quotient_) {
    [cons removeFromAlgorithmListWithOrgGeogebraCommonKernelAlgosAlgoElement:self->numAlgo_];
    [cons removeFromAlgorithmListWithOrgGeogebraCommonKernelAlgosAlgoElement:self->denAlgo_];
  }
  self->locus_ = new_OrgGeogebraCommonKernelGeosGeoLocus_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelAdvancedAlgoSlopeField_compute(self);
  [self->locus_ setLabelWithNSString:label];
  [cons registerEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:self];
}

OrgGeogebraCommonKernelAdvancedAlgoSlopeField *new_OrgGeogebraCommonKernelAdvancedAlgoSlopeField_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> func, OrgGeogebraCommonKernelGeosGeoNumeric *n, OrgGeogebraCommonKernelGeosGeoNumeric *lengthRatio, OrgGeogebraCommonKernelGeosGeoNumeric *minX, OrgGeogebraCommonKernelGeosGeoNumeric *minY, OrgGeogebraCommonKernelGeosGeoNumeric *maxX, OrgGeogebraCommonKernelGeosGeoNumeric *maxY) {
  OrgGeogebraCommonKernelAdvancedAlgoSlopeField *self = [OrgGeogebraCommonKernelAdvancedAlgoSlopeField alloc];
  OrgGeogebraCommonKernelAdvancedAlgoSlopeField_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, func, n, lengthRatio, minX, minY, maxX, maxY);
  return self;
}

void OrgGeogebraCommonKernelAdvancedAlgoSlopeField_compute(OrgGeogebraCommonKernelAdvancedAlgoSlopeField *self) {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(self->func_, [OrgGeogebraCommonKernelGeosGeoElement class])))) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) setUndefined];
    return;
  }
  if (self->al_ == nil) self->al_ = new_JavaUtilArrayList_init();
  else [self->al_ clear];
  self->mainView_ = nil;
  jdouble xmax = -JavaLangDouble_MAX_VALUE;
  jdouble ymin = JavaLangDouble_MAX_VALUE;
  jdouble xmin = JavaLangDouble_MAX_VALUE;
  jdouble ymax = -JavaLangDouble_MAX_VALUE;
  if (self->minX_ != nil) {
    xmax = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->maxX_)) getDouble];
    ymax = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->maxY_)) getDouble];
    xmin = [self->minX_ getDouble];
    ymin = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->minY_)) getDouble];
    self->mainView_ = [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getEuclidianView1];
    if ([((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) hasEuclidianView2WithInt:1] && [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getEuclidianView2WithInt:1])) isVisibleInThisViewWithOrgGeogebraCommonKernelGeosGeoElement:self->locus_] && ![((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->mainView_)) isVisibleInThisViewWithOrgGeogebraCommonKernelGeosGeoElement:self->locus_]) {
      self->mainView_ = [((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getEuclidianView2WithInt:1];
    }
  }
  else {
    OrgGeogebraCommonEuclidianEuclidianView *view = [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getEuclidianView1];
    if ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view)) isVisibleInThisViewWithOrgGeogebraCommonKernelGeosGeoElement:self->locus_]) {
      self->mainView_ = view;
      xmax = JavaLangMath_maxWithDouble_withDouble_(xmax, [view toRealWorldCoordXWithDouble:([view getWidth])]);
      ymax = JavaLangMath_maxWithDouble_withDouble_(ymax, [view toRealWorldCoordYWithDouble:0]);
      xmin = JavaLangMath_minWithDouble_withDouble_(xmin, [view toRealWorldCoordXWithDouble:0]);
      ymin = JavaLangMath_minWithDouble_withDouble_(ymin, [view toRealWorldCoordYWithDouble:([view getHeight])]);
    }
    if ([((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) hasEuclidianView2WithInt:1]) {
      OrgGeogebraCommonEuclidianEuclidianView *view2 = [((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getEuclidianView2WithInt:1];
      if ([((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(view2)) isVisibleInThisViewWithOrgGeogebraCommonKernelGeosGeoElement:self->locus_]) {
        if (self->mainView_ == nil) self->mainView_ = view2;
        xmax = JavaLangMath_maxWithDouble_withDouble_(xmax, [view2 toRealWorldCoordXWithDouble:([view getWidth])]);
        ymax = JavaLangMath_maxWithDouble_withDouble_(ymax, [view2 toRealWorldCoordYWithDouble:0]);
        xmin = JavaLangMath_minWithDouble_withDouble_(xmin, [view2 toRealWorldCoordXWithDouble:0]);
        ymin = JavaLangMath_minWithDouble_withDouble_(ymin, [view2 toRealWorldCoordYWithDouble:([view getHeight])]);
      }
    }
  }
  if (xmax > -JavaLangDouble_MAX_VALUE) {
    jint nD = J2ObjCFpToInt((self->n_ == nil ? 39 : [self->n_ getDouble] - 1));
    if (nD < 2 || nD > 100) {
      nD = 39;
    }
    jdouble xStep = (xmax - xmin) / nD;
    jdouble yStep = (ymax - ymin) / nD;
    jdouble length = (self->lengthRatio_ == nil ? 0.5 : [self->lengthRatio_ getDouble]);
    if (length < 0 || length > 1 || JavaLangDouble_isInfiniteWithDouble_(length) || JavaLangDouble_isNaNWithDouble_(length)) {
      length = 0.5;
    }
    length = JavaLangMath_minWithDouble_withDouble_(xStep, yStep * [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->mainView_)) getScaleRatio]) * length * 0.5;
    jboolean funcOfJustY = [self->func_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]] && [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->func_, [OrgGeogebraCommonKernelGeosGeoFunction class])))) isFunctionOfY];
    for (jdouble xx = xmin; xx < xmax + xStep / 2; xx += xStep) {
      for (jdouble yy = ymin; yy < ymax + yStep / 2; yy += yStep) {
        IOSDoubleArray *input1 = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ xx, yy } count:2];
        if ([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(self->num_)) isDefined] && [((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(self->den_)) isDefined]) {
          jboolean numfuncOfJustY = [self->num_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]] && [((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->num_, [OrgGeogebraCommonKernelGeosGeoFunction class])) isFunctionOfY];
          jboolean denfuncOfJustY = [self->den_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]] && [((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->den_, [OrgGeogebraCommonKernelGeosGeoFunction class])) isFunctionOfY];
          jdouble numD = numfuncOfJustY ? [((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->num_, [OrgGeogebraCommonKernelGeosGeoFunction class])) evaluateWithDouble:IOSDoubleArray_Get(input1, 1)] : [self->num_ evaluateWithDoubleArray:input1];
          jdouble denD = denfuncOfJustY ? [((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->den_, [OrgGeogebraCommonKernelGeosGeoFunction class])) evaluateWithDouble:IOSDoubleArray_Get(input1, 1)] : [self->den_ evaluateWithDoubleArray:input1];
          if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(denD)) {
            if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(numD)) {
              [((JavaUtilArrayList *) nil_chk(self->al_)) addWithId:new_OrgGeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(xx, yy, NO)];
              [self->al_ addWithId:new_OrgGeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(xx, yy, YES)];
            }
            else {
              OrgGeogebraCommonKernelAdvancedAlgoSlopeField_drawLineWithDouble_withDouble_withDouble_withDouble_withDouble_(self, 0, 1, length, xx, yy);
            }
          }
          else {
            jdouble gradient = numD / denD;
            OrgGeogebraCommonKernelAdvancedAlgoSlopeField_drawLineWithDouble_withDouble_withDouble_withDouble_withDouble_(self, 1, gradient, length, xx, yy);
          }
        }
        else {
          jdouble gradient;
          if (funcOfJustY) {
            gradient = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->func_, [OrgGeogebraCommonKernelGeosGeoFunction class])))) evaluateWithDouble:IOSDoubleArray_Get(input1, 1)];
          }
          else {
            gradient = [((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(self->func_)) evaluateWithDoubleArray:input1];
          }
          OrgGeogebraCommonKernelAdvancedAlgoSlopeField_drawLineWithDouble_withDouble_withDouble_withDouble_withDouble_(self, 1, gradient, length, xx, yy);
        }
      }
    }
  }
  [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) setPointsWithJavaUtilArrayList:self->al_];
  [self->locus_ setDefinedWithBoolean:YES];
}

void OrgGeogebraCommonKernelAdvancedAlgoSlopeField_drawLineWithDouble_withDouble_withDouble_withDouble_withDouble_(OrgGeogebraCommonKernelAdvancedAlgoSlopeField *self, jdouble dx, jdouble dy, jdouble length, jdouble xx, jdouble yy) {
  jdouble dyScaled = dy * [((OrgGeogebraCommonEuclidianEuclidianView *) nil_chk(self->mainView_)) getScaleRatio];
  jdouble coeff = JavaLangMath_sqrtWithDouble_(dx * dx + dyScaled * dyScaled);
  dx *= length / coeff;
  dy *= length / coeff;
  [((JavaUtilArrayList *) nil_chk(self->al_)) addWithId:new_OrgGeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(xx - dx, yy - dy, NO)];
  [self->al_ addWithId:new_OrgGeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(xx + dx, yy + dy, YES)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedAlgoSlopeField)
