//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/advanced/TransformApplyMatrix.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Transform.h"
#include "org/geogebra/common/kernel/advanced/AlgoApplyMatrix.h"
#include "org/geogebra/common/kernel/advanced/TransformApplyMatrix.h"
#include "org/geogebra/common/kernel/algos/AlgoTransformation.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"

@interface OrgGeogebraCommonKernelAdvancedTransformApplyMatrix () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *matrix_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedTransformApplyMatrix, matrix_, OrgGeogebraCommonKernelGeosGeoList *)

@implementation OrgGeogebraCommonKernelAdvancedTransformApplyMatrix

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)matrix {
  OrgGeogebraCommonKernelAdvancedTransformApplyMatrix_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, matrix);
  return self;
}

- (OrgGeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix *algo = new_OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoList_(cons_, geo, matrix_);
  return algo;
}

- (jboolean)isSimilar {
  return NO;
}

- (jboolean)changesOrientation {
  OrgGeogebraCommonKernelAlgosAlgoTransformation *at = [self getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_)];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:at];
  return [((OrgGeogebraCommonKernelAlgosAlgoTransformation *) nil_chk(at)) swapOrientationWithOrgGeogebraCommonKernelGeosGeoConicPart:nil];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoList:", "TransformApplyMatrix", NULL, 0x1, NULL, NULL },
    { "getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:", "getTransformAlgo", "Lorg.geogebra.common.kernel.algos.AlgoTransformation;", 0x4, NULL, NULL },
    { "isSimilar", NULL, "Z", 0x1, NULL, NULL },
    { "changesOrientation", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "matrix_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedTransformApplyMatrix = { 2, "TransformApplyMatrix", "org.geogebra.common.kernel.advanced", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedTransformApplyMatrix;
}

@end

void OrgGeogebraCommonKernelAdvancedTransformApplyMatrix_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAdvancedTransformApplyMatrix *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *matrix) {
  (void) OrgGeogebraCommonKernelTransform_init(self);
  self->matrix_ = matrix;
  self->cons_ = cons;
}

OrgGeogebraCommonKernelAdvancedTransformApplyMatrix *new_OrgGeogebraCommonKernelAdvancedTransformApplyMatrix_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoList *matrix) {
  OrgGeogebraCommonKernelAdvancedTransformApplyMatrix *self = [OrgGeogebraCommonKernelAdvancedTransformApplyMatrix alloc];
  OrgGeogebraCommonKernelAdvancedTransformApplyMatrix_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, matrix);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedTransformApplyMatrix)
