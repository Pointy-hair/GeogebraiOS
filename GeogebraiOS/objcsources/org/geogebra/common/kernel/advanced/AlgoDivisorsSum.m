//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/advanced/AlgoDivisorsSum.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/advanced/AlgoDivisorsSum.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/cas/AlgoPrimeFactorization.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum () {
 @public
  id<OrgGeogebraCommonKernelArithmeticNumberValue> number_;
  OrgGeogebraCommonKernelCasAlgoPrimeFactorization *factors_;
  OrgGeogebraCommonKernelGeosGeoList *factorList_;
  jboolean sum_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum, number_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum, factors_, OrgGeogebraCommonKernelCasAlgoPrimeFactorization *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum, factorList_, OrgGeogebraCommonKernelGeosGeoList *)

@implementation OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)number
                                                withBoolean:(jboolean)sum {
  OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(self, c, label, number, sum);
  return self;
}

- (void)setInputOutput {
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:result_];
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(number_)) toGeoElement] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  [self setDependencies];
}

- (void)compute {
  if (![((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(factorList_)) isDefined] || !OrgGeogebraCommonKernelKernel_isIntegerWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(number_)) getDouble])) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setUndefined];
    return;
  }
  jlong res = 1;
  for (jint i = 0; i < [factorList_ size]; i++) {
    OrgGeogebraCommonKernelGeosGeoList *pair = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast([factorList_ getWithInt:i], [OrgGeogebraCommonKernelGeosGeoList class]);
    jdouble exp = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(pair)) getWithInt:1], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    if (sum_) {
      jdouble prime = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([pair getWithInt:0], @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
      OrgGeogebraCommonUtilDebugLog_debugWithId_(JavaLangDouble_valueOfWithDouble_(prime));
      res = res * JavaLangMath_roundWithDouble_((JavaLangMath_powWithDouble_withDouble_(prime, exp + 1) - 1) / (prime - 1.0));
    }
    else {
      res = res * JavaLangMath_roundWithDouble_(exp + 1);
    }
  }
  [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setValueWithDouble:res];
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)getResult {
  return result_;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  if (sum_) return OrgGeogebraCommonKernelCommandsCommandsEnum_get_DivisorsSum();
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Divisors();
}

- (void)dealloc {
  RELEASE_(result_);
  RELEASE_(number_);
  RELEASE_(factors_);
  RELEASE_(factorList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticNumberValue:withBoolean:", "AlgoDivisorsSum", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "result_", NULL, 0x0, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "number_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "factors_", NULL, 0x2, "Lorg.geogebra.common.kernel.cas.AlgoPrimeFactorization;", NULL, NULL,  },
    { "factorList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "sum_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum = { 2, "AlgoDivisorsSum", "org.geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum;
}

@end

void OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, id<OrgGeogebraCommonKernelArithmeticNumberValue> number, jboolean sum) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum_set_number_(self, number);
  self->sum_ = sum;
  OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum_setAndConsume_factors_(self, new_OrgGeogebraCommonKernelCasAlgoPrimeFactorization_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticNumberValue_(c, number));
  OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum_set_factorList_(self, [self->factors_ getResult]);
  OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum_setAndConsume_result_(self, new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum *new_OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(OrgGeogebraCommonKernelConstruction *c, NSString *label, id<OrgGeogebraCommonKernelArithmeticNumberValue> number, jboolean sum) {
  OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum *self = [OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum alloc];
  OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(self, c, label, number, sum);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedAlgoDivisorsSum)
