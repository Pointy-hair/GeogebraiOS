//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/advanced/AlgoFlatten.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/advanced/AlgoFlatten.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"

@interface OrgGeogebraCommonKernelAdvancedAlgoFlatten () {
 @public
  OrgGeogebraCommonKernelGeosGeoList *inputList_;
  OrgGeogebraCommonKernelGeosGeoList *outputList_;
}

- (void)flattenWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)outputList
               withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)list;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoFlatten, inputList_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoFlatten, outputList_, OrgGeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAdvancedAlgoFlatten_compute(OrgGeogebraCommonKernelAdvancedAlgoFlatten *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAdvancedAlgoFlatten_flattenWithOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAdvancedAlgoFlatten *self, OrgGeogebraCommonKernelGeosGeoList *outputList, OrgGeogebraCommonKernelGeosGeoList *list);

@implementation OrgGeogebraCommonKernelAdvancedAlgoFlatten

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)inputList {
  OrgGeogebraCommonKernelAdvancedAlgoFlatten_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Flatten();
}

- (void)setInputOutput {
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(outputList_)) setTypeStringForXMLWithNSString:[((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(inputList_)) getTypeStringForXML]];
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:outputList_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)compute {
  OrgGeogebraCommonKernelAdvancedAlgoFlatten_compute(self);
}

- (void)flattenWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)outputList
               withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)list {
  OrgGeogebraCommonKernelAdvancedAlgoFlatten_flattenWithOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, outputList, list);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(outputList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoFlatten", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "flattenWithOrgGeogebraCommonKernelGeosGeoList:withOrgGeogebraCommonKernelGeosGeoList:", "flatten", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedAlgoFlatten = { 2, "AlgoFlatten", "org.geogebra.common.kernel.advanced", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedAlgoFlatten;
}

@end

void OrgGeogebraCommonKernelAdvancedAlgoFlatten_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAdvancedAlgoFlatten *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAdvancedAlgoFlatten_set_inputList_(self, inputList);
  OrgGeogebraCommonKernelAdvancedAlgoFlatten_setAndConsume_outputList_(self, new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelAdvancedAlgoFlatten_compute(self);
  [self->outputList_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAdvancedAlgoFlatten *new_OrgGeogebraCommonKernelAdvancedAlgoFlatten_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgGeogebraCommonKernelAdvancedAlgoFlatten *self = [OrgGeogebraCommonKernelAdvancedAlgoFlatten alloc];
  OrgGeogebraCommonKernelAdvancedAlgoFlatten_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

void OrgGeogebraCommonKernelAdvancedAlgoFlatten_compute(OrgGeogebraCommonKernelAdvancedAlgoFlatten *self) {
  if (![((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setDefinedWithBoolean:YES];
  [self->outputList_ clear];
  OrgGeogebraCommonKernelAdvancedAlgoFlatten_flattenWithOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, self->outputList_, self->inputList_);
}

void OrgGeogebraCommonKernelAdvancedAlgoFlatten_flattenWithOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAdvancedAlgoFlatten *self, OrgGeogebraCommonKernelGeosGeoList *outputList, OrgGeogebraCommonKernelGeosGeoList *list) {
  jint size = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list)) size];
  for (jint i = 0; i < size; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *element = [list getWithInt:i];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(element)) isGeoList]) {
      OrgGeogebraCommonKernelAdvancedAlgoFlatten_flattenWithOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoList_(self, outputList, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(element, [OrgGeogebraCommonKernelGeosGeoList class]));
    }
    else [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(outputList)) addWithOrgGeogebraCommonKernelGeosGeoElement:[element copyInternalWithOrgGeogebraCommonKernelConstruction:self->cons_]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedAlgoFlatten)
