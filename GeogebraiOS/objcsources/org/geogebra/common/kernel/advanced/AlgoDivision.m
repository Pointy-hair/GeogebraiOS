//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/advanced/AlgoDivision.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/advanced/AlgoDivision.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"

@interface OrgGeogebraCommonKernelAdvancedAlgoDivision () {
 @public
  id<OrgGeogebraCommonKernelGeosGeoNumberValue> a_, b_;
  OrgGeogebraCommonKernelGeosGeoNumeric *num_, *mod_;
  OrgGeogebraCommonKernelGeosGeoList *result_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoDivision, a_, id<OrgGeogebraCommonKernelGeosGeoNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoDivision, b_, id<OrgGeogebraCommonKernelGeosGeoNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoDivision, num_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoDivision, mod_, OrgGeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoDivision, result_, OrgGeogebraCommonKernelGeosGeoList *)

@implementation OrgGeogebraCommonKernelAdvancedAlgoDivision

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)dividend
              withOrgGeogebraCommonKernelGeosGeoNumberValue:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)divisor {
  OrgGeogebraCommonKernelAdvancedAlgoDivision_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, cons, label, dividend, divisor);
  return self;
}

- (void)setInputOutput {
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:result_];
  input_ = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelGeosGeoNumberValue>) nil_chk(a_)) toGeoElement], [((id<OrgGeogebraCommonKernelGeosGeoNumberValue>) nil_chk(b_)) toGeoElement] } count:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  [self setDependencies];
}

- (void)compute {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) isDefined] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) isDefined]) {
    jdouble numerator = [((id<OrgGeogebraCommonKernelGeosGeoNumberValue>) nil_chk(a_)) getDouble];
    jdouble denominator = [((id<OrgGeogebraCommonKernelGeosGeoNumberValue>) nil_chk(b_)) getDouble];
    if (JavaLangMath_absWithDouble_(numerator) > OrgGeogebraCommonKernelArithmeticMyDouble_get_LARGEST_INTEGER_() || JavaLangMath_absWithDouble_(denominator) > OrgGeogebraCommonKernelArithmeticMyDouble_get_LARGEST_INTEGER_()) {
      [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(result_)) setUndefined];
      return;
    }
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(result_)) setDefinedWithBoolean:YES];
    jdouble m = fmod(numerator, JavaLangMath_absWithDouble_(denominator));
    if (m < 0) m += JavaLangMath_absWithDouble_(denominator);
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(mod_)) setValueWithDouble:m];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:JavaLangMath_roundWithDouble_((numerator - m) / denominator)];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(result_)) setUndefined];
  }
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Division();
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResult {
  return result_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoNumberValue:withOrgGeogebraCommonKernelGeosGeoNumberValue:", "AlgoDivision", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "a_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumberValue;", NULL, NULL,  },
    { "b_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumberValue;", NULL, NULL,  },
    { "num_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "mod_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedAlgoDivision = { 2, "AlgoDivision", "org.geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedAlgoDivision;
}

@end

void OrgGeogebraCommonKernelAdvancedAlgoDivision_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelAdvancedAlgoDivision *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelGeosGeoNumberValue> dividend, id<OrgGeogebraCommonKernelGeosGeoNumberValue> divisor) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->a_ = dividend;
  self->b_ = divisor;
  self->num_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons);
  self->mod_ = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons);
  self->result_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:self->num_];
  [self->result_ addWithOrgGeogebraCommonKernelGeosGeoElement:self->mod_];
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAdvancedAlgoDivision *new_OrgGeogebraCommonKernelAdvancedAlgoDivision_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelGeosGeoNumberValue_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, id<OrgGeogebraCommonKernelGeosGeoNumberValue> dividend, id<OrgGeogebraCommonKernelGeosGeoNumberValue> divisor) {
  OrgGeogebraCommonKernelAdvancedAlgoDivision *self = [OrgGeogebraCommonKernelAdvancedAlgoDivision alloc];
  OrgGeogebraCommonKernelAdvancedAlgoDivision_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumberValue_withOrgGeogebraCommonKernelGeosGeoNumberValue_(self, cons, label, dividend, divisor);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedAlgoDivision)
