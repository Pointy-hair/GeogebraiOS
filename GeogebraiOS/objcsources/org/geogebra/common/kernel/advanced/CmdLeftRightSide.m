//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/advanced/CmdLeftRightSide.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/advanced/AlgoLeftRightSide.h"
#include "org/geogebra/common/kernel/advanced/CmdLeftRightSide.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/main/MyError.h"

@interface OrgGeogebraCommonKernelAdvancedCmdLeftRightSide () {
 @public
  jboolean left_;
}

@end

@implementation OrgGeogebraCommonKernelAdvancedCmdLeftRightSide

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                          withBoolean:(jboolean)left {
  OrgGeogebraCommonKernelAdvancedCmdLeftRightSide_initWithOrgGeogebraCommonKernelKernel_withBoolean_(self, kernel, left);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  IOSObjectArray *args = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
  if (((IOSObjectArray *) nil_chk(args))->size_ != 1) @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withInt:args->size_];
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(args, 0))) isGeoImplicitPoly] && !([IOSObjectArray_Get(args, 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoConic class]]) && !([IOSObjectArray_Get(args, 0) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLine class]])) @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(args, 0)];
  OrgGeogebraCommonKernelAdvancedAlgoLeftRightSide *algo = new_OrgGeogebraCommonKernelAdvancedAlgoLeftRightSide_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(cons_, [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel], IOSObjectArray_Get(args, 0), left_);
  return [IOSObjectArray newArrayWithObjects:(id[]){ [algo getResult] } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:withBoolean:", "CmdLeftRightSide", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;Lorg.geogebra.common.kernel.CircularDefinitionException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "left_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedCmdLeftRightSide = { 2, "CmdLeftRightSide", "org.geogebra.common.kernel.advanced", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedCmdLeftRightSide;
}

@end

void OrgGeogebraCommonKernelAdvancedCmdLeftRightSide_initWithOrgGeogebraCommonKernelKernel_withBoolean_(OrgGeogebraCommonKernelAdvancedCmdLeftRightSide *self, OrgGeogebraCommonKernelKernel *kernel, jboolean left) {
  (void) OrgGeogebraCommonKernelCommandsCommandProcessor_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  self->left_ = left;
}

OrgGeogebraCommonKernelAdvancedCmdLeftRightSide *new_OrgGeogebraCommonKernelAdvancedCmdLeftRightSide_initWithOrgGeogebraCommonKernelKernel_withBoolean_(OrgGeogebraCommonKernelKernel *kernel, jboolean left) {
  OrgGeogebraCommonKernelAdvancedCmdLeftRightSide *self = [OrgGeogebraCommonKernelAdvancedCmdLeftRightSide alloc];
  OrgGeogebraCommonKernelAdvancedCmdLeftRightSide_initWithOrgGeogebraCommonKernelKernel_withBoolean_(self, kernel, left);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedCmdLeftRightSide)
