//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/advanced/AlgoApplyMatrix.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/MatrixTransformable.h"
#include "org/geogebra/common/kernel/advanced/AlgoApplyMatrix.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoTransformation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoConicPart.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoPoly.h"

@interface OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix () {
 @public
  id<OrgGeogebraCommonKernelMatrixTransformable> out_;
  OrgGeogebraCommonKernelGeosGeoElement *inGeo_, *outGeo_;
  OrgGeogebraCommonKernelGeosGeoList *matrix_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix, out_, id<OrgGeogebraCommonKernelMatrixTransformable>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix, inGeo_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix, outGeo_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix, matrix_, OrgGeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix_compute(OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix *self);

@implementation OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)matrix {
  OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, inArg, matrix);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inArg
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)matrix {
  OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, inArg, matrix);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_ApplyMatrix();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 1, inGeo_);
  (void) IOSObjectArray_Set(input_, 0, matrix_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:outGeo_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResult {
  return outGeo_;
}

- (void)compute {
  OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix_compute(self);
}

- (void)setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g
                            withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g2 {
  inGeo_ = g;
  outGeo_ = g2;
  if (!([out_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]]) && ([OrgGeogebraCommonKernelMatrixTransformable_class_() isInstance:outGeo_])) {
    out_ = (id<OrgGeogebraCommonKernelMatrixTransformable>) check_protocol_cast(outGeo_, @protocol(OrgGeogebraCommonKernelMatrixTransformable));
  }
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
    return new_OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  }
  return [super getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

- (jboolean)swapOrientationWithOrgGeogebraCommonKernelGeosGeoConicPart:(OrgGeogebraCommonKernelGeosGeoConicPart *)arc {
  jdouble a, b, c, d;
  a = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(matrix_)) getWithInt:0 withInt:0]), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  b = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([matrix_ getWithInt:1 withInt:0]), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  c = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([matrix_ getWithInt:0 withInt:1]), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  d = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([matrix_ getWithInt:1 withInt:1]), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  return (arc == nil || [arc positiveOrientation]) ^ (((a * d) - (b * c)) < 0);
}

- (void)transformLimitedPathWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)a
                            withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)b {
  if (!([a isKindOfClass:[OrgGeogebraCommonKernelGeosGeoConicPart class]])) {
    [super transformLimitedPathWithOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:b];
  }
  else {
    [super transformLimitedConicWithOrgGeogebraCommonKernelGeosGeoElement:a withOrgGeogebraCommonKernelGeosGeoElement:b];
  }
}

- (jdouble)getAreaScaleFactor {
  jdouble a = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(matrix_)) getWithInt:0 withInt:0]), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  jdouble b = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([matrix_ getWithInt:1 withInt:0]), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  jdouble c = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([matrix_ getWithInt:0 withInt:1]), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  jdouble d = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([matrix_ getWithInt:1 withInt:1]), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  return (a * d) - (b * c);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoApplyMatrix", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoApplyMatrix", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setTransformedObjectWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "setTransformedObject", "V", 0x4, NULL, NULL },
    { "getResultTemplateWithOrgGeogebraCommonKernelGeosGeoElement:", "getResultTemplate", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "swapOrientationWithOrgGeogebraCommonKernelGeosGeoConicPart:", "swapOrientation", "Z", 0x1, NULL, NULL },
    { "transformLimitedPathWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "transformLimitedPath", "V", 0x4, NULL, NULL },
    { "getAreaScaleFactor", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "out_", NULL, 0x2, "Lorg.geogebra.common.kernel.MatrixTransformable;", NULL, NULL,  },
    { "inGeo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "outGeo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "matrix_", NULL, 0x12, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix = { 2, "AlgoApplyMatrix", "org.geogebra.common.kernel.advanced", NULL, 0x1, 11, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix;
}

@end

void OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *inArg, OrgGeogebraCommonKernelGeosGeoList *matrix) {
  (void) OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, inArg, matrix);
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix *new_OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *inArg, OrgGeogebraCommonKernelGeosGeoList *matrix) {
  OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix *self = [OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix alloc];
  OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, inArg, matrix);
  return self;
}

void OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, OrgGeogebraCommonKernelGeosGeoList *matrix) {
  (void) OrgGeogebraCommonKernelAlgosAlgoTransformation_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->matrix_ = matrix;
  self->inGeo_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(inArg)) toGeoElement];
  if (([OrgGeogebraCommonKernelGeosGeoPoly_class_() isInstance:self->inGeo_]) || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isLimitedPath]) {
    self->outGeo_ = [inArg copyInternalWithOrgGeogebraCommonKernelConstruction:cons];
    self->out_ = (id<OrgGeogebraCommonKernelMatrixTransformable>) check_protocol_cast(self->outGeo_, @protocol(OrgGeogebraCommonKernelMatrixTransformable));
  }
  else if ([self->inGeo_ isGeoList]) {
    self->outGeo_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  }
  else if ([self->inGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
    self->out_ = new_OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_(cons);
    self->outGeo_ = [self->out_ toGeoElement];
  }
  else {
    self->out_ = (id<OrgGeogebraCommonKernelMatrixTransformable>) check_protocol_cast([self->inGeo_ copy__], @protocol(OrgGeogebraCommonKernelMatrixTransformable));
    self->outGeo_ = [((id<OrgGeogebraCommonKernelMatrixTransformable>) nil_chk(self->out_)) toGeoElement];
  }
  [self setInputOutput];
  OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix_compute(self);
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isGeoFunction]) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) registerEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:self];
  }
}

OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix *new_OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoElement *inArg, OrgGeogebraCommonKernelGeosGeoList *matrix) {
  OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix *self = [OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix alloc];
  OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, inArg, matrix);
  return self;
}

void OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix_compute(OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix *self) {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isGeoList]) {
    [self transformListWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->inGeo_, [OrgGeogebraCommonKernelGeosGeoList class]) withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self->outGeo_, [OrgGeogebraCommonKernelGeosGeoList class])];
    return;
  }
  if ([self->inGeo_ isGeoFunction]) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->inGeo_, [OrgGeogebraCommonKernelGeosGeoFunction class])) toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(self->outGeo_, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class])];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setWithOrgGeogebraCommonKernelGeosGeoElement:self->inGeo_];
  }
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) isDefined]) {
    return;
  }
  OrgGeogebraCommonKernelArithmeticMyList *list = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->matrix_)) getMyList];
  if (([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(list)) getMatrixCols] != [list getMatrixRows]) || ([list getMatrixRows] < 2) || ([list getMatrixRows] > 3)) {
    [self->outGeo_ setUndefined];
    return;
  }
  jdouble a, b, c, d, e, f, g, h, i;
  if ([list getMatrixRows] < 3) {
    a = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 0, 0))) evaluateDouble];
    b = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 1, 0))) evaluateDouble];
    c = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 0, 1))) evaluateDouble];
    d = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 1, 1))) evaluateDouble];
    [((id<OrgGeogebraCommonKernelMatrixTransformable>) nil_chk(self->out_)) matrixTransformWithDouble:a withDouble:b withDouble:c withDouble:d];
  }
  else {
    a = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 0, 0))) evaluateDouble];
    b = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 1, 0))) evaluateDouble];
    c = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 2, 0))) evaluateDouble];
    d = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 0, 1))) evaluateDouble];
    e = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 1, 1))) evaluateDouble];
    f = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 2, 1))) evaluateDouble];
    g = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 0, 2))) evaluateDouble];
    h = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 1, 2))) evaluateDouble];
    i = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(OrgGeogebraCommonKernelArithmeticMyList_getCellWithOrgGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 2, 2))) evaluateDouble];
    [((id<OrgGeogebraCommonKernelMatrixTransformable>) nil_chk(self->out_)) matrixTransformWithDouble:a withDouble:b withDouble:c withDouble:d withDouble:e withDouble:f withDouble:g withDouble:h withDouble:i];
  }
  if ([self->inGeo_ isLimitedPath]) {
    [self transformLimitedPathWithOrgGeogebraCommonKernelGeosGeoElement:self->inGeo_ withOrgGeogebraCommonKernelGeosGeoElement:self->outGeo_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedAlgoApplyMatrix)
