//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/advanced/AlgoIsInRegion.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Region.h"
#include "org/geogebra/common/kernel/advanced/AlgoIsInRegion.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonKernelAdvancedAlgoIsInRegion () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> pi_;
  id<OrgGeogebraCommonKernelRegion> region_;
  OrgGeogebraCommonKernelGeosGeoBoolean *result_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoIsInRegion, pi_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoIsInRegion, region_, id<OrgGeogebraCommonKernelRegion>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoIsInRegion, result_, OrgGeogebraCommonKernelGeosGeoBoolean *)

@implementation OrgGeogebraCommonKernelAdvancedAlgoIsInRegion

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)pi
                          withOrgGeogebraCommonKernelRegion:(id<OrgGeogebraCommonKernelRegion>)region {
  OrgGeogebraCommonKernelAdvancedAlgoIsInRegion_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelRegion_(self, c, label, pi, region);
  return self;
}

- (void)compute {
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(pi_)) updateCoords2D];
  [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(result_)) setValueWithBoolean:[((id<OrgGeogebraCommonKernelRegion>) nil_chk(region_)) isInRegionWithDouble:[pi_ getX2D] withDouble:[pi_ getY2D]]];
}

- (void)setInputOutput {
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:result_];
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(pi_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  (void) IOSObjectArray_Set(input_, 1, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(region_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoBoolean *)getResult {
  return result_;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_IsInRegion();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelRegion:", "AlgoIsInRegion", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pi_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "region_", NULL, 0x2, "Lorg.geogebra.common.kernel.Region;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedAlgoIsInRegion = { 2, "AlgoIsInRegion", "org.geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedAlgoIsInRegion;
}

@end

void OrgGeogebraCommonKernelAdvancedAlgoIsInRegion_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelRegion_(OrgGeogebraCommonKernelAdvancedAlgoIsInRegion *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> pi, id<OrgGeogebraCommonKernelRegion> region) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->pi_ = pi;
  self->region_ = region;
  self->result_ = new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAdvancedAlgoIsInRegion *new_OrgGeogebraCommonKernelAdvancedAlgoIsInRegion_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelRegion_(OrgGeogebraCommonKernelConstruction *c, NSString *label, id<OrgGeogebraCommonKernelKernelNDGeoPointND> pi, id<OrgGeogebraCommonKernelRegion> region) {
  OrgGeogebraCommonKernelAdvancedAlgoIsInRegion *self = [OrgGeogebraCommonKernelAdvancedAlgoIsInRegion alloc];
  OrgGeogebraCommonKernelAdvancedAlgoIsInRegion_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonKernelRegion_(self, c, label, pi, region);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedAlgoIsInRegion)
