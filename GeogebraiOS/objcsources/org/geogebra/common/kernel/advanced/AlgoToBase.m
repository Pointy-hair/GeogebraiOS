//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/advanced/AlgoToBase.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/math/BigInteger.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/advanced/AlgoToBase.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonKernelAdvancedAlgoToBase () {
 @public
  id<OrgGeogebraCommonKernelArithmeticNumberValue> base_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> number_;
  OrgGeogebraCommonKernelGeosGeoText *result_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoToBase, base_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoToBase, number_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoToBase, result_, OrgGeogebraCommonKernelGeosGeoText *)

@implementation OrgGeogebraCommonKernelAdvancedAlgoToBase

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)number
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)base {
  OrgGeogebraCommonKernelAdvancedAlgoToBase_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, c, label, number, base);
  return self;
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(number_)) toGeoElement], [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(base_)) toGeoElement] } count:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  [self setOnlyOutputWithOrgGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoText *)getResult {
  return result_;
}

- (void)compute {
  if (![((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(number_)) isDefined] || ![((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(base_)) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(result_)) setUndefined];
    return;
  }
  jint b = J2ObjCFpToInt([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(base_)) getDouble]);
  if (b < 2 || b > 36) {
    [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(result_)) setUndefined];
    return;
  }
  jint digits = ((jint) [((NSString *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:1.0 / 9.0 withOrgGeogebraCommonKernelStringTemplate:[((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(result_)) getStringTemplate]])) length]) - 2;
  jdouble power = JavaLangMath_roundWithDouble_(JavaLangMath_powWithDouble_withDouble_(b, digits));
  jdouble in = [number_ getDouble];
  in = in + 1 / power > JavaLangMath_ceilWithDouble_(in) ? JavaLangMath_ceilWithDouble_(in) : in;
  JavaMathBigInteger *bi = JavaMathBigInteger_valueOfWithLong_(J2ObjCFpToLong(in));
  NSString *intPart = OrgGeogebraCommonUtilStringUtil_toUpperCaseWithNSString_([((JavaMathBigInteger *) nil_chk(bi)) toStringWithInt:b]);
  if (OrgGeogebraCommonKernelKernel_isIntegerWithDouble_(in)) {
    [result_ setTextStringWithNSString:intPart];
  }
  else {
    jdouble decimal = JavaLangMath_roundWithDouble_(power * ([number_ getDouble] - JavaLangMath_floorWithDouble_([number_ getDouble])));
    bi = JavaMathBigInteger_valueOfWithLong_(J2ObjCFpToLong(decimal));
    NSString *decimalPart = OrgGeogebraCommonUtilStringUtil_toUpperCaseWithNSString_([((JavaMathBigInteger *) nil_chk(bi)) toStringWithInt:b]);
    JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(digits);
    (void) [sb appendWithNSString:intPart];
    (void) [sb appendWithChar:'.'];
    for (jint i = 0; i < digits - ((jint) [((NSString *) nil_chk(decimalPart)) length]); i++) {
      (void) [sb appendWithChar:'0'];
    }
    (void) [sb appendWithNSString:decimalPart];
    [result_ setTextStringWithNSString:[sb description]];
  }
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_ToBase();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoToBase", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "base_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "number_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedAlgoToBase = { 2, "AlgoToBase", "org.geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedAlgoToBase;
}

@end

void OrgGeogebraCommonKernelAdvancedAlgoToBase_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelAdvancedAlgoToBase *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, id<OrgGeogebraCommonKernelArithmeticNumberValue> number, id<OrgGeogebraCommonKernelArithmeticNumberValue> base) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->base_ = base;
  self->number_ = number;
  self->result_ = new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAdvancedAlgoToBase *new_OrgGeogebraCommonKernelAdvancedAlgoToBase_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelConstruction *c, NSString *label, id<OrgGeogebraCommonKernelArithmeticNumberValue> number, id<OrgGeogebraCommonKernelArithmeticNumberValue> base) {
  OrgGeogebraCommonKernelAdvancedAlgoToBase *self = [OrgGeogebraCommonKernelAdvancedAlgoToBase alloc];
  OrgGeogebraCommonKernelAdvancedAlgoToBase_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, c, label, number, base);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedAlgoToBase)
