//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/advanced/AlgoOrdinal.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/advanced/AlgoOrdinal.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/main/Localization.h"

@implementation OrgGeogebraCommonKernelAdvancedAlgoOrdinal

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)list {
  OrgGeogebraCommonKernelAdvancedAlgoOrdinal_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, list);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Ordinal();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, n_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:text_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoText *)getResult {
  return text_;
}

- (void)compute {
  if (![((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(n_)) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text_)) setTextStringWithNSString:@""];
    [text_ setUndefined];
    return;
  }
  jdouble num = [n_ getDouble];
  if (num < 0 || JavaLangDouble_isNaNWithDouble_(num) || JavaLangDouble_isInfiniteWithDouble_(num)) {
    [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text_)) setTextStringWithNSString:@""];
    [text_ setUndefined];
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text_)) setTextStringWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getOrdinalNumberWithInt:J2ObjCFpToInt(num)]];
}

- (void)dealloc {
  RELEASE_(n_);
  RELEASE_(text_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoNumeric:", "AlgoOrdinal", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "text_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedAlgoOrdinal = { 2, "AlgoOrdinal", "org.geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedAlgoOrdinal;
}

@end

void OrgGeogebraCommonKernelAdvancedAlgoOrdinal_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelAdvancedAlgoOrdinal *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoNumeric *list) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelAdvancedAlgoOrdinal_set_n_(self, list);
  OrgGeogebraCommonKernelAdvancedAlgoOrdinal_setAndConsume_text_(self, new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self->text_ setIsTextCommandWithBoolean:YES];
  [self setInputOutput];
  [self compute];
  [self->text_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAdvancedAlgoOrdinal *new_OrgGeogebraCommonKernelAdvancedAlgoOrdinal_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoNumeric *list) {
  OrgGeogebraCommonKernelAdvancedAlgoOrdinal *self = [OrgGeogebraCommonKernelAdvancedAlgoOrdinal alloc];
  OrgGeogebraCommonKernelAdvancedAlgoOrdinal_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, list);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedAlgoOrdinal)
