//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/advanced/AlgoCurvatureVectorCurve3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "org/geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/advanced/AlgoCurvatureVectorCurve3D.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/cas/AlgoDerivative.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> A_;
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *f_, *f1_, *f2_;
  OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *v_;
  IOSDoubleArray *f1eval_;
  IOSDoubleArray *f2eval_;
  OrgGeogebraCommonKernelCasAlgoDerivative *algoCAS_, *algoCAS2_;
  OrgGeogebraCommonKernelGeosGeoConic *gc_;
}

- (void)cas;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, A_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, f_, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, f1_, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, f2_, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, v_, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, f1eval_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, f2eval_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, algoCAS_, OrgGeogebraCommonKernelCasAlgoDerivative *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, algoCAS2_, OrgGeogebraCommonKernelCasAlgoDerivative *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, gc_, OrgGeogebraCommonKernelGeosGeoConic *)

__attribute__((unused)) static void OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_cas(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_compute(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self);

@implementation OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
      withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)arg
withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)arg2 {
  OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, cons, label, arg, arg2);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
              withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)A
withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:(OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)f {
  OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, cons, A, f);
  return self;
}

- (void)cas {
  OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_cas(self);
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_CurvatureVector();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(A_, [OrgGeogebraCommonKernelGeosGeoElement class]));
  if (gc_ != nil) {
    (void) IOSObjectArray_Set(input_, 1, gc_);
  }
  else {
    (void) IOSObjectArray_Set(input_, 1, f_);
  }
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:v_];
  [self setDependencies];
}

- (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *)getVector {
  return v_;
}

- (void)compute {
  OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_compute(self);
}

- (void)remove {
  if (removed_) return;
  [super remove];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(A_, [OrgGeogebraCommonKernelGeosGeoElement class])))) removeAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:algoCAS_];
  [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) nil_chk(f_)) removeAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:algoCAS_];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(A_, [OrgGeogebraCommonKernelGeosGeoElement class])))) removeAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:algoCAS2_];
  [f_ removeAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:algoCAS2_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:", "AlgoCurvatureVectorCurve3D", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:", "AlgoCurvatureVectorCurve3D", NULL, 0x0, NULL, NULL },
    { "cas", NULL, "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getVector", NULL, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoVector3D;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoCurveCartesian3D;", NULL, NULL,  },
    { "f1_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoCurveCartesian3D;", NULL, NULL,  },
    { "f2_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoCurveCartesian3D;", NULL, NULL,  },
    { "v_", NULL, 0x2, "Lorg.geogebra.common.geogebra3D.kernel3D.geos.GeoVector3D;", NULL, NULL,  },
    { "f1eval_", NULL, 0x2, "[D", NULL, NULL,  },
    { "f2eval_", NULL, 0x2, "[D", NULL, NULL,  },
    { "algoCAS_", NULL, 0x2, "Lorg.geogebra.common.kernel.cas.AlgoDerivative;", NULL, NULL,  },
    { "algoCAS2_", NULL, 0x2, "Lorg.geogebra.common.kernel.cas.AlgoDerivative;", NULL, NULL,  },
    { "gc_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D = { 2, "AlgoCurvatureVectorCurve3D", "org.geogebra.common.kernel.advanced", NULL, 0x1, 8, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D;
}

@end

void OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *arg, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *arg2) {
  (void) OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, cons, arg, arg2);
  if (label != nil) {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(self->v_)) setLabelWithNSString:label];
  }
  else {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(self->v_)) setLabelWithNSString:@"cv"];
  }
}

OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *new_OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *arg, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *arg2) {
  OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self = [OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D alloc];
  OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, cons, label, arg, arg2);
  return self;
}

void OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self, OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *f) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->f1eval_ = [IOSDoubleArray newArrayWithLength:3];
  self->f2eval_ = [IOSDoubleArray newArrayWithLength:3];
  self->A_ = A;
  self->f_ = f;
  self->v_ = new_OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithOrgGeogebraCommonKernelConstruction_(cons);
  @try {
    [self->v_ setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:A];
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
  }
  OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_cas(self);
  [self setInputOutput];
  OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_compute(self);
}

OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *new_OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(OrgGeogebraCommonKernelConstruction *cons, id<OrgGeogebraCommonKernelKernelNDGeoPointND> A, OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *f) {
  OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self = [OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D alloc];
  OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointND_withOrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, cons, A, f);
  return self;
}

void OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_cas(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self) {
  self->algoCAS_ = new_OrgGeogebraCommonKernelCasAlgoDerivative_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosCasEvaluableFunction_withBoolean_(self->cons_, self->f_, YES);
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self->algoCAS_];
  self->f1_ = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) check_class_cast([self->algoCAS_ getResult], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D class]);
  self->algoCAS2_ = new_OrgGeogebraCommonKernelCasAlgoDerivative_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosCasEvaluableFunction_withBoolean_(self->cons_, self->f1_, YES);
  [self->cons_ removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self->algoCAS2_];
  self->f2_ = (OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) check_class_cast([self->algoCAS2_ getResult], [OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D class]);
}

void OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_compute(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self) {
  @try {
    jdouble tvalue;
    tvalue = [self->f_ getClosestParameterWithOrgGeogebraCommonKernelKernelNDGeoPointND:self->A_ withDouble:[((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) nil_chk(self->f_)) getMinParameter]];
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) nil_chk(self->f1_)) evaluateCurveWithDouble:tvalue withDoubleArray:self->f1eval_];
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) nil_chk(self->f2_)) evaluateCurveWithDouble:tvalue withDoubleArray:self->f2eval_];
    IOSDoubleArray *w = [IOSDoubleArray newArrayWithLength:3];
    IOSDoubleArray *w2 = [IOSDoubleArray newArrayWithLength:3];
    IOSDoubleArray *w3 = [IOSDoubleArray newArrayWithLength:4];
    OrgGeogebraCommonKernelGeosGeoVec3D_crossWithDoubleArray_withDoubleArray_withDoubleArray_(self->f1eval_, self->f2eval_, w);
    OrgGeogebraCommonKernelGeosGeoVec3D_crossWithDoubleArray_withDoubleArray_withDoubleArray_(w, self->f1eval_, w2);
    jdouble d = JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(w2, 0) * IOSDoubleArray_Get(w2, 0) + IOSDoubleArray_Get(w2, 1) * IOSDoubleArray_Get(w2, 1) + IOSDoubleArray_Get(w2, 2) * IOSDoubleArray_Get(w2, 2));
    *IOSDoubleArray_GetRef(w2, 0) /= d;
    *IOSDoubleArray_GetRef(w2, 1) /= d;
    *IOSDoubleArray_GetRef(w2, 2) /= d;
    jdouble curvature = [self->f_ evaluateCurvatureWithDouble:tvalue];
    *IOSDoubleArray_GetRef(w3, 0) = IOSDoubleArray_Get(w2, 0) * curvature;
    *IOSDoubleArray_GetRef(w3, 1) = IOSDoubleArray_Get(w2, 1) * curvature;
    *IOSDoubleArray_GetRef(w3, 2) = IOSDoubleArray_Get(w2, 2) * curvature;
    *IOSDoubleArray_GetRef(w3, 3) = 0;
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(self->v_)) setCoordsWithDoubleArray:w3];
  }
  @catch (JavaLangException *e) {
    [((OrgGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(self->v_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D)
