//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/advanced/AlgoTaylorSeries.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/advanced/AlgoTaylorSeries.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/plugin/Operation.h"

#define OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries_MAX_ORDER 80

@interface OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries () {
 @public
  OrgGeogebraCommonKernelGeosGeoFunction *f_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> a_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> n_;
  OrgGeogebraCommonKernelGeosGeoFunction *g_;
  OrgGeogebraCommonKernelGeosGeoElement *ageo_, *ngeo_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries, f_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries, a_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries, n_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries, g_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries, ageo_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries, ngeo_, OrgGeogebraCommonKernelGeosGeoElement *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries, MAX_ORDER, jint)

__attribute__((unused)) static void OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries_compute(OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries *self);

@implementation OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)a
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)n {
  OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, f, a, n);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_TaylorSeries();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, f_);
  (void) IOSObjectArray_Set(input_, 1, ageo_);
  (void) IOSObjectArray_Set(input_, 2, ngeo_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getPolynomial {
  return g_;
}

- (void)compute {
  OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries_compute(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoTaylorSeries", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getPolynomial", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_ORDER_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries_MAX_ORDER },
    { "f_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "a_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "ageo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "ngeo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries = { 2, "AlgoTaylorSeries", "org.geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries;
}

@end

void OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> n) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->f_ = f;
  self->a_ = a;
  self->n_ = n;
  self->ageo_ = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(a)) toGeoElement];
  self->ngeo_ = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(n)) toGeoElement];
  self->g_ = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries_compute(self);
  [self->g_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries *new_OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoFunction *f, id<OrgGeogebraCommonKernelArithmeticNumberValue> a, id<OrgGeogebraCommonKernelArithmeticNumberValue> n) {
  OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries *self = [OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries alloc];
  OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelArithmeticNumberValue_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, f, a, n);
  return self;
}

void OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries_compute(OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries *self) {
  if (![((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) isDefined] || ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->ageo_)) isDefined] || ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->ngeo_)) isDefined]) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  jdouble nd = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->n_)) getDouble];
  if (nd < 0) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  else if (nd > OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries_MAX_ORDER) {
    nd = OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries_MAX_ORDER;
  }
  jint order = (jint) JavaLangMath_roundWithDouble_(nd);
  jdouble ad = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->a_)) getDouble];
  jdouble coeff = [self->f_ evaluateWithDouble:ad];
  if (JavaLangDouble_isNaNWithDouble_(coeff) || JavaLangDouble_isInfiniteWithDouble_(coeff)) {
    [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  OrgGeogebraCommonKernelArithmeticExpressionNode *series = nil;
  if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(coeff)) {
    series = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, coeff));
  }
  OrgGeogebraCommonKernelArithmeticFunctionVariable *fVar = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(self->kernel_);
  if (order > 0) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> diffExp;
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(ad)) {
      diffExp = fVar;
    }
    else if (ad > 0) {
      diffExp = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, fVar, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, ad));
    }
    else {
      diffExp = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, fVar, OrgGeogebraCommonPluginOperationEnum_get_PLUS(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, -ad));
    }
    for (jint k = 1; k <= order; k++) {
      OrgGeogebraCommonKernelArithmeticFunction *deriv = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self->f_ getFunction])) getDerivativeWithInt:k withBoolean:YES];
      if (deriv == nil) {
        [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
        return;
      }
      coeff = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(deriv)) evaluateWithDouble:ad];
      if (JavaLangDouble_isNaNWithDouble_(coeff) || JavaLangDouble_isInfiniteWithDouble_(coeff)) {
        [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
        return;
      }
      else if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(coeff)) continue;
      jboolean negativeCoeff = coeff < 0;
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> powerExp;
      switch (k) {
        case 1:
        powerExp = diffExp;
        break;
        default:
        powerExp = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, diffExp, OrgGeogebraCommonPluginOperationEnum_get_POWER(), new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, k)), OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, k), OrgGeogebraCommonPluginOperationEnum_get_FACTORIAL(), nil));
      }
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> partExp;
      OrgGeogebraCommonKernelArithmeticMyDouble *coeffMyDouble = nil;
      if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(coeff, 1.0)) {
        partExp = powerExp;
      }
      else {
        coeffMyDouble = new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, coeff);
        partExp = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, coeffMyDouble, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), powerExp);
      }
      if (series == nil) {
        series = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, partExp);
      }
      else {
        if (negativeCoeff) {
          if (coeffMyDouble != nil) [coeffMyDouble setWithDouble:-coeff];
          series = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, series, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), partExp);
        }
        else {
          series = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, series, OrgGeogebraCommonPluginOperationEnum_get_PLUS(), partExp);
        }
      }
    }
  }
  if (series == nil) {
    series = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0));
  }
  OrgGeogebraCommonKernelArithmeticFunction *seriesFun = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(series, fVar);
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:seriesFun];
  [self->g_ setDefinedWithBoolean:YES];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelAdvancedAlgoTaylorSeries)
