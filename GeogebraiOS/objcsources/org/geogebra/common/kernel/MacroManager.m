//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/MacroManager.java
//


#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Macro.h"
#include "org/geogebra/common/kernel/MacroManager.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonKernelMacroManager () {
 @public
  JavaUtilHashMap *macroMap_;
  JavaUtilArrayList *macroList_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacroManager, macroMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelMacroManager, macroList_, JavaUtilArrayList *)

@implementation OrgGeogebraCommonKernelMacroManager

- (instancetype)initWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonKernelMacroManager_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

- (void)addMacroWithOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)macro {
  [((JavaUtilHashMap *) nil_chk(macroMap_)) putWithId:OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([((OrgGeogebraCommonKernelMacro *) nil_chk(macro)) getCommandName]) withId:macro];
  [((JavaUtilArrayList *) nil_chk(macroList_)) addWithId:macro];
}

- (OrgGeogebraCommonKernelMacro *)getMacroWithNSString:(NSString *)name {
  return [((JavaUtilHashMap *) nil_chk(macroMap_)) getWithId:OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(name)];
}

- (void)removeMacroWithOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)macro {
  [((JavaUtilHashMap *) nil_chk(macroMap_)) removeWithId:OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([((OrgGeogebraCommonKernelMacro *) nil_chk(macro)) getCommandName])];
  [((JavaUtilArrayList *) nil_chk(macroList_)) removeWithId:macro];
}

- (void)removeAllMacros {
  [((JavaUtilHashMap *) nil_chk(macroMap_)) clear];
  [((JavaUtilArrayList *) nil_chk(macroList_)) clear];
}

- (void)setMacroCommandNameWithOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)macro
                                               withNSString:(NSString *)cmdName {
  [((JavaUtilHashMap *) nil_chk(macroMap_)) removeWithId:OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([((OrgGeogebraCommonKernelMacro *) nil_chk(macro)) getCommandName])];
  [macro setCommandNameWithNSString:cmdName];
  [macroMap_ putWithId:OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([macro getCommandName]) withId:macro];
}

- (OrgGeogebraCommonKernelMacro *)getMacroWithInt:(jint)i {
  return [((JavaUtilArrayList *) nil_chk(macroList_)) getWithInt:i];
}

- (jint)getMacroIDWithOrgGeogebraCommonKernelMacro:(OrgGeogebraCommonKernelMacro *)macro {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(macroList_)) size]; i++) {
    if (macro == [macroList_ getWithInt:i]) return i;
  }
  return -1;
}

- (void)setAllMacrosUnused {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(macroList_)) size]; i++) {
    [((OrgGeogebraCommonKernelMacro *) nil_chk([macroList_ getWithInt:i])) setUnused];
  }
}

- (jint)getMacroNumber {
  return [((JavaUtilArrayList *) nil_chk(macroList_)) size];
}

- (JavaUtilArrayList *)getAllMacros {
  return macroList_;
}

- (void)notifyEuclidianViewCE {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(macroList_)) size]; i++) {
    OrgGeogebraCommonKernelMacro *macro = [macroList_ getWithInt:i];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelMacro *) nil_chk(macro)) getMacroConstruction])) notifyEuclidianViewCEWithBoolean:NO];
  }
}

+ (NSString *)getMacroXMLWithJavaUtilArrayList:(JavaUtilArrayList *)macros {
  return OrgGeogebraCommonKernelMacroManager_getMacroXMLWithJavaUtilArrayList_(macros);
}

- (void)dealloc {
  RELEASE_(macroMap_);
  RELEASE_(macroList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonMainApp:", "MacroManager", NULL, 0x1, NULL, NULL },
    { "addMacroWithOrgGeogebraCommonKernelMacro:", "addMacro", "V", 0x1, NULL, NULL },
    { "getMacroWithNSString:", "getMacro", "Lorg.geogebra.common.kernel.Macro;", 0x1, NULL, NULL },
    { "removeMacroWithOrgGeogebraCommonKernelMacro:", "removeMacro", "V", 0x1, NULL, NULL },
    { "removeAllMacros", NULL, "V", 0x1, NULL, NULL },
    { "setMacroCommandNameWithOrgGeogebraCommonKernelMacro:withNSString:", "setMacroCommandName", "V", 0x1, NULL, NULL },
    { "getMacroWithInt:", "getMacro", "Lorg.geogebra.common.kernel.Macro;", 0x1, NULL, NULL },
    { "getMacroIDWithOrgGeogebraCommonKernelMacro:", "getMacroID", "I", 0x1, NULL, NULL },
    { "setAllMacrosUnused", NULL, "V", 0x1, NULL, NULL },
    { "getMacroNumber", NULL, "I", 0x1, NULL, NULL },
    { "getAllMacros", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "notifyEuclidianViewCE", NULL, "V", 0x11, NULL, NULL },
    { "getMacroXMLWithJavaUtilArrayList:", "getMacroXML", "Ljava.lang.String;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "macroMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Lorg/geogebra/common/kernel/Macro;>;",  },
    { "macroList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/Macro;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelMacroManager = { 2, "MacroManager", "org.geogebra.common.kernel", NULL, 0x1, 13, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelMacroManager;
}

@end

void OrgGeogebraCommonKernelMacroManager_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonKernelMacroManager *self, OrgGeogebraCommonMainApp *app) {
  NSObject_init(self);
  OrgGeogebraCommonKernelMacroManager_setAndConsume_macroMap_(self, new_JavaUtilHashMap_init());
  OrgGeogebraCommonKernelMacroManager_setAndConsume_macroList_(self, new_JavaUtilArrayList_init());
}

OrgGeogebraCommonKernelMacroManager *new_OrgGeogebraCommonKernelMacroManager_initWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonKernelMacroManager *self = [OrgGeogebraCommonKernelMacroManager alloc];
  OrgGeogebraCommonKernelMacroManager_initWithOrgGeogebraCommonMainApp_(self, app);
  return self;
}

NSString *OrgGeogebraCommonKernelMacroManager_getMacroXMLWithJavaUtilArrayList_(JavaUtilArrayList *macros) {
  OrgGeogebraCommonKernelMacroManager_initialize();
  if (macros == nil) return @"";
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(macros)) size]; i++) {
    [((OrgGeogebraCommonKernelMacro *) nil_chk([macros getWithInt:i])) getXMLWithJavaLangStringBuilder:sb];
  }
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelMacroManager)
