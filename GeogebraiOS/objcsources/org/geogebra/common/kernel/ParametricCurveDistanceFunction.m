//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/ParametricCurveDistanceFunction.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/ParametricCurveDistanceFunction.h"
#include "org/geogebra/common/kernel/geos/ParametricCurve.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/roots/RealRootFunction.h"

@interface OrgGeogebraCommonKernelParametricCurveDistanceFunction () {
 @public
  jdouble px_, py_;
  id<OrgGeogebraCommonKernelRootsRealRootFunction> funX_, funY_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelParametricCurveDistanceFunction, funX_, id<OrgGeogebraCommonKernelRootsRealRootFunction>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelParametricCurveDistanceFunction, funY_, id<OrgGeogebraCommonKernelRootsRealRootFunction>)

@implementation OrgGeogebraCommonKernelParametricCurveDistanceFunction

- (instancetype)initWithOrgGeogebraCommonKernelGeosParametricCurve:(id<OrgGeogebraCommonKernelGeosParametricCurve>)curve {
  OrgGeogebraCommonKernelParametricCurveDistanceFunction_initWithOrgGeogebraCommonKernelGeosParametricCurve_(self, curve);
  return self;
}

- (jdouble)evaluateWithDouble:(jdouble)t {
  jdouble dx = [((id<OrgGeogebraCommonKernelRootsRealRootFunction>) nil_chk(funX_)) evaluateWithDouble:t] - px_;
  jdouble dy = [((id<OrgGeogebraCommonKernelRootsRealRootFunction>) nil_chk(funY_)) evaluateWithDouble:t] - py_;
  return dx * dx + dy * dy;
}

- (void)setDistantPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD2];
  px_ = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] / [coords getZ];
  py_ = [coords getY] / [coords getZ];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelGeosParametricCurve:", "ParametricCurveDistanceFunction", NULL, 0x1, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "setDistantPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "setDistantPoint", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "px_", NULL, 0x2, "D", NULL, NULL,  },
    { "py_", NULL, 0x2, "D", NULL, NULL,  },
    { "funX_", NULL, 0x2, "Lorg.geogebra.common.kernel.roots.RealRootFunction;", NULL, NULL,  },
    { "funY_", NULL, 0x2, "Lorg.geogebra.common.kernel.roots.RealRootFunction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelParametricCurveDistanceFunction = { 2, "ParametricCurveDistanceFunction", "org.geogebra.common.kernel", NULL, 0x1, 3, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelParametricCurveDistanceFunction;
}

@end

void OrgGeogebraCommonKernelParametricCurveDistanceFunction_initWithOrgGeogebraCommonKernelGeosParametricCurve_(OrgGeogebraCommonKernelParametricCurveDistanceFunction *self, id<OrgGeogebraCommonKernelGeosParametricCurve> curve) {
  (void) NSObject_init(self);
  self->funX_ = [((id<OrgGeogebraCommonKernelGeosParametricCurve>) nil_chk(curve)) getRealRootFunctionX];
  self->funY_ = [curve getRealRootFunctionY];
}

OrgGeogebraCommonKernelParametricCurveDistanceFunction *new_OrgGeogebraCommonKernelParametricCurveDistanceFunction_initWithOrgGeogebraCommonKernelGeosParametricCurve_(id<OrgGeogebraCommonKernelGeosParametricCurve> curve) {
  OrgGeogebraCommonKernelParametricCurveDistanceFunction *self = [OrgGeogebraCommonKernelParametricCurveDistanceFunction alloc];
  OrgGeogebraCommonKernelParametricCurveDistanceFunction_initWithOrgGeogebraCommonKernelGeosParametricCurve_(self, curve);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelParametricCurveDistanceFunction)
