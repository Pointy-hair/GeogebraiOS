//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/discrete/AlgoMinimumSpanningTree.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Map.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/MyPoint.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/discrete/AlgoHull.h"
#include "org/geogebra/common/kernel/discrete/AlgoMinimumSpanningTree.h"
#include "org/geogebra/common/kernel/discrete/alds/al/graphs/PrimMinimumSpanningTree.h"
#include "org/geogebra/common/kernel/discrete/alds/ds/graphs/Graph.h"
#include "org/geogebra/common/kernel/discrete/alds/ds/graphs/Vertex.h"
#include "org/geogebra/common/kernel/discrete/alds/ds/graphs/WeightedGraph.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoLocus.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation OrgGeogebraCommonKernelDiscreteAlgoMinimumSpanningTree

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)inputList {
  OrgGeogebraCommonKernelDiscreteAlgoMinimumSpanningTree_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_MinimumSpanningTree();
}

- (void)compute {
  size_ = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(inputList_)) size];
  if (![inputList_ isDefined] || size_ == 0) {
    [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) setUndefined];
    return;
  }
  OrgGeogebraCommonKernelDiscreteAldsDsGraphsWeightedGraph *weightedGraph = [new_OrgGeogebraCommonKernelDiscreteAldsDsGraphsWeightedGraph_initWithOrgGeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_(OrgGeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_get_UNDIRECTED()) autorelease];
  IOSObjectArray *vertices = [IOSObjectArray arrayWithLength:size_ type:OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex_class_()];
  for (jint i = 0; i < size_; i++) {
    IOSObjectArray_SetAndConsume(vertices, i, new_OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex_initWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_(JreStrcat("I", i), (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([inputList_ getWithInt:i], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))));
  }
  jdouble maxDistance = 0;
  for (jint i = 0; i < size_ - 1; i++) {
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> p1 = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([inputList_ getWithInt:i], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
    for (jint j = i + 1; j < size_; j++) {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> p2 = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([inputList_ getWithInt:j], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
      maxDistance = JavaLangMath_maxWithDouble_withDouble_(maxDistance, [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:p2]);
    }
  }
  jdouble max = JavaLangInteger_MAX_VALUE;
  jdouble FACTOR = max / maxDistance;
  for (jint i = 0; i < size_ - 1; i++) {
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> p1 = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([inputList_ getWithInt:i], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
    for (jint j = i + 1; j < size_; j++) {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> p2 = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([inputList_ getWithInt:j], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
      [weightedGraph addEdgeWithOrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex:IOSObjectArray_Get(vertices, i) withOrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex:IOSObjectArray_Get(vertices, j) withInt:J2ObjCFpToInt((FACTOR * [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:p2]))];
    }
  }
  OrgGeogebraCommonKernelDiscreteAldsAlGraphsPrimMinimumSpanningTree *minimumSpanningTree = [new_OrgGeogebraCommonKernelDiscreteAldsAlGraphsPrimMinimumSpanningTree_initWithOrgGeogebraCommonKernelDiscreteAldsDsGraphsWeightedGraph_withOrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(weightedGraph, IOSObjectArray_Get(vertices, 0)) autorelease];
  id<JavaUtilMap> predecessor = [((OrgGeogebraCommonKernelDiscreteAldsAlGraphsPrimMinimumSpanningTree *) nil_chk([minimumSpanningTree compute])) getPredecessorMap];
  OrgGeogebraCommonKernelMatrixCoords *coords;
  if (al_ == nil) OrgGeogebraCommonKernelDiscreteAlgoHull_setAndConsume_al_(self, new_JavaUtilArrayList_init());
  else [al_ clear];
  for (jint i = 0; i < size_; i++) {
    OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex *connectedVertex = [((id<JavaUtilMap>) nil_chk(predecessor)) getWithId:IOSObjectArray_Get(vertices, i)];
    if (connectedVertex != nil) {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> point1 = [((OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex *) nil_chk(IOSObjectArray_Get(vertices, i))) getPoint];
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> point2 = [connectedVertex getPoint];
      coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point1)) getInhomCoordsInD2];
      [((JavaUtilArrayList *) nil_chk(al_)) addWithId:[new_OrgGeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getWithInt:1], [coords getWithInt:2], NO) autorelease]];
      coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point2)) getInhomCoordsInD2];
      [al_ addWithId:[new_OrgGeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getWithInt:1], [coords getWithInt:2], YES) autorelease]];
    }
  }
  [((OrgGeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) setPointsWithJavaUtilArrayList:al_];
  [locus_ setDefinedWithBoolean:YES];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoList:", "AlgoMinimumSpanningTree", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelDiscreteAlgoMinimumSpanningTree = { 2, "AlgoMinimumSpanningTree", "org.geogebra.common.kernel.discrete", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelDiscreteAlgoMinimumSpanningTree;
}

@end

void OrgGeogebraCommonKernelDiscreteAlgoMinimumSpanningTree_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelDiscreteAlgoMinimumSpanningTree *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgGeogebraCommonKernelDiscreteAlgoHull_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_withOrgGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputList, nil);
}

OrgGeogebraCommonKernelDiscreteAlgoMinimumSpanningTree *new_OrgGeogebraCommonKernelDiscreteAlgoMinimumSpanningTree_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoList *inputList) {
  OrgGeogebraCommonKernelDiscreteAlgoMinimumSpanningTree *self = [OrgGeogebraCommonKernelDiscreteAlgoMinimumSpanningTree alloc];
  OrgGeogebraCommonKernelDiscreteAlgoMinimumSpanningTree_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelDiscreteAlgoMinimumSpanningTree)
