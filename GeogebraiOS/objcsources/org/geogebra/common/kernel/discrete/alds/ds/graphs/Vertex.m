//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/discrete/alds/ds/graphs/Vertex.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/discrete/alds/ds/graphs/Vertex.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex () {
 @public
  NSString *name_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> point_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex, name_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex, point_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)

@implementation OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex

- (instancetype)initWithNSString:(NSString *)name
withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex_initWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, name, point);
  return self;
}

- (NSString *)getName {
  return name_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getPoint {
  return point_;
}

- (NSString *)description {
  return name_;
}

- (jboolean)isEqual:(id)obj {
  if (!([obj isKindOfClass:[OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex class]])) {
    return NO;
  }
  OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex *other = (OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex *) check_class_cast(obj, [OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex class]);
  return ([((NSString *) nil_chk(self->name_)) isEqual:((OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex *) nil_chk(other))->name_]);
}

- (NSUInteger)hash {
  jint result = 19;
  if (name_ != nil) {
    result = 31 + ((jint) [name_ hash]);
  }
  return result;
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(point_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "Vertex", NULL, 0x1, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "point_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex = { 2, "Vertex", "org.geogebra.common.kernel.discrete.alds.ds.graphs", NULL, 0x11, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex;
}

@end

void OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex_initWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex *self, NSString *name, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point) {
  NSObject_init(self);
  OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex_set_name_(self, name);
  OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex_set_point_(self, point);
}

OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex *new_OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex_initWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_(NSString *name, id<OrgGeogebraCommonKernelKernelNDGeoPointND> point) {
  OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex *self = [OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex alloc];
  OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex_initWithNSString_withOrgGeogebraCommonKernelKernelNDGeoPointND_(self, name, point);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelDiscreteAldsDsGraphsVertex)
