//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/discrete/signalprocessor/voronoi/representation/triangulation/SharedMinimumSpanningTree.java
//


#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/TreeMap.h"
#include "org/geogebra/common/kernel/discrete/signalprocessor/voronoi/representation/triangulation/SharedMinimumSpanningTree.h"
#include "org/geogebra/common/kernel/discrete/signalprocessor/voronoi/representation/triangulation/VCluster.h"
#include "org/geogebra/common/kernel/discrete/signalprocessor/voronoi/representation/triangulation/VHalfEdge2.h"
#include "org/geogebra/common/kernel/discrete/signalprocessor/voronoi/representation/triangulation/VVertex2.h"

@interface OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree ()

+ (jint)determineClusterCutOffByGradientWithJavaUtilTreeMap:(JavaUtilTreeMap *)sortedvalues
                                                    withInt:(jint)gradient_error_allowed;

@end

static id<JavaUtilComparator> OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VERTEX_COMPARATOR_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree, VERTEX_COMPARATOR_, id<JavaUtilComparator>)

static id<JavaUtilComparator> OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_PATH_COMPARATOR_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree, PATH_COMPARATOR_, id<JavaUtilComparator>)

__attribute__((unused)) static jint OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_determineClusterCutOffByGradientWithJavaUtilTreeMap_withInt_(JavaUtilTreeMap *sortedvalues, jint gradient_error_allowed);

#define OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList_serialVersionUID 1LL

@interface OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList : JavaUtilTreeMap

- (instancetype)init;

- (jboolean)hasVertexBeenConsideredWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *)vertex;

- (void)addVertexWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *)vertex;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList, serialVersionUID, jlong)

__attribute__((unused)) static void OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList_init(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList *self);

__attribute__((unused)) static OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList *new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList)

#define OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList_serialVersionUID 1LL

@interface OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList : JavaUtilTreeMap

- (instancetype)init;

- (OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *)popBestNextPath;

- (void)addPathWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *)path;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList, serialVersionUID, jlong)

__attribute__((unused)) static void OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList_init(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList *self);

__attribute__((unused)) static OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList *new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList)

@interface OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *)v1
               withId:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *)v2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1)

__attribute__((unused)) static void OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1_init(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1 *self);

__attribute__((unused)) static OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1 *new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1)

@interface OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *)e1
               withId:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *)e2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2)

__attribute__((unused)) static void OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2_init(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2 *self);

__attribute__((unused)) static OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2 *new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree)

@implementation OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree

+ (jint)determineMSTUsingPrimsAlgorithmWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *)startingvertex {
  return OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_determineMSTUsingPrimsAlgorithmWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2_(startingvertex);
}

+ (jint)determineMSTUsingPrimsAlgorithmWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *)startingvertex
                                                                                                                         withDouble:(jdouble)gradient_diff_before_cluster_cutoff
                                                                                                              withJavaUtilArrayList:(JavaUtilArrayList *)clusters {
  return OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_determineMSTUsingPrimsAlgorithmWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2_withDouble_withJavaUtilArrayList_(startingvertex, gradient_diff_before_cluster_cutoff, clusters);
}

+ (jint)determineClusterCutOffByGradientWithJavaUtilTreeMap:(JavaUtilTreeMap *)sortedvalues
                                                    withInt:(jint)gradient_error_allowed {
  return OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_determineClusterCutOffByGradientWithJavaUtilTreeMap_withInt_(sortedvalues, gradient_error_allowed);
}

- (instancetype)init {
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_init(self);
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree class]) {
    OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VERTEX_COMPARATOR_ = new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1_init();
    OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_PATH_COMPARATOR_ = new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2_init();
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "determineMSTUsingPrimsAlgorithmWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:", "determineMSTUsingPrimsAlgorithm", "I", 0x9, NULL, NULL },
    { "determineMSTUsingPrimsAlgorithmWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:withDouble:withJavaUtilArrayList:", "determineMSTUsingPrimsAlgorithm", "I", 0x9, NULL, NULL },
    { "determineClusterCutOffByGradientWithJavaUtilTreeMap:withInt:", "determineClusterCutOffByGradient", "I", 0xa, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "VERTEX_COMPARATOR_", NULL, 0x1a, "Ljava.util.Comparator;", &OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VERTEX_COMPARATOR_, "Ljava/util/Comparator<Lorg/geogebra/common/kernel/discrete/signalprocessor/voronoi/representation/triangulation/VVertex2;>;",  },
    { "PATH_COMPARATOR_", NULL, 0x1a, "Ljava.util.Comparator;", &OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_PATH_COMPARATOR_, "Ljava/util/Comparator<Lorg/geogebra/common/kernel/discrete/signalprocessor/voronoi/representation/triangulation/VHalfEdge2;>;",  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.discrete.signalprocessor.voronoi.representation.triangulation.SharedMinimumSpanningTree$VertexList;", "Lorg.geogebra.common.kernel.discrete.signalprocessor.voronoi.representation.triangulation.SharedMinimumSpanningTree$FuturePathList;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree = { 2, "SharedMinimumSpanningTree", "org.geogebra.common.kernel.discrete.signalprocessor.voronoi.representation.triangulation", NULL, 0x1, 4, methods, 2, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree;
}

@end

jint OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_determineMSTUsingPrimsAlgorithmWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2_(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *startingvertex) {
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_initialize();
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList *vertexes = new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList_init();
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList *futurepaths = new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList_init();
  jint maxpathofminimumspanningtree = -1;
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *minimum = startingvertex;
  do {
    [vertexes addVertexWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:minimum];
    id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([futurepaths values])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *path = [iter next];
      if ([((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *) nil_chk(path)) getConnectedVertex] == minimum) {
        [iter remove];
      }
    }
    for (OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 * __strong path in nil_chk([((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *) nil_chk(minimum)) getEdges])) {
      if ([vertexes hasVertexBeenConsideredWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:[((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *) nil_chk(path)) getConnectedVertex]]) {
        continue;
      }
      [futurepaths addPathWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2:path];
    }
    if ([futurepaths size] <= 0) {
      return maxpathofminimumspanningtree;
    }
    OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *nextbestpath = [futurepaths popBestNextPath];
    ((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *) nil_chk(nextbestpath))->shownonminimumspanningtree_ = YES;
    if ([nextbestpath getLength] > maxpathofminimumspanningtree) {
      maxpathofminimumspanningtree = [nextbestpath getLength];
    }
    minimum = [nextbestpath getConnectedVertex];
  }
  while (YES);
}

jint OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_determineMSTUsingPrimsAlgorithmWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2_withDouble_withJavaUtilArrayList_(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *startingvertex, jdouble gradient_diff_before_cluster_cutoff, JavaUtilArrayList *clusters) {
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_initialize();
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList *vertexes = new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList_init();
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList *futurepaths = new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList_init();
  JavaUtilTreeMap *lengths = new_JavaUtilTreeMap_init();
  jint maxpathofminimumspanningtree = -1;
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *minimum = startingvertex;
  do {
    [vertexes addVertexWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:minimum];
    id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([futurepaths values])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *path = [iter next];
      if ([((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *) nil_chk(path)) getConnectedVertex] == minimum) {
        [iter remove];
      }
    }
    for (OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 * __strong path in nil_chk([((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *) nil_chk(minimum)) getEdges])) {
      if ([vertexes hasVertexBeenConsideredWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:[((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *) nil_chk(path)) getConnectedVertex]]) {
        continue;
      }
      [futurepaths addPathWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2:path];
    }
    if ([futurepaths size] <= 0) break;
    OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *nextbestpath = [futurepaths popBestNextPath];
    if ([((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *) nil_chk(nextbestpath)) getLength] > maxpathofminimumspanningtree) {
      maxpathofminimumspanningtree = [nextbestpath getLength];
    }
    JavaLangInteger *length = new_JavaLangInteger_initWithInt_([nextbestpath getLength]);
    (void) [lengths putWithId:length withId:length];
    minimum = [nextbestpath getConnectedVertex];
  }
  while (YES);
  jint clustercutoff = OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_determineClusterCutOffByGradientWithJavaUtilTreeMap_withInt_(lengths, 5);
  [vertexes clear];
  [futurepaths clear];
  minimum = startingvertex;
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVCluster *currentcluster = new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVCluster_init();
  [((JavaUtilArrayList *) nil_chk(clusters)) addWithId:currentcluster];
  do {
    [currentcluster addWithId:minimum];
    [vertexes addVertexWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:minimum];
    id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([futurepaths values])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *path = [iter next];
      if ([((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *) nil_chk(path)) getConnectedVertex] == minimum) {
        [iter remove];
      }
    }
    for (OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 * __strong path in nil_chk([((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *) nil_chk(minimum)) getEdges])) {
      if ([vertexes hasVertexBeenConsideredWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:[((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *) nil_chk(path)) getConnectedVertex]]) {
        continue;
      }
      [futurepaths addPathWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2:path];
    }
    if ([futurepaths size] <= 0) break;
    OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *nextbestpath = [futurepaths popBestNextPath];
    if ([((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *) nil_chk(nextbestpath)) getLength] <= clustercutoff) {
      nextbestpath->shownonminimumspanningtree_ = YES;
    }
    else {
      currentcluster = new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVCluster_init();
      [clusters addWithId:currentcluster];
    }
    minimum = [nextbestpath getConnectedVertex];
  }
  while (YES);
  return maxpathofminimumspanningtree;
}

jint OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_determineClusterCutOffByGradientWithJavaUtilTreeMap_withInt_(JavaUtilTreeMap *sortedvalues, jint gradient_error_allowed) {
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_initialize();
  id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk([((JavaUtilTreeMap *) nil_chk(sortedvalues)) values])) iterator];
  jint prev, curr;
  jint prevgrad, currgrad;
  if (!([((id<JavaUtilIterator>) nil_chk(iter)) hasNext])) return -1;
  prev = [((JavaLangInteger *) nil_chk([iter next])) intValue];
  if (!([iter hasNext])) return prev;
  curr = [((JavaLangInteger *) nil_chk([iter next])) intValue];
  currgrad = curr - prev;
  jint index = 1;
  jint valuesonline = 2;
  jint best_valuesonline = -1;
  jint best_cutoff = -1;
  while ([iter hasNext]) {
    index++;
    prev = curr;
    prevgrad = currgrad;
    curr = [((JavaLangInteger *) nil_chk([iter next])) intValue];
    currgrad = curr - prev;
    if (prevgrad - gradient_error_allowed <= currgrad && currgrad <= prevgrad + gradient_error_allowed) {
      valuesonline++;
    }
    else {
      if (valuesonline >= ([sortedvalues size] - index - 1)) {
        return prev;
      }
      if (valuesonline > best_valuesonline) {
        best_valuesonline = valuesonline;
        best_cutoff = prev;
      }
      else {
      }
      valuesonline = 2;
    }
  }
  if (valuesonline > best_valuesonline) {
    best_cutoff = prev;
  }
  return best_cutoff;
}

void OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_init(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree *new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_init() {
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree *self = [OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree alloc];
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree)

@implementation OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList

- (instancetype)init {
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList_init(self);
  return self;
}

- (jboolean)hasVertexBeenConsideredWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *)vertex {
  return ([super getWithId:vertex] != nil);
}

- (void)addVertexWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *)vertex {
  (void) [super putWithId:vertex withId:vertex];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "VertexList", NULL, 0x2, NULL, NULL },
    { "hasVertexBeenConsideredWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:", "hasVertexBeenConsidered", "Z", 0x1, NULL, NULL },
    { "addVertexWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2:", "addVertex", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList_serialVersionUID },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.discrete.signalprocessor.voronoi.representation.triangulation.VVertex2;", "Lorg.geogebra.common.kernel.discrete.signalprocessor.voronoi.representation.triangulation.VVertex2;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList = { 2, "VertexList", "org.geogebra.common.kernel.discrete.signalprocessor.voronoi.representation.triangulation", "SharedMinimumSpanningTree", 0xa, 3, methods, 1, fields, 2, superclass_type_args, 0, NULL, NULL, "Ljava/util/TreeMap<Lorg/geogebra/common/kernel/discrete/signalprocessor/voronoi/representation/triangulation/VVertex2;Lorg/geogebra/common/kernel/discrete/signalprocessor/voronoi/representation/triangulation/VVertex2;>;" };
  return &_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList;
}

@end

void OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList_init(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList *self) {
  (void) JavaUtilTreeMap_initWithJavaUtilComparator_(self, OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_get_VERTEX_COMPARATOR_());
}

OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList *new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList_init() {
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList *self = [OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList alloc];
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_VertexList)

@implementation OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList

- (instancetype)init {
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList_init(self);
  return self;
}

- (OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *)popBestNextPath {
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *next = [super firstKey];
  (void) [super removeWithId:next];
  return next;
}

- (void)addPathWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *)path {
  (void) [super putWithId:path withId:path];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "FuturePathList", NULL, 0x2, NULL, NULL },
    { "popBestNextPath", NULL, "Lorg.geogebra.common.kernel.discrete.signalprocessor.voronoi.representation.triangulation.VHalfEdge2;", 0x1, NULL, NULL },
    { "addPathWithOrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2:", "addPath", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList_serialVersionUID },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.discrete.signalprocessor.voronoi.representation.triangulation.VHalfEdge2;", "Lorg.geogebra.common.kernel.discrete.signalprocessor.voronoi.representation.triangulation.VHalfEdge2;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList = { 2, "FuturePathList", "org.geogebra.common.kernel.discrete.signalprocessor.voronoi.representation.triangulation", "SharedMinimumSpanningTree", 0xa, 3, methods, 1, fields, 2, superclass_type_args, 0, NULL, NULL, "Ljava/util/TreeMap<Lorg/geogebra/common/kernel/discrete/signalprocessor/voronoi/representation/triangulation/VHalfEdge2;Lorg/geogebra/common/kernel/discrete/signalprocessor/voronoi/representation/triangulation/VHalfEdge2;>;" };
  return &_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList;
}

@end

void OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList_init(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList *self) {
  (void) JavaUtilTreeMap_initWithJavaUtilComparator_(self, OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_get_PATH_COMPARATOR_());
}

OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList *new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList_init() {
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList *self = [OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList alloc];
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_FuturePathList)

@implementation OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1

- (jint)compareWithId:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *)v1
               withId:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *)v2 {
  if (((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *) nil_chk(v1))->y_ < ((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVVertex2 *) nil_chk(v2))->y_) return -1;
  else if (v1->y_ > v2->y_) return 1;
  else if (v1->x_ < v2->x_) return -1;
  else if (v1->x_ > v2->x_) return 1;
  else if (v1 == v2) return 0;
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$@", @"No basis for comparing two apparently identical vertexes - ", v1, @" and ", v2));
  }
}

- (instancetype)init {
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1 = { 2, "", "org.geogebra.common.kernel.discrete.signalprocessor.voronoi.representation.triangulation", "SharedMinimumSpanningTree", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Lorg/geogebra/common/kernel/discrete/signalprocessor/voronoi/representation/triangulation/VVertex2;>;" };
  return &_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1;
}

@end

void OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1_init(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1 *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1 *new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1_init() {
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1 *self = [OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1 alloc];
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$1)

@implementation OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2

- (jint)compareWithId:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *)e1
               withId:(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *)e2 {
  if ([((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *) nil_chk(e1)) getLength] < [((OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationVHalfEdge2 *) nil_chk(e2)) getLength]) return -1;
  else if ([e1 getLength] > [e2 getLength]) return 1;
  else {
    if ([e1 getY] < [e2 getY]) return -1;
    else if ([e1 getY] > [e2 getY]) return 1;
    else if ([e1 getX] < [e2 getX]) return -1;
    else if ([e1 getX] > [e2 getX]) return 1;
    else if (e1 == e2) return 0;
    else {
      if (e1->next_ != nil && e2->next_ != nil) {
        if ([e1->next_ getY] < [e2->next_ getY]) return -1;
        else if ([e1->next_ getY] > [e2->next_ getY]) return 1;
        else if ([e1->next_ getX] < [e2->next_ getX]) return -1;
        else if ([e1->next_ getX] > [e2->next_ getX]) return 1;
        else {
          @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$@", @"No basis for comparing two apparently identical vectors - ", e1, @" and ", e2));
        }
      }
      else if (e1->next_ == nil) {
        return -1;
      }
      else if (e2->next_ == nil) {
        return 1;
      }
      else {
        @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$@", @"No basis for comparing two apparently identical vectors - ", e1, @" and ", e2));
      }
    }
  }
}

- (instancetype)init {
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2 = { 2, "", "org.geogebra.common.kernel.discrete.signalprocessor.voronoi.representation.triangulation", "SharedMinimumSpanningTree", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Lorg/geogebra/common/kernel/discrete/signalprocessor/voronoi/representation/triangulation/VHalfEdge2;>;" };
  return &_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2;
}

@end

void OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2_init(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2 *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2 *new_OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2_init() {
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2 *self = [OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2 alloc];
  OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelDiscreteSignalprocessorVoronoiRepresentationTriangulationSharedMinimumSpanningTree_$2)
