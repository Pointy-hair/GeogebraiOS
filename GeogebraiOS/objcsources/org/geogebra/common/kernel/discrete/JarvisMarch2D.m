//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/discrete/JarvisMarch2D.java
//


#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "org/geogebra/common/awt/GPoint2D.h"
#include "org/geogebra/common/kernel/discrete/JarvisMarch2D.h"

#define OrgGeogebraCommonKernelDiscreteJarvisMarch2D_M_2PI 6.283185307179586

@interface OrgGeogebraCommonKernelDiscreteJarvisMarch2D ()

+ (OrgGeogebraCommonAwtGPoint2D_Double *)findNextPointWithOrgGeogebraCommonAwtGPoint2D_Double:(OrgGeogebraCommonAwtGPoint2D_Double *)basePoint
                                                                                   withDouble:(jdouble)startAngle
                                                                       withJavaUtilCollection:(id<JavaUtilCollection>)points;

+ (jdouble)horizontalAngleWithOrgGeogebraCommonAwtGPoint2D_Double:(OrgGeogebraCommonAwtGPoint2D_Double *)p1
                          withOrgGeogebraCommonAwtGPoint2D_Double:(OrgGeogebraCommonAwtGPoint2D_Double *)p2;

+ (jdouble)formatAngleWithDouble:(jdouble)angle;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelDiscreteJarvisMarch2D, M_2PI, jdouble)

__attribute__((unused)) static OrgGeogebraCommonAwtGPoint2D_Double *OrgGeogebraCommonKernelDiscreteJarvisMarch2D_findNextPointWithOrgGeogebraCommonAwtGPoint2D_Double_withDouble_withJavaUtilCollection_(OrgGeogebraCommonAwtGPoint2D_Double *basePoint, jdouble startAngle, id<JavaUtilCollection> points);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelDiscreteJarvisMarch2D_horizontalAngleWithOrgGeogebraCommonAwtGPoint2D_Double_withOrgGeogebraCommonAwtGPoint2D_Double_(OrgGeogebraCommonAwtGPoint2D_Double *p1, OrgGeogebraCommonAwtGPoint2D_Double *p2);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelDiscreteJarvisMarch2D_formatAngleWithDouble_(jdouble angle);

@implementation OrgGeogebraCommonKernelDiscreteJarvisMarch2D

+ (JavaUtilArrayList *)convexHullWithJavaUtilCollection:(id<JavaUtilCollection>)points {
  return OrgGeogebraCommonKernelDiscreteJarvisMarch2D_convexHullWithJavaUtilCollection_(points);
}

+ (OrgGeogebraCommonAwtGPoint2D_Double *)findNextPointWithOrgGeogebraCommonAwtGPoint2D_Double:(OrgGeogebraCommonAwtGPoint2D_Double *)basePoint
                                                                                   withDouble:(jdouble)startAngle
                                                                       withJavaUtilCollection:(id<JavaUtilCollection>)points {
  return OrgGeogebraCommonKernelDiscreteJarvisMarch2D_findNextPointWithOrgGeogebraCommonAwtGPoint2D_Double_withDouble_withJavaUtilCollection_(basePoint, startAngle, points);
}

+ (jdouble)horizontalAngleWithOrgGeogebraCommonAwtGPoint2D_Double:(OrgGeogebraCommonAwtGPoint2D_Double *)p1
                          withOrgGeogebraCommonAwtGPoint2D_Double:(OrgGeogebraCommonAwtGPoint2D_Double *)p2 {
  return OrgGeogebraCommonKernelDiscreteJarvisMarch2D_horizontalAngleWithOrgGeogebraCommonAwtGPoint2D_Double_withOrgGeogebraCommonAwtGPoint2D_Double_(p1, p2);
}

+ (jdouble)formatAngleWithDouble:(jdouble)angle {
  return OrgGeogebraCommonKernelDiscreteJarvisMarch2D_formatAngleWithDouble_(angle);
}

- (instancetype)init {
  OrgGeogebraCommonKernelDiscreteJarvisMarch2D_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "convexHullWithJavaUtilCollection:", "convexHull", "Ljava.util.ArrayList;", 0x9, NULL, NULL },
    { "findNextPointWithOrgGeogebraCommonAwtGPoint2D_Double:withDouble:withJavaUtilCollection:", "findNextPoint", "Lorg.geogebra.common.awt.GPoint2D$Double;", 0xa, NULL, NULL },
    { "horizontalAngleWithOrgGeogebraCommonAwtGPoint2D_Double:withOrgGeogebraCommonAwtGPoint2D_Double:", "horizontalAngle", "D", 0xa, NULL, NULL },
    { "formatAngleWithDouble:", "formatAngle", "D", 0xa, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "M_2PI_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelDiscreteJarvisMarch2D_M_2PI },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelDiscreteJarvisMarch2D = { 2, "JarvisMarch2D", "org.geogebra.common.kernel.discrete", NULL, 0x1, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelDiscreteJarvisMarch2D;
}

@end

JavaUtilArrayList *OrgGeogebraCommonKernelDiscreteJarvisMarch2D_convexHullWithJavaUtilCollection_(id<JavaUtilCollection> points) {
  OrgGeogebraCommonKernelDiscreteJarvisMarch2D_initialize();
  OrgGeogebraCommonAwtGPoint2D_Double *lowestPoint = nil;
  jdouble y;
  jdouble ymin = JavaLangDouble_MAX_VALUE;
  jdouble xmin = JavaLangDouble_MAX_VALUE;
  for (OrgGeogebraCommonAwtGPoint2D_Double * __strong point in nil_chk(points)) {
    y = [((OrgGeogebraCommonAwtGPoint2D_Double *) nil_chk(point)) getY];
    if (y < ymin) {
      ymin = y;
      xmin = [point getX];
      lowestPoint = point;
    }
    else if (y == ymin) {
      jdouble x = [point getX];
      if (x < xmin) {
        xmin = x;
        lowestPoint = point;
      }
    }
  }
  JavaUtilArrayList *hullPoints = [new_JavaUtilArrayList_init() autorelease];
  OrgGeogebraCommonAwtGPoint2D_Double *currentPoint = lowestPoint;
  OrgGeogebraCommonAwtGPoint2D_Double *nextPoint = nil;
  jdouble angle = 0;
  do {
    [hullPoints addWithId:currentPoint];
    nextPoint = OrgGeogebraCommonKernelDiscreteJarvisMarch2D_findNextPointWithOrgGeogebraCommonAwtGPoint2D_Double_withDouble_withJavaUtilCollection_(currentPoint, angle, points);
    angle = OrgGeogebraCommonKernelDiscreteJarvisMarch2D_horizontalAngleWithOrgGeogebraCommonAwtGPoint2D_Double_withOrgGeogebraCommonAwtGPoint2D_Double_(currentPoint, nextPoint);
    currentPoint = nextPoint;
  }
  while (currentPoint != lowestPoint);
  return hullPoints;
}

OrgGeogebraCommonAwtGPoint2D_Double *OrgGeogebraCommonKernelDiscreteJarvisMarch2D_findNextPointWithOrgGeogebraCommonAwtGPoint2D_Double_withDouble_withJavaUtilCollection_(OrgGeogebraCommonAwtGPoint2D_Double *basePoint, jdouble startAngle, id<JavaUtilCollection> points) {
  OrgGeogebraCommonKernelDiscreteJarvisMarch2D_initialize();
  OrgGeogebraCommonAwtGPoint2D_Double *minPoint = nil;
  jdouble minAngle = JavaLangDouble_MAX_VALUE;
  jdouble angle;
  for (OrgGeogebraCommonAwtGPoint2D_Double * __strong point in nil_chk(points)) {
    if ([((OrgGeogebraCommonAwtGPoint2D_Double *) nil_chk(basePoint)) isEqual:point]) continue;
    angle = OrgGeogebraCommonKernelDiscreteJarvisMarch2D_horizontalAngleWithOrgGeogebraCommonAwtGPoint2D_Double_withOrgGeogebraCommonAwtGPoint2D_Double_(basePoint, point);
    angle = OrgGeogebraCommonKernelDiscreteJarvisMarch2D_formatAngleWithDouble_(angle - startAngle);
    if (angle < minAngle) {
      minAngle = angle;
      minPoint = point;
    }
  }
  return minPoint;
}

jdouble OrgGeogebraCommonKernelDiscreteJarvisMarch2D_horizontalAngleWithOrgGeogebraCommonAwtGPoint2D_Double_withOrgGeogebraCommonAwtGPoint2D_Double_(OrgGeogebraCommonAwtGPoint2D_Double *p1, OrgGeogebraCommonAwtGPoint2D_Double *p2) {
  OrgGeogebraCommonKernelDiscreteJarvisMarch2D_initialize();
  return fmod((JavaLangMath_atan2WithDouble_withDouble_(((OrgGeogebraCommonAwtGPoint2D_Double *) nil_chk(p2))->y_ - ((OrgGeogebraCommonAwtGPoint2D_Double *) nil_chk(p1))->y_, p2->x_ - p1->x_) + OrgGeogebraCommonKernelDiscreteJarvisMarch2D_M_2PI), (OrgGeogebraCommonKernelDiscreteJarvisMarch2D_M_2PI));
}

jdouble OrgGeogebraCommonKernelDiscreteJarvisMarch2D_formatAngleWithDouble_(jdouble angle) {
  OrgGeogebraCommonKernelDiscreteJarvisMarch2D_initialize();
  return fmod(((fmod(angle, OrgGeogebraCommonKernelDiscreteJarvisMarch2D_M_2PI)) + OrgGeogebraCommonKernelDiscreteJarvisMarch2D_M_2PI), OrgGeogebraCommonKernelDiscreteJarvisMarch2D_M_2PI);
}

void OrgGeogebraCommonKernelDiscreteJarvisMarch2D_init(OrgGeogebraCommonKernelDiscreteJarvisMarch2D *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelDiscreteJarvisMarch2D *new_OrgGeogebraCommonKernelDiscreteJarvisMarch2D_init() {
  OrgGeogebraCommonKernelDiscreteJarvisMarch2D *self = [OrgGeogebraCommonKernelDiscreteJarvisMarch2D alloc];
  OrgGeogebraCommonKernelDiscreteJarvisMarch2D_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelDiscreteJarvisMarch2D)
