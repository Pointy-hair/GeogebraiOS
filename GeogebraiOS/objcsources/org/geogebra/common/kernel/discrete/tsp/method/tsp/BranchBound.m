//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/discrete/tsp/method/tsp/BranchBound.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/kernel/discrete/tsp/method/tsp/BranchBound.h"
#include "org/geogebra/common/kernel/discrete/tsp/method/tsp/TspImprovement.h"
#include "org/geogebra/common/kernel/discrete/tsp/model/Node.h"
#include "org/geogebra/common/kernel/discrete/tsp/util/Heap.h"
#include "org/geogebra/common/kernel/discrete/tsp/util/IntegerSet.h"
#include "org/geogebra/common/util/Unicode.h"

@interface OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound () {
 @public
  jint limit_;
  id<OrgGeogebraCommonKernelDiscreteTspMethodTspTspImprovement> opt_;
}

+ (IOSIntArray *)compressTableToArrayWithBooleanArray2:(IOSObjectArray *)table;

- (jdouble)getCostWithIntArray:(IOSIntArray *)route
              withDoubleArray2:(IOSObjectArray *)table;

- (jdouble)getLowerCostWithDoubleArray2:(IOSObjectArray *)table
                        withDoubleArray:(IOSDoubleArray *)multiplier
                      withBooleanArray2:(IOSObjectArray *)edges;

- (void)getOneTreeWithBooleanArray2:(IOSObjectArray *)edges
                   withDoubleArray2:(IOSObjectArray *)table
                    withDoubleArray:(IOSDoubleArray *)multipliers
                  withBooleanArray2:(IOSObjectArray *)connect
                  withBooleanArray2:(IOSObjectArray *)disconnect;

- (jboolean)hasCircuitPossibilityWithBooleanArray2:(IOSObjectArray *)connect
                                 withBooleanArray2:(IOSObjectArray *)disconnect;

- (void)updateConstraintWithBooleanArray2:(IOSObjectArray *)connect
                        withBooleanArray2:(IOSObjectArray *)disconnect;

- (jboolean)updateMulipliersWithDouble:(jdouble)multiple
                     withBooleanArray2:(IOSObjectArray *)edges
                       withDoubleArray:(IOSDoubleArray *)multipliers;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound, opt_, id<OrgGeogebraCommonKernelDiscreteTspMethodTspTspImprovement>)

__attribute__((unused)) static IOSIntArray *OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_compressTableToArrayWithBooleanArray2_(IOSObjectArray *table);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_getCostWithIntArray_withDoubleArray2_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *self, IOSIntArray *route, IOSObjectArray *table);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_getLowerCostWithDoubleArray2_withDoubleArray_withBooleanArray2_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *self, IOSObjectArray *table, IOSDoubleArray *multiplier, IOSObjectArray *edges);

__attribute__((unused)) static void OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_getOneTreeWithBooleanArray2_withDoubleArray2_withDoubleArray_withBooleanArray2_withBooleanArray2_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *self, IOSObjectArray *edges, IOSObjectArray *table, IOSDoubleArray *multipliers, IOSObjectArray *connect, IOSObjectArray *disconnect);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_hasCircuitPossibilityWithBooleanArray2_withBooleanArray2_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *self, IOSObjectArray *connect, IOSObjectArray *disconnect);

__attribute__((unused)) static void OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_updateConstraintWithBooleanArray2_withBooleanArray2_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *self, IOSObjectArray *connect, IOSObjectArray *disconnect);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_updateMulipliersWithDouble_withBooleanArray2_withDoubleArray_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *self, jdouble multiple, IOSObjectArray *edges, IOSDoubleArray *multipliers);

@implementation OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound

- (instancetype)initWithInt:(jint)limit
withOrgGeogebraCommonKernelDiscreteTspMethodTspTspImprovement:(id<OrgGeogebraCommonKernelDiscreteTspMethodTspTspImprovement>)opt {
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_initWithInt_withOrgGeogebraCommonKernelDiscreteTspMethodTspTspImprovement_(self, limit, opt);
  return self;
}

- (OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit *)branchWithId:(id)panel
                                                                withDoubleArray2:(IOSObjectArray *)table
                                                                 withDoubleArray:(IOSDoubleArray *)multipliers
                                                               withBooleanArray2:(IOSObjectArray *)edges
                                                               withBooleanArray2:(IOSObjectArray *)connect
                                                               withBooleanArray2:(IOSObjectArray *)disconnect
                                                                      withDouble:(jdouble)circuitLowerBound
                                                                         withInt:(jint)depth
                                                                      withDouble:(jdouble)percent {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(multipliers))->size_; i++) {
    *IOSDoubleArray_GetRef(multipliers, i) = 0;
  }
  jint count = 0;
  if (JavaLangDouble_POSITIVE_INFINITY > circuitLowerBound) {
  }
  jdouble multiplier = 1000 / ((IOSObjectArray *) nil_chk(edges))->size_;
  if (circuitLowerBound < JavaLangDouble_POSITIVE_INFINITY) {
    multiplier = circuitLowerBound / edges->size_;
  }
  jdouble lowerBound = 0;
  IOSObjectArray *betterEdges = [IOSBooleanArray arrayWithDimensions:2 lengths:(jint[]){ edges->size_, edges->size_ }];
  do {
    OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_getOneTreeWithBooleanArray2_withDoubleArray2_withDoubleArray_withBooleanArray2_withBooleanArray2_(self, edges, table, multipliers, connect, disconnect);
    jdouble cost = OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_getLowerCostWithDoubleArray2_withDoubleArray_withBooleanArray2_(self, table, multipliers, edges);
    if (circuitLowerBound < cost) {
      return nil;
    }
    else if (lowerBound < cost) {
      lowerBound = cost;
      [self copy__WithBooleanArray2:edges withBooleanArray2:betterEdges];
    }
    if (OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_updateMulipliersWithDouble_withBooleanArray2_withDoubleArray_(self, multiplier, edges, multipliers)) {
      IOSIntArray *route = OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_compressTableToArrayWithBooleanArray2_(edges);
      if (self->opt_ != nil) {
        while ([self->opt_ methodWithIntArray:route withDoubleArray2:table]) ;
        cost = OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_getCostWithIntArray_withDoubleArray2_(self, route, table);
      }
      return [new_OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit_initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_withIntArray_withDouble_(self, route, cost) autorelease];
    }
    multiplier *= 0.95;
  }
  while (count++ < self->limit_);
  [self copy__WithBooleanArray2:betterEdges withBooleanArray2:edges];
  for (jint i = 0; i < edges->size_; i++) {
    jint connection = 0;
    jint fix = 0;
    for (jint j = 0; j < edges->size_; j++) {
      if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(edges, i)), j)) {
        connection++;
        if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(connect), i)), j)) {
          fix++;
        }
      }
    }
    if (connection > 2) {
      IOSObjectArray *connects = [IOSBooleanArray arrayWithDimensions:3 lengths:(jint[]){ 3 - fix, edges->size_, edges->size_ }];
      IOSObjectArray *disconnects = [IOSBooleanArray arrayWithDimensions:3 lengths:(jint[]){ 3 - fix, edges->size_, edges->size_ }];
      if (fix < 2) {
        for (jint l = 0; l < connects->size_; l++) {
          for (jint j = 0; j < edges->size_; j++) {
            for (jint k = 0; k < ((IOSBooleanArray *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(connects, l)), j)))->size_; k++) {
              *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(connects, l)), j)), k) = IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(connect), j)), k);
              *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(disconnects, l)), j)), k) = IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(disconnect), j)), k);
            }
          }
        }
        jint edge = 0;
        for (jint j = 0; j < edges->size_; j++) {
          if (i != j && !IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(connect), i)), j)) {
            if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(edges, i)), j)) {
              if (edge < connects->size_) {
                *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(disconnects, edge)), i)), j) = YES;
                *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(disconnects, edge)), j)), i) = YES;
                for (jint k = edge + 1; k < connects->size_; k++) {
                  *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(connects, k)), i)), j) = YES;
                  *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(connects, k)), j)), i) = YES;
                }
              }
              else {
                *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(disconnects, disconnects->size_ - 1)), i)), j) = YES;
                *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(disconnects, disconnects->size_ - 1)), j)), i) = YES;
              }
              edge++;
            }
            else {
              *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(disconnects, disconnects->size_ - 1)), i)), j) = YES;
              *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(disconnects, disconnects->size_ - 1)), j)), i) = YES;
            }
          }
        }
        for (jint j = 0; j < connects->size_; j++) {
          OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_updateConstraintWithBooleanArray2_withBooleanArray2_(self, IOSObjectArray_Get(connects, j), IOSObjectArray_Get(disconnects, j));
        }
      }
      OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit *bestCase = nil;
      for (jint j = connects->size_ - 1; j >= 0; j--) {
        if (OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_hasCircuitPossibilityWithBooleanArray2_withBooleanArray2_(self, IOSObjectArray_Get(connects, j), IOSObjectArray_Get(disconnects, j))) {
          OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit *circuit = [self branchWithId:panel withDoubleArray2:table withDoubleArray:multipliers withBooleanArray2:edges withBooleanArray2:IOSObjectArray_Get(connects, j) withBooleanArray2:IOSObjectArray_Get(disconnects, j) withDouble:circuitLowerBound withInt:depth + 1 withDouble:percent + (1 / JavaLangMath_powWithDouble_withDouble_(3, depth + 1) * (connects->size_ - j - 1))];
          if (circuit != nil) {
            if (circuitLowerBound > [circuit getCost]) {
              circuitLowerBound = [circuit getCost];
              if (circuitLowerBound < lowerBound) {
                return circuit;
              }
              bestCase = circuit;
            }
          }
        }
      }
      if (bestCase != nil) {
        return bestCase;
      }
      else {
        return nil;
      }
    }
  }
  return nil;
}

+ (IOSIntArray *)compressTableToArrayWithBooleanArray2:(IOSObjectArray *)table {
  return OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_compressTableToArrayWithBooleanArray2_(table);
}

- (void)copy__WithBooleanArray2:(IOSObjectArray *)arrays
              withBooleanArray2:(IOSObjectArray *)copy_ {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(copy_))->size_; i++) {
    for (jint j = 0; j < ((IOSBooleanArray *) nil_chk(IOSObjectArray_Get(copy_, i)))->size_; j++) {
      *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(copy_, i)), j) = IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(arrays), i)), j);
    }
  }
}

- (IOSObjectArray *)createTableWithOrgGeogebraCommonKernelDiscreteTspModelNodeArray:(IOSObjectArray *)nodes {
  IOSObjectArray *table = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ ((IOSObjectArray *) nil_chk(nodes))->size_, nodes->size_ }];
  for (jint i = 0; i < nodes->size_; i++) {
    for (jint j = i + 1; j < nodes->size_; j++) {
      jdouble distance = [((OrgGeogebraCommonKernelDiscreteTspModelNode *) nil_chk(IOSObjectArray_Get(nodes, i))) getDistanceWithOrgGeogebraCommonKernelDiscreteTspModelNode:IOSObjectArray_Get(nodes, j)];
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(table, i)), j) = distance;
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(table, j)), i) = distance;
    }
  }
  return table;
}

- (NSString *)EdgetoStringWithBooleanArray2:(IOSObjectArray *)edges {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(edges))->size_; i++) {
    for (jint j = 0; j < ((IOSBooleanArray *) nil_chk(IOSObjectArray_Get(edges, i)))->size_; j++) {
      if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(edges, i)), j)) {
        [sb appendWithNSString:@"* "];
      }
      else {
        [sb appendWithNSString:@"- "];
      }
    }
    [sb appendWithChar:0x000a];
  }
  return [sb description];
}

- (jdouble)getCostWithIntArray:(IOSIntArray *)route
              withDoubleArray2:(IOSObjectArray *)table {
  return OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_getCostWithIntArray_withDoubleArray2_(self, route, table);
}

- (jdouble)getLowerCostWithDoubleArray2:(IOSObjectArray *)table
                        withDoubleArray:(IOSDoubleArray *)multiplier
                      withBooleanArray2:(IOSObjectArray *)edges {
  return OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_getLowerCostWithDoubleArray2_withDoubleArray_withBooleanArray2_(self, table, multiplier, edges);
}

- (void)getOneTreeWithBooleanArray2:(IOSObjectArray *)edges
                   withDoubleArray2:(IOSObjectArray *)table
                    withDoubleArray:(IOSDoubleArray *)multipliers
                  withBooleanArray2:(IOSObjectArray *)connect
                  withBooleanArray2:(IOSObjectArray *)disconnect {
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_getOneTreeWithBooleanArray2_withDoubleArray2_withDoubleArray_withBooleanArray2_withBooleanArray2_(self, edges, table, multipliers, connect, disconnect);
}

- (jboolean)hasCircuitPossibilityWithBooleanArray2:(IOSObjectArray *)connect
                                 withBooleanArray2:(IOSObjectArray *)disconnect {
  return OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_hasCircuitPossibilityWithBooleanArray2_withBooleanArray2_(self, connect, disconnect);
}

- (IOSIntArray *)methodWithOrgGeogebraCommonKernelDiscreteTspModelNodeArray:(IOSObjectArray *)nodes {
  if (((IOSObjectArray *) nil_chk(nodes))->size_ > 2) {
    IOSObjectArray *edges = [IOSBooleanArray arrayWithDimensions:2 lengths:(jint[]){ nodes->size_, nodes->size_ }];
    IOSObjectArray *table = [self createTableWithOrgGeogebraCommonKernelDiscreteTspModelNodeArray:nodes];
    IOSDoubleArray *multipliers = [IOSDoubleArray arrayWithLength:nodes->size_];
    IOSObjectArray *connect = [IOSBooleanArray arrayWithDimensions:2 lengths:(jint[]){ nodes->size_, nodes->size_ }];
    IOSObjectArray *disconnect = [IOSBooleanArray arrayWithDimensions:2 lengths:(jint[]){ nodes->size_, nodes->size_ }];
    jint depth = 0;
    jdouble percent = 0;
    OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit *betterCase = [self branchWithId:nil withDoubleArray2:table withDoubleArray:multipliers withBooleanArray2:edges withBooleanArray2:connect withBooleanArray2:disconnect withDouble:JavaLangDouble_POSITIVE_INFINITY withInt:depth withDouble:percent];
    return [((OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit *) nil_chk(betterCase)) getRoute];
  }
  return nil;
}

- (NSString *)description {
  if (self->opt_ != nil) {
    return JreStrcat("$@CCCI", @"Branch and Bound - ", self->opt_, ' ', OrgGeogebraCommonUtilUnicode_MULTIPLY, ' ', self->limit_);
  }
  else {
    return JreStrcat("$CCI", @"Branch and Bound ", OrgGeogebraCommonUtilUnicode_MULTIPLY, ' ', self->limit_);
  }
}

- (void)updateConstraintWithBooleanArray2:(IOSObjectArray *)connect
                        withBooleanArray2:(IOSObjectArray *)disconnect {
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_updateConstraintWithBooleanArray2_withBooleanArray2_(self, connect, disconnect);
}

- (jboolean)updateMulipliersWithDouble:(jdouble)multiple
                     withBooleanArray2:(IOSObjectArray *)edges
                       withDoubleArray:(IOSDoubleArray *)multipliers {
  return OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_updateMulipliersWithDouble_withBooleanArray2_withDoubleArray_(self, multiple, edges, multipliers);
}

- (void)dealloc {
  RELEASE_(opt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withOrgGeogebraCommonKernelDiscreteTspMethodTspTspImprovement:", "BranchBound", NULL, 0x1, NULL, NULL },
    { "branchWithId:withDoubleArray2:withDoubleArray:withBooleanArray2:withBooleanArray2:withBooleanArray2:withDouble:withInt:withDouble:", "branch", "Lorg.geogebra.common.kernel.discrete.tsp.method.tsp.BranchBound$Circuit;", 0x1, NULL, NULL },
    { "compressTableToArrayWithBooleanArray2:", "compressTableToArray", "[I", 0xa, NULL, NULL },
    { "copy__WithBooleanArray2:withBooleanArray2:", "copy", "V", 0x1, NULL, NULL },
    { "createTableWithOrgGeogebraCommonKernelDiscreteTspModelNodeArray:", "createTable", "[[D", 0x1, NULL, NULL },
    { "EdgetoStringWithBooleanArray2:", "EdgetoString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCostWithIntArray:withDoubleArray2:", "getCost", "D", 0x2, NULL, NULL },
    { "getLowerCostWithDoubleArray2:withDoubleArray:withBooleanArray2:", "getLowerCost", "D", 0x2, NULL, NULL },
    { "getOneTreeWithBooleanArray2:withDoubleArray2:withDoubleArray:withBooleanArray2:withBooleanArray2:", "getOneTree", "V", 0x2, NULL, NULL },
    { "hasCircuitPossibilityWithBooleanArray2:withBooleanArray2:", "hasCircuitPossibility", "Z", 0x2, NULL, NULL },
    { "methodWithOrgGeogebraCommonKernelDiscreteTspModelNodeArray:", "method", "[I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "updateConstraintWithBooleanArray2:withBooleanArray2:", "updateConstraint", "V", 0x2, NULL, NULL },
    { "updateMulipliersWithDouble:withBooleanArray2:withDoubleArray:", "updateMulipliers", "Z", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "limit_", NULL, 0x12, "I", NULL, NULL,  },
    { "opt_", NULL, 0x2, "Lorg.geogebra.common.kernel.discrete.tsp.method.tsp.TspImprovement;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.discrete.tsp.method.tsp.BranchBound$Circuit;", "Lorg.geogebra.common.kernel.discrete.tsp.method.tsp.BranchBound$Entry;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound = { 2, "BranchBound", "org.geogebra.common.kernel.discrete.tsp.method.tsp", NULL, 0x1, 14, methods, 2, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound;
}

@end

void OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_initWithInt_withOrgGeogebraCommonKernelDiscreteTspMethodTspTspImprovement_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *self, jint limit, id<OrgGeogebraCommonKernelDiscreteTspMethodTspTspImprovement> opt) {
  NSObject_init(self);
  self->limit_ = limit;
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_set_opt_(self, opt);
}

OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *new_OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_initWithInt_withOrgGeogebraCommonKernelDiscreteTspMethodTspTspImprovement_(jint limit, id<OrgGeogebraCommonKernelDiscreteTspMethodTspTspImprovement> opt) {
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *self = [OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound alloc];
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_initWithInt_withOrgGeogebraCommonKernelDiscreteTspMethodTspTspImprovement_(self, limit, opt);
  return self;
}

IOSIntArray *OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_compressTableToArrayWithBooleanArray2_(IOSObjectArray *table) {
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_initialize();
  IOSIntArray *route = [IOSIntArray arrayWithLength:((IOSObjectArray *) nil_chk(table))->size_];
  jint before = -1;
  jint index = 0;
  jint count = 0;
  for (jint i = 0; count < table->size_; i++) {
    if (index != i && IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(table, index)), i)) {
      if (before != i) {
        *IOSIntArray_GetRef(route, count++) = index;
        before = index;
        index = i;
        i = -1;
      }
    }
  }
  return route;
}

jdouble OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_getCostWithIntArray_withDoubleArray2_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *self, IOSIntArray *route, IOSObjectArray *table) {
  jint previous = IOSIntArray_Get(route, ((IOSIntArray *) nil_chk(route))->size_ - 1);
  jint next;
  jdouble cost = 0;
  for (jint i = 0; i < route->size_; i++) {
    next = IOSIntArray_Get(route, i);
    cost += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(table), previous)), next);
    previous = next;
  }
  return cost;
}

jdouble OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_getLowerCostWithDoubleArray2_withDoubleArray_withBooleanArray2_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *self, IOSObjectArray *table, IOSDoubleArray *multiplier, IOSObjectArray *edges) {
  jdouble cost = 0;
  jint edge = 0;
  for (jint i = 1; i < ((IOSObjectArray *) nil_chk(table))->size_; i++) {
    for (jint j = 0; j < i; j++) {
      if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(edges), i)), j)) {
        cost += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(table, i)), j) + IOSDoubleArray_Get(nil_chk(multiplier), i) + IOSDoubleArray_Get(multiplier, j);
        edge++;
      }
    }
  }
  if (edge != ((IOSObjectArray *) nil_chk(edges))->size_) {
    return JavaLangDouble_POSITIVE_INFINITY;
  }
  jdouble sigma = 0;
  {
    IOSDoubleArray *a__ = multiplier;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble m = *b__++;
      sigma += m;
    }
  }
  return cost - 2 * sigma;
}

void OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_getOneTreeWithBooleanArray2_withDoubleArray2_withDoubleArray_withBooleanArray2_withBooleanArray2_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *self, IOSObjectArray *edges, IOSObjectArray *table, IOSDoubleArray *multipliers, IOSObjectArray *connect, IOSObjectArray *disconnect) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(edges))->size_; i++) {
    for (jint j = 0; j < edges->size_; j++) {
      *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(edges, i)), j) = NO;
    }
  }
  OrgGeogebraCommonKernelDiscreteTspUtilHeap *open = [new_OrgGeogebraCommonKernelDiscreteTspUtilHeap_initWithInt_(11) autorelease];
  OrgGeogebraCommonKernelDiscreteTspUtilIntegerSet *notClose = [new_OrgGeogebraCommonKernelDiscreteTspUtilIntegerSet_initWithInt_(edges->size_) autorelease];
  for (jint i = 0; i < edges->size_; i++) {
    [notClose addWithInt:i];
  }
  jint s = 0;
  [notClose removeWithInt:s];
  jint index = (s + 1) % edges->size_;
  [notClose removeWithInt:index];
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry *edge;
  for (jint i = 0; i < [notClose size]; i++) {
    jint a = [notClose getWithInt:i];
    if (!IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(disconnect), index)), a)) {
      [open addWithId:[new_OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry_initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_withInt_withInt_withDouble_(self, index, a, IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(connect), index)), a) ? JavaLangDouble_NEGATIVE_INFINITY : IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(table), index)), a) + IOSDoubleArray_Get(nil_chk(multipliers), index) + IOSDoubleArray_Get(multipliers, a)) autorelease]];
    }
  }
  do {
    edge = [open poll];
    if (edge == nil) {
      break;
    }
    *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(edges, ((OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry *) nil_chk(edge))->s_)), edge->t_) = YES;
    *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(edges, edge->t_)), edge->s_) = YES;
    index = edge->t_;
    [notClose removeWithInt:index];
    for (jint i = 0; i < [notClose size]; i++) {
      jint a = [notClose getWithInt:i];
      if (!IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(disconnect), index)), a)) {
        [open addWithId:[new_OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry_initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_withInt_withInt_withDouble_(self, index, a, IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(connect), index)), a) ? JavaLangDouble_NEGATIVE_INFINITY : IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(table), index)), a) + IOSDoubleArray_Get(nil_chk(multipliers), index) + IOSDoubleArray_Get(multipliers, a)) autorelease]];
      }
    }
  }
  while ([open size] > 0);
  [open clear];
  for (jint i = 0; i < edges->size_; i++) {
    if (s != i && !IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(disconnect), s)), i)) {
      [open addWithId:[new_OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry_initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_withInt_withInt_withDouble_(self, s, i, IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(connect), s)), i) ? JavaLangDouble_NEGATIVE_INFINITY : IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(table), s)), i) + IOSDoubleArray_Get(nil_chk(multipliers), s) + IOSDoubleArray_Get(multipliers, i)) autorelease]];
    }
  }
  edge = [open poll];
  *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(edges, ((OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry *) nil_chk(edge))->s_)), edge->t_) = YES;
  *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(edges, edge->t_)), edge->s_) = YES;
  edge = [open poll];
  *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(edges, ((OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry *) nil_chk(edge))->s_)), edge->t_) = YES;
  *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(edges, edge->t_)), edge->s_) = YES;
}

jboolean OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_hasCircuitPossibilityWithBooleanArray2_withBooleanArray2_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *self, IOSObjectArray *connect, IOSObjectArray *disconnect) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(connect))->size_; i++) {
    jint connection = 0;
    jint disconnection = 0;
    for (jint j = 0; j < ((IOSBooleanArray *) nil_chk(IOSObjectArray_Get(connect, i)))->size_; j++) {
      if (i != j) {
        if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(connect, i)), j)) {
          connection++;
        }
        if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(disconnect), i)), j)) {
          disconnection++;
        }
      }
    }
    if (connection > 2) {
      return NO;
    }
    if (((IOSObjectArray *) nil_chk(disconnect))->size_ < disconnection + 3) {
      return NO;
    }
  }
  return YES;
}

void OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_updateConstraintWithBooleanArray2_withBooleanArray2_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *self, IOSObjectArray *connect, IOSObjectArray *disconnect) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(connect))->size_; i++) {
    jint connection = 0;
    jint disconnection = 0;
    for (jint j = 0; j < connect->size_; j++) {
      if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(connect, i)), j)) {
        connection++;
      }
      if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(disconnect), i)), j)) {
        disconnection++;
      }
    }
    if (connection == 2 && connection + disconnection + 1 != connect->size_) {
      for (jint j = 0; j < ((IOSBooleanArray *) nil_chk(IOSObjectArray_Get(connect, i)))->size_; j++) {
        if (i != j) {
          if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(connect, i)), j)) {
            *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(disconnect), i)), j) = NO;
            *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(disconnect, j)), i) = NO;
          }
          else {
            *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(disconnect), i)), j) = YES;
            *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(disconnect, j)), i) = YES;
          }
        }
      }
    }
  }
}

jboolean OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_updateMulipliersWithDouble_withBooleanArray2_withDoubleArray_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *self, jdouble multiple, IOSObjectArray *edges, IOSDoubleArray *multipliers) {
  jboolean ret = YES;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(edges))->size_; i++) {
    jint connection = 0;
    for (jint j = 0; j < ((IOSBooleanArray *) nil_chk(IOSObjectArray_Get(edges, i)))->size_; j++) {
      if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(edges, i)), j)) {
        connection++;
      }
    }
    if (connection < 2) {
      *IOSDoubleArray_GetRef(nil_chk(multipliers), i) -= multiple;
      ret = NO;
    }
    else if (connection > 2) {
      *IOSDoubleArray_GetRef(nil_chk(multipliers), i) += multiple;
      ret = NO;
    }
  }
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound)

@implementation OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit

- (instancetype)initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound:(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *)outer$
                                                                  withIntArray:(IOSIntArray *)route
                                                                    withDouble:(jdouble)cost {
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit_initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_withIntArray_withDouble_(self, outer$, route, cost);
  return self;
}

- (jdouble)getCost {
  return self->cost_;
}

- (IOSIntArray *)getRoute {
  return self->route_;
}

- (void)setWithIntArray:(IOSIntArray *)route
             withDouble:(jdouble)cost {
  self->cost_ = cost;
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit_set_route_(self, route);
}

- (void)dealloc {
  RELEASE_(route_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound:withIntArray:withDouble:", "Circuit", NULL, 0x1, NULL, NULL },
    { "getCost", NULL, "D", 0x1, NULL, NULL },
    { "getRoute", NULL, "[I", 0x1, NULL, NULL },
    { "setWithIntArray:withDouble:", "set", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cost_", NULL, 0x0, "D", NULL, NULL,  },
    { "route_", NULL, 0x0, "[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit = { 2, "Circuit", "org.geogebra.common.kernel.discrete.tsp.method.tsp", "BranchBound", 0x0, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit;
}

@end

void OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit_initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_withIntArray_withDouble_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit *self, OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *outer$, IOSIntArray *route, jdouble cost) {
  NSObject_init(self);
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit_set_route_(self, route);
  self->cost_ = cost;
}

OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit *new_OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit_initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_withIntArray_withDouble_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *outer$, IOSIntArray *route, jdouble cost) {
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit *self = [OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit alloc];
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit_initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_withIntArray_withDouble_(self, outer$, route, cost);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Circuit)

@implementation OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry

- (instancetype)initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound:(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *)outer$
                                                                       withInt:(jint)s
                                                                       withInt:(jint)t
                                                                    withDouble:(jdouble)cost {
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry_initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_withInt_withInt_withDouble_(self, outer$, s, t, cost);
  return self;
}

- (jint)compareToWithId:(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry *)e {
  check_class_cast(e, [OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry class]);
  jdouble diff = self->cost_ - ((OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry *) nil_chk(e))->cost_;
  if (diff < 0) {
    return -1;
  }
  else if (diff > 0) {
    return 1;
  }
  return 0;
}

- (jboolean)isEqual:(id)obj {
  return ((jint) [self hash]) == ((jint) [nil_chk(obj) hash]);
}

- (NSUInteger)hash {
  return self->t_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound:withInt:withInt:withDouble:", "Entry", NULL, 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cost_", NULL, 0x0, "D", NULL, NULL,  },
    { "s_", NULL, 0x0, "I", NULL, NULL,  },
    { "t_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry = { 2, "Entry", "org.geogebra.common.kernel.discrete.tsp.method.tsp", "BranchBound", 0x0, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/geogebra/common/kernel/discrete/tsp/method/tsp/BranchBound$Entry;>;" };
  return &_OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry;
}

@end

void OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry_initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_withInt_withInt_withDouble_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry *self, OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *outer$, jint s, jint t, jdouble cost) {
  NSObject_init(self);
  self->s_ = s;
  self->t_ = t;
  self->cost_ = cost;
}

OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry *new_OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry_initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_withInt_withInt_withDouble_(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound *outer$, jint s, jint t, jdouble cost) {
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry *self = [OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry alloc];
  OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry_initWithOrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_withInt_withInt_withDouble_(self, outer$, s, t, cost);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelDiscreteTspMethodTspBranchBound_Entry)
