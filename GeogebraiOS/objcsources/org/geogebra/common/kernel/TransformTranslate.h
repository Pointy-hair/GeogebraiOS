//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/TransformTranslate.java
//

#ifndef _OrgGeogebraCommonKernelTransformTranslate_H_
#define _OrgGeogebraCommonKernelTransformTranslate_H_

#include "J2ObjC_header.h"
#include "org/geogebra/common/kernel/Transform.h"

@class OrgGeogebraCommonKernelAlgosAlgoTransformation;
@class OrgGeogebraCommonKernelConstruction;
@class OrgGeogebraCommonKernelGeosGeoElement;
@class OrgGeogebraCommonKernelGeosGeoVec3D;

@interface OrgGeogebraCommonKernelTransformTranslate : OrgGeogebraCommonKernelTransform

#pragma mark Public

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                    withOrgGeogebraCommonKernelGeosGeoVec3D:(OrgGeogebraCommonKernelGeosGeoVec3D *)transVec;

#pragma mark Protected

- (OrgGeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelTransformTranslate)

FOUNDATION_EXPORT void OrgGeogebraCommonKernelTransformTranslate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoVec3D_(OrgGeogebraCommonKernelTransformTranslate *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoVec3D *transVec);

FOUNDATION_EXPORT OrgGeogebraCommonKernelTransformTranslate *new_OrgGeogebraCommonKernelTransformTranslate_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoVec3D_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoVec3D *transVec) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelTransformTranslate)

#endif // _OrgGeogebraCommonKernelTransformTranslate_H_
