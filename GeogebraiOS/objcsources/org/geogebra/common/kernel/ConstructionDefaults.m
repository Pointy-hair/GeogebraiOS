//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/ConstructionDefaults.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "org/geogebra/common/GeoGebraConstants.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/io/MyXMLio.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoConicPart.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoImage.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoLocus.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/GeoRay.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Feature.h"
#include "org/geogebra/common/main/GeoGebraColorConstants.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonKernelConstructionDefaults () {
 @public
  jint lineThickness_;
  jint pointSize_;
  jint angleSize_;
  jfloat filling_;
  jboolean blackWhiteMode_;
  jint colorIndex_;
  IOSIntArray *colorSequence_;
}

+ (void)setMaxLayerUsedWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                    withOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelConstructionDefaults, colorSequence_, IOSIntArray *)

static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colLine_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelConstructionDefaults, colLine_, OrgGeogebraCommonAwtGColor *)

static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colInequality_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelConstructionDefaults, colInequality_, OrgGeogebraCommonAwtGColor *)

static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colAngle_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelConstructionDefaults, colAngle_, OrgGeogebraCommonAwtGColor *)

static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colLocus_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelConstructionDefaults, colLocus_, OrgGeogebraCommonAwtGColor *)

static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colFunction_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelConstructionDefaults, colFunction_, OrgGeogebraCommonAwtGColor *)

static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colList_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelConstructionDefaults, colList_, OrgGeogebraCommonAwtGColor *)

__attribute__((unused)) static void OrgGeogebraCommonKernelConstructionDefaults_setMaxLayerUsedWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonMainApp_(OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonMainApp *app);

__attribute__((unused)) static void OrgGeogebraCommonKernelConstructionDefaults_setDefaultVisualStylesWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(OrgGeogebraCommonKernelConstructionDefaults *self, OrgGeogebraCommonKernelGeosGeoElement *geo, jboolean isReset, jboolean setEuclidianVisible);

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelConstructionDefaults)

OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colPoint_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colDepPoint_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colPathPoint_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colRegionPoint_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colComplexPoint_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colConic_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colPolygon_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colQuadric_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colPreview_;
OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelConstructionDefaults_colPreviewFill_;

@implementation OrgGeogebraCommonKernelConstructionDefaults

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons2 {
  OrgGeogebraCommonKernelConstructionDefaults_initWithOrgGeogebraCommonKernelConstruction_(self, cons2);
  return self;
}

- (id<JavaUtilSet>)getDefaultGeos {
  return [((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) entrySet];
}

- (void)createDefaultGeoElements {
  defaultGeoElements_ = new_JavaUtilHashMap_init();
  OrgGeogebraCommonKernelGeosGeoPoint *freePoint = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [freePoint setPointSizeWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE];
  [freePoint setPointStyleWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT];
  [freePoint setLocalVariableLabelWithNSString:JreStrcat("$$", @"Point", strFree_)];
  [freePoint setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colPoint_];
  [freePoint setPointSizeWithInt:pointSize_];
  [freePoint setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE) withId:freePoint];
  OrgGeogebraCommonKernelGeosGeoPoint *depPoint = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [depPoint setPointSizeWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE];
  [depPoint setPointStyleWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT];
  [depPoint setLocalVariableLabelWithNSString:JreStrcat("$$", @"Point", strDependent_)];
  [depPoint setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colDepPoint_];
  [depPoint setPointSizeWithInt:pointSize_];
  [depPoint setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_DEPENDENT];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_DEPENDENT) withId:depPoint];
  OrgGeogebraCommonKernelGeosGeoPoint *pathPoint = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [pathPoint setPointSizeWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE];
  [pathPoint setPointStyleWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT];
  [pathPoint setLocalVariableLabelWithNSString:@"PointOn"];
  [pathPoint setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colPathPoint_];
  [pathPoint setPointSizeWithInt:pointSize_];
  [pathPoint setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH) withId:pathPoint];
  OrgGeogebraCommonKernelGeosGeoPoint *regionPoint = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [regionPoint setPointSizeWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE];
  [regionPoint setPointStyleWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT];
  [regionPoint setLocalVariableLabelWithNSString:@"PointInRegion"];
  [regionPoint setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colRegionPoint_];
  [regionPoint setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_IN_REGION];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_IN_REGION) withId:regionPoint];
  OrgGeogebraCommonKernelGeosGeoPoint *complexPoint = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [complexPoint setPointSizeWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE];
  [complexPoint setPointStyleWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT];
  [complexPoint setLocalVariableLabelWithNSString:@"PointOn"];
  [complexPoint setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colComplexPoint_];
  [complexPoint setPointSizeWithInt:pointSize_];
  [complexPoint setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_COMPLEX];
  [complexPoint setModeWithInt:OrgGeogebraCommonKernelKernel_COORD_COMPLEX];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_COMPLEX) withId:complexPoint];
  OrgGeogebraCommonKernelGeosGeoLine *line = new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [line setLocalVariableLabelWithNSString:@"Line"];
  [line setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colLine_];
  [line setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_LINE];
  [line setModeWithInt:OrgGeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_LINE) withId:line];
  OrgGeogebraCommonKernelGeosGeoSegment *seg = new_OrgGeogebraCommonKernelGeosGeoSegment_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [seg setLocalVariableLabelWithNSString:@"Segment"];
  [seg setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colLine_];
  [seg setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_SEGMENT];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_SEGMENT) withId:seg];
  OrgGeogebraCommonKernelGeosGeoRay *ray = new_OrgGeogebraCommonKernelGeosGeoRay_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [ray setLocalVariableLabelWithNSString:@"Segment"];
  [ray setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colLine_];
  [ray setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_RAY];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_RAY) withId:ray];
  OrgGeogebraCommonKernelGeosGeoFunctionNVar *inequality = new_OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [inequality setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colInequality_];
  [inequality setAlphaValueWithFloat:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY_ALPHA];
  [inequality setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY) withId:inequality];
  OrgGeogebraCommonKernelGeosGeoFunction *inequality1 = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [inequality1 setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY_1VAR];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY_1VAR) withId:inequality1];
  OrgGeogebraCommonKernelGeosGeoFunctionNVar *functionNV = new_OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [functionNV setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colQuadric_];
  [functionNV setAlphaValueWithFloat:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_QUADRIC_ALPHA];
  [functionNV setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION_NVAR];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION_NVAR) withId:functionNV];
  OrgGeogebraCommonKernelGeosGeoVector *vector = new_OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [vector setLocalVariableLabelWithNSString:@"Vector"];
  [vector setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colLine_];
  [vector setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_VECTOR];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_VECTOR) withId:vector];
  OrgGeogebraCommonKernelGeosGeoPolygon *polygon = new_OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, nil);
  [polygon setLocalVariableLabelWithNSString:@"Polygon"];
  [polygon setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colPolygon_];
  [polygon setAlphaValueWithFloat:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON_ALPHA];
  [polygon setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON) withId:polygon];
  OrgGeogebraCommonKernelGeosGeoPolyLine *polyline = new_OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [polyline setLocalVariableLabelWithNSString:@"Polyline"];
  [polyline setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colLine_];
  [polyline setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYLINE];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYLINE) withId:polyline];
  OrgGeogebraCommonKernelGeosGeoConic *conic = new_OrgGeogebraCommonKernelGeosGeoConic_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [conic setLocalVariableLabelWithNSString:@"Conic"];
  [conic setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colConic_];
  [conic setAlphaValueWithFloat:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC_ALPHA];
  [conic setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC) withId:conic];
  OrgGeogebraCommonKernelGeosGeoConicPart *conicSector = new_OrgGeogebraCommonKernelGeosGeoConicPart_initWithOrgGeogebraCommonKernelConstruction_withInt_(cons_, OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR);
  [conicSector setLocalVariableLabelWithNSString:@"Sector"];
  [conicSector setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colPolygon_];
  [conicSector setAlphaValueWithFloat:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON_ALPHA];
  [conicSector setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC_SECTOR];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC_SECTOR) withId:conicSector];
  OrgGeogebraCommonKernelGeosGeoNumeric *number = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [number setLocalVariableLabelWithNSString:@"Numeric"];
  [number setSliderFixedWithBoolean:YES];
  [number setIntervalMaxWithDouble:OrgGeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_MAX_()];
  [number setIntervalMinWithDouble:OrgGeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_MIN_()];
  [number setAnimationStepWithDouble:OrgGeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_INCREMENT_()];
  [number setAnimationSpeedWithDouble:OrgGeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_SPEED_()];
  [number setAlphaValueWithFloat:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER_ALPHA];
  [number setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER];
  [number setLineThicknessWithInt:OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_THICKNESS];
  [number setSliderWidthWithDouble:OrgGeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_WIDTH_PIXEL_()];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER) withId:number];
  OrgGeogebraCommonKernelGeosGeoAngle *angle = new_OrgGeogebraCommonKernelGeosGeoAngle_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [angle setLocalVariableLabelWithNSString:@"Angle"];
  [angle setSliderFixedWithBoolean:YES];
  [angle setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colAngle_];
  [angle setAlphaValueWithFloat:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE_ALPHA];
  [angle setDrawableWithBoolean:YES withBoolean:NO];
  [angle setDrawableWithBoolean:YES withBoolean:NO];
  [angle setArcSizeWithInt:angleSize_];
  [angle setIntervalMaxWithDouble:OrgGeogebraCommonKernelGeosGeoAngle_DEFAULT_SLIDER_MAX_ANGLE];
  [angle setIntervalMinWithDouble:OrgGeogebraCommonKernelGeosGeoAngle_DEFAULT_SLIDER_MIN_ANGLE];
  [angle setAnimationStepWithDouble:OrgGeogebraCommonKernelGeosGeoAngle_DEFAULT_SLIDER_INCREMENT_ANGLE];
  [angle setAnimationSpeedWithDouble:OrgGeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_SPEED_()];
  [angle setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE];
  [angle setSliderWidthWithDouble:OrgGeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_WIDTH_PIXEL_ANGLE_()];
  [angle setLineTypeHiddenWithInt:OrgGeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_HIDDEN_AS_NOT_HIDDEN];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE) withId:angle];
  OrgGeogebraCommonKernelGeosGeoFunction *function = new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [function setLocalVariableLabelWithNSString:@"Function"];
  [function setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colFunction_];
  [function setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION];
  [function remove];
  if ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getKernel])) getApplication])) hasWithOrgGeogebraCommonMainFeatureEnum:OrgGeogebraCommonMainFeatureEnum_get_SEQUENTIAL_COLORS()]) {
    [function setSequentialColorWithBoolean:YES];
  }
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION) withId:function];
  OrgGeogebraCommonKernelGeosGeoLocus *locus = new_OrgGeogebraCommonKernelGeosGeoLocus_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [locus setLocalVariableLabelWithNSString:@"Locus"];
  [locus setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colLocus_];
  [locus setLabelVisibleWithBoolean:NO];
  [locus setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_LOCUS];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_LOCUS) withId:locus];
  OrgGeogebraCommonKernelGeosGeoText *text = new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [text setLocalVariableLabelWithNSString:@"Text"];
  [text setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_TEXT];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_TEXT) withId:text];
  OrgGeogebraCommonKernelGeosGeoImage *img = new_OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [img setLocalVariableLabelWithNSString:@"Image"];
  [img setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_IMAGE];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_IMAGE) withId:img];
  OrgGeogebraCommonKernelGeosGeoBoolean *bool_ = new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [bool_ setLocalVariableLabelWithNSString:@"Boolean"];
  [bool_ setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_BOOLEAN];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_BOOLEAN) withId:bool_];
  OrgGeogebraCommonKernelGeosGeoList *list = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [list setShowAllPropertiesWithBoolean:YES];
  [list setLocalVariableLabelWithNSString:@"List"];
  [list setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonKernelConstructionDefaults_colList_];
  [list setAlphaValueWithFloat:-1];
  [list setDefaultGeoTypeWithInt:OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_LIST];
  (void) [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_LIST) withId:list];
}

- (NSString *)getCDXML {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:@"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"];
  (void) [sb appendWithNSString:JreStrcat("$$$", @"<geogebra format=\"", OrgGeogebraCommonGeoGebraConstants_get_XML_FILE_FORMAT_(), @"\">\n")];
  (void) [sb appendWithNSString:@"<construction>\n"];
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) values])) {
    [self getXMLWithOrgGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:sb];
  }
  (void) [sb appendWithNSString:@"</construction>\n"];
  (void) [sb appendWithNSString:@"</geogebra>\n"];
  return [sb description];
}

- (void)getXMLWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                              withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getXMLWithBoolean:NO withJavaLangStringBuilder:sb];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getDefaultGeoWithInt:(jint)type {
  return [((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) getWithId:JavaLangInteger_valueOfWithInt_(type)];
}

- (void)addDefaultGeoWithJavaLangInteger:(JavaLangInteger *)defaultType
withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  (void) [((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) putWithId:defaultType withId:geo];
}

- (jint)getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [self getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo withOrgGeogebraCommonPluginGeoClassEnum:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType]];
}

- (jint)getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                        withOrgGeogebraCommonPluginGeoClassEnum:(OrgGeogebraCommonPluginGeoClassEnum *)geoClass {
  jint type;
  {
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> p;
    id<OrgGeogebraCommonKernelKernelNDGeoConicPartND> conicPart;
    switch ([geoClass ordinal]) {
      case OrgGeogebraCommonPluginGeoClass_POINT:
      p = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
      if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) getMode] == OrgGeogebraCommonKernelKernel_COORD_COMPLEX) {
        type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_COMPLEX;
      }
      else if ([p isIndependent]) {
        type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE;
      }
      else {
        if ([p hasPath]) type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH;
        else if ([p hasRegion]) type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_IN_REGION;
        else type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_DEPENDENT;
      }
      break;
      case OrgGeogebraCommonPluginGeoClass_ANGLE:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE;
      break;
      case OrgGeogebraCommonPluginGeoClass_BOOLEAN:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_BOOLEAN;
      break;
      case OrgGeogebraCommonPluginGeoClass_CONIC:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC;
      break;
      case OrgGeogebraCommonPluginGeoClass_CONICPART:
      conicPart = (id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDGeoConicPartND));
      if ([((id<OrgGeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(conicPart)) getConicPartType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) {
        type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC_SECTOR;
      }
      else {
        type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC;
      }
      break;
      case OrgGeogebraCommonPluginGeoClass_FUNCTION_NVAR:
      if ([((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunctionNVar class])))) isBooleanFunction]) {
        type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY;
      }
      else {
        type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION_NVAR;
      }
      break;
      case OrgGeogebraCommonPluginGeoClass_FUNCTION:
      if ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunction class])))) isBooleanFunction]) {
        type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY;
      }
      else {
        type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION;
      }
      break;
      case OrgGeogebraCommonPluginGeoClass_INTERVAL:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY;
      break;
      case OrgGeogebraCommonPluginGeoClass_FUNCTIONCONDITIONAL:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION;
      break;
      case OrgGeogebraCommonPluginGeoClass_IMAGE:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_IMAGE;
      break;
      case OrgGeogebraCommonPluginGeoClass_LIST:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_LIST;
      break;
      case OrgGeogebraCommonPluginGeoClass_LOCUS:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_LOCUS;
      break;
      case OrgGeogebraCommonPluginGeoClass_NUMERIC:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER;
      break;
      case OrgGeogebraCommonPluginGeoClass_POLYGON:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON;
      break;
      case OrgGeogebraCommonPluginGeoClass_POLYLINE:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYLINE;
      break;
      case OrgGeogebraCommonPluginGeoClass_TEXT:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_TEXT;
      break;
      case OrgGeogebraCommonPluginGeoClass_VECTOR:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_VECTOR;
      break;
      case OrgGeogebraCommonPluginGeoClass_SEGMENT:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_SEGMENT;
      break;
      case OrgGeogebraCommonPluginGeoClass_RAY:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_RAY;
      break;
      default:
      type = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_LINE;
    }
  }
  return type;
}

+ (void)setMaxLayerUsedWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                    withOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonKernelConstructionDefaults_setMaxLayerUsedWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonMainApp_(geo, app);
}

- (void)setDefaultVisualStylesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                            withBoolean:(jboolean)isReset {
  OrgGeogebraCommonKernelConstructionDefaults_setDefaultVisualStylesWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, isReset, YES);
}

- (void)setDefaultVisualStylesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                            withBoolean:(jboolean)isReset
                                                            withBoolean:(jboolean)setEuclidianVisible {
  OrgGeogebraCommonKernelConstructionDefaults_setDefaultVisualStylesWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, isReset, setEuclidianVisible);
}

- (void)setBlackWhiteModeWithBoolean:(jboolean)flag {
  blackWhiteMode_ = flag;
}

- (jboolean)getBlackWhiteMode {
  return blackWhiteMode_;
}

- (void)resetDefaults {
  lineThickness_ = OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_THICKNESS;
  pointSize_ = OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE;
  angleSize_ = OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_ANGLE_SIZE;
  filling_ = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON_ALPHA;
  [self setDefaultLineThicknessWithInt:lineThickness_];
  [self setDefaultPointSizeWithInt:pointSize_];
  [self setDefaultAngleSizeWithInt:angleSize_];
  [self setDefaultFillingWithFloat:filling_];
}

- (jint)getDefaultLineThickness {
  return lineThickness_;
}

- (jint)getDefaultPointSize {
  return pointSize_;
}

- (jint)getDefaultAngleSize {
  return angleSize_;
}

- (void)setDefaultAngleSizeWithInt:(jint)angleSize0 {
  self->angleSize_ = JavaLangMath_maxWithInt_withInt_(angleSize0, 1);
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) values])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    switch ([[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
      case OrgGeogebraCommonPluginGeoClass_ANGLE:
      [((OrgGeogebraCommonKernelGeosGeoAngle *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoAngle class])) setArcSizeWithInt:self->angleSize_];
      break;
    }
  }
}

- (void)setDefaultPointSizeWithInt:(jint)pointSize0 {
  self->pointSize_ = JavaLangMath_maxWithInt_withInt_(pointSize0, 1);
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) values])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    switch ([[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
      case OrgGeogebraCommonPluginGeoClass_POINT:
      [((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPoint class])) setPointSizeWithInt:self->pointSize_];
      break;
      case OrgGeogebraCommonPluginGeoClass_LIST:
      [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class])) setPointSizeWithInt:self->pointSize_];
      break;
    }
  }
}

- (void)setDefaultLineThicknessWithInt:(jint)lineThickness0 {
  self->lineThickness_ = JavaLangMath_maxWithInt_withInt_(lineThickness0, 1);
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) values])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText] && ![geo isGeoImage]) [geo setLineThicknessWithInt:self->lineThickness_];
    switch ([[geo getGeoClassType] ordinal]) {
      case OrgGeogebraCommonPluginGeoClass_LIST:
      [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class])) setLineThicknessWithInt:self->lineThickness_];
      break;
    }
  }
}

- (void)setDefaultFillingWithFloat:(jfloat)filling0 {
  self->filling_ = filling0;
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) values])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAlphaValueWithFloat:filling0];
  }
}

- (void)resetLabelModeDefaultGeos {
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) values])) {
    ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->labelMode_ = OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT;
    [geo setLabelVisibleWithBoolean:YES];
  }
}

- (void)getDefaultsXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb2d
                      withJavaLangStringBuilder:(JavaLangStringBuilder *)sb3d {
  OrgGeogebraCommonIoMyXMLio_addXMLHeaderWithJavaLangStringBuilder_(sb2d);
  OrgGeogebraCommonIoMyXMLio_addGeoGebraHeaderWithJavaLangStringBuilder_withBoolean_withNSString_(sb2d, YES, nil);
  (void) [((JavaLangStringBuilder *) nil_chk(sb2d)) appendWithNSString:@"<defaults>\n"];
  if (sb3d != nil) {
    OrgGeogebraCommonIoMyXMLio_addXMLHeaderWithJavaLangStringBuilder_(sb3d);
    OrgGeogebraCommonIoMyXMLio_addGeoGebraHeaderWithJavaLangStringBuilder_withBoolean_withNSString_(sb3d, YES, nil);
    (void) [sb3d appendWithNSString:@"<defaults>\n"];
  }
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) values])) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoElement3D]) {
      if (sb3d != nil) {
        [geo getXMLWithBoolean:NO withJavaLangStringBuilder:sb3d];
      }
    }
    else {
      [geo getXMLWithBoolean:NO withJavaLangStringBuilder:sb2d];
    }
  }
  (void) [sb2d appendWithNSString:@"</defaults>\n</geogebra>"];
  if (sb3d != nil) {
    (void) [sb3d appendWithNSString:@"</defaults>\n</geogebra>"];
  }
}

- (void)setConstructionDefaultsWithOrgGeogebraCommonKernelConstructionDefaults:(OrgGeogebraCommonKernelConstructionDefaults *)otherDefaults {
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) values])) {
    OrgGeogebraCommonKernelGeosGeoElement *otherGeo = [((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk(otherDefaults)) getDefaultGeoWithInt:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getDefaultGeoType]];
    if (otherGeo != nil) {
      [geo setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:otherGeo];
    }
  }
}

- (OrgGeogebraCommonAwtGColor *)getNextColor {
  OrgGeogebraCommonAwtGColor *color = colorIndex_ < ((IOSIntArray *) nil_chk(colorSequence_))->size_ ? [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:IOSIntArray_Get(colorSequence_, colorIndex_)] : [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:colorIndex_ * 163 % 255 withInt:colorIndex_ * 103 % 255 withInt:colorIndex_ * 67 % 255];
  colorIndex_++;
  return color;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelConstructionDefaults class]) {
    OrgGeogebraCommonKernelConstructionDefaults_colPoint_ = OrgGeogebraCommonAwtGColor_get_BLUE_();
    OrgGeogebraCommonKernelConstructionDefaults_colDepPoint_ = OrgGeogebraCommonAwtGColor_get_DARK_GRAY_();
    OrgGeogebraCommonKernelConstructionDefaults_colPathPoint_ = OrgGeogebraCommonMainGeoGebraColorConstants_get_LIGHTBLUE_();
    OrgGeogebraCommonKernelConstructionDefaults_colRegionPoint_ = OrgGeogebraCommonKernelConstructionDefaults_colPathPoint_;
    OrgGeogebraCommonKernelConstructionDefaults_colComplexPoint_ = OrgGeogebraCommonKernelConstructionDefaults_colPoint_;
    OrgGeogebraCommonKernelConstructionDefaults_colLine_ = OrgGeogebraCommonAwtGColor_get_BLACK_();
    OrgGeogebraCommonKernelConstructionDefaults_colInequality_ = OrgGeogebraCommonAwtGColor_get_BLUE_();
    OrgGeogebraCommonKernelConstructionDefaults_colConic_ = OrgGeogebraCommonAwtGColor_get_BLACK_();
    OrgGeogebraCommonKernelConstructionDefaults_colPolygon_ = OrgGeogebraCommonMainGeoGebraColorConstants_get_BROWN_();
    OrgGeogebraCommonKernelConstructionDefaults_colAngle_ = OrgGeogebraCommonMainGeoGebraColorConstants_get_DARKGREEN_();
    OrgGeogebraCommonKernelConstructionDefaults_colLocus_ = OrgGeogebraCommonAwtGColor_get_BLACK_();
    OrgGeogebraCommonKernelConstructionDefaults_colFunction_ = OrgGeogebraCommonAwtGColor_get_BLACK_();
    OrgGeogebraCommonKernelConstructionDefaults_colList_ = OrgGeogebraCommonMainGeoGebraColorConstants_get_DARKGREEN_();
    OrgGeogebraCommonKernelConstructionDefaults_colQuadric_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:255 withInt:0 withInt:0];
    OrgGeogebraCommonKernelConstructionDefaults_colPreview_ = OrgGeogebraCommonAwtGColor_get_DARK_GRAY_();
    OrgGeogebraCommonKernelConstructionDefaults_colPreviewFill_ = [OrgGeogebraCommonFactoriesAwtFactory_get_prototype_() newColorWithInt:[((OrgGeogebraCommonAwtGColor *) nil_chk(OrgGeogebraCommonKernelConstructionDefaults_colPolygon_)) getRed] withInt:[OrgGeogebraCommonKernelConstructionDefaults_colPolygon_ getGreen] withInt:[OrgGeogebraCommonKernelConstructionDefaults_colPolygon_ getBlue] withInt:J2ObjCFpToInt((OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON_ALPHA * 255))];
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelConstructionDefaults)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "ConstructionDefaults", NULL, 0x1, NULL, NULL },
    { "getDefaultGeos", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "createDefaultGeoElements", NULL, "V", 0x1, NULL, NULL },
    { "getCDXML", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLWithOrgGeogebraCommonKernelGeosGeoElement:withJavaLangStringBuilder:", "getXML", "V", 0x4, NULL, NULL },
    { "getDefaultGeoWithInt:", "getDefaultGeo", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "addDefaultGeoWithJavaLangInteger:withOrgGeogebraCommonKernelGeosGeoElement:", "addDefaultGeo", "V", 0x1, NULL, NULL },
    { "getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:", "getDefaultType", "I", 0x1, NULL, NULL },
    { "getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonPluginGeoClassEnum:", "getDefaultType", "I", 0x1, NULL, NULL },
    { "setMaxLayerUsedWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonMainApp:", "setMaxLayerUsed", "V", 0xa, NULL, NULL },
    { "setDefaultVisualStylesWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "setDefaultVisualStyles", "V", 0x11, NULL, NULL },
    { "setDefaultVisualStylesWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:withBoolean:", "setDefaultVisualStyles", "V", 0x11, NULL, NULL },
    { "setBlackWhiteModeWithBoolean:", "setBlackWhiteMode", "V", 0x1, NULL, NULL },
    { "getBlackWhiteMode", NULL, "Z", 0x1, NULL, NULL },
    { "resetDefaults", NULL, "V", 0x1, NULL, NULL },
    { "getDefaultLineThickness", NULL, "I", 0x1, NULL, NULL },
    { "getDefaultPointSize", NULL, "I", 0x1, NULL, NULL },
    { "getDefaultAngleSize", NULL, "I", 0x1, NULL, NULL },
    { "setDefaultAngleSizeWithInt:", "setDefaultAngleSize", "V", 0x1, NULL, NULL },
    { "setDefaultPointSizeWithInt:", "setDefaultPointSize", "V", 0x1, NULL, NULL },
    { "setDefaultLineThicknessWithInt:", "setDefaultLineThickness", "V", 0x1, NULL, NULL },
    { "setDefaultFillingWithFloat:", "setDefaultFilling", "V", 0x1, NULL, NULL },
    { "resetLabelModeDefaultGeos", NULL, "V", 0x1, NULL, NULL },
    { "getDefaultsXMLWithJavaLangStringBuilder:withJavaLangStringBuilder:", "getDefaultsXML", "V", 0x1, NULL, NULL },
    { "setConstructionDefaultsWithOrgGeogebraCommonKernelConstructionDefaults:", "setConstructionDefaults", "V", 0x1, NULL, NULL },
    { "getNextColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_POLYGON_ALPHA_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON_ALPHA },
    { "DEFAULT_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_NONE },
    { "DEFAULT_POINT_FREE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE },
    { "DEFAULT_POINT_DEPENDENT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_DEPENDENT },
    { "DEFAULT_POINT_ON_PATH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH },
    { "DEFAULT_POINT_IN_REGION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_IN_REGION },
    { "DEFAULT_POINT_COMPLEX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_COMPLEX },
    { "DEFAULT_POINT_ALL_BUT_COMPLEX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ALL_BUT_COMPLEX },
    { "DEFAULT_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_LINE },
    { "DEFAULT_SEGMENT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_SEGMENT },
    { "DEFAULT_INEQUALITY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY },
    { "DEFAULT_INEQUALITY_1VAR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY_1VAR },
    { "DEFAULT_RAY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_RAY },
    { "DEFAULT_VECTOR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_VECTOR },
    { "DEFAULT_CONIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC },
    { "DEFAULT_CONIC_SECTOR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC_SECTOR },
    { "DEFAULT_NUMBER_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER },
    { "DEFAULT_ANGLE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE },
    { "DEFAULT_FUNCTION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION },
    { "DEFAULT_FUNCTION_NVAR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION_NVAR },
    { "DEFAULT_POLYGON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON },
    { "DEFAULT_POLYLINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYLINE },
    { "DEFAULT_LOCUS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_LOCUS },
    { "DEFAULT_TEXT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_TEXT },
    { "DEFAULT_IMAGE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_IMAGE },
    { "DEFAULT_BOOLEAN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_BOOLEAN },
    { "DEFAULT_LIST_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_LIST },
    { "colPoint_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colPoint_, NULL,  },
    { "colDepPoint_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colDepPoint_, NULL,  },
    { "colPathPoint_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colPathPoint_, NULL,  },
    { "colRegionPoint_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colRegionPoint_, NULL,  },
    { "colComplexPoint_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colComplexPoint_, NULL,  },
    { "colLine_", NULL, 0x1a, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colLine_, NULL,  },
    { "colInequality_", NULL, 0x1a, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colInequality_, NULL,  },
    { "colConic_", NULL, 0x1c, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colConic_, NULL,  },
    { "DEFAULT_CONIC_ALPHA_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC_ALPHA },
    { "colPolygon_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colPolygon_, NULL,  },
    { "DEFAULT_INEQUALITY_ALPHA_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY_ALPHA },
    { "colAngle_", NULL, 0x1a, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colAngle_, NULL,  },
    { "DEFAULT_ANGLE_ALPHA_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE_ALPHA },
    { "DEFAULT_NUMBER_ALPHA_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER_ALPHA },
    { "colLocus_", NULL, 0x1a, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colLocus_, NULL,  },
    { "colFunction_", NULL, 0x1a, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colFunction_, NULL,  },
    { "colList_", NULL, 0x1a, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colList_, NULL,  },
    { "DEFAULT_QUADRIC_ALPHA_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_QUADRIC_ALPHA },
    { "colQuadric_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colQuadric_, NULL,  },
    { "colPreview_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colPreview_, NULL,  },
    { "colPreviewFill_", NULL, 0x19, "Lorg.geogebra.common.awt.GColor;", &OrgGeogebraCommonKernelConstructionDefaults_colPreviewFill_, NULL,  },
    { "LABEL_VISIBLE_AUTOMATIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_AUTOMATIC },
    { "LABEL_VISIBLE_ALWAYS_ON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_ALWAYS_ON },
    { "LABEL_VISIBLE_ALWAYS_OFF_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_ALWAYS_OFF },
    { "LABEL_VISIBLE_POINTS_ONLY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_POINTS_ONLY },
    { "LABEL_VISIBLE_USE_DEFAULTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_USE_DEFAULTS },
    { "DEFAULT_BUTTON_SIZE_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_BUTTON_SIZE },
    { "cons_", NULL, 0x4, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
    { "defaultGeoElements_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/Integer;Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "lineThickness_", NULL, 0x2, "I", NULL, NULL,  },
    { "pointSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "angleSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "filling_", NULL, 0x2, "F", NULL, NULL,  },
    { "blackWhiteMode_", NULL, 0x2, "Z", NULL, NULL,  },
    { "strFree_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "strDependent_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "colorIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "colorSequence_", NULL, 0x2, "[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelConstructionDefaults = { 2, "ConstructionDefaults", "org.geogebra.common.kernel", NULL, 0x1, 26, methods, 65, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelConstructionDefaults;
}

@end

void OrgGeogebraCommonKernelConstructionDefaults_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstructionDefaults *self, OrgGeogebraCommonKernelConstruction *cons2) {
  (void) NSObject_init(self);
  self->lineThickness_ = OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_THICKNESS;
  self->pointSize_ = OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE;
  self->angleSize_ = OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_ANGLE_SIZE;
  self->filling_ = OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON_ALPHA;
  self->blackWhiteMode_ = NO;
  self->strFree_ = @" (free)";
  self->strDependent_ = @" (dependent)";
  self->colorIndex_ = 0;
  self->colorSequence_ = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x3333CC, (jint) 0x006600, (jint) 0xFF3300, (jint) 0x990066, (jint) 0x9966FF, (jint) 0x339900, (jint) 0xCC0099, (jint) 0x0066FF, (jint) 0x009999, (jint) 0x660000, (jint) 0x333333 } count:11];
  self->cons_ = cons2;
  [self createDefaultGeoElements];
}

OrgGeogebraCommonKernelConstructionDefaults *new_OrgGeogebraCommonKernelConstructionDefaults_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *cons2) {
  OrgGeogebraCommonKernelConstructionDefaults *self = [OrgGeogebraCommonKernelConstructionDefaults alloc];
  OrgGeogebraCommonKernelConstructionDefaults_initWithOrgGeogebraCommonKernelConstruction_(self, cons2);
  return self;
}

void OrgGeogebraCommonKernelConstructionDefaults_setMaxLayerUsedWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonMainApp_(OrgGeogebraCommonKernelGeosGeoElement *geo, OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonKernelConstructionDefaults_initialize();
  if (app != nil) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLayerWithInt:[app getMaxLayerUsed]];
  }
}

void OrgGeogebraCommonKernelConstructionDefaults_setDefaultVisualStylesWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(OrgGeogebraCommonKernelConstructionDefaults *self, OrgGeogebraCommonKernelGeosGeoElement *geo, jboolean isReset, jboolean setEuclidianVisible) {
  jint type = [self getDefaultTypeWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  OrgGeogebraCommonKernelGeosGeoElement *defaultGeo = [self getDefaultGeoWithInt:type];
  OrgGeogebraCommonMainApp *app = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getApplication];
  jboolean defaultLabelMode = YES;
  if (defaultGeo != nil) {
    if (!setEuclidianVisible || [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAllVisualPropertiesExceptEuclidianVisibleWithOrgGeogebraCommonKernelGeosGeoElement:defaultGeo withBoolean:isReset];
    }
    else {
      [geo setAllVisualPropertiesWithOrgGeogebraCommonKernelGeosGeoElement:defaultGeo withBoolean:isReset];
    }
    if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAlphaValueWithFloat:[defaultGeo getAlphaValue]];
    if (!isReset) {
      OrgGeogebraCommonKernelConstructionDefaults_setMaxLayerUsedWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonMainApp_(geo, app);
    }
    defaultLabelMode = ([defaultGeo getLabelMode] == OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT);
  }
  if (defaultLabelMode) {
    jint labelingStyle = app == nil ? OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_USE_DEFAULTS : [app getCurrentLabelingStyle];
    switch (labelingStyle) {
      case OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_ALWAYS_ON:
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelVisibleWithBoolean:YES];
      break;
      case OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_ALWAYS_OFF:
      [geo setLabelVisibleWithBoolean:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]];
      break;
      case OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_POINTS_ONLY:
      [geo setLabelVisibleWithBoolean:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint] || [geo isGeoNumeric]];
      break;
      default:
      case OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_USE_DEFAULTS:
      break;
    }
  }
  if (self->blackWhiteMode_) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_BLACK_()];
    [geo setAlphaValueWithFloat:0.0f];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelConstructionDefaults)
