//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/scripting/CmdTurtleCommand.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/CmdScripting.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoTurtle.h"
#include "org/geogebra/common/kernel/scripting/CmdTurtleCommand.h"
#include "org/geogebra/common/main/MyError.h"

@implementation OrgGeogebraCommonKernelScriptingCmdTurtleCommand

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelScriptingCmdTurtleCommand_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoTurtle *)getTurtleWithOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)args {
  return (OrgGeogebraCommonKernelGeosGeoTurtle *) check_class_cast(IOSObjectArray_Get(nil_chk(args), 0), [OrgGeogebraCommonKernelGeosGeoTurtle class]);
}

- (jdouble)getNumArgWithNSString:(NSString *)cname
withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)args {
  if (((IOSObjectArray *) nil_chk(args))->size_ != 2) {
    @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:cname withInt:args->size_];
  }
  if (!([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(args, 1)])) {
    @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:cname withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(args, 1)];
  }
  return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(args, 1), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
}

- (void)performTurtleCommandWithNSString:(NSString *)cname
withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)args {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (IOSObjectArray *)performWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  if (n < 1) {
    @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
  IOSObjectArray *args = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(args), 0))) isGeoTurtle]) {
    @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(args, 0)];
  }
  [self performTurtleCommandWithNSString:[c getName] withOrgGeogebraCommonKernelGeosGeoElementArray:args];
  return args;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdTurtleCommand", NULL, 0x1, NULL, NULL },
    { "getTurtleWithOrgGeogebraCommonKernelGeosGeoElementArray:", "getTurtle", "Lorg.geogebra.common.kernel.geos.GeoTurtle;", 0x14, NULL, NULL },
    { "getNumArgWithNSString:withOrgGeogebraCommonKernelGeosGeoElementArray:", "getNumArg", "D", 0x14, "Lorg.geogebra.common.main.MyError;", NULL },
    { "performTurtleCommandWithNSString:withOrgGeogebraCommonKernelGeosGeoElementArray:", "performTurtleCommand", "V", 0x404, "Lorg.geogebra.common.main.MyError;", NULL },
    { "performWithOrgGeogebraCommonKernelArithmeticCommand:", "perform", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, "Lorg.geogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelScriptingCmdTurtleCommand = { 2, "CmdTurtleCommand", "org.geogebra.common.kernel.scripting", NULL, 0x401, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelScriptingCmdTurtleCommand;
}

@end

void OrgGeogebraCommonKernelScriptingCmdTurtleCommand_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelScriptingCmdTurtleCommand *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCmdScripting_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelScriptingCmdTurtleCommand)
