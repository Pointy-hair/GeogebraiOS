//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/scripting/CmdZoomOut.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/commands/CmdScripting.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/scripting/CmdZoomOut.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/MyError.h"

@implementation OrgGeogebraCommonKernelScriptingCmdZoomOut

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelScriptingCmdZoomOut_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)performWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  {
    IOSObjectArray *arg;
    jboolean ok0;
    switch (n) {
      case 1:
      arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoNumeric]) {
        OrgGeogebraCommonKernelGeosGeoNumeric *numGeo = (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoNumeric class]);
        id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim> ev = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView];
        jdouble px = [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(ev)) getWidth] / 2.0;
        jdouble py = [ev getHeight] / 2.0;
        jdouble factor = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(numGeo)) getDouble];
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(factor)) @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
        [ev zoomWithDouble:px withDouble:py withDouble:1 / factor withInt:4 withBoolean:YES];
        [app_ setUnsaved];
        return arg;
      }
      @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      case 2:
      arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
      if ((ok0 = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoNumeric]) && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPoint]) {
        OrgGeogebraCommonKernelGeosGeoNumeric *numGeo = (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoNumeric class]);
        OrgGeogebraCommonKernelGeosGeoPoint *p = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 1), [OrgGeogebraCommonKernelGeosGeoPoint class]);
        id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon> ev = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView];
        jdouble px = [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) toScreenCoordXdWithDouble:((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_];
        jdouble py = [ev toScreenCoordYdWithDouble:p->inhomY_];
        jdouble factor = [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(numGeo)) getDouble];
        if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(factor)) @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
        [ev zoomWithDouble:px withDouble:py withDouble:1 / factor withInt:4 withBoolean:YES];
        [app_ setUnsaved];
        return arg;
      }
      @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:ok0 ? IOSObjectArray_Get(arg, 1) : IOSObjectArray_Get(arg, 0)];
      default:
      @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdZoomOut", NULL, 0x1, NULL, NULL },
    { "performWithOrgGeogebraCommonKernelArithmeticCommand:", "perform", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, "Lorg.geogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelScriptingCmdZoomOut = { 2, "CmdZoomOut", "org.geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelScriptingCmdZoomOut;
}

@end

void OrgGeogebraCommonKernelScriptingCmdZoomOut_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelScriptingCmdZoomOut *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCmdScripting_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelScriptingCmdZoomOut *new_OrgGeogebraCommonKernelScriptingCmdZoomOut_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelScriptingCmdZoomOut *self = [OrgGeogebraCommonKernelScriptingCmdZoomOut alloc];
  OrgGeogebraCommonKernelScriptingCmdZoomOut_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelScriptingCmdZoomOut)
