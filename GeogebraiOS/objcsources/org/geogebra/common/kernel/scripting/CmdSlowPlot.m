//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/scripting/CmdSlowPlot.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/kernel/AnimationManager.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/scripting/CmdSlowPlot.h"
#include "org/geogebra/common/main/MyError.h"

@implementation OrgGeogebraCommonKernelScriptingCmdSlowPlot

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelScriptingCmdSlowPlot_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
  switch (n) {
    case 1:
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoFunctionable]) {
      OrgGeogebraCommonKernelGeosGeoNumeric *var = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, 0.0);
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) setEuclidianVisibleWithBoolean:NO];
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) update];
      [var setLabelWithNSString:nil];
      [var setEuclidianVisibleWithBoolean:YES];
      [var setIntervalMinWithDouble:0.0];
      [var setIntervalMaxWithDouble:1.0];
      [var setAnimatingWithBoolean:YES];
      [var setAnimationStepWithDouble:0.01];
      [var setAnimationTypeWithInt:OrgGeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING];
      [var update];
      OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_maxPrecision_();
      JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
      (void) [sb appendWithNSString:@"Function["];
      (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      (void) [sb appendWithNSString:@",x(Corner[1]), x(Corner[1]) (1-"];
      (void) [sb appendWithNSString:[var getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      (void) [sb appendWithNSString:@") + x(Corner(2)) "];
      (void) [sb appendWithNSString:[var getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      (void) [sb appendWithNSString:@"]"];
      [((OrgGeogebraCommonKernelAnimationManager *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernelA_)) getAnimatonManager])) startAnimation];
      @try {
        return [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernelA_ getAlgebraProcessor])) processAlgebraCommandNoExceptionHandlingWithNSString:[sb description] withBoolean:YES withBoolean:NO withBoolean:YES withBoolean:NO];
      }
      @catch (JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
        @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      @catch (OrgGeogebraCommonMainMyError *e) {
        [((OrgGeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
        @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
    }
    @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    default:
    @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdSlowPlot", NULL, 0x1, NULL, NULL },
    { "processWithOrgGeogebraCommonKernelArithmeticCommand:", "process", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, "Lorg.geogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelScriptingCmdSlowPlot = { 2, "CmdSlowPlot", "org.geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelScriptingCmdSlowPlot;
}

@end

void OrgGeogebraCommonKernelScriptingCmdSlowPlot_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelScriptingCmdSlowPlot *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCommandProcessor_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelScriptingCmdSlowPlot *new_OrgGeogebraCommonKernelScriptingCmdSlowPlot_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelScriptingCmdSlowPlot *self = [OrgGeogebraCommonKernelScriptingCmdSlowPlot alloc];
  OrgGeogebraCommonKernelScriptingCmdSlowPlot_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelScriptingCmdSlowPlot)
