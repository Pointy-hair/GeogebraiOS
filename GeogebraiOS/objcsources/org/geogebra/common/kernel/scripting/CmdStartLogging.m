//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/scripting/CmdStartLogging.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/commands/CmdScripting.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/scripting/CmdStartLogging.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/SensorLogger.h"

@implementation OrgGeogebraCommonKernelScriptingCmdStartLogging

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelScriptingCmdStartLogging_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)performWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
  jboolean success = NO;
  OrgGeogebraCommonPluginSensorLogger *logger = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getSensorLogger];
  if (logger != nil) {
    [logger stopLogging];
    OrgGeogebraCommonKernelGeosGeoElement *argument = nil;
    OrgGeogebraCommonKernelGeosGeoElement *limit = nil;
    jint offset = 0;
    if ([OrgGeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)]) {
      [logger setLimitWithDouble:[((id<OrgGeogebraCommonKernelGeosGeoNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelGeosGeoNumberValue))))) getDouble]];
      offset++;
    }
    else {
      [logger setLimitWithDouble:OrgGeogebraCommonPluginSensorLogger_DEFAULT_LIMIT];
    }
    for (jint i = offset; i <= n - 2; i += 2) {
      argument = IOSObjectArray_Get(arg, i + 1);
      if (!([IOSObjectArray_Get(arg, i) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoText class]])) {
        @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, i)];
      }
      NSString *varName = [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(arg, i), [OrgGeogebraCommonKernelGeosGeoText class])))) getTextString];
      if ([argument isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]] || [argument isKindOfClass:[OrgGeogebraCommonKernelGeosGeoText class]]) {
        [logger registerGeoWithNSString:varName withOrgGeogebraCommonKernelGeosGeoElement:argument];
      }
      else if ([argument isKindOfClass:[OrgGeogebraCommonKernelGeosGeoList class]]) {
        if ((i < n - 2) && [(limit = IOSObjectArray_Get(arg, i + 2)) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) {
          [logger registerGeoListWithNSString:varName withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(argument, [OrgGeogebraCommonKernelGeosGeoList class]) withDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(limit, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getValue]];
          i++;
        }
        else {
          [logger registerGeoListWithNSString:varName withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(argument, [OrgGeogebraCommonKernelGeosGeoList class])];
        }
      }
      else if ([argument isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
        if ((i < n - 2) && [(limit = IOSObjectArray_Get(arg, i + 2)) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) {
          [logger registerGeoFunctionWithNSString:varName withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(argument, [OrgGeogebraCommonKernelGeosGeoFunction class]) withDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(limit, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getValue]];
          i++;
        }
        else {
          [logger registerGeoFunctionWithNSString:varName withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(argument, [OrgGeogebraCommonKernelGeosGeoFunction class])];
        }
      }
      else {
        @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:argument];
      }
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(argument)) isLabelSet]) {
        [argument setLabelWithNSString:varName];
      }
    }
    success = [logger startLogging];
  }
  if (!success) {
    @throw new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_(loc_, [((OrgGeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"NoLogging"]);
  }
  return arg;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdStartLogging", NULL, 0x1, NULL, NULL },
    { "performWithOrgGeogebraCommonKernelArithmeticCommand:", "perform", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelScriptingCmdStartLogging = { 2, "CmdStartLogging", "org.geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelScriptingCmdStartLogging;
}

@end

void OrgGeogebraCommonKernelScriptingCmdStartLogging_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelScriptingCmdStartLogging *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCmdScripting_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelScriptingCmdStartLogging *new_OrgGeogebraCommonKernelScriptingCmdStartLogging_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelScriptingCmdStartLogging *self = [OrgGeogebraCommonKernelScriptingCmdStartLogging alloc];
  OrgGeogebraCommonKernelScriptingCmdStartLogging_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelScriptingCmdStartLogging)
