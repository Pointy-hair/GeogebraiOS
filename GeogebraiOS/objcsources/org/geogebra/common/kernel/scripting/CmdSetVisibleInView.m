//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/scripting/CmdSetVisibleInView.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "org/geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/CmdScripting.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/scripting/CmdSetVisibleInView.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/MyError.h"

@implementation OrgGeogebraCommonKernelScriptingCmdSetVisibleInView

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelScriptingCmdSetVisibleInView_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)performWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  {
    IOSObjectArray *arg;
    switch (n) {
      case 3:
      arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
      if (!([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 1)])) @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoBoolean]) {
        OrgGeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(arg, 0);
        jint viewNo = J2ObjCFpToInt([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble]);
        id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim> ev = nil;
        switch (viewNo) {
          case 1:
          ev = [((OrgGeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1];
          break;
          case 2:
          if (![((OrgGeogebraCommonMainApp *) nil_chk(app_)) hasEuclidianView2WithInt:1]) break;
          ev = [app_ getEuclidianView2WithInt:1];
          break;
          case -1:
          if (![((OrgGeogebraCommonMainApp *) nil_chk(app_)) hasEuclidianView3D]) break;
          ev = [app_ getEuclidianView3D];
          break;
          default:
          ;
        }
        if (ev != nil) {
          jboolean show = [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(((OrgGeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, 2), [OrgGeogebraCommonKernelGeosGeoBoolean class])))) getBoolean];
          if (show) {
            [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setEuclidianVisibleWithBoolean:YES];
            [geo addViewWithInt:[ev getViewID]];
            [ev addWithOrgGeogebraCommonKernelGeosGeoElement:geo];
          }
          else {
            [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) removeViewWithInt:[ev getViewID]];
            [ev removeWithOrgGeogebraCommonKernelGeosGeoElement:geo];
          }
          [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateRepaint];
        }
        return arg;
      }
      @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 2)];
      default:
      @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdSetVisibleInView", NULL, 0x1, NULL, NULL },
    { "performWithOrgGeogebraCommonKernelArithmeticCommand:", "perform", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, "Lorg.geogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelScriptingCmdSetVisibleInView = { 2, "CmdSetVisibleInView", "org.geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelScriptingCmdSetVisibleInView;
}

@end

void OrgGeogebraCommonKernelScriptingCmdSetVisibleInView_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelScriptingCmdSetVisibleInView *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCmdScripting_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelScriptingCmdSetVisibleInView *new_OrgGeogebraCommonKernelScriptingCmdSetVisibleInView_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelScriptingCmdSetVisibleInView *self = [OrgGeogebraCommonKernelScriptingCmdSetVisibleInView alloc];
  OrgGeogebraCommonKernelScriptingCmdSetVisibleInView_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelScriptingCmdSetVisibleInView)
