//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/scripting/CmdSetValue.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/SetRandomValue.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentNumber.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/CmdScripting.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionable.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/scripting/CmdSetValue.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/debug/Log.h"

@implementation OrgGeogebraCommonKernelScriptingCmdSetValue

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelScriptingCmdSetValue_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)performWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
  jboolean ok;
  switch (n) {
    case 2:
    OrgGeogebraCommonKernelScriptingCmdSetValue_setValue2WithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(IOSObjectArray_Get(nil_chk(arg), 0), IOSObjectArray_Get(arg, 1));
    return arg;
    case 3:
    if ((ok = ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isIndependent])) && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)]) {
      jboolean success = OrgGeogebraCommonKernelScriptingCmdSetValue_setValue3WithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelGeosGeoList_withInt_withOrgGeogebraCommonKernelGeosGeoElement_(kernelA_, (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [OrgGeogebraCommonKernelGeosGeoList class]), J2ObjCFpToInt([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble]), IOSObjectArray_Get(arg, 2));
      if (!success) {
        @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      }
    }
    else @throw [self argErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withOrgGeogebraCommonKernelArithmeticExpressionValue:ok ? IOSObjectArray_Get(arg, 1) : IOSObjectArray_Get(arg, 0)];
    return arg;
    default:
    @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (jboolean)setValue3WithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                withOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)list
                                               withInt:(jint)nn
             withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)arg2 {
  return OrgGeogebraCommonKernelScriptingCmdSetValue_setValue3WithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelGeosGeoList_withInt_withOrgGeogebraCommonKernelGeosGeoElement_(kernel, list, nn, arg2);
}

+ (void)setValue2WithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)arg0
                 withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)arg1 {
  OrgGeogebraCommonKernelScriptingCmdSetValue_setValue2WithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(arg0, arg1);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdSetValue", NULL, 0x1, NULL, NULL },
    { "performWithOrgGeogebraCommonKernelArithmeticCommand:", "perform", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, "Lorg.geogebra.common.main.MyError;", NULL },
    { "setValue3WithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelGeosGeoList:withInt:withOrgGeogebraCommonKernelGeosGeoElement:", "setValue3", "Z", 0x9, NULL, NULL },
    { "setValue2WithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "setValue2", "V", 0x9, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelScriptingCmdSetValue = { 2, "CmdSetValue", "org.geogebra.common.kernel.scripting", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelScriptingCmdSetValue;
}

@end

void OrgGeogebraCommonKernelScriptingCmdSetValue_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelScriptingCmdSetValue *self, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelCommandsCmdScripting_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelScriptingCmdSetValue *new_OrgGeogebraCommonKernelScriptingCmdSetValue_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelScriptingCmdSetValue *self = [OrgGeogebraCommonKernelScriptingCmdSetValue alloc];
  OrgGeogebraCommonKernelScriptingCmdSetValue_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

jboolean OrgGeogebraCommonKernelScriptingCmdSetValue_setValue3WithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelGeosGeoList_withInt_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelGeosGeoList *list, jint nn, OrgGeogebraCommonKernelGeosGeoElement *arg2) {
  OrgGeogebraCommonKernelScriptingCmdSetValue_initialize();
  if (nn < 1 || nn > [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list)) size] + 1) {
    return NO;
  }
  if (nn > [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list)) size]) {
    [list addWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(arg2)) deepCopyWithOrgGeogebraCommonKernelKernel:kernel], [OrgGeogebraCommonKernelGeosGeoElement class])];
    [list updateRepaint];
    return YES;
  }
  OrgGeogebraCommonKernelGeosGeoElement *geo = [list getWithInt:nn - 1];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent]) {
    if ([geo isGeoNumeric] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:arg2]) {
      id<OrgGeogebraCommonKernelArithmeticNumberValue> num = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(arg2, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class])) setValueWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble]];
    }
    else {
      [geo setWithOrgGeogebraCommonKernelGeosGeoElement:arg2];
    }
  }
  else {
    OrgGeogebraCommonUtilDebugLog_debugWithId_([geo getParentAlgorithm]);
  }
  [geo updateRepaint];
  if (![geo isLabelSet]) {
    id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction])) getGeoSetConstructionOrder])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonKernelGeosGeoElement *geo2 = [it next];
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) isGeoList]) {
        OrgGeogebraCommonKernelGeosGeoList *gl = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo2, [OrgGeogebraCommonKernelGeosGeoList class]);
        for (jint i = 0; i < [gl size]; i++) {
          if ([gl getWithInt:i] == geo) [gl updateRepaint];
        }
      }
    }
  }
  return YES;
}

void OrgGeogebraCommonKernelScriptingCmdSetValue_setValue2WithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *arg0, OrgGeogebraCommonKernelGeosGeoElement *arg1) {
  OrgGeogebraCommonKernelScriptingCmdSetValue_initialize();
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(arg0)) isGeoFunction] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(arg1)) isGeoFunctionable]) {
    OrgGeogebraCommonKernelGeosGeoFunction *fun = (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(arg0, [OrgGeogebraCommonKernelGeosGeoFunction class]);
    id<OrgGeogebraCommonKernelGeosGeoFunctionable> val = (id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(arg1, @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable));
    [fun setWithOrgGeogebraCommonKernelGeosGeoElement:[val getGeoFunction]];
    [fun updateRepaint];
  }
  else if ([arg0 isGeoList] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(arg1)) isNumberValue]) {
    [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(arg0, [OrgGeogebraCommonKernelGeosGeoList class])) setSelectedIndexWithInt:(jint) JavaLangMath_roundWithDouble_([arg1 evaluateDouble]) - 1 withBoolean:YES];
  }
  else if ([arg0 isIndependent] || [arg0 isMoveable]) {
    if ([arg0 isGeoNumeric] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:arg1]) {
      id<OrgGeogebraCommonKernelArithmeticNumberValue> num = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(arg1, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(arg0, [OrgGeogebraCommonKernelGeosGeoNumeric class])) setValueWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble]];
    }
    else {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(arg1)) isGeoNumeric] && JavaLangDouble_isNaNWithDouble_([arg1 evaluateDouble])) {
        [arg0 setUndefined];
      }
      else {
        [arg0 setWithOrgGeogebraCommonKernelGeosGeoElement:arg1];
      }
    }
    [arg0 updateRepaint];
  }
  else if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:arg1] && [arg0 isGeoNumeric] && [OrgGeogebraCommonKernelSetRandomValue_class_() isInstance:[arg0 getParentAlgorithm]]) {
    id<OrgGeogebraCommonKernelSetRandomValue> algo = (id<OrgGeogebraCommonKernelSetRandomValue>) check_protocol_cast([arg0 getParentAlgorithm], @protocol(OrgGeogebraCommonKernelSetRandomValue));
    [((id<OrgGeogebraCommonKernelSetRandomValue>) nil_chk(algo)) setRandomValueWithDouble:[((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(arg1, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble]];
  }
  else if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:arg1] && [[arg0 getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoDependentNumber class]]) {
    jdouble val = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(arg1, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    if (val >= 0 && val <= 1) {
      OrgGeogebraCommonKernelAlgosAlgoDependentNumber *al = (OrgGeogebraCommonKernelAlgosAlgoDependentNumber *) check_class_cast([arg0 getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoDependentNumber class]);
      OrgGeogebraCommonKernelArithmeticExpressionNode *en = [((OrgGeogebraCommonKernelAlgosAlgoDependentNumber *) nil_chk(al)) getExpression];
      if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_RANDOM()]) {
        OrgGeogebraCommonKernelGeosGeoNumeric *num = ((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([al getOutput]), 0), [OrgGeogebraCommonKernelGeosGeoNumeric class]));
        [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(num)) setValueWithDouble:val];
        [num updateRepaint];
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelScriptingCmdSetValue)
