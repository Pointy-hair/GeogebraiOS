//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/scripting/CmdDelete.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Error.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/gui/view/spreadsheet/CopyPasteCut.h"
#include "org/geogebra/common/gui/view/spreadsheet/MyTableInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentGeoCopy.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/commands/CmdScripting.h"
#include "org/geogebra/common/kernel/commands/CommandProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "org/geogebra/common/kernel/scripting/CmdDelete.h"
#include "org/geogebra/common/kernel/statistics/AlgoCellRange.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/MyError.h"

@implementation OrgGeogebraCommonKernelScriptingCmdDelete

- (instancetype)initWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  OrgGeogebraCommonKernelScriptingCmdDelete_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)performWithOrgGeogebraCommonKernelArithmeticCommand:(OrgGeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  {
    IOSObjectArray *arg;
    OrgGeogebraCommonKernelGeosGeoElement *geo;
    OrgGeogebraCommonKernelAlgosAlgoElement *algoParent;
    switch (n) {
      case 1:
      @try {
        arg = [self resArgsWithOrgGeogebraCommonKernelArithmeticCommand:c];
      }
      @catch (JavaLangError *e) {
        return [IOSObjectArray newArrayWithLength:0 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
      }
      OrgGeogebraCommonMainApp_printStacktraceWithId_(@"");
      geo = IOSObjectArray_Get(nil_chk(arg), 0);
      algoParent = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm];
      if (algoParent != nil && [algoParent isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoDependentGeoCopy class]]) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([algoParent getInputWithInt:0])) removeOrSetUndefinedIfHasFixedDescendent];
      }
      else if (algoParent != nil && [algoParent isKindOfClass:[OrgGeogebraCommonKernelStatisticsAlgoCellRange class]]) {
        OrgGeogebraCommonKernelStatisticsAlgoCellRange *algo = (OrgGeogebraCommonKernelStatisticsAlgoCellRange *) check_class_cast(algoParent, [OrgGeogebraCommonKernelStatisticsAlgoCellRange class]);
        OrgGeogebraCommonAwtGPoint *startCoords = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_([algo getStart]);
        OrgGeogebraCommonAwtGPoint *endCoords = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_([algo getEnd]);
        OrgGeogebraCommonGuiViewSpreadsheetCopyPasteCut_delete__WithOrgGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_(app_, ((OrgGeogebraCommonAwtGPoint *) nil_chk(startCoords))->x_, startCoords->y_, ((OrgGeogebraCommonAwtGPoint *) nil_chk(endCoords))->x_, endCoords->y_, OrgGeogebraCommonGuiViewSpreadsheetMyTableInterface_CELL_SELECT);
      }
      else if ([geo isLabelSet]) {
        [geo removeOrSetUndefinedIfHasFixedDescendent];
      }
      return arg;
      default:
      @throw [self argNumErrWithOrgGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelKernel:", "CmdDelete", NULL, 0x1, NULL, NULL },
    { "performWithOrgGeogebraCommonKernelArithmeticCommand:", "perform", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x14, "Lorg.geogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelScriptingCmdDelete = { 2, "CmdDelete", "org.geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelScriptingCmdDelete;
}

@end

void OrgGeogebraCommonKernelScriptingCmdDelete_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelScriptingCmdDelete *self, OrgGeogebraCommonKernelKernel *kernel) {
  (void) OrgGeogebraCommonKernelCommandsCmdScripting_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
}

OrgGeogebraCommonKernelScriptingCmdDelete *new_OrgGeogebraCommonKernelScriptingCmdDelete_initWithOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelScriptingCmdDelete *self = [OrgGeogebraCommonKernelScriptingCmdDelete alloc];
  OrgGeogebraCommonKernelScriptingCmdDelete_initWithOrgGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelScriptingCmdDelete)
