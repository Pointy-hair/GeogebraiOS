//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/barycentric/AlgoKimberling.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/barycentric/AlgoKimberling.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/main/AlgoKimberlingWeightsInterface.h"
#include "org/geogebra/common/main/AlgoKimberlingWeightsParams.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelBarycentricAlgoKimberling () {
 @public
  OrgGeogebraCommonKernelGeosGeoPoint *A_, *B_, *C_;
  OrgGeogebraCommonKernelGeosGeoPoint *M_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> n_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelBarycentricAlgoKimberling, A_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelBarycentricAlgoKimberling, B_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelBarycentricAlgoKimberling, C_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelBarycentricAlgoKimberling, M_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelBarycentricAlgoKimberling, n_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)

__attribute__((unused)) static void OrgGeogebraCommonKernelBarycentricAlgoKimberling_compute(OrgGeogebraCommonKernelBarycentricAlgoKimberling *self);

@implementation OrgGeogebraCommonKernelBarycentricAlgoKimberling

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)A
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)B
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)C
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)n {
  OrgGeogebraCommonKernelBarycentricAlgoKimberling_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, A, B, C, n);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_TriangleCenter();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, A_);
  (void) IOSObjectArray_Set(input_, 1, B_);
  (void) IOSObjectArray_Set(input_, 2, C_);
  (void) IOSObjectArray_Set(input_, 3, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(n_)) toGeoElement]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:M_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getResult {
  return M_;
}

- (void)compute {
  OrgGeogebraCommonKernelBarycentricAlgoKimberling_compute(self);
}

- (jboolean)isLocusEquable {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoKimberling", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "B_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "C_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "M_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelBarycentricAlgoKimberling = { 2, "AlgoKimberling", "org.geogebra.common.kernel.barycentric", NULL, 0x1, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelBarycentricAlgoKimberling;
}

@end

void OrgGeogebraCommonKernelBarycentricAlgoKimberling_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelBarycentricAlgoKimberling *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *A, OrgGeogebraCommonKernelGeosGeoPoint *B, OrgGeogebraCommonKernelGeosGeoPoint *C, id<OrgGeogebraCommonKernelArithmeticNumberValue> n) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  (void) [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getAlgoKimberlingWeights];
  self->A_ = A;
  self->B_ = B;
  self->C_ = C;
  self->n_ = n;
  self->M_ = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelBarycentricAlgoKimberling_compute(self);
  [self->M_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelBarycentricAlgoKimberling *new_OrgGeogebraCommonKernelBarycentricAlgoKimberling_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *A, OrgGeogebraCommonKernelGeosGeoPoint *B, OrgGeogebraCommonKernelGeosGeoPoint *C, id<OrgGeogebraCommonKernelArithmeticNumberValue> n) {
  OrgGeogebraCommonKernelBarycentricAlgoKimberling *self = [OrgGeogebraCommonKernelBarycentricAlgoKimberling alloc];
  OrgGeogebraCommonKernelBarycentricAlgoKimberling_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, A, B, C, n);
  return self;
}

void OrgGeogebraCommonKernelBarycentricAlgoKimberling_compute(OrgGeogebraCommonKernelBarycentricAlgoKimberling *self) {
  jdouble c = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->A_)) distanceWithOrgGeogebraCommonKernelGeosGeoPoint:self->B_];
  jdouble b = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->C_)) distanceWithOrgGeogebraCommonKernelGeosGeoPoint:self->A_];
  jdouble a = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->B_)) distanceWithOrgGeogebraCommonKernelGeosGeoPoint:self->C_];
  jdouble m = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_minWithDouble_withDouble_(a, b), c);
  a = a / m;
  b = b / m;
  c = c / m;
  jint k = J2ObjCFpToInt([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->n_)) getDouble]);
  if ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getAlgoKimberlingWeights] == nil) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->M_)) setUndefined];
  }
  else {
    jdouble wA = [((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) kimberlingWeightWithOrgGeogebraCommonMainAlgoKimberlingWeightsParams:new_OrgGeogebraCommonMainAlgoKimberlingWeightsParams_initWithInt_withDouble_withDouble_withDouble_(k, a, b, c)];
    jdouble wB = [((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) kimberlingWeightWithOrgGeogebraCommonMainAlgoKimberlingWeightsParams:new_OrgGeogebraCommonMainAlgoKimberlingWeightsParams_initWithInt_withDouble_withDouble_withDouble_(k, b, c, a)];
    jdouble wC = [((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) kimberlingWeightWithOrgGeogebraCommonMainAlgoKimberlingWeightsParams:new_OrgGeogebraCommonMainAlgoKimberlingWeightsParams_initWithInt_withDouble_withDouble_withDouble_(k, c, a, b)];
    jdouble w = wA + wB + wC;
    if (JavaLangDouble_isNaNWithDouble_(w) || OrgGeogebraCommonKernelKernel_isZeroWithDouble_(w)) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->M_)) setUndefined];
    else [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->M_)) setCoordsWithDouble:(self->A_->x_ / self->A_->z_ * wA + self->B_->x_ / self->B_->z_ * wB + self->C_->x_ / self->C_->z_ * wC) / w withDouble:(self->A_->y_ / self->A_->z_ * wA + self->B_->y_ / self->B_->z_ * wB + self->C_->y_ / self->C_->z_ * wC) / w withDouble:1];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelBarycentricAlgoKimberling)
