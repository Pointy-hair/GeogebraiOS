//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/barycentric/AlgoCubic.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/barycentric/AlgoCubic.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/parser/ParseException.h"
#include "org/geogebra/common/kernel/parser/Parser.h"
#include "org/geogebra/common/main/AlgoCubicSwitchInterface.h"
#include "org/geogebra/common/main/AlgoCubicSwitchParams.h"
#include "org/geogebra/common/main/App.h"

@interface OrgGeogebraCommonKernelBarycentricAlgoCubic () {
 @public
  OrgGeogebraCommonKernelGeosGeoPoint *A_, *B_, *C_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> n_;
  OrgGeogebraCommonKernelImplicitGeoImplicitPoly *poly_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelBarycentricAlgoCubic, A_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelBarycentricAlgoCubic, B_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelBarycentricAlgoCubic, C_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelBarycentricAlgoCubic, n_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelBarycentricAlgoCubic, poly_, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)

__attribute__((unused)) static void OrgGeogebraCommonKernelBarycentricAlgoCubic_compute(OrgGeogebraCommonKernelBarycentricAlgoCubic *self);

@implementation OrgGeogebraCommonKernelBarycentricAlgoCubic

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)A
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)B
                    withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)C
           withOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)e {
  OrgGeogebraCommonKernelBarycentricAlgoCubic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, A, B, C, e);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Cubic();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, A_);
  (void) IOSObjectArray_Set(input_, 1, B_);
  (void) IOSObjectArray_Set(input_, 2, C_);
  (void) IOSObjectArray_Set(input_, 3, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(n_)) toGeoElement]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:poly_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)getResult {
  return poly_;
}

- (void)compute {
  OrgGeogebraCommonKernelBarycentricAlgoCubic_compute(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelArithmeticNumberValue:", "AlgoCubic", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "B_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "C_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "poly_", NULL, 0x2, "Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelBarycentricAlgoCubic = { 2, "AlgoCubic", "org.geogebra.common.kernel.barycentric", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelBarycentricAlgoCubic;
}

@end

void OrgGeogebraCommonKernelBarycentricAlgoCubic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelBarycentricAlgoCubic *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *A, OrgGeogebraCommonKernelGeosGeoPoint *B, OrgGeogebraCommonKernelGeosGeoPoint *C, id<OrgGeogebraCommonKernelArithmeticNumberValue> e) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  (void) [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getAlgoCubicSwitch];
  self->A_ = A;
  self->B_ = B;
  self->C_ = C;
  self->n_ = e;
  self->poly_ = new_OrgGeogebraCommonKernelImplicitGeoImplicitPoly_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelBarycentricAlgoCubic_compute(self);
  [self->poly_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelBarycentricAlgoCubic *new_OrgGeogebraCommonKernelBarycentricAlgoCubic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoPoint *A, OrgGeogebraCommonKernelGeosGeoPoint *B, OrgGeogebraCommonKernelGeosGeoPoint *C, id<OrgGeogebraCommonKernelArithmeticNumberValue> e) {
  OrgGeogebraCommonKernelBarycentricAlgoCubic *self = [OrgGeogebraCommonKernelBarycentricAlgoCubic alloc];
  OrgGeogebraCommonKernelBarycentricAlgoCubic_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, A, B, C, e);
  return self;
}

void OrgGeogebraCommonKernelBarycentricAlgoCubic_compute(OrgGeogebraCommonKernelBarycentricAlgoCubic *self) {
  if ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getAlgoCubicSwitch] == nil) {
    [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->poly_)) setUndefined];
    return;
  }
  jdouble c = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->A_)) distanceWithOrgGeogebraCommonKernelGeosGeoPoint:self->B_];
  jdouble b = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->C_)) distanceWithOrgGeogebraCommonKernelGeosGeoPoint:self->A_];
  jdouble a = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->B_)) distanceWithOrgGeogebraCommonKernelGeosGeoPoint:self->C_];
  jdouble x1 = self->A_->inhomX_;
  jdouble y1 = self->A_->inhomY_;
  jdouble x2 = self->B_->inhomX_;
  jdouble y2 = self->B_->inhomY_;
  jdouble x3 = self->C_->inhomX_;
  jdouble y3 = self->C_->inhomY_;
  NSString *equation = @"";
  jdouble det = (-x2 + x3) * (y1 - y3) + (x1 - x3) * (y2 - y3);
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(det)) {
    [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->poly_)) setUndefined];
    return;
  }
  NSString *Astr = JreStrcat("CD$D$DC", '(', (x3 - x2) / det, @"*y  + ", (y2 - y3) / det, @"*x - ", ((x3 - x2) * y3 + (y2 - y3) * x3) / det, ')');
  NSString *Bstr = JreStrcat("CD$D$DC", '(', (x1 - x3) / det, @"*y  + ", (y3 - y1) / det, @"*x - ", ((x1 - x3) * y1 + (y3 - y1) * x1) / det, ')');
  NSString *Cstr = JreStrcat("CD$D$DC", '(', (x2 - x1) / det, @"*y  + ", (y1 - y2) / det, @"*x - ", ((x2 - x1) * y2 + (y1 - y2) * x2) / det, ')');
  equation = [((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) cubicSwitchWithOrgGeogebraCommonMainAlgoCubicSwitchParams:new_OrgGeogebraCommonMainAlgoCubicSwitchParams_initWithDouble_withDouble_withDouble_withDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->n_)) getDouble], a, b, c)];
  if (equation == nil) {
    [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->poly_)) setUndefined];
    return;
  }
  equation = [((NSString *) nil_chk(equation)) replace:@"A" withSequence:Astr];
  equation = [((NSString *) nil_chk(equation)) replace:@"B" withSequence:Bstr];
  equation = [((NSString *) nil_chk(equation)) replace:@"C" withSequence:Cstr];
  equation = [((NSString *) nil_chk(equation)) replace:@"a" withSequence:JreStrcat("D", a)];
  equation = [((NSString *) nil_chk(equation)) replace:@"b" withSequence:JreStrcat("D", b)];
  equation = [((NSString *) nil_chk(equation)) replace:@"c" withSequence:JreStrcat("D", c)];
  OrgGeogebraCommonKernelParserParser *parser = [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getParser];
  OrgGeogebraCommonKernelCommandsAlgebraProcessor *algebraProcessor = [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getAlgebraProcessor];
  OrgGeogebraCommonKernelArithmeticValidExpression *ve = nil;
  @try {
    ve = [((OrgGeogebraCommonKernelParserParser *) nil_chk(parser)) parseGeoGebraExpressionWithNSString:equation];
    OrgGeogebraCommonKernelImplicitGeoImplicitPoly *result = (OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast((IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algebraProcessor)) processEquationWithOrgGeogebraCommonKernelArithmeticEquation:(OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticEquation class]) withBoolean:YES]), 0)), [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]);
    [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(result)) remove];
    [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->poly_)) setCoeffWithDoubleArray2:[result getCoeff]];
    [self->poly_ setDefined];
  }
  @catch (OrgGeogebraCommonKernelParserParseException *e) {
    [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->poly_)) setUndefined];
    OrgGeogebraCommonMainApp_errorWithNSString_(equation);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelBarycentricAlgoCubic)
