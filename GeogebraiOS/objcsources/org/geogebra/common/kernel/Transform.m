//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/Transform.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/Transform.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoTransformation.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoly.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/LimitedPath.h"
#include "org/geogebra/common/kernel/kernelND/AlgoTransformable.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"

@interface OrgGeogebraCommonKernelTransform ()

- (IOSObjectArray *)transformPolyWithNSString:(NSString *)label
       withOrgGeogebraCommonKernelGeosGeoPoly:(id<OrgGeogebraCommonKernelGeosGeoPoly>)oldPoly
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)transformedPoints;

@end

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelTransform_transformPolyWithNSString_withOrgGeogebraCommonKernelGeosGeoPoly_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonKernelTransform *self, NSString *label, id<OrgGeogebraCommonKernelGeosGeoPoly> oldPoly, IOSObjectArray *transformedPoints);

@implementation OrgGeogebraCommonKernelTransform

+ (NSString *)transformedGeoLabelWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return OrgGeogebraCommonKernelTransform_transformedGeoLabelWithOrgGeogebraCommonKernelGeosGeoElement_(geo);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)doTransformWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return [((OrgGeogebraCommonKernelAlgosAlgoTransformation *) nil_chk([self getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:geo])) getResult];
}

- (IOSObjectArray *)transformPolyWithNSString:(NSString *)label
    withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)poly {
  return OrgGeogebraCommonKernelTransform_transformPolyWithNSString_withOrgGeogebraCommonKernelGeosGeoPoly_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, label, poly, [self transformPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:[((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly)) getPoints]]);
}

- (IOSObjectArray *)transformWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                          withNSString:(NSString *)transformedLabel {
  NSString *label = transformedLabel;
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm];
  if ((algo != nil) && ([OrgGeogebraCommonKernelKernelNDAlgoTransformable_class_() isInstance:algo])) {
    return [((id<OrgGeogebraCommonKernelKernelNDAlgoTransformable>) check_protocol_cast(algo, @protocol(OrgGeogebraCommonKernelKernelNDAlgoTransformable))) getTransformedOutputWithOrgGeogebraCommonKernelTransform:self];
  }
  if ([OrgGeogebraCommonKernelGeosGeoPoly_class_() isInstance:geo] && [self isAffine]) {
    id<OrgGeogebraCommonKernelGeosGeoPoly> poly = (id<OrgGeogebraCommonKernelGeosGeoPoly>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelGeosGeoPoly));
    if ([poly isVertexCountFixed] && [poly isAllVertexLabelsSet]) return OrgGeogebraCommonKernelTransform_transformPolyWithNSString_withOrgGeogebraCommonKernelGeosGeoPoly_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, label, poly, [self transformPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:[poly getPointsND]]);
  }
  if (label == nil) label = OrgGeogebraCommonKernelTransform_transformedGeoLabelWithOrgGeogebraCommonKernelGeosGeoElement_(geo);
  if ([geo isLimitedPath] && [((id<OrgGeogebraCommonKernelGeosLimitedPath>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelGeosLimitedPath))) isAllEndpointsLabelsSet]) {
    IOSObjectArray *geos = [((id<OrgGeogebraCommonKernelGeosLimitedPath>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelGeosLimitedPath))) createTransformedObjectWithOrgGeogebraCommonKernelTransform:self withNSString:label];
    return geos;
  }
  OrgGeogebraCommonKernelGeosGeoElement *ret = [self doTransformWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(ret)) setLabelWithNSString:label];
  [ret setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  IOSObjectArray *geos = [IOSObjectArray arrayWithObjects:(id[]){ ret } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  return geos;
}

- (OrgGeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)transformPolyWithNSString:(NSString *)label
       withOrgGeogebraCommonKernelGeosGeoPoly:(id<OrgGeogebraCommonKernelGeosGeoPoly>)oldPoly
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)transformedPoints {
  return OrgGeogebraCommonKernelTransform_transformPolyWithNSString_withOrgGeogebraCommonKernelGeosGeoPoly_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, label, oldPoly, transformedPoints);
}

- (IOSObjectArray *)transformPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  IOSObjectArray *newPoints = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(points))->size_ type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
  for (jint i = 0; i < points->size_; i++) {
    NSString *pointLabel = OrgGeogebraCommonKernelTransform_transformedGeoLabelWithOrgGeogebraCommonKernelGeosGeoElement_((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [OrgGeogebraCommonKernelGeosGeoElement class]));
    IOSObjectArray_Set(newPoints, i, (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk([self transformWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [OrgGeogebraCommonKernelGeosGeoElement class]) withNSString:pointLabel]), 0), @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(newPoints, i), [OrgGeogebraCommonKernelGeosGeoElement class])))) setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [OrgGeogebraCommonKernelGeosGeoElement class])];
  }
  return newPoints;
}

- (OrgGeogebraCommonKernelKernelNDGeoConicND *)getTransformedConicWithOrgGeogebraCommonKernelKernelNDGeoConicND:(OrgGeogebraCommonKernelKernelNDGeoConicND *)conic {
  OrgGeogebraCommonKernelKernelNDGeoConicND *ret = (OrgGeogebraCommonKernelKernelNDGeoConicND *) check_class_cast([self doTransformWithOrgGeogebraCommonKernelGeosGeoElement:conic], [OrgGeogebraCommonKernelKernelNDGeoConicND class]);
  [((OrgGeogebraCommonKernelKernelNDGeoConicND *) nil_chk(ret)) setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement:conic];
  return ret;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getTransformedLineWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)line {
  OrgGeogebraCommonKernelGeosGeoElement *ret = [self doTransformWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [OrgGeogebraCommonKernelGeosGeoElement class])];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(ret)) setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [OrgGeogebraCommonKernelGeosGeoElement class])];
  return ret;
}

- (jboolean)isAffine {
  return YES;
}

- (jboolean)isSimilar {
  return YES;
}

- (jboolean)changesOrientation {
  return NO;
}

+ (void)setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)input
                                        withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)transformed {
  OrgGeogebraCommonKernelTransform_setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(input, transformed);
}

- (instancetype)init {
  OrgGeogebraCommonKernelTransform_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(cons_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "transformedGeoLabelWithOrgGeogebraCommonKernelGeosGeoElement:", "transformedGeoLabel", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "doTransformWithOrgGeogebraCommonKernelGeosGeoElement:", "doTransform", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "transformPolyWithNSString:withOrgGeogebraCommonKernelGeosGeoPolygon:", "transformPoly", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "transformWithOrgGeogebraCommonKernelGeosGeoElement:withNSString:", "transform", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:", "getTransformAlgo", "Lorg.geogebra.common.kernel.algos.AlgoTransformation;", 0x404, NULL, NULL },
    { "transformPolyWithNSString:withOrgGeogebraCommonKernelGeosGeoPoly:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "transformPoly", "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "transformPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "transformPoints", "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getTransformedConicWithOrgGeogebraCommonKernelKernelNDGeoConicND:", "getTransformedConic", "Lorg.geogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "getTransformedLineWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "getTransformedLine", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isAffine", NULL, "Z", 0x1, NULL, NULL },
    { "isSimilar", NULL, "Z", 0x1, NULL, NULL },
    { "changesOrientation", NULL, "Z", 0x1, NULL, NULL },
    { "setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "setVisualStyleForTransformations", "V", 0x19, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cons_", NULL, 0x4, "Lorg.geogebra.common.kernel.Construction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelTransform = { 2, "Transform", "org.geogebra.common.kernel", NULL, 0x401, 14, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelTransform;
}

@end

NSString *OrgGeogebraCommonKernelTransform_transformedGeoLabelWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonKernelTransform_initialize();
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoFunction]) {
    if ([geo isLabelSet] && ![geo hasIndexLabel]) return [geo getFreeLabelWithNSString:[geo getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplateLocal_()]];
    return nil;
  }
  if ([geo isLabelSet] && ![geo hasIndexLabel] && ![((NSString *) nil_chk([geo getLabelSimple])) hasSuffix:@"'''"]) {
    return [geo getFreeLabelWithNSString:JreStrcat("$C", [geo getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplateLocal_()], '\'')];
  }
  return nil;
}

IOSObjectArray *OrgGeogebraCommonKernelTransform_transformPolyWithNSString_withOrgGeogebraCommonKernelGeosGeoPoly_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonKernelTransform *self, NSString *label, id<OrgGeogebraCommonKernelGeosGeoPoly> oldPoly, IOSObjectArray *transformedPoints) {
  IOSObjectArray *polyLabel = nil;
  if (label == nil) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(oldPoly, [OrgGeogebraCommonKernelGeosGeoElement class])))) isLabelSet]) {
      polyLabel = [IOSObjectArray arrayWithLength:1 type:NSString_class_()];
      IOSObjectArray_Set(polyLabel, 0, OrgGeogebraCommonKernelTransform_transformedGeoLabelWithOrgGeogebraCommonKernelGeosGeoElement_((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(oldPoly, [OrgGeogebraCommonKernelGeosGeoElement class])));
    }
  }
  else {
    polyLabel = [IOSObjectArray arrayWithLength:1 type:NSString_class_()];
    IOSObjectArray_Set(polyLabel, 0, label);
  }
  IOSObjectArray *oldPoints = [((id<OrgGeogebraCommonKernelGeosGeoPoly>) nil_chk(oldPoly)) getPoints];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(oldPoints))->size_; i++) {
    OrgGeogebraCommonKernelTransform_setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(oldPoints, i), [OrgGeogebraCommonKernelGeosGeoElement class]), (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(transformedPoints), i), [OrgGeogebraCommonKernelGeosGeoElement class]));
    [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel])) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(transformedPoints, i), [OrgGeogebraCommonKernelGeosGeoElement class])];
  }
  IOSObjectArray *ret;
  if ([oldPoly isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPolygon class]]) ret = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel])) PolygonNDWithNSStringArray:polyLabel withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:transformedPoints];
  else ret = [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel])) PolyLineNDWithNSStringArray:polyLabel withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:transformedPoints];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ret))->size_; i++) {
    OrgGeogebraCommonKernelTransform_setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(oldPoly, [OrgGeogebraCommonKernelGeosGeoElement class]), IOSObjectArray_Get(ret, i));
  }
  return ret;
}

void OrgGeogebraCommonKernelTransform_setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *input, OrgGeogebraCommonKernelGeosGeoElement *transformed) {
  OrgGeogebraCommonKernelTransform_initialize();
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(transformed)) setEuclidianVisibleWithBoolean:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(input)) isSetEuclidianVisible]];
  [transformed setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement:input];
}

void OrgGeogebraCommonKernelTransform_init(OrgGeogebraCommonKernelTransform *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelTransform)
