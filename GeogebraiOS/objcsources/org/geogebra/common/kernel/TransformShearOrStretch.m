//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/TransformShearOrStretch.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Transform.h"
#include "org/geogebra/common/kernel/TransformShearOrStretch.h"
#include "org/geogebra/common/kernel/algos/AlgoShearOrStretch.h"
#include "org/geogebra/common/kernel/algos/AlgoTransformation.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"

@interface OrgGeogebraCommonKernelTransformShearOrStretch () {
 @public
  jboolean shear_;
  OrgGeogebraCommonKernelGeosGeoVec3D *line_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> num_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelTransformShearOrStretch, line_, OrgGeogebraCommonKernelGeosGeoVec3D *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelTransformShearOrStretch, num_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)

@implementation OrgGeogebraCommonKernelTransformShearOrStretch

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                    withOrgGeogebraCommonKernelGeosGeoVec3D:(OrgGeogebraCommonKernelGeosGeoVec3D *)line
                  withOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)num
                                                withBoolean:(jboolean)shear {
  OrgGeogebraCommonKernelTransformShearOrStretch_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(self, cons, line, num, shear);
  return self;
}

- (OrgGeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelAlgosAlgoShearOrStretch *algo = [new_OrgGeogebraCommonKernelAlgosAlgoShearOrStretch_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelArithmeticNumberValue_withBoolean_(cons_, geo, line_, num_, shear_) autorelease];
  return algo;
}

- (jboolean)isSimilar {
  return NO;
}

- (jboolean)changesOrientation {
  return !shear_ && [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num_)) getDouble] < 0;
}

- (void)dealloc {
  RELEASE_(line_);
  RELEASE_(num_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoVec3D:withOrgGeogebraCommonKernelGeosGeoNumeric:withBoolean:", "TransformShearOrStretch", NULL, 0x1, NULL, NULL },
    { "getTransformAlgoWithOrgGeogebraCommonKernelGeosGeoElement:", "getTransformAlgo", "Lorg.geogebra.common.kernel.algos.AlgoTransformation;", 0x4, NULL, NULL },
    { "isSimilar", NULL, "Z", 0x1, NULL, NULL },
    { "changesOrientation", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "shear_", NULL, 0x2, "Z", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoVec3D;", NULL, NULL,  },
    { "num_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelTransformShearOrStretch = { 2, "TransformShearOrStretch", "org.geogebra.common.kernel", NULL, 0x1, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelTransformShearOrStretch;
}

@end

void OrgGeogebraCommonKernelTransformShearOrStretch_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(OrgGeogebraCommonKernelTransformShearOrStretch *self, OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoVec3D *line, OrgGeogebraCommonKernelGeosGeoNumeric *num, jboolean shear) {
  OrgGeogebraCommonKernelTransform_init(self);
  self->shear_ = shear;
  OrgGeogebraCommonKernelTransformShearOrStretch_set_line_(self, line);
  OrgGeogebraCommonKernelTransformShearOrStretch_set_num_(self, num);
  OrgGeogebraCommonKernelTransform_set_cons_(self, cons);
}

OrgGeogebraCommonKernelTransformShearOrStretch *new_OrgGeogebraCommonKernelTransformShearOrStretch_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(OrgGeogebraCommonKernelConstruction *cons, OrgGeogebraCommonKernelGeosGeoVec3D *line, OrgGeogebraCommonKernelGeosGeoNumeric *num, jboolean shear) {
  OrgGeogebraCommonKernelTransformShearOrStretch *self = [OrgGeogebraCommonKernelTransformShearOrStretch alloc];
  OrgGeogebraCommonKernelTransformShearOrStretch_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoVec3D_withOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(self, cons, line, num, shear);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelTransformShearOrStretch)
