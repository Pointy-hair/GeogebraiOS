//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/prover/polynomial/Term.java
//

#ifndef _OrgGeogebraCommonKernelProverPolynomialTerm_H_
#define _OrgGeogebraCommonKernelProverPolynomialTerm_H_

#include "J2ObjC_header.h"
#include "java/lang/Comparable.h"

@class JavaUtilHashSet;
@class JavaUtilTreeMap;
@class OrgGeogebraCommonKernelProverPolynomialVariable;

@interface OrgGeogebraCommonKernelProverPolynomialTerm : NSObject < JavaLangComparable >

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithOrgGeogebraCommonKernelProverPolynomialTerm:(OrgGeogebraCommonKernelProverPolynomialTerm *)t;

- (instancetype)initWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)variable;

- (instancetype)initWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)variable
                                                                withInt:(jint)exponent;

- (jint)compareToWithId:(OrgGeogebraCommonKernelProverPolynomialTerm *)o;

+ (jboolean)dividesWithOrgGeogebraCommonKernelProverPolynomialTerm:(OrgGeogebraCommonKernelProverPolynomialTerm *)f
                   withOrgGeogebraCommonKernelProverPolynomialTerm:(OrgGeogebraCommonKernelProverPolynomialTerm *)g;

- (jboolean)isEqual:(id)o;

- (OrgGeogebraCommonKernelProverPolynomialVariable *)getHighestVariable;

- (JavaUtilTreeMap *)getTerm;

- (JavaUtilHashSet *)getVars;

- (NSUInteger)hash;

- (OrgGeogebraCommonKernelProverPolynomialTerm *)timesWithOrgGeogebraCommonKernelProverPolynomialTerm:(OrgGeogebraCommonKernelProverPolynomialTerm *)term;

- (NSString *)description;

- (NSString *)toTeX;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)variables;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelProverPolynomialTerm)

FOUNDATION_EXPORT void OrgGeogebraCommonKernelProverPolynomialTerm_init(OrgGeogebraCommonKernelProverPolynomialTerm *self);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialTerm *new_OrgGeogebraCommonKernelProverPolynomialTerm_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgGeogebraCommonKernelProverPolynomialTerm_initWithOrgGeogebraCommonKernelProverPolynomialTerm_(OrgGeogebraCommonKernelProverPolynomialTerm *self, OrgGeogebraCommonKernelProverPolynomialTerm *t);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialTerm *new_OrgGeogebraCommonKernelProverPolynomialTerm_initWithOrgGeogebraCommonKernelProverPolynomialTerm_(OrgGeogebraCommonKernelProverPolynomialTerm *t) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgGeogebraCommonKernelProverPolynomialTerm_initWithJavaUtilTreeMap_(OrgGeogebraCommonKernelProverPolynomialTerm *self, JavaUtilTreeMap *variables);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialTerm *new_OrgGeogebraCommonKernelProverPolynomialTerm_initWithJavaUtilTreeMap_(JavaUtilTreeMap *variables) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgGeogebraCommonKernelProverPolynomialTerm_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialTerm *self, OrgGeogebraCommonKernelProverPolynomialVariable *variable);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialTerm *new_OrgGeogebraCommonKernelProverPolynomialTerm_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *variable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgGeogebraCommonKernelProverPolynomialTerm_initWithOrgGeogebraCommonKernelProverPolynomialVariable_withInt_(OrgGeogebraCommonKernelProverPolynomialTerm *self, OrgGeogebraCommonKernelProverPolynomialVariable *variable, jint exponent);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialTerm *new_OrgGeogebraCommonKernelProverPolynomialTerm_initWithOrgGeogebraCommonKernelProverPolynomialVariable_withInt_(OrgGeogebraCommonKernelProverPolynomialVariable *variable, jint exponent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT jboolean OrgGeogebraCommonKernelProverPolynomialTerm_dividesWithOrgGeogebraCommonKernelProverPolynomialTerm_withOrgGeogebraCommonKernelProverPolynomialTerm_(OrgGeogebraCommonKernelProverPolynomialTerm *f, OrgGeogebraCommonKernelProverPolynomialTerm *g);

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelProverPolynomialTerm)

#endif // _OrgGeogebraCommonKernelProverPolynomialTerm_H_
