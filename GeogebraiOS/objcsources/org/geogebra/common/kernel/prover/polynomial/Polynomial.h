//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/prover/polynomial/Polynomial.java
//

#ifndef _OrgGeogebraCommonKernelProverPolynomialPolynomial_H_
#define _OrgGeogebraCommonKernelProverPolynomialPolynomial_H_

#include "J2ObjC_header.h"
#include "java/lang/Comparable.h"

@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaUtilHashMap;
@class JavaUtilHashSet;
@class JavaUtilTreeMap;
@class OrgGeogebraCommonKernelKernel;
@class OrgGeogebraCommonKernelProverPolynomialTerm;
@class OrgGeogebraCommonKernelProverPolynomialVariable;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface OrgGeogebraCommonKernelProverPolynomialPolynomial : NSObject < JavaLangComparable >

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)coeff;

- (instancetype)initWithInt:(jint)coeff
withOrgGeogebraCommonKernelProverPolynomialTerm:(OrgGeogebraCommonKernelProverPolynomialTerm *)t;

- (instancetype)initWithInt:(jint)coeff
withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)variable;

- (instancetype)initWithInt:(jint)coeff
withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)variable
                    withInt:(jint)power;

- (instancetype)initWithOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)poly;

- (instancetype)initWithOrgGeogebraCommonKernelProverPolynomialTerm:(OrgGeogebraCommonKernelProverPolynomialTerm *)t;

- (instancetype)initWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv;

- (OrgGeogebraCommonKernelProverPolynomialPolynomial *)addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)poly;

+ (NSString *)addLeadingCommaWithNSString:(NSString *)inArg;

+ (jboolean)areAssociates1WithOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)p1
                          withOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)p2;

+ (NSString *)coalesceWithNSString:(NSString *)in1
                      withNSString:(NSString *)in2;

+ (OrgGeogebraCommonKernelProverPolynomialPolynomial *)collinearWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv1
                                                                withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv2
                                                                withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv3
                                                                withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv4
                                                                withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv5
                                                                withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv6;

- (jint)compareToWithId:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)poly;

+ (NSString *)createEliminateFactorizedScriptWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys
                                               withOrgGeogebraCommonKernelProverPolynomialVariableArray:(IOSObjectArray *)pVariables
                                                                                        withJavaUtilSet:(id<JavaUtilSet>)dependentVariables;

+ (NSString *)createGroebnerSolvableScriptWithJavaUtilHashMap:(JavaUtilHashMap *)substitutions
                                                 withNSString:(NSString *)polys
                                                 withNSString:(NSString *)fieldVars
                                                 withNSString:(NSString *)ringVars
                                                  withBoolean:(jboolean)transcext;

+ (IOSObjectArray *)crossProductWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)a
                                withOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)b;

+ (OrgGeogebraCommonKernelProverPolynomialPolynomial *)det4WithOrgGeogebraCommonKernelProverPolynomialPolynomialArray2:(IOSObjectArray *)matrix;

+ (id<JavaUtilSet>)eliminateWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)eqSystem
                                                                   withJavaUtilHashMap:(JavaUtilHashMap *)substitutions
                                                     withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                                                               withInt:(jint)permutation;

- (jboolean)isEqual:(id)o;

+ (OrgGeogebraCommonKernelProverPolynomialPolynomial *)equidistantWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)a1
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)a2
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)o1
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)o2
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)b1
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)b2;

+ (NSString *)getPolysAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys;

- (NSString *)getSingularMultiplicationWithNSString:(NSString *)ringVariable
withOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)p1
withOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)p2;

- (JavaUtilTreeMap *)getTerms;

- (JavaUtilHashSet *)getVars;

+ (JavaUtilHashSet *)getVarsWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys;

+ (NSString *)getVarsAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys
                                                                                  withJavaUtilHashSet:(JavaUtilHashSet *)extraVars
                                                                                  withJavaLangBoolean:(JavaLangBoolean *)free;

- (NSUInteger)hash;

- (jboolean)isConstant;

- (jboolean)isOne;

- (jboolean)isZero;

- (OrgGeogebraCommonKernelProverPolynomialPolynomial *)multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)poly;

- (OrgGeogebraCommonKernelProverPolynomialPolynomial *)negate;

+ (OrgGeogebraCommonKernelProverPolynomialPolynomial *)parallelWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v1
                                                               withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v2
                                                               withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v3
                                                               withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v4
                                                               withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v5
                                                               withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v6
                                                               withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v7
                                                               withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v8;

+ (OrgGeogebraCommonKernelProverPolynomialPolynomial *)perpendicularWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v1
                                                                    withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v2
                                                                    withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v3
                                                                    withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v4
                                                                    withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v5
                                                                    withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v6
                                                                    withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v7
                                                                    withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v8;

+ (JavaLangBoolean *)solvableWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys
                                                                    withJavaUtilHashMap:(JavaUtilHashMap *)substitutions
                                                      withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                                                            withBoolean:(jboolean)transcext;

+ (OrgGeogebraCommonKernelProverPolynomialPolynomial *)sqrWithOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)p;

+ (OrgGeogebraCommonKernelProverPolynomialPolynomial *)sqrDistanceWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)a1
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)a2
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)b1
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)b2;

- (OrgGeogebraCommonKernelProverPolynomialPolynomial *)substituteWithJavaUtilMap:(id<JavaUtilMap>)substitutions;

- (OrgGeogebraCommonKernelProverPolynomialPolynomial *)subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)poly;

- (NSString *)description;

- (NSString *)toTeX;

#pragma mark Package-Private

+ (NSString *)substitutionsStringWithJavaUtilHashMap:(JavaUtilHashMap *)subst;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelProverPolynomialPolynomial)

FOUNDATION_EXPORT void OrgGeogebraCommonKernelProverPolynomialPolynomial_init(OrgGeogebraCommonKernelProverPolynomialPolynomial *self);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialPolynomial_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, OrgGeogebraCommonKernelProverPolynomialPolynomial *poly);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialPolynomial_(OrgGeogebraCommonKernelProverPolynomialPolynomial *poly) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(jint coeff) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, OrgGeogebraCommonKernelProverPolynomialVariable *fv);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *fv) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff, OrgGeogebraCommonKernelProverPolynomialVariable *variable);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialVariable_(jint coeff, OrgGeogebraCommonKernelProverPolynomialVariable *variable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialVariable_withInt_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff, OrgGeogebraCommonKernelProverPolynomialVariable *variable, jint power);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialVariable_withInt_(jint coeff, OrgGeogebraCommonKernelProverPolynomialVariable *variable, jint power) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialTerm_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, OrgGeogebraCommonKernelProverPolynomialTerm *t);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialTerm_(OrgGeogebraCommonKernelProverPolynomialTerm *t) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialTerm_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff, OrgGeogebraCommonKernelProverPolynomialTerm *t);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialTerm_(jint coeff, OrgGeogebraCommonKernelProverPolynomialTerm *t) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilHashSet *OrgGeogebraCommonKernelProverPolynomialPolynomial_getVarsWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(IOSObjectArray *polys);

FOUNDATION_EXPORT NSString *OrgGeogebraCommonKernelProverPolynomialPolynomial_getVarsAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashSet_withJavaLangBoolean_(IOSObjectArray *polys, JavaUtilHashSet *extraVars, JavaLangBoolean *free);

FOUNDATION_EXPORT NSString *OrgGeogebraCommonKernelProverPolynomialPolynomial_getPolysAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(IOSObjectArray *polys);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *OrgGeogebraCommonKernelProverPolynomialPolynomial_collinearWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *fv1, OrgGeogebraCommonKernelProverPolynomialVariable *fv2, OrgGeogebraCommonKernelProverPolynomialVariable *fv3, OrgGeogebraCommonKernelProverPolynomialVariable *fv4, OrgGeogebraCommonKernelProverPolynomialVariable *fv5, OrgGeogebraCommonKernelProverPolynomialVariable *fv6);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *OrgGeogebraCommonKernelProverPolynomialPolynomial_perpendicularWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *v1, OrgGeogebraCommonKernelProverPolynomialVariable *v2, OrgGeogebraCommonKernelProverPolynomialVariable *v3, OrgGeogebraCommonKernelProverPolynomialVariable *v4, OrgGeogebraCommonKernelProverPolynomialVariable *v5, OrgGeogebraCommonKernelProverPolynomialVariable *v6, OrgGeogebraCommonKernelProverPolynomialVariable *v7, OrgGeogebraCommonKernelProverPolynomialVariable *v8);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *OrgGeogebraCommonKernelProverPolynomialPolynomial_parallelWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *v1, OrgGeogebraCommonKernelProverPolynomialVariable *v2, OrgGeogebraCommonKernelProverPolynomialVariable *v3, OrgGeogebraCommonKernelProverPolynomialVariable *v4, OrgGeogebraCommonKernelProverPolynomialVariable *v5, OrgGeogebraCommonKernelProverPolynomialVariable *v6, OrgGeogebraCommonKernelProverPolynomialVariable *v7, OrgGeogebraCommonKernelProverPolynomialVariable *v8);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *OrgGeogebraCommonKernelProverPolynomialPolynomial_det4WithOrgGeogebraCommonKernelProverPolynomialPolynomialArray2_(IOSObjectArray *matrix);

FOUNDATION_EXPORT IOSObjectArray *OrgGeogebraCommonKernelProverPolynomialPolynomial_crossProductWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(IOSObjectArray *a, IOSObjectArray *b);

FOUNDATION_EXPORT jboolean OrgGeogebraCommonKernelProverPolynomialPolynomial_areAssociates1WithOrgGeogebraCommonKernelProverPolynomialPolynomial_withOrgGeogebraCommonKernelProverPolynomialPolynomial_(OrgGeogebraCommonKernelProverPolynomialPolynomial *p1, OrgGeogebraCommonKernelProverPolynomialPolynomial *p2);

FOUNDATION_EXPORT NSString *OrgGeogebraCommonKernelProverPolynomialPolynomial_substitutionsStringWithJavaUtilHashMap_(JavaUtilHashMap *subst);

FOUNDATION_EXPORT NSString *OrgGeogebraCommonKernelProverPolynomialPolynomial_addLeadingCommaWithNSString_(NSString *inArg);

FOUNDATION_EXPORT NSString *OrgGeogebraCommonKernelProverPolynomialPolynomial_coalesceWithNSString_withNSString_(NSString *in1, NSString *in2);

FOUNDATION_EXPORT NSString *OrgGeogebraCommonKernelProverPolynomialPolynomial_createGroebnerSolvableScriptWithJavaUtilHashMap_withNSString_withNSString_withNSString_withBoolean_(JavaUtilHashMap *substitutions, NSString *polys, NSString *fieldVars, NSString *ringVars, jboolean transcext);

FOUNDATION_EXPORT NSString *OrgGeogebraCommonKernelProverPolynomialPolynomial_createEliminateFactorizedScriptWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withOrgGeogebraCommonKernelProverPolynomialVariableArray_withJavaUtilSet_(IOSObjectArray *polys, IOSObjectArray *pVariables, id<JavaUtilSet> dependentVariables);

FOUNDATION_EXPORT JavaLangBoolean *OrgGeogebraCommonKernelProverPolynomialPolynomial_solvableWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_withBoolean_(IOSObjectArray *polys, JavaUtilHashMap *substitutions, OrgGeogebraCommonKernelKernel *kernel, jboolean transcext);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *OrgGeogebraCommonKernelProverPolynomialPolynomial_sqrWithOrgGeogebraCommonKernelProverPolynomialPolynomial_(OrgGeogebraCommonKernelProverPolynomialPolynomial *p);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *OrgGeogebraCommonKernelProverPolynomialPolynomial_sqrDistanceWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *a1, OrgGeogebraCommonKernelProverPolynomialVariable *a2, OrgGeogebraCommonKernelProverPolynomialVariable *b1, OrgGeogebraCommonKernelProverPolynomialVariable *b2);

FOUNDATION_EXPORT OrgGeogebraCommonKernelProverPolynomialPolynomial *OrgGeogebraCommonKernelProverPolynomialPolynomial_equidistantWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *a1, OrgGeogebraCommonKernelProverPolynomialVariable *a2, OrgGeogebraCommonKernelProverPolynomialVariable *o1, OrgGeogebraCommonKernelProverPolynomialVariable *o2, OrgGeogebraCommonKernelProverPolynomialVariable *b1, OrgGeogebraCommonKernelProverPolynomialVariable *b2);

FOUNDATION_EXPORT id<JavaUtilSet> OrgGeogebraCommonKernelProverPolynomialPolynomial_eliminateWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_withInt_(IOSObjectArray *eqSystem, JavaUtilHashMap *substitutions, OrgGeogebraCommonKernelKernel *kernel, jint permutation);

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelProverPolynomialPolynomial)

#endif // _OrgGeogebraCommonKernelProverPolynomialPolynomial_H_
