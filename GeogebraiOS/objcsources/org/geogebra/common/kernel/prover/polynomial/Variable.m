//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/prover/polynomial/Variable.java
//


#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/prover/polynomial/Variable.h"

@interface OrgGeogebraCommonKernelProverPolynomialVariable () {
 @public
  jboolean isFree__;
  OrgGeogebraCommonKernelGeosGeoElement *parent_;
  jint id__;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverPolynomialVariable, parent_, OrgGeogebraCommonKernelGeosGeoElement *)

static jint OrgGeogebraCommonKernelProverPolynomialVariable_n_ = 0;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelProverPolynomialVariable, n_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonKernelProverPolynomialVariable, n_, jint)

static JavaUtilHashMap *OrgGeogebraCommonKernelProverPolynomialVariable_twins_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelProverPolynomialVariable, twins_, JavaUtilHashMap *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelProverPolynomialVariable, twins_, JavaUtilHashMap *)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelProverPolynomialVariable)

@implementation OrgGeogebraCommonKernelProverPolynomialVariable

- (instancetype)init {
  OrgGeogebraCommonKernelProverPolynomialVariable_init(self);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)free {
  OrgGeogebraCommonKernelProverPolynomialVariable_initWithBoolean_(self, free);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)parent {
  OrgGeogebraCommonKernelProverPolynomialVariable_initWithOrgGeogebraCommonKernelGeosGeoElement_(self, parent);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv {
  OrgGeogebraCommonKernelProverPolynomialVariable_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(self, fv);
  return self;
}

- (jint)getId {
  return id__;
}

- (NSString *)description {
  return [self getName];
}

- (jint)compareToWithId:(OrgGeogebraCommonKernelProverPolynomialVariable *)v {
  (void) check_class_cast(v, [OrgGeogebraCommonKernelProverPolynomialVariable class]);
  jint vId = [((OrgGeogebraCommonKernelProverPolynomialVariable *) nil_chk(v)) getId];
  if (id__ < vId) {
    return 1;
  }
  if (id__ > vId) {
    return -1;
  }
  return 0;
}

- (jboolean)isEqual:(id)o {
  if ([o isKindOfClass:[OrgGeogebraCommonKernelProverPolynomialVariable class]]) {
    return id__ == [((OrgGeogebraCommonKernelProverPolynomialVariable *) nil_chk(((OrgGeogebraCommonKernelProverPolynomialVariable *) check_class_cast(o, [OrgGeogebraCommonKernelProverPolynomialVariable class])))) getId];
  }
  return [super isEqual:o];
}

- (NSString *)getName {
  return [@"v" concat:JavaLangInteger_toStringWithInt_(id__)];
}

- (NSString *)toTeX {
  return [((NSString *) nil_chk([@"v_{" concat:JavaLangInteger_toStringWithInt_(id__)])) concat:@"}"];
}

- (NSUInteger)hash {
  return id__;
}

- (OrgGeogebraCommonKernelProverPolynomialVariable *)getTwin {
  return [((JavaUtilHashMap *) nil_chk(OrgGeogebraCommonKernelProverPolynomialVariable_twins_)) getWithId:JavaLangInteger_valueOfWithInt_(id__)];
}

- (void)setTwinWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)twin {
  (void) [((JavaUtilHashMap *) nil_chk(OrgGeogebraCommonKernelProverPolynomialVariable_twins_)) putWithId:JavaLangInteger_valueOfWithInt_(id__) withId:twin];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getParent {
  return parent_;
}

- (void)setParentWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)parent {
  self->parent_ = parent;
}

- (jboolean)isFree {
  return isFree__;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelProverPolynomialVariable class]) {
    {
      OrgGeogebraCommonKernelProverPolynomialVariable_twins_ = new_JavaUtilHashMap_init();
    }
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelProverPolynomialVariable)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Variable", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:", "Variable", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoElement:", "Variable", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelProverPolynomialVariable:", "Variable", NULL, 0x4, NULL, NULL },
    { "getId", NULL, "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toTeX", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "getTwin", NULL, "Lorg.geogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "setTwinWithOrgGeogebraCommonKernelProverPolynomialVariable:", "setTwin", "V", 0x1, NULL, NULL },
    { "getParent", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setParentWithOrgGeogebraCommonKernelGeosGeoElement:", "setParent", "V", 0x1, NULL, NULL },
    { "isFree", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0xa, "I", &OrgGeogebraCommonKernelProverPolynomialVariable_n_, NULL,  },
    { "twins_", NULL, 0xa, "Ljava.util.HashMap;", &OrgGeogebraCommonKernelProverPolynomialVariable_twins_, "Ljava/util/HashMap<Ljava/lang/Integer;Lorg/geogebra/common/kernel/prover/polynomial/Variable;>;",  },
    { "isFree__", "isFree", 0x2, "Z", NULL, NULL,  },
    { "parent_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "id__", "id", 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelProverPolynomialVariable = { 2, "Variable", "org.geogebra.common.kernel.prover.polynomial", NULL, 0x1, 16, methods, 5, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/geogebra/common/kernel/prover/polynomial/Variable;>;" };
  return &_OrgGeogebraCommonKernelProverPolynomialVariable;
}

@end

void OrgGeogebraCommonKernelProverPolynomialVariable_init(OrgGeogebraCommonKernelProverPolynomialVariable *self) {
  (void) NSObject_init(self);
  self->isFree__ = NO;
  OrgGeogebraCommonKernelProverPolynomialVariable_n_++;
  self->id__ = OrgGeogebraCommonKernelProverPolynomialVariable_n_;
}

OrgGeogebraCommonKernelProverPolynomialVariable *new_OrgGeogebraCommonKernelProverPolynomialVariable_init() {
  OrgGeogebraCommonKernelProverPolynomialVariable *self = [OrgGeogebraCommonKernelProverPolynomialVariable alloc];
  OrgGeogebraCommonKernelProverPolynomialVariable_init(self);
  return self;
}

void OrgGeogebraCommonKernelProverPolynomialVariable_initWithBoolean_(OrgGeogebraCommonKernelProverPolynomialVariable *self, jboolean free) {
  (void) OrgGeogebraCommonKernelProverPolynomialVariable_init(self);
  self->isFree__ = free;
}

OrgGeogebraCommonKernelProverPolynomialVariable *new_OrgGeogebraCommonKernelProverPolynomialVariable_initWithBoolean_(jboolean free) {
  OrgGeogebraCommonKernelProverPolynomialVariable *self = [OrgGeogebraCommonKernelProverPolynomialVariable alloc];
  OrgGeogebraCommonKernelProverPolynomialVariable_initWithBoolean_(self, free);
  return self;
}

void OrgGeogebraCommonKernelProverPolynomialVariable_initWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelProverPolynomialVariable *self, OrgGeogebraCommonKernelGeosGeoElement *parent) {
  (void) OrgGeogebraCommonKernelProverPolynomialVariable_init(self);
  self->parent_ = parent;
}

OrgGeogebraCommonKernelProverPolynomialVariable *new_OrgGeogebraCommonKernelProverPolynomialVariable_initWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *parent) {
  OrgGeogebraCommonKernelProverPolynomialVariable *self = [OrgGeogebraCommonKernelProverPolynomialVariable alloc];
  OrgGeogebraCommonKernelProverPolynomialVariable_initWithOrgGeogebraCommonKernelGeosGeoElement_(self, parent);
  return self;
}

void OrgGeogebraCommonKernelProverPolynomialVariable_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *self, OrgGeogebraCommonKernelProverPolynomialVariable *fv) {
  (void) NSObject_init(self);
  self->isFree__ = NO;
  self->id__ = [((OrgGeogebraCommonKernelProverPolynomialVariable *) nil_chk(fv)) getId];
}

OrgGeogebraCommonKernelProverPolynomialVariable *new_OrgGeogebraCommonKernelProverPolynomialVariable_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *fv) {
  OrgGeogebraCommonKernelProverPolynomialVariable *self = [OrgGeogebraCommonKernelProverPolynomialVariable alloc];
  OrgGeogebraCommonKernelProverPolynomialVariable_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(self, fv);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelProverPolynomialVariable)
