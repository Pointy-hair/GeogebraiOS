//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/prover/polynomial/Polynomial.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/TreeMap.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/cas/GeoGebraCAS.h"
#include "org/geogebra/common/cas/giac/CASgiac.h"
#include "org/geogebra/common/cas/singularws/SingularWebService.h"
#include "org/geogebra/common/kernel/CASException.h"
#include "org/geogebra/common/kernel/CASGenericInterface.h"
#include "org/geogebra/common/kernel/GeoGebraCasInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/prover/polynomial/ParseException.h"
#include "org/geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "org/geogebra/common/kernel/prover/polynomial/PolynomialParser.h"
#include "org/geogebra/common/kernel/prover/polynomial/Term.h"
#include "org/geogebra/common/kernel/prover/polynomial/Variable.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonKernelProverPolynomialPolynomial () {
 @public
  JavaUtilTreeMap *terms_;
}

- (instancetype)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)terms;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverPolynomialPolynomial, terms_, JavaUtilTreeMap *)

__attribute__((unused)) static void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, JavaUtilTreeMap *terms);

__attribute__((unused)) static OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(JavaUtilTreeMap *terms) NS_RETURNS_RETAINED;

@implementation OrgGeogebraCommonKernelProverPolynomialPolynomial

- (instancetype)init {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_init(self);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)poly {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialPolynomial_(self, poly);
  return self;
}

- (instancetype)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)terms {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(self, terms);
  return self;
}

- (JavaUtilTreeMap *)getTerms {
  return terms_;
}

- (instancetype)initWithInt:(jint)coeff {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(self, coeff);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(self, fv);
  return self;
}

- (instancetype)initWithInt:(jint)coeff
withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)variable {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialVariable_(self, coeff, variable);
  return self;
}

- (instancetype)initWithInt:(jint)coeff
withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)variable
                    withInt:(jint)power {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialVariable_withInt_(self, coeff, variable, power);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelProverPolynomialTerm:(OrgGeogebraCommonKernelProverPolynomialTerm *)t {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialTerm_(self, t);
  return self;
}

- (instancetype)initWithInt:(jint)coeff
withOrgGeogebraCommonKernelProverPolynomialTerm:(OrgGeogebraCommonKernelProverPolynomialTerm *)t {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialTerm_(self, coeff, t);
  return self;
}

- (OrgGeogebraCommonKernelProverPolynomialPolynomial *)addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)poly {
  JavaUtilTreeMap *result = new_JavaUtilTreeMap_initWithJavaUtilSortedMap_(terms_);
  JavaUtilTreeMap *terms2 = [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) getTerms];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms2)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelProverPolynomialTerm *t = [it next];
    if ([((JavaUtilTreeMap *) nil_chk(terms_)) containsKeyWithId:t]) {
      jint coefficient = [((JavaLangInteger *) nil_chk([terms_ getWithId:t])) intValue] + [((JavaLangInteger *) nil_chk([terms2 getWithId:t])) intValue];
      if (coefficient == 0) {
        (void) [result removeWithId:t];
      }
      else {
        (void) [result putWithId:t withId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([terms_ getWithId:t])) intValue] + [((JavaLangInteger *) nil_chk([terms2 getWithId:t])) intValue])];
      }
    }
    else {
      (void) [result putWithId:t withId:[terms2 getWithId:t]];
    }
  }
  return new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(result);
}

- (OrgGeogebraCommonKernelProverPolynomialPolynomial *)negate {
  JavaUtilTreeMap *result = new_JavaUtilTreeMap_init();
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelProverPolynomialTerm *t = [it next];
    (void) [result putWithId:t withId:JavaLangInteger_valueOfWithInt_(0 - [((JavaLangInteger *) nil_chk([terms_ getWithId:t])) intValue])];
  }
  return new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(result);
}

- (OrgGeogebraCommonKernelProverPolynomialPolynomial *)subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)poly {
  return [self addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) negate]];
}

- (OrgGeogebraCommonKernelProverPolynomialPolynomial *)multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)poly {
  JavaUtilTreeMap *result = new_JavaUtilTreeMap_init();
  JavaUtilTreeMap *terms2 = [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) getTerms];
  id<JavaUtilIterator> it1 = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it1)) hasNext]) {
    OrgGeogebraCommonKernelProverPolynomialTerm *t1 = [it1 next];
    id<JavaUtilIterator> it2 = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms2)) keySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
      OrgGeogebraCommonKernelProverPolynomialTerm *t2 = [it2 next];
      OrgGeogebraCommonKernelProverPolynomialTerm *product = [((OrgGeogebraCommonKernelProverPolynomialTerm *) nil_chk(t1)) timesWithOrgGeogebraCommonKernelProverPolynomialTerm:t2];
      jint productCoefficient = [((JavaLangInteger *) nil_chk([terms_ getWithId:t1])) intValue] * [((JavaLangInteger *) nil_chk([terms2 getWithId:t2])) intValue];
      if ([result containsKeyWithId:product]) {
        jint sum = [((JavaLangInteger *) nil_chk([result getWithId:product])) intValue] + productCoefficient;
        if (sum == 0) {
          (void) [result removeWithId:product];
        }
        else {
          (void) [result putWithId:product withId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([result getWithId:product])) intValue] + productCoefficient)];
        }
      }
      else {
        (void) [result putWithId:product withId:JavaLangInteger_valueOfWithInt_(productCoefficient)];
      }
    }
  }
  return new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(result);
}

- (jint)compareToWithId:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)poly {
  (void) check_class_cast(poly, [OrgGeogebraCommonKernelProverPolynomialPolynomial class]);
  if (self == poly) {
    return 0;
  }
  JavaUtilTreeMap *polyVars = [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) getTerms];
  if ([((JavaUtilTreeMap *) nil_chk(polyVars)) isEmpty]) {
    if ([((JavaUtilTreeMap *) nil_chk(terms_)) isEmpty]) {
      return 0;
    }
    return 1;
  }
  if ([((JavaUtilTreeMap *) nil_chk(terms_)) isEmpty]) {
    return -1;
  }
  OrgGeogebraCommonKernelProverPolynomialTerm *termsLastKey = [terms_ lastKey], *polyVarsLastKey = [polyVars lastKey];
  jint compare = [((OrgGeogebraCommonKernelProverPolynomialTerm *) nil_chk(termsLastKey)) compareToWithId:polyVarsLastKey];
  if (compare == 0) {
    compare = [((JavaLangInteger *) nil_chk([terms_ getWithId:termsLastKey])) compareToWithId:[polyVars getWithId:polyVarsLastKey]];
  }
  if (compare != 0) {
    return compare;
  }
  do {
    id<JavaUtilSortedMap> termsSub = [terms_ headMapWithId:termsLastKey];
    id<JavaUtilSortedMap> oSub = [polyVars headMapWithId:polyVarsLastKey];
    if ([((id<JavaUtilSortedMap>) nil_chk(termsSub)) isEmpty]) {
      if ([((id<JavaUtilSortedMap>) nil_chk(oSub)) isEmpty]) {
        return 0;
      }
      return -1;
    }
    if ([((id<JavaUtilSortedMap>) nil_chk(oSub)) isEmpty]) {
      return 1;
    }
    termsLastKey = [termsSub lastKey];
    polyVarsLastKey = [oSub lastKey];
    compare = [((OrgGeogebraCommonKernelProverPolynomialTerm *) nil_chk(termsLastKey)) compareToWithId:polyVarsLastKey];
    if (compare == 0) {
      compare = [((JavaLangInteger *) nil_chk([termsSub getWithId:termsLastKey])) compareToWithId:[oSub getWithId:polyVarsLastKey]];
    }
  }
  while (compare == 0);
  return compare;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms_)) keySet])) iterator];
  if (![((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    return @"0";
  }
  while ([it hasNext]) {
    OrgGeogebraCommonKernelProverPolynomialTerm *t = [it next];
    jint c = [((JavaLangInteger *) nil_chk([terms_ getWithId:t])) intValue];
    if (![((JavaUtilTreeMap *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialTerm *) nil_chk(t)) getTerm])) isEmpty]) {
      if (c != 1) (void) [sb appendWithNSString:JreStrcat("IC", c, '*')];
      (void) [sb appendWithId:t];
    }
    else (void) [sb appendWithInt:c];
    (void) [sb appendWithChar:'+'];
  }
  return [sb substringWithInt:0 withInt:[sb length] - 1];
}

- (NSString *)toTeX {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms_)) keySet])) iterator];
  if (![((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    return @"0";
  }
  while ([it hasNext]) {
    OrgGeogebraCommonKernelProverPolynomialTerm *t = [it next];
    jint c = [((JavaLangInteger *) nil_chk([terms_ getWithId:t])) intValue];
    if (![((JavaUtilTreeMap *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialTerm *) nil_chk(t)) getTerm])) isEmpty]) {
      if (c != 1) {
        if (c != -1) {
          if (c < -1) {
            if ([sb length] > 0) {
              (void) [sb deleteCharAtWithInt:[sb length] - 1];
            }
          }
          (void) [sb appendWithInt:c];
        }
        else {
          if ([sb length] > 0) {
            (void) [sb deleteCharAtWithInt:[sb length] - 1];
          }
          (void) [sb appendWithChar:'-'];
        }
      }
      (void) [sb appendWithNSString:[t toTeX]];
    }
    else (void) [sb appendWithInt:c];
    (void) [sb appendWithChar:'+'];
  }
  return [sb substringWithInt:0 withInt:[sb length] - 1];
}

- (JavaUtilHashSet *)getVars {
  JavaUtilHashSet *v = new_JavaUtilHashSet_init();
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelProverPolynomialTerm *t = [it next];
    [v addAllWithJavaUtilCollection:[((OrgGeogebraCommonKernelProverPolynomialTerm *) nil_chk(t)) getVars]];
  }
  return v;
}

+ (JavaUtilHashSet *)getVarsWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_getVarsWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(polys);
}

+ (NSString *)getVarsAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys
                                                                                  withJavaUtilHashSet:(JavaUtilHashSet *)extraVars
                                                                                  withJavaLangBoolean:(JavaLangBoolean *)free {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_getVarsAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashSet_withJavaLangBoolean_(polys, extraVars, free);
}

+ (NSString *)getPolysAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_getPolysAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(polys);
}

- (NSString *)getSingularMultiplicationWithNSString:(NSString *)ringVariable
withOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)p1
withOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)p2 {
  NSString *vars = OrgGeogebraCommonKernelProverPolynomialPolynomial_getVarsAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashSet_withJavaLangBoolean_([IOSObjectArray newArrayWithObjects:(id[]){ p1, p2 } count:2 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()], nil, nil);
  if (![@"" isEqual:vars]) return JreStrcat("$$$$$$$$$", @"ring ", ringVariable, @"=0,(", vars, @"),dp;short=0;(", [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(p1)) description], @")*(", [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(p2)) description], @");");
  return JreStrcat("$C$C", [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(p1)) description], '*', [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(p2)) description], ';');
}

+ (OrgGeogebraCommonKernelProverPolynomialPolynomial *)collinearWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv1
                                                                withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv2
                                                                withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv3
                                                                withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv4
                                                                withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv5
                                                                withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)fv6 {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_collinearWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(fv1, fv2, fv3, fv4, fv5, fv6);
}

+ (OrgGeogebraCommonKernelProverPolynomialPolynomial *)perpendicularWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v1
                                                                    withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v2
                                                                    withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v3
                                                                    withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v4
                                                                    withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v5
                                                                    withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v6
                                                                    withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v7
                                                                    withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v8 {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_perpendicularWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(v1, v2, v3, v4, v5, v6, v7, v8);
}

+ (OrgGeogebraCommonKernelProverPolynomialPolynomial *)parallelWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v1
                                                               withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v2
                                                               withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v3
                                                               withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v4
                                                               withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v5
                                                               withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v6
                                                               withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v7
                                                               withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)v8 {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_parallelWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(v1, v2, v3, v4, v5, v6, v7, v8);
}

+ (OrgGeogebraCommonKernelProverPolynomialPolynomial *)det4WithOrgGeogebraCommonKernelProverPolynomialPolynomialArray2:(IOSObjectArray *)matrix {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_det4WithOrgGeogebraCommonKernelProverPolynomialPolynomialArray2_(matrix);
}

+ (IOSObjectArray *)crossProductWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)a
                                withOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)b {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_crossProductWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(a, b);
}

- (OrgGeogebraCommonKernelProverPolynomialPolynomial *)substituteWithJavaUtilMap:(id<JavaUtilMap>)substitutions {
  if (substitutions == nil) return self;
  JavaUtilTreeMap *result = new_JavaUtilTreeMap_init();
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelProverPolynomialTerm *t1 = [it next];
    JavaUtilTreeMap *term = new_JavaUtilTreeMap_initWithJavaUtilSortedMap_([((OrgGeogebraCommonKernelProverPolynomialTerm *) nil_chk(t1)) getTerm]);
    JavaMathBigInteger *product = JavaMathBigInteger_get_ONE_();
    id<JavaUtilIterator> itSubst = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(substitutions)) keySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(itSubst)) hasNext]) {
      OrgGeogebraCommonKernelProverPolynomialVariable *variable = [itSubst next];
      JavaLangInteger *exponent = [term getWithId:variable];
      if (exponent != nil) {
        product = [((JavaMathBigInteger *) nil_chk(product)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_([((JavaLangInteger *) nil_chk([substitutions getWithId:variable])) intValue]))) powWithInt:[exponent intValue]]];
        (void) [term removeWithId:variable];
      }
    }
    product = [((JavaMathBigInteger *) nil_chk(product)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_([((JavaLangInteger *) nil_chk([terms_ getWithId:t1])) intValue])];
    OrgGeogebraCommonKernelProverPolynomialTerm *t = new_OrgGeogebraCommonKernelProverPolynomialTerm_initWithJavaUtilTreeMap_(term);
    if ([result containsKeyWithId:t]) {
      JavaMathBigInteger *sum = [((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_([((JavaLangInteger *) nil_chk([result getWithId:t])) intValue]))) addWithJavaMathBigInteger:product];
      if ([((JavaMathBigInteger *) nil_chk(sum)) intValue] == 0) {
        (void) [result removeWithId:t];
      }
      else {
        (void) [result putWithId:t withId:JavaLangInteger_valueOfWithInt_([sum intValue])];
      }
    }
    else if ([((JavaMathBigInteger *) nil_chk(product)) intValue] != 0) {
      (void) [result putWithId:t withId:JavaLangInteger_valueOfWithInt_([product intValue])];
    }
  }
  return new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(result);
}

- (jboolean)isEqual:(id)o {
  if ([o isKindOfClass:[OrgGeogebraCommonKernelProverPolynomialPolynomial class]]) {
    return [self compareToWithId:(OrgGeogebraCommonKernelProverPolynomialPolynomial *) check_class_cast(o, [OrgGeogebraCommonKernelProverPolynomialPolynomial class])] == 0;
  }
  return [super isEqual:o];
}

- (NSUInteger)hash {
  return ((jint) [((JavaUtilTreeMap *) nil_chk(terms_)) hash]);
}

- (jboolean)isZero {
  return [((JavaUtilTreeMap *) nil_chk(terms_)) isEmpty];
}

- (jboolean)isConstant {
  if ([((JavaUtilTreeMap *) nil_chk(terms_)) size] > 1) {
    return NO;
  }
  if ([((OrgGeogebraCommonKernelProverPolynomialTerm *) nil_chk([terms_ firstKey])) isEqual:new_OrgGeogebraCommonKernelProverPolynomialTerm_init()]) {
    return YES;
  }
  return NO;
}

+ (jboolean)areAssociates1WithOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)p1
                          withOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)p2 {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_areAssociates1WithOrgGeogebraCommonKernelProverPolynomialPolynomial_withOrgGeogebraCommonKernelProverPolynomialPolynomial_(p1, p2);
}

- (jboolean)isOne {
  return [self isEqual:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(1)];
}

+ (NSString *)substitutionsStringWithJavaUtilHashMap:(JavaUtilHashMap *)subst {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_substitutionsStringWithJavaUtilHashMap_(subst);
}

+ (NSString *)addLeadingCommaWithNSString:(NSString *)inArg {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_addLeadingCommaWithNSString_(inArg);
}

+ (NSString *)coalesceWithNSString:(NSString *)in1
                      withNSString:(NSString *)in2 {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_coalesceWithNSString_withNSString_(in1, in2);
}

+ (NSString *)createGroebnerSolvableScriptWithJavaUtilHashMap:(JavaUtilHashMap *)substitutions
                                                 withNSString:(NSString *)polys
                                                 withNSString:(NSString *)fieldVars
                                                 withNSString:(NSString *)ringVars
                                                  withBoolean:(jboolean)transcext {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_createGroebnerSolvableScriptWithJavaUtilHashMap_withNSString_withNSString_withNSString_withBoolean_(substitutions, polys, fieldVars, ringVars, transcext);
}

+ (NSString *)createEliminateFactorizedScriptWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys
                                               withOrgGeogebraCommonKernelProverPolynomialVariableArray:(IOSObjectArray *)pVariables
                                                                                        withJavaUtilSet:(id<JavaUtilSet>)dependentVariables {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_createEliminateFactorizedScriptWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withOrgGeogebraCommonKernelProverPolynomialVariableArray_withJavaUtilSet_(polys, pVariables, dependentVariables);
}

+ (JavaLangBoolean *)solvableWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys
                                                                    withJavaUtilHashMap:(JavaUtilHashMap *)substitutions
                                                      withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                                                            withBoolean:(jboolean)transcext {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_solvableWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_withBoolean_(polys, substitutions, kernel, transcext);
}

+ (OrgGeogebraCommonKernelProverPolynomialPolynomial *)sqrWithOrgGeogebraCommonKernelProverPolynomialPolynomial:(OrgGeogebraCommonKernelProverPolynomialPolynomial *)p {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_sqrWithOrgGeogebraCommonKernelProverPolynomialPolynomial_(p);
}

+ (OrgGeogebraCommonKernelProverPolynomialPolynomial *)sqrDistanceWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)a1
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)a2
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)b1
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)b2 {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_sqrDistanceWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(a1, a2, b1, b2);
}

+ (OrgGeogebraCommonKernelProverPolynomialPolynomial *)equidistantWithOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)a1
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)a2
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)o1
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)o2
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)b1
                                                                  withOrgGeogebraCommonKernelProverPolynomialVariable:(OrgGeogebraCommonKernelProverPolynomialVariable *)b2 {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_equidistantWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(a1, a2, o1, o2, b1, b2);
}

+ (id<JavaUtilSet>)eliminateWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)eqSystem
                                                                   withJavaUtilHashMap:(JavaUtilHashMap *)substitutions
                                                     withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                                                               withInt:(jint)permutation {
  return OrgGeogebraCommonKernelProverPolynomialPolynomial_eliminateWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_withInt_(eqSystem, substitutions, kernel, permutation);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Polynomial", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelProverPolynomialPolynomial:", "Polynomial", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilTreeMap:", "Polynomial", NULL, 0x2, NULL, NULL },
    { "getTerms", NULL, "Ljava.util.TreeMap;", 0x1, NULL, NULL },
    { "initWithInt:", "Polynomial", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelProverPolynomialVariable:", "Polynomial", NULL, 0x1, NULL, NULL },
    { "initWithInt:withOrgGeogebraCommonKernelProverPolynomialVariable:", "Polynomial", NULL, 0x1, NULL, NULL },
    { "initWithInt:withOrgGeogebraCommonKernelProverPolynomialVariable:withInt:", "Polynomial", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelProverPolynomialTerm:", "Polynomial", NULL, 0x1, NULL, NULL },
    { "initWithInt:withOrgGeogebraCommonKernelProverPolynomialTerm:", "Polynomial", NULL, 0x1, NULL, NULL },
    { "addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:", "add", "Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, NULL, NULL },
    { "negate", NULL, "Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, NULL, NULL },
    { "subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:", "subtract", "Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, NULL, NULL },
    { "multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:", "multiply", "Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toTeX", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getVars", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "getVarsWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:", "getVars", "Ljava.util.HashSet;", 0x9, NULL, NULL },
    { "getVarsAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:withJavaUtilHashSet:withJavaLangBoolean:", "getVarsAsCommaSeparatedString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getPolysAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:", "getPolysAsCommaSeparatedString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getSingularMultiplicationWithNSString:withOrgGeogebraCommonKernelProverPolynomialPolynomial:withOrgGeogebraCommonKernelProverPolynomialPolynomial:", "getSingularMultiplication", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "collinearWithOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:", "collinear", "Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "perpendicularWithOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:", "perpendicular", "Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "parallelWithOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:", "parallel", "Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "det4WithOrgGeogebraCommonKernelProverPolynomialPolynomialArray2:", "det4", "Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "crossProductWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:withOrgGeogebraCommonKernelProverPolynomialPolynomialArray:", "crossProduct", "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "substituteWithJavaUtilMap:", "substitute", "Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isZero", NULL, "Z", 0x1, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "areAssociates1WithOrgGeogebraCommonKernelProverPolynomialPolynomial:withOrgGeogebraCommonKernelProverPolynomialPolynomial:", "areAssociates1", "Z", 0x9, NULL, NULL },
    { "isOne", NULL, "Z", 0x1, NULL, NULL },
    { "substitutionsStringWithJavaUtilHashMap:", "substitutionsString", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "addLeadingCommaWithNSString:", "addLeadingComma", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "coalesceWithNSString:withNSString:", "coalesce", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "createGroebnerSolvableScriptWithJavaUtilHashMap:withNSString:withNSString:withNSString:withBoolean:", "createGroebnerSolvableScript", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "createEliminateFactorizedScriptWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:withOrgGeogebraCommonKernelProverPolynomialVariableArray:withJavaUtilSet:", "createEliminateFactorizedScript", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "solvableWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:withJavaUtilHashMap:withOrgGeogebraCommonKernelKernel:withBoolean:", "solvable", "Ljava.lang.Boolean;", 0x9, NULL, NULL },
    { "sqrWithOrgGeogebraCommonKernelProverPolynomialPolynomial:", "sqr", "Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "sqrDistanceWithOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:", "sqrDistance", "Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "equidistantWithOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:withOrgGeogebraCommonKernelProverPolynomialVariable:", "equidistant", "Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "eliminateWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray:withJavaUtilHashMap:withOrgGeogebraCommonKernelKernel:withInt:", "eliminate", "Ljava.util.Set;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "terms_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Lorg/geogebra/common/kernel/prover/polynomial/Term;Ljava/lang/Integer;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelProverPolynomialPolynomial = { 2, "Polynomial", "org.geogebra.common.kernel.prover.polynomial", NULL, 0x1, 44, methods, 1, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/geogebra/common/kernel/prover/polynomial/Polynomial;>;" };
  return &_OrgGeogebraCommonKernelProverPolynomialPolynomial;
}

@end

void OrgGeogebraCommonKernelProverPolynomialPolynomial_init(OrgGeogebraCommonKernelProverPolynomialPolynomial *self) {
  (void) NSObject_init(self);
  self->terms_ = new_JavaUtilTreeMap_init();
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_init() {
  OrgGeogebraCommonKernelProverPolynomialPolynomial *self = [OrgGeogebraCommonKernelProverPolynomialPolynomial alloc];
  OrgGeogebraCommonKernelProverPolynomialPolynomial_init(self);
  return self;
}

void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialPolynomial_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, OrgGeogebraCommonKernelProverPolynomialPolynomial *poly) {
  (void) NSObject_init(self);
  self->terms_ = new_JavaUtilTreeMap_initWithJavaUtilSortedMap_([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) getTerms]);
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialPolynomial_(OrgGeogebraCommonKernelProverPolynomialPolynomial *poly) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial *self = [OrgGeogebraCommonKernelProverPolynomialPolynomial alloc];
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialPolynomial_(self, poly);
  return self;
}

void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, JavaUtilTreeMap *terms) {
  (void) NSObject_init(self);
  self->terms_ = terms;
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(JavaUtilTreeMap *terms) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial *self = [OrgGeogebraCommonKernelProverPolynomialPolynomial alloc];
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(self, terms);
  return self;
}

void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff) {
  (void) OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialTerm_(self, coeff, new_OrgGeogebraCommonKernelProverPolynomialTerm_init());
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(jint coeff) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial *self = [OrgGeogebraCommonKernelProverPolynomialPolynomial alloc];
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(self, coeff);
  return self;
}

void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, OrgGeogebraCommonKernelProverPolynomialVariable *fv) {
  (void) OrgGeogebraCommonKernelProverPolynomialPolynomial_init(self);
  (void) [((JavaUtilTreeMap *) nil_chk(self->terms_)) putWithId:new_OrgGeogebraCommonKernelProverPolynomialTerm_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(fv) withId:JavaLangInteger_valueOfWithInt_(1)];
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *fv) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial *self = [OrgGeogebraCommonKernelProverPolynomialPolynomial alloc];
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(self, fv);
  return self;
}

void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff, OrgGeogebraCommonKernelProverPolynomialVariable *variable) {
  (void) OrgGeogebraCommonKernelProverPolynomialPolynomial_init(self);
  if (coeff != 0) (void) [((JavaUtilTreeMap *) nil_chk(self->terms_)) putWithId:new_OrgGeogebraCommonKernelProverPolynomialTerm_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(variable) withId:JavaLangInteger_valueOfWithInt_(coeff)];
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialVariable_(jint coeff, OrgGeogebraCommonKernelProverPolynomialVariable *variable) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial *self = [OrgGeogebraCommonKernelProverPolynomialPolynomial alloc];
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialVariable_(self, coeff, variable);
  return self;
}

void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialVariable_withInt_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff, OrgGeogebraCommonKernelProverPolynomialVariable *variable, jint power) {
  (void) OrgGeogebraCommonKernelProverPolynomialPolynomial_init(self);
  if (coeff != 0) (void) [((JavaUtilTreeMap *) nil_chk(self->terms_)) putWithId:new_OrgGeogebraCommonKernelProverPolynomialTerm_initWithOrgGeogebraCommonKernelProverPolynomialVariable_withInt_(variable, power) withId:JavaLangInteger_valueOfWithInt_(coeff)];
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialVariable_withInt_(jint coeff, OrgGeogebraCommonKernelProverPolynomialVariable *variable, jint power) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial *self = [OrgGeogebraCommonKernelProverPolynomialPolynomial alloc];
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialVariable_withInt_(self, coeff, variable, power);
  return self;
}

void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialTerm_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, OrgGeogebraCommonKernelProverPolynomialTerm *t) {
  (void) OrgGeogebraCommonKernelProverPolynomialPolynomial_init(self);
  (void) [((JavaUtilTreeMap *) nil_chk(self->terms_)) putWithId:t withId:JavaLangInteger_valueOfWithInt_(1)];
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialTerm_(OrgGeogebraCommonKernelProverPolynomialTerm *t) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial *self = [OrgGeogebraCommonKernelProverPolynomialPolynomial alloc];
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialTerm_(self, t);
  return self;
}

void OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialTerm_(OrgGeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff, OrgGeogebraCommonKernelProverPolynomialTerm *t) {
  (void) OrgGeogebraCommonKernelProverPolynomialPolynomial_init(self);
  if (coeff != 0) (void) [((JavaUtilTreeMap *) nil_chk(self->terms_)) putWithId:t withId:JavaLangInteger_valueOfWithInt_(coeff)];
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialTerm_(jint coeff, OrgGeogebraCommonKernelProverPolynomialTerm *t) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial *self = [OrgGeogebraCommonKernelProverPolynomialPolynomial alloc];
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withOrgGeogebraCommonKernelProverPolynomialTerm_(self, coeff, t);
  return self;
}

JavaUtilHashSet *OrgGeogebraCommonKernelProverPolynomialPolynomial_getVarsWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(IOSObjectArray *polys) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  JavaUtilHashSet *v = new_JavaUtilHashSet_init();
  jint polysLength = 0;
  if (polys != nil) polysLength = polys->size_;
  for (jint i = 0; i < polysLength; ++i) {
    JavaUtilHashSet *vars = [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(polys), i))) getVars];
    if (vars != nil) [v addAllWithJavaUtilCollection:vars];
  }
  return v;
}

NSString *OrgGeogebraCommonKernelProverPolynomialPolynomial_getVarsAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashSet_withJavaLangBoolean_(IOSObjectArray *polys, JavaUtilHashSet *extraVars, JavaLangBoolean *free) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  JavaUtilHashSet *vars = OrgGeogebraCommonKernelProverPolynomialPolynomial_getVarsWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(polys);
  if (extraVars != nil) [((JavaUtilHashSet *) nil_chk(vars)) addAllWithJavaUtilCollection:extraVars];
  id<JavaUtilIterator> it = [((JavaUtilHashSet *) nil_chk(vars)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelProverPolynomialVariable *fv = [it next];
    if ((free == nil) || ([free booleanValue] && [((OrgGeogebraCommonKernelProverPolynomialVariable *) nil_chk(fv)) isFree]) || (![free booleanValue] && ![((OrgGeogebraCommonKernelProverPolynomialVariable *) nil_chk(fv)) isFree])) (void) [sb appendWithNSString:JreStrcat("C@", ',', fv)];
  }
  if ([sb length] > 0) return [sb substringWithInt:1];
  return @"";
}

NSString *OrgGeogebraCommonKernelProverPolynomialPolynomial_getPolysAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(IOSObjectArray *polys) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(polys))->size_; ++i) (void) [sb appendWithNSString:JreStrcat("C$", ',', [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(polys, i))) description])];
  if ([sb length] > 0) return [sb substringWithInt:1];
  return @"";
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *OrgGeogebraCommonKernelProverPolynomialPolynomial_collinearWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *fv1, OrgGeogebraCommonKernelProverPolynomialVariable *fv2, OrgGeogebraCommonKernelProverPolynomialVariable *fv3, OrgGeogebraCommonKernelProverPolynomialVariable *fv4, OrgGeogebraCommonKernelProverPolynomialVariable *fv5, OrgGeogebraCommonKernelProverPolynomialVariable *fv6) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  OrgGeogebraCommonMainApp_traceWithNSString_(JreStrcat("$@C@$@C@$@C@C", @"Setting up equation for collinear points (", fv1, ',', fv2, @"), (", fv3, ',', fv4, @") and (", fv5, ',', fv6, ')'));
  OrgGeogebraCommonKernelProverPolynomialPolynomial *a = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(fv1);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *b = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(fv2);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *c = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(fv3);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *d = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(fv4);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *e = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(fv5);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *f = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(fv6);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *ret = [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([a multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:d])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[b multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:c]])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[e multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[b subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:d]]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[f multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[a subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:c]]];
  return ret;
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *OrgGeogebraCommonKernelProverPolynomialPolynomial_perpendicularWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *v1, OrgGeogebraCommonKernelProverPolynomialVariable *v2, OrgGeogebraCommonKernelProverPolynomialVariable *v3, OrgGeogebraCommonKernelProverPolynomialVariable *v4, OrgGeogebraCommonKernelProverPolynomialVariable *v5, OrgGeogebraCommonKernelProverPolynomialVariable *v6, OrgGeogebraCommonKernelProverPolynomialVariable *v7, OrgGeogebraCommonKernelProverPolynomialVariable *v8) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  OrgGeogebraCommonMainApp_traceWithNSString_(JreStrcat("$@C@$@C@$@C@$@C@C", @"Setting up equation for perpendicular lines (", v1, ',', v2, @")-(", v3, ',', v4, @") and (", v5, ',', v6, @")-(", v7, ',', v8, ')'));
  OrgGeogebraCommonKernelProverPolynomialPolynomial *a1 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v1);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *a2 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v2);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *b1 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v3);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *b2 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v4);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *c1 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v5);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *c2 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v6);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *d1 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v7);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *d2 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v8);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *ret = [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([a1 subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:b1]))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[c1 subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:d1]]))) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([a2 subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:b2]))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[c2 subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:d2]]];
  return ret;
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *OrgGeogebraCommonKernelProverPolynomialPolynomial_parallelWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *v1, OrgGeogebraCommonKernelProverPolynomialVariable *v2, OrgGeogebraCommonKernelProverPolynomialVariable *v3, OrgGeogebraCommonKernelProverPolynomialVariable *v4, OrgGeogebraCommonKernelProverPolynomialVariable *v5, OrgGeogebraCommonKernelProverPolynomialVariable *v6, OrgGeogebraCommonKernelProverPolynomialVariable *v7, OrgGeogebraCommonKernelProverPolynomialVariable *v8) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  OrgGeogebraCommonMainApp_traceWithNSString_(JreStrcat("$@C@$@C@$@C@$@C@C", @"Setting up equation for parallel lines (", v1, ',', v2, @")-(", v3, ',', v4, @") and (", v5, ',', v6, @")-(", v7, ',', v8, ')'));
  OrgGeogebraCommonKernelProverPolynomialPolynomial *a1 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v1);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *a2 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v2);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *b1 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v3);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *b2 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v4);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *c1 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v5);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *c2 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v6);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *d1 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v7);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *d2 = new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(v8);
  OrgGeogebraCommonKernelProverPolynomialPolynomial *ret = [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([a1 subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:b1]))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[c2 subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:d2]]))) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([a2 subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:b2]))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[c1 subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:d1]]];
  return ret;
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *OrgGeogebraCommonKernelProverPolynomialPolynomial_det4WithOrgGeogebraCommonKernelProverPolynomialPolynomialArray2_(IOSObjectArray *matrix) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  OrgGeogebraCommonKernelProverPolynomialPolynomial *complex$1 = [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix), 0)), 3))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]];
  return [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(complex$1)) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]];
}

IOSObjectArray *OrgGeogebraCommonKernelProverPolynomialPolynomial_crossProductWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(IOSObjectArray *a, IOSObjectArray *b) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
  (void) IOSObjectArray_Set(result, 0, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(a), 1))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(b), 2)]))) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(a, 2))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(b, 1)]]);
  (void) IOSObjectArray_Set(result, 1, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(a, 2))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(b, 0)]))) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(a, 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(b, 2)]]);
  (void) IOSObjectArray_Set(result, 2, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(a, 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(b, 1)]))) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(a, 1))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(b, 0)]]);
  return result;
}

jboolean OrgGeogebraCommonKernelProverPolynomialPolynomial_areAssociates1WithOrgGeogebraCommonKernelProverPolynomialPolynomial_withOrgGeogebraCommonKernelProverPolynomialPolynomial_(OrgGeogebraCommonKernelProverPolynomialPolynomial *p1, OrgGeogebraCommonKernelProverPolynomialPolynomial *p2) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  return [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(p1)) isEqual:p2] || [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([p1 addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:p2])) isZero];
}

NSString *OrgGeogebraCommonKernelProverPolynomialPolynomial_substitutionsStringWithJavaUtilHashMap_(JavaUtilHashMap *subst) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  NSString *ret = @"";
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(subst)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelProverPolynomialVariable *v = [it next];
    ret = JreStrcat("$$", ret, JreStrcat("C$C@", ',', [((OrgGeogebraCommonKernelProverPolynomialVariable *) nil_chk(v)) description], ',', [subst getWithId:v]));
  }
  if (((jint) [ret length]) > 0) return [ret substring:1];
  return @"";
}

NSString *OrgGeogebraCommonKernelProverPolynomialPolynomial_addLeadingCommaWithNSString_(NSString *inArg) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  if (inArg == nil || ((jint) [inArg length]) == 0) return @"";
  return JreStrcat("C$", ',', inArg);
}

NSString *OrgGeogebraCommonKernelProverPolynomialPolynomial_coalesceWithNSString_withNSString_(NSString *in1, NSString *in2) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  if (in1 == nil || ((jint) [in1 length]) == 0) return in2;
  return in1;
}

NSString *OrgGeogebraCommonKernelProverPolynomialPolynomial_createGroebnerSolvableScriptWithJavaUtilHashMap_withNSString_withNSString_withNSString_withBoolean_(JavaUtilHashMap *substitutions, NSString *polys, NSString *fieldVars, NSString *ringVars, jboolean transcext) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  NSString *ringVariable = @"r";
  NSString *idealVariable = @"i";
  NSString *dummyVar = @"d";
  NSString *vars = JreStrcat("$$", ringVars, OrgGeogebraCommonKernelProverPolynomialPolynomial_addLeadingCommaWithNSString_(fieldVars));
  NSString *substCommand = @"";
  if (substitutions != nil) {
    NSString *substParams = OrgGeogebraCommonKernelProverPolynomialPolynomial_substitutionsStringWithJavaUtilHashMap_(substitutions);
    substCommand = JreStrcat("$$$C$$", idealVariable, @"=subst(", idealVariable, ',', substParams, @");");
  }
  NSString *ret = JreStrcat("$$C", @"ring ", ringVariable, '=');
  if (transcext) {
    ret = JreStrcat("$$", ret, JreStrcat("$$$$", @"(0", OrgGeogebraCommonKernelProverPolynomialPolynomial_addLeadingCommaWithNSString_(fieldVars), @"),(", OrgGeogebraCommonKernelProverPolynomialPolynomial_coalesceWithNSString_withNSString_(ringVars, dummyVar)));
  }
  else {
    ret = JreStrcat("$$", ret, JreStrcat("$$", @"0,(", OrgGeogebraCommonKernelProverPolynomialPolynomial_coalesceWithNSString_withNSString_(vars, dummyVar)));
  }
  ret = JreStrcat("$$", ret, JreStrcat("$$C$C", @"),dp;ideal ", idealVariable, '=', polys, ';'));
  ret = JreStrcat("$$", ret, substCommand);
  ret = JreStrcat("$$", ret, JreStrcat("$$$", @"groebner(", idealVariable, @")!=1;"));
  return ret;
}

NSString *OrgGeogebraCommonKernelProverPolynomialPolynomial_createEliminateFactorizedScriptWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withOrgGeogebraCommonKernelProverPolynomialVariableArray_withJavaUtilSet_(IOSObjectArray *polys, IOSObjectArray *pVariables, id<JavaUtilSet> dependentVariables) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  NSString *ringVariable = @"r";
  NSString *idealVariable = @"i";
  NSString *loopVariable = @"j";
  NSString *sizeVariable = @"s";
  NSString *eliminationVariable = @"e";
  NSString *outputVariable = @"o";
  NSString *dummyVar = @"d";
  JavaLangStringBuffer *ret = new_JavaLangStringBuffer_initWithNSString_(@"ring ");
  (void) [ret appendWithNSString:ringVariable];
  (void) [ret appendWithNSString:@"=0,("];
  NSString *vars = @"";
  {
    IOSObjectArray *a__ = pVariables;
    OrgGeogebraCommonKernelProverPolynomialVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgGeogebraCommonKernelProverPolynomialVariable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonKernelProverPolynomialVariable *v = *b__++;
      vars = JreStrcat("$$", vars, JreStrcat("@C", v, ','));
    }
  }
  if (![@"" isEqual:vars]) {
    vars = [vars substring:0 endIndex:((jint) [vars length]) - 1];
  }
  if (![@"" isEqual:vars]) {
    (void) [ret appendWithNSString:vars];
    if ([((id<JavaUtilSet>) nil_chk(dependentVariables)) isEmpty]) {
      (void) [((JavaLangStringBuffer *) nil_chk([ret appendWithNSString:@","])) appendWithNSString:dummyVar];
    }
  }
  else (void) [ret appendWithNSString:dummyVar];
  (void) [ret appendWithNSString:@"),dp;"];
  (void) [ret appendWithNSString:@"ideal "];
  (void) [ret appendWithNSString:idealVariable];
  (void) [ret appendWithNSString:@"="];
  (void) [ret appendWithNSString:OrgGeogebraCommonKernelProverPolynomialPolynomial_getPolysAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(polys)];
  (void) [ret appendWithNSString:@";"];
  (void) [ret appendWithNSString:@"ideal "];
  (void) [ret appendWithNSString:eliminationVariable];
  (void) [ret appendWithNSString:@"="];
  (void) [ret appendWithNSString:@"eliminate("];
  (void) [ret appendWithNSString:idealVariable];
  (void) [ret appendWithNSString:@","];
  vars = @"";
  id<JavaUtilIterator> dependentVariablesIterator = [((id<JavaUtilSet>) nil_chk(dependentVariables)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(dependentVariablesIterator)) hasNext]) {
    vars = JreStrcat("$@", vars, [dependentVariablesIterator next]);
    if ([dependentVariablesIterator hasNext]) {
      vars = JreStrcat("$C", vars, '*');
    }
  }
  if (![@"" isEqual:vars]) (void) [ret appendWithNSString:vars];
  else (void) [ret appendWithNSString:dummyVar];
  (void) [ret appendWithNSString:@");"];
  (void) [ret appendWithNSString:JreStrcat("$$$$$$$", @"list ", outputVariable, @";int ", sizeVariable, @"=size(", eliminationVariable, @");")];
  (void) [ret appendWithNSString:JreStrcat("$$$$$$$$C$C$$", @"int ", loopVariable, @";for(", loopVariable, @"=1;", loopVariable, @"<=", sizeVariable, ';', loopVariable, '=', loopVariable, @"+1)")];
  (void) [ret appendWithNSString:JreStrcat("C$C$$$C$$", '{', outputVariable, '[', loopVariable, @"]=factorize(", eliminationVariable, '[', loopVariable, @"]);}o;")];
  return [ret description];
}

JavaLangBoolean *OrgGeogebraCommonKernelProverPolynomialPolynomial_solvableWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_withBoolean_(IOSObjectArray *polys, JavaUtilHashMap *substitutions, OrgGeogebraCommonKernelKernel *kernel, jboolean transcext) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  JavaUtilHashSet *substVars = nil;
  NSString *polysAsCommaSeparatedString = OrgGeogebraCommonKernelProverPolynomialPolynomial_getPolysAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(polys);
  substVars = new_JavaUtilHashSet_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(substitutions)) keySet]);
  NSString *freeVars = OrgGeogebraCommonKernelProverPolynomialPolynomial_getVarsAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashSet_withJavaLangBoolean_(polys, substVars, JavaLangBoolean_valueOfWithBoolean_(YES));
  NSString *dependantVars = OrgGeogebraCommonKernelProverPolynomialPolynomial_getVarsAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashSet_withJavaLangBoolean_(polys, substVars, JavaLangBoolean_valueOfWithBoolean_(NO));
  NSString *solvableResult, *solvableProgram;
  if (OrgGeogebraCommonMainApp_get_singularWS_() != nil && [OrgGeogebraCommonMainApp_get_singularWS_() isAvailable]) {
    solvableProgram = OrgGeogebraCommonKernelProverPolynomialPolynomial_createGroebnerSolvableScriptWithJavaUtilHashMap_withNSString_withNSString_withNSString_withBoolean_(substitutions, polysAsCommaSeparatedString, freeVars, dependantVars, transcext);
    if (((jint) [((NSString *) nil_chk(solvableProgram)) length]) > 500) OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("I$", ((jint) [solvableProgram length]), @" bytes -> singular"));
    else OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", solvableProgram, @" -> singular"));
    @try {
      solvableResult = [OrgGeogebraCommonMainApp_get_singularWS_() directCommandWithNSString:solvableProgram];
      if (((jint) [((NSString *) nil_chk(solvableResult)) length]) > 500) OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I$", @"singular -> ", ((jint) [solvableResult length]), @" bytes"));
      else OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"singular -> ", solvableResult));
      if ([@"0" isEqual:solvableResult]) return JavaLangBoolean_valueOfWithBoolean_(NO);
    }
    @catch (JavaLangThrowable *e) {
      @throw new_OrgGeogebraCommonKernelCASException_initWithNSString_(@"Couldn't compute ");
    }
    return JavaLangBoolean_valueOfWithBoolean_(YES);
  }
  OrgGeogebraCommonCasGeoGebraCAS *cas = (OrgGeogebraCommonCasGeoGebraCAS *) check_class_cast([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getGeoGebraCAS], [OrgGeogebraCommonCasGeoGebraCAS class]);
  solvableProgram = [((id<OrgGeogebraCommonKernelCASGenericInterface>) nil_chk([((OrgGeogebraCommonCasGeoGebraCAS *) nil_chk(cas)) getCurrentCAS])) createGroebnerSolvableScriptWithJavaUtilHashMap:substitutions withNSString:polysAsCommaSeparatedString withNSString:freeVars withNSString:dependantVars withBoolean:transcext];
  if (solvableProgram == nil) {
    OrgGeogebraCommonUtilDebugLog_infoWithNSString_(@"Not implemented (yet)");
    return nil;
  }
  OrgGeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$", @"[groebnerSolvable] input to cas: ", solvableProgram));
  @try {
    (void) [cas evaluateRawWithNSString:OrgGeogebraCommonCasGiacCASgiac_get_closeString_()];
  }
  @catch (JavaLangThrowable *e) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
  }
  solvableResult = [cas evaluateWithNSString:solvableProgram];
  @try {
    (void) [cas evaluateRawWithNSString:OrgGeogebraCommonCasGiacCASgiac_get_initString_()];
  }
  @catch (JavaLangThrowable *e) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
  }
  OrgGeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$", @"[groebnerSolvable] output from cas: ", solvableResult));
  if ([@"0" isEqual:solvableResult] || [@"false" isEqual:solvableResult]) return JavaLangBoolean_valueOfWithBoolean_(NO);
  if ([@"1" isEqual:solvableResult] || [@"true" isEqual:solvableResult]) return JavaLangBoolean_valueOfWithBoolean_(YES);
  return nil;
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *OrgGeogebraCommonKernelProverPolynomialPolynomial_sqrWithOrgGeogebraCommonKernelProverPolynomialPolynomial_(OrgGeogebraCommonKernelProverPolynomialPolynomial *p) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  return [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(p)) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:p];
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *OrgGeogebraCommonKernelProverPolynomialPolynomial_sqrDistanceWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *a1, OrgGeogebraCommonKernelProverPolynomialVariable *a2, OrgGeogebraCommonKernelProverPolynomialVariable *b1, OrgGeogebraCommonKernelProverPolynomialVariable *b2) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  return [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(OrgGeogebraCommonKernelProverPolynomialPolynomial_sqrWithOrgGeogebraCommonKernelProverPolynomialPolynomial_([new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(a1) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(b1)]))) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:OrgGeogebraCommonKernelProverPolynomialPolynomial_sqrWithOrgGeogebraCommonKernelProverPolynomialPolynomial_([new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(a2) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(b2)])];
}

OrgGeogebraCommonKernelProverPolynomialPolynomial *OrgGeogebraCommonKernelProverPolynomialPolynomial_equidistantWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(OrgGeogebraCommonKernelProverPolynomialVariable *a1, OrgGeogebraCommonKernelProverPolynomialVariable *a2, OrgGeogebraCommonKernelProverPolynomialVariable *o1, OrgGeogebraCommonKernelProverPolynomialVariable *o2, OrgGeogebraCommonKernelProverPolynomialVariable *b1, OrgGeogebraCommonKernelProverPolynomialVariable *b2) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  return [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(OrgGeogebraCommonKernelProverPolynomialPolynomial_sqrDistanceWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(a1, a2, o1, o2))) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:OrgGeogebraCommonKernelProverPolynomialPolynomial_sqrDistanceWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(o1, o2, b1, b2)];
}

id<JavaUtilSet> OrgGeogebraCommonKernelProverPolynomialPolynomial_eliminateWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_withInt_(IOSObjectArray *eqSystem, JavaUtilHashMap *substitutions, OrgGeogebraCommonKernelKernel *kernel, jint permutation) {
  OrgGeogebraCommonKernelProverPolynomialPolynomial_initialize();
  JavaUtilTreeSet *dependentVariables = new_JavaUtilTreeSet_init();
  JavaUtilTreeSet *freeVariables = new_JavaUtilTreeSet_init();
  JavaUtilTreeSet *variables = new_JavaUtilTreeSet_initWithJavaUtilCollection_(OrgGeogebraCommonKernelProverPolynomialPolynomial_getVarsWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(eqSystem));
  id<JavaUtilIterator> variablesIterator = [variables iterator];
  while ([((id<JavaUtilIterator>) nil_chk(variablesIterator)) hasNext]) {
    OrgGeogebraCommonKernelProverPolynomialVariable *variable = [variablesIterator next];
    if (![((OrgGeogebraCommonKernelProverPolynomialVariable *) nil_chk(variable)) isFree]) {
      [dependentVariables addWithId:variable];
    }
    else {
      if (![((JavaUtilHashMap *) nil_chk(substitutions)) containsKeyWithId:variable]) {
        [freeVariables addWithId:variable];
      }
    }
  }
  IOSObjectArray *eqSystemSubstituted;
  if (substitutions != nil) {
    eqSystemSubstituted = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(eqSystem))->size_ type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
    for (jint i = 0; i < eqSystem->size_; i++) {
      (void) IOSObjectArray_Set(eqSystemSubstituted, i, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(eqSystem, i))) substituteWithJavaUtilMap:substitutions]);
    }
    [variables removeAllWithJavaUtilCollection:[substitutions keySet]];
  }
  else {
    eqSystemSubstituted = eqSystem;
  }
  NSString *elimResult, *elimProgram;
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I$I$", @"Eliminating system in ", [variables size], @" variables (", [dependentVariables size], @" dependent)"));
  if (OrgGeogebraCommonMainApp_get_singularWS_() != nil && [OrgGeogebraCommonMainApp_get_singularWS_() isAvailable]) {
    jint vSize = [freeVariables size];
    IOSObjectArray *aVariables = [IOSObjectArray newArrayWithLength:vSize type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
    id<JavaUtilIterator> it = [freeVariables iterator];
    jint ai = 0;
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      (void) IOSObjectArray_Set(aVariables, ai++, [it next]);
    }
    IOSIntArray *indices = [IOSIntArray newArrayWithLength:vSize];
    for (jint i = 0; i < vSize; ++i) {
      *IOSIntArray_GetRef(indices, i) = i;
    }
    if (vSize >= 4) {
      IOSObjectArray *perms = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSIntArray newArrayWithInts:(jint[]){ 3, 2, 1, 0 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 3, 2, 0, 1 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 3, 1, 2, 0 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 3, 1, 0, 2 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 3, 0, 1, 2 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 3, 0, 2, 1 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 2, 3, 1, 0 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 2, 3, 0, 1 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 2, 1, 0, 3 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 2, 1, 3, 0 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 2, 0, 1, 3 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 2, 0, 3, 1 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 1, 3, 2, 0 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 1, 3, 0, 2 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 1, 2, 3, 0 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 1, 2, 0, 3 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 1, 0, 3, 2 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 1, 0, 2, 3 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 0, 3, 2, 1 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 0, 3, 1, 2 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 0, 2, 3, 1 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 0, 2, 1, 3 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 0, 1, 3, 2 } count:4], [IOSIntArray newArrayWithInts:(jint[]){ 0, 1, 2, 3 } count:4] } count:24 type:IOSClass_intArray(1)];
      for (jint j = 0; j < 4; ++j) {
        *IOSIntArray_GetRef(indices, j + vSize - 4) = 3 - IOSIntArray_Get(nil_chk(IOSObjectArray_Get(perms, permutation)), j) + vSize - 4;
      }
    }
    IOSObjectArray *pVariables = [IOSObjectArray newArrayWithLength:[variables size] type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
    NSString *debug = @"";
    for (jint j = 0; j < vSize; ++j) {
      (void) IOSObjectArray_Set(pVariables, j, IOSObjectArray_Get(aVariables, IOSIntArray_Get(indices, j)));
      debug = JreStrcat("$$", debug, JreStrcat("@C", IOSObjectArray_Get(aVariables, IOSIntArray_Get(indices, j)), ','));
    }
    if (![@"" isEqual:debug]) {
      debug = [debug substring:0 endIndex:((jint) [debug length]) - 1];
    }
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I$$", @"Checking variable permutation #", permutation, @": ", debug));
    it = [dependentVariables iterator];
    for (jint j = vSize; j < [variables size]; ++j) {
      (void) IOSObjectArray_Set(pVariables, j, [((id<JavaUtilIterator>) nil_chk(it)) next]);
    }
    elimProgram = OrgGeogebraCommonKernelProverPolynomialPolynomial_createEliminateFactorizedScriptWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withOrgGeogebraCommonKernelProverPolynomialVariableArray_withJavaUtilSet_(eqSystemSubstituted, pVariables, dependentVariables);
    if (((jint) [((NSString *) nil_chk(elimProgram)) length]) > 500) OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("I$", ((jint) [elimProgram length]), @" bytes -> singular"));
    else OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", elimProgram, @" -> singular"));
    @try {
      elimResult = [OrgGeogebraCommonMainApp_get_singularWS_() directCommandWithNSString:elimProgram];
      if (elimResult == nil) {
        return nil;
      }
      if (((jint) [((NSString *) nil_chk(elimResult)) length]) > 500) OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I$", @"singular -> ", ((jint) [elimResult length]), @" bytes"));
      else OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"singular -> ", elimResult));
    }
    @catch (JavaLangThrowable *e) {
      @throw new_OrgGeogebraCommonKernelCASException_initWithNSString_(@"Cannot compute elimination with SingularWS");
    }
  }
  else {
    OrgGeogebraCommonCasGeoGebraCAS *cas = (OrgGeogebraCommonCasGeoGebraCAS *) check_class_cast([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getGeoGebraCAS], [OrgGeogebraCommonCasGeoGebraCAS class]);
    NSString *polys = OrgGeogebraCommonKernelProverPolynomialPolynomial_getPolysAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_(eqSystemSubstituted);
    NSString *elimVars = OrgGeogebraCommonKernelProverPolynomialPolynomial_getVarsAsCommaSeparatedStringWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashSet_withJavaLangBoolean_(eqSystemSubstituted, nil, JavaLangBoolean_valueOfWithBoolean_(NO));
    elimProgram = [((id<OrgGeogebraCommonKernelCASGenericInterface>) nil_chk([((OrgGeogebraCommonCasGeoGebraCAS *) nil_chk(cas)) getCurrentCAS])) createEliminateFactorizedScriptWithNSString:polys withNSString:elimVars];
    if (elimProgram == nil) {
      OrgGeogebraCommonUtilDebugLog_infoWithNSString_(@"Not implemented (yet)");
      return nil;
    }
    OrgGeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$", @"[eliminateFactorized] input to cas: ", elimProgram));
    @try {
      (void) [cas evaluateRawWithNSString:OrgGeogebraCommonCasGiacCASgiac_get_closeString_()];
    }
    @catch (JavaLangThrowable *e) {
      [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
    }
    elimResult = [((NSString *) nil_chk([((NSString *) nil_chk([cas evaluateWithNSString:elimProgram])) replace:@"unicode95u" withSequence:@"_"])) replace:@"unicode91u" withSequence:@"["];
    @try {
      (void) [cas evaluateRawWithNSString:OrgGeogebraCommonCasGiacCASgiac_get_initString_()];
    }
    @catch (JavaLangThrowable *e) {
      [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
    }
    OrgGeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$", @"[eliminateFactorized] output from cas: ", elimResult));
  }
  if ([@"empty list" isEqual:elimResult] || [@"[0]" isEqual:elimResult]) {
    id<JavaUtilSet> ret = new_JavaUtilHashSet_init();
    JavaUtilHashSet *polys = new_JavaUtilHashSet_init();
    [polys addWithId:new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(0)];
    [ret addWithId:polys];
    return ret;
  }
  if ([@"?" isEqual:elimResult] || [@"" isEqual:elimResult]) {
    return nil;
  }
  @try {
    return OrgGeogebraCommonKernelProverPolynomialPolynomialParser_parseFactoredPolynomialSetWithNSString_withJavaUtilSet_(elimResult, variables);
  }
  @catch (OrgGeogebraCommonKernelProverPolynomialParseException *e) {
    [((OrgGeogebraCommonKernelProverPolynomialParseException *) nil_chk(e)) printStackTrace];
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelProverPolynomialPolynomial)
