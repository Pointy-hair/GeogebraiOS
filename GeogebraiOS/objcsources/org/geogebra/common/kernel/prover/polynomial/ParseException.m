//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/prover/polynomial/ParseException.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "org/geogebra/common/kernel/prover/polynomial/ParseException.h"
#include "org/geogebra/common/kernel/prover/polynomial/Token.h"

#define OrgGeogebraCommonKernelProverPolynomialParseException_serialVersionUID 1LL

@interface OrgGeogebraCommonKernelProverPolynomialParseException ()

+ (NSString *)initialiseWithOrgGeogebraCommonKernelProverPolynomialToken:(OrgGeogebraCommonKernelProverPolynomialToken *)currentToken
                                                           withIntArray2:(IOSObjectArray *)expectedTokenSequences
                                                       withNSStringArray:(IOSObjectArray *)tokenImage OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelProverPolynomialParseException, serialVersionUID, jlong)

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelProverPolynomialParseException_initialiseWithOrgGeogebraCommonKernelProverPolynomialToken_withIntArray2_withNSStringArray_(OrgGeogebraCommonKernelProverPolynomialToken *currentToken, IOSObjectArray *expectedTokenSequences, IOSObjectArray *tokenImage);

@implementation OrgGeogebraCommonKernelProverPolynomialParseException

- (instancetype)initWithOrgGeogebraCommonKernelProverPolynomialToken:(OrgGeogebraCommonKernelProverPolynomialToken *)currentTokenVal
                                                       withIntArray2:(IOSObjectArray *)expectedTokenSequencesVal
                                                   withNSStringArray:(IOSObjectArray *)tokenImageVal {
  OrgGeogebraCommonKernelProverPolynomialParseException_initWithOrgGeogebraCommonKernelProverPolynomialToken_withIntArray2_withNSStringArray_(self, currentTokenVal, expectedTokenSequencesVal, tokenImageVal);
  return self;
}

- (instancetype)init {
  OrgGeogebraCommonKernelProverPolynomialParseException_init(self);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message {
  OrgGeogebraCommonKernelProverPolynomialParseException_initWithNSString_(self, message);
  return self;
}

+ (NSString *)initialiseWithOrgGeogebraCommonKernelProverPolynomialToken:(OrgGeogebraCommonKernelProverPolynomialToken *)currentToken
                                                           withIntArray2:(IOSObjectArray *)expectedTokenSequences
                                                       withNSStringArray:(IOSObjectArray *)tokenImage {
  return OrgGeogebraCommonKernelProverPolynomialParseException_initialiseWithOrgGeogebraCommonKernelProverPolynomialToken_withIntArray2_withNSStringArray_(currentToken, expectedTokenSequences, tokenImage);
}

+ (NSString *)add_escapesWithNSString:(NSString *)str {
  return OrgGeogebraCommonKernelProverPolynomialParseException_add_escapesWithNSString_(str);
}

- (void)dealloc {
  RELEASE_(currentToken_);
  RELEASE_(expectedTokenSequences_);
  RELEASE_(tokenImage_);
  RELEASE_(eol_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelProverPolynomialToken:withIntArray2:withNSStringArray:", "ParseException", NULL, 0x1, NULL, NULL },
    { "init", "ParseException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "ParseException", NULL, 0x1, NULL, NULL },
    { "initialiseWithOrgGeogebraCommonKernelProverPolynomialToken:withIntArray2:withNSStringArray:", "initialise", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "add_escapesWithNSString:", "add_escapes", "Ljava.lang.String;", 0x8, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgGeogebraCommonKernelProverPolynomialParseException_serialVersionUID },
    { "currentToken_", NULL, 0x1, "Lorg.geogebra.common.kernel.prover.polynomial.Token;", NULL, NULL,  },
    { "expectedTokenSequences_", NULL, 0x1, "[[I", NULL, NULL,  },
    { "tokenImage_", NULL, 0x1, "[Ljava.lang.String;", NULL, NULL,  },
    { "eol_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelProverPolynomialParseException = { 2, "ParseException", "org.geogebra.common.kernel.prover.polynomial", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelProverPolynomialParseException;
}

@end

void OrgGeogebraCommonKernelProverPolynomialParseException_initWithOrgGeogebraCommonKernelProverPolynomialToken_withIntArray2_withNSStringArray_(OrgGeogebraCommonKernelProverPolynomialParseException *self, OrgGeogebraCommonKernelProverPolynomialToken *currentTokenVal, IOSObjectArray *expectedTokenSequencesVal, IOSObjectArray *tokenImageVal) {
  JavaLangException_initWithNSString_(self, OrgGeogebraCommonKernelProverPolynomialParseException_initialiseWithOrgGeogebraCommonKernelProverPolynomialToken_withIntArray2_withNSStringArray_(currentTokenVal, expectedTokenSequencesVal, tokenImageVal));
  OrgGeogebraCommonKernelProverPolynomialParseException_set_eol_(self, JavaLangSystem_getPropertyWithNSString_withNSString_(@"line.separator", @"\n"));
  OrgGeogebraCommonKernelProverPolynomialParseException_set_currentToken_(self, currentTokenVal);
  OrgGeogebraCommonKernelProverPolynomialParseException_set_expectedTokenSequences_(self, expectedTokenSequencesVal);
  OrgGeogebraCommonKernelProverPolynomialParseException_set_tokenImage_(self, tokenImageVal);
}

OrgGeogebraCommonKernelProverPolynomialParseException *new_OrgGeogebraCommonKernelProverPolynomialParseException_initWithOrgGeogebraCommonKernelProverPolynomialToken_withIntArray2_withNSStringArray_(OrgGeogebraCommonKernelProverPolynomialToken *currentTokenVal, IOSObjectArray *expectedTokenSequencesVal, IOSObjectArray *tokenImageVal) {
  OrgGeogebraCommonKernelProverPolynomialParseException *self = [OrgGeogebraCommonKernelProverPolynomialParseException alloc];
  OrgGeogebraCommonKernelProverPolynomialParseException_initWithOrgGeogebraCommonKernelProverPolynomialToken_withIntArray2_withNSStringArray_(self, currentTokenVal, expectedTokenSequencesVal, tokenImageVal);
  return self;
}

void OrgGeogebraCommonKernelProverPolynomialParseException_init(OrgGeogebraCommonKernelProverPolynomialParseException *self) {
  JavaLangException_init(self);
  OrgGeogebraCommonKernelProverPolynomialParseException_set_eol_(self, JavaLangSystem_getPropertyWithNSString_withNSString_(@"line.separator", @"\n"));
}

OrgGeogebraCommonKernelProverPolynomialParseException *new_OrgGeogebraCommonKernelProverPolynomialParseException_init() {
  OrgGeogebraCommonKernelProverPolynomialParseException *self = [OrgGeogebraCommonKernelProverPolynomialParseException alloc];
  OrgGeogebraCommonKernelProverPolynomialParseException_init(self);
  return self;
}

void OrgGeogebraCommonKernelProverPolynomialParseException_initWithNSString_(OrgGeogebraCommonKernelProverPolynomialParseException *self, NSString *message) {
  JavaLangException_initWithNSString_(self, message);
  OrgGeogebraCommonKernelProverPolynomialParseException_set_eol_(self, JavaLangSystem_getPropertyWithNSString_withNSString_(@"line.separator", @"\n"));
}

OrgGeogebraCommonKernelProverPolynomialParseException *new_OrgGeogebraCommonKernelProverPolynomialParseException_initWithNSString_(NSString *message) {
  OrgGeogebraCommonKernelProverPolynomialParseException *self = [OrgGeogebraCommonKernelProverPolynomialParseException alloc];
  OrgGeogebraCommonKernelProverPolynomialParseException_initWithNSString_(self, message);
  return self;
}

NSString *OrgGeogebraCommonKernelProverPolynomialParseException_initialiseWithOrgGeogebraCommonKernelProverPolynomialToken_withIntArray2_withNSStringArray_(OrgGeogebraCommonKernelProverPolynomialToken *currentToken, IOSObjectArray *expectedTokenSequences, IOSObjectArray *tokenImage) {
  OrgGeogebraCommonKernelProverPolynomialParseException_initialize();
  NSString *eol = JavaLangSystem_getPropertyWithNSString_withNSString_(@"line.separator", @"\n");
  JavaLangStringBuffer *expected = [new_JavaLangStringBuffer_init() autorelease];
  jint maxSize = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(expectedTokenSequences))->size_; i++) {
    if (maxSize < ((IOSIntArray *) nil_chk(IOSObjectArray_Get(expectedTokenSequences, i)))->size_) {
      maxSize = ((IOSIntArray *) nil_chk(IOSObjectArray_Get(expectedTokenSequences, i)))->size_;
    }
    for (jint j = 0; j < ((IOSIntArray *) nil_chk(IOSObjectArray_Get(expectedTokenSequences, i)))->size_; j++) {
      [((JavaLangStringBuffer *) nil_chk([expected appendWithNSString:IOSObjectArray_Get(nil_chk(tokenImage), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(expectedTokenSequences, i)), j))])) appendWithChar:' '];
    }
    if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(expectedTokenSequences, i)), ((IOSIntArray *) nil_chk(IOSObjectArray_Get(expectedTokenSequences, i)))->size_ - 1) != 0) {
      [expected appendWithNSString:@"..."];
    }
    [((JavaLangStringBuffer *) nil_chk([expected appendWithNSString:eol])) appendWithNSString:@"    "];
  }
  NSString *retval = @"Encountered \"";
  OrgGeogebraCommonKernelProverPolynomialToken *tok = ((OrgGeogebraCommonKernelProverPolynomialToken *) nil_chk(currentToken))->next_;
  for (jint i = 0; i < maxSize; i++) {
    if (i != 0) retval = JreStrcat("$C", retval, ' ');
    if (((OrgGeogebraCommonKernelProverPolynomialToken *) nil_chk(tok))->kind_ == 0) {
      retval = JreStrcat("$$", retval, IOSObjectArray_Get(nil_chk(tokenImage), 0));
      break;
    }
    retval = JreStrcat("$$", retval, JreStrcat("C$", ' ', IOSObjectArray_Get(nil_chk(tokenImage), tok->kind_)));
    retval = JreStrcat("$$", retval, @" \"");
    retval = JreStrcat("$$", retval, OrgGeogebraCommonKernelProverPolynomialParseException_add_escapesWithNSString_(tok->image_));
    retval = JreStrcat("$$", retval, @" \"");
    tok = tok->next_;
  }
  retval = JreStrcat("$$", retval, JreStrcat("$I$I", @"\" at line ", ((OrgGeogebraCommonKernelProverPolynomialToken *) nil_chk(currentToken->next_))->beginLine_, @", column ", currentToken->next_->beginColumn_));
  retval = JreStrcat("$$", retval, JreStrcat("C$", '.', eol));
  if (expectedTokenSequences->size_ == 1) {
    retval = JreStrcat("$$", retval, JreStrcat("$$$", @"Was expecting:", eol, @"    "));
  }
  else {
    retval = JreStrcat("$$", retval, JreStrcat("$$$", @"Was expecting one of:", eol, @"    "));
  }
  retval = JreStrcat("$$", retval, [expected description]);
  return retval;
}

NSString *OrgGeogebraCommonKernelProverPolynomialParseException_add_escapesWithNSString_(NSString *str) {
  OrgGeogebraCommonKernelProverPolynomialParseException_initialize();
  JavaLangStringBuffer *retval = [new_JavaLangStringBuffer_init() autorelease];
  jchar ch;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(str)) length]); i++) {
    switch ([str charAtWithInt:i]) {
      case 0:
      continue;
      case 0x0008:
      [retval appendWithNSString:@"\\b"];
      continue;
      case 0x0009:
      [retval appendWithNSString:@"\\t"];
      continue;
      case 0x000a:
      [retval appendWithNSString:@"\\n"];
      continue;
      case 0x000c:
      [retval appendWithNSString:@"\\f"];
      continue;
      case 0x000d:
      [retval appendWithNSString:@"\\r"];
      continue;
      case '"':
      [retval appendWithNSString:@"\\\""];
      continue;
      case '\'':
      [retval appendWithNSString:@"\\'"];
      continue;
      case '\\':
      [retval appendWithNSString:@"\\\\"];
      continue;
      default:
      if ((ch = [str charAtWithInt:i]) < (jint) 0x20 || ch > (jint) 0x7e) {
        NSString *s = JreStrcat("$$", @"0000", JavaLangInteger_toStringWithInt_withInt_(ch, 16));
        [retval appendWithNSString:JreStrcat("$$", @"\\u", [s substring:((jint) [s length]) - 4 endIndex:((jint) [s length])])];
      }
      else {
        [retval appendWithChar:ch];
      }
      continue;
    }
  }
  return [retval description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelProverPolynomialParseException)
