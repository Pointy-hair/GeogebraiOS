//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/prover/AlgoProve.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/Date.h"
#include "org/geogebra/common/factories/UtilFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/prover/AlgoProve.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/ProverSettings.h"
#include "org/geogebra/common/util/Prover.h"

@interface OrgGeogebraCommonKernelProverAlgoProve () {
 @public
  OrgGeogebraCommonKernelGeosGeoElement *root_;
  OrgGeogebraCommonKernelGeosGeoBoolean *bool__;
  OrgGeogebraCommonUtilProver_ProofResultEnum *result_;
  jint processing_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoProve, root_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoProve, bool__, OrgGeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoProve, result_, OrgGeogebraCommonUtilProver_ProofResultEnum *)

__attribute__((unused)) static void OrgGeogebraCommonKernelProverAlgoProve_initialCompute(OrgGeogebraCommonKernelProverAlgoProve *self);

@implementation OrgGeogebraCommonKernelProverAlgoProve

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)root {
  OrgGeogebraCommonKernelProverAlgoProve_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, root);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_Prove();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, root_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:bool__];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoBoolean *)getGeoBoolean {
  return bool__;
}

- (void)initialCompute {
  OrgGeogebraCommonKernelProverAlgoProve_initialCompute(self);
}

- (NSString *)getCommandNameWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return @"Prove";
}

- (void)compute {
  if (processing_ == 1) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"PROCESSING mode: list undefined (1->2)");
    [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(bool__)) setUndefinedProverOnly];
    processing_ = 2;
    return;
  }
  if (processing_ == 2) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"PROCESSING mode: list should be created (2->3)");
    processing_ = 3;
    OrgGeogebraCommonKernelProverAlgoProve_initialCompute(self);
  }
  if (result_ != nil) {
    if (result_ == OrgGeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN()) {
      [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(bool__)) setUndefinedProverOnly];
      return;
    }
    [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(bool__)) setDefined];
    if (result_ == OrgGeogebraCommonUtilProver_ProofResultEnum_get_TRUE()) {
      [bool__ setValueWithBoolean:YES];
    }
    if (result_ == OrgGeogebraCommonUtilProver_ProofResultEnum_get_FALSE()) {
      [bool__ setValueWithBoolean:NO];
    }
  }
}

- (void)dealloc {
  RELEASE_(root_);
  RELEASE_(bool__);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoElement:", "AlgoProve", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getGeoBoolean", NULL, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", 0x1, NULL, NULL },
    { "initialCompute", NULL, "V", 0x11, NULL, NULL },
    { "getCommandNameWithOrgGeogebraCommonKernelStringTemplate:", "getCommandName", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "root_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "bool__", "bool", 0x2, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lorg.geogebra.common.util.Prover$ProofResult;", NULL, NULL,  },
    { "processing_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelProverAlgoProve = { 2, "AlgoProve", "org.geogebra.common.kernel.prover", NULL, 0x1, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelProverAlgoProve;
}

@end

void OrgGeogebraCommonKernelProverAlgoProve_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelProverAlgoProve *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *root) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->processing_ = 0;
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) addCASAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  OrgGeogebraCommonKernelProverAlgoProve_set_root_(self, root);
  OrgGeogebraCommonKernelProverAlgoProve_setAndConsume_bool__(self, new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelProverAlgoProve_initialCompute(self);
  [self compute];
  [self->bool__ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelProverAlgoProve *new_OrgGeogebraCommonKernelProverAlgoProve_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *root) {
  OrgGeogebraCommonKernelProverAlgoProve *self = [OrgGeogebraCommonKernelProverAlgoProve alloc];
  OrgGeogebraCommonKernelProverAlgoProve_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, root);
  return self;
}

void OrgGeogebraCommonKernelProverAlgoProve_initialCompute(OrgGeogebraCommonKernelProverAlgoProve *self) {
  OrgGeogebraCommonUtilProver *p = [((OrgGeogebraCommonFactoriesUtilFactory *) nil_chk(OrgGeogebraCommonFactoriesUtilFactory_get_prototype_())) newProver];
  if ([@"OpenGeoProver" equalsIgnoreCase:OrgGeogebraCommonMainProverSettings_get_proverEngine_()]) {
    if ([@"Wu" equalsIgnoreCase:OrgGeogebraCommonMainProverSettings_get_proverMethod_()]) [((OrgGeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithOrgGeogebraCommonUtilProver_ProverEngineEnum:OrgGeogebraCommonUtilProver_ProverEngineEnum_get_OPENGEOPROVER_WU()];
    else if ([@"Area" equalsIgnoreCase:OrgGeogebraCommonMainProverSettings_get_proverMethod_()]) [((OrgGeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithOrgGeogebraCommonUtilProver_ProverEngineEnum:OrgGeogebraCommonUtilProver_ProverEngineEnum_get_OPENGEOPROVER_AREA()];
  }
  else if ([@"Botana" equalsIgnoreCase:OrgGeogebraCommonMainProverSettings_get_proverEngine_()]) [((OrgGeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithOrgGeogebraCommonUtilProver_ProverEngineEnum:OrgGeogebraCommonUtilProver_ProverEngineEnum_get_BOTANAS_PROVER()];
  else if ([@"Recio" equalsIgnoreCase:OrgGeogebraCommonMainProverSettings_get_proverEngine_()]) [((OrgGeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithOrgGeogebraCommonUtilProver_ProverEngineEnum:OrgGeogebraCommonUtilProver_ProverEngineEnum_get_RECIOS_PROVER()];
  else if ([@"PureSymbolic" equalsIgnoreCase:OrgGeogebraCommonMainProverSettings_get_proverEngine_()]) [((OrgGeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithOrgGeogebraCommonUtilProver_ProverEngineEnum:OrgGeogebraCommonUtilProver_ProverEngineEnum_get_PURE_SYMBOLIC_PROVER()];
  else if ([@"Auto" equalsIgnoreCase:OrgGeogebraCommonMainProverSettings_get_proverEngine_()]) [((OrgGeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithOrgGeogebraCommonUtilProver_ProverEngineEnum:OrgGeogebraCommonUtilProver_ProverEngineEnum_get_AUTO()];
  [((OrgGeogebraCommonUtilProver *) nil_chk(p)) setTimeoutWithInt:OrgGeogebraCommonMainProverSettings_get_proverTimeout_()];
  [p setConstructionWithOrgGeogebraCommonKernelConstruction:self->cons_];
  [p setStatementWithOrgGeogebraCommonKernelGeosGeoElement:self->root_];
  [p setReturnExtraNDGsWithBoolean:NO];
  JavaUtilDate *date = [new_JavaUtilDate_init() autorelease];
  jlong startTime = [date getTime];
  [p compute];
  date = [new_JavaUtilDate_init() autorelease];
  jlong elapsedTime = [date getTime] - startTime;
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$J$", @"Benchmarking: ", elapsedTime, @" ms"));
  OrgGeogebraCommonKernelProverAlgoProve_set_result_(self, [p getProofResult]);
  if (self->result_ == OrgGeogebraCommonUtilProver_ProofResultEnum_get_PROCESSING()) {
    self->processing_ = 1;
  }
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"STATEMENT IS ", self->result_));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelProverAlgoProve)
