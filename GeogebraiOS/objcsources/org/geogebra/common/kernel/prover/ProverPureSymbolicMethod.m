//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/prover/ProverPureSymbolicMethod.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/SymbolicParameters.h"
#include "org/geogebra/common/kernel/algos/SymbolicParametersAlgo.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/kernel/prover/ProverPureSymbolicMethod.h"
#include "org/geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "org/geogebra/common/util/Prover.h"
#include "org/geogebra/common/util/debug/Log.h"

@implementation OrgGeogebraCommonKernelProverProverPureSymbolicMethod

+ (OrgGeogebraCommonUtilProver_ProofResultEnum *)proveWithOrgGeogebraCommonUtilProver:(OrgGeogebraCommonUtilProver *)prover {
  return OrgGeogebraCommonKernelProverProverPureSymbolicMethod_proveWithOrgGeogebraCommonUtilProver_(prover);
}

- (instancetype)init {
  OrgGeogebraCommonKernelProverProverPureSymbolicMethod_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "proveWithOrgGeogebraCommonUtilProver:", "prove", "Lorg.geogebra.common.util.Prover$ProofResult;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelProverProverPureSymbolicMethod = { 2, "ProverPureSymbolicMethod", "org.geogebra.common.kernel.prover", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelProverProverPureSymbolicMethod;
}

@end

OrgGeogebraCommonUtilProver_ProofResultEnum *OrgGeogebraCommonKernelProverProverPureSymbolicMethod_proveWithOrgGeogebraCommonUtilProver_(OrgGeogebraCommonUtilProver *prover) {
  OrgGeogebraCommonKernelProverProverPureSymbolicMethod_initialize();
  OrgGeogebraCommonKernelGeosGeoElement *statement = [((OrgGeogebraCommonUtilProver *) nil_chk(prover)) getStatement];
  if ([OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:statement]) {
    id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo> statementSymbolic = (id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(statement, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo));
    OrgGeogebraCommonKernelAlgosSymbolicParameters *parameters = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(statementSymbolic)) getSymbolicParameters];
    @try {
      (void) [((OrgGeogebraCommonKernelAlgosSymbolicParameters *) nil_chk(parameters)) getFreeVariables];
    }
    @catch (OrgGeogebraCommonKernelProverNoSymbolicParametersException *e) {
      return OrgGeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
    }
  }
  else if ([OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(statement)) getParentAlgorithm]]) {
    id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo> statementSymbolic = (id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast([statement getParentAlgorithm], @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo));
    @try {
      IOSObjectArray *poly = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(statementSymbolic)) getPolynomials];
      {
        IOSObjectArray *a__ = poly;
        OrgGeogebraCommonKernelProverPolynomialPolynomial * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgGeogebraCommonKernelProverPolynomialPolynomial * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgGeogebraCommonKernelProverPolynomialPolynomial *polynomial = *b__++;
          OrgGeogebraCommonUtilDebugLog_debugWithId_(polynomial);
          if (![((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(polynomial)) isZero]) {
            return OrgGeogebraCommonUtilProver_ProofResultEnum_get_FALSE();
          }
        }
      }
      return OrgGeogebraCommonUtilProver_ProofResultEnum_get_TRUE();
    }
    @catch (OrgGeogebraCommonKernelProverNoSymbolicParametersException *e) {
      return OrgGeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
    }
  }
  return OrgGeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
}

void OrgGeogebraCommonKernelProverProverPureSymbolicMethod_init(OrgGeogebraCommonKernelProverProverPureSymbolicMethod *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelProverProverPureSymbolicMethod *new_OrgGeogebraCommonKernelProverProverPureSymbolicMethod_init() {
  OrgGeogebraCommonKernelProverProverPureSymbolicMethod *self = [OrgGeogebraCommonKernelProverProverPureSymbolicMethod alloc];
  OrgGeogebraCommonKernelProverProverPureSymbolicMethod_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelProverProverPureSymbolicMethod)
