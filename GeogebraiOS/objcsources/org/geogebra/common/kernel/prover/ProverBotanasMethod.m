//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/prover/ProverBotanasMethod.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/cas/GeoGebraCAS.h"
#include "org/geogebra/common/cas/singularws/SingularWebService.h"
#include "org/geogebra/common/kernel/CASGenericInterface.h"
#include "org/geogebra/common/kernel/GeoGebraCasInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "org/geogebra/common/kernel/algos/AlgoCircleTwoPoints.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/SymbolicParametersBotanaAlgo.h"
#include "org/geogebra/common/kernel/algos/SymbolicParametersBotanaAlgoAre.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/prover/NDGDetector.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/kernel/prover/ProverBotanasMethod.h"
#include "org/geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "org/geogebra/common/kernel/prover/polynomial/Variable.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/ProverSettings.h"
#include "org/geogebra/common/util/Prover.h"

@interface OrgGeogebraCommonKernelProverProverBotanasMethod ()

+ (void)updateBotanaVarsInvWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)statement;

+ (id<JavaUtilList>)getCircleCentersWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)statement;

+ (IOSObjectArray *)create3FreePointsNeverCollinearNDGWithOrgGeogebraCommonUtilProver:(OrgGeogebraCommonUtilProver *)prover;

@end

static JavaUtilHashMap *OrgGeogebraCommonKernelProverProverBotanasMethod_botanaVarsInv_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelProverProverBotanasMethod, botanaVarsInv_, JavaUtilHashMap *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelProverProverBotanasMethod, botanaVarsInv_, JavaUtilHashMap *)

__attribute__((unused)) static void OrgGeogebraCommonKernelProverProverBotanasMethod_updateBotanaVarsInvWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *statement);

__attribute__((unused)) static id<JavaUtilList> OrgGeogebraCommonKernelProverProverBotanasMethod_getCircleCentersWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *statement);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelProverProverBotanasMethod_create3FreePointsNeverCollinearNDGWithOrgGeogebraCommonUtilProver_(OrgGeogebraCommonUtilProver *prover);

@implementation OrgGeogebraCommonKernelProverProverBotanasMethod

+ (void)updateBotanaVarsInvWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)statement {
  OrgGeogebraCommonKernelProverProverBotanasMethod_updateBotanaVarsInvWithOrgGeogebraCommonKernelGeosGeoElement_(statement);
}

+ (id<JavaUtilList>)getFreePointsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)statement {
  return OrgGeogebraCommonKernelProverProverBotanasMethod_getFreePointsWithOrgGeogebraCommonKernelGeosGeoElement_(statement);
}

+ (id<JavaUtilList>)getCircleCentersWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)statement {
  return OrgGeogebraCommonKernelProverProverBotanasMethod_getCircleCentersWithOrgGeogebraCommonKernelGeosGeoElement_(statement);
}

+ (IOSObjectArray *)create3FreePointsNeverCollinearNDGWithOrgGeogebraCommonUtilProver:(OrgGeogebraCommonUtilProver *)prover {
  return OrgGeogebraCommonKernelProverProverBotanasMethod_create3FreePointsNeverCollinearNDGWithOrgGeogebraCommonUtilProver_(prover);
}

+ (JavaUtilHashMap *)fixValuesWithOrgGeogebraCommonUtilProver:(OrgGeogebraCommonUtilProver *)prover
                                                      withInt:(jint)coords {
  return OrgGeogebraCommonKernelProverProverBotanasMethod_fixValuesWithOrgGeogebraCommonUtilProver_withInt_(prover, coords);
}

+ (OrgGeogebraCommonUtilProver_ProofResultEnum *)proveWithOrgGeogebraCommonUtilProver:(OrgGeogebraCommonUtilProver *)prover {
  return OrgGeogebraCommonKernelProverProverBotanasMethod_proveWithOrgGeogebraCommonUtilProver_(prover);
}

- (instancetype)init {
  OrgGeogebraCommonKernelProverProverBotanasMethod_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "updateBotanaVarsInvWithOrgGeogebraCommonKernelGeosGeoElement:", "updateBotanaVarsInv", "V", 0xa, NULL, NULL },
    { "getFreePointsWithOrgGeogebraCommonKernelGeosGeoElement:", "getFreePoints", "Ljava.util.List;", 0xc, NULL, NULL },
    { "getCircleCentersWithOrgGeogebraCommonKernelGeosGeoElement:", "getCircleCenters", "Ljava.util.List;", 0xa, NULL, NULL },
    { "create3FreePointsNeverCollinearNDGWithOrgGeogebraCommonUtilProver:", "create3FreePointsNeverCollinearNDG", "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0xa, NULL, NULL },
    { "fixValuesWithOrgGeogebraCommonUtilProver:withInt:", "fixValues", "Ljava.util.HashMap;", 0x8, NULL, NULL },
    { "proveWithOrgGeogebraCommonUtilProver:", "prove", "Lorg.geogebra.common.util.Prover$ProofResult;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "botanaVarsInv_", NULL, 0xa, "Ljava.util.HashMap;", &OrgGeogebraCommonKernelProverProverBotanasMethod_botanaVarsInv_, "Ljava/util/HashMap<Ljava/util/List<Lorg/geogebra/common/kernel/prover/polynomial/Variable;>;Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelProverProverBotanasMethod = { 2, "ProverBotanasMethod", "org.geogebra.common.kernel.prover", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelProverProverBotanasMethod;
}

@end

void OrgGeogebraCommonKernelProverProverBotanasMethod_updateBotanaVarsInvWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *statement) {
  OrgGeogebraCommonKernelProverProverBotanasMethod_initialize();
  if (OrgGeogebraCommonKernelProverProverBotanasMethod_botanaVarsInv_ == nil) JreStrongAssignAndConsume(&OrgGeogebraCommonKernelProverProverBotanasMethod_botanaVarsInv_, nil, new_JavaUtilHashMap_init());
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(statement)) getAllPredecessors])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    IOSObjectArray *vars = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    if (vars != nil) {
      id<JavaUtilList> varsList = JavaUtilArrays_asListWithNSObjectArray_(vars);
      [((JavaUtilHashMap *) nil_chk(OrgGeogebraCommonKernelProverProverBotanasMethod_botanaVarsInv_)) putWithId:varsList withId:geo];
    }
  }
}

id<JavaUtilList> OrgGeogebraCommonKernelProverProverBotanasMethod_getFreePointsWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *statement) {
  OrgGeogebraCommonKernelProverProverBotanasMethod_initialize();
  id<JavaUtilList> freePoints = [new_JavaUtilArrayList_init() autorelease];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(statement)) getAllPredecessors])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint] && [geo getParentAlgorithm] == nil) {
      [freePoints addWithId:geo];
    }
  }
  return freePoints;
}

id<JavaUtilList> OrgGeogebraCommonKernelProverProverBotanasMethod_getCircleCentersWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *statement) {
  OrgGeogebraCommonKernelProverProverBotanasMethod_initialize();
  id<JavaUtilList> circleCenters = [new_JavaUtilArrayList_init() autorelease];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(statement)) getAllPredecessors])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConic]) {
      if ([[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoCircleTwoPoints class]] || [[geo getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoCircleThreePoints class]]) {
        IOSObjectArray *vars = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        IOSObjectArray *center = [IOSObjectArray arrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
        IOSObjectArray_Set(center, 0, IOSObjectArray_Get(nil_chk(vars), 0));
        IOSObjectArray_Set(center, 1, IOSObjectArray_Get(vars, 1));
        OrgGeogebraCommonKernelGeosGeoElement *centerGeo = [((JavaUtilHashMap *) nil_chk(OrgGeogebraCommonKernelProverProverBotanasMethod_botanaVarsInv_)) getWithId:JavaUtilArrays_asListWithNSObjectArray_(center)];
        if (centerGeo != nil) [circleCenters addWithId:centerGeo];
      }
    }
  }
  return circleCenters;
}

IOSObjectArray *OrgGeogebraCommonKernelProverProverBotanasMethod_create3FreePointsNeverCollinearNDGWithOrgGeogebraCommonUtilProver_(OrgGeogebraCommonUtilProver *prover) {
  OrgGeogebraCommonKernelProverProverBotanasMethod_initialize();
  id<JavaUtilList> freePoints = OrgGeogebraCommonKernelProverProverBotanasMethod_getFreePointsWithOrgGeogebraCommonKernelGeosGeoElement_([((OrgGeogebraCommonUtilProver *) nil_chk(prover)) getStatement]);
  jint setSize = [((id<JavaUtilList>) nil_chk(freePoints)) size];
  OrgGeogebraCommonUtilProver_NDGCondition *ndgc = [new_OrgGeogebraCommonUtilProver_NDGCondition_init() autorelease];
  if (setSize > 3) [ndgc setConditionWithNSString:@"DegeneratePolygon"];
  else [ndgc setConditionWithNSString:@"AreCollinear"];
  IOSObjectArray *geos = [IOSObjectArray arrayWithLength:setSize type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  jint i = 0;
  id<JavaUtilIterator> it = [freePoints iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(geos, i++, [it next]);
  }
  [ndgc setGeosWithOrgGeogebraCommonKernelGeosGeoElementArray:geos];
  JavaUtilArrays_sortWithNSObjectArray_([ndgc getGeos]);
  [prover addNDGconditionWithOrgGeogebraCommonUtilProver_NDGCondition:ndgc];
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:setSize * (setSize - 1) * (setSize - 2) / 6 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
  i = 0;
  JavaUtilHashSet *triplets = [new_JavaUtilHashSet_init() autorelease];
  id<JavaUtilIterator> it1 = [freePoints iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it1)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo1 = [it1 next];
    id<JavaUtilIterator> it2 = [freePoints iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
      OrgGeogebraCommonKernelGeosGeoElement *geo2 = [it2 next];
      if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:geo2]) {
        id<JavaUtilIterator> it3 = [freePoints iterator];
        while ([((id<JavaUtilIterator>) nil_chk(it3)) hasNext]) {
          OrgGeogebraCommonKernelGeosGeoElement *geo3 = [it3 next];
          if (![geo1 isEqualWithOrgGeogebraCommonKernelGeosGeoElement:geo3] && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:geo3]) {
            JavaUtilHashSet *triplet = [new_JavaUtilHashSet_init() autorelease];
            [triplet addWithId:geo1];
            [triplet addWithId:geo2];
            [triplet addWithId:geo3];
            if (![triplets containsWithId:triplet]) {
              [triplets addWithId:triplet];
              IOSObjectArray *fv1 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(geo1, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:geo1];
              IOSObjectArray *fv2 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(geo2, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:geo2];
              IOSObjectArray *fv3 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(geo3, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:geo3];
              OrgGeogebraCommonKernelProverPolynomialPolynomial *p = OrgGeogebraCommonKernelProverPolynomialPolynomial_collinearWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(fv1), 0), IOSObjectArray_Get(fv1, 1), IOSObjectArray_Get(nil_chk(fv2), 0), IOSObjectArray_Get(fv2, 1), IOSObjectArray_Get(nil_chk(fv3), 0), IOSObjectArray_Get(fv3, 1));
              OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$$$$$", @"Forcing non-collinearity for points ", [geo1 getLabelSimple], @", ", [geo2 getLabelSimple], @" and ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo3)) getLabelSimple]));
              IOSObjectArray_Set(ret, i, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(p)) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_([new_OrgGeogebraCommonKernelProverPolynomialVariable_init() autorelease]) autorelease]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(1) autorelease]]);
              i++;
            }
          }
        }
      }
    }
  }
  return ret;
}

JavaUtilHashMap *OrgGeogebraCommonKernelProverProverBotanasMethod_fixValuesWithOrgGeogebraCommonUtilProver_withInt_(OrgGeogebraCommonUtilProver *prover, jint coords) {
  OrgGeogebraCommonKernelProverProverBotanasMethod_initialize();
  IOSIntArray *fixCoords = [IOSIntArray arrayWithInts:(jint[]){ 0, 0, 0, 1 } count:4];
  OrgGeogebraCommonKernelGeosGeoElement *statement = [((OrgGeogebraCommonUtilProver *) nil_chk(prover)) getStatement];
  id<JavaUtilList> freePoints = OrgGeogebraCommonKernelProverProverBotanasMethod_getFreePointsWithOrgGeogebraCommonKernelGeosGeoElement_(statement);
  id<JavaUtilList> fixedPoints = [new_JavaUtilArrayList_init() autorelease];
  for (OrgGeogebraCommonKernelGeosGeoElement * __strong ge in nil_chk(freePoints)) {
    [fixedPoints addWithId:ge];
  }
  JavaUtilHashMap *ret = [new_JavaUtilHashMap_init() autorelease];
  id<JavaUtilIterator> it = [fixedPoints iterator];
  IOSObjectArray *geos = [IOSObjectArray arrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  jint i = 0, j = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && i < 2 && j < coords) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    IOSObjectArray *fv = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:geo];
    IOSObjectArray_Set(geos, i, geo);
    [ret putWithId:IOSObjectArray_Get(nil_chk(fv), 0) withId:JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(fixCoords, j))];
    ++j;
    if (j < coords) {
      [ret putWithId:IOSObjectArray_Get(fv, 1) withId:JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(fixCoords, j))];
      ++i;
      ++j;
    }
  }
  if (i == 2 && [prover isReturnExtraNDGs]) {
    OrgGeogebraCommonUtilProver_NDGCondition *ndgc = [new_OrgGeogebraCommonUtilProver_NDGCondition_init() autorelease];
    [ndgc setConditionWithNSString:@"AreEqual"];
    [ndgc setGeosWithOrgGeogebraCommonKernelGeosGeoElementArray:geos];
    JavaUtilArrays_sortWithNSObjectArray_([ndgc getGeos]);
    [prover addNDGconditionWithOrgGeogebraCommonUtilProver_NDGCondition:ndgc];
  }
  return ret;
}

OrgGeogebraCommonUtilProver_ProofResultEnum *OrgGeogebraCommonKernelProverProverBotanasMethod_proveWithOrgGeogebraCommonUtilProver_(OrgGeogebraCommonUtilProver *prover) {
  OrgGeogebraCommonKernelProverProverBotanasMethod_initialize();
  OrgGeogebraCommonKernelGeosGeoElement *statement = [((OrgGeogebraCommonUtilProver *) nil_chk(prover)) getStatement];
  if (OrgGeogebraCommonMainApp_get_singularWS_() == nil || (![OrgGeogebraCommonMainApp_get_singularWS_() isAvailable])) {
    *OrgGeogebraCommonMainProverSettings_getRef_transcext_() = NO;
    OrgGeogebraCommonMainApp_debugWithNSString_(@"Testing local CAS connection");
    OrgGeogebraCommonCasGeoGebraCAS *cas = (OrgGeogebraCommonCasGeoGebraCAS *) check_class_cast([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(statement)) getKernel])) getGeoGebraCAS], [OrgGeogebraCommonCasGeoGebraCAS class]);
    @try {
      NSString *output = [((id<OrgGeogebraCommonKernelCASGenericInterface>) nil_chk([((OrgGeogebraCommonCasGeoGebraCAS *) nil_chk(cas)) getCurrentCAS])) evaluateRawWithNSString:@"1"];
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"Local CAS evaluates 1 to ", output));
      if (!([((NSString *) nil_chk(output)) isEqual:@"1"])) {
        OrgGeogebraCommonMainApp_debugWithNSString_(@"Switching to PROCESSING mode");
        return OrgGeogebraCommonUtilProver_ProofResultEnum_get_PROCESSING();
      }
    }
    @catch (JavaLangThrowable *e) {
      OrgGeogebraCommonMainApp_debugWithNSString_(@"Exception, switching to PROCESSING mode");
      return OrgGeogebraCommonUtilProver_ProofResultEnum_get_PROCESSING();
    }
  }
  IOSObjectArray *hypotheses = nil;
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(statement)) getAllPredecessors])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo_class_() isInstance:geo]) {
      @try {
        OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$$", @"/* PROCESSING OBJECT ", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelSimple], @" */"));
        if (OrgGeogebraCommonMainProverSettings_get_captionAlgebra_()) {
          [geo setCaptionWithNSString:nil];
        }
        NSString *command = [geo getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_noLocalDefault_()];
        if (!([@"" isEqual:command])) {
          OrgGeogebraCommonMainApp_debugWithNSString_(@"/* Command definition */");
          OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$$$$$", [geo getLabelSimple], @" = ", [geo getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_noLocalDefault_()], @" /* ", [geo getDefinitionDescriptionWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_noLocalDefault_()], @" */"));
        }
        else {
          NSString *description_ = [geo getAlgebraDescriptionDefault];
          if (![((NSString *) nil_chk(description_)) hasPrefix:@"xOyPlane"]) {
            OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", description_, @" /* free point */"));
            IOSObjectArray *v = [IOSObjectArray arrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
            v = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:geo];
            if (OrgGeogebraCommonMainProverSettings_get_captionAlgebra_()) {
              [geo setCaptionBotanaVarsWithNSString:JreStrcat("C$C$C", '(', [((OrgGeogebraCommonKernelProverPolynomialVariable *) nil_chk(IOSObjectArray_Get(nil_chk(v), 0))) toTeX], ',', [((OrgGeogebraCommonKernelProverPolynomialVariable *) nil_chk(IOSObjectArray_Get(v, 1))) toTeX], ')')];
            }
            OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$C@C@C", @"// Free point ", [geo getLabelSimple], '(', IOSObjectArray_Get(nil_chk(v), 0), ',', IOSObjectArray_Get(v, 1), ')'));
          }
        }
        IOSObjectArray *geoPolys = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))) getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:geo];
        if (geoPolys != nil) {
          if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]]) {
            IOSObjectArray *v = [IOSObjectArray arrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
            v = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:geo];
            OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$C@C@C", @"// Constrained point ", [geo getLabelSimple], '(', IOSObjectArray_Get(nil_chk(v), 0), ',', IOSObjectArray_Get(v, 1), ')'));
            if (OrgGeogebraCommonMainProverSettings_get_captionAlgebra_()) {
              [geo setCaptionBotanaVarsWithNSString:JreStrcat("C$C$C", '(', [((OrgGeogebraCommonKernelProverPolynomialVariable *) nil_chk(IOSObjectArray_Get(v, 0))) toTeX], ',', [((OrgGeogebraCommonKernelProverPolynomialVariable *) nil_chk(IOSObjectArray_Get(v, 1))) toTeX], ')')];
            }
          }
          jint nHypotheses = 0;
          if (hypotheses != nil) nHypotheses = hypotheses->size_;
          IOSObjectArray *allPolys = [IOSObjectArray arrayWithLength:nHypotheses + geoPolys->size_ type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
          for (jint i = 0; i < nHypotheses; ++i) {
            IOSObjectArray_Set(allPolys, i, IOSObjectArray_Get(nil_chk(hypotheses), i));
          }
          OrgGeogebraCommonMainApp_debugWithNSString_(@"Hypotheses:");
          for (jint i = 0; i < geoPolys->size_; ++i) {
            OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("I$@", (nHypotheses + i + 1), @". ", IOSObjectArray_Get(geoPolys, i)));
            IOSObjectArray_Set(allPolys, nHypotheses + i, IOSObjectArray_Get(geoPolys, i));
            if (OrgGeogebraCommonMainProverSettings_get_captionAlgebra_()) {
              [geo addCaptionBotanaPolynomialWithNSString:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(geoPolys, i))) toTeX]];
            }
          }
          hypotheses = allPolys;
        }
      }
      @catch (OrgGeogebraCommonKernelProverNoSymbolicParametersException *e) {
        OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("@$", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm], @" is not fully implemented"));
        return OrgGeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
      }
    }
    else {
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("@$", [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm], @" unimplemented"));
      return OrgGeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
    }
  }
  OrgGeogebraCommonKernelProverProverBotanasMethod_updateBotanaVarsInvWithOrgGeogebraCommonKernelGeosGeoElement_(statement);
  @try {
    if (!([OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgoAre_class_() isInstance:[statement getParentAlgorithm]])) {
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("@$", [statement getParentAlgorithm], @" unimplemented"));
      return OrgGeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
    }
    IOSObjectArray *statements = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgoAre>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgoAre>) check_protocol_cast([statement getParentAlgorithm], @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgoAre))))) getBotanaPolynomials];
    IOSObjectArray *ndgConditions = nil;
    if (OrgGeogebraCommonMainProverSettings_get_freePointsNeverCollinear_() == nil) {
      if (OrgGeogebraCommonMainApp_get_singularWS_() != nil && [OrgGeogebraCommonMainApp_get_singularWS_() isAvailable]) {
        OrgGeogebraCommonMainProverSettings_set_freePointsNeverCollinear_(JavaLangBoolean_valueOfWithBoolean_(NO));
      }
      else {
        OrgGeogebraCommonMainProverSettings_set_freePointsNeverCollinear_(JavaLangBoolean_valueOfWithBoolean_(YES));
      }
    }
    if ([((JavaLangBoolean *) nil_chk(OrgGeogebraCommonMainProverSettings_get_freePointsNeverCollinear_())) booleanValue] && !([prover isReturnExtraNDGs])) {
      ndgConditions = OrgGeogebraCommonKernelProverProverBotanasMethod_create3FreePointsNeverCollinearNDGWithOrgGeogebraCommonUtilProver_(prover);
    }
    JavaUtilHashMap *substitutions = nil;
    jint fixcoords = 0;
    if ([prover isReturnExtraNDGs]) fixcoords = OrgGeogebraCommonMainProverSettings_get_useFixCoordinatesProveDetails_();
    else fixcoords = OrgGeogebraCommonMainProverSettings_get_useFixCoordinatesProve_();
    if (fixcoords > 0) {
      substitutions = OrgGeogebraCommonKernelProverProverBotanasMethod_fixValuesWithOrgGeogebraCommonUtilProver_withInt_(prover, fixcoords);
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"substitutions: ", substitutions));
    }
    jint nHypotheses = 0;
    jint nNdgConditions = 0;
    jint nStatements = 0;
    if (hypotheses != nil) nHypotheses = hypotheses->size_;
    if (ndgConditions != nil) nNdgConditions = ndgConditions->size_;
    if (statements != nil) nStatements = statements->size_;
    jint nExtraPolysNonDenied = 0;
    for (jint i = 0; i < nStatements; ++i) {
      nExtraPolysNonDenied += (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(statements), i)))->size_ - 1);
    }
    IOSObjectArray *eqSystem = [IOSObjectArray arrayWithLength:nHypotheses + nNdgConditions + nExtraPolysNonDenied + 1 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
    for (jint j = 0; j < nHypotheses; ++j) IOSObjectArray_Set(eqSystem, j, IOSObjectArray_Get(nil_chk(hypotheses), j));
    if (nNdgConditions > 0) OrgGeogebraCommonMainApp_debugWithNSString_(@"Extra NDGs:");
    for (jint j = 0; j < nNdgConditions; ++j) {
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("I$@", (j + nHypotheses + 1), @". ", IOSObjectArray_Get(nil_chk(ndgConditions), j)));
      IOSObjectArray_Set(eqSystem, j + nHypotheses, IOSObjectArray_Get(ndgConditions, j));
    }
    jint k = nHypotheses + nNdgConditions;
    if (nExtraPolysNonDenied > 0) OrgGeogebraCommonMainApp_debugWithNSString_(@"Statement equations (non-denied parts):");
    for (jint i = 0; i < nStatements; ++i) {
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(statements), i)))->size_ - 1; ++j) {
        OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("I$@", (k + 1), @". ", IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(statements, i)), j)));
        IOSObjectArray_Set(eqSystem, k, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(statements, i)), j));
        ++k;
      }
    }
    OrgGeogebraCommonMainApp_debugWithNSString_(@"Thesis reductio ad absurdum (denied statement), product of factors:");
    OrgGeogebraCommonKernelProverPolynomialPolynomial *spoly = [new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(1) autorelease];
    for (jint i = 0; i < nStatements; ++i) {
      OrgGeogebraCommonKernelProverPolynomialPolynomial *factor = (IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(statements), i)), ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(statements, i)))->size_ - 1));
      OrgGeogebraCommonKernelProverPolynomialVariable *z = [new_OrgGeogebraCommonKernelProverPolynomialVariable_init() autorelease];
      OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("C@$@$", '(', factor, @")*", z, @"-1"));
      factor = [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(factor)) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithOrgGeogebraCommonKernelProverPolynomialVariable_(z) autorelease]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[new_OrgGeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(1) autorelease]];
      spoly = [spoly multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:factor];
    }
    IOSObjectArray_Set(eqSystem, k, spoly);
    OrgGeogebraCommonMainApp_debugWithNSString_(@"that is,");
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("I$@", (k + 1), @". ", spoly));
    if ([prover isReturnExtraNDGs]) {
      id<JavaUtilSet> eliminationIdeal;
      OrgGeogebraCommonKernelProverNDGDetector *ndgd = [new_OrgGeogebraCommonKernelProverNDGDetector_initWithOrgGeogebraCommonUtilProver_withJavaUtilHashMap_(prover, substitutions) autorelease];
      jboolean found = NO;
      jint permutation = 0;
      jint MAX_PERMUTATIONS = 1;
      if (OrgGeogebraCommonMainApp_get_singularWS_() != nil && [OrgGeogebraCommonMainApp_get_singularWS_() isAvailable]) {
        MAX_PERMUTATIONS = 8;
      }
      while (!found && permutation < MAX_PERMUTATIONS) {
        eliminationIdeal = OrgGeogebraCommonKernelProverPolynomialPolynomial_eliminateWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_withInt_(eqSystem, substitutions, [statement getKernel], permutation++);
        if (eliminationIdeal == nil) {
          return OrgGeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
        }
        id<JavaUtilIterator> ndgSet = [((id<JavaUtilSet>) nil_chk(eliminationIdeal)) iterator];
        id<JavaUtilList> xEqualSet = [new_JavaUtilArrayList_initWithJavaUtilCollection_([new_JavaUtilHashSet_init() autorelease]) autorelease];
        id<JavaUtilList> yEqualSet = [new_JavaUtilArrayList_initWithJavaUtilCollection_([new_JavaUtilHashSet_init() autorelease]) autorelease];
        jboolean xyRewrite = [eliminationIdeal size] == 2;
        id<JavaUtilList> bestNdgSet = [new_JavaUtilArrayList_init() autorelease];
        jdouble bestScore = JavaLangDouble_POSITIVE_INFINITY;
        jint ndgI = 0;
        while ([((id<JavaUtilIterator>) nil_chk(ndgSet)) hasNext]) {
          ndgI++;
          OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I$", @"Considering NDG ", ndgI, @"..."));
          id<JavaUtilList> ndgcl = [new_JavaUtilArrayList_init() autorelease];
          jdouble score = 0.0;
          jboolean readable = YES;
          id<JavaUtilSet> thisNdgSet = [ndgSet next];
          id<JavaUtilIterator> ndg = [((id<JavaUtilSet>) nil_chk(thisNdgSet)) iterator];
          while ([((id<JavaUtilIterator>) nil_chk(ndg)) hasNext] && readable) {
            OrgGeogebraCommonKernelProverPolynomialPolynomial *poly = [ndg next];
            if ([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) isZero]) {
              OrgGeogebraCommonMainApp_debugWithNSString_(@"Statement is NOT GENERALLY TRUE");
              OrgGeogebraCommonMainApp_debugWithNSString_(@"Checking the negative statement to decide if the statement is generally false or not:");
              if (nStatements != 1) {
                IOSObjectArray *eqSystem2 = [IOSObjectArray arrayWithLength:nHypotheses + nNdgConditions + nExtraPolysNonDenied + nStatements type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
                for (jint i = 0; i < nHypotheses + nNdgConditions + nExtraPolysNonDenied; ++i) {
                  IOSObjectArray_Set(eqSystem2, i, IOSObjectArray_Get(eqSystem, i));
                }
                eqSystem = eqSystem2;
              }
              jint j = nHypotheses + nNdgConditions + nExtraPolysNonDenied;
              for (jint i = 0; i < nStatements; ++i) {
                IOSObjectArray_Set(eqSystem, j + i, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(statements), i)), ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(statements, i)))->size_ - 1));
              }
              eliminationIdeal = OrgGeogebraCommonKernelProverPolynomialPolynomial_eliminateWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_withInt_(eqSystem, substitutions, [statement getKernel], permutation++);
              if (eliminationIdeal == nil) {
                OrgGeogebraCommonMainApp_debugWithNSString_(@"Statement is NOT GENERALLY FALSE => UNKNOWN (1)");
                return OrgGeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
              }
              ndgSet = [((id<JavaUtilSet>) nil_chk(eliminationIdeal)) iterator];
              while ([((id<JavaUtilIterator>) nil_chk(ndgSet)) hasNext]) {
                thisNdgSet = [ndgSet next];
                ndg = [((id<JavaUtilSet>) nil_chk(thisNdgSet)) iterator];
                while ([((id<JavaUtilIterator>) nil_chk(ndg)) hasNext]) {
                  poly = [ndg next];
                  if ([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) isZero]) {
                    OrgGeogebraCommonMainApp_debugWithNSString_(@"Statement is NOT GENERALLY FALSE either => UNKNOWN (2)");
                    return OrgGeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
                  }
                }
              }
              OrgGeogebraCommonMainApp_debugWithNSString_(@"Statement is GENERALLY FALSE");
              return OrgGeogebraCommonUtilProver_ProofResultEnum_get_FALSE();
            }
            if (![((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) isConstant]) {
              OrgGeogebraCommonUtilProver_NDGCondition *ndgc = [ndgd detectWithOrgGeogebraCommonKernelProverPolynomialPolynomial:poly];
              if (ndgc == nil) readable = NO;
              else {
                xyRewrite = (xyRewrite && [((id<JavaUtilSet>) nil_chk(thisNdgSet)) size] == 1);
                if (xyRewrite) {
                  if ([((NSString *) nil_chk([ndgc getCondition])) isEqual:@"xAreEqual"]) {
                    id<JavaUtilSet> points = [new_JavaUtilHashSet_init() autorelease];
                    [points addWithId:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 0), [OrgGeogebraCommonKernelGeosGeoPoint class])];
                    [points addWithId:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 1), [OrgGeogebraCommonKernelGeosGeoPoint class])];
                    [xEqualSet addWithId:points];
                  }
                  if ([((NSString *) nil_chk([ndgc getCondition])) isEqual:@"yAreEqual"]) {
                    id<JavaUtilSet> points = [new_JavaUtilHashSet_init() autorelease];
                    [points addWithId:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 0), [OrgGeogebraCommonKernelGeosGeoPoint class])];
                    [points addWithId:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 1), [OrgGeogebraCommonKernelGeosGeoPoint class])];
                    [yEqualSet addWithId:points];
                  }
                  if ([xEqualSet size] == 1 && [xEqualSet isEqual:yEqualSet]) {
                    [ndgc setConditionWithNSString:@"AreEqual"];
                    [ndgc setReadabilityWithDouble:0.5];
                  }
                }
                [ndgcl addWithId:ndgc];
                score += [ndgc getReadability];
              }
            }
          }
          if (readable && score < bestScore) {
            OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$D$D", @"Found a better NDG score (", score, @") than ", bestScore));
            bestScore = score;
            bestNdgSet = ndgcl;
            found = YES;
          }
          else {
            if (readable) {
              OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$D$D", @"Not better than previous NDG score (", bestScore, @"), this is ", score));
            }
            else {
              OrgGeogebraCommonMainApp_debugWithNSString_(@"...unreadable");
            }
          }
        }
        if (found) {
          id<JavaUtilIterator> ndgc = [bestNdgSet iterator];
          while ([((id<JavaUtilIterator>) nil_chk(ndgc)) hasNext]) {
            [prover addNDGconditionWithOrgGeogebraCommonUtilProver_NDGCondition:[ndgc next]];
          }
        }
      }
      if (!found) {
        OrgGeogebraCommonMainApp_debugWithNSString_(@"Statement is TRUE but NDGs are UNREADABLE");
        return OrgGeogebraCommonUtilProver_ProofResultEnum_get_TRUE_NDG_UNREADABLE();
      }
    }
    else {
      JavaLangBoolean *solvable = OrgGeogebraCommonKernelProverPolynomialPolynomial_solvableWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_withBoolean_(eqSystem, substitutions, [statement getKernel], OrgGeogebraCommonMainProverSettings_get_transcext_());
      if (solvable == nil) {
        OrgGeogebraCommonMainApp_debugWithNSString_(@"Unsuccessful run, statement is UNKNOWN at the moment");
        return OrgGeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
      }
      if ([((JavaLangBoolean *) nil_chk(solvable)) booleanValue]) {
        if (!OrgGeogebraCommonMainProverSettings_get_transcext_()) {
          OrgGeogebraCommonMainApp_debugWithNSString_(@"No transcext support, system is solvable, statement is UNKNOWN");
          return OrgGeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
        }
        OrgGeogebraCommonMainApp_debugWithNSString_(@"Statement is NOT GENERALLY TRUE");
        OrgGeogebraCommonMainApp_debugWithNSString_(@"Checking the negative statement to decide if the statement is generally false or not:");
        if (nStatements != 1) {
          IOSObjectArray *eqSystem2 = [IOSObjectArray arrayWithLength:nHypotheses + nNdgConditions + nExtraPolysNonDenied + nStatements type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
          for (jint i = 0; i < nHypotheses + nNdgConditions + nExtraPolysNonDenied; ++i) {
            IOSObjectArray_Set(eqSystem2, i, IOSObjectArray_Get(eqSystem, i));
          }
          eqSystem = eqSystem2;
        }
        jint j = nHypotheses + nNdgConditions + nExtraPolysNonDenied;
        for (jint i = 0; i < nStatements; ++i) {
          IOSObjectArray_Set(eqSystem, j + i, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(statements), i)), ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(statements, i)))->size_ - 1));
        }
        JavaLangBoolean *negsolvable = OrgGeogebraCommonKernelProverPolynomialPolynomial_solvableWithOrgGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_withBoolean_(eqSystem, substitutions, [statement getKernel], OrgGeogebraCommonMainProverSettings_get_transcext_());
        if ([((JavaLangBoolean *) nil_chk(negsolvable)) booleanValue]) {
          OrgGeogebraCommonMainApp_debugWithNSString_(@"Statement is NOT GENERALLY FALSE either => UNKNOWN");
          return OrgGeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
        }
        OrgGeogebraCommonMainApp_debugWithNSString_(@"Statement is GENERALLY FALSE");
        return OrgGeogebraCommonUtilProver_ProofResultEnum_get_FALSE();
      }
    }
    OrgGeogebraCommonMainApp_debugWithNSString_(@"Statement is GENERALLY TRUE");
    return OrgGeogebraCommonUtilProver_ProofResultEnum_get_TRUE();
  }
  @catch (OrgGeogebraCommonKernelProverNoSymbolicParametersException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"Unsuccessful run, statement is UNKNOWN at the moment");
    return OrgGeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN();
  }
}

void OrgGeogebraCommonKernelProverProverBotanasMethod_init(OrgGeogebraCommonKernelProverProverBotanasMethod *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelProverProverBotanasMethod *new_OrgGeogebraCommonKernelProverProverBotanasMethod_init() {
  OrgGeogebraCommonKernelProverProverBotanasMethod *self = [OrgGeogebraCommonKernelProverProverBotanasMethod alloc];
  OrgGeogebraCommonKernelProverProverBotanasMethod_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelProverProverBotanasMethod)
