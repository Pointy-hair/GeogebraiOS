//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/prover/AlgoProveDetails.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/factories/UtilFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/RelationNumerical.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/prover/AlgoProveDetails.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/ProverSettings.h"
#include "org/geogebra/common/util/Prover.h"

@interface OrgGeogebraCommonKernelProverAlgoProveDetails () {
 @public
  OrgGeogebraCommonKernelGeosGeoElement *root_;
  OrgGeogebraCommonKernelGeosGeoList *list_;
  JavaLangBoolean *result_, *unreadable_;
  JavaUtilHashSet *ndgresult_;
  jboolean relTool_;
  jint processing_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoProveDetails, root_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoProveDetails, list_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoProveDetails, result_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoProveDetails, unreadable_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoProveDetails, ndgresult_, JavaUtilHashSet *)

__attribute__((unused)) static void OrgGeogebraCommonKernelProverAlgoProveDetails_initialCompute(OrgGeogebraCommonKernelProverAlgoProveDetails *self);

@implementation OrgGeogebraCommonKernelProverAlgoProveDetails

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)root {
  OrgGeogebraCommonKernelProverAlgoProveDetails_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, root);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)root
                                                withBoolean:(jboolean)relationTool {
  OrgGeogebraCommonKernelProverAlgoProveDetails_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, cons, label, root, relationTool);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_ProveDetails();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, root_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:list_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoList *)getGeoList {
  return list_;
}

- (void)initialCompute {
  OrgGeogebraCommonKernelProverAlgoProveDetails_initialCompute(self);
}

- (NSString *)getCommandNameWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return @"ProveDetails";
}

- (void)compute {
  if (processing_ == 1) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"PROCESSING mode: list undefined (1->2)");
    [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list_)) setUndefined];
    processing_ = 2;
    return;
  }
  if (processing_ == 2) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"PROCESSING mode: list should be created (2->3)");
    processing_ = 3;
    OrgGeogebraCommonKernelProverAlgoProveDetails_initialCompute(self);
  }
  [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list_)) setDefinedWithBoolean:YES];
  [list_ clear];
  if (result_ != nil) {
    OrgGeogebraCommonKernelGeosGeoBoolean *answer = new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_(cons_);
    [answer setValueWithBoolean:[result_ booleanValue]];
    [list_ addWithOrgGeogebraCommonKernelGeosGeoElement:answer];
    if ([result_ booleanValue]) {
      OrgGeogebraCommonKernelGeosGeoList *ndgConditionsList = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons_);
      [ndgConditionsList clear];
      [ndgConditionsList setDrawAsComboBoxWithBoolean:YES];
      id<JavaUtilIterator> it = [((JavaUtilHashSet *) nil_chk(ndgresult_)) iterator];
      JavaUtilTreeSet *sortedSet = new_JavaUtilTreeSet_initWithJavaUtilComparator_(OrgGeogebraCommonKernelGeosGeoText_getComparator());
      while (![((JavaLangBoolean *) nil_chk(unreadable_)) booleanValue] && [((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        OrgGeogebraCommonKernelGeosGeoText *ndgConditionText = new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(cons_);
        OrgGeogebraCommonUtilProver_NDGCondition *ndgc = [((id<JavaUtilIterator>) nil_chk(it)) next];
        if ([((OrgGeogebraCommonUtilProver_NDGCondition *) nil_chk(ndgc)) getReadability] > 0) {
          [ndgc rewriteWithOrgGeogebraCommonKernelConstruction:cons_];
          NSString *s = nil;
          if (relTool_) {
            NSString *cond = [ndgc getCondition];
            if ([@"AreParallel" isEqual:cond]) {
              s = OrgGeogebraCommonKernelRelationNumerical_intersectStringWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withOrgGeogebraCommonMainLocalization_(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 0), IOSObjectArray_Get(nil_chk([ndgc getGeos]), 1), YES, [self getLoc]);
            }
            else if ([@"AreCollinear" isEqual:cond]) {
              s = OrgGeogebraCommonKernelRelationNumerical_triangleNonDegenerateStringWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonMainLocalization_((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 0), [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 1), [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 2), [OrgGeogebraCommonKernelGeosGeoPoint class]), [self getLoc]);
            }
            else if ([@"AreEqual" isEqual:cond]) {
              s = OrgGeogebraCommonKernelRelationNumerical_equalityStringWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withOrgGeogebraCommonMainLocalization_(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 0), IOSObjectArray_Get(nil_chk([ndgc getGeos]), 1), NO, [self getLoc]);
            }
            else if ([@"ArePerpendicular" isEqual:cond]) {
              s = OrgGeogebraCommonKernelRelationNumerical_perpendicularStringWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_withBoolean_withOrgGeogebraCommonMainLocalization_((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 0), [OrgGeogebraCommonKernelGeosGeoLine class]), (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 1), [OrgGeogebraCommonKernelGeosGeoLine class]), NO, [self getLoc]);
            }
          }
          if (s == nil || !relTool_) {
            s = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getCommandWithNSString:[ndgc getCondition]];
            s = JreStrcat("$C", s, '[');
            for (jint i = 0; i < ((IOSObjectArray *) nil_chk([ndgc getGeos]))->size_; ++i) {
              if (i > 0) {
                s = JreStrcat("$C", s, ',');
              }
              OrgGeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk([ndgc getGeos]), i);
              if (geo != nil) s = JreStrcat("$$", s, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([ndgc getGeos]), i))) getLabelSimple]);
              else s = JreStrcat("$$", s, @"...");
            }
            s = JreStrcat("$C", s, ']');
            if (relTool_) {
              s = JreStrcat("$C$", [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"not"], ' ', s);
            }
          }
          [ndgConditionText setTextStringWithNSString:s];
          [ndgConditionText setLabelVisibleWithBoolean:NO];
          [ndgConditionText setEuclidianVisibleWithBoolean:NO];
          [sortedSet addWithId:ndgConditionText];
        }
      }
      id<JavaUtilIterator> it2 = [sortedSet iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
        [ndgConditionsList addWithOrgGeogebraCommonKernelGeosGeoElement:[it2 next]];
      }
      if ([unreadable_ booleanValue]) {
        OrgGeogebraCommonKernelGeosGeoText *ndgConditionText = new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(cons_);
        NSString *cond = @"...";
        [ndgConditionText setTextStringWithNSString:cond];
        [ndgConditionText setLabelVisibleWithBoolean:NO];
        [ndgConditionText setEuclidianVisibleWithBoolean:NO];
        [sortedSet addWithId:ndgConditionText];
        [ndgConditionsList addWithOrgGeogebraCommonKernelGeosGeoElement:ndgConditionText];
      }
      if ([ndgConditionsList size] > 0) [list_ addWithOrgGeogebraCommonKernelGeosGeoElement:ndgConditionsList];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoElement:", "AlgoProveDetails", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "AlgoProveDetails", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getGeoList", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "initialCompute", NULL, "V", 0x11, NULL, NULL },
    { "getCommandNameWithOrgGeogebraCommonKernelStringTemplate:", "getCommandName", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "root_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "list_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "unreadable_", NULL, 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "ndgresult_", NULL, 0x2, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lorg/geogebra/common/util/Prover$NDGCondition;>;",  },
    { "relTool_", NULL, 0x2, "Z", NULL, NULL,  },
    { "processing_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelProverAlgoProveDetails = { 2, "AlgoProveDetails", "org.geogebra.common.kernel.prover", NULL, 0x1, 8, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelProverAlgoProveDetails;
}

@end

void OrgGeogebraCommonKernelProverAlgoProveDetails_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelProverAlgoProveDetails *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *root) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->relTool_ = NO;
  self->processing_ = 0;
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) addCASAlgoWithOrgGeogebraCommonKernelAlgosAlgoElement:self];
  self->root_ = root;
  self->list_ = new_OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelProverAlgoProveDetails_initialCompute(self);
  [self compute];
  [self->list_ setLabelWithNSString:label];
}

OrgGeogebraCommonKernelProverAlgoProveDetails *new_OrgGeogebraCommonKernelProverAlgoProveDetails_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *root) {
  OrgGeogebraCommonKernelProverAlgoProveDetails *self = [OrgGeogebraCommonKernelProverAlgoProveDetails alloc];
  OrgGeogebraCommonKernelProverAlgoProveDetails_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, root);
  return self;
}

void OrgGeogebraCommonKernelProverAlgoProveDetails_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(OrgGeogebraCommonKernelProverAlgoProveDetails *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *root, jboolean relationTool) {
  (void) OrgGeogebraCommonKernelProverAlgoProveDetails_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, root);
  self->relTool_ = relationTool;
}

OrgGeogebraCommonKernelProverAlgoProveDetails *new_OrgGeogebraCommonKernelProverAlgoProveDetails_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *root, jboolean relationTool) {
  OrgGeogebraCommonKernelProverAlgoProveDetails *self = [OrgGeogebraCommonKernelProverAlgoProveDetails alloc];
  OrgGeogebraCommonKernelProverAlgoProveDetails_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withBoolean_(self, cons, label, root, relationTool);
  return self;
}

void OrgGeogebraCommonKernelProverAlgoProveDetails_initialCompute(OrgGeogebraCommonKernelProverAlgoProveDetails *self) {
  OrgGeogebraCommonUtilProver *p = [((OrgGeogebraCommonFactoriesUtilFactory *) nil_chk(OrgGeogebraCommonFactoriesUtilFactory_get_prototype_())) newProver];
  if ([@"OpenGeoProver" equalsIgnoreCase:OrgGeogebraCommonMainProverSettings_get_proverEngine_()]) {
    if ([@"Wu" equalsIgnoreCase:OrgGeogebraCommonMainProverSettings_get_proverMethod_()]) [((OrgGeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithOrgGeogebraCommonUtilProver_ProverEngineEnum:OrgGeogebraCommonUtilProver_ProverEngineEnum_get_OPENGEOPROVER_WU()];
    else if ([@"Area" equalsIgnoreCase:OrgGeogebraCommonMainProverSettings_get_proverMethod_()]) [((OrgGeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithOrgGeogebraCommonUtilProver_ProverEngineEnum:OrgGeogebraCommonUtilProver_ProverEngineEnum_get_OPENGEOPROVER_AREA()];
  }
  else if ([@"Botana" equalsIgnoreCase:OrgGeogebraCommonMainProverSettings_get_proverEngine_()]) [((OrgGeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithOrgGeogebraCommonUtilProver_ProverEngineEnum:OrgGeogebraCommonUtilProver_ProverEngineEnum_get_BOTANAS_PROVER()];
  else if ([@"Recio" equalsIgnoreCase:OrgGeogebraCommonMainProverSettings_get_proverEngine_()]) [((OrgGeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithOrgGeogebraCommonUtilProver_ProverEngineEnum:OrgGeogebraCommonUtilProver_ProverEngineEnum_get_RECIOS_PROVER()];
  else if ([@"PureSymbolic" equalsIgnoreCase:OrgGeogebraCommonMainProverSettings_get_proverEngine_()]) [((OrgGeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithOrgGeogebraCommonUtilProver_ProverEngineEnum:OrgGeogebraCommonUtilProver_ProverEngineEnum_get_PURE_SYMBOLIC_PROVER()];
  else if ([@"Auto" equalsIgnoreCase:OrgGeogebraCommonMainProverSettings_get_proverEngine_()]) [((OrgGeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithOrgGeogebraCommonUtilProver_ProverEngineEnum:OrgGeogebraCommonUtilProver_ProverEngineEnum_get_AUTO()];
  [((OrgGeogebraCommonUtilProver *) nil_chk(p)) setTimeoutWithInt:OrgGeogebraCommonMainProverSettings_get_proverTimeout_()];
  [p setConstructionWithOrgGeogebraCommonKernelConstruction:self->cons_];
  [p setStatementWithOrgGeogebraCommonKernelGeosGeoElement:self->root_];
  [p setReturnExtraNDGsWithBoolean:YES];
  JavaUtilDate *date = new_JavaUtilDate_init();
  jlong startTime = [date getTime];
  [p compute];
  date = new_JavaUtilDate_init();
  jlong elapsedTime = [date getTime] - startTime;
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$J$", @"Benchmarking: ", elapsedTime, @" ms"));
  self->result_ = [p getYesNoAnswer];
  self->ndgresult_ = [p getNDGConditions];
  OrgGeogebraCommonUtilProver_ProofResultEnum *proofresult = [p getProofResult];
  if (proofresult == OrgGeogebraCommonUtilProver_ProofResultEnum_get_TRUE_NDG_UNREADABLE()) {
    self->unreadable_ = JavaLangBoolean_valueOfWithBoolean_(YES);
  }
  if (proofresult == OrgGeogebraCommonUtilProver_ProofResultEnum_get_TRUE()) {
    self->unreadable_ = JavaLangBoolean_valueOfWithBoolean_(NO);
  }
  if (proofresult == OrgGeogebraCommonUtilProver_ProofResultEnum_get_PROCESSING()) {
    self->processing_ = 1;
  }
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@$@C", @"STATEMENT IS ", proofresult, @" (yes/no: ", self->result_, ')'));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelProverAlgoProveDetails)
