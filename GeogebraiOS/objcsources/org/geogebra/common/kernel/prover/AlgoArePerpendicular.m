//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/prover/AlgoArePerpendicular.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/SymbolicParameters.h"
#include "org/geogebra/common/kernel/algos/SymbolicParametersAlgo.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/prover/AlgoArePerpendicular.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "org/geogebra/common/kernel/prover/polynomial/Variable.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonKernelProverAlgoArePerpendicular () {
 @public
  OrgGeogebraCommonKernelGeosGeoLine *inputLine1_;
  OrgGeogebraCommonKernelGeosGeoLine *inputLine2_;
  OrgGeogebraCommonKernelGeosGeoBoolean *outputBoolean_;
  IOSObjectArray *polynomials_;
  IOSObjectArray *botanaPolynomials_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoArePerpendicular, inputLine1_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoArePerpendicular, inputLine2_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoArePerpendicular, outputBoolean_, OrgGeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoArePerpendicular, polynomials_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoArePerpendicular, botanaPolynomials_, IOSObjectArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelProverAlgoArePerpendicular_compute(OrgGeogebraCommonKernelProverAlgoArePerpendicular *self);

@implementation OrgGeogebraCommonKernelProverAlgoArePerpendicular

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inputLine1
                  withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)inputLine2 {
  OrgGeogebraCommonKernelProverAlgoArePerpendicular_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, inputLine1, inputLine2);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_ArePerpendicular();
}

- (void)setInputOutput {
  input_ = [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  (void) IOSObjectArray_Set(input_, 0, inputLine1_);
  (void) IOSObjectArray_Set(input_, 1, inputLine2_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:outputBoolean_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoBoolean *)getResult {
  return outputBoolean_;
}

- (void)compute {
  OrgGeogebraCommonKernelProverAlgoArePerpendicular_compute(self);
}

- (OrgGeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  return new_OrgGeogebraCommonKernelAlgosSymbolicParameters_initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self);
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if (inputLine1_ != nil && inputLine2_ != nil) {
    [inputLine1_ getFreeVariablesWithJavaUtilHashSet:variables];
    [inputLine2_ getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (IOSIntArray *)getDegrees {
  if (inputLine1_ != nil && inputLine2_ != nil) {
    IOSIntArray *degree1 = [inputLine1_ getDegrees];
    IOSIntArray *degree2 = [inputLine2_ getDegrees];
    IOSIntArray *degree = [IOSIntArray newArrayWithLength:1];
    *IOSIntArray_GetRef(degree, 0) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(nil_chk(degree1), 0) + IOSIntArray_Get(nil_chk(degree2), 0), IOSIntArray_Get(degree1, 1) + IOSIntArray_Get(degree2, 1));
    return degree;
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if (inputLine1_ != nil && inputLine2_ != nil) {
    IOSObjectArray *coords1 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(IOSObjectArray_Get(nil_chk(input_), 0), @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *coords2 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(IOSObjectArray_Get(input_, 1), @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *coords = [IOSObjectArray newArrayWithLength:1 type:JavaMathBigInteger_class_()];
    (void) IOSObjectArray_Set(coords, 0, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(coords1), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(coords2), 0)])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords1, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords2, 1)]]);
    return coords;
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (IOSObjectArray *)getPolynomials {
  OrgGeogebraCommonUtilDebugLog_debugWithId_(polynomials_);
  if (polynomials_ != nil) {
    return polynomials_;
  }
  if (inputLine1_ != nil && inputLine2_ != nil) {
    IOSObjectArray *coords1 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(IOSObjectArray_Get(nil_chk(input_), 0), @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getPolynomials];
    IOSObjectArray *coords2 = [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(IOSObjectArray_Get(input_, 1), @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getPolynomials];
    polynomials_ = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
    (void) IOSObjectArray_Set(polynomials_, 0, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(coords1), 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(coords2), 0)])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords1, 1))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords2, 1)]]);
    return polynomials_;
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (IOSObjectArray *)getBotanaPolynomials {
  if (botanaPolynomials_ != nil) {
    return botanaPolynomials_;
  }
  if (inputLine1_ != nil && inputLine2_ != nil) {
    IOSObjectArray *v1 = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
    IOSObjectArray *v2 = [IOSObjectArray newArrayWithLength:4 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
    v1 = [(inputLine1_) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:inputLine1_];
    v2 = [(inputLine2_) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:inputLine2_];
    botanaPolynomials_ = [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ 1, 1 } type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()];
    (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(botanaPolynomials_, 0)), 0, OrgGeogebraCommonKernelProverPolynomialPolynomial_perpendicularWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(v1), 0), IOSObjectArray_Get(v1, 1), IOSObjectArray_Get(v1, 2), IOSObjectArray_Get(v1, 3), IOSObjectArray_Get(nil_chk(v2), 0), IOSObjectArray_Get(v2, 1), IOSObjectArray_Get(v2, 2), IOSObjectArray_Get(v2, 3)));
    return botanaPolynomials_;
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoElement:withOrgGeogebraCommonKernelGeosGeoElement:", "AlgoArePerpendicular", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lorg.geogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getBotanaPolynomials", NULL, "[[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputLine1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "inputLine2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "outputBoolean_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "polynomials_", NULL, 0x2, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
    { "botanaPolynomials_", NULL, 0x2, "[[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelProverAlgoArePerpendicular = { 2, "AlgoArePerpendicular", "org.geogebra.common.kernel.prover", NULL, 0x1, 11, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelProverAlgoArePerpendicular;
}

@end

void OrgGeogebraCommonKernelProverAlgoArePerpendicular_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelProverAlgoArePerpendicular *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *inputLine1, OrgGeogebraCommonKernelGeosGeoElement *inputLine2) {
  (void) OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->inputLine1_ = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(inputLine1, [OrgGeogebraCommonKernelGeosGeoLine class]);
  self->inputLine2_ = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(inputLine2, [OrgGeogebraCommonKernelGeosGeoLine class]);
  self->outputBoolean_ = new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_(cons);
  [self setInputOutput];
  OrgGeogebraCommonKernelProverAlgoArePerpendicular_compute(self);
}

OrgGeogebraCommonKernelProverAlgoArePerpendicular *new_OrgGeogebraCommonKernelProverAlgoArePerpendicular_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoElement *inputLine1, OrgGeogebraCommonKernelGeosGeoElement *inputLine2) {
  OrgGeogebraCommonKernelProverAlgoArePerpendicular *self = [OrgGeogebraCommonKernelProverAlgoArePerpendicular alloc];
  OrgGeogebraCommonKernelProverAlgoArePerpendicular_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self, cons, label, inputLine1, inputLine2);
  return self;
}

void OrgGeogebraCommonKernelProverAlgoArePerpendicular_compute(OrgGeogebraCommonKernelProverAlgoArePerpendicular *self) {
  [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->outputBoolean_)) setValueWithBoolean:[((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->inputLine1_)) isPerpendicularWithOrgGeogebraCommonKernelGeosGeoLine:self->inputLine2_]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelProverAlgoArePerpendicular)
