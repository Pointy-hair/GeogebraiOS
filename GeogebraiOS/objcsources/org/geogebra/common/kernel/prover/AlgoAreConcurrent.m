//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/prover/AlgoAreConcurrent.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/SymbolicParameters.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/prover/AlgoAreConcurrent.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "org/geogebra/common/kernel/prover/polynomial/Variable.h"

@interface OrgGeogebraCommonKernelProverAlgoAreConcurrent () {
 @public
  OrgGeogebraCommonKernelGeosGeoLine *inputLine1_, *inputLine2_, *inputLine3_;
  OrgGeogebraCommonKernelGeosGeoBoolean *outputBoolean_;
  IOSObjectArray *polynomials_;
  IOSObjectArray *botanaPolynomials_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoAreConcurrent, inputLine1_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoAreConcurrent, inputLine2_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoAreConcurrent, inputLine3_, OrgGeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoAreConcurrent, outputBoolean_, OrgGeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoAreConcurrent, polynomials_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelProverAlgoAreConcurrent, botanaPolynomials_, IOSObjectArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelProverAlgoAreConcurrent_compute(OrgGeogebraCommonKernelProverAlgoAreConcurrent *self);

@implementation OrgGeogebraCommonKernelProverAlgoAreConcurrent

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                     withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)inputLine1
                     withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)inputLine2
                     withOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)inputLine3 {
  OrgGeogebraCommonKernelProverAlgoAreConcurrent_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(self, cons, label, inputLine1, inputLine2, inputLine3);
  return self;
}

- (OrgGeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return OrgGeogebraCommonKernelCommandsCommandsEnum_get_AreConcurrent();
}

- (void)setInputOutput {
  OrgGeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputLine1_);
  IOSObjectArray_Set(input_, 1, inputLine2_);
  IOSObjectArray_Set(input_, 2, inputLine3_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withOrgGeogebraCommonKernelGeosGeoElement:outputBoolean_];
  [self setDependencies];
}

- (OrgGeogebraCommonKernelGeosGeoBoolean *)getResult {
  return outputBoolean_;
}

- (void)compute {
  OrgGeogebraCommonKernelProverAlgoAreConcurrent_compute(self);
}

- (OrgGeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  return [new_OrgGeogebraCommonKernelAlgosSymbolicParameters_initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self) autorelease];
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if (([inputLine1_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) || ([inputLine2_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) || ([inputLine3_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]])) {
    @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  }
  if (inputLine1_ != nil && inputLine2_ != nil && inputLine3_ != nil) {
    [inputLine1_ getFreeVariablesWithJavaUtilHashSet:variables];
    [inputLine2_ getFreeVariablesWithJavaUtilHashSet:variables];
    [inputLine3_ getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSIntArray *)getDegrees {
  if (([inputLine1_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) || ([inputLine2_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) || ([inputLine3_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]])) {
    @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  }
  if (inputLine1_ != nil && inputLine2_ != nil && inputLine3_ != nil) {
    IOSIntArray *degree1 = [inputLine1_ getDegrees];
    IOSIntArray *degree2 = [inputLine2_ getDegrees];
    IOSIntArray *degree3 = [inputLine3_ getDegrees];
    IOSIntArray *result = [IOSIntArray arrayWithLength:1];
    *IOSIntArray_GetRef(result, 0) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(nil_chk(degree1), 0) + IOSIntArray_Get(nil_chk(degree2), 1) + IOSIntArray_Get(nil_chk(degree3), 2), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree2, 0) + IOSIntArray_Get(degree3, 1) + IOSIntArray_Get(degree1, 2), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree3, 0) + IOSIntArray_Get(degree1, 1) + IOSIntArray_Get(degree2, 2), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree3, 0) + IOSIntArray_Get(degree2, 1) + IOSIntArray_Get(degree1, 2), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree2, 0) + IOSIntArray_Get(degree1, 1) + IOSIntArray_Get(degree3, 2), IOSIntArray_Get(degree1, 0) + IOSIntArray_Get(degree3, 1) + IOSIntArray_Get(degree2, 2))))));
    return result;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if (([inputLine1_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) || ([inputLine2_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) || ([inputLine3_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]])) {
    @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  }
  if (inputLine1_ != nil && inputLine2_ != nil && inputLine3_ != nil) {
    IOSObjectArray *coords1 = [inputLine1_ getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *coords2 = [inputLine2_ getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *coords3 = [inputLine3_ getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *coords = [IOSObjectArray arrayWithLength:1 type:JavaMathBigInteger_class_()];
    IOSObjectArray_Set(coords, 0, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(coords1), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(coords2), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(coords3), 2)])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords2, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords3, 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords1, 2)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords3, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords1, 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords2, 2)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords3, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords2, 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords1, 2)])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords2, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords1, 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords3, 2)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords1, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords3, 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords2, 2)]]]);
    return coords;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getPolynomials {
  if (polynomials_ != nil) {
    return polynomials_;
  }
  if (([inputLine1_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) || ([inputLine2_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]]) || ([inputLine3_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoSegment class]])) {
    @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  }
  if (inputLine1_ != nil && inputLine2_ != nil && inputLine3_ != nil) {
    IOSObjectArray *coords1 = [inputLine1_ getPolynomials];
    IOSObjectArray *coords2 = [inputLine2_ getPolynomials];
    IOSObjectArray *coords3 = [inputLine3_ getPolynomials];
    OrgGeogebraCommonKernelProverAlgoAreConcurrent_setAndConsume_polynomials_(self, [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()]);
    IOSObjectArray_Set(polynomials_, 0, [((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(coords1), 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(coords2), 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(coords3), 2)])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords2, 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords3, 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords1, 2)]])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords3, 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords1, 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords2, 2)]])) subtractWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords3, 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords2, 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords1, 2)])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords2, 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords1, 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords3, 2)]])) addWithOrgGeogebraCommonKernelProverPolynomialPolynomial:[((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((OrgGeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords1, 0))) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords3, 1)])) multiplyWithOrgGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords2, 2)]]]);
    return polynomials_;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getBotanaPolynomials {
  if (botanaPolynomials_ != nil) {
    return botanaPolynomials_;
  }
  if (inputLine1_ != nil && inputLine2_ != nil && inputLine3_ != nil) {
    IOSObjectArray *v = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ 3, 4 } type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
    IOSObjectArray_Set(v, 0, [inputLine1_ getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:inputLine1_]);
    IOSObjectArray_Set(v, 1, [inputLine2_ getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:inputLine2_]);
    IOSObjectArray_Set(v, 2, [inputLine3_ getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:inputLine3_]);
    IOSObjectArray *nv = [IOSObjectArray arrayWithLength:2 type:OrgGeogebraCommonKernelProverPolynomialVariable_class_()];
    IOSObjectArray_SetAndConsume(nv, 0, new_OrgGeogebraCommonKernelProverPolynomialVariable_init());
    IOSObjectArray_SetAndConsume(nv, 1, new_OrgGeogebraCommonKernelProverPolynomialVariable_init());
    OrgGeogebraCommonKernelProverAlgoAreConcurrent_setAndConsume_botanaPolynomials_(self, [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ 1, 3 } type:OrgGeogebraCommonKernelProverPolynomialPolynomial_class_()]);
    for (jint i = 0; i < 3; ++i) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(botanaPolynomials_, 0)), i, OrgGeogebraCommonKernelProverPolynomialPolynomial_collinearWithOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_withOrgGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(v, i)), 0), IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(v, i)), 1), IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(v, i)), 2), IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(v, i)), 3), IOSObjectArray_Get(nv, 0), IOSObjectArray_Get(nv, 1)));
    return botanaPolynomials_;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (void)dealloc {
  RELEASE_(inputLine1_);
  RELEASE_(inputLine2_);
  RELEASE_(inputLine3_);
  RELEASE_(outputBoolean_);
  RELEASE_(polynomials_);
  RELEASE_(botanaPolynomials_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoLine:withOrgGeogebraCommonKernelGeosGeoLine:", "AlgoAreConcurrent", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lorg.geogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lorg.geogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getBotanaPolynomials", NULL, "[[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputLine1_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "inputLine2_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "inputLine3_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "outputBoolean_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "polynomials_", NULL, 0x2, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
    { "botanaPolynomials_", NULL, 0x2, "[[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelProverAlgoAreConcurrent = { 2, "AlgoAreConcurrent", "org.geogebra.common.kernel.prover", NULL, 0x1, 11, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelProverAlgoAreConcurrent;
}

@end

void OrgGeogebraCommonKernelProverAlgoAreConcurrent_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelProverAlgoAreConcurrent *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoLine *inputLine1, OrgGeogebraCommonKernelGeosGeoLine *inputLine2, OrgGeogebraCommonKernelGeosGeoLine *inputLine3) {
  OrgGeogebraCommonKernelAlgosAlgoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  OrgGeogebraCommonKernelProverAlgoAreConcurrent_set_inputLine1_(self, inputLine1);
  OrgGeogebraCommonKernelProverAlgoAreConcurrent_set_inputLine2_(self, inputLine2);
  OrgGeogebraCommonKernelProverAlgoAreConcurrent_set_inputLine3_(self, inputLine3);
  OrgGeogebraCommonKernelProverAlgoAreConcurrent_setAndConsume_outputBoolean_(self, new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  OrgGeogebraCommonKernelProverAlgoAreConcurrent_compute(self);
}

OrgGeogebraCommonKernelProverAlgoAreConcurrent *new_OrgGeogebraCommonKernelProverAlgoAreConcurrent_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, OrgGeogebraCommonKernelGeosGeoLine *inputLine1, OrgGeogebraCommonKernelGeosGeoLine *inputLine2, OrgGeogebraCommonKernelGeosGeoLine *inputLine3) {
  OrgGeogebraCommonKernelProverAlgoAreConcurrent *self = [OrgGeogebraCommonKernelProverAlgoAreConcurrent alloc];
  OrgGeogebraCommonKernelProverAlgoAreConcurrent_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelGeosGeoLine_(self, cons, label, inputLine1, inputLine2, inputLine3);
  return self;
}

void OrgGeogebraCommonKernelProverAlgoAreConcurrent_compute(OrgGeogebraCommonKernelProverAlgoAreConcurrent *self) {
  jdouble det = [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->inputLine1_)) getX] * [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->inputLine2_)) getY] * [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(self->inputLine3_)) getZ] + [self->inputLine2_ getX] * [self->inputLine3_ getY] * [self->inputLine1_ getZ] + [self->inputLine3_ getX] * [self->inputLine1_ getY] * [self->inputLine2_ getZ] - [self->inputLine3_ getX] * [self->inputLine2_ getY] * [self->inputLine1_ getZ] - [self->inputLine2_ getX] * [self->inputLine1_ getY] * [self->inputLine3_ getZ] - [self->inputLine1_ getX] * [self->inputLine3_ getY] * [self->inputLine2_ getZ];
  [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->outputBoolean_)) setValueWithBoolean:OrgGeogebraCommonKernelKernel_isZeroWithDouble_(det)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelProverAlgoAreConcurrent)
