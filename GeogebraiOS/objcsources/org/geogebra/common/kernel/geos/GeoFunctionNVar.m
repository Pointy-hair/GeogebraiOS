//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/geos/GeoFunctionNVar.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/Matrix/Coords3.h"
#include "org/geogebra/common/kernel/Matrix/CoordsDouble3.h"
#include "org/geogebra/common/kernel/RegionParameters.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoMacroInterface.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/arithmetic/IneqTree.h"
#include "org/geogebra/common/kernel/arithmetic/Inequality.h"
#include "org/geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/Polynomial.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/geos/CasEvaluableFunction.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/SurfaceEvaluable.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/util/StringUtil.h"

#define OrgGeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET 4.0E-5
#define OrgGeogebraCommonKernelGeosGeoFunctionNVar_SEARCH_SAMPLES 70

@interface OrgGeogebraCommonKernelGeosGeoFunctionNVar () {
 @public
  OrgGeogebraCommonKernelArithmeticFunctionNVar *fun_;
  IOSObjectArray *fun1_;
  JavaLangBoolean *isInequality__;
  jboolean isDefined__;
  IOSDoubleArray *from_, *to_;
  JavaLangStringBuilder *sbToString_;
  OrgGeogebraCommonKernelArithmeticEquation *equalityChecker_;
  IOSDoubleArray *tmp_;
  OrgGeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum *levelOfDetail_;
  OrgGeogebraCommonKernelMatrixCoords *der1_, *der2_, *normal_;
  OrgGeogebraCommonKernelMatrixCoordsDouble3 *p1_, *p2_;
}

- (void)checkDefined;

- (NSString *)toXMLStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (void)tryLocateInEVWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P;

- (void)mirrorWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phi;

- (jboolean)setNormalFromNeighboursWithOrgGeogebraCommonKernelMatrixCoords3:(OrgGeogebraCommonKernelMatrixCoords3 *)p
                                                                 withDouble:(jdouble)u
                                                                 withDouble:(jdouble)v
                                   withOrgGeogebraCommonKernelMatrixCoords3:(OrgGeogebraCommonKernelMatrixCoords3 *)n;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, fun_, OrgGeogebraCommonKernelArithmeticFunctionNVar *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, fun1_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, isInequality__, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, from_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, to_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, sbToString_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, equalityChecker_, OrgGeogebraCommonKernelArithmeticEquation *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, tmp_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, levelOfDetail_, OrgGeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, der1_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, der2_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, normal_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, p1_, OrgGeogebraCommonKernelMatrixCoordsDouble3 *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, p2_, OrgGeogebraCommonKernelMatrixCoordsDouble3 *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, STRICT_INEQ_OFFSET, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, SEARCH_SAMPLES, jint)

static OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *OrgGeogebraCommonKernelGeosGeoFunctionNVar_functionExpander_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, functionExpander_, OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunctionNVar, functionExpander_, OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *)

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticFunctionNVar *OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunction(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoFunctionNVar_checkDefined(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoFunctionNVar_toXMLStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoFunctionNVar_tryLocateInEVWithOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoFunctionNVar_mirrorWithOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self, id<OrgGeogebraCommonKernelArithmeticNumberValue> phi);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoFunctionNVar_setNormalFromNeighboursWithOrgGeogebraCommonKernelMatrixCoords3_withDouble_withDouble_withOrgGeogebraCommonKernelMatrixCoords3_(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self, OrgGeogebraCommonKernelMatrixCoords3 *p, jdouble u, jdouble v, OrgGeogebraCommonKernelMatrixCoords3 *n);

@implementation OrgGeogebraCommonKernelGeosGeoFunctionNVar

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                                withBoolean:(jboolean)defaults {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, c, defaults);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
          withOrgGeogebraCommonKernelArithmeticFunctionNVar:(OrgGeogebraCommonKernelArithmeticFunctionNVar *)f {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self, c, f);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
          withOrgGeogebraCommonKernelArithmeticFunctionNVar:(OrgGeogebraCommonKernelArithmeticFunctionNVar *)f {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self, c, label, f);
  return self;
}

- (NSString *)getTypeString {
  return (isInequality__ != nil && [isInequality__ booleanValue]) ? @"Inequality" : @"MultivariableFunction";
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_FUNCTION_NVAR();
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoFunctionNVar:(OrgGeogebraCommonKernelGeosGeoFunctionNVar *)f {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelGeosGeoFunctionNVar_(self, f);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelGeosGeoFunctionNVar_(self) autorelease];
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_fun1_(self, nil);
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) {
    [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) wrap]];
    return;
  }
  id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> geoFun = (id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar));
  if (geo == nil || [((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(geoFun)) getFunction] == nil) {
    OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_fun_(self, nil);
    isDefined__ = NO;
    return;
  }
  isDefined__ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined];
  IOSObjectArray *oldVars = fun_ == nil ? nil : [fun_ getFunctionVariables];
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_fun_(self, new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticFunctionNVar_withOrgGeogebraCommonKernelKernel_([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(geoFun)) getFunction], kernel_));
  [fun_ fillVariablesWithOrgGeogebraCommonKernelArithmeticFunctionVariableArray:oldVars];
  if (geo->cons_ != cons_ && [self isAlgoMacroOutput]) {
    if (![geo isIndependent]) {
      id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface> algoMacro = (id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface>) check_protocol_cast([self getParentAlgorithm], @protocol(OrgGeogebraCommonKernelAlgosAlgoMacroInterface));
      [((id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface>) nil_chk(algoMacro)) initFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar:self->fun_];
    }
  }
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_isInequality__(self, JavaLangBoolean_valueOfWithBoolean_([fun_ initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode:OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(self) withOrgGeogebraCommonKernelArithmeticFunctionalNVar:self]));
}

- (void)setFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar:(OrgGeogebraCommonKernelArithmeticFunctionNVar *)f {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_fun_(self, f);
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_fun1_(self, nil);
}

- (void)setDerivatives {
  if (fun1_ != nil) {
    return;
  }
  IOSObjectArray *vars = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) getFunctionVariables];
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_fun1_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(vars))->size_ type:OrgGeogebraCommonKernelArithmeticFunctionNVar_class_()]);
  if (OrgGeogebraCommonKernelGeosGeoFunctionNVar_functionExpander_ == nil) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoFunctionNVar_functionExpander_, nil, new_OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_init());
  }
  OrgGeogebraCommonKernelArithmeticValidExpression *ve = [fun_ deepCopyWithOrgGeogebraCommonKernelKernel:[self getKernel]];
  ve = (OrgGeogebraCommonKernelArithmeticValidExpression *) check_class_cast([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelGeosGeoFunctionNVar_functionExpander_], [OrgGeogebraCommonKernelArithmeticValidExpression class]);
  for (jint i = 0; i < vars->size_; i++) {
    IOSObjectArray_SetAndConsume(fun1_, i, new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(vars, i) withOrgGeogebraCommonKernelKernel:kernel_])) wrap], vars));
  }
}

- (void)resetDerivatives {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_fun1_(self, nil);
}

- (OrgGeogebraCommonKernelArithmeticFunctionNVar *)getFunction {
  return OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunction(self);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getFunctionExpression {
  return OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(self);
}

- (void)replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (fun_ != nil) {
    [fun_ replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (jdouble)evaluateWithDoubleArray:(IOSDoubleArray *)vals {
  if (fun_ == nil) return JavaLangDouble_NaN;
  return [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) evaluateWithDoubleArray:vals];
}

- (OrgGeogebraCommonKernelMatrixCoords *)evaluatePointWithDoubleArray:(IOSDoubleArray *)vals {
  if (fun_ == nil) return nil;
  return [new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(nil_chk(vals), 0), IOSDoubleArray_Get(vals, 1), [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) evaluateWithDoubleArray:vals]) autorelease];
}

- (jdouble)evaluateWithDouble:(jdouble)x
                   withDouble:(jdouble)y
                   withDouble:(jdouble)z {
  if (fun_ == nil) return JavaLangDouble_NaN;
  return [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) evaluateWithDoubleArray:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ x, y, z } count:3]];
}

- (void)checkDefined {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_checkDefined(self);
}

- (void)setUsingCasCommandWithNSString:(NSString *)ggbCasCmd
withOrgGeogebraCommonKernelGeosCasEvaluableFunction:(id<OrgGeogebraCommonKernelGeosCasEvaluableFunction>)f
                           withBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:(OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_fun1_(self, nil);
  OrgGeogebraCommonKernelGeosGeoFunctionNVar *ff = (OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(f, [OrgGeogebraCommonKernelGeosGeoFunctionNVar class]);
  if ([((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(ff)) isDefined]) {
    OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_fun_(self, [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(ff->fun_)) evalCasCommandWithNSString:ggbCasCmd withBoolean:symbolic withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:arbconst]);
    OrgGeogebraCommonKernelGeosGeoFunctionNVar_checkDefined(self);
  }
  else {
    isDefined__ = NO;
  }
}

- (jboolean)isDefined {
  return isDefined__ && fun_ != nil;
}

- (void)setDefinedWithBoolean:(jboolean)defined {
  isDefined__ = defined;
}

- (void)setUndefined {
  isDefined__ = NO;
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  if (fun_ != nil && isInequality__ == nil && [self isBooleanFunction]) [self getIneqs];
  return [self isDefined] && (![self isBooleanFunction] || [((JavaLangBoolean *) nil_chk(isInequality__)) booleanValue]);
}

- (NSString *)toXMLStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelGeosGeoFunctionNVar_toXMLStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)getAssignmentLHSWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  [sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:label_]];
  [sbToString_ appendWithNSString:@"("];
  [sbToString_ appendWithNSString:[self getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  [sbToString_ appendWithNSString:@")"];
  return [sbToString_ description];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if ([self isLabelSet] && ![self isBooleanFunction]) return OrgGeogebraCommonKernelGeosGeoFunctionNVar_toXMLStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  if ([self isLabelSet]) {
    [sbToString_ appendWithNSString:label_];
    [sbToString_ appendWithNSString:@": "];
  }
  [sbToString_ appendWithNSString:[self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString_ description];
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if ([self isDefined]) return [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

- (NSString *)toSymbolicStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if ([self isDefined]) return [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if ([self isDefined]) return [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl];
  return JreStrcat("$$$", @" \\text{", [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"], @"} ");
}

- (jchar)getLabelDelimiter {
  return [self isBooleanFunction] ? ':' : '=';
}

- (void)getXMLWithBoolean:(jboolean)getListenersToo
withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if ([self isIndependent] && [self getDefaultGeoType] < 0) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<expression"];
    [sb appendWithNSString:@" label =\""];
    [sb appendWithNSString:label_];
    [sb appendWithNSString:@"\" exp=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, OrgGeogebraCommonKernelGeosGeoFunctionNVar_toXMLStringWithOrgGeogebraCommonKernelStringTemplate_(self, OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_()));
    [sb appendWithNSString:@"\"/>\n"];
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<element"];
  [sb appendWithNSString:@" type=\"functionNVar\""];
  [sb appendWithNSString:@" label=\""];
  [sb appendWithNSString:label_];
  if ([self getDefaultGeoType] >= 0) {
    [sb appendWithNSString:@"\" default=\""];
    [sb appendWithInt:[self getDefaultGeoType]];
  }
  [sb appendWithNSString:@"\">\n"];
  [self getXMLtagsWithJavaLangStringBuilder:sb];
  [self getCaptionXMLWithJavaLangStringBuilder:sb];
  if (getListenersToo) [self getListenerTagsXMLWithJavaLangStringBuilder:sb];
  [sb appendWithNSString:@"</element>\n"];
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)isBooleanFunction {
  if (fun_ != nil) return [fun_ isBooleanFunction];
  return NO;
}

- (NSString *)getVarStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return fun_ == nil ? @"" : [fun_ getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (!([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunctionNVar class]])) {
    return NO;
  }
  if (equalityChecker_ == nil) {
    OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_equalityChecker_(self, new_OrgGeogebraCommonKernelArithmeticEquation_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(self), OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(nil_chk(((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunctionNVar class]))))));
  }
  else {
    [equalityChecker_ setLHSWithOrgGeogebraCommonKernelArithmeticExpressionNode:OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(self)];
    [equalityChecker_ setRHSWithOrgGeogebraCommonKernelArithmeticExpressionNode:OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(nil_chk(((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunctionNVar class]))))];
  }
  @try {
    [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equalityChecker_)) initEquation];
  }
  @catch (OrgGeogebraCommonMainMyError *e) {
    return [self isDifferenceZeroInCASWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  if (![((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(equalityChecker_)) isPolynomial]) {
    return [self isDifferenceZeroInCASWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  IOSObjectArray *coeffs = [((OrgGeogebraCommonKernelArithmeticPolynomial *) nil_chk([equalityChecker_ getNormalForm])) getCoeff];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(coeffs))->size_; i++) {
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(coeffs, i)))->size_; j++) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> coeff = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeffs, i)), j);
      if (coeff != nil) {
        jdouble coeffVal = [coeff evaluateDouble];
        if (!OrgGeogebraCommonKernelKernel_isZeroWithDouble_(coeffVal)) {
          return NO;
        }
      }
    }
  }
  return YES;
}

- (NSString *)getCASStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                        withBoolean:(jboolean)symbolic {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) getExpression])) getCASstringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:symbolic];
}

- (jdouble)getMinParameterWithInt:(jint)index {
  if (from_ == nil) return JavaLangDouble_NaN;
  return IOSDoubleArray_Get(nil_chk(from_), index);
}

- (jdouble)getMaxParameterWithInt:(jint)index {
  if (to_ == nil) return JavaLangDouble_NaN;
  return IOSDoubleArray_Get(nil_chk(to_), index);
}

- (void)setIntervalWithDoubleArray:(IOSDoubleArray *)from
                   withDoubleArray:(IOSDoubleArray *)to {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_from_(self, from);
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_to_(self, to);
}

- (OrgGeogebraCommonKernelMatrixCoords *)evaluatePointWithDouble:(jdouble)u
                                                      withDouble:(jdouble)v {
  OrgGeogebraCommonKernelMatrixCoords *p = [new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3) autorelease];
  *IOSDoubleArray_GetRef(nil_chk(tmp_), 0) = u;
  *IOSDoubleArray_GetRef(tmp_, 1) = v;
  jdouble val = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) evaluateWithDoubleArray:tmp_];
  [p setWithInt:1 withDouble:u];
  [p setWithInt:2 withDouble:v];
  [p setWithInt:3 withDouble:val];
  return p;
}

- (void)evaluatePointWithDouble:(jdouble)u
                     withDouble:(jdouble)v
withOrgGeogebraCommonKernelMatrixCoords3:(OrgGeogebraCommonKernelMatrixCoords3 *)p {
  *IOSDoubleArray_GetRef(nil_chk(tmp_), 0) = u;
  *IOSDoubleArray_GetRef(tmp_, 1) = v;
  jdouble val = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) evaluateWithDoubleArray:tmp_];
  [((OrgGeogebraCommonKernelMatrixCoords3 *) nil_chk(p)) setWithDouble:u withDouble:v withDouble:val];
}

- (jint)getVarNumber {
  return fun_ == nil ? 0 : [fun_ getVarNumber];
}

- (jboolean)hasDrawable3D {
  return [self getVarNumber] == 2 || [self getVarNumber] == 3;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 1) autorelease];
}

- (jboolean)isFillable {
  if (fun_ == nil) return YES;
  return [self hasDrawable3D];
}

- (jboolean)isInverseFillable {
  return [self isFillable];
}

- (void)resetIneqs {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_isInequality__(self, JavaLangBoolean_valueOfWithBoolean_([((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode:OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(self) withOrgGeogebraCommonKernelArithmeticFunctionalNVar:self]));
}

- (OrgGeogebraCommonKernelArithmeticIneqTree *)getIneqs {
  if ([((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) getIneqs] == nil) {
    OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_isInequality__(self, JavaLangBoolean_valueOfWithBoolean_([fun_ initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode:[fun_ getExpression] withOrgGeogebraCommonKernelArithmeticFunctionalNVar:self]));
  }
  return [fun_ getIneqs];
}

- (void)update {
  if (fun_ != nil && [fun_ isBooleanFunction]) {
    OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_isInequality__(self, JavaLangBoolean_valueOfWithBoolean_([fun_ updateIneqs]));
  }
  [super update];
}

- (jboolean)isRegion {
  return [self isBooleanFunction];
}

- (jboolean)isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) updateCoords2D];
  return [self isInRegionWithDouble:[P getX2D] withDouble:[P getY2D]];
}

- (jboolean)isInRegionWithDouble:(jdouble)x0
                      withDouble:(jdouble)y0 {
  return [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) evaluateBooleanWithDoubleArray:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ x0, y0 } count:2]];
}

- (void)pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoPoint class])))) isDefined]) return;
  OrgGeogebraCommonKernelRegionParameters *rp = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getRegionParameters];
  if (![self isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:P]) {
    jdouble bestX = [((OrgGeogebraCommonKernelRegionParameters *) nil_chk(rp)) getT1], bestY = [rp getT2], myX = [P getX2D], myY = [P getY2D];
    jdouble bestDist = (bestY - myY) * (bestY - myY) + (bestX - myX) * (bestX - myX);
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(bestDist)) {
      bestDist = JavaLangDouble_POSITIVE_INFINITY;
    }
    OrgGeogebraCommonKernelArithmeticIneqTree *ineqs = [self getIneqs];
    jint size = [((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk(ineqs)) getSize];
    for (jint i = 0; i < size; i++) {
      OrgGeogebraCommonKernelArithmeticInequality *in = [ineqs getWithInt:i];
      jdouble px = 0, py = 0;
      if ([((OrgGeogebraCommonKernelArithmeticInequality *) nil_chk(in)) getType] == OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_Y()) {
        px = [P getX2D];
        py = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk([in getFunBorder])) evaluateWithDouble:px];
        py += [in isAboveBorder] ? OrgGeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET : -OrgGeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET;
      }
      else if ([in getType] == OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_X()) {
        py = [P getY2D];
        px = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk([in getFunBorder])) evaluateWithDouble:py];
        px += [in isAboveBorder] ? OrgGeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET : -OrgGeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET;
      }
      else if ([in getType] == OrgGeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_LINEAR()) {
        jdouble a = [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk([in getLineBorder])) getX];
        jdouble b = [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk([in getLineBorder])) getY];
        jdouble c = [((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk([in getLineBorder])) getZ];
        px = (-a * c + b * b * [P getX2D] - a * b * [P getY2D]) / (a * a + b * b);
        py = (-b * c - a * b * [P getX2D] + a * a * [P getY2D]) / (a * a + b * b);
        py -= [in isAboveBorder] ? OrgGeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET : -OrgGeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET;
      }
      jdouble myDist = (py - myY) * (py - myY) + (px - myX) * (px - myX);
      if ((myDist < bestDist) && [self isInRegionWithDouble:px withDouble:py]) {
        bestDist = myDist;
        bestX = px;
        bestY = py;
      }
    }
    if ([self isInRegionWithDouble:bestX withDouble:bestY]) {
      [rp setT1WithDouble:bestX];
      [rp setT2WithDouble:bestY];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoPoint class])) setCoordsWithDouble:bestX withDouble:bestY withDouble:1];
    }
    else OrgGeogebraCommonKernelGeosGeoFunctionNVar_tryLocateInEVWithOrgGeogebraCommonKernelKernelNDGeoPointND_(self, P);
  }
  else {
    [((OrgGeogebraCommonKernelRegionParameters *) nil_chk(rp)) setT1WithDouble:[P getX2D]];
    [rp setT2WithDouble:[P getY2D]];
  }
}

- (void)tryLocateInEVWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_tryLocateInEVWithOrgGeogebraCommonKernelKernelNDGeoPointND_(self, P);
}

- (void)regionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  [self pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
}

- (jboolean)isInequality {
  return (isInequality__ != nil && [isInequality__ booleanValue]);
}

- (void)translateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) translateWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX] withDouble:[v getY]];
}

- (jboolean)isTranslateable {
  return YES;
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11 {
  jdouble d = a00 * a11 - a01 * a10;
  if (d == 0) [self setUndefined];
  else [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) matrixTransformWithDouble:a11 / d withDouble:-a01 / d withDouble:-a10 / d withDouble:a00 / d];
}

- (void)dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)S {
  [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) translateWithDouble:-[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(S)) getX] withDouble:-[S getY]];
  [fun_ matrixTransformWithDouble:1 / [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble] withDouble:0 withDouble:0 withDouble:1 / [r getDouble]];
  [fun_ translateWithDouble:[S getX] withDouble:[S getY]];
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phi {
  jdouble cosPhi = JavaLangMath_cosWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(phi)) getDouble]);
  jdouble sinPhi = JavaLangMath_sinWithDouble_([phi getDouble]);
  [self matrixTransformWithDouble:cosPhi withDouble:-sinPhi withDouble:sinPhi withDouble:cosPhi];
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phi
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonKernelMatrixCoords *P = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoords];
  [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) translateWithDouble:-[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getX] withDouble:-[P getY]];
  [self rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:phi];
  [fun_ translateWithDouble:[P getX] withDouble:[P getY]];
}

- (void)mirrorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)Q {
  [self dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, -1.0) autorelease] withOrgGeogebraCommonKernelMatrixCoords:Q];
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g1 {
  OrgGeogebraCommonKernelGeosGeoLine *g = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g1, [OrgGeogebraCommonKernelGeosGeoLine class]);
  jdouble qx, qy;
  if (JavaLangMath_absWithDouble_([((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g)) getX]) > JavaLangMath_absWithDouble_([g getY])) {
    qx = [g getZ] / [g getX];
    qy = 0.0;
  }
  else {
    qx = 0.0;
    qy = [g getZ] / [g getY];
  }
  [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) translateWithDouble:qx withDouble:qy];
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_mirrorWithOrgGeogebraCommonKernelArithmeticNumberValue_(self, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 2.0 * JavaLangMath_atan2WithDouble_withDouble_(-[g getX], [g getY])) autorelease]);
  [fun_ translateWithDouble:-qx withDouble:-qy];
}

- (void)mirrorWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phi {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_mirrorWithOrgGeogebraCommonKernelArithmeticNumberValue_(self, phi);
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) matrixTransformWithDouble:a00 withDouble:a01 withDouble:a02 withDouble:a10 withDouble:a11 withDouble:a12 withDouble:a20 withDouble:a21 withDouble:a22];
}

- (jboolean)isGeoFunctionNVar {
  return YES;
}

- (jboolean)isLaTeXDrawableGeo {
  return YES;
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  if ([self isInequality]) {
    [self getLineStyleXMLWithJavaLangStringBuilder:sb];
  }
  if ([self hasLevelOfDetail] && ([self getLevelOfDetail] == OrgGeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum_get_QUALITY())) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<levelOfDetailQuality val=\"true\"/>\n"];
  }
}

- (OrgGeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum *)getLevelOfDetail {
  return levelOfDetail_;
}

- (void)setLevelOfDetailWithOrgGeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum:(OrgGeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum *)lod {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_levelOfDetail_(self, lod);
}

- (jboolean)hasLevelOfDetail {
  return (fun_ != nil) && ([fun_ getVarNumber] == 2) && ![self isInequality];
}

- (jint)getMinimumLineThickness {
  return (isInequality__ != nil && [isInequality__ booleanValue]) ? 0 : 1;
}

- (IOSObjectArray *)getFunctionVariables {
  return [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) getFunctionVariables];
}

- (OrgGeogebraCommonKernelArithmeticMyList *)getFunctionVariableList {
  OrgGeogebraCommonKernelArithmeticMyList *ml = [new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(kernel_) autorelease];
  {
    IOSObjectArray *a__ = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) getFunctionVariables];
    OrgGeogebraCommonKernelArithmeticFunctionVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgGeogebraCommonKernelArithmeticFunctionVariable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonKernelArithmeticFunctionVariable *fv = *b__++;
      [ml addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv];
    }
  }
  return ml;
}

- (void)clearCasEvalMapWithNSString:(NSString *)key {
  [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) clearCasEvalMapWithNSString:key];
}

- (NSString *)getFormulaStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                            withBoolean:(jboolean)substituteNumbers {
  NSString *ret = @"";
  if ([self isIndependent]) {
    ret = [self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  else {
    if (OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunction(self) == nil) {
      ret = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
    }
    else ret = substituteNumbers ? [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunction(self))) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunction(self))) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  if ([@"" isEqual:ret]) {
    ret = [self toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return ret;
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (jboolean)setNormalFromNeighboursWithOrgGeogebraCommonKernelMatrixCoords3:(OrgGeogebraCommonKernelMatrixCoords3 *)p
                                                                 withDouble:(jdouble)u
                                                                 withDouble:(jdouble)v
                                   withOrgGeogebraCommonKernelMatrixCoords3:(OrgGeogebraCommonKernelMatrixCoords3 *)n {
  return OrgGeogebraCommonKernelGeosGeoFunctionNVar_setNormalFromNeighboursWithOrgGeogebraCommonKernelMatrixCoords3_withDouble_withDouble_withOrgGeogebraCommonKernelMatrixCoords3_(self, p, u, v, n);
}

- (jboolean)evaluateNormalWithOrgGeogebraCommonKernelMatrixCoords3:(OrgGeogebraCommonKernelMatrixCoords3 *)p
                                                        withDouble:(jdouble)u
                                                        withDouble:(jdouble)v
                          withOrgGeogebraCommonKernelMatrixCoords3:(OrgGeogebraCommonKernelMatrixCoords3 *)n {
  *IOSDoubleArray_GetRef(nil_chk(tmp_), 0) = u;
  *IOSDoubleArray_GetRef(tmp_, 1) = v;
  jdouble val = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(IOSObjectArray_Get(nil_chk(fun1_), 0))) evaluateWithDoubleArray:tmp_];
  if (JavaLangDouble_isNaNWithDouble_(val)) {
    return OrgGeogebraCommonKernelGeosGeoFunctionNVar_setNormalFromNeighboursWithOrgGeogebraCommonKernelMatrixCoords3_withDouble_withDouble_withOrgGeogebraCommonKernelMatrixCoords3_(self, p, u, v, n);
  }
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(der1_)) setZWithDouble:val];
  val = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(IOSObjectArray_Get(fun1_, 1))) evaluateWithDoubleArray:tmp_];
  if (JavaLangDouble_isNaNWithDouble_(val)) {
    return OrgGeogebraCommonKernelGeosGeoFunctionNVar_setNormalFromNeighboursWithOrgGeogebraCommonKernelMatrixCoords3_withDouble_withDouble_withOrgGeogebraCommonKernelMatrixCoords3_(self, p, u, v, n);
  }
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(der2_)) setZWithDouble:val];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(normal_)) setCrossProductWithOrgGeogebraCommonKernelMatrixCoords:der1_ withOrgGeogebraCommonKernelMatrixCoords:der2_];
  [((OrgGeogebraCommonKernelMatrixCoords3 *) nil_chk(n)) setNormalizedIfPossibleWithOrgGeogebraCommonKernelMatrixCoords:normal_];
  return YES;
}

- (void)setAllVisualPropertiesExceptEuclidianVisibleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                                  withBoolean:(jboolean)keepAdvanced {
  [super setAllVisualPropertiesExceptEuclidianVisibleWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:keepAdvanced];
  if ([self hasLevelOfDetail] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) hasLevelOfDetail]) {
    OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_levelOfDetail_(self, [((id<OrgGeogebraCommonKernelKernelNDSurfaceEvaluable>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDSurfaceEvaluable))) getLevelOfDetail]);
  }
}

- (void)dealloc {
  RELEASE_(fun_);
  RELEASE_(fun1_);
  RELEASE_(isInequality__);
  RELEASE_(from_);
  RELEASE_(to_);
  RELEASE_(sbToString_);
  RELEASE_(equalityChecker_);
  RELEASE_(tmp_);
  RELEASE_(levelOfDetail_);
  RELEASE_(der1_);
  RELEASE_(der2_);
  RELEASE_(normal_);
  RELEASE_(p1_);
  RELEASE_(p2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoFunctionNVar", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withBoolean:", "GeoFunctionNVar", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelArithmeticFunctionNVar:", "GeoFunctionNVar", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticFunctionNVar:", "GeoFunctionNVar", NULL, 0x1, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoFunctionNVar:", "GeoFunctionNVar", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar:", "setFunction", "V", 0x1, NULL, NULL },
    { "setDerivatives", NULL, "V", 0x1, NULL, NULL },
    { "resetDerivatives", NULL, "V", 0x1, NULL, NULL },
    { "getFunction", NULL, "Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", 0x11, NULL, NULL },
    { "getFunctionExpression", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, NULL, NULL },
    { "replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:", "replaceChildrenByValues", "V", 0x1, NULL, NULL },
    { "evaluateWithDoubleArray:", "evaluate", "D", 0x1, NULL, NULL },
    { "evaluatePointWithDoubleArray:", "evaluatePoint", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "evaluateWithDouble:withDouble:withDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "checkDefined", NULL, "V", 0x2, NULL, NULL },
    { "setUsingCasCommandWithNSString:withOrgGeogebraCommonKernelGeosCasEvaluableFunction:withBoolean:withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:", "setUsingCasCommand", "V", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setDefinedWithBoolean:", "setDefined", "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "toXMLStringWithOrgGeogebraCommonKernelStringTemplate:", "toXMLString", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getAssignmentLHSWithOrgGeogebraCommonKernelStringTemplate:", "getAssignmentLHS", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toSymbolicStringWithOrgGeogebraCommonKernelStringTemplate:", "toSymbolicString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLabelDelimiter", NULL, "C", 0x4, NULL, NULL },
    { "getXMLWithBoolean:withJavaLangStringBuilder:", "getXML", "V", 0x11, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x11, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "isBooleanFunction", NULL, "Z", 0x1, NULL, NULL },
    { "getVarStringWithOrgGeogebraCommonKernelStringTemplate:", "getVarString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "getCASStringWithOrgGeogebraCommonKernelStringTemplate:withBoolean:", "getCASString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getMinParameterWithInt:", "getMinParameter", "D", 0x1, NULL, NULL },
    { "getMaxParameterWithInt:", "getMaxParameter", "D", 0x1, NULL, NULL },
    { "setIntervalWithDoubleArray:withDoubleArray:", "setInterval", "V", 0x1, NULL, NULL },
    { "evaluatePointWithDouble:withDouble:", "evaluatePoint", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "evaluatePointWithDouble:withDouble:withOrgGeogebraCommonKernelMatrixCoords3:", "evaluatePoint", "V", 0x1, NULL, NULL },
    { "getVarNumber", NULL, "I", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "isInverseFillable", NULL, "Z", 0x1, NULL, NULL },
    { "resetIneqs", NULL, "V", 0x1, NULL, NULL },
    { "getIneqs", NULL, "Lorg.geogebra.common.kernel.arithmetic.IneqTree;", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "isRegion", NULL, "Z", 0x1, NULL, NULL },
    { "isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "isInRegionWithDouble:withDouble:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChangedForRegion", "V", 0x1, NULL, NULL },
    { "tryLocateInEVWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "tryLocateInEV", "V", 0x2, NULL, NULL },
    { "regionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "regionChanged", "V", 0x1, NULL, NULL },
    { "isInequality", NULL, "Z", 0x1, NULL, NULL },
    { "translateWithOrgGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelArithmeticNumberValue:", "mirror", "V", 0x2, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "isGeoFunctionNVar", NULL, "Z", 0x1, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getLevelOfDetail", NULL, "Lorg.geogebra.common.kernel.kernelND.SurfaceEvaluable$LevelOfDetail;", 0x1, NULL, NULL },
    { "setLevelOfDetailWithOrgGeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum:", "setLevelOfDetail", "V", 0x1, NULL, NULL },
    { "hasLevelOfDetail", NULL, "Z", 0x1, NULL, NULL },
    { "getMinimumLineThickness", NULL, "I", 0x1, NULL, NULL },
    { "getFunctionVariables", NULL, "[Lorg.geogebra.common.kernel.arithmetic.FunctionVariable;", 0x1, NULL, NULL },
    { "getFunctionVariableList", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyList;", 0x1, NULL, NULL },
    { "clearCasEvalMapWithNSString:", "clearCasEvalMap", "V", 0x1, NULL, NULL },
    { "getFormulaStringWithOrgGeogebraCommonKernelStringTemplate:withBoolean:", "getFormulaString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
    { "setNormalFromNeighboursWithOrgGeogebraCommonKernelMatrixCoords3:withDouble:withDouble:withOrgGeogebraCommonKernelMatrixCoords3:", "setNormalFromNeighbours", "Z", 0x2, NULL, NULL },
    { "evaluateNormalWithOrgGeogebraCommonKernelMatrixCoords3:withDouble:withDouble:withOrgGeogebraCommonKernelMatrixCoords3:", "evaluateNormal", "Z", 0x1, NULL, NULL },
    { "setAllVisualPropertiesExceptEuclidianVisibleWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "setAllVisualPropertiesExceptEuclidianVisible", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "STRICT_INEQ_OFFSET_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET },
    { "SEARCH_SAMPLES_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoFunctionNVar_SEARCH_SAMPLES },
    { "fun_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", NULL, NULL,  },
    { "fun1_", NULL, 0x2, "[Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", NULL, NULL,  },
    { "isInequality__", "isInequality", 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "isDefined__", "isDefined", 0x2, "Z", NULL, NULL,  },
    { "from_", NULL, 0x2, "[D", NULL, NULL,  },
    { "to_", NULL, 0x2, "[D", NULL, NULL,  },
    { "functionExpander_", NULL, 0xa, "Lorg.geogebra.common.kernel.arithmetic.Traversing$FunctionExpander;", &OrgGeogebraCommonKernelGeosGeoFunctionNVar_functionExpander_, NULL,  },
    { "sbToString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "equalityChecker_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Equation;", NULL, NULL,  },
    { "tmp_", NULL, 0x2, "[D", NULL, NULL,  },
    { "levelOfDetail_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.SurfaceEvaluable$LevelOfDetail;", NULL, NULL,  },
    { "der1_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "der2_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "normal_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "p1_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.CoordsDouble3;", NULL, NULL,  },
    { "p2_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.CoordsDouble3;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoFunctionNVar = { 2, "GeoFunctionNVar", "org.geogebra.common.kernel.geos", NULL, 0x1, 84, methods, 18, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoFunctionNVar;
}

@end

void OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->isDefined__ = YES;
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(80));
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_tmp_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_levelOfDetail_(self, OrgGeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum_get_SPEED());
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_der1_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(1, 0, 0));
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_der2_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(0, 1, 0));
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_normal_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3));
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_p1_(self, new_OrgGeogebraCommonKernelMatrixCoordsDouble3_init());
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_p2_(self, new_OrgGeogebraCommonKernelMatrixCoordsDouble3_init());
  [self setConstructionDefaults];
}

OrgGeogebraCommonKernelGeosGeoFunctionNVar *new_OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar *self = [OrgGeogebraCommonKernelGeosGeoFunctionNVar alloc];
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self, OrgGeogebraCommonKernelConstruction *c, jboolean defaults) {
  OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->isDefined__ = YES;
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(80));
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_tmp_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_levelOfDetail_(self, OrgGeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum_get_SPEED());
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_der1_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(1, 0, 0));
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_der2_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(0, 1, 0));
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_normal_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3));
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_p1_(self, new_OrgGeogebraCommonKernelMatrixCoordsDouble3_init());
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_p2_(self, new_OrgGeogebraCommonKernelMatrixCoordsDouble3_init());
  if (defaults) [self setConstructionDefaults];
}

OrgGeogebraCommonKernelGeosGeoFunctionNVar *new_OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(OrgGeogebraCommonKernelConstruction *c, jboolean defaults) {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar *self = [OrgGeogebraCommonKernelGeosGeoFunctionNVar alloc];
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, c, defaults);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self, OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelArithmeticFunctionNVar *f) {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, c, NO);
  [self setFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar:f];
  if (self->fun_ != nil) OrgGeogebraCommonKernelGeosGeoFunctionNVar_set_isInequality__(self, JavaLangBoolean_valueOfWithBoolean_([self->fun_ initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode:OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(self) withOrgGeogebraCommonKernelArithmeticFunctionalNVar:self]));
  [self setConstructionDefaults];
}

OrgGeogebraCommonKernelGeosGeoFunctionNVar *new_OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelArithmeticFunctionNVar *f) {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar *self = [OrgGeogebraCommonKernelGeosGeoFunctionNVar alloc];
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self, c, f);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, OrgGeogebraCommonKernelArithmeticFunctionNVar *f) {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self, c, f);
  [self setLabelWithNSString:label];
}

OrgGeogebraCommonKernelGeosGeoFunctionNVar *new_OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(OrgGeogebraCommonKernelConstruction *c, NSString *label, OrgGeogebraCommonKernelArithmeticFunctionNVar *f) {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar *self = [OrgGeogebraCommonKernelGeosGeoFunctionNVar alloc];
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunctionNVar_(self, c, label, f);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelGeosGeoFunctionNVar_(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self, OrgGeogebraCommonKernelGeosGeoFunctionNVar *f) {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelConstruction_(self, ((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(f))->cons_);
  [self setWithOrgGeogebraCommonKernelGeosGeoElement:f];
}

OrgGeogebraCommonKernelGeosGeoFunctionNVar *new_OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelGeosGeoFunctionNVar_(OrgGeogebraCommonKernelGeosGeoFunctionNVar *f) {
  OrgGeogebraCommonKernelGeosGeoFunctionNVar *self = [OrgGeogebraCommonKernelGeosGeoFunctionNVar alloc];
  OrgGeogebraCommonKernelGeosGeoFunctionNVar_initWithOrgGeogebraCommonKernelGeosGeoFunctionNVar_(self, f);
  return self;
}

OrgGeogebraCommonKernelArithmeticFunctionNVar *OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunction(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self) {
  return self->fun_;
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self) {
  if (self->fun_ == nil) return nil;
  return [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(self->fun_)) getExpression];
}

void OrgGeogebraCommonKernelGeosGeoFunctionNVar_checkDefined(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self) {
  self->isDefined__ = (self->fun_ != nil);
  if (self->fun_ != nil && [@"?" isEqual:[self->fun_ toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
    self->isDefined__ = NO;
  }
}

NSString *OrgGeogebraCommonKernelGeosGeoFunctionNVar_toXMLStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  [((JavaLangStringBuilder *) nil_chk(self->sbToString_)) setLengthWithInt:0];
  [self->sbToString_ appendWithNSString:self->label_];
  [self->sbToString_ appendWithNSString:@"("];
  [self->sbToString_ appendWithNSString:[self getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  [self->sbToString_ appendWithNSString:@") = "];
  [self->sbToString_ appendWithNSString:[self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  return [self->sbToString_ description];
}

void OrgGeogebraCommonKernelGeosGeoFunctionNVar_tryLocateInEVWithOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P) {
  jboolean found = NO;
  jdouble xmin = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getViewsXMinWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoElement class])];
  jdouble xmax = [self->kernel_ getViewsXMaxWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoElement class])];
  jdouble ymin = [self->kernel_ getViewsYMinWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoElement class])];
  jdouble ymax = [self->kernel_ getViewsYMaxWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoElement class])];
  for (jint i = 0; !found && i < OrgGeogebraCommonKernelGeosGeoFunctionNVar_SEARCH_SAMPLES; i++) for (jint j = 0; !found && j < OrgGeogebraCommonKernelGeosGeoFunctionNVar_SEARCH_SAMPLES; j++) {
    jdouble p = i / OrgGeogebraCommonKernelGeosGeoFunctionNVar_SEARCH_SAMPLES;
    jdouble rx = p * xmin + (1 - p) * xmax;
    jdouble q = i / OrgGeogebraCommonKernelGeosGeoFunctionNVar_SEARCH_SAMPLES;
    jdouble ry = q * ymin + (1 - q) * ymax;
    if ([self isInRegionWithDouble:rx withDouble:ry]) {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoPoint class])))) setCoordsWithDouble:rx withDouble:ry withDouble:1];
      found = YES;
    }
  }
  if (!found) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [OrgGeogebraCommonKernelGeosGeoPoint class])))) setUndefined];
}

void OrgGeogebraCommonKernelGeosGeoFunctionNVar_mirrorWithOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self, id<OrgGeogebraCommonKernelArithmeticNumberValue> phi) {
  jdouble cosPhi = JavaLangMath_cosWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(phi)) getDouble]);
  jdouble sinPhi = JavaLangMath_sinWithDouble_([phi getDouble]);
  [self matrixTransformWithDouble:cosPhi withDouble:sinPhi withDouble:sinPhi withDouble:-cosPhi];
}

jboolean OrgGeogebraCommonKernelGeosGeoFunctionNVar_setNormalFromNeighboursWithOrgGeogebraCommonKernelMatrixCoords3_withDouble_withDouble_withOrgGeogebraCommonKernelMatrixCoords3_(OrgGeogebraCommonKernelGeosGeoFunctionNVar *self, OrgGeogebraCommonKernelMatrixCoords3 *p, jdouble u, jdouble v, OrgGeogebraCommonKernelMatrixCoords3 *n) {
  [self evaluatePointWithDouble:u + OrgGeogebraCommonKernelKernelNDSurfaceEvaluable_NUMERICAL_DELTA withDouble:v withOrgGeogebraCommonKernelMatrixCoords3:self->p1_];
  if (![((OrgGeogebraCommonKernelMatrixCoordsDouble3 *) nil_chk(self->p1_)) isDefined]) {
    return NO;
  }
  [self evaluatePointWithDouble:u withDouble:v + OrgGeogebraCommonKernelKernelNDSurfaceEvaluable_NUMERICAL_DELTA withOrgGeogebraCommonKernelMatrixCoords3:self->p2_];
  if (![((OrgGeogebraCommonKernelMatrixCoordsDouble3 *) nil_chk(self->p2_)) isDefined]) {
    return NO;
  }
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->der1_)) setZWithDouble:(self->p1_->z_ - [((OrgGeogebraCommonKernelMatrixCoords3 *) nil_chk(p)) getZd]) / OrgGeogebraCommonKernelKernelNDSurfaceEvaluable_NUMERICAL_DELTA];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->der2_)) setZWithDouble:(self->p2_->z_ - [p getZd]) / OrgGeogebraCommonKernelKernelNDSurfaceEvaluable_NUMERICAL_DELTA];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(self->normal_)) setCrossProductWithOrgGeogebraCommonKernelMatrixCoords:self->der1_ withOrgGeogebraCommonKernelMatrixCoords:self->der2_];
  [((OrgGeogebraCommonKernelMatrixCoords3 *) nil_chk(n)) setNormalizedIfPossibleWithOrgGeogebraCommonKernelMatrixCoords:self->normal_];
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoFunctionNVar)
