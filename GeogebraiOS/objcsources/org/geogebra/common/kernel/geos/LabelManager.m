//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/geos/LabelManager.java
//


#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/LabelManager.h"
#include "org/geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/util/CopyPaste.h"
#include "org/geogebra/common/util/StringUtil.h"

@implementation OrgGeogebraCommonKernelGeosLabelManager

+ (jboolean)checkNameWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                  withNSString:(NSString *)nameToCheck {
  return OrgGeogebraCommonKernelGeosLabelManager_checkNameWithOrgGeogebraCommonKernelGeosGeoElement_withNSString_(geo, nameToCheck);
}

+ (jboolean)validVarWithNSString:(NSString *)var {
  return OrgGeogebraCommonKernelGeosLabelManager_validVarWithNSString_(var);
}

- (instancetype)init {
  OrgGeogebraCommonKernelGeosLabelManager_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkNameWithOrgGeogebraCommonKernelGeosGeoElement:withNSString:", "checkName", "Z", 0x9, NULL, NULL },
    { "validVarWithNSString:", "validVar", "Z", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosLabelManager = { 2, "LabelManager", "org.geogebra.common.kernel.geos", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosLabelManager;
}

@end

jboolean OrgGeogebraCommonKernelGeosLabelManager_checkNameWithOrgGeogebraCommonKernelGeosGeoElement_withNSString_(OrgGeogebraCommonKernelGeosGeoElement *geo, NSString *nameToCheck) {
  OrgGeogebraCommonKernelGeosLabelManager_initialize();
  NSString *name = nameToCheck;
  if (name == nil) return YES;
  if ([((NSString *) nil_chk(name)) hasPrefix:OrgGeogebraCommonUtilCopyPaste_get_labelPrefix_()]) return NO;
  name = OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(name);
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoFunction]) {
    if ([((OrgGeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([geo getKernel])) getApplication])) getParserFunctions])) isReservedWithNSString:name]) return NO;
  }
  return YES;
}

jboolean OrgGeogebraCommonKernelGeosLabelManager_validVarWithNSString_(NSString *var) {
  OrgGeogebraCommonKernelGeosLabelManager_initialize();
  if ([((NSString *) nil_chk(var)) charAtWithInt:0] == OrgGeogebraCommonKernelGeosGeoCasCell_ROW_REFERENCE_DYNAMIC) {
    jboolean validVar = NO;
    for (jint i = 1; i < ((jint) [var length]); i++) {
      if (!JavaLangCharacter_isDigitWithChar_([var charAtWithInt:i])) {
        if (i == 1 && [var charAtWithInt:1] == OrgGeogebraCommonKernelGeosGeoCasCell_ROW_REFERENCE_DYNAMIC) {
        }
        else if (i == ((jint) [var length]) - 1 && [var charAtWithInt:((jint) [var length]) - 1] == OrgGeogebraCommonKernelGeosGeoCasCell_ROW_REFERENCE_DYNAMIC) {
        }
        else {
          validVar = YES;
          break;
        }
      }
    }
    return validVar;
  }
  return YES;
}

void OrgGeogebraCommonKernelGeosLabelManager_init(OrgGeogebraCommonKernelGeosLabelManager *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelGeosLabelManager *new_OrgGeogebraCommonKernelGeosLabelManager_init() {
  OrgGeogebraCommonKernelGeosLabelManager *self = [OrgGeogebraCommonKernelGeosLabelManager alloc];
  OrgGeogebraCommonKernelGeosLabelManager_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosLabelManager)
