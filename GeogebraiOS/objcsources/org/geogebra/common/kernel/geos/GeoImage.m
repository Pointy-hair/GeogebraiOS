//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/geos/GeoImage.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Vector.h"
#include "org/geogebra/common/awt/GBufferedImage.h"
#include "org/geogebra/common/awt/MyImage.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/LocateableList.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoElementGraphicsAdapter.h"
#include "org/geogebra/common/kernel/geos/GeoImage.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonKernelGeosGeoImage () {
 @public
  IOSObjectArray *corners_;
  jboolean inBackground_, defined_;
  jboolean hasAbsoluteLocation__;
  jboolean interpolate_;
  jint screenX_, screenY_;
  jboolean hasAbsoluteScreenLocation_;
  IOSObjectArray *tempPoints_;
  IOSDoubleArray *tempCoords_;
  JavaUtilArrayList *al_;
}

- (void)initTempPoints OBJC_METHOD_FAMILY_NONE;

- (void)updateHasAbsoluteLocation;

- (NSString *)getXMLabsScreenLoc;

- (NSString *)getCornerPointXMLWithInt:(jint)number;

- (void)getInternalCornerPointCoordsWithDoubleArray:(IOSDoubleArray *)coords
                                            withInt:(jint)n;

- (jboolean)initTransformPoints OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoImage, corners_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoImage, tempPoints_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoImage, tempCoords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoImage, al_, JavaUtilArrayList *)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoImage_initTempPoints(OrgGeogebraCommonKernelGeosGeoImage *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoImage_updateHasAbsoluteLocation(OrgGeogebraCommonKernelGeosGeoImage *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoImage_hasAbsoluteLocation(OrgGeogebraCommonKernelGeosGeoImage *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoImage_isInterpolate(OrgGeogebraCommonKernelGeosGeoImage *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoImage_isDefined(OrgGeogebraCommonKernelGeosGeoImage *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoImage_getXMLabsScreenLoc(OrgGeogebraCommonKernelGeosGeoImage *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoImage_getCornerPointXMLWithInt_(OrgGeogebraCommonKernelGeosGeoImage *self, jint number);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoImage_getInternalCornerPointCoordsWithDoubleArray_withInt_(OrgGeogebraCommonKernelGeosGeoImage *self, IOSDoubleArray *coords, jint n);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoImage_initTransformPoints(OrgGeogebraCommonKernelGeosGeoImage *self);

@implementation OrgGeogebraCommonKernelGeosGeoImage

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
                                               withNSString:(NSString *)fileName {
  OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelConstruction_withNSString_withNSString_(self, c, label, fileName);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoImage:(OrgGeogebraCommonKernelGeosGeoImage *)img {
  OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelGeosGeoImage_(self, img);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelGeosGeoImage_(self) autorelease];
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_IMAGE;
}

- (void)initTempPoints {
  OrgGeogebraCommonKernelGeosGeoImage_initTempPoints(self);
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelGeosGeoImage *img = (OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoImage class]);
  [self setImageFileNameWithNSString:[((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(img)) getGraphicsAdapter])) getImageFileName]];
  if (cons_ != ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->cons_ && [self isAlgoMacroOutput]) return;
  hasAbsoluteScreenLocation_ = img->hasAbsoluteScreenLocation_;
  if (hasAbsoluteScreenLocation_) {
    screenX_ = img->screenX_;
    screenY_ = img->screenY_;
  }
  else {
    hasAbsoluteLocation__ = YES;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(corners_))->size_; i++) {
      if (IOSObjectArray_Get(img->corners_, i) == nil) {
        IOSObjectArray_Set(corners_, i, nil);
      }
      else {
        OrgGeogebraCommonKernelGeosGeoImage_initTempPoints(self);
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(tempPoints_), i))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(img->corners_, i)];
        IOSObjectArray_Set(corners_, i, IOSObjectArray_Get(tempPoints_, i));
      }
    }
  }
  interpolate_ = img->interpolate_;
  defined_ = img->defined_;
}

- (void)setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [super setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoImage]) {
    inBackground_ = ((OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoImage class]))->inBackground_;
  }
}

+ (void)updateInstancesWithOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)kernel {
  OrgGeogebraCommonKernelGeosGeoImage_updateInstancesWithOrgGeogebraCommonMainApp_(kernel);
}

- (jboolean)showToolTipText {
  return !inBackground_ && [super showToolTipText];
}

- (jboolean)isInBackground {
  return inBackground_;
}

- (void)setInBackgroundWithBoolean:(jboolean)flag {
  inBackground_ = flag;
}

- (void)setImageFileNameWithNSString:(NSString *)fileName
                             withInt:(jint)width
                             withInt:(jint)height {
  if (fileName == nil) return;
  if ([((NSString *) nil_chk(fileName)) isEqual:[((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([self getGraphicsAdapter])) getImageFileName]]) return;
  [((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([self getGraphicsAdapter])) setImageFileNameOnlyWithNSString:fileName];
  [((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([self getGraphicsAdapter])) setImageOnlyWithOrgGeogebraCommonAwtMyImage:[((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getExternalImageAdapterWithNSString:fileName withInt:width withInt:height]];
  if ([((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([self getGraphicsAdapter])) getImageOnly] != nil) {
    pixelWidth_ = [((id<OrgGeogebraCommonAwtMyImage>) nil_chk([((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([self getGraphicsAdapter])) getImageOnly])) getWidth];
    pixelHeight_ = [((id<OrgGeogebraCommonAwtMyImage>) nil_chk([((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([self getGraphicsAdapter])) getImageOnly])) getHeight];
  }
  else {
    pixelWidth_ = 0;
    pixelHeight_ = 0;
  }
}

- (void)setImageFileNameWithNSString:(NSString *)fileName {
  [self setImageFileNameWithNSString:fileName withInt:0 withInt:0];
}

- (void)setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  [self setCornerWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoPoint class]) withInt:0];
}

- (void)removeStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(corners_))->size_; i++) {
    if (IOSObjectArray_Get(corners_, i) == p) [self setCornerWithOrgGeogebraCommonKernelGeosGeoPoint:nil withInt:i];
  }
}

- (void)setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p
                                                           withInt:(jint)number {
  [self setCornerWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoPoint class]) withInt:number];
}

- (void)initStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p
                                                            withInt:(jint)number {
  IOSObjectArray_Set(nil_chk(corners_), number, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoPoint class]));
}

- (void)setCornerWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p
                                                 withInt:(jint)number {
  if ([self isAlgoMacroOutput]) return;
  if (IOSObjectArray_Get(nil_chk(corners_), 0) == nil && number > 0) return;
  if ([self isParentOfWithOrgGeogebraCommonKernelKernelNDGeoElementND:p]) return;
  if (p == nil) {
    if (IOSObjectArray_Get(corners_, number) != nil) [((OrgGeogebraCommonKernelLocateableList *) nil_chk([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(corners_, number))) getLocateableList])) unregisterLocateableWithOrgGeogebraCommonKernelLocateable:self];
    if (number == 0 && IOSObjectArray_Get(corners_, 0) != nil) {
      OrgGeogebraCommonKernelGeosGeoPoint *temp = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
      [temp setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(corners_, 0)];
      IOSObjectArray_Set(corners_, 0, temp);
    }
    else IOSObjectArray_Set(corners_, number, nil);
  }
  else {
    for (jint i = 0; i < corners_->size_; i++) {
      if (p == IOSObjectArray_Get(corners_, i)) return;
    }
    if (IOSObjectArray_Get(corners_, number) != nil) [((OrgGeogebraCommonKernelLocateableList *) nil_chk([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(corners_, number))) getLocateableList])) unregisterLocateableWithOrgGeogebraCommonKernelLocateable:self];
    IOSObjectArray_Set(corners_, number, p);
    [((OrgGeogebraCommonKernelLocateableList *) nil_chk([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(corners_, number))) getLocateableList])) registerLocateableWithOrgGeogebraCommonKernelLocateable:self];
  }
  [self setAbsoluteScreenLocActiveWithBoolean:NO];
  OrgGeogebraCommonKernelGeosGeoImage_updateHasAbsoluteLocation(self);
}

- (void)updateHasAbsoluteLocation {
  OrgGeogebraCommonKernelGeosGeoImage_updateHasAbsoluteLocation(self);
}

- (void)doRemove {
  [((JavaUtilVector *) nil_chk(((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication]))->images_)) removeWithId:self];
  if (inBackground_) {
    inBackground_ = NO;
    [self notifyUpdate];
  }
  [super doRemove];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(corners_))->size_; i++) {
    if (IOSObjectArray_Get(corners_, i) != nil) [((OrgGeogebraCommonKernelLocateableList *) nil_chk([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(corners_, i))) getLocateableList])) unregisterLocateableWithOrgGeogebraCommonKernelLocateable:self];
  }
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getStartPoint {
  return IOSObjectArray_Get(nil_chk(corners_), 0);
}

- (IOSObjectArray *)getStartPoints {
  return corners_;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getCornerWithInt:(jint)number {
  return IOSObjectArray_Get(nil_chk(corners_), number);
}

- (jboolean)hasAbsoluteLocation {
  return OrgGeogebraCommonKernelGeosGeoImage_hasAbsoluteLocation(self);
}

- (jboolean)isInterpolate {
  return OrgGeogebraCommonKernelGeosGeoImage_isInterpolate(self);
}

- (void)setInterpolateWithBoolean:(jboolean)flag {
  interpolate_ = flag;
}

- (void)setWaitForStartPoint {
}

- (jboolean)isDefined {
  return OrgGeogebraCommonKernelGeosGeoImage_isDefined(self);
}

- (void)setUndefined {
  defined_ = NO;
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return label_ == nil ? [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Image"] : label_;
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return [((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([self getGraphicsAdapter])) getImageOnly] != nil && OrgGeogebraCommonKernelGeosGeoImage_isDefined(self);
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_IMAGE();
}

- (jboolean)isMoveable {
  return (hasAbsoluteScreenLocation_ || hasAbsoluteLocation__) && [self isChangeable];
}

- (jboolean)isRotateMoveable {
  return !hasAbsoluteScreenLocation_ && hasAbsoluteLocation__ && [self isChangeable];
}

- (jboolean)isFillable {
  return YES;
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)isGeoImage {
  return YES;
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<file name=\""];
  [sb appendWithNSString:OrgGeogebraCommonUtilStringUtil_encodeXMLWithNSString_([((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([self getGraphicsAdapter])) getImageFileName])];
  [sb appendWithNSString:@"\"/>\n"];
  [sb appendWithNSString:@"\t<inBackground val=\""];
  [sb appendWithBoolean:inBackground_];
  [sb appendWithNSString:@"\"/>\n"];
  if (!OrgGeogebraCommonKernelGeosGeoImage_isInterpolate(self)) [sb appendWithNSString:@"\t<interpolate val=\"false\"/>\n"];
  if (hasAbsoluteScreenLocation_) {
    [sb appendWithNSString:OrgGeogebraCommonKernelGeosGeoImage_getXMLabsScreenLoc(self)];
  }
  else {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(corners_))->size_; i++) {
      if (IOSObjectArray_Get(corners_, i) != nil) {
        [sb appendWithNSString:OrgGeogebraCommonKernelGeosGeoImage_getCornerPointXMLWithInt_(self, i)];
      }
    }
  }
  [self getAuxiliaryXMLWithJavaLangStringBuilder:sb];
  [super getXMLtagsWithJavaLangStringBuilder:sb];
}

- (NSString *)getXMLabsScreenLoc {
  return OrgGeogebraCommonKernelGeosGeoImage_getXMLabsScreenLoc(self);
}

- (NSString *)getCornerPointXMLWithInt:(jint)number {
  return OrgGeogebraCommonKernelGeosGeoImage_getCornerPointXMLWithInt_(self, number);
}

- (void)setAbsoluteScreenLocWithInt:(jint)x
                            withInt:(jint)y {
  screenX_ = x;
  screenY_ = y;
}

- (jint)getAbsoluteScreenLocX {
  return screenX_;
}

- (jint)getAbsoluteScreenLocY {
  return screenY_;
}

- (void)setRealWorldLocWithDouble:(jdouble)x
                       withDouble:(jdouble)y {
  OrgGeogebraCommonKernelGeosGeoPoint *locPoint = [self getStartPoint];
  if (locPoint == nil) {
    locPoint = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
    [self setCornerWithOrgGeogebraCommonKernelGeosGeoPoint:locPoint withInt:0];
  }
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(locPoint)) setCoordsWithDouble:x withDouble:y withDouble:1.0];
}

- (jdouble)getRealWorldLocX {
  if (IOSObjectArray_Get(nil_chk(corners_), 0) == nil) {
    return 0;
  }
  return ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(corners_, 0)))->inhomX_;
}

- (jdouble)getRealWorldLocY {
  if (IOSObjectArray_Get(nil_chk(corners_), 0) == nil) {
    return 0;
  }
  return ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(corners_, 0)))->inhomY_;
}

- (void)setAbsoluteScreenLocActiveWithBoolean:(jboolean)flag {
  hasAbsoluteScreenLocation_ = flag;
  if (flag) {
    for (jint i = 0; i < 3; i++) {
      if (IOSObjectArray_Get(nil_chk(corners_), i) != nil) {
        [((OrgGeogebraCommonKernelLocateableList *) nil_chk([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(corners_, i))) getLocateableList])) unregisterLocateableWithOrgGeogebraCommonKernelLocateable:self];
      }
    }
    IOSObjectArray_Set(nil_chk(corners_), 1, nil);
    IOSObjectArray_Set(corners_, 2, nil);
  }
}

- (jboolean)isAbsoluteScreenLocActive {
  return hasAbsoluteScreenLocation_;
}

- (jboolean)isAbsoluteScreenLocateable {
  return [self isIndependent];
}

- (void)calculateCornerPointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)result
                                                            withInt:(jint)n {
  if (hasAbsoluteScreenLocation_) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setUndefined];
    return;
  }
  if (IOSObjectArray_Get(nil_chk(corners_), 0) == nil) OrgGeogebraCommonKernelGeosGeoImage_initTempPoints(self);
  {
    IOSDoubleArray *b;
    IOSDoubleArray *d;
    switch (n) {
      case 1:
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(corners_, 0)];
      break;
      case 2:
      OrgGeogebraCommonKernelGeosGeoImage_getInternalCornerPointCoordsWithDoubleArray_withInt_(self, tempCoords_, 1);
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setCoordsWithDouble:IOSDoubleArray_Get(nil_chk(tempCoords_), 0) withDouble:IOSDoubleArray_Get(tempCoords_, 1) withDouble:1.0];
      break;
      case 3:
      b = [IOSDoubleArray arrayWithLength:2];
      d = [IOSDoubleArray arrayWithLength:2];
      OrgGeogebraCommonKernelGeosGeoImage_getInternalCornerPointCoordsWithDoubleArray_withInt_(self, b, 1);
      OrgGeogebraCommonKernelGeosGeoImage_getInternalCornerPointCoordsWithDoubleArray_withInt_(self, d, 2);
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setCoordsWithDouble:IOSDoubleArray_Get(d, 0) + IOSDoubleArray_Get(b, 0) - ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(corners_, 0)))->inhomX_ withDouble:IOSDoubleArray_Get(d, 1) + IOSDoubleArray_Get(b, 1) - ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(corners_, 0)))->inhomY_ withDouble:1.0];
      break;
      case 4:
      OrgGeogebraCommonKernelGeosGeoImage_getInternalCornerPointCoordsWithDoubleArray_withInt_(self, tempCoords_, 2);
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setCoordsWithDouble:IOSDoubleArray_Get(nil_chk(tempCoords_), 0) withDouble:IOSDoubleArray_Get(tempCoords_, 1) withDouble:1.0];
      break;
      default:
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setUndefined];
    }
  }
}

- (void)getInternalCornerPointCoordsWithDoubleArray:(IOSDoubleArray *)coords
                                            withInt:(jint)n {
  OrgGeogebraCommonKernelGeosGeoImage_getInternalCornerPointCoordsWithDoubleArray_withInt_(self, coords, n);
}

- (jboolean)initTransformPoints {
  return OrgGeogebraCommonKernelGeosGeoImage_initTransformPoints(self);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiValue {
  if (!OrgGeogebraCommonKernelGeosGeoImage_initTransformPoints(self)) return;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(corners_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(tempPoints_), i))) rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:phiValue];
    IOSObjectArray_Set(corners_, i, IOSObjectArray_Get(tempPoints_, i));
  }
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiValue
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)Q {
  if (!OrgGeogebraCommonKernelGeosGeoImage_initTransformPoints(self)) return;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(corners_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(tempPoints_), i))) rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:phiValue withOrgGeogebraCommonKernelKernelNDGeoPointND:Q];
    IOSObjectArray_Set(corners_, i, IOSObjectArray_Get(tempPoints_, i));
  }
}

- (void)mirrorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)Q {
  if (!OrgGeogebraCommonKernelGeosGeoImage_initTransformPoints(self)) return;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(corners_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(tempPoints_), i))) mirrorWithOrgGeogebraCommonKernelMatrixCoords:Q];
    IOSObjectArray_Set(corners_, i, IOSObjectArray_Get(tempPoints_, i));
  }
}

- (void)matrixTransformWithDouble:(jdouble)a
                       withDouble:(jdouble)b
                       withDouble:(jdouble)c
                       withDouble:(jdouble)d {
  if (!OrgGeogebraCommonKernelGeosGeoImage_initTransformPoints(self)) return;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(corners_))->size_; i++) {
    OrgGeogebraCommonKernelGeosGeoVec2D *vec = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(tempPoints_), i))) getVector];
    [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(vec)) matrixTransformWithDouble:a withDouble:b withDouble:c withDouble:d];
    if (IOSObjectArray_Get(corners_, i) == nil) IOSObjectArray_SetAndConsume(corners_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_));
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(corners_, i))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec2D:vec];
  }
}

- (jboolean)isMatrixTransformable {
  return YES;
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g {
  if (!OrgGeogebraCommonKernelGeosGeoImage_initTransformPoints(self)) return;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(corners_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(tempPoints_), i))) mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:g];
    IOSObjectArray_Set(corners_, i, IOSObjectArray_Get(tempPoints_, i));
  }
}

- (void)translateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  if (!OrgGeogebraCommonKernelGeosGeoImage_initTransformPoints(self)) return;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(corners_))->size_; i++) {
    if (IOSObjectArray_Get(corners_, i) != nil) {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(tempPoints_), i))) translateWithOrgGeogebraCommonKernelMatrixCoords:v];
      IOSObjectArray_Set(corners_, i, IOSObjectArray_Get(tempPoints_, i));
    }
  }
}

- (jboolean)isTranslateable {
  return YES;
}

- (void)dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)S {
  if (!OrgGeogebraCommonKernelGeosGeoImage_initTransformPoints(self)) return;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(corners_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(tempPoints_), i))) dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:r withOrgGeogebraCommonKernelMatrixCoords:S];
    IOSObjectArray_Set(corners_, i, IOSObjectArray_Get(tempPoints_, i));
  }
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoImage]) return NO;
  if (((OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoImage class]))->pixelWidth_ != self->pixelWidth_) return NO;
  if (((OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoImage class]))->pixelHeight_ != self->pixelHeight_) return NO;
  NSString *imageFileName = [((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([self getGraphicsAdapter])) getImageFileName];
  NSString *md5A = [((NSString *) nil_chk(imageFileName)) substring:0 endIndex:[((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getMD5folderLengthWithNSString:imageFileName]];
  NSString *imageFileName2 = [((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([((OrgGeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoImage class])) getGraphicsAdapter])) getImageFileName];
  NSString *md5B = [((NSString *) nil_chk(imageFileName2)) substring:0 endIndex:[((OrgGeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) getMD5folderLengthWithNSString:imageFileName]];
  if ([((NSString *) nil_chk(md5A)) isEqual:md5B]) return YES;
  return NO;
}

- (jboolean)isAlwaysFixed {
  return NO;
}

- (jboolean)hasMoveableInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  if (OrgGeogebraCommonKernelGeosGeoImage_hasAbsoluteLocation(self)) return NO;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(corners_))->size_; i++) {
    if (IOSObjectArray_Get(corners_, i) != nil && ![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(corners_, i))) isMoveableWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view]) return NO;
  }
  return YES;
}

- (JavaUtilArrayList *)getFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  if (OrgGeogebraCommonKernelGeosGeoImage_hasAbsoluteLocation(self)) return nil;
  if (al_ == nil) OrgGeogebraCommonKernelGeosGeoImage_setAndConsume_al_(self, new_JavaUtilArrayList_init());
  else [al_ clear];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(corners_))->size_; i++) {
    if (IOSObjectArray_Get(corners_, i) != nil) [((JavaUtilArrayList *) nil_chk(al_)) addWithId:IOSObjectArray_Get(corners_, i)];
  }
  return al_;
}

- (jboolean)isAuxiliaryObjectByDefault {
  return YES;
}

- (jboolean)isAlgebraViewEditable {
  return NO;
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  OrgGeogebraCommonKernelGeosGeoImage_initTempPoints(self);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(corners_))->size_; i++) {
    OrgGeogebraCommonKernelGeosGeoVec2D *vec = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(tempPoints_), i))) getVector];
    [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(vec)) matrixTransformWithDouble:a00 withDouble:a01 withDouble:a02 withDouble:a10 withDouble:a11 withDouble:a12 withDouble:a20 withDouble:a21 withDouble:a22];
    if (IOSObjectArray_Get(corners_, i) == nil) IOSObjectArray_SetAndConsume(corners_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_));
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(corners_, i))) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec2D:vec];
  }
}

- (void)clearFillImage {
  [((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([self getGraphicsAdapter])) setImageOnlyWithOrgGeogebraCommonAwtMyImage:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newMyImageWithInt:pixelWidth_ withInt:pixelHeight_ withInt:OrgGeogebraCommonAwtGBufferedImage_TYPE_INT_ARGB]];
  [self updateRepaint];
}

- (jboolean)isPinnable {
  return YES;
}

- (void)updateLocation {
  [self updateGeo];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateLocationWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (void)dealloc {
  RELEASE_(corners_);
  RELEASE_(tempPoints_);
  RELEASE_(tempCoords_);
  RELEASE_(al_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoImage", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withNSString:", "GeoImage", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoImage:", "GeoImage", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "initTempPoints", NULL, "V", 0x2, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:", "setVisualStyle", "V", 0x1, NULL, NULL },
    { "updateInstancesWithOrgGeogebraCommonMainApp:", "updateInstances", "V", 0x9, NULL, NULL },
    { "showToolTipText", NULL, "Z", 0x1, NULL, NULL },
    { "isInBackground", NULL, "Z", 0x11, NULL, NULL },
    { "setInBackgroundWithBoolean:", "setInBackground", "V", 0x1, NULL, NULL },
    { "setImageFileNameWithNSString:withInt:withInt:", "setImageFileName", "V", 0x1, NULL, NULL },
    { "setImageFileNameWithNSString:", "setImageFileName", "V", 0x1, NULL, NULL },
    { "setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "setStartPoint", "V", 0x1, "Lorg.geogebra.common.kernel.CircularDefinitionException;", NULL },
    { "removeStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "removeStartPoint", "V", 0x1, NULL, NULL },
    { "setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "setStartPoint", "V", 0x1, "Lorg.geogebra.common.kernel.CircularDefinitionException;", NULL },
    { "initStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "initStartPoint", "V", 0x1, NULL, NULL },
    { "setCornerWithOrgGeogebraCommonKernelGeosGeoPoint:withInt:", "setCorner", "V", 0x1, NULL, NULL },
    { "updateHasAbsoluteLocation", NULL, "V", 0x2, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "getStartPoint", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getStartPoints", NULL, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getCornerWithInt:", "getCorner", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "hasAbsoluteLocation", NULL, "Z", 0x11, NULL, NULL },
    { "isInterpolate", NULL, "Z", 0x11, NULL, NULL },
    { "setInterpolateWithBoolean:", "setInterpolate", "V", 0x11, NULL, NULL },
    { "setWaitForStartPoint", NULL, "V", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x11, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "isMoveable", NULL, "Z", 0x11, NULL, NULL },
    { "isRotateMoveable", NULL, "Z", 0x11, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoImage", NULL, "Z", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getXMLabsScreenLoc", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getCornerPointXMLWithInt:", "getCornerPointXML", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "setAbsoluteScreenLocWithInt:withInt:", "setAbsoluteScreenLoc", "V", 0x1, NULL, NULL },
    { "getAbsoluteScreenLocX", NULL, "I", 0x1, NULL, NULL },
    { "getAbsoluteScreenLocY", NULL, "I", 0x1, NULL, NULL },
    { "setRealWorldLocWithDouble:withDouble:", "setRealWorldLoc", "V", 0x1, NULL, NULL },
    { "getRealWorldLocX", NULL, "D", 0x1, NULL, NULL },
    { "getRealWorldLocY", NULL, "D", 0x1, NULL, NULL },
    { "setAbsoluteScreenLocActiveWithBoolean:", "setAbsoluteScreenLocActive", "V", 0x1, NULL, NULL },
    { "isAbsoluteScreenLocActive", NULL, "Z", 0x1, NULL, NULL },
    { "isAbsoluteScreenLocateable", NULL, "Z", 0x1, NULL, NULL },
    { "calculateCornerPointWithOrgGeogebraCommonKernelGeosGeoPoint:withInt:", "calculateCornerPoint", "V", 0x1, NULL, NULL },
    { "getInternalCornerPointCoordsWithDoubleArray:withInt:", "getInternalCornerPointCoords", "V", 0x2, NULL, NULL },
    { "initTransformPoints", NULL, "Z", 0x2, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x11, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "isMatrixTransformable", NULL, "Z", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "translateWithOrgGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x11, NULL, NULL },
    { "dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x11, NULL, NULL },
    { "isAlwaysFixed", NULL, "Z", 0x1, NULL, NULL },
    { "hasMoveableInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "hasMoveableInputPoints", "Z", 0x1, NULL, NULL },
    { "getFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "getFreeInputPoints", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "isAuxiliaryObjectByDefault", NULL, "Z", 0x11, NULL, NULL },
    { "isAlgebraViewEditable", NULL, "Z", 0x11, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "clearFillImage", NULL, "V", 0x1, NULL, NULL },
    { "isPinnable", NULL, "Z", 0x1, NULL, NULL },
    { "updateLocation", NULL, "V", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "corners_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "pixelWidth_", NULL, 0x4, "I", NULL, NULL,  },
    { "pixelHeight_", NULL, 0x4, "I", NULL, NULL,  },
    { "inBackground_", NULL, 0x2, "Z", NULL, NULL,  },
    { "defined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hasAbsoluteLocation__", "hasAbsoluteLocation", 0x2, "Z", NULL, NULL,  },
    { "interpolate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "screenX_", NULL, 0x2, "I", NULL, NULL,  },
    { "screenY_", NULL, 0x2, "I", NULL, NULL,  },
    { "hasAbsoluteScreenLocation_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tempPoints_", NULL, 0x2, "[Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "tempCoords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "al_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoImage = { 2, "GeoImage", "org.geogebra.common.kernel.geos", NULL, 0x1, 75, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoImage;
}

@end

void OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoImage *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->interpolate_ = YES;
  self->hasAbsoluteScreenLocation_ = NO;
  OrgGeogebraCommonKernelGeosGeoImage_setAndConsume_tempCoords_(self, [IOSDoubleArray newArrayWithLength:2]);
  OrgGeogebraCommonKernelGeosGeoImage_set_al_(self, nil);
  [self setConstructionDefaults];
  [self setAlphaValueWithFloat:1.0f];
  [self setAuxiliaryObjectWithBoolean:YES];
  OrgGeogebraCommonKernelGeosGeoImage_setAndConsume_corners_(self, [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()]);
  [((JavaUtilVector *) nil_chk(((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication]))->images_)) addWithId:self];
  self->defined_ = YES;
}

OrgGeogebraCommonKernelGeosGeoImage *new_OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoImage *self = [OrgGeogebraCommonKernelGeosGeoImage alloc];
  OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelConstruction_withNSString_withNSString_(OrgGeogebraCommonKernelGeosGeoImage *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, NSString *fileName) {
  OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  [self setImageFileNameWithNSString:fileName];
  [self setLabelWithNSString:label];
}

OrgGeogebraCommonKernelGeosGeoImage *new_OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelConstruction_withNSString_withNSString_(OrgGeogebraCommonKernelConstruction *c, NSString *label, NSString *fileName) {
  OrgGeogebraCommonKernelGeosGeoImage *self = [OrgGeogebraCommonKernelGeosGeoImage alloc];
  OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelConstruction_withNSString_withNSString_(self, c, label, fileName);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelGeosGeoImage_(OrgGeogebraCommonKernelGeosGeoImage *self, OrgGeogebraCommonKernelGeosGeoImage *img) {
  OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelConstruction_(self, ((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(img))->cons_);
  [self setWithOrgGeogebraCommonKernelGeosGeoElement:img];
}

OrgGeogebraCommonKernelGeosGeoImage *new_OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelGeosGeoImage_(OrgGeogebraCommonKernelGeosGeoImage *img) {
  OrgGeogebraCommonKernelGeosGeoImage *self = [OrgGeogebraCommonKernelGeosGeoImage alloc];
  OrgGeogebraCommonKernelGeosGeoImage_initWithOrgGeogebraCommonKernelGeosGeoImage_(self, img);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoImage_initTempPoints(OrgGeogebraCommonKernelGeosGeoImage *self) {
  if (self->tempPoints_ == nil) {
    OrgGeogebraCommonKernelGeosGeoImage_setAndConsume_tempPoints_(self, [IOSObjectArray newArrayWithLength:3 type:OrgGeogebraCommonKernelGeosGeoPoint_class_()]);
    for (jint i = 0; i < self->tempPoints_->size_; i++) {
      IOSObjectArray_SetAndConsume(self->tempPoints_, i, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
    }
  }
  if (IOSObjectArray_Get(nil_chk(self->corners_), 0) == nil) IOSObjectArray_Set(self->corners_, 0, IOSObjectArray_Get(nil_chk(self->tempPoints_), 0));
}

void OrgGeogebraCommonKernelGeosGeoImage_updateInstancesWithOrgGeogebraCommonMainApp_(OrgGeogebraCommonMainApp *kernel) {
  OrgGeogebraCommonKernelGeosGeoImage_initialize();
  for (jint i = [((JavaUtilVector *) nil_chk(((OrgGeogebraCommonMainApp *) nil_chk(kernel))->images_)) size] - 1; i >= 0; i--) {
    OrgGeogebraCommonKernelGeosGeoImage *geo = [kernel->images_ getWithInt:i];
    [geo setImageFileNameWithNSString:[((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([((OrgGeogebraCommonKernelGeosGeoImage *) nil_chk(geo)) getGraphicsAdapter])) getImageFileName]];
    [geo updateCascade];
  }
}

void OrgGeogebraCommonKernelGeosGeoImage_updateHasAbsoluteLocation(OrgGeogebraCommonKernelGeosGeoImage *self) {
  self->hasAbsoluteLocation__ = YES;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->corners_))->size_; i++) {
    if (!(IOSObjectArray_Get(self->corners_, i) == nil || [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->corners_, i))) isAbsoluteStartPoint])) {
      self->hasAbsoluteLocation__ = NO;
      return;
    }
  }
}

jboolean OrgGeogebraCommonKernelGeosGeoImage_hasAbsoluteLocation(OrgGeogebraCommonKernelGeosGeoImage *self) {
  return self->hasAbsoluteLocation__;
}

jboolean OrgGeogebraCommonKernelGeosGeoImage_isInterpolate(OrgGeogebraCommonKernelGeosGeoImage *self) {
  return self->interpolate_;
}

jboolean OrgGeogebraCommonKernelGeosGeoImage_isDefined(OrgGeogebraCommonKernelGeosGeoImage *self) {
  if (!self->defined_) return NO;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->corners_))->size_; i++) {
    if (IOSObjectArray_Get(self->corners_, i) != nil && ![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->corners_, i))) isDefined]) return NO;
  }
  return YES;
}

NSString *OrgGeogebraCommonKernelGeosGeoImage_getXMLabsScreenLoc(OrgGeogebraCommonKernelGeosGeoImage *self) {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"\t<absoluteScreenLocation x=\""];
  [sb appendWithInt:self->screenX_];
  [sb appendWithNSString:@"\" y=\""];
  [sb appendWithInt:self->screenY_];
  [sb appendWithNSString:@"\"/>"];
  return [sb description];
}

NSString *OrgGeogebraCommonKernelGeosGeoImage_getCornerPointXMLWithInt_(OrgGeogebraCommonKernelGeosGeoImage *self, jint number) {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"\t<startPoint number=\""];
  [sb appendWithInt:number];
  [sb appendWithNSString:@"\""];
  if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->corners_), number))) isAbsoluteStartPoint]) {
    [sb appendWithNSString:JreStrcat("$DC", @" x=\"", ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->corners_, number)))->x_, '"')];
    [sb appendWithNSString:JreStrcat("$DC", @" y=\"", ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->corners_, number)))->y_, '"')];
    [sb appendWithNSString:JreStrcat("$DC", @" z=\"", ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->corners_, number)))->z_, '"')];
  }
  else {
    [sb appendWithNSString:@" exp=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->corners_, number))) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_()]);
    [sb appendWithNSString:@"\""];
  }
  [sb appendWithNSString:@"/>\n"];
  return [sb description];
}

void OrgGeogebraCommonKernelGeosGeoImage_getInternalCornerPointCoordsWithDoubleArray_withInt_(OrgGeogebraCommonKernelGeosGeoImage *self, IOSDoubleArray *coords, jint n) {
  OrgGeogebraCommonKernelGeosGeoPoint *A = IOSObjectArray_Get(nil_chk(self->corners_), 0);
  OrgGeogebraCommonKernelGeosGeoPoint *B = IOSObjectArray_Get(self->corners_, 1);
  OrgGeogebraCommonKernelGeosGeoPoint *D = IOSObjectArray_Get(self->corners_, 2);
  jdouble xscale = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getXscale];
  jdouble yscale = [self->kernel_ getYscale];
  jdouble width = self->pixelWidth_;
  jdouble height = self->pixelHeight_;
  if (xscale != yscale) {
    height = height * yscale / xscale;
  }
  switch (n) {
    case 0:
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(A))->inhomX_;
    *IOSDoubleArray_GetRef(coords, 1) = A->inhomY_;
    break;
    case 1:
    if (B != nil) {
      *IOSDoubleArray_GetRef(nil_chk(coords), 0) = B->inhomX_;
      *IOSDoubleArray_GetRef(coords, 1) = B->inhomY_;
    }
    else {
      if (D == nil) {
        *IOSDoubleArray_GetRef(nil_chk(coords), 0) = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(A))->inhomX_ + width / xscale;
        *IOSDoubleArray_GetRef(coords, 1) = A->inhomY_;
      }
      else {
        jdouble nx = D->inhomY_ - ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(A))->inhomY_;
        jdouble ny = A->inhomX_ - D->inhomX_;
        jdouble factor = width / height;
        *IOSDoubleArray_GetRef(nil_chk(coords), 0) = A->inhomX_ + factor * nx;
        *IOSDoubleArray_GetRef(coords, 1) = A->inhomY_ + factor * ny;
      }
    }
    break;
    case 2:
    if (D != nil) {
      *IOSDoubleArray_GetRef(nil_chk(coords), 0) = D->inhomX_;
      *IOSDoubleArray_GetRef(coords, 1) = D->inhomY_;
    }
    else {
      if (B == nil) {
        *IOSDoubleArray_GetRef(nil_chk(coords), 0) = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(A))->inhomX_;
        *IOSDoubleArray_GetRef(coords, 1) = A->inhomY_ + height / yscale;
      }
      else {
        jdouble nx = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(A))->inhomY_ - B->inhomY_;
        jdouble ny = B->inhomX_ - A->inhomX_;
        jdouble factor = height / width;
        *IOSDoubleArray_GetRef(nil_chk(coords), 0) = A->inhomX_ + factor * nx;
        *IOSDoubleArray_GetRef(coords, 1) = A->inhomY_ + factor * ny;
      }
    }
    break;
    default:
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = JavaLangDouble_NaN;
    *IOSDoubleArray_GetRef(coords, 1) = JavaLangDouble_NaN;
  }
}

jboolean OrgGeogebraCommonKernelGeosGeoImage_initTransformPoints(OrgGeogebraCommonKernelGeosGeoImage *self) {
  if (self->hasAbsoluteScreenLocation_ || !self->hasAbsoluteLocation__) return NO;
  OrgGeogebraCommonKernelGeosGeoImage_initTempPoints(self);
  [self calculateCornerPointWithOrgGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(nil_chk(self->tempPoints_), 0) withInt:1];
  [self calculateCornerPointWithOrgGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(self->tempPoints_, 1) withInt:2];
  [self calculateCornerPointWithOrgGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(self->tempPoints_, 2) withInt:4];
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoImage)
