//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/geos/GeoLocusND.java
//


#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/MyPoint.h"
#include "org/geogebra/common/kernel/PathMover.h"
#include "org/geogebra/common/kernel/PathMoverLocus.h"
#include "org/geogebra/common/kernel/PathOrPoint.h"
#include "org/geogebra/common/kernel/PathParameter.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoLocusSliderInterface.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLocusND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/plugin/GeoClass.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgGeogebraCommonKernelGeosGeoLocusND () {
 @public
  jboolean defined_;
  JavaLangStringBuilder *sbToString_;
  jdouble closestPointDist_;
  jboolean trace_;
}

- (void)getClosestLine;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoLocusND, sbToString_, JavaLangStringBuilder *)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoLocusND_getClosestLine(OrgGeogebraCommonKernelGeosGeoLocusND *self);

@implementation OrgGeogebraCommonKernelGeosGeoLocusND

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoLocusND_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  OrgGeogebraCommonKernelGeosGeoLocusND *ret = [self newGeoLocus];
  [((OrgGeogebraCommonKernelGeosGeoLocusND *) nil_chk(ret)) setWithOrgGeogebraCommonKernelGeosGeoElement:self];
  return ret;
}

- (OrgGeogebraCommonKernelGeosGeoLocusND *)newGeoLocus {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelGeosGeoLocusND *locus = (OrgGeogebraCommonKernelGeosGeoLocusND *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoLocusND class]);
  defined_ = ((OrgGeogebraCommonKernelGeosGeoLocusND *) nil_chk(locus))->defined_;
  [((JavaUtilArrayList *) nil_chk(myPointList_)) clear];
  [myPointList_ addAllWithJavaUtilCollection:locus->myPointList_];
}

- (jint)getPointLength {
  return [((JavaUtilArrayList *) nil_chk(myPointList_)) size];
}

- (void)clearPoints {
  [((JavaUtilArrayList *) nil_chk(myPointList_)) clear];
}

- (JavaUtilArrayList *)getPoints {
  return myPointList_;
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  [sbToString_ appendWithNSString:label_];
  [sbToString_ appendWithNSString:@" = "];
  [sbToString_ appendWithNSString:[self getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString_ description];
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_LOCUS();
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [self getLineStyleXMLWithJavaLangStringBuilder:sb];
}

- (jboolean)isDefined {
  return defined_;
}

- (void)setDefinedWithBoolean:(jboolean)flag {
  defined_ = flag;
}

- (void)setUndefined {
  defined_ = NO;
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (jboolean)showInEuclidianView {
  return [self isDefined];
}

- (jboolean)isGeoLocus {
  return YES;
}

- (jdouble)getMaxParameter {
  return [((JavaUtilArrayList *) nil_chk(myPointList_)) size] - 1;
}

- (jdouble)getMinParameter {
  return 0;
}

- (jboolean)isClosedPath {
  if ([((JavaUtilArrayList *) nil_chk(myPointList_)) size] > 0) {
    OrgGeogebraCommonKernelMyPoint *first = [myPointList_ getWithInt:0];
    OrgGeogebraCommonKernelMyPoint *last = [myPointList_ getWithInt:[myPointList_ size] - 1];
    return [((OrgGeogebraCommonKernelMyPoint *) nil_chk(first)) isEqualWithOrgGeogebraCommonKernelMyPoint:last];
  }
  return NO;
}

- (jboolean)isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                                                       withDouble:(jdouble)eps {
  [self setChangingPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
  OrgGeogebraCommonKernelMyPoint *closestPoint = [self getClosestPoint];
  if (closestPoint != nil) {
    return JavaLangMath_sqrtWithDouble_(closestPointDist_) < eps;
  }
  return NO;
}

- (void)setChangingPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jdouble)getChangingPointParameterWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelMyPoint *)getClosestPoint {
  OrgGeogebraCommonKernelGeosGeoLocusND_getClosestLine(self);
  jboolean temp = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> closestSegment = [self newGeoSegment];
  [cons_ setSuppressLabelCreationWithBoolean:temp];
  if (closestPointIndex_ == -1) return nil;
  OrgGeogebraCommonKernelMyPoint *locusPoint = [((JavaUtilArrayList *) nil_chk(myPointList_)) getWithInt:closestPointIndex_];
  OrgGeogebraCommonKernelMyPoint *locusPoint2 = [myPointList_ getWithInt:closestPointIndex_ + 1];
  [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(closestSegment)) setCoordsWithOrgGeogebraCommonKernelMyPoint:locusPoint withOrgGeogebraCommonKernelMyPoint:locusPoint2];
  closestPointParameter_ = [self getChangingPointParameterWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:closestSegment];
  if (closestPointParameter_ < 0) closestPointParameter_ = 0;
  else if (closestPointParameter_ > 1) closestPointParameter_ = 1;
  return [((OrgGeogebraCommonKernelMyPoint *) nil_chk(locusPoint)) barycenterWithDouble:closestPointParameter_ withOrgGeogebraCommonKernelMyPoint:locusPoint2];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)newGeoSegment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)changingPointDistanceWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)getClosestLine {
  OrgGeogebraCommonKernelGeosGeoLocusND_getClosestLine(self);
}

- (void)pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:P]) {
    [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  if ([OrgGeogebraCommonKernelAlgosAlgoLocusSliderInterface_class_() isInstance:[self getParentAlgorithm]]) {
    [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  OrgGeogebraCommonKernelPathParameter *pp = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPathParameter];
  jint n = J2ObjCFpToInt(JavaLangMath_floorWithDouble_(((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_));
  jdouble t = pp->t_ - n;
  if (n >= [((JavaUtilArrayList *) nil_chk(myPointList_)) size] || n < 0) {
    n = (n < 0) ? 0 : [myPointList_ size] - 1;
  }
  OrgGeogebraCommonKernelMyPoint *locusPoint = [myPointList_ getWithInt:n];
  OrgGeogebraCommonKernelMyPoint *locusPoint2 = [myPointList_ getWithInt:(n + 1) % [myPointList_ size]];
  [P setWithDouble:1 - t withDouble:t withOrgGeogebraCommonKernelMyPoint:locusPoint withOrgGeogebraCommonKernelMyPoint:locusPoint2];
}

- (jboolean)isPath {
  return YES;
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return NO;
}

- (jboolean)isLabelValueShowable {
  return YES;
}

- (jboolean)isLabelShowable {
  return YES;
}

- (void)setPointsWithJavaUtilArrayList:(JavaUtilArrayList *)al {
  OrgGeogebraCommonKernelGeosGeoLocusND_set_myPointList_(self, al);
}

- (jboolean)isAuxiliaryObjectByDefault {
  return YES;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (jboolean)getTrace {
  return trace_;
}

- (jboolean)isTraceable {
  return YES;
}

- (jboolean)isFillable {
  return YES;
}

- (jboolean)isInverseFillable {
  return YES;
}

- (id<OrgGeogebraCommonKernelPathMover>)createPathMover {
  return [new_OrgGeogebraCommonKernelPathMoverLocus_initWithOrgGeogebraCommonKernelGeosGeoLocusND_(self) autorelease];
}

- (jboolean)hasDrawable3D {
  return YES;
}

- (void)dealloc {
  RELEASE_(myPointList_);
  RELEASE_(sbToString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoLocusND", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "newGeoLocus", NULL, "Lorg.geogebra.common.kernel.geos.GeoLocusND;", 0x404, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "getPointLength", NULL, "I", 0x11, NULL, NULL },
    { "clearPoints", NULL, "V", 0x1, NULL, NULL },
    { "getPoints", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setDefinedWithBoolean:", "setDefined", "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "isGeoLocus", NULL, "Z", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "setChangingPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "setChangingPoint", "V", 0x404, NULL, NULL },
    { "getChangingPointParameterWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:", "getChangingPointParameter", "D", 0x404, NULL, NULL },
    { "getClosestPoint", NULL, "Lorg.geogebra.common.kernel.MyPoint;", 0x4, NULL, NULL },
    { "newGeoSegment", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoSegmentND;", 0x404, NULL, NULL },
    { "changingPointDistanceWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:", "changingPointDistance", "D", 0x404, NULL, NULL },
    { "getClosestLine", NULL, "V", 0x2, NULL, NULL },
    { "pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x11, NULL, NULL },
    { "isLabelValueShowable", NULL, "Z", 0x11, NULL, NULL },
    { "isLabelShowable", NULL, "Z", 0x11, NULL, NULL },
    { "setPointsWithJavaUtilArrayList:", "setPoints", "V", 0x1, NULL, NULL },
    { "isAuxiliaryObjectByDefault", NULL, "Z", 0x11, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "isInverseFillable", NULL, "Z", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lorg.geogebra.common.kernel.PathMover;", 0x11, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_PATH_RUNS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoLocusND_MAX_PATH_RUNS },
    { "defined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "myPointList_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<TT;>;",  },
    { "sbToString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "closestPointDist_", NULL, 0x2, "D", NULL, NULL,  },
    { "closestPointIndex_", NULL, 0x4, "I", NULL, NULL,  },
    { "closestPointParameter_", NULL, 0x4, "D", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoLocusND = { 2, "GeoLocusND", "org.geogebra.common.kernel.geos", NULL, 0x401, 41, methods, 8, fields, 0, NULL, 0, NULL, NULL, "<T:Lorg/geogebra/common/kernel/MyPoint;>Lorg/geogebra/common/kernel/geos/GeoElement;Lorg/geogebra/common/kernel/Path;Lorg/geogebra/common/kernel/geos/Traceable;" };
  return &_OrgGeogebraCommonKernelGeosGeoLocusND;
}

@end

void OrgGeogebraCommonKernelGeosGeoLocusND_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoLocusND *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  OrgGeogebraCommonKernelGeosGeoLocusND_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(80));
  [self setConstructionDefaults];
  OrgGeogebraCommonKernelGeosGeoLocusND_setAndConsume_myPointList_(self, new_JavaUtilArrayList_initWithInt_(500));
}

void OrgGeogebraCommonKernelGeosGeoLocusND_getClosestLine(OrgGeogebraCommonKernelGeosGeoLocusND *self) {
  jint size = [((JavaUtilArrayList *) nil_chk(self->myPointList_)) size];
  if (size == 0) return;
  self->closestPointDist_ = JavaLangDouble_MAX_VALUE;
  self->closestPointIndex_ = -1;
  id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> segment = [self newGeoSegment];
  for (jint i = 0; i < size - 1; i++) {
    OrgGeogebraCommonKernelMyPoint *locusPoint = [self->myPointList_ getWithInt:i];
    OrgGeogebraCommonKernelMyPoint *locusPoint2 = [self->myPointList_ getWithInt:i + 1];
    if (!((OrgGeogebraCommonKernelMyPoint *) nil_chk(locusPoint2))->lineTo_) continue;
    [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) setCoordsWithOrgGeogebraCommonKernelMyPoint:locusPoint withOrgGeogebraCommonKernelMyPoint:locusPoint2];
    jdouble dist = [self changingPointDistanceWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:segment];
    if (dist < self->closestPointDist_) {
      self->closestPointDist_ = dist;
      self->closestPointIndex_ = i;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoLocusND)
