//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/geos/GeoListForCellRange.java
//


#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoListForCellRange.h"
#include "org/geogebra/common/kernel/statistics/AlgoCellRange.h"

@interface OrgGeogebraCommonKernelGeosGeoListForCellRange () {
 @public
  OrgGeogebraCommonKernelStatisticsAlgoCellRange *algo_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoListForCellRange, algo_, OrgGeogebraCommonKernelStatisticsAlgoCellRange *)

@implementation OrgGeogebraCommonKernelGeosGeoListForCellRange

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
         withOrgGeogebraCommonKernelStatisticsAlgoCellRange:(OrgGeogebraCommonKernelStatisticsAlgoCellRange *)algo {
  OrgGeogebraCommonKernelGeosGeoListForCellRange_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelStatisticsAlgoCellRange_(self, c, algo);
  return self;
}

- (jboolean)addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algorithm {
  jboolean added = [super addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
  [((OrgGeogebraCommonKernelStatisticsAlgoCellRange *) nil_chk(algo_)) addToItemsAlgoUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
  return added;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelStatisticsAlgoCellRange:", "GeoListForCellRange", NULL, 0x1, NULL, NULL },
    { "addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:", "addToUpdateSets", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "algo_", NULL, 0x2, "Lorg.geogebra.common.kernel.statistics.AlgoCellRange;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoListForCellRange = { 2, "GeoListForCellRange", "org.geogebra.common.kernel.geos", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoListForCellRange;
}

@end

void OrgGeogebraCommonKernelGeosGeoListForCellRange_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelStatisticsAlgoCellRange_(OrgGeogebraCommonKernelGeosGeoListForCellRange *self, OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelStatisticsAlgoCellRange *algo) {
  (void) OrgGeogebraCommonKernelGeosGeoList_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->algo_ = algo;
}

OrgGeogebraCommonKernelGeosGeoListForCellRange *new_OrgGeogebraCommonKernelGeosGeoListForCellRange_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelStatisticsAlgoCellRange_(OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelStatisticsAlgoCellRange *algo) {
  OrgGeogebraCommonKernelGeosGeoListForCellRange *self = [OrgGeogebraCommonKernelGeosGeoListForCellRange alloc];
  OrgGeogebraCommonKernelGeosGeoListForCellRange_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelStatisticsAlgoCellRange_(self, c, algo);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoListForCellRange)
