//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/geos/GeoTurtle.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GImage.h"
#include "org/geogebra/common/awt/MyImage.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoElementGraphicsAdapter.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoTurtle.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonKernelGeosGeoTurtle () {
 @public
  jboolean defined_;
  JavaUtilArrayList *turtleImageList_;
  JavaUtilArrayList *cmdList_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> startPoint_;
  jint turtleImageIndex_;
  jint nCompletedCommands_;
  jdouble currentCommandProgress_;
  jdouble speed_;
  jboolean autoUpdate_;
}

- (jboolean)doStepTurtleWithDouble:(jdouble)nSteps;

- (void)doUpdate;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTurtle, turtleImageList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTurtle, cmdList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTurtle, startPoint_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoTurtle_doStepTurtleWithDouble_(OrgGeogebraCommonKernelGeosGeoTurtle *self, jdouble nSteps);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoTurtle_doUpdate(OrgGeogebraCommonKernelGeosGeoTurtle *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface OrgGeogebraCommonKernelGeosGeoTurtle_Command : NSObject
@end

@interface OrgGeogebraCommonKernelGeosGeoTurtle_DrawState : NSObject
@end

@interface OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward () {
 @public
  OrgGeogebraCommonKernelGeosGeoTurtle *this$0_;
  jdouble length_;
  jdouble time_;
  OrgGeogebraCommonKernelGeosGeoPoint *destination_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward, this$0_, OrgGeogebraCommonKernelGeosGeoTurtle *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward, destination_, OrgGeogebraCommonKernelGeosGeoPoint *)

@interface OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords () {
 @public
  OrgGeogebraCommonKernelGeosGeoTurtle *this$0_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords, this$0_, OrgGeogebraCommonKernelGeosGeoTurtle *)

@interface OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPosition () {
 @public
  jdouble time_;
}

@end

@interface OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn () {
 @public
  OrgGeogebraCommonKernelGeosGeoTurtle *this$0_;
  jdouble degAngle_;
  jdouble angle_;
  jdouble time_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn, this$0_, OrgGeogebraCommonKernelGeosGeoTurtle *)

@interface OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor () {
 @public
  OrgGeogebraCommonKernelGeosGeoTurtle *this$0_;
  OrgGeogebraCommonAwtGColor *color_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor, this$0_, OrgGeogebraCommonKernelGeosGeoTurtle *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor, color_, OrgGeogebraCommonAwtGColor *)

@interface OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen () {
 @public
  OrgGeogebraCommonKernelGeosGeoTurtle *this$0_;
  jboolean down_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen, this$0_, OrgGeogebraCommonKernelGeosGeoTurtle *)

@interface OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness () {
 @public
  OrgGeogebraCommonKernelGeosGeoTurtle *this$0_;
  jint thickness_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness, this$0_, OrgGeogebraCommonKernelGeosGeoTurtle *)

@implementation OrgGeogebraCommonKernelGeosGeoTurtle

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label {
  OrgGeogebraCommonKernelGeosGeoTurtle_initWithOrgGeogebraCommonKernelConstruction_withNSString_(self, c, label);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoTurtle_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return nil;
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)copy__ {
  return [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copyInternalWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1 {
  OrgGeogebraCommonKernelGeosGeoTurtle *ret = [new_OrgGeogebraCommonKernelGeosGeoTurtle_initWithOrgGeogebraCommonKernelConstruction_withNSString_(cons1, nil) autorelease];
  [ret setWithOrgGeogebraCommonKernelGeosGeoElement:self];
  return ret;
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_TURTLE();
}

- (JavaUtilArrayList *)getTurtleCommandList {
  return cmdList_;
}

- (jdouble)getTurnAngle {
  return fmod((turnAngle_ * 180 / JavaLangMath_PI), 360);
}

- (void)setTurnAngleWithDouble:(jdouble)a {
  [self turnWithDouble:a - turnAngle_ * 180 / JavaLangMath_PI];
}

- (IOSDoubleArray *)getAngleRotators {
  IOSDoubleArray *ar = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ self->cosAngle_, self->sinAngle_ } count:2];
  return ar;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getPosition {
  return self;
}

- (jint)getPenThickness {
  return penThickness_;
}

- (OrgGeogebraCommonAwtGColor *)getPenColor {
  return penColor_;
}

- (jboolean)getPenDown {
  return penDown_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getStartPoint {
  return startPoint_;
}

- (JavaUtilArrayList *)getTurtleImageList {
  return turtleImageList_;
}

- (void)addTurtleImageWithOrgGeogebraCommonAwtGImage:(id<OrgGeogebraCommonAwtGImage>)image {
  [((JavaUtilArrayList *) nil_chk(turtleImageList_)) addWithId:image];
}

- (jint)getTurtle {
  return turtleImageIndex_;
}

- (void)setTurtleWithInt:(jint)index {
  jint index1 = index % 4;
  self->turtleImageIndex_ = index1;
}

- (jboolean)isAutoUpdate {
  return autoUpdate_;
}

- (void)setAutoUpdateWithBoolean:(jboolean)autoUpdate {
  self->autoUpdate_ = autoUpdate;
}

- (jdouble)getSpeed {
  return speed_;
}

- (void)setSpeedWithDouble:(jdouble)s {
  if (s < 0.0) {
    speed_ = 0.0;
  }
  else {
    speed_ = s;
  }
}

- (jint)getNumberOfCompletedCommands {
  return nCompletedCommands_;
}

- (jdouble)getCurrentCommandProgress {
  if (currentCommandProgress_ == 0.0) {
    return 0.0;
  }
  return currentCommandProgress_ / [((id<OrgGeogebraCommonKernelGeosGeoTurtle_Command>) nil_chk([((JavaUtilArrayList *) nil_chk(cmdList_)) getWithInt:nCompletedCommands_])) getTime];
}

- (void)resetProgress {
  nCompletedCommands_ = 0;
  currentCommandProgress_ = 0.0;
  OrgGeogebraCommonKernelGeosGeoTurtle_doUpdate(self);
}

- (void)stepTurtle {
  [self stepTurtleWithDouble:1.0];
}

- (jboolean)doStepTurtleWithDouble:(jdouble)nSteps {
  return OrgGeogebraCommonKernelGeosGeoTurtle_doStepTurtleWithDouble_(self, nSteps);
}

- (void)stepTurtleWithDouble:(jdouble)nSteps {
  if (OrgGeogebraCommonKernelGeosGeoTurtle_doStepTurtleWithDouble_(self, nSteps)) {
    OrgGeogebraCommonKernelGeosGeoTurtle_doUpdate(self);
  }
}

- (void)forwardWithDouble:(jdouble)distance {
  [self addCommandWithOrgGeogebraCommonKernelGeosGeoTurtle_Command:[new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_(self, distance) autorelease]];
}

- (void)setPositionWithDouble:(jdouble)x
                   withDouble:(jdouble)y {
  [self addCommandWithOrgGeogebraCommonKernelGeosGeoTurtle_Command:[new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPosition_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(self, x, y) autorelease]];
}

- (void)setCoordsWithDouble:(jdouble)x
                 withDouble:(jdouble)y {
  jboolean currPenDown = [self getPenDown];
  [self setPenDownWithBoolean:NO];
  [self addCommandWithOrgGeogebraCommonKernelGeosGeoTurtle_Command:[new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(self, x, y) autorelease]];
  [self setPenDownWithBoolean:currPenDown];
}

- (void)turnWithDouble:(jdouble)turnAngleChange {
  [self addCommandWithOrgGeogebraCommonKernelGeosGeoTurtle_Command:[new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_(self, turnAngleChange) autorelease]];
}

- (void)setPenDownWithBoolean:(jboolean)penDown {
  [self addCommandWithOrgGeogebraCommonKernelGeosGeoTurtle_Command:[new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withBoolean_(self, penDown) autorelease]];
}

- (void)setPenColorWithInt:(jint)r
                   withInt:(jint)g
                   withInt:(jint)b {
  [self setPenColorWithOrgGeogebraCommonAwtGColor:[((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:r withInt:g withInt:b]];
}

- (void)setPenColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)penColor {
  [self addCommandWithOrgGeogebraCommonKernelGeosGeoTurtle_Command:[new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withOrgGeogebraCommonAwtGColor_(self, penColor) autorelease]];
}

- (void)setPenThicknessWithInt:(jint)thickness {
  [self addCommandWithOrgGeogebraCommonKernelGeosGeoTurtle_Command:[new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withInt_(self, thickness) autorelease]];
}

- (void)clear {
  jdouble s = speed_;
  speed_ = 0;
  [self resetProgress];
  [((JavaUtilArrayList *) nil_chk(cmdList_)) clear];
  turnAngle_ = 0.0;
  sinAngle_ = 0.0;
  cosAngle_ = 1.0;
  *IOSDoubleArray_GetRef(nil_chk(position_), 0) = 0.0;
  *IOSDoubleArray_GetRef(position_, 1) = 0.0;
  [self setCoordsWithDouble:0.0 withDouble:0.0 withDouble:1.0];
  speed_ = s;
  OrgGeogebraCommonKernelGeosGeoTurtle_doUpdate(self);
}

- (void)doUpdate {
  OrgGeogebraCommonKernelGeosGeoTurtle_doUpdate(self);
}

- (jboolean)isGeoTurtle {
  return YES;
}

- (jboolean)isDefined {
  return defined_;
}

- (void)setUndefined {
  defined_ = NO;
}

- (jboolean)isAnimatable {
  return YES;
}

- (jboolean)doAnimationStepWithDouble:(jdouble)frameRate {
  @synchronized(self) {
    return OrgGeogebraCommonKernelGeosGeoTurtle_doStepTurtleWithDouble_(self, 1.0 / frameRate);
  }
}

- (void)addCommandWithOrgGeogebraCommonKernelGeosGeoTurtle_Command:(id<OrgGeogebraCommonKernelGeosGeoTurtle_Command>)cmd {
  [((JavaUtilArrayList *) nil_chk(cmdList_)) addWithId:cmd];
  [((id<OrgGeogebraCommonKernelGeosGeoTurtle_Command>) nil_chk(cmd)) perform];
  OrgGeogebraCommonKernelGeosGeoTurtle_doUpdate(self);
}

- (jboolean)isFillable {
  return YES;
}

- (OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)getFillType {
  return OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_IMAGE();
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  if ([self getFillImage] != nil) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<file name=\""];
    [sb appendWithNSString:OrgGeogebraCommonUtilStringUtil_encodeXMLWithNSString_([((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([self getGraphicsAdapter])) getImageFileName])];
    [sb appendWithNSString:@"\"/>\n"];
  }
}

- (void)dealloc {
  RELEASE_(turtleImageList_);
  RELEASE_(cmdList_);
  RELEASE_(startPoint_);
  RELEASE_(position_);
  RELEASE_(penColor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:", "GeoTurtle", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoTurtle", NULL, 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "copyInternalWithOrgGeogebraCommonKernelConstruction:", "copyInternal", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "getTurtleCommandList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getTurnAngle", NULL, "D", 0x1, NULL, NULL },
    { "setTurnAngleWithDouble:", "setTurnAngle", "V", 0x1, NULL, NULL },
    { "getAngleRotators", NULL, "[D", 0x1, NULL, NULL },
    { "getPosition", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getPenThickness", NULL, "I", 0x1, NULL, NULL },
    { "getPenColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getPenDown", NULL, "Z", 0x1, NULL, NULL },
    { "getStartPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getTurtleImageList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "addTurtleImageWithOrgGeogebraCommonAwtGImage:", "addTurtleImage", "V", 0x1, NULL, NULL },
    { "getTurtle", NULL, "I", 0x1, NULL, NULL },
    { "setTurtleWithInt:", "setTurtle", "V", 0x1, NULL, NULL },
    { "isAutoUpdate", NULL, "Z", 0x1, NULL, NULL },
    { "setAutoUpdateWithBoolean:", "setAutoUpdate", "V", 0x1, NULL, NULL },
    { "getSpeed", NULL, "D", 0x1, NULL, NULL },
    { "setSpeedWithDouble:", "setSpeed", "V", 0x1, NULL, NULL },
    { "getNumberOfCompletedCommands", NULL, "I", 0x1, NULL, NULL },
    { "getCurrentCommandProgress", NULL, "D", 0x1, NULL, NULL },
    { "resetProgress", NULL, "V", 0x1, NULL, NULL },
    { "stepTurtle", NULL, "V", 0x1, NULL, NULL },
    { "doStepTurtleWithDouble:", "doStepTurtle", "Z", 0x2, NULL, NULL },
    { "stepTurtleWithDouble:", "stepTurtle", "V", 0x1, NULL, NULL },
    { "forwardWithDouble:", "forward", "V", 0x1, NULL, NULL },
    { "setPositionWithDouble:withDouble:", "setPosition", "V", 0x1, NULL, NULL },
    { "setCoordsWithDouble:withDouble:", "setCoords", "V", 0x1, NULL, NULL },
    { "turnWithDouble:", "turn", "V", 0x1, NULL, NULL },
    { "setPenDownWithBoolean:", "setPenDown", "V", 0x1, NULL, NULL },
    { "setPenColorWithInt:withInt:withInt:", "setPenColor", "V", 0x1, NULL, NULL },
    { "setPenColorWithOrgGeogebraCommonAwtGColor:", "setPenColor", "V", 0x1, NULL, NULL },
    { "setPenThicknessWithInt:", "setPenThickness", "V", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "doUpdate", NULL, "V", 0x2, NULL, NULL },
    { "isGeoTurtle", NULL, "Z", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "isAnimatable", NULL, "Z", 0x1, NULL, NULL },
    { "doAnimationStepWithDouble:", "doAnimationStep", "Z", 0x21, NULL, NULL },
    { "addCommandWithOrgGeogebraCommonKernelGeosGeoTurtle_Command:", "addCommand", "V", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "getFillType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "turtleImageList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/awt/GImage;>;",  },
    { "cmdList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoTurtle$Command;>;",  },
    { "startPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "position_", NULL, 0x4, "[D", NULL, NULL,  },
    { "penColor_", NULL, 0x4, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
    { "penThickness_", NULL, 0x4, "I", NULL, NULL,  },
    { "penDown_", NULL, 0x4, "Z", NULL, NULL,  },
    { "turnAngle_", NULL, 0x4, "D", NULL, NULL,  },
    { "sinAngle_", NULL, 0x4, "D", NULL, NULL,  },
    { "cosAngle_", NULL, 0x4, "D", NULL, NULL,  },
    { "turtleImageIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "nCompletedCommands_", NULL, 0x2, "I", NULL, NULL,  },
    { "currentCommandProgress_", NULL, 0x2, "D", NULL, NULL,  },
    { "speed_", NULL, 0x2, "D", NULL, NULL,  },
    { "autoUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", "Lorg.geogebra.common.kernel.geos.GeoTurtle$Command;", "Lorg.geogebra.common.kernel.geos.GeoTurtle$DrawState;", "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdForward;", "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdSetCoords;", "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdSetPosition;", "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdTurn;", "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdSetColor;", "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdSetPen;", "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdSetThickness;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoTurtle = { 2, "GeoTurtle", "org.geogebra.common.kernel.geos", NULL, 0x1, 48, methods, 16, fields, 0, NULL, 10, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoTurtle;
}

@end

void OrgGeogebraCommonKernelGeosGeoTurtle_initWithOrgGeogebraCommonKernelConstruction_withNSString_(OrgGeogebraCommonKernelGeosGeoTurtle *self, OrgGeogebraCommonKernelConstruction *c, NSString *label) {
  OrgGeogebraCommonKernelGeosGeoTurtle_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  [self setLabelWithNSString:label];
}

OrgGeogebraCommonKernelGeosGeoTurtle *new_OrgGeogebraCommonKernelGeosGeoTurtle_initWithOrgGeogebraCommonKernelConstruction_withNSString_(OrgGeogebraCommonKernelConstruction *c, NSString *label) {
  OrgGeogebraCommonKernelGeosGeoTurtle *self = [OrgGeogebraCommonKernelGeosGeoTurtle alloc];
  OrgGeogebraCommonKernelGeosGeoTurtle_initWithOrgGeogebraCommonKernelConstruction_withNSString_(self, c, label);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoTurtle_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoTurtle *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->defined_ = YES;
  OrgGeogebraCommonKernelGeosGeoTurtle_setAndConsume_startPoint_(self, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self->cons_, 0.0, 0.0, 1.0));
  OrgGeogebraCommonKernelGeosGeoTurtle_setAndConsume_position_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.0, 0.0, 1.0 } count:3]);
  OrgGeogebraCommonKernelGeosGeoTurtle_set_penColor_(self, OrgGeogebraCommonAwtGColor_get_BLACK_());
  self->penThickness_ = 1;
  self->penDown_ = YES;
  self->turnAngle_ = 0.0;
  self->sinAngle_ = 0.0;
  self->cosAngle_ = 1.0;
  self->turtleImageIndex_ = 1;
  self->nCompletedCommands_ = 0;
  self->currentCommandProgress_ = 0.0;
  self->speed_ = 1.0;
  self->autoUpdate_ = YES;
  OrgGeogebraCommonKernelGeosGeoTurtle_setAndConsume_cmdList_(self, new_JavaUtilArrayList_init());
  [self setObjColorWithOrgGeogebraCommonAwtGColor:OrgGeogebraCommonAwtGColor_get_GRAY_()];
  OrgGeogebraCommonKernelGeosGeoTurtle_setAndConsume_turtleImageList_(self, new_JavaUtilArrayList_init());
  [self->turtleImageList_ addWithId:[((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(c)) getApplication])) getInternalImageAdapterWithNSString:@"/gui/images/go-next.png"]];
  [self setCoordsWithDouble:0 withDouble:0 withDouble:1];
}

OrgGeogebraCommonKernelGeosGeoTurtle *new_OrgGeogebraCommonKernelGeosGeoTurtle_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoTurtle *self = [OrgGeogebraCommonKernelGeosGeoTurtle alloc];
  OrgGeogebraCommonKernelGeosGeoTurtle_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

jboolean OrgGeogebraCommonKernelGeosGeoTurtle_doStepTurtleWithDouble_(OrgGeogebraCommonKernelGeosGeoTurtle *self, jdouble nSteps) {
  jint totalNCommands = [((JavaUtilArrayList *) nil_chk(self->cmdList_)) size];
  if (self->speed_ == 0.0 || self->nCompletedCommands_ >= totalNCommands) {
    return NO;
  }
  self->currentCommandProgress_ += self->speed_ * nSteps;
  jdouble t;
  while (self->currentCommandProgress_ >= (t = [((id<OrgGeogebraCommonKernelGeosGeoTurtle_Command>) nil_chk([self->cmdList_ getWithInt:self->nCompletedCommands_])) getTime])) {
    self->nCompletedCommands_ += 1;
    self->currentCommandProgress_ -= t;
    if (self->nCompletedCommands_ == totalNCommands) {
      self->currentCommandProgress_ = 0.0;
      break;
    }
  }
  return YES;
}

void OrgGeogebraCommonKernelGeosGeoTurtle_doUpdate(OrgGeogebraCommonKernelGeosGeoTurtle *self) {
  if (self->autoUpdate_) [self updateRepaint];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoTurtle)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum)

OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_values_[6];

@implementation OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_values() {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_values_ count:6 type:OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_values();
}

+ (OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initialize();
  for (int i = 0; i < 6; i++) {
    OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *e = OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum class]) {
    OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_FORWARD = new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(@"FORWARD", 0);
    OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_POSITION = new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(@"SET_POSITION", 1);
    OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_TURN = new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(@"TURN", 2);
    OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_COLOR = new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(@"SET_COLOR", 3);
    OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_PEN = new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(@"SET_PEN", 4);
    OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_THICKNESS = new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(@"SET_THICKNESS", 5);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "FORWARD", "FORWARD", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", &OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_FORWARD, NULL,  },
    { "SET_POSITION", "SET_POSITION", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", &OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_POSITION, NULL,  },
    { "TURN", "TURN", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", &OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_TURN, NULL,  },
    { "SET_COLOR", "SET_COLOR", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", &OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_COLOR, NULL,  },
    { "SET_PEN", "SET_PEN", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", &OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_PEN, NULL,  },
    { "SET_THICKNESS", "SET_THICKNESS", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", &OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_THICKNESS, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum = { 2, "CmdType", "org.geogebra.common.kernel.geos", "GeoTurtle", 0x4019, 0, NULL, 6, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/kernel/geos/GeoTurtle$CmdType;>;" };
  return &_OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum;
}

@end

void OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *self = [OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum alloc];
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum)

@implementation OrgGeogebraCommonKernelGeosGeoTurtle_Command

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getType", NULL, "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x401, NULL, NULL },
    { "getTime", NULL, "D", 0x401, NULL, NULL },
    { "perform", NULL, "V", 0x401, NULL, NULL },
    { "drawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:", "draw", "V", 0x401, NULL, NULL },
    { "partialDrawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:withDouble:", "partialDraw", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoTurtle_Command = { 2, "Command", "org.geogebra.common.kernel.geos", "GeoTurtle", 0x609, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoTurtle_Command;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoTurtle_Command)

@implementation OrgGeogebraCommonKernelGeosGeoTurtle_DrawState

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setPenWithBoolean:", "setPen", "V", 0x401, NULL, NULL },
    { "moveWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "move", "V", 0x401, NULL, NULL },
    { "turnWithDouble:", "turn", "V", 0x401, NULL, NULL },
    { "partialMoveWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "partialMove", "V", 0x401, NULL, NULL },
    { "partialTurnWithDouble:withDouble:", "partialTurn", "V", 0x401, NULL, NULL },
    { "setColorWithOrgGeogebraCommonAwtGColor:", "setColor", "V", 0x401, NULL, NULL },
    { "setThicknessWithInt:", "setThickness", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoTurtle_DrawState = { 2, "DrawState", "org.geogebra.common.kernel.geos", "GeoTurtle", 0x609, 7, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoTurtle_DrawState;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoTurtle_DrawState)

@implementation OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoTurtle:(OrgGeogebraCommonKernelGeosGeoTurtle *)outer$
                                                  withDouble:(jdouble)l {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_(self, outer$, l);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)getType {
  return OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_get_FORWARD();
}

- (jdouble)getTime {
  return time_;
}

- (void)perform {
  *IOSDoubleArray_GetRef(nil_chk(this$0_->position_), 0) += length_ * this$0_->cosAngle_;
  *IOSDoubleArray_GetRef(this$0_->position_, 1) += length_ * this$0_->sinAngle_;
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward_setAndConsume_destination_(self, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(this$0_->cons_, IOSDoubleArray_Get(this$0_->position_, 0), IOSDoubleArray_Get(this$0_->position_, 1), 1.0));
  [this$0_ setCoordsWithDouble:IOSDoubleArray_Get(this$0_->position_, 0) withDouble:IOSDoubleArray_Get(this$0_->position_, 1) withDouble:1.0];
}

- (void)drawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>)ds {
  [((id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) moveWithOrgGeogebraCommonKernelKernelNDGeoPointND:destination_];
}

- (void)partialDrawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>)ds
                                                           withDouble:(jdouble)progress {
  [((id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) partialMoveWithOrgGeogebraCommonKernelKernelNDGeoPointND:destination_ withDouble:progress];
}

- (NSString *)description {
  return JreStrcat("$D", @"fd ", length_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(destination_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelGeosGeoTurtle:withDouble:", "CmdForward", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x1, NULL, NULL },
    { "getTime", NULL, "D", 0x1, NULL, NULL },
    { "perform", NULL, "V", 0x1, NULL, NULL },
    { "drawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:", "draw", "V", 0x1, NULL, NULL },
    { "partialDrawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:withDouble:", "partialDraw", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.geos.GeoTurtle;", NULL, NULL,  },
    { "length_", NULL, 0x2, "D", NULL, NULL,  },
    { "time_", NULL, 0x2, "D", NULL, NULL,  },
    { "destination_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward = { 2, "CmdForward", "org.geogebra.common.kernel.geos", "GeoTurtle", 0x1, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward;
}

@end

void OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_(OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward *self, OrgGeogebraCommonKernelGeosGeoTurtle *outer$, jdouble l) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward_set_this$0_(self, outer$);
  NSObject_init(self);
  self->length_ = l;
  self->time_ = JavaLangMath_absWithDouble_(l);
}

OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward *new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_(OrgGeogebraCommonKernelGeosGeoTurtle *outer$, jdouble l) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward *self = [OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward alloc];
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_(self, outer$, l);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoTurtle_CmdForward)

@implementation OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoTurtle:(OrgGeogebraCommonKernelGeosGeoTurtle *)outer$
                                                  withDouble:(jdouble)x
                                                  withDouble:(jdouble)y {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(self, outer$, x, y);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)getType {
  return OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_get_SET_POSITION();
}

- (jdouble)getTime {
  return 0;
}

- (void)perform {
  *IOSDoubleArray_GetRef(nil_chk(this$0_->position_), 0) = destX_;
  *IOSDoubleArray_GetRef(this$0_->position_, 1) = destY_;
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_setAndConsume_destination_(self, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(this$0_->cons_, IOSDoubleArray_Get(this$0_->position_, 0), IOSDoubleArray_Get(this$0_->position_, 1), 1.0));
  jboolean currPenDown = [this$0_ getPenDown];
  [this$0_ setPenDownWithBoolean:NO];
  [this$0_ setCoordsWithDouble:IOSDoubleArray_Get(this$0_->position_, 0) withDouble:IOSDoubleArray_Get(this$0_->position_, 1) withDouble:1.0];
  [this$0_ setPenDownWithBoolean:currPenDown];
}

- (void)drawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>)ds {
  [((id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) moveWithOrgGeogebraCommonKernelKernelNDGeoPointND:destination_];
}

- (void)partialDrawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>)ds
                                                           withDouble:(jdouble)progress {
  [((id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) partialMoveWithOrgGeogebraCommonKernelKernelNDGeoPointND:destination_ withDouble:progress];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(destination_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelGeosGeoTurtle:withDouble:withDouble:", "CmdSetCoords", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x1, NULL, NULL },
    { "getTime", NULL, "D", 0x1, NULL, NULL },
    { "perform", NULL, "V", 0x1, NULL, NULL },
    { "drawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:", "draw", "V", 0x1, NULL, NULL },
    { "partialDrawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:withDouble:", "partialDraw", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.geos.GeoTurtle;", NULL, NULL,  },
    { "destX_", NULL, 0x4, "D", NULL, NULL,  },
    { "destY_", NULL, 0x4, "D", NULL, NULL,  },
    { "destination_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords = { 2, "CmdSetCoords", "org.geogebra.common.kernel.geos", "GeoTurtle", 0x1, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords;
}

@end

void OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords *self, OrgGeogebraCommonKernelGeosGeoTurtle *outer$, jdouble x, jdouble y) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_set_this$0_(self, outer$);
  NSObject_init(self);
  self->destX_ = x;
  self->destY_ = y;
}

OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords *new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoTurtle *outer$, jdouble x, jdouble y) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords *self = [OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords alloc];
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(self, outer$, x, y);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords)

@implementation OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPosition

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoTurtle:(OrgGeogebraCommonKernelGeosGeoTurtle *)outer$
                                                  withDouble:(jdouble)x
                                                  withDouble:(jdouble)y {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPosition_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(self, outer$, x, y);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)getType {
  return OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_get_SET_POSITION();
}

- (jdouble)getTime {
  return time_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelGeosGeoTurtle:withDouble:withDouble:", "CmdSetPosition", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x1, NULL, NULL },
    { "getTime", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "time_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPosition = { 2, "CmdSetPosition", "org.geogebra.common.kernel.geos", "GeoTurtle", 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPosition;
}

@end

void OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPosition_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPosition *self, OrgGeogebraCommonKernelGeosGeoTurtle *outer$, jdouble x, jdouble y) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(self, outer$, x, y);
  self->time_ = JavaLangMath_hypotWithDouble_withDouble_(x - IOSDoubleArray_Get(nil_chk(outer$->position_), 0), y - IOSDoubleArray_Get(outer$->position_, 1));
}

OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPosition *new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPosition_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoTurtle *outer$, jdouble x, jdouble y) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPosition *self = [OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPosition alloc];
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPosition_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(self, outer$, x, y);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPosition)

@implementation OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoTurtle:(OrgGeogebraCommonKernelGeosGeoTurtle *)outer$
                                                  withDouble:(jdouble)a {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_(self, outer$, a);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)getType {
  return OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_get_TURN();
}

- (jdouble)getTime {
  return time_;
}

- (void)perform {
  this$0_->turnAngle_ += angle_;
  this$0_->sinAngle_ = JavaLangMath_sinWithDouble_(this$0_->turnAngle_);
  this$0_->cosAngle_ = JavaLangMath_cosWithDouble_(this$0_->turnAngle_);
}

- (void)drawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>)ds {
  [((id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) turnWithDouble:angle_];
}

- (void)partialDrawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>)ds
                                                           withDouble:(jdouble)progress {
  [((id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) partialTurnWithDouble:angle_ withDouble:progress];
}

- (NSString *)description {
  if (degAngle_ > 0) {
    return JreStrcat("$D", @"tl ", degAngle_);
  }
  return JreStrcat("$D", @"tr ", (-degAngle_));
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelGeosGeoTurtle:withDouble:", "CmdTurn", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x1, NULL, NULL },
    { "getTime", NULL, "D", 0x1, NULL, NULL },
    { "perform", NULL, "V", 0x1, NULL, NULL },
    { "drawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:", "draw", "V", 0x1, NULL, NULL },
    { "partialDrawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:withDouble:", "partialDraw", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.geos.GeoTurtle;", NULL, NULL,  },
    { "degAngle_", NULL, 0x2, "D", NULL, NULL,  },
    { "angle_", NULL, 0x2, "D", NULL, NULL,  },
    { "time_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn = { 2, "CmdTurn", "org.geogebra.common.kernel.geos", "GeoTurtle", 0x1, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn;
}

@end

void OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_(OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn *self, OrgGeogebraCommonKernelGeosGeoTurtle *outer$, jdouble a) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn_set_this$0_(self, outer$);
  NSObject_init(self);
  self->degAngle_ = a;
  self->angle_ = a * JavaLangMath_PI / 180;
  self->time_ = JavaLangMath_absWithDouble_(a) / 90;
}

OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn *new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_(OrgGeogebraCommonKernelGeosGeoTurtle *outer$, jdouble a) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn *self = [OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn alloc];
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withDouble_(self, outer$, a);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoTurtle_CmdTurn)

@implementation OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoTurtle:(OrgGeogebraCommonKernelGeosGeoTurtle *)outer$
                              withOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)c {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withOrgGeogebraCommonAwtGColor_(self, outer$, c);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)getType {
  return OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_get_SET_COLOR();
}

- (jdouble)getTime {
  return 0.0;
}

- (void)perform {
  OrgGeogebraCommonKernelGeosGeoTurtle_set_penColor_(this$0_, color_);
}

- (void)drawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>)ds {
  [((id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) setColorWithOrgGeogebraCommonAwtGColor:color_];
}

- (void)partialDrawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>)ds
                                                           withDouble:(jdouble)progress {
}

- (NSString *)description {
  return JreStrcat("$@", @"color ", color_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(color_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelGeosGeoTurtle:withOrgGeogebraCommonAwtGColor:", "CmdSetColor", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x1, NULL, NULL },
    { "getTime", NULL, "D", 0x1, NULL, NULL },
    { "perform", NULL, "V", 0x1, NULL, NULL },
    { "drawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:", "draw", "V", 0x1, NULL, NULL },
    { "partialDrawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:withDouble:", "partialDraw", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.geos.GeoTurtle;", NULL, NULL,  },
    { "color_", NULL, 0x2, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor = { 2, "CmdSetColor", "org.geogebra.common.kernel.geos", "GeoTurtle", 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor;
}

@end

void OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withOrgGeogebraCommonAwtGColor_(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor *self, OrgGeogebraCommonKernelGeosGeoTurtle *outer$, OrgGeogebraCommonAwtGColor *c) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor_set_this$0_(self, outer$);
  NSObject_init(self);
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor_set_color_(self, c);
}

OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor *new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withOrgGeogebraCommonAwtGColor_(OrgGeogebraCommonKernelGeosGeoTurtle *outer$, OrgGeogebraCommonAwtGColor *c) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor *self = [OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor alloc];
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withOrgGeogebraCommonAwtGColor_(self, outer$, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetColor)

@implementation OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoTurtle:(OrgGeogebraCommonKernelGeosGeoTurtle *)outer$
                                                 withBoolean:(jboolean)d {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withBoolean_(self, outer$, d);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)getType {
  return OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_get_SET_PEN();
}

- (jdouble)getTime {
  return 0.0;
}

- (void)perform {
  this$0_->penDown_ = down_;
}

- (void)drawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>)ds {
  [((id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) setPenWithBoolean:down_];
}

- (void)partialDrawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>)ds
                                                           withDouble:(jdouble)progress {
}

- (NSString *)description {
  return down_ ? @"pd" : @"pu";
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelGeosGeoTurtle:withBoolean:", "CmdSetPen", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x1, NULL, NULL },
    { "getTime", NULL, "D", 0x1, NULL, NULL },
    { "perform", NULL, "V", 0x1, NULL, NULL },
    { "drawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:", "draw", "V", 0x1, NULL, NULL },
    { "partialDrawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:withDouble:", "partialDraw", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.geos.GeoTurtle;", NULL, NULL,  },
    { "down_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen = { 2, "CmdSetPen", "org.geogebra.common.kernel.geos", "GeoTurtle", 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen;
}

@end

void OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withBoolean_(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen *self, OrgGeogebraCommonKernelGeosGeoTurtle *outer$, jboolean d) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen_set_this$0_(self, outer$);
  NSObject_init(self);
  self->down_ = d;
}

OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen *new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withBoolean_(OrgGeogebraCommonKernelGeosGeoTurtle *outer$, jboolean d) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen *self = [OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen alloc];
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withBoolean_(self, outer$, d);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetPen)

@implementation OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoTurtle:(OrgGeogebraCommonKernelGeosGeoTurtle *)outer$
                                                     withInt:(jint)th {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withInt_(self, outer$, th);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)getType {
  return OrgGeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_get_SET_THICKNESS();
}

- (jdouble)getTime {
  return 0.0;
}

- (void)perform {
  this$0_->penThickness_ = thickness_;
}

- (void)drawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>)ds {
  [((id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) setThicknessWithInt:thickness_];
}

- (void)partialDrawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<OrgGeogebraCommonKernelGeosGeoTurtle_DrawState>)ds
                                                           withDouble:(jdouble)progress {
}

- (NSString *)description {
  return JreStrcat("$I", @"thickness ", thickness_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelGeosGeoTurtle:withInt:", "CmdSetThickness", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "Lorg.geogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x1, NULL, NULL },
    { "getTime", NULL, "D", 0x1, NULL, NULL },
    { "perform", NULL, "V", 0x1, NULL, NULL },
    { "drawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:", "draw", "V", 0x1, NULL, NULL },
    { "partialDrawWithOrgGeogebraCommonKernelGeosGeoTurtle_DrawState:withDouble:", "partialDraw", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.geos.GeoTurtle;", NULL, NULL,  },
    { "thickness_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness = { 2, "CmdSetThickness", "org.geogebra.common.kernel.geos", "GeoTurtle", 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness;
}

@end

void OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withInt_(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness *self, OrgGeogebraCommonKernelGeosGeoTurtle *outer$, jint th) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness_set_this$0_(self, outer$);
  NSObject_init(self);
  self->thickness_ = th;
}

OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness *new_OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withInt_(OrgGeogebraCommonKernelGeosGeoTurtle *outer$, jint th) {
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness *self = [OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness alloc];
  OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness_initWithOrgGeogebraCommonKernelGeosGeoTurtle_withInt_(self, outer$, th);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoTurtle_CmdSetThickness)
