//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/geos/GeoInterval.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoMacroInterface.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoInterval.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/Unicode.h"

@interface OrgGeogebraCommonKernelGeosGeoInterval () {
 @public
  JavaLangStringBuilder *sbToString2_;
  IOSDoubleArray *leftRightBoundsField_;
  IOSObjectArray *leftRightStrField_;
  IOSCharArray *leftRightInequalityField_;
}

- (NSString *)toStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (void)updateBoundaries;

+ (jdouble)setLeftBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)nv
                                                          withNSStringArray:(IOSObjectArray *)leftRightStr;

+ (jdouble)setRightBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)nv
                                                           withNSStringArray:(IOSObjectArray *)leftRightStr;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoInterval, sbToString2_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoInterval, leftRightBoundsField_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoInterval, leftRightStrField_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoInterval, leftRightInequalityField_, IOSCharArray *)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoInterval_updateBoundaries(OrgGeogebraCommonKernelGeosGeoInterval *self);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelGeosGeoInterval_setLeftBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSStringArray_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> nv, IOSObjectArray *leftRightStr);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelGeosGeoInterval_setRightBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSStringArray_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> nv, IOSObjectArray *leftRightStr);

@implementation OrgGeogebraCommonKernelGeosGeoInterval

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)f {
  OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(self, c, label, f);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoInterval:(OrgGeogebraCommonKernelGeosGeoInterval *)geoInterval {
  OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelGeosGeoInterval_(self, geoInterval);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  return new_OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelGeosGeoInterval_(self);
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelGeosGeoInterval *geoFun = (OrgGeogebraCommonKernelGeosGeoInterval *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoInterval class]);
  if (geo == nil || ((OrgGeogebraCommonKernelGeosGeoInterval *) nil_chk(geoFun))->fun_ == nil) {
    fun_ = nil;
    isDefined__ = NO;
    return;
  }
  isDefined__ = ((OrgGeogebraCommonKernelGeosGeoInterval *) nil_chk(geoFun))->isDefined__;
  fun_ = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelKernel_(geoFun->fun_, kernel_);
  if (((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->cons_ != cons_ && [self isAlgoMacroOutput]) {
    if (![geoFun isIndependent]) {
      id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface> algoMacro = (id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface>) check_protocol_cast([self getParentAlgorithm], @protocol(OrgGeogebraCommonKernelAlgosAlgoMacroInterface));
      [((id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface>) nil_chk(algoMacro)) initFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar:self->fun_];
    }
  }
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_INTERVAL();
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (sbToString2_ == nil) sbToString2_ = new_JavaLangStringBuilder_init();
  else [sbToString2_ setLengthWithInt:0];
  if ([self isLabelSet]) {
    (void) [((JavaLangStringBuilder *) nil_chk(sbToString2_)) appendWithNSString:label_];
    (void) [sbToString2_ appendWithNSString:@": "];
  }
  (void) [((JavaLangStringBuilder *) nil_chk(sbToString2_)) appendWithNSString:[self toSymbolicStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString2_ description];
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self toStringWithBoolean:NO withOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (![self isDefined]) {
    return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
  }
  OrgGeogebraCommonKernelArithmeticExpressionNode *en = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) getExpression];
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_AND()] || [((OrgGeogebraCommonPluginOperationEnum *) nil_chk([en getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_AND_INTERVAL()]) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [en getLeft];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [en getRight];
    if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isExpressionNode] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isExpressionNode]) {
      OrgGeogebraCommonKernelGeosGeoInterval_updateBoundaries(self);
      if (!JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(leftRightBoundsField_), 1)) && !JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(leftRightBoundsField_, 0)) && IOSDoubleArray_Get(leftRightBoundsField_, 0) <= IOSDoubleArray_Get(leftRightBoundsField_, 1)) {
        [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
        (void) [sbToString_ appendWithNSString:symbolic ? IOSObjectArray_Get(nil_chk(leftRightStrField_), 0) : [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:IOSDoubleArray_Get(leftRightBoundsField_, 0) withOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [sbToString_ appendWithChar:' '];
        (void) [sbToString_ appendWithChar:IOSCharArray_Get(nil_chk(leftRightInequalityField_), 0)];
        (void) [sbToString_ appendWithChar:' '];
        (void) [sbToString_ appendWithNSString:[self getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
        (void) [sbToString_ appendWithChar:' '];
        (void) [sbToString_ appendWithChar:IOSCharArray_Get(leftRightInequalityField_, 1)];
        (void) [sbToString_ appendWithChar:' '];
        (void) [sbToString_ appendWithNSString:symbolic ? IOSObjectArray_Get(nil_chk(leftRightStrField_), 1) : [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:IOSDoubleArray_Get(leftRightBoundsField_, 1) withOrgGeogebraCommonKernelStringTemplate:tpl]];
        return [sbToString_ description];
      }
    }
  }
  return symbolic ? [super toSymbolicStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : [super toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (void)updateBoundaries {
  OrgGeogebraCommonKernelGeosGeoInterval_updateBoundaries(self);
}

- (NSString *)toSymbolicStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if ([self isDefined]) {
    return [self toStringWithBoolean:YES withOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if ([self isDefined]) {
    return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return JreStrcat("$$$", @" \\text{", [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"], @"} ");
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return NO;
}

+ (void)updateBoundariesWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en
                                                            withDoubleArray:(IOSDoubleArray *)leftRightDouble
                                                          withNSStringArray:(IOSObjectArray *)leftRightStr
                                                              withCharArray:(IOSCharArray *)leftRightInequalityChar {
  OrgGeogebraCommonKernelGeosGeoInterval_updateBoundariesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDoubleArray_withNSStringArray_withCharArray_(en, leftRightDouble, leftRightStr, leftRightInequalityChar);
}

+ (jdouble)setLeftBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)nv
                                                          withNSStringArray:(IOSObjectArray *)leftRightStr {
  return OrgGeogebraCommonKernelGeosGeoInterval_setLeftBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSStringArray_(nv, leftRightStr);
}

+ (jdouble)setRightBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)nv
                                                           withNSStringArray:(IOSObjectArray *)leftRightStr {
  return OrgGeogebraCommonKernelGeosGeoInterval_setRightBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSStringArray_(nv, leftRightStr);
}

- (jdouble)getMin {
  OrgGeogebraCommonKernelGeosGeoInterval_updateBoundaries(self);
  return IOSDoubleArray_Get(nil_chk(leftRightBoundsField_), 0);
}

- (jdouble)getMax {
  OrgGeogebraCommonKernelGeosGeoInterval_updateBoundaries(self);
  return IOSDoubleArray_Get(nil_chk(leftRightBoundsField_), 1);
}

- (jdouble)getMidPoint {
  OrgGeogebraCommonKernelGeosGeoInterval_updateBoundaries(self);
  return (IOSDoubleArray_Get(nil_chk(leftRightBoundsField_), 1) + IOSDoubleArray_Get(leftRightBoundsField_, 0)) / 2;
}

- (jboolean)isGeoInterval {
  return YES;
}

- (NSString *)toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (jint)getMinimumLineThickness {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticFunction:", "GeoInterval", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoInterval:", "GeoInterval", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoInterval", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "updateBoundaries", NULL, "V", 0x2, NULL, NULL },
    { "toSymbolicStringWithOrgGeogebraCommonKernelStringTemplate:", "toSymbolicString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "updateBoundariesWithOrgGeogebraCommonKernelArithmeticExpressionNode:withDoubleArray:withNSStringArray:withCharArray:", "updateBoundaries", "V", 0x9, NULL, NULL },
    { "setLeftBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue:withNSStringArray:", "setLeftBound", "D", 0xa, NULL, NULL },
    { "setRightBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue:withNSStringArray:", "setRightBound", "D", 0xa, NULL, NULL },
    { "getMin", NULL, "D", 0x1, NULL, NULL },
    { "getMax", NULL, "D", 0x1, NULL, NULL },
    { "getMidPoint", NULL, "D", 0x1, NULL, NULL },
    { "isGeoInterval", NULL, "Z", 0x1, NULL, NULL },
    { "toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getMinimumLineThickness", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sbToString2_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "leftRightBoundsField_", NULL, 0x2, "[D", NULL, NULL,  },
    { "leftRightStrField_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "leftRightInequalityField_", NULL, 0x2, "[C", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoInterval = { 2, "GeoInterval", "org.geogebra.common.kernel.geos", NULL, 0x1, 22, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoInterval;
}

@end

void OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelGeosGeoInterval *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, OrgGeogebraCommonKernelArithmeticFunction *f) {
  (void) OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(self, c, label, f);
}

OrgGeogebraCommonKernelGeosGeoInterval *new_OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelConstruction *c, NSString *label, OrgGeogebraCommonKernelArithmeticFunction *f) {
  OrgGeogebraCommonKernelGeosGeoInterval *self = [OrgGeogebraCommonKernelGeosGeoInterval alloc];
  OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(self, c, label, f);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelGeosGeoInterval_(OrgGeogebraCommonKernelGeosGeoInterval *self, OrgGeogebraCommonKernelGeosGeoInterval *geoInterval) {
  (void) OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(self, ((OrgGeogebraCommonKernelGeosGeoInterval *) nil_chk(geoInterval))->cons_);
  [self setWithOrgGeogebraCommonKernelGeosGeoElement:geoInterval];
}

OrgGeogebraCommonKernelGeosGeoInterval *new_OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelGeosGeoInterval_(OrgGeogebraCommonKernelGeosGeoInterval *geoInterval) {
  OrgGeogebraCommonKernelGeosGeoInterval *self = [OrgGeogebraCommonKernelGeosGeoInterval alloc];
  OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelGeosGeoInterval_(self, geoInterval);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoInterval *self, OrgGeogebraCommonKernelConstruction *cons) {
  (void) OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
}

OrgGeogebraCommonKernelGeosGeoInterval *new_OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelGeosGeoInterval *self = [OrgGeogebraCommonKernelGeosGeoInterval alloc];
  OrgGeogebraCommonKernelGeosGeoInterval_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoInterval_updateBoundaries(OrgGeogebraCommonKernelGeosGeoInterval *self) {
  if (self->leftRightBoundsField_ == nil) {
    self->leftRightBoundsField_ = [IOSDoubleArray newArrayWithLength:2];
    *IOSDoubleArray_GetRef(self->leftRightBoundsField_, 0) = JavaLangDouble_NaN;
    *IOSDoubleArray_GetRef(self->leftRightBoundsField_, 1) = JavaLangDouble_NaN;
  }
  if (self->leftRightStrField_ == nil) {
    self->leftRightStrField_ = [IOSObjectArray newArrayWithLength:2 type:NSString_class_()];
  }
  if (self->leftRightInequalityField_ == nil) {
    self->leftRightInequalityField_ = [IOSCharArray newArrayWithLength:2];
  }
  OrgGeogebraCommonKernelGeosGeoInterval_updateBoundariesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDoubleArray_withNSStringArray_withCharArray_([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(self->fun_)) getExpression], self->leftRightBoundsField_, self->leftRightStrField_, self->leftRightInequalityField_);
}

void OrgGeogebraCommonKernelGeosGeoInterval_updateBoundariesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDoubleArray_withNSStringArray_withCharArray_(OrgGeogebraCommonKernelArithmeticExpressionNode *en, IOSDoubleArray *leftRightDouble, IOSObjectArray *leftRightStr, IOSCharArray *leftRightInequalityChar) {
  OrgGeogebraCommonKernelGeosGeoInterval_initialize();
  jchar leftInequality, rightInequality;
  jdouble leftBound, rightBound;
  leftBound = IOSDoubleArray_Get(nil_chk(leftRightDouble), 0);
  rightBound = IOSDoubleArray_Get(leftRightDouble, 1);
  leftInequality = IOSCharArray_Get(nil_chk(leftRightInequalityChar), 0);
  rightInequality = IOSCharArray_Get(leftRightInequalityChar, 1);
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_AND()] || [((OrgGeogebraCommonPluginOperationEnum *) nil_chk([en getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_AND_INTERVAL()]) {
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> left = [en getLeft];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> right = [en getRight];
    OrgGeogebraCommonKernelArithmeticExpressionNode *enLeft = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    OrgGeogebraCommonKernelArithmeticExpressionNode *enRight = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    OrgGeogebraCommonPluginOperationEnum *opLeft = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enLeft)) getOperation];
    OrgGeogebraCommonPluginOperationEnum *opRight = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enRight)) getOperation];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> leftLeft = [enLeft getLeft];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> leftRight = [enLeft getRight];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> rightLeft = [enRight getLeft];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> rightRight = [enRight getRight];
    if (([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(opLeft)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS()] || [opLeft isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS_EQUAL()])) {
      if ([leftLeft isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftRight)) isNumberValue]) {
        rightInequality = [opLeft isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS()] ? '<' : OrgGeogebraCommonUtilUnicode_LESS_EQUAL;
        rightBound = OrgGeogebraCommonKernelGeosGeoInterval_setRightBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSStringArray_(leftRight, leftRightStr);
      }
      else if ([leftRight isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftLeft)) isNumberValue]) {
        leftInequality = [opLeft isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS()] ? '<' : OrgGeogebraCommonUtilUnicode_LESS_EQUAL;
        leftBound = OrgGeogebraCommonKernelGeosGeoInterval_setLeftBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSStringArray_(leftLeft, leftRightStr);
      }
    }
    else if (([opLeft isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER()] || [opLeft isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER_EQUAL()])) {
      if ([leftLeft isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftRight)) isNumberValue]) {
        leftInequality = [opLeft isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER()] ? '<' : OrgGeogebraCommonUtilUnicode_LESS_EQUAL;
        leftBound = OrgGeogebraCommonKernelGeosGeoInterval_setLeftBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSStringArray_(leftRight, leftRightStr);
      }
      else if ([leftRight isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftLeft)) isNumberValue]) {
        rightInequality = [opLeft isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER()] ? '<' : OrgGeogebraCommonUtilUnicode_LESS_EQUAL;
        rightBound = OrgGeogebraCommonKernelGeosGeoInterval_setRightBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSStringArray_(leftLeft, leftRightStr);
      }
    }
    if (([((OrgGeogebraCommonPluginOperationEnum *) nil_chk(opRight)) isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS()] || [opRight isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS_EQUAL()])) {
      if ([rightLeft isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rightRight)) isNumberValue]) {
        rightInequality = [opRight isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS()] ? '<' : OrgGeogebraCommonUtilUnicode_LESS_EQUAL;
        rightBound = OrgGeogebraCommonKernelGeosGeoInterval_setRightBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSStringArray_(rightRight, leftRightStr);
      }
      else if ([rightRight isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rightLeft)) isNumberValue]) {
        leftInequality = [opRight isEqual:OrgGeogebraCommonPluginOperationEnum_get_LESS()] ? '<' : OrgGeogebraCommonUtilUnicode_LESS_EQUAL;
        leftBound = OrgGeogebraCommonKernelGeosGeoInterval_setLeftBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSStringArray_(rightLeft, leftRightStr);
      }
    }
    else if (([opRight isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER()] || [opRight isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER_EQUAL()])) {
      if ([rightLeft isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rightRight)) isNumberValue]) {
        leftInequality = [opRight isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER()] ? '<' : OrgGeogebraCommonUtilUnicode_LESS_EQUAL;
        leftBound = OrgGeogebraCommonKernelGeosGeoInterval_setLeftBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSStringArray_(rightRight, leftRightStr);
      }
      else if ([rightRight isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rightLeft)) isNumberValue]) {
        rightInequality = [opRight isEqual:OrgGeogebraCommonPluginOperationEnum_get_GREATER()] ? '<' : OrgGeogebraCommonUtilUnicode_LESS_EQUAL;
        rightBound = OrgGeogebraCommonKernelGeosGeoInterval_setRightBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSStringArray_(rightLeft, leftRightStr);
      }
    }
  }
  else {
    rightBound = JavaLangDouble_NaN;
    leftBound = JavaLangDouble_NaN;
  }
  if (rightBound < leftBound) {
    rightBound = JavaLangDouble_NaN;
    leftBound = JavaLangDouble_NaN;
  }
  *IOSDoubleArray_GetRef(leftRightDouble, 0) = leftBound;
  *IOSDoubleArray_GetRef(leftRightDouble, 1) = rightBound;
  *IOSCharArray_GetRef(leftRightInequalityChar, 0) = leftInequality;
  *IOSCharArray_GetRef(leftRightInequalityChar, 1) = rightInequality;
}

jdouble OrgGeogebraCommonKernelGeosGeoInterval_setLeftBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSStringArray_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> nv, IOSObjectArray *leftRightStr) {
  OrgGeogebraCommonKernelGeosGeoInterval_initialize();
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(nv)) isGeoElement]) {
    (void) IOSObjectArray_Set(nil_chk(leftRightStr), 0, [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(nv, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
  }
  else {
    (void) IOSObjectArray_Set(nil_chk(leftRightStr), 0, [nv toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
  }
  return [nv evaluateDouble];
}

jdouble OrgGeogebraCommonKernelGeosGeoInterval_setRightBoundWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSStringArray_(id<OrgGeogebraCommonKernelArithmeticExpressionValue> nv, IOSObjectArray *leftRightStr) {
  OrgGeogebraCommonKernelGeosGeoInterval_initialize();
  if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(nv)) isGeoElement]) {
    (void) IOSObjectArray_Set(nil_chk(leftRightStr), 1, [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(nv, [OrgGeogebraCommonKernelGeosGeoElement class])) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
  }
  else {
    (void) IOSObjectArray_Set(nil_chk(leftRightStr), 1, [nv toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
  }
  return [nv evaluateDouble];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoInterval)
