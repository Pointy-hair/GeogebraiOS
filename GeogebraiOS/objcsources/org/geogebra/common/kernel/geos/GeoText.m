//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/geos/GeoText.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/GRectangle2D.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/LocateableList.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentText.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoSequence.h"
#include "org/geogebra/common/kernel/algos/AlgoTextCorner.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/util/NormalizerMinimal.h"
#include "org/geogebra/common/util/StringUtil.h"

@class OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum;

@interface OrgGeogebraCommonKernelGeosGeoText () {
 @public
  NSString *str_;
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> startPoint_;
  jboolean isLaTeXorMathML_;
  jboolean isMathML__;
  id<OrgGeogebraCommonAwtGRectangle2D> boundingBox_;
  jboolean needsUpdatedBoundingBox_;
  jboolean serifFont_;
  jint fontStyle_;
  jdouble fontSizeD_;
  jint printDecimals_;
  jint printFigures_;
  jboolean useSignificantFigures__;
  jboolean hasAbsoluteScreenLocation_;
  JavaLangStringBuilder *sbToString_;
  OrgGeogebraCommonKernelStringTemplate *tpl_;
  OrgGeogebraCommonKernelGeosGeoText *linkedText_;
  OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *spreadsheetTraceableCase_;
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> spreadsheetTraceableValue_;
  OrgGeogebraCommonKernelArithmeticExpressionNode *spreadsheetTraceableLeftTree_;
  OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *traceModes_;
}

- (NSString *)getXMLlocation;

- (void)setSameLocationWithOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)text;

- (void)updateTemplateAlgosWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algo;

- (void)updateTemplate;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoText, str_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoText, startPoint_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoText, boundingBox_, id<OrgGeogebraCommonAwtGRectangle2D>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoText, sbToString_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoText, tpl_, OrgGeogebraCommonKernelStringTemplate *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoText, linkedText_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoText, spreadsheetTraceableCase_, OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoText, spreadsheetTraceableValue_, id<OrgGeogebraCommonKernelArithmeticExpressionValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoText, spreadsheetTraceableLeftTree_, OrgGeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoText, traceModes_, OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)

static id<JavaUtilComparator> OrgGeogebraCommonKernelGeosGeoText_comparator_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoText, comparator_, id<JavaUtilComparator>)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoText, comparator_, id<JavaUtilComparator>)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoText_setTextStringWithNSString_(OrgGeogebraCommonKernelGeosGeoText *self, NSString *text2);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoText_getTextString(OrgGeogebraCommonKernelGeosGeoText *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoText_getXMLlocation(OrgGeogebraCommonKernelGeosGeoText *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoText_setSameLocationWithOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelGeosGeoText *self, OrgGeogebraCommonKernelGeosGeoText *text);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoText_updateTemplateAlgosWithOrgGeogebraCommonKernelAlgosAlgoElement_(OrgGeogebraCommonKernelGeosGeoText *self, OrgGeogebraCommonKernelAlgosAlgoElement *algo);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoText_updateTemplate(OrgGeogebraCommonKernelGeosGeoText *self);

typedef NS_ENUM(NSUInteger, OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase) {
  OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_NOT_TESTED = 0,
  OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_TRUE = 1,
  OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_FALSE = 2,
};

@interface OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values();

+ (OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum)

FOUNDATION_EXPORT OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values_[];

#define OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_NOT_TESTED OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values_[OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_NOT_TESTED]
J2OBJC_ENUM_CONSTANT_GETTER(OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum, SPREADSHEET_TRACEABLE_NOT_TESTED)

#define OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_TRUE OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values_[OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_TRUE]
J2OBJC_ENUM_CONSTANT_GETTER(OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum, SPREADSHEET_TRACEABLE_TRUE)

#define OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_FALSE OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values_[OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_FALSE]
J2OBJC_ENUM_CONSTANT_GETTER(OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum, SPREADSHEET_TRACEABLE_FALSE)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *new_OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum)

@interface OrgGeogebraCommonKernelGeosGeoText_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(OrgGeogebraCommonKernelGeosGeoText *)itemA
               withId:(OrgGeogebraCommonKernelGeosGeoText *)itemB;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelGeosGeoText_$1)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoText_$1_init(OrgGeogebraCommonKernelGeosGeoText_$1 *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoText_$1 *new_OrgGeogebraCommonKernelGeosGeoText_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelGeosGeoText_$1)

@implementation OrgGeogebraCommonKernelGeosGeoText

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
                                               withNSString:(NSString *)value {
  OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_withNSString_withNSString_(self, c, label, value);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)value {
  OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_withNSString_(self, c, value);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)text {
  OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelGeosGeoText_(self, text);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  return new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelGeosGeoText_(self);
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText]) return;
  OrgGeogebraCommonKernelGeosGeoText *gt = (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class]);
  if (cons_ != geo->cons_ && [self isAlgoMacroOutput]) {
    if (!useSignificantFigures__) [gt setPrintDecimalsWithInt:printDecimals_ > -1 ? printDecimals_ : [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getPrintDecimals] withBoolean:YES];
    else [gt setPrintFiguresWithInt:printFigures_ > -1 ? printFigures_ : [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getPrintFigures] withBoolean:YES];
    str_ = gt->str_;
    isLaTeXorMathML_ = gt->isLaTeXorMathML_;
    isMathML__ = gt->isMathML__;
    OrgGeogebraCommonKernelGeosGeoText_updateTemplate(self);
    return;
  }
  str_ = gt->str_;
  isLaTeXorMathML_ = gt->isLaTeXorMathML_;
  isMathML__ = gt->isMathML__;
  boundingBox_ = [gt getBoundingBox];
  @try {
    if (gt->startPoint_ != nil) {
      if ([gt hasAbsoluteLocation]) {
        if (self->startPoint_ != nil && [self hasAbsoluteLocation]) {
          [self->startPoint_ setWithOrgGeogebraCommonKernelKernelNDGeoPointND:gt->startPoint_];
        }
        else {
          [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:[gt->startPoint_ copy__]];
        }
      }
      else {
        [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:gt->startPoint_];
      }
    }
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"set GeoText: CircularDefinitionException");
  }
  OrgGeogebraCommonKernelGeosGeoText_updateTemplate(self);
}

- (void)setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [super setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText]) return;
  OrgGeogebraCommonKernelGeosGeoText *text = (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class]);
  serifFont_ = text->serifFont_;
  fontStyle_ = text->fontStyle_;
  fontSizeD_ = text->fontSizeD_;
  printDecimals_ = text->printDecimals_;
  printFigures_ = text->printFigures_;
  useSignificantFigures__ = text->useSignificantFigures__;
  OrgGeogebraCommonKernelGeosGeoText_updateTemplate(self);
}

- (void)setTextStringWithNSString:(NSString *)text2 {
  OrgGeogebraCommonKernelGeosGeoText_setTextStringWithNSString_(self, text2);
}

- (NSString *)getTextString {
  return OrgGeogebraCommonKernelGeosGeoText_getTextString(self);
}

- (void)initStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p
                                                            withInt:(jint)number {
  startPoint_ = p;
}

- (void)setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p
                                                           withInt:(jint)number {
  [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:p];
}

- (void)removeStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  if (startPoint_ == p) {
    @try {
      [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:nil];
    }
    @catch (JavaLangException *e) {
    }
  }
}

- (void)setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  if (alwaysFixed_) return;
  if ([self isParentOfWithOrgGeogebraCommonKernelKernelNDGeoElementND:p]) @throw new_OrgGeogebraCommonKernelCircularDefinitionException_init();
  if (startPoint_ != nil) [((OrgGeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) unregisterLocateableWithOrgGeogebraCommonKernelLocateable:self];
  if (p == nil) {
    if (startPoint_ != nil) startPoint_ = [startPoint_ copy__];
    else startPoint_ = nil;
    labelOffsetX_ = 0;
    labelOffsetY_ = 0;
  }
  else {
    startPoint_ = p;
    [((OrgGeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) registerLocateableWithOrgGeogebraCommonKernelLocateable:self];
    [self setAbsoluteScreenLocActiveWithBoolean:NO];
  }
}

- (void)doRemove {
  [super doRemove];
  if (startPoint_ != nil) [((OrgGeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) unregisterLocateableWithOrgGeogebraCommonKernelLocateable:self];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getStartPoint {
  return startPoint_;
}

- (IOSObjectArray *)getStartPoints {
  if (startPoint_ == nil) return nil;
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
  (void) IOSObjectArray_Set(ret, 0, startPoint_);
  return ret;
}

- (jboolean)hasAbsoluteLocation {
  return startPoint_ == nil || [startPoint_ isAbsoluteStartPoint];
}

- (void)setWaitForStartPoint {
}

- (void)update {
  [super update];
}

- (jboolean)isDefined {
  return str_ != nil && (startPoint_ == nil || [startPoint_ isDefined]);
}

- (void)setUndefined {
  str_ = nil;
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl1 {
  return str_ == nil ? @"" : str_;
}

- (NSString *)toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl1 {
  OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *printForm = [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl1)) getStringType];
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(printForm)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) (void) [sbToString_ appendWithNSString:@"\\text{``"];
  else (void) [sbToString_ appendWithChar:'"'];
  if (str_ != nil) (void) [sbToString_ appendWithNSString:str_];
  if ([printForm isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) (void) [sbToString_ appendWithNSString:@"''}"];
  else (void) [sbToString_ appendWithChar:'"'];
  return [sbToString_ description];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl1 {
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  if ([self isLabelSet]) {
    (void) [sbToString_ appendWithNSString:label_];
    (void) [sbToString_ appendWithNSString:@" = "];
  }
  (void) [sbToString_ appendWithChar:'"'];
  if (str_ != nil) (void) [sbToString_ appendWithNSString:str_];
  (void) [sbToString_ appendWithChar:'"'];
  return [sbToString_ description];
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return [self isDefined];
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_TEXT;
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_TEXT();
}

- (jboolean)isMoveable {
  if (alwaysFixed_) return NO;
  return ![self isFixed];
}

- (void)setIsTextCommandWithBoolean:(jboolean)isCommand {
  self->isTextCommand__ = isCommand;
}

- (jboolean)isTextCommand {
  if (!([self getParentAlgorithm] == nil) && !([[self getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoDependentText class]])) return YES;
  return isTextCommand__;
}

- (jboolean)isLaTeXTextCommand {
  if (!isTextCommand__ || [self getParentAlgorithm] == nil) return NO;
  return [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([self getParentAlgorithm])) isLaTeXTextCommand];
}

- (void)setAlgoMacroOutputWithBoolean:(jboolean)isAlgoMacroOutput {
  [super setAlgoMacroOutputWithBoolean:YES];
  [self setIsTextCommandWithBoolean:YES];
}

- (void)addTextDescendantWithOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)text {
  if ([self isLabelSet]) return;
  linkedText_ = text;
}

- (void)setAlwaysFixedWithBoolean:(jboolean)alwaysFixed {
  self->alwaysFixed_ = alwaysFixed;
}

- (jboolean)isFixable {
  if (alwaysFixed_) return NO;
  return YES;
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)evaluatesToText {
  return YES;
}

- (jboolean)isGeoText {
  return YES;
}

- (OrgGeogebraCommonKernelArithmeticMyStringBuffer *)getText {
  if (str_ != nil) return new_OrgGeogebraCommonKernelArithmeticMyStringBuffer_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, str_);
  return new_OrgGeogebraCommonKernelArithmeticMyStringBuffer_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"");
}

- (void)getXMLWithBoolean:(jboolean)getListenersToo
withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if ([self isIndependent] && [self getDefaultGeoType] < 0) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<expression"];
    (void) [sb appendWithNSString:@" label=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, label_);
    (void) [sb appendWithNSString:@"\" exp=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_()]);
    (void) [sb appendWithNSString:@"\"/>\n"];
  }
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<element"];
  (void) [sb appendWithNSString:@" type=\"text\""];
  (void) [sb appendWithNSString:@" label=\""];
  OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, label_);
  if ([self getDefaultGeoType] >= 0) {
    (void) [sb appendWithNSString:@"\" default=\""];
    (void) [sb appendWithInt:[self getDefaultGeoType]];
  }
  (void) [sb appendWithNSString:@"\">\n"];
  [self getXMLtagsWithJavaLangStringBuilder:sb];
  if (getListenersToo) [self getListenerTagsXMLWithJavaLangStringBuilder:sb];
  (void) [sb appendWithNSString:@"</element>\n"];
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [self getXMLvisualTagsWithJavaLangStringBuilder:sb withBoolean:NO];
  [self getXMLfixedTagWithJavaLangStringBuilder:sb];
  if (isLaTeXorMathML_) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<isLaTeX val=\"true\"/>\n"];
  }
  OrgGeogebraCommonKernelGeosGeoText_appendFontTagWithJavaLangStringBuilder_withBoolean_withDouble_withInt_withBoolean_withOrgGeogebraCommonMainApp_(sb, serifFont_, fontSizeD_, fontStyle_, isLaTeXorMathML_, [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication]);
  if (printDecimals_ >= 0 && !useSignificantFigures__) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<decimals val=\""];
    (void) [sb appendWithInt:printDecimals_];
    (void) [sb appendWithNSString:@"\"/>\n"];
  }
  if (printFigures_ >= 0 && useSignificantFigures__) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<significantfigures val=\""];
    (void) [sb appendWithInt:printFigures_];
    (void) [sb appendWithNSString:@"\"/>\n"];
  }
  [self getBreakpointXMLWithJavaLangStringBuilder:sb];
  [self getAuxiliaryXMLWithJavaLangStringBuilder:sb];
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:OrgGeogebraCommonKernelGeosGeoText_getXMLlocation(self)];
  [self getScriptTagsWithJavaLangStringBuilder:sb];
}

- (NSString *)getXMLlocation {
  return OrgGeogebraCommonKernelGeosGeoText_getXMLlocation(self);
}

- (void)setAllVisualPropertiesExceptEuclidianVisibleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                                  withBoolean:(jboolean)keepAdvanced {
  [super setAllVisualPropertiesExceptEuclidianVisibleWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:keepAdvanced];
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoText class]]) {
    OrgGeogebraCommonKernelGeosGeoText *text = (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class]);
    OrgGeogebraCommonKernelGeosGeoText_setSameLocationWithOrgGeogebraCommonKernelGeosGeoText_(self, text);
    [self setLaTeXWithBoolean:((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text))->isLaTeXorMathML_ withBoolean:YES];
  }
}

- (void)setSameLocationWithOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)text {
  OrgGeogebraCommonKernelGeosGeoText_setSameLocationWithOrgGeogebraCommonKernelGeosGeoText_(self, text);
}

- (jboolean)isLaTeX {
  return isLaTeXorMathML_;
}

- (void)setLaTeXWithBoolean:(jboolean)b
                withBoolean:(jboolean)updateParentAlgo {
  if (b == isLaTeXorMathML_) return;
  isLaTeXorMathML_ = b;
  OrgGeogebraCommonKernelGeosGeoText_updateTemplate(self);
  if (updateParentAlgo) {
    OrgGeogebraCommonKernelAlgosAlgoElement *parent = [self getParentAlgorithm];
    if (parent != nil && !([parent isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoSequence class]])) {
      [parent update];
    }
  }
}

- (jboolean)isMathML {
  return isMathML__;
}

- (void)setMathMLWithBoolean:(jboolean)b {
  isMathML__ = b;
}

- (void)setFormulaTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)st {
  isMathML__ = [((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(st)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()];
}

- (void)setAbsoluteScreenLocWithInt:(jint)x
                            withInt:(jint)y {
  labelOffsetX_ = x;
  labelOffsetY_ = y;
}

- (jint)getAbsoluteScreenLocX {
  return labelOffsetX_;
}

- (jint)getAbsoluteScreenLocY {
  return labelOffsetY_;
}

- (jdouble)getRealWorldLocX {
  if (startPoint_ == nil) return 0;
  return [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint_)) getInhomCoords])) getX];
}

- (jdouble)getRealWorldLocY {
  if (startPoint_ == nil) return 0;
  return [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint_)) getInhomCoords])) getY];
}

- (void)setRealWorldLocWithDouble:(jdouble)x
                       withDouble:(jdouble)y {
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> locPoint = [self getStartPoint];
  if (locPoint == nil) {
    locPoint = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_);
    @try {
      [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:locPoint];
    }
    @catch (JavaLangException *e) {
    }
  }
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(locPoint)) setCoordsWithDouble:x withDouble:y withDouble:1.0];
  labelOffsetX_ = 0;
  labelOffsetY_ = 0;
}

- (void)setAbsoluteScreenLocActiveWithBoolean:(jboolean)flag {
  if (flag == hasAbsoluteScreenLocation_) return;
  hasAbsoluteScreenLocation_ = flag;
  if (flag) {
    if (startPoint_ != nil) {
      [((OrgGeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) unregisterLocateableWithOrgGeogebraCommonKernelLocateable:self];
      startPoint_ = nil;
    }
  }
  else {
    labelOffsetX_ = 0;
    labelOffsetY_ = 0;
  }
}

- (jboolean)isAbsoluteScreenLocActive {
  return hasAbsoluteScreenLocation_;
}

- (jboolean)isAbsoluteScreenLocateable {
  return YES;
}

- (jdouble)getFontSizeMultiplier {
  return fontSizeD_;
}

+ (jdouble)getRelativeFontSizeWithInt:(jint)index {
  return OrgGeogebraCommonKernelGeosGeoText_getRelativeFontSizeWithInt_(index);
}

+ (jint)getFontSizeIndexWithDouble:(jdouble)d {
  return OrgGeogebraCommonKernelGeosGeoText_getFontSizeIndexWithDouble_(d);
}

- (void)setFontSizeMultiplierWithDouble:(jdouble)d {
  fontSizeD_ = d;
}

- (jint)getFontStyle {
  return fontStyle_;
}

- (void)setFontStyleWithInt:(jint)fontStyle {
  self->fontStyle_ = fontStyle;
  if ((fontStyle & OrgGeogebraCommonAwtGFont_BOLD) != 0) lineThickness_ = OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_THICKNESS * 2;
  else lineThickness_ = OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_THICKNESS;
}

- (jint)getPrintDecimals {
  return printDecimals_;
}

- (jint)getPrintFigures {
  return printFigures_;
}

- (void)setPrintDecimalsWithInt:(jint)printDecimals
                    withBoolean:(jboolean)update {
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = [self getParentAlgorithm];
  if (algo != nil && update) {
    self->printDecimals_ = printDecimals;
    printFigures_ = -1;
    useSignificantFigures__ = NO;
    OrgGeogebraCommonKernelGeosGeoText_updateTemplate(self);
    OrgGeogebraCommonKernelGeosGeoText_updateTemplateAlgosWithOrgGeogebraCommonKernelAlgosAlgoElement_(self, algo);
  }
}

- (void)setPrintFiguresWithInt:(jint)printFigures
                   withBoolean:(jboolean)update {
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = [self getParentAlgorithm];
  if (algo != nil && update) {
    self->printFigures_ = printFigures;
    printDecimals_ = -1;
    useSignificantFigures__ = YES;
    OrgGeogebraCommonKernelGeosGeoText_updateTemplate(self);
    OrgGeogebraCommonKernelGeosGeoText_updateTemplateAlgosWithOrgGeogebraCommonKernelAlgosAlgoElement_(self, algo);
  }
}

- (void)updateTemplateAlgosWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algo {
  OrgGeogebraCommonKernelGeosGeoText_updateTemplateAlgosWithOrgGeogebraCommonKernelAlgosAlgoElement_(self, algo);
}

- (jboolean)useSignificantFigures {
  return useSignificantFigures__;
}

- (jboolean)isSerifFont {
  return serifFont_;
}

- (void)setSerifFontWithBoolean:(jboolean)serifFont {
  self->serifFont_ = serifFont;
}

- (void)calculateCornerPointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)result
                                                            withInt:(jint)n {
  if (hasAbsoluteScreenLocation_ || boundingBox_ == nil) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setUndefined];
    return;
  }
  switch (n) {
    case 4:
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setCoordsWithDouble:[((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk(boundingBox_)) getX] withDouble:[boundingBox_ getY] withDouble:1.0];
    break;
    case 3:
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setCoordsWithDouble:[((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk(boundingBox_)) getX] + [boundingBox_ getWidth] withDouble:[boundingBox_ getY] withDouble:1.0];
    break;
    case 2:
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setCoordsWithDouble:[((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk(boundingBox_)) getX] + [boundingBox_ getWidth] withDouble:[boundingBox_ getY] + [boundingBox_ getHeight] withDouble:1.0];
    break;
    case 1:
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setCoordsWithDouble:[((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk(boundingBox_)) getX] withDouble:[boundingBox_ getY] + [boundingBox_ getHeight] withDouble:1.0];
    break;
    default:
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setUndefined];
  }
}

- (id<OrgGeogebraCommonAwtGRectangle2D>)getBoundingBox {
  return boundingBox_;
}

- (void)setBoundingBoxWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)w
                      withDouble:(jdouble)h {
  jboolean firstTime = boundingBox_ == nil;
  if (firstTime) {
    boundingBox_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangle2D];
  }
  [((id<OrgGeogebraCommonAwtGRectangle2D>) nil_chk(boundingBox_)) setRectWithDouble:x withDouble:y withDouble:w withDouble:h];
}

- (jboolean)isNeedsUpdatedBoundingBox {
  return needsUpdatedBoundingBox_;
}

- (void)setNeedsUpdatedBoundingBoxWithBoolean:(jboolean)needsUpdatedBoundingBox {
  self->needsUpdatedBoundingBox_ = needsUpdatedBoundingBox;
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (str_ == nil) return NO;
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText]) return [((NSString *) nil_chk(str_)) isEqual:((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class]))->str_];
  return NO;
}

- (void)setZero {
  str_ = @"";
}

+ (id<JavaUtilComparator>)getComparator {
  return OrgGeogebraCommonKernelGeosGeoText_getComparator();
}

- (void)updateTemplate {
  OrgGeogebraCommonKernelGeosGeoText_updateTemplate(self);
}

- (jboolean)isAlwaysFixed {
  return alwaysFixed_;
}

- (jboolean)isAuxiliaryObjectByDefault {
  return YES;
}

- (jboolean)justFontSize {
  return NO;
}

- (jboolean)isRedefineable {
  return YES;
}

- (jboolean)isLaTeXDrawableGeo {
  return [self isLaTeX] || (OrgGeogebraCommonKernelGeosGeoText_getTextString(self) != nil && [((NSString *) nil_chk(OrgGeogebraCommonKernelGeosGeoText_getTextString(self))) indexOf:'_'] != -1);
}

- (jboolean)hasDrawable3D {
  return YES;
}

- (jboolean)hasBackgroundColor {
  return YES;
}

- (OrgGeogebraCommonKernelStringTemplate *)getStringTemplate {
  if (linkedText_ == nil) return tpl_;
  return [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(linkedText_)) getStringTemplate];
}

- (void)setSpreadsheetTraceableWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)leftTree
                              withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)value {
  self->spreadsheetTraceableLeftTree_ = leftTree;
  self->spreadsheetTraceableValue_ = value;
}

- (void)initSpreadsheetTraceableCase {
  spreadsheetTraceableCase_ = OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_get_SPREADSHEET_TRACEABLE_NOT_TESTED();
}

- (jboolean)isSpreadsheetTraceable {
  {
    OrgGeogebraCommonKernelAlgosAlgoElement *algo;
    switch ([spreadsheetTraceableCase_ ordinal]) {
      case OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_TRUE:
      return YES;
      case OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_FALSE:
      return NO;
      case OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_NOT_TESTED:
      algo = [self getParentAlgorithm];
      if (algo != nil && ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoDependentText class]])) {
        [((OrgGeogebraCommonKernelAlgosAlgoDependentText *) check_class_cast(algo, [OrgGeogebraCommonKernelAlgosAlgoDependentText class])) setSpreadsheetTraceableText];
        if (spreadsheetTraceableLeftTree_ != nil) {
          spreadsheetTraceableCase_ = OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_get_SPREADSHEET_TRACEABLE_TRUE();
          if (spreadsheetTraceableValue_ == nil) traceModes_ = OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONLY_COPY();
          else traceModes_ = OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONE_VALUE_OR_COPY();
          return YES;
        }
      }
      spreadsheetTraceableCase_ = OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_get_SPREADSHEET_TRACEABLE_TRUE();
      traceModes_ = OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONLY_COPY();
      return YES;
      default:
      return NO;
    }
  }
}

- (void)updateColumnHeadingsForTraceValues {
  [self resetSpreadsheetColumnHeadings];
  OrgGeogebraCommonKernelGeosGeoText *text = [self getColumnHeadingTextWithOrgGeogebraCommonKernelArithmeticExpressionNode:spreadsheetTraceableLeftTree_];
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text)) setLaTeXWithBoolean:self->isLaTeXorMathML_ withBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(spreadsheetColumnHeadings_)) addWithId:text];
}

- (void)addToSpreadsheetTraceListWithJavaUtilArrayList:(JavaUtilArrayList *)spreadsheetTraceList {
  OrgGeogebraCommonKernelGeosGeoNumeric *numeric = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(spreadsheetTraceableValue_)) evaluateDouble]);
  [((JavaUtilArrayList *) nil_chk(spreadsheetTraceList)) addWithId:numeric];
}

- (OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)getTraceModes {
  return traceModes_;
}

+ (void)appendFontTagWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                   withBoolean:(jboolean)serifFont
                                    withDouble:(jdouble)fontSizeD
                                       withInt:(jint)fontStyle
                                   withBoolean:(jboolean)isLaTeX
                  withOrgGeogebraCommonMainApp:(OrgGeogebraCommonMainApp *)app {
  OrgGeogebraCommonKernelGeosGeoText_appendFontTagWithJavaLangStringBuilder_withBoolean_withDouble_withInt_withBoolean_withOrgGeogebraCommonMainApp_(sb, serifFont, fontSizeD, fontStyle, isLaTeX, app);
}

- (jboolean)isPinnable {
  return YES;
}

- (void)updateLocation {
  [self updateGeo];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateLocationWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

- (void)updateVisualStyle {
  [super updateVisualStyle];
  JavaUtilArrayList *algosTextCorner = new_JavaUtilArrayList_init();
  for (OrgGeogebraCommonKernelAlgosAlgoElement * __strong algo in nil_chk([self getAlgorithmList])) {
    if ([algo isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoTextCorner class]]) [algosTextCorner addWithId:algo];
  }
  OrgGeogebraCommonKernelAlgosAlgoElement_updateCascadeAlgosWithJavaUtilArrayList_(algosTextCorner);
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (jboolean)isVisibleInView3DNotSet {
  if ([self isVisibleInViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN] && ![self hasAbsoluteLocation]) {
    visibleInView3D_ = OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_get_TRUE();
    return YES;
  }
  visibleInView3D_ = OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_get_FALSE();
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoText", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withNSString:", "GeoText", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:", "GeoText", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoText:", "GeoText", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:", "setVisualStyle", "V", 0x1, NULL, NULL },
    { "setTextStringWithNSString:", "setTextString", "V", 0x11, NULL, NULL },
    { "getTextString", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "initStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "initStartPoint", "V", 0x1, NULL, NULL },
    { "setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "setStartPoint", "V", 0x1, "Lorg.geogebra.common.kernel.CircularDefinitionException;", NULL },
    { "removeStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "removeStartPoint", "V", 0x1, NULL, NULL },
    { "setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "setStartPoint", "V", 0x1, "Lorg.geogebra.common.kernel.CircularDefinitionException;", NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "getStartPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getStartPoints", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "hasAbsoluteLocation", NULL, "Z", 0x1, NULL, NULL },
    { "setWaitForStartPoint", NULL, "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "isMoveable", NULL, "Z", 0x1, NULL, NULL },
    { "setIsTextCommandWithBoolean:", "setIsTextCommand", "V", 0x1, NULL, NULL },
    { "isTextCommand", NULL, "Z", 0x1, NULL, NULL },
    { "isLaTeXTextCommand", NULL, "Z", 0x1, NULL, NULL },
    { "setAlgoMacroOutputWithBoolean:", "setAlgoMacroOutput", "V", 0x1, NULL, NULL },
    { "addTextDescendantWithOrgGeogebraCommonKernelGeosGeoText:", "addTextDescendant", "V", 0x1, NULL, NULL },
    { "setAlwaysFixedWithBoolean:", "setAlwaysFixed", "V", 0x1, NULL, NULL },
    { "isFixable", NULL, "Z", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToText", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoText", NULL, "Z", 0x1, NULL, NULL },
    { "getText", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyStringBuffer;", 0x1, NULL, NULL },
    { "getXMLWithBoolean:withJavaLangStringBuilder:", "getXML", "V", 0x11, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getXMLlocation", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "setAllVisualPropertiesExceptEuclidianVisibleWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "setAllVisualPropertiesExceptEuclidianVisible", "V", 0x1, NULL, NULL },
    { "setSameLocationWithOrgGeogebraCommonKernelGeosGeoText:", "setSameLocation", "V", 0x2, NULL, NULL },
    { "isLaTeX", NULL, "Z", 0x1, NULL, NULL },
    { "setLaTeXWithBoolean:withBoolean:", "setLaTeX", "V", 0x1, NULL, NULL },
    { "isMathML", NULL, "Z", 0x1, NULL, NULL },
    { "setMathMLWithBoolean:", "setMathML", "V", 0x1, NULL, NULL },
    { "setFormulaTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:", "setFormulaType", "V", 0x1, NULL, NULL },
    { "setAbsoluteScreenLocWithInt:withInt:", "setAbsoluteScreenLoc", "V", 0x1, NULL, NULL },
    { "getAbsoluteScreenLocX", NULL, "I", 0x1, NULL, NULL },
    { "getAbsoluteScreenLocY", NULL, "I", 0x1, NULL, NULL },
    { "getRealWorldLocX", NULL, "D", 0x1, NULL, NULL },
    { "getRealWorldLocY", NULL, "D", 0x1, NULL, NULL },
    { "setRealWorldLocWithDouble:withDouble:", "setRealWorldLoc", "V", 0x1, NULL, NULL },
    { "setAbsoluteScreenLocActiveWithBoolean:", "setAbsoluteScreenLocActive", "V", 0x1, NULL, NULL },
    { "isAbsoluteScreenLocActive", NULL, "Z", 0x1, NULL, NULL },
    { "isAbsoluteScreenLocateable", NULL, "Z", 0x1, NULL, NULL },
    { "getFontSizeMultiplier", NULL, "D", 0x1, NULL, NULL },
    { "getRelativeFontSizeWithInt:", "getRelativeFontSize", "D", 0x9, NULL, NULL },
    { "getFontSizeIndexWithDouble:", "getFontSizeIndex", "I", 0x9, NULL, NULL },
    { "setFontSizeMultiplierWithDouble:", "setFontSizeMultiplier", "V", 0x1, NULL, NULL },
    { "getFontStyle", NULL, "I", 0x1, NULL, NULL },
    { "setFontStyleWithInt:", "setFontStyle", "V", 0x1, NULL, NULL },
    { "getPrintDecimals", NULL, "I", 0x11, NULL, NULL },
    { "getPrintFigures", NULL, "I", 0x11, NULL, NULL },
    { "setPrintDecimalsWithInt:withBoolean:", "setPrintDecimals", "V", 0x1, NULL, NULL },
    { "setPrintFiguresWithInt:withBoolean:", "setPrintFigures", "V", 0x1, NULL, NULL },
    { "updateTemplateAlgosWithOrgGeogebraCommonKernelAlgosAlgoElement:", "updateTemplateAlgos", "V", 0x2, NULL, NULL },
    { "useSignificantFigures", NULL, "Z", 0x1, NULL, NULL },
    { "isSerifFont", NULL, "Z", 0x1, NULL, NULL },
    { "setSerifFontWithBoolean:", "setSerifFont", "V", 0x1, NULL, NULL },
    { "calculateCornerPointWithOrgGeogebraCommonKernelGeosGeoPoint:withInt:", "calculateCornerPoint", "V", 0x1, NULL, NULL },
    { "getBoundingBox", NULL, "Lorg.geogebra.common.awt.GRectangle2D;", 0x1, NULL, NULL },
    { "setBoundingBoxWithDouble:withDouble:withDouble:withDouble:", "setBoundingBox", "V", 0x1, NULL, NULL },
    { "isNeedsUpdatedBoundingBox", NULL, "Z", 0x11, NULL, NULL },
    { "setNeedsUpdatedBoundingBoxWithBoolean:", "setNeedsUpdatedBoundingBox", "V", 0x11, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x11, NULL, NULL },
    { "setZero", NULL, "V", 0x1, NULL, NULL },
    { "getComparator", NULL, "Ljava.util.Comparator;", 0x9, NULL, NULL },
    { "updateTemplate", NULL, "V", 0x2, NULL, NULL },
    { "isAlwaysFixed", NULL, "Z", 0x1, NULL, NULL },
    { "isAuxiliaryObjectByDefault", NULL, "Z", 0x11, NULL, NULL },
    { "justFontSize", NULL, "Z", 0x1, NULL, NULL },
    { "isRedefineable", NULL, "Z", 0x1, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "hasBackgroundColor", NULL, "Z", 0x1, NULL, NULL },
    { "getStringTemplate", NULL, "Lorg.geogebra.common.kernel.StringTemplate;", 0x1, NULL, NULL },
    { "setSpreadsheetTraceableWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticExpressionValue:", "setSpreadsheetTraceable", "V", 0x1, NULL, NULL },
    { "initSpreadsheetTraceableCase", NULL, "V", 0x1, NULL, NULL },
    { "isSpreadsheetTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "updateColumnHeadingsForTraceValues", NULL, "V", 0x1, NULL, NULL },
    { "addToSpreadsheetTraceListWithJavaUtilArrayList:", "addToSpreadsheetTraceList", "V", 0x1, NULL, NULL },
    { "getTraceModes", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$TraceModesEnum;", 0x1, NULL, NULL },
    { "appendFontTagWithJavaLangStringBuilder:withBoolean:withDouble:withInt:withBoolean:withOrgGeogebraCommonMainApp:", "appendFontTag", "V", 0x9, NULL, NULL },
    { "isPinnable", NULL, "Z", 0x1, NULL, NULL },
    { "updateLocation", NULL, "V", 0x1, NULL, NULL },
    { "updateVisualStyle", NULL, "V", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
    { "isVisibleInView3DNotSet", NULL, "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "str_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "startPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "isLaTeXorMathML_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isMathML__", "isMathML", 0x2, "Z", NULL, NULL,  },
    { "boundingBox_", NULL, 0x2, "Lorg.geogebra.common.awt.GRectangle2D;", NULL, NULL,  },
    { "needsUpdatedBoundingBox_", NULL, 0x2, "Z", NULL, NULL,  },
    { "serifFont_", NULL, 0x2, "Z", NULL, NULL,  },
    { "fontStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "fontSizeD_", NULL, 0x2, "D", NULL, NULL,  },
    { "printDecimals_", NULL, 0x2, "I", NULL, NULL,  },
    { "printFigures_", NULL, 0x2, "I", NULL, NULL,  },
    { "useSignificantFigures__", "useSignificantFigures", 0x2, "Z", NULL, NULL,  },
    { "FONTSIZE_EXTRA_SMALL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_EXTRA_SMALL },
    { "FONTSIZE_VERY_SMALL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_VERY_SMALL },
    { "FONTSIZE_SMALL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_SMALL },
    { "FONTSIZE_MEDIUM_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_MEDIUM },
    { "FONTSIZE_LARGE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_LARGE },
    { "FONTSIZE_VERY_LARGE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_VERY_LARGE },
    { "FONTSIZE_EXTRA_LARGE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_EXTRA_LARGE },
    { "hasAbsoluteScreenLocation_", NULL, 0x2, "Z", NULL, NULL,  },
    { "sbToString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "isTextCommand__", "isTextCommand", 0x1, "Z", NULL, NULL,  },
    { "alwaysFixed_", NULL, 0x0, "Z", NULL, NULL,  },
    { "tpl_", NULL, 0x2, "Lorg.geogebra.common.kernel.StringTemplate;", NULL, NULL,  },
    { "linkedText_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "comparator_", NULL, 0xa, "Ljava.util.Comparator;", &OrgGeogebraCommonKernelGeosGeoText_comparator_, "Ljava/util/Comparator<Lorg/geogebra/common/kernel/geos/GeoText;>;",  },
    { "spreadsheetTraceableCase_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText$SpreadsheetTraceableCase;", NULL, NULL,  },
    { "spreadsheetTraceableValue_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "spreadsheetTraceableLeftTree_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "traceModes_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement$TraceModesEnum;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.geos.GeoText$SpreadsheetTraceableCase;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoText = { 2, "GeoText", "org.geogebra.common.kernel.geos", NULL, 0x1, 102, methods, 30, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoText;
}

@end

void OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoText *self, OrgGeogebraCommonKernelConstruction *c) {
  (void) OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->isMathML__ = NO;
  self->needsUpdatedBoundingBox_ = NO;
  self->fontSizeD_ = 1;
  self->printDecimals_ = -1;
  self->printFigures_ = -1;
  self->useSignificantFigures__ = NO;
  self->hasAbsoluteScreenLocation_ = NO;
  self->sbToString_ = new_JavaLangStringBuilder_initWithInt_(80);
  self->isTextCommand__ = NO;
  self->alwaysFixed_ = NO;
  self->tpl_ = OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_();
  self->spreadsheetTraceableCase_ = OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_get_SPREADSHEET_TRACEABLE_NOT_TESTED();
  [self setConstructionDefaults];
  [self setAuxiliaryObjectWithBoolean:YES];
}

OrgGeogebraCommonKernelGeosGeoText *new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoText *self = [OrgGeogebraCommonKernelGeosGeoText alloc];
  OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_withNSString_withNSString_(OrgGeogebraCommonKernelGeosGeoText *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, NSString *value) {
  (void) OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_withNSString_(self, c, value);
  [self setLabelWithNSString:label];
}

OrgGeogebraCommonKernelGeosGeoText *new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_withNSString_withNSString_(OrgGeogebraCommonKernelConstruction *c, NSString *label, NSString *value) {
  OrgGeogebraCommonKernelGeosGeoText *self = [OrgGeogebraCommonKernelGeosGeoText alloc];
  OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_withNSString_withNSString_(self, c, label, value);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_withNSString_(OrgGeogebraCommonKernelGeosGeoText *self, OrgGeogebraCommonKernelConstruction *c, NSString *value) {
  (void) OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  OrgGeogebraCommonKernelGeosGeoText_setTextStringWithNSString_(self, value);
}

OrgGeogebraCommonKernelGeosGeoText *new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_withNSString_(OrgGeogebraCommonKernelConstruction *c, NSString *value) {
  OrgGeogebraCommonKernelGeosGeoText *self = [OrgGeogebraCommonKernelGeosGeoText alloc];
  OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_withNSString_(self, c, value);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelGeosGeoText *self, OrgGeogebraCommonKernelGeosGeoText *text) {
  (void) OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(self, ((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text))->cons_);
  [self setWithOrgGeogebraCommonKernelGeosGeoElement:text];
}

OrgGeogebraCommonKernelGeosGeoText *new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelGeosGeoText *text) {
  OrgGeogebraCommonKernelGeosGeoText *self = [OrgGeogebraCommonKernelGeosGeoText alloc];
  OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelGeosGeoText_(self, text);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoText_setTextStringWithNSString_(OrgGeogebraCommonKernelGeosGeoText *self, NSString *text2) {
  NSString *text = text2 == nil ? @"" : text2;
  while (((jint) [text length]) > 1 && [text charAtWithInt:((jint) [text length]) - 1] == 0x000a) {
    text = [text substring:0 endIndex:((jint) [text length]) - 1];
  }
  if (self->isLaTeXorMathML_) {
    self->str_ = OrgGeogebraCommonUtilStringUtil_toLaTeXStringWithNSString_withBoolean_(text, NO);
  }
  else {
    self->str_ = [((NSString *) nil_chk(text)) replaceAll:@"\\\\\\\\n" withReplacement:@"\n"];
  }
}

NSString *OrgGeogebraCommonKernelGeosGeoText_getTextString(OrgGeogebraCommonKernelGeosGeoText *self) {
  return self->str_;
}

NSString *OrgGeogebraCommonKernelGeosGeoText_getXMLlocation(OrgGeogebraCommonKernelGeosGeoText *self) {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  if (self->hasAbsoluteScreenLocation_) {
    (void) [sb appendWithNSString:@"\t<absoluteScreenLocation "];
    (void) [sb appendWithNSString:@" x=\""];
    (void) [sb appendWithInt:self->labelOffsetX_];
    (void) [sb appendWithNSString:@"\""];
    (void) [sb appendWithNSString:@" y=\""];
    (void) [sb appendWithInt:self->labelOffsetY_];
    (void) [sb appendWithNSString:@"\""];
    (void) [sb appendWithNSString:@"/>\n"];
  }
  else {
    if (self->startPoint_ != nil) {
      (void) [sb appendWithNSString:[self->startPoint_ getStartPointXML]];
      if (self->labelOffsetX_ != 0 || self->labelOffsetY_ != 0) {
        (void) [sb appendWithNSString:@"\t<labelOffset"];
        (void) [sb appendWithNSString:@" x=\""];
        (void) [sb appendWithInt:self->labelOffsetX_];
        (void) [sb appendWithNSString:@"\""];
        (void) [sb appendWithNSString:@" y=\""];
        (void) [sb appendWithInt:self->labelOffsetY_];
        (void) [sb appendWithNSString:@"\""];
        (void) [sb appendWithNSString:@"/>\n"];
      }
    }
  }
  return [sb description];
}

void OrgGeogebraCommonKernelGeosGeoText_setSameLocationWithOrgGeogebraCommonKernelGeosGeoText_(OrgGeogebraCommonKernelGeosGeoText *self, OrgGeogebraCommonKernelGeosGeoText *text) {
  if (((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(text))->hasAbsoluteScreenLocation_) {
    [self setAbsoluteScreenLocActiveWithBoolean:YES];
    [self setAbsoluteScreenLocWithInt:[text getAbsoluteScreenLocX] withInt:[text getAbsoluteScreenLocY]];
  }
  else {
    if (text->startPoint_ != nil) {
      @try {
        [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:text->startPoint_];
      }
      @catch (JavaLangException *e) {
      }
    }
  }
}

jdouble OrgGeogebraCommonKernelGeosGeoText_getRelativeFontSizeWithInt_(jint index) {
  OrgGeogebraCommonKernelGeosGeoText_initialize();
  switch (index) {
    case OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_EXTRA_SMALL:
    return 0.5;
    case OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_VERY_SMALL:
    return 0.7;
    case OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_SMALL:
    return 1;
    default:
    case OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_MEDIUM:
    return 1.4;
    case OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_LARGE:
    return 2;
    case OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_VERY_LARGE:
    return 4;
    case OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_EXTRA_LARGE:
    return 8;
  }
}

jint OrgGeogebraCommonKernelGeosGeoText_getFontSizeIndexWithDouble_(jdouble d) {
  OrgGeogebraCommonKernelGeosGeoText_initialize();
  if (d <= 0.5) {
    return OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_EXTRA_SMALL;
  }
  if (d <= 0.8) {
    return OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_VERY_SMALL;
  }
  if (d <= 1) {
    return OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_SMALL;
  }
  if (d <= 1.5) {
    return OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_MEDIUM;
  }
  if (d <= 2) {
    return OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_LARGE;
  }
  if (d <= 4) {
    return OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_VERY_LARGE;
  }
  return OrgGeogebraCommonKernelGeosGeoText_FONTSIZE_EXTRA_LARGE;
}

void OrgGeogebraCommonKernelGeosGeoText_updateTemplateAlgosWithOrgGeogebraCommonKernelAlgosAlgoElement_(OrgGeogebraCommonKernelGeosGeoText *self, OrgGeogebraCommonKernelAlgosAlgoElement *algo) {
  if (algo == nil) return;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput]))->size_; i++) if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([algo getInput]), i))) isGeoText]) OrgGeogebraCommonKernelGeosGeoText_updateTemplateAlgosWithOrgGeogebraCommonKernelAlgosAlgoElement_(self, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([algo getInput]), i))) getParentAlgorithm]);
  [algo update];
}

id<JavaUtilComparator> OrgGeogebraCommonKernelGeosGeoText_getComparator() {
  OrgGeogebraCommonKernelGeosGeoText_initialize();
  if (OrgGeogebraCommonKernelGeosGeoText_comparator_ == nil) {
    OrgGeogebraCommonKernelGeosGeoText_comparator_ = new_OrgGeogebraCommonKernelGeosGeoText_$1_init();
  }
  return OrgGeogebraCommonKernelGeosGeoText_comparator_;
}

void OrgGeogebraCommonKernelGeosGeoText_updateTemplate(OrgGeogebraCommonKernelGeosGeoText *self) {
  OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *type = self->isLaTeXorMathML_ ? (self->isMathML__ ? OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML() : OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()) : OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA();
  if ([self useSignificantFigures] && self->printFigures_ > -1) {
    self->tpl_ = OrgGeogebraCommonKernelStringTemplate_printFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(type, self->printFigures_, NO);
  }
  else if (!self->useSignificantFigures__ && self->printDecimals_ > -1) {
    self->tpl_ = OrgGeogebraCommonKernelStringTemplate_printDecimalsWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(type, self->printDecimals_, NO);
  }
  else {
    self->tpl_ = OrgGeogebraCommonKernelStringTemplate_getWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(type);
  }
}

void OrgGeogebraCommonKernelGeosGeoText_appendFontTagWithJavaLangStringBuilder_withBoolean_withDouble_withInt_withBoolean_withOrgGeogebraCommonMainApp_(JavaLangStringBuilder *sb, jboolean serifFont, jdouble fontSizeD, jint fontStyle, jboolean isLaTeX, OrgGeogebraCommonMainApp *app) {
  OrgGeogebraCommonKernelGeosGeoText_initialize();
  if (serifFont || fontSizeD != 1 || fontStyle != 0 || isLaTeX) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<font serif=\""];
    (void) [sb appendWithBoolean:serifFont];
    (void) [sb appendWithNSString:@"\" sizeM=\""];
    (void) [sb appendWithDouble:fontSizeD];
    jdouble oldFontSize = [((OrgGeogebraCommonMainApp *) nil_chk(app)) getFontSize] * fontSizeD - [app getFontSize];
    if (oldFontSize > 0) {
      oldFontSize = JavaLangMath_ceilWithDouble_(oldFontSize);
    }
    else {
      oldFontSize = JavaLangMath_floorWithDouble_(oldFontSize);
    }
    (void) [sb appendWithNSString:@"\" size=\""];
    (void) [sb appendWithInt:J2ObjCFpToInt(oldFontSize)];
    (void) [sb appendWithNSString:@"\" style=\""];
    (void) [sb appendWithInt:fontStyle];
    (void) [sb appendWithNSString:@"\"/>\n"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoText)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum)

OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values_[3];

@implementation OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values() {
  OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values_ count:3 type:OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values();
}

+ (OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initialize();
  for (int i = 0; i < 3; i++) {
    OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *e = OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum class]) {
    OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_NOT_TESTED = new_OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(@"SPREADSHEET_TRACEABLE_NOT_TESTED", 0);
    OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_TRUE = new_OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(@"SPREADSHEET_TRACEABLE_TRUE", 1);
    OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_FALSE = new_OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(@"SPREADSHEET_TRACEABLE_FALSE", 2);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "SPREADSHEET_TRACEABLE_NOT_TESTED", "SPREADSHEET_TRACEABLE_NOT_TESTED", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoText$SpreadsheetTraceableCase;", &OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_NOT_TESTED, NULL,  },
    { "SPREADSHEET_TRACEABLE_TRUE", "SPREADSHEET_TRACEABLE_TRUE", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoText$SpreadsheetTraceableCase;", &OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_TRUE, NULL,  },
    { "SPREADSHEET_TRACEABLE_FALSE", "SPREADSHEET_TRACEABLE_FALSE", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoText$SpreadsheetTraceableCase;", &OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_FALSE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.geos.GeoText$SpreadsheetTraceableCase;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum = { 2, "SpreadsheetTraceableCase", "org.geogebra.common.kernel.geos", "GeoText", 0x401a, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/kernel/geos/GeoText$SpreadsheetTraceableCase;>;" };
  return &_OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum;
}

@end

void OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *self, NSString *__name, jint __ordinal) {
  (void) JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *new_OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *self = [OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum alloc];
  OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum)

@implementation OrgGeogebraCommonKernelGeosGeoText_$1

- (jint)compareWithId:(OrgGeogebraCommonKernelGeosGeoText *)itemA
               withId:(OrgGeogebraCommonKernelGeosGeoText *)itemB {
  OrgGeogebraCommonUtilNormalizerMinimal *noramlizer = [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(itemA)) getKernel])) getApplication])) getNormalizer];
  NSString *strA = [((OrgGeogebraCommonUtilNormalizerMinimal *) nil_chk(noramlizer)) transformWithNSString:OrgGeogebraCommonKernelGeosGeoText_getTextString(itemA)];
  NSString *strB = [noramlizer transformWithNSString:OrgGeogebraCommonKernelGeosGeoText_getTextString(nil_chk(itemB))];
  jint comp = [((NSString *) nil_chk(strA)) compareToWithId:strB];
  if (comp == 0) {
    comp = [((NSString *) nil_chk(OrgGeogebraCommonKernelGeosGeoText_getTextString(itemA))) compareToWithId:OrgGeogebraCommonKernelGeosGeoText_getTextString(itemB)];
  }
  if (comp == 0) return [itemA getConstructionIndex] > [itemB getConstructionIndex] ? -1 : 1;
  return comp;
}

- (instancetype)init {
  OrgGeogebraCommonKernelGeosGeoText_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelGeosGeoText", "getComparator" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoText_$1 = { 2, "", "org.geogebra.common.kernel.geos", "GeoText", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Comparator<Lorg/geogebra/common/kernel/geos/GeoText;>;" };
  return &_OrgGeogebraCommonKernelGeosGeoText_$1;
}

@end

void OrgGeogebraCommonKernelGeosGeoText_$1_init(OrgGeogebraCommonKernelGeosGeoText_$1 *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelGeosGeoText_$1 *new_OrgGeogebraCommonKernelGeosGeoText_$1_init() {
  OrgGeogebraCommonKernelGeosGeoText_$1 *self = [OrgGeogebraCommonKernelGeosGeoText_$1 alloc];
  OrgGeogebraCommonKernelGeosGeoText_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoText_$1)
