//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/geos/GeoPolyLine.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/PathMover.h"
#include "org/geogebra/common/kernel/PathMoverGeneric.h"
#include "org/geogebra/common/kernel/PathParameter.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@interface OrgGeogebraCommonKernelGeosGeoPolyLine () {
 @public
  jboolean defined_;
  JavaLangStringBuilder *sbToString_;
  OrgGeogebraCommonKernelGeosGeoSegment *seg_;
  jboolean trace_;
}

- (void)setSegmentPointsWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)geoPoint
                        withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)geoPoint2;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoPolyLine, sbToString_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoPolyLine, seg_, OrgGeogebraCommonKernelGeosGeoSegment *)

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelGeosGeoPolyLine_getLength(OrgGeogebraCommonKernelGeosGeoPolyLine *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoPolyLine_setSegmentPointsWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelGeosGeoPolyLine *self, OrgGeogebraCommonKernelGeosGeoPoint *geoPoint, OrgGeogebraCommonKernelGeosGeoPoint *geoPoint2);

@implementation OrgGeogebraCommonKernelGeosGeoPolyLine

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
         withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, cons, label, points);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label {
  OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_(self, cons, label);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
         withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, cons, points);
  return self;
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_POLYLINE();
}

- (jint)getNumPoints {
  return ((IOSObjectArray *) nil_chk(points_))->size_;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, OrgGeogebraCommonKernelGeosGeoPolyLine_getLength(self)) autorelease];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copyInternalWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1 {
  OrgGeogebraCommonKernelGeosGeoPolyLine *ret = [new_OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
  OrgGeogebraCommonKernelGeosGeoPolyLine_set_points_(ret, OrgGeogebraCommonKernelGeosGeoElement_copyPointsWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons1, points_));
  [ret setWithOrgGeogebraCommonKernelGeosGeoElement:self];
  return ret;
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelGeosGeoPolyLine *poly = (OrgGeogebraCommonKernelGeosGeoPolyLine *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPolyLine class]);
  length_ = ((OrgGeogebraCommonKernelGeosGeoPolyLine *) nil_chk(poly))->length_;
  defined_ = poly->defined_;
  if (((IOSObjectArray *) nil_chk(points_))->size_ != poly->points_->size_) {
    IOSObjectArray *tempPoints = [IOSObjectArray arrayWithLength:poly->points_->size_ type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
    for (jint i = 0; i < tempPoints->size_; i++) {
      IOSObjectArray_Set(tempPoints, i, i < points_->size_ ? ((id) IOSObjectArray_Get(points_, i)) : [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease]);
    }
    OrgGeogebraCommonKernelGeosGeoPolyLine_set_points_(self, tempPoints);
  }
  for (jint i = 0; i < points_->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, i), [OrgGeogebraCommonKernelGeosGeoPoint class])))) setWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(poly->points_, i)];
  }
}

- (jboolean)isFillable {
  return NO;
}

- (jboolean)isDefined {
  return defined_;
}

- (void)setDefined {
  defined_ = YES;
}

- (void)setUndefined {
  defined_ = NO;
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return NO;
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  [sbToString_ appendWithNSString:label_];
  [sbToString_ appendWithNSString:@" = "];
  [sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:OrgGeogebraCommonKernelGeosGeoPolyLine_getLength(self) withOrgGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString_ description];
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:OrgGeogebraCommonKernelGeosGeoPolyLine_getLength(self) withOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)getNumber {
  return [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, OrgGeogebraCommonKernelGeosGeoPolyLine_getLength(self)) autorelease];
}

- (jdouble)getLength {
  return OrgGeogebraCommonKernelGeosGeoPolyLine_getLength(self);
}

- (jdouble)getDouble {
  return OrgGeogebraCommonKernelGeosGeoPolyLine_getLength(self);
}

- (jboolean)showInEuclidianView {
  return defined_;
}

- (jboolean)isNumberValue {
  return YES;
}

- (jboolean)isGeoPolygon {
  return NO;
}

- (jboolean)isGeoPolyLine {
  return YES;
}

- (jboolean)isPath {
  return YES;
}

- (id<OrgGeogebraCommonKernelPathMover>)createPathMover {
  return [new_OrgGeogebraCommonKernelPathMoverGeneric_initWithOrgGeogebraCommonKernelPath_(self) autorelease];
}

- (jdouble)getMaxParameter {
  return ((IOSObjectArray *) nil_chk(points_))->size_ - 1;
}

- (jdouble)getMinParameter {
  return 0;
}

- (jboolean)isClosedPath {
  if (![self isDefined]) {
    return NO;
  }
  return IOSObjectArray_Get(nil_chk(points_), 0) == IOSObjectArray_Get(points_, points_->size_ - 1);
}

- (jboolean)isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI
                                                       withDouble:(jdouble)eps {
  OrgGeogebraCommonKernelGeosGeoPoint *P = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(PI, [OrgGeogebraCommonKernelGeosGeoPoint class]);
  if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getPath] == self) return YES;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_ - 1; i++) {
    OrgGeogebraCommonKernelGeosGeoPolyLine_setSegmentPointsWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, i), [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, i + 1), [OrgGeogebraCommonKernelGeosGeoPoint class]));
    if ([((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(seg_)) isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:P withDouble:eps]) return YES;
  }
  return NO;
}

- (void)pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI]) {
    [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI];
    return;
  }
  OrgGeogebraCommonKernelGeosGeoPoint *P = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(PI, [OrgGeogebraCommonKernelGeosGeoPoint class]);
  jint index;
  OrgGeogebraCommonKernelPathParameter *pp = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getPathParameter];
  if (((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ == ((IOSObjectArray *) nil_chk(points_))->size_ - 1) {
    index = points_->size_ - 2;
  }
  else {
    pp->t_ = fmod(pp->t_, (points_->size_ - 1));
    if (pp->t_ < 0) pp->t_ += (points_->size_ - 1);
    index = J2ObjCFpToInt(JavaLangMath_floorWithDouble_(pp->t_));
  }
  OrgGeogebraCommonKernelGeosGeoPolyLine_setSegmentPointsWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, index), [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, index + 1), [OrgGeogebraCommonKernelGeosGeoPoint class]));
  jdouble segParameter = pp->t_ - index;
  P->x_ = [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(seg_)) getPointXWithDouble:segParameter];
  P->y_ = [seg_ getPointYWithDouble:segParameter];
  P->z_ = 1.0;
}

- (void)pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  OrgGeogebraCommonKernelGeosGeoPoint *P = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(PI, [OrgGeogebraCommonKernelGeosGeoPoint class]);
  jdouble qx = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P))->x_ / P->z_;
  jdouble qy = P->y_ / P->z_;
  jdouble minDist = JavaLangDouble_POSITIVE_INFINITY;
  jdouble resx = 0, resy = 0, resz = 0, param = 0;
  OrgGeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_ - 1; i++) {
    P->x_ = qx;
    P->y_ = qy;
    P->z_ = 1;
    OrgGeogebraCommonKernelGeosGeoPolyLine_setSegmentPointsWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, i), [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, i + 1), [OrgGeogebraCommonKernelGeosGeoPoint class]));
    [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(seg_)) pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    jdouble x = P->x_ / P->z_ - qx;
    jdouble y = P->y_ / P->z_ - qy;
    jdouble dist = x * x + y * y;
    if (dist < minDist) {
      minDist = dist;
      resx = P->x_;
      resy = P->y_;
      resz = P->z_;
      param = i + ((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_;
    }
  }
  P->x_ = resx;
  P->y_ = resy;
  P->z_ = resz;
  ((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ = param;
}

- (void)setSegmentPointsWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)geoPoint
                        withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)geoPoint2 {
  OrgGeogebraCommonKernelGeosGeoPolyLine_setSegmentPointsWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, geoPoint, geoPoint2);
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [self getLineStyleXMLWithJavaLangStringBuilder:sb];
  [self getXMLvisualTagsWithJavaLangStringBuilder:sb];
  [self getXMLanimationTagsWithJavaLangStringBuilder:sb];
  [self getXMLfixedTagWithJavaLangStringBuilder:sb];
  [self getAuxiliaryXMLWithJavaLangStringBuilder:sb];
  [self getBreakpointXMLWithJavaLangStringBuilder:sb];
  [self getScriptTagsWithJavaLangStringBuilder:sb];
}

- (IOSObjectArray *)getPoints {
  return points_;
}

- (IOSObjectArray *)getPointsND {
  return points_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getPointNDWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(points_), i);
}

- (void)calcLength {
  if (points_ == nil || points_->size_ == 0) {
    [self setUndefined];
    length_ = JavaLangDouble_NaN;
    return;
  }
  length_ = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_ - 1; i++) {
    if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, i), [OrgGeogebraCommonKernelGeosGeoPoint class])))) isDefined] || ![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, i + 1), [OrgGeogebraCommonKernelGeosGeoPoint class])))) isDefined]) {
      continue;
    }
    OrgGeogebraCommonKernelGeosGeoPolyLine_setSegmentPointsWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, i), [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, i + 1), [OrgGeogebraCommonKernelGeosGeoPoint class]));
    length_ += [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(seg_)) getLength];
  }
  [self setDefined];
}

- (void)setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  OrgGeogebraCommonKernelGeosGeoPolyLine_set_points_(self, points);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, i), [OrgGeogebraCommonKernelGeosGeoPoint class])))) rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:r];
  }
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)S {
  OrgGeogebraCommonKernelMatrixCoords *sCoords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(S)) getInhomCoords];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, i), [OrgGeogebraCommonKernelGeosGeoPoint class])))) rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:r withOrgGeogebraCommonKernelMatrixCoords:sCoords];
  }
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11 {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, i), [OrgGeogebraCommonKernelGeosGeoPoint class])))) matrixTransformWithDouble:a00 withDouble:a01 withDouble:a10 withDouble:a11];
  }
  [self calcLength];
}

- (void)translateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) translateWithOrgGeogebraCommonKernelMatrixCoords:v];
  }
}

- (void)dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)S {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:r withOrgGeogebraCommonKernelMatrixCoords:S];
  }
  [self calcLength];
}

- (void)mirrorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)Q {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) mirrorWithOrgGeogebraCommonKernelMatrixCoords:Q];
  }
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:g];
  }
}

- (jboolean)isAllVertexLabelsSet {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) {
    if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, i), [OrgGeogebraCommonKernelGeosGeoPoint class])))) isLabelSet]) return NO;
  }
  return YES;
}

- (jboolean)isVertexCountFixed {
  if (((IOSObjectArray *) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([self getParentAlgorithm])) getInput]))->size_ < 3) return NO;
  return YES;
}

- (jboolean)isTraceable {
  return YES;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (jboolean)getTrace {
  return trace_;
}

- (jboolean)hasLineOpacity {
  return YES;
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points_, i), [OrgGeogebraCommonKernelGeosGeoPoint class])))) matrixTransformWithDouble:a00 withDouble:a01 withDouble:a02 withDouble:a10 withDouble:a11 withDouble:a12 withDouble:a20 withDouble:a21 withDouble:a22];
  }
  [self calcLength];
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getPointWithInt:(jint)i {
  return (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(points_), i), [OrgGeogebraCommonKernelGeosGeoPoint class]);
}

- (void)toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)curve {
  [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve)) setFromPolyLineWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points_ withBoolean:NO];
}

- (id<OrgGeogebraCommonKernelPath>)getBoundary {
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (void)dealloc {
  RELEASE_(points_);
  RELEASE_(sbToString_);
  RELEASE_(seg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "GeoPolyLine", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoPolyLine", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:", "GeoPolyLine", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "GeoPolyLine", NULL, 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "getNumPoints", NULL, "I", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "copyInternalWithOrgGeogebraCommonKernelConstruction:", "copyInternal", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setDefined", NULL, "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x11, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getNumber", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x1, NULL, NULL },
    { "getLength", NULL, "D", 0x11, NULL, NULL },
    { "getDouble", NULL, "D", 0x11, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoPolygon", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoPolyLine", NULL, "Z", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lorg.geogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "setSegmentPointsWithOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "setSegmentPoints", "V", 0x2, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getPoints", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x11, NULL, NULL },
    { "getPointsND", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getPointNDWithInt:", "getPointND", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "calcLength", NULL, "V", 0x1, NULL, NULL },
    { "setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "setPoints", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "translateWithOrgGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "isAllVertexLabelsSet", NULL, "Z", 0x1, NULL, NULL },
    { "isVertexCountFixed", NULL, "Z", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "hasLineOpacity", NULL, "Z", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "getPointWithInt:", "getPoint", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:", "toGeoCurveCartesian", "V", 0x1, NULL, NULL },
    { "getBoundary", NULL, "Lorg.geogebra.common.kernel.Path;", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "POLYLINE_MAX_POINTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoPolyLine_POLYLINE_MAX_POINTS },
    { "points_", NULL, 0x4, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "length_", NULL, 0x4, "D", NULL, NULL,  },
    { "defined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "sbToString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "seg_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoSegment;", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoPolyLine = { 2, "GeoPolyLine", "org.geogebra.common.kernel.geos", NULL, 0x1, 57, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoPolyLine;
}

@end

void OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonKernelGeosGeoPolyLine *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, IOSObjectArray *points) {
  OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, cons, points);
  [self setLabelWithNSString:label];
}

OrgGeogebraCommonKernelGeosGeoPolyLine *new_OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, IOSObjectArray *points) {
  OrgGeogebraCommonKernelGeosGeoPolyLine *self = [OrgGeogebraCommonKernelGeosGeoPolyLine alloc];
  OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, cons, label, points);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoPolyLine *self, OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->defined_ = NO;
  OrgGeogebraCommonKernelGeosGeoPolyLine_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  OrgGeogebraCommonKernelGeosGeoPolyLine_setAndConsume_seg_(self, new_OrgGeogebraCommonKernelGeosGeoSegment_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  OrgGeogebraCommonKernelGeosGeoPolyLine_setAndConsume_points_(self, [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()]);
  [self setConstructionDefaults];
}

OrgGeogebraCommonKernelGeosGeoPolyLine *new_OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelGeosGeoPolyLine *self = [OrgGeogebraCommonKernelGeosGeoPolyLine alloc];
  OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_(OrgGeogebraCommonKernelGeosGeoPolyLine *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label) {
  OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  [self setLabelWithNSString:label];
}

OrgGeogebraCommonKernelGeosGeoPolyLine *new_OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_(OrgGeogebraCommonKernelConstruction *cons, NSString *label) {
  OrgGeogebraCommonKernelGeosGeoPolyLine *self = [OrgGeogebraCommonKernelGeosGeoPolyLine alloc];
  OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_(self, cons, label);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonKernelGeosGeoPolyLine *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *points) {
  OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->defined_ = NO;
  OrgGeogebraCommonKernelGeosGeoPolyLine_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  OrgGeogebraCommonKernelGeosGeoPolyLine_setAndConsume_seg_(self, new_OrgGeogebraCommonKernelGeosGeoSegment_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
  OrgGeogebraCommonKernelGeosGeoPolyLine_set_points_(self, points);
  [self setConstructionDefaults];
}

OrgGeogebraCommonKernelGeosGeoPolyLine *new_OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *points) {
  OrgGeogebraCommonKernelGeosGeoPolyLine *self = [OrgGeogebraCommonKernelGeosGeoPolyLine alloc];
  OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, cons, points);
  return self;
}

jdouble OrgGeogebraCommonKernelGeosGeoPolyLine_getLength(OrgGeogebraCommonKernelGeosGeoPolyLine *self) {
  return self->length_;
}

void OrgGeogebraCommonKernelGeosGeoPolyLine_setSegmentPointsWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelGeosGeoPolyLine *self, OrgGeogebraCommonKernelGeosGeoPoint *geoPoint, OrgGeogebraCommonKernelGeosGeoPoint *geoPoint2) {
  [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(self->seg_)) setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:geoPoint];
  [self->seg_ setEndPointWithOrgGeogebraCommonKernelGeosGeoPoint:geoPoint2];
  OrgGeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoLine_(geoPoint, geoPoint2, self->seg_);
  [self->seg_ calcLength];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoPolyLine)
