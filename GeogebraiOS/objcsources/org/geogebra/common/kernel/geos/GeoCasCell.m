//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/geos/GeoCasCell.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/kernel/AlgoCasCellInterface.h"
#include "org/geogebra/common/kernel/CASException.h"
#include "org/geogebra/common/kernel/CASParserInterface.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/GeoGebraCasInterface.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/VarString.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgorithmSet.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/DrawInformationAlgo.h"
#include "org/geogebra/common/kernel/arithmetic/AssignmentType.h"
#include "org/geogebra/common/kernel/arithmetic/Command.h"
#include "org/geogebra/common/kernel/arithmetic/Equation.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/arithmetic3D/MyVec3DNode.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoDummyVariable.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoLocus.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/LabelManager.h"
#include "org/geogebra/common/kernel/geos/Test.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/parser/Parser.h"
#include "org/geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/plugin/script/GgbScript.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/Unicode.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonKernelGeosGeoCasCell () {
 @public
  OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum *assignmentType_;
  jboolean keepInputUsed_;
  OrgGeogebraCommonKernelArithmeticValidExpression *inputVE_, *evalVE_, *outputVE_;
  NSString *input_, *prefix_, *postfix_, *error_, *latex_;
  NSString *localizedInput_;
  NSString *currentLanguage_;
  jboolean suppressOutput__;
  JavaUtilTreeSet *invars_, *functionvars_;
  JavaUtilTreeSet *inGeos_;
  jboolean isCircularDefinition__;
  OrgGeogebraCommonKernelGeosGeoElement *twinGeo_;
  OrgGeogebraCommonKernelGeosGeoElement *lastOutputEvaluationGeo_;
  jboolean firstComputeOutput_;
  jboolean ignoreTwinGeoUpdate_;
  JavaUtilHashSet *commands_;
  NSString *assignmentVar_;
  jboolean includesRowReferences__;
  jboolean includesNumericCommand__;
  jboolean useGeoGebraFallback_;
  NSString *evalCmd_, *evalComment_;
  jint row_;
  jboolean useAsText_;
  OrgGeogebraCommonKernelGeosGeoText *commentText_;
  jboolean nativeOutput_;
  jboolean ignoreSetAssignment_;
  OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst_;
  OrgGeogebraCommonKernelArithmeticValidExpression *expandedEvalVE_;
  jboolean pointList_;
  NSString *tooltip_;
  jint SCREEN_WIDTH_;
}

- (jboolean)suppressOutput;

- (void)updateLocalizedInputWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                         withNSString:(NSString *)input1;

- (OrgGeogebraCommonKernelArithmeticValidExpression *)parseGeoGebraCASInputAndResolveDummyVarsWithNSString:(NSString *)inValue;

- (void)updateInputVariablesWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve;

+ (NSString *)getFunctionVariableWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve
                                                    withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel;

- (void)internalizeInput;

- (NSString *)localizeInputWithNSString:(NSString *)input1
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (void)setAssignmentVarWithNSString:(NSString *)var;

- (void)changeAssignmentVarWithNSString:(NSString *)oldLabel
                           withNSString:(NSString *)newLabel;

- (JavaUtilTreeSet *)getInVars;

- (JavaUtilTreeSet *)getFunctionVars;

- (void)clearInVars;

- (JavaUtilTreeSet *)updateInputGeoElementsWithJavaUtilTreeSet:(JavaUtilTreeSet *)inputVars;

- (OrgGeogebraCommonKernelArithmeticValidExpression *)resolveInputReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve
                                                                                                             withJavaUtilTreeSet:(JavaUtilTreeSet *)inputGeos;

+ (void)resolveFunctionVariableReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)outputVE;

- (void)resolveGeoElementReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)outVE;

- (void)createTwinGeoWithBoolean:(jboolean)allowFunction;

- (void)setEquationMode;

- (void)simpleUpdateTwinGeoWithBoolean:(jboolean)allowFunction;

- (OrgGeogebraCommonKernelGeosGeoElement *)silentEvalInGeoGebraWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve
                                                                                                        withBoolean:(jboolean)allowFunction;

- (void)computeOutputWithBoolean:(jboolean)doTwinGeoUpdate
                     withBoolean:(jboolean)allowFunction;

- (OrgGeogebraCommonKernelArithmeticValidExpression *)wrapPointListWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)arg;

- (OrgGeogebraCommonKernelArithmeticValidExpression *)wrapEvaluateWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)arg
                                                                                                           withBoolean:(jboolean)forceWrapping;

- (OrgGeogebraCommonKernelArithmeticValidExpression *)processSolveCommandWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve;

- (NSString *)lhsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)arg
                                                         withNSString:(NSString *)fallback;

- (void)finalizeComputationWithBoolean:(jboolean)success
                          withNSString:(NSString *)result
withOrgGeogebraCommonKernelCASException:(OrgGeogebraCommonKernelCASException *)ce
                           withBoolean:(jboolean)doTwinGeoUpdate
                           withBoolean:(jboolean)allowFunction;

- (void)setTwinGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)newTwinGeo;

+ (jboolean)dependsOnDummyWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo;

- (void)setInputVEWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)inputVE;

- (jboolean)inequalityInEvalVE;

- (void)clearStrings;

- (NSString *)getPlotVar;

- (NSString *)getOutputPrefix;

- (void)updateDependentCellInput;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, assignmentType_, OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, inputVE_, OrgGeogebraCommonKernelArithmeticValidExpression *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, evalVE_, OrgGeogebraCommonKernelArithmeticValidExpression *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, outputVE_, OrgGeogebraCommonKernelArithmeticValidExpression *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, input_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, prefix_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, postfix_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, error_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, latex_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, localizedInput_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, currentLanguage_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, invars_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, functionvars_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, inGeos_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, twinGeo_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, lastOutputEvaluationGeo_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, commands_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, assignmentVar_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, evalCmd_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, evalComment_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, commentText_, OrgGeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, arbconst_, OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, expandedEvalVE_, OrgGeogebraCommonKernelArithmeticValidExpression *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoCasCell, tooltip_, NSString *)

static NSString *OrgGeogebraCommonKernelGeosGeoCasCell_PLOT_VAR_ = @"GgbmpvarPlot";
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoCasCell, PLOT_VAR_, NSString *)

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoCasCell_suppressOutput(OrgGeogebraCommonKernelGeosGeoCasCell *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_updateLocalizedInputWithOrgGeogebraCommonKernelStringTemplate_withNSString_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelStringTemplate *tpl, NSString *input1);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticValidExpression *OrgGeogebraCommonKernelGeosGeoCasCell_parseGeoGebraCASInputAndResolveDummyVarsWithNSString_(OrgGeogebraCommonKernelGeosGeoCasCell *self, NSString *inValue);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_updateInputVariablesWithOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *ve);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoCasCell_getFunctionVariableWithOrgGeogebraCommonKernelArithmeticValidExpression_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticValidExpression *ve, OrgGeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_internalizeInput(OrgGeogebraCommonKernelGeosGeoCasCell *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoCasCell_localizeInputWithNSString_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoCasCell *self, NSString *input1, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_setAssignmentVarWithNSString_(OrgGeogebraCommonKernelGeosGeoCasCell *self, NSString *var);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_changeAssignmentVarWithNSString_withNSString_(OrgGeogebraCommonKernelGeosGeoCasCell *self, NSString *oldLabel, NSString *newLabel);

__attribute__((unused)) static JavaUtilTreeSet *OrgGeogebraCommonKernelGeosGeoCasCell_getInVars(OrgGeogebraCommonKernelGeosGeoCasCell *self);

__attribute__((unused)) static JavaUtilTreeSet *OrgGeogebraCommonKernelGeosGeoCasCell_getFunctionVars(OrgGeogebraCommonKernelGeosGeoCasCell *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_clearInVars(OrgGeogebraCommonKernelGeosGeoCasCell *self);

__attribute__((unused)) static JavaUtilTreeSet *OrgGeogebraCommonKernelGeosGeoCasCell_updateInputGeoElementsWithJavaUtilTreeSet_(OrgGeogebraCommonKernelGeosGeoCasCell *self, JavaUtilTreeSet *inputVars);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticValidExpression *OrgGeogebraCommonKernelGeosGeoCasCell_resolveInputReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression_withJavaUtilTreeSet_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *ve, JavaUtilTreeSet *inputGeos);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_resolveFunctionVariableReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelArithmeticValidExpression *outputVE);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_resolveGeoElementReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *outVE);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoCasCell_includesOnlyDefinedVariablesWithBoolean_(OrgGeogebraCommonKernelGeosGeoCasCell *self, jboolean ignoreUndefinedXY);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoCasCell_includesNumericCommand(OrgGeogebraCommonKernelGeosGeoCasCell *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoCasCell_isAssignmentVariableDefined(OrgGeogebraCommonKernelGeosGeoCasCell *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_setEvalCommandWithNSString_(OrgGeogebraCommonKernelGeosGeoCasCell *self, NSString *cmd);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_createTwinGeoWithBoolean_(OrgGeogebraCommonKernelGeosGeoCasCell *self, jboolean allowFunction);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_setEquationMode(OrgGeogebraCommonKernelGeosGeoCasCell *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_simpleUpdateTwinGeoWithBoolean_(OrgGeogebraCommonKernelGeosGeoCasCell *self, jboolean allowFunction);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelGeosGeoCasCell_silentEvalInGeoGebraWithOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *ve, jboolean allowFunction);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_computeOutputWithBoolean_withBoolean_(OrgGeogebraCommonKernelGeosGeoCasCell *self, jboolean doTwinGeoUpdate, jboolean allowFunction);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticValidExpression *OrgGeogebraCommonKernelGeosGeoCasCell_wrapPointListWithOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *arg);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticValidExpression *OrgGeogebraCommonKernelGeosGeoCasCell_wrapEvaluateWithOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *arg, jboolean forceWrapping);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticValidExpression *OrgGeogebraCommonKernelGeosGeoCasCell_processSolveCommandWithOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *ve);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoCasCell_lhsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(OrgGeogebraCommonKernelGeosGeoCasCell *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> arg, NSString *fallback);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_finalizeComputationWithBoolean_withNSString_withOrgGeogebraCommonKernelCASException_withBoolean_withBoolean_(OrgGeogebraCommonKernelGeosGeoCasCell *self, jboolean success, NSString *result, OrgGeogebraCommonKernelCASException *ce, jboolean doTwinGeoUpdate, jboolean allowFunction);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_setTwinGeoWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelGeosGeoElement *newTwinGeo);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoCasCell_dependsOnDummyWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_setInputVEWithOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *inputVE);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoCasCell_inequalityInEvalVE(OrgGeogebraCommonKernelGeosGeoCasCell *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_clearStrings(OrgGeogebraCommonKernelGeosGeoCasCell *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoCasCell_getPlotVar(OrgGeogebraCommonKernelGeosGeoCasCell *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoCasCell_getOutputPrefix(OrgGeogebraCommonKernelGeosGeoCasCell *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_updateDependentCellInput(OrgGeogebraCommonKernelGeosGeoCasCell *self);

@interface OrgGeogebraCommonKernelGeosGeoCasCell_$1 : NSObject < OrgGeogebraCommonKernelArithmeticInspecting >

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelGeosGeoCasCell_$1)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_$1_init(OrgGeogebraCommonKernelGeosGeoCasCell_$1 *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoCasCell_$1 *new_OrgGeogebraCommonKernelGeosGeoCasCell_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelGeosGeoCasCell_$1)

@interface OrgGeogebraCommonKernelGeosGeoCasCell_$2 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(NSString *)o1
               withId:(NSString *)o2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelGeosGeoCasCell_$2)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCasCell_$2_init(OrgGeogebraCommonKernelGeosGeoCasCell_$2 *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoCasCell_$2 *new_OrgGeogebraCommonKernelGeosGeoCasCell_$2_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelGeosGeoCasCell_$2)

@implementation OrgGeogebraCommonKernelGeosGeoCasCell

- (void)setAssignmentTypeWithOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:(OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum *)assignmentType {
  self->assignmentType_ = assignmentType;
}

- (OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum *)getAssignmentType {
  return assignmentType_;
}

- (jboolean)isKeepInputUsed {
  return keepInputUsed_;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoCasCell_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
}

- (NSString *)getInputWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isPrintLocalizedCommandNames]) {
    if (currentLanguage_ == nil || ![currentLanguage_ isEqual:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getLanguage]]) {
      OrgGeogebraCommonKernelGeosGeoCasCell_updateLocalizedInputWithOrgGeogebraCommonKernelStringTemplate_withNSString_(self, tpl, input_);
    }
    return localizedInput_;
  }
  return input_;
}

- (NSString *)getOutputWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (error_ != nil) {
    if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isPrintLocalizedCommandNames]) {
      return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getErrorWithNSString:error_];
    }
    return error_;
  }
  if (outputVE_ == nil) {
    return @"";
  }
  return [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(outputVE_)) toAssignmentStringWithOrgGeogebraCommonKernelStringTemplate:tpl withOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:[self getAssignmentType]];
}

- (NSString *)getOutputRHSWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (error_ != nil) {
    if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isPrintLocalizedCommandNames]) {
      return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getErrorWithNSString:error_];
    }
    return error_;
  }
  if (outputVE_ == nil) {
    return @"";
  }
  return [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(outputVE_)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)getPrefix {
  return prefix_;
}

- (NSString *)getEvalText {
  if (evalVE_ == nil) {
    return @"";
  }
  return [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(evalVE_)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_()];
}

- (OrgGeogebraCommonKernelArithmeticValidExpression *)getEvalVE {
  return evalVE_;
}

- (OrgGeogebraCommonKernelArithmeticValidExpression *)getInputVE {
  return inputVE_;
}

- (NSString *)getPostfix {
  return postfix_;
}

- (NSString *)getLaTeXOutput {
  if (useAsText_) {
    return JreStrcat("$$C", @"\\text{", [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->commentText_)) getTextString], '}');
  }
  if ([self isError]) {
    return @"";
  }
  else if (latex_ == nil) {
    if (outputVE_ != nil) {
      JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(@"\\mathbf{");
      if (nativeOutput_ || !([outputVE_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]])) {
        (void) [sb appendWithNSString:[outputVE_ toAssignmentLaTeXStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelGeosGeoCasCell_includesNumericCommand(self) ? OrgGeogebraCommonKernelStringTemplate_get_numericLatex_() : OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_() withOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:[self getAssignmentType]]];
      }
      else {
        OrgGeogebraCommonKernelGeosGeoElement *geo = ((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(outputVE_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getLeft], [OrgGeogebraCommonKernelGeosGeoElement class]));
        if (OrgGeogebraCommonKernelGeosGeoCasCell_isAssignmentVariableDefined(self)) {
          (void) [sb appendWithNSString:[self getAssignmentLHSWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_()]];
          if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
            (void) [sb appendWithChar:'('];
            (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunction class])))) getVarStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_()]];
            (void) [sb appendWithChar:')'];
          }
          switch ([[self getAssignmentType] ordinal]) {
            case OrgGeogebraCommonKernelArithmeticAssignmentType_DEFAULT:
            (void) [sb appendWithNSString:[((NSString *) nil_chk([outputVE_ getAssignmentOperator])) trim]];
            break;
            case OrgGeogebraCommonKernelArithmeticAssignmentType_DELAYED:
            (void) [sb appendWithNSString:[((NSString *) nil_chk([outputVE_ getDelayedAssignmentOperator])) trim]];
            break;
            case OrgGeogebraCommonKernelArithmeticAssignmentType_NONE:
            break;
          }
        }
        if (!([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoLocus class]])) {
          (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_()]];
        }
        else {
          (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->algoParent_)) getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_()]];
        }
      }
      (void) [sb appendWithNSString:@"}"];
      latex_ = [sb description];
    }
  }
  return latex_;
}

- (jboolean)isUseAsText {
  return useAsText_;
}

- (void)setUseAsTextWithBoolean:(jboolean)val {
  useAsText_ = val;
  if (!val) {
    self->input_ = [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->commentText_)) getTextString];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->commentText_)) setTextStringWithNSString:input_];
  }
  suppressOutput__ = useAsText_;
  [self update];
}

- (void)setFontWithOrgGeogebraCommonAwtGFont:(OrgGeogebraCommonAwtGFont *)ft {
  [self setFontSizeMultiplierWithDouble:(jdouble) [((OrgGeogebraCommonAwtGFont *) nil_chk(ft)) getSize] / (jdouble) [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getFontSize]];
  [self setFontStyleWithInt:[ft getStyle]];
}

- (void)setFontStyleWithInt:(jint)style {
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(commentText_)) setFontStyleWithInt:style];
}

- (OrgGeogebraCommonAwtGColor *)getFontColor {
  return [self getObjectColor];
}

- (void)setFontColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)c {
  [self setObjColorWithOrgGeogebraCommonAwtGColor:c];
}

- (jint)getFontStyle {
  return [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(commentText_)) getFontStyle];
}

- (void)setFontSizeMultiplierWithDouble:(jdouble)d {
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(commentText_)) setFontSizeMultiplierWithDouble:d];
}

- (jdouble)getFontSizeMultiplier {
  return [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(commentText_)) getFontSizeMultiplier];
}

- (void)setGeoTextWithOrgGeogebraCommonKernelGeosGeoText:(OrgGeogebraCommonKernelGeosGeoText *)gt {
  if (gt != nil) {
    commentText_ = gt;
  }
}

- (OrgGeogebraCommonKernelGeosGeoText *)getGeoText {
  return commentText_;
}

- (jboolean)isEmpty {
  return [self isInputEmpty] && [self isOutputEmpty];
}

- (jboolean)isInputEmpty {
  return [self getInputVE] == nil;
}

- (jboolean)isOutputEmpty {
  return outputVE_ == nil && error_ == nil;
}

- (jboolean)showOutput {
  return ![self isOutputEmpty] && !OrgGeogebraCommonKernelGeosGeoCasCell_suppressOutput(self);
}

- (jboolean)suppressOutput {
  return OrgGeogebraCommonKernelGeosGeoCasCell_suppressOutput(self);
}

- (jboolean)hasTwinGeo {
  return twinGeo_ != nil;
}

- (void)setInputFromTwinGeoWithBoolean:(jboolean)force {
  if (ignoreTwinGeoUpdate_ && !force) {
    return;
  }
  if (twinGeo_ != nil && [twinGeo_ isIndependent] && [twinGeo_ isLabelSet]) {
    NSString *assignmentStr = [twinGeo_ toCasAssignmentWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if (suppressOutput__) assignmentStr = JreStrcat("$C", assignmentStr, ';');
    NSString *evalCmd1 = evalCmd_;
    if ([self setInputWithNSString:assignmentStr]) {
      if ([((NSString *) nil_chk(evalCmd1)) isEqual:@"Numeric"]) {
        [self setProcessingInformationWithNSString:@"" withNSString:JreStrcat("$$C", @"Numeric[", [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(evalVE_)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()], ']') withNSString:@""];
      }
      OrgGeogebraCommonKernelGeosGeoCasCell_setEvalCommandWithNSString_(self, evalCmd1);
      OrgGeogebraCommonKernelGeosGeoCasCell_computeOutputWithBoolean_withBoolean_(self, NO, NO);
      [self update];
    }
  }
}

- (jboolean)setInputWithNSString:(NSString *)inValue {
  return [self setInputWithNSString:inValue withBoolean:NO];
}

- (jboolean)setInputWithNSString:(NSString *)inValue
                     withBoolean:(jboolean)internalInput {
  NSString *inNotNull = inValue != nil ? inValue : @"";
  if (useAsText_) {
    suppressOutput__ = YES;
    OrgGeogebraCommonKernelGeosGeoCasCell_setInputVEWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, nil);
    [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(self->commentText_)) setTextStringWithNSString:inNotNull];
  }
  else {
    suppressOutput__ = [inNotNull hasSuffix:@";"];
    OrgGeogebraCommonKernelGeosGeoCasCell_setInputVEWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, OrgGeogebraCommonKernelGeosGeoCasCell_parseGeoGebraCASInputAndResolveDummyVarsWithNSString_(self, inNotNull));
  }
  input_ = inNotNull;
  prefix_ = @"";
  evalVE_ = [self getInputVE];
  postfix_ = @"";
  OrgGeogebraCommonKernelGeosGeoCasCell_setEvalCommandWithNSString_(self, @"");
  evalComment_ = @"";
  [self setErrorWithNSString:nil];
  OrgGeogebraCommonKernelGeosGeoCasCell_updateInputVariablesWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, [self getInputVE]);
  if (!internalInput) {
    OrgGeogebraCommonKernelGeosGeoCasCell_internalizeInput(self);
  }
  OrgGeogebraCommonKernelGeosGeoCasCell_updateLocalizedInputWithOrgGeogebraCommonKernelStringTemplate_withNSString_(self, OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_(), input_);
  firstComputeOutput_ = YES;
  if (![self isEmpty]) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) addToGeoSetWithCasCellsWithOrgGeogebraCommonKernelGeosGeoCasCell:self];
  }
  return YES;
}

- (void)updateLocalizedInputWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                         withNSString:(NSString *)input1 {
  OrgGeogebraCommonKernelGeosGeoCasCell_updateLocalizedInputWithOrgGeogebraCommonKernelStringTemplate_withNSString_(self, tpl, input1);
}

- (void)setRowNumberWithInt:(jint)row {
  self->row_ = row;
}

- (jint)getRowNumber {
  return row_;
}

- (void)updateInputStringWithRowReferences {
  [self updateInputStringWithRowReferencesWithBoolean:NO];
}

- (void)updateInputStringWithRowReferencesWithBoolean:(jboolean)force {
  if (!includesRowReferences__ && !force) return;
  input_ = [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([self getInputVE])) toAssignmentStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_noLocalDefault_() withOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:[self getAssignmentType]];
  OrgGeogebraCommonKernelGeosGeoCasCell_updateLocalizedInputWithOrgGeogebraCommonKernelStringTemplate_withNSString_(self, OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_(), [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([self getInputVE])) toAssignmentStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_() withOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:[self getAssignmentType]]);
  if (suppressOutput__) {
    input_ = JreStrcat("$C", input_, ';');
    localizedInput_ = JreStrcat("$C", localizedInput_, ';');
  }
}

- (void)setProcessingInformationWithNSString:(NSString *)prefix
                                withNSString:(NSString *)evaluate
                                withNSString:(NSString *)postfix {
  NSString *eval = evaluate;
  NSString *postfix1 = postfix;
  NSString *prefix1 = prefix;
  OrgGeogebraCommonKernelGeosGeoCasCell_setEvalCommandWithNSString_(self, @"");
  evalComment_ = @"";
  if (prefix1 == nil) {
    prefix1 = @"";
  }
  if (postfix1 == nil) {
    postfix1 = @"";
  }
  if (OrgGeogebraCommonKernelGeosGeoCasCell_isAssignmentVariableDefined(self)) {
    eval = JreStrcat("$$$", prefix1, eval, postfix1);
    prefix1 = @"";
    postfix1 = @"";
  }
  evalVE_ = OrgGeogebraCommonKernelGeosGeoCasCell_parseGeoGebraCASInputAndResolveDummyVarsWithNSString_(self, eval);
  if (inputVE_ != nil && [inputVE_ getLabel] != nil) {
    [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(evalVE_)) setLabelWithNSString:[inputVE_ getLabel]];
  }
  if (evalVE_ != nil) {
    evalVE_ = OrgGeogebraCommonKernelGeosGeoCasCell_resolveInputReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression_withJavaUtilTreeSet_(self, evalVE_, inGeos_);
    if ([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(evalVE_)) isTopLevelCommand]) {
      OrgGeogebraCommonKernelGeosGeoCasCell_setEvalCommandWithNSString_(self, [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk([evalVE_ getTopLevelCommand])) getName]);
    }
    self->prefix_ = prefix1;
    self->postfix_ = postfix1;
  }
  else {
    evalVE_ = [self getInputVE];
    self->prefix_ = @"";
    self->postfix_ = @"";
  }
}

- (jboolean)isStructurallyEqualToLocalizedInputWithNSString:(NSString *)newInput {
  if (localizedInput_ != nil && [localizedInput_ isEqual:newInput]) return YES;
  if (![((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS])) isStructurallyEqualWithOrgGeogebraCommonKernelArithmeticValidExpression:[self getInputVE] withNSString:newInput withOrgGeogebraCommonKernelKernel:[self getKernel]]) {
    [self setErrorWithNSString:@"CAS.SelectionStructureError"];
    return NO;
  }
  return YES;
}

- (OrgGeogebraCommonKernelArithmeticValidExpression *)parseGeoGebraCASInputAndResolveDummyVarsWithNSString:(NSString *)inValue {
  return OrgGeogebraCommonKernelGeosGeoCasCell_parseGeoGebraCASInputAndResolveDummyVarsWithNSString_(self, inValue);
}

- (void)updateInputVariablesWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve {
  OrgGeogebraCommonKernelGeosGeoCasCell_updateInputVariablesWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, ve);
}

+ (NSString *)getFunctionVariableWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve
                                                    withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return OrgGeogebraCommonKernelGeosGeoCasCell_getFunctionVariableWithOrgGeogebraCommonKernelArithmeticValidExpression_withOrgGeogebraCommonKernelKernel_(ve, kernel);
}

- (void)internalizeInput {
  OrgGeogebraCommonKernelGeosGeoCasCell_internalizeInput(self);
}

- (NSString *)localizeInputWithNSString:(NSString *)input1
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelGeosGeoCasCell_localizeInputWithNSString_withOrgGeogebraCommonKernelStringTemplate_(self, input1, tpl);
}

- (void)setAssignmentVarWithNSString:(NSString *)var {
  OrgGeogebraCommonKernelGeosGeoCasCell_setAssignmentVarWithNSString_(self, var);
}

- (void)changeAssignmentVarWithNSString:(NSString *)oldLabel
                           withNSString:(NSString *)newLabel {
  OrgGeogebraCommonKernelGeosGeoCasCell_changeAssignmentVarWithNSString_withNSString_(self, oldLabel, newLabel);
}

- (JavaUtilTreeSet *)getInVars {
  return OrgGeogebraCommonKernelGeosGeoCasCell_getInVars(self);
}

- (JavaUtilTreeSet *)getFunctionVars {
  return OrgGeogebraCommonKernelGeosGeoCasCell_getFunctionVars(self);
}

- (void)clearInVars {
  OrgGeogebraCommonKernelGeosGeoCasCell_clearInVars(self);
}

- (NSString *)getInVarWithInt:(jint)n {
  if (invars_ == nil) return nil;
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(invars_)) iterator];
  jint pos = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *var = [it next];
    if (pos == n) return var;
    pos++;
  }
  return nil;
}

- (JavaUtilTreeSet *)getGeoElementVariables {
  if (inGeos_ == nil) {
    inGeos_ = OrgGeogebraCommonKernelGeosGeoCasCell_updateInputGeoElementsWithJavaUtilTreeSet_(self, invars_);
  }
  return inGeos_;
}

- (JavaUtilTreeSet *)updateInputGeoElementsWithJavaUtilTreeSet:(JavaUtilTreeSet *)inputVars {
  return OrgGeogebraCommonKernelGeosGeoCasCell_updateInputGeoElementsWithJavaUtilTreeSet_(self, inputVars);
}

- (OrgGeogebraCommonKernelArithmeticValidExpression *)resolveInputReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve
                                                                                                             withJavaUtilTreeSet:(JavaUtilTreeSet *)inputGeos {
  return OrgGeogebraCommonKernelGeosGeoCasCell_resolveInputReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression_withJavaUtilTreeSet_(self, ve, inputGeos);
}

+ (void)resolveFunctionVariableReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)outputVE {
  OrgGeogebraCommonKernelGeosGeoCasCell_resolveFunctionVariableReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression_(outputVE);
}

- (void)resolveGeoElementReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)outVE {
  OrgGeogebraCommonKernelGeosGeoCasCell_resolveGeoElementReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, outVE);
}

- (jboolean)includesOnlyDefinedVariables {
  return OrgGeogebraCommonKernelGeosGeoCasCell_includesOnlyDefinedVariablesWithBoolean_(self, NO);
}

- (jboolean)includesOnlyDefinedVariablesWithBoolean:(jboolean)ignoreUndefinedXY {
  return OrgGeogebraCommonKernelGeosGeoCasCell_includesOnlyDefinedVariablesWithBoolean_(self, ignoreUndefinedXY);
}

- (jboolean)isInputVariableWithNSString:(NSString *)var {
  return invars_ != nil && [invars_ containsWithId:var];
}

- (jboolean)isFunctionVariableWithNSString:(NSString *)var {
  return functionvars_ != nil && [functionvars_ containsWithId:var];
}

- (NSString *)getFunctionVariable {
  if (functionvars_ != nil && ![functionvars_ isEmpty]) {
    return [functionvars_ first];
  }
  return nil;
}

- (jboolean)includesRowReferences {
  return includesRowReferences__;
}

- (jboolean)includesNumericCommand {
  return OrgGeogebraCommonKernelGeosGeoCasCell_includesNumericCommand(self);
}

- (NSString *)getAssignmentVariable {
  return assignmentVar_;
}

- (jboolean)isAssignmentVariableDefined {
  return OrgGeogebraCommonKernelGeosGeoCasCell_isAssignmentVariableDefined(self);
}

- (void)setEvalCommandWithNSString:(NSString *)cmd {
  OrgGeogebraCommonKernelGeosGeoCasCell_setEvalCommandWithNSString_(self, cmd);
}

- (void)setKeepInputUsedWithBoolean:(jboolean)keepInputUsed {
  self->keepInputUsed_ = keepInputUsed;
}

- (void)setEvalCommentWithNSString:(NSString *)comment {
  if (comment != nil) {
    evalComment_ = comment;
  }
}

- (void)setOutputWithNSString:(NSString *)output
                  withBoolean:(jboolean)prependLabel {
  error_ = nil;
  OrgGeogebraCommonKernelGeosGeoCasCell_clearStrings(self);
  jboolean isFunctionDeclaration = OrgGeogebraCommonKernelGeosGeoCasCell_isAssignmentVariableDefined(self) && functionvars_ != nil && ![functionvars_ isEmpty];
  if (nativeOutput_) {
    NSString *res = output;
    if (isFunctionDeclaration && prependLabel) {
      outputVE_ = (OrgGeogebraCommonKernelArithmeticValidExpression *) check_class_cast([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(OrgGeogebraCommonKernelGeosGeoCasCell_parseGeoGebraCASInputAndResolveDummyVarsWithNSString_(self, res))) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_getCreator()], [OrgGeogebraCommonKernelArithmeticValidExpression class]);
      JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
      (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([self getInputVE])) getLabelForAssignment]];
      switch ([[self getAssignmentType] ordinal]) {
        case OrgGeogebraCommonKernelArithmeticAssignmentType_DEFAULT:
        (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([self getInputVE])) getAssignmentOperator]];
        break;
        case OrgGeogebraCommonKernelArithmeticAssignmentType_DELAYED:
        (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([self getInputVE])) getDelayedAssignmentOperator]];
        break;
        case OrgGeogebraCommonKernelArithmeticAssignmentType_NONE:
        break;
      }
      (void) [sb appendWithNSString:OrgGeogebraCommonKernelGeosGeoCasCell_includesNumericCommand(self) ? [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(outputVE_)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_()] : [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(outputVE_)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      res = [sb description];
    }
    OrgGeogebraCommonKernelArithmeticValidExpression *parsed = OrgGeogebraCommonKernelGeosGeoCasCell_parseGeoGebraCASInputAndResolveDummyVarsWithNSString_(self, res);
    outputVE_ = parsed == nil ? nil : (OrgGeogebraCommonKernelArithmeticValidExpression *) check_class_cast([parsed traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_GgbVectRemover_getInstance()], [OrgGeogebraCommonKernelArithmeticValidExpression class]);
    if (outputVE_ != nil) {
      OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer *cr = OrgGeogebraCommonKernelArithmeticTraversing_CommandReplacer_getReplacerWithOrgGeogebraCommonMainApp_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication]);
      (void) [outputVE_ traverseWithOrgGeogebraCommonKernelArithmeticTraversing:cr];
      if (inputVE_ != nil) {
        if ([inputVE_ isTopLevelCommand] && [@"Vector" isEqual:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk([inputVE_ getTopLevelCommand])) getName]]) {
          OrgGeogebraCommonKernelArithmeticExpressionNode *wrapped = [outputVE_ wrap];
          [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(wrapped)) setForceVector];
          outputVE_ = wrapped;
        }
      }
    }
    else {
      [self setErrorWithNSString:@"CAS.GeneralErrorMessage"];
    }
  }
  if (isFunctionDeclaration) {
    OrgGeogebraCommonKernelGeosGeoCasCell_resolveFunctionVariableReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression_(outputVE_);
    OrgGeogebraCommonKernelGeosGeoCasCell_resolveGeoElementReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, outputVE_);
  }
  else if (OrgGeogebraCommonKernelGeosGeoCasCell_isAssignmentVariableDefined(self)) {
    [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(outputVE_)) setLabelWithNSString:assignmentVar_];
    if (JavaLangCharacter_isLowerCaseWithChar_([((NSString *) nil_chk(assignmentVar_)) charAtWithInt:0])) {
      id<OrgGeogebraCommonKernelArithmeticExpressionValue> ve = [outputVE_ unwrap];
      if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyVecNode class]]) {
        OrgGeogebraCommonKernelArithmeticMyVecNode *node = (OrgGeogebraCommonKernelArithmeticMyVecNode *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticMyVecNode class]);
        [((OrgGeogebraCommonKernelArithmeticMyVecNode *) nil_chk(node)) setCASVector];
      }
      else if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmetic3DMyVec3DNode class]]) {
        OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *node3d = (OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmetic3DMyVec3DNode class]);
        [((OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *) nil_chk(node3d)) setCASVector];
      }
    }
  }
}

- (void)updateTwinGeoWithBoolean:(jboolean)allowFunction {
  ignoreTwinGeoUpdate_ = YES;
  if (firstComputeOutput_ && twinGeo_ == nil) {
    OrgGeogebraCommonKernelGeosGeoCasCell_createTwinGeoWithBoolean_(self, allowFunction);
  }
  else {
    OrgGeogebraCommonKernelGeosGeoCasCell_simpleUpdateTwinGeoWithBoolean_(self, allowFunction);
  }
  ignoreTwinGeoUpdate_ = NO;
}

- (void)createTwinGeoWithBoolean:(jboolean)allowFunction {
  OrgGeogebraCommonKernelGeosGeoCasCell_createTwinGeoWithBoolean_(self, allowFunction);
}

- (void)setEquationMode {
  OrgGeogebraCommonKernelGeosGeoCasCell_setEquationMode(self);
}

- (jboolean)setLabelOfTwinGeo {
  if (twinGeo_ == nil || [twinGeo_ isLabelSet] || !OrgGeogebraCommonKernelGeosGeoCasCell_isAssignmentVariableDefined(self)) return NO;
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeCasCellLabelWithNSString:assignmentVar_];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(twinGeo_)) setLabelWithNSString:assignmentVar_];
  [cons_ putCasCellLabelWithOrgGeogebraCommonKernelGeosGeoCasCell:self withNSString:assignmentVar_];
  return YES;
}

- (void)simpleUpdateTwinGeoWithBoolean:(jboolean)allowFunction {
  OrgGeogebraCommonKernelGeosGeoCasCell_simpleUpdateTwinGeoWithBoolean_(self, allowFunction);
}

- (void)updateCascade {
  [self update];
  OrgGeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("$$", @"updating", [self getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]));
  if (twinGeo_ != nil && !OrgGeogebraCommonKernelGeosGeoCasCell_dependsOnDummyWithOrgGeogebraCommonKernelGeosGeoElement_(twinGeo_)) {
    ignoreTwinGeoUpdate_ = YES;
    [twinGeo_ update];
    ignoreTwinGeoUpdate_ = NO;
    [self updateAlgoUpdateSetWithWithOrgGeogebraCommonKernelGeosGeoElement:twinGeo_];
  }
  else if (algoUpdateSet_ != nil) {
    [algoUpdateSet_ updateAll];
  }
}

- (void)update {
  OrgGeogebraCommonKernelGeosGeoCasCell_clearStrings(self);
  [super update];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)silentEvalInGeoGebraWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve
                                                                                                        withBoolean:(jboolean)allowFunction {
  return OrgGeogebraCommonKernelGeosGeoCasCell_silentEvalInGeoGebraWithOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_(self, ve, allowFunction);
}

- (void)computeOutput {
  if (!useAsText_) {
    if ([self getEvalVE] == nil) return;
    OrgGeogebraCommonKernelGeosGeoCasCell_computeOutputWithBoolean_withBoolean_(self, [self getAssignmentType] != OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DELAYED(), NO);
  }
}

- (jboolean)isSubstitute {
  OrgGeogebraCommonKernelArithmeticCommand *cmd = [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(evalVE_)) getTopLevelCommand];
  return (cmd == nil) ? NO : [@"Substitute" isEqual:[cmd getName]];
}

- (void)computeOutputWithBoolean:(jboolean)doTwinGeoUpdate
                     withBoolean:(jboolean)allowFunction {
  OrgGeogebraCommonKernelGeosGeoCasCell_computeOutputWithBoolean_withBoolean_(self, doTwinGeoUpdate, allowFunction);
}

- (OrgGeogebraCommonKernelArithmeticValidExpression *)wrapPointListWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)arg {
  return OrgGeogebraCommonKernelGeosGeoCasCell_wrapPointListWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, arg);
}

- (OrgGeogebraCommonKernelArithmeticValidExpression *)wrapEvaluateWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)arg
                                                                                                           withBoolean:(jboolean)forceWrapping {
  return OrgGeogebraCommonKernelGeosGeoCasCell_wrapEvaluateWithOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_(self, arg, forceWrapping);
}

- (OrgGeogebraCommonKernelArithmeticValidExpression *)processSolveCommandWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)ve {
  return OrgGeogebraCommonKernelGeosGeoCasCell_processSolveCommandWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, ve);
}

- (NSString *)lhsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)arg
                                                         withNSString:(NSString *)fallback {
  return OrgGeogebraCommonKernelGeosGeoCasCell_lhsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(self, arg, fallback);
}

- (void)finalizeComputationWithBoolean:(jboolean)success
                          withNSString:(NSString *)result
withOrgGeogebraCommonKernelCASException:(OrgGeogebraCommonKernelCASException *)ce
                           withBoolean:(jboolean)doTwinGeoUpdate
                           withBoolean:(jboolean)allowFunction {
  OrgGeogebraCommonKernelGeosGeoCasCell_finalizeComputationWithBoolean_withNSString_withOrgGeogebraCommonKernelCASException_withBoolean_withBoolean_(self, success, result, ce, doTwinGeoUpdate, allowFunction);
}

- (void)setErrorWithNSString:(NSString *)error {
  self->error_ = error;
  OrgGeogebraCommonKernelGeosGeoCasCell_clearStrings(self);
  outputVE_ = nil;
}

- (jboolean)isError {
  return error_ != nil;
}

- (jboolean)isCircularDefinition {
  return isCircularDefinition__;
}

- (void)getElementOpenTagXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<cascell"];
  if (assignmentVar_ != nil) {
    (void) [sb appendWithNSString:@" caslabel=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, assignmentVar_);
    (void) [sb appendWithNSString:@"\" "];
  }
  (void) [sb appendWithNSString:@">\n"];
}

- (void)getElementCloseTagXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"</cascell>\n"];
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<cellPair>\n"];
  if (useAsText_) {
    (void) [sb appendWithNSString:@"\t\t"];
    (void) [sb appendWithNSString:@"<useAsText>\n"];
    (void) [sb appendWithNSString:@"\t\t\t"];
    (void) [sb appendWithNSString:@"<FontStyle"];
    (void) [sb appendWithNSString:@" value=\""];
    (void) [sb appendWithInt:[self getFontStyle]];
    (void) [sb appendWithNSString:@"\" "];
    (void) [sb appendWithNSString:@"/>\n"];
    (void) [sb appendWithNSString:@"\t\t\t"];
    (void) [sb appendWithNSString:@"<FontSizeM"];
    (void) [sb appendWithNSString:@" value=\""];
    (void) [sb appendWithDouble:[self getFontSizeMultiplier]];
    (void) [sb appendWithNSString:@"\" "];
    (void) [sb appendWithNSString:@"/>\n"];
    (void) [sb appendWithNSString:@"\t\t\t"];
    (void) [sb appendWithNSString:@"<FontColor"];
    (void) [sb appendWithNSString:@" r=\""];
    (void) [sb appendWithInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getFontColor])) getRed]];
    (void) [sb appendWithNSString:@"\" "];
    (void) [sb appendWithNSString:@" b=\""];
    (void) [sb appendWithInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getFontColor])) getBlue]];
    (void) [sb appendWithNSString:@"\" "];
    (void) [sb appendWithNSString:@" g=\""];
    (void) [sb appendWithInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getFontColor])) getGreen]];
    (void) [sb appendWithNSString:@"\" "];
    (void) [sb appendWithNSString:@"/>\n"];
    (void) [sb appendWithNSString:@"\t\t"];
    (void) [sb appendWithNSString:@"</useAsText>\n"];
  }
  if (![self isInputEmpty] || useAsText_ || (input_ != nil && ((jint) [input_ length]) > 0)) {
    (void) [sb appendWithNSString:@"\t\t"];
    (void) [sb appendWithNSString:@"<inputCell>\n"];
    (void) [sb appendWithNSString:@"\t\t\t"];
    (void) [sb appendWithNSString:@"<expression"];
    (void) [sb appendWithNSString:@" value=\""];
    if (useAsText_) {
      OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(commentText_)) getTextString]);
      (void) [sb appendWithNSString:@"\" "];
    }
    else {
      OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, input_);
      (void) [sb appendWithNSString:@"\" "];
      if (evalVE_ != [self getInputVE]) {
        if (![@"" isEqual:prefix_]) {
          (void) [sb appendWithNSString:@" prefix=\""];
          OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, prefix_);
          (void) [sb appendWithNSString:@"\" "];
        }
        (void) [sb appendWithNSString:@" eval=\""];
        OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self getEvalText]);
        (void) [sb appendWithNSString:@"\" "];
        if (![@"" isEqual:postfix_]) {
          (void) [sb appendWithNSString:@" postfix=\""];
          OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, postfix_);
          (void) [sb appendWithNSString:@"\" "];
        }
        (void) [sb appendWithNSString:@"evalCmd=\""];
        OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, evalCmd_);
        (void) [sb appendWithNSString:@"\""];
      }
      if (pointList_) {
        (void) [sb appendWithNSString:@" pointList=\"true\""];
      }
    }
    (void) [sb appendWithNSString:@"/>\n"];
    (void) [sb appendWithNSString:@"\t\t"];
    (void) [sb appendWithNSString:@"</inputCell>\n"];
  }
  if (![self isOutputEmpty]) {
    (void) [sb appendWithNSString:@"\t\t"];
    (void) [sb appendWithNSString:@"<outputCell>\n"];
    (void) [sb appendWithNSString:@"\t\t\t"];
    (void) [sb appendWithNSString:@"<expression"];
    (void) [sb appendWithNSString:@" value=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self getOutputWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_()]);
    (void) [sb appendWithNSString:@"\""];
    if ([self isError]) {
      (void) [sb appendWithNSString:@" error=\"true\""];
    }
    if ([self isNative]) {
      (void) [sb appendWithNSString:@" native=\"true\""];
    }
    if (![@"" isEqual:evalCmd_]) {
      (void) [sb appendWithNSString:@" evalCommand=\""];
      OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, evalCmd_);
      (void) [sb appendWithNSString:@"\" "];
    }
    if (![@"" isEqual:evalComment_]) {
      (void) [sb appendWithNSString:@" evalComment=\""];
      OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, evalComment_);
      (void) [sb appendWithNSString:@"\" "];
    }
    (void) [sb appendWithNSString:@"/>\n"];
    (void) [sb appendWithNSString:@"\t\t"];
    (void) [sb appendWithNSString:@"</outputCell>\n"];
  }
  (void) [sb appendWithNSString:@"\t</cellPair>\n"];
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_CAS_CELL();
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  OrgGeogebraCommonKernelGeosGeoCasCell *casCell = new_OrgGeogebraCommonKernelGeosGeoCasCell_initWithOrgGeogebraCommonKernelConstruction_(cons_);
  [casCell setWithOrgGeogebraCommonKernelGeosGeoElement:self];
  return casCell;
}

- (jboolean)isDefined {
  return ![self isError];
}

- (void)setUndefined {
  [self setErrorWithNSString:@"CAS.GeneralErrorMessage"];
  if (twinGeo_ != nil) {
    [twinGeo_ setUndefined];
  }
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return outputVE_ != nil ? [outputVE_ toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : [self toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (jboolean)showInAlgebraView {
  return NO;
}

- (jboolean)showInEuclidianView {
  return NO;
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)Geo {
  return NO;
}

- (NSString *)getLabelWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (assignmentVar_ != nil) {
    return [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:assignmentVar_];
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  switch ([[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    (void) [sb appendWithNSString:@" ("];
    (void) [sb appendWithNSString:outputVE_ == nil ? @"?" : [outputVE_ toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    (void) [sb appendWithNSString:@") "];
    break;
    default:
    if (row_ >= 0) {
      if ([tpl hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
        (void) [sb appendWithNSString:@"\\$"];
      }
      else {
        (void) [sb appendWithNSString:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_CAS_ROW_REFERENCE_PREFIX_()];
      }
      (void) [sb appendWithInt:row_ + 1];
    }
    break;
  }
  return [sb description];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (jboolean)isGeoCasCell {
  return YES;
}

- (void)doRemove {
  if (assignmentVar_ != nil) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeCasCellLabelWithNSString:assignmentVar_];
    assignmentVar_ = nil;
  }
  [super doRemove];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromGeoSetWithCasCellsWithOrgGeogebraCommonKernelGeosGeoCasCell:self];
  OrgGeogebraCommonKernelGeosGeoCasCell_setTwinGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, nil);
  if ([self isInConstructionList]) [cons_ updateCasCells];
}

- (void)setTwinGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)newTwinGeo {
  OrgGeogebraCommonKernelGeosGeoCasCell_setTwinGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, newTwinGeo);
}

+ (jboolean)dependsOnDummyWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return OrgGeogebraCommonKernelGeosGeoCasCell_dependsOnDummyWithOrgGeogebraCommonKernelGeosGeoElement_(geo);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getTwinGeo {
  return twinGeo_;
}

- (jboolean)addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algorithm {
  jboolean added = [super addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
  if (twinGeo_ != nil && [twinGeo_ isIndependent]) {
    [twinGeo_ addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
  }
  return added;
}

- (jboolean)removeFromUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algorithm {
  jboolean removed = [super removeFromUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
  if (twinGeo_ != nil && [twinGeo_ isIndependent]) {
    [twinGeo_ removeFromUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
  }
  return removed;
}

- (OrgGeogebraCommonKernelArithmeticValidExpression *)getOutputValidExpression {
  return outputVE_;
}

- (jboolean)isLaTeXDrawableGeo {
  return YES;
}

- (NSString *)getVarStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if ([[self getInputVE] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]]) {
    return [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast([self getInputVE], [OrgGeogebraCommonKernelArithmeticFunctionNVar class])))) getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return @"";
}

- (OrgGeogebraCommonKernelArithmeticMyList *)getFunctionVariableList {
  if ([[self getInputVE] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]]) {
    OrgGeogebraCommonKernelArithmeticMyList *ml = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(kernel_);
    {
      IOSObjectArray *a__ = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast([self getInputVE], [OrgGeogebraCommonKernelArithmeticFunctionNVar class])))) getFunctionVariables];
      OrgGeogebraCommonKernelArithmeticFunctionVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgGeogebraCommonKernelArithmeticFunctionVariable * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgGeogebraCommonKernelArithmeticFunctionVariable *fv = *b__++;
        [ml addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:fv];
      }
    }
    return ml;
  }
  return nil;
}

- (IOSObjectArray *)getFunctionVariables {
  if ([[self getInputVE] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]]) {
    return [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast([self getInputVE], [OrgGeogebraCommonKernelArithmeticFunctionNVar class])))) getFunctionVariables];
  }
  return [IOSObjectArray newArrayWithLength:0 type:OrgGeogebraCommonKernelArithmeticFunctionVariable_class_()];
}

- (void)setInputVEWithOrgGeogebraCommonKernelArithmeticValidExpression:(OrgGeogebraCommonKernelArithmeticValidExpression *)inputVE {
  OrgGeogebraCommonKernelGeosGeoCasCell_setInputVEWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, inputVE);
}

- (OrgGeogebraCommonAwtGColor *)getAlgebraColor {
  if (twinGeo_ == nil) return OrgGeogebraCommonAwtGColor_get_BLACK_();
  return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(twinGeo_)) getAlgebraColor];
}

- (void)setNativeWithBoolean:(jboolean)b {
  nativeOutput_ = b;
}

- (jboolean)isNative {
  return nativeOutput_;
}

- (void)toggleTwinGeoEuclidianVisible {
  jboolean visible;
  if ([self hasTwinGeo]) {
    visible = (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(twinGeo_)) isEuclidianVisible] && [twinGeo_ isEuclidianShowable]);
  }
  else {
    if (outputVE_ == nil || ![self plot]) {
      return;
    }
    visible = ([self hasTwinGeo] && [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(twinGeo_)) isEuclidianShowable]);
  }
  if ([self hasTwinGeo]) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(twinGeo_)) setEuclidianVisibleWithBoolean:visible];
    [twinGeo_ updateVisualStyle];
  }
  [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) storeUndoInfo];
  [kernel_ notifyRepaint];
}

- (jboolean)plot {
  if ([self getEvalVE] == nil || [((NSString *) nil_chk(input_)) isEqual:@""]) {
    return NO;
  }
  else if ([self hasTwinGeo]) {
    return YES;
  }
  NSString *oldEvalComment = evalComment_;
  OrgGeogebraCommonKernelArithmeticValidExpression *oldEvalVE = evalVE_;
  OrgGeogebraCommonKernelArithmeticValidExpression *oldInputVE = [self getInputVE];
  NSString *oldAssignmentVar = assignmentVar_;
  OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum *oldOVEAssignmentType = [self getAssignmentType];
  assignmentVar_ = OrgGeogebraCommonKernelGeosGeoCasCell_getPlotVar(self);
  [self adjustPointListWithBoolean:NO];
  self->firstComputeOutput_ = YES;
  OrgGeogebraCommonKernelGeosGeoCasCell_computeOutputWithBoolean_withBoolean_(self, YES, YES);
  if (twinGeo_ != nil && !OrgGeogebraCommonKernelGeosGeoCasCell_dependsOnDummyWithOrgGeogebraCommonKernelGeosGeoElement_(twinGeo_)) [twinGeo_ setLabelWithNSString:nil];
  if (twinGeo_ != nil && [twinGeo_ getLabelSimple] != nil && [twinGeo_ isEuclidianShowable]) {
    NSString *twinGeoLabelSimple = [twinGeo_ getLabelSimple];
    OrgGeogebraCommonKernelGeosGeoCasCell_changeAssignmentVarWithNSString_withNSString_(self, assignmentVar_, twinGeoLabelSimple);
    OrgGeogebraCommonKernelArithmeticValidExpression *ex = (OrgGeogebraCommonKernelArithmeticValidExpression *) check_class_cast([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([self getEvalVE])) deepCopyWithOrgGeogebraCommonKernelKernel:kernel_], [OrgGeogebraCommonKernelArithmeticValidExpression class]);
    OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover *remover;
    if ([((NSString *) nil_chk(input_)) hasPrefix:@"Numeric["]) {
      remover = OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_getRemoverWithNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"KeepInput", @"Evaluate" } count:2 type:NSString_class_()]);
    }
    else {
      remover = OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_getRemoverWithNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"KeepInput", @"Evaluate", @"Numeric" } count:3 type:NSString_class_()]);
    }
    (void) [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ex)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:remover];
    [self setAssignmentTypeWithOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DEFAULT()];
    [ex setLabelWithNSString:[twinGeo_ getAssignmentLHSWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    if ([twinGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) {
      (void) [ex traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_FunctionCreator_getCreator()];
    }
    [self setAssignmentTypeWithOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DEFAULT()];
    [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([self getEvalVE])) setLabelWithNSString:[twinGeo_ getAssignmentLHSWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    jboolean wasKeepInputUsed = [self isKeepInputUsed];
    jboolean wasNumericUsed = [((NSString *) nil_chk(evalCmd_)) isEqual:@"Numeric"];
    [self setInputWithNSString:[ex toAssignmentStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericDefault_() withOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DEFAULT()]];
    if (wasKeepInputUsed) {
      [self setKeepInputUsedWithBoolean:YES];
      OrgGeogebraCommonKernelGeosGeoCasCell_setEvalCommandWithNSString_(self, @"KeepInput");
    }
    else if (wasNumericUsed) {
      [self setProcessingInformationWithNSString:@"" withNSString:JreStrcat("$$C", @"Numeric[", [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(inputVE_)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()], ']') withNSString:@""];
      OrgGeogebraCommonKernelGeosGeoCasCell_setEvalCommandWithNSString_(self, @"Numeric");
    }
    OrgGeogebraCommonKernelGeosGeoCasCell_computeOutputWithBoolean_withBoolean_(self, NO, NO);
    [self update];
    OrgGeogebraCommonKernelGeosGeoCasCell_clearStrings(self);
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) addToConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:twinGeo_ withBoolean:YES];
  }
  else {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"Fail", oldEvalComment));
    if (twinGeo_ != nil && [twinGeo_ getLabelSimple] != nil) [twinGeo_ doRemove];
    assignmentVar_ = oldAssignmentVar;
    [self setAssignmentTypeWithOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:oldOVEAssignmentType];
    self->firstComputeOutput_ = YES;
    evalComment_ = oldEvalComment;
    evalVE_ = oldEvalVE;
    OrgGeogebraCommonKernelGeosGeoCasCell_setInputVEWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, oldInputVE);
    OrgGeogebraCommonKernelGeosGeoCasCell_computeOutputWithBoolean_withBoolean_(self, YES, NO);
    return NO;
  }
  return YES;
}

- (jboolean)inequalityInEvalVE {
  return OrgGeogebraCommonKernelGeosGeoCasCell_inequalityInEvalVE(self);
}

- (void)clearStrings {
  OrgGeogebraCommonKernelGeosGeoCasCell_clearStrings(self);
}

- (NSString *)getPlotVar {
  return OrgGeogebraCommonKernelGeosGeoCasCell_getPlotVar(self);
}

- (void)setPointListWithBoolean:(jboolean)pointList2 {
  pointList_ = pointList2;
}

- (jboolean)hasCoords {
  return outputVE_ != nil && [outputVE_ hasCoords];
}

- (NSString *)getTooltipTextWithBoolean:(jboolean)colored
                            withBoolean:(jboolean)alwaysOn {
  if ([self isError]) return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getErrorWithNSString:error_];
  if (tooltip_ == nil && outputVE_ != nil) {
    tooltip_ = [self getOutputWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    tooltip_ = [((NSString *) nil_chk(tooltip_)) replace:@"gGbSuM(" withSequence:@"\u03a3("];
    tooltip_ = [((NSString *) nil_chk(tooltip_)) replace:@"gGbInTeGrAl(" withSequence:@"\u222b("];
    if (((jint) [((NSString *) nil_chk(tooltip_)) length]) > SCREEN_WIDTH_ && [tooltip_ indexOf:'{'] > -1) {
      jint listStart = [tooltip_ indexOf:'{'];
      JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(((jint) [tooltip_ length]) + 20);
      (void) [sb appendWithNSString:[tooltip_ substring:0 endIndex:listStart + 1]];
      jint currLine = 0;
      for (jint i = listStart + 1; i < ((jint) [tooltip_ length]); i++) {
        if ([tooltip_ charAtWithInt:i] == ',') {
          jint nextComma = [tooltip_ indexOf:',' fromIndex:i + 1];
          if (nextComma == -1) nextComma = ((jint) [tooltip_ length]) - 1;
          if (currLine + (nextComma - i) > SCREEN_WIDTH_) {
            (void) [sb appendWithNSString:@",\n"];
            currLine = 0;
            i++;
          }
        }
        currLine++;
        (void) [sb appendWithChar:[tooltip_ charAtWithInt:i]];
      }
      tooltip_ = [sb description];
    }
    tooltip_ = OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(tooltip_, YES);
  }
  return tooltip_;
}

- (NSString *)getCommandAndComment {
  if (![self showOutput]) return @"";
  JavaLangStringBuilder *evalCmdLocal = new_JavaLangStringBuilder_init();
  if (pointList_) {
    (void) [evalCmdLocal appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getCommandWithNSString:@"PointList"]];
  }
  else if ([@"" isEqual:evalCmd_]) {
    return OrgGeogebraCommonKernelGeosGeoCasCell_getOutputPrefix(self);
  }
  else if ([@"Numeric" isEqual:evalCmd_]) {
    return OrgGeogebraCommonUtilUnicode_get_CAS_OUTPUT_NUMERIC_();
  }
  else if ([@"KeepInput" isEqual:evalCmd_]) {
    return OrgGeogebraCommonUtilUnicode_get_CAS_OUTPUT_KEEPINPUT_();
  }
  else {
    (void) [evalCmdLocal appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getCommandWithNSString:evalCmd_]];
  }
  if ([((NSString *) nil_chk(input_)) hasPrefix:[evalCmdLocal description]] || (localizedInput_ != nil && [localizedInput_ hasPrefix:[evalCmdLocal description]])) {
    return OrgGeogebraCommonKernelGeosGeoCasCell_getOutputPrefix(self);
  }
  if (((jint) [((NSString *) nil_chk(evalComment_)) length]) > 0) {
    if ([evalCmdLocal length] != 0) {
      (void) [evalCmdLocal appendWithNSString:@", "];
    }
    (void) [evalCmdLocal appendWithNSString:evalComment_];
  }
  (void) [evalCmdLocal appendWithNSString:@":"];
  return [evalCmdLocal description];
}

- (NSString *)getOutputPrefix {
  return OrgGeogebraCommonKernelGeosGeoCasCell_getOutputPrefix(self);
}

- (jboolean)hasVariablesOrCommands {
  if ([self getGeoElementVariables] != nil) return YES;
  return inputVE_ != nil && [inputVE_ inspectWithOrgGeogebraCommonKernelArithmeticInspecting:OrgGeogebraCommonKernelArithmeticInspecting_CommandFinderEnum_get_INSTANCE()];
}

- (void)adjustPointListWithBoolean:(jboolean)onlySolutions {
  if ([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(evalVE_)) isTopLevelCommand] && ([((NSString *) nil_chk(OrgGeogebraCommonKernelGeosGeoCasCell_getPlotVar(self))) isEqual:assignmentVar_])) {
    NSString *cmd = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk([evalVE_ getTopLevelCommand])) getName];
    if (!OrgGeogebraCommonKernelGeosGeoCasCell_inequalityInEvalVE(self) && (([((NSString *) nil_chk(cmd)) isEqual:@"Solutions"] || [cmd isEqual:@"CSolutions"] || [cmd isEqual:@"NSolutions"]) || (!onlySolutions && ([cmd isEqual:@"Solve"] || [cmd isEqual:@"CSolve"] || [cmd isEqual:@"NSolve"] || [cmd isEqual:@"Root"] || [cmd isEqual:@"ComplexRoot"])))) {
      if (!pointList_) {
        inputVE_ = evalVE_;
      }
      pointList_ = YES;
    }
  }
}

- (void)updateDependentCellInput {
  OrgGeogebraCommonKernelGeosGeoCasCell_updateDependentCellInput(self);
}

- (jint)getPrintDecimals {
  return 0;
}

- (jint)getPrintFigures {
  return 0;
}

- (void)setPrintDecimalsWithInt:(jint)printDecimals
                    withBoolean:(jboolean)update {
}

- (void)setPrintFiguresWithInt:(jint)printFigures
                   withBoolean:(jboolean)update {
}

- (jboolean)isSerifFont {
  return NO;
}

- (void)setSerifFontWithBoolean:(jboolean)serifFont {
}

- (jboolean)useSignificantFigures {
  return NO;
}

- (jboolean)justFontSize {
  return NO;
}

- (jboolean)isLaTeXTextCommand {
  return NO;
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setAssignmentTypeWithOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:", "setAssignmentType", "V", 0x1, NULL, NULL },
    { "getAssignmentType", NULL, "Lorg.geogebra.common.kernel.arithmetic.AssignmentType;", 0x1, NULL, NULL },
    { "isKeepInputUsed", NULL, "Z", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoCasCell", NULL, 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "getInputWithOrgGeogebraCommonKernelStringTemplate:", "getInput", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOutputWithOrgGeogebraCommonKernelStringTemplate:", "getOutput", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOutputRHSWithOrgGeogebraCommonKernelStringTemplate:", "getOutputRHS", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPrefix", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getEvalText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getEvalVE", NULL, "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", 0x1, NULL, NULL },
    { "getInputVE", NULL, "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", 0x1, NULL, NULL },
    { "getPostfix", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLaTeXOutput", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isUseAsText", NULL, "Z", 0x1, NULL, NULL },
    { "setUseAsTextWithBoolean:", "setUseAsText", "V", 0x1, NULL, NULL },
    { "setFontWithOrgGeogebraCommonAwtGFont:", "setFont", "V", 0x1, NULL, NULL },
    { "setFontStyleWithInt:", "setFontStyle", "V", 0x1, NULL, NULL },
    { "getFontColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "setFontColorWithOrgGeogebraCommonAwtGColor:", "setFontColor", "V", 0x1, NULL, NULL },
    { "getFontStyle", NULL, "I", 0x1, NULL, NULL },
    { "setFontSizeMultiplierWithDouble:", "setFontSizeMultiplier", "V", 0x1, NULL, NULL },
    { "getFontSizeMultiplier", NULL, "D", 0x1, NULL, NULL },
    { "setGeoTextWithOrgGeogebraCommonKernelGeosGeoText:", "setGeoText", "V", 0x1, NULL, NULL },
    { "getGeoText", NULL, "Lorg.geogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "isInputEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "isOutputEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "showOutput", NULL, "Z", 0x1, NULL, NULL },
    { "suppressOutput", NULL, "Z", 0x2, NULL, NULL },
    { "hasTwinGeo", NULL, "Z", 0x1, NULL, NULL },
    { "setInputFromTwinGeoWithBoolean:", "setInputFromTwinGeo", "V", 0x1, NULL, NULL },
    { "setInputWithNSString:", "setInput", "Z", 0x1, NULL, NULL },
    { "setInputWithNSString:withBoolean:", "setInput", "Z", 0x1, NULL, NULL },
    { "updateLocalizedInputWithOrgGeogebraCommonKernelStringTemplate:withNSString:", "updateLocalizedInput", "V", 0x2, NULL, NULL },
    { "setRowNumberWithInt:", "setRowNumber", "V", 0x11, NULL, NULL },
    { "getRowNumber", NULL, "I", 0x11, NULL, NULL },
    { "updateInputStringWithRowReferences", NULL, "V", 0x1, NULL, NULL },
    { "updateInputStringWithRowReferencesWithBoolean:", "updateInputStringWithRowReferences", "V", 0x1, NULL, NULL },
    { "setProcessingInformationWithNSString:withNSString:withNSString:", "setProcessingInformation", "V", 0x1, NULL, NULL },
    { "isStructurallyEqualToLocalizedInputWithNSString:", "isStructurallyEqualToLocalizedInput", "Z", 0x1, NULL, NULL },
    { "parseGeoGebraCASInputAndResolveDummyVarsWithNSString:", "parseGeoGebraCASInputAndResolveDummyVars", "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", 0x2, NULL, NULL },
    { "updateInputVariablesWithOrgGeogebraCommonKernelArithmeticValidExpression:", "updateInputVariables", "V", 0x2, NULL, NULL },
    { "getFunctionVariableWithOrgGeogebraCommonKernelArithmeticValidExpression:withOrgGeogebraCommonKernelKernel:", "getFunctionVariable", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "internalizeInput", NULL, "V", 0x2, NULL, NULL },
    { "localizeInputWithNSString:withOrgGeogebraCommonKernelStringTemplate:", "localizeInput", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "setAssignmentVarWithNSString:", "setAssignmentVar", "V", 0x2, NULL, NULL },
    { "changeAssignmentVarWithNSString:withNSString:", "changeAssignmentVar", "V", 0x2, NULL, NULL },
    { "getInVars", NULL, "Ljava.util.TreeSet;", 0x2, NULL, NULL },
    { "getFunctionVars", NULL, "Ljava.util.TreeSet;", 0x2, NULL, NULL },
    { "clearInVars", NULL, "V", 0x2, NULL, NULL },
    { "getInVarWithInt:", "getInVar", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getGeoElementVariables", NULL, "Ljava.util.TreeSet;", 0x1, NULL, NULL },
    { "updateInputGeoElementsWithJavaUtilTreeSet:", "updateInputGeoElements", "Ljava.util.TreeSet;", 0x2, NULL, NULL },
    { "resolveInputReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression:withJavaUtilTreeSet:", "resolveInputReferences", "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", 0x2, NULL, NULL },
    { "resolveFunctionVariableReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression:", "resolveFunctionVariableReferences", "V", 0xa, NULL, NULL },
    { "resolveGeoElementReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression:", "resolveGeoElementReferences", "V", 0x2, NULL, NULL },
    { "includesOnlyDefinedVariables", NULL, "Z", 0x11, NULL, NULL },
    { "includesOnlyDefinedVariablesWithBoolean:", "includesOnlyDefinedVariables", "Z", 0x11, NULL, NULL },
    { "isInputVariableWithNSString:", "isInputVariable", "Z", 0x11, NULL, NULL },
    { "isFunctionVariableWithNSString:", "isFunctionVariable", "Z", 0x11, NULL, NULL },
    { "getFunctionVariable", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "includesRowReferences", NULL, "Z", 0x11, NULL, NULL },
    { "includesNumericCommand", NULL, "Z", 0x11, NULL, NULL },
    { "getAssignmentVariable", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isAssignmentVariableDefined", NULL, "Z", 0x11, NULL, NULL },
    { "setEvalCommandWithNSString:", "setEvalCommand", "V", 0x11, NULL, NULL },
    { "setKeepInputUsedWithBoolean:", "setKeepInputUsed", "V", 0x1, NULL, NULL },
    { "setEvalCommentWithNSString:", "setEvalComment", "V", 0x11, NULL, NULL },
    { "setOutputWithNSString:withBoolean:", "setOutput", "V", 0x1, NULL, NULL },
    { "updateTwinGeoWithBoolean:", "updateTwinGeo", "V", 0x1, NULL, NULL },
    { "createTwinGeoWithBoolean:", "createTwinGeo", "V", 0x2, NULL, NULL },
    { "setEquationMode", NULL, "V", 0x2, NULL, NULL },
    { "setLabelOfTwinGeo", NULL, "Z", 0x1, NULL, NULL },
    { "simpleUpdateTwinGeoWithBoolean:", "simpleUpdateTwinGeo", "V", 0x2, NULL, NULL },
    { "updateCascade", NULL, "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "silentEvalInGeoGebraWithOrgGeogebraCommonKernelArithmeticValidExpression:withBoolean:", "silentEvalInGeoGebra", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "computeOutput", NULL, "V", 0x11, NULL, NULL },
    { "isSubstitute", NULL, "Z", 0x1, NULL, NULL },
    { "computeOutputWithBoolean:withBoolean:", "computeOutput", "V", 0x2, NULL, NULL },
    { "wrapPointListWithOrgGeogebraCommonKernelArithmeticValidExpression:", "wrapPointList", "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", 0x2, NULL, NULL },
    { "wrapEvaluateWithOrgGeogebraCommonKernelArithmeticValidExpression:withBoolean:", "wrapEvaluate", "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", 0x2, NULL, NULL },
    { "processSolveCommandWithOrgGeogebraCommonKernelArithmeticValidExpression:", "processSolveCommand", "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", 0x2, NULL, NULL },
    { "lhsWithOrgGeogebraCommonKernelArithmeticExpressionValue:withNSString:", "lhs", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "finalizeComputationWithBoolean:withNSString:withOrgGeogebraCommonKernelCASException:withBoolean:withBoolean:", "finalizeComputation", "V", 0x2, NULL, NULL },
    { "setErrorWithNSString:", "setError", "V", 0x1, NULL, NULL },
    { "isError", NULL, "Z", 0x1, NULL, NULL },
    { "isCircularDefinition", NULL, "Z", 0x1, NULL, NULL },
    { "getElementOpenTagXMLWithJavaLangStringBuilder:", "getElementOpenTagXML", "V", 0x4, NULL, NULL },
    { "getElementCloseTagXMLWithJavaLangStringBuilder:", "getElementCloseTagXML", "V", 0x4, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "getLabelWithOrgGeogebraCommonKernelStringTemplate:", "getLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isGeoCasCell", NULL, "Z", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "setTwinGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "setTwinGeo", "V", 0x2, NULL, NULL },
    { "dependsOnDummyWithOrgGeogebraCommonKernelGeosGeoElement:", "dependsOnDummy", "Z", 0xa, NULL, NULL },
    { "getTwinGeo", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:", "addToUpdateSets", "Z", 0x1, NULL, NULL },
    { "removeFromUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:", "removeFromUpdateSets", "Z", 0x1, NULL, NULL },
    { "getOutputValidExpression", NULL, "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", 0x1, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "getVarStringWithOrgGeogebraCommonKernelStringTemplate:", "getVarString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFunctionVariableList", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyList;", 0x1, NULL, NULL },
    { "getFunctionVariables", NULL, "[Lorg.geogebra.common.kernel.arithmetic.FunctionVariable;", 0x1, NULL, NULL },
    { "setInputVEWithOrgGeogebraCommonKernelArithmeticValidExpression:", "setInputVE", "V", 0x2, NULL, NULL },
    { "getAlgebraColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "setNativeWithBoolean:", "setNative", "V", 0x1, NULL, NULL },
    { "isNative", NULL, "Z", 0x1, NULL, NULL },
    { "toggleTwinGeoEuclidianVisible", NULL, "V", 0x1, NULL, NULL },
    { "plot", NULL, "Z", 0x1, NULL, NULL },
    { "inequalityInEvalVE", NULL, "Z", 0x2, NULL, NULL },
    { "clearStrings", NULL, "V", 0x2, NULL, NULL },
    { "getPlotVar", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "setPointListWithBoolean:", "setPointList", "V", 0x1, NULL, NULL },
    { "hasCoords", NULL, "Z", 0x1, NULL, NULL },
    { "getTooltipTextWithBoolean:withBoolean:", "getTooltipText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCommandAndComment", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOutputPrefix", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "hasVariablesOrCommands", NULL, "Z", 0x1, NULL, NULL },
    { "adjustPointListWithBoolean:", "adjustPointList", "V", 0x1, NULL, NULL },
    { "updateDependentCellInput", NULL, "V", 0x2, NULL, NULL },
    { "getPrintDecimals", NULL, "I", 0x1, NULL, NULL },
    { "getPrintFigures", NULL, "I", 0x1, NULL, NULL },
    { "setPrintDecimalsWithInt:withBoolean:", "setPrintDecimals", "V", 0x1, NULL, NULL },
    { "setPrintFiguresWithInt:withBoolean:", "setPrintFigures", "V", 0x1, NULL, NULL },
    { "isSerifFont", NULL, "Z", 0x1, NULL, NULL },
    { "setSerifFontWithBoolean:", "setSerifFont", "V", 0x1, NULL, NULL },
    { "useSignificantFigures", NULL, "Z", 0x1, NULL, NULL },
    { "justFontSize", NULL, "Z", 0x1, NULL, NULL },
    { "isLaTeXTextCommand", NULL, "Z", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "assignmentType_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.AssignmentType;", NULL, NULL,  },
    { "keepInputUsed_", NULL, 0x2, "Z", NULL, NULL,  },
    { "ROW_REFERENCE_STATIC_", NULL, 0x19, "C", NULL, NULL, .constantValue.asUnichar = OrgGeogebraCommonKernelGeosGeoCasCell_ROW_REFERENCE_STATIC },
    { "ROW_REFERENCE_DYNAMIC_", NULL, 0x19, "C", NULL, NULL, .constantValue.asUnichar = OrgGeogebraCommonKernelGeosGeoCasCell_ROW_REFERENCE_DYNAMIC },
    { "PLOT_VAR_", NULL, 0x1a, "Ljava.lang.String;", &OrgGeogebraCommonKernelGeosGeoCasCell_PLOT_VAR_, NULL,  },
    { "inputVE_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", NULL, NULL,  },
    { "evalVE_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", NULL, NULL,  },
    { "outputVE_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", NULL, NULL,  },
    { "input_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "prefix_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "postfix_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "error_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "latex_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "localizedInput_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "currentLanguage_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "suppressOutput__", "suppressOutput", 0x2, "Z", NULL, NULL,  },
    { "invars_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Ljava/lang/String;>;",  },
    { "functionvars_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Ljava/lang/String;>;",  },
    { "inGeos_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "isCircularDefinition__", "isCircularDefinition", 0x2, "Z", NULL, NULL,  },
    { "twinGeo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "lastOutputEvaluationGeo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "firstComputeOutput_", NULL, 0x2, "Z", NULL, NULL,  },
    { "ignoreTwinGeoUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "commands_", NULL, 0x2, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lorg/geogebra/common/kernel/arithmetic/Command;>;",  },
    { "assignmentVar_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "includesRowReferences__", "includesRowReferences", 0x2, "Z", NULL, NULL,  },
    { "includesNumericCommand__", "includesNumericCommand", 0x2, "Z", NULL, NULL,  },
    { "useGeoGebraFallback_", NULL, 0x2, "Z", NULL, NULL,  },
    { "evalCmd_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "evalComment_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "row_", NULL, 0x2, "I", NULL, NULL,  },
    { "useAsText_", NULL, 0x2, "Z", NULL, NULL,  },
    { "commentText_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "nativeOutput_", NULL, 0x2, "Z", NULL, NULL,  },
    { "ignoreSetAssignment_", NULL, 0x2, "Z", NULL, NULL,  },
    { "arbconst_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.MyArbitraryConstant;", NULL, NULL,  },
    { "expandedEvalVE_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ValidExpression;", NULL, NULL,  },
    { "pointList_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tooltip_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "SCREEN_WIDTH_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoCasCell = { 2, "GeoCasCell", "org.geogebra.common.kernel.geos", NULL, 0x1, 141, methods, 41, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoCasCell;
}

@end

void OrgGeogebraCommonKernelGeosGeoCasCell_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelConstruction *c) {
  (void) OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->assignmentType_ = OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum_get_NONE();
  self->suppressOutput__ = NO;
  self->row_ = -1;
  self->ignoreSetAssignment_ = NO;
  self->arbconst_ = new_OrgGeogebraCommonKernelArithmeticMyArbitraryConstant_initWithOrgGeogebraCommonKernelAlgosConstructionElement_(self);
  self->SCREEN_WIDTH_ = 80;
  self->input_ = @"";
  self->localizedInput_ = @"";
  OrgGeogebraCommonKernelGeosGeoCasCell_setInputVEWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, nil);
  self->outputVE_ = nil;
  self->prefix_ = @"";
  self->evalVE_ = nil;
  self->postfix_ = @"";
  self->evalCmd_ = @"";
  self->evalComment_ = @"";
  self->useAsText_ = NO;
  self->commentText_ = new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_withNSString_(c, @"");
  self->twinGeo_ = nil;
}

OrgGeogebraCommonKernelGeosGeoCasCell *new_OrgGeogebraCommonKernelGeosGeoCasCell_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoCasCell *self = [OrgGeogebraCommonKernelGeosGeoCasCell alloc];
  OrgGeogebraCommonKernelGeosGeoCasCell_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

jboolean OrgGeogebraCommonKernelGeosGeoCasCell_suppressOutput(OrgGeogebraCommonKernelGeosGeoCasCell *self) {
  return self->suppressOutput__ && ![self isError];
}

void OrgGeogebraCommonKernelGeosGeoCasCell_updateLocalizedInputWithOrgGeogebraCommonKernelStringTemplate_withNSString_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelStringTemplate *tpl, NSString *input1) {
  self->currentLanguage_ = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getLanguage];
  self->localizedInput_ = OrgGeogebraCommonKernelGeosGeoCasCell_localizeInputWithNSString_withOrgGeogebraCommonKernelStringTemplate_(self, input1, tpl);
}

OrgGeogebraCommonKernelArithmeticValidExpression *OrgGeogebraCommonKernelGeosGeoCasCell_parseGeoGebraCASInputAndResolveDummyVarsWithNSString_(OrgGeogebraCommonKernelGeosGeoCasCell *self, NSString *inValue) {
  @try {
    return [((id<OrgGeogebraCommonKernelCASParserInterface>) nil_chk([((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk(([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getGeoGebraCAS]))) getCASparser])) parseGeoGebraCASInputAndResolveDummyVarsWithNSString:inValue withOrgGeogebraCommonKernelKernel:[self getKernel] withOrgGeogebraCommonKernelGeosGeoCasCell:self];
  }
  @catch (OrgGeogebraCommonKernelCASException *c) {
    [self setErrorWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getErrorWithNSString:[((OrgGeogebraCommonKernelCASException *) nil_chk(c)) getKey]]];
    return nil;
  }
  @catch (JavaLangThrowable *e) {
    return nil;
  }
}

void OrgGeogebraCommonKernelGeosGeoCasCell_updateInputVariablesWithOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *ve) {
  OrgGeogebraCommonKernelGeosGeoCasCell_clearInVars(self);
  if (ve == nil || self->useAsText_) return;
  self->commands_ = new_JavaUtilHashSet_init();
  (void) [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_CommandCollector_getCollectorWithJavaUtilSet_(self->commands_)];
  if ([self->commands_ isEmpty]) {
    self->commands_ = nil;
  }
  else {
    for (OrgGeogebraCommonKernelArithmeticCommand * __strong cmd in self->commands_) {
      NSString *cmdName = [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(cmd)) getName];
      self->includesNumericCommand__ = (self->includesNumericCommand__ || ([@"Numeric" isEqual:cmdName] && [cmd getArgumentNumber] > 1));
      if (![((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getGeoGebraCAS])) isCommandAvailableWithOrgGeogebraCommonKernelArithmeticCommand:cmd]) {
        if ([self->kernel_ lookupCasCellLabelWithNSString:cmdName] != nil || [self->kernel_ lookupLabelWithNSString:cmdName] != nil) {
          [((JavaUtilTreeSet *) nil_chk(OrgGeogebraCommonKernelGeosGeoCasCell_getInVars(self))) addWithId:cmdName];
        }
        else if ([((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self->kernel_ getAlgebraProcessor])) isCommandAvailableWithNSString:cmdName]) {
          self->useGeoGebraFallback_ = YES;
        }
        else {
          [((JavaUtilTreeSet *) nil_chk(OrgGeogebraCommonKernelGeosGeoCasCell_getInVars(self))) addWithId:cmdName];
        }
      }
    }
  }
  self->useGeoGebraFallback_ = (self->useGeoGebraFallback_ || [ve inspectWithOrgGeogebraCommonKernelArithmeticInspecting:OrgGeogebraCommonKernelArithmeticInspecting_get_textFinder_()]);
  jboolean isFunction = [ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]];
  if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]]) {
    {
      IOSObjectArray *a__ = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticFunctionNVar class])) getFunctionVariables];
      OrgGeogebraCommonKernelArithmeticFunctionVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgGeogebraCommonKernelArithmeticFunctionVariable * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgGeogebraCommonKernelArithmeticFunctionVariable *fv = *b__++;
        [((JavaUtilTreeSet *) nil_chk(OrgGeogebraCommonKernelGeosGeoCasCell_getFunctionVars(self))) addWithId:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      }
    }
  }
  JavaUtilHashSet *geoVars = [ve getVariables];
  if (geoVars != nil) {
    for (OrgGeogebraCommonKernelGeosGeoElement * __strong geo in geoVars) {
      NSString *var = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      if (isFunction && [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticFunctionNVar class])) isFunctionVariableWithNSString:var]) {
        [((JavaUtilTreeSet *) nil_chk(OrgGeogebraCommonKernelGeosGeoCasCell_getFunctionVars(self))) addWithId:var];
      }
      else {
        [((JavaUtilTreeSet *) nil_chk(OrgGeogebraCommonKernelGeosGeoCasCell_getInVars(self))) addWithId:var];
        [((JavaUtilTreeSet *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getCASdummies])) addAllWithJavaUtilCollection:self->invars_];
      }
    }
  }
  switch ([[self getAssignmentType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticAssignmentType_NONE:
    OrgGeogebraCommonKernelGeosGeoCasCell_setAssignmentVarWithNSString_(self, nil);
    break;
    case OrgGeogebraCommonKernelArithmeticAssignmentType_DEFAULT:
    OrgGeogebraCommonKernelGeosGeoCasCell_setAssignmentVarWithNSString_(self, [ve getLabel]);
    break;
    case OrgGeogebraCommonKernelArithmeticAssignmentType_DELAYED:
    OrgGeogebraCommonKernelGeosGeoCasCell_setAssignmentVarWithNSString_(self, [ve getLabel]);
    break;
  }
  if ([ve getLabel] != nil && [((JavaUtilTreeSet *) nil_chk(OrgGeogebraCommonKernelGeosGeoCasCell_getFunctionVars(self))) isEmpty]) {
    NSString *var = OrgGeogebraCommonKernelGeosGeoCasCell_getFunctionVariableWithOrgGeogebraCommonKernelArithmeticValidExpression_withOrgGeogebraCommonKernelKernel_(ve, [self getKernel]);
    if (var != nil) [((JavaUtilTreeSet *) nil_chk(OrgGeogebraCommonKernelGeosGeoCasCell_getFunctionVars(self))) addWithId:var];
  }
  self->inGeos_ = OrgGeogebraCommonKernelGeosGeoCasCell_updateInputGeoElementsWithJavaUtilTreeSet_(self, self->invars_);
  OrgGeogebraCommonKernelGeosGeoCasCell_setInputVEWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, OrgGeogebraCommonKernelGeosGeoCasCell_resolveInputReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression_withJavaUtilTreeSet_(self, [self getInputVE], self->inGeos_));
  self->isCircularDefinition__ = NO;
  if (self->inGeos_ != nil) {
    for (OrgGeogebraCommonKernelGeosGeoElement * __strong inGeo in self->inGeos_) {
      if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(inGeo)) isChildOfWithOrgGeogebraCommonKernelGeosGeoElement:self] || [self isEqual:inGeo]) {
        self->isCircularDefinition__ = YES;
        [self setErrorWithNSString:@"CircularDefinition"];
      }
    }
  }
}

NSString *OrgGeogebraCommonKernelGeosGeoCasCell_getFunctionVariableWithOrgGeogebraCommonKernelArithmeticValidExpression_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelArithmeticValidExpression *ve, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelGeosGeoCasCell_initialize();
  if (![((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) isTopLevelCommand]) return nil;
  OrgGeogebraCommonKernelArithmeticCommand *cmd = [ve getTopLevelCommand];
  if ([@"Derivative" isEqual:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(cmd)) getName]]) {
    if ([cmd getArgumentNumber] > 1) {
      if (![((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:1])) isLeaf] || !([[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:1])) getLeft] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]])) return nil;
      return [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:1])) getLeft], [OrgGeogebraCommonKernelGeosGeoElement class])))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    }
    id<JavaUtilIterator> it = [((JavaUtilHashSet *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:0])) getVariables])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonKernelGeosGeoElement *em = [it next];
      if ([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) lookupLabelWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(em)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]] == nil) if ([OrgGeogebraCommonKernelVarString_class_() isInstance:em]) {
        return [((id<OrgGeogebraCommonKernelVarString>) check_protocol_cast(em, @protocol(OrgGeogebraCommonKernelVarString))) getVarStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      }
    }
  }
  return nil;
}

void OrgGeogebraCommonKernelGeosGeoCasCell_internalizeInput(OrgGeogebraCommonKernelGeosGeoCasCell *self) {
  self->input_ = OrgGeogebraCommonPluginScriptGgbScript_localizedScript2ScriptWithOrgGeogebraCommonMainApp_withNSString_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication], self->input_);
}

NSString *OrgGeogebraCommonKernelGeosGeoCasCell_localizeInputWithNSString_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoCasCell *self, NSString *input1, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isPrintLocalizedCommandNames]) {
    return OrgGeogebraCommonPluginScriptGgbScript_script2LocalizedScriptWithOrgGeogebraCommonMainApp_withNSString_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication], input1);
  }
  return input1;
}

void OrgGeogebraCommonKernelGeosGeoCasCell_setAssignmentVarWithNSString_(OrgGeogebraCommonKernelGeosGeoCasCell *self, NSString *var) {
  if (self->ignoreSetAssignment_) {
    return;
  }
  if (self->assignmentVar_ != nil && [self->assignmentVar_ isEqual:var]) {
    return;
  }
  if (self->assignmentVar_ != nil) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeCasCellLabelWithNSString:self->assignmentVar_];
  }
  if (var == nil) {
    self->assignmentVar_ = var;
  }
  else if ([((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isFreeLabelWithNSString:var]) {
    if (!OrgGeogebraCommonKernelGeosLabelManager_validVarWithNSString_(var)) {
      [self setErrorWithNSString:@"CAS.VariableIsDynamicReference"];
    }
    self->assignmentVar_ = var;
  }
  else {
    OrgGeogebraCommonKernelGeosGeoCasCell_changeAssignmentVarWithNSString_withNSString_(self, var, [self getDefaultLabelWithCharArray:!JavaLangCharacter_isLowerCaseWithChar_([var charAtWithInt:0]) ? OrgGeogebraCommonKernelGeosGeoElement_get_pointLabels_() : nil withBoolean:NO]);
  }
  if (self->assignmentVar_ != nil) {
    if (self->twinGeo_ != nil) {
      self->ignoreSetAssignment_ = YES;
      [self->twinGeo_ renameWithNSString:self->assignmentVar_];
    }
    OrgGeogebraCommonKernelGeosGeoCasCell_updateDependentCellInput(self);
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) putCasCellLabelWithOrgGeogebraCommonKernelGeosGeoCasCell:self withNSString:self->assignmentVar_];
  }
  else {
    OrgGeogebraCommonKernelGeosGeoCasCell_setTwinGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, nil);
  }
  self->ignoreSetAssignment_ = NO;
}

void OrgGeogebraCommonKernelGeosGeoCasCell_changeAssignmentVarWithNSString_withNSString_(OrgGeogebraCommonKernelGeosGeoCasCell *self, NSString *oldLabel, NSString *newLabel) {
  if ([((NSString *) nil_chk(newLabel)) isEqual:oldLabel]) return;
  [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk([self getInputVE])) setLabelWithNSString:newLabel];
  if (oldLabel != nil) {
    self->input_ = [((NSString *) nil_chk(self->input_)) replaceFirst:oldLabel withReplacement:newLabel];
    self->localizedInput_ = [((NSString *) nil_chk(self->localizedInput_)) replaceFirst:oldLabel withReplacement:newLabel];
  }
  self->assignmentVar_ = newLabel;
}

JavaUtilTreeSet *OrgGeogebraCommonKernelGeosGeoCasCell_getInVars(OrgGeogebraCommonKernelGeosGeoCasCell *self) {
  if (self->invars_ == nil) self->invars_ = new_JavaUtilTreeSet_init();
  return self->invars_;
}

JavaUtilTreeSet *OrgGeogebraCommonKernelGeosGeoCasCell_getFunctionVars(OrgGeogebraCommonKernelGeosGeoCasCell *self) {
  if (self->functionvars_ == nil) self->functionvars_ = new_JavaUtilTreeSet_init();
  return self->functionvars_;
}

void OrgGeogebraCommonKernelGeosGeoCasCell_clearInVars(OrgGeogebraCommonKernelGeosGeoCasCell *self) {
  self->invars_ = nil;
  self->functionvars_ = nil;
  self->includesRowReferences__ = NO;
  self->includesNumericCommand__ = NO;
  self->useGeoGebraFallback_ = NO;
}

JavaUtilTreeSet *OrgGeogebraCommonKernelGeosGeoCasCell_updateInputGeoElementsWithJavaUtilTreeSet_(OrgGeogebraCommonKernelGeosGeoCasCell *self, JavaUtilTreeSet *inputVars) {
  if (inputVars == nil || [inputVars isEmpty]) return nil;
  JavaUtilTreeSet *geoVars = new_JavaUtilTreeSet_init();
  for (NSString * __strong varLabel in nil_chk(inputVars)) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupCasCellLabelWithNSString:varLabel];
    if (geo == nil) {
      if ([((NSString *) nil_chk(varLabel)) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_CAS_ROW_REFERENCE_PREFIX_()]) {
        geo = self->row_ > 0 ? [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getCasCellWithInt:self->row_ - 1] : [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getLastCasCell];
      }
      else {
        @try {
          geo = [self->kernel_ lookupCasRowReferenceWithNSString:varLabel];
        }
        @catch (OrgGeogebraCommonKernelCASException *ex) {
          [self setErrorWithNSString:[((OrgGeogebraCommonKernelCASException *) nil_chk(ex)) getKey]];
          return nil;
        }
      }
      if (geo != nil) {
        self->includesRowReferences__ = YES;
      }
    }
    if (geo == nil) {
      geo = [self->kernel_ lookupLabelWithNSString:varLabel];
      if (geo != nil && [geo getCorrespondingCasCell] != nil) {
        geo = [geo getCorrespondingCasCell];
      }
    }
    if (geo != nil) {
      [geoVars addWithId:geo];
    }
  }
  if ([geoVars size] == 0) {
    return nil;
  }
  return geoVars;
}

OrgGeogebraCommonKernelArithmeticValidExpression *OrgGeogebraCommonKernelGeosGeoCasCell_resolveInputReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression_withJavaUtilTreeSet_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *ve, JavaUtilTreeSet *inputGeos) {
  if (ve == nil) {
    return ve;
  }
  OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum *assign = [self getAssignmentType];
  OrgGeogebraCommonKernelArithmeticValidExpression *ret;
  OrgGeogebraCommonKernelArithmeticExpressionNode *node;
  if ([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) isTopLevelCommand] && [((id<JavaUtilIterator>) nil_chk([((JavaUtilTreeSet *) nil_chk(OrgGeogebraCommonKernelGeosGeoCasCell_getFunctionVars(self))) iterator])) hasNext]) {
    OrgGeogebraCommonUtilDebugLog_warnWithNSString_(@"wrong function syntax");
    IOSObjectArray *labels = [ve getLabels];
    if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
      node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    }
    else {
      node = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ve);
    }
    ret = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(node, new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, [((id<JavaUtilIterator>) nil_chk([((JavaUtilTreeSet *) nil_chk(OrgGeogebraCommonKernelGeosGeoCasCell_getFunctionVars(self))) iterator])) next]));
    [ret setLabelsWithNSStringArray:labels];
  }
  else if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]]) {
    node = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticFunctionNVar class])) getExpression];
    ret = ve;
  }
  else if ([ve isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    node = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ve, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    ret = ve;
  }
  else {
    node = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ve);
    [node setLabelWithNSString:[ve getLabel]];
    ret = node;
  }
  if (inputGeos != nil) {
    for (OrgGeogebraCommonKernelGeosGeoElement * __strong inGeo in inputGeos) {
      OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *ge = OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_getReplacerWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(inGeo)) getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()], inGeo, NO);
      (void) [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(node)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:ge];
      if (![((OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *) nil_chk(ge)) didReplacement]) {
        ge = OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_getReplacerWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_get_CAS_ROW_REFERENCE_PREFIX_(), inGeo, NO);
        (void) [node traverseWithOrgGeogebraCommonKernelArithmeticTraversing:ge];
      }
    }
  }
  if (self->useGeoGebraFallback_) {
    if (!OrgGeogebraCommonKernelGeosGeoCasCell_includesOnlyDefinedVariablesWithBoolean_(self, YES)) {
      self->useGeoGebraFallback_ = NO;
    }
  }
  [self setAssignmentTypeWithOrgGeogebraCommonKernelArithmeticAssignmentTypeEnum:assign];
  return ret;
}

void OrgGeogebraCommonKernelGeosGeoCasCell_resolveFunctionVariableReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelArithmeticValidExpression *outputVE) {
  OrgGeogebraCommonKernelGeosGeoCasCell_initialize();
  if (!([outputVE isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]])) return;
  OrgGeogebraCommonKernelArithmeticFunctionNVar *fun = (OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(outputVE, [OrgGeogebraCommonKernelArithmeticFunctionNVar class]);
  {
    IOSObjectArray *a__ = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun)) getFunctionVariables];
    OrgGeogebraCommonKernelArithmeticFunctionVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgGeogebraCommonKernelArithmeticFunctionVariable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgGeogebraCommonKernelArithmeticFunctionVariable *fVar = *b__++;
      [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fun getExpression])) replaceVariablesWithNSString:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fVar)) getSetVarString] withOrgGeogebraCommonKernelArithmeticFunctionVariable:fVar];
    }
  }
}

void OrgGeogebraCommonKernelGeosGeoCasCell_resolveGeoElementReferencesWithOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *outVE) {
  if (self->invars_ == nil || !([outVE isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]])) return;
  OrgGeogebraCommonKernelArithmeticFunctionNVar *fun = (OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(outVE, [OrgGeogebraCommonKernelArithmeticFunctionNVar class]);
  for (NSString * __strong varLabel in nil_chk(self->invars_)) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:varLabel];
    if (geo != nil) {
      OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *ge = OrgGeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_getReplacerWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(varLabel, geo, NO);
      (void) [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun)) getExpression])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:ge];
    }
  }
}

jboolean OrgGeogebraCommonKernelGeosGeoCasCell_includesOnlyDefinedVariablesWithBoolean_(OrgGeogebraCommonKernelGeosGeoCasCell *self, jboolean ignoreUndefinedXY) {
  if (self->invars_ == nil) return YES;
  for (NSString * __strong varLabel in nil_chk(self->invars_)) {
    if (!(ignoreUndefinedXY && ([((NSString *) nil_chk(varLabel)) isEqual:@"x"] || [varLabel isEqual:@"y"]))) if ([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:varLabel] == nil) return NO;
  }
  return YES;
}

jboolean OrgGeogebraCommonKernelGeosGeoCasCell_includesNumericCommand(OrgGeogebraCommonKernelGeosGeoCasCell *self) {
  return self->includesNumericCommand__;
}

jboolean OrgGeogebraCommonKernelGeosGeoCasCell_isAssignmentVariableDefined(OrgGeogebraCommonKernelGeosGeoCasCell *self) {
  return self->assignmentVar_ != nil;
}

void OrgGeogebraCommonKernelGeosGeoCasCell_setEvalCommandWithNSString_(OrgGeogebraCommonKernelGeosGeoCasCell *self, NSString *cmd) {
  if ([@"Evaluate" isEqual:cmd]) {
    self->evalCmd_ = @"";
    [self setKeepInputUsedWithBoolean:NO];
    return;
  }
  if ([@"Substitute" isEqual:cmd]) {
    OrgGeogebraCommonKernelGeosGeoCasCell_updateInputVariablesWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, self->evalVE_);
  }
  self->evalCmd_ = cmd;
  [self setKeepInputUsedWithBoolean:self->evalCmd_ != nil && [((NSString *) nil_chk([self->evalCmd_ lowercaseString])) isEqual:@"keepinput"]];
}

void OrgGeogebraCommonKernelGeosGeoCasCell_createTwinGeoWithBoolean_(OrgGeogebraCommonKernelGeosGeoCasCell *self, jboolean allowFunction) {
  if ([self isError]) {
    return;
  }
  if (!OrgGeogebraCommonKernelGeosGeoCasCell_isAssignmentVariableDefined(self)) return;
  if ([self isNative] && ([[self getInputVE] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunction class]]) && ([self->outputVE_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]])) {
    IOSObjectArray *labels = [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(self->outputVE_)) getLabels];
    self->outputVE_ = new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->outputVE_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]), [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunction *) check_class_cast([self getInputVE], [OrgGeogebraCommonKernelArithmeticFunction class])))) getFunctionVariable]);
    [self->outputVE_ setLabelsWithNSStringArray:labels];
  }
  else if ([self isNative] && ([[self getInputVE] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]]) && ([self->outputVE_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]])) {
    IOSObjectArray *labels = [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(self->outputVE_)) getLabels];
    self->outputVE_ = new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->outputVE_, [OrgGeogebraCommonKernelArithmeticExpressionNode class]), [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast([self getInputVE], [OrgGeogebraCommonKernelArithmeticFunctionNVar class])))) getFunctionVariables]);
    [self->outputVE_ setLabelsWithNSStringArray:labels];
  }
  if ([((OrgGeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getParserFunctions])) isReservedWithNSString:self->assignmentVar_]) return;
  OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *repl = OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_getReplacerWithOrgGeogebraCommonKernelArithmeticMyArbitraryConstant_(self->arbconst_);
  [((OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *) nil_chk(self->arbconst_)) reset];
  (void) [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(self->outputVE_)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:repl];
  OrgGeogebraCommonKernelGeosGeoCasCell_setEquationMode(self);
  OrgGeogebraCommonKernelGeosGeoElement *newTwinGeo = OrgGeogebraCommonKernelGeosGeoCasCell_silentEvalInGeoGebraWithOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_(self, self->outputVE_, allowFunction);
  if ([[self->outputVE_ unwrap] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoElement class]] && [OrgGeogebraCommonKernelAlgosDrawInformationAlgo_class_() isInstance:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([self->outputVE_ unwrap], [OrgGeogebraCommonKernelGeosGeoElement class])))) getDrawAlgorithm]]) {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(newTwinGeo)) setDrawAlgorithmWithOrgGeogebraCommonKernelAlgosDrawInformationAlgo:(id<OrgGeogebraCommonKernelAlgosDrawInformationAlgo>) check_protocol_cast([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([self->outputVE_ unwrap], [OrgGeogebraCommonKernelGeosGeoElement class])))) getDrawAlgorithm], @protocol(OrgGeogebraCommonKernelAlgosDrawInformationAlgo))];
  }
  if (newTwinGeo != nil && !OrgGeogebraCommonKernelGeosGeoCasCell_dependsOnDummyWithOrgGeogebraCommonKernelGeosGeoElement_(newTwinGeo)) {
    OrgGeogebraCommonKernelGeosGeoCasCell_setTwinGeoWithOrgGeogebraCommonKernelGeosGeoElement_(self, newTwinGeo);
    if ([self->twinGeo_ isKindOfClass:[OrgGeogebraCommonKernelImplicitGeoImplicitPoly class]]) {
      [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(self->twinGeo_, [OrgGeogebraCommonKernelImplicitGeoImplicitPoly class])))) setInputForm];
    }
    if ([newTwinGeo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) {
      [newTwinGeo setLabelVisibleWithBoolean:YES];
    }
  }
}

void OrgGeogebraCommonKernelGeosGeoCasCell_setEquationMode(OrgGeogebraCommonKernelGeosGeoCasCell *self) {
  if (self->inputVE_ != nil && [[self->inputVE_ unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]] && [self->inputVE_ inspectWithOrgGeogebraCommonKernelArithmeticInspecting:new_OrgGeogebraCommonKernelGeosGeoCasCell_$1_init()]) {
    if ([[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(self->outputVE_)) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]]) {
      [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast([self->outputVE_ unwrap], [OrgGeogebraCommonKernelArithmeticEquation class])))) setForcePlane];
    }
  }
}

void OrgGeogebraCommonKernelGeosGeoCasCell_simpleUpdateTwinGeoWithBoolean_(OrgGeogebraCommonKernelGeosGeoCasCell *self, jboolean allowFunction) {
  if (self->twinGeo_ == nil) {
    return;
  }
  else if ([self isError]) {
    [self->twinGeo_ setUndefined];
    return;
  }
  OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *repl = OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_getReplacerWithOrgGeogebraCommonKernelArithmeticMyArbitraryConstant_(self->arbconst_);
  [((OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *) nil_chk(self->arbconst_)) reset];
  (void) [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(self->outputVE_)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:repl];
  OrgGeogebraCommonKernelGeosGeoCasCell_setEquationMode(self);
  self->lastOutputEvaluationGeo_ = OrgGeogebraCommonKernelGeosGeoCasCell_silentEvalInGeoGebraWithOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_(self, self->outputVE_, allowFunction);
  if (self->lastOutputEvaluationGeo_ != nil && !OrgGeogebraCommonKernelGeosGeoCasCell_dependsOnDummyWithOrgGeogebraCommonKernelGeosGeoElement_(self->lastOutputEvaluationGeo_)) {
    @try {
      if (OrgGeogebraCommonKernelGeosTestEnum_canSetWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoElement_(self->twinGeo_, self->lastOutputEvaluationGeo_)) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->twinGeo_)) setWithOrgGeogebraCommonKernelGeosGeoElement:self->lastOutputEvaluationGeo_];
      }
      else if (![self->lastOutputEvaluationGeo_ isDefined]) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->twinGeo_)) setUndefined];
      }
      else {
        self->twinGeo_ = self->lastOutputEvaluationGeo_;
        [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) replaceWithOrgGeogebraCommonKernelGeosGeoElement:self->twinGeo_ withOrgGeogebraCommonKernelGeosGeoElement:self->lastOutputEvaluationGeo_];
      }
      if ([[self->outputVE_ unwrap] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoElement class]] && [OrgGeogebraCommonKernelAlgosDrawInformationAlgo_class_() isInstance:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([self->outputVE_ unwrap], [OrgGeogebraCommonKernelGeosGeoElement class])))) getDrawAlgorithm]]) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->twinGeo_)) setDrawAlgorithmWithOrgGeogebraCommonKernelAlgosDrawInformationAlgo:(id<OrgGeogebraCommonKernelAlgosDrawInformationAlgo>) check_protocol_cast([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([self->outputVE_ unwrap], [OrgGeogebraCommonKernelGeosGeoElement class])))) getDrawAlgorithm], @protocol(OrgGeogebraCommonKernelAlgosDrawInformationAlgo))];
      }
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->twinGeo_)) setUndefined];
    [self->twinGeo_ setAlgebraVisibleWithBoolean:NO];
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self->twinGeo_];
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->twinGeo_)) update];
}

OrgGeogebraCommonKernelGeosGeoElement *OrgGeogebraCommonKernelGeosGeoCasCell_silentEvalInGeoGebraWithOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *ve, jboolean allowFunction) {
  if (!self->nativeOutput_ && [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(self->outputVE_)) isExpressionNode] && [[((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->outputVE_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getLeft] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoElement class]]) {
    OrgGeogebraCommonKernelGeosGeoElement *ret = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(self->outputVE_, [OrgGeogebraCommonKernelArithmeticExpressionNode class])) getLeft], [OrgGeogebraCommonKernelGeosGeoElement class]);
    return ret;
  }
  jboolean wasFunction = [self->outputVE_ isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *fvX = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"x");
  id<OrgGeogebraCommonKernelArithmeticTraversing> variableReplacer = OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(@"x", fvX, self->kernel_);
  (void) [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:variableReplacer];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *fvY = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"y");
  variableReplacer = OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(@"y", fvY, self->kernel_);
  (void) [ve traverseWithOrgGeogebraCommonKernelArithmeticTraversing:variableReplacer];
  if ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) is3D]) {
    OrgGeogebraCommonKernelArithmeticFunctionVariable *fvZ = new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"z");
    variableReplacer = OrgGeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelKernel_(@"z", fvZ, self->kernel_);
    (void) [ve traverseWithOrgGeogebraCommonKernelArithmeticTraversing:variableReplacer];
  }
  jboolean oldValue = [self->kernel_ isSilentMode];
  [self->kernel_ setSilentModeWithBoolean:YES];
  @try {
    OrgGeogebraCommonKernelArithmeticExpressionNode *copy_ = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ve deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_])) wrap];
    [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(copy_)) setLabelWithNSString:[ve getLabel]];
    IOSObjectArray *ggbEval = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self->kernel_ getAlgebraProcessor])) doProcessValidExpressionWithOrgGeogebraCommonKernelArithmeticValidExpression:copy_];
    if (ggbEval != nil) {
      if (!allowFunction && ([OrgGeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:IOSObjectArray_Get(ggbEval, 0)]) && !wasFunction) return nil;
      return IOSObjectArray_Get(ggbEval, 0);
    }
    return nil;
  }
  @catch (JavaLangThrowable *e) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@$$", @"GeoCasCell.silentEvalInGeoGebra: ", ve, @"\n\terror: ", [((JavaLangThrowable *) nil_chk(e)) getMessage])];
    return nil;
  }
  @finally {
    [self->kernel_ setSilentModeWithBoolean:oldValue];
  }
}

void OrgGeogebraCommonKernelGeosGeoCasCell_computeOutputWithBoolean_withBoolean_(OrgGeogebraCommonKernelGeosGeoCasCell *self, jboolean doTwinGeoUpdate, jboolean allowFunction) {
  if (self->isCircularDefinition__) {
    [self setErrorWithNSString:@"CircularDefinition"];
    if (doTwinGeoUpdate) {
      [self updateTwinGeoWithBoolean:allowFunction];
    }
    return;
  }
  NSString *result = nil;
  jboolean success = NO;
  OrgGeogebraCommonKernelCASException *ce = nil;
  self->nativeOutput_ = YES;
  if (self->inputVE_ != nil && [self getAssignmentType] == OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DELAYED()) {
    result = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->inputVE_ wrap])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericNoLocal_()];
    success = (result != nil);
  }
  else if (!self->useGeoGebraFallback_) {
    @try {
      if (self->evalVE_ == nil) {
        @throw new_OrgGeogebraCommonKernelCASException_initWithNSString_(@"Invalid input (evalVE is null)");
      }
      jboolean isSubstitute = [self isSubstitute];
      self->evalVE_ = OrgGeogebraCommonKernelGeosGeoCasCell_wrapEvaluateWithOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_(self, self->evalVE_, isSubstitute && ![self isKeepInputUsed]);
      if (OrgGeogebraCommonKernelGeosGeoCasCell_isAssignmentVariableDefined(self)) {
        [self adjustPointListWithBoolean:YES];
      }
      self->expandedEvalVE_ = self->pointList_ ? OrgGeogebraCommonKernelGeosGeoCasCell_wrapPointListWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, self->evalVE_) : self->evalVE_;
      if (!([self->expandedEvalVE_ isTopLevelCommand]) || ![((NSString *) nil_chk([((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk([self->expandedEvalVE_ getTopLevelCommand])) getName])) isEqual:@"Delete"]) {
        OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander *fex = OrgGeogebraCommonKernelArithmeticTraversing_FunctionExpander_getCollector();
        self->expandedEvalVE_ = (OrgGeogebraCommonKernelArithmeticValidExpression *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->expandedEvalVE_ wrap])) getCopyWithOrgGeogebraCommonKernelKernel:self->kernel_])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:fex], [OrgGeogebraCommonKernelArithmeticValidExpression class]);
        self->expandedEvalVE_ = OrgGeogebraCommonKernelGeosGeoCasCell_processSolveCommandWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, self->expandedEvalVE_);
      }
      result = [((id<OrgGeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getGeoGebraCAS])) evaluateGeoGebraCASWithOrgGeogebraCommonKernelArithmeticValidExpression:self->expandedEvalVE_ withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:self->arbconst_ withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericNoLocal_() withOrgGeogebraCommonKernelGeosGeoCasCell:self withOrgGeogebraCommonKernelKernel:self->kernel_];
      if (!isSubstitute && self->inputVE_ != nil && [self isKeepInputUsed]) {
        result = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->inputVE_ wrap])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericNoLocal_()];
      }
      success = (result != nil);
    }
    @catch (OrgGeogebraCommonKernelCASException *e) {
      OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@$$", @"GeoCasCell.computeOutput(), CAS eval: ", self->evalVE_, @"\n\terror: ", [((OrgGeogebraCommonKernelCASException *) nil_chk(e)) getMessage]));
      success = NO;
      ce = e;
    }
    @catch (JavaLangException *e) {
      OrgGeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@$@", @"GeoCasCell.computeOutput(), CAS eval: ", self->evalVE_, @"\n\t ", e));
      success = NO;
      ce = new_OrgGeogebraCommonKernelCASException_initWithJavaLangThrowable_(e);
    }
  }
  else {
    jboolean oldValue = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isSilentMode];
    [self->kernel_ setSilentModeWithBoolean:YES];
    @try {
      IOSObjectArray *geos = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self->kernel_ getAlgebraProcessor])) processAlgebraCommandNoExceptionHandlingWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(self->evalVE_)) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_CommandRemover_getRemoverWithNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Numeric" } count:1 type:NSString_class_()])])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_maxPrecision_()] withBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO];
      if (geos != nil) {
        if (geos->size_ == 0 && [self->evalVE_ isTopLevelCommand] && [@"Delete" isEqual:[((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk([self->evalVE_ getTopLevelCommand])) getName]]) {
          geos = [IOSObjectArray newArrayWithObjects:(id[]){ new_OrgGeogebraCommonKernelGeosGeoBoolean_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self->cons_, YES) } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
        }
        success = YES;
        result = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, 0))) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_numericNoLocal_()];
        OrgGeogebraCommonKernelAlgosAlgoElement *parentAlgo = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, 0))) getParentAlgorithm];
        if (parentAlgo != nil) {
          [parentAlgo remove];
          [parentAlgo setPrintedInXMLWithBoolean:NO];
        }
        self->outputVE_ = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, IOSObjectArray_Get(geos, 0));
        self->nativeOutput_ = NO;
      }
    }
    @catch (JavaLangThrowable *th2) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@$$", @"GeoCasCell.computeOutput(), GeoGebra eval: ", self->evalVE_, @"\n error: ", [((JavaLangThrowable *) nil_chk(th2)) getMessage])];
      success = NO;
    }
    @finally {
      [self->kernel_ setSilentModeWithBoolean:oldValue];
    }
  }
  OrgGeogebraCommonKernelGeosGeoCasCell_finalizeComputationWithBoolean_withNSString_withOrgGeogebraCommonKernelCASException_withBoolean_withBoolean_(self, success, result, ce, doTwinGeoUpdate, allowFunction);
}

OrgGeogebraCommonKernelArithmeticValidExpression *OrgGeogebraCommonKernelGeosGeoCasCell_wrapPointListWithOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *arg) {
  OrgGeogebraCommonKernelArithmeticCommand *c = new_OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_(self->kernel_, @"PointList", NO);
  [c addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(arg)) wrap]];
  OrgGeogebraCommonKernelArithmeticExpressionNode *expr = [c wrap];
  [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expr)) setLabelWithNSString:[arg getLabel]];
  return expr;
}

OrgGeogebraCommonKernelArithmeticValidExpression *OrgGeogebraCommonKernelGeosGeoCasCell_wrapEvaluateWithOrgGeogebraCommonKernelArithmeticValidExpression_withBoolean_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *arg, jboolean forceWrapping) {
  if ([[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(arg)) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]] && !forceWrapping) {
    return arg;
  }
  if ([[arg unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([arg unwrap], [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
    if (([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_FUNCTION()] || [((OrgGeogebraCommonPluginOperationEnum *) nil_chk([en getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR()]) && [[en getLeft] isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) {
      OrgGeogebraCommonKernelArithmeticExpressionNode *en2 = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([en getLeft], [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
      if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en2)) getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_DERIVATIVE()] && [[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getRight])) unwrap] isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) {
        return arg;
      }
    }
  }
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> argUnwrapped = [arg unwrap];
  OrgGeogebraCommonKernelArithmeticExpressionNode *en;
  if ([arg isExpressionNode]) {
    en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(arg, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
  }
  else if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(argUnwrapped)) isExpressionNode]) {
    en = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(argUnwrapped, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
  }
  else {
    en = new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [arg unwrap], OrgGeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil);
  }
  OrgGeogebraCommonKernelArithmeticCommand *c = new_OrgGeogebraCommonKernelArithmeticCommand_initWithOrgGeogebraCommonKernelKernel_withNSString_withBoolean_(self->kernel_, @"Evaluate", NO);
  [c addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:en];
  OrgGeogebraCommonKernelArithmeticExpressionNode *expr = [c wrap];
  [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expr)) setLabelWithNSString:[arg getLabel]];
  return expr;
}

OrgGeogebraCommonKernelArithmeticValidExpression *OrgGeogebraCommonKernelGeosGeoCasCell_processSolveCommandWithOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *ve) {
  if ((!([[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticCommand class]]))) {
    return ve;
  }
  if ([((NSString *) nil_chk([((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(((OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast([ve unwrap], [OrgGeogebraCommonKernelArithmeticCommand class])))) getName])) isEqual:@"Numeric"]) {
    [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(((OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast([ve unwrap], [OrgGeogebraCommonKernelArithmeticCommand class])))) setArgumentWithInt:0 withOrgGeogebraCommonKernelArithmeticExpressionNode:[((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(OrgGeogebraCommonKernelGeosGeoCasCell_processSolveCommandWithOrgGeogebraCommonKernelArithmeticValidExpression_(self, [((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(((OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast([ve unwrap], [OrgGeogebraCommonKernelArithmeticCommand class])))) getArgumentWithInt:0]))) wrap]];
    return ve;
  }
  if (![((NSString *) nil_chk([((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(((OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast([ve unwrap], [OrgGeogebraCommonKernelArithmeticCommand class])))) getName])) isEqual:@"Solve"]) {
    return ve;
  }
  OrgGeogebraCommonKernelArithmeticCommand *cmd = (OrgGeogebraCommonKernelArithmeticCommand *) check_class_cast([ve unwrap], [OrgGeogebraCommonKernelArithmeticCommand class]);
  OrgGeogebraCommonKernelArithmeticMyList *arg = [[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticCommand *) nil_chk(cmd)) getArgumentWithInt:0])) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]] ? (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:0])) unwrap], [OrgGeogebraCommonKernelArithmeticMyList class]) : nil;
  if (arg != nil && [arg size] == 2) {
    NSString *lhs1 = OrgGeogebraCommonKernelGeosGeoCasCell_lhsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(self, [arg getListElementWithInt:0], @"@0");
    NSString *lhs2 = OrgGeogebraCommonKernelGeosGeoCasCell_lhsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(self, [arg getListElementWithInt:1], @"@1");
    if ([((NSString *) nil_chk(lhs1)) isEqual:lhs2]) {
      NSString *test = nil;
      @try {
        test = [((OrgGeogebraCommonKernelParserParser *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getParser])) parseLabelWithNSString:lhs1];
      }
      @catch (JavaLangThrowable *t) {
      }
      if (test != nil && ![((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([arg getListElementWithInt:0])) unwrap], [OrgGeogebraCommonKernelArithmeticEquation class])))) getRHS])) evaluatesToNumberWithBoolean:YES]) {
        OrgGeogebraCommonKernelArithmeticEquation *merge = new_OrgGeogebraCommonKernelArithmeticEquation_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([arg getListElementWithInt:0])) unwrap], [OrgGeogebraCommonKernelArithmeticEquation class])))) getRHS], [((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([arg getListElementWithInt:1])) unwrap], [OrgGeogebraCommonKernelArithmeticEquation class])))) getRHS]);
        [cmd setArgumentWithInt:0 withOrgGeogebraCommonKernelArithmeticExpressionNode:[merge wrap]];
      }
    }
  }
  if ([cmd getArgumentNumber] >= 2) {
    if ([[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:1])) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]]) {
      OrgGeogebraCommonKernelArithmeticMyList *argList = (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:1])) unwrap], [OrgGeogebraCommonKernelArithmeticMyList class]);
      if ([((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(argList)) size] == 1) {
        [cmd setArgumentWithInt:1 withOrgGeogebraCommonKernelArithmeticExpressionNode:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([argList getItemWithInt:0])) wrap]];
      }
    }
    return [cmd wrap];
  }
  if ([cmd getArgumentNumber] == 0) {
    return [cmd wrap];
  }
  OrgGeogebraCommonKernelArithmeticExpressionNode *en = [cmd getArgumentWithInt:0];
  id<JavaUtilSet> set = new_JavaUtilTreeSet_initWithJavaUtilComparator_(new_OrgGeogebraCommonKernelGeosGeoCasCell_$2_init());
  (void) [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:0])) traverseWithOrgGeogebraCommonKernelArithmeticTraversing:OrgGeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_getCollectorWithJavaUtilSet_(set)];
  jint n = [[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyList class]] ? [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([en unwrap], [OrgGeogebraCommonKernelArithmeticMyList class])))) getLength] : 1;
  OrgGeogebraCommonKernelArithmeticMyList *variables = new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_withInt_(self->kernel_, n);
  jint i = 0;
  id<JavaUtilIterator> ite = [set iterator];
  if (n == 1) {
    if ([((id<JavaUtilIterator>) nil_chk(ite)) hasNext]) {
      [cmd addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelGeosGeoDummyVariable_initWithOrgGeogebraCommonKernelConstruction_withNSString_(self->cons_, [ite next]) wrap]];
    }
  }
  else {
    while (i < n && [((id<JavaUtilIterator>) nil_chk(ite)) hasNext]) {
      [variables addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:new_OrgGeogebraCommonKernelGeosGeoDummyVariable_initWithOrgGeogebraCommonKernelConstruction_withNSString_(self->cons_, [((id<JavaUtilIterator>) nil_chk(ite)) next])];
      i++;
    }
    if ([variables size] > 0) {
      [cmd addArgumentWithOrgGeogebraCommonKernelArithmeticExpressionNode:[variables wrap]];
    }
  }
  return [cmd wrap];
}

NSString *OrgGeogebraCommonKernelGeosGeoCasCell_lhsWithOrgGeogebraCommonKernelArithmeticExpressionValue_withNSString_(OrgGeogebraCommonKernelGeosGeoCasCell *self, id<OrgGeogebraCommonKernelArithmeticExpressionValue> arg, NSString *fallback) {
  return [[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(arg)) unwrap] isKindOfClass:[OrgGeogebraCommonKernelArithmeticEquation class]] ? [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticEquation *) nil_chk(((OrgGeogebraCommonKernelArithmeticEquation *) check_class_cast([arg unwrap], [OrgGeogebraCommonKernelArithmeticEquation class])))) getLHS])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()] : fallback;
}

void OrgGeogebraCommonKernelGeosGeoCasCell_finalizeComputationWithBoolean_withNSString_withOrgGeogebraCommonKernelCASException_withBoolean_withBoolean_(OrgGeogebraCommonKernelGeosGeoCasCell *self, jboolean success, NSString *result, OrgGeogebraCommonKernelCASException *ce, jboolean doTwinGeoUpdate, jboolean allowFunction) {
  if (success) {
    if (((jint) [((NSString *) nil_chk(self->prefix_)) length]) == 0 && ((jint) [((NSString *) nil_chk(self->postfix_)) length]) == 0) {
      [self setOutputWithNSString:result withBoolean:YES];
    }
    else {
      JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
      (void) [sb appendWithNSString:self->prefix_];
      (void) [sb appendWithNSString:@" ("];
      (void) [sb appendWithNSString:result];
      (void) [sb appendWithNSString:@") "];
      (void) [sb appendWithNSString:self->postfix_];
      [self setOutputWithNSString:[sb description] withBoolean:YES];
    }
  }
  else {
    if (ce == nil) {
      [self setErrorWithNSString:@"CAS.GeneralErrorMessage"];
    }
    else {
      [self setErrorWithNSString:[ce getKey]];
    }
  }
  if (doTwinGeoUpdate) {
    [self updateTwinGeoWithBoolean:allowFunction];
  }
  if (self->outputVE_ != nil && (!doTwinGeoUpdate || self->twinGeo_ == nil) && ![((OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum *) nil_chk([self getAssignmentType])) isEqual:OrgGeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DELAYED()]) {
    OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *repl = OrgGeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_getReplacerWithOrgGeogebraCommonKernelArithmeticMyArbitraryConstant_(self->arbconst_);
    [((OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *) nil_chk(self->arbconst_)) reset];
    (void) [self->outputVE_ traverseWithOrgGeogebraCommonKernelArithmeticTraversing:repl];
  }
  self->firstComputeOutput_ = NO;
  OrgGeogebraCommonKernelGeosGeoCasCell_clearStrings(self);
}

void OrgGeogebraCommonKernelGeosGeoCasCell_setTwinGeoWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelGeosGeoElement *newTwinGeo) {
  if (newTwinGeo == nil && self->twinGeo_ != nil) {
    OrgGeogebraCommonKernelGeosGeoElement *oldTwinGeo = self->twinGeo_;
    self->twinGeo_ = nil;
    [oldTwinGeo setCorrespondingCasCellWithOrgGeogebraCommonKernelGeosGeoCasCell:nil];
    [oldTwinGeo doRemove];
  }
  self->twinGeo_ = newTwinGeo;
  if (self->twinGeo_ == nil) {
    return;
  }
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(self->twinGeo_)) setCorrespondingCasCellWithOrgGeogebraCommonKernelGeosGeoCasCell:self];
  [self->twinGeo_ setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:[self getParentAlgorithm]];
  if (OrgGeogebraCommonKernelGeosGeoCasCell_dependsOnDummyWithOrgGeogebraCommonKernelGeosGeoElement_(self->twinGeo_)) {
    [self->twinGeo_ setUndefined];
    [self->twinGeo_ setAlgebraVisibleWithBoolean:NO];
  }
  else {
    [self->twinGeo_ setAlgebraVisibleWithBoolean:YES];
  }
}

jboolean OrgGeogebraCommonKernelGeosGeoCasCell_dependsOnDummyWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *geo) {
  OrgGeogebraCommonKernelGeosGeoCasCell_initialize();
  if ([geo isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) {
    OrgGeogebraCommonKernelGeosGeoElement *subst = [((OrgGeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(((OrgGeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoDummyVariable class])))) getElementWithSameName];
    if (subst != nil && !subst->sendValueToCas_) {
      return NO;
    }
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"DUMMY", geo));
    return YES;
  }
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
    for (jint i = 0; i < [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class])) size]; i++) if (OrgGeogebraCommonKernelGeosGeoCasCell_dependsOnDummyWithOrgGeogebraCommonKernelGeosGeoElement_([((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class])) getWithInt:i])) {
      return YES;
    }
  }
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = [geo getParentAlgorithm];
  if (algo == nil || [geo getParentAlgorithm] == nil) {
    return NO;
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput]))->size_; i++) if (OrgGeogebraCommonKernelGeosGeoCasCell_dependsOnDummyWithOrgGeogebraCommonKernelGeosGeoElement_(IOSObjectArray_Get(nil_chk([algo getInput]), i))) {
    return YES;
  }
  return NO;
}

void OrgGeogebraCommonKernelGeosGeoCasCell_setInputVEWithOrgGeogebraCommonKernelArithmeticValidExpression_(OrgGeogebraCommonKernelGeosGeoCasCell *self, OrgGeogebraCommonKernelArithmeticValidExpression *inputVE) {
  self->inputVE_ = inputVE;
}

jboolean OrgGeogebraCommonKernelGeosGeoCasCell_inequalityInEvalVE(OrgGeogebraCommonKernelGeosGeoCasCell *self) {
  if (self->expandedEvalVE_ == nil) return NO;
  return [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(self->expandedEvalVE_)) inspectWithOrgGeogebraCommonKernelArithmeticInspecting:OrgGeogebraCommonKernelArithmeticInspecting_IneqFinderEnum_get_INSTANCE()];
}

void OrgGeogebraCommonKernelGeosGeoCasCell_clearStrings(OrgGeogebraCommonKernelGeosGeoCasCell *self) {
  self->tooltip_ = nil;
  self->latex_ = nil;
}

NSString *OrgGeogebraCommonKernelGeosGeoCasCell_getPlotVar(OrgGeogebraCommonKernelGeosGeoCasCell *self) {
  jboolean isCasVector = NO;
  if (self->outputVE_ == nil) {
    return OrgGeogebraCommonKernelGeosGeoCasCell_PLOT_VAR_;
  }
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> unwrapped = [((OrgGeogebraCommonKernelArithmeticValidExpression *) nil_chk(self->outputVE_)) unwrap];
  if (unwrapped == nil) {
    return OrgGeogebraCommonKernelGeosGeoCasCell_PLOT_VAR_;
  }
  if ([unwrapped isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyVecNode class]]) {
    isCasVector = [((OrgGeogebraCommonKernelArithmeticMyVecNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyVecNode *) check_class_cast(unwrapped, [OrgGeogebraCommonKernelArithmeticMyVecNode class])))) evaluatesToVectorNotPoint];
  }
  else if ([unwrapped isKindOfClass:[OrgGeogebraCommonKernelArithmetic3DMyVec3DNode class]]) {
    isCasVector = [((OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *) nil_chk(((OrgGeogebraCommonKernelArithmetic3DMyVec3DNode *) check_class_cast(unwrapped, [OrgGeogebraCommonKernelArithmetic3DMyVec3DNode class])))) evaluatesToVectorNotPoint];
  }
  if (isCasVector) {
    return [((NSString *) nil_chk(OrgGeogebraCommonKernelGeosGeoCasCell_PLOT_VAR_)) lowercaseString];
  }
  return OrgGeogebraCommonKernelGeosGeoCasCell_PLOT_VAR_;
}

NSString *OrgGeogebraCommonKernelGeosGeoCasCell_getOutputPrefix(OrgGeogebraCommonKernelGeosGeoCasCell *self) {
  if (((OrgGeogebraCommonMainLocalization *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getLocalization]))->rightToLeftReadingOrder__) {
    return OrgGeogebraCommonUtilUnicode_get_CAS_OUTPUT_PREFIX_RTL_();
  }
  return OrgGeogebraCommonUtilUnicode_get_CAS_OUTPUT_PREFIX_();
}

void OrgGeogebraCommonKernelGeosGeoCasCell_updateDependentCellInput(OrgGeogebraCommonKernelGeosGeoCasCell *self) {
  id<JavaUtilList> algos = [self getAlgorithmList];
  if (algos != nil) {
    for (OrgGeogebraCommonKernelAlgosAlgoElement * __strong algo in algos) {
      if ([OrgGeogebraCommonKernelAlgoCasCellInterface_class_() isInstance:algo]) {
        id<OrgGeogebraCommonKernelAlgoCasCellInterface> algoCell = (id<OrgGeogebraCommonKernelAlgoCasCellInterface>) check_protocol_cast(algo, @protocol(OrgGeogebraCommonKernelAlgoCasCellInterface));
        [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk([((id<OrgGeogebraCommonKernelAlgoCasCellInterface>) nil_chk(algoCell)) getCasCell])) updateInputStringWithRowReferencesWithBoolean:YES];
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoCasCell)

@implementation OrgGeogebraCommonKernelGeosGeoCasCell_$1

- (jboolean)checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)v {
  return ([v isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] || [v isKindOfClass:[OrgGeogebraCommonKernelGeosGeoDummyVariable class]]) && [@"z" isEqual:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
}

- (instancetype)init {
  OrgGeogebraCommonKernelGeosGeoCasCell_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "check", "Z", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelGeosGeoCasCell", "setEquationMode" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoCasCell_$1 = { 2, "", "org.geogebra.common.kernel.geos", "GeoCasCell", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoCasCell_$1;
}

@end

void OrgGeogebraCommonKernelGeosGeoCasCell_$1_init(OrgGeogebraCommonKernelGeosGeoCasCell_$1 *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelGeosGeoCasCell_$1 *new_OrgGeogebraCommonKernelGeosGeoCasCell_$1_init() {
  OrgGeogebraCommonKernelGeosGeoCasCell_$1 *self = [OrgGeogebraCommonKernelGeosGeoCasCell_$1 alloc];
  OrgGeogebraCommonKernelGeosGeoCasCell_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoCasCell_$1)

@implementation OrgGeogebraCommonKernelGeosGeoCasCell_$2

- (jint)compareWithId:(NSString *)o1
               withId:(NSString *)o2 {
  if ([((NSString *) nil_chk(o1)) isEqual:o2]) return 0;
  if ([o1 isEqual:@"x"]) return -1;
  if ([((NSString *) nil_chk(o2)) isEqual:@"x"]) return 1;
  if ([o1 isEqual:@"y"]) return -1;
  if ([o2 isEqual:@"y"]) return 1;
  if ([o1 isEqual:@"z"]) return -1;
  if ([o2 isEqual:@"z"]) return 1;
  return [o1 compareToWithId:o2];
}

- (instancetype)init {
  OrgGeogebraCommonKernelGeosGeoCasCell_$2_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelGeosGeoCasCell", "processSolveCommandWithOrgGeogebraCommonKernelArithmeticValidExpression:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoCasCell_$2 = { 2, "", "org.geogebra.common.kernel.geos", "GeoCasCell", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Comparator<Ljava/lang/String;>;" };
  return &_OrgGeogebraCommonKernelGeosGeoCasCell_$2;
}

@end

void OrgGeogebraCommonKernelGeosGeoCasCell_$2_init(OrgGeogebraCommonKernelGeosGeoCasCell_$2 *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelGeosGeoCasCell_$2 *new_OrgGeogebraCommonKernelGeosGeoCasCell_$2_init() {
  OrgGeogebraCommonKernelGeosGeoCasCell_$2 *self = [OrgGeogebraCommonKernelGeosGeoCasCell_$2 alloc];
  OrgGeogebraCommonKernelGeosGeoCasCell_$2_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoCasCell_$2)
