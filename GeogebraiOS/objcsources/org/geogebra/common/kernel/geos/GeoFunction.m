//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/geos/GeoFunction.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/PathMover.h"
#include "org/geogebra/common/kernel/PathMoverGeneric.h"
#include "org/geogebra/common/kernel/PathParameter.h"
#include "org/geogebra/common/kernel/RegionParameters.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoFunctionFreehand.h"
#include "org/geogebra/common/kernel/algos/AlgoMacroInterface.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/BooleanValue.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/arithmetic/IneqTree.h"
#include "org/geogebra/common/kernel/arithmetic/Inequality.h"
#include "org/geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/MyList.h"
#include "org/geogebra/common/kernel/arithmetic/MyNumberPair.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/CasEvaluableFunction.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionable.h"
#include "org/geogebra/common/kernel/geos/GeoInterval.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/SurfaceEvaluable.h"
#include "org/geogebra/common/kernel/roots/RealRootFunction.h"
#include "org/geogebra/common/kernel/roots/RealRootUtil.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/Unicode.h"
#include "org/geogebra/common/util/debug/Log.h"

@interface OrgGeogebraCommonKernelGeosGeoFunction () {
 @public
  jboolean trace_;
  jboolean includesDivisionByVar__;
  jboolean includesNonContinuousIntegral__;
  jboolean evalSwapped_;
  JavaLangBoolean *isInequality__;
  JavaUtilTreeSet *surfaceEvaluables_;
  OrgGeogebraCommonKernelGeosGeoFunction *derivGeoFun_;
  OrgGeogebraCommonKernelArithmeticFunction *includesNonContinuousIntegralFun_;
  OrgGeogebraCommonKernelArithmeticFunction *includesDivisionByVarFun_;
  jboolean showOnAxis__;
  IOSDoubleArray *bounds_;
}

- (void)checkDefined;

- (void)pointChangedWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P;

- (void)pointChangedBooleanWithBoolean:(jboolean)b
withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P;

+ (OrgGeogebraCommonKernelArithmeticFunctionNVar *)fromExprWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)sum
                                                                                           withJavaUtilHashMap:(JavaUtilHashMap *)varmap
                                                                                           withJavaUtilTreeSet:(JavaUtilTreeSet *)varNames;

+ (OrgGeogebraCommonKernelArithmeticExpressionNode *)toExprWithOrgGeogebraCommonKernelArithmeticFunctionalNVar:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)lt
                                                                                           withJavaUtilHashMap:(JavaUtilHashMap *)varMap
                                                                             withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel;

+ (jboolean)CASErrorWithNSString:(NSString *)str
                     withBoolean:(jboolean)allowInfinity;

- (jboolean)collectCasesWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)condRoot
                                                      withJavaUtilArrayList:(JavaUtilArrayList *)cases
                                                      withJavaUtilArrayList:(JavaUtilArrayList *)conditions
                          withOrgGeogebraCommonKernelGeosGeoFunction_Bounds:(OrgGeogebraCommonKernelGeosGeoFunction_Bounds *)parentCond;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction, isInequality__, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction, surfaceEvaluables_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction, derivGeoFun_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction, includesNonContinuousIntegralFun_, OrgGeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction, includesDivisionByVarFun_, OrgGeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction, bounds_, IOSDoubleArray *)

static JavaLangStringBuilder *OrgGeogebraCommonKernelGeosGeoFunction_sb_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoFunction, sb_, JavaLangStringBuilder *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoFunction_setIntervalWithDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoFunction *self, jdouble a, jdouble b);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(OrgGeogebraCommonKernelGeosGeoFunction *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoFunction_checkDefined(OrgGeogebraCommonKernelGeosGeoFunction *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoFunction_hasInterval(OrgGeogebraCommonKernelGeosGeoFunction *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoFunction_evaluateBooleanWithDouble_(OrgGeogebraCommonKernelGeosGeoFunction *self, jdouble x);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoFunction_pointChangedWithOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonKernelGeosGeoFunction *self, OrgGeogebraCommonKernelMatrixCoords *P);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoFunction_pointChangedBooleanWithBoolean_withOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonKernelGeosGeoFunction *self, jboolean b, OrgGeogebraCommonKernelMatrixCoords *P);

__attribute__((unused)) static id<OrgGeogebraCommonKernelRootsRealRootFunction> OrgGeogebraCommonKernelGeosGeoFunction_getRealRootFunctionY(OrgGeogebraCommonKernelGeosGeoFunction *self);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticFunctionNVar *OrgGeogebraCommonKernelGeosGeoFunction_fromExprWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilHashMap_withJavaUtilTreeSet_(OrgGeogebraCommonKernelArithmeticExpressionNode *sum, JavaUtilHashMap *varmap, JavaUtilTreeSet *varNames);

__attribute__((unused)) static OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelGeosGeoFunction_toExprWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> lt, JavaUtilHashMap *varMap, OrgGeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoFunction_CASErrorWithNSString_withBoolean_(NSString *str, jboolean allowInfinity);

__attribute__((unused)) static IOSObjectArray *OrgGeogebraCommonKernelGeosGeoFunction_getTempVarCASStringWithBoolean_(OrgGeogebraCommonKernelGeosGeoFunction *self, jboolean symbolic);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoFunction_collectCasesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilArrayList_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoFunction_Bounds_(OrgGeogebraCommonKernelGeosGeoFunction *self, OrgGeogebraCommonKernelArithmeticExpressionNode *condRoot, JavaUtilArrayList *cases, JavaUtilArrayList *conditions, OrgGeogebraCommonKernelGeosGeoFunction_Bounds *parentCond);

@interface OrgGeogebraCommonKernelGeosGeoFunction_Bounds () {
 @public
  OrgGeogebraCommonKernelGeosGeoFunction *this$0_;
  jboolean lowerSharp_, upperSharp_;
  JavaLangDouble *lower_, *upper_;
  OrgGeogebraCommonKernelArithmeticExpressionNode *condition_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction_Bounds, this$0_, OrgGeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction_Bounds, lower_, JavaLangDouble *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction_Bounds, upper_, JavaLangDouble *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction_Bounds, condition_, OrgGeogebraCommonKernelArithmeticExpressionNode *)

@interface OrgGeogebraCommonKernelGeosGeoFunction_$1 : OrgGeogebraCommonKernelArithmeticFunction {
 @public
  OrgGeogebraCommonKernelGeosGeoFunction *this$0_;
}

- (jdouble)evaluateWithDouble:(jdouble)x;

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)outer$
                             withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelGeosGeoFunction_$1)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction_$1, this$0_, OrgGeogebraCommonKernelGeosGeoFunction *)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoFunction_$1_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelGeosGeoFunction_$1 *self, OrgGeogebraCommonKernelGeosGeoFunction *outer$, OrgGeogebraCommonKernelKernel *arg$0);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoFunction_$1 *new_OrgGeogebraCommonKernelGeosGeoFunction_$1_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelGeosGeoFunction *outer$, OrgGeogebraCommonKernelKernel *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelGeosGeoFunction_$1)

@interface OrgGeogebraCommonKernelGeosGeoFunction_$2 : OrgGeogebraCommonKernelArithmeticFunction {
 @public
  OrgGeogebraCommonKernelGeosGeoFunction *this$0_;
}

- (jdouble)evaluateWithDouble:(jdouble)x;

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)outer$
                             withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelGeosGeoFunction_$2)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction_$2, this$0_, OrgGeogebraCommonKernelGeosGeoFunction *)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoFunction_$2_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelGeosGeoFunction_$2 *self, OrgGeogebraCommonKernelGeosGeoFunction *outer$, OrgGeogebraCommonKernelKernel *arg$0);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoFunction_$2 *new_OrgGeogebraCommonKernelGeosGeoFunction_$2_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelGeosGeoFunction *outer$, OrgGeogebraCommonKernelKernel *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelGeosGeoFunction_$2)

@interface OrgGeogebraCommonKernelGeosGeoFunction_$3 : OrgGeogebraCommonKernelArithmeticFunction {
 @public
  OrgGeogebraCommonKernelGeosGeoFunction *this$0_;
}

- (jdouble)evaluateWithDouble:(jdouble)x;

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)outer$
                             withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelGeosGeoFunction_$3)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction_$3, this$0_, OrgGeogebraCommonKernelGeosGeoFunction *)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoFunction_$3_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelGeosGeoFunction_$3 *self, OrgGeogebraCommonKernelGeosGeoFunction *outer$, OrgGeogebraCommonKernelKernel *arg$0);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoFunction_$3 *new_OrgGeogebraCommonKernelGeosGeoFunction_$3_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelGeosGeoFunction *outer$, OrgGeogebraCommonKernelKernel *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelGeosGeoFunction_$3)

@interface OrgGeogebraCommonKernelGeosGeoFunction_$4 : NSObject < OrgGeogebraCommonKernelRootsRealRootFunction >

- (jdouble)evaluateWithDouble:(jdouble)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelGeosGeoFunction_$4)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoFunction_$4_init(OrgGeogebraCommonKernelGeosGeoFunction_$4 *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoFunction_$4 *new_OrgGeogebraCommonKernelGeosGeoFunction_$4_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelGeosGeoFunction_$4)

@interface OrgGeogebraCommonKernelGeosGeoFunction_$5 : NSObject < OrgGeogebraCommonKernelRootsRealRootFunction > {
 @public
  OrgGeogebraCommonKernelGeosGeoFunction *this$0_;
}

- (jdouble)evaluateWithDouble:(jdouble)t;

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelGeosGeoFunction_$5)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoFunction_$5, this$0_, OrgGeogebraCommonKernelGeosGeoFunction *)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoFunction_$5_initWithOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction_$5 *self, OrgGeogebraCommonKernelGeosGeoFunction *outer$);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoFunction_$5 *new_OrgGeogebraCommonKernelGeosGeoFunction_$5_initWithOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelGeosGeoFunction_$5)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelGeosGeoFunction)

jint OrgGeogebraCommonKernelGeosGeoFunction_FUNCTION_DIRECT_ = 1;
jint OrgGeogebraCommonKernelGeosGeoFunction_FUNCTION_COMPOSITE_IPOLY_FUNCS_ = 3;
IOSObjectArray *OrgGeogebraCommonKernelGeosGeoFunction_dummy1_;
IOSCharArray *OrgGeogebraCommonKernelGeosGeoFunction_dummy2_;

@implementation OrgGeogebraCommonKernelGeosGeoFunction

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
              withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)f {
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(self, c, label, f);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
              withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)f {
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_(self, c, f);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
         withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:(OrgGeogebraCommonKernelImplicitGeoImplicitPoly *)iPoly
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                 withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)g {
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(self, c, iPoly, f, g);
  return self;
}

- (void)setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)g {
  [super setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:g];
  if ([g isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) [self setShowOnAxisWithBoolean:((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoFunction class]))))->showOnAxis__];
}

- (NSString *)getTypeString {
  return (isInequality__ != nil && [isInequality__ booleanValue]) ? @"Inequality" : @"Function";
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_FUNCTION();
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f {
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelGeosGeoFunction_(self, f);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)en
                  withOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv {
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(self, en, fv);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelGeosGeoFunction_(self) autorelease];
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelArithmeticFunction *geoFun = geo == nil ? nil : [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk([((id<OrgGeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelGeosGeoFunctionable))) getGeoFunction])) getFunction];
  if (geoFun == nil) {
    OrgGeogebraCommonKernelGeosGeoFunction_set_fun_(self, nil);
    isDefined__ = NO;
    return;
  }
  isDefined__ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined];
  [self setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:[new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelKernel_(geoFun, kernel_) autorelease]];
  if (geo->cons_ != cons_ && [self isAlgoMacroOutput]) {
    if (![geo isIndependent]) {
      id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface> algoMacro = (id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface>) check_protocol_cast([self getParentAlgorithm], @protocol(OrgGeogebraCommonKernelAlgosAlgoMacroInterface));
      [((id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface>) nil_chk(algoMacro)) initFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar:self->fun_];
    }
  }
  OrgGeogebraCommonKernelGeosGeoFunction_set_isInequality__(self, nil);
}

- (void)setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)f {
  OrgGeogebraCommonKernelGeosGeoFunction_set_fun_(self, f);
  OrgGeogebraCommonKernelGeosGeoFunction_set_includesNonContinuousIntegralFun_(self, nil);
  for (id<OrgGeogebraCommonKernelKernelNDSurfaceEvaluable> __strong geo in nil_chk(surfaceEvaluables_)) {
    [((id<OrgGeogebraCommonKernelKernelNDSurfaceEvaluable>) nil_chk(geo)) resetDerivatives];
  }
}

- (jboolean)addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algorithm {
  jboolean added = [super addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
  if (added) {
    for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algorithm)) getOutputLength]; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [algorithm getOutputWithInt:i];
      if ([OrgGeogebraCommonKernelKernelNDSurfaceEvaluable_class_() isInstance:geo]) {
        [((JavaUtilTreeSet *) nil_chk(surfaceEvaluables_)) addWithId:(id<OrgGeogebraCommonKernelKernelNDSurfaceEvaluable>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelKernelNDSurfaceEvaluable))];
      }
    }
  }
  return added;
}

- (jboolean)removeFromUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algorithm {
  jboolean removed = [super removeFromUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
  if (removed) {
    for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algorithm)) getOutputLength]; i++) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [algorithm getOutputWithInt:i];
      if ([OrgGeogebraCommonKernelKernelNDSurfaceEvaluable_class_() isInstance:geo]) {
        [((JavaUtilTreeSet *) nil_chk(surfaceEvaluables_)) removeWithId:geo];
      }
    }
  }
  return removed;
}

- (void)initFunction {
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) initFunction];
  [self setConstructionDefaults];
}

- (OrgGeogebraCommonKernelArithmeticFunction *)getFunction {
  return fun_;
}

- (jboolean)setIntervalWithDouble:(jdouble)a
                       withDouble:(jdouble)b {
  return OrgGeogebraCommonKernelGeosGeoFunction_setIntervalWithDouble_withDouble_(self, a, b);
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)getFunctionExpression {
  return OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(self);
}

- (void)replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (fun_ != nil) {
    [fun_ replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (OrgGeogebraCommonKernelArithmeticFunction *)getFunctionWithDouble:(jdouble)x {
  return fun_;
}

- (void)setDerivativeWithOrgGeogebraCommonKernelGeosCasEvaluableFunction:(id<OrgGeogebraCommonKernelGeosCasEvaluableFunction>)fd
                                                                 withInt:(jint)n
                                                             withBoolean:(jboolean)fast {
  OrgGeogebraCommonKernelGeosGeoFunction *f = (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(fd, [OrgGeogebraCommonKernelGeosGeoFunction class]);
  if ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) isDefined]) {
    OrgGeogebraCommonKernelGeosGeoFunction_set_fun_(self, [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f->fun_)) getDerivativeWithInt:n withBoolean:fast]);
    OrgGeogebraCommonKernelGeosGeoFunction_checkDefined(self);
  }
  else {
    isDefined__ = NO;
  }
}

- (void)checkDefined {
  OrgGeogebraCommonKernelGeosGeoFunction_checkDefined(self);
}

- (void)setUsingCasCommandWithNSString:(NSString *)ggbCasCmd
withOrgGeogebraCommonKernelGeosCasEvaluableFunction:(id<OrgGeogebraCommonKernelGeosCasEvaluableFunction>)f
                           withBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:(OrgGeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst {
  OrgGeogebraCommonKernelGeosGeoFunction *ff = (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(f, [OrgGeogebraCommonKernelGeosGeoFunction class]);
  if ([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(ff)) isDefined]) {
    OrgGeogebraCommonKernelGeosGeoFunction_set_fun_(self, (OrgGeogebraCommonKernelArithmeticFunction *) check_class_cast([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(ff->fun_)) evalCasCommandWithNSString:ggbCasCmd withBoolean:symbolic withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:arbconst], [OrgGeogebraCommonKernelArithmeticFunction class]));
    OrgGeogebraCommonKernelGeosGeoFunction_checkDefined(self);
  }
  else {
    isDefined__ = NO;
  }
}

- (jdouble)evaluateWithDouble:(jdouble)x {
  if (fun_ == nil || !isDefined__) return JavaLangDouble_NaN;
  return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) evaluateWithDouble:x];
}

- (jdouble)evaluateWithDoubleArray:(IOSDoubleArray *)vals {
  return [self evaluateWithDouble:IOSDoubleArray_Get(nil_chk(vals), 0)];
}

- (jdouble)getIntervalMin {
  return intervalMin_;
}

- (jdouble)getIntervalMax {
  return intervalMax_;
}

- (jboolean)hasInterval {
  return OrgGeogebraCommonKernelGeosGeoFunction_hasInterval(self);
}

- (jboolean)evaluateBooleanWithDouble:(jdouble)x {
  return OrgGeogebraCommonKernelGeosGeoFunction_evaluateBooleanWithDouble_(self, x);
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getGeoDerivativeWithInt:(jint)order {
  if (derivGeoFun_ == nil) {
    OrgGeogebraCommonKernelGeosGeoFunction_setAndConsume_derivGeoFun_(self, new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons_));
  }
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(derivGeoFun_)) setDerivativeWithOrgGeogebraCommonKernelGeosCasEvaluableFunction:self withInt:order withBoolean:NO];
  return derivGeoFun_;
}

- (void)translateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  [self translateWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX] withDouble:[v getY]];
}

- (jboolean)isTranslateable {
  return fun_ != nil && ![self isBooleanFunction];
}

- (void)translateWithDouble:(jdouble)vx
                 withDouble:(jdouble)vy {
  if ([[self getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand class]]) {
    OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *algo = (OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *) check_class_cast([self getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand class]);
    OrgGeogebraCommonKernelGeosGeoList *list = [((OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand *) nil_chk(algo)) getList];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(list)) getWithInt:0], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([list getWithInt:0], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble] + vx];
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([list getWithInt:1], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([list getWithInt:1], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble] + vx];
    for (jint i = 2; i < [list size]; i++) {
      [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([list getWithInt:i], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([list getWithInt:i], [OrgGeogebraCommonKernelGeosGeoNumeric class])))) getDouble] + vy];
    }
    [algo compute];
  }
  else {
    [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) translateWithDouble:vx withDouble:vy];
  }
}

- (jboolean)isPolynomialFunctionWithBoolean:(jboolean)forRootFinding
                                withBoolean:(jboolean)symbolic {
  if (![self isDefined]) {
    return NO;
  }
  return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) isConstantFunction] || (symbolic ? [fun_ getSymbolicPolynomialFactorsWithBoolean:forRootFinding withBoolean:NO] : [fun_ getPolynomialFactorsWithBoolean:forRootFinding]) != nil;
}

- (jboolean)isPolynomialFunctionWithBoolean:(jboolean)forRootFinding {
  return [self isPolynomialFunctionWithBoolean:forRootFinding withBoolean:NO];
}

- (jboolean)includesDivisionByVar {
  if (includesDivisionByVarFun_ != fun_) {
    OrgGeogebraCommonKernelGeosGeoFunction_set_includesDivisionByVarFun_(self, fun_);
    includesDivisionByVar__ = (fun_ != nil && [fun_ includesDivisionByVariable]);
  }
  return includesDivisionByVar__;
}

- (jboolean)includesNonContinuousIntegral {
  if (includesNonContinuousIntegralFun_ != fun_) {
    OrgGeogebraCommonKernelGeosGeoFunction_set_includesNonContinuousIntegralFun_(self, fun_);
    includesNonContinuousIntegral__ = (fun_ != nil && [fun_ includesNonContinuousIntegral]);
  }
  return includesNonContinuousIntegral__;
}

- (jboolean)isDefined {
  return isDefined__ && fun_ != nil;
}

- (jboolean)isFillable {
  if (fun_ != nil && isInequality__ == nil && [self isBooleanFunction]) [self getIneqs];
  return isInequality__ != nil && [isInequality__ booleanValue];
}

- (jboolean)isInverseFillable {
  return [self isFillable];
}

- (void)setDefinedWithBoolean:(jboolean)defined {
  isDefined__ = defined;
}

- (void)setUndefined {
  isDefined__ = NO;
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  if (fun_ != nil && isInequality__ == nil && [self isBooleanFunction]) [self getIneqs];
  return [self isDefined] && (![self isBooleanFunction] || [((JavaLangBoolean *) nil_chk(isInequality__)) booleanValue]);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  OrgGeogebraCommonKernelGeosGeoFunction_initStringBuilderWithJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_withNSString_withNSString_withBoolean_withBoolean_(sbToString_, tpl, label_, [self getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl], [self isLabelSet], [self isBooleanFunction]);
  [sbToString_ appendWithNSString:[self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString_ description];
}

+ (void)initStringBuilderWithJavaLangStringBuilder:(JavaLangStringBuilder *)stringBuilder
         withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                      withNSString:(NSString *)label
                                      withNSString:(NSString *)var
                                       withBoolean:(jboolean)isLabelSet
                                       withBoolean:(jboolean)isBooleanFunction {
  OrgGeogebraCommonKernelGeosGeoFunction_initStringBuilderWithJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_withNSString_withNSString_withBoolean_withBoolean_(stringBuilder, tpl, label, var, isLabelSet, isBooleanFunction);
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if ([self isFreehandFunction]) {
    return JreStrcat("$C@C", [self getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl], '(', [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) getFunctionVariable], ')');
  }
  if (fun_ != nil && [self isDefined]) {
    return [fun_ toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

- (NSString *)toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if ([self isLocalVariable]) {
    return label_;
  }
  if (fun_ != nil && [self isDefined]) {
    return [fun_ toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

- (NSString *)toSymbolicStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (fun_ != nil && [self isDefined]) {
    return [fun_ toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (fun_ != nil && [self isDefined]) {
    return [fun_ toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return JreStrcat("$$$", @" \\text{", [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"], @"} ");
}

- (void)getXMLWithBoolean:(jboolean)getListenersToo
withJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml {
  if ([self isIndependent] && [self getDefaultGeoType] < 0) {
    [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"<expression"];
    [sbxml appendWithNSString:@" label =\""];
    [sbxml appendWithNSString:label_];
    [sbxml appendWithNSString:@"\" exp=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, [self toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_()]);
    [sbxml appendWithNSString:@"\"/>\n"];
  }
  [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"<element"];
  [sbxml appendWithNSString:@" type=\"function\""];
  [sbxml appendWithNSString:@" label=\""];
  [sbxml appendWithNSString:label_];
  if ([self getDefaultGeoType] >= 0) {
    [sbxml appendWithNSString:@"\" default=\""];
    [sbxml appendWithInt:[self getDefaultGeoType]];
  }
  [sbxml appendWithNSString:@"\">\n"];
  [self getXMLtagsWithJavaLangStringBuilder:sbxml];
  [self getCaptionXMLWithJavaLangStringBuilder:sbxml];
  if (getListenersToo) [self getListenerTagsXMLWithJavaLangStringBuilder:OrgGeogebraCommonKernelGeosGeoFunction_sb_];
  [sbxml appendWithNSString:@"</element>\n"];
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml {
  [super getXMLtagsWithJavaLangStringBuilder:sbxml];
  [self getLineStyleXMLWithJavaLangStringBuilder:sbxml];
  if ([self showOnAxis]) {
    [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"<showOnAxis val=\"true\" />"];
  }
}

- (void)getIntervalWithDoubleArray:(IOSDoubleArray *)bounds0 {
  *IOSDoubleArray_GetRef(nil_chk(bounds0), 0) = JavaLangDouble_NEGATIVE_INFINITY;
  *IOSDoubleArray_GetRef(bounds0, 1) = JavaLangDouble_POSITIVE_INFINITY;
  jdouble bound;
  OrgGeogebraCommonKernelArithmeticExpressionNode *inequalityEn = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(self))) getLeft], [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
  OrgGeogebraCommonPluginOperationEnum *op = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(inequalityEn)) getOperation];
  switch ([op ordinal]) {
    default:
    OrgGeogebraCommonUtilDebugLog_errorWithNSString_(@"problem in GeoFunction.getInterval()");
    return;
    case OrgGeogebraCommonPluginOperation_AND_INTERVAL:
    OrgGeogebraCommonKernelGeosGeoInterval_updateBoundariesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDoubleArray_withNSStringArray_withCharArray_(inequalityEn, bounds0, OrgGeogebraCommonKernelGeosGeoFunction_dummy1_, OrgGeogebraCommonKernelGeosGeoFunction_dummy2_);
    break;
    case OrgGeogebraCommonPluginOperation_LESS:
    case OrgGeogebraCommonPluginOperation_LESS_EQUAL:
    case OrgGeogebraCommonPluginOperation_GREATER:
    case OrgGeogebraCommonPluginOperation_GREATER_EQUAL:
    if ([[inequalityEn getLeft] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
      bound = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([inequalityEn getRight])) evaluateDouble];
    }
    else if ([[inequalityEn getRight] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
      bound = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([inequalityEn getLeft])) evaluateDouble];
      op = [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(op)) reverseLeftToRight];
    }
    else {
      bound = JavaLangDouble_NaN;
    }
    switch ([op ordinal]) {
      case OrgGeogebraCommonPluginOperation_LESS:
      case OrgGeogebraCommonPluginOperation_LESS_EQUAL:
      *IOSDoubleArray_GetRef(bounds0, 1) = bound;
      break;
      case OrgGeogebraCommonPluginOperation_GREATER:
      case OrgGeogebraCommonPluginOperation_GREATER_EQUAL:
      *IOSDoubleArray_GetRef(bounds0, 0) = bound;
      break;
      default:
      break;
    }
  }
}

- (void)pointChangedWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P {
  OrgGeogebraCommonKernelGeosGeoFunction_pointChangedWithOrgGeogebraCommonKernelMatrixCoords_(self, P);
}

- (void)pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD2];
  OrgGeogebraCommonKernelGeosGeoFunction_pointChangedWithOrgGeogebraCommonKernelMatrixCoords_(self, coords);
  [P setCoords2DWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
  OrgGeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  ((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ = [coords getX];
  [P updateCoordsFrom2DWithBoolean:NO withOrgGeogebraCommonKernelMatrixCoordSys:nil];
}

- (void)pointChangedBooleanWithBoolean:(jboolean)b
withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P {
  OrgGeogebraCommonKernelGeosGeoFunction_pointChangedBooleanWithBoolean_withOrgGeogebraCommonKernelMatrixCoords_(self, b, P);
}

- (jboolean)isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI
                                                       withDouble:(jdouble)eps {
  OrgGeogebraCommonKernelGeosGeoPoint *P = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(PI, [OrgGeogebraCommonKernelGeosGeoPoint class]);
  if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getPath] == self) return YES;
  if (![self isBooleanFunction]) {
    return isDefined__ && JavaLangMath_absWithDouble_([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) evaluateWithDouble:[P getInhomX]] - [P getInhomY]) <= eps;
  }
  jdouble px = [self isFunctionOfY] ? [P getY] : [P getX];
  if ([P getZ] != 1.0) {
    px = px / [P getZ];
  }
  return OrgGeogebraCommonKernelGeosGeoFunction_evaluateBooleanWithDouble_(self, px);
}

- (void)pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI]) {
    [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI];
    return;
  }
  OrgGeogebraCommonKernelGeosGeoPoint *P = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(PI, [OrgGeogebraCommonKernelGeosGeoPoint class]);
  OrgGeogebraCommonKernelPathParameter *pp = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getPathParameter];
  [P setXWithDouble:((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_];
  [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
}

- (jboolean)isPath {
  return YES;
}

- (jdouble)getMinParameter {
  if (interval_) {
    return JavaLangMath_maxWithDouble_withDouble_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getViewsXMinWithOrgGeogebraCommonKernelGeosGeoElement:self], intervalMin_);
  }
  return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getViewsXMinWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

- (jdouble)getMaxParameter {
  if (interval_) {
    return JavaLangMath_minWithDouble_withDouble_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getViewsXMaxWithOrgGeogebraCommonKernelGeosGeoElement:self], intervalMax_);
  }
  return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getViewsXMaxWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

- (id<OrgGeogebraCommonKernelPathMover>)createPathMover {
  return [new_OrgGeogebraCommonKernelPathMoverGeneric_initWithOrgGeogebraCommonKernelPath_(self) autorelease];
}

- (jboolean)isClosedPath {
  return NO;
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)isTraceable {
  return YES;
}

- (jboolean)getTrace {
  return trace_;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getGeoFunction {
  return self;
}

- (jboolean)isGeoFunction {
  if (fun_ != nil) {
    return ![fun_ isBooleanFunction];
  }
  return YES;
}

- (NSString *)getAssignmentLHSWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  [sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:label_]];
  [sbToString_ appendWithNSString:@"("];
  [sbToString_ appendWithNSString:[self getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  [sbToString_ appendWithNSString:@")"];
  return [sbToString_ description];
}

- (jboolean)isGeoFunctionable {
  return [self isGeoFunction];
}

- (jboolean)isBooleanFunction {
  if (fun_ != nil) {
    return [fun_ isBooleanFunction];
  }
  return NO;
}

- (void)swapEval {
  evalSwapped_ = !evalSwapped_;
}

- (void)evaluateCurveWithDouble:(jdouble)t
                withDoubleArray:(IOSDoubleArray *)outArg {
  if (evalSwapped_) {
    *IOSDoubleArray_GetRef(nil_chk(outArg), 1) = t;
    *IOSDoubleArray_GetRef(outArg, 0) = [self evaluateWithDouble:t];
  }
  else {
    *IOSDoubleArray_GetRef(nil_chk(outArg), 0) = t;
    *IOSDoubleArray_GetRef(outArg, 1) = [self evaluateWithDouble:t];
  }
}

- (jdouble)evaluateCurvatureWithDouble:(jdouble)x {
  OrgGeogebraCommonKernelArithmeticFunction *f1 = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) getDerivativeWithInt:1 withBoolean:YES];
  OrgGeogebraCommonKernelArithmeticFunction *f2 = [fun_ getDerivativeWithInt:2 withBoolean:YES];
  if (f1 == nil || f2 == nil) return JavaLangDouble_NaN;
  jdouble f1eval = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f1)) evaluateWithDouble:x];
  jdouble t = JavaLangMath_sqrtWithDouble_(1 + f1eval * f1eval);
  jdouble t3 = t * t * t;
  return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f2)) evaluateWithDouble:x] / t3;
}

- (id<OrgGeogebraCommonKernelRootsRealRootFunction>)getRealRootFunctionX {
  return [new_OrgGeogebraCommonKernelGeosGeoFunction_$4_init() autorelease];
}

- (id<OrgGeogebraCommonKernelRootsRealRootFunction>)getRealRootFunctionY {
  return OrgGeogebraCommonKernelGeosGeoFunction_getRealRootFunctionY(self);
}

- (OrgGeogebraCommonKernelGeosGeoVec2D *)evaluateCurveWithDouble:(jdouble)t {
  return [new_OrgGeogebraCommonKernelGeosGeoVec2D_initWithOrgGeogebraCommonKernelKernel_withDouble_withDouble_(kernel_, t, [self evaluateWithDouble:t]) autorelease];
}

- (NSString *)getVarStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (fun_ == nil) {
    return [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:@"x"];
  }
  return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (jboolean)isFunctionInX {
  return YES;
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoLine]) {
    return [((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoLine class])) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
  if (![geo isGeoFunction] || [((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk([geo getGeoClassType])) isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_INTERVAL()]) {
    return NO;
  }
  if ([((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk([geo getGeoClassType])) isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_FUNCTIONCONDITIONAL()]) {
    return [geo isEqualWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
  OrgGeogebraCommonKernelGeosGeoFunction *geoFun = (OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunction class]);
  OrgGeogebraCommonKernelArithmeticPolyFunction *poly1 = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunction])) expandToPolyFunctionWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(self) withBoolean:NO withBoolean:YES];
  if (poly1 != nil) {
    OrgGeogebraCommonKernelArithmeticPolyFunction *poly2 = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([geoFun getFunction])) expandToPolyFunctionWithOrgGeogebraCommonKernelArithmeticExpressionValue:OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(geoFun) withBoolean:NO withBoolean:YES];
    if (poly2 != nil) {
      return [poly1 isEqualWithOrgGeogebraCommonKernelArithmeticPolyFunction:poly2];
    }
  }
  return [self isDifferenceZeroInCASWithOrgGeogebraCommonKernelGeosGeoElement:geo];
}

+ (OrgGeogebraCommonKernelGeosGeoFunction *)addWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)resultFun
                                               withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)fun1
                                               withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)fun2 {
  return OrgGeogebraCommonKernelGeosGeoFunction_addWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(resultFun, fun1, fun2);
}

+ (OrgGeogebraCommonKernelArithmeticFunctionNVar *)operationSymbWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op
                                                     withOrgGeogebraCommonKernelArithmeticFunctionalNVar:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)lt
                                                     withOrgGeogebraCommonKernelArithmeticFunctionalNVar:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)rt {
  return OrgGeogebraCommonKernelGeosGeoFunction_operationSymbWithOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(op, lt, rt);
}

+ (OrgGeogebraCommonKernelArithmeticFunctionNVar *)fromExprWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)sum
                                                                                           withJavaUtilHashMap:(JavaUtilHashMap *)varmap
                                                                                           withJavaUtilTreeSet:(JavaUtilTreeSet *)varNames {
  return OrgGeogebraCommonKernelGeosGeoFunction_fromExprWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilHashMap_withJavaUtilTreeSet_(sum, varmap, varNames);
}

+ (OrgGeogebraCommonKernelArithmeticExpressionNode *)toExprWithOrgGeogebraCommonKernelArithmeticFunctionalNVar:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)lt
                                                                                           withJavaUtilHashMap:(JavaUtilHashMap *)varMap
                                                                             withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return OrgGeogebraCommonKernelGeosGeoFunction_toExprWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_(lt, varMap, kernel);
}

+ (OrgGeogebraCommonKernelArithmeticFunctionNVar *)applyNumberSymbWithOrgGeogebraCommonPluginOperationEnum:(OrgGeogebraCommonPluginOperationEnum *)op
                                                       withOrgGeogebraCommonKernelArithmeticFunctionalNVar:(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>)fun1
                                                      withOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                                               withBoolean:(jboolean)right {
  return OrgGeogebraCommonKernelGeosGeoFunction_applyNumberSymbWithOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(op, fun1, ev, right);
}

+ (OrgGeogebraCommonKernelGeosGeoFunction *)subtractWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)resultFun
                                                    withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)fun1
                                                    withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)fun2 {
  return OrgGeogebraCommonKernelGeosGeoFunction_subtractWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(resultFun, fun1, fun2);
}

+ (OrgGeogebraCommonKernelGeosGeoFunction *)multWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)resultFun
                                                                                withDouble:(jdouble)number
                                                withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)fun {
  return OrgGeogebraCommonKernelGeosGeoFunction_multWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withOrgGeogebraCommonKernelGeosGeoFunction_(resultFun, number, fun);
}

- (jboolean)evaluateConditionWithDouble:(jdouble)x {
  if (!interval_) return YES;
  return x > intervalMin_ && x < intervalMax_;
}

- (NSString *)getLimitWithDouble:(jdouble)x
                         withInt:(jint)direction {
  IOSObjectArray *funVarStr = OrgGeogebraCommonKernelGeosGeoFunction_getTempVarCASStringWithBoolean_(self, NO);
  if (OrgGeogebraCommonKernelGeosGeoFunction_sb_ == nil) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoFunction_sb_, nil, new_JavaLangStringBuilder_init());
  }
  else {
    [OrgGeogebraCommonKernelGeosGeoFunction_sb_ setLengthWithInt:0];
  }
  [((JavaLangStringBuilder *) nil_chk(OrgGeogebraCommonKernelGeosGeoFunction_sb_)) setLengthWithInt:0];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@"Numeric(Limit"];
  if (direction == -1) {
    [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@"Above"];
  }
  else if (direction == 1) {
    [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@"Below"];
  }
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:'('];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(funVarStr), 0)];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:','];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:IOSObjectArray_Get(funVarStr, 1)];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:','];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:OrgGeogebraCommonKernelArithmeticMyDouble_toStringWithDouble_(x)];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@"),"];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@"50)"];
  return [OrgGeogebraCommonKernelGeosGeoFunction_sb_ description];
}

- (void)getVerticalAsymptotesWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                              withJavaLangStringBuilder:(JavaLangStringBuilder *)verticalSB
                                                            withBoolean:(jboolean)reverse {
  [self getVerticalAsymptotesStaticWithOrgGeogebraCommonKernelGeosGeoFunction:self withOrgGeogebraCommonKernelGeosGeoFunction:f withJavaLangStringBuilder:verticalSB withBoolean:reverse];
}

- (void)getHorizontalPositiveAsymptoteWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                                       withJavaLangStringBuilder:(JavaLangStringBuilder *)SB {
  [self getHorizontalAsymptoteStaticWithOrgGeogebraCommonKernelGeosGeoFunction:self withOrgGeogebraCommonKernelGeosGeoFunction:f withJavaLangStringBuilder:SB withBoolean:YES];
}

- (void)getHorizontalNegativeAsymptoteWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                                       withJavaLangStringBuilder:(JavaLangStringBuilder *)SB {
  [self getHorizontalAsymptoteStaticWithOrgGeogebraCommonKernelGeosGeoFunction:self withOrgGeogebraCommonKernelGeosGeoFunction:f withJavaLangStringBuilder:SB withBoolean:NO];
}

- (void)getDiagonalPositiveAsymptoteWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                                     withJavaLangStringBuilder:(JavaLangStringBuilder *)SB {
  [self getDiagonalAsymptoteStaticWithOrgGeogebraCommonKernelGeosGeoFunction:self withOrgGeogebraCommonKernelGeosGeoFunction:f withJavaLangStringBuilder:SB withBoolean:YES];
}

- (void)getDiagonalNegativeAsymptoteWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                                     withJavaLangStringBuilder:(JavaLangStringBuilder *)SB {
  [self getDiagonalAsymptoteStaticWithOrgGeogebraCommonKernelGeosGeoFunction:self withOrgGeogebraCommonKernelGeosGeoFunction:f withJavaLangStringBuilder:SB withBoolean:NO];
}

- (void)getDiagonalAsymptoteStaticWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                  withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)parentFunction
                                                   withJavaLangStringBuilder:(JavaLangStringBuilder *)SB
                                                                 withBoolean:(jboolean)positiveInfinity_ {
  @try {
    OrgGeogebraCommonKernelGeosGeoFunction *deriv = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) getGeoDerivativeWithInt:1];
    IOSObjectArray *derivVarStr = OrgGeogebraCommonKernelGeosGeoFunction_getTempVarCASStringWithBoolean_(nil_chk(deriv), NO);
    IOSObjectArray *funVarStr = OrgGeogebraCommonKernelGeosGeoFunction_getTempVarCASStringWithBoolean_(f, NO);
    if (OrgGeogebraCommonKernelGeosGeoFunction_sb_ == nil) JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoFunction_sb_, nil, new_JavaLangStringBuilder_init());
    else [OrgGeogebraCommonKernelGeosGeoFunction_sb_ setLengthWithInt:0];
    NSString *gradientStrMinus = @"";
    NSString *interceptStrMinus = @"";
    [((JavaLangStringBuilder *) nil_chk(OrgGeogebraCommonKernelGeosGeoFunction_sb_)) setLengthWithInt:0];
    [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@"Limit("];
    [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(derivVarStr), 0)];
    [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:','];
    [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:IOSObjectArray_Get(derivVarStr, 1)];
    [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:','];
    if (!positiveInfinity_) [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:'-'];
    [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:OrgGeogebraCommonUtilUnicode_INFINITY];
    [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:')'];
    gradientStrMinus = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) evaluateCachedGeoGebraCASWithNSString:[OrgGeogebraCommonKernelGeosGeoFunction_sb_ description] withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil];
    jdouble grad;
    @try {
      grad = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) evaluateToDoubleWithNSString:gradientStrMinus withBoolean:YES];
    }
    @catch (JavaLangException *e) {
      grad = 0;
    }
    if (!OrgGeogebraCommonKernelGeosGeoFunction_CASErrorWithNSString_withBoolean_(gradientStrMinus, NO) && !OrgGeogebraCommonKernelKernel_isZeroWithDouble_(grad)) {
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ setLengthWithInt:0];
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@"Limit("];
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(funVarStr), 0)];
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@" - "];
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:gradientStrMinus];
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@" * "];
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:IOSObjectArray_Get(derivVarStr, 1)];
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:','];
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:IOSObjectArray_Get(derivVarStr, 1)];
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:','];
      if (!positiveInfinity_) [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:'-'];
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:OrgGeogebraCommonUtilUnicode_INFINITY];
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:')'];
      interceptStrMinus = [kernel_ evaluateCachedGeoGebraCASWithNSString:[OrgGeogebraCommonKernelGeosGeoFunction_sb_ description] withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil];
      if (!OrgGeogebraCommonKernelGeosGeoFunction_CASErrorWithNSString_withBoolean_(interceptStrMinus, NO)) {
        [OrgGeogebraCommonKernelGeosGeoFunction_sb_ setLengthWithInt:0];
        [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@"y = "];
        [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:gradientStrMinus];
        [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@" * x +"];
        [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:interceptStrMinus];
        if (![((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(SB)) description])) hasSuffix:[OrgGeogebraCommonKernelGeosGeoFunction_sb_ description]]) {
          if ([SB length] > 1) [SB appendWithChar:','];
          [SB appendWithJavaLangCharSequence:OrgGeogebraCommonKernelGeosGeoFunction_sb_];
        }
      }
    }
  }
  @catch (JavaLangThrowable *e) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
  }
}

- (void)getHorizontalAsymptoteStaticWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                    withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)parentFunction
                                                     withJavaLangStringBuilder:(JavaLangStringBuilder *)SB
                                                                   withBoolean:(jboolean)positiveInfinity_ {
  IOSObjectArray *funVarStr = OrgGeogebraCommonKernelGeosGeoFunction_getTempVarCASStringWithBoolean_(nil_chk(f), NO);
  if (OrgGeogebraCommonKernelGeosGeoFunction_sb_ == nil) JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoFunction_sb_, nil, new_JavaLangStringBuilder_init());
  else [OrgGeogebraCommonKernelGeosGeoFunction_sb_ setLengthWithInt:0];
  [((JavaLangStringBuilder *) nil_chk(OrgGeogebraCommonKernelGeosGeoFunction_sb_)) appendWithNSString:@"Limit("];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(funVarStr), 0)];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:','];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:IOSObjectArray_Get(funVarStr, 1)];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:','];
  if (!positiveInfinity_) [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:'-'];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:OrgGeogebraCommonUtilUnicode_INFINITY];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@")"];
  @try {
    NSString *limit = [((NSString *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) evaluateCachedGeoGebraCASWithNSString:[OrgGeogebraCommonKernelGeosGeoFunction_sb_ description] withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil])) trim];
    if (!OrgGeogebraCommonKernelGeosGeoFunction_CASErrorWithNSString_withBoolean_(limit, NO)) {
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ setLengthWithInt:0];
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@"y="];
      [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:limit];
      if (![((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(SB)) description])) hasSuffix:[OrgGeogebraCommonKernelGeosGeoFunction_sb_ description]]) {
        if ([SB length] > 1) [SB appendWithChar:','];
        [SB appendWithJavaLangCharSequence:OrgGeogebraCommonKernelGeosGeoFunction_sb_];
      }
    }
  }
  @catch (JavaLangThrowable *t) {
  }
}

- (jchar)getLabelDelimiter {
  return [self isBooleanFunction] ? ':' : '=';
}

- (void)getVerticalAsymptotesStaticWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)f
                                   withOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)parentFunction
                                                    withJavaLangStringBuilder:(JavaLangStringBuilder *)verticalSB
                                                                  withBoolean:(jboolean)reverseCondition {
  IOSObjectArray *funVarStr = OrgGeogebraCommonKernelGeosGeoFunction_getTempVarCASStringWithBoolean_(nil_chk(f), NO);
  if (OrgGeogebraCommonKernelGeosGeoFunction_sb_ == nil) JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoFunction_sb_, nil, new_JavaLangStringBuilder_init());
  else [OrgGeogebraCommonKernelGeosGeoFunction_sb_ setLengthWithInt:0];
  [((JavaLangStringBuilder *) nil_chk(OrgGeogebraCommonKernelGeosGeoFunction_sb_)) appendWithNSString:@"Solve("];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@"Simplify("];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@"1/("];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(funVarStr), 0)];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:')'];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@")=0"];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@","];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:IOSObjectArray_Get(funVarStr, 1)];
  [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@")"];
  @try {
    NSString *verticalAsymptotes = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) evaluateCachedGeoGebraCASWithNSString:[OrgGeogebraCommonKernelGeosGeoFunction_sb_ description] withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil];
    if (!OrgGeogebraCommonKernelGeosGeoFunction_CASErrorWithNSString_withBoolean_(verticalAsymptotes, NO) && ((jint) [((NSString *) nil_chk(verticalAsymptotes)) length]) > 2) {
      verticalAsymptotes = [verticalAsymptotes replace:'{' withChar:' '];
      verticalAsymptotes = [((NSString *) nil_chk(verticalAsymptotes)) replace:'}' withChar:' '];
      verticalAsymptotes = [((NSString *) nil_chk(verticalAsymptotes)) replaceAll:@"x==" withReplacement:@""];
      verticalAsymptotes = [((NSString *) nil_chk(verticalAsymptotes)) replaceAll:@"x =" withReplacement:@""];
      IOSObjectArray *verticalAsymptotesArray = [((NSString *) nil_chk(verticalAsymptotes)) split:@","];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(verticalAsymptotesArray))->size_; i++) {
        jboolean repeat = NO;
        if (i > 0 && verticalAsymptotesArray->size_ > 1) {
          for (jint j = 0; j < i; j++) {
            if ([((NSString *) nil_chk(IOSObjectArray_Get(verticalAsymptotesArray, i))) isEqual:IOSObjectArray_Get(verticalAsymptotesArray, j)]) {
              repeat = YES;
              break;
            }
          }
        }
        jboolean isInRange = NO;
        @try {
          if ([((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(verticalAsymptotesArray, i))) trim])) isEqual:@""]) isInRange = NO;
          else isInRange = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(parentFunction)) evaluateConditionWithDouble:[((id<OrgGeogebraCommonKernelGeosGeoNumberValue>) nil_chk([((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) evaluateToNumericWithNSString:IOSObjectArray_Get(verticalAsymptotesArray, i) withBoolean:YES])) getDouble]];
        }
        @catch (JavaLangException *e) {
          OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"Error parsing: ", IOSObjectArray_Get(verticalAsymptotesArray, i)));
        }
        if (reverseCondition) isInRange = !isInRange;
        if (!repeat && isInRange) {
          [OrgGeogebraCommonKernelGeosGeoFunction_sb_ setLengthWithInt:0];
          [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@"Numeric(Limit("];
          [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:IOSObjectArray_Get(funVarStr, 0)];
          [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithChar:','];
          [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:IOSObjectArray_Get(funVarStr, 1)];
          [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@","];
          [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:IOSObjectArray_Get(verticalAsymptotesArray, i)];
          [OrgGeogebraCommonKernelGeosGeoFunction_sb_ appendWithNSString:@"))"];
          @try {
            NSString *limit = [kernel_ evaluateCachedGeoGebraCASWithNSString:[OrgGeogebraCommonKernelGeosGeoFunction_sb_ description] withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil];
            if ([((NSString *) nil_chk(limit)) isEqual:@"?"] || !OrgGeogebraCommonKernelGeosGeoFunction_CASErrorWithNSString_withBoolean_(limit, YES)) {
              if ([((JavaLangStringBuilder *) nil_chk(verticalSB)) length] > 1) [verticalSB appendWithChar:','];
              [verticalSB appendWithNSString:@"x="];
              [verticalSB appendWithNSString:IOSObjectArray_Get(verticalAsymptotesArray, i)];
            }
          }
          @catch (JavaLangThrowable *e) {
            [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
          }
        }
      }
    }
  }
  @catch (JavaLangThrowable *t) {
    [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
  }
}

+ (jboolean)CASErrorWithNSString:(NSString *)str
                     withBoolean:(jboolean)allowInfinity {
  return OrgGeogebraCommonKernelGeosGeoFunction_CASErrorWithNSString_withBoolean_(str, allowInfinity);
}

- (NSString *)getCASStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                        withBoolean:(jboolean)symbolic {
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) getExpression])) getCASstringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:symbolic];
}

- (IOSObjectArray *)getTempVarCASStringWithBoolean:(jboolean)symbolic {
  return OrgGeogebraCommonKernelGeosGeoFunction_getTempVarCASStringWithBoolean_(self, symbolic);
}

- (void)toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)curve {
  OrgGeogebraCommonKernelArithmeticFunctionVariable *t = [new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"t") autorelease];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *x = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) getFunctionVariable];
  OrgGeogebraCommonKernelArithmeticExpressionNode *yExp = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunction])) getExpression])) deepCopyWithOrgGeogebraCommonKernelKernel:kernel_], [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:x withOrgGeogebraCommonKernelArithmeticExpressionValue:t], [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
  [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve)) setFunctionYWithOrgGeogebraCommonKernelArithmeticFunction:[new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(yExp, t) autorelease]];
  OrgGeogebraCommonKernelArithmeticFunction *varFun = [new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_([new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, t) autorelease], t) autorelease];
  [curve setFunctionXWithOrgGeogebraCommonKernelArithmeticFunction:varFun];
  if (OrgGeogebraCommonKernelGeosGeoFunction_hasInterval(self)) {
    [curve setIntervalWithDouble:intervalMin_ withDouble:intervalMax_];
  }
  else {
    jdouble min = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getXminForFunctions];
    jdouble max = [kernel_ getXmaxForFunctions];
    [curve setIntervalWithDouble:min withDouble:max];
    [curve setHideRangeInFormulaWithBoolean:YES];
  }
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)threadSafeCopy {
  if (fun_ == nil) return self;
  OrgGeogebraCommonKernelArithmeticFunctionVariable *t = [new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel_, @"t") autorelease];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *x = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunction])) getFunctionVariable];
  OrgGeogebraCommonKernelArithmeticExpressionNode *yExp = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunction])) getExpression])) deepCopyWithOrgGeogebraCommonKernelKernel:kernel_], [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:x withOrgGeogebraCommonKernelArithmeticExpressionValue:t], [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(yExp)) buildFunctionWithOrgGeogebraCommonKernelArithmeticFunctionVariable:t];
}

- (void)mirrorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P {
  [self dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, -1.0) autorelease] withOrgGeogebraCommonKernelMatrixCoords:P];
}

- (void)dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)S {
  jdouble rd = [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getNumber])) getDouble], a = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(S)) getX], b = [S getY];
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(rd)) {
    [self setUndefined];
    return;
  }
  OrgGeogebraCommonKernelArithmeticFunctionVariable *oldX = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) getFunctionVariable];
  OrgGeogebraCommonKernelArithmeticExpressionNode *newX = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 1 / rd) autorelease], OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, oldX, OrgGeogebraCommonPluginOperationEnum_get_PLUS(), [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, a * rd - a) autorelease]) autorelease]) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *oldY = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fun_ getExpression])) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:oldX withOrgGeogebraCommonKernelArithmeticExpressionValue:newX])) wrap];
  if (![self isBooleanFunction]) {
    [fun_ setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, oldY, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), r) autorelease], OrgGeogebraCommonPluginOperationEnum_get_PLUS(), [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, -b * rd + b) autorelease]) autorelease]];
  }
  else [fun_ setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:oldY];
}

- (jdouble)distanceWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p {
  return JavaLangMath_absWithDouble_([self evaluateWithDouble:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) getInhomX]] - [p getInhomY]);
}

- (jboolean)isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  return [self isInRegionWithDouble:[((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getX2D] withDouble:[P getY2D]];
}

- (jboolean)isInRegionWithDouble:(jdouble)x0
                      withDouble:(jdouble)y0 {
  if ([self isFunctionOfY]) return OrgGeogebraCommonKernelGeosGeoFunction_evaluateBooleanWithDouble_(self, y0);
  return OrgGeogebraCommonKernelGeosGeoFunction_evaluateBooleanWithDouble_(self, x0);
}

- (jboolean)isFunctionOfY {
  return [((NSString *) nil_chk([self getVarStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@"y"];
}

- (void)pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  OrgGeogebraCommonKernelMatrixCoords *P = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) getCoordsInD2];
  if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getZ] == 1.0) {
  }
  else {
    [P setXWithDouble:[P getX] / [P getZ]];
  }
  OrgGeogebraCommonKernelGeosGeoFunction_pointChangedBooleanWithBoolean_withOrgGeogebraCommonKernelMatrixCoords_(self, NO, P);
  [P setZWithDouble:1.0];
  [PI setCoords2DWithDouble:[P getX] withDouble:[P getY] withDouble:[P getZ]];
  OrgGeogebraCommonKernelRegionParameters *pp = [PI getRegionParameters];
  [((OrgGeogebraCommonKernelRegionParameters *) nil_chk(pp)) setT1WithDouble:[P getX]];
  [pp setT2WithDouble:[P getY]];
  [PI updateCoordsFrom2DWithBoolean:NO withOrgGeogebraCommonKernelMatrixCoordSys:nil];
}

- (jboolean)isRegion {
  return [self isBooleanFunction];
}

- (void)regionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  [self pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
}

- (void)resetIneqs {
  OrgGeogebraCommonKernelGeosGeoFunction_set_isInequality__(self, JavaLangBoolean_valueOfWithBoolean_([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode:OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(self) withOrgGeogebraCommonKernelArithmeticFunctionalNVar:self]));
}

- (OrgGeogebraCommonKernelArithmeticIneqTree *)getIneqs {
  if ([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) getIneqs] == nil) {
    OrgGeogebraCommonKernelGeosGeoFunction_set_isInequality__(self, JavaLangBoolean_valueOfWithBoolean_([fun_ initIneqsWithOrgGeogebraCommonKernelArithmeticExpressionNode:[fun_ getExpression] withOrgGeogebraCommonKernelArithmeticFunctionalNVar:self]));
  }
  return [fun_ getIneqs];
}

- (jboolean)showOnAxis {
  return showOnAxis__;
}

- (void)setShowOnAxisWithBoolean:(jboolean)showOnAxis {
  self->showOnAxis__ = showOnAxis;
}

- (void)update {
  [super update];
}

- (jboolean)isGeoFunctionBoolean {
  return [self isBooleanFunction];
}

- (jboolean)isLaTeXDrawableGeo {
  return YES;
}

- (jboolean)isGeoFunctionConditional {
  OrgGeogebraCommonKernelArithmeticExpressionNode *en = OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(self);
  if (en == nil) return NO;
  return [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) isConditionalOldFashion];
}

- (NSString *)getFormulaStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                            withBoolean:(jboolean)substituteNumbers {
  NSString *ret = @"";
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(self))) isConditional]) {
    if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
      ret = [self conditionalLaTeXWithBoolean:substituteNumbers withOrgGeogebraCommonKernelStringTemplate:tpl];
    }
    else if ([tpl hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
      ret = [self conditionalMathMLWithBoolean:substituteNumbers withOrgGeogebraCommonKernelStringTemplate:tpl];
    }
  }
  else if ([self isGeoFunction]) {
    if ([self isIndependent]) {
      ret = [self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
    }
    else {
      if ([self getFunction] == nil) {
        ret = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
      }
      else ret = substituteNumbers ? [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunction])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunction])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
    }
  }
  else {
    return [super getFormulaStringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:substituteNumbers];
  }
  if ([@"" isEqual:ret]) {
    ret = [self toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    if ([@"?" isEqual:ret]) ret = JreStrcat("$$$", @" \\text{", [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"], @"} ");
    else if ([(JreStrcat("C", OrgGeogebraCommonUtilUnicode_INFINITY)) isEqual:ret]) ret = @"\\infty";
    else if ([(OrgGeogebraCommonUtilUnicode_get_MINUS_INFINITY_()) isEqual:ret]) ret = @"-\\infty";
  }
  return ret;
}

- (jint)getMinimumLineThickness {
  return (isInequality__ != nil && [isInequality__ booleanValue]) ? 0 : 1;
}

- (jboolean)isInequality {
  return (isInequality__ != nil && [isInequality__ booleanValue]) ? YES : NO;
}

- (jboolean)isFreehandFunction {
  return [[self getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoFunctionFreehand class]];
}

- (IOSObjectArray *)getFunctionVariables {
  return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) getFunctionVariables];
}

- (void)clearCasEvalMapWithNSString:(NSString *)key {
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) clearCasEvalMapWithNSString:key];
}

- (NSString *)conditionalLaTeXWithBoolean:(jboolean)substituteNumbers
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbLaTeX = [new_JavaLangStringBuilder_init() autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *expr = OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(self);
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expr)) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_IF() && ![((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expr getRight])) wrap])) isConditional]) {
    if (substituteNumbers) {
      [sbLaTeX appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expr getRight])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_()]];
      [sbLaTeX appendWithNSString:@" \\;\\;\\;\\; \\left("];
      [sbLaTeX appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expr getLeft])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_()]];
    }
    else {
      [sbLaTeX appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expr getRight])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_()]];
      [sbLaTeX appendWithNSString:@" \\;\\;\\;\\; \\left("];
      [sbLaTeX appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expr getLeft])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_()]];
    }
    [sbLaTeX appendWithNSString:@" \\right)"];
  }
  else {
    JavaUtilArrayList *cases = [new_JavaUtilArrayList_init() autorelease];
    JavaUtilArrayList *conditions = [new_JavaUtilArrayList_init() autorelease];
    jboolean complete = OrgGeogebraCommonKernelGeosGeoFunction_collectCasesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilArrayList_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoFunction_Bounds_(self, expr, cases, conditions, [new_OrgGeogebraCommonKernelGeosGeoFunction_Bounds_initWithOrgGeogebraCommonKernelGeosGeoFunction_(self) autorelease]);
    if ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isLatexMathQuillStyleWithOrgGeogebraCommonKernelStringTemplate:tpl]) {
      [sbLaTeX appendWithNSString:@"\\piecewise{ \\pwtable{ "];
      for (jint i = 0; i < [cases size]; i++) {
        [sbLaTeX appendWithNSString:@"\\ggbtr{ \\ggbtdL{ "];
        [sbLaTeX appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cases getWithInt:i])) toLaTeXStringWithBoolean:!substituteNumbers withOrgGeogebraCommonKernelStringTemplate:tpl]];
        [sbLaTeX appendWithNSString:@"} \\ggbtdL{ : \\space "];
        if (i == [cases size] - 1 && complete) {
          [sbLaTeX appendWithNSString:@"\\textotherwise{"];
          [sbLaTeX appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"otherwise"]];
          [sbLaTeX appendWithNSString:@"}"];
        }
        else {
          [sbLaTeX appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoFunction_Bounds *) nil_chk([conditions getWithInt:i])) toLaTeXStringWithBoolean:!substituteNumbers withNSString:[self getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl] withOrgGeogebraCommonKernelStringTemplate:tpl]];
        }
        [sbLaTeX appendWithNSString:@" } } "];
      }
      [sbLaTeX appendWithNSString:@" } } "];
    }
    else {
      [sbLaTeX appendWithNSString:@"\\left\\{\\begin{array}{ll} "];
      for (jint i = 0; i < [cases size]; i++) {
        [sbLaTeX appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cases getWithInt:i])) toLaTeXStringWithBoolean:!substituteNumbers withOrgGeogebraCommonKernelStringTemplate:tpl]];
        [sbLaTeX appendWithNSString:@"& : "];
        if (i == [cases size] - 1 && complete) {
          [sbLaTeX appendWithNSString:@"\\text{"];
          [sbLaTeX appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"otherwise"]];
          [sbLaTeX appendWithNSString:@"}"];
        }
        else {
          [sbLaTeX appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoFunction_Bounds *) nil_chk([conditions getWithInt:i])) toLaTeXStringWithBoolean:!substituteNumbers withNSString:[self getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl] withOrgGeogebraCommonKernelStringTemplate:tpl]];
          if (i != [cases size] - 1) [sbLaTeX appendWithNSString:@"\\\\ "];
        }
      }
      [sbLaTeX appendWithNSString:@" \\end{array}\\right. "];
    }
  }
  return [sbLaTeX description];
}

- (NSString *)conditionalMathMLWithBoolean:(jboolean)substituteNumbers
 withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbMathml = [new_JavaLangStringBuilder_init() autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *expr = OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(self);
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expr)) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_IF() && ![((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expr getRight])) wrap])) isConditional]) {
    [sbMathml appendWithNSString:@"<piecewise><piece>"];
    if (substituteNumbers) {
      [sbMathml appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expr getRight])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_()]];
      [sbMathml appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expr getLeft])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_()]];
    }
    else {
      [sbMathml appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expr getRight])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_()]];
      [sbMathml appendWithNSString:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expr getLeft])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_()]];
    }
    [sbMathml appendWithNSString:@"</piece></piecewise>"];
  }
  else {
    [sbMathml appendWithNSString:@"<piecewise>"];
    JavaUtilArrayList *cases = [new_JavaUtilArrayList_init() autorelease];
    JavaUtilArrayList *conditions = [new_JavaUtilArrayList_init() autorelease];
    jboolean complete = OrgGeogebraCommonKernelGeosGeoFunction_collectCasesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilArrayList_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoFunction_Bounds_(self, expr, cases, conditions, [new_OrgGeogebraCommonKernelGeosGeoFunction_Bounds_initWithOrgGeogebraCommonKernelGeosGeoFunction_(self) autorelease]);
    for (jint i = 0; i < [cases size]; i++) {
      if (i == [cases size] - 1 && complete) {
        [sbMathml appendWithNSString:@"<otherwise>"];
        [sbMathml appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cases getWithInt:i])) toLaTeXStringWithBoolean:!substituteNumbers withOrgGeogebraCommonKernelStringTemplate:tpl]];
        [sbMathml appendWithNSString:@"</otherwise>"];
      }
      else {
        [sbMathml appendWithNSString:@"<piece>"];
        [sbMathml appendWithNSString:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cases getWithInt:i])) toLaTeXStringWithBoolean:!substituteNumbers withOrgGeogebraCommonKernelStringTemplate:tpl]];
        [sbMathml appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoFunction_Bounds *) nil_chk([conditions getWithInt:i])) toLaTeXStringWithBoolean:!substituteNumbers withNSString:[self getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl] withOrgGeogebraCommonKernelStringTemplate:tpl]];
        [sbMathml appendWithNSString:@"</piece>"];
      }
    }
    [sbMathml appendWithNSString:@"</piecewise>"];
  }
  return [sbMathml description];
}

- (jboolean)collectCasesWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)condRoot
                                                      withJavaUtilArrayList:(JavaUtilArrayList *)cases
                                                      withJavaUtilArrayList:(JavaUtilArrayList *)conditions
                          withOrgGeogebraCommonKernelGeosGeoFunction_Bounds:(OrgGeogebraCommonKernelGeosGeoFunction_Bounds *)parentCond {
  return OrgGeogebraCommonKernelGeosGeoFunction_collectCasesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilArrayList_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoFunction_Bounds_(self, condRoot, cases, conditions, parentCond);
}

- (jboolean)hasDrawable3D {
  return YES;
}

- (jboolean)hasLineOpacity {
  return YES;
}

- (IOSDoubleArray *)newDoubleArray {
  return [IOSDoubleArray arrayWithLength:2];
}

- (IOSDoubleArray *)getDefinedIntervalWithDouble:(jdouble)a
                                      withDouble:(jdouble)b {
  return OrgGeogebraCommonKernelRootsRealRootUtil_getDefinedIntervalWithOrgGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoFunction_getRealRootFunctionY(self), a, b);
}

- (jdouble)distanceMaxWithDoubleArray:(IOSDoubleArray *)p1
                      withDoubleArray:(IOSDoubleArray *)p2 {
  return JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(p1), 0) - IOSDoubleArray_Get(nil_chk(p2), 0)), JavaLangMath_absWithDouble_(IOSDoubleArray_Get(p1, 1) - IOSDoubleArray_Get(p2, 1)));
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (void)dealloc {
  RELEASE_(fun_);
  RELEASE_(isInequality__);
  RELEASE_(iPoly_);
  RELEASE_(substituteFunctions_);
  RELEASE_(surfaceEvaluables_);
  RELEASE_(derivGeoFun_);
  RELEASE_(includesNonContinuousIntegralFun_);
  RELEASE_(includesDivisionByVarFun_);
  RELEASE_(sbToString_);
  RELEASE_(bounds_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelGeosGeoFunction class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoFunction_dummy1_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ @"", @"" } count:2 type:NSString_class_()]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoFunction_dummy2_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ ' ', ' ' } count:2]);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelGeosGeoFunction)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoFunction", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withOrgGeogebraCommonKernelArithmeticFunction:", "GeoFunction", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelArithmeticFunction:", "GeoFunction", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:", "GeoFunction", NULL, 0x1, NULL, NULL },
    { "setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:", "setVisualStyle", "V", 0x1, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoFunction:", "GeoFunction", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelArithmeticExpressionNode:withOrgGeogebraCommonKernelArithmeticFunctionVariable:", "GeoFunction", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:", "setFunction", "V", 0x1, NULL, NULL },
    { "addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:", "addToUpdateSets", "Z", 0x1, NULL, NULL },
    { "removeFromUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:", "removeFromUpdateSets", "Z", 0x1, NULL, NULL },
    { "initFunction", NULL, "V", 0x1, NULL, NULL },
    { "getFunction", NULL, "Lorg.geogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "setIntervalWithDouble:withDouble:", "setInterval", "Z", 0x11, NULL, NULL },
    { "getFunctionExpression", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, NULL, NULL },
    { "replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:", "replaceChildrenByValues", "V", 0x1, NULL, NULL },
    { "getFunctionWithDouble:", "getFunction", "Lorg.geogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "setDerivativeWithOrgGeogebraCommonKernelGeosCasEvaluableFunction:withInt:withBoolean:", "setDerivative", "V", 0x1, NULL, NULL },
    { "checkDefined", NULL, "V", 0x2, NULL, NULL },
    { "setUsingCasCommandWithNSString:withOrgGeogebraCommonKernelGeosCasEvaluableFunction:withBoolean:withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:", "setUsingCasCommand", "V", 0x1, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "evaluateWithDoubleArray:", "evaluate", "D", 0x1, NULL, NULL },
    { "getIntervalMin", NULL, "D", 0x11, NULL, NULL },
    { "getIntervalMax", NULL, "D", 0x11, NULL, NULL },
    { "hasInterval", NULL, "Z", 0x11, NULL, NULL },
    { "evaluateBooleanWithDouble:", "evaluateBoolean", "Z", 0x11, NULL, NULL },
    { "getGeoDerivativeWithInt:", "getGeoDerivative", "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "translateWithOrgGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x11, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x11, NULL, NULL },
    { "translateWithDouble:withDouble:", "translate", "V", 0x1, NULL, NULL },
    { "isPolynomialFunctionWithBoolean:withBoolean:", "isPolynomialFunction", "Z", 0x1, NULL, NULL },
    { "isPolynomialFunctionWithBoolean:", "isPolynomialFunction", "Z", 0x1, NULL, NULL },
    { "includesDivisionByVar", NULL, "Z", 0x11, NULL, NULL },
    { "includesNonContinuousIntegral", NULL, "Z", 0x11, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "isInverseFillable", NULL, "Z", 0x1, NULL, NULL },
    { "setDefinedWithBoolean:", "setDefined", "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initStringBuilderWithJavaLangStringBuilder:withOrgGeogebraCommonKernelStringTemplate:withNSString:withNSString:withBoolean:withBoolean:", "initStringBuilder", "V", 0x19, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toSymbolicStringWithOrgGeogebraCommonKernelStringTemplate:", "toSymbolicString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLWithBoolean:withJavaLangStringBuilder:", "getXML", "V", 0x11, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getIntervalWithDoubleArray:", "getInterval", "V", 0x1, NULL, NULL },
    { "pointChangedWithOrgGeogebraCommonKernelMatrixCoords:", "pointChanged", "V", 0x2, NULL, NULL },
    { "pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "pointChangedBooleanWithBoolean:withOrgGeogebraCommonKernelMatrixCoords:", "pointChangedBoolean", "V", 0x2, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lorg.geogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x11, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "getGeoFunction", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "isGeoFunction", NULL, "Z", 0x1, NULL, NULL },
    { "getAssignmentLHSWithOrgGeogebraCommonKernelStringTemplate:", "getAssignmentLHS", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isGeoFunctionable", NULL, "Z", 0x1, NULL, NULL },
    { "isBooleanFunction", NULL, "Z", 0x1, NULL, NULL },
    { "swapEval", NULL, "V", 0x1, NULL, NULL },
    { "evaluateCurveWithDouble:withDoubleArray:", "evaluateCurve", "V", 0x1, NULL, NULL },
    { "evaluateCurvatureWithDouble:", "evaluateCurvature", "D", 0x1, NULL, NULL },
    { "getRealRootFunctionX", NULL, "Lorg.geogebra.common.kernel.roots.RealRootFunction;", 0x11, NULL, NULL },
    { "getRealRootFunctionY", NULL, "Lorg.geogebra.common.kernel.roots.RealRootFunction;", 0x11, NULL, NULL },
    { "evaluateCurveWithDouble:", "evaluateCurve", "Lorg.geogebra.common.kernel.geos.GeoVec2D;", 0x1, NULL, NULL },
    { "getVarStringWithOrgGeogebraCommonKernelStringTemplate:", "getVarString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isFunctionInX", NULL, "Z", 0x11, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "addWithOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:", "add", "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x9, NULL, NULL },
    { "operationSymbWithOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelArithmeticFunctionalNVar:withOrgGeogebraCommonKernelArithmeticFunctionalNVar:", "operationSymb", "Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", 0x9, NULL, NULL },
    { "fromExprWithOrgGeogebraCommonKernelArithmeticExpressionNode:withJavaUtilHashMap:withJavaUtilTreeSet:", "fromExpr", "Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", 0xa, NULL, NULL },
    { "toExprWithOrgGeogebraCommonKernelArithmeticFunctionalNVar:withJavaUtilHashMap:withOrgGeogebraCommonKernelKernel:", "toExpr", "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0xa, NULL, NULL },
    { "applyNumberSymbWithOrgGeogebraCommonPluginOperationEnum:withOrgGeogebraCommonKernelArithmeticFunctionalNVar:withOrgGeogebraCommonKernelArithmeticExpressionValue:withBoolean:", "applyNumberSymb", "Lorg.geogebra.common.kernel.arithmetic.FunctionNVar;", 0x9, NULL, NULL },
    { "subtractWithOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:", "subtract", "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x9, NULL, NULL },
    { "multWithOrgGeogebraCommonKernelGeosGeoFunction:withDouble:withOrgGeogebraCommonKernelGeosGeoFunction:", "mult", "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x9, NULL, NULL },
    { "evaluateConditionWithDouble:", "evaluateCondition", "Z", 0x1, NULL, NULL },
    { "getLimitWithDouble:withInt:", "getLimit", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getVerticalAsymptotesWithOrgGeogebraCommonKernelGeosGeoFunction:withJavaLangStringBuilder:withBoolean:", "getVerticalAsymptotes", "V", 0x1, NULL, NULL },
    { "getHorizontalPositiveAsymptoteWithOrgGeogebraCommonKernelGeosGeoFunction:withJavaLangStringBuilder:", "getHorizontalPositiveAsymptote", "V", 0x1, NULL, NULL },
    { "getHorizontalNegativeAsymptoteWithOrgGeogebraCommonKernelGeosGeoFunction:withJavaLangStringBuilder:", "getHorizontalNegativeAsymptote", "V", 0x1, NULL, NULL },
    { "getDiagonalPositiveAsymptoteWithOrgGeogebraCommonKernelGeosGeoFunction:withJavaLangStringBuilder:", "getDiagonalPositiveAsymptote", "V", 0x1, NULL, NULL },
    { "getDiagonalNegativeAsymptoteWithOrgGeogebraCommonKernelGeosGeoFunction:withJavaLangStringBuilder:", "getDiagonalNegativeAsymptote", "V", 0x1, NULL, NULL },
    { "getDiagonalAsymptoteStaticWithOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:withJavaLangStringBuilder:withBoolean:", "getDiagonalAsymptoteStatic", "V", 0x4, NULL, NULL },
    { "getHorizontalAsymptoteStaticWithOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:withJavaLangStringBuilder:withBoolean:", "getHorizontalAsymptoteStatic", "V", 0x4, NULL, NULL },
    { "getLabelDelimiter", NULL, "C", 0x4, NULL, NULL },
    { "getVerticalAsymptotesStaticWithOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:withJavaLangStringBuilder:withBoolean:", "getVerticalAsymptotesStatic", "V", 0x4, NULL, NULL },
    { "CASErrorWithNSString:withBoolean:", "CASError", "Z", 0x1a, NULL, NULL },
    { "getCASStringWithOrgGeogebraCommonKernelStringTemplate:withBoolean:", "getCASString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTempVarCASStringWithBoolean:", "getTempVarCASString", "[Ljava.lang.String;", 0x11, NULL, NULL },
    { "toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:", "toGeoCurveCartesian", "V", 0x1, NULL, NULL },
    { "threadSafeCopy", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x11, NULL, NULL },
    { "dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "distanceWithOrgGeogebraCommonKernelGeosGeoPoint:", "distance", "D", 0x1, NULL, NULL },
    { "isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "isInRegionWithDouble:withDouble:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "isFunctionOfY", NULL, "Z", 0x1, NULL, NULL },
    { "pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChangedForRegion", "V", 0x1, NULL, NULL },
    { "isRegion", NULL, "Z", 0x1, NULL, NULL },
    { "regionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "regionChanged", "V", 0x1, NULL, NULL },
    { "resetIneqs", NULL, "V", 0x1, NULL, NULL },
    { "getIneqs", NULL, "Lorg.geogebra.common.kernel.arithmetic.IneqTree;", 0x1, NULL, NULL },
    { "showOnAxis", NULL, "Z", 0x1, NULL, NULL },
    { "setShowOnAxisWithBoolean:", "setShowOnAxis", "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "isGeoFunctionBoolean", NULL, "Z", 0x1, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoFunctionConditional", NULL, "Z", 0x1, NULL, NULL },
    { "getFormulaStringWithOrgGeogebraCommonKernelStringTemplate:withBoolean:", "getFormulaString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getMinimumLineThickness", NULL, "I", 0x1, NULL, NULL },
    { "isInequality", NULL, "Z", 0x1, NULL, NULL },
    { "isFreehandFunction", NULL, "Z", 0x1, NULL, NULL },
    { "getFunctionVariables", NULL, "[Lorg.geogebra.common.kernel.arithmetic.FunctionVariable;", 0x1, NULL, NULL },
    { "clearCasEvalMapWithNSString:", "clearCasEvalMap", "V", 0x1, NULL, NULL },
    { "conditionalLaTeXWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "conditionalLaTeX", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "conditionalMathMLWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "conditionalMathML", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "collectCasesWithOrgGeogebraCommonKernelArithmeticExpressionNode:withJavaUtilArrayList:withJavaUtilArrayList:withOrgGeogebraCommonKernelGeosGeoFunction_Bounds:", "collectCases", "Z", 0x2, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "hasLineOpacity", NULL, "Z", 0x1, NULL, NULL },
    { "newDoubleArray", NULL, "[D", 0x1, NULL, NULL },
    { "getDefinedIntervalWithDouble:withDouble:", "getDefinedInterval", "[D", 0x1, NULL, NULL },
    { "distanceMaxWithDoubleArray:withDoubleArray:", "distanceMax", "D", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fun_", NULL, 0x4, "Lorg.geogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "isDefined__", "isDefined", 0x4, "Z", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
    { "includesDivisionByVar__", "includesDivisionByVar", 0x2, "Z", NULL, NULL,  },
    { "includesNonContinuousIntegral__", "includesNonContinuousIntegral", 0x2, "Z", NULL, NULL,  },
    { "interval_", NULL, 0x4, "Z", NULL, NULL,  },
    { "intervalMin_", NULL, 0x4, "D", NULL, NULL,  },
    { "intervalMax_", NULL, 0x4, "D", NULL, NULL,  },
    { "evalSwapped_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isInequality__", "isInequality", 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "iPoly_", NULL, 0x0, "Lorg.geogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
    { "substituteFunctions_", NULL, 0x0, "[Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "FUNCTION_DIRECT_", NULL, 0x8, "I", &OrgGeogebraCommonKernelGeosGeoFunction_FUNCTION_DIRECT_, NULL,  },
    { "FUNCTION_COMPOSITE_IPOLY_FUNCS_", NULL, 0x8, "I", &OrgGeogebraCommonKernelGeosGeoFunction_FUNCTION_COMPOSITE_IPOLY_FUNCS_, NULL,  },
    { "geoFunctionType_", NULL, 0x0, "I", NULL, NULL,  },
    { "surfaceEvaluables_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lorg/geogebra/common/kernel/kernelND/SurfaceEvaluable;>;",  },
    { "derivGeoFun_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "includesNonContinuousIntegralFun_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "includesDivisionByVarFun_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "sbToString_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "showOnAxis__", "showOnAxis", 0x2, "Z", NULL, NULL,  },
    { "dummy1_", NULL, 0x9, "[Ljava.lang.String;", &OrgGeogebraCommonKernelGeosGeoFunction_dummy1_, NULL,  },
    { "dummy2_", NULL, 0x9, "[C", &OrgGeogebraCommonKernelGeosGeoFunction_dummy2_, NULL,  },
    { "bounds_", NULL, 0x2, "[D", NULL, NULL,  },
    { "sb_", NULL, 0xa, "Ljava.lang.StringBuilder;", &OrgGeogebraCommonKernelGeosGeoFunction_sb_, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.geos.GeoFunction$Bounds;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoFunction = { 2, "GeoFunction", "org.geogebra.common.kernel.geos", NULL, 0x1, 137, methods, 25, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoFunction;
}

@end

void OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoFunction *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->isDefined__ = YES;
  self->includesDivisionByVar__ = NO;
  self->includesNonContinuousIntegral__ = NO;
  self->interval_ = NO;
  OrgGeogebraCommonKernelGeosGeoFunction_set_isInequality__(self, nil);
  self->geoFunctionType_ = OrgGeogebraCommonKernelGeosGeoFunction_FUNCTION_DIRECT_;
  OrgGeogebraCommonKernelGeosGeoFunction_set_includesNonContinuousIntegralFun_(self, nil);
  OrgGeogebraCommonKernelGeosGeoFunction_set_includesDivisionByVarFun_(self, nil);
  OrgGeogebraCommonKernelGeosGeoFunction_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(80));
  [self setConstructionDefaults];
  OrgGeogebraCommonKernelGeosGeoFunction_setAndConsume_surfaceEvaluables_(self, new_JavaUtilTreeSet_init());
}

OrgGeogebraCommonKernelGeosGeoFunction *new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoFunction *self = [OrgGeogebraCommonKernelGeosGeoFunction alloc];
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelGeosGeoFunction *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, OrgGeogebraCommonKernelArithmeticFunction *f) {
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_(self, c, f);
  [self setLabelWithNSString:label];
  if ([self isLabelSet] && ![self isBooleanFunction] && [self isFunctionOfY]) {
    [self remove];
    @throw [new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSString_([self getLoc], @"InvalidFunction") autorelease];
  }
}

OrgGeogebraCommonKernelGeosGeoFunction *new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelConstruction *c, NSString *label, OrgGeogebraCommonKernelArithmeticFunction *f) {
  OrgGeogebraCommonKernelGeosGeoFunction *self = [OrgGeogebraCommonKernelGeosGeoFunction alloc];
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withNSString_withOrgGeogebraCommonKernelArithmeticFunction_(self, c, label, f);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelGeosGeoFunction *self, OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelArithmeticFunction *f) {
  OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->isDefined__ = YES;
  self->includesDivisionByVar__ = NO;
  self->includesNonContinuousIntegral__ = NO;
  self->interval_ = NO;
  OrgGeogebraCommonKernelGeosGeoFunction_set_isInequality__(self, nil);
  self->geoFunctionType_ = OrgGeogebraCommonKernelGeosGeoFunction_FUNCTION_DIRECT_;
  OrgGeogebraCommonKernelGeosGeoFunction_set_includesNonContinuousIntegralFun_(self, nil);
  OrgGeogebraCommonKernelGeosGeoFunction_set_includesDivisionByVarFun_(self, nil);
  OrgGeogebraCommonKernelGeosGeoFunction_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(80));
  OrgGeogebraCommonKernelGeosGeoFunction_setAndConsume_surfaceEvaluables_(self, new_JavaUtilTreeSet_init());
  OrgGeogebraCommonKernelGeosGeoFunction_set_fun_(self, f);
  [self initFunction];
}

OrgGeogebraCommonKernelGeosGeoFunction *new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelArithmeticFunction *f) {
  OrgGeogebraCommonKernelGeosGeoFunction *self = [OrgGeogebraCommonKernelGeosGeoFunction alloc];
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_(self, c, f);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction *self, OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *iPoly, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoFunction *g) {
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  OrgGeogebraCommonKernelGeosGeoFunction_set_iPoly_(self, iPoly);
  self->geoFunctionType_ = OrgGeogebraCommonKernelGeosGeoFunction_FUNCTION_COMPOSITE_IPOLY_FUNCS_;
  OrgGeogebraCommonKernelGeosGeoFunction_setAndConsume_substituteFunctions_(self, [IOSObjectArray newArrayWithLength:2 type:OrgGeogebraCommonKernelGeosGeoFunction_class_()]);
  IOSObjectArray_Set(self->substituteFunctions_, 0, f);
  IOSObjectArray_Set(self->substituteFunctions_, 1, g);
  if (f == nil && g != nil) {
    OrgGeogebraCommonKernelGeosGeoFunction_setIntervalWithDouble_withDouble_(self, g->intervalMin_, g->intervalMax_);
    OrgGeogebraCommonKernelGeosGeoFunction_setAndConsume_fun_(self, new_OrgGeogebraCommonKernelGeosGeoFunction_$1_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(self, [((OrgGeogebraCommonKernelConstruction *) nil_chk(c)) getKernel]));
    [self->fun_ setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(c, 0) autorelease]) autorelease]];
  }
  else if (f != nil && g == nil) {
    OrgGeogebraCommonKernelGeosGeoFunction_setIntervalWithDouble_withDouble_(self, f->intervalMin_, f->intervalMax_);
    OrgGeogebraCommonKernelGeosGeoFunction_setAndConsume_fun_(self, new_OrgGeogebraCommonKernelGeosGeoFunction_$2_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(self, [((OrgGeogebraCommonKernelConstruction *) nil_chk(c)) getKernel]));
    [self->fun_ setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(c, 0) autorelease]) autorelease]];
  }
  else if (f != nil && g != nil) {
    OrgGeogebraCommonKernelGeosGeoFunction_setIntervalWithDouble_withDouble_(self, JavaLangMath_maxWithDouble_withDouble_(f->intervalMin_, g->intervalMin_), JavaLangMath_minWithDouble_withDouble_(f->intervalMax_, g->intervalMax_));
    OrgGeogebraCommonKernelGeosGeoFunction_setAndConsume_fun_(self, new_OrgGeogebraCommonKernelGeosGeoFunction_$3_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(self, [((OrgGeogebraCommonKernelConstruction *) nil_chk(c)) getKernel]));
    [self->fun_ setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(c, 0) autorelease]) autorelease]];
  }
}

OrgGeogebraCommonKernelGeosGeoFunction *new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelImplicitGeoImplicitPoly *iPoly, OrgGeogebraCommonKernelGeosGeoFunction *f, OrgGeogebraCommonKernelGeosGeoFunction *g) {
  OrgGeogebraCommonKernelGeosGeoFunction *self = [OrgGeogebraCommonKernelGeosGeoFunction alloc];
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelImplicitGeoImplicitPoly_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(self, c, iPoly, f, g);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction *self, OrgGeogebraCommonKernelGeosGeoFunction *f) {
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(self, ((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(f))->cons_);
  [self setWithOrgGeogebraCommonKernelGeosGeoElement:f];
}

OrgGeogebraCommonKernelGeosGeoFunction *new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction *f) {
  OrgGeogebraCommonKernelGeosGeoFunction *self = [OrgGeogebraCommonKernelGeosGeoFunction alloc];
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelGeosGeoFunction_(self, f);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(OrgGeogebraCommonKernelGeosGeoFunction *self, OrgGeogebraCommonKernelArithmeticExpressionNode *en, OrgGeogebraCommonKernelArithmeticFunctionVariable *fv) {
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_(self, [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getKernel])) getConstruction], [new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(en, fv) autorelease]);
}

OrgGeogebraCommonKernelGeosGeoFunction *new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(OrgGeogebraCommonKernelArithmeticExpressionNode *en, OrgGeogebraCommonKernelArithmeticFunctionVariable *fv) {
  OrgGeogebraCommonKernelGeosGeoFunction *self = [OrgGeogebraCommonKernelGeosGeoFunction alloc];
  OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(self, en, fv);
  return self;
}

jboolean OrgGeogebraCommonKernelGeosGeoFunction_setIntervalWithDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoFunction *self, jdouble a, jdouble b) {
  if (a <= b) {
    self->interval_ = YES;
    self->intervalMin_ = a;
    self->intervalMax_ = b;
  }
  else {
    self->interval_ = NO;
  }
  return self->interval_;
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(OrgGeogebraCommonKernelGeosGeoFunction *self) {
  if ([self getFunction] == nil) {
    return nil;
  }
  return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunction])) getExpression];
}

void OrgGeogebraCommonKernelGeosGeoFunction_checkDefined(OrgGeogebraCommonKernelGeosGeoFunction *self) {
  self->isDefined__ = (self->fun_ != nil);
  if (self->fun_ != nil && [@"?" isEqual:[self->fun_ toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
    self->isDefined__ = NO;
  }
}

jboolean OrgGeogebraCommonKernelGeosGeoFunction_hasInterval(OrgGeogebraCommonKernelGeosGeoFunction *self) {
  return self->interval_;
}

jboolean OrgGeogebraCommonKernelGeosGeoFunction_evaluateBooleanWithDouble_(OrgGeogebraCommonKernelGeosGeoFunction *self, jdouble x) {
  if (self->fun_ == nil || !self->isDefined__) {
    return NO;
  }
  return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(self->fun_)) evaluateBooleanWithDouble:x];
}

void OrgGeogebraCommonKernelGeosGeoFunction_initStringBuilderWithJavaLangStringBuilder_withOrgGeogebraCommonKernelStringTemplate_withNSString_withNSString_withBoolean_withBoolean_(JavaLangStringBuilder *stringBuilder, OrgGeogebraCommonKernelStringTemplate *tpl, NSString *label, NSString *var, jboolean isLabelSet, jboolean isBooleanFunction) {
  OrgGeogebraCommonKernelGeosGeoFunction_initialize();
  [((JavaLangStringBuilder *) nil_chk(stringBuilder)) setLengthWithInt:0];
  if (isLabelSet) {
    [stringBuilder appendWithNSString:label];
    if (isBooleanFunction && ![((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML()]) [stringBuilder appendWithNSString:@": "];
    else {
      [stringBuilder appendWithNSString:@"("];
      [stringBuilder appendWithNSString:var];
      [stringBuilder appendWithNSString:@") = "];
    }
  }
}

void OrgGeogebraCommonKernelGeosGeoFunction_pointChangedWithOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonKernelGeosGeoFunction *self, OrgGeogebraCommonKernelMatrixCoords *P) {
  if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getZ] == 1.0) {
  }
  else {
    [P setXWithDouble:[P getX] / [P getZ]];
  }
  if (![self isBooleanFunction]) {
    if (self->interval_) {
      if ([P getX] < self->intervalMin_) {
        [P setXWithDouble:self->intervalMin_];
      }
      else if ([P getX] > self->intervalMax_) {
        [P setXWithDouble:self->intervalMax_];
      }
    }
    else {
      OrgGeogebraCommonKernelArithmeticExpressionNode *exp = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(self->fun_)) getExpression];
      if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_IF()]) {
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> inequality = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([exp getLeft])) unwrap];
        if ([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk(inequality)) isExpressionNode]) {
          jdouble bound;
          jdouble epsilon = 0;
          OrgGeogebraCommonKernelArithmeticExpressionNode *inequalityEn = (OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(inequality, [OrgGeogebraCommonKernelArithmeticExpressionNode class]);
          OrgGeogebraCommonPluginOperationEnum *op = [inequalityEn getOperation];
          switch ([op ordinal]) {
            case OrgGeogebraCommonPluginOperation_AND_INTERVAL:
            if (self->bounds_ == nil) {
              OrgGeogebraCommonKernelGeosGeoFunction_setAndConsume_bounds_(self, [IOSDoubleArray newArrayWithLength:2]);
            }
            OrgGeogebraCommonKernelGeosGeoInterval_updateBoundariesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withDoubleArray_withNSStringArray_withCharArray_(inequalityEn, self->bounds_, OrgGeogebraCommonKernelGeosGeoFunction_dummy1_, OrgGeogebraCommonKernelGeosGeoFunction_dummy2_);
            if ([P getX] < IOSDoubleArray_Get(nil_chk(self->bounds_), 0)) {
              [P setXWithDouble:IOSDoubleArray_Get(self->bounds_, 0)];
            }
            else if ([P getX] > IOSDoubleArray_Get(self->bounds_, 1)) {
              [P setXWithDouble:IOSDoubleArray_Get(self->bounds_, 1)];
            }
            break;
            case OrgGeogebraCommonPluginOperation_LESS:
            case OrgGeogebraCommonPluginOperation_LESS_EQUAL:
            case OrgGeogebraCommonPluginOperation_GREATER:
            case OrgGeogebraCommonPluginOperation_GREATER_EQUAL:
            if ([[inequalityEn getLeft] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
              bound = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([inequalityEn getRight])) evaluateDouble];
            }
            else if ([[inequalityEn getRight] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) {
              bound = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([inequalityEn getLeft])) evaluateDouble];
              op = [((OrgGeogebraCommonPluginOperationEnum *) nil_chk(op)) reverseLeftToRight];
            }
            else {
              bound = JavaLangDouble_NaN;
            }
            switch ([op ordinal]) {
              case OrgGeogebraCommonPluginOperation_LESS:
              epsilon = OrgGeogebraCommonKernelKernel_MIN_PRECISION;
              case OrgGeogebraCommonPluginOperation_LESS_EQUAL:
              if ([P getX] >= bound) {
                [P setXWithDouble:bound - epsilon];
              }
              break;
              case OrgGeogebraCommonPluginOperation_GREATER:
              epsilon = OrgGeogebraCommonKernelKernel_MIN_PRECISION;
              case OrgGeogebraCommonPluginOperation_GREATER_EQUAL:
              if ([P getX] < bound) {
                [P setXWithDouble:bound + epsilon];
              }
              break;
              default:
              break;
            }
            default:
            break;
          }
        }
      }
    }
    [P setYWithDouble:[self evaluateWithDouble:[P getX]]];
  }
  else {
    OrgGeogebraCommonKernelGeosGeoFunction_pointChangedBooleanWithBoolean_withOrgGeogebraCommonKernelMatrixCoords_(self, YES, P);
  }
  [P setZWithDouble:1.0];
}

void OrgGeogebraCommonKernelGeosGeoFunction_pointChangedBooleanWithBoolean_withOrgGeogebraCommonKernelMatrixCoords_(OrgGeogebraCommonKernelGeosGeoFunction *self, jboolean b, OrgGeogebraCommonKernelMatrixCoords *P) {
  jdouble px;
  jboolean yfun = [self isFunctionOfY];
  if (yfun) {
    if (b) [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:0.0];
    px = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getY];
  }
  else {
    if (b) [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) setYWithDouble:0.0];
    px = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getX];
  }
  jdouble bestDist = JavaLangDouble_MAX_VALUE;
  [self getIneqs];
  if (!OrgGeogebraCommonKernelGeosGeoFunction_evaluateBooleanWithDouble_(self, px)) {
    OrgGeogebraCommonKernelArithmeticIneqTree *ineqs = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(self->fun_)) getIneqs];
    jint ineqCount = [((OrgGeogebraCommonKernelArithmeticIneqTree *) nil_chk(ineqs)) getSize];
    for (jint i = 0; i < ineqCount; i++) {
      {
        IOSObjectArray *a__ = [((OrgGeogebraCommonKernelArithmeticInequality *) nil_chk([ineqs getWithInt:i])) getZeros];
        OrgGeogebraCommonKernelGeosGeoPoint * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgGeogebraCommonKernelGeosGeoPoint * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgGeogebraCommonKernelGeosGeoPoint *point = *b__++;
          if (JavaLangMath_absWithDouble_([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(point)) getX] - px) < bestDist) {
            bestDist = JavaLangMath_absWithDouble_([point getX] - px);
            if (yfun) {
              [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) setYWithDouble:[point getX]];
            }
            else {
              [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:[point getX]];
            }
          }
        }
      }
    }
  }
}

id<OrgGeogebraCommonKernelRootsRealRootFunction> OrgGeogebraCommonKernelGeosGeoFunction_getRealRootFunctionY(OrgGeogebraCommonKernelGeosGeoFunction *self) {
  return [new_OrgGeogebraCommonKernelGeosGeoFunction_$5_initWithOrgGeogebraCommonKernelGeosGeoFunction_(self) autorelease];
}

OrgGeogebraCommonKernelGeosGeoFunction *OrgGeogebraCommonKernelGeosGeoFunction_addWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction *resultFun, OrgGeogebraCommonKernelGeosGeoFunction *fun1, OrgGeogebraCommonKernelGeosGeoFunction *fun2) {
  OrgGeogebraCommonKernelGeosGeoFunction_initialize();
  OrgGeogebraCommonKernelKernel *kernel = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(fun1)) getKernel];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *x1 = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([fun1 getFunction])) getFunctionVariable];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *x2 = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(fun2)) getFunction])) getFunctionVariable];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *x = [new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(kernel) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *left = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(fun1))) getCopyWithOrgGeogebraCommonKernelKernel:kernel];
  OrgGeogebraCommonKernelArithmeticExpressionNode *right = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(fun2))) getCopyWithOrgGeogebraCommonKernelKernel:kernel];
  OrgGeogebraCommonKernelArithmeticExpressionNode *sum = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_([fun1 getKernel], [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(left)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:x1 withOrgGeogebraCommonKernelArithmeticExpressionValue:x], OrgGeogebraCommonPluginOperationEnum_get_PLUS(), [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(right)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:x2 withOrgGeogebraCommonKernelArithmeticExpressionValue:x]) autorelease];
  OrgGeogebraCommonKernelArithmeticFunction *f = [new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(sum, x) autorelease];
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(resultFun)) setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:f];
  [resultFun setDefinedWithBoolean:YES];
  return resultFun;
}

OrgGeogebraCommonKernelArithmeticFunctionNVar *OrgGeogebraCommonKernelGeosGeoFunction_operationSymbWithOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_(OrgGeogebraCommonPluginOperationEnum *op, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> lt, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> rt) {
  OrgGeogebraCommonKernelGeosGeoFunction_initialize();
  OrgGeogebraCommonKernelKernel *kernel = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(lt)) getFunction])) getKernel];
  JavaUtilTreeSet *varNames = [new_JavaUtilTreeSet_init() autorelease];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([lt getFunction])) getVarNumber]; i++) [varNames addWithId:[((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([lt getFunction])) getVarStringWithInt:i withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(rt)) getFunction])) getVarNumber]; i++) [varNames addWithId:[((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([rt getFunction])) getVarStringWithInt:i withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  JavaUtilHashMap *varmap = [new_JavaUtilHashMap_init() autorelease];
  for (NSString * __strong name in varNames) {
    [varmap putWithId:name withId:[new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel, name) autorelease]];
  }
  OrgGeogebraCommonKernelArithmeticExpressionNode *ltExpr = OrgGeogebraCommonKernelGeosGeoFunction_toExprWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_(lt, varmap, kernel), *rtExpr = OrgGeogebraCommonKernelGeosGeoFunction_toExprWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_(rt, varmap, kernel), *sum = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, ltExpr, op, rtExpr) autorelease];
  OrgGeogebraCommonKernelArithmeticFunctionNVar *f = OrgGeogebraCommonKernelGeosGeoFunction_fromExprWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilHashMap_withJavaUtilTreeSet_(sum, varmap, varNames);
  [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(f)) initFunction];
  return f;
}

OrgGeogebraCommonKernelArithmeticFunctionNVar *OrgGeogebraCommonKernelGeosGeoFunction_fromExprWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilHashMap_withJavaUtilTreeSet_(OrgGeogebraCommonKernelArithmeticExpressionNode *sum, JavaUtilHashMap *varmap, JavaUtilTreeSet *varNames) {
  OrgGeogebraCommonKernelGeosGeoFunction_initialize();
  jint size = [((JavaUtilHashMap *) nil_chk(varmap)) size];
  if (size > 1) {
    IOSObjectArray *varArray = [IOSObjectArray arrayWithLength:size type:OrgGeogebraCommonKernelArithmeticFunctionVariable_class_()];
    jint i = 0;
    for (NSString * __strong name in nil_chk(varNames)) {
      IOSObjectArray_Set(varArray, i, [varmap getWithId:name]);
      i++;
    }
    OrgGeogebraCommonKernelArithmeticFunctionNVar *f = [new_OrgGeogebraCommonKernelArithmeticFunctionNVar_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariableArray_(sum, varArray) autorelease];
    return f;
  }
  id<JavaUtilIterator> var = [((id<JavaUtilCollection>) nil_chk([varmap values])) iterator];
  return [new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(sum, [((id<JavaUtilIterator>) nil_chk(var)) next]) autorelease];
}

OrgGeogebraCommonKernelArithmeticExpressionNode *OrgGeogebraCommonKernelGeosGeoFunction_toExprWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_(id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> lt, JavaUtilHashMap *varMap, OrgGeogebraCommonKernelKernel *kernel) {
  OrgGeogebraCommonKernelGeosGeoFunction_initialize();
  if ([lt isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunction class]]) return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, lt, OrgGeogebraCommonPluginOperationEnum_get_FUNCTION(), [((JavaUtilHashMap *) nil_chk(varMap)) getWithId:[((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(lt)) getVarStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) autorelease];
  if ([lt isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunctionNVar class]]) {
    OrgGeogebraCommonKernelArithmeticMyList *varList = [new_OrgGeogebraCommonKernelArithmeticMyList_initWithOrgGeogebraCommonKernelKernel_(kernel) autorelease];
    for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(lt)) getFunction])) getVarNumber]; i++) {
      [varList addListElementWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((JavaUtilHashMap *) nil_chk(varMap)) getWithId:[((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([lt getFunction])) getVarStringWithInt:i withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]];
    }
    return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, lt, OrgGeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR(), varList) autorelease];
  }
  if ([lt isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionNVar class]]) {
    OrgGeogebraCommonKernelArithmeticExpressionNode *ret = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(lt, [OrgGeogebraCommonKernelArithmeticFunctionNVar class])))) getExpression];
    for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(lt, [OrgGeogebraCommonKernelArithmeticFunctionNVar class])))) getVarNumber]; i++) ret = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(ret)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk([((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(lt, [OrgGeogebraCommonKernelArithmeticFunctionNVar class])))) getFunctionVariables]), i) withOrgGeogebraCommonKernelArithmeticExpressionValue:[((JavaUtilHashMap *) nil_chk(varMap)) getWithId:[((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(lt, [OrgGeogebraCommonKernelArithmeticFunctionNVar class])))) getVarStringWithInt:i withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]])) wrap];
    return ret;
  }
  return nil;
}

OrgGeogebraCommonKernelArithmeticFunctionNVar *OrgGeogebraCommonKernelGeosGeoFunction_applyNumberSymbWithOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticFunctionalNVar_withOrgGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(OrgGeogebraCommonPluginOperationEnum *op, id<OrgGeogebraCommonKernelArithmeticFunctionalNVar> fun1, id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev, jboolean right) {
  OrgGeogebraCommonKernelGeosGeoFunction_initialize();
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> nv = ev;
  OrgGeogebraCommonKernelKernel *kernel = [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(fun1)) getFunction])) getKernel];
  JavaUtilTreeSet *varNames = [new_JavaUtilTreeSet_init() autorelease];
  for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([fun1 getFunction])) getVarNumber]; i++) [varNames addWithId:[((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([fun1 getFunction])) getVarStringWithInt:i withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  JavaUtilHashMap *varmap = [new_JavaUtilHashMap_init() autorelease];
  for (NSString * __strong name in varNames) {
    [varmap putWithId:name withId:[new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(kernel, name) autorelease]];
  }
  OrgGeogebraCommonKernelArithmeticExpressionNode *sum, *myExpr;
  myExpr = OrgGeogebraCommonKernelGeosGeoFunction_toExprWithOrgGeogebraCommonKernelArithmeticFunctionalNVar_withJavaUtilHashMap_withOrgGeogebraCommonKernelKernel_(fun1, varmap, kernel);
  if ([nv isKindOfClass:[OrgGeogebraCommonKernelArithmeticExpressionNode class]]) for (NSString * __strong name in varNames) {
    [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((OrgGeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(nv, [OrgGeogebraCommonKernelArithmeticExpressionNode class])))) replaceVariablesWithNSString:name withOrgGeogebraCommonKernelArithmeticFunctionVariable:[varmap getWithId:name]];
  }
  else if ([nv isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]]) nv = [varmap getWithId:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(((OrgGeogebraCommonKernelArithmeticFunctionVariable *) check_class_cast(nv, [OrgGeogebraCommonKernelArithmeticFunctionVariable class])))) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  if (right) {
    sum = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, myExpr, op, nv) autorelease];
  }
  else {
    sum = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, nv, op, myExpr) autorelease];
  }
  OrgGeogebraCommonKernelArithmeticFunctionNVar *f = OrgGeogebraCommonKernelGeosGeoFunction_fromExprWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilHashMap_withJavaUtilTreeSet_(sum, varmap, varNames);
  [((OrgGeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(f)) initFunction];
  return f;
}

OrgGeogebraCommonKernelGeosGeoFunction *OrgGeogebraCommonKernelGeosGeoFunction_subtractWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction *resultFun, OrgGeogebraCommonKernelGeosGeoFunction *fun1, OrgGeogebraCommonKernelGeosGeoFunction *fun2) {
  OrgGeogebraCommonKernelGeosGeoFunction_initialize();
  OrgGeogebraCommonKernelKernel *kernel = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(fun1)) getKernel];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *x1 = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([fun1 getFunction])) getFunctionVariable];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *x2 = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(fun2)) getFunction])) getFunctionVariable];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *x = [new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(kernel) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *left = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(fun1))) getCopyWithOrgGeogebraCommonKernelKernel:kernel];
  OrgGeogebraCommonKernelArithmeticExpressionNode *right = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(fun2))) getCopyWithOrgGeogebraCommonKernelKernel:kernel];
  OrgGeogebraCommonKernelArithmeticExpressionNode *sum = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_([fun1 getKernel], [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(left)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:x1 withOrgGeogebraCommonKernelArithmeticExpressionValue:x], OrgGeogebraCommonPluginOperationEnum_get_MINUS(), [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(right)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:x2 withOrgGeogebraCommonKernelArithmeticExpressionValue:x]) autorelease];
  OrgGeogebraCommonKernelArithmeticFunction *f = [new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(sum, x) autorelease];
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(resultFun)) setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:f];
  [resultFun setDefinedWithBoolean:YES];
  return resultFun;
}

OrgGeogebraCommonKernelGeosGeoFunction *OrgGeogebraCommonKernelGeosGeoFunction_multWithOrgGeogebraCommonKernelGeosGeoFunction_withDouble_withOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction *resultFun, jdouble number, OrgGeogebraCommonKernelGeosGeoFunction *fun) {
  OrgGeogebraCommonKernelGeosGeoFunction_initialize();
  OrgGeogebraCommonKernelKernel *kernel = [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(fun)) getKernel];
  OrgGeogebraCommonKernelArithmeticMyDouble *num = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel, number) autorelease];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *xold = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([fun getFunction])) getFunctionVariable];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *x = [new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(kernel) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *left = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, num) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *right = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(OrgGeogebraCommonKernelGeosGeoFunction_getFunctionExpression(fun))) getCopyWithOrgGeogebraCommonKernelKernel:kernel];
  OrgGeogebraCommonKernelArithmeticExpressionNode *product = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel, left, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(right)) replaceWithOrgGeogebraCommonKernelArithmeticExpressionValue:xold withOrgGeogebraCommonKernelArithmeticExpressionValue:x])) wrap]) autorelease];
  OrgGeogebraCommonKernelArithmeticFunction *f = [new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(product, x) autorelease];
  [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(resultFun)) setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:f];
  [resultFun setDefinedWithBoolean:YES];
  return resultFun;
}

jboolean OrgGeogebraCommonKernelGeosGeoFunction_CASErrorWithNSString_withBoolean_(NSString *str, jboolean allowInfinity) {
  OrgGeogebraCommonKernelGeosGeoFunction_initialize();
  NSString *str1 = str;
  if (str1 == nil || ((jint) [str1 length]) == 0) return YES;
  if ([((NSString *) nil_chk(str1)) isEqual:@"?"]) return YES;
  str1 = OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(str1);
  if ([((NSString *) nil_chk(str1)) charAtWithInt:0] == '\'') return YES;
  if (!allowInfinity && [str1 indexOf:OrgGeogebraCommonUtilUnicode_INFINITY] > -1) return YES;
  if (((jint) [str1 length]) > 6) {
    if ([str1 hasPrefix:@"limit"]) return YES;
    if ([str1 hasPrefix:@"solve"]) return YES;
    if ([str1 hasPrefix:@"undefined"]) return YES;
  }
  return NO;
}

IOSObjectArray *OrgGeogebraCommonKernelGeosGeoFunction_getTempVarCASStringWithBoolean_(OrgGeogebraCommonKernelGeosGeoFunction *self, jboolean symbolic) {
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_prefixedDefault_();
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [self getCASStringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:symbolic], [self getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl] } count:2 type:NSString_class_()];
  return ret;
}

jboolean OrgGeogebraCommonKernelGeosGeoFunction_collectCasesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilArrayList_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoFunction_Bounds_(OrgGeogebraCommonKernelGeosGeoFunction *self, OrgGeogebraCommonKernelArithmeticExpressionNode *condRoot, JavaUtilArrayList *cases, JavaUtilArrayList *conditions, OrgGeogebraCommonKernelGeosGeoFunction_Bounds *parentCond) {
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(condRoot)) getOperation] == OrgGeogebraCommonPluginOperationEnum_get_IF_LIST()) {
    OrgGeogebraCommonKernelArithmeticMyList *conds = (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([condRoot getLeft])) unwrap], [OrgGeogebraCommonKernelArithmeticMyList class]);
    for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(conds)) size]; i++) {
      [((JavaUtilArrayList *) nil_chk(conditions)) addWithId:[((OrgGeogebraCommonKernelGeosGeoFunction_Bounds *) nil_chk(parentCond)) addRestrictionWithOrgGeogebraCommonKernelArithmeticExpressionNode:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([conds getListElementWithInt:i])) wrap]]];
    }
    OrgGeogebraCommonKernelArithmeticMyList *fns = (OrgGeogebraCommonKernelArithmeticMyList *) check_class_cast([((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([condRoot getRight])) unwrap], [OrgGeogebraCommonKernelArithmeticMyList class]);
    for (jint i = 0; i < [((OrgGeogebraCommonKernelArithmeticMyList *) nil_chk(fns)) size]; i++) {
      [((JavaUtilArrayList *) nil_chk(cases)) addWithId:[((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([fns getListElementWithInt:i])) wrap]];
    }
    return [fns size] > [conds size];
  }
  jboolean complete = [condRoot getOperation] == OrgGeogebraCommonPluginOperationEnum_get_IF_ELSE();
  OrgGeogebraCommonKernelArithmeticExpressionNode *condFun = complete ? [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast([condRoot getLeft], [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) getX])) wrap] : [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([condRoot getLeft])) wrap];
  OrgGeogebraCommonKernelArithmeticExpressionNode *ifFun = complete ? [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast([condRoot getLeft], [OrgGeogebraCommonKernelArithmeticMyNumberPair class])))) getY])) wrap] : [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([condRoot getRight])) wrap];
  OrgGeogebraCommonKernelArithmeticExpressionNode *elseFun = complete ? [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([condRoot getRight])) wrap] : nil;
  OrgGeogebraCommonKernelGeosGeoFunction_Bounds *positiveCond = [((OrgGeogebraCommonKernelGeosGeoFunction_Bounds *) nil_chk(parentCond)) addRestrictionWithOrgGeogebraCommonKernelArithmeticExpressionNode:condFun];
  OrgGeogebraCommonKernelGeosGeoFunction_Bounds *negativeCond = [parentCond addRestrictionWithOrgGeogebraCommonKernelArithmeticExpressionNode:[condFun negation]];
  if ([ifFun isConditional]) {
    complete &= OrgGeogebraCommonKernelGeosGeoFunction_collectCasesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilArrayList_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoFunction_Bounds_(self, ifFun, cases, conditions, positiveCond);
  }
  else {
    [((JavaUtilArrayList *) nil_chk(cases)) addWithId:ifFun];
    [((JavaUtilArrayList *) nil_chk(conditions)) addWithId:positiveCond];
  }
  if (elseFun != nil && [elseFun isConditional]) {
    complete &= OrgGeogebraCommonKernelGeosGeoFunction_collectCasesWithOrgGeogebraCommonKernelArithmeticExpressionNode_withJavaUtilArrayList_withJavaUtilArrayList_withOrgGeogebraCommonKernelGeosGeoFunction_Bounds_(self, elseFun, cases, conditions, negativeCond);
  }
  else if (elseFun != nil) {
    [((JavaUtilArrayList *) nil_chk(cases)) addWithId:elseFun];
    [((JavaUtilArrayList *) nil_chk(conditions)) addWithId:negativeCond];
  }
  return complete;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoFunction)

@implementation OrgGeogebraCommonKernelGeosGeoFunction_Bounds

- (OrgGeogebraCommonKernelGeosGeoFunction_Bounds *)addRestrictionWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)e {
  if ([((OrgGeogebraCommonPluginOperationEnum *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(e)) getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_AND()] || [((OrgGeogebraCommonPluginOperationEnum *) nil_chk([e getOperation])) isEqual:OrgGeogebraCommonPluginOperationEnum_get_AND_INTERVAL()]) {
    return [((OrgGeogebraCommonKernelGeosGeoFunction_Bounds *) nil_chk([self addRestrictionWithOrgGeogebraCommonKernelArithmeticExpressionNode:[e getLeftTree]])) addRestrictionWithOrgGeogebraCommonKernelArithmeticExpressionNode:[e getRightTree]];
  }
  OrgGeogebraCommonKernelGeosGeoFunction_Bounds *b = [new_OrgGeogebraCommonKernelGeosGeoFunction_Bounds_initWithOrgGeogebraCommonKernelGeosGeoFunction_(this$0_) autorelease];
  OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_lower_(b, lower_);
  OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_upper_(b, upper_);
  b->lowerSharp_ = lowerSharp_;
  b->upperSharp_ = upperSharp_;
  OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_condition_(b, condition_);
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> lt = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([e getLeft])) unwrap];
  id<OrgGeogebraCommonKernelArithmeticExpressionValue> rt = [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([e getRight])) unwrap];
  jboolean simple = [e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_GREATER() || [e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_GREATER_EQUAL() || [e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_LESS() || [e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_LESS_EQUAL() || [e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN();
  if (simple && [lt isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt] && !([rt isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]])) {
    jdouble d = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    if ([e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_GREATER() && (lower_ == nil || [lower_ doubleValue] <= d)) {
      OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_lower_(b, JavaLangDouble_valueOfWithDouble_(d));
      b->lowerSharp_ = YES;
    }
    else if (([e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_GREATER_EQUAL() || [e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()) && (lower_ == nil || [lower_ doubleValue] < d)) {
      OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_lower_(b, JavaLangDouble_valueOfWithDouble_(d));
      b->lowerSharp_ = NO;
    }
    else if ([e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_LESS() && (upper_ == nil || [upper_ doubleValue] >= d)) {
      OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_upper_(b, JavaLangDouble_valueOfWithDouble_(d));
      b->upperSharp_ = YES;
    }
    if (([e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_LESS_EQUAL() || [e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()) && (upper_ == nil || [upper_ doubleValue] > d)) {
      OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_upper_(b, JavaLangDouble_valueOfWithDouble_(d));
      b->upperSharp_ = NO;
    }
  }
  else if (simple && [rt isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:lt] && !([lt isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]])) {
    jdouble d = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(lt, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    if ([e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_LESS() && (lower_ == nil || [lower_ doubleValue] <= d)) {
      OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_lower_(b, JavaLangDouble_valueOfWithDouble_(d));
      b->lowerSharp_ = YES;
    }
    else if (([e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_LESS_EQUAL() || [e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()) && (lower_ == nil || [lower_ doubleValue] < d)) {
      OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_lower_(b, JavaLangDouble_valueOfWithDouble_(d));
      b->lowerSharp_ = NO;
    }
    else if ([e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_GREATER() && (upper_ == nil || [upper_ doubleValue] >= d)) {
      OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_upper_(b, JavaLangDouble_valueOfWithDouble_(d));
      b->upperSharp_ = YES;
    }
    if (([e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_GREATER_EQUAL() || [e getOperation] == OrgGeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()) && (upper_ == nil || [upper_ doubleValue] > d)) {
      OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_upper_(b, JavaLangDouble_valueOfWithDouble_(d));
      b->upperSharp_ = NO;
    }
  }
  else {
    if (condition_ == nil) OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_condition_(b, e);
    else OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_condition_(b, [condition_ and__WithOrgGeogebraCommonKernelArithmeticExpressionValue:e]);
  }
  if (b->upper_ != nil && b->lower_ != nil && (b->condition_ != nil) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([b->upper_ doubleValue], [b->lower_ doubleValue])) {
    [((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([this$0_ getFunction])) getFunctionVariable])) setWithDouble:[b->upper_ doubleValue]];
    id<OrgGeogebraCommonKernelArithmeticExpressionValue> v = [b->condition_ evaluateWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if ([OrgGeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:v] && [((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<OrgGeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast(v, @protocol(OrgGeogebraCommonKernelArithmeticBooleanValue))))) getBoolean]) OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_condition_(b, nil);
  }
  if (b->condition_ != nil && [b->condition_ getOperation] == OrgGeogebraCommonPluginOperationEnum_get_NOT_EQUAL()) {
    if ([[b->condition_ getLeft] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [[b->condition_ getRight] isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]]) {
      jdouble d = [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyDouble *) check_class_cast([b->condition_ getRight], [OrgGeogebraCommonKernelArithmeticMyDouble class])))) getDouble];
      if ((b->lower_ != nil && d < [b->lower_ doubleValue]) || (b->upper_ != nil && d > [b->upper_ doubleValue])) OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_condition_(b, nil);
    }
    else if ([[b->condition_ getRight] isKindOfClass:[OrgGeogebraCommonKernelArithmeticFunctionVariable class]] && [[b->condition_ getLeft] isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyDouble class]]) {
      jdouble d = [((OrgGeogebraCommonKernelArithmeticMyDouble *) nil_chk(((OrgGeogebraCommonKernelArithmeticMyDouble *) check_class_cast([b->condition_ getLeft], [OrgGeogebraCommonKernelArithmeticMyDouble class])))) getDouble];
      if ((b->lower_ != nil && d < [b->lower_ doubleValue]) || (b->upper_ != nil && d > [b->upper_ doubleValue])) OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_condition_(b, nil);
    }
  }
  return b;
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
                          withNSString:(NSString *)varString
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *ret = [new_JavaLangStringBuilder_init() autorelease];
  if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    if (upper_ == nil && lower_ != nil) {
      [ret appendWithNSString:varString];
      [ret appendWithNSString:@" "];
      [ret appendWithId:lowerSharp_ ? @">" : JavaLangCharacter_valueOfWithChar_(OrgGeogebraCommonUtilUnicode_GREATER_EQUAL)];
      [ret appendWithNSString:@" "];
      [ret appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(this$0_->kernel_)) formatWithDouble:[lower_ doubleValue] withOrgGeogebraCommonKernelStringTemplate:tpl]];
    }
    else if (lower_ == nil && upper_ != nil) {
      [ret appendWithNSString:varString];
      [ret appendWithNSString:@" "];
      [ret appendWithId:upperSharp_ ? @"<" : JavaLangCharacter_valueOfWithChar_(OrgGeogebraCommonUtilUnicode_LESS_EQUAL)];
      [ret appendWithNSString:@" "];
      [ret appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(this$0_->kernel_)) formatWithDouble:[upper_ doubleValue] withOrgGeogebraCommonKernelStringTemplate:tpl]];
    }
    else if (lower_ != nil && upper_ != nil) {
      if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([lower_ doubleValue], [upper_ doubleValue]) && !lowerSharp_ && !upperSharp_) {
        [ret appendWithNSString:varString];
        [ret appendWithNSString:@" = "];
        [ret appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(this$0_->kernel_)) formatWithDouble:[lower_ doubleValue] withOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
      else {
        [ret appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(this$0_->kernel_)) formatWithDouble:[lower_ doubleValue] withOrgGeogebraCommonKernelStringTemplate:tpl]];
        [ret appendWithNSString:@" "];
        [ret appendWithId:lowerSharp_ ? @"<" : JavaLangCharacter_valueOfWithChar_(OrgGeogebraCommonUtilUnicode_LESS_EQUAL)];
        [ret appendWithNSString:@" "];
        [ret appendWithNSString:varString];
        [ret appendWithNSString:@" "];
        [ret appendWithId:upperSharp_ ? @"<" : JavaLangCharacter_valueOfWithChar_(OrgGeogebraCommonUtilUnicode_LESS_EQUAL)];
        [ret appendWithNSString:@" "];
        [ret appendWithNSString:[this$0_->kernel_ formatWithDouble:[upper_ doubleValue] withOrgGeogebraCommonKernelStringTemplate:tpl]];
      }
    }
    else if (condition_ != nil) {
      return [condition_ toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl];
    }
    if (condition_ != nil) {
      [ret insertWithInt:0 withNSString:@"("];
      [ret appendWithNSString:@")\\wedge \\left("];
      [ret appendWithNSString:[condition_ toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl]];
      [ret appendWithNSString:@"\\right)"];
    }
  }
  else {
    if (upper_ == nil && lower_ != nil) {
      [ret appendWithNSString:@"<apply>"];
      [ret appendWithNSString:lowerSharp_ ? @"<gt/>" : @"<geq/>"];
      [ret appendWithNSString:@"<ci>"];
      [ret appendWithNSString:varString];
      [ret appendWithNSString:@"</ci><cn>"];
      [ret appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(this$0_->kernel_)) formatWithDouble:[lower_ doubleValue] withOrgGeogebraCommonKernelStringTemplate:tpl]];
      [ret appendWithNSString:@"</cn></apply>"];
    }
    else if (lower_ == nil && upper_ != nil) {
      [ret appendWithNSString:@"<apply>"];
      [ret appendWithNSString:upperSharp_ ? @"<lt/>" : @"<leq/>"];
      [ret appendWithNSString:@"<ci>"];
      [ret appendWithNSString:varString];
      [ret appendWithNSString:@"</ci><cn>"];
      [ret appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(this$0_->kernel_)) formatWithDouble:[upper_ doubleValue] withOrgGeogebraCommonKernelStringTemplate:tpl]];
      [ret appendWithNSString:@"</cn></apply>"];
    }
    else if (lower_ != nil && upper_ != nil) {
      if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([lower_ doubleValue], [upper_ doubleValue]) && !lowerSharp_ && !upperSharp_) {
        [ret appendWithNSString:@"<apply>"];
        [ret appendWithNSString:@"<eq/>"];
        [ret appendWithNSString:@"<ci>"];
        [ret appendWithNSString:varString];
        [ret appendWithNSString:@"</ci><cn>"];
        [ret appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(this$0_->kernel_)) formatWithDouble:[lower_ doubleValue] withOrgGeogebraCommonKernelStringTemplate:tpl]];
        [ret appendWithNSString:@"</cn></apply>"];
      }
      else {
        if (lowerSharp_ == upperSharp_) {
          [ret appendWithNSString:@"<apply>"];
          [ret appendWithNSString:lowerSharp_ ? @"<lt/>" : @"<leq/>"];
          [ret appendWithNSString:@"<cn>"];
          [ret appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(this$0_->kernel_)) formatWithDouble:[lower_ doubleValue] withOrgGeogebraCommonKernelStringTemplate:tpl]];
          [ret appendWithNSString:@"</cn>"];
          [ret appendWithNSString:@"<ci>"];
          [ret appendWithNSString:varString];
          [ret appendWithNSString:@"</ci>"];
          [ret appendWithNSString:@"<cn>"];
          [ret appendWithNSString:[this$0_->kernel_ formatWithDouble:[upper_ doubleValue] withOrgGeogebraCommonKernelStringTemplate:tpl]];
          [ret appendWithNSString:@"</cn>"];
          [ret appendWithNSString:@"</apply>"];
        }
        else {
          [ret appendWithNSString:@"<apply>"];
          [ret appendWithNSString:@"<and/>"];
          [ret appendWithNSString:@"<apply>"];
          [ret appendWithNSString:lowerSharp_ ? @"<lt/>" : @"<leq/>"];
          [ret appendWithNSString:@"<cn>"];
          [ret appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(this$0_->kernel_)) formatWithDouble:[lower_ doubleValue] withOrgGeogebraCommonKernelStringTemplate:tpl]];
          [ret appendWithNSString:@"</cn>"];
          [ret appendWithNSString:@"<ci>"];
          [ret appendWithNSString:varString];
          [ret appendWithNSString:@"</ci>"];
          [ret appendWithNSString:@"</apply>"];
          [ret appendWithNSString:@"<apply>"];
          [ret appendWithNSString:upperSharp_ ? @"<lt/>" : @"<leq/>"];
          [ret appendWithNSString:@"<ci>"];
          [ret appendWithNSString:varString];
          [ret appendWithNSString:@"</ci>"];
          [ret appendWithNSString:@"<cn>"];
          [ret appendWithNSString:[this$0_->kernel_ formatWithDouble:[upper_ doubleValue] withOrgGeogebraCommonKernelStringTemplate:tpl]];
          [ret appendWithNSString:@"</cn>"];
          [ret appendWithNSString:@"</apply>"];
          [ret appendWithNSString:@"</apply>"];
        }
      }
    }
    else if (condition_ != nil) {
      return [condition_ toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl];
    }
    if (condition_ != nil) {
      [ret insertWithInt:0 withNSString:@"<apply><and/>"];
      [ret appendWithNSString:[condition_ toLaTeXStringWithBoolean:symbolic withOrgGeogebraCommonKernelStringTemplate:tpl]];
      [ret appendWithNSString:@"</apply>"];
    }
  }
  return [ret description];
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)outer$ {
  OrgGeogebraCommonKernelGeosGeoFunction_Bounds_initWithOrgGeogebraCommonKernelGeosGeoFunction_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(lower_);
  RELEASE_(upper_);
  RELEASE_(condition_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addRestrictionWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "addRestriction", "Lorg.geogebra.common.kernel.geos.GeoFunction$Bounds;", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withNSString:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoFunction:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "lowerSharp_", NULL, 0x2, "Z", NULL, NULL,  },
    { "upperSharp_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lower_", NULL, 0x2, "Ljava.lang.Double;", NULL, NULL,  },
    { "upper_", NULL, 0x2, "Ljava.lang.Double;", NULL, NULL,  },
    { "condition_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoFunction_Bounds = { 2, "Bounds", "org.geogebra.common.kernel.geos", "GeoFunction", 0x0, 3, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoFunction_Bounds;
}

@end

void OrgGeogebraCommonKernelGeosGeoFunction_Bounds_initWithOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction_Bounds *self, OrgGeogebraCommonKernelGeosGeoFunction *outer$) {
  OrgGeogebraCommonKernelGeosGeoFunction_Bounds_set_this$0_(self, outer$);
  NSObject_init(self);
}

OrgGeogebraCommonKernelGeosGeoFunction_Bounds *new_OrgGeogebraCommonKernelGeosGeoFunction_Bounds_initWithOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction *outer$) {
  OrgGeogebraCommonKernelGeosGeoFunction_Bounds *self = [OrgGeogebraCommonKernelGeosGeoFunction_Bounds alloc];
  OrgGeogebraCommonKernelGeosGeoFunction_Bounds_initWithOrgGeogebraCommonKernelGeosGeoFunction_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoFunction_Bounds)

@implementation OrgGeogebraCommonKernelGeosGeoFunction_$1

- (jdouble)evaluateWithDouble:(jdouble)x {
  return [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(this$0_->iPoly_)) evalPolyAtWithDouble:x withDouble:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->substituteFunctions_), 1))) getFunction])) evaluateWithDouble:x]];
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)outer$
                             withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)arg$0 {
  OrgGeogebraCommonKernelGeosGeoFunction_$1_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(self, outer$, arg$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelKernel:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelGeosGeoFunction", "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoFunction_$1 = { 2, "", "org.geogebra.common.kernel.geos", "GeoFunction", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoFunction_$1;
}

@end

void OrgGeogebraCommonKernelGeosGeoFunction_$1_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelGeosGeoFunction_$1 *self, OrgGeogebraCommonKernelGeosGeoFunction *outer$, OrgGeogebraCommonKernelKernel *arg$0) {
  OrgGeogebraCommonKernelGeosGeoFunction_$1_set_this$0_(self, outer$);
  OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelKernel_(self, arg$0);
}

OrgGeogebraCommonKernelGeosGeoFunction_$1 *new_OrgGeogebraCommonKernelGeosGeoFunction_$1_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelGeosGeoFunction *outer$, OrgGeogebraCommonKernelKernel *arg$0) {
  OrgGeogebraCommonKernelGeosGeoFunction_$1 *self = [OrgGeogebraCommonKernelGeosGeoFunction_$1 alloc];
  OrgGeogebraCommonKernelGeosGeoFunction_$1_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(self, outer$, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoFunction_$1)

@implementation OrgGeogebraCommonKernelGeosGeoFunction_$2

- (jdouble)evaluateWithDouble:(jdouble)x {
  return [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(this$0_->iPoly_)) evalPolyAtWithDouble:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->substituteFunctions_), 0))) getFunction])) evaluateWithDouble:x] withDouble:x];
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)outer$
                             withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)arg$0 {
  OrgGeogebraCommonKernelGeosGeoFunction_$2_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(self, outer$, arg$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelKernel:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelGeosGeoFunction", "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoFunction_$2 = { 2, "", "org.geogebra.common.kernel.geos", "GeoFunction", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoFunction_$2;
}

@end

void OrgGeogebraCommonKernelGeosGeoFunction_$2_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelGeosGeoFunction_$2 *self, OrgGeogebraCommonKernelGeosGeoFunction *outer$, OrgGeogebraCommonKernelKernel *arg$0) {
  OrgGeogebraCommonKernelGeosGeoFunction_$2_set_this$0_(self, outer$);
  OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelKernel_(self, arg$0);
}

OrgGeogebraCommonKernelGeosGeoFunction_$2 *new_OrgGeogebraCommonKernelGeosGeoFunction_$2_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelGeosGeoFunction *outer$, OrgGeogebraCommonKernelKernel *arg$0) {
  OrgGeogebraCommonKernelGeosGeoFunction_$2 *self = [OrgGeogebraCommonKernelGeosGeoFunction_$2 alloc];
  OrgGeogebraCommonKernelGeosGeoFunction_$2_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(self, outer$, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoFunction_$2)

@implementation OrgGeogebraCommonKernelGeosGeoFunction_$3

- (jdouble)evaluateWithDouble:(jdouble)x {
  return [((OrgGeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(this$0_->iPoly_)) evalPolyAtWithDouble:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->substituteFunctions_), 0))) getFunction])) evaluateWithDouble:x] withDouble:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk(IOSObjectArray_Get(this$0_->substituteFunctions_, 1))) getFunction])) evaluateWithDouble:x]];
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)outer$
                             withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)arg$0 {
  OrgGeogebraCommonKernelGeosGeoFunction_$3_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(self, outer$, arg$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelKernel:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelGeosGeoFunction", "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelImplicitGeoImplicitPoly:withOrgGeogebraCommonKernelGeosGeoFunction:withOrgGeogebraCommonKernelGeosGeoFunction:" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoFunction_$3 = { 2, "", "org.geogebra.common.kernel.geos", "GeoFunction", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoFunction_$3;
}

@end

void OrgGeogebraCommonKernelGeosGeoFunction_$3_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelGeosGeoFunction_$3 *self, OrgGeogebraCommonKernelGeosGeoFunction *outer$, OrgGeogebraCommonKernelKernel *arg$0) {
  OrgGeogebraCommonKernelGeosGeoFunction_$3_set_this$0_(self, outer$);
  OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelKernel_(self, arg$0);
}

OrgGeogebraCommonKernelGeosGeoFunction_$3 *new_OrgGeogebraCommonKernelGeosGeoFunction_$3_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(OrgGeogebraCommonKernelGeosGeoFunction *outer$, OrgGeogebraCommonKernelKernel *arg$0) {
  OrgGeogebraCommonKernelGeosGeoFunction_$3 *self = [OrgGeogebraCommonKernelGeosGeoFunction_$3 alloc];
  OrgGeogebraCommonKernelGeosGeoFunction_$3_initWithOrgGeogebraCommonKernelGeosGeoFunction_withOrgGeogebraCommonKernelKernel_(self, outer$, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoFunction_$3)

@implementation OrgGeogebraCommonKernelGeosGeoFunction_$4

- (jdouble)evaluateWithDouble:(jdouble)t {
  return t;
}

- (instancetype)init {
  OrgGeogebraCommonKernelGeosGeoFunction_$4_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelGeosGeoFunction", "getRealRootFunctionX" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoFunction_$4 = { 2, "", "org.geogebra.common.kernel.geos", "GeoFunction", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoFunction_$4;
}

@end

void OrgGeogebraCommonKernelGeosGeoFunction_$4_init(OrgGeogebraCommonKernelGeosGeoFunction_$4 *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelGeosGeoFunction_$4 *new_OrgGeogebraCommonKernelGeosGeoFunction_$4_init() {
  OrgGeogebraCommonKernelGeosGeoFunction_$4 *self = [OrgGeogebraCommonKernelGeosGeoFunction_$4 alloc];
  OrgGeogebraCommonKernelGeosGeoFunction_$4_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoFunction_$4)

@implementation OrgGeogebraCommonKernelGeosGeoFunction_$5

- (jdouble)evaluateWithDouble:(jdouble)t {
  return [this$0_ evaluateWithDouble:t];
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoFunction:(OrgGeogebraCommonKernelGeosGeoFunction *)outer$ {
  OrgGeogebraCommonKernelGeosGeoFunction_$5_initWithOrgGeogebraCommonKernelGeosGeoFunction_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoFunction:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelGeosGeoFunction", "getRealRootFunctionY" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoFunction_$5 = { 2, "", "org.geogebra.common.kernel.geos", "GeoFunction", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoFunction_$5;
}

@end

void OrgGeogebraCommonKernelGeosGeoFunction_$5_initWithOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction_$5 *self, OrgGeogebraCommonKernelGeosGeoFunction *outer$) {
  OrgGeogebraCommonKernelGeosGeoFunction_$5_set_this$0_(self, outer$);
  NSObject_init(self);
}

OrgGeogebraCommonKernelGeosGeoFunction_$5 *new_OrgGeogebraCommonKernelGeosGeoFunction_$5_initWithOrgGeogebraCommonKernelGeosGeoFunction_(OrgGeogebraCommonKernelGeosGeoFunction *outer$) {
  OrgGeogebraCommonKernelGeosGeoFunction_$5 *self = [OrgGeogebraCommonKernelGeosGeoFunction_$5 alloc];
  OrgGeogebraCommonKernelGeosGeoFunction_$5_initWithOrgGeogebraCommonKernelGeosGeoFunction_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoFunction_$5)
