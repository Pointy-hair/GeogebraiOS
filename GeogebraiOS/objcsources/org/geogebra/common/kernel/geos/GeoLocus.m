//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/geos/GeoLocus.java
//


#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/MyPoint.h"
#include "org/geogebra/common/kernel/PathParameter.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLocus.h"
#include "org/geogebra/common/kernel/geos/GeoLocusND.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"

@interface OrgGeogebraCommonKernelGeosGeoLocus () {
 @public
  OrgGeogebraCommonKernelMatrixCoords *changingPoint_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoLocus, changingPoint_, OrgGeogebraCommonKernelMatrixCoords *)

@implementation OrgGeogebraCommonKernelGeosGeoLocus

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoLocus_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoLocus *)newGeoLocus {
  return [new_OrgGeogebraCommonKernelGeosGeoLocus_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
}

- (void)insertPointWithDouble:(jdouble)x
                   withDouble:(jdouble)y
                  withBoolean:(jboolean)lineTo {
  [((JavaUtilArrayList *) nil_chk(myPointList_)) addWithId:[new_OrgGeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(x, y, lineTo) autorelease]];
}

- (void)pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonKernelMatrixCoords *coords = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD2])) getInhomCoordsInSameDimension];
  [self setChangingPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
  OrgGeogebraCommonKernelMyPoint *closestPoint = [self getClosestPoint];
  OrgGeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  if (closestPoint != nil) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) setXWithDouble:closestPoint->x_];
    [coords setYWithDouble:closestPoint->y_];
    [coords setZWithDouble:1.0];
    ((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ = closestPointIndex_ + closestPointParameter_;
  }
  [P setCoords2DWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
  [P updateCoordsFrom2DWithBoolean:NO];
  [P updateCoords];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)newGeoSegment {
  OrgGeogebraCommonKernelGeosGeoSegment *segment = [new_OrgGeogebraCommonKernelGeosGeoSegment_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *p1 = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
  OrgGeogebraCommonKernelGeosGeoPoint *p2 = [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
  [segment setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:p1];
  [segment setEndPointWithOrgGeogebraCommonKernelGeosGeoPoint:p2];
  return segment;
}

- (void)setChangingPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonKernelGeosGeoLocus_set_changingPoint_(self, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD2])) getInhomCoordsInSameDimension]);
}

- (jdouble)changingPointDistanceWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  return [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(((OrgGeogebraCommonKernelGeosGeoSegment *) check_class_cast(segment, [OrgGeogebraCommonKernelGeosGeoSegment class])))) distanceWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(changingPoint_)) getX] withDouble:[changingPoint_ getY]];
}

- (jdouble)getChangingPointParameterWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  return [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(((OrgGeogebraCommonKernelGeosGeoSegment *) check_class_cast(segment, [OrgGeogebraCommonKernelGeosGeoSegment class])))) getParameterWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(changingPoint_)) getX] withDouble:[changingPoint_ getY]];
}

- (jboolean)hasLineOpacity {
  return YES;
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (void)dealloc {
  RELEASE_(changingPoint_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoLocus", NULL, 0x1, NULL, NULL },
    { "newGeoLocus", NULL, "Lorg.geogebra.common.kernel.geos.GeoLocus;", 0x4, NULL, NULL },
    { "insertPointWithDouble:withDouble:withBoolean:", "insertPoint", "V", 0x1, NULL, NULL },
    { "pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "newGeoSegment", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoSegmentND;", 0x4, NULL, NULL },
    { "setChangingPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "setChangingPoint", "V", 0x4, NULL, NULL },
    { "changingPointDistanceWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:", "changingPointDistance", "D", 0x4, NULL, NULL },
    { "getChangingPointParameterWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:", "getChangingPointParameter", "D", 0x4, NULL, NULL },
    { "hasLineOpacity", NULL, "Z", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "changingPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.MyPoint;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoLocus = { 2, "GeoLocus", "org.geogebra.common.kernel.geos", NULL, 0x1, 10, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "Lorg/geogebra/common/kernel/geos/GeoLocusND<Lorg/geogebra/common/kernel/MyPoint;>;" };
  return &_OrgGeogebraCommonKernelGeosGeoLocus;
}

@end

void OrgGeogebraCommonKernelGeosGeoLocus_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoLocus *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoLocusND_initWithOrgGeogebraCommonKernelConstruction_(self, c);
}

OrgGeogebraCommonKernelGeosGeoLocus *new_OrgGeogebraCommonKernelGeosGeoLocus_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoLocus *self = [OrgGeogebraCommonKernelGeosGeoLocus alloc];
  OrgGeogebraCommonKernelGeosGeoLocus_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoLocus)
