//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/geos/GeoCurveCartesian.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/DistanceFunction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/ParametricCurveDistanceFunction.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/PathMover.h"
#include "org/geogebra/common/kernel/PathMoverGeneric.h"
#include "org/geogebra/common/kernel/PathParameter.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoMacroInterface.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "org/geogebra/common/kernel/kernelND/GeoCurveCartesianND.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/optimization/ExtremumFinder.h"
#include "org/geogebra/common/kernel/roots/RealRootFunction.h"
#include "org/geogebra/common/kernel/roots/RealRootUtil.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/MyMath.h"

@interface OrgGeogebraCommonKernelGeosGeoCurveCartesian () {
 @public
  jboolean isClosedPath__;
  jboolean trace_;
}

- (void)mirrorWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phi;

- (void)pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                                                     withBoolean:(jboolean)changePoint;

- (jdouble)adjustRangeWithDouble:(jdouble)startValResult;

@end

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCurveCartesian_setFunctionXWithOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, OrgGeogebraCommonKernelArithmeticFunction *funX);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCurveCartesian_setFunctionYWithOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, OrgGeogebraCommonKernelArithmeticFunction *funY);

__attribute__((unused)) static id<OrgGeogebraCommonKernelRootsRealRootFunction> OrgGeogebraCommonKernelGeosGeoCurveCartesian_getRealRootFunctionX(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self);

__attribute__((unused)) static id<OrgGeogebraCommonKernelRootsRealRootFunction> OrgGeogebraCommonKernelGeosGeoCurveCartesian_getRealRootFunctionY(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCurveCartesian_translateWithDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, jdouble vx, jdouble vy);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCurveCartesian_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, id<OrgGeogebraCommonKernelArithmeticNumberValue> phi);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCurveCartesian_mirrorWithOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, id<OrgGeogebraCommonKernelArithmeticNumberValue> phi);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoCurveCartesian_pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, jboolean changePoint);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelGeosGeoCurveCartesian_adjustRangeWithDouble_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, jdouble startValResult);

@implementation OrgGeogebraCommonKernelGeosGeoCurveCartesian

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
              withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)fx
              withOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)fy {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(self, c, fx, fy);
  return self;
}

- (NSString *)translatedTypeString {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Curve"];
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_CURVE_CARTESIAN();
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)f {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelGeosGeoCurveCartesian_(self, f);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelGeosGeoCurveCartesian_(self) autorelease];
}

- (void)setFunctionXWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)funX {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_setFunctionXWithOrgGeogebraCommonKernelArithmeticFunction_(self, funX);
}

- (void)setFunctionYWithOrgGeogebraCommonKernelArithmeticFunction:(OrgGeogebraCommonKernelArithmeticFunction *)funY {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_setFunctionYWithOrgGeogebraCommonKernelArithmeticFunction_(self, funY);
}

- (void)replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([self getFunWithInt:0] != nil) {
    [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  if ([self getFunWithInt:1] != nil) {
    [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (void)setIntervalWithDouble:(jdouble)startParam
                   withDouble:(jdouble)endParam {
  [super setIntervalWithDouble:startParam withDouble:endParam];
  self->isClosedPath__ = (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) evaluateWithDouble:startParam], [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) evaluateWithDouble:endParam], OrgGeogebraCommonKernelKernel_MIN_PRECISION) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) evaluateWithDouble:startParam], [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) evaluateWithDouble:endParam], OrgGeogebraCommonKernelKernel_MIN_PRECISION));
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian *geoCurve = (OrgGeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoCurveCartesian class]);
  [self setFunWithInt:0 withOrgGeogebraCommonKernelArithmeticFunction:[new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelKernel_(IOSObjectArray_Get(nil_chk(((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(geoCurve))->fun_), 0), self->kernel_) autorelease]];
  [self setFunWithInt:1 withOrgGeogebraCommonKernelArithmeticFunction:[new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelKernel_(IOSObjectArray_Get(geoCurve->fun_, 1), self->kernel_) autorelease]];
  self->startParam_ = geoCurve->startParam_;
  self->endParam_ = geoCurve->endParam_;
  self->isDefined__ = geoCurve->isDefined__;
  if (((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->cons_ != self->cons_ && [self isAlgoMacroOutput]) {
    if (![geo isIndependent]) {
      id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface> algoMacro = (id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface>) check_protocol_cast([self getParentAlgorithm], @protocol(OrgGeogebraCommonKernelAlgosAlgoMacroInterface));
      [((id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface>) nil_chk(algoMacro)) initFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar:[self getFunWithInt:0]];
      [algoMacro initFunctionWithOrgGeogebraCommonKernelArithmeticFunctionNVar:[self getFunWithInt:1]];
    }
  }
  OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND_set_distFun_(self, nil);
}

- (void)setParametricDerivativeWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)curve {
  if ([((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve)) isDefined]) {
    [self setFunWithInt:0 withOrgGeogebraCommonKernelArithmeticFunction:IOSObjectArray_Get(nil_chk(curve->fun_), 0)];
    [self setFunWithInt:1 withOrgGeogebraCommonKernelArithmeticFunction:OrgGeogebraCommonKernelArithmeticFunction_getDerivativeQuotientWithOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(IOSObjectArray_Get(curve->fun_, 0), IOSObjectArray_Get(curve->fun_, 1))];
    self->isDefined__ = !([self getFunWithInt:0] == nil || [self getFunWithInt:1] == nil);
    if (self->isDefined__) [self setIntervalWithDouble:curve->startParam_ withDouble:curve->endParam_];
  }
  else {
    self->isDefined__ = NO;
  }
  OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND_set_distFun_(self, nil);
}

- (NSString *)getFunXWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)getFunYWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (id<OrgGeogebraCommonKernelRootsRealRootFunction>)getRealRootFunctionX {
  return OrgGeogebraCommonKernelGeosGeoCurveCartesian_getRealRootFunctionX(self);
}

- (id<OrgGeogebraCommonKernelRootsRealRootFunction>)getRealRootFunctionY {
  return OrgGeogebraCommonKernelGeosGeoCurveCartesian_getRealRootFunctionY(self);
}

- (void)translateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) translateYWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX]];
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) translateYWithDouble:[v getY]];
}

- (jboolean)isTranslateable {
  return YES;
}

- (jboolean)isMatrixTransformable {
  return YES;
}

- (void)translateWithDouble:(jdouble)vx
                 withDouble:(jdouble)vy {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_translateWithDouble_withDouble_(self, vx, vy);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phi
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonKernelMatrixCoords *P = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoords];
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_translateWithDouble_withDouble_(self, -[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getX], -[P getY]);
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_(self, phi);
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_translateWithDouble_withDouble_(self, [P getX], [P getY]);
}

- (void)mirrorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P {
  [self dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, -1.0) autorelease] withOrgGeogebraCommonKernelMatrixCoords:P];
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g1 {
  OrgGeogebraCommonKernelGeosGeoLine *g = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g1, [OrgGeogebraCommonKernelGeosGeoLine class]);
  jdouble qx, qy;
  if (JavaLangMath_absWithDouble_([((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g)) getX]) > JavaLangMath_absWithDouble_([g getY])) {
    qx = [g getZ] / [g getX];
    qy = 0.0;
  }
  else {
    qx = 0.0;
    qy = [g getZ] / [g getY];
  }
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_translateWithDouble_withDouble_(self, qx, qy);
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_mirrorWithOrgGeogebraCommonKernelArithmeticNumberValue_(self, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 2.0 * JavaLangMath_atan2WithDouble_withDouble_(-[g getX], [g getY])) autorelease]);
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_translateWithDouble_withDouble_(self, -qx, -qy);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phi {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_(self, phi);
}

- (void)dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)ratio
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_translateWithDouble_withDouble_(self, -[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getX], -[P getY]);
  OrgGeogebraCommonKernelArithmeticExpressionNode *exprX = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_]))) getExpression];
  OrgGeogebraCommonKernelArithmeticExpressionNode *exprY = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_]))) getExpression];
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ratio, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), exprX) autorelease]];
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ratio, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), exprY) autorelease]];
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_translateWithDouble_withDouble_(self, [P getX], [P getY]);
}

- (void)mirrorWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phi {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_mirrorWithOrgGeogebraCommonKernelArithmeticNumberValue_(self, phi);
}

- (JavaUtilArrayList *)getPointsOnCurveWithInt:(jint)n
                                    withDouble:(jdouble)startInterval
                                    withDouble:(jdouble)endInterval {
  JavaUtilArrayList *pointList = [new_JavaUtilArrayList_init() autorelease];
  jdouble step = (endInterval - startInterval) / (n + 1);
  for (jdouble i = 0, v = startInterval; i < n; i++, v += step) {
    IOSDoubleArray *point = [IOSDoubleArray arrayWithLength:2];
    *IOSDoubleArray_GetRef(point, 0) = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) evaluateWithDouble:v];
    *IOSDoubleArray_GetRef(point, 1) = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) evaluateWithDouble:v];
    [pointList addWithId:[new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self->cons_, IOSDoubleArray_Get(point, 0), IOSDoubleArray_Get(point, 1), 1) autorelease]];
  }
  return pointList;
}

- (void)matrixTransformWithDouble:(jdouble)a
                       withDouble:(jdouble)b
                       withDouble:(jdouble)c
                       withDouble:(jdouble)d {
  OrgGeogebraCommonKernelArithmeticMyDouble *ma = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, a) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble *mb = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, b) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble *mc = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, c) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble *md = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, d) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *exprX = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_]))) getExpression];
  OrgGeogebraCommonKernelArithmeticExpressionNode *exprY = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_]))) getExpression];
  OrgGeogebraCommonKernelArithmeticExpressionNode *transX = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exprX)) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:ma])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exprY)) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:mb]];
  OrgGeogebraCommonKernelArithmeticExpressionNode *transY = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([exprX multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:mc])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[exprY multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:md]];
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:transX];
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:transY];
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return [self isDefined];
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToString = [new_JavaLangStringBuilder_initWithInt_(80) autorelease];
  [sbToString setLengthWithInt:0];
  if ([self isLabelSet]) {
    [sbToString appendWithNSString:self->label_];
    [sbToString appendWithChar:':'];
  }
  [sbToString appendWithNSString:[self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString description];
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (self->isDefined__) {
    JavaLangStringBuilder *sbTemp = [new_JavaLangStringBuilder_initWithInt_(80) autorelease];
    if ([((OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType])) isEqual:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
      [sbTemp appendWithNSString:@"equation(plotparam(["];
      [sbTemp appendWithNSString:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      [sbTemp appendWithChar:','];
      [sbTemp appendWithNSString:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      [sbTemp appendWithNSString:@"],"];
      [sbTemp appendWithNSString:[((OrgGeogebraCommonKernelArithmeticFunctionVariable *) nil_chk([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) getFunctionVariable])) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_giacTemplate_()]];
      [sbTemp appendWithChar:','];
      [sbTemp appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:[self getMinParameter] withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_giacTemplate_()]];
      [sbTemp appendWithChar:','];
      [sbTemp appendWithNSString:[self->kernel_ formatWithDouble:[self getMaxParameter] withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_giacTemplate_()]];
      [sbTemp appendWithNSString:@"))"];
    }
    else {
      [sbTemp appendWithChar:'('];
      [sbTemp appendWithNSString:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      [sbTemp appendWithNSString:@", "];
      [sbTemp appendWithNSString:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
      [sbTemp appendWithChar:')'];
    }
    return [sbTemp description];
  }
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

- (NSString *)toSymbolicStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (self->isDefined__) {
    JavaLangStringBuilder *sbTemp = [new_JavaLangStringBuilder_initWithInt_(80) autorelease];
    [sbTemp setLengthWithInt:0];
    [sbTemp appendWithChar:'('];
    [sbTemp appendWithNSString:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sbTemp appendWithNSString:@", "];
    [sbTemp appendWithNSString:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sbTemp appendWithChar:')'];
    return [sbTemp description];
  }
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

- (void)pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonKernelPathParameter *pp = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPathParameter];
  jdouble t = [self getClosestParameterWithOrgGeogebraCommonKernelKernelNDGeoPointND:P withDouble:((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_];
  pp->t_ = t;
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self, P, NO);
}

- (jboolean)isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI
                                                       withDouble:(jdouble)eps {
  OrgGeogebraCommonKernelGeosGeoPoint *P = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(PI, [OrgGeogebraCommonKernelGeosGeoPoint class]);
  if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getPath] == self) return YES;
  OrgGeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  jdouble t = [self getClosestParameterWithOrgGeogebraCommonKernelKernelNDGeoPointND:P withDouble:((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_];
  jboolean onPath = JavaLangMath_absWithDouble_([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) evaluateWithDouble:t] - [P getInhomX]) <= eps && JavaLangMath_absWithDouble_([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) evaluateWithDouble:t] - [P getInhomY]) <= eps;
  return onPath;
}

- (void)pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self, PI, ![((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI]);
}

- (void)pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                                                     withBoolean:(jboolean)changePoint {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self, P, changePoint);
}

- (jdouble)getClosestParameterWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                                                                 withDouble:(jdouble)startValue {
  jdouble startVal = startValue;
  if (self->distFun_ == nil) OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND_setAndConsume_distFun_(self, new_OrgGeogebraCommonKernelParametricCurveDistanceFunction_initWithOrgGeogebraCommonKernelGeosParametricCurve_(self));
  [((id<OrgGeogebraCommonKernelDistanceFunction>) nil_chk(self->distFun_)) setDistantPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
  if ([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPath] == self) {
    OrgGeogebraCommonKernelPathParameter *pp = [P getPathParameter];
    jdouble pathParam = ((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_;
    if ([self->distFun_ evaluateWithDouble:pathParam] < OrgGeogebraCommonKernelKernel_MIN_PRECISION * OrgGeogebraCommonKernelKernel_MIN_PRECISION) return pathParam;
    if (JavaLangDouble_isNaNWithDouble_(startVal)) startVal = pathParam;
  }
  jdouble step = (self->endParam_ - self->startParam_) / OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND_CLOSEST_PARAMETER_SAMPLES;
  jdouble minVal = [self->distFun_ evaluateWithDouble:self->startParam_];
  jdouble minParam = self->startParam_;
  jdouble t = self->startParam_;
  for (jint i = 0; i < OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND_CLOSEST_PARAMETER_SAMPLES; i++) {
    t = t + step;
    jdouble ft = [self->distFun_ evaluateWithDouble:t];
    if (ft < minVal) {
      minVal = ft;
      minParam = t;
    }
  }
  if (minParam - step < [self getMinParameter] || minParam + step > [self getMaxParameter]) {
    return minParam;
  }
  jdouble left = minParam - step;
  jdouble right = minParam + step;
  OrgGeogebraCommonKernelOptimizationExtremumFinder *extFinder = [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getExtremumFinder];
  jdouble sampleResult = [((OrgGeogebraCommonKernelOptimizationExtremumFinder *) nil_chk(extFinder)) findMinimumWithDouble:left withDouble:right withOrgGeogebraCommonKernelRootsRealRootFunction:self->distFun_ withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION];
  sampleResult = OrgGeogebraCommonKernelGeosGeoCurveCartesian_adjustRangeWithDouble_(self, sampleResult);
  if (!JavaLangDouble_isNaNWithDouble_(startVal) && (startVal < left || right < startVal)) {
    left = startVal - step;
    right = startVal + step;
    jdouble startValResult = [extFinder findMinimumWithDouble:left withDouble:right withOrgGeogebraCommonKernelRootsRealRootFunction:self->distFun_ withDouble:OrgGeogebraCommonKernelKernel_MIN_PRECISION];
    startValResult = OrgGeogebraCommonKernelGeosGeoCurveCartesian_adjustRangeWithDouble_(self, startValResult);
    if ([self->distFun_ evaluateWithDouble:startValResult] < [self->distFun_ evaluateWithDouble:sampleResult] + OrgGeogebraCommonKernelKernel_MIN_PRECISION / 2) {
      return startValResult;
    }
  }
  return sampleResult;
}

- (jdouble)adjustRangeWithDouble:(jdouble)startValResult {
  return OrgGeogebraCommonKernelGeosGeoCurveCartesian_adjustRangeWithDouble_(self, startValResult);
}

- (id<OrgGeogebraCommonKernelPathMover>)createPathMover {
  return [new_OrgGeogebraCommonKernelPathMoverGeneric_initWithOrgGeogebraCommonKernelPath_(self) autorelease];
}

- (jboolean)isClosedPath {
  return self->isClosedPath__;
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)isTraceable {
  return YES;
}

- (jboolean)getTrace {
  return self->trace_;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (void)evaluateCurveWithDouble:(jdouble)paramVal
                withDoubleArray:(IOSDoubleArray *)outArg {
  *IOSDoubleArray_GetRef(nil_chk(outArg), 0) = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) evaluateWithDouble:paramVal];
  *IOSDoubleArray_GetRef(outArg, 1) = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) evaluateWithDouble:paramVal];
}

- (OrgGeogebraCommonKernelGeosGeoVec2D *)evaluateCurveWithDouble:(jdouble)t {
  return [new_OrgGeogebraCommonKernelGeosGeoVec2D_initWithOrgGeogebraCommonKernelKernel_withDouble_withDouble_(self->kernel_, [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) evaluateWithDouble:t], [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) evaluateWithDouble:t]) autorelease];
}

- (jdouble)evaluateCurvatureWithDouble:(jdouble)t {
  OrgGeogebraCommonKernelArithmeticFunction *f1X, *f1Y, *f2X, *f2Y;
  f1X = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) getDerivativeWithInt:1 withBoolean:YES];
  f1Y = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) getDerivativeWithInt:1 withBoolean:YES];
  f2X = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) getDerivativeWithInt:2 withBoolean:YES];
  f2Y = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) getDerivativeWithInt:2 withBoolean:YES];
  if (f1X == nil || f1Y == nil || f2X == nil || f2Y == nil) return JavaLangDouble_NaN;
  IOSDoubleArray *f1eval = [IOSDoubleArray arrayWithLength:2];
  IOSDoubleArray *f2eval = [IOSDoubleArray arrayWithLength:2];
  *IOSDoubleArray_GetRef(f1eval, 0) = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f1X)) evaluateWithDouble:t];
  *IOSDoubleArray_GetRef(f1eval, 1) = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f1Y)) evaluateWithDouble:t];
  *IOSDoubleArray_GetRef(f2eval, 0) = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f2X)) evaluateWithDouble:t];
  *IOSDoubleArray_GetRef(f2eval, 1) = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(f2Y)) evaluateWithDouble:t];
  jdouble t1 = JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(f1eval, 0) * IOSDoubleArray_Get(f1eval, 0) + IOSDoubleArray_Get(f1eval, 1) * IOSDoubleArray_Get(f1eval, 1));
  jdouble t3 = t1 * t1 * t1;
  return (IOSDoubleArray_Get(f1eval, 0) * IOSDoubleArray_Get(f2eval, 1) - IOSDoubleArray_Get(f2eval, 0) * IOSDoubleArray_Get(f1eval, 1)) / t3;
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (jboolean)isFunctionInX {
  return NO;
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return NO;
}

- (jboolean)isFillable {
  return YES;
}

- (jboolean)isInverseFillable {
  return [self isFillable];
}

- (void)mirrorWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c {
  if ([((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(c)) getType] == OrgGeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE) {
    jdouble r = IOSDoubleArray_Get(nil_chk([c getHalfAxes]), 0);
    OrgGeogebraCommonKernelGeosGeoVec2D *midpoint = [c getTranslationVector];
    jdouble a = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(midpoint)) getX];
    jdouble b = [midpoint getY];
    OrgGeogebraCommonKernelGeosGeoCurveCartesian_translateWithDouble_withDouble_(self, -a, -b);
    OrgGeogebraCommonKernelArithmeticExpressionNode *exprX = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_]))) getExpression];
    OrgGeogebraCommonKernelArithmeticExpressionNode *exprY = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_]))) getExpression];
    OrgGeogebraCommonKernelArithmeticMyDouble *d2 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, 2) autorelease];
    OrgGeogebraCommonKernelArithmeticExpressionNode *sf = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, r * r) autorelease], OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exprX)) powerWithOrgGeogebraCommonKernelArithmeticExpressionValue:d2])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exprY)) powerWithOrgGeogebraCommonKernelArithmeticExpressionValue:d2]]) autorelease];
    OrgGeogebraCommonKernelArithmeticExpressionNode *transX = [exprX multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:sf];
    OrgGeogebraCommonKernelArithmeticExpressionNode *transY = [exprY multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:sf];
    [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:transX];
    [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:transY];
    OrgGeogebraCommonKernelGeosGeoCurveCartesian_translateWithDouble_withDouble_(self, a, b);
  }
  else {
    [self setUndefined];
  }
}

- (jdouble)distanceWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p {
  jdouble t = [self getClosestParameterWithOrgGeogebraCommonKernelKernelNDGeoPointND:p withDouble:0];
  return OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) evaluateWithDouble:t] - [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) getX], [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) evaluateWithDouble:t] - [p getY]);
}

- (jdouble)distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) isGeoElement3D]) {
    return [self distanceWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoPoint class])];
  }
  jdouble t = [self getClosestParameterWithOrgGeogebraCommonKernelKernelNDGeoPointND:p withDouble:0];
  OrgGeogebraCommonKernelMatrixCoords *coords = [p getInhomCoordsInD3];
  return OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_withDouble_([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) evaluateWithDouble:t] - [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX], [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) evaluateWithDouble:t] - [coords getY], [coords getZ]);
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  OrgGeogebraCommonKernelArithmeticMyDouble *ma00 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, a00) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble *ma01 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, a01) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble *ma02 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, a02) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble *ma10 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, a10) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble *ma11 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, a11) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble *ma12 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, a12) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble *ma20 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, a20) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble *ma21 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, a21) autorelease];
  OrgGeogebraCommonKernelArithmeticMyDouble *ma22 = [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, a22) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *exprX = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_]))) getExpression];
  OrgGeogebraCommonKernelArithmeticExpressionNode *exprY = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk(([((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) deepCopyWithOrgGeogebraCommonKernelKernel:self->kernel_]))) getExpression];
  OrgGeogebraCommonKernelArithmeticExpressionNode *transX = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exprX)) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:ma00])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exprY)) multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:ma01]])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:ma02];
  OrgGeogebraCommonKernelArithmeticExpressionNode *transY = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([exprX multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:ma10])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[exprY multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:ma11]])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:ma12];
  OrgGeogebraCommonKernelArithmeticExpressionNode *transZ = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk([exprX multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:ma20])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[exprY multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:ma21]])) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:ma22];
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, transX, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), transZ) autorelease]];
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) setExpressionWithOrgGeogebraCommonKernelArithmeticExpressionNode:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, transY, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), transZ) autorelease]];
}

- (void)setFromPolyLineWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                                                              withBoolean:(jboolean)repeatLast {
  jdouble coef = 0, coefY = 0;
  jdouble cumulative = 0, cumulativeY = 0;
  OrgGeogebraCommonKernelArithmeticExpressionNode *enx = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(points), 0))) getInhomCoordsInD2])) getX]) autorelease]) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *eny = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, 0))) getInhomCoordsInD2])) getY]) autorelease]) autorelease];
  OrgGeogebraCommonKernelArithmeticFunctionVariable *fv = [new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"t") autorelease];
  jdouble sum = 0;
  jdouble sumY = 0;
  jint limit = repeatLast ? points->size_ + 1 : points->size_;
  jint nonzeroSegments = 0;
  for (jint i = 1; i < limit; i++) {
    jint pointIndex = i >= points->size_ ? 0 : i;
    OrgGeogebraCommonKernelArithmeticExpressionNode *greater = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, fv, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, nonzeroSegments) autorelease]) autorelease], OrgGeogebraCommonPluginOperationEnum_get_ABS(), nil) autorelease];
    OrgGeogebraCommonKernelMatrixCoords *c1 = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, pointIndex))) getInhomCoordsInD2];
    OrgGeogebraCommonKernelMatrixCoords *c2 = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i - 1))) getInhomCoordsInD2];
    if ([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(c1)) isEqualWithOrgGeogebraCommonKernelMatrixCoords:c2]) continue;
    coef = 0.5 * [c1 getX] - 0.5 * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(c2)) getX] - cumulative;
    coefY = 0.5 * [c1 getY] - 0.5 * [c2 getY] - cumulativeY;
    sum += coef * nonzeroSegments;
    sumY += coefY * nonzeroSegments;
    nonzeroSegments++;
    cumulative += coef;
    cumulativeY += coefY;
    enx = [enx plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[greater multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, coef) autorelease]]];
    eny = [eny plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[greater multiplyWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, coefY) autorelease]]];
  }
  enx = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enx)) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, fv, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, cumulative) autorelease]) autorelease]];
  eny = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(eny)) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, fv, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, cumulativeY) autorelease]) autorelease]];
  enx = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enx)) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, -sum) autorelease]];
  eny = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(eny)) plusWithOrgGeogebraCommonKernelArithmeticExpressionValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(self->kernel_, -sumY) autorelease]];
  OrgGeogebraCommonKernelArithmeticFunction *xFun = [new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(enx, fv) autorelease];
  OrgGeogebraCommonKernelArithmeticFunction *yFun = [new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(eny, fv) autorelease];
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_setFunctionYWithOrgGeogebraCommonKernelArithmeticFunction_(self, yFun);
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_setFunctionXWithOrgGeogebraCommonKernelArithmeticFunction_(self, xFun);
  [self setIntervalWithDouble:0 withDouble:nonzeroSegments];
}

- (jboolean)isLaTeXDrawableGeo {
  return YES;
}

- (OrgGeogebraCommonKernelArithmeticFunction *)getFunX {
  return [self getFunWithInt:0];
}

- (OrgGeogebraCommonKernelArithmeticFunction *)getFunY {
  return [self getFunWithInt:1];
}

- (jboolean)hasDrawable3D {
  return YES;
}

- (IOSDoubleArray *)newDoubleArray {
  return [IOSDoubleArray arrayWithLength:2];
}

- (IOSDoubleArray *)getDefinedIntervalWithDouble:(jdouble)a
                                      withDouble:(jdouble)b {
  IOSDoubleArray *intervalX = OrgGeogebraCommonKernelRootsRealRootUtil_getDefinedIntervalWithOrgGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoCurveCartesian_getRealRootFunctionX(self), a, b);
  IOSDoubleArray *intervalY = OrgGeogebraCommonKernelRootsRealRootUtil_getDefinedIntervalWithOrgGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoCurveCartesian_getRealRootFunctionY(self), a, b);
  if (IOSDoubleArray_Get(nil_chk(intervalX), 0) < IOSDoubleArray_Get(nil_chk(intervalY), 0)) {
    *IOSDoubleArray_GetRef(intervalX, 0) = IOSDoubleArray_Get(intervalY, 0);
  }
  if (IOSDoubleArray_Get(intervalX, 1) > IOSDoubleArray_Get(intervalY, 1)) {
    *IOSDoubleArray_GetRef(intervalX, 1) = IOSDoubleArray_Get(intervalY, 1);
  }
  return intervalX;
}

- (jdouble)distanceMaxWithDoubleArray:(IOSDoubleArray *)p1
                      withDoubleArray:(IOSDoubleArray *)p2 {
  return JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(p1), 0) - IOSDoubleArray_Get(nil_chk(p2), 0)), JavaLangMath_absWithDouble_(IOSDoubleArray_Get(p1, 1) - IOSDoubleArray_Get(p2, 1)));
}

- (OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND *)newGeoCurveCartesianWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  return [new_OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_(cons) autorelease];
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoCurveCartesian", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelArithmeticFunction:withOrgGeogebraCommonKernelArithmeticFunction:", "GeoCurveCartesian", NULL, 0x1, NULL, NULL },
    { "translatedTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:", "GeoCurveCartesian", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setFunctionXWithOrgGeogebraCommonKernelArithmeticFunction:", "setFunctionX", "V", 0x11, NULL, NULL },
    { "setFunctionYWithOrgGeogebraCommonKernelArithmeticFunction:", "setFunctionY", "V", 0x11, NULL, NULL },
    { "replaceChildrenByValuesWithOrgGeogebraCommonKernelGeosGeoElement:", "replaceChildrenByValues", "V", 0x1, NULL, NULL },
    { "setIntervalWithDouble:withDouble:", "setInterval", "V", 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setParametricDerivativeWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:", "setParametricDerivative", "V", 0x1, NULL, NULL },
    { "getFunXWithOrgGeogebraCommonKernelStringTemplate:", "getFunX", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getFunYWithOrgGeogebraCommonKernelStringTemplate:", "getFunY", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getRealRootFunctionX", NULL, "Lorg.geogebra.common.kernel.roots.RealRootFunction;", 0x11, NULL, NULL },
    { "getRealRootFunctionY", NULL, "Lorg.geogebra.common.kernel.roots.RealRootFunction;", 0x11, NULL, NULL },
    { "translateWithOrgGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x11, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x11, NULL, NULL },
    { "isMatrixTransformable", NULL, "Z", 0x11, NULL, NULL },
    { "translateWithDouble:withDouble:", "translate", "V", 0x11, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x11, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x11, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x11, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x11, NULL, NULL },
    { "dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelArithmeticNumberValue:", "mirror", "V", 0x2, NULL, NULL },
    { "getPointsOnCurveWithInt:withDouble:withDouble:", "getPointsOnCurve", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toSymbolicStringWithOrgGeogebraCommonKernelStringTemplate:", "toSymbolicString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:withBoolean:", "pathChanged", "V", 0x2, NULL, NULL },
    { "getClosestParameterWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "getClosestParameter", "D", 0x1, NULL, NULL },
    { "adjustRangeWithDouble:", "adjustRange", "D", 0x2, NULL, NULL },
    { "createPathMover", NULL, "Lorg.geogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x11, NULL, NULL },
    { "getTrace", NULL, "Z", 0x11, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "evaluateCurveWithDouble:withDoubleArray:", "evaluateCurve", "V", 0x1, NULL, NULL },
    { "evaluateCurveWithDouble:", "evaluateCurve", "Lorg.geogebra.common.kernel.geos.GeoVec2D;", 0x1, NULL, NULL },
    { "evaluateCurvatureWithDouble:", "evaluateCurvature", "D", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x1, NULL, NULL },
    { "isFunctionInX", NULL, "Z", 0x11, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x11, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "isInverseFillable", NULL, "Z", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelGeosGeoConic:", "mirror", "V", 0x11, NULL, NULL },
    { "distanceWithOrgGeogebraCommonKernelGeosGeoPoint:", "distance", "D", 0x1, NULL, NULL },
    { "distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "distance", "D", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "setFromPolyLineWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:withBoolean:", "setFromPolyLine", "V", 0x1, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "getFunX", NULL, "Lorg.geogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "getFunY", NULL, "Lorg.geogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "newDoubleArray", NULL, "[D", 0x1, NULL, NULL },
    { "getDefinedIntervalWithDouble:withDouble:", "getDefinedInterval", "[D", 0x1, NULL, NULL },
    { "distanceMaxWithDoubleArray:withDoubleArray:", "distanceMax", "D", 0x1, NULL, NULL },
    { "newGeoCurveCartesianWithOrgGeogebraCommonKernelConstruction:", "newGeoCurveCartesian", "Lorg.geogebra.common.kernel.kernelND.GeoCurveCartesianND;", 0x4, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isClosedPath__", "isClosedPath", 0x2, "Z", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoCurveCartesian = { 2, "GeoCurveCartesian", "org.geogebra.common.kernel.geos", NULL, 0x1, 67, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoCurveCartesian;
}

@end

void OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND_initWithOrgGeogebraCommonKernelConstruction_withInt_(self, c, 2);
  self->trace_ = NO;
}

OrgGeogebraCommonKernelGeosGeoCurveCartesian *new_OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian *self = [OrgGeogebraCommonKernelGeosGeoCurveCartesian alloc];
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelArithmeticFunction *fx, OrgGeogebraCommonKernelArithmeticFunction *fy) {
  OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND_initWithOrgGeogebraCommonKernelConstruction_withInt_(self, c, 2);
  self->trace_ = NO;
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_setFunctionXWithOrgGeogebraCommonKernelArithmeticFunction_(self, fx);
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_setFunctionYWithOrgGeogebraCommonKernelArithmeticFunction_(self, fy);
}

OrgGeogebraCommonKernelGeosGeoCurveCartesian *new_OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelArithmeticFunction *fx, OrgGeogebraCommonKernelArithmeticFunction *fy) {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian *self = [OrgGeogebraCommonKernelGeosGeoCurveCartesian alloc];
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticFunction_withOrgGeogebraCommonKernelArithmeticFunction_(self, c, fx, fy);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelGeosGeoCurveCartesian_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, OrgGeogebraCommonKernelGeosGeoCurveCartesian *f) {
  OrgGeogebraCommonKernelKernelNDGeoCurveCartesianND_initWithOrgGeogebraCommonKernelConstruction_withInt_(self, ((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(f))->cons_, 2);
  self->trace_ = NO;
  [self setWithOrgGeogebraCommonKernelGeosGeoElement:f];
}

OrgGeogebraCommonKernelGeosGeoCurveCartesian *new_OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelGeosGeoCurveCartesian_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *f) {
  OrgGeogebraCommonKernelGeosGeoCurveCartesian *self = [OrgGeogebraCommonKernelGeosGeoCurveCartesian alloc];
  OrgGeogebraCommonKernelGeosGeoCurveCartesian_initWithOrgGeogebraCommonKernelGeosGeoCurveCartesian_(self, f);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoCurveCartesian_setFunctionXWithOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, OrgGeogebraCommonKernelArithmeticFunction *funX) {
  [self setFunWithInt:0 withOrgGeogebraCommonKernelArithmeticFunction:funX];
}

void OrgGeogebraCommonKernelGeosGeoCurveCartesian_setFunctionYWithOrgGeogebraCommonKernelArithmeticFunction_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, OrgGeogebraCommonKernelArithmeticFunction *funY) {
  [self setFunWithInt:1 withOrgGeogebraCommonKernelArithmeticFunction:funY];
}

id<OrgGeogebraCommonKernelRootsRealRootFunction> OrgGeogebraCommonKernelGeosGeoCurveCartesian_getRealRootFunctionX(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self) {
  return [self getFunWithInt:0];
}

id<OrgGeogebraCommonKernelRootsRealRootFunction> OrgGeogebraCommonKernelGeosGeoCurveCartesian_getRealRootFunctionY(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self) {
  return [self getFunWithInt:1];
}

void OrgGeogebraCommonKernelGeosGeoCurveCartesian_translateWithDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, jdouble vx, jdouble vy) {
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) translateYWithDouble:vx];
  [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) translateYWithDouble:vy];
}

void OrgGeogebraCommonKernelGeosGeoCurveCartesian_rotateWithOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, id<OrgGeogebraCommonKernelArithmeticNumberValue> phi) {
  jdouble cosPhi = JavaLangMath_cosWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(phi)) getDouble]);
  jdouble sinPhi = JavaLangMath_sinWithDouble_([phi getDouble]);
  [self matrixTransformWithDouble:cosPhi withDouble:-sinPhi withDouble:sinPhi withDouble:cosPhi];
}

void OrgGeogebraCommonKernelGeosGeoCurveCartesian_mirrorWithOrgGeogebraCommonKernelArithmeticNumberValue_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, id<OrgGeogebraCommonKernelArithmeticNumberValue> phi) {
  jdouble cosPhi = JavaLangMath_cosWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(phi)) getDouble]);
  jdouble sinPhi = JavaLangMath_sinWithDouble_([phi getDouble]);
  [self matrixTransformWithDouble:cosPhi withDouble:sinPhi withDouble:sinPhi withDouble:-cosPhi];
}

void OrgGeogebraCommonKernelGeosGeoCurveCartesian_pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P, jboolean changePoint) {
  if (changePoint) {
    [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  OrgGeogebraCommonKernelPathParameter *pp = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPathParameter];
  if (((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ < self->startParam_) pp->t_ = self->startParam_;
  else if (pp->t_ > self->endParam_) pp->t_ = self->endParam_;
  [P setCoords2DWithDouble:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) evaluateWithDouble:pp->t_] withDouble:[((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) evaluateWithDouble:pp->t_] withDouble:1];
  [P updateCoordsFrom2DWithBoolean:NO withOrgGeogebraCommonKernelMatrixCoordSys:nil];
}

jdouble OrgGeogebraCommonKernelGeosGeoCurveCartesian_adjustRangeWithDouble_(OrgGeogebraCommonKernelGeosGeoCurveCartesian *self, jdouble startValResult) {
  if (startValResult < self->startParam_) {
    return startValResult + (self->endParam_ - self->startParam_);
  }
  if (startValResult > self->endParam_) {
    return startValResult - (self->endParam_ - self->startParam_);
  }
  return startValResult;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoCurveCartesian)
