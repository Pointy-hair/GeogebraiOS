//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/geos/GeoButton.java
//


#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/awt/GFont.h"
#include "org/geogebra/common/awt/MyImage.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/geos/GeoButton.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoElementGraphicsAdapter.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonKernelGeosGeoButton () {
 @public
  jdouble fontSizeD_;
  jint fontStyle_;
  jboolean serifFont_;
  jboolean fixedSize_;
  jint width_;
  jint height_;
  id<OrgGeogebraCommonKernelGeosGeoButton_Observer> observer_;
}

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoButton, observer_, id<OrgGeogebraCommonKernelGeosGeoButton_Observer>)

@interface OrgGeogebraCommonKernelGeosGeoButton_Observer : NSObject
@end

@implementation OrgGeogebraCommonKernelGeosGeoButton

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                    withInt:(jint)labelOffsetX
                                                    withInt:(jint)labelOffsetY {
  OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(self, cons, labelOffsetX, labelOffsetY);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                 withDouble:(jdouble)size {
  OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self, cons, size);
  return self;
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_BUTTON_ACTION;
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_BUTTON();
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(cons_, labelOffsetX_, labelOffsetY_) autorelease];
}

- (jboolean)isGeoButton {
  return YES;
}

- (jboolean)showInEuclidianView {
  return YES;
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoButton]) return;
  [self setCaptionWithNSString:[geo getRawCaption]];
}

- (void)setUndefined {
}

- (jboolean)isDefined {
  return YES;
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return @"";
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return label_;
}

- (jdouble)getRealWorldLocX {
  return 0;
}

- (jdouble)getRealWorldLocY {
  return 0;
}

- (jboolean)isAbsoluteScreenLocActive {
  return YES;
}

- (jboolean)isAbsoluteScreenLocateable {
  return YES;
}

- (void)setAbsoluteScreenLocWithInt:(jint)x
                            withInt:(jint)y {
  labelOffsetX_ = x;
  labelOffsetY_ = y;
}

- (jint)getAbsoluteScreenLocX {
  return labelOffsetX_;
}

- (jint)getAbsoluteScreenLocY {
  return labelOffsetY_;
}

- (void)setAbsoluteScreenLocActiveWithBoolean:(jboolean)flag {
}

- (void)setRealWorldLocWithDouble:(jdouble)x
                       withDouble:(jdouble)y {
}

- (jboolean)isTextField {
  return NO;
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return NO;
}

- (jboolean)isLabelValueShowable {
  return NO;
}

- (jdouble)getFontSizeMultiplier {
  return fontSizeD_;
}

- (void)setFontSizeMultiplierWithDouble:(jdouble)d {
  fontSizeD_ = d;
}

- (jint)getFontStyle {
  return fontStyle_;
}

- (void)setFontStyleWithInt:(jint)fontStyle {
  self->fontStyle_ = fontStyle;
}

- (jint)getPrintDecimals {
  return 0;
}

- (jint)getPrintFigures {
  return 0;
}

- (void)setPrintDecimalsWithInt:(jint)printDecimals
                    withBoolean:(jboolean)update {
}

- (void)setPrintFiguresWithInt:(jint)printFigures
                   withBoolean:(jboolean)update {
}

- (jboolean)isSerifFont {
  return serifFont_;
}

- (void)setSerifFontWithBoolean:(jboolean)serifFont {
  self->serifFont_ = serifFont;
}

- (jboolean)useSignificantFigures {
  return NO;
}

- (jboolean)justFontSize {
  return YES;
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  OrgGeogebraCommonKernelGeosGeoText_appendFontTagWithJavaLangStringBuilder_withBoolean_withDouble_withInt_withBoolean_withOrgGeogebraCommonMainApp_(sb, serifFont_, fontSizeD_, fontStyle_, NO, [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication]);
  if ([self getFillImage] != nil) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<file name=\""];
    [sb appendWithNSString:OrgGeogebraCommonUtilStringUtil_encodeXMLWithNSString_([((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([self getGraphicsAdapter])) getImageFileName])];
    [sb appendWithNSString:@"\"/>\n"];
  }
  if ([self isFixedSize]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("$I$I$", @"\t<dimensions width=\"", width_, @"\" height=\"", height_, @"\" />\n")];
  }
}

- (jboolean)hasBackgroundColor {
  return YES;
}

- (jboolean)isFillable {
  return YES;
}

- (OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)getFillType {
  return OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_IMAGE();
}

- (jboolean)isFurniture {
  return YES;
}

- (jboolean)isPinnable {
  return NO;
}

- (jboolean)isFixedSize {
  return fixedSize_;
}

- (void)setFixedSizeWithBoolean:(jboolean)fixedSize {
  self->fixedSize_ = fixedSize;
  if (observer_ != nil) {
    [observer_ notifySizeChanged];
  }
}

- (jint)getWidth {
  return width_;
}

- (void)setWidthWithInt:(jint)width {
  self->width_ = width;
}

- (jint)getHeight {
  return height_;
}

- (void)setHeightWithInt:(jint)height {
  self->height_ = height;
}

- (void)setObserverWithOrgGeogebraCommonKernelGeosGeoButton_Observer:(id<OrgGeogebraCommonKernelGeosGeoButton_Observer>)observer {
  OrgGeogebraCommonKernelGeosGeoButton_set_observer_(self, observer);
}

- (jboolean)isLaTeXTextCommand {
  return NO;
}

+ (OrgGeogebraCommonKernelGeosGeoButton *)getNewButtonWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  return OrgGeogebraCommonKernelGeosGeoButton_getNewButtonWithOrgGeogebraCommonKernelConstruction_(cons);
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (void)dealloc {
  RELEASE_(observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoButton", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withInt:withInt:", "GeoButton", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withDouble:", "GeoButton", NULL, 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isGeoButton", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x11, NULL, NULL },
    { "isDefined", NULL, "Z", 0x11, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getRealWorldLocX", NULL, "D", 0x1, NULL, NULL },
    { "getRealWorldLocY", NULL, "D", 0x1, NULL, NULL },
    { "isAbsoluteScreenLocActive", NULL, "Z", 0x1, NULL, NULL },
    { "isAbsoluteScreenLocateable", NULL, "Z", 0x1, NULL, NULL },
    { "setAbsoluteScreenLocWithInt:withInt:", "setAbsoluteScreenLoc", "V", 0x1, NULL, NULL },
    { "getAbsoluteScreenLocX", NULL, "I", 0x1, NULL, NULL },
    { "getAbsoluteScreenLocY", NULL, "I", 0x1, NULL, NULL },
    { "setAbsoluteScreenLocActiveWithBoolean:", "setAbsoluteScreenLocActive", "V", 0x1, NULL, NULL },
    { "setRealWorldLocWithDouble:withDouble:", "setRealWorldLoc", "V", 0x1, NULL, NULL },
    { "isTextField", NULL, "Z", 0x1, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x11, NULL, NULL },
    { "isLabelValueShowable", NULL, "Z", 0x11, NULL, NULL },
    { "getFontSizeMultiplier", NULL, "D", 0x1, NULL, NULL },
    { "setFontSizeMultiplierWithDouble:", "setFontSizeMultiplier", "V", 0x1, NULL, NULL },
    { "getFontStyle", NULL, "I", 0x1, NULL, NULL },
    { "setFontStyleWithInt:", "setFontStyle", "V", 0x1, NULL, NULL },
    { "getPrintDecimals", NULL, "I", 0x1, NULL, NULL },
    { "getPrintFigures", NULL, "I", 0x1, NULL, NULL },
    { "setPrintDecimalsWithInt:withBoolean:", "setPrintDecimals", "V", 0x1, NULL, NULL },
    { "setPrintFiguresWithInt:withBoolean:", "setPrintFigures", "V", 0x1, NULL, NULL },
    { "isSerifFont", NULL, "Z", 0x1, NULL, NULL },
    { "setSerifFontWithBoolean:", "setSerifFont", "V", 0x1, NULL, NULL },
    { "useSignificantFigures", NULL, "Z", 0x1, NULL, NULL },
    { "justFontSize", NULL, "Z", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "hasBackgroundColor", NULL, "Z", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "getFillType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", 0x1, NULL, NULL },
    { "isFurniture", NULL, "Z", 0x1, NULL, NULL },
    { "isPinnable", NULL, "Z", 0x1, NULL, NULL },
    { "isFixedSize", NULL, "Z", 0x1, NULL, NULL },
    { "setFixedSizeWithBoolean:", "setFixedSize", "V", 0x1, NULL, NULL },
    { "getWidth", NULL, "I", 0x1, NULL, NULL },
    { "setWidthWithInt:", "setWidth", "V", 0x1, NULL, NULL },
    { "getHeight", NULL, "I", 0x1, NULL, NULL },
    { "setHeightWithInt:", "setHeight", "V", 0x1, NULL, NULL },
    { "setObserverWithOrgGeogebraCommonKernelGeosGeoButton_Observer:", "setObserver", "V", 0x1, NULL, NULL },
    { "isLaTeXTextCommand", NULL, "Z", 0x1, NULL, NULL },
    { "getNewButtonWithOrgGeogebraCommonKernelConstruction:", "getNewButton", "Lorg.geogebra.common.kernel.geos.GeoButton;", 0x9, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fontSizeD_", NULL, 0x2, "D", NULL, NULL,  },
    { "fontStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "serifFont_", NULL, 0x2, "Z", NULL, NULL,  },
    { "fixedSize_", NULL, 0x2, "Z", NULL, NULL,  },
    { "width_", NULL, 0x2, "I", NULL, NULL,  },
    { "height_", NULL, 0x2, "I", NULL, NULL,  },
    { "observer_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoButton$Observer;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.geos.GeoButton$Observer;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoButton = { 2, "GeoButton", "org.geogebra.common.kernel.geos", NULL, 0x1, 54, methods, 7, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoButton;
}

@end

void OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoButton *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->fontSizeD_ = 1;
  self->fontStyle_ = OrgGeogebraCommonAwtGFont_PLAIN;
  self->serifFont_ = NO;
  self->fixedSize_ = NO;
  self->width_ = 40;
  self->height_ = 30;
  [self setConstructionDefaults];
  [self setEuclidianVisibleWithBoolean:YES];
  [self setAuxiliaryObjectWithBoolean:YES];
}

OrgGeogebraCommonKernelGeosGeoButton *new_OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoButton *self = [OrgGeogebraCommonKernelGeosGeoButton alloc];
  OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(OrgGeogebraCommonKernelGeosGeoButton *self, OrgGeogebraCommonKernelConstruction *cons, jint labelOffsetX, jint labelOffsetY) {
  OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->labelOffsetX_ = labelOffsetX;
  self->labelOffsetY_ = labelOffsetY;
}

OrgGeogebraCommonKernelGeosGeoButton *new_OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(OrgGeogebraCommonKernelConstruction *cons, jint labelOffsetX, jint labelOffsetY) {
  OrgGeogebraCommonKernelGeosGeoButton *self = [OrgGeogebraCommonKernelGeosGeoButton alloc];
  OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(self, cons, labelOffsetX, labelOffsetY);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_withDouble_(OrgGeogebraCommonKernelGeosGeoButton *self, OrgGeogebraCommonKernelConstruction *cons, jdouble size) {
  OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->fontSizeD_ = size;
}

OrgGeogebraCommonKernelGeosGeoButton *new_OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_withDouble_(OrgGeogebraCommonKernelConstruction *cons, jdouble size) {
  OrgGeogebraCommonKernelGeosGeoButton *self = [OrgGeogebraCommonKernelGeosGeoButton alloc];
  OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self, cons, size);
  return self;
}

OrgGeogebraCommonKernelGeosGeoButton *OrgGeogebraCommonKernelGeosGeoButton_getNewButtonWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelGeosGeoButton_initialize();
  return [new_OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons, OrgGeogebraCommonKernelConstructionDefaults_DEFAULT_BUTTON_SIZE) autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoButton)

@implementation OrgGeogebraCommonKernelGeosGeoButton_Observer

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "notifySizeChanged", NULL, "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoButton_Observer = { 2, "Observer", "org.geogebra.common.kernel.geos", "GeoButton", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoButton_Observer;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoButton_Observer)
