//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/geos/GeoTextField.java
//


#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/euclidian/draw/DrawTextField.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/factories/SwingFactory.h"
#include "org/geogebra/common/gui/inputfield/AutoCompleteTextField.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoPointInRegion.h"
#include "org/geogebra/common/kernel/algos/AlgoPointOnPath.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoButton.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/GeoTextField.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/TextObject.h"
#include "org/geogebra/common/util/Unicode.h"

@interface OrgGeogebraCommonKernelGeosGeoTextField () {
 @public
  jint length_;
  OrgGeogebraCommonKernelGeosGeoElement *linkedGeo_;
  NSString *text_;
  id<OrgGeogebraCommonGuiInputfieldAutoCompleteTextField> textField_, textField2_;
  jint printDecimals_;
  jint printFigures_;
  jboolean useSignificantFigures__;
  OrgGeogebraCommonKernelStringTemplate *tpl_;
}

- (void)updateTemplate;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTextField, linkedGeo_, OrgGeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTextField, text_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTextField, textField_, id<OrgGeogebraCommonGuiInputfieldAutoCompleteTextField>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTextField, textField2_, id<OrgGeogebraCommonGuiInputfieldAutoCompleteTextField>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoTextField, tpl_, OrgGeogebraCommonKernelStringTemplate *)

static jint OrgGeogebraCommonKernelGeosGeoTextField_defaultLength_ = 20;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoTextField, defaultLength_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonKernelGeosGeoTextField, defaultLength_, jint)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoTextField_updateTemplate(OrgGeogebraCommonKernelGeosGeoTextField *self);

@implementation OrgGeogebraCommonKernelGeosGeoTextField

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoTextField_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                    withInt:(jint)labelOffsetX
                                                    withInt:(jint)labelOffsetY {
  OrgGeogebraCommonKernelGeosGeoTextField_initWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(self, cons, labelOffsetX, labelOffsetY);
  return self;
}

- (jboolean)isChangeable {
  return YES;
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_TEXTFIELD();
}

- (jboolean)isTextField {
  return YES;
}

- (void)setLinkedGeoWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  linkedGeo_ = geo;
  text_ = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getValueForInputBar];
  if (((jint) [((NSString *) nil_chk(text_)) length]) > 0 && [text_ charAtWithInt:0] == '"') {
    text_ = [text_ substring:1];
  }
  if (((jint) [((NSString *) nil_chk(text_)) length]) > 0 && [text_ charAtWithInt:((jint) [text_ length]) - 1] == '"') {
    text_ = [text_ substring:0 endIndex:((jint) [text_ length]) - 1];
  }
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getLinkedGeo {
  return linkedGeo_;
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl1 {
  if (linkedGeo_ == nil) return @"";
  return text_;
}

- (void)setTextWithNSString:(NSString *)newText {
  text_ = newText;
}

- (NSString *)getText {
  return text_;
}

- (jboolean)isGeoTextField {
  return YES;
}

- (void)setLengthWithInt:(jint)l {
  length_ = l;
  [self updateVisualStyle];
}

- (jint)getLength {
  return length_;
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  if (linkedGeo_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<linkedGeo exp=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [linkedGeo_ getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_()]);
    (void) [sb appendWithNSString:@"\""];
    (void) [sb appendWithNSString:@"/>\n"];
    if (printDecimals_ >= 0 && !useSignificantFigures__) {
      (void) [sb appendWithNSString:@"\t<decimals val=\""];
      (void) [sb appendWithInt:printDecimals_];
      (void) [sb appendWithNSString:@"\"/>\n"];
    }
    if (printFigures_ >= 0 && useSignificantFigures__) {
      (void) [sb appendWithNSString:@"\t<significantfigures val=\""];
      (void) [sb appendWithInt:printFigures_];
      (void) [sb appendWithNSString:@"\"/>\n"];
    }
  }
  if ([self getLength] != OrgGeogebraCommonKernelGeosGeoTextField_defaultLength_) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<length val=\""];
    (void) [sb appendWithInt:[self getLength]];
    (void) [sb appendWithNSString:@"\""];
    (void) [sb appendWithNSString:@"/>\n"];
  }
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  return new_OrgGeogebraCommonKernelGeosGeoTextField_initWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(cons_, labelOffsetX_, labelOffsetY_);
}

- (void)updateLinkedGeoWithNSString:(NSString *)inputText {
  NSString *defineText = inputText;
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(linkedGeo_)) isGeoLine]) {
    if (([((NSString *) nil_chk(defineText)) indexOf:'='] == -1) && ([defineText indexOf:'['] == -1)) {
      defineText = JreStrcat("$$", @"y=", defineText);
    }
    NSString *prefix = JreStrcat("$C", [linkedGeo_ getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl_], ':');
    if (![defineText hasPrefix:prefix]) {
      defineText = JreStrcat("$$", prefix, defineText);
    }
  }
  else if ([linkedGeo_ isGeoText]) {
    defineText = JreStrcat("C$C", '"', defineText, '"');
  }
  else if ([linkedGeo_ isGeoPoint]) {
    if (linkedGeo_->toStringMode_ == OrgGeogebraCommonKernelKernel_COORD_COMPLEX) {
      defineText = JreStrcat("$$$", defineText, @"+0", OrgGeogebraCommonUtilUnicode_get_IMAGINARY_());
    }
  }
  else if ([OrgGeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:linkedGeo_]) {
    defineText = JreStrcat("$C$$$", [linkedGeo_ getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl_], '(', [((id<OrgGeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(linkedGeo_, @protocol(OrgGeogebraCommonKernelArithmeticFunctionalNVar))) getVarStringWithOrgGeogebraCommonKernelStringTemplate:tpl_], @")=", defineText);
  }
  if ([@"" isEqual:[((NSString *) nil_chk(defineText)) trim]]) {
    return;
  }
  jdouble num = JavaLangDouble_NaN;
  if ([linkedGeo_ isGeoNumeric] && ![linkedGeo_ isGeoAngle] && (printDecimals_ > -1 || printFigures_ > -1)) {
    @try {
      num = JavaLangDouble_parseDoubleWithNSString_(inputText);
      defineText = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:num withOrgGeogebraCommonKernelStringTemplate:tpl_];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
  }
  @try {
    linkedGeo_ = [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) changeGeoElementNoExceptionHandlingWithOrgGeogebraCommonKernelGeosGeoElement:linkedGeo_ withNSString:defineText withBoolean:[linkedGeo_ isIndependent] withBoolean:YES];
  }
  @catch (OrgGeogebraCommonMainMyError *e1) {
    [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) showErrorWithOrgGeogebraCommonMainMyError:e1];
    return;
  }
  @catch (JavaLangException *e1) {
    [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) showErrorWithNSString:[((JavaLangException *) nil_chk(e1)) getMessage]];
    return;
  }
  [self setLinkedGeoWithOrgGeogebraCommonKernelGeosGeoElement:linkedGeo_];
}

- (void)updateTextWithOrgGeogebraCommonUtilTextObject:(id<OrgGeogebraCommonUtilTextObject>)textFieldToUpdate {
  if (linkedGeo_ != nil) {
    NSString *linkedText;
    if ([linkedGeo_ isGeoText]) {
      linkedText = [((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(linkedGeo_, [OrgGeogebraCommonKernelGeosGeoText class])) getTextString];
    }
    else if ([[linkedGeo_ getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoPointOnPath class]] || [[linkedGeo_ getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoPointInRegion class]]) {
      linkedText = [linkedGeo_ toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl_];
    }
    else {
      jboolean substituteNos = [linkedGeo_ isGeoNumeric] && [linkedGeo_ isIndependent];
      linkedText = [linkedGeo_ getFormulaStringWithOrgGeogebraCommonKernelStringTemplate:tpl_ withBoolean:substituteNos];
    }
    if ([linkedGeo_ isGeoText] && ([((NSString *) nil_chk(linkedText)) indexOfString:@"\n"] > -1)) {
      while ([linkedText indexOfString:@"\n"] > -1) {
        linkedText = [linkedText replaceAll:@"\n" withReplacement:@"\\\\\\\\n"];
      }
    }
    if (![((NSString *) nil_chk([((id<OrgGeogebraCommonUtilTextObject>) nil_chk(textFieldToUpdate)) getText])) isEqual:linkedText]) {
      [textFieldToUpdate setTextWithNSString:linkedText];
    }
  }
  else {
    [((id<OrgGeogebraCommonUtilTextObject>) nil_chk(textFieldToUpdate)) setTextWithNSString:text_];
  }
  [self setTextWithNSString:[((id<OrgGeogebraCommonUtilTextObject>) nil_chk(textFieldToUpdate)) getText]];
}

- (void)textObjectUpdatedWithOrgGeogebraCommonUtilTextObject:(id<OrgGeogebraCommonUtilTextObject>)textFieldToUpdate {
  if (linkedGeo_ != nil) {
    [self updateLinkedGeoWithNSString:[((id<OrgGeogebraCommonUtilTextObject>) nil_chk(textFieldToUpdate)) getText]];
    [self updateTextWithOrgGeogebraCommonUtilTextObject:textFieldToUpdate];
  }
  else {
    [self setTextWithNSString:[((id<OrgGeogebraCommonUtilTextObject>) nil_chk(textFieldToUpdate)) getText]];
  }
}

- (void)textSubmitted {
  [self runClickScriptsWithNSString:[self getText]];
}

- (id<OrgGeogebraCommonGuiInputfieldAutoCompleteTextField>)getTextFieldWithInt:(jint)viewID
                               withOrgGeogebraCommonEuclidianDrawDrawTextField:(OrgGeogebraCommonEuclidianDrawDrawTextField *)drawTextField {
  if (textField_ == nil) {
    textField_ = [((OrgGeogebraCommonFactoriesSwingFactory *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getSwingFactory])) newAutoCompleteTextFieldWithInt:[self getLength] withOrgGeogebraCommonMainApp:[kernel_ getApplication] withOrgGeogebraCommonEuclidianDrawable:drawTextField];
    if ([linkedGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoText class]]) {
      [((id<OrgGeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(textField_)) removeSymbolTable];
    }
    else {
    }
    [((id<OrgGeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(textField_)) setAutoCompleteWithBoolean:NO];
    [textField_ enableColoringWithBoolean:NO];
    [textField_ setFocusTraversalKeysEnabledWithBoolean:NO];
    [textField_ setUsedForInputBoxWithOrgGeogebraCommonKernelGeosGeoTextField:self];
  }
  if (viewID != OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2) {
    return textField_;
  }
  if (textField2_ == nil) {
    textField2_ = [((OrgGeogebraCommonFactoriesSwingFactory *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getSwingFactory])) newAutoCompleteTextFieldWithInt:[self getLength] withOrgGeogebraCommonMainApp:[kernel_ getApplication] withOrgGeogebraCommonEuclidianDrawable:drawTextField];
    if ([linkedGeo_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoText class]]) {
      [((id<OrgGeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(textField2_)) removeSymbolTable];
    }
    else {
      [((id<OrgGeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(textField2_)) prepareShowSymbolButtonWithBoolean:YES];
    }
    [((id<OrgGeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(textField2_)) setAutoCompleteWithBoolean:NO];
    [textField2_ enableColoringWithBoolean:NO];
    [((id<OrgGeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(textField_)) setFocusTraversalKeysEnabledWithBoolean:NO];
    [textField_ setUsedForInputBoxWithOrgGeogebraCommonKernelGeosGeoTextField:self];
  }
  return textField2_;
}

- (void)setSelectedWithBoolean:(jboolean)flag {
  [super setSelectedWithBoolean:flag];
  if (flag && textField_ != nil && ![textField_ hasFocus]) {
    [textField_ requestFocus];
  }
  if (flag && textField2_ != nil && ![textField2_ hasFocus]) {
    [textField2_ requestFocus];
  }
}

- (void)updateTemplate {
  OrgGeogebraCommonKernelGeosGeoTextField_updateTemplate(self);
}

- (jint)getPrintDecimals {
  return printDecimals_;
}

- (jint)getPrintFigures {
  return printFigures_;
}

- (void)setPrintDecimalsWithInt:(jint)printDecimals
                    withBoolean:(jboolean)update {
  self->printDecimals_ = printDecimals;
  printFigures_ = -1;
  useSignificantFigures__ = NO;
  OrgGeogebraCommonKernelGeosGeoTextField_updateTemplate(self);
}

- (void)setPrintFiguresWithInt:(jint)printFigures
                   withBoolean:(jboolean)update {
  self->printFigures_ = printFigures;
  printDecimals_ = -1;
  useSignificantFigures__ = YES;
  OrgGeogebraCommonKernelGeosGeoTextField_updateTemplate(self);
}

- (jboolean)useSignificantFigures {
  return useSignificantFigures__;
}

- (void)setBackgroundColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)bgCol {
  jint red = 255, green = 255, blue = 255;
  if (bgCol != nil && [bgCol getAlpha] != 0) {
    red = [bgCol getRed];
    green = [bgCol getGreen];
    blue = [bgCol getBlue];
  }
  bgColor_ = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:red withInt:green withInt:blue];
}

- (jboolean)isFixed {
  if ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isHTML5Applet]) {
    return NO;
  }
  return [super isFixed];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoTextField", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withInt:withInt:", "GeoTextField", NULL, 0x1, NULL, NULL },
    { "isChangeable", NULL, "Z", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "isTextField", NULL, "Z", 0x1, NULL, NULL },
    { "setLinkedGeoWithOrgGeogebraCommonKernelGeosGeoElement:", "setLinkedGeo", "V", 0x1, NULL, NULL },
    { "getLinkedGeo", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setTextWithNSString:", "setText", "V", 0x1, NULL, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isGeoTextField", NULL, "Z", 0x1, NULL, NULL },
    { "setLengthWithInt:", "setLength", "V", 0x1, NULL, NULL },
    { "getLength", NULL, "I", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "updateLinkedGeoWithNSString:", "updateLinkedGeo", "V", 0x1, NULL, NULL },
    { "updateTextWithOrgGeogebraCommonUtilTextObject:", "updateText", "V", 0x1, NULL, NULL },
    { "textObjectUpdatedWithOrgGeogebraCommonUtilTextObject:", "textObjectUpdated", "V", 0x1, NULL, NULL },
    { "textSubmitted", NULL, "V", 0x1, NULL, NULL },
    { "getTextFieldWithInt:withOrgGeogebraCommonEuclidianDrawDrawTextField:", "getTextField", "Lorg.geogebra.common.gui.inputfield.AutoCompleteTextField;", 0x1, NULL, NULL },
    { "setSelectedWithBoolean:", "setSelected", "V", 0x1, NULL, NULL },
    { "updateTemplate", NULL, "V", 0x2, NULL, NULL },
    { "getPrintDecimals", NULL, "I", 0x1, NULL, NULL },
    { "getPrintFigures", NULL, "I", 0x1, NULL, NULL },
    { "setPrintDecimalsWithInt:withBoolean:", "setPrintDecimals", "V", 0x1, NULL, NULL },
    { "setPrintFiguresWithInt:withBoolean:", "setPrintFigures", "V", 0x1, NULL, NULL },
    { "useSignificantFigures", NULL, "Z", 0x1, NULL, NULL },
    { "setBackgroundColorWithOrgGeogebraCommonAwtGColor:", "setBackgroundColor", "V", 0x1, NULL, NULL },
    { "isFixed", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defaultLength_", NULL, 0xa, "I", &OrgGeogebraCommonKernelGeosGeoTextField_defaultLength_, NULL,  },
    { "length_", NULL, 0x2, "I", NULL, NULL,  },
    { "linkedGeo_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "text_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "textField_", NULL, 0x2, "Lorg.geogebra.common.gui.inputfield.AutoCompleteTextField;", NULL, NULL,  },
    { "textField2_", NULL, 0x2, "Lorg.geogebra.common.gui.inputfield.AutoCompleteTextField;", NULL, NULL,  },
    { "printDecimals_", NULL, 0x2, "I", NULL, NULL,  },
    { "printFigures_", NULL, 0x2, "I", NULL, NULL,  },
    { "useSignificantFigures__", "useSignificantFigures", 0x2, "Z", NULL, NULL,  },
    { "tpl_", NULL, 0x2, "Lorg.geogebra.common.kernel.StringTemplate;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoTextField = { 2, "GeoTextField", "org.geogebra.common.kernel.geos", NULL, 0x1, 29, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoTextField;
}

@end

void OrgGeogebraCommonKernelGeosGeoTextField_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoTextField *self, OrgGeogebraCommonKernelConstruction *c) {
  (void) OrgGeogebraCommonKernelGeosGeoButton_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->linkedGeo_ = nil;
  self->text_ = nil;
  self->printDecimals_ = -1;
  self->printFigures_ = -1;
  self->useSignificantFigures__ = NO;
  self->tpl_ = OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_();
  self->length_ = OrgGeogebraCommonKernelGeosGeoTextField_defaultLength_;
}

OrgGeogebraCommonKernelGeosGeoTextField *new_OrgGeogebraCommonKernelGeosGeoTextField_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoTextField *self = [OrgGeogebraCommonKernelGeosGeoTextField alloc];
  OrgGeogebraCommonKernelGeosGeoTextField_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoTextField_initWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(OrgGeogebraCommonKernelGeosGeoTextField *self, OrgGeogebraCommonKernelConstruction *cons, jint labelOffsetX, jint labelOffsetY) {
  (void) OrgGeogebraCommonKernelGeosGeoTextField_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->labelOffsetX_ = labelOffsetX;
  self->labelOffsetY_ = labelOffsetY;
}

OrgGeogebraCommonKernelGeosGeoTextField *new_OrgGeogebraCommonKernelGeosGeoTextField_initWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(OrgGeogebraCommonKernelConstruction *cons, jint labelOffsetX, jint labelOffsetY) {
  OrgGeogebraCommonKernelGeosGeoTextField *self = [OrgGeogebraCommonKernelGeosGeoTextField alloc];
  OrgGeogebraCommonKernelGeosGeoTextField_initWithOrgGeogebraCommonKernelConstruction_withInt_withInt_(self, cons, labelOffsetX, labelOffsetY);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoTextField_updateTemplate(OrgGeogebraCommonKernelGeosGeoTextField *self) {
  if ([self useSignificantFigures] && self->printFigures_ > -1) {
    self->tpl_ = OrgGeogebraCommonKernelStringTemplate_printFiguresWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA(), self->printFigures_, NO);
  }
  else if (!self->useSignificantFigures__ && self->printDecimals_ > -1) {
    self->tpl_ = OrgGeogebraCommonKernelStringTemplate_printDecimalsWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA(), self->printDecimals_, NO);
  }
  else {
    self->tpl_ = OrgGeogebraCommonKernelStringTemplate_getWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA());
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoTextField)
