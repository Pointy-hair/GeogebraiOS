//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/geos/GeoPenStroke.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoPenStroke.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/plugin/GeoClass.h"

@implementation OrgGeogebraCommonKernelGeosGeoPenStroke

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
         withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  OrgGeogebraCommonKernelGeosGeoPenStroke_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, cons, points);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1 {
  OrgGeogebraCommonKernelGeosGeoPenStroke_initWithOrgGeogebraCommonKernelConstruction_(self, cons1);
  return self;
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_PENSTROKE();
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return label_;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copyInternalWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1 {
  OrgGeogebraCommonKernelGeosGeoPolyLine *ret = [new_OrgGeogebraCommonKernelGeosGeoPenStroke_initWithOrgGeogebraCommonKernelConstruction_(cons1) autorelease];
  OrgGeogebraCommonKernelGeosGeoPolyLine_set_points_(ret, OrgGeogebraCommonKernelGeosGeoElement_copyPointsWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons1, points_));
  [ret setWithOrgGeogebraCommonKernelGeosGeoElement:self];
  return ret;
}

- (jboolean)isPinnable {
  return YES;
}

- (jboolean)isLabelVisible {
  return NO;
}

- (jboolean)isLabelShowable {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "GeoPenStroke", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoPenStroke", NULL, 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "copyInternalWithOrgGeogebraCommonKernelConstruction:", "copyInternal", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isPinnable", NULL, "Z", 0x1, NULL, NULL },
    { "isLabelVisible", NULL, "Z", 0x1, NULL, NULL },
    { "isLabelShowable", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoPenStroke = { 2, "GeoPenStroke", "org.geogebra.common.kernel.geos", NULL, 0x1, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoPenStroke;
}

@end

void OrgGeogebraCommonKernelGeosGeoPenStroke_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonKernelGeosGeoPenStroke *self, OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *points) {
  OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, cons, points);
}

OrgGeogebraCommonKernelGeosGeoPenStroke *new_OrgGeogebraCommonKernelGeosGeoPenStroke_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *points) {
  OrgGeogebraCommonKernelGeosGeoPenStroke *self = [OrgGeogebraCommonKernelGeosGeoPenStroke alloc];
  OrgGeogebraCommonKernelGeosGeoPenStroke_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, cons, points);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoPenStroke_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoPenStroke *self, OrgGeogebraCommonKernelConstruction *cons1) {
  OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_(self, cons1);
}

OrgGeogebraCommonKernelGeosGeoPenStroke *new_OrgGeogebraCommonKernelGeosGeoPenStroke_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *cons1) {
  OrgGeogebraCommonKernelGeosGeoPenStroke *self = [OrgGeogebraCommonKernelGeosGeoPenStroke alloc];
  OrgGeogebraCommonKernelGeosGeoPenStroke_initWithOrgGeogebraCommonKernelConstruction_(self, cons1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoPenStroke)
