//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/geos/GeoElement.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Comparable.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/awt/GPoint.h"
#include "org/geogebra/common/awt/MyImage.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "org/geogebra/common/factories/AwtFactory.h"
#include "org/geogebra/common/factories/FormatFactory.h"
#include "org/geogebra/common/factories/LaTeXFactory.h"
#include "org/geogebra/common/kernel/AnimationManager.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/GraphAlgo.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Locateable.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoAttachCopyToView.h"
#include "org/geogebra/common/kernel/algos/AlgoBarChart.h"
#include "org/geogebra/common/kernel/algos/AlgoCirclePointRadiusInterface.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentText.h"
#include "org/geogebra/common/kernel/algos/AlgoDynamicCoordinatesInterface.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoIntegralODE.h"
#include "org/geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "org/geogebra/common/kernel/algos/AlgoMacroInterface.h"
#include "org/geogebra/common/kernel/algos/AlgoName.h"
#include "org/geogebra/common/kernel/algos/AlgoTranslate.h"
#include "org/geogebra/common/kernel/algos/AlgoVectorPoint.h"
#include "org/geogebra/common/kernel/algos/AlgorithmSet.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/DrawInformationAlgo.h"
#include "org/geogebra/common/kernel/algos/EquationElementInterface.h"
#include "org/geogebra/common/kernel/algos/GetCommand.h"
#include "org/geogebra/common/kernel/algos/TableAlgo.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/Inspecting.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/TextValue.h"
#include "org/geogebra/common/kernel/arithmetic/Traversing.h"
#include "org/geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/AbsoluteScreenLocateable.h"
#include "org/geogebra/common/kernel/geos/FromMeta.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoElementGraphicsAdapter.h"
#include "org/geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "org/geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPenStroke.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/GeoTurtle.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/geos/PointRotateable.h"
#include "org/geogebra/common/kernel/geos/SpreadsheetTraceable.h"
#include "org/geogebra/common/kernel/geos/Traceable.h"
#include "org/geogebra/common/kernel/geos/Translateable.h"
#include "org/geogebra/common/kernel/kernelND/GeoElementND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/kernel/locusequ/EquationScope.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/main/MyError.h"
#include "org/geogebra/common/main/SelectionManager.h"
#include "org/geogebra/common/plugin/EuclidianStyleConstants.h"
#include "org/geogebra/common/plugin/Event.h"
#include "org/geogebra/common/plugin/EventType.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/ScriptManager.h"
#include "org/geogebra/common/plugin/script/Script.h"
#include "org/geogebra/common/util/IndexHTMLBuilder.h"
#include "org/geogebra/common/util/LaTeXCache.h"
#include "org/geogebra/common/util/Language.h"
#include "org/geogebra/common/util/MyMath.h"
#include "org/geogebra/common/util/NumberFormatAdapter.h"
#include "org/geogebra/common/util/SpreadsheetTraceSettings.h"
#include "org/geogebra/common/util/StringUtil.h"
#include "org/geogebra/common/util/Unicode.h"
#include "org/geogebra/common/util/debug/GeoGebraProfiler.h"

#define OrgGeogebraCommonKernelGeosGeoElement_MAX_LABEL_OFFSET 80

@interface OrgGeogebraCommonKernelGeosGeoElement () {
 @public
  jint tooltipMode_;
  NSString *realLabel_;
  NSString *oldLabel_;
  NSString *caption_;
  jboolean localVarLabelSet_;
  jboolean euclidianVisible_;
  jboolean forceEuclidianVisible__;
  jboolean algebraVisible_;
  jboolean labelVisible_;
  jboolean isConsProtBreakpoint_;
  jboolean isAlgoMacroOutput__;
  jint layer_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> animationIncrement_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> animationSpeedObj_;
  OrgGeogebraCommonKernelGeosGeoCasCell *correspondingCasCell_;
  jboolean animating_;
  jint animationType_;
  jint animationDirection_;
  jboolean inverseFill_;
  NSString *fillSymbol_;
  jint colorSpace_;
  id<JavaUtilList> viewFlags_;
  jint defaultGeoType_;
  jboolean auxiliaryObject_;
  jboolean selectionAllowed_;
  OrgGeogebraCommonAwtGPoint *spreadsheetCoords_, *oldSpreadsheetCoords_;
  jint cellRangeUsers_;
  OrgGeogebraCommonKernelGeosGeoList *colFunction_;
  jboolean useVisualDefaults_;
  jboolean selected_;
  NSString *strAlgebraDescription_, *strAlgebraDescTextOrHTML_, *strAlgebraDescriptionHTML_, *strLabelTextOrHTML_;
  jboolean strAlgebraDescriptionNeedsUpdate_;
  jboolean strAlgebraDescTextOrHTMLneedsUpdate_;
  jboolean strAlgebraDescriptionHTMLneedsUpdate_;
  jboolean strLabelTextOrHTMLUpdate_;
  jint lineOpacity_;
  JavaUtilArrayList *algorithmList_;
  id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim> viewForValueString_;
  jboolean sequentialColor_;
  jboolean isEmptySpreadsheetCell__;
  id<OrgGeogebraCommonUtilLaTeXCache> latexCache_;
  NSString *strHasIndexLabel_;
  jboolean hasIndexLabel__;
  JavaUtilArrayList *tempMoveObjectList_;
  jboolean spreadsheetTrace_;
  OrgGeogebraCommonUtilSpreadsheetTraceSettings *traceSettings_;
  jboolean inTree_;
  IOSObjectArray *scripts_;
  jboolean showTrimmedIntersectionLines_;
  jboolean isRandomGeo__;
  OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum *visibleInViewForPlane_;
  jboolean isPickable__;
  jboolean needsReplacingInExpressionNode__;
  JavaUtilStack *tempClone_;
  jboolean cloneInUse_;
  jboolean canBeRemovedAsInput__;
}

- (OrgGeogebraCommonAwtGColor *)getRGBFromListWithFloat:(jfloat)alpha1;

- (OrgGeogebraCommonAwtGColor *)getRGBFromListWithInt:(jint)withAlpha;

- (jint)typePriority;

+ (jboolean)containsOnlyMoveableGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos;

- (void)initAnimationSpeedObject OBJC_METHOD_FAMILY_NONE;

- (void)doSetLabelWithNSString:(NSString *)newLabel;

- (void)updateSpreadsheetCoordinates;

- (void)doRenameLabelWithNSString:(NSString *)newLabel;

- (NSString *)defaultNumberedLabelWithNSString:(NSString *)plainKey;

- (void)algebraStringsNeedUpdate;

- (void)updateDependentObjects;

- (NSString *)getLaTeXAlgebraDescriptionWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                      withBoolean:(jboolean)substituteNumbers
                                        withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (void)getListenerTagXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                               withJavaUtilHashMap:(JavaUtilHashMap *)map
                                      withNSString:(NSString *)type;

- (void)getExtraTagsXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (NSString *)getShowObjectConditionXML;

- (jboolean)moveObjectWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)rwTransVec
                      withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)endPosition
                      withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)viewDirection
                                        withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                  withOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view;

+ (void)addParentToUpdateListWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)number
                                                 withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                                                 withJavaUtilArrayList:(JavaUtilArrayList *)tempMoveObjectList1;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, realLabel_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, oldLabel_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, caption_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, animationIncrement_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, animationSpeedObj_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, correspondingCasCell_, OrgGeogebraCommonKernelGeosGeoCasCell *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, fillSymbol_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, viewFlags_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, spreadsheetCoords_, OrgGeogebraCommonAwtGPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, oldSpreadsheetCoords_, OrgGeogebraCommonAwtGPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, colFunction_, OrgGeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, strAlgebraDescription_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, strAlgebraDescTextOrHTML_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, strAlgebraDescriptionHTML_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, strLabelTextOrHTML_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, algorithmList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, viewForValueString_, id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, latexCache_, id<OrgGeogebraCommonUtilLaTeXCache>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, strHasIndexLabel_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, tempMoveObjectList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, traceSettings_, OrgGeogebraCommonUtilSpreadsheetTraceSettings *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, scripts_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, visibleInViewForPlane_, OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, tempClone_, JavaUtilStack *)

J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoElement, MAX_LABEL_OFFSET, jint)

static IOSCharArray *OrgGeogebraCommonKernelGeosGeoElement_functionLabels_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoElement, functionLabels_, IOSCharArray *)

static IOSCharArray *OrgGeogebraCommonKernelGeosGeoElement_lineLabels_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoElement, lineLabels_, IOSCharArray *)

static IOSCharArray *OrgGeogebraCommonKernelGeosGeoElement_vectorLabels_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoElement, vectorLabels_, IOSCharArray *)

static IOSCharArray *OrgGeogebraCommonKernelGeosGeoElement_conicLabels_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoElement, conicLabels_, IOSCharArray *)

static IOSCharArray *OrgGeogebraCommonKernelGeosGeoElement_lowerCaseLabels_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoElement, lowerCaseLabels_, IOSCharArray *)

static IOSCharArray *OrgGeogebraCommonKernelGeosGeoElement_integerLabels_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoElement, integerLabels_, IOSCharArray *)

static IOSCharArray *OrgGeogebraCommonKernelGeosGeoElement_greekLowerCase_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoElement, greekLowerCase_, IOSCharArray *)

static IOSCharArray *OrgGeogebraCommonKernelGeosGeoElement_arabic_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoElement, arabic_, IOSCharArray *)

static IOSCharArray *OrgGeogebraCommonKernelGeosGeoElement_yiddish_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoElement, yiddish_, IOSCharArray *)

static IOSCharArray *OrgGeogebraCommonKernelGeosGeoElement_greekUpperCase_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoElement, greekUpperCase_, IOSCharArray *)

static JavaUtilArrayList *OrgGeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoElement, moveObjectsUpdateList_, JavaUtilArrayList *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, moveObjectsUpdateList_, JavaUtilArrayList *)

static JavaUtilTreeSet *OrgGeogebraCommonKernelGeosGeoElement_tempSet_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoElement, tempSet_, JavaUtilTreeSet *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, tempSet_, JavaUtilTreeSet *)

static id<JavaUtilComparator> OrgGeogebraCommonKernelGeosGeoElement_algoComparator_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoElement, algoComparator_, id<JavaUtilComparator>)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoElement, algoComparator_, id<JavaUtilComparator>)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_setConstructionDefaultsWithBoolean_(OrgGeogebraCommonKernelGeosGeoElement *self, jboolean setEuclidianVisible);

__attribute__((unused)) static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelGeosGeoElement_getRGBFromListWithFloat_(OrgGeogebraCommonKernelGeosGeoElement *self, jfloat alpha1);

__attribute__((unused)) static OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelGeosGeoElement_getRGBFromListWithInt_(OrgGeogebraCommonKernelGeosGeoElement *self, jint withAlpha);

__attribute__((unused)) static jint OrgGeogebraCommonKernelGeosGeoElement_typePriority(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoElement_isVisible(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoElement_isEuclidianVisible(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_setFixedWithBoolean_(OrgGeogebraCommonKernelGeosGeoElement *self, jboolean flag);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoElement_isAuxiliaryObject(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoElement_isAlgebraVisible(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static OrgGeogebraCommonKernelAlgosAlgoElement *OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static JavaUtilArrayList *OrgGeogebraCommonKernelGeosGeoElement_getAlgorithmList(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoElement_hasOnlyFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(OrgGeogebraCommonKernelGeosGeoElement *self, id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim> view);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoElement_containsOnlyMoveableGeosWithJavaUtilArrayList_(JavaUtilArrayList *geos);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_initAnimationSpeedObject(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoElement_isAnimating(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_doSetLabelWithNSString_(OrgGeogebraCommonKernelGeosGeoElement *self, NSString *newLabel);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_updateSpreadsheetCoordinates(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_doRenameLabelWithNSString_(OrgGeogebraCommonKernelGeosGeoElement *self, NSString *newLabel);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(OrgGeogebraCommonKernelGeosGeoElement *self, NSString *plainKey);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_notifyAdd(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_notifyRemove(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_notifyUpdateAuxiliaryObject(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_updateGeo(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_algebraStringsNeedUpdate(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_updateDependentObjects(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(OrgGeogebraCommonKernelGeosGeoElement *self, JavaUtilTreeSet *set, jboolean onlyIndependent);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_addRandomizablePredecessorsToSetWithJavaUtilTreeSet_(OrgGeogebraCommonKernelGeosGeoElement *self, JavaUtilTreeSet *set);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoElement_isParentOfWithOrgGeogebraCommonKernelKernelNDGeoElementND_(OrgGeogebraCommonKernelGeosGeoElement *self, id<OrgGeogebraCommonKernelKernelNDGeoElementND> geo);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoElement_isChildOfWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *self, OrgGeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static JavaUtilTreeSet *OrgGeogebraCommonKernelGeosGeoElement_getAllChildren(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoElement_isGeoElement(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoElement_getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoElement *self, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoElement_getXMLtypeString(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoElement_getLongDescriptionHTMLWithBoolean_withBoolean_(OrgGeogebraCommonKernelGeosGeoElement *self, jboolean colored, jboolean addHTMLtag);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoElement_toDefinedValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoElement *self, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoElement_getLabelTextOrHTMLWithBoolean_(OrgGeogebraCommonKernelGeosGeoElement *self, jboolean addHTMLTag);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoElement *self, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionDefault(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoElement_getLaTeXAlgebraDescriptionWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoElement *self, OrgGeogebraCommonKernelGeosGeoElement *geo, jboolean substituteNumbers, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoElement_hasIndexLabel(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_getListenerTagXMLWithJavaLangStringBuilder_withJavaUtilHashMap_withNSString_(OrgGeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb, JavaUtilHashMap *map, NSString *type);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_getCaptionXMLWithJavaLangStringBuilder_(OrgGeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_getAuxiliaryXMLWithJavaLangStringBuilder_(OrgGeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_getExtraTagsXMLWithJavaLangStringBuilder_(OrgGeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb);

__attribute__((unused)) static NSString *OrgGeogebraCommonKernelGeosGeoElement_getShowObjectConditionXML(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoElement_isSelected(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoBoolean *OrgGeogebraCommonKernelGeosGeoElement_getShowObjectCondition(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoList *OrgGeogebraCommonKernelGeosGeoElement_getColorFunction(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoElement_moveObjectWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withJavaUtilArrayList_withOrgGeogebraCommonEuclidianEuclidianView_(OrgGeogebraCommonKernelGeosGeoElement *self, OrgGeogebraCommonKernelMatrixCoords *rwTransVec, OrgGeogebraCommonKernelMatrixCoords *endPosition, OrgGeogebraCommonKernelMatrixCoords *viewDirection, JavaUtilArrayList *updateGeos, OrgGeogebraCommonEuclidianEuclidianView *view);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_addParentToUpdateListWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(OrgGeogebraCommonKernelGeosGeoElement *number, JavaUtilArrayList *updateGeos, JavaUtilArrayList *tempMoveObjectList1);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoElement_isSelectionAllowed(OrgGeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoCasCell *OrgGeogebraCommonKernelGeosGeoElement_getCorrespondingCasCell(OrgGeogebraCommonKernelGeosGeoElement *self);

@interface OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum () {
 @public
  jint value_;
  jboolean hatch_;
}

@end

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *self, jint value, jboolean hatch, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *new_OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(jint value, jboolean hatch, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum *new_OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *new_OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *new_OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface OrgGeogebraCommonKernelGeosGeoElement_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(OrgGeogebraCommonKernelAlgosAlgoElement *)o1
               withId:(OrgGeogebraCommonKernelAlgosAlgoElement *)o2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelGeosGeoElement_$1)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoElement_$1_init(OrgGeogebraCommonKernelGeosGeoElement_$1 *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoElement_$1 *new_OrgGeogebraCommonKernelGeosGeoElement_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelGeosGeoElement_$1)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelGeosGeoElement)

IOSCharArray *OrgGeogebraCommonKernelGeosGeoElement_pointLabels_;

@implementation OrgGeogebraCommonKernelGeosGeoElement

- (jint)getColorSpace {
  return colorSpace_;
}

- (void)setColorSpaceWithInt:(jint)colorSpace {
  self->colorSpace_ = colorSpace;
}

- (jint)getDefaultGeoType {
  return defaultGeoType_;
}

- (jboolean)isDefaultGeo {
  return defaultGeoType_ != -1;
}

- (void)setDefaultGeoTypeWithInt:(jint)defaultGT {
  defaultGeoType_ = defaultGT;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (NSString *)getLabelSimple {
  return label_;
}

- (void)setLabelSimpleWithNSString:(NSString *)lab {
  OrgGeogebraCommonKernelGeosGeoElement_set_label_(self, lab);
}

- (NSString *)getLabelWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (![((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isUseRealLabels] || (realLabel_ == nil) || [realLabel_ isEqual:@""]) {
    if (!labelSet_ && !localVarLabelSet_) {
      if (algoParent_ == nil) {
        return [self toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
      }
      return [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:tpl];
    }
    return [tpl printVariableNameWithNSString:label_];
  }
  return [tpl printVariableNameWithNSString:realLabel_];
}

- (void)copyLabelWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)c {
  OrgGeogebraCommonKernelGeosGeoElement_set_label_(self, ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(c))->label_);
}

- (void)setLabelModeWithInt:(jint)mode {
  if ([self isDefaultGeo]) {
    switch (mode) {
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME:
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE:
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_VALUE:
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_CAPTION:
      labelMode_ = OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT;
      break;
      default:
      labelMode_ = mode;
    }
    if (labelMode_ != OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT) {
      OrgGeogebraCommonMainApp *app = [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getApplication];
      if (app != nil) {
        [app setLabelingStyleIsNotSelected];
      }
    }
  }
  else {
    switch (mode) {
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE:
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT_NAME_VALUE:
      labelMode_ = OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE;
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_VALUE:
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT_VALUE:
      labelMode_ = OrgGeogebraCommonKernelGeosGeoElement_LABEL_VALUE;
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_CAPTION:
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT_CAPTION:
      labelMode_ = OrgGeogebraCommonKernelGeosGeoElement_LABEL_CAPTION;
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT:
      [self setLabelModeDefault];
      break;
      default:
      labelMode_ = OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME;
    }
  }
}

- (void)setLabelModeFromStylebarWithInt:(jint)index {
  if (index == 0) {
    [self setLabelVisibleWithBoolean:NO];
    if ([self isDefaultGeo]) {
      if (labelMode_ == OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT) {
        [self setLabelModeDefault];
        labelMode_ += 5;
      }
      OrgGeogebraCommonMainApp *app = [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getApplication];
      if (app != nil) {
        [app setLabelingStyleIsNotSelected];
      }
    }
    return;
  }
  [self setLabelVisibleWithBoolean:YES];
  jint mode = index - 1;
  if ([self isDefaultGeo]) {
    labelMode_ = mode + 5;
    OrgGeogebraCommonMainApp *app = [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getApplication];
    if (app != nil) {
      [app setLabelingStyleIsNotSelected];
    }
  }
  else {
    switch (mode) {
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE:
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT_NAME_VALUE:
      labelMode_ = OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE;
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_VALUE:
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT_VALUE:
      labelMode_ = OrgGeogebraCommonKernelGeosGeoElement_LABEL_VALUE;
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_CAPTION:
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT_CAPTION:
      labelMode_ = OrgGeogebraCommonKernelGeosGeoElement_LABEL_CAPTION;
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT:
      [self setLabelModeDefault];
      break;
      default:
      labelMode_ = OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME;
    }
  }
}

- (void)setLabelModeDefault {
  labelMode_ = OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME;
}

- (jint)getLabelMode {
  return labelMode_;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 1) autorelease];
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)deepCopyGeo {
  return [self copy__];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copyInternalWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)consToCopy {
  OrgGeogebraCommonKernelGeosGeoElement *geoCopy = [self copy__];
  [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geoCopy)) setConstructionWithOrgGeogebraCommonKernelConstruction:consToCopy];
  return geoCopy;
}

+ (IOSObjectArray *)copyPointsWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                   withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  return OrgGeogebraCommonKernelGeosGeoElement_copyPointsWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, points);
}

+ (IOSObjectArray *)copyPointsNDWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                     withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  return OrgGeogebraCommonKernelGeosGeoElement_copyPointsNDWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, points);
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel1 {
  return [self copy__];
}

- (void)resolveVariables {
}

- (jboolean)isInfinite {
  return NO;
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isDefined {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setUndefined {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setViewForValueStringWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  OrgGeogebraCommonKernelGeosGeoElement_set_viewForValueString_(self, view);
}

- (id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>)getViewForValueString {
  return viewForValueString_;
}

- (jboolean)hasValueStringChangeableRegardingView {
  return NO;
}

- (NSString *)getRedefineStringWithBoolean:(jboolean)useChangeable
                               withBoolean:(jboolean)useOutputValueString {
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_editTemplate_();
  NSString *ret = @"";
  jboolean isIndependent = ![self isPointOnPath] && useChangeable ? [self isChangeable] : [self isIndependent];
  if (isIndependent) {
    ret = useOutputValueString ? [self toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : [self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  else if (OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self) != nil) {
    ret = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self))) getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return ret;
}

- (jchar)getLabelDelimiter {
  return '=';
}

- (NSString *)getDefinitionForInputBar {
  NSString *inputBarStr = OrgGeogebraCommonKernelGeosGeoElement_getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate_(self, OrgGeogebraCommonKernelStringTemplate_get_editTemplate_());
  if (![((NSString *) nil_chk(inputBarStr)) isEqual:@""]) {
    jchar delimiter = [self getLabelDelimiter];
    if ([inputBarStr indexOf:delimiter] < 0) {
      inputBarStr = JreStrcat("$@C$", [self getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_editTemplate_()], (delimiter == '=' ? @" =" : JavaLangCharacter_valueOfWithChar_(delimiter)), ' ', inputBarStr);
    }
  }
  else {
    inputBarStr = OrgGeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionWithOrgGeogebraCommonKernelStringTemplate_(self, OrgGeogebraCommonKernelStringTemplate_get_editTemplate_());
  }
  return inputBarStr;
}

- (NSString *)getValueForInputBar {
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_editTemplate_();
  NSString *ret = [self toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  return ret;
}

- (void)setZero {
}

- (NSString *)toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if ([self isLocalVariable]) {
    return label_;
  }
  return [self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (void)setConstructionDefaults {
  OrgGeogebraCommonKernelGeosGeoElement_setConstructionDefaultsWithBoolean_(self, YES);
}

- (void)setConstructionDefaultsWithBoolean:(jboolean)setEuclidianVisible {
  OrgGeogebraCommonKernelGeosGeoElement_setConstructionDefaultsWithBoolean_(self, setEuclidianVisible);
}

- (void)setObjColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color {
  isColorSet__ = YES;
  OrgGeogebraCommonKernelGeosGeoElement_set_objColor_(self, color);
  OrgGeogebraCommonKernelGeosGeoElement_set_labelColor_(self, color);
  OrgGeogebraCommonKernelGeosGeoElement_set_fillColor_(self, color);
  [self setAlphaValueWithFloat:alphaValue_];
  if (color != nil) {
    OrgGeogebraCommonKernelGeosGeoElement_set_selColor_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:[color getRed] withInt:[color getGreen] withInt:[color getBlue] withInt:100]);
  }
}

- (jboolean)isColorSet {
  return isColorSet__;
}

- (OrgGeogebraCommonAwtGColor *)getRGBFromListWithFloat:(jfloat)alpha1 {
  return OrgGeogebraCommonKernelGeosGeoElement_getRGBFromListWithFloat_(self, alpha1);
}

- (OrgGeogebraCommonAwtGColor *)getRGBFromListWithInt:(jint)withAlpha {
  return OrgGeogebraCommonKernelGeosGeoElement_getRGBFromListWithInt_(self, withAlpha);
}

- (OrgGeogebraCommonAwtGColor *)getSelColor {
  if (colFunction_ == nil) {
    return selColor_;
  }
  return OrgGeogebraCommonKernelGeosGeoElement_getRGBFromListWithInt_(self, 100);
}

- (OrgGeogebraCommonAwtGColor *)getFillColor {
  if (colFunction_ == nil) {
    return fillColor_;
  }
  return OrgGeogebraCommonKernelGeosGeoElement_getRGBFromListWithFloat_(self, [self getAlphaValue]);
}

- (OrgGeogebraCommonAwtGColor *)getAlgebraColor {
  OrgGeogebraCommonAwtGColor *col = [self getLabelColor];
  return [((OrgGeogebraCommonAwtGColor *) nil_chk(col)) isEqual:OrgGeogebraCommonAwtGColor_get_WHITE_()] ? OrgGeogebraCommonAwtGColor_get_BLACK_() : col;
}

- (OrgGeogebraCommonAwtGColor *)getLabelColor {
  if (colFunction_ == nil) {
    return labelColor_;
  }
  return [self getObjectColor];
}

- (void)setLabelColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color {
  OrgGeogebraCommonKernelGeosGeoElement_set_labelColor_(self, color);
}

- (OrgGeogebraCommonAwtGColor *)getBackgroundColor {
  return bgColor_;
}

- (void)setBackgroundColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)bgCol {
  OrgGeogebraCommonKernelGeosGeoElement_set_bgColor_(self, bgCol);
}

- (OrgGeogebraCommonAwtGColor *)getObjectColor {
  OrgGeogebraCommonAwtGColor *col = objColor_;
  @try {
    if (colFunction_ != nil) {
      col = OrgGeogebraCommonKernelGeosGeoElement_getRGBFromListWithInt_(self, 255);
    }
  }
  @catch (JavaLangException *e) {
    [self removeColorFunction];
  }
  return col;
}

- (void)setLayerWithInt:(jint)layer2 {
  jint newlayer = layer2;
  if (layer2 == self->layer_) {
    return;
  }
  if (newlayer > OrgGeogebraCommonPluginEuclidianStyleConstants_MAX_LAYERS) {
    newlayer = OrgGeogebraCommonPluginEuclidianStyleConstants_MAX_LAYERS;
  }
  else if (newlayer < 0) {
    newlayer = 0;
  }
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyChangeLayerWithOrgGeogebraCommonKernelGeosGeoElement:self withInt:self->layer_ withInt:newlayer];
  self->layer_ = newlayer;
}

- (jint)getLayer {
  return layer_;
}

- (jint)typePriority {
  return OrgGeogebraCommonKernelGeosGeoElement_typePriority(self);
}

- (jboolean)drawBeforeWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)other
                                                    withBoolean:(jboolean)checkLastHitType {
  if ([self getLayer] < [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(other)) getLayer]) {
    return YES;
  }
  if ([self getLayer] > [other getLayer]) {
    return NO;
  }
  if (checkLastHitType) {
    if ([self getLastHitType] == OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY() && [other getLastHitType] != OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY()) {
      return YES;
    }
    if ([self getLastHitType] != OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY() && [other getLastHitType] == OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY()) {
      return NO;
    }
  }
  if (OrgGeogebraCommonKernelGeosGeoElement_typePriority(self) < OrgGeogebraCommonKernelGeosGeoElement_typePriority(other)) {
    return YES;
  }
  if (OrgGeogebraCommonKernelGeosGeoElement_typePriority(self) > OrgGeogebraCommonKernelGeosGeoElement_typePriority(other)) {
    return NO;
  }
  if ([self getConstructionIndex] < [other getConstructionIndex]) {
    return YES;
  }
  if ([self getConstructionIndex] > [other getConstructionIndex]) {
    return NO;
  }
  if ([OrgGeogebraCommonKernelAlgosAlgoMacroInterface_class_() isInstance:OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self)]) {
    return [((id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface>) nil_chk(((id<OrgGeogebraCommonKernelAlgosAlgoMacroInterface>) check_protocol_cast(OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self), @protocol(OrgGeogebraCommonKernelAlgosAlgoMacroInterface))))) drawBeforeWithOrgGeogebraCommonKernelGeosGeoElement:self withOrgGeogebraCommonKernelGeosGeoElement:other];
  }
  return YES;
}

- (void)setAlphaValueWithFloat:(jfloat)alpha {
  if ((fillColor_ == nil) || (alpha < 0.0f) || (alpha > 1.0f)) {
    return;
  }
  alphaValue_ = alpha;
  IOSFloatArray *rgb = [IOSFloatArray arrayWithLength:3];
  [((OrgGeogebraCommonAwtGColor *) nil_chk(fillColor_)) getRGBColorComponentsWithFloatArray:rgb];
  OrgGeogebraCommonKernelGeosGeoElement_set_fillColor_(self, [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithFloat:IOSFloatArray_Get(rgb, 0) withFloat:IOSFloatArray_Get(rgb, 1) withFloat:IOSFloatArray_Get(rgb, 2) withFloat:alpha]);
}

- (jfloat)getAlphaValue {
  if ((colFunction_ == nil) || ([colFunction_ size] == 3)) {
    return alphaValue_;
  }
  OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(colFunction_)) getWithInt:3];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined]) {
    jdouble alpha = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))) getDouble];
    alpha = (alpha / 2) - JavaLangMath_floorWithDouble_(alpha / 2);
    if (alpha > 0.5) {
      alpha = 2 * (1 - alpha);
    }
    else {
      alpha = 2 * alpha;
    }
    return (jfloat) alpha;
  }
  return alphaValue_;
}

- (jboolean)isLimitedPath {
  return NO;
}

- (jboolean)isPath {
  return NO;
}

- (jboolean)isRegion {
  return NO;
}

- (jboolean)isGeoList {
  return NO;
}

- (void)setAllVisualPropertiesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                            withBoolean:(jboolean)keepAdvanced {
  euclidianVisible_ = ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->euclidianVisible_;
  [self setAllVisualPropertiesExceptEuclidianVisibleWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:keepAdvanced];
}

- (void)setAllVisualPropertiesExceptEuclidianVisibleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                                  withBoolean:(jboolean)keepAdvanced {
  if (keepAdvanced) {
    [self setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  else {
    [self setAdvancedVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  algebraVisible_ = ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->algebraVisible_;
  labelOffsetX_ = geo->labelOffsetX_;
  labelOffsetY_ = geo->labelOffsetY_;
  OrgGeogebraCommonKernelGeosGeoElement_set_caption_(self, geo->caption_);
  inverseFill_ = geo->inverseFill_;
  if ([self isTraceable] && [geo isTraceable]) {
    [((id<OrgGeogebraCommonKernelGeosTraceable>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelGeosTraceable))) setTraceWithBoolean:[((id<OrgGeogebraCommonKernelGeosTraceable>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelGeosTraceable))) getTrace]];
  }
  if ([((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk([self getGeoClassType])) isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_POINT()] && [((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk([geo getGeoClassType])) isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_POINT()]) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(self, [OrgGeogebraCommonKernelGeosGeoPoint class])) setSpreadsheetTraceWithBoolean:[((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPoint class])) getSpreadsheetTrace]];
  }
  if (!keepAdvanced) {
    if (geo->colFunction_ != nil) {
      [self setColorFunctionWithOrgGeogebraCommonKernelGeosGeoList:geo->colFunction_];
    }
  }
  if (!keepAdvanced) {
    if (geo->condShowObject_ != nil) {
      @try {
        [self setShowObjectConditionWithOrgGeogebraCommonKernelGeosGeoBoolean:OrgGeogebraCommonKernelGeosGeoElement_getShowObjectCondition(geo)];
      }
      @catch (JavaLangException *e) {
      }
    }
  }
  if ([self isSpreadsheetTraceable] && [geo getSpreadsheetTrace]) {
    [self setSpreadsheetTraceWithBoolean:YES];
    OrgGeogebraCommonKernelGeosGeoElement_set_traceSettings_(self, geo->traceSettings_);
  }
}

- (void)setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [self setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  OrgGeogebraCommonKernelGeosGeoElement_setFixedWithBoolean_(self, NO);
  [self updateVisualStyle];
}

- (void)setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  labelVisible_ = ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->labelVisible_;
  [self setLabelModeWithInt:geo->labelMode_];
  tooltipMode_ = geo->tooltipMode_;
  if ([self getGeoClassType] == [geo getGeoClassType]) {
    toStringMode_ = geo->toStringMode_;
  }
  [self setColorVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  [self setLineThicknessWithInt:geo->lineThickness_];
  [self setLineTypeWithInt:geo->lineType_];
  [self setLineTypeHiddenWithInt:geo->lineTypeHidden_];
  [self setDecorationTypeWithInt:geo->decorationType_];
  [self setLineOpacityWithInt:[geo getLineOpacity]];
  [self setAuxiliaryObjectWithBoolean:OrgGeogebraCommonKernelGeosGeoElement_isAuxiliaryObject(geo)];
  OrgGeogebraCommonKernelGeosGeoElement_setFixedWithBoolean_(self, [geo isFixed]);
  if (layer_ == 0) {
    [self setLayerWithInt:[geo getLayer]];
  }
}

- (void)setColorVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isSequentialColor]) {
    OrgGeogebraCommonAwtGColor *next = [((OrgGeogebraCommonKernelConstructionDefaults *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getConstructionDefaults])) getNextColor];
    OrgGeogebraCommonKernelGeosGeoElement_set_objColor_(self, next);
    OrgGeogebraCommonKernelGeosGeoElement_set_selColor_(self, next);
    OrgGeogebraCommonKernelGeosGeoElement_set_labelColor_(self, next);
    return;
  }
  OrgGeogebraCommonKernelGeosGeoElement_set_objColor_(self, geo->objColor_);
  OrgGeogebraCommonKernelGeosGeoElement_set_selColor_(self, geo->selColor_);
  OrgGeogebraCommonKernelGeosGeoElement_set_labelColor_(self, geo->labelColor_);
  if ([geo isFillable]) {
    OrgGeogebraCommonKernelGeosGeoElement_set_fillColor_(self, geo->fillColor_);
    OrgGeogebraCommonKernelGeosGeoElement_set_fillType_(self, geo->fillType_);
    hatchingAngle_ = geo->hatchingAngle_;
    hatchingDistance_ = geo->hatchingDistance_;
    [((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk(graphicsadapter_)) setImageFileNameWithNSString:[((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([geo getGraphicsAdapter])) getImageFileName]];
    alphaValue_ = geo->alphaValue_;
  }
  else {
    OrgGeogebraCommonKernelGeosGeoElement_set_fillColor_(self, geo->objColor_);
    [self setAlphaValueWithFloat:[geo getAlphaValue]];
  }
  OrgGeogebraCommonKernelGeosGeoElement_set_bgColor_(self, geo->bgColor_);
  isColorSet__ = [geo isColorSet];
}

- (jboolean)isSequentialColor {
  return self->sequentialColor_;
}

- (void)setSequentialColorWithBoolean:(jboolean)sequential {
  self->sequentialColor_ = sequential;
}

- (void)setAdvancedVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [self setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  [self setLayerWithInt:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer]];
  [self setColorFunctionWithOrgGeogebraCommonKernelGeosGeoList:OrgGeogebraCommonKernelGeosGeoElement_getColorFunction(geo)];
  [self setColorSpaceWithInt:[geo getColorSpace]];
  @try {
    [self setShowObjectConditionWithOrgGeogebraCommonKernelGeosGeoBoolean:OrgGeogebraCommonKernelGeosGeoElement_getShowObjectCondition(geo)];
  }
  @catch (JavaLangException *e) {
  }
}

- (void)setAdvancedVisualStyleCopyWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (OrgGeogebraCommonKernelGeosGeoElement_getColorFunction(nil_chk(geo)) != nil) {
    [self setColorFunctionWithOrgGeogebraCommonKernelGeosGeoList:[((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(OrgGeogebraCommonKernelGeosGeoElement_getColorFunction(geo))) deepCopyGeo]];
    [self setColorSpaceWithInt:[geo getColorSpace]];
  }
  if (OrgGeogebraCommonKernelGeosGeoElement_getShowObjectCondition(geo) != nil) {
    @try {
      [self setShowObjectConditionWithOrgGeogebraCommonKernelGeosGeoBoolean:[((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(OrgGeogebraCommonKernelGeosGeoElement_getShowObjectCondition(geo))) copy__]];
    }
    @catch (JavaLangException *e) {
    }
  }
}

- (OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *)getGraphicsAdapter {
  return graphicsadapter_;
}

- (void)setLabelOffsetWithInt:(jint)xcoord
                      withInt:(jint)ycoord {
  jint x = xcoord;
  jint y = ycoord;
  jdouble len = OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x, y);
  if (len > OrgGeogebraCommonKernelGeosGeoElement_MAX_LABEL_OFFSET) {
    jdouble factor = OrgGeogebraCommonKernelGeosGeoElement_MAX_LABEL_OFFSET / len;
    x = (jint) JavaLangMath_roundWithDouble_(factor * x);
    y = (jint) JavaLangMath_roundWithDouble_(factor * y);
  }
  labelOffsetX_ = x;
  labelOffsetY_ = y;
}

- (jboolean)isVisible {
  return OrgGeogebraCommonKernelGeosGeoElement_isVisible(self);
}

- (jboolean)isEuclidianVisible {
  return OrgGeogebraCommonKernelGeosGeoElement_isEuclidianVisible(self);
}

- (void)setEuclidianVisibleWithBoolean:(jboolean)visible {
  euclidianVisible_ = visible;
}

- (void)setEuclidianVisibleIfNoConditionToShowObjectWithBoolean:(jboolean)visible {
  if (condShowObject_ == nil) {
    [self setEuclidianVisibleWithBoolean:visible];
  }
}

- (void)forceEuclidianVisibleWithBoolean:(jboolean)visible {
  forceEuclidianVisible__ = visible;
}

- (jboolean)isSetEuclidianVisible {
  return euclidianVisible_;
}

- (jboolean)isConsProtocolBreakpoint {
  return isConsProtBreakpoint_;
}

- (void)setConsProtocolBreakpointWithBoolean:(jboolean)flag {
  isConsProtBreakpoint_ = flag;
}

- (IOSObjectArray *)getSiblings {
  if (algoParent_ != nil) {
    return [algoParent_ getOutput];
  }
  return nil;
}

- (jboolean)isDrawable {
  return YES;
}

- (jboolean)isFillable {
  return NO;
}

- (jboolean)isInverseFillable {
  return NO;
}

- (jboolean)isTraceable {
  return NO;
}

- (jboolean)isFixed {
  return fixed_;
}

- (void)setFixedWithBoolean:(jboolean)flag {
  OrgGeogebraCommonKernelGeosGeoElement_setFixedWithBoolean_(self, flag);
}

- (jboolean)isFixable {
  return YES;
}

- (void)removeOrSetUndefinedIfHasFixedDescendent {
  if ([self isFixed]) {
    return;
  }
  jboolean hasFixedDescendent = NO;
  id<JavaUtilSet> tree = OrgGeogebraCommonKernelGeosGeoElement_getAllChildren(self);
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(tree)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (hasFixedDescendent == NO)) {
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([it next])) isFixed]) {
      hasFixedDescendent = YES;
    }
  }
  if (hasFixedDescendent) {
    [self setUndefined];
    [self updateRepaint];
  }
  else {
    [self remove];
    [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRemoveGroup];
  }
}

- (jboolean)isAuxiliaryObject {
  return OrgGeogebraCommonKernelGeosGeoElement_isAuxiliaryObject(self);
}

- (jboolean)isAuxiliaryObjectByDefault {
  return NO;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)toGeoElement {
  return self;
}

- (void)setAuxiliaryObjectWithBoolean:(jboolean)flag {
  if (auxiliaryObject_ != flag) {
    auxiliaryObject_ = flag;
    if (labelSet_) {
      OrgGeogebraCommonKernelGeosGeoElement_notifyUpdateAuxiliaryObject(self);
    }
  }
}

- (void)setLabelVisibleWithBoolean:(jboolean)visible {
  labelVisible_ = visible;
}

- (jboolean)isLabelVisible {
  return labelVisible_ && [self isLabelSet];
}

- (jboolean)getLabelVisible {
  return labelVisible_;
}

- (jboolean)isLabelShowable {
  return [self isDrawable] && !([OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:self] || [self isGeoImage] || [self isGeoButton] || [self isGeoLocus] || ([self isGeoBoolean] && ![self isIndependent]));
}

- (jboolean)isLabelValueShowable {
  return YES;
}

- (jboolean)isAlgebraVisible {
  return OrgGeogebraCommonKernelGeosGeoElement_isAlgebraVisible(self);
}

- (jboolean)showToolTipText {
  switch (tooltipMode_) {
    default:
    if (!([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isUsingFullGui] && [((OrgGeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) showViewWithInt:OrgGeogebraCommonMainApp_VIEW_ALGEBRA])) {
      return NO;
    }
    return OrgGeogebraCommonKernelGeosGeoElement_isAlgebraVisible(self);
    case OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_OFF:
    return NO;
    case OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_ON:
    case OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_CAPTION:
    case OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_NEXTCELL:
    return YES;
  }
}

- (NSString *)getTooltipTextWithBoolean:(jboolean)colored
                            withBoolean:(jboolean)alwaysOn {
  if ([OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self) isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoAttachCopyToView class]]) {
    return @"";
  }
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_();
  {
    NSString *ret;
    NSString *cellLabel;
    OrgGeogebraCommonAwtGPoint *coords;
    OrgGeogebraCommonKernelGeosGeoElement *geo;
    switch (tooltipMode_) {
      default:
      case OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_ALGEBRAVIEW_SHOWING:
      if (!alwaysOn) {
        if (!([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isUsingFullGui] && [((OrgGeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) showViewWithInt:OrgGeogebraCommonMainApp_VIEW_ALGEBRA])) {
          return @"";
        }
      }
      case OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_ON:
      [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) setTooltipFlag];
      ret = OrgGeogebraCommonKernelGeosGeoElement_getLongDescriptionHTMLWithBoolean_withBoolean_(self, colored, NO);
      [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) clearTooltipFlag];
      return ret;
      case OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_OFF:
      return @"";
      case OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_CAPTION:
      return [self getCaptionWithOrgGeogebraCommonKernelStringTemplate:tpl];
      case OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_NEXTCELL:
      cellLabel = [self getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
      coords = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(cellLabel);
      if (coords == nil) {
        return @"";
      }
      ((OrgGeogebraCommonAwtGPoint *) nil_chk(coords))->x_++;
      cellLabel = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(coords->x_, coords->y_);
      if (cellLabel == nil) {
        return @"";
      }
      geo = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:cellLabel];
      return (geo == nil) ? @"" : [geo toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
    }
  }
}

- (jint)getTooltipMode {
  return tooltipMode_;
}

- (void)setTooltipModeWithInt:(jint)mode {
  switch (mode) {
    default:
    tooltipMode_ = OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_ALGEBRAVIEW_SHOWING;
    break;
    case OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_OFF:
    case OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_ON:
    case OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_CAPTION:
    case OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_NEXTCELL:
    tooltipMode_ = mode;
    break;
  }
}

- (void)setAlgebraVisibleWithBoolean:(jboolean)visible {
  algebraVisible_ = visible;
}

- (jboolean)isSetAlgebraVisible {
  return algebraVisible_;
}

- (jboolean)showInAlgebraView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)showInEuclidianView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isAlgebraViewEditable {
  return YES;
}

- (jboolean)isEuclidianShowable {
  return [self showInEuclidianView];
}

- (jboolean)isAlgebraShowable {
  return [self showInAlgebraView];
}

- (void)setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algorithm {
  OrgGeogebraCommonKernelGeosGeoElement_set_algoParent_(self, algorithm);
}

- (OrgGeogebraCommonKernelAlgosAlgoElement *)getParentAlgorithm {
  return OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self);
}

- (void)setDrawAlgorithmWithOrgGeogebraCommonKernelAlgosDrawInformationAlgo:(id<OrgGeogebraCommonKernelAlgosDrawInformationAlgo>)algorithm {
  if ([algorithm isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoElement class]]) {
    OrgGeogebraCommonKernelGeosGeoElement_set_algoDraw_(self, (OrgGeogebraCommonKernelAlgosAlgoElement *) check_class_cast(algorithm, [OrgGeogebraCommonKernelAlgosAlgoElement class]));
  }
}

- (OrgGeogebraCommonKernelAlgosAlgoElement *)getDrawAlgorithm {
  if (algoDraw_ == nil) {
    return algoParent_;
  }
  return algoDraw_;
}

- (JavaUtilArrayList *)getAlgorithmList {
  return OrgGeogebraCommonKernelGeosGeoElement_getAlgorithmList(self);
}

- (jboolean)isIndependent {
  return (algoParent_ == nil) && (OrgGeogebraCommonKernelGeosGeoElement_getCorrespondingCasCell(self) == nil || ![((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk(OrgGeogebraCommonKernelGeosGeoElement_getCorrespondingCasCell(self))) hasVariablesOrCommands]);
}

- (jboolean)isChangeable {
  return !fixed_ && [self isIndependent];
}

- (jboolean)isPointOnPath {
  return NO;
}

- (jboolean)isRedefineable {
  return !fixed_ && [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) letRedefine] && !([OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:self] || [self isGeoImage]) && ([self isChangeable] || ![self isIndependent]);
}

- (jboolean)isMoveable {
  return [self isChangeable];
}

- (jboolean)is6dofMoveable {
  return NO;
}

- (jboolean)isMoveableWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  return [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(view)) isMoveableWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

- (jboolean)hasMoveableInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  switch ([[self getGeoClassType] ordinal]) {
    case OrgGeogebraCommonPluginGeoClass_CONIC:
    case OrgGeogebraCommonPluginGeoClass_CONIC3D:
    if ([OrgGeogebraCommonKernelAlgosAlgoCirclePointRadiusInterface_class_() isInstance:OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self)]) {
      return OrgGeogebraCommonKernelGeosGeoElement_containsOnlyMoveableGeosWithJavaUtilArrayList_([self getFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view]);
    }
    case OrgGeogebraCommonPluginGeoClass_CONICPART:
    case OrgGeogebraCommonPluginGeoClass_IMAGE:
    case OrgGeogebraCommonPluginGeoClass_LINE:
    case OrgGeogebraCommonPluginGeoClass_LINE3D:
    case OrgGeogebraCommonPluginGeoClass_RAY:
    case OrgGeogebraCommonPluginGeoClass_RAY3D:
    case OrgGeogebraCommonPluginGeoClass_SEGMENT:
    case OrgGeogebraCommonPluginGeoClass_SEGMENT3D:
    case OrgGeogebraCommonPluginGeoClass_TEXT:
    return OrgGeogebraCommonKernelGeosGeoElement_hasOnlyFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self, view) && OrgGeogebraCommonKernelGeosGeoElement_containsOnlyMoveableGeosWithJavaUtilArrayList_([self getFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view]);
    case OrgGeogebraCommonPluginGeoClass_POLYGON:
    case OrgGeogebraCommonPluginGeoClass_POLYGON3D:
    case OrgGeogebraCommonPluginGeoClass_POLYLINE:
    case OrgGeogebraCommonPluginGeoClass_POLYLINE3D:
    case OrgGeogebraCommonPluginGeoClass_PENSTROKE:
    return OrgGeogebraCommonKernelGeosGeoElement_containsOnlyMoveableGeosWithJavaUtilArrayList_([self getFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view]);
    case OrgGeogebraCommonPluginGeoClass_VECTOR:
    case OrgGeogebraCommonPluginGeoClass_VECTOR3D:
    if (OrgGeogebraCommonKernelGeosGeoElement_hasOnlyFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self, view) && OrgGeogebraCommonKernelGeosGeoElement_containsOnlyMoveableGeosWithJavaUtilArrayList_([self getFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view])) {
      JavaUtilArrayList *freeInputPoints = [self getFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view];
      if ([((JavaUtilArrayList *) nil_chk(freeInputPoints)) size] > 0) {
        id<OrgGeogebraCommonKernelKernelNDGeoPointND> firstInputPoint = [freeInputPoints getWithInt:0];
        id<OrgGeogebraCommonKernelKernelNDGeoPointND> startPoint = [((id<OrgGeogebraCommonKernelLocateable>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelLocateable))) getStartPoint];
        return firstInputPoint == startPoint;
      }
    }
    break;
    case OrgGeogebraCommonPluginGeoClass_ANGLE:
    break;
    case OrgGeogebraCommonPluginGeoClass_ANGLE3D:
    break;
    case OrgGeogebraCommonPluginGeoClass_AXIS:
    break;
    case OrgGeogebraCommonPluginGeoClass_AXIS3D:
    break;
    case OrgGeogebraCommonPluginGeoClass_BOOLEAN:
    break;
    case OrgGeogebraCommonPluginGeoClass_BUTTON:
    break;
    case OrgGeogebraCommonPluginGeoClass_CAS_CELL:
    break;
    case OrgGeogebraCommonPluginGeoClass_CLIPPINGCUBE3D:
    break;
    case OrgGeogebraCommonPluginGeoClass_CONICSECTION:
    break;
    case OrgGeogebraCommonPluginGeoClass_CURVE_CARTESIAN:
    break;
    case OrgGeogebraCommonPluginGeoClass_CURVE_CARTESIAN3D:
    break;
    case OrgGeogebraCommonPluginGeoClass_CURVE_POLAR:
    break;
    case OrgGeogebraCommonPluginGeoClass_DEFAULT:
    break;
    case OrgGeogebraCommonPluginGeoClass_FUNCTION:
    break;
    case OrgGeogebraCommonPluginGeoClass_FUNCTIONCONDITIONAL:
    break;
    case OrgGeogebraCommonPluginGeoClass_FUNCTION_NVAR:
    break;
    case OrgGeogebraCommonPluginGeoClass_IMPLICIT_CURVE:
    break;
    case OrgGeogebraCommonPluginGeoClass_IMPLICIT_POLY:
    break;
    case OrgGeogebraCommonPluginGeoClass_INTERVAL:
    break;
    case OrgGeogebraCommonPluginGeoClass_LIST:
    break;
    case OrgGeogebraCommonPluginGeoClass_LOCUS:
    break;
    case OrgGeogebraCommonPluginGeoClass_NET:
    break;
    case OrgGeogebraCommonPluginGeoClass_NUMERIC:
    break;
    case OrgGeogebraCommonPluginGeoClass_PLANE3D:
    break;
    case OrgGeogebraCommonPluginGeoClass_POINT:
    break;
    case OrgGeogebraCommonPluginGeoClass_POINT3D:
    break;
    case OrgGeogebraCommonPluginGeoClass_POLYHEDRON:
    break;
    case OrgGeogebraCommonPluginGeoClass_QUADRIC:
    break;
    case OrgGeogebraCommonPluginGeoClass_QUADRIC_LIMITED:
    break;
    case OrgGeogebraCommonPluginGeoClass_QUADRIC_PART:
    break;
    case OrgGeogebraCommonPluginGeoClass_SPACE:
    break;
    case OrgGeogebraCommonPluginGeoClass_SPLINE:
    break;
    case OrgGeogebraCommonPluginGeoClass_SURFACECARTESIAN3D:
    break;
    case OrgGeogebraCommonPluginGeoClass_TEXTFIELD:
    break;
    case OrgGeogebraCommonPluginGeoClass_TURTLE:
    break;
    default:
    break;
  }
  return NO;
}

- (JavaUtilArrayList *)getFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  if (algoParent_ == nil) {
    return nil;
  }
  return [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(view)) getFreeInputPointsWithOrgGeogebraCommonKernelAlgosAlgoElement:algoParent_];
}

- (jboolean)hasOnlyFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  return OrgGeogebraCommonKernelGeosGeoElement_hasOnlyFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self, view);
}

+ (jboolean)containsOnlyMoveableGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  return OrgGeogebraCommonKernelGeosGeoElement_containsOnlyMoveableGeosWithJavaUtilArrayList_(geos);
}

- (jboolean)isTranslateable {
  return NO;
}

- (jboolean)isRotateMoveable {
  return [self isChangeable] && ([OrgGeogebraCommonKernelGeosPointRotateable_class_() isInstance:self]);
}

- (jboolean)hasProperties {
  return OrgGeogebraCommonKernelGeosGeoElement_isGeoElement(self);
}

- (void)setAnimationStepWithDouble:(jdouble)s {
  [self setAnimationStepWithOrgGeogebraCommonKernelArithmeticNumberValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, s) autorelease]];
}

- (void)setAnimationStepWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)v {
  OrgGeogebraCommonKernelGeosGeoElement_set_animationIncrement_(self, v);
}

- (jdouble)getAnimationStep {
  if (animationIncrement_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_setAndConsume_animationIncrement_(self, new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, OrgGeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_INCREMENT_()));
  }
  return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(animationIncrement_)) getDouble];
}

- (id<OrgGeogebraCommonKernelArithmeticNumberValue>)getAnimationStepObject {
  if (animationIncrement_ == nil) {
    return nil;
  }
  return animationIncrement_;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getAnimationSpeedObject {
  if (animationSpeedObj_ == nil) {
    return nil;
  }
  return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(animationSpeedObj_)) toGeoElement];
}

- (jdouble)getAnimationSpeed {
  if (animationSpeedObj_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_initAnimationSpeedObject(self);
  }
  jdouble speed = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(animationSpeedObj_)) getDouble];
  if (JavaLangDouble_isNaNWithDouble_(speed)) {
    speed = 0;
  }
  else if (speed > OrgGeogebraCommonKernelGeosGeoElement_MAX_ANIMATION_SPEED) {
    speed = OrgGeogebraCommonKernelGeosGeoElement_MAX_ANIMATION_SPEED;
  }
  else if (speed < -OrgGeogebraCommonKernelGeosGeoElement_MAX_ANIMATION_SPEED) {
    speed = -OrgGeogebraCommonKernelGeosGeoElement_MAX_ANIMATION_SPEED;
  }
  return speed;
}

- (void)setAnimationSpeedObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)speed {
  OrgGeogebraCommonKernelGeosGeoElement_set_animationSpeedObj_(self, speed);
}

- (void)setAnimationSpeedWithDouble:(jdouble)speed {
  OrgGeogebraCommonKernelGeosGeoElement_initAnimationSpeedObject(self);
  OrgGeogebraCommonKernelGeosGeoElement *speedObj = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(animationSpeedObj_)) toGeoElement];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(speedObj)) isGeoNumeric] && [speedObj isIndependent]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(speedObj, [OrgGeogebraCommonKernelGeosGeoNumeric class])) setValueWithDouble:speed];
  }
}

- (void)initAnimationSpeedObject {
  OrgGeogebraCommonKernelGeosGeoElement_initAnimationSpeedObject(self);
}

- (jint)getAnimationType {
  return animationType_;
}

- (void)setAnimationTypeWithInt:(jint)type {
  switch (type) {
    case OrgGeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING_ONCE:
    case OrgGeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING:
    case OrgGeogebraCommonKernelGeosGeoElement_ANIMATION_OSCILLATING:
    animationType_ = type;
    animationDirection_ = 1;
    break;
    case OrgGeogebraCommonKernelGeosGeoElement_ANIMATION_DECREASING:
    animationType_ = type;
    animationDirection_ = -1;
    break;
  }
}

- (jint)getAnimationDirection {
  return animationDirection_;
}

- (void)changeAnimationDirection {
  animationDirection_ = -animationDirection_;
}

- (void)setAnimatingWithBoolean:(jboolean)flag {
  @synchronized(self) {
    jboolean oldValue = animating_;
    animating_ = (flag && [self isAnimatable]);
    if (oldValue != animating_) {
      OrgGeogebraCommonKernelAnimationManager *am = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAnimatonManager];
      if (animating_) {
        [((OrgGeogebraCommonKernelAnimationManager *) nil_chk(am)) addAnimatedGeoWithOrgGeogebraCommonKernelGeosGeoElement:self];
      }
      else {
        [((OrgGeogebraCommonKernelAnimationManager *) nil_chk(am)) removeAnimatedGeoWithOrgGeogebraCommonKernelGeosGeoElement:self];
      }
    }
  }
}

- (jboolean)isAnimating {
  return OrgGeogebraCommonKernelGeosGeoElement_isAnimating(self);
}

- (jboolean)isAnimatable {
  return NO;
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self getFormulaStringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:!symbolic];
}

- (NSString *)toCasAssignmentWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (!labelSet_) {
    return nil;
  }
  NSString *retval = @"";
  @try {
    NSString *body = [self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
    retval = JreStrcat("$$$", [self getAssignmentLHSWithOrgGeogebraCommonKernelStringTemplate:tpl], @" := ", body);
  }
  @finally {
  }
  return retval;
}

- (NSString *)getAssignmentLHSWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)getCASStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                        withBoolean:(jboolean)symbolic {
  return symbolic && ![self isIndependent] ? OrgGeogebraCommonKernelGeosGeoElement_getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate_(self, tpl) : [self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (void)addCellRangeUser {
  ++cellRangeUsers_;
}

- (void)removeCellRangeUser {
  if (cellRangeUsers_ > 0) {
    --cellRangeUsers_;
  }
}

- (jboolean)isRenameable {
  return cellRangeUsers_ == 0;
}

- (jboolean)renameWithNSString:(NSString *)labelNew {
  NSString *newLabel = labelNew;
  if (![self isRenameable]) {
    return NO;
  }
  if (newLabel == nil) {
    return NO;
  }
  newLabel = [((NSString *) nil_chk(newLabel)) trim];
  if (((jint) [((NSString *) nil_chk(newLabel)) length]) == 0) {
    return NO;
  }
  NSString *labelOld = label_;
  if ([newLabel isEqual:labelOld]) {
    return NO;
  }
  else if ([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isFreeLabelWithNSString:newLabel]) {
    [self setLabelWithNSString:newLabel];
    return YES;
  }
  else {
    IOSObjectArray *str = [IOSObjectArray arrayWithObjects:(id[]){ @"NameUsed", newLabel } count:2 type:NSString_class_()];
    @throw [new_OrgGeogebraCommonMainMyError_initWithOrgGeogebraCommonMainLocalization_withNSStringArray_([self getLoc], str) autorelease];
  }
}

- (jboolean)isLabelSet {
  return labelSet_;
}

- (void)setLabelWithNSString:(NSString *)labelNew {
  NSString *newLabel = labelNew;
  if ([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive]) {
    return;
  }
  if ((newLabel != nil) && ([newLabel indexOf:'$'] > -1)) {
    newLabel = [newLabel replaceAll:@"\\$" withReplacement:@""];
  }
  labelWanted_ = YES;
  if (!labelSet_) {
    if (OrgGeogebraCommonKernelGeosGeoElement_isVisible(self)) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:newLabel];
      if (geo != nil) {
        OrgGeogebraCommonKernelGeosGeoElement_doRenameLabelWithNSString_(geo, [self getFreeLabelWithNSString:newLabel]);
      }
      OrgGeogebraCommonKernelGeosGeoElement_doSetLabelWithNSString_(self, [self getFreeLabelWithNSString:newLabel]);
    }
    else {
      OrgGeogebraCommonKernelGeosGeoElement_set_label_(self, newLabel);
    }
  }
  else if ([self isRenameable]) {
    if ([cons_ isFreeLabelWithNSString:newLabel]) {
      OrgGeogebraCommonKernelGeosGeoElement_doRenameLabelWithNSString_(self, newLabel);
    }
    else {
    }
  }
}

- (void)setLoadedLabelWithNSString:(NSString *)label {
  if (labelSet_) {
    OrgGeogebraCommonKernelGeosGeoElement_doRenameLabelWithNSString_(self, label);
  }
  else {
    OrgGeogebraCommonKernelGeosGeoElement_doSetLabelWithNSString_(self, [self getFreeLabelWithNSString:label]);
  }
}

- (jboolean)setCaptionWithNSString:(NSString *)caption1 {
  NSString *caption2 = caption1;
  if ((caption2 == nil) || [caption2 isEqual:label_]) {
    OrgGeogebraCommonKernelGeosGeoElement_set_caption_(self, nil);
    return NO;
  }
  caption2 = [((NSString *) nil_chk(caption2)) trim];
  if (((jint) [((NSString *) nil_chk([((NSString *) nil_chk(caption2)) trim])) length]) == 0) {
    OrgGeogebraCommonKernelGeosGeoElement_set_caption_(self, nil);
    return YES;
  }
  OrgGeogebraCommonKernelGeosGeoElement_set_caption_(self, [caption2 trim]);
  return YES;
}

- (NSString *)getCaptionSimple {
  return caption_;
}

- (NSString *)getCaptionWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (caption_ == nil) {
    return [self getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  if ([((NSString *) nil_chk(caption_)) indexOf:'%'] < 0) {
    return caption_;
  }
  JavaLangStringBuilder *captionSB = [new_JavaLangStringBuilder_init() autorelease];
  for (jint i = 0; i < ((jint) [caption_ length]); i++) {
    jchar ch = [caption_ charAtWithInt:i];
    if ((ch == '%') && (i < (((jint) [caption_ length]) - 1))) {
      i++;
      ch = [caption_ charAtWithInt:i];
      {
        NSString *cText;
        switch (ch) {
          case 'c':
          cText = @"";
          if (label_ != nil) {
            OrgGeogebraCommonAwtGPoint *p = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetIndicesWithNSString_(label_);
            if (((OrgGeogebraCommonAwtGPoint *) nil_chk(p))->x_ > -1 && p->y_ > -1) {
              NSString *labelR1 = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(p->x_ + 1, p->y_);
              OrgGeogebraCommonKernelGeosGeoElement *geoR1 = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:labelR1];
              if (geoR1 != nil) {
                cText = [geoR1 toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
              }
            }
          }
          [captionSB appendWithNSString:cText];
          break;
          case 'v':
          [captionSB appendWithNSString:[self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
          break;
          case 'n':
          [captionSB appendWithNSString:[self getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]];
          break;
          case 'x':
          if ([self isGeoPoint]) {
            [captionSB appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))) getInhomCoords])) getX] withOrgGeogebraCommonKernelStringTemplate:tpl]];
          }
          else if ([self isGeoVector]) {
            [captionSB appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:IOSDoubleArray_Get(nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND))) getInhomCoords]), 0) withOrgGeogebraCommonKernelStringTemplate:tpl]];
          }
          else if ([self isGeoLine]) {
            [captionSB appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(self, [OrgGeogebraCommonKernelGeosGeoLine class])) getX] withOrgGeogebraCommonKernelStringTemplate:tpl]];
          }
          else {
            [captionSB appendWithNSString:@"%x"];
          }
          break;
          case 'y':
          if ([self isGeoPoint]) {
            [captionSB appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))) getInhomCoords])) getY] withOrgGeogebraCommonKernelStringTemplate:tpl]];
          }
          else if ([self isGeoVector]) {
            [captionSB appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:IOSDoubleArray_Get(nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND))) getInhomCoords]), 1) withOrgGeogebraCommonKernelStringTemplate:tpl]];
          }
          else if ([self isGeoLine]) {
            [captionSB appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(self, [OrgGeogebraCommonKernelGeosGeoLine class])) getY] withOrgGeogebraCommonKernelStringTemplate:tpl]];
          }
          else {
            [captionSB appendWithNSString:@"%y"];
          }
          break;
          case 'z':
          if ([self isGeoPoint]) {
            [captionSB appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND))) getInhomCoords])) getZ] withOrgGeogebraCommonKernelStringTemplate:tpl]];
          }
          else if ([self isGeoVector]) {
            [captionSB appendWithNSString:((IOSDoubleArray *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND))) getInhomCoords]))->size_ < 3 ? @"0" : [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:IOSDoubleArray_Get(nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelKernelNDGeoVectorND))) getInhomCoords]), 2) withOrgGeogebraCommonKernelStringTemplate:tpl]];
          }
          else if ([self isGeoLine]) {
            [captionSB appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(self, [OrgGeogebraCommonKernelGeosGeoLine class])) getZ] withOrgGeogebraCommonKernelStringTemplate:tpl]];
          }
          else {
            [captionSB appendWithNSString:@"%z"];
          }
          break;
          default:
          [captionSB appendWithChar:'%'];
          [captionSB appendWithChar:ch];
        }
      }
    }
    else {
      [captionSB appendWithChar:ch];
    }
  }
  if ([captionSB length] == 0) {
    return [self getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) translationFixWithNSString:[captionSB description]];
}

- (NSString *)getRawCaption {
  if (caption_ == nil) {
    return @"";
  }
  return caption_;
}

- (NSString *)getCaptionDescriptionWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (caption_ == nil) {
    return @"";
  }
  return [self getCaptionWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (void)setLocalVariableLabelWithNSString:(NSString *)label {
  OrgGeogebraCommonKernelGeosGeoElement_set_oldLabel_(self, self->label_);
  OrgGeogebraCommonKernelGeosGeoElement_set_label_(self, label);
  localVarLabelSet_ = YES;
}

- (void)undoLocalVariableLabel {
  if (oldLabel_ != nil) {
    OrgGeogebraCommonKernelGeosGeoElement_set_label_(self, oldLabel_);
    localVarLabelSet_ = NO;
  }
}

- (jboolean)isLocalVariable {
  return localVarLabelSet_;
}

- (void)doSetLabelWithNSString:(NSString *)newLabel {
  OrgGeogebraCommonKernelGeosGeoElement_doSetLabelWithNSString_(self, newLabel);
}

- (void)updateSpreadsheetCoordinates {
  OrgGeogebraCommonKernelGeosGeoElement_updateSpreadsheetCoordinates(self);
}

- (NSString *)getSpreadsheetLabelWithDollarsWithBoolean:(jboolean)col$
                                            withBoolean:(jboolean)row$ {
  NSString *colName = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnNameWithInt_(((OrgGeogebraCommonAwtGPoint *) nil_chk(spreadsheetCoords_))->x_);
  NSString *rowName = JavaLangInteger_toStringWithInt_(spreadsheetCoords_->y_ + 1);
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(((jint) [((NSString *) nil_chk(label_)) length]) + 2) autorelease];
  if (col$) {
    [sb appendWithChar:'$'];
  }
  [sb appendWithNSString:colName];
  if (row$) {
    [sb appendWithChar:'$'];
  }
  [sb appendWithNSString:rowName];
  return [sb description];
}

+ (jint)compareLabelsWithNSString:(NSString *)label1
                     withNSString:(NSString *)label2 {
  return OrgGeogebraCommonKernelGeosGeoElement_compareLabelsWithNSString_withNSString_(label1, label2);
}

- (void)doRenameLabelWithNSString:(NSString *)newLabel {
  OrgGeogebraCommonKernelGeosGeoElement_doRenameLabelWithNSString_(self, newLabel);
}

- (NSString *)getOldLabel {
  return oldLabel_;
}

+ (void)setLabelsWithNSString:(NSString *)labelPrefix
withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)geos {
  OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSString_withOrgGeogebraCommonKernelGeosGeoElementArray_(labelPrefix, geos);
}

+ (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)geos {
  OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(labels, geos);
}

+ (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels
withOrgGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)geos
                       withBoolean:(jboolean)indexedOnly {
  OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_withBoolean_(labels, geos, indexedOnly);
}

- (NSString *)getFreeLabelWithNSString:(NSString *)suggestedLabel {
  if (suggestedLabel != nil) {
    if ([@"x" isEqual:suggestedLabel] || [@"y" isEqual:suggestedLabel]) {
      return [self getDefaultLabelWithBoolean:NO];
    }
    if ([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isFreeLabelWithNSString:suggestedLabel]) {
      return suggestedLabel;
    }
    else if (((jint) [suggestedLabel length]) > 0) {
      return [self getIndexLabelWithNSString:suggestedLabel];
    }
  }
  return [self getDefaultLabelWithBoolean:NO];
}

- (NSString *)getDefaultLabelWithBoolean:(jboolean)isInteger {
  return [self getDefaultLabelWithCharArray:nil withBoolean:isInteger];
}

- (NSString *)getDefaultLabel {
  return [self getDefaultLabelWithCharArray:nil withBoolean:NO];
}

- (NSString *)getDefaultLabelWithCharArray:(IOSCharArray *)chars2
                               withBoolean:(jboolean)isInteger {
  IOSCharArray *chars = chars2;
  if (chars == nil) {
    if ([self isGeoPoint] && !([self isKindOfClass:[OrgGeogebraCommonKernelGeosGeoTurtle class]])) {
      if ([((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) isUsingLocalizedLabels]) {
        if ([((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) languageIsWithNSString:((OrgGeogebraCommonUtilLanguageEnum *) nil_chk(OrgGeogebraCommonUtilLanguageEnum_get_Greek()))->locale_]) {
          chars = OrgGeogebraCommonKernelGeosGeoElement_greekUpperCase_;
        }
        else if ([((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) languageIsWithNSString:((OrgGeogebraCommonUtilLanguageEnum *) nil_chk(OrgGeogebraCommonUtilLanguageEnum_get_Arabic()))->locale_]) {
          chars = OrgGeogebraCommonKernelGeosGeoElement_arabic_;
        }
        else if ([((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) languageIsWithNSString:((OrgGeogebraCommonUtilLanguageEnum *) nil_chk(OrgGeogebraCommonUtilLanguageEnum_get_Yiddish()))->locale_]) {
          chars = OrgGeogebraCommonKernelGeosGeoElement_yiddish_;
        }
        else {
          chars = OrgGeogebraCommonKernelGeosGeoElement_pointLabels_;
        }
      }
      else {
        chars = OrgGeogebraCommonKernelGeosGeoElement_pointLabels_;
      }
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND));
      if ([point getMode] == OrgGeogebraCommonKernelKernel_COORD_COMPLEX) {
        NSString *complexLabel = @"z_1";
        jint i = 1;
        while (![((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isFreeLabelWithNSString:complexLabel]) {
          i++;
          if (i < 9) {
            complexLabel = JreStrcat("$I", @"z_", i);
          }
          else {
            complexLabel = JreStrcat("$IC", @"z_{", i, '}');
          }
        }
        return complexLabel;
      }
    }
    else if ([self isGeoFunction]) {
      chars = OrgGeogebraCommonKernelGeosGeoElement_functionLabels_;
    }
    else if ([self isGeoLine]) {
      if ([self getMetasLength] == 1 && ![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([((id<OrgGeogebraCommonKernelGeosFromMeta>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelGeosFromMeta))) getMetas]), 0))) isGeoPolygon]) {
        jint counter = 0;
        NSString *str;
        NSString *name = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainLabelWithNSString:@"edge"];
        do {
          counter++;
          str = JreStrcat("$$", name, [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) internationalizeDigitsWithNSString:JreStrcat("I", counter) withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
        }
        while (![((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isFreeLabelWithNSString:str]);
        return str;
      }
      chars = OrgGeogebraCommonKernelGeosGeoElement_lineLabels_;
    }
    else if ([self isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPenStroke class]]) {
      return OrgGeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"penStroke");
    }
    else if ([self isGeoPolyLine]) {
      chars = OrgGeogebraCommonKernelGeosGeoElement_lineLabels_;
    }
    else if ([self isGeoConic]) {
      chars = OrgGeogebraCommonKernelGeosGeoElement_conicLabels_;
    }
    else if ([self isGeoVector] || [self evaluatesTo3DVector]) {
      chars = OrgGeogebraCommonKernelGeosGeoElement_vectorLabels_;
    }
    else if ([self isGeoAngle]) {
      chars = OrgGeogebraCommonKernelGeosGeoElement_greekLowerCase_;
    }
    else if ([self isGeoText]) {
      return OrgGeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"text");
    }
    else if ([self isGeoImage]) {
      return OrgGeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"picture");
    }
    else if ([self isGeoLocus]) {
      if ([((id<OrgGeogebraCommonKernelAlgosGetCommand>) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getClassName])) isEqual:OrgGeogebraCommonKernelCommandsCommandsEnum_get_SolveODE()] || [algoParent_ isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoIntegralODE class]] || [((id<OrgGeogebraCommonKernelAlgosGetCommand>) nil_chk([algoParent_ getClassName])) isEqual:OrgGeogebraCommonKernelCommandsCommandsEnum_get_NSolveODE()]) {
        return OrgGeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"numericalIntegral");
      }
      else if ([((id<OrgGeogebraCommonKernelAlgosGetCommand>) nil_chk([algoParent_ getClassName])) isEqual:OrgGeogebraCommonKernelCommandsCommandsEnum_get_SlopeField()]) {
        return OrgGeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"slopefield");
      }
      else if ([OrgGeogebraCommonKernelGraphAlgo_class_() isInstance:algoParent_]) {
        return OrgGeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"graph");
      }
      return OrgGeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"locus");
    }
    else if ([self isGeoTextField]) {
      return OrgGeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"textfield");
    }
    else if ([self isGeoButton]) {
      return OrgGeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"button");
    }
    else if ([self isGeoTurtle]) {
      return OrgGeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"turtle");
    }
    else if ([self isGeoList]) {
      OrgGeogebraCommonKernelGeosGeoList *list = (OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self, [OrgGeogebraCommonKernelGeosGeoList class]);
      return OrgGeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, [list isMatrix] ? @"matrix" : @"list");
    }
    else if (isInteger && [self isGeoNumeric]) {
      chars = OrgGeogebraCommonKernelGeosGeoElement_integerLabels_;
    }
    else {
      chars = OrgGeogebraCommonKernelGeosGeoElement_lowerCaseLabels_;
    }
  }
  jint counter = 0, q, r;
  JavaLangStringBuilder *sbDefaultLabel = [new_JavaLangStringBuilder_init() autorelease];
  jboolean repeat = YES;
  while (repeat) {
    [sbDefaultLabel setLengthWithInt:0];
    q = counter / ((IOSCharArray *) nil_chk(chars))->size_;
    r = counter % chars->size_;
    jchar ch = IOSCharArray_Get(chars, r);
    [sbDefaultLabel appendWithChar:ch];
    if (ch == 0x0647) {
      [sbDefaultLabel appendWithChar:0x0640];
    }
    if (q > 0) {
      if (q < 10) {
        [sbDefaultLabel appendWithChar:'_'];
        [sbDefaultLabel appendWithInt:q];
      }
      else {
        [sbDefaultLabel appendWithNSString:@"_{"];
        [sbDefaultLabel appendWithInt:q];
        [sbDefaultLabel appendWithChar:'}'];
      }
    }
    counter++;
    repeat = ![((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isFreeLabelWithNSString:[sbDefaultLabel description] withBoolean:YES withBoolean:YES];
  }
  return [sbDefaultLabel description];
}

- (NSString *)defaultNumberedLabelWithNSString:(NSString *)plainKey {
  return OrgGeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, plainKey);
}

- (NSString *)getIndexLabelWithNSString:(NSString *)prefix {
  if (prefix == nil) {
    return JreStrcat("$$", [self getFreeLabelWithNSString:nil], @"_1");
  }
  return [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) getIndexLabelWithNSString:prefix];
}

- (jboolean)isGeoTextField {
  return NO;
}

- (void)setEmptySpreadsheetCellWithBoolean:(jboolean)isEmptySpreadsheetCell {
  self->isEmptySpreadsheetCell__ = isEmptySpreadsheetCell;
}

- (jboolean)isEmptySpreadsheetCell {
  return isEmptySpreadsheetCell__;
}

- (void)remove {
  if (algoParent_ != nil) {
    [algoParent_ removeWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
  else {
    if (correspondingCasCell_ != nil) {
      [correspondingCasCell_ doRemove];
    }
    [self doRemove];
  }
}

- (void)doRemove {
  [self setAnimatingWithBoolean:NO];
  if ([self isIndependent]) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self];
  }
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self);
  if (algo != nil) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) unregisterEuclidianViewCEWithOrgGeogebraCommonKernelEuclidianViewCE:algo];
  }
  if (condShowObject_ != nil) {
    [condShowObject_ unregisterConditionListenerWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
  if (colFunction_ != nil) {
    [colFunction_ unregisterColorFunctionListenerWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
  if (algorithmList_ != nil) {
    IOSObjectArray *algos = [algorithmList_ toArray];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(algos))->size_; i++) {
      algo = (OrgGeogebraCommonKernelAlgosAlgoElement *) check_class_cast(IOSObjectArray_Get(algos, i), [OrgGeogebraCommonKernelAlgosAlgoElement class]);
      [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) removeWithOrgGeogebraCommonKernelGeosGeoElement:self];
    }
  }
  if ([self isLabelSet]) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeLabelWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
  if (OrgGeogebraCommonKernelGeosGeoElement_isSelected(self)) {
    [((OrgGeogebraCommonMainSelectionManager *) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getSelectionManager])) removeSelectedGeoWithOrgGeogebraCommonKernelGeosGeoElement:self withBoolean:NO withBoolean:![((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isRemovingGeoToReplaceIt]];
  }
  OrgGeogebraCommonKernelGeosGeoElement_notifyRemove(self);
  labelSet_ = NO;
  labelWanted_ = NO;
  OrgGeogebraCommonKernelGeosGeoElement_set_correspondingCasCell_(self, nil);
  if (latexCache_ != nil) {
    [latexCache_ remove];
  }
}

- (id<OrgGeogebraCommonUtilLaTeXCache>)getLaTeXCache {
  if (latexCache_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_set_latexCache_(self, [((OrgGeogebraCommonFactoriesLaTeXFactory *) nil_chk(OrgGeogebraCommonFactoriesLaTeXFactory_get_prototype_())) newLaTeXCache]);
  }
  return latexCache_;
}

- (void)notifyAdd {
  OrgGeogebraCommonKernelGeosGeoElement_notifyAdd(self);
}

- (void)notifyRemove {
  OrgGeogebraCommonKernelGeosGeoElement_notifyRemove(self);
}

- (void)notifyUpdate {
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

- (void)notifyUpdateAuxiliaryObject {
  OrgGeogebraCommonKernelGeosGeoElement_notifyUpdateAuxiliaryObject(self);
}

- (void)addAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algorithm {
  if (!([((JavaUtilArrayList *) nil_chk(OrgGeogebraCommonKernelGeosGeoElement_getAlgorithmList(self))) containsWithId:algorithm])) {
    [((JavaUtilArrayList *) nil_chk(algorithmList_)) addWithId:algorithm];
  }
  [self addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
}

- (void)addToAlgorithmListOnlyWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algorithm {
  if (![((JavaUtilArrayList *) nil_chk(OrgGeogebraCommonKernelGeosGeoElement_getAlgorithmList(self))) containsWithId:algorithm]) {
    [((JavaUtilArrayList *) nil_chk(algorithmList_)) addWithId:algorithm];
  }
}

- (void)addToUpdateSetOnlyWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algorithm {
  [self addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
}

- (void)removeAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algorithm {
  if (algorithmList_ != nil) {
    [algorithmList_ removeWithId:algorithm];
    [self removeFromUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
  }
}

- (OrgGeogebraCommonKernelAlgosAlgorithmSet *)getAlgoUpdateSet {
  if (algoUpdateSet_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_setAndConsume_algoUpdateSet_(self, new_OrgGeogebraCommonKernelAlgosAlgorithmSet_init());
  }
  return algoUpdateSet_;
}

- (jboolean)addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algorithm {
  jboolean added = [((OrgGeogebraCommonKernelAlgosAlgorithmSet *) nil_chk([self getAlgoUpdateSet])) addWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
  if (added) {
    if (algoParent_ != nil) {
      IOSObjectArray *input = [algoParent_ getInputForUpdateSetPropagation];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input))->size_; i++) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
      }
    }
  }
  return added;
}

- (jboolean)removeFromUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algorithm {
  jboolean removed = (algoUpdateSet_ != nil) && [algoUpdateSet_ removeWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
  if (removed) {
    if (algoParent_ != nil) {
      IOSObjectArray *input = [algoParent_ getInputForUpdateSetPropagation];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input))->size_; i++) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) removeFromUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:algorithm];
      }
    }
  }
  return removed;
}

- (void)update {
  OrgGeogebraCommonKernelGeosGeoElement_updateGeo(self);
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

- (void)updateGeo {
  OrgGeogebraCommonKernelGeosGeoElement_updateGeo(self);
}

- (void)algebraStringsNeedUpdate {
  OrgGeogebraCommonKernelGeosGeoElement_algebraStringsNeedUpdate(self);
}

- (void)updateCascade {
  jlong l = JavaLangSystem_currentTimeMillis();
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyBatchUpdate];
  [self update];
  OrgGeogebraCommonKernelGeosGeoElement_updateDependentObjects(self);
  OrgGeogebraCommonUtilDebugGeoGebraProfiler_addUpdateCascadeWithLong_(JavaLangSystem_currentTimeMillis() - l);
  [kernel_ notifyEndBatchUpdate];
}

- (void)updateDependentObjects {
  OrgGeogebraCommonKernelGeosGeoElement_updateDependentObjects(self);
}

- (void)updateAlgoUpdateSetWithWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)secondGeo {
  if (algoUpdateSet_ == nil) {
    if (((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(secondGeo))->algoUpdateSet_ == nil) {
      return;
    }
    [((OrgGeogebraCommonKernelAlgosAlgorithmSet *) nil_chk(secondGeo->algoUpdateSet_)) updateAll];
  }
  else {
    if (((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(secondGeo))->algoUpdateSet_ == nil) {
      [algoUpdateSet_ updateAll];
    }
    else {
      JavaUtilTreeSet *tempAlgoSet = OrgGeogebraCommonKernelGeosGeoElement_getTempSet();
      [((JavaUtilTreeSet *) nil_chk(tempAlgoSet)) clear];
      [algoUpdateSet_ addAllToCollectionWithJavaUtilCollection:tempAlgoSet];
      [secondGeo->algoUpdateSet_ addAllToCollectionWithJavaUtilCollection:tempAlgoSet];
      for (OrgGeogebraCommonKernelAlgosAlgoElement * __strong algo in tempAlgoSet) {
        [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) update];
      }
    }
  }
}

- (jboolean)hasAlgoUpdateSet {
  return algoUpdateSet_ != nil;
}

+ (void)updateCascadeWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                       withJavaUtilTreeSet:(JavaUtilTreeSet *)tempSet1
                               withBoolean:(jboolean)updateCascadeAll {
  OrgGeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(geos, tempSet1, updateCascadeAll);
}

+ (void)updateCascadeLocationWithJavaUtilArrayList:(JavaUtilArrayList *)geos
           withOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonKernelGeosGeoElement_updateCascadeLocationWithJavaUtilArrayList_withOrgGeogebraCommonKernelConstruction_(geos, cons);
}

+ (void)updateCascadeUntilWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                            withJavaUtilTreeSet:(JavaUtilTreeSet *)tempSet2
    withOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)lastAlgo {
  OrgGeogebraCommonKernelGeosGeoElement_updateCascadeUntilWithJavaUtilArrayList_withJavaUtilTreeSet_withOrgGeogebraCommonKernelAlgosAlgoElement_(geos, tempSet2, lastAlgo);
}

- (void)updateRepaint {
  [self updateCascade];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)updateVisualStyle {
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

- (void)updateVisualStyleRepaint {
  [self updateVisualStyle];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (NSString *)description {
  return [self toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
}

- (jboolean)isConstant {
  return NO;
}

- (jboolean)isLeaf {
  return YES;
}

- (jdouble)evaluateDouble {
  if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:self]) return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))) getDouble];
  return JavaLangDouble_NaN;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)evaluateWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if ([self isKindOfClass:[OrgGeogebraCommonKernelGeosGeoCasCell class]]) {
    return [((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(self, [OrgGeogebraCommonKernelGeosGeoCasCell class])) getOutputValidExpression];
  }
  return self;
}

- (JavaUtilHashSet *)getVariables {
  JavaUtilHashSet *ret = [new_JavaUtilHashSet_init() autorelease];
  [ret addWithId:self];
  return ret;
}

- (JavaUtilArrayList *)getRandomNumberPredecessorsWithoutLabels {
  if ([self isIndependent]) {
    return nil;
  }
  JavaUtilArrayList *randNumbers = nil;
  JavaUtilTreeSet *pred = [self getAllPredecessors];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(pred)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) {
      OrgGeogebraCommonKernelGeosGeoNumeric *num = (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class]);
      if ([num isRandomGeo] && ![num isLabelSet]) {
        if (randNumbers == nil) {
          randNumbers = [new_JavaUtilArrayList_init() autorelease];
        }
        [((JavaUtilArrayList *) nil_chk(randNumbers)) addWithId:num];
      }
    }
  }
  return randNumbers;
}

- (JavaUtilTreeSet *)getAllPredecessors {
  JavaUtilTreeSet *set = [new_JavaUtilTreeSet_init() autorelease];
  OrgGeogebraCommonKernelGeosGeoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(self, set, NO);
  [set removeWithId:self];
  return set;
}

- (JavaUtilTreeSet *)getAllIndependentPredecessors {
  JavaUtilTreeSet *set = [new_JavaUtilTreeSet_init() autorelease];
  OrgGeogebraCommonKernelGeosGeoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(self, set, YES);
  return set;
}

- (void)addPredecessorsToSetWithJavaUtilTreeSet:(JavaUtilTreeSet *)set
                                    withBoolean:(jboolean)onlyIndependent {
  OrgGeogebraCommonKernelGeosGeoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(self, set, onlyIndependent);
}

- (JavaUtilTreeSet *)getAllRandomizablePredecessors {
  JavaUtilTreeSet *set = [new_JavaUtilTreeSet_init() autorelease];
  OrgGeogebraCommonKernelGeosGeoElement_addRandomizablePredecessorsToSetWithJavaUtilTreeSet_(self, set);
  return set;
}

- (void)addRandomizablePredecessorsToSetWithJavaUtilTreeSet:(JavaUtilTreeSet *)set {
  OrgGeogebraCommonKernelGeosGeoElement_addRandomizablePredecessorsToSetWithJavaUtilTreeSet_(self, set);
}

- (jboolean)isParentOfWithOrgGeogebraCommonKernelKernelNDGeoElementND:(id<OrgGeogebraCommonKernelKernelNDGeoElementND>)geo {
  return OrgGeogebraCommonKernelGeosGeoElement_isParentOfWithOrgGeogebraCommonKernelKernelNDGeoElementND_(self, geo);
}

- (jboolean)hasChildren {
  return (algorithmList_ != nil) && ([algorithmList_ size] > 0);
}

- (jboolean)isChildOfWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return OrgGeogebraCommonKernelGeosGeoElement_isChildOfWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (jboolean)isChildOrEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return (self == geo) || OrgGeogebraCommonKernelGeosGeoElement_isChildOfWithOrgGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (JavaUtilTreeSet *)getAllChildren {
  return OrgGeogebraCommonKernelGeosGeoElement_getAllChildren(self);
}

- (IOSObjectArray *)getGeoElements {
  return [IOSObjectArray arrayWithObjects:(id[]){ self } count:1 type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
}

- (jboolean)isAlgoElement {
  return NO;
}

- (jboolean)isGeoElement {
  return OrgGeogebraCommonKernelGeosGeoElement_isGeoElement(self);
}

- (jint)getConstructionIndex {
  if (algoParent_ == nil) {
    return [super getConstructionIndex];
  }
  return [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getConstructionIndex];
}

- (jint)getMinConstructionIndex {
  if (algoParent_ == nil) {
    return 0;
  }
  return [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getMinConstructionIndex];
}

- (jint)getMaxConstructionIndex {
  if (algoParent_ == nil) {
    jint min = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) steps];
    jint size = algorithmList_ == nil ? 0 : [algorithmList_ size];
    for (jint i = 0; i < size; ++i) {
      jint index = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(([((JavaUtilArrayList *) nil_chk(algorithmList_)) getWithInt:i]))) getConstructionIndex];
      if (index < min) {
        min = index;
      }
    }
    return min - 1;
  }
  return [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getMaxConstructionIndex];
}

- (NSString *)getDefinitionDescriptionWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (algoParent_ == nil) {
    return @"";
  }
  return [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)getDefinitionDescriptionHTMLWithBoolean:(jboolean)addHTMLtag {
  if (algoParent_ == nil) {
    return @"";
  }
  return OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_([((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) translationFixWithNSString:[((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]], addHTMLtag);
}

- (NSString *)getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelGeosGeoElement_getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)getCommandDescriptionHTMLWithBoolean:(jboolean)addHTMLtag {
  if (algoParent_ == nil) {
    return @"";
  }
  return OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()], addHTMLtag);
}

- (jint)getRelatedModeID {
  if (algoParent_ == nil) {
    return -1;
  }
  return [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getRelatedModeID];
}

+ (void)convertIndicesToHTMLWithNSString:(NSString *)text
withOrgGeogebraCommonUtilIndexHTMLBuilder:(OrgGeogebraCommonUtilIndexHTMLBuilder *)builder {
  OrgGeogebraCommonKernelGeosGeoElement_convertIndicesToHTMLWithNSString_withOrgGeogebraCommonUtilIndexHTMLBuilder_(text, builder);
}

- (void)addLabelTextOrHTMLWithNSString:(NSString *)desc
withOrgGeogebraCommonUtilIndexHTMLBuilder:(OrgGeogebraCommonUtilIndexHTMLBuilder *)builder {
  NSString *ret;
  jboolean includesEqual = [((NSString *) nil_chk(desc)) indexOf:'='] >= 0;
  if (includesEqual && [desc hasPrefix:JreStrcat("$C", label_, '(')]) {
    ret = desc;
  }
  else {
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
    [sb appendWithNSString:label_];
    if (includesEqual) {
      [sb appendWithNSString:@": "];
    }
    else {
      [sb appendWithNSString:@" = "];
    }
    [sb appendWithNSString:desc];
    ret = [sb description];
  }
  OrgGeogebraCommonKernelGeosGeoElement_convertIndicesToHTMLWithNSString_withOrgGeogebraCommonUtilIndexHTMLBuilder_([((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) translationFixWithNSString:ret], builder);
}

- (NSString *)getCaptionDescriptionHTMLWithBoolean:(jboolean)addHTMLtag
         withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_([self getCaptionDescriptionWithOrgGeogebraCommonKernelStringTemplate:tpl], addHTMLtag);
}

- (NSString *)getXMLtypeString {
  return OrgGeogebraCommonKernelGeosGeoElement_getXMLtypeString(self);
}

- (NSString *)getTypeString {
  return ((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk([self getGeoClassType]))->name_GeoClass_;
}

- (NSString *)getTypeStringForAlgebraView {
  return [self getTypeString];
}

- (NSString *)translatedTypeString {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:[self getTypeString]];
}

- (NSString *)translatedTypeStringForAlgebraView {
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:[self getTypeStringForAlgebraView]];
}

- (NSString *)getLongDescription {
  if (algoParent_ == nil) {
    return [self getNameDescription];
  }
  JavaLangStringBuilder *sbLongDesc = [new_JavaLangStringBuilder_init() autorelease];
  [sbLongDesc appendWithNSString:[self getNameDescription]];
  [sbLongDesc appendWithNSString:@": "];
  [sbLongDesc appendWithNSString:[((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  return [sbLongDesc description];
}

- (NSString *)getLongDescriptionHTMLWithBoolean:(jboolean)colored
                                    withBoolean:(jboolean)addHTMLtag {
  return OrgGeogebraCommonKernelGeosGeoElement_getLongDescriptionHTMLWithBoolean_withBoolean_(self, colored, addHTMLtag);
}

- (NSString *)getColoredLabel {
  NSString *formatedLabel = [self getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  OrgGeogebraCommonAwtGColor *colorAdapter = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getRed] withInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getGreen] withInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getBlue]];
  [sb appendWithNSString:@"<b><font color=\"#"];
  [sb appendWithNSString:OrgGeogebraCommonUtilStringUtil_toHexStringWithOrgGeogebraCommonAwtGColor_(colorAdapter)];
  [sb appendWithNSString:@"\">"];
  [sb appendWithNSString:OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(formatedLabel, NO)];
  [sb appendWithNSString:@"</font></b>"];
  return [sb description];
}

+ (NSString *)getToolTipDescriptionHTMLWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                                 withBoolean:(jboolean)colored
                                                 withBoolean:(jboolean)addHTMLtag
                                                 withBoolean:(jboolean)alwaysOn {
  return OrgGeogebraCommonKernelGeosGeoElement_getToolTipDescriptionHTMLWithJavaUtilArrayList_withBoolean_withBoolean_withBoolean_(geos, colored, addHTMLtag, alwaysOn);
}

- (NSString *)getLabelDescription {
  switch (labelMode_) {
    case OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE:
    return OrgGeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionDefault(self);
    case OrgGeogebraCommonKernelGeosGeoElement_LABEL_VALUE:
    return OrgGeogebraCommonKernelGeosGeoElement_toDefinedValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_());
    case OrgGeogebraCommonKernelGeosGeoElement_LABEL_CAPTION:
    return [self getCaptionWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    default:
    return [self getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  }
}

- (NSString *)toDefinedValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelGeosGeoElement_toDefinedValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)getAlgebraDescriptionTextOrHTMLDefaultWithOrgGeogebraCommonUtilIndexHTMLBuilder:(OrgGeogebraCommonUtilIndexHTMLBuilder *)builder {
  if (strAlgebraDescTextOrHTMLneedsUpdate_) {
    NSString *algDesc = OrgGeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionDefault(self);
    if (OrgGeogebraCommonKernelGeosGeoElement_hasIndexLabel(self)) {
      OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withOrgGeogebraCommonUtilIndexHTMLBuilder_(algDesc, builder);
      OrgGeogebraCommonKernelGeosGeoElement_set_strAlgebraDescTextOrHTML_(self, [((OrgGeogebraCommonUtilIndexHTMLBuilder *) nil_chk(builder)) description]);
    }
    else {
      [((OrgGeogebraCommonUtilIndexHTMLBuilder *) nil_chk(builder)) clear];
      [builder appendWithNSString:algDesc];
      OrgGeogebraCommonKernelGeosGeoElement_set_strAlgebraDescTextOrHTML_(self, algDesc);
    }
    strAlgebraDescTextOrHTMLneedsUpdate_ = NO;
  }
  else {
    if (![((OrgGeogebraCommonUtilIndexHTMLBuilder *) nil_chk(builder)) canAppendRawHtml]) {
      OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withOrgGeogebraCommonUtilIndexHTMLBuilder_(strAlgebraDescription_, builder);
    }
    else {
      [builder clear];
      [builder appendWithNSString:strAlgebraDescTextOrHTML_];
    }
  }
  return strAlgebraDescTextOrHTML_;
}

- (NSString *)getAlgebraDescriptionHTMLDefault {
  if (strAlgebraDescriptionHTMLneedsUpdate_) {
    if ([self isGeoText]) {
      OrgGeogebraCommonKernelGeosGeoElement_set_strAlgebraDescriptionHTML_(self, OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_([self toValueStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()], NO));
    }
    else {
      OrgGeogebraCommonKernelGeosGeoElement_set_strAlgebraDescriptionHTML_(self, OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(OrgGeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionDefault(self), NO));
    }
    strAlgebraDescriptionHTMLneedsUpdate_ = NO;
  }
  return strAlgebraDescriptionHTML_;
}

- (NSString *)getLabelTextOrHTML {
  return OrgGeogebraCommonKernelGeosGeoElement_getLabelTextOrHTMLWithBoolean_(self, YES);
}

- (NSString *)getLabelTextOrHTMLWithBoolean:(jboolean)addHTMLTag {
  return OrgGeogebraCommonKernelGeosGeoElement_getLabelTextOrHTMLWithBoolean_(self, addHTMLTag);
}

- (NSString *)getAlgebraDescriptionWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)getAlgebraDescriptionDefault {
  return OrgGeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionDefault(self);
}

- (NSString *)getAlgebraDescriptionRegrOutWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (strAlgebraDescriptionNeedsUpdate_) {
    if ([self isDefined]) {
      OrgGeogebraCommonKernelGeosGeoElement_set_strAlgebraDescription_(self, [self toStringMinimalWithOrgGeogebraCommonKernelStringTemplate:tpl]);
    }
    else {
      JavaLangStringBuilder *sbAlgebraDesc = [new_JavaLangStringBuilder_init() autorelease];
      [sbAlgebraDesc appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"]];
      OrgGeogebraCommonKernelGeosGeoElement_set_strAlgebraDescription_(self, [sbAlgebraDesc description]);
    }
    strAlgebraDescriptionNeedsUpdate_ = NO;
  }
  else {
    OrgGeogebraCommonKernelGeosGeoElement_set_strAlgebraDescription_(self, [self toStringMinimalWithOrgGeogebraCommonKernelStringTemplate:tpl]);
  }
  return strAlgebraDescription_;
}

- (NSString *)toStringMinimalWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)getLaTeXdescription {
  if (strLaTeXneedsUpdate_) {
    if ([self isDefined] && ![self isInfinite]) {
      OrgGeogebraCommonKernelGeosGeoElement_set_strLaTeX_(self, [self toLaTeXStringWithBoolean:NO withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_()]);
    }
    else {
      OrgGeogebraCommonKernelGeosGeoElement_set_strLaTeX_(self, JreStrcat("$$$", @" \\text{", [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"], @"} "));
    }
  }
  return strLaTeX_;
}

- (NSString *)getLaTeXAlgebraDescriptionWithBoolean:(jboolean)substituteNumbers
          withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelGeosGeoElement_getLaTeXAlgebraDescriptionWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self, self, substituteNumbers, tpl);
}

- (NSString *)getLaTeXAlgebraDescriptionWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                      withBoolean:(jboolean)substituteNumbers
                                        withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelGeosGeoElement_getLaTeXAlgebraDescriptionWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(self, geo, substituteNumbers, tpl);
}

+ (NSString *)indicesToHTMLWithNSString:(NSString *)str
                            withBoolean:(jboolean)addHTMLtag {
  return OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(str, addHTMLtag);
}

+ (void)indicesToHTMLWithNSString:(NSString *)str
withOrgGeogebraCommonUtilIndexHTMLBuilder:(OrgGeogebraCommonUtilIndexHTMLBuilder *)sbIndicesToHTML {
  OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withOrgGeogebraCommonUtilIndexHTMLBuilder_(str, sbIndicesToHTML);
}

- (NSString *)getNameDescription {
  JavaLangStringBuilder *sbNameDescription = [new_JavaLangStringBuilder_init() autorelease];
  NSString *label1 = [self getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  NSString *typeString = [self translatedTypeString];
  if ([((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) isReverseNameDescriptionLanguage]) {
    [sbNameDescription appendWithNSString:label1];
    [sbNameDescription appendWithChar:' '];
    [sbNameDescription appendWithNSString:[((NSString *) nil_chk(typeString)) lowercaseString]];
  }
  else {
    [sbNameDescription appendWithNSString:typeString];
    [sbNameDescription appendWithChar:' '];
    [sbNameDescription appendWithNSString:label1];
  }
  return [sbNameDescription description];
}

- (NSString *)getNameDescriptionTextOrHTML {
  if (OrgGeogebraCommonKernelGeosGeoElement_hasIndexLabel(self)) {
    return [self getNameDescriptionHTMLWithBoolean:NO withBoolean:YES];
  }
  return [self getNameDescription];
}

- (jboolean)hasIndexLabel {
  return OrgGeogebraCommonKernelGeosGeoElement_hasIndexLabel(self);
}

- (NSString *)getNameDescriptionHTMLWithBoolean:(jboolean)colored
                                    withBoolean:(jboolean)addHTMLtag {
  JavaLangStringBuilder *sbNameDescriptionHTML = [new_JavaLangStringBuilder_init() autorelease];
  if (addHTMLtag) {
    [sbNameDescriptionHTML appendWithNSString:@"<html>"];
  }
  NSString *label1 = [self getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  NSString *typeString = [self translatedTypeString];
  jboolean reverseOrder = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) isReverseNameDescriptionLanguage];
  if (!reverseOrder && ![self isAxis]) {
    [sbNameDescriptionHTML appendWithNSString:typeString];
    [sbNameDescriptionHTML appendWithChar:' '];
  }
  if (colored) {
    OrgGeogebraCommonAwtGColor *colorAdapter = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getRed] withInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getGreen] withInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getBlue]];
    [sbNameDescriptionHTML appendWithNSString:@" <b><font color=\"#"];
    [sbNameDescriptionHTML appendWithNSString:OrgGeogebraCommonUtilStringUtil_toHexStringWithOrgGeogebraCommonAwtGColor_(colorAdapter)];
    [sbNameDescriptionHTML appendWithNSString:@"\">"];
  }
  [sbNameDescriptionHTML appendWithNSString:OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(label1, NO)];
  if (colored) {
    [sbNameDescriptionHTML appendWithNSString:@"</font></b>"];
  }
  if (reverseOrder && ![self isAxis]) {
    [sbNameDescriptionHTML appendWithChar:' '];
    [sbNameDescriptionHTML appendWithNSString:[((NSString *) nil_chk(typeString)) lowercaseString]];
  }
  if (addHTMLtag) {
    [sbNameDescriptionHTML appendWithNSString:@"</html>"];
  }
  return [sbNameDescriptionHTML description];
}

- (jboolean)isAxis {
  return NO;
}

- (NSString *)getXML {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [self getXMLWithBoolean:NO withJavaLangStringBuilder:sb];
  return [sb description];
}

- (void)getXMLWithBoolean:(jboolean)getListenersToo
withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [self getElementOpenTagXMLWithJavaLangStringBuilder:sb];
  [self getXMLtagsWithJavaLangStringBuilder:sb];
  OrgGeogebraCommonKernelGeosGeoElement_getCaptionXMLWithJavaLangStringBuilder_(self, sb);
  OrgGeogebraCommonKernelGeosGeoElement_getExtraTagsXMLWithJavaLangStringBuilder_(self, sb);
  if (getListenersToo) [self getListenerTagsXMLWithJavaLangStringBuilder:sb];
  [self getElementCloseTagXMLWithJavaLangStringBuilder:sb];
}

- (void)getListenerTagsXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonPluginScriptManager *scriptManager = [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getScriptManager];
  OrgGeogebraCommonKernelGeosGeoElement_getListenerTagXMLWithJavaLangStringBuilder_withJavaUtilHashMap_withNSString_(self, sb, [((OrgGeogebraCommonPluginScriptManager *) nil_chk(scriptManager)) getUpdateListenerMap], @"objectUpdate");
  OrgGeogebraCommonKernelGeosGeoElement_getListenerTagXMLWithJavaLangStringBuilder_withJavaUtilHashMap_withNSString_(self, sb, [scriptManager getUpdateListenerMap], @"objectClick");
}

- (void)getListenerTagXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                               withJavaUtilHashMap:(JavaUtilHashMap *)map
                                      withNSString:(NSString *)type {
  OrgGeogebraCommonKernelGeosGeoElement_getListenerTagXMLWithJavaLangStringBuilder_withJavaUtilHashMap_withNSString_(self, sb, map, type);
}

- (void)getElementOpenTagXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  NSString *type = OrgGeogebraCommonKernelGeosGeoElement_getXMLtypeString(self);
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<element"];
  [sb appendWithNSString:@" type=\""];
  [sb appendWithNSString:type];
  [sb appendWithNSString:@"\" label=\""];
  OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, label_);
  if (defaultGeoType_ >= 0) {
    [sb appendWithNSString:@"\" default=\""];
    [sb appendWithInt:defaultGeoType_];
  }
  [sb appendWithNSString:@"\">\n"];
}

- (void)getElementCloseTagXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"</element>\n"];
}

- (void)getScriptTagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (scripts_ == nil) {
    return;
  }
  OrgGeogebraCommonPluginScriptScript *clickScript = IOSObjectArray_Get(nil_chk(scripts_), [((OrgGeogebraCommonPluginEventTypeEnum *) nil_chk(OrgGeogebraCommonPluginEventTypeEnum_get_CLICK())) ordinal]);
  OrgGeogebraCommonPluginScriptScript *updateScript = IOSObjectArray_Get(scripts_, [((OrgGeogebraCommonPluginEventTypeEnum *) nil_chk(OrgGeogebraCommonPluginEventTypeEnum_get_UPDATE())) ordinal]);
  if (clickScript != nil) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<"];
    [sb appendWithId:[clickScript getXMLName]];
    [sb appendWithNSString:@" val=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [clickScript getInternalText]);
    [sb appendWithNSString:@"\"/>\n"];
  }
  if (updateScript != nil) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<"];
    [sb appendWithId:[updateScript getXMLName]];
    [sb appendWithNSString:@" onUpdate=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [updateScript getInternalText]);
    [sb appendWithNSString:@"\"/>\n"];
  }
}

- (void)getCaptionXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonKernelGeosGeoElement_getCaptionXMLWithJavaLangStringBuilder_(self, sb);
}

- (void)getAuxiliaryXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonKernelGeosGeoElement_getAuxiliaryXMLWithJavaLangStringBuilder_(self, sb);
}

- (void)getXMLvisualTagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [self getXMLvisualTagsWithJavaLangStringBuilder:sb withBoolean:YES];
}

- (void)getXMLvisualTagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                      withBoolean:(jboolean)withLabelOffset {
  jboolean isDrawable = [self isDrawable];
  if (isDrawable) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<show"];
    [sb appendWithNSString:@" object=\""];
    [sb appendWithBoolean:euclidianVisible_];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@" label=\""];
    [sb appendWithBoolean:labelVisible_];
    [sb appendWithNSString:@"\""];
    jint EVs = 0;
    if (![self isVisibleInViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN]) {
      EVs += 1;
    }
    if ([self isVisibleInViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN2]) {
      EVs += 2;
    }
    if ([self hasDrawable3D]) {
      switch ([visibleInView3D_ ordinal]) {
        case OrgGeogebraCommonKernelGeosGeoElement_VisibleInView_TRUE:
        EVs += 4;
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_VisibleInView_FALSE:
        EVs += 8;
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_VisibleInView_NOT_SET:
        break;
      }
      switch ([visibleInViewForPlane_ ordinal]) {
        case OrgGeogebraCommonKernelGeosGeoElement_VisibleInView_TRUE:
        EVs += 16;
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_VisibleInView_FALSE:
        EVs += 32;
        break;
        case OrgGeogebraCommonKernelGeosGeoElement_VisibleInView_NOT_SET:
        break;
      }
    }
    if (EVs != 0) {
      [sb appendWithNSString:@" ev=\""];
      [sb appendWithInt:EVs];
      [sb appendWithNSString:@"\""];
    }
    [sb appendWithNSString:@"/>\n"];
  }
  if ([self getShowTrimmedIntersectionLines]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<showTrimmed val=\"true\"/>\n"];
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:OrgGeogebraCommonKernelGeosGeoElement_getShowObjectConditionXML(self)];
  {
    [self appendObjectColorXMLWithJavaLangStringBuilder:sb];
  }
  if (bgColor_ != nil) {
    [sb appendWithNSString:@"\t<bgColor"];
    [sb appendWithNSString:@" r=\""];
    [sb appendWithInt:[bgColor_ getRed]];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@" g=\""];
    [sb appendWithInt:[bgColor_ getGreen]];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@" b=\""];
    [sb appendWithInt:[bgColor_ getBlue]];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@" alpha=\""];
    [sb appendWithInt:[bgColor_ getAlpha]];
    [sb appendWithNSString:@"\"/>\n"];
  }
  if (isDrawable) {
    [sb appendWithNSString:@"\t<layer "];
    [sb appendWithNSString:JreStrcat("$IC", @"val=\"", layer_, '"')];
    [sb appendWithNSString:@"/>\n"];
  }
  if (withLabelOffset && ((labelOffsetX_ != 0) || (labelOffsetY_ != 0))) {
    [sb appendWithNSString:@"\t<labelOffset"];
    [sb appendWithNSString:@" x=\""];
    [sb appendWithInt:labelOffsetX_];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@" y=\""];
    [sb appendWithInt:labelOffsetY_];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@"/>\n"];
  }
  if ([self isDrawable]) {
    [sb appendWithNSString:@"\t<labelMode"];
    [sb appendWithNSString:@" val=\""];
    [sb appendWithInt:labelMode_];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@"/>\n"];
    if (tooltipMode_ != OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_ALGEBRAVIEW_SHOWING) {
      [sb appendWithNSString:@"\t<tooltipMode"];
      [sb appendWithNSString:@" val=\""];
      [sb appendWithInt:tooltipMode_];
      [sb appendWithNSString:@"\""];
      [sb appendWithNSString:@"/>\n"];
    }
  }
  if ([self isTraceable]) {
    id<OrgGeogebraCommonKernelGeosTraceable> t = (id<OrgGeogebraCommonKernelGeosTraceable>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelGeosTraceable));
    if ([t getTrace]) {
      [sb appendWithNSString:@"\t<trace val=\"true\"/>\n"];
    }
  }
  if ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isUsingFullGui] && [self isSpreadsheetTraceable] && [self getSpreadsheetTrace]) {
    [sb appendWithNSString:[((OrgGeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) getTraceXMLWithOrgGeogebraCommonKernelGeosGeoElement:self]];
  }
  if (decorationType_ != OrgGeogebraCommonKernelGeosGeoElement_DECORATION_NONE) {
    [sb appendWithNSString:@"\t<decoration"];
    [sb appendWithNSString:@" type=\""];
    [sb appendWithInt:decorationType_];
    [sb appendWithNSString:@"\"/>\n"];
  }
}

- (void)appendObjectColorXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<objColor"];
  [sb appendWithNSString:@" r=\""];
  [sb appendWithInt:[((OrgGeogebraCommonAwtGColor *) nil_chk(objColor_)) getRed]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" g=\""];
  [sb appendWithInt:[objColor_ getGreen]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" b=\""];
  [sb appendWithInt:[objColor_ getBlue]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" alpha=\""];
  [sb appendWithFloat:[self getAlphaValue]];
  [sb appendWithNSString:@"\""];
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_();
  if ((colFunction_ != nil) && [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getSaveScriptsToXML]) {
    [sb appendWithNSString:@" dynamicr=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([colFunction_ getWithInt:0])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]);
    [sb appendWithChar:'"'];
    [sb appendWithNSString:@" dynamicg=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([colFunction_ getWithInt:1])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]);
    [sb appendWithChar:'"'];
    [sb appendWithNSString:@" dynamicb=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([colFunction_ getWithInt:2])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]);
    [sb appendWithChar:'"'];
    if ([colFunction_ size] == 4) {
      [sb appendWithNSString:@" dynamica=\""];
      OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([colFunction_ getWithInt:3])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]);
      [sb appendWithChar:'"'];
    }
    [sb appendWithNSString:@" colorSpace=\""];
    [sb appendWithInt:colorSpace_];
    [sb appendWithChar:'"'];
  }
  if ([self isHatchingEnabled]) {
    [sb appendWithNSString:@" fillType=\""];
    [sb appendWithInt:[((OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *) nil_chk(fillType_)) ordinal]];
    [sb appendWithNSString:@"\" hatchAngle=\""];
    [sb appendWithInt:hatchingAngle_];
    [sb appendWithNSString:@"\" hatchDistance=\""];
    [sb appendWithInt:hatchingDistance_];
    [sb appendWithNSString:@"\""];
  }
  else if (fillType_ == OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_IMAGE()) {
    [sb appendWithNSString:@" image=\""];
    [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk(graphicsadapter_)) getImageFileName]];
    [sb appendWithChar:'"'];
  }
  if (fillType_ == OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_SYMBOLS()) {
    [sb appendWithNSString:@" fillSymbol=\""];
    [sb appendWithNSString:fillSymbol_];
    [sb appendWithChar:'"'];
  }
  if (inverseFill_) {
    [sb appendWithNSString:@" inverseFill=\"true\""];
  }
  [sb appendWithNSString:@"/>\n"];
}

- (void)getXMLanimationTagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_();
  if ([self isChangeable]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<animation"];
    NSString *animStep = animationIncrement_ == nil ? @"1" : [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk([self getAnimationStepObject])) toGeoElement])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
    [sb appendWithNSString:@" step=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, animStep);
    [sb appendWithNSString:@"\""];
    NSString *animSpeed = animationSpeedObj_ == nil ? @"1" : [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getAnimationSpeedObject])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
    [sb appendWithNSString:@" speed=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, animSpeed);
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:JreStrcat("$IC", @" type=\"", animationType_, '"')];
    [sb appendWithNSString:@" playing=\""];
    [sb appendWithNSString:(OrgGeogebraCommonKernelGeosGeoElement_isAnimating(self) ? @"true" : @"false")];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@"/>\n"];
  }
}

- (void)getXMLfixedTagWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (fixed_ && [self isFixable]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<fixed val=\""];
    [sb appendWithBoolean:fixed_];
    [sb appendWithNSString:@"\"/>\n"];
  }
  if (!selectionAllowed_) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<selectionAllowed val=\""];
    [sb appendWithBoolean:selectionAllowed_];
    [sb appendWithNSString:@"\"/>\n"];
  }
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [self getXMLvisualTagsWithJavaLangStringBuilder:sb];
  [self getXMLanimationTagsWithJavaLangStringBuilder:sb];
  [self getXMLfixedTagWithJavaLangStringBuilder:sb];
  OrgGeogebraCommonKernelGeosGeoElement_getAuxiliaryXMLWithJavaLangStringBuilder_(self, sb);
  [self getBreakpointXMLWithJavaLangStringBuilder:sb];
  if ([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getSaveScriptsToXML]) {
    [self getScriptTagsWithJavaLangStringBuilder:sb];
  }
}

- (void)getExtraTagsXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgGeogebraCommonKernelGeosGeoElement_getExtraTagsXMLWithJavaLangStringBuilder_(self, sb);
}

- (void)getXMLtagsMinimalWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
         withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[self toValueStringMinimalWithOrgGeogebraCommonKernelStringTemplate:tpl]];
}

- (NSString *)toValueStringMinimalWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)regrFormatWithDouble:(jdouble)number {
  if (JavaLangMath_absWithDouble_(number) < 0.000001) {
    JavaLangDouble *numberD = [new_JavaLangDouble_initWithDouble_(number) autorelease];
    return [numberD description];
  }
  id<OrgGeogebraCommonUtilNumberFormatAdapter> df = [((OrgGeogebraCommonFactoriesFormatFactory *) nil_chk(OrgGeogebraCommonFactoriesFormatFactory_get_prototype_())) getNumberFormatWithNSString:@"#.######" withInt:6];
  return [((id<OrgGeogebraCommonUtilNumberFormatAdapter>) nil_chk(df)) formatWithDouble:number];
}

- (void)getLineStyleXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if ([self isGeoPoint]) {
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<lineStyle"];
  [sb appendWithNSString:@" thickness=\""];
  [sb appendWithInt:lineThickness_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" type=\""];
  [sb appendWithInt:lineType_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" typeHidden=\""];
  [sb appendWithInt:lineTypeHidden_];
  [sb appendWithNSString:@"\""];
  if ([self hasLineOpacity] && [self getLineOpacity] < 255) {
    [sb appendWithNSString:@" opacity=\""];
    [sb appendWithInt:lineOpacity_];
    [sb appendWithNSString:@"\""];
  }
  [sb appendWithNSString:@"/>\n"];
}

- (void)getBreakpointXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (isConsProtBreakpoint_) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<breakpoint val=\""];
    [sb appendWithBoolean:isConsProtBreakpoint_];
    [sb appendWithNSString:@"\"/>\n"];
  }
}

- (NSString *)getShowObjectConditionXML {
  return OrgGeogebraCommonKernelGeosGeoElement_getShowObjectConditionXML(self);
}

- (jint)getLineThickness {
  return lineThickness_;
}

- (jint)getMinimumLineThickness {
  return 1;
}

- (jint)getLineType {
  return lineType_;
}

- (jint)getLineTypeHidden {
  return lineTypeHidden_;
}

- (void)setLineThicknessWithInt:(jint)th {
  lineThickness_ = JavaLangMath_maxWithInt_withInt_(0, th);
}

- (void)setLineThicknessOrVisibilityWithInt:(jint)th {
  if ([self isRegion]) {
    [self setLineThicknessWithInt:th];
  }
  else {
    if (th > 0) {
      [self setEuclidianVisibleIfNoConditionToShowObjectWithBoolean:YES];
      [self setLineThicknessWithInt:th];
    }
    else {
      [self setEuclidianVisibleIfNoConditionToShowObjectWithBoolean:NO];
    }
  }
}

- (void)setLineTypeWithInt:(jint)i {
  lineType_ = i;
}

- (void)setLineTypeHiddenWithInt:(jint)i {
  lineTypeHidden_ = i;
}

- (void)setDecorationTypeWithInt:(jint)type {
  decorationType_ = type;
}

- (jboolean)isGeoElement3D {
  return NO;
}

- (jboolean)hasDrawable3D {
  return [self isGeoElement3D];
}

- (jboolean)hasLevelOfDetail {
  return NO;
}

- (jboolean)isGeoAngle {
  return NO;
}

- (jboolean)isGeoBoolean {
  return NO;
}

- (jboolean)isGeoPolyLine {
  return NO;
}

- (jboolean)isGeoImplicitPoly {
  return NO;
}

- (jboolean)isGeoConic {
  return NO;
}

- (jboolean)isGeoConicPart {
  return NO;
}

- (jboolean)isGeoFunction {
  return NO;
}

- (jboolean)isGeoFunctionNVar {
  return NO;
}

- (jboolean)isGeoFunctionBoolean {
  return NO;
}

- (jboolean)isGeoFunctionConditional {
  return NO;
}

- (jboolean)isGeoFunctionable {
  return NO;
}

- (jboolean)isGeoImage {
  return NO;
}

- (jboolean)isGeoTurtle {
  return NO;
}

- (jboolean)isGeoLine {
  return NO;
}

- (jboolean)isGeoPlane {
  return NO;
}

- (jboolean)isGeoQuadric {
  return NO;
}

- (jboolean)isGeoLocus {
  return NO;
}

- (jboolean)isGeoNumeric {
  return NO;
}

- (jboolean)isGeoPoint {
  return NO;
}

- (jboolean)isGeoCasCell {
  return NO;
}

- (jboolean)isGeoPolygon {
  return NO;
}

- (jboolean)isGeoPolyhedron {
  return NO;
}

- (jboolean)isGeoRay {
  return NO;
}

- (jboolean)isGeoSegment {
  return NO;
}

- (jboolean)isGeoText {
  return NO;
}

- (jboolean)isGeoVector {
  return NO;
}

- (jboolean)isGeoCurveCartesian {
  return NO;
}

- (jboolean)isGeoSurfaceCartesian {
  return NO;
}

- (jboolean)isCasEvaluableObject {
  return NO;
}

- (jboolean)isExpressionNode {
  return NO;
}

- (jboolean)isVariable {
  return NO;
}

- (jboolean)containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:(id<OrgGeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

- (void)setSelectedWithBoolean:(jboolean)flag {
  selected_ = flag;
}

- (void)setHighlightedWithBoolean:(jboolean)flag {
  highlighted_ = flag;
}

- (jboolean)doHighlighting {
  return (highlighted_ || selected_) && (![self isFixed] || OrgGeogebraCommonKernelGeosGeoElement_isSelectionAllowed(self));
}

- (jboolean)isSelected {
  return OrgGeogebraCommonKernelGeosGeoElement_isSelected(self);
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)isAngle {
  return NO;
}

- (jboolean)evaluatesToNonComplex2DVector {
  return NO;
}

- (jboolean)evaluatesToVectorNotPoint {
  return NO;
}

- (jboolean)isPolynomialInstance {
  return NO;
}

- (jboolean)evaluatesToText {
  return NO;
}

- (jboolean)evaluatesToList {
  return NO;
}

- (jboolean)isGeoButton {
  return NO;
}

- (jboolean)isUseVisualDefaults {
  return useVisualDefaults_;
}

- (void)setUseVisualDefaultsWithBoolean:(jboolean)useVisualDefaults {
  self->useVisualDefaults_ = useVisualDefaults;
}

- (jboolean)isAbsoluteScreenLocateable {
  return NO;
}

- (OrgGeogebraCommonKernelGeosGeoBoolean *)getShowObjectCondition {
  return OrgGeogebraCommonKernelGeosGeoElement_getShowObjectCondition(self);
}

- (void)setShowObjectConditionWithOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)cond {
  if (self == cond) {
    @throw [new_OrgGeogebraCommonKernelCircularDefinitionException_init() autorelease];
  }
  if (condShowObject_ != nil) {
    [condShowObject_ unregisterConditionListenerWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
  OrgGeogebraCommonKernelGeosGeoElement_set_condShowObject_(self, cond);
  if (condShowObject_ != nil) {
    [condShowObject_ registerConditionListenerWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
}

- (void)removeConditionWithOrgGeogebraCommonKernelGeosGeoBoolean:(OrgGeogebraCommonKernelGeosGeoBoolean *)bool_ {
  if (condShowObject_ == bool_) {
    OrgGeogebraCommonKernelGeosGeoElement_set_condShowObject_(self, nil);
  }
}

- (OrgGeogebraCommonKernelGeosGeoList *)getColorFunction {
  return OrgGeogebraCommonKernelGeosGeoElement_getColorFunction(self);
}

- (void)setColorFunctionWithOrgGeogebraCommonKernelGeosGeoList:(OrgGeogebraCommonKernelGeosGeoList *)col {
  if (colFunction_ != nil) {
    [colFunction_ unregisterColorFunctionListenerWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
  OrgGeogebraCommonKernelGeosGeoElement_set_colFunction_(self, col);
  if (colFunction_ != nil) {
    [colFunction_ registerColorFunctionListenerWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
}

- (void)removeColorFunction {
  if (colFunction_ != nil) {
    [colFunction_ unregisterColorFunctionListenerWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
  OrgGeogebraCommonKernelGeosGeoElement_set_colFunction_(self, nil);
}

+ (jboolean)moveObjectsWithJavaUtilArrayList:(JavaUtilArrayList *)geosToMove
     withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)rwTransVec
     withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)endPosition
     withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)viewDirection
 withOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view {
  return OrgGeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonEuclidianEuclidianView_(geosToMove, rwTransVec, endPosition, viewDirection, view);
}

+ (JavaUtilTreeSet *)getTempSet {
  return OrgGeogebraCommonKernelGeosGeoElement_getTempSet();
}

- (jboolean)movePointWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)rwTransVec
                     withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)endPosition {
  jboolean movedGeo = NO;
  OrgGeogebraCommonKernelGeosGeoPoint *point = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(self, [OrgGeogebraCommonKernelGeosGeoPoint class]);
  if (endPosition != nil) {
    [point setCoordsWithDouble:[endPosition getX] withDouble:[endPosition getY] withDouble:1];
    movedGeo = YES;
  }
  else {
    jdouble x = [point getInhomX] + [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(rwTransVec)) getX];
    jdouble y = [point getInhomY] + [rwTransVec getY];
    if (JavaLangMath_absWithDouble_([rwTransVec getX]) > OrgGeogebraCommonKernelKernel_MIN_PRECISION) {
      x = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(x);
    }
    if (JavaLangMath_absWithDouble_([rwTransVec getY]) > OrgGeogebraCommonKernelKernel_MIN_PRECISION) {
      y = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(y);
    }
    [point setCoordsWithDouble:x withDouble:y withDouble:1];
    movedGeo = YES;
  }
  return movedGeo;
}

- (jboolean)moveVectorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)rwTransVec
                      withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)endPosition {
  jboolean movedGeo = NO;
  OrgGeogebraCommonKernelGeosGeoVector *vector = (OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(self, [OrgGeogebraCommonKernelGeosGeoVector class]);
  if (endPosition != nil) {
    [vector setCoordsWithDouble:[endPosition getX] withDouble:[endPosition getY] withDouble:0];
    movedGeo = YES;
  }
  else {
    jdouble x = [vector getX] + [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(rwTransVec)) getX];
    jdouble y = [vector getY] + [rwTransVec getY];
    if (JavaLangMath_absWithDouble_([rwTransVec getX]) > OrgGeogebraCommonKernelKernel_MIN_PRECISION) {
      x = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(x);
    }
    if (JavaLangMath_absWithDouble_([rwTransVec getY]) > OrgGeogebraCommonKernelKernel_MIN_PRECISION) {
      y = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(y);
    }
    [vector setCoordsWithDouble:x withDouble:y withDouble:0];
    movedGeo = YES;
  }
  return movedGeo;
}

- (jboolean)moveObjectWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)rwTransVec
                      withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)endPosition
                      withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)viewDirection
                                        withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                  withOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view {
  return OrgGeogebraCommonKernelGeosGeoElement_moveObjectWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withJavaUtilArrayList_withOrgGeogebraCommonEuclidianEuclidianView_(self, rwTransVec, endPosition, viewDirection, updateGeos, view);
}

- (jboolean)moveFromChangeableCoordParentNumbersWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)rwTransVec
                                                withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)endPosition
                                                withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)viewDirection
                                                                  withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                                                                  withJavaUtilArrayList:(JavaUtilArrayList *)tempMoveObjectList1
                                            withOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view {
  return NO;
}

- (jboolean)hasChangeableCoordParentNumbers {
  return NO;
}

- (void)recordChangeableCoordParentNumbers {
}

+ (void)addChangeableCoordParentNumberToUpdateListWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)number
                                                                      withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                                                                      withJavaUtilArrayList:(JavaUtilArrayList *)tempMoveObjectList1 {
  OrgGeogebraCommonKernelGeosGeoElement_addChangeableCoordParentNumberToUpdateListWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(number, updateGeos, tempMoveObjectList1);
}

+ (void)addParentToUpdateListWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)number
                                                 withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                                                 withJavaUtilArrayList:(JavaUtilArrayList *)tempMoveObjectList1 {
  OrgGeogebraCommonKernelGeosGeoElement_addParentToUpdateListWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(number, updateGeos, tempMoveObjectList1);
}

- (OrgGeogebraCommonAwtGPoint *)getSpreadsheetCoords {
  if (spreadsheetCoords_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_updateSpreadsheetCoordinates(self);
  }
  return spreadsheetCoords_;
}

- (void)setSpreadsheetCoordsWithOrgGeogebraCommonAwtGPoint:(OrgGeogebraCommonAwtGPoint *)spreadsheetCoords {
  OrgGeogebraCommonKernelGeosGeoElement_set_spreadsheetCoords_(self, spreadsheetCoords);
}

- (OrgGeogebraCommonAwtGPoint *)getOldSpreadsheetCoords {
  return oldSpreadsheetCoords_;
}

- (jboolean)isAlgoMacroOutput {
  return isAlgoMacroOutput__;
}

- (void)setAlgoMacroOutputWithBoolean:(jboolean)isAlgoMacroOutput {
  self->isAlgoMacroOutput__ = isAlgoMacroOutput;
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isDifferenceZeroInCASWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)f {
  @try {
    JavaLangStringBuilder *diffSb = [new_JavaLangStringBuilder_init() autorelease];
    [diffSb appendWithNSString:@"Simplify["];
    [diffSb appendWithNSString:[self getFormulaStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_() withBoolean:YES]];
    [diffSb appendWithNSString:@"-("];
    [diffSb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(f)) getFormulaStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_() withBoolean:YES]];
    [diffSb appendWithNSString:@")]"];
    NSString *diff = [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) evaluateGeoGebraCASWithNSString:[diffSb description] withOrgGeogebraCommonKernelArithmeticMyArbitraryConstant:nil];
    return [JavaLangDouble_valueOfWithNSString_(diff) doubleValue] == 0.0;
  }
  @catch (JavaLangThrowable *e) {
    return NO;
  }
}

- (NSString *)getFormulaStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                            withBoolean:(jboolean)substituteNumbers {
  NSString *ret = @"";
  if ([self isGeoList] && [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(self, [OrgGeogebraCommonKernelGeosGeoList class])) isMatrix]) {
    ret = [self toLaTeXStringWithBoolean:!substituteNumbers withOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  else if ([self isGeoVector] && [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    ret = [self toLaTeXStringWithBoolean:!substituteNumbers withOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  else if ([self isGeoCurveCartesian] && [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    ret = [self toLaTeXStringWithBoolean:!substituteNumbers withOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  else {
    ret = substituteNumbers ? [self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl] : OrgGeogebraCommonKernelGeosGeoElement_getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
  }
  if ([@"" isEqual:ret] && [self isGeoNumeric] && !substituteNumbers && [self isLabelSet]) {
    ret = [((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:label_];
  }
  if ([@"" isEqual:ret] && [self isGeoCasCell] && [((OrgGeogebraCommonKernelGeosGeoCasCell *) check_class_cast(self, [OrgGeogebraCommonKernelGeosGeoCasCell class])) getAssignmentVariable] != nil) {
    ret = [self getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  if ([@"" isEqual:ret] && ![self isGeoText]) {
    ret = [self toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    if ([@"?" isEqual:ret]) {
      ret = JreStrcat("$$$", @" \\text{", [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"], @"} ");
    }
    else if ([(JreStrcat("C", OrgGeogebraCommonUtilUnicode_INFINITY)) isEqual:ret]) {
      ret = @"\\infty";
    }
    else if ([(OrgGeogebraCommonUtilUnicode_get_MINUS_INFINITY_()) isEqual:ret]) {
      ret = @"-\\infty";
    }
  }
  return ret;
}

- (jboolean)getSpreadsheetTrace {
  return spreadsheetTrace_;
}

- (void)setSpreadsheetTraceWithBoolean:(jboolean)traceFlag {
  if (traceFlag != YES) {
    OrgGeogebraCommonKernelGeosGeoElement_set_traceSettings_(self, nil);
  }
  spreadsheetTrace_ = traceFlag;
  if (spreadsheetTrace_) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) addTracingGeo];
  }
}

- (void)resetTraceColumns {
  if ([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isUsingFullGui]) {
    [((OrgGeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) resetTraceColumnWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
}

- (jboolean)isSpreadsheetTraceable {
  return [OrgGeogebraCommonKernelGeosSpreadsheetTraceable_class_() isInstance:self];
}

- (jboolean)hasSpreadsheetTraceModeTraceable {
  return [self isSpreadsheetTraceable];
}

- (OrgGeogebraCommonUtilSpreadsheetTraceSettings *)getTraceSettings {
  if (traceSettings_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_setAndConsume_traceSettings_(self, new_OrgGeogebraCommonUtilSpreadsheetTraceSettings_init());
    if ([self getTraceModes] == OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONLY_COPY()) {
      traceSettings_->doTraceGeoCopy_ = YES;
    }
  }
  return traceSettings_;
}

- (void)setTraceSettingsWithOrgGeogebraCommonUtilSpreadsheetTraceSettings:(OrgGeogebraCommonUtilSpreadsheetTraceSettings *)t {
  OrgGeogebraCommonKernelGeosGeoElement_set_traceSettings_(self, t);
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getGeoElementForPropertiesDialog {
  return self;
}

- (jboolean)isTextCommand {
  return NO;
}

- (jboolean)isInTree {
  return inTree_;
}

- (void)setInTreeWithBoolean:(jboolean)flag {
  inTree_ = flag;
}

- (void)setClickScriptWithOrgGeogebraCommonPluginScriptScript:(OrgGeogebraCommonPluginScriptScript *)script {
  [self setScriptWithOrgGeogebraCommonPluginScriptScript:script withOrgGeogebraCommonPluginEventTypeEnum:OrgGeogebraCommonPluginEventTypeEnum_get_CLICK()];
}

- (void)setUpdateScriptWithOrgGeogebraCommonPluginScriptScript:(OrgGeogebraCommonPluginScriptScript *)script {
  [self setScriptWithOrgGeogebraCommonPluginScriptScript:script withOrgGeogebraCommonPluginEventTypeEnum:OrgGeogebraCommonPluginEventTypeEnum_get_UPDATE()];
}

- (void)setScriptWithOrgGeogebraCommonPluginScriptScript:(OrgGeogebraCommonPluginScriptScript *)script
                withOrgGeogebraCommonPluginEventTypeEnum:(OrgGeogebraCommonPluginEventTypeEnum *)evt {
  if ((evt == OrgGeogebraCommonPluginEventTypeEnum_get_UPDATE() && ![self canHaveUpdateScript]) || (evt == OrgGeogebraCommonPluginEventTypeEnum_get_CLICK() && ![self canHaveClickScript])) {
    return;
  }
  if (self->scripts_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_setAndConsume_scripts_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(OrgGeogebraCommonPluginEventTypeEnum_values()))->size_ type:OrgGeogebraCommonPluginScriptScript_class_()]);
  }
  [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) startGeoScriptRunner];
  OrgGeogebraCommonPluginScriptScript *oldScript = IOSObjectArray_Get(nil_chk(scripts_), [((OrgGeogebraCommonPluginEventTypeEnum *) nil_chk(evt)) ordinal]);
  if (oldScript != nil) {
    [oldScript unbindWithOrgGeogebraCommonKernelGeosGeoElement:self withOrgGeogebraCommonPluginEventTypeEnum:evt];
  }
  IOSObjectArray_Set(scripts_, [evt ordinal], script);
  [((OrgGeogebraCommonPluginScriptScript *) nil_chk(script)) bindWithOrgGeogebraCommonKernelGeosGeoElement:self withOrgGeogebraCommonPluginEventTypeEnum:evt];
}

- (jboolean)canHaveUpdateScript {
  return YES;
}

- (OrgGeogebraCommonPluginScriptScript *)getScriptWithOrgGeogebraCommonPluginEventTypeEnum:(OrgGeogebraCommonPluginEventTypeEnum *)type {
  if (scripts_ == nil) {
    return nil;
  }
  return IOSObjectArray_Get(nil_chk(scripts_), [((OrgGeogebraCommonPluginEventTypeEnum *) nil_chk(type)) ordinal]);
}

- (void)runClickScriptsWithNSString:(NSString *)arg {
  [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) dispatchEventWithOrgGeogebraCommonPluginEvent:[new_OrgGeogebraCommonPluginEvent_initWithOrgGeogebraCommonPluginEventTypeEnum_withOrgGeogebraCommonKernelGeosGeoElement_withNSString_(OrgGeogebraCommonPluginEventTypeEnum_get_CLICK(), self, arg) autorelease]];
}

- (void)setShowTrimmedIntersectionLinesWithBoolean:(jboolean)show {
  showTrimmedIntersectionLines_ = show;
}

- (jboolean)getShowTrimmedIntersectionLines {
  return showTrimmedIntersectionLines_;
}

- (jboolean)isPointInRegion {
  return NO;
}

- (void)setRandomGeoWithBoolean:(jboolean)flag {
  isRandomGeo__ = flag;
}

- (jboolean)isRandomGeo {
  return isRandomGeo__;
}

- (void)updateRandomGeo {
  OrgGeogebraCommonKernelAlgosAlgoElement *algo = OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self);
  if (algo != nil) {
    [algo compute];
  }
  else if ([self isGeoNumeric]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self, [OrgGeogebraCommonKernelGeosGeoNumeric class])) updateRandom];
  }
}

- (jboolean)isMatrixTransformable {
  return NO;
}

- (void)setVisibilityWithInt:(jint)viewId
                 withBoolean:(jboolean)setVisible {
  if (self->viewFlags_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_setAndConsume_viewFlags_(self, new_JavaUtilArrayList_init());
  }
  if (setVisible) {
    if (![((id<JavaUtilList>) nil_chk(viewFlags_)) containsWithId:JavaLangInteger_valueOfWithInt_(viewId)]) {
      [viewFlags_ addWithId:JavaLangInteger_valueOfWithInt_(viewId)];
    }
  }
  else {
    [((id<JavaUtilList>) nil_chk(viewFlags_)) removeWithId:JavaLangInteger_valueOfWithInt_(viewId)];
  }
}

- (jboolean)isVisibleInViewWithInt:(jint)viewId {
  if (viewFlags_ == nil) {
    return viewId == OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN;
  }
  return [((id<JavaUtilList>) nil_chk(viewFlags_)) containsWithId:JavaLangInteger_valueOfWithInt_(viewId)];
}

- (void)addViewWithInt:(jint)viewId {
  if (viewId == OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D) {
    OrgGeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_get_TRUE());
  }
  else {
    [self setVisibilityWithInt:viewId withBoolean:YES];
  }
}

- (void)removeViewWithInt:(jint)viewId {
  if (viewId == OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN3D) {
    OrgGeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_get_FALSE());
  }
  else {
    [self setVisibilityWithInt:viewId withBoolean:NO];
  }
}

- (void)setViewFlagsWithJavaUtilList:(id<JavaUtilList>)flags {
  if (flags == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_set_viewFlags_(self, nil);
    return;
  }
  if (self->viewFlags_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_setAndConsume_viewFlags_(self, new_JavaUtilArrayList_init());
  }
  else {
    [viewFlags_ clear];
  }
  [((id<JavaUtilList>) nil_chk(viewFlags_)) addAllWithJavaUtilCollection:flags];
}

- (id<JavaUtilList>)getViewSet {
  if (viewFlags_ == nil) {
    return nil;
  }
  id<JavaUtilList> list = [new_JavaUtilArrayList_init() autorelease];
  [list addAllWithJavaUtilCollection:viewFlags_];
  return list;
}

- (jboolean)isVisibleInView3D {
  switch ([visibleInView3D_ ordinal]) {
    case OrgGeogebraCommonKernelGeosGeoElement_VisibleInView_NOT_SET:
    default:
    return [self isVisibleInView3DNotSet];
    case OrgGeogebraCommonKernelGeosGeoElement_VisibleInView_TRUE:
    return [self hasDrawable3D];
    case OrgGeogebraCommonKernelGeosGeoElement_VisibleInView_FALSE:
    return NO;
  }
}

- (jboolean)isVisibleInView3DNotSet {
  if ([self hasDrawable3D]) {
    if ([self isGeoElement3D] || [self isVisibleInViewWithInt:OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN]) {
      OrgGeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_get_TRUE());
      return YES;
    }
    OrgGeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_get_FALSE());
    return NO;
  }
  return NO;
}

- (jboolean)isVisibleInViewForPlane {
  switch ([visibleInViewForPlane_ ordinal]) {
    case OrgGeogebraCommonKernelGeosGeoElement_VisibleInView_NOT_SET:
    default:
    if ([self isVisibleInView3D]) {
      OrgGeogebraCommonKernelGeosGeoElement_set_visibleInViewForPlane_(self, OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_get_TRUE());
      return YES;
    }
    OrgGeogebraCommonKernelGeosGeoElement_set_visibleInViewForPlane_(self, OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_get_FALSE());
    return NO;
    case OrgGeogebraCommonKernelGeosGeoElement_VisibleInView_TRUE:
    return YES;
    case OrgGeogebraCommonKernelGeosGeoElement_VisibleInView_FALSE:
    return NO;
  }
}

- (void)setVisibleInView3DWithBoolean:(jboolean)flag {
  if (flag) {
    OrgGeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_get_TRUE());
  }
  else {
    OrgGeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_get_FALSE());
  }
}

- (void)setVisibleInViewForPlaneWithBoolean:(jboolean)flag {
  if (flag) {
    OrgGeogebraCommonKernelGeosGeoElement_set_visibleInViewForPlane_(self, OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_get_TRUE());
  }
  else {
    OrgGeogebraCommonKernelGeosGeoElement_set_visibleInViewForPlane_(self, OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_get_FALSE());
  }
}

- (void)setVisibleInView3DWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->visibleInView3D_);
}

- (void)setVisibleInViewForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelGeosGeoElement_set_visibleInViewForPlane_(self, ((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->visibleInViewForPlane_);
}

- (void)setSelectionAllowedWithBoolean:(jboolean)selected2 {
  selectionAllowed_ = selected2;
}

- (jboolean)isSelectionAllowed {
  return OrgGeogebraCommonKernelGeosGeoElement_isSelectionAllowed(self);
}

- (void)setRealLabelWithNSString:(NSString *)realLabel {
  OrgGeogebraCommonKernelGeosGeoElement_set_realLabel_(self, realLabel);
}

- (jboolean)isHatchingEnabled {
  return [((OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *) nil_chk(fillType_)) isHatch];
}

- (void)setHatchingAngleWithInt:(jint)angle {
  hatchingAngle_ = angle;
}

- (jdouble)getHatchingAngle {
  return hatchingAngle_;
}

- (void)setHatchingDistanceWithInt:(jint)distance {
  hatchingDistance_ = distance;
}

- (jint)getHatchingDistance {
  return hatchingDistance_;
}

- (id<OrgGeogebraCommonAwtMyImage>)getFillImage {
  return [((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk(graphicsadapter_)) getFillImage];
}

- (void)setFillImageWithNSString:(NSString *)filename {
  [((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk(graphicsadapter_)) setFillImageWithNSString:filename];
}

- (OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)getFillType {
  return fillType_;
}

- (void)setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:(OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)fillType {
  OrgGeogebraCommonKernelGeosGeoElement_set_fillType_(self, fillType);
}

- (void)setImageFileNameWithNSString:(NSString *)fileName {
  [((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk(graphicsadapter_)) setImageFileNameWithNSString:fileName];
}

- (NSString *)getImageFileName {
  return [((OrgGeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk(graphicsadapter_)) getImageFileName];
}

- (void)setInverseFillWithBoolean:(jboolean)inverseFill {
  self->inverseFill_ = inverseFill;
}

- (jboolean)isInverseFill {
  return inverseFill_;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getMainDirection {
  return OrgGeogebraCommonKernelMatrixCoords_get_VZ_();
}

- (jdouble)distanceWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p {
  return JavaLangDouble_POSITIVE_INFINITY;
}

- (jdouble)distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  if (([p isKindOfClass:[OrgGeogebraCommonKernelGeosGeoElement class]]) && ([p isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]])) {
    return [self distanceWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoPoint class])];
  }
  OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@$", @"TODO : distance from ", [self getGeoClassType], @" to ND point"));
  return JavaLangDouble_POSITIVE_INFINITY;
}

- (jboolean)canHaveClickScript {
  return YES;
}

- (void)setIsPickableWithBoolean:(jboolean)v {
  isPickable__ = v;
}

- (jboolean)isPickable {
  return isPickable__ && OrgGeogebraCommonKernelGeosGeoElement_isSelectionAllowed(self);
}

- (jboolean)needsReplacingInExpressionNode {
  return needsReplacingInExpressionNode__;
}

- (void)setNeedsReplacingInExpressionNode {
  needsReplacingInExpressionNode__ = YES;
}

- (jboolean)isGeoInterval {
  return NO;
}

- (jdouble)getMeasure {
  return 0;
}

- (void)moveDependenciesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)oldGeo {
}

- (void)storeClone {
  if (tempClone_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_setAndConsume_tempClone_(self, new_JavaUtilStack_init());
  }
  [((JavaUtilStack *) nil_chk(tempClone_)) pushWithId:[self copy__]];
  cloneInUse_ = YES;
}

- (void)recoverFromClone {
  if (tempClone_ != nil) {
    [self setWithOrgGeogebraCommonKernelGeosGeoElement:[tempClone_ pop]];
  }
  cloneInUse_ = NO;
}

- (void)randomizeForProbabilisticChecking {
}

- (jboolean)isRandomizable {
  return NO;
}

- (OrgGeogebraCommonKernelGeosGeoCasCell *)getCorrespondingCasCell {
  return OrgGeogebraCommonKernelGeosGeoElement_getCorrespondingCasCell(self);
}

- (void)setCorrespondingCasCellWithOrgGeogebraCommonKernelGeosGeoCasCell:(OrgGeogebraCommonKernelGeosGeoCasCell *)correspondingCasCell {
  OrgGeogebraCommonKernelGeosGeoElement_set_correspondingCasCell_(self, correspondingCasCell);
}

- (jboolean)isLaTeXDrawableGeo {
  return NO;
}

- (jboolean)hasBackgroundColor {
  return NO;
}

- (jboolean)algoUpdateSetContainsWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)i {
  return [((OrgGeogebraCommonKernelAlgosAlgorithmSet *) nil_chk([self getAlgoUpdateSet])) containsWithOrgGeogebraCommonKernelAlgosAlgoElement:i];
}

- (void)resetSpreadsheetColumnHeadings {
  if (spreadsheetColumnHeadings_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_setAndConsume_spreadsheetColumnHeadings_(self, new_JavaUtilArrayList_init());
  }
  else {
    [spreadsheetColumnHeadings_ clear];
  }
}

- (JavaUtilArrayList *)getColumnHeadings {
  if (((OrgGeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk([self getTraceSettings]))->doTraceGeoCopy_) [self updateColumnHeadingsForTraceGeoCopy];
  else [self updateColumnHeadingsForTraceValues];
  return spreadsheetColumnHeadings_;
}

- (void)updateColumnHeadingsForTraceValues {
  [self updateColumnHeadingsForTraceGeoCopy];
}

- (NSString *)getTraceDialogAsValues {
  return OrgGeogebraCommonKernelGeosGeoElement_getLabelTextOrHTMLWithBoolean_(self, NO);
}

- (OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)getTraceModes {
  return OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONE_VALUE_ONLY();
}

- (void)updateColumnHeadingsForTraceGeoCopy {
  [self resetSpreadsheetColumnHeadings];
  [((JavaUtilArrayList *) nil_chk(spreadsheetColumnHeadings_)) addWithId:[self getNameGeo]];
}

- (OrgGeogebraCommonKernelGeosGeoText *)getNameGeo {
  OrgGeogebraCommonKernelAlgosAlgoName *algo = [new_OrgGeogebraCommonKernelAlgosAlgoName_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoElement_(cons_, self) autorelease];
  OrgGeogebraCommonKernelGeosGeoText *ret = [algo getGeoText];
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(ret)) setEuclidianVisibleWithBoolean:NO];
  return ret;
}

- (OrgGeogebraCommonKernelGeosGeoText *)getColumnHeadingTextWithOrgGeogebraCommonKernelArithmeticExpressionNode:(OrgGeogebraCommonKernelArithmeticExpressionNode *)node {
  OrgGeogebraCommonKernelGeosGeoText *ret;
  if ([((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(node)) getGeoElementVariables] == nil) {
    ret = [new_OrgGeogebraCommonKernelGeosGeoText_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
    OrgGeogebraCommonKernelAlgosAlgoDependentText_nodeToGeoTextWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelGeosGeoText_withOrgGeogebraCommonKernelStringTemplate_(node, ret, [ret getStringTemplate]);
  }
  else {
    OrgGeogebraCommonKernelAlgosAlgoDependentText *algo = [new_OrgGeogebraCommonKernelAlgosAlgoDependentText_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelArithmeticExpressionNode_(cons_, node) autorelease];
    [algo setProtectedInputWithBoolean:YES];
    ret = [algo getGeoText];
  }
  [((OrgGeogebraCommonKernelGeosGeoText *) nil_chk(ret)) setEuclidianVisibleWithBoolean:NO];
  return ret;
}

- (void)addToSpreadsheetTraceListWithJavaUtilArrayList:(JavaUtilArrayList *)spreadsheetTraceList {
  if ([OrgGeogebraCommonKernelArithmeticNumberValue_class_() isInstance:self]) {
    OrgGeogebraCommonKernelGeosGeoNumeric *xx = [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))) getDouble]) autorelease];
    [((JavaUtilArrayList *) nil_chk(spreadsheetTraceList)) addWithId:xx];
  }
  else {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"error in getSpreadsheetTraceList(), not a NumberValue");
  }
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return label_;
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)traverseWithOrgGeogebraCommonKernelArithmeticTraversing:(id<OrgGeogebraCommonKernelArithmeticTraversing>)t {
  return [((id<OrgGeogebraCommonKernelArithmeticTraversing>) nil_chk(t)) processWithOrgGeogebraCommonKernelArithmeticExpressionValue:self];
}

- (jboolean)inspectWithOrgGeogebraCommonKernelArithmeticInspecting:(id<OrgGeogebraCommonKernelArithmeticInspecting>)t {
  return [((id<OrgGeogebraCommonKernelArithmeticInspecting>) nil_chk(t)) checkWithOrgGeogebraCommonKernelArithmeticExpressionValue:self];
}

- (jint)getMetasLength {
  return 0;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)unwrap {
  return self;
}

- (OrgGeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_([self getKernel], self) autorelease];
}

- (jboolean)isLocusEquable {
  return OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self) != nil && [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self))) isLocusEquable];
}

- (jboolean)isPinnable {
  return NO;
}

- (jboolean)isPinned {
  if ([OrgGeogebraCommonKernelGeosAbsoluteScreenLocateable_class_() isInstance:self]) {
    return [((id<OrgGeogebraCommonKernelGeosAbsoluteScreenLocateable>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelGeosAbsoluteScreenLocateable))) isAbsoluteScreenLocActive];
  }
  if (![self isPinnable]) {
    return NO;
  }
  return [OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self) isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoAttachCopyToView class]];
}

- (jboolean)hasCoords {
  return NO;
}

- (void)setScriptingWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)oldGeo {
  if (((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(oldGeo))->scripts_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_set_scripts_(self, nil);
    return;
  }
  if (self->scripts_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_setAndConsume_scripts_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(OrgGeogebraCommonPluginEventTypeEnum_values()))->size_ type:OrgGeogebraCommonPluginScriptScript_class_()]);
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(oldGeo->scripts_))->size_; i++) {
    if (IOSObjectArray_Get(oldGeo->scripts_, i) != nil) {
      IOSObjectArray_Set(scripts_, i, [((OrgGeogebraCommonPluginScriptScript *) nil_chk(IOSObjectArray_Get(oldGeo->scripts_, i))) copy__]);
    }
    else {
      IOSObjectArray_Set(scripts_, i, nil);
    }
  }
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                      withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel0 {
  return [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, 0) autorelease];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                    withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel {
  return nil;
}

- (jboolean)isMatrix {
  return NO;
}

- (NSString *)getFillSymbol {
  return fillSymbol_;
}

- (void)setFillSymbolWithNSString:(NSString *)symbol {
  OrgGeogebraCommonKernelGeosGeoElement_set_fillSymbol_(self, symbol);
}

- (jint)getDecorationType {
  return decorationType_;
}

- (id<OrgGeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementWithOrgGeogebraCommonKernelLocusequEquationScope:(OrgGeogebraCommonKernelLocusequEquationScope *)scope {
  return nil;
}

- (void)setSendValueToCasWithBoolean:(jboolean)var {
  sendValueToCas_ = var;
}

- (jboolean)getSendValueToCas {
  return sendValueToCas_;
}

- (void)setCaptionBotanaVarsWithNSString:(NSString *)vars {
  [self setLabelModeWithInt:OrgGeogebraCommonKernelGeosGeoElement_LABEL_CAPTION];
  labelVisible_ = YES;
  NSString *labelWithVars = JreStrcat("$$$$", @"{\\bf\\it ", label_, vars, @"}\\\\");
  if (caption_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_set_caption_(self, JreStrcat("C$C", '$', labelWithVars, '$'));
    return;
  }
  if ([((NSString *) nil_chk(caption_)) hasPrefix:labelWithVars]) {
    return;
  }
  OrgGeogebraCommonKernelGeosGeoElement_set_caption_(self, JreStrcat("C$$$", '$', labelWithVars, @"\\\\", [caption_ substring:1 endIndex:((jint) [caption_ length])]));
}

- (void)addCaptionBotanaPolynomialWithNSString:(NSString *)poly {
  [self setLabelModeWithInt:OrgGeogebraCommonKernelGeosGeoElement_LABEL_CAPTION];
  labelVisible_ = YES;
  if (caption_ != nil) {
    OrgGeogebraCommonKernelGeosGeoElement_set_caption_(self, JreStrcat("$$$", [caption_ substring:0 endIndex:((jint) [caption_ length]) - 1], poly, @"\\\\$"));
  }
  else {
    OrgGeogebraCommonKernelGeosGeoElement_set_caption_(self, JreStrcat("C$$", '$', poly, @"\\\\$"));
  }
}

- (jboolean)showLineProperties {
  return [self isPath] || (([self isKindOfClass:[OrgGeogebraCommonKernelGeosGeoFunctionNVar class]]) && [((OrgGeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(self, [OrgGeogebraCommonKernelGeosGeoFunctionNVar class])) isInequality]);
}

- (jboolean)evaluatesTo3DVector {
  return NO;
}

- (void)setCanBeRemovedAsInputWithBoolean:(jboolean)flag {
  canBeRemovedAsInput__ = flag;
}

- (jboolean)canBeRemovedAsInput {
  return canBeRemovedAsInput__ && (algorithmList_ == nil || [algorithmList_ size] <= 1);
}

- (jboolean)hasLineOpacity {
  return NO;
}

- (jint)getLineOpacity {
  return lineOpacity_;
}

- (void)setLineOpacityWithInt:(jint)lineOpacity {
  self->lineOpacity_ = lineOpacity;
}

- (jboolean)evaluatesToNumberWithBoolean:(jboolean)def {
  return [self isNumberValue];
}

- (jboolean)getTrace {
  return NO;
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(spreadsheetColumnHeadings_);
  RELEASE_(label_);
  RELEASE_(realLabel_);
  RELEASE_(oldLabel_);
  RELEASE_(caption_);
  RELEASE_(objColor_);
  RELEASE_(bgColor_);
  RELEASE_(selColor_);
  RELEASE_(labelColor_);
  RELEASE_(fillColor_);
  RELEASE_(animationIncrement_);
  RELEASE_(animationSpeedObj_);
  RELEASE_(correspondingCasCell_);
  RELEASE_(fillSymbol_);
  RELEASE_(graphicsadapter_);
  RELEASE_(fillType_);
  RELEASE_(viewFlags_);
  RELEASE_(spreadsheetCoords_);
  RELEASE_(oldSpreadsheetCoords_);
  RELEASE_(condShowObject_);
  RELEASE_(colFunction_);
  RELEASE_(strAlgebraDescription_);
  RELEASE_(strAlgebraDescTextOrHTML_);
  RELEASE_(strAlgebraDescriptionHTML_);
  RELEASE_(strLabelTextOrHTML_);
  RELEASE_(strLaTeX_);
  RELEASE_(algoParent_);
  RELEASE_(algoDraw_);
  RELEASE_(algorithmList_);
  RELEASE_(algoUpdateSet_);
  RELEASE_(viewForValueString_);
  RELEASE_(latexCache_);
  RELEASE_(strHasIndexLabel_);
  RELEASE_(tempMoveObjectList_);
  RELEASE_(traceSettings_);
  RELEASE_(scripts_);
  RELEASE_(visibleInView3D_);
  RELEASE_(visibleInViewForPlane_);
  RELEASE_(tempClone_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelGeosGeoElement class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoElement_pointLabels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'Z' } count:24]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoElement_functionLabels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'f', 'g', 'h', 'p', 'q', 'r', 's', 't' } count:8]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoElement_lineLabels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't' } count:19]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoElement_vectorLabels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't' } count:22]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoElement_conicLabels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'c', 'd', 'e', 'f', 'g', 'h', 'k', 'p', 'q', 'r', 's', 't' } count:12]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoElement_lowerCaseLabels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w' } count:23]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoElement_integerLabels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'n', 'i', 'j', 'k', 'l', 'm' } count:6]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoElement_greekLowerCase_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 0x03b1, 0x03b2, 0x03b3, 0x03b4, 0x03b5, 0x03b6, 0x03b7, 0x03b8, 0x03b9, 0x03ba, 0x03bb, 0x03bc, 0x03bd, 0x03be, 0x03bf, 0x03c1, 0x03c3, 0x03c4, 0x03c5, 0x03d5, 0x03c7, 0x03c8, 0x03c9 } count:23]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoElement_arabic_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 0x0623, 0x0628, 0x062a, 0x062b, 0x062c, 0x062d, 0x062e, 0x062f, 0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637, 0x0638, 0x0639, 0x063a, 0x0641, 0x0642, 0x0643, 0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x064a } count:28]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoElement_yiddish_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 0x05d0, 0x05d1, 0x05d2, 0x05d3, 0x05d4, 0x05d5, 0x05d6, 0x05d7, 0x05d8, 0x05db, 0x05dc, 0x05de, 0x05e0, 0x05e1, 0x05e2, 0x05e4, 0x05e6, 0x05e7, 0x05e8, 0x05e9, 0x05ea } count:21]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoElement_greekUpperCase_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397, 0x0398, 0x0399, 0x039a, 0x039b, 0x039c, 0x039d, 0x039e, 0x039f, 0x03a0, 0x03a1, 0x03a3, 0x03a4, 0x03a5, 0x03a6, 0x03a7, 0x03a8, 0x03a9 } count:24]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoElement_algoComparator_, nil, new_OrgGeogebraCommonKernelGeosGeoElement_$1_init());
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelGeosGeoElement)
  }
}

+ (IOSObjectArray *)__annotations_toString {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getColorSpace", NULL, "I", 0x1, NULL, NULL },
    { "setColorSpaceWithInt:", "setColorSpace", "V", 0x1, NULL, NULL },
    { "getDefaultGeoType", NULL, "I", 0x1, NULL, NULL },
    { "isDefaultGeo", NULL, "Z", 0x1, NULL, NULL },
    { "setDefaultGeoTypeWithInt:", "setDefaultGeoType", "V", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoElement", NULL, 0x1, NULL, NULL },
    { "getLabelSimple", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setLabelSimpleWithNSString:", "setLabelSimple", "V", 0x1, NULL, NULL },
    { "getLabelWithOrgGeogebraCommonKernelStringTemplate:", "getLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "copyLabelWithOrgGeogebraCommonKernelGeosGeoElement:", "copyLabel", "V", 0x1, NULL, NULL },
    { "setLabelModeWithInt:", "setLabelMode", "V", 0x1, NULL, NULL },
    { "setLabelModeFromStylebarWithInt:", "setLabelModeFromStylebar", "V", 0x1, NULL, NULL },
    { "setLabelModeDefault", NULL, "V", 0x4, NULL, NULL },
    { "getLabelMode", NULL, "I", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x401, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x401, NULL, NULL },
    { "deepCopyGeo", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "copyInternalWithOrgGeogebraCommonKernelConstruction:", "copyInternal", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "copyPointsWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "copyPoints", "[Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x9, NULL, NULL },
    { "copyPointsNDWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "copyPointsND", "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x9, NULL, NULL },
    { "deepCopyWithOrgGeogebraCommonKernelKernel:", "deepCopy", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "isInfinite", NULL, "Z", 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x401, NULL, NULL },
    { "isDefined", NULL, "Z", 0x401, NULL, NULL },
    { "setUndefined", NULL, "V", 0x401, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "setViewForValueStringWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "setViewForValueString", "V", 0x1, NULL, NULL },
    { "getViewForValueString", NULL, "Lorg.geogebra.common.euclidian.EuclidianViewInterfaceSlim;", 0x1, NULL, NULL },
    { "hasValueStringChangeableRegardingView", NULL, "Z", 0x1, NULL, NULL },
    { "getRedefineStringWithBoolean:withBoolean:", "getRedefineString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLabelDelimiter", NULL, "C", 0x4, NULL, NULL },
    { "getDefinitionForInputBar", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getValueForInputBar", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setZero", NULL, "V", 0x1, NULL, NULL },
    { "toOutputValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setConstructionDefaults", NULL, "V", 0x11, NULL, NULL },
    { "setConstructionDefaultsWithBoolean:", "setConstructionDefaults", "V", 0x11, NULL, NULL },
    { "setObjColorWithOrgGeogebraCommonAwtGColor:", "setObjColor", "V", 0x1, NULL, NULL },
    { "isColorSet", NULL, "Z", 0x1, NULL, NULL },
    { "getRGBFromListWithFloat:", "getRGBFromList", "Lorg.geogebra.common.awt.GColor;", 0x2, NULL, NULL },
    { "getRGBFromListWithInt:", "getRGBFromList", "Lorg.geogebra.common.awt.GColor;", 0x2, NULL, NULL },
    { "getSelColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getFillColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getAlgebraColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getLabelColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "setLabelColorWithOrgGeogebraCommonAwtGColor:", "setLabelColor", "V", 0x1, NULL, NULL },
    { "getBackgroundColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "setBackgroundColorWithOrgGeogebraCommonAwtGColor:", "setBackgroundColor", "V", 0x1, NULL, NULL },
    { "getObjectColor", NULL, "Lorg.geogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "setLayerWithInt:", "setLayer", "V", 0x1, NULL, NULL },
    { "getLayer", NULL, "I", 0x1, NULL, NULL },
    { "typePriority", NULL, "I", 0x2, NULL, NULL },
    { "drawBeforeWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "drawBefore", "Z", 0x1, NULL, NULL },
    { "setAlphaValueWithFloat:", "setAlphaValue", "V", 0x1, NULL, NULL },
    { "getAlphaValue", NULL, "F", 0x1, NULL, NULL },
    { "isLimitedPath", NULL, "Z", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "isRegion", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoList", NULL, "Z", 0x1, NULL, NULL },
    { "setAllVisualPropertiesWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "setAllVisualProperties", "V", 0x11, NULL, NULL },
    { "setAllVisualPropertiesExceptEuclidianVisibleWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "setAllVisualPropertiesExceptEuclidianVisible", "V", 0x1, NULL, NULL },
    { "setVisualStyleForTransformationsWithOrgGeogebraCommonKernelGeosGeoElement:", "setVisualStyleForTransformations", "V", 0x1, NULL, NULL },
    { "setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:", "setVisualStyle", "V", 0x1, NULL, NULL },
    { "setColorVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:", "setColorVisualStyle", "V", 0x4, NULL, NULL },
    { "isSequentialColor", NULL, "Z", 0x1, NULL, NULL },
    { "setSequentialColorWithBoolean:", "setSequentialColor", "V", 0x1, NULL, NULL },
    { "setAdvancedVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:", "setAdvancedVisualStyle", "V", 0x1, NULL, NULL },
    { "setAdvancedVisualStyleCopyWithOrgGeogebraCommonKernelGeosGeoElement:", "setAdvancedVisualStyleCopy", "V", 0x1, NULL, NULL },
    { "getGraphicsAdapter", NULL, "Lorg.geogebra.common.kernel.geos.GeoElementGraphicsAdapter;", 0x1, NULL, NULL },
    { "setLabelOffsetWithInt:withInt:", "setLabelOffset", "V", 0x1, NULL, NULL },
    { "isVisible", NULL, "Z", 0x11, NULL, NULL },
    { "isEuclidianVisible", NULL, "Z", 0x11, NULL, NULL },
    { "setEuclidianVisibleWithBoolean:", "setEuclidianVisible", "V", 0x1, NULL, NULL },
    { "setEuclidianVisibleIfNoConditionToShowObjectWithBoolean:", "setEuclidianVisibleIfNoConditionToShowObject", "V", 0x1, NULL, NULL },
    { "forceEuclidianVisibleWithBoolean:", "forceEuclidianVisible", "V", 0x1, NULL, NULL },
    { "isSetEuclidianVisible", NULL, "Z", 0x1, NULL, NULL },
    { "isConsProtocolBreakpoint", NULL, "Z", 0x11, NULL, NULL },
    { "setConsProtocolBreakpointWithBoolean:", "setConsProtocolBreakpoint", "V", 0x1, NULL, NULL },
    { "getSiblings", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isDrawable", NULL, "Z", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "isInverseFillable", NULL, "Z", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "isFixed", NULL, "Z", 0x1, NULL, NULL },
    { "setFixedWithBoolean:", "setFixed", "V", 0x11, NULL, NULL },
    { "isFixable", NULL, "Z", 0x1, NULL, NULL },
    { "removeOrSetUndefinedIfHasFixedDescendent", NULL, "V", 0x11, NULL, NULL },
    { "isAuxiliaryObject", NULL, "Z", 0x11, NULL, NULL },
    { "isAuxiliaryObjectByDefault", NULL, "Z", 0x1, NULL, NULL },
    { "toGeoElement", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setAuxiliaryObjectWithBoolean:", "setAuxiliaryObject", "V", 0x1, NULL, NULL },
    { "setLabelVisibleWithBoolean:", "setLabelVisible", "V", 0x1, NULL, NULL },
    { "isLabelVisible", NULL, "Z", 0x1, NULL, NULL },
    { "getLabelVisible", NULL, "Z", 0x11, NULL, NULL },
    { "isLabelShowable", NULL, "Z", 0x1, NULL, NULL },
    { "isLabelValueShowable", NULL, "Z", 0x1, NULL, NULL },
    { "isAlgebraVisible", NULL, "Z", 0x11, NULL, NULL },
    { "showToolTipText", NULL, "Z", 0x1, NULL, NULL },
    { "getTooltipTextWithBoolean:withBoolean:", "getTooltipText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTooltipMode", NULL, "I", 0x1, NULL, NULL },
    { "setTooltipModeWithInt:", "setTooltipMode", "V", 0x1, NULL, NULL },
    { "setAlgebraVisibleWithBoolean:", "setAlgebraVisible", "V", 0x1, NULL, NULL },
    { "isSetAlgebraVisible", NULL, "Z", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x401, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x404, NULL, NULL },
    { "isAlgebraViewEditable", NULL, "Z", 0x1, NULL, NULL },
    { "isEuclidianShowable", NULL, "Z", 0x11, NULL, NULL },
    { "isAlgebraShowable", NULL, "Z", 0x1, NULL, NULL },
    { "setParentAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:", "setParentAlgorithm", "V", 0x1, NULL, NULL },
    { "getParentAlgorithm", NULL, "Lorg.geogebra.common.kernel.algos.AlgoElement;", 0x11, NULL, NULL },
    { "setDrawAlgorithmWithOrgGeogebraCommonKernelAlgosDrawInformationAlgo:", "setDrawAlgorithm", "V", 0x1, NULL, NULL },
    { "getDrawAlgorithm", NULL, "Lorg.geogebra.common.kernel.algos.AlgoElement;", 0x11, NULL, NULL },
    { "getAlgorithmList", NULL, "Ljava.util.ArrayList;", 0x11, NULL, NULL },
    { "isIndependent", NULL, "Z", 0x1, NULL, NULL },
    { "isChangeable", NULL, "Z", 0x1, NULL, NULL },
    { "isPointOnPath", NULL, "Z", 0x1, NULL, NULL },
    { "isRedefineable", NULL, "Z", 0x1, NULL, NULL },
    { "isMoveable", NULL, "Z", 0x1, NULL, NULL },
    { "is6dofMoveable", NULL, "Z", 0x1, NULL, NULL },
    { "isMoveableWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "isMoveable", "Z", 0x1, NULL, NULL },
    { "hasMoveableInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "hasMoveableInputPoints", "Z", 0x1, NULL, NULL },
    { "getFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "getFreeInputPoints", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "hasOnlyFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "hasOnlyFreeInputPoints", "Z", 0x11, NULL, NULL },
    { "containsOnlyMoveableGeosWithJavaUtilArrayList:", "containsOnlyMoveableGeos", "Z", 0xa, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x1, NULL, NULL },
    { "isRotateMoveable", NULL, "Z", 0x1, NULL, NULL },
    { "hasProperties", NULL, "Z", 0x11, NULL, NULL },
    { "setAnimationStepWithDouble:", "setAnimationStep", "V", 0x1, NULL, NULL },
    { "setAnimationStepWithOrgGeogebraCommonKernelArithmeticNumberValue:", "setAnimationStep", "V", 0x1, NULL, NULL },
    { "getAnimationStep", NULL, "D", 0x1, NULL, NULL },
    { "getAnimationStepObject", NULL, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", 0x1, NULL, NULL },
    { "getAnimationSpeedObject", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getAnimationSpeed", NULL, "D", 0x1, NULL, NULL },
    { "setAnimationSpeedObjectWithOrgGeogebraCommonKernelArithmeticNumberValue:", "setAnimationSpeedObject", "V", 0x1, NULL, NULL },
    { "setAnimationSpeedWithDouble:", "setAnimationSpeed", "V", 0x1, NULL, NULL },
    { "initAnimationSpeedObject", NULL, "V", 0x2, NULL, NULL },
    { "getAnimationType", NULL, "I", 0x11, NULL, NULL },
    { "setAnimationTypeWithInt:", "setAnimationType", "V", 0x11, NULL, NULL },
    { "getAnimationDirection", NULL, "I", 0x4, NULL, NULL },
    { "changeAnimationDirection", NULL, "V", 0x4, NULL, NULL },
    { "setAnimatingWithBoolean:", "setAnimating", "V", 0x21, NULL, NULL },
    { "isAnimating", NULL, "Z", 0x11, NULL, NULL },
    { "isAnimatable", NULL, "Z", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toCasAssignmentWithOrgGeogebraCommonKernelStringTemplate:", "toCasAssignment", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAssignmentLHSWithOrgGeogebraCommonKernelStringTemplate:", "getAssignmentLHS", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCASStringWithOrgGeogebraCommonKernelStringTemplate:withBoolean:", "getCASString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "addCellRangeUser", NULL, "V", 0x1, NULL, NULL },
    { "removeCellRangeUser", NULL, "V", 0x1, NULL, NULL },
    { "isRenameable", NULL, "Z", 0x1, NULL, NULL },
    { "renameWithNSString:", "rename", "Z", 0x1, NULL, NULL },
    { "isLabelSet", NULL, "Z", 0x1, NULL, NULL },
    { "setLabelWithNSString:", "setLabel", "V", 0x1, NULL, NULL },
    { "setLoadedLabelWithNSString:", "setLoadedLabel", "V", 0x1, NULL, NULL },
    { "setCaptionWithNSString:", "setCaption", "Z", 0x1, NULL, NULL },
    { "getCaptionSimple", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCaptionWithOrgGeogebraCommonKernelStringTemplate:", "getCaption", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getRawCaption", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCaptionDescriptionWithOrgGeogebraCommonKernelStringTemplate:", "getCaptionDescription", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setLocalVariableLabelWithNSString:", "setLocalVariableLabel", "V", 0x1, NULL, NULL },
    { "undoLocalVariableLabel", NULL, "V", 0x1, NULL, NULL },
    { "isLocalVariable", NULL, "Z", 0x1, NULL, NULL },
    { "doSetLabelWithNSString:", "doSetLabel", "V", 0x2, NULL, NULL },
    { "updateSpreadsheetCoordinates", NULL, "V", 0x2, NULL, NULL },
    { "getSpreadsheetLabelWithDollarsWithBoolean:withBoolean:", "getSpreadsheetLabelWithDollars", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "compareLabelsWithNSString:withNSString:", "compareLabels", "I", 0x19, NULL, NULL },
    { "doRenameLabelWithNSString:", "doRenameLabel", "V", 0x2, NULL, NULL },
    { "getOldLabel", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "setLabelsWithNSString:withOrgGeogebraCommonKernelGeosGeoElementArray:", "setLabels", "V", 0x9, NULL, NULL },
    { "setLabelsWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoElementArray:", "setLabels", "V", 0x9, NULL, NULL },
    { "setLabelsWithNSStringArray:withOrgGeogebraCommonKernelGeosGeoElementArray:withBoolean:", "setLabels", "V", 0x8, NULL, NULL },
    { "getFreeLabelWithNSString:", "getFreeLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDefaultLabelWithBoolean:", "getDefaultLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDefaultLabel", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDefaultLabelWithCharArray:withBoolean:", "getDefaultLabel", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "defaultNumberedLabelWithNSString:", "defaultNumberedLabel", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getIndexLabelWithNSString:", "getIndexLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isGeoTextField", NULL, "Z", 0x1, NULL, NULL },
    { "setEmptySpreadsheetCellWithBoolean:", "setEmptySpreadsheetCell", "V", 0x1, NULL, NULL },
    { "isEmptySpreadsheetCell", NULL, "Z", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "getLaTeXCache", NULL, "Lorg.geogebra.common.util.LaTeXCache;", 0x1, NULL, NULL },
    { "notifyAdd", NULL, "V", 0x11, NULL, NULL },
    { "notifyRemove", NULL, "V", 0x11, NULL, NULL },
    { "notifyUpdate", NULL, "V", 0x11, NULL, NULL },
    { "notifyUpdateAuxiliaryObject", NULL, "V", 0x11, NULL, NULL },
    { "addAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:", "addAlgorithm", "V", 0x11, NULL, NULL },
    { "addToAlgorithmListOnlyWithOrgGeogebraCommonKernelAlgosAlgoElement:", "addToAlgorithmListOnly", "V", 0x11, NULL, NULL },
    { "addToUpdateSetOnlyWithOrgGeogebraCommonKernelAlgosAlgoElement:", "addToUpdateSetOnly", "V", 0x11, NULL, NULL },
    { "removeAlgorithmWithOrgGeogebraCommonKernelAlgosAlgoElement:", "removeAlgorithm", "V", 0x11, NULL, NULL },
    { "getAlgoUpdateSet", NULL, "Lorg.geogebra.common.kernel.algos.AlgorithmSet;", 0x1, NULL, NULL },
    { "addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:", "addToUpdateSets", "Z", 0x1, NULL, NULL },
    { "removeFromUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:", "removeFromUpdateSets", "Z", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "updateGeo", NULL, "V", 0x14, NULL, NULL },
    { "algebraStringsNeedUpdate", NULL, "V", 0x2, NULL, NULL },
    { "updateCascade", NULL, "V", 0x1, NULL, NULL },
    { "updateDependentObjects", NULL, "V", 0x2, NULL, NULL },
    { "updateAlgoUpdateSetWithWithOrgGeogebraCommonKernelGeosGeoElement:", "updateAlgoUpdateSetWith", "V", 0x4, NULL, NULL },
    { "hasAlgoUpdateSet", NULL, "Z", 0x1, NULL, NULL },
    { "updateCascadeWithJavaUtilArrayList:withJavaUtilTreeSet:withBoolean:", "updateCascade", "V", 0x39, NULL, NULL },
    { "updateCascadeLocationWithJavaUtilArrayList:withOrgGeogebraCommonKernelConstruction:", "updateCascadeLocation", "V", 0x39, NULL, NULL },
    { "updateCascadeUntilWithJavaUtilArrayList:withJavaUtilTreeSet:withOrgGeogebraCommonKernelAlgosAlgoElement:", "updateCascadeUntil", "V", 0x19, NULL, NULL },
    { "updateRepaint", NULL, "V", 0x1, NULL, NULL },
    { "updateVisualStyle", NULL, "V", 0x1, NULL, NULL },
    { "updateVisualStyleRepaint", NULL, "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x11, NULL, NULL },
    { "evaluateDouble", NULL, "D", 0x1, NULL, NULL },
    { "evaluateWithOrgGeogebraCommonKernelStringTemplate:", "evaluate", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x11, NULL, NULL },
    { "getRandomNumberPredecessorsWithoutLabels", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getAllPredecessors", NULL, "Ljava.util.TreeSet;", 0x1, NULL, NULL },
    { "getAllIndependentPredecessors", NULL, "Ljava.util.TreeSet;", 0x1, NULL, NULL },
    { "addPredecessorsToSetWithJavaUtilTreeSet:withBoolean:", "addPredecessorsToSet", "V", 0x11, NULL, NULL },
    { "getAllRandomizablePredecessors", NULL, "Ljava.util.TreeSet;", 0x1, NULL, NULL },
    { "addRandomizablePredecessorsToSetWithJavaUtilTreeSet:", "addRandomizablePredecessorsToSet", "V", 0x11, NULL, NULL },
    { "isParentOfWithOrgGeogebraCommonKernelKernelNDGeoElementND:", "isParentOf", "Z", 0x11, NULL, NULL },
    { "hasChildren", NULL, "Z", 0x11, NULL, NULL },
    { "isChildOfWithOrgGeogebraCommonKernelGeosGeoElement:", "isChildOf", "Z", 0x11, NULL, NULL },
    { "isChildOrEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isChildOrEqual", "Z", 0x11, NULL, NULL },
    { "getAllChildren", NULL, "Ljava.util.TreeSet;", 0x11, NULL, NULL },
    { "getGeoElements", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "isAlgoElement", NULL, "Z", 0x11, NULL, NULL },
    { "isGeoElement", NULL, "Z", 0x11, NULL, NULL },
    { "getConstructionIndex", NULL, "I", 0x11, NULL, NULL },
    { "getMinConstructionIndex", NULL, "I", 0x11, NULL, NULL },
    { "getMaxConstructionIndex", NULL, "I", 0x11, NULL, NULL },
    { "getDefinitionDescriptionWithOrgGeogebraCommonKernelStringTemplate:", "getDefinitionDescription", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getDefinitionDescriptionHTMLWithBoolean:", "getDefinitionDescriptionHTML", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:", "getCommandDescription", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getCommandDescriptionHTMLWithBoolean:", "getCommandDescriptionHTML", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "convertIndicesToHTMLWithNSString:withOrgGeogebraCommonUtilIndexHTMLBuilder:", "convertIndicesToHTML", "V", 0x9, NULL, NULL },
    { "addLabelTextOrHTMLWithNSString:withOrgGeogebraCommonUtilIndexHTMLBuilder:", "addLabelTextOrHTML", "V", 0x11, NULL, NULL },
    { "getCaptionDescriptionHTMLWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "getCaptionDescriptionHTML", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getXMLtypeString", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTypeStringForAlgebraView", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "translatedTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "translatedTypeStringForAlgebraView", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLongDescription", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getLongDescriptionHTMLWithBoolean:withBoolean:", "getLongDescriptionHTML", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getColoredLabel", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getToolTipDescriptionHTMLWithJavaUtilArrayList:withBoolean:withBoolean:withBoolean:", "getToolTipDescriptionHTML", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "getLabelDescription", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toDefinedValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toDefinedValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getAlgebraDescriptionTextOrHTMLDefaultWithOrgGeogebraCommonUtilIndexHTMLBuilder:", "getAlgebraDescriptionTextOrHTMLDefault", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getAlgebraDescriptionHTMLDefault", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getLabelTextOrHTML", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getLabelTextOrHTMLWithBoolean:", "getLabelTextOrHTML", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getAlgebraDescriptionWithOrgGeogebraCommonKernelStringTemplate:", "getAlgebraDescription", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getAlgebraDescriptionDefault", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getAlgebraDescriptionRegrOutWithOrgGeogebraCommonKernelStringTemplate:", "getAlgebraDescriptionRegrOut", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toStringMinimalWithOrgGeogebraCommonKernelStringTemplate:", "toStringMinimal", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLaTeXdescription", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLaTeXAlgebraDescriptionWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "getLaTeXAlgebraDescription", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLaTeXAlgebraDescriptionWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:withOrgGeogebraCommonKernelStringTemplate:", "getLaTeXAlgebraDescription", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "indicesToHTMLWithNSString:withBoolean:", "indicesToHTML", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "indicesToHTMLWithNSString:withOrgGeogebraCommonUtilIndexHTMLBuilder:", "indicesToHTML", "V", 0x9, NULL, NULL },
    { "getNameDescription", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNameDescriptionTextOrHTML", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "hasIndexLabel", NULL, "Z", 0x11, NULL, NULL },
    { "getNameDescriptionHTMLWithBoolean:withBoolean:", "getNameDescriptionHTML", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isAxis", NULL, "Z", 0x1, NULL, NULL },
    { "getXML", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLWithBoolean:withJavaLangStringBuilder:", "getXML", "V", 0x1, NULL, NULL },
    { "getListenerTagsXMLWithJavaLangStringBuilder:", "getListenerTagsXML", "V", 0x4, NULL, NULL },
    { "getListenerTagXMLWithJavaLangStringBuilder:withJavaUtilHashMap:withNSString:", "getListenerTagXML", "V", 0x2, NULL, NULL },
    { "getElementOpenTagXMLWithJavaLangStringBuilder:", "getElementOpenTagXML", "V", 0x4, NULL, NULL },
    { "getElementCloseTagXMLWithJavaLangStringBuilder:", "getElementCloseTagXML", "V", 0x4, NULL, NULL },
    { "getScriptTagsWithJavaLangStringBuilder:", "getScriptTags", "V", 0x1, NULL, NULL },
    { "getCaptionXMLWithJavaLangStringBuilder:", "getCaptionXML", "V", 0x11, NULL, NULL },
    { "getAuxiliaryXMLWithJavaLangStringBuilder:", "getAuxiliaryXML", "V", 0x14, NULL, NULL },
    { "getXMLvisualTagsWithJavaLangStringBuilder:", "getXMLvisualTags", "V", 0x4, NULL, NULL },
    { "getXMLvisualTagsWithJavaLangStringBuilder:withBoolean:", "getXMLvisualTags", "V", 0x4, NULL, NULL },
    { "appendObjectColorXMLWithJavaLangStringBuilder:", "appendObjectColorXML", "V", 0x4, NULL, NULL },
    { "getXMLanimationTagsWithJavaLangStringBuilder:", "getXMLanimationTags", "V", 0x4, NULL, NULL },
    { "getXMLfixedTagWithJavaLangStringBuilder:", "getXMLfixedTag", "V", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getExtraTagsXMLWithJavaLangStringBuilder:", "getExtraTagsXML", "V", 0x2, NULL, NULL },
    { "getXMLtagsMinimalWithJavaLangStringBuilder:withOrgGeogebraCommonKernelStringTemplate:", "getXMLtagsMinimal", "V", 0x1, NULL, NULL },
    { "toValueStringMinimalWithOrgGeogebraCommonKernelStringTemplate:", "toValueStringMinimal", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "regrFormatWithDouble:", "regrFormat", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getLineStyleXMLWithJavaLangStringBuilder:", "getLineStyleXML", "V", 0x4, NULL, NULL },
    { "getBreakpointXMLWithJavaLangStringBuilder:", "getBreakpointXML", "V", 0x1, NULL, NULL },
    { "getShowObjectConditionXML", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getLineThickness", NULL, "I", 0x11, NULL, NULL },
    { "getMinimumLineThickness", NULL, "I", 0x1, NULL, NULL },
    { "getLineType", NULL, "I", 0x11, NULL, NULL },
    { "getLineTypeHidden", NULL, "I", 0x1, NULL, NULL },
    { "setLineThicknessWithInt:", "setLineThickness", "V", 0x1, NULL, NULL },
    { "setLineThicknessOrVisibilityWithInt:", "setLineThicknessOrVisibility", "V", 0x1, NULL, NULL },
    { "setLineTypeWithInt:", "setLineType", "V", 0x1, NULL, NULL },
    { "setLineTypeHiddenWithInt:", "setLineTypeHidden", "V", 0x1, NULL, NULL },
    { "setDecorationTypeWithInt:", "setDecorationType", "V", 0x1, NULL, NULL },
    { "isGeoElement3D", NULL, "Z", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "hasLevelOfDetail", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoAngle", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoBoolean", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoPolyLine", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoImplicitPoly", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoConic", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoConicPart", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoFunction", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoFunctionNVar", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoFunctionBoolean", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoFunctionConditional", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoFunctionable", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoImage", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoTurtle", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoLine", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoPlane", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoQuadric", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoLocus", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoNumeric", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoPoint", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoCasCell", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoPolygon", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoPolyhedron", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoRay", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoSegment", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoText", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoVector", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoCurveCartesian", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoSurfaceCartesian", NULL, "Z", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x1, NULL, NULL },
    { "isExpressionNode", NULL, "Z", 0x11, NULL, NULL },
    { "isVariable", NULL, "Z", 0x11, NULL, NULL },
    { "containsWithOrgGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "setSelectedWithBoolean:", "setSelected", "V", 0x1, NULL, NULL },
    { "setHighlightedWithBoolean:", "setHighlighted", "V", 0x11, NULL, NULL },
    { "doHighlighting", NULL, "Z", 0x11, NULL, NULL },
    { "isSelected", NULL, "Z", 0x11, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "isAngle", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToNonComplex2DVector", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToVectorNotPoint", NULL, "Z", 0x1, NULL, NULL },
    { "isPolynomialInstance", NULL, "Z", 0x11, NULL, NULL },
    { "evaluatesToText", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToList", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoButton", NULL, "Z", 0x1, NULL, NULL },
    { "isUseVisualDefaults", NULL, "Z", 0x11, NULL, NULL },
    { "setUseVisualDefaultsWithBoolean:", "setUseVisualDefaults", "V", 0x11, NULL, NULL },
    { "isAbsoluteScreenLocateable", NULL, "Z", 0x1, NULL, NULL },
    { "getShowObjectCondition", NULL, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", 0x11, NULL, NULL },
    { "setShowObjectConditionWithOrgGeogebraCommonKernelGeosGeoBoolean:", "setShowObjectCondition", "V", 0x1, "Lorg.geogebra.common.kernel.CircularDefinitionException;", NULL },
    { "removeConditionWithOrgGeogebraCommonKernelGeosGeoBoolean:", "removeCondition", "V", 0x11, NULL, NULL },
    { "getColorFunction", NULL, "Lorg.geogebra.common.kernel.geos.GeoList;", 0x11, NULL, NULL },
    { "setColorFunctionWithOrgGeogebraCommonKernelGeosGeoList:", "setColorFunction", "V", 0x1, NULL, NULL },
    { "removeColorFunction", NULL, "V", 0x1, NULL, NULL },
    { "moveObjectsWithJavaUtilArrayList:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonEuclidianEuclidianView:", "moveObjects", "Z", 0x9, NULL, NULL },
    { "getTempSet", NULL, "Ljava.util.TreeSet;", 0xc, NULL, NULL },
    { "movePointWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "movePoint", "Z", 0x4, NULL, NULL },
    { "moveVectorWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "moveVector", "Z", 0x4, NULL, NULL },
    { "moveObjectWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withJavaUtilArrayList:withOrgGeogebraCommonEuclidianEuclidianView:", "moveObject", "Z", 0x2, NULL, NULL },
    { "moveFromChangeableCoordParentNumbersWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withJavaUtilArrayList:withJavaUtilArrayList:withOrgGeogebraCommonEuclidianEuclidianView:", "moveFromChangeableCoordParentNumbers", "Z", 0x1, NULL, NULL },
    { "hasChangeableCoordParentNumbers", NULL, "Z", 0x1, NULL, NULL },
    { "recordChangeableCoordParentNumbers", NULL, "V", 0x1, NULL, NULL },
    { "addChangeableCoordParentNumberToUpdateListWithOrgGeogebraCommonKernelGeosGeoElement:withJavaUtilArrayList:withJavaUtilArrayList:", "addChangeableCoordParentNumberToUpdateList", "V", 0x1c, NULL, NULL },
    { "addParentToUpdateListWithOrgGeogebraCommonKernelGeosGeoElement:withJavaUtilArrayList:withJavaUtilArrayList:", "addParentToUpdateList", "V", 0x1a, NULL, NULL },
    { "getSpreadsheetCoords", NULL, "Lorg.geogebra.common.awt.GPoint;", 0x1, NULL, NULL },
    { "setSpreadsheetCoordsWithOrgGeogebraCommonAwtGPoint:", "setSpreadsheetCoords", "V", 0x1, NULL, NULL },
    { "getOldSpreadsheetCoords", NULL, "Lorg.geogebra.common.awt.GPoint;", 0x1, NULL, NULL },
    { "isAlgoMacroOutput", NULL, "Z", 0x11, NULL, NULL },
    { "setAlgoMacroOutputWithBoolean:", "setAlgoMacroOutput", "V", 0x1, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x401, NULL, NULL },
    { "isDifferenceZeroInCASWithOrgGeogebraCommonKernelGeosGeoElement:", "isDifferenceZeroInCAS", "Z", 0x11, NULL, NULL },
    { "getFormulaStringWithOrgGeogebraCommonKernelStringTemplate:withBoolean:", "getFormulaString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getSpreadsheetTrace", NULL, "Z", 0x1, NULL, NULL },
    { "setSpreadsheetTraceWithBoolean:", "setSpreadsheetTrace", "V", 0x1, NULL, NULL },
    { "resetTraceColumns", NULL, "V", 0x1, NULL, NULL },
    { "isSpreadsheetTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "hasSpreadsheetTraceModeTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "getTraceSettings", NULL, "Lorg.geogebra.common.util.SpreadsheetTraceSettings;", 0x1, NULL, NULL },
    { "setTraceSettingsWithOrgGeogebraCommonUtilSpreadsheetTraceSettings:", "setTraceSettings", "V", 0x1, NULL, NULL },
    { "getGeoElementForPropertiesDialog", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isTextCommand", NULL, "Z", 0x1, NULL, NULL },
    { "isInTree", NULL, "Z", 0x11, NULL, NULL },
    { "setInTreeWithBoolean:", "setInTree", "V", 0x11, NULL, NULL },
    { "setClickScriptWithOrgGeogebraCommonPluginScriptScript:", "setClickScript", "V", 0x1, NULL, NULL },
    { "setUpdateScriptWithOrgGeogebraCommonPluginScriptScript:", "setUpdateScript", "V", 0x1, NULL, NULL },
    { "setScriptWithOrgGeogebraCommonPluginScriptScript:withOrgGeogebraCommonPluginEventTypeEnum:", "setScript", "V", 0x1, NULL, NULL },
    { "canHaveUpdateScript", NULL, "Z", 0x1, NULL, NULL },
    { "getScriptWithOrgGeogebraCommonPluginEventTypeEnum:", "getScript", "Lorg.geogebra.common.plugin.script.Script;", 0x1, NULL, NULL },
    { "runClickScriptsWithNSString:", "runClickScripts", "V", 0x1, NULL, NULL },
    { "setShowTrimmedIntersectionLinesWithBoolean:", "setShowTrimmedIntersectionLines", "V", 0x1, NULL, NULL },
    { "getShowTrimmedIntersectionLines", NULL, "Z", 0x1, NULL, NULL },
    { "isPointInRegion", NULL, "Z", 0x1, NULL, NULL },
    { "setRandomGeoWithBoolean:", "setRandomGeo", "V", 0x1, NULL, NULL },
    { "isRandomGeo", NULL, "Z", 0x1, NULL, NULL },
    { "updateRandomGeo", NULL, "V", 0x1, NULL, NULL },
    { "isMatrixTransformable", NULL, "Z", 0x1, NULL, NULL },
    { "setVisibilityWithInt:withBoolean:", "setVisibility", "V", 0x1, NULL, NULL },
    { "isVisibleInViewWithInt:", "isVisibleInView", "Z", 0x1, NULL, NULL },
    { "addViewWithInt:", "addView", "V", 0x11, NULL, NULL },
    { "removeViewWithInt:", "removeView", "V", 0x1, NULL, NULL },
    { "setViewFlagsWithJavaUtilList:", "setViewFlags", "V", 0x1, NULL, NULL },
    { "getViewSet", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "isVisibleInView3D", NULL, "Z", 0x1, NULL, NULL },
    { "isVisibleInView3DNotSet", NULL, "Z", 0x4, NULL, NULL },
    { "isVisibleInViewForPlane", NULL, "Z", 0x1, NULL, NULL },
    { "setVisibleInView3DWithBoolean:", "setVisibleInView3D", "V", 0x1, NULL, NULL },
    { "setVisibleInViewForPlaneWithBoolean:", "setVisibleInViewForPlane", "V", 0x1, NULL, NULL },
    { "setVisibleInView3DWithOrgGeogebraCommonKernelGeosGeoElement:", "setVisibleInView3D", "V", 0x1, NULL, NULL },
    { "setVisibleInViewForPlaneWithOrgGeogebraCommonKernelGeosGeoElement:", "setVisibleInViewForPlane", "V", 0x1, NULL, NULL },
    { "setSelectionAllowedWithBoolean:", "setSelectionAllowed", "V", 0x1, NULL, NULL },
    { "isSelectionAllowed", NULL, "Z", 0x11, NULL, NULL },
    { "setRealLabelWithNSString:", "setRealLabel", "V", 0x1, NULL, NULL },
    { "isHatchingEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "setHatchingAngleWithInt:", "setHatchingAngle", "V", 0x1, NULL, NULL },
    { "getHatchingAngle", NULL, "D", 0x1, NULL, NULL },
    { "setHatchingDistanceWithInt:", "setHatchingDistance", "V", 0x1, NULL, NULL },
    { "getHatchingDistance", NULL, "I", 0x1, NULL, NULL },
    { "getFillImage", NULL, "Lorg.geogebra.common.awt.MyImage;", 0x1, NULL, NULL },
    { "setFillImageWithNSString:", "setFillImage", "V", 0x1, NULL, NULL },
    { "getFillType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", 0x1, NULL, NULL },
    { "setFillTypeWithOrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum:", "setFillType", "V", 0x1, NULL, NULL },
    { "setImageFileNameWithNSString:", "setImageFileName", "V", 0x1, NULL, NULL },
    { "getImageFileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setInverseFillWithBoolean:", "setInverseFill", "V", 0x1, NULL, NULL },
    { "isInverseFill", NULL, "Z", 0x1, NULL, NULL },
    { "getMainDirection", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "distanceWithOrgGeogebraCommonKernelGeosGeoPoint:", "distance", "D", 0x1, NULL, NULL },
    { "distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "distance", "D", 0x1, NULL, NULL },
    { "canHaveClickScript", NULL, "Z", 0x1, NULL, NULL },
    { "setIsPickableWithBoolean:", "setIsPickable", "V", 0x1, NULL, NULL },
    { "isPickable", NULL, "Z", 0x1, NULL, NULL },
    { "needsReplacingInExpressionNode", NULL, "Z", 0x1, NULL, NULL },
    { "setNeedsReplacingInExpressionNode", NULL, "V", 0x1, NULL, NULL },
    { "isGeoInterval", NULL, "Z", 0x1, NULL, NULL },
    { "getMeasure", NULL, "D", 0x1, NULL, NULL },
    { "moveDependenciesWithOrgGeogebraCommonKernelGeosGeoElement:", "moveDependencies", "V", 0x1, NULL, NULL },
    { "storeClone", NULL, "V", 0x1, NULL, NULL },
    { "recoverFromClone", NULL, "V", 0x1, NULL, NULL },
    { "randomizeForProbabilisticChecking", NULL, "V", 0x1, NULL, NULL },
    { "isRandomizable", NULL, "Z", 0x1, NULL, NULL },
    { "getCorrespondingCasCell", NULL, "Lorg.geogebra.common.kernel.geos.GeoCasCell;", 0x11, NULL, NULL },
    { "setCorrespondingCasCellWithOrgGeogebraCommonKernelGeosGeoCasCell:", "setCorrespondingCasCell", "V", 0x11, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "hasBackgroundColor", NULL, "Z", 0x1, NULL, NULL },
    { "algoUpdateSetContainsWithOrgGeogebraCommonKernelAlgosAlgoElement:", "algoUpdateSetContains", "Z", 0x1, NULL, NULL },
    { "resetSpreadsheetColumnHeadings", NULL, "V", 0x4, NULL, NULL },
    { "getColumnHeadings", NULL, "Ljava.util.ArrayList;", 0x11, NULL, NULL },
    { "updateColumnHeadingsForTraceValues", NULL, "V", 0x1, NULL, NULL },
    { "getTraceDialogAsValues", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTraceModes", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$TraceModesEnum;", 0x1, NULL, NULL },
    { "updateColumnHeadingsForTraceGeoCopy", NULL, "V", 0x4, NULL, NULL },
    { "getNameGeo", NULL, "Lorg.geogebra.common.kernel.geos.GeoText;", 0x4, NULL, NULL },
    { "getColumnHeadingTextWithOrgGeogebraCommonKernelArithmeticExpressionNode:", "getColumnHeadingText", "Lorg.geogebra.common.kernel.geos.GeoText;", 0x4, NULL, NULL },
    { "addToSpreadsheetTraceListWithJavaUtilArrayList:", "addToSpreadsheetTraceList", "V", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "traverseWithOrgGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, NULL, NULL },
    { "inspectWithOrgGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x11, NULL, NULL },
    { "getMetasLength", NULL, "I", 0x1, NULL, NULL },
    { "unwrap", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "wrap", NULL, "Lorg.geogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "isPinnable", NULL, "Z", 0x1, NULL, NULL },
    { "isPinned", NULL, "Z", 0x11, NULL, NULL },
    { "hasCoords", NULL, "Z", 0x1, NULL, NULL },
    { "setScriptingWithOrgGeogebraCommonKernelGeosGeoElement:", "setScripting", "V", 0x1, NULL, NULL },
    { "derivativeWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelKernel:", "derivative", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelKernel:", "integral", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "isMatrix", NULL, "Z", 0x1, NULL, NULL },
    { "getFillSymbol", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setFillSymbolWithNSString:", "setFillSymbol", "V", 0x1, NULL, NULL },
    { "getDecorationType", NULL, "I", 0x1, NULL, NULL },
    { "buildEquationElementWithOrgGeogebraCommonKernelLocusequEquationScope:", "buildEquationElement", "Lorg.geogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
    { "setSendValueToCasWithBoolean:", "setSendValueToCas", "V", 0x1, NULL, NULL },
    { "getSendValueToCas", NULL, "Z", 0x1, NULL, NULL },
    { "setCaptionBotanaVarsWithNSString:", "setCaptionBotanaVars", "V", 0x1, NULL, NULL },
    { "addCaptionBotanaPolynomialWithNSString:", "addCaptionBotanaPolynomial", "V", 0x1, NULL, NULL },
    { "showLineProperties", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesTo3DVector", NULL, "Z", 0x1, NULL, NULL },
    { "setCanBeRemovedAsInputWithBoolean:", "setCanBeRemovedAsInput", "V", 0x1, NULL, NULL },
    { "canBeRemovedAsInput", NULL, "Z", 0x1, NULL, NULL },
    { "hasLineOpacity", NULL, "Z", 0x1, NULL, NULL },
    { "getLineOpacity", NULL, "I", 0x1, NULL, NULL },
    { "setLineOpacityWithInt:", "setLineOpacity", "V", 0x1, NULL, NULL },
    { "evaluatesToNumberWithBoolean:", "evaluatesToNumber", "Z", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x401, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "spreadsheetColumnHeadings_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoText;>;",  },
    { "MIN_EDITING_PRINT_PRECISION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_MIN_EDITING_PRINT_PRECISION },
    { "MAX_LABEL_OFFSET_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_MAX_LABEL_OFFSET },
    { "pointLabels_", NULL, 0x1c, "[C", &OrgGeogebraCommonKernelGeosGeoElement_pointLabels_, NULL,  },
    { "functionLabels_", NULL, 0x1a, "[C", &OrgGeogebraCommonKernelGeosGeoElement_functionLabels_, NULL,  },
    { "lineLabels_", NULL, 0x1a, "[C", &OrgGeogebraCommonKernelGeosGeoElement_lineLabels_, NULL,  },
    { "vectorLabels_", NULL, 0x1a, "[C", &OrgGeogebraCommonKernelGeosGeoElement_vectorLabels_, NULL,  },
    { "conicLabels_", NULL, 0x1a, "[C", &OrgGeogebraCommonKernelGeosGeoElement_conicLabels_, NULL,  },
    { "lowerCaseLabels_", NULL, 0x1a, "[C", &OrgGeogebraCommonKernelGeosGeoElement_lowerCaseLabels_, NULL,  },
    { "integerLabels_", NULL, 0x1a, "[C", &OrgGeogebraCommonKernelGeosGeoElement_integerLabels_, NULL,  },
    { "greekLowerCase_", NULL, 0x1a, "[C", &OrgGeogebraCommonKernelGeosGeoElement_greekLowerCase_, NULL,  },
    { "arabic_", NULL, 0x1a, "[C", &OrgGeogebraCommonKernelGeosGeoElement_arabic_, NULL,  },
    { "yiddish_", NULL, 0x1a, "[C", &OrgGeogebraCommonKernelGeosGeoElement_yiddish_, NULL,  },
    { "greekUpperCase_", NULL, 0x1a, "[C", &OrgGeogebraCommonKernelGeosGeoElement_greekUpperCase_, NULL,  },
    { "LABEL_NAME_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME },
    { "LABEL_NAME_VALUE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE },
    { "LABEL_VALUE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_LABEL_VALUE },
    { "LABEL_CAPTION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_LABEL_CAPTION },
    { "LABEL_DEFAULT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT },
    { "LABEL_DEFAULT_NAME_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT_NAME },
    { "LABEL_DEFAULT_NAME_VALUE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT_NAME_VALUE },
    { "LABEL_DEFAULT_VALUE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT_VALUE },
    { "LABEL_DEFAULT_CAPTION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT_CAPTION },
    { "TOOLTIP_ALGEBRAVIEW_SHOWING_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_ALGEBRAVIEW_SHOWING },
    { "TOOLTIP_ON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_ON },
    { "TOOLTIP_OFF_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_OFF },
    { "TOOLTIP_CAPTION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_CAPTION },
    { "TOOLTIP_NEXTCELL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_NEXTCELL },
    { "tooltipMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "label_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "realLabel_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "oldLabel_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "caption_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "labelWanted_", NULL, 0x1, "Z", NULL, NULL,  },
    { "labelSet_", NULL, 0x1, "Z", NULL, NULL,  },
    { "localVarLabelSet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "euclidianVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "forceEuclidianVisible__", "forceEuclidianVisible", 0x2, "Z", NULL, NULL,  },
    { "algebraVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isConsProtBreakpoint_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isAlgoMacroOutput__", "isAlgoMacroOutput", 0x2, "Z", NULL, NULL,  },
    { "fixed_", NULL, 0x4, "Z", NULL, NULL,  },
    { "labelMode_", NULL, 0x1, "I", NULL, NULL,  },
    { "toStringMode_", NULL, 0x1, "I", NULL, NULL,  },
    { "objColor_", NULL, 0x4, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
    { "bgColor_", NULL, 0x4, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
    { "selColor_", NULL, 0x4, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
    { "labelColor_", NULL, 0x4, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
    { "fillColor_", NULL, 0x4, "Lorg.geogebra.common.awt.GColor;", NULL, NULL,  },
    { "layer_", NULL, 0x2, "I", NULL, NULL,  },
    { "animationIncrement_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "animationSpeedObj_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "correspondingCasCell_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoCasCell;", NULL, NULL,  },
    { "animating_", NULL, 0x2, "Z", NULL, NULL,  },
    { "MAX_ANIMATION_SPEED_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgGeogebraCommonKernelGeosGeoElement_MAX_ANIMATION_SPEED },
    { "ANIMATION_OSCILLATING_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_ANIMATION_OSCILLATING },
    { "ANIMATION_INCREASING_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING },
    { "ANIMATION_DECREASING_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_ANIMATION_DECREASING },
    { "ANIMATION_INCREASING_ONCE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING_ONCE },
    { "animationType_", NULL, 0x2, "I", NULL, NULL,  },
    { "animationDirection_", NULL, 0x2, "I", NULL, NULL,  },
    { "alphaValue_", NULL, 0x4, "F", NULL, NULL,  },
    { "hatchingAngle_", NULL, 0x4, "I", NULL, NULL,  },
    { "hatchingDistance_", NULL, 0x4, "I", NULL, NULL,  },
    { "inverseFill_", NULL, 0x2, "Z", NULL, NULL,  },
    { "fillSymbol_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "graphicsadapter_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElementGraphicsAdapter;", NULL, NULL,  },
    { "fillType_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", NULL, NULL,  },
    { "COLORSPACE_RGB_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_COLORSPACE_RGB },
    { "COLORSPACE_HSB_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_COLORSPACE_HSB },
    { "COLORSPACE_HSL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_COLORSPACE_HSL },
    { "colorSpace_", NULL, 0x2, "I", NULL, NULL,  },
    { "viewFlags_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Integer;>;",  },
    { "defaultGeoType_", NULL, 0x2, "I", NULL, NULL,  },
    { "labelOffsetX_", NULL, 0x1, "I", NULL, NULL,  },
    { "labelOffsetY_", NULL, 0x1, "I", NULL, NULL,  },
    { "auxiliaryObject_", NULL, 0x2, "Z", NULL, NULL,  },
    { "selectionAllowed_", NULL, 0x2, "Z", NULL, NULL,  },
    { "spreadsheetCoords_", NULL, 0x2, "Lorg.geogebra.common.awt.GPoint;", NULL, NULL,  },
    { "oldSpreadsheetCoords_", NULL, 0x2, "Lorg.geogebra.common.awt.GPoint;", NULL, NULL,  },
    { "cellRangeUsers_", NULL, 0x2, "I", NULL, NULL,  },
    { "condShowObject_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "sendValueToCas_", NULL, 0x4, "Z", NULL, NULL,  },
    { "colFunction_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "useVisualDefaults_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isColorSet__", "isColorSet", 0x4, "Z", NULL, NULL,  },
    { "highlighted_", NULL, 0x4, "Z", NULL, NULL,  },
    { "selected_", NULL, 0x2, "Z", NULL, NULL,  },
    { "strAlgebraDescription_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "strAlgebraDescTextOrHTML_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "strAlgebraDescriptionHTML_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "strLabelTextOrHTML_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "strLaTeX_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "strAlgebraDescriptionNeedsUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "strAlgebraDescTextOrHTMLneedsUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "strAlgebraDescriptionHTMLneedsUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "strLabelTextOrHTMLUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "strLaTeXneedsUpdate_", NULL, 0x4, "Z", NULL, NULL,  },
    { "lineThickness_", NULL, 0x1, "I", NULL, NULL,  },
    { "lineType_", NULL, 0x1, "I", NULL, NULL,  },
    { "lineTypeHidden_", NULL, 0x1, "I", NULL, NULL,  },
    { "lineOpacity_", NULL, 0x2, "I", NULL, NULL,  },
    { "decorationType_", NULL, 0x1, "I", NULL, NULL,  },
    { "DECORATION_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_NONE },
    { "DECORATION_SEGMENT_ONE_TICK_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_ONE_TICK },
    { "DECORATION_SEGMENT_TWO_TICKS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_TWO_TICKS },
    { "DECORATION_SEGMENT_THREE_TICKS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_THREE_TICKS },
    { "DECORATION_SEGMENT_ONE_ARROW_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_ONE_ARROW },
    { "DECORATION_SEGMENT_TWO_ARROWS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_TWO_ARROWS },
    { "DECORATION_SEGMENT_THREE_ARROWS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_THREE_ARROWS },
    { "DECORATION_ANGLE_TWO_ARCS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_ARCS },
    { "DECORATION_ANGLE_THREE_ARCS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_ARCS },
    { "DECORATION_ANGLE_ONE_TICK_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ONE_TICK },
    { "DECORATION_ANGLE_TWO_TICKS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_TICKS },
    { "DECORATION_ANGLE_THREE_TICKS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_TICKS },
    { "DECORATION_ANGLE_ARROW_ANTICLOCKWISE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_ANTICLOCKWISE },
    { "DECORATION_ANGLE_ARROW_CLOCKWISE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_CLOCKWISE },
    { "algoParent_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgoElement;", NULL, NULL,  },
    { "algoDraw_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgoElement;", NULL, NULL,  },
    { "algorithmList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/algos/AlgoElement;>;",  },
    { "algoUpdateSet_", NULL, 0x4, "Lorg.geogebra.common.kernel.algos.AlgorithmSet;", NULL, NULL,  },
    { "viewForValueString_", NULL, 0x2, "Lorg.geogebra.common.euclidian.EuclidianViewInterfaceSlim;", NULL, NULL,  },
    { "sequentialColor_", NULL, 0x2, "Z", NULL, NULL,  },
    { "MAX_LINE_WIDTH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoElement_MAX_LINE_WIDTH },
    { "isEmptySpreadsheetCell__", "isEmptySpreadsheetCell", 0x2, "Z", NULL, NULL,  },
    { "latexCache_", NULL, 0x2, "Lorg.geogebra.common.util.LaTeXCache;", NULL, NULL,  },
    { "strHasIndexLabel_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "hasIndexLabel__", "hasIndexLabel", 0x2, "Z", NULL, NULL,  },
    { "moveObjectsUpdateList_", NULL, 0x4a, "Ljava.util.ArrayList;", &OrgGeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "tempSet_", NULL, 0x4a, "Ljava.util.TreeSet;", &OrgGeogebraCommonKernelGeosGeoElement_tempSet_, "Ljava/util/TreeSet<Lorg/geogebra/common/kernel/algos/AlgoElement;>;",  },
    { "algoComparator_", NULL, 0xa, "Ljava.util.Comparator;", &OrgGeogebraCommonKernelGeosGeoElement_algoComparator_, "Ljava/util/Comparator<Lorg/geogebra/common/kernel/algos/AlgoElement;>;",  },
    { "tempMoveObjectList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "spreadsheetTrace_", NULL, 0x2, "Z", NULL, NULL,  },
    { "traceSettings_", NULL, 0x2, "Lorg.geogebra.common.util.SpreadsheetTraceSettings;", NULL, NULL,  },
    { "inTree_", NULL, 0x2, "Z", NULL, NULL,  },
    { "scripts_", NULL, 0x2, "[Lorg.geogebra.common.plugin.script.Script;", NULL, NULL,  },
    { "showTrimmedIntersectionLines_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isRandomGeo__", "isRandomGeo", 0x2, "Z", NULL, NULL,  },
    { "visibleInView3D_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoElement$VisibleInView;", NULL, NULL,  },
    { "visibleInViewForPlane_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoElement$VisibleInView;", NULL, NULL,  },
    { "isPickable__", "isPickable", 0x2, "Z", NULL, NULL,  },
    { "needsReplacingInExpressionNode__", "needsReplacingInExpressionNode", 0x2, "Z", NULL, NULL,  },
    { "tempClone_", NULL, 0x2, "Ljava.util.Stack;", NULL, "Ljava/util/Stack<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "cloneInUse_", NULL, 0x2, "Z", NULL, NULL,  },
    { "canBeRemovedAsInput__", "canBeRemovedAsInput", 0x2, "Z", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", "Lorg.geogebra.common.kernel.geos.GeoElement$VisibleInView;", "Lorg.geogebra.common.kernel.geos.GeoElement$TraceModesEnum;", "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoElement = { 2, "GeoElement", "org.geogebra.common.kernel.geos", NULL, 0x401, 488, methods, 146, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoElement;
}

@end

void OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoElement *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelAlgosConstructionElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  OrgGeogebraCommonKernelGeosGeoElement_set_spreadsheetColumnHeadings_(self, nil);
  self->tooltipMode_ = OrgGeogebraCommonKernelGeosGeoElement_TOOLTIP_ALGEBRAVIEW_SHOWING;
  self->labelWanted_ = NO;
  self->labelSet_ = NO;
  self->localVarLabelSet_ = NO;
  self->euclidianVisible_ = YES;
  self->forceEuclidianVisible__ = NO;
  self->algebraVisible_ = YES;
  self->labelVisible_ = YES;
  self->fixed_ = NO;
  self->labelMode_ = OrgGeogebraCommonKernelGeosGeoElement_LABEL_DEFAULT;
  self->toStringMode_ = OrgGeogebraCommonKernelKernel_COORD_CARTESIAN;
  OrgGeogebraCommonKernelGeosGeoElement_set_objColor_(self, OrgGeogebraCommonAwtGColor_get_BLACK_());
  OrgGeogebraCommonKernelGeosGeoElement_set_bgColor_(self, nil);
  OrgGeogebraCommonKernelGeosGeoElement_set_selColor_(self, self->objColor_);
  OrgGeogebraCommonKernelGeosGeoElement_set_labelColor_(self, self->objColor_);
  OrgGeogebraCommonKernelGeosGeoElement_set_fillColor_(self, self->objColor_);
  self->layer_ = 0;
  self->animating_ = NO;
  self->animationType_ = OrgGeogebraCommonKernelGeosGeoElement_ANIMATION_OSCILLATING;
  self->animationDirection_ = 1;
  self->alphaValue_ = 0.0f;
  self->hatchingAngle_ = 45;
  self->hatchingDistance_ = 10;
  self->inverseFill_ = NO;
  OrgGeogebraCommonKernelGeosGeoElement_set_fillSymbol_(self, nil);
  OrgGeogebraCommonKernelGeosGeoElement_set_fillType_(self, OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_STANDARD());
  self->colorSpace_ = OrgGeogebraCommonKernelGeosGeoElement_COLORSPACE_RGB;
  OrgGeogebraCommonKernelGeosGeoElement_set_viewFlags_(self, nil);
  self->defaultGeoType_ = -1;
  self->labelOffsetX_ = 0;
  self->labelOffsetY_ = 0;
  self->auxiliaryObject_ = NO;
  self->selectionAllowed_ = YES;
  self->cellRangeUsers_ = 0;
  self->sendValueToCas_ = YES;
  self->useVisualDefaults_ = YES;
  self->isColorSet__ = NO;
  self->highlighted_ = NO;
  self->selected_ = NO;
  self->strAlgebraDescriptionNeedsUpdate_ = YES;
  self->strAlgebraDescTextOrHTMLneedsUpdate_ = YES;
  self->strAlgebraDescriptionHTMLneedsUpdate_ = YES;
  self->strLabelTextOrHTMLUpdate_ = YES;
  self->strLaTeXneedsUpdate_ = YES;
  self->lineThickness_ = OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_THICKNESS;
  self->lineType_ = OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_TYPE;
  self->lineTypeHidden_ = OrgGeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_TYPE_HIDDEN;
  self->lineOpacity_ = 255;
  self->decorationType_ = OrgGeogebraCommonKernelGeosGeoElement_DECORATION_NONE;
  OrgGeogebraCommonKernelGeosGeoElement_set_algoParent_(self, nil);
  OrgGeogebraCommonKernelGeosGeoElement_set_algoDraw_(self, nil);
  self->isEmptySpreadsheetCell__ = NO;
  OrgGeogebraCommonKernelGeosGeoElement_set_latexCache_(self, nil);
  self->hasIndexLabel__ = NO;
  self->inTree_ = NO;
  OrgGeogebraCommonKernelGeosGeoElement_set_scripts_(self, nil);
  self->showTrimmedIntersectionLines_ = NO;
  self->isRandomGeo__ = NO;
  OrgGeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_get_NOT_SET());
  OrgGeogebraCommonKernelGeosGeoElement_set_visibleInViewForPlane_(self, OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_get_NOT_SET());
  self->isPickable__ = YES;
  self->needsReplacingInExpressionNode__ = NO;
  self->cloneInUse_ = NO;
  self->canBeRemovedAsInput__ = YES;
  [((JavaUtilTreeSet *) nil_chk(((OrgGeogebraCommonKernelConstruction *) nil_chk(c))->usedGeos_)) addWithId:[self getGeoClassType]];
  OrgGeogebraCommonKernelGeosGeoElement_set_graphicsadapter_(self, [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) newGeoElementGraphicsAdapter]);
  if ([self->kernel_ getApplication] != nil) {
    self->layer_ = [((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getMaxLayerUsed];
  }
  id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim> ev;
  if (([self->kernel_ getApplication] != nil) && ((ev = [((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getActiveEuclidianView]) != nil) && ([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((OrgGeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getActiveEuclidianView])) getViewID] != OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN)) {
    OrgGeogebraCommonKernelGeosGeoElement_setAndConsume_viewFlags_(self, new_JavaUtilArrayList_init());
    [self->viewFlags_ addWithId:JavaLangInteger_valueOfWithInt_([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(ev)) getViewID])];
    if (!([ev isDefault2D])) {
      [self->viewFlags_ addWithId:JavaLangInteger_valueOfWithInt_(OrgGeogebraCommonMainApp_VIEW_EUCLIDIAN)];
    }
  }
}

IOSObjectArray *OrgGeogebraCommonKernelGeosGeoElement_copyPointsWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *points) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  if (points == nil) {
    return nil;
  }
  IOSObjectArray *pointsCopy = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(points))->size_ type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
  for (jint i = 0; i < points->size_; i++) {
    IOSObjectArray_Set(pointsCopy, i, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(((OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, i), [OrgGeogebraCommonKernelGeosGeoPoint class])))) copyInternalWithOrgGeogebraCommonKernelConstruction:cons], [OrgGeogebraCommonKernelGeosGeoPoint class]));
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pointsCopy, i))) setWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, i)];
  }
  return pointsCopy;
}

IOSObjectArray *OrgGeogebraCommonKernelGeosGeoElement_copyPointsNDWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonKernelConstruction *cons, IOSObjectArray *points) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  IOSObjectArray *pointsCopy = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(points))->size_ type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
  for (jint i = 0; i < points->size_; i++) {
    IOSObjectArray_Set(pointsCopy, i, (id<OrgGeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [OrgGeogebraCommonKernelGeosGeoElement class])))) copyInternalWithOrgGeogebraCommonKernelConstruction:cons], @protocol(OrgGeogebraCommonKernelKernelNDGeoPointND)));
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(pointsCopy, i), [OrgGeogebraCommonKernelGeosGeoElement class])))) setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [OrgGeogebraCommonKernelGeosGeoElement class])];
  }
  return pointsCopy;
}

void OrgGeogebraCommonKernelGeosGeoElement_setConstructionDefaultsWithBoolean_(OrgGeogebraCommonKernelGeosGeoElement *self, jboolean setEuclidianVisible) {
  if (self->useVisualDefaults_) {
    OrgGeogebraCommonKernelConstructionDefaults *consDef = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getConstructionDefaults];
    if (consDef != nil) {
      [consDef setDefaultVisualStylesWithOrgGeogebraCommonKernelGeosGeoElement:self withBoolean:NO withBoolean:setEuclidianVisible];
    }
  }
}

OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelGeosGeoElement_getRGBFromListWithFloat_(OrgGeogebraCommonKernelGeosGeoElement *self, jfloat alpha1) {
  jfloat alpha2 = alpha1;
  if (alpha2 > 1.0f) {
    alpha2 = 1.0f;
  }
  if (alpha2 < 0.0f) {
    alpha2 = 0.0f;
  }
  jint alpha = J2ObjCFpToInt((alpha2 * 255.0f));
  return OrgGeogebraCommonKernelGeosGeoElement_getRGBFromListWithInt_(self, alpha);
}

OrgGeogebraCommonAwtGColor *OrgGeogebraCommonKernelGeosGeoElement_getRGBFromListWithInt_(OrgGeogebraCommonKernelGeosGeoElement *self, jint withAlpha) {
  jint alpha = withAlpha;
  if (alpha > 255) {
    alpha = 255;
  }
  else if (alpha < 0) {
    alpha = 0;
  }
  jdouble redD = 0, greenD = 0, blueD = 0;
  for (jint i = 0; i < 3; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [((OrgGeogebraCommonKernelGeosGeoList *) nil_chk(self->colFunction_)) getWithInt:i];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined]) {
      jdouble val = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue))) getDouble];
      switch (i) {
        case 0:
        redD = val;
        break;
        case 1:
        greenD = val;
        break;
        case 2:
        blueD = val;
        break;
      }
    }
  }
  redD = (redD / 2) - JavaLangMath_floorWithDouble_(redD / 2);
  greenD = (greenD / 2) - JavaLangMath_floorWithDouble_(greenD / 2);
  blueD = (blueD / 2) - JavaLangMath_floorWithDouble_(blueD / 2);
  if (redD > 0.5) {
    redD = 2 * (1 - redD);
  }
  else {
    redD = 2 * redD;
  }
  if (greenD > 0.5) {
    greenD = 2 * (1 - greenD);
  }
  else {
    greenD = 2 * greenD;
  }
  if (blueD > 0.5) {
    blueD = 2 * (1 - blueD);
  }
  else {
    blueD = 2 * blueD;
  }
  {
    jint rgb;
    jdouble H;
    jdouble S;
    jdouble L;
    jdouble C;
    jdouble X;
    jdouble R1, G1, B1;
    jdouble m;
    OrgGeogebraCommonAwtGColor *c;
    switch (self->colorSpace_) {
      case OrgGeogebraCommonKernelGeosGeoElement_COLORSPACE_HSB:
      rgb = OrgGeogebraCommonAwtGColor_HSBtoRGBWithFloat_withFloat_withFloat_((jfloat) redD, (jfloat) greenD, (jfloat) blueD);
      redD = (RShift32(rgb, 16)) & (jint) 0xFF;
      greenD = (RShift32(rgb, 8)) & (jint) 0xFF;
      blueD = rgb & (jint) 0xFF;
      return [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:J2ObjCFpToInt(redD) withInt:J2ObjCFpToInt(greenD) withInt:J2ObjCFpToInt(blueD) withInt:alpha];
      case OrgGeogebraCommonKernelGeosGeoElement_COLORSPACE_HSL:
      H = redD * 6;
      S = greenD;
      L = blueD;
      C = (1 - JavaLangMath_absWithDouble_((2 * L) - 1)) * S;
      X = C * (1 - JavaLangMath_absWithDouble_((fmod(H, 2)) - 1));
      R1 = 0;
      G1 = 0;
      B1 = 0;
      if (H < 1) {
        R1 = C;
        G1 = X;
        B1 = 0;
      }
      else if (H < 2) {
        R1 = X;
        G1 = C;
        B1 = 0;
      }
      else if (H < 3) {
        R1 = 0;
        G1 = C;
        B1 = X;
      }
      else if (H < 4) {
        R1 = 0;
        G1 = X;
        B1 = C;
      }
      else if (H < 5) {
        R1 = X;
        G1 = 0;
        B1 = C;
      }
      else {
        R1 = C;
        G1 = 0;
        B1 = X;
      }
      m = L - (.5 * C);
      c = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:J2ObjCFpToInt(((R1 + m) * 255.0)) withInt:J2ObjCFpToInt(((G1 + m) * 255.0)) withInt:J2ObjCFpToInt(((B1 + m) * 255.0)) withInt:alpha];
      return c;
      case OrgGeogebraCommonKernelGeosGeoElement_COLORSPACE_RGB:
      default:
      return [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:J2ObjCFpToInt((redD * 255.0)) withInt:J2ObjCFpToInt((greenD * 255.0)) withInt:J2ObjCFpToInt((blueD * 255.0)) withInt:alpha];
    }
  }
}

jint OrgGeogebraCommonKernelGeosGeoElement_typePriority(OrgGeogebraCommonKernelGeosGeoElement *self) {
  switch ([[self getGeoClassType] ordinal]) {
    case OrgGeogebraCommonPluginGeoClass_AXIS:
    return 10;
    case OrgGeogebraCommonPluginGeoClass_PENSTROKE:
    return 15;
    case OrgGeogebraCommonPluginGeoClass_IMAGE:
    case OrgGeogebraCommonPluginGeoClass_TURTLE:
    case OrgGeogebraCommonPluginGeoClass_BOOLEAN:
    return 20;
    case OrgGeogebraCommonPluginGeoClass_LIST:
    return 40;
    case OrgGeogebraCommonPluginGeoClass_POLYGON:
    case OrgGeogebraCommonPluginGeoClass_POLYGON3D:
    return 50;
    case OrgGeogebraCommonPluginGeoClass_POLYLINE:
    return 51;
    case OrgGeogebraCommonPluginGeoClass_IMPLICIT_POLY:
    case OrgGeogebraCommonPluginGeoClass_IMPLICIT_CURVE:
    return 60;
    case OrgGeogebraCommonPluginGeoClass_CONIC:
    case OrgGeogebraCommonPluginGeoClass_CONICPART:
    case OrgGeogebraCommonPluginGeoClass_CONIC3D:
    case OrgGeogebraCommonPluginGeoClass_CONICSECTION:
    return 70;
    case OrgGeogebraCommonPluginGeoClass_ANGLE:
    case OrgGeogebraCommonPluginGeoClass_ANGLE3D:
    case OrgGeogebraCommonPluginGeoClass_NUMERIC:
    return 80;
    case OrgGeogebraCommonPluginGeoClass_SPLINE:
    case OrgGeogebraCommonPluginGeoClass_INTERVAL:
    case OrgGeogebraCommonPluginGeoClass_FUNCTION:
    case OrgGeogebraCommonPluginGeoClass_FUNCTIONCONDITIONAL:
    case OrgGeogebraCommonPluginGeoClass_CURVE_CARTESIAN:
    case OrgGeogebraCommonPluginGeoClass_CURVE_CARTESIAN3D:
    case OrgGeogebraCommonPluginGeoClass_CURVE_POLAR:
    return 90;
    case OrgGeogebraCommonPluginGeoClass_LINE:
    case OrgGeogebraCommonPluginGeoClass_LINE3D:
    return 100;
    case OrgGeogebraCommonPluginGeoClass_FUNCTION_NVAR:
    return 102;
    case OrgGeogebraCommonPluginGeoClass_RAY:
    case OrgGeogebraCommonPluginGeoClass_SEGMENT:
    case OrgGeogebraCommonPluginGeoClass_RAY3D:
    case OrgGeogebraCommonPluginGeoClass_SEGMENT3D:
    return 110;
    case OrgGeogebraCommonPluginGeoClass_VECTOR:
    case OrgGeogebraCommonPluginGeoClass_VECTOR3D:
    return 120;
    case OrgGeogebraCommonPluginGeoClass_LOCUS:
    return 130;
    case OrgGeogebraCommonPluginGeoClass_POINT:
    case OrgGeogebraCommonPluginGeoClass_POINT3D:
    return 140;
    case OrgGeogebraCommonPluginGeoClass_TEXT:
    return 150;
    case OrgGeogebraCommonPluginGeoClass_TEXTFIELD:
    case OrgGeogebraCommonPluginGeoClass_BUTTON:
    return 155;
    default:
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"missing case in getDrawingPriority() for ", [self getGeoClassType]));
    return 160;
  }
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_isVisible(OrgGeogebraCommonKernelGeosGeoElement *self) {
  return OrgGeogebraCommonKernelGeosGeoElement_isEuclidianVisible(self) || OrgGeogebraCommonKernelGeosGeoElement_isAlgebraVisible(self);
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_isEuclidianVisible(OrgGeogebraCommonKernelGeosGeoElement *self) {
  if (self->forceEuclidianVisible__) {
    return YES;
  }
  if (![self showInEuclidianView]) {
    return NO;
  }
  if (self->condShowObject_ == nil) {
    return self->euclidianVisible_;
  }
  return [((OrgGeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->condShowObject_)) getBoolean];
}

void OrgGeogebraCommonKernelGeosGeoElement_setFixedWithBoolean_(OrgGeogebraCommonKernelGeosGeoElement *self, jboolean flag) {
  if (!flag) {
    self->fixed_ = flag;
  }
  else if ([self isFixable]) {
    self->fixed_ = flag;
  }
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_isAuxiliaryObject(OrgGeogebraCommonKernelGeosGeoElement *self) {
  return self->auxiliaryObject_;
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_isAlgebraVisible(OrgGeogebraCommonKernelGeosGeoElement *self) {
  return self->algebraVisible_ && [self showInAlgebraView];
}

OrgGeogebraCommonKernelAlgosAlgoElement *OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(OrgGeogebraCommonKernelGeosGeoElement *self) {
  return self->algoParent_;
}

JavaUtilArrayList *OrgGeogebraCommonKernelGeosGeoElement_getAlgorithmList(OrgGeogebraCommonKernelGeosGeoElement *self) {
  if (self->algorithmList_ == nil) {
    OrgGeogebraCommonKernelGeosGeoElement_setAndConsume_algorithmList_(self, new_JavaUtilArrayList_init());
  }
  return self->algorithmList_;
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_hasOnlyFreeInputPointsWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(OrgGeogebraCommonKernelGeosGeoElement *self, id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim> view) {
  if (self->algoParent_ == nil) {
    return NO;
  }
  if ([self->algoParent_ isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegment class]] && ([((JavaUtilArrayList *) nil_chk([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(view)) getFreeInputPointsWithOrgGeogebraCommonKernelAlgosAlgoElement:self->algoParent_])) size] == 2)) {
    return YES;
  }
  return [((JavaUtilArrayList *) nil_chk([((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(view)) getFreeInputPointsWithOrgGeogebraCommonKernelAlgosAlgoElement:self->algoParent_])) size] == ((IOSObjectArray *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(self->algoParent_))->input_))->size_;
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_containsOnlyMoveableGeosWithJavaUtilArrayList_(JavaUtilArrayList *geos) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  if ((geos == nil) || ([geos size] == 0)) {
    return NO;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([geos getWithInt:i], [OrgGeogebraCommonKernelGeosGeoElement class]);
    if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isMoveable]) {
      return NO;
    }
  }
  return YES;
}

void OrgGeogebraCommonKernelGeosGeoElement_initAnimationSpeedObject(OrgGeogebraCommonKernelGeosGeoElement *self) {
  if (self->animationSpeedObj_ == nil) {
    OrgGeogebraCommonKernelGeosGeoNumeric *num = [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self->cons_) autorelease];
    [num setValueWithDouble:1];
    OrgGeogebraCommonKernelGeosGeoElement_set_animationSpeedObj_(self, num);
  }
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_isAnimating(OrgGeogebraCommonKernelGeosGeoElement *self) {
  return self->animating_;
}

void OrgGeogebraCommonKernelGeosGeoElement_doSetLabelWithNSString_(OrgGeogebraCommonKernelGeosGeoElement *self, NSString *newLabel) {
  if (!self->labelSet_ && [self isIndependent]) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) addToConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:self withBoolean:YES];
  }
  OrgGeogebraCommonKernelGeosGeoElement_set_label_(self, newLabel);
  self->labelSet_ = YES;
  self->labelWanted_ = NO;
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) putLabelWithOrgGeogebraCommonKernelGeosGeoElement:self];
  OrgGeogebraCommonKernelGeosGeoElement_algebraStringsNeedUpdate(self);
  OrgGeogebraCommonKernelGeosGeoElement_updateSpreadsheetCoordinates(self);
  OrgGeogebraCommonKernelGeosGeoElement_notifyAdd(self);
}

void OrgGeogebraCommonKernelGeosGeoElement_updateSpreadsheetCoordinates(OrgGeogebraCommonKernelGeosGeoElement *self) {
  if (self->labelSet_ && (((jint) [((NSString *) nil_chk(self->label_)) length]) > 0) && OrgGeogebraCommonUtilStringUtil_isLetterWithChar_([self->label_ charAtWithInt:0]) && OrgGeogebraCommonUtilStringUtil_isDigitWithChar_([self->label_ charAtWithInt:((jint) [self->label_ length]) - 1])) {
    if (self->spreadsheetCoords_ == nil) {
      OrgGeogebraCommonKernelGeosGeoElement_set_oldSpreadsheetCoords_(self, nil);
      OrgGeogebraCommonKernelGeosGeoElement_setAndConsume_spreadsheetCoords_(self, new_OrgGeogebraCommonAwtGPoint_init());
    }
    else {
      if (self->oldSpreadsheetCoords_ == nil) {
        OrgGeogebraCommonKernelGeosGeoElement_setAndConsume_oldSpreadsheetCoords_(self, new_OrgGeogebraCommonAwtGPoint_init());
      }
      [((OrgGeogebraCommonAwtGPoint *) nil_chk(self->oldSpreadsheetCoords_)) setLocationWithOrgGeogebraCommonAwtGPoint:self->spreadsheetCoords_];
    }
    OrgGeogebraCommonAwtGPoint *p = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetIndicesWithNSString_([self getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
    if ((((OrgGeogebraCommonAwtGPoint *) nil_chk(p))->x_ >= 0) && (p->y_ >= 0)) {
      [((OrgGeogebraCommonAwtGPoint *) nil_chk(self->spreadsheetCoords_)) setLocationWithInt:p->x_ withInt:p->y_];
    }
    else {
      OrgGeogebraCommonKernelGeosGeoElement_set_spreadsheetCoords_(self, nil);
    }
  }
  else {
    OrgGeogebraCommonKernelGeosGeoElement_set_oldSpreadsheetCoords_(self, self->spreadsheetCoords_);
    OrgGeogebraCommonKernelGeosGeoElement_set_spreadsheetCoords_(self, nil);
  }
}

jint OrgGeogebraCommonKernelGeosGeoElement_compareLabelsWithNSString_withNSString_(NSString *label1, NSString *label2) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  if (OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_isSpreadsheetLabelWithNSString_(label1) && OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_isSpreadsheetLabelWithNSString_(label2)) {
    OrgGeogebraCommonAwtGPoint *p1 = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(label1);
    OrgGeogebraCommonAwtGPoint *p2 = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(label2);
    if (((OrgGeogebraCommonAwtGPoint *) nil_chk(p1))->x_ != ((OrgGeogebraCommonAwtGPoint *) nil_chk(p2))->x_) {
      return p1->x_ - p2->x_;
    }
    return p1->y_ - p2->y_;
  }
  return [((NSString *) nil_chk(label1)) compareToWithId:label2];
}

void OrgGeogebraCommonKernelGeosGeoElement_doRenameLabelWithNSString_(OrgGeogebraCommonKernelGeosGeoElement *self, NSString *newLabel) {
  if ((newLabel == nil) || [newLabel isEqual:self->label_]) {
    return;
  }
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeLabelWithOrgGeogebraCommonKernelGeosGeoElement:self];
  OrgGeogebraCommonKernelGeosGeoElement_set_oldLabel_(self, self->label_);
  OrgGeogebraCommonKernelGeosGeoElement_set_label_(self, newLabel);
  if (self->correspondingCasCell_ != nil) {
    [self->correspondingCasCell_ setInputFromTwinGeoWithBoolean:NO];
  }
  [self->cons_ putLabelWithOrgGeogebraCommonKernelGeosGeoElement:self];
  OrgGeogebraCommonKernelGeosGeoElement_algebraStringsNeedUpdate(self);
  OrgGeogebraCommonKernelGeosGeoElement_updateSpreadsheetCoordinates(self);
  [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRenameWithOrgGeogebraCommonKernelGeosGeoElement:self];
  [self updateCascade];
  [self->kernel_ notifyRenameUpdatesComplete];
}

void OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSString_withOrgGeogebraCommonKernelGeosGeoElementArray_(NSString *labelPrefix, IOSObjectArray *geos) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  if (geos == nil) {
    return;
  }
  jint visible = 0;
  jint firstVisible = 0;
  for (jint i = ((IOSObjectArray *) nil_chk(geos))->size_ - 1; i >= 0; i--) {
    if (OrgGeogebraCommonKernelGeosGeoElement_isVisible(nil_chk(IOSObjectArray_Get(geos, i)))) {
      firstVisible = i;
      visible++;
    }
  }
  {
    OrgGeogebraCommonAwtGPoint *p;
    switch (visible) {
      case 0:
      for (jint i = 0; i < geos->size_; i++) {
        [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) setLabelWithNSString:labelPrefix];
      }
      break;
      case 1:
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, firstVisible))) setLabelWithNSString:labelPrefix];
      break;
      default:
      p = OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetIndicesWithNSString_(labelPrefix);
      if ((((OrgGeogebraCommonAwtGPoint *) nil_chk(p))->x_ >= 0) && (p->y_ >= 0)) {
        jint col = p->x_;
        jint row = p->y_;
        for (jint i = 0; i < geos->size_; i++) {
          [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) setLabelWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) getFreeLabelWithNSString:OrgGeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(col + i, row)]];
        }
      }
      else {
        for (jint i = 0; i < geos->size_; i++) {
          [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) setLabelWithNSString:[((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) getIndexLabelWithNSString:labelPrefix]];
        }
      }
    }
  }
}

void OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_(IOSObjectArray *labels, IOSObjectArray *geos) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_withBoolean_(labels, geos, NO);
}

void OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withOrgGeogebraCommonKernelGeosGeoElementArray_withBoolean_(IOSObjectArray *labels, IOSObjectArray *geos, jboolean indexedOnly) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  jint labelLen = (labels == nil) ? 0 : labels->size_;
  if ((labelLen == 1) && (IOSObjectArray_Get(nil_chk(labels), 0) != nil) && ![((NSString *) nil_chk(IOSObjectArray_Get(labels, 0))) isEqual:@""]) {
    OrgGeogebraCommonKernelGeosGeoElement_setLabelsWithNSString_withOrgGeogebraCommonKernelGeosGeoElementArray_(IOSObjectArray_Get(labels, 0), geos);
    return;
  }
  NSString *label;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
    if (i < labelLen) {
      label = IOSObjectArray_Get(nil_chk(labels), i);
    }
    else {
      label = nil;
    }
    if (indexedOnly) {
      label = [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) getIndexLabelWithNSString:label];
    }
    [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) setLabelWithNSString:label];
  }
}

NSString *OrgGeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(OrgGeogebraCommonKernelGeosGeoElement *self, NSString *plainKey) {
  jint counter = 0;
  NSString *str;
  do {
    counter++;
    str = JreStrcat("$$", [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainLabelWithNSString:plainKey], [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) internationalizeDigitsWithNSString:JreStrcat("I", counter) withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
  }
  while (![((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isFreeLabelWithNSString:str]);
  return str;
}

void OrgGeogebraCommonKernelGeosGeoElement_notifyAdd(OrgGeogebraCommonKernelGeosGeoElement *self) {
  [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyAddWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

void OrgGeogebraCommonKernelGeosGeoElement_notifyRemove(OrgGeogebraCommonKernelGeosGeoElement *self) {
  [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRemoveWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

void OrgGeogebraCommonKernelGeosGeoElement_notifyUpdateAuxiliaryObject(OrgGeogebraCommonKernelGeosGeoElement *self) {
  [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyUpdateAuxiliaryObjectWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

void OrgGeogebraCommonKernelGeosGeoElement_updateGeo(OrgGeogebraCommonKernelGeosGeoElement *self) {
  if (self->labelWanted_ && !self->labelSet_) {
    if (OrgGeogebraCommonKernelGeosGeoElement_isVisible(self)) {
      [self setLabelWithNSString:self->label_];
    }
  }
  if (![((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isUpdateConstructionRunning] && self->correspondingCasCell_ != nil) {
    [self->correspondingCasCell_ setInputFromTwinGeoWithBoolean:NO];
  }
  OrgGeogebraCommonKernelGeosGeoElement_algebraStringsNeedUpdate(self);
}

void OrgGeogebraCommonKernelGeosGeoElement_algebraStringsNeedUpdate(OrgGeogebraCommonKernelGeosGeoElement *self) {
  self->strAlgebraDescriptionNeedsUpdate_ = YES;
  self->strAlgebraDescTextOrHTMLneedsUpdate_ = YES;
  self->strAlgebraDescriptionHTMLneedsUpdate_ = YES;
  self->strLabelTextOrHTMLUpdate_ = YES;
  self->strLaTeXneedsUpdate_ = YES;
}

void OrgGeogebraCommonKernelGeosGeoElement_updateDependentObjects(OrgGeogebraCommonKernelGeosGeoElement *self) {
  if ((self->correspondingCasCell_ != nil) && [self isIndependent]) {
    [self updateAlgoUpdateSetWithWithOrgGeogebraCommonKernelGeosGeoElement:self->correspondingCasCell_];
  }
  else if (self->algoUpdateSet_ != nil) {
    [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setAlgoSetCurrentlyUpdatedWithOrgGeogebraCommonKernelAlgosAlgorithmSet:self->algoUpdateSet_];
    [self->algoUpdateSet_ updateAll];
    [self->cons_ setAlgoSetCurrentlyUpdatedWithOrgGeogebraCommonKernelAlgosAlgorithmSet:nil];
  }
}

void OrgGeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(JavaUtilArrayList *geos, JavaUtilTreeSet *tempSet1, jboolean updateCascadeAll) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  @synchronized(OrgGeogebraCommonKernelGeosGeoElement_class_()) {
    if ([((JavaUtilArrayList *) nil_chk(geos)) size] == 1) {
      id<OrgGeogebraCommonKernelKernelNDGeoElementND> ce = [geos getWithInt:0];
      [((id<OrgGeogebraCommonKernelKernelNDGeoElementND>) nil_chk(ce)) updateCascade];
      return;
    }
    [((JavaUtilTreeSet *) nil_chk(tempSet1)) clear];
    jint size = [geos size];
    for (jint i = 0; i < size; i++) {
      id<OrgGeogebraCommonKernelKernelNDGeoElementND> geo = [geos getWithInt:i];
      [((id<OrgGeogebraCommonKernelKernelNDGeoElementND>) nil_chk(geo)) update];
      if (([geo isIndependent] || [geo isPointOnPath] || updateCascadeAll) && ([geo hasAlgoUpdateSet])) {
        [((OrgGeogebraCommonKernelAlgosAlgorithmSet *) nil_chk([geo getAlgoUpdateSet])) addAllToCollectionWithJavaUtilCollection:tempSet1];
      }
    }
    if ([tempSet1 size] > 0) {
      id<JavaUtilIterator> it = [tempSet1 iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        OrgGeogebraCommonKernelAlgosAlgoElement *algo = [it next];
        [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) update];
      }
    }
  }
}

void OrgGeogebraCommonKernelGeosGeoElement_updateCascadeLocationWithJavaUtilArrayList_withOrgGeogebraCommonKernelConstruction_(JavaUtilArrayList *geos, OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  @synchronized(OrgGeogebraCommonKernelGeosGeoElement_class_()) {
    JavaUtilTreeSet *tempSet1 = [new_JavaUtilTreeSet_init() autorelease];
    jint size = [((JavaUtilArrayList *) nil_chk(geos)) size];
    for (jint i = 0; i < size; i++) {
      id<OrgGeogebraCommonKernelLocateable> geo = [geos getWithInt:i];
      [((id<OrgGeogebraCommonKernelLocateable>) nil_chk(geo)) updateLocation];
      if (([geo isIndependent] || [geo isGeoText]) && ([geo hasAlgoUpdateSet])) {
        [((OrgGeogebraCommonKernelAlgosAlgorithmSet *) nil_chk([geo getAlgoUpdateSet])) addAllToCollectionWithJavaUtilCollection:tempSet1];
      }
    }
    OrgGeogebraCommonKernelAlgosAlgorithmSet *algoSetCurrentlyUpdated = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons)) getAlgoSetCurrentlyUpdated];
    if (algoSetCurrentlyUpdated != nil) {
      [algoSetCurrentlyUpdated removeAllFromCollectionWithJavaUtilCollection:tempSet1];
    }
    if ([tempSet1 size] > 0) {
      id<JavaUtilIterator> it = [tempSet1 iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        @try {
          OrgGeogebraCommonKernelAlgosAlgoElement *algo = [it next];
          [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) update];
        }
        @catch (JavaLangException *e) {
          [((JavaLangException *) nil_chk(e)) printStackTrace];
        }
      }
    }
  }
}

void OrgGeogebraCommonKernelGeosGeoElement_updateCascadeUntilWithJavaUtilArrayList_withJavaUtilTreeSet_withOrgGeogebraCommonKernelAlgosAlgoElement_(JavaUtilArrayList *geos, JavaUtilTreeSet *tempSet2, OrgGeogebraCommonKernelAlgosAlgoElement *lastAlgo) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  if ([((JavaUtilArrayList *) nil_chk(geos)) size] == 1) {
    OrgGeogebraCommonKernelAlgosConstructionElement *ce = (OrgGeogebraCommonKernelAlgosConstructionElement *) check_class_cast([geos getWithInt:0], [OrgGeogebraCommonKernelAlgosConstructionElement class]);
    if ([((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isGeoElement]) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(ce, [OrgGeogebraCommonKernelGeosGeoElement class])) updateCascade];
    }
    return;
  }
  [((JavaUtilTreeSet *) nil_chk(tempSet2)) clear];
  jint size = [geos size];
  for (jint i = 0; i < size; i++) {
    OrgGeogebraCommonKernelAlgosConstructionElement *ce = (OrgGeogebraCommonKernelAlgosConstructionElement *) check_class_cast([geos getWithInt:i], [OrgGeogebraCommonKernelAlgosConstructionElement class]);
    if ([((OrgGeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isGeoElement]) {
      OrgGeogebraCommonKernelGeosGeoElement *geo = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([geos getWithInt:i], [OrgGeogebraCommonKernelGeosGeoElement class]);
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) update];
      if (([geo isIndependent] || [geo isPointOnPath]) && (geo->algoUpdateSet_ != nil)) {
        [geo->algoUpdateSet_ addAllToCollectionWithJavaUtilCollection:tempSet2];
      }
    }
  }
  if ([tempSet2 size] > 0) {
    id<JavaUtilIterator> it = [tempSet2 iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonKernelAlgosAlgoElement *algo = [it next];
      [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) update];
      if (algo == lastAlgo) {
        return;
      }
    }
  }
}

void OrgGeogebraCommonKernelGeosGeoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(OrgGeogebraCommonKernelGeosGeoElement *self, JavaUtilTreeSet *set, jboolean onlyIndependent) {
  if (self->algoParent_ == nil) {
    [((JavaUtilTreeSet *) nil_chk(set)) addWithId:self];
  }
  else {
    [self->algoParent_ addPredecessorsToSetWithJavaUtilTreeSet:set withBoolean:onlyIndependent];
  }
}

void OrgGeogebraCommonKernelGeosGeoElement_addRandomizablePredecessorsToSetWithJavaUtilTreeSet_(OrgGeogebraCommonKernelGeosGeoElement *self, JavaUtilTreeSet *set) {
  if ([self isRandomizable] && !self->cloneInUse_) {
    [((JavaUtilTreeSet *) nil_chk(set)) addWithId:self];
  }
  if (self->algoParent_ != nil) {
    [self->algoParent_ addRandomizablePredecessorsToSetWithJavaUtilTreeSet:set];
  }
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_isParentOfWithOrgGeogebraCommonKernelKernelNDGeoElementND_(OrgGeogebraCommonKernelGeosGeoElement *self, id<OrgGeogebraCommonKernelKernelNDGeoElementND> geo) {
  if (self->algoUpdateSet_ != nil) {
    id<JavaUtilIterator> it = [self->algoUpdateSet_ getIterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonKernelAlgosAlgoElement *algo = [it next];
      for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutputLength]; i++) {
        if (geo == [algo getOutputWithInt:i]) {
          return YES;
        }
      }
    }
  }
  return NO;
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_isChildOfWithOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoElement *self, OrgGeogebraCommonKernelGeosGeoElement *geo) {
  if ((geo == nil) || [self isIndependent]) {
    return NO;
  }
  return OrgGeogebraCommonKernelGeosGeoElement_isParentOfWithOrgGeogebraCommonKernelKernelNDGeoElementND_(nil_chk(geo), self);
}

JavaUtilTreeSet *OrgGeogebraCommonKernelGeosGeoElement_getAllChildren(OrgGeogebraCommonKernelGeosGeoElement *self) {
  JavaUtilTreeSet *set = [new_JavaUtilTreeSet_init() autorelease];
  if (self->algoUpdateSet_ != nil) {
    id<JavaUtilIterator> it = [self->algoUpdateSet_ getIterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonKernelAlgosAlgoElement *algo = [it next];
      for (jint i = 0; i < [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutputLength]; i++) {
        [set addWithId:[algo getOutputWithInt:i]];
      }
    }
  }
  return set;
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_isGeoElement(OrgGeogebraCommonKernelGeosGeoElement *self) {
  return YES;
}

NSString *OrgGeogebraCommonKernelGeosGeoElement_getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoElement *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if (self->algoParent_ == nil) {
    return @"";
  }
  return [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(self->algoParent_)) getCommandDescriptionWithOrgGeogebraCommonKernelStringTemplate:tpl];
}

void OrgGeogebraCommonKernelGeosGeoElement_convertIndicesToHTMLWithNSString_withOrgGeogebraCommonUtilIndexHTMLBuilder_(NSString *text, OrgGeogebraCommonUtilIndexHTMLBuilder *builder) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  if ([((NSString *) nil_chk(text)) indexOf:'_'] > -1) {
    OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withOrgGeogebraCommonUtilIndexHTMLBuilder_(text, builder);
    return;
  }
  [((OrgGeogebraCommonUtilIndexHTMLBuilder *) nil_chk(builder)) clear];
  [builder appendWithNSString:text];
}

NSString *OrgGeogebraCommonKernelGeosGeoElement_getXMLtypeString(OrgGeogebraCommonKernelGeosGeoElement *self) {
  return OrgGeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk([self getGeoClassType]))->xmlName_);
}

NSString *OrgGeogebraCommonKernelGeosGeoElement_getLongDescriptionHTMLWithBoolean_withBoolean_(OrgGeogebraCommonKernelGeosGeoElement *self, jboolean colored, jboolean addHTMLtag) {
  if ((self->algoParent_ == nil) || [OrgGeogebraCommonKernelArithmeticTextValue_class_() isInstance:self] || [self isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPenStroke class]]) {
    return [self getNameDescriptionHTMLWithBoolean:colored withBoolean:addHTMLtag];
  }
  JavaLangStringBuilder *sbLongDescHTML = [new_JavaLangStringBuilder_init() autorelease];
  NSString *formatedLabel = [self getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  NSString *typeString = [self translatedTypeString];
  if (addHTMLtag) {
    [sbLongDescHTML appendWithNSString:@"<html>"];
  }
  jboolean reverseOrder = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) isReverseNameDescriptionLanguage];
  if (!reverseOrder) {
    [sbLongDescHTML appendWithNSString:typeString];
    [sbLongDescHTML appendWithChar:' '];
  }
  if (colored) {
    OrgGeogebraCommonAwtGColor *colorAdapter = [((OrgGeogebraCommonFactoriesAwtFactory *) nil_chk(OrgGeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getRed] withInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getGreen] withInt:[((OrgGeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getBlue]];
    [sbLongDescHTML appendWithNSString:@"<b><font color=\"#"];
    [sbLongDescHTML appendWithNSString:OrgGeogebraCommonUtilStringUtil_toHexStringWithOrgGeogebraCommonAwtGColor_(colorAdapter)];
    [sbLongDescHTML appendWithNSString:@"\">"];
  }
  [sbLongDescHTML appendWithNSString:OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(formatedLabel, NO)];
  if (colored) {
    [sbLongDescHTML appendWithNSString:@"</font></b>"];
  }
  if (reverseOrder) {
    [sbLongDescHTML appendWithChar:' '];
    [sbLongDescHTML appendWithNSString:[((NSString *) nil_chk(typeString)) lowercaseString]];
  }
  if (self->algoParent_ != nil) {
    jboolean rightToLeft = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) isRightToLeftReadingOrder];
    if (rightToLeft) {
      [sbLongDescHTML appendWithChar:OrgGeogebraCommonUtilUnicode_LeftToRightMark];
      [sbLongDescHTML appendWithChar:OrgGeogebraCommonUtilUnicode_RightToLeftMark];
      [sbLongDescHTML appendWithNSString:@": "];
      [sbLongDescHTML appendWithChar:OrgGeogebraCommonUtilUnicode_LeftToRightMark];
    }
    else {
      [sbLongDescHTML appendWithNSString:@": "];
    }
    [sbLongDescHTML appendWithNSString:OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_([((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) translationFixWithNSString:[self->algoParent_ toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]], NO)];
    if (rightToLeft) {
      [sbLongDescHTML appendWithChar:OrgGeogebraCommonUtilUnicode_LeftToRightMark];
    }
  }
  if (addHTMLtag) {
    [sbLongDescHTML appendWithNSString:@"</html>"];
  }
  return [sbLongDescHTML description];
}

NSString *OrgGeogebraCommonKernelGeosGeoElement_getToolTipDescriptionHTMLWithJavaUtilArrayList_withBoolean_withBoolean_withBoolean_(JavaUtilArrayList *geos, jboolean colored, jboolean addHTMLtag, jboolean alwaysOn) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  if (geos == nil) {
    return nil;
  }
  JavaLangStringBuilder *sbToolTipDesc = [new_JavaLangStringBuilder_init() autorelease];
  if (addHTMLtag) {
    [sbToolTipDesc appendWithNSString:@"<html>"];
  }
  jint count = 0;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; ++i) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) showToolTipText] || alwaysOn) {
      count++;
      [sbToolTipDesc appendWithNSString:[geo getTooltipTextWithBoolean:colored withBoolean:alwaysOn]];
      if ((i + 1) < [geos size]) {
        [sbToolTipDesc appendWithNSString:@"<br>"];
      }
    }
  }
  if (count == 0) {
    return nil;
  }
  if (addHTMLtag) {
    [sbToolTipDesc appendWithNSString:@"</html>"];
  }
  return [sbToolTipDesc description];
}

NSString *OrgGeogebraCommonKernelGeosGeoElement_toDefinedValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoElement *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if ([self isDefined]) {
    return [self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  return [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

NSString *OrgGeogebraCommonKernelGeosGeoElement_getLabelTextOrHTMLWithBoolean_(OrgGeogebraCommonKernelGeosGeoElement *self, jboolean addHTMLTag) {
  if (self->strLabelTextOrHTMLUpdate_) {
    if (OrgGeogebraCommonKernelGeosGeoElement_hasIndexLabel(self)) {
      OrgGeogebraCommonKernelGeosGeoElement_set_strLabelTextOrHTML_(self, OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_([self getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()], addHTMLTag));
    }
    else {
      OrgGeogebraCommonKernelGeosGeoElement_set_strLabelTextOrHTML_(self, [self getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
    }
  }
  return self->strLabelTextOrHTML_;
}

NSString *OrgGeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoElement *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if ([self isDefined]) {
    return [self toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  JavaLangStringBuilder *sbAlgebraDesc = [new_JavaLangStringBuilder_init() autorelease];
  [sbAlgebraDesc appendWithNSString:self->label_];
  [sbAlgebraDesc appendWithChar:' '];
  [sbAlgebraDesc appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"]];
  return [sbAlgebraDesc description];
}

NSString *OrgGeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionDefault(OrgGeogebraCommonKernelGeosGeoElement *self) {
  if (self->strAlgebraDescriptionNeedsUpdate_) {
    if ([self isDefined]) {
      OrgGeogebraCommonKernelGeosGeoElement_set_strAlgebraDescription_(self, [self toStringWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
    }
    else {
      JavaLangStringBuilder *sbAlgebraDesc = [new_JavaLangStringBuilder_init() autorelease];
      [sbAlgebraDesc appendWithNSString:self->label_];
      [sbAlgebraDesc appendWithChar:' '];
      [sbAlgebraDesc appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"]];
      OrgGeogebraCommonKernelGeosGeoElement_set_strAlgebraDescription_(self, [sbAlgebraDesc description]);
    }
    self->strAlgebraDescriptionNeedsUpdate_ = NO;
  }
  return self->strAlgebraDescription_;
}

NSString *OrgGeogebraCommonKernelGeosGeoElement_getLaTeXAlgebraDescriptionWithOrgGeogebraCommonKernelGeosGeoElement_withBoolean_withOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoElement *self, OrgGeogebraCommonKernelGeosGeoElement *geo, jboolean substituteNumbers, OrgGeogebraCommonKernelStringTemplate *tpl) {
  NSString *algebraDesc = OrgGeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionWithOrgGeogebraCommonKernelStringTemplate_(nil_chk(geo), tpl);
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([geo isGeoList] && [((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk([((OrgGeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoList class])) getElementType])) isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_TEXT()]) {
    return nil;
  }
  if (![geo isDefined]) {
    [sb appendWithNSString:self->label_];
    [sb appendWithNSString:@"\\, \\text{"];
    [sb appendWithNSString:[((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"]];
    [sb appendWithNSString:@"} "];
  }
  else if (([((NSString *) nil_chk(algebraDesc)) indexOfString:@":"] > -1) & ![geo isGeoText]) {
    [sb appendWithNSString:JreStrcat("$$", IOSObjectArray_Get(nil_chk([algebraDesc split:@":"]), 0), @": \\,")];
    [sb appendWithNSString:[geo getFormulaStringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:substituteNumbers]];
  }
  else if (([algebraDesc indexOfString:@"="] > -1) && ![geo isGeoText]) {
    [sb appendWithNSString:JreStrcat("$$", IOSObjectArray_Get(nil_chk([algebraDesc split:@"="]), 0), @"\\, = \\,")];
    [sb appendWithNSString:[geo getFormulaStringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:substituteNumbers]];
  }
  else if ([geo isGeoVector]) {
    [sb appendWithNSString:self->label_];
    [sb appendWithNSString:@"\\, = \\,"];
    [sb appendWithNSString:[geo getFormulaStringWithOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:substituteNumbers]];
  }
  else if ([geo isGeoText] && [((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class])) isLaTeX]) {
    [sb appendWithNSString:IOSObjectArray_Get(nil_chk([algebraDesc split:@"="]), 0)];
    [sb appendWithNSString:@"\\, = \\,"];
    if ([OrgGeogebraCommonKernelAlgosTableAlgo_class_() isInstance:OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(geo)]) {
      [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class])) getTextString]];
    }
    else {
      [sb appendWithNSString:@"\\text{``"];
      [sb appendWithNSString:[((OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoText class])) getTextString]];
      [sb appendWithNSString:@"''}"];
    }
  }
  else {
    return nil;
  }
  return [sb description];
}

NSString *OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(NSString *str, jboolean addHTMLtag) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  OrgGeogebraCommonUtilIndexHTMLBuilder *sbIndicesToHTML = [new_OrgGeogebraCommonUtilIndexHTMLBuilder_initWithBoolean_(addHTMLtag) autorelease];
  OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withOrgGeogebraCommonUtilIndexHTMLBuilder_(str, sbIndicesToHTML);
  return [sbIndicesToHTML description];
}

void OrgGeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withOrgGeogebraCommonUtilIndexHTMLBuilder_(NSString *str, OrgGeogebraCommonUtilIndexHTMLBuilder *sbIndicesToHTML) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  [((OrgGeogebraCommonUtilIndexHTMLBuilder *) nil_chk(sbIndicesToHTML)) clear];
  jint depth = 0;
  jint startPos = 0;
  jint length = ((jint) [((NSString *) nil_chk(str)) length]);
  for (jint i = 0; i < length; i++) {
    switch ([str charAtWithInt:i]) {
      case '_':
      if (i > startPos) {
        [sbIndicesToHTML appendHTMLWithNSString:[str substring:startPos endIndex:i]];
      }
      startPos = i + 1;
      depth++;
      if ((startPos < length) && ([str charAtWithInt:startPos] != '{')) {
        [sbIndicesToHTML startIndex];
        [sbIndicesToHTML appendHTMLWithNSString:[str substring:startPos endIndex:startPos + 1]];
        [sbIndicesToHTML endIndex];
        depth--;
      }
      else {
        [sbIndicesToHTML startIndex];
      }
      i++;
      startPos++;
      break;
      case '}':
      if (depth > 0) {
        if (i > startPos) {
          [sbIndicesToHTML appendHTMLWithNSString:[str substring:startPos endIndex:i]];
        }
        [sbIndicesToHTML endIndex];
        startPos = i + 1;
        depth--;
      }
      break;
    }
  }
  if (startPos < length) {
    [sbIndicesToHTML appendHTMLWithNSString:[str substring:startPos]];
  }
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_hasIndexLabel(OrgGeogebraCommonKernelGeosGeoElement *self) {
  if (self->strHasIndexLabel_ != self->label_) {
    self->hasIndexLabel__ = ((self->label_ == nil) || ([self->label_ indexOf:'_'] > -1));
    OrgGeogebraCommonKernelGeosGeoElement_set_strHasIndexLabel_(self, self->label_);
  }
  return self->hasIndexLabel__;
}

void OrgGeogebraCommonKernelGeosGeoElement_getListenerTagXMLWithJavaLangStringBuilder_withJavaUtilHashMap_withNSString_(OrgGeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb, JavaUtilHashMap *map, NSString *type) {
  if (map != nil) {
    ;
    NSString *objectListener = [map getWithId:self];
    if (objectListener != nil) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("$$$", @"\t<listener type=\"", type, @"\" val=\"")];
      [sb appendWithNSString:objectListener];
      [sb appendWithNSString:@"\"/>\n"];
    }
  }
}

void OrgGeogebraCommonKernelGeosGeoElement_getCaptionXMLWithJavaLangStringBuilder_(OrgGeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb) {
  if ((self->caption_ != nil) && (((jint) [self->caption_ length]) > 0) && ![self->caption_ isEqual:self->label_]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<caption val=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, self->caption_);
    [sb appendWithNSString:@"\"/>\n"];
  }
}

void OrgGeogebraCommonKernelGeosGeoElement_getAuxiliaryXMLWithJavaLangStringBuilder_(OrgGeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb) {
  if (![self isAuxiliaryObjectByDefault]) {
    if (self->auxiliaryObject_) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<auxiliary val=\""];
      [sb appendWithNSString:@"true"];
      [sb appendWithNSString:@"\"/>\n"];
    }
    else if ([self getMetasLength] > 0) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<auxiliary val=\""];
      [sb appendWithNSString:@"false"];
      [sb appendWithNSString:@"\"/>\n"];
    }
  }
  else {
    if (!self->auxiliaryObject_) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<auxiliary val=\""];
      [sb appendWithNSString:@"false"];
      [sb appendWithNSString:@"\"/>\n"];
    }
  }
}

void OrgGeogebraCommonKernelGeosGeoElement_getExtraTagsXMLWithJavaLangStringBuilder_(OrgGeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb) {
  if ([OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self) isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoBarChart class]]) {
    [((OrgGeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast(OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self), [OrgGeogebraCommonKernelAlgosAlgoBarChart class])))) barXmlWithJavaLangStringBuilder:sb];
  }
}

NSString *OrgGeogebraCommonKernelGeosGeoElement_getShowObjectConditionXML(OrgGeogebraCommonKernelGeosGeoElement *self) {
  if (self->condShowObject_ != nil && [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getSaveScriptsToXML]) {
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
    [sb appendWithNSString:@"\t<condition showObject=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self->condShowObject_ getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_()]);
    [sb appendWithNSString:@"\"/>\n"];
    return [sb description];
  }
  return @"";
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_isSelected(OrgGeogebraCommonKernelGeosGeoElement *self) {
  return self->selected_;
}

OrgGeogebraCommonKernelGeosGeoBoolean *OrgGeogebraCommonKernelGeosGeoElement_getShowObjectCondition(OrgGeogebraCommonKernelGeosGeoElement *self) {
  return self->condShowObject_;
}

OrgGeogebraCommonKernelGeosGeoList *OrgGeogebraCommonKernelGeosGeoElement_getColorFunction(OrgGeogebraCommonKernelGeosGeoElement *self) {
  return self->colFunction_;
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonEuclidianEuclidianView_(JavaUtilArrayList *geosToMove, OrgGeogebraCommonKernelMatrixCoords *rwTransVec, OrgGeogebraCommonKernelMatrixCoords *endPosition, OrgGeogebraCommonKernelMatrixCoords *viewDirection, OrgGeogebraCommonEuclidianEuclidianView *view) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  if (OrgGeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_ == nil) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_, nil, new_JavaUtilArrayList_init());
  }
  JavaUtilArrayList *geos = geosToMove;
  JavaUtilArrayList *geos2 = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; i++) {
    if (![geos2 containsWithId:[geos getWithInt:i]]) {
      [geos2 addWithId:[geos getWithInt:i]];
    }
  }
  geos = geos2;
  jboolean moved = NO;
  jint size = [geos size];
  [((JavaUtilArrayList *) nil_chk(OrgGeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_)) clear];
  [OrgGeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_ ensureCapacityWithInt:size];
  for (jint i = 0; i < size; i++) {
    OrgGeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
      [OrgGeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_ addWithId:geo];
      continue;
    }
    OrgGeogebraCommonKernelMatrixCoords *position = (size == 1) && (OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(geo) != nil) ? endPosition : nil;
    moved = (OrgGeogebraCommonKernelGeosGeoElement_moveObjectWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withJavaUtilArrayList_withOrgGeogebraCommonEuclidianEuclidianView_(geo, rwTransVec, position, viewDirection, OrgGeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_, view) || moved);
  }
  OrgGeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(OrgGeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_, OrgGeogebraCommonKernelGeosGeoElement_getTempSet(), NO);
  return moved;
}

JavaUtilTreeSet *OrgGeogebraCommonKernelGeosGeoElement_getTempSet() {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  if (OrgGeogebraCommonKernelGeosGeoElement_tempSet_ == nil) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoElement_tempSet_, nil, new_JavaUtilTreeSet_initWithJavaUtilComparator_(OrgGeogebraCommonKernelGeosGeoElement_algoComparator_));
  }
  return OrgGeogebraCommonKernelGeosGeoElement_tempSet_;
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_moveObjectWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withJavaUtilArrayList_withOrgGeogebraCommonEuclidianEuclidianView_(OrgGeogebraCommonKernelGeosGeoElement *self, OrgGeogebraCommonKernelMatrixCoords *rwTransVec, OrgGeogebraCommonKernelMatrixCoords *endPosition, OrgGeogebraCommonKernelMatrixCoords *viewDirection, JavaUtilArrayList *updateGeos, OrgGeogebraCommonEuclidianEuclidianView *view) {
  jboolean movedGeo = NO;
  OrgGeogebraCommonKernelGeosGeoElement *geo = self;
  if ([self isMoveable]) {
    if ([self isGeoPoint]) {
      if ([OrgGeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface_class_() isInstance:OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self)]) {
        OrgGeogebraCommonKernelGeosGeoPoint *p = [((id<OrgGeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface>) nil_chk(((id<OrgGeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface>) check_protocol_cast(OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self), @protocol(OrgGeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface))))) getParentPoint];
        movedGeo = [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) movePointWithOrgGeogebraCommonKernelMatrixCoords:rwTransVec withOrgGeogebraCommonKernelMatrixCoords:endPosition];
        geo = p;
      }
      else {
        movedGeo = [self movePointWithOrgGeogebraCommonKernelMatrixCoords:rwTransVec withOrgGeogebraCommonKernelMatrixCoords:endPosition];
      }
    }
    else if ([self isGeoVector]) {
      movedGeo = [self moveVectorWithOrgGeogebraCommonKernelMatrixCoords:rwTransVec withOrgGeogebraCommonKernelMatrixCoords:endPosition];
    }
    else if ([self isTranslateable]) {
      id<OrgGeogebraCommonKernelGeosTranslateable> trans = (id<OrgGeogebraCommonKernelGeosTranslateable>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelGeosTranslateable));
      [trans translateWithOrgGeogebraCommonKernelMatrixCoords:rwTransVec];
      movedGeo = YES;
    }
    else if ([self isAbsoluteScreenLocateable]) {
      id<OrgGeogebraCommonKernelGeosAbsoluteScreenLocateable> screenLoc = (id<OrgGeogebraCommonKernelGeosAbsoluteScreenLocateable>) check_protocol_cast(self, @protocol(OrgGeogebraCommonKernelGeosAbsoluteScreenLocateable));
      if ([screenLoc isAbsoluteScreenLocActive]) {
        jint vxPixel = (jint) JavaLangMath_roundWithDouble_([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getXscale] * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(rwTransVec)) getX]);
        jint vyPixel = -(jint) JavaLangMath_roundWithDouble_([self->kernel_ getYscale] * [rwTransVec getY]);
        jint x = [screenLoc getAbsoluteScreenLocX] + vxPixel;
        jint y = [screenLoc getAbsoluteScreenLocY] + vyPixel;
        [screenLoc setAbsoluteScreenLocWithInt:x withInt:y];
        movedGeo = YES;
      }
      else if ([self isGeoNumeric]) {
        if (![((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class])) isSliderFixed]) {
          [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class])) setRealWorldLocWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class])) getRealWorldLocX] + [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(rwTransVec)) getX] withDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class])) getRealWorldLocY] + [rwTransVec getY]];
          movedGeo = YES;
        }
      }
      else if ([self isGeoText]) {
        OrgGeogebraCommonKernelGeosGeoText *movedGeoText = (OrgGeogebraCommonKernelGeosGeoText *) check_class_cast(self, [OrgGeogebraCommonKernelGeosGeoText class]);
        if ([movedGeoText hasAbsoluteLocation]) {
          id<OrgGeogebraCommonKernelKernelNDGeoPointND> locPoint = [movedGeoText getStartPoint];
          if (locPoint != nil) {
            [locPoint translateWithOrgGeogebraCommonKernelMatrixCoords:rwTransVec];
            movedGeo = YES;
          }
        }
      }
    }
    if (movedGeo) {
      if (updateGeos != nil) {
        [updateGeos addWithId:geo];
      }
      else {
        [geo updateCascade];
      }
    }
  }
  else if ([self isTranslateable] && [OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self) isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoTranslate class]]) {
    OrgGeogebraCommonKernelAlgosAlgoElement *algo = OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self);
    IOSObjectArray *input = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
    OrgGeogebraCommonKernelGeosGeoElement *in = IOSObjectArray_Get(nil_chk(input), 1);
    if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(in)) isGeoVector]) {
      if ([in isIndependent]) {
        movedGeo = [in moveVectorWithOrgGeogebraCommonKernelMatrixCoords:rwTransVec withOrgGeogebraCommonKernelMatrixCoords:endPosition];
        OrgGeogebraCommonKernelGeosGeoElement_addParentToUpdateListWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(in, updateGeos, self->tempMoveObjectList_);
      }
      else if ([OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(in) isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoVectorPoint class]]) {
        OrgGeogebraCommonKernelAlgosAlgoVectorPoint *algoVector = (OrgGeogebraCommonKernelAlgosAlgoVectorPoint *) check_class_cast(OrgGeogebraCommonKernelGeosGeoElement_getParentAlgorithm(in), [OrgGeogebraCommonKernelAlgosAlgoVectorPoint class]);
        OrgGeogebraCommonKernelGeosGeoElement *p = (OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast([((OrgGeogebraCommonKernelAlgosAlgoVectorPoint *) nil_chk(algoVector)) getP], [OrgGeogebraCommonKernelGeosGeoElement class]);
        if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(p)) isIndependent]) {
          movedGeo = [p movePointWithOrgGeogebraCommonKernelMatrixCoords:rwTransVec withOrgGeogebraCommonKernelMatrixCoords:endPosition];
          OrgGeogebraCommonKernelGeosGeoElement_addParentToUpdateListWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(p, updateGeos, self->tempMoveObjectList_);
        }
      }
    }
  }
  else {
    movedGeo = [self moveFromChangeableCoordParentNumbersWithOrgGeogebraCommonKernelMatrixCoords:rwTransVec withOrgGeogebraCommonKernelMatrixCoords:endPosition withOrgGeogebraCommonKernelMatrixCoords:viewDirection withJavaUtilArrayList:updateGeos withJavaUtilArrayList:self->tempMoveObjectList_ withOrgGeogebraCommonEuclidianEuclidianView:view];
  }
  return movedGeo;
}

void OrgGeogebraCommonKernelGeosGeoElement_addChangeableCoordParentNumberToUpdateListWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(OrgGeogebraCommonKernelGeosGeoElement *number, JavaUtilArrayList *updateGeos, JavaUtilArrayList *tempMoveObjectList1) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  OrgGeogebraCommonKernelGeosGeoElement_addParentToUpdateListWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(number, updateGeos, tempMoveObjectList1);
}

void OrgGeogebraCommonKernelGeosGeoElement_addParentToUpdateListWithOrgGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(OrgGeogebraCommonKernelGeosGeoElement *number, JavaUtilArrayList *updateGeos, JavaUtilArrayList *tempMoveObjectList1) {
  OrgGeogebraCommonKernelGeosGeoElement_initialize();
  if (updateGeos != nil) {
    [updateGeos addWithId:number];
  }
  else {
    JavaUtilArrayList *tempMoveObjectList2 = tempMoveObjectList1;
    if (tempMoveObjectList1 == nil) {
      tempMoveObjectList2 = [new_JavaUtilArrayList_init() autorelease];
    }
    [((JavaUtilArrayList *) nil_chk(tempMoveObjectList2)) addWithId:number];
    OrgGeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(tempMoveObjectList2, OrgGeogebraCommonKernelGeosGeoElement_getTempSet(), NO);
  }
}

jboolean OrgGeogebraCommonKernelGeosGeoElement_isSelectionAllowed(OrgGeogebraCommonKernelGeosGeoElement *self) {
  return self->selectionAllowed_;
}

OrgGeogebraCommonKernelGeosGeoCasCell *OrgGeogebraCommonKernelGeosGeoElement_getCorrespondingCasCell(OrgGeogebraCommonKernelGeosGeoElement *self) {
  return self->correspondingCasCell_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoElement)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum)

OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_values_[10];

@implementation OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum

- (jint)getValue {
  return value_;
}

- (instancetype)initWithInt:(jint)value
                withBoolean:(jboolean)hatch
               withNSString:(NSString *)__name
                    withInt:(jint)__ordinal {
  OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(self, value, hatch, __name, __ordinal);
  return self;
}

- (jboolean)isHatch {
  return hatch_;
}

IOSObjectArray *OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_values() {
  OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_values_ count:10 type:OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_values();
}

+ (OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initialize();
  for (int i = 0; i < 10; i++) {
    OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *e = OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum class]) {
    OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_STANDARD = new_OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(0, NO, @"STANDARD", 0);
    OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_HATCH = new_OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(1, YES, @"HATCH", 1);
    OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_CROSSHATCHED = new_OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(2, YES, @"CROSSHATCHED", 2);
    OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_CHESSBOARD = new_OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(3, YES, @"CHESSBOARD", 3);
    OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_DOTTED = new_OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(4, YES, @"DOTTED", 4);
    OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_HONEYCOMB = new_OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(5, YES, @"HONEYCOMB", 5);
    OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_BRICK = new_OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(6, YES, @"BRICK", 6);
    OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_WEAVING = new_OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(9, YES, @"WEAVING", 7);
    OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_SYMBOLS = new_OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(7, YES, @"SYMBOLS", 8);
    OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_IMAGE = new_OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(8, NO, @"IMAGE", 9);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getValue", NULL, "I", 0x1, NULL, NULL },
    { "isHatch", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "STANDARD", "STANDARD", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", &OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_STANDARD, NULL,  },
    { "HATCH", "HATCH", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", &OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_HATCH, NULL,  },
    { "CROSSHATCHED", "CROSSHATCHED", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", &OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_CROSSHATCHED, NULL,  },
    { "CHESSBOARD", "CHESSBOARD", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", &OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_CHESSBOARD, NULL,  },
    { "DOTTED", "DOTTED", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", &OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_DOTTED, NULL,  },
    { "HONEYCOMB", "HONEYCOMB", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", &OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_HONEYCOMB, NULL,  },
    { "BRICK", "BRICK", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", &OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_BRICK, NULL,  },
    { "WEAVING", "WEAVING", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", &OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_WEAVING, NULL,  },
    { "SYMBOLS", "SYMBOLS", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", &OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_SYMBOLS, NULL,  },
    { "IMAGE", "IMAGE", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$FillType;", &OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_IMAGE, NULL,  },
    { "value_", NULL, 0x2, "I", NULL, NULL,  },
    { "hatch_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.geos.GeoElement$FillType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum = { 2, "FillType", "org.geogebra.common.kernel.geos", "GeoElement", 0x4019, 2, methods, 12, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/kernel/geos/GeoElement$FillType;>;" };
  return &_OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum;
}

@end

void OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *self, jint value, jboolean hatch, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->value_ = value;
  self->hatch_ = hatch;
}

OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *new_OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(jint value, jboolean hatch, NSString *__name, jint __ordinal) {
  OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum *self = [OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum alloc];
  OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(self, value, hatch, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoElement_FillTypeEnum)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum)

OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum *OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_values_[3];

@implementation OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_values() {
  OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_values_ count:3 type:OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_values();
}

+ (OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum *OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_initialize();
  for (int i = 0; i < 3; i++) {
    OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum *e = OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum class]) {
    OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_NOT_SET = new_OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_initWithNSString_withInt_(@"NOT_SET", 0);
    OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_TRUE = new_OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_initWithNSString_withInt_(@"TRUE", 1);
    OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_FALSE = new_OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_initWithNSString_withInt_(@"FALSE", 2);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "NOT_SET", "NOT_SET", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$VisibleInView;", &OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_NOT_SET, NULL,  },
    { "TRUE", "TRUE", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$VisibleInView;", &OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_TRUE, NULL,  },
    { "FALSE", "FALSE", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$VisibleInView;", &OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_FALSE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.geos.GeoElement$VisibleInView;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum = { 2, "VisibleInView", "org.geogebra.common.kernel.geos", "GeoElement", 0x401c, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/kernel/geos/GeoElement$VisibleInView;>;" };
  return &_OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum;
}

@end

void OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum *new_OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum *self = [OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum alloc];
  OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoElement_VisibleInViewEnum)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum)

OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_values_[6];

@implementation OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_values() {
  OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_values_ count:6 type:OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_values();
}

+ (OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initialize();
  for (int i = 0; i < 6; i++) {
    OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *e = OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum class]) {
    OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_ONLY_COPY = new_OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(@"ONLY_COPY", 0);
    OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_ONE_VALUE_OR_COPY = new_OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(@"ONE_VALUE_OR_COPY", 1);
    OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_ONE_VALUE_ONLY = new_OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(@"ONE_VALUE_ONLY", 2);
    OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_SEVERAL_VALUES_OR_COPY = new_OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(@"SEVERAL_VALUES_OR_COPY", 3);
    OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_SEVERAL_VALUES_ONLY = new_OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(@"SEVERAL_VALUES_ONLY", 4);
    OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_NOT_TRACEABLE = new_OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(@"NOT_TRACEABLE", 5);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "ONLY_COPY", "ONLY_COPY", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$TraceModesEnum;", &OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_ONLY_COPY, NULL,  },
    { "ONE_VALUE_OR_COPY", "ONE_VALUE_OR_COPY", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$TraceModesEnum;", &OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_ONE_VALUE_OR_COPY, NULL,  },
    { "ONE_VALUE_ONLY", "ONE_VALUE_ONLY", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$TraceModesEnum;", &OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_ONE_VALUE_ONLY, NULL,  },
    { "SEVERAL_VALUES_OR_COPY", "SEVERAL_VALUES_OR_COPY", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$TraceModesEnum;", &OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_SEVERAL_VALUES_OR_COPY, NULL,  },
    { "SEVERAL_VALUES_ONLY", "SEVERAL_VALUES_ONLY", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$TraceModesEnum;", &OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_SEVERAL_VALUES_ONLY, NULL,  },
    { "NOT_TRACEABLE", "NOT_TRACEABLE", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$TraceModesEnum;", &OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_NOT_TRACEABLE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.geos.GeoElement$TraceModesEnum;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum = { 2, "TraceModesEnum", "org.geogebra.common.kernel.geos", "GeoElement", 0x4019, 0, NULL, 6, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/kernel/geos/GeoElement$TraceModesEnum;>;" };
  return &_OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum;
}

@end

void OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *new_OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *self = [OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum alloc];
  OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum)

OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_values_[3];

@implementation OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_values() {
  OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_values_ count:3 type:OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_values();
}

+ (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)valueOfWithNSString:(NSString *)name {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_valueOfWithNSString_(name);
}

OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_valueOfWithNSString_(NSString *name) {
  OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_initialize();
  for (int i = 0; i < 3; i++) {
    OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *e = OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum class]) {
    OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_NONE = new_OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(@"NONE", 0);
    OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_ON_BOUNDARY = new_OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(@"ON_BOUNDARY", 1);
    OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_ON_FILLING = new_OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(@"ON_FILLING", 2);
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "NONE", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", &OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_NONE, NULL,  },
    { "ON_BOUNDARY", "ON_BOUNDARY", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", &OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_ON_BOUNDARY, NULL,  },
    { "ON_FILLING", "ON_FILLING", 0x4019, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", &OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_ON_FILLING, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lorg.geogebra.common.kernel.geos.GeoElement$HitType;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum = { 2, "HitType", "org.geogebra.common.kernel.geos", "GeoElement", 0x4019, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/geogebra/common/kernel/geos/GeoElement$HitType;>;" };
  return &_OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum;
}

@end

void OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *new_OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *self = [OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum alloc];
  OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum)

@implementation OrgGeogebraCommonKernelGeosGeoElement_$1

- (jint)compareWithId:(OrgGeogebraCommonKernelAlgosAlgoElement *)o1
               withId:(OrgGeogebraCommonKernelAlgosAlgoElement *)o2 {
  return [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(o1)) compareToWithId:o2];
}

- (instancetype)init {
  OrgGeogebraCommonKernelGeosGeoElement_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoElement_$1 = { 2, "", "org.geogebra.common.kernel.geos", "GeoElement", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Lorg/geogebra/common/kernel/algos/AlgoElement;>;" };
  return &_OrgGeogebraCommonKernelGeosGeoElement_$1;
}

@end

void OrgGeogebraCommonKernelGeosGeoElement_$1_init(OrgGeogebraCommonKernelGeosGeoElement_$1 *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelGeosGeoElement_$1 *new_OrgGeogebraCommonKernelGeosGeoElement_$1_init() {
  OrgGeogebraCommonKernelGeosGeoElement_$1 *self = [OrgGeogebraCommonKernelGeosGeoElement_$1 alloc];
  OrgGeogebraCommonKernelGeosGeoElement_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoElement_$1)
