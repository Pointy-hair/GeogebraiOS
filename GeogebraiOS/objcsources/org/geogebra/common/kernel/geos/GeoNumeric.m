//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/geos/GeoNumeric.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/euclidian/EuclidianConstants.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "org/geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "org/geogebra/common/kernel/AnimationManager.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/ConstructionDefaults.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/cas/AlgoIntegralDefiniteInterface.h"
#include "org/geogebra/common/kernel/geos/GeoAngle.h"
#include "org/geogebra/common/kernel/geos/GeoCasCell.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoNumberValue.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/StringUtil.h"

@interface OrgGeogebraCommonKernelGeosGeoNumeric () {
 @public
  jint slopeTriangleSize_;
  jboolean intervalMinActive_;
  jboolean intervalMaxActive_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> intervalMin_;
  id<OrgGeogebraCommonKernelArithmeticNumberValue> intervalMax_;
  jdouble sliderWidth_;
  jdouble sliderX_, sliderY_;
  jboolean sliderFixed_;
  jboolean sliderHorizontal_;
  jdouble animationValue_;
  JavaLangStringBuilder *sbToString_;
  JavaUtilArrayList *minMaxListeners_;
  jboolean randomSlider_;
  JavaUtilArrayList *evListeners_;
  jboolean showExtendedAV_;
}

- (void)initScreenLocation OBJC_METHOD_FAMILY_NONE;

- (jint)countSliders;

- (jdouble)getRandom;

- (void)resolveMinMax;

- (void)setIntervalMinActiveWithBoolean:(jboolean)intervalMinActive;

- (void)setIntervalMaxActiveWithBoolean:(jboolean)intervalMaxActive;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoNumeric, intervalMin_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoNumeric, intervalMax_, id<OrgGeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoNumeric, sbToString_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoNumeric, minMaxListeners_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoNumeric, evListeners_, JavaUtilArrayList *)

static jint OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_WIDTH_RW_ = 4;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoNumeric, DEFAULT_SLIDER_WIDTH_RW_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonKernelGeosGeoNumeric, DEFAULT_SLIDER_WIDTH_RW_, jint)

static id<JavaUtilComparator> OrgGeogebraCommonKernelGeosGeoNumeric_comparator_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoNumeric, comparator_, id<JavaUtilComparator>)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoNumeric, comparator_, id<JavaUtilComparator>)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoNumeric_setDrawableWithBoolean_withBoolean_(OrgGeogebraCommonKernelGeosGeoNumeric *self, jboolean flag, jboolean visible);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoNumeric_initScreenLocation(OrgGeogebraCommonKernelGeosGeoNumeric *self);

__attribute__((unused)) static jint OrgGeogebraCommonKernelGeosGeoNumeric_countSliders(OrgGeogebraCommonKernelGeosGeoNumeric *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoNumeric_setUndefined(OrgGeogebraCommonKernelGeosGeoNumeric *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoNumeric_isDefined(OrgGeogebraCommonKernelGeosGeoNumeric *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoNumeric_isInfinite(OrgGeogebraCommonKernelGeosGeoNumeric *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoNumeric_setValueWithDouble_(OrgGeogebraCommonKernelGeosGeoNumeric *self, jdouble x);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelGeosGeoNumeric_getValue(OrgGeogebraCommonKernelGeosGeoNumeric *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoNumeric_setSliderWidthWithDouble_(OrgGeogebraCommonKernelGeosGeoNumeric *self, jdouble width);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoNumeric_setSliderLocationWithDouble_withDouble_withBoolean_(OrgGeogebraCommonKernelGeosGeoNumeric *self, jdouble x, jdouble y, jboolean force);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(OrgGeogebraCommonKernelGeosGeoNumeric *self);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(OrgGeogebraCommonKernelGeosGeoNumeric *self);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelGeosGeoNumeric_getSliderWidth(OrgGeogebraCommonKernelGeosGeoNumeric *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMaxActive(OrgGeogebraCommonKernelGeosGeoNumeric *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMinActive(OrgGeogebraCommonKernelGeosGeoNumeric *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoNumeric_isSliderFixed(OrgGeogebraCommonKernelGeosGeoNumeric *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoNumeric_setSliderFixedWithBoolean_(OrgGeogebraCommonKernelGeosGeoNumeric *self, jboolean isSliderFixed);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelGeosGeoNumeric_getRandom(OrgGeogebraCommonKernelGeosGeoNumeric *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoNumeric_resolveMinMax(OrgGeogebraCommonKernelGeosGeoNumeric *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoNumeric_setIntervalMinActiveWithBoolean_(OrgGeogebraCommonKernelGeosGeoNumeric *self, jboolean intervalMinActive);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoNumeric_setIntervalMaxActiveWithBoolean_(OrgGeogebraCommonKernelGeosGeoNumeric *self, jboolean intervalMaxActive);

@interface OrgGeogebraCommonKernelGeosGeoNumeric_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)itemA
               withId:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)itemB;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelGeosGeoNumeric_$1)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoNumeric_$1_init(OrgGeogebraCommonKernelGeosGeoNumeric_$1 *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoNumeric_$1 *new_OrgGeogebraCommonKernelGeosGeoNumeric_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelGeosGeoNumeric_$1)

jint OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_WIDTH_PIXEL_ = 200;
jint OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_WIDTH_PIXEL_ANGLE_ = 180;
jdouble OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_MIN_ = -5;
jdouble OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_MAX_ = 5;
jdouble OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_INCREMENT_ = 0.1;
jdouble OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_SPEED_ = 1;

@implementation OrgGeogebraCommonKernelGeosGeoNumeric

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                                withBoolean:(jboolean)setDefaults {
  OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, c, setDefaults);
  return self;
}

- (jint)getRelatedModeID {
  return OrgGeogebraCommonEuclidianEuclidianConstants_MODE_SLIDER;
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC();
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
                                                 withDouble:(jdouble)x {
  OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_(self, c, label, x);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                                 withDouble:(jdouble)x {
  OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self, c, x);
  return self;
}

- (OrgGeogebraCommonKernelGeosGeoNumeric *)copy__ {
  return [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, value_) autorelease];
}

- (void)setZero {
  OrgGeogebraCommonKernelGeosGeoNumeric_setValueWithDouble_(self, 0);
}

- (jboolean)isDrawable {
  return isDrawable__ || ([self getDrawAlgorithm] != [self getParentAlgorithm]) || ([self isIndependent] && [self isLabelSet]);
}

- (jboolean)isFillable {
  return isDrawable__;
}

- (void)setDrawableWithBoolean:(jboolean)flag {
  OrgGeogebraCommonKernelGeosGeoNumeric_setDrawableWithBoolean_withBoolean_(self, flag, YES);
}

- (void)setDrawableWithBoolean:(jboolean)flag
                   withBoolean:(jboolean)visible {
  OrgGeogebraCommonKernelGeosGeoNumeric_setDrawableWithBoolean_withBoolean_(self, flag, visible);
}

- (void)setEuclidianVisibleWithBoolean:(jboolean)visible {
  if (visible == [self isSetEuclidianVisible] || [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) isMacroKernel]) return;
  if ([self isIndependent]) {
    if (visible) {
      OrgGeogebraCommonKernelGeosGeoNumeric *num = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) getDefaultNumberWithBoolean:[self isAngle]];
      [self setFixedWithBoolean:NO];
      if (!OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMinActive(self) && !([intervalMin_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]])) {
        if (!OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMaxActive(self) && !([intervalMax_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]])) {
          jdouble min = JavaLangMath_minWithDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(nil_chk(num)), JavaLangMath_floorWithDouble_(value_));
          jdouble max = JavaLangMath_maxWithDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(num), JavaLangMath_ceilWithDouble_(value_));
          [self setIntervalMinWithOrgGeogebraCommonKernelArithmeticNumberValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, min) autorelease]];
          [self setIntervalMaxWithOrgGeogebraCommonKernelArithmeticNumberValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, max) autorelease]];
        }
        else {
          jdouble min = JavaLangMath_minWithDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(nil_chk(num)), JavaLangMath_floorWithDouble_(value_));
          [self setIntervalMinWithOrgGeogebraCommonKernelArithmeticNumberValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, min) autorelease]];
        }
      }
      else {
        if (!OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMaxActive(self) && !([intervalMax_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]])) {
          jdouble max = JavaLangMath_maxWithDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(nil_chk(num)), JavaLangMath_ceilWithDouble_(value_));
          [self setIntervalMaxWithOrgGeogebraCommonKernelArithmeticNumberValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, max) autorelease]];
        }
      }
      if (sliderX_ == 0 && sliderY_ == 0) {
        OrgGeogebraCommonKernelGeosGeoNumeric_initScreenLocation(self);
      }
    }
  }
  [super setEuclidianVisibleWithBoolean:visible];
}

- (void)initScreenLocation {
  OrgGeogebraCommonKernelGeosGeoNumeric_initScreenLocation(self);
}

- (jint)countSliders {
  return OrgGeogebraCommonKernelGeosGeoNumeric_countSliders(self);
}

- (jboolean)isSlider {
  return [self isIndependent] && [self isEuclidianVisible];
}

- (jboolean)showInEuclidianView {
  return [self isDrawable] && OrgGeogebraCommonKernelGeosGeoNumeric_isDefined(self) && (intervalMin_ == nil || intervalMax_ == nil || ((OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMinActive(self) && OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMaxActive(self)) && (OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self) < OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self))));
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  id<OrgGeogebraCommonKernelArithmeticNumberValue> num = (id<OrgGeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(OrgGeogebraCommonKernelArithmeticNumberValue));
  OrgGeogebraCommonKernelGeosGeoNumeric_setValueWithDouble_(self, [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble]);
}

- (void)setUndefined {
  OrgGeogebraCommonKernelGeosGeoNumeric_setUndefined(self);
}

- (jboolean)isDefined {
  return OrgGeogebraCommonKernelGeosGeoNumeric_isDefined(self);
}

- (jboolean)isFinite {
  return OrgGeogebraCommonKernelGeosGeoNumeric_isDefined(self) && !OrgGeogebraCommonKernelGeosGeoNumeric_isInfinite(self);
}

- (jboolean)isInfinite {
  return OrgGeogebraCommonKernelGeosGeoNumeric_isInfinite(self);
}

- (NSString *)getLaTeXdescription {
  if (strLaTeXneedsUpdate_) {
    if (!OrgGeogebraCommonKernelGeosGeoNumeric_isDefined(self)) {
      OrgGeogebraCommonKernelGeosGeoElement_set_strLaTeX_(self, [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"]);
    }
    else if (OrgGeogebraCommonKernelGeosGeoNumeric_isInfinite(self)) {
      if (value_ >= 0) OrgGeogebraCommonKernelGeosGeoElement_set_strLaTeX_(self, @"\\infty");
      else OrgGeogebraCommonKernelGeosGeoElement_set_strLaTeX_(self, @"-\\infty");
    }
    else {
      OrgGeogebraCommonKernelGeosGeoElement_set_strLaTeX_(self, [self toLaTeXStringWithBoolean:NO withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_latexTemplate_()]);
    }
  }
  return strLaTeX_;
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) {
    return OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(value_, ((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class]))->value_);
  }
  return NO;
}

- (jdouble)getAnimationStep {
  if ([self getAnimationStepObject] == nil) {
    OrgGeogebraCommonKernelGeosGeoNumeric *num = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) getDefaultNumberWithBoolean:[self isGeoAngle]];
    [self setAnimationStepWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(num)) getAnimationStep]];
  }
  return [super getAnimationStep];
}

- (jdouble)getAnimationSpeed {
  if ([self getAnimationSpeedObject] == nil) {
    OrgGeogebraCommonKernelGeosGeoNumeric *num = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) getDefaultNumberWithBoolean:[self isGeoAngle]];
    [self setAnimationSpeedWithDouble:[((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(num)) getAnimationSpeed]];
  }
  return [super getAnimationSpeed];
}

- (void)setValueWithDouble:(jdouble)x {
  OrgGeogebraCommonKernelGeosGeoNumeric_setValueWithDouble_(self, x);
}

- (void)setValueWithDouble:(jdouble)x
               withBoolean:(jboolean)changeAnimationValue {
  if (JavaLangDouble_isNaNWithDouble_(x)) value_ = JavaLangDouble_NaN;
  else if (OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMinActive(self) && x < OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self)) {
    value_ = OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self);
    if ([self getCorrespondingCasCell] != nil) [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk([self getCorrespondingCasCell])) setInputFromTwinGeoWithBoolean:YES];
  }
  else if (OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMaxActive(self) && x > OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self)) {
    value_ = OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self);
    if ([self getCorrespondingCasCell] != nil) [((OrgGeogebraCommonKernelGeosGeoCasCell *) nil_chk([self getCorrespondingCasCell])) setInputFromTwinGeoWithBoolean:YES];
  }
  else value_ = x;
  if (changeAnimationValue) animationValue_ = value_;
}

- (jdouble)getValue {
  return OrgGeogebraCommonKernelGeosGeoNumeric_getValue(self);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (sbToString_ == nil) {
    OrgGeogebraCommonKernelGeosGeoNumeric_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  }
  if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()) {
    return [self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
  }
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  [sbToString_ appendWithNSString:label_];
  [sbToString_ appendWithNSString:@" = "];
  [sbToString_ appendWithNSString:[self toValueStringWithOrgGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString_ description];
}

- (NSString *)toStringMinimal {
  if (sbToString_ == nil) {
    OrgGeogebraCommonKernelGeosGeoNumeric_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  }
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  [sbToString_ appendWithNSString:[self toValueStringMinimal]];
  return [sbToString_ description];
}

- (NSString *)toValueStringMinimal {
  return [self regrFormatWithDouble:value_];
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] == OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()) {
    if (!sendValueToCas_) {
      return JreStrcat("C$C", '(', label_, ')');
    }
    if ([self isRandomGeo] && ![self isLabelSet]) {
      return @"exact(rand(0,1))";
    }
    if (JavaLangDouble_isNaNWithDouble_(value_)) {
      return @"undef";
    }
    if (JavaLangDouble_isInfiniteWithDouble_(value_)) {
      if (value_ > 0) {
        return @"inf";
      }
      return @"-inf";
    }
    return OrgGeogebraCommonUtilStringUtil_wrapInExactWithNSString_([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:value_ withOrgGeogebraCommonKernelStringTemplate:tpl]);
  }
  return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:value_ withOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)getNumber {
  return [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, value_) autorelease];
}

- (jdouble)getDouble {
  return value_;
}

- (void)setAllVisualPropertiesExceptEuclidianVisibleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo
                                                                                  withBoolean:(jboolean)keepAdvanced {
  [super setAllVisualPropertiesExceptEuclidianVisibleWithOrgGeogebraCommonKernelGeosGeoElement:geo withBoolean:keepAdvanced];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) {
    isDrawable__ = ((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class]))->isDrawable__;
  }
}

- (void)setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [super setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) {
    slopeTriangleSize_ = ((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoNumeric class]))->slopeTriangleSize_;
  }
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<value val=\""];
  [sb appendWithDouble:value_];
  [sb appendWithNSString:@"\""];
  if ([self isRandom]) {
    [sb appendWithNSString:@" random=\"true\""];
  }
  [sb appendWithNSString:@"/>\n"];
  [self getXMLvisualTagsWithJavaLangStringBuilder:sb];
  if (isDrawable__ || [self isSliderable]) {
    [self getXMLsliderTagWithJavaLangStringBuilder:sb];
    [self getLineStyleXMLWithJavaLangStringBuilder:sb];
    if (slopeTriangleSize_ > 1) {
      [sb appendWithNSString:@"\t<slopeTriangleSize val=\""];
      [sb appendWithInt:slopeTriangleSize_];
      [sb appendWithNSString:@"\"/>\n"];
    }
  }
  [self getXMLanimationTagsWithJavaLangStringBuilder:sb];
  [self getXMLfixedTagWithJavaLangStringBuilder:sb];
  [self getAuxiliaryXMLWithJavaLangStringBuilder:sb];
  [self getBreakpointXMLWithJavaLangStringBuilder:sb];
  [self getScriptTagsWithJavaLangStringBuilder:sb];
}

- (jboolean)isSliderable {
  return [self isIndependent] && (OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMinActive(self) || OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMaxActive(self));
}

- (jboolean)isFixable {
  return ![self isSetEuclidianVisible] && ![self isDefaultGeo];
}

- (void)getXMLsliderTagWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (![self isSliderable]) return;
  OrgGeogebraCommonKernelStringTemplate *tpl = OrgGeogebraCommonKernelStringTemplate_get_xmlTemplate_();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<slider"];
  if (OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMinActive(self) || [intervalMin_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) {
    [sb appendWithNSString:@" min=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getIntervalMinObject])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]);
    [sb appendWithNSString:@"\""];
  }
  if (OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMaxActive(self) || [intervalMax_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) {
    [sb appendWithNSString:@" max=\""];
    OrgGeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk([self getIntervalMaxObject])) getLabelWithOrgGeogebraCommonKernelStringTemplate:tpl]);
    [sb appendWithNSString:@"\""];
  }
  if (hasAbsoluteScreenLocation_) {
    [sb appendWithNSString:@" absoluteScreenLocation=\"true\""];
  }
  [sb appendWithNSString:@" width=\""];
  [sb appendWithDouble:sliderWidth_];
  [sb appendWithNSString:@"\" x=\""];
  [sb appendWithDouble:sliderX_];
  [sb appendWithNSString:@"\" y=\""];
  [sb appendWithDouble:sliderY_];
  [sb appendWithNSString:@"\" fixed=\""];
  [sb appendWithBoolean:sliderFixed_];
  [sb appendWithNSString:@"\" horizontal=\""];
  [sb appendWithBoolean:sliderHorizontal_];
  [sb appendWithNSString:@"\"/>\n"];
}

- (jboolean)isNumberValue {
  return YES;
}

- (jboolean)isGeoNumeric {
  return YES;
}

- (jint)getSlopeTriangleSize {
  return slopeTriangleSize_;
}

- (void)setSlopeTriangleSizeWithInt:(jint)i {
  slopeTriangleSize_ = i;
}

- (void)setIntervalMaxWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)max {
  if ([intervalMax_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(intervalMax_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) unregisterMinMaxListenerWithOrgGeogebraCommonKernelGeosGeoNumeric:self];
  }
  OrgGeogebraCommonKernelGeosGeoNumeric_set_intervalMax_(self, max);
  OrgGeogebraCommonKernelGeosGeoNumeric_setIntervalMaxActiveWithBoolean_(self, !JavaLangDouble_isNaNWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(max)) getDouble]));
  if ([max isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(max, [OrgGeogebraCommonKernelGeosGeoNumeric class])) registerMinMaxListenerWithOrgGeogebraCommonKernelGeosGeoNumeric:self];
  }
  OrgGeogebraCommonKernelGeosGeoNumeric_resolveMinMax(self);
}

- (void)setIntervalMinWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)min {
  if ([intervalMin_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(intervalMin_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) unregisterMinMaxListenerWithOrgGeogebraCommonKernelGeosGeoNumeric:self];
  }
  OrgGeogebraCommonKernelGeosGeoNumeric_set_intervalMin_(self, min);
  OrgGeogebraCommonKernelGeosGeoNumeric_setIntervalMinActiveWithBoolean_(self, !JavaLangDouble_isNaNWithDouble_([((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(min)) getDouble]));
  if ([min isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) {
    [((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(min, [OrgGeogebraCommonKernelGeosGeoNumeric class])) registerMinMaxListenerWithOrgGeogebraCommonKernelGeosGeoNumeric:self];
  }
  OrgGeogebraCommonKernelGeosGeoNumeric_resolveMinMax(self);
}

- (void)setSliderWidthWithDouble:(jdouble)width {
  OrgGeogebraCommonKernelGeosGeoNumeric_setSliderWidthWithDouble_(self, width);
}

- (void)setSliderLocationWithDouble:(jdouble)x
                         withDouble:(jdouble)y
                        withBoolean:(jboolean)force {
  OrgGeogebraCommonKernelGeosGeoNumeric_setSliderLocationWithDouble_withDouble_withBoolean_(self, x, y, force);
}

- (jdouble)getIntervalMax {
  return OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self);
}

- (jdouble)getIntervalMin {
  return OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self);
}

- (jdouble)getSliderWidth {
  return OrgGeogebraCommonKernelGeosGeoNumeric_getSliderWidth(self);
}

- (jdouble)getSliderX {
  return sliderX_;
}

- (jdouble)getSliderY {
  return sliderY_;
}

- (jboolean)isIntervalMaxActive {
  return OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMaxActive(self);
}

- (jboolean)isIntervalMinActive {
  return OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMinActive(self);
}

- (jboolean)isSliderFixed {
  return OrgGeogebraCommonKernelGeosGeoNumeric_isSliderFixed(self);
}

- (void)setSliderFixedWithBoolean:(jboolean)isSliderFixed {
  OrgGeogebraCommonKernelGeosGeoNumeric_setSliderFixedWithBoolean_(self, isSliderFixed);
}

- (jboolean)isSliderHorizontal {
  return sliderHorizontal_;
}

- (void)setSliderHorizontalWithBoolean:(jboolean)sliderHorizontal {
  self->sliderHorizontal_ = sliderHorizontal;
}

- (void)setAbsoluteScreenLocWithInt:(jint)x
                            withInt:(jint)y
                        withBoolean:(jboolean)force {
  OrgGeogebraCommonKernelGeosGeoNumeric_setSliderLocationWithDouble_withDouble_withBoolean_(self, x, y, force);
}

- (void)setAbsoluteScreenLocWithInt:(jint)x
                            withInt:(jint)y {
  OrgGeogebraCommonKernelGeosGeoNumeric_setSliderLocationWithDouble_withDouble_withBoolean_(self, x, y, YES);
}

- (jint)getAbsoluteScreenLocX {
  return J2ObjCFpToInt(sliderX_);
}

- (jint)getAbsoluteScreenLocY {
  return J2ObjCFpToInt(sliderY_);
}

- (void)setRealWorldLocWithDouble:(jdouble)x
                       withDouble:(jdouble)y {
  sliderX_ = x;
  sliderY_ = y;
}

- (jdouble)getRealWorldLocX {
  return sliderX_;
}

- (jdouble)getRealWorldLocY {
  return sliderY_;
}

- (void)setAbsoluteScreenLocActiveWithBoolean:(jboolean)flag {
  hasAbsoluteScreenLocation_ = flag;
  if (flag) sliderWidth_ = [self isKindOfClass:[OrgGeogebraCommonKernelGeosGeoAngle class]] ? OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_WIDTH_PIXEL_ANGLE_ : OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_WIDTH_PIXEL_;
  else sliderWidth_ = OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_WIDTH_RW_;
}

- (jboolean)isAbsoluteScreenLocActive {
  return hasAbsoluteScreenLocation_;
}

- (jboolean)isAbsoluteScreenLocateable {
  return [self isSliderable];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getGeoFunction {
  OrgGeogebraCommonKernelArithmeticExpressionNode *en = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self) autorelease];
  OrgGeogebraCommonKernelArithmeticFunction *fun = [new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(en, [new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(kernel_) autorelease]) autorelease];
  OrgGeogebraCommonKernelGeosGeoFunction *ret;
  if ([self isLabelSet] || ![self isIndependent]) {
    jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) DependentFunctionWithNSString:nil withOrgGeogebraCommonKernelArithmeticFunction:fun];
    [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  else {
    ret = [new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
    [ret setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:fun];
  }
  return ret;
}

- (jboolean)isGeoFunctionable {
  return YES;
}

- (void)doRemove {
  [super doRemove];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeRandomGeoWithOrgGeogebraCommonKernelGeosGeoElement:self];
  if ([intervalMin_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(intervalMin_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) unregisterMinMaxListenerWithOrgGeogebraCommonKernelGeosGeoNumeric:self];
  if ([intervalMax_ isKindOfClass:[OrgGeogebraCommonKernelGeosGeoNumeric class]]) [((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(((OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(intervalMax_, [OrgGeogebraCommonKernelGeosGeoNumeric class])))) unregisterMinMaxListenerWithOrgGeogebraCommonKernelGeosGeoNumeric:self];
}

- (void)registerMinMaxListenerWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  if (minMaxListeners_ == nil) OrgGeogebraCommonKernelGeosGeoNumeric_setAndConsume_minMaxListeners_(self, new_JavaUtilArrayList_init());
  [((JavaUtilArrayList *) nil_chk(minMaxListeners_)) addWithId:geo];
}

- (void)unregisterMinMaxListenerWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)geo {
  if (minMaxListeners_ == nil) OrgGeogebraCommonKernelGeosGeoNumeric_setAndConsume_minMaxListeners_(self, new_JavaUtilArrayList_init());
  [((JavaUtilArrayList *) nil_chk(minMaxListeners_)) removeWithId:geo];
}

- (id<JavaUtilList>)getMinMaxListeners {
  return minMaxListeners_;
}

- (void)setRandomWithBoolean:(jboolean)random {
  randomSlider_ = random;
  if (random) [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) addRandomGeoWithOrgGeogebraCommonKernelGeosGeoElement:self];
  else [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeRandomGeoWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

- (jboolean)isRandom {
  return randomSlider_;
}

- (void)updateRandom {
  if (randomSlider_ && OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMaxActive(self) && OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMinActive(self)) {
    value_ = OrgGeogebraCommonKernelGeosGeoNumeric_getRandom(self);
    [self updateCascade];
  }
}

- (void)updateRandomNoCascade {
  if (randomSlider_ && OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMaxActive(self) && OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMinActive(self)) {
    value_ = OrgGeogebraCommonKernelGeosGeoNumeric_getRandom(self);
  }
}

- (jdouble)getRandom {
  return OrgGeogebraCommonKernelGeosGeoNumeric_getRandom(self);
}

- (void)update {
  [super update];
  if (minMaxListeners_ != nil) {
    for (jint i = 0; i < [minMaxListeners_ size]; i++) {
      OrgGeogebraCommonKernelGeosGeoNumeric *geo = [minMaxListeners_ getWithInt:i];
      OrgGeogebraCommonKernelGeosGeoNumeric_resolveMinMax(nil_chk(geo));
    }
  }
  if (evListeners_ != nil) {
    for (id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim> __strong ev in evListeners_) [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(ev)) updateBoundsWithBoolean:YES withBoolean:YES];
  }
}

- (void)resolveMinMax {
  OrgGeogebraCommonKernelGeosGeoNumeric_resolveMinMax(self);
}

- (jboolean)isAnimatable {
  return [self isIndependent] && OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMinActive(self) && OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMaxActive(self);
}

- (void)setAnimatingWithBoolean:(jboolean)flag {
  @synchronized(self) {
    animationValue_ = JavaLangDouble_NaN;
    [super setAnimatingWithBoolean:flag];
  }
}

- (jboolean)doAnimationStepWithDouble:(jdouble)frameRate {
  @synchronized(self) {
    if (!OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMinActive(self) || !OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMaxActive(self)) return NO;
    if ([self isRandom]) {
      jdouble animationStep = [self getAnimationStep];
      if (animationValue_ < -2 * animationStep) {
        animationValue_ = 0;
      }
      jdouble intervalWidth = OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self) - OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self);
      jdouble step = intervalWidth * [self getAnimationSpeed] / (OrgGeogebraCommonKernelAnimationManager_STANDARD_ANIMATION_TIME * frameRate);
      if (JavaLangDouble_isNaNWithDouble_(animationValue_) || animationValue_ < 0) animationValue_ = 0;
      animationValue_ = animationValue_ + JavaLangMath_absWithDouble_(step);
      if (animationValue_ > animationStep) {
        animationValue_ -= animationStep;
        [self setValueWithDouble:OrgGeogebraCommonKernelGeosGeoNumeric_getRandom(self) withBoolean:NO];
        return YES;
      }
      return NO;
    }
    jdouble oldValue = OrgGeogebraCommonKernelGeosGeoNumeric_getValue(self);
    jdouble intervalWidth = OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self) - OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self);
    jdouble step = intervalWidth * [self getAnimationSpeed] * [self getAnimationDirection] / (OrgGeogebraCommonKernelAnimationManager_STANDARD_ANIMATION_TIME * frameRate);
    if (JavaLangDouble_isNaNWithDouble_(animationValue_)) animationValue_ = oldValue;
    animationValue_ = animationValue_ + step;
    switch ([self getAnimationType]) {
      case OrgGeogebraCommonKernelGeosGeoElement_ANIMATION_DECREASING:
      case OrgGeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING:
      if (animationValue_ > OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self)) animationValue_ = animationValue_ - intervalWidth;
      else if (animationValue_ < OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self)) animationValue_ = animationValue_ + intervalWidth;
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING_ONCE:
      if (animationValue_ > OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self)) {
        [self setAnimatingWithBoolean:NO];
        [self setValueWithDouble:OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self) withBoolean:NO];
        return YES;
      }
      else if (animationValue_ < OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self)) {
        [self setAnimatingWithBoolean:NO];
        [self setValueWithDouble:OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self) withBoolean:NO];
        return YES;
      }
      break;
      case OrgGeogebraCommonKernelGeosGeoElement_ANIMATION_OSCILLATING:
      default:
      if (animationValue_ >= OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self)) {
        animationValue_ = OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self);
        [self changeAnimationDirection];
      }
      else if (animationValue_ <= OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self)) {
        animationValue_ = OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self);
        [self changeAnimationDirection];
      }
      break;
    }
    jdouble newValue;
    jdouble param = animationValue_ - OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self);
    param = OrgGeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(param, [self getAnimationStep]);
    newValue = OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self) + param;
    if ([self getAnimationStep] > OrgGeogebraCommonKernelKernel_MIN_PRECISION) {
      newValue = OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(newValue);
    }
    [self setValueWithDouble:newValue withBoolean:NO];
    return OrgGeogebraCommonKernelGeosGeoNumeric_getValue(self) != oldValue;
  }
}

+ (id<JavaUtilComparator>)getComparator {
  return OrgGeogebraCommonKernelGeosGeoNumeric_getComparator();
}

- (void)updateRandomGeo {
  OrgGeogebraCommonKernelGeosGeoNumeric_setValueWithDouble_(self, [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getRandomNumber]);
  [super updateRandomGeo];
}

- (jint)getMinimumLineThickness {
  return ([self isSlider] ? 1 : 0);
}

- (void)setIntervalMinWithDouble:(jdouble)value {
  [self setIntervalMinWithOrgGeogebraCommonKernelArithmeticNumberValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, value) autorelease]];
}

- (void)setIntervalMaxWithDouble:(jdouble)value {
  [self setIntervalMaxWithOrgGeogebraCommonKernelArithmeticNumberValue:[new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, value) autorelease]];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getIntervalMinObject {
  if (intervalMin_ == nil) return nil;
  return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(intervalMin_)) toGeoElement];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)getIntervalMaxObject {
  if (intervalMax_ == nil) return nil;
  return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(intervalMax_)) toGeoElement];
}

- (jboolean)canHaveClickScript {
  return NO;
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (void)addEVSizeListenerWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>)ev {
  if (evListeners_ == nil) OrgGeogebraCommonKernelGeosGeoNumeric_setAndConsume_evListeners_(self, new_JavaUtilArrayList_init());
  if (![((JavaUtilArrayList *) nil_chk(evListeners_)) containsWithId:ev]) [evListeners_ addWithId:ev];
}

- (void)removeEVSizeListenerWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>)ev {
  if (evListeners_ != nil) [evListeners_ removeWithId:ev];
}

- (void)moveDependenciesWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)oldGeo {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(oldGeo)) isGeoNumeric]) return;
  OrgGeogebraCommonKernelGeosGeoNumeric *num = (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast(oldGeo, [OrgGeogebraCommonKernelGeosGeoNumeric class]);
  if (num->evListeners_ != nil) {
    OrgGeogebraCommonKernelGeosGeoNumeric_set_evListeners_(self, num->evListeners_);
    for (id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim> __strong ev in num->evListeners_) {
      [((id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(ev)) replaceBoundObjectWithOrgGeogebraCommonKernelGeosGeoNumeric:num withOrgGeogebraCommonKernelGeosGeoNumeric:self];
    }
    OrgGeogebraCommonKernelGeosGeoNumeric_set_evListeners_(num, nil);
  }
  if (num->minMaxListeners_ != nil) {
    OrgGeogebraCommonKernelGeosGeoNumeric_set_minMaxListeners_(self, num->minMaxListeners_);
    for (OrgGeogebraCommonKernelGeosGeoNumeric * __strong slider in minMaxListeners_) {
      if ([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(slider)) getIntervalMaxObject] == num) [slider setIntervalMaxWithOrgGeogebraCommonKernelArithmeticNumberValue:self];
      if ([slider getIntervalMinObject] == num) [slider setIntervalMinWithOrgGeogebraCommonKernelArithmeticNumberValue:self];
    }
  }
}

- (jboolean)isLaTeXDrawableGeo {
  return NO;
}

- (jboolean)hasLineOpacity {
  return YES;
}

- (void)addToSpreadsheetTraceListWithJavaUtilArrayList:(JavaUtilArrayList *)spreadsheetTraceList {
  OrgGeogebraCommonKernelGeosGeoNumeric *xx = [self copy__];
  [((JavaUtilArrayList *) nil_chk(spreadsheetTraceList)) addWithId:xx];
}

- (void)setIntervalMinActiveWithBoolean:(jboolean)intervalMinActive {
  OrgGeogebraCommonKernelGeosGeoNumeric_setIntervalMinActiveWithBoolean_(self, intervalMinActive);
}

- (void)setIntervalMaxActiveWithBoolean:(jboolean)intervalMaxActive {
  OrgGeogebraCommonKernelGeosGeoNumeric_setIntervalMaxActiveWithBoolean_(self, intervalMaxActive);
}

- (jboolean)isPinnable {
  return [self isSlider];
}

- (id<OrgGeogebraCommonKernelArithmeticExpressionValue>)integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:(OrgGeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                    withOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel0 {
  return [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel0, self, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), fv) autorelease];
}

+ (OrgGeogebraCommonKernelGeosGeoNumeric *)setSliderFromDefaultWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)num
                                                                                             withBoolean:(jboolean)isAngle {
  return OrgGeogebraCommonKernelGeosGeoNumeric_setSliderFromDefaultWithOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(num, isAngle);
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (jboolean)isShowingExtendedAV {
  return showExtendedAV_;
}

- (void)setShowExtendedAVWithBoolean:(jboolean)showExtendedAV {
  self->showExtendedAV_ = showExtendedAV;
}

- (void)setLabelModeDefault {
  OrgGeogebraCommonMainApp *app = [((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) getApplication];
  jint labelingStyle = app == nil ? OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_USE_DEFAULTS : [app getCurrentLabelingStyle];
  jboolean visible = NO;
  switch (labelingStyle) {
    case OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_ALWAYS_ON:
    visible = YES;
    break;
    case OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_ALWAYS_OFF:
    visible = NO;
    break;
    case OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_POINTS_ONLY:
    visible = YES;
    break;
    default:
    case OrgGeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_USE_DEFAULTS:
    visible = YES;
    break;
  }
  if (visible) {
    labelMode_ = OrgGeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE;
  }
  else {
    labelMode_ = OrgGeogebraCommonKernelGeosGeoElement_LABEL_VALUE;
  }
}

- (void)dealloc {
  RELEASE_(intervalMin_);
  RELEASE_(intervalMax_);
  RELEASE_(sbToString_);
  RELEASE_(minMaxListeners_);
  RELEASE_(evListeners_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoNumeric", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withBoolean:", "GeoNumeric", NULL, 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withDouble:", "GeoNumeric", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withDouble:", "GeoNumeric", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "setZero", NULL, "V", 0x1, NULL, NULL },
    { "isDrawable", NULL, "Z", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "setDrawableWithBoolean:", "setDrawable", "V", 0x11, NULL, NULL },
    { "setDrawableWithBoolean:withBoolean:", "setDrawable", "V", 0x11, NULL, NULL },
    { "setEuclidianVisibleWithBoolean:", "setEuclidianVisible", "V", 0x1, NULL, NULL },
    { "initScreenLocation", NULL, "V", 0x2, NULL, NULL },
    { "countSliders", NULL, "I", 0x2, NULL, NULL },
    { "isSlider", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x11, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x11, NULL, NULL },
    { "isDefined", NULL, "Z", 0x11, NULL, NULL },
    { "isFinite", NULL, "Z", 0x11, NULL, NULL },
    { "isInfinite", NULL, "Z", 0x11, NULL, NULL },
    { "getLaTeXdescription", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x11, NULL, NULL },
    { "getAnimationStep", NULL, "D", 0x1, NULL, NULL },
    { "getAnimationSpeed", NULL, "D", 0x1, NULL, NULL },
    { "setValueWithDouble:", "setValue", "V", 0x11, NULL, NULL },
    { "setValueWithDouble:withBoolean:", "setValue", "V", 0x1, NULL, NULL },
    { "getValue", NULL, "D", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringMinimal", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toValueStringMinimal", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNumber", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x1, NULL, NULL },
    { "getDouble", NULL, "D", 0x11, NULL, NULL },
    { "setAllVisualPropertiesExceptEuclidianVisibleWithOrgGeogebraCommonKernelGeosGeoElement:withBoolean:", "setAllVisualPropertiesExceptEuclidianVisible", "V", 0x1, NULL, NULL },
    { "setVisualStyleWithOrgGeogebraCommonKernelGeosGeoElement:", "setVisualStyle", "V", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "isSliderable", NULL, "Z", 0x4, NULL, NULL },
    { "isFixable", NULL, "Z", 0x1, NULL, NULL },
    { "getXMLsliderTagWithJavaLangStringBuilder:", "getXMLsliderTag", "V", 0x4, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoNumeric", NULL, "Z", 0x1, NULL, NULL },
    { "getSlopeTriangleSize", NULL, "I", 0x11, NULL, NULL },
    { "setSlopeTriangleSizeWithInt:", "setSlopeTriangleSize", "V", 0x1, NULL, NULL },
    { "setIntervalMaxWithOrgGeogebraCommonKernelArithmeticNumberValue:", "setIntervalMax", "V", 0x1, NULL, NULL },
    { "setIntervalMinWithOrgGeogebraCommonKernelArithmeticNumberValue:", "setIntervalMin", "V", 0x1, NULL, NULL },
    { "setSliderWidthWithDouble:", "setSliderWidth", "V", 0x11, NULL, NULL },
    { "setSliderLocationWithDouble:withDouble:withBoolean:", "setSliderLocation", "V", 0x11, NULL, NULL },
    { "getIntervalMax", NULL, "D", 0x11, NULL, NULL },
    { "getIntervalMin", NULL, "D", 0x11, NULL, NULL },
    { "getSliderWidth", NULL, "D", 0x11, NULL, NULL },
    { "getSliderX", NULL, "D", 0x11, NULL, NULL },
    { "getSliderY", NULL, "D", 0x11, NULL, NULL },
    { "isIntervalMaxActive", NULL, "Z", 0x11, NULL, NULL },
    { "isIntervalMinActive", NULL, "Z", 0x11, NULL, NULL },
    { "isSliderFixed", NULL, "Z", 0x11, NULL, NULL },
    { "setSliderFixedWithBoolean:", "setSliderFixed", "V", 0x11, NULL, NULL },
    { "isSliderHorizontal", NULL, "Z", 0x11, NULL, NULL },
    { "setSliderHorizontalWithBoolean:", "setSliderHorizontal", "V", 0x1, NULL, NULL },
    { "setAbsoluteScreenLocWithInt:withInt:withBoolean:", "setAbsoluteScreenLoc", "V", 0x1, NULL, NULL },
    { "setAbsoluteScreenLocWithInt:withInt:", "setAbsoluteScreenLoc", "V", 0x1, NULL, NULL },
    { "getAbsoluteScreenLocX", NULL, "I", 0x1, NULL, NULL },
    { "getAbsoluteScreenLocY", NULL, "I", 0x1, NULL, NULL },
    { "setRealWorldLocWithDouble:withDouble:", "setRealWorldLoc", "V", 0x1, NULL, NULL },
    { "getRealWorldLocX", NULL, "D", 0x1, NULL, NULL },
    { "getRealWorldLocY", NULL, "D", 0x1, NULL, NULL },
    { "setAbsoluteScreenLocActiveWithBoolean:", "setAbsoluteScreenLocActive", "V", 0x1, NULL, NULL },
    { "isAbsoluteScreenLocActive", NULL, "Z", 0x1, NULL, NULL },
    { "isAbsoluteScreenLocateable", NULL, "Z", 0x1, NULL, NULL },
    { "getGeoFunction", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "isGeoFunctionable", NULL, "Z", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "registerMinMaxListenerWithOrgGeogebraCommonKernelGeosGeoNumeric:", "registerMinMaxListener", "V", 0x1, NULL, NULL },
    { "unregisterMinMaxListenerWithOrgGeogebraCommonKernelGeosGeoNumeric:", "unregisterMinMaxListener", "V", 0x1, NULL, NULL },
    { "getMinMaxListeners", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "setRandomWithBoolean:", "setRandom", "V", 0x1, NULL, NULL },
    { "isRandom", NULL, "Z", 0x1, NULL, NULL },
    { "updateRandom", NULL, "V", 0x1, NULL, NULL },
    { "updateRandomNoCascade", NULL, "V", 0x1, NULL, NULL },
    { "getRandom", NULL, "D", 0x2, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "resolveMinMax", NULL, "V", 0x2, NULL, NULL },
    { "isAnimatable", NULL, "Z", 0x1, NULL, NULL },
    { "setAnimatingWithBoolean:", "setAnimating", "V", 0x21, NULL, NULL },
    { "doAnimationStepWithDouble:", "doAnimationStep", "Z", 0x31, NULL, NULL },
    { "getComparator", NULL, "Ljava.util.Comparator;", 0x9, NULL, NULL },
    { "updateRandomGeo", NULL, "V", 0x11, NULL, NULL },
    { "getMinimumLineThickness", NULL, "I", 0x1, NULL, NULL },
    { "setIntervalMinWithDouble:", "setIntervalMin", "V", 0x1, NULL, NULL },
    { "setIntervalMaxWithDouble:", "setIntervalMax", "V", 0x1, NULL, NULL },
    { "getIntervalMinObject", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getIntervalMaxObject", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "canHaveClickScript", NULL, "Z", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x11, NULL, NULL },
    { "addEVSizeListenerWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "addEVSizeListener", "V", 0x1, NULL, NULL },
    { "removeEVSizeListenerWithOrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "removeEVSizeListener", "V", 0x1, NULL, NULL },
    { "moveDependenciesWithOrgGeogebraCommonKernelGeosGeoElement:", "moveDependencies", "V", 0x1, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "hasLineOpacity", NULL, "Z", 0x1, NULL, NULL },
    { "addToSpreadsheetTraceListWithJavaUtilArrayList:", "addToSpreadsheetTraceList", "V", 0x1, NULL, NULL },
    { "setIntervalMinActiveWithBoolean:", "setIntervalMinActive", "V", 0x2, NULL, NULL },
    { "setIntervalMaxActiveWithBoolean:", "setIntervalMaxActive", "V", 0x2, NULL, NULL },
    { "isPinnable", NULL, "Z", 0x1, NULL, NULL },
    { "integralWithOrgGeogebraCommonKernelArithmeticFunctionVariable:withOrgGeogebraCommonKernelKernel:", "integral", "Lorg.geogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "setSliderFromDefaultWithOrgGeogebraCommonKernelGeosGeoNumeric:withBoolean:", "setSliderFromDefault", "Lorg.geogebra.common.kernel.geos.GeoNumeric;", 0x9, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
    { "isShowingExtendedAV", NULL, "Z", 0x1, NULL, NULL },
    { "setShowExtendedAVWithBoolean:", "setShowExtendedAV", "V", 0x1, NULL, NULL },
    { "setLabelModeDefault", NULL, "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_THICKNESS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_THICKNESS },
    { "DEFAULT_SLIDER_THICKNESS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_THICKNESS },
    { "DEFAULT_SLIDER_WIDTH_RW_", NULL, 0xa, "I", &OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_WIDTH_RW_, NULL,  },
    { "DEFAULT_SLIDER_WIDTH_PIXEL_", NULL, 0x9, "I", &OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_WIDTH_PIXEL_, NULL,  },
    { "DEFAULT_SLIDER_WIDTH_PIXEL_ANGLE_", NULL, 0x9, "I", &OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_WIDTH_PIXEL_ANGLE_, NULL,  },
    { "DEFAULT_SLIDER_MIN_", NULL, 0x9, "D", &OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_MIN_, NULL,  },
    { "DEFAULT_SLIDER_MAX_", NULL, 0x9, "D", &OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_MAX_, NULL,  },
    { "DEFAULT_SLIDER_INCREMENT_", NULL, 0x9, "D", &OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_INCREMENT_, NULL,  },
    { "DEFAULT_SLIDER_SPEED_", NULL, 0x9, "D", &OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_SPEED_, NULL,  },
    { "value_", NULL, 0x1, "D", NULL, NULL,  },
    { "isDrawable__", "isDrawable", 0x1, "Z", NULL, NULL,  },
    { "slopeTriangleSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "intervalMinActive_", NULL, 0x2, "Z", NULL, NULL,  },
    { "intervalMaxActive_", NULL, 0x2, "Z", NULL, NULL,  },
    { "intervalMin_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "intervalMax_", NULL, 0x2, "Lorg.geogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "sliderWidth_", NULL, 0x2, "D", NULL, NULL,  },
    { "sliderX_", NULL, 0x2, "D", NULL, NULL,  },
    { "sliderY_", NULL, 0x2, "D", NULL, NULL,  },
    { "sliderFixed_", NULL, 0x2, "Z", NULL, NULL,  },
    { "sliderHorizontal_", NULL, 0x2, "Z", NULL, NULL,  },
    { "animationValue_", NULL, 0x2, "D", NULL, NULL,  },
    { "hasAbsoluteScreenLocation_", NULL, 0x0, "Z", NULL, NULL,  },
    { "sbToString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "minMaxListeners_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoNumeric;>;",  },
    { "randomSlider_", NULL, 0x2, "Z", NULL, NULL,  },
    { "comparator_", NULL, 0xa, "Ljava.util.Comparator;", &OrgGeogebraCommonKernelGeosGeoNumeric_comparator_, "Ljava/util/Comparator<Lorg/geogebra/common/kernel/geos/GeoNumberValue;>;",  },
    { "evListeners_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/euclidian/EuclidianViewInterfaceSlim;>;",  },
    { "showExtendedAV_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoNumeric = { 2, "GeoNumeric", "org.geogebra.common.kernel.geos", NULL, 0x1, 111, methods, 29, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoNumeric;
}

@end

void OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoNumeric *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, c, YES);
}

OrgGeogebraCommonKernelGeosGeoNumeric *new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoNumeric *self = [OrgGeogebraCommonKernelGeosGeoNumeric alloc];
  OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(OrgGeogebraCommonKernelGeosGeoNumeric *self, OrgGeogebraCommonKernelConstruction *c, jboolean setDefaults) {
  OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->isDrawable__ = NO;
  self->slopeTriangleSize_ = 1;
  self->intervalMinActive_ = NO;
  self->intervalMaxActive_ = NO;
  self->sliderWidth_ = [self isKindOfClass:[OrgGeogebraCommonKernelGeosGeoAngle class]] ? OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_WIDTH_PIXEL_ANGLE_ : OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_WIDTH_PIXEL_;
  self->sliderFixed_ = NO;
  self->sliderHorizontal_ = YES;
  self->animationValue_ = JavaLangDouble_NaN;
  self->hasAbsoluteScreenLocation_ = YES;
  self->randomSlider_ = NO;
  OrgGeogebraCommonKernelGeosGeoNumeric_set_evListeners_(self, nil);
  self->showExtendedAV_ = YES;
  if (setDefaults) [self setConstructionDefaults];
  [self setEuclidianVisibleWithBoolean:NO];
}

OrgGeogebraCommonKernelGeosGeoNumeric *new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(OrgGeogebraCommonKernelConstruction *c, jboolean setDefaults) {
  OrgGeogebraCommonKernelGeosGeoNumeric *self = [OrgGeogebraCommonKernelGeosGeoNumeric alloc];
  OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, c, setDefaults);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_(OrgGeogebraCommonKernelGeosGeoNumeric *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, jdouble x) {
  OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self, c, x);
  [self setLabelWithNSString:label];
}

OrgGeogebraCommonKernelGeosGeoNumeric *new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_(OrgGeogebraCommonKernelConstruction *c, NSString *label, jdouble x) {
  OrgGeogebraCommonKernelGeosGeoNumeric *self = [OrgGeogebraCommonKernelGeosGeoNumeric alloc];
  OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_(self, c, label, x);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(OrgGeogebraCommonKernelGeosGeoNumeric *self, OrgGeogebraCommonKernelConstruction *c, jdouble x) {
  OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->value_ = x;
}

OrgGeogebraCommonKernelGeosGeoNumeric *new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(OrgGeogebraCommonKernelConstruction *c, jdouble x) {
  OrgGeogebraCommonKernelGeosGeoNumeric *self = [OrgGeogebraCommonKernelGeosGeoNumeric alloc];
  OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(self, c, x);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoNumeric_setDrawableWithBoolean_withBoolean_(OrgGeogebraCommonKernelGeosGeoNumeric *self, jboolean flag, jboolean visible) {
  self->isDrawable__ = flag;
  if (visible && self->isDrawable__ && [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isNotifyViewsActive] && [self->kernel_ isAllowVisibilitySideEffects]) {
    [self setEuclidianVisibleWithBoolean:YES];
  }
}

void OrgGeogebraCommonKernelGeosGeoNumeric_initScreenLocation(OrgGeogebraCommonKernelGeosGeoNumeric *self) {
  jint count = OrgGeogebraCommonKernelGeosGeoNumeric_countSliders(self);
  if ([self isAbsoluteScreenLocActive]) {
    self->sliderX_ = 30;
    id<OrgGeogebraCommonEuclidianEuclidianViewInterfaceSlim> ev = [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getActiveEuclidianView];
    if (ev != nil) {
      self->sliderY_ = [ev getSliderOffsetY] + 40 * count;
    }
    else {
      self->sliderY_ = 50 + 40 * count;
    }
    self->sliderY_ = J2ObjCFpToInt(self->sliderY_) / 400 * 10 + fmod(self->sliderY_, 400);
  }
  else {
    self->sliderX_ = -5;
    self->sliderY_ = 10 - count;
  }
}

jint OrgGeogebraCommonKernelGeosGeoNumeric_countSliders(OrgGeogebraCommonKernelGeosGeoNumeric *self) {
  jint count = 0;
  JavaUtilTreeSet *numbers = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getGeoSetLabelOrderWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_NUMERIC()];
  JavaUtilTreeSet *angles = [self->cons_ getGeoSetLabelOrderWithOrgGeogebraCommonPluginGeoClassEnum:OrgGeogebraCommonPluginGeoClassEnum_get_ANGLE()];
  if (numbers != nil) {
    if (angles != nil) [numbers addAllWithJavaUtilCollection:angles];
  }
  else {
    numbers = angles;
  }
  if (numbers != nil) {
    id<JavaUtilIterator> it = [numbers iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgGeogebraCommonKernelGeosGeoNumeric *num = (OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([it next], [OrgGeogebraCommonKernelGeosGeoNumeric class]);
      if ([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(num)) isSlider]) count++;
    }
  }
  return count;
}

void OrgGeogebraCommonKernelGeosGeoNumeric_setUndefined(OrgGeogebraCommonKernelGeosGeoNumeric *self) {
  self->value_ = JavaLangDouble_NaN;
}

jboolean OrgGeogebraCommonKernelGeosGeoNumeric_isDefined(OrgGeogebraCommonKernelGeosGeoNumeric *self) {
  OrgGeogebraCommonKernelAlgosAlgoElement *algo;
  if ([OrgGeogebraCommonKernelCasAlgoIntegralDefiniteInterface_class_() isInstance:(algo = [self getParentAlgorithm])]) {
    id<OrgGeogebraCommonKernelCasAlgoIntegralDefiniteInterface> aid = (id<OrgGeogebraCommonKernelCasAlgoIntegralDefiniteInterface>) check_protocol_cast(algo, @protocol(OrgGeogebraCommonKernelCasAlgoIntegralDefiniteInterface));
    if ([((id<OrgGeogebraCommonKernelCasAlgoIntegralDefiniteInterface>) nil_chk(aid)) evaluateOnly]) return YES;
  }
  return !JavaLangDouble_isNaNWithDouble_(self->value_);
}

jboolean OrgGeogebraCommonKernelGeosGeoNumeric_isInfinite(OrgGeogebraCommonKernelGeosGeoNumeric *self) {
  return JavaLangDouble_isInfiniteWithDouble_(self->value_);
}

void OrgGeogebraCommonKernelGeosGeoNumeric_setValueWithDouble_(OrgGeogebraCommonKernelGeosGeoNumeric *self, jdouble x) {
  [self setValueWithDouble:x withBoolean:YES];
}

jdouble OrgGeogebraCommonKernelGeosGeoNumeric_getValue(OrgGeogebraCommonKernelGeosGeoNumeric *self) {
  return self->value_;
}

void OrgGeogebraCommonKernelGeosGeoNumeric_setSliderWidthWithDouble_(OrgGeogebraCommonKernelGeosGeoNumeric *self, jdouble width) {
  if (width > 0 && !JavaLangDouble_isInfiniteWithDouble_(width)) self->sliderWidth_ = width;
}

void OrgGeogebraCommonKernelGeosGeoNumeric_setSliderLocationWithDouble_withDouble_withBoolean_(OrgGeogebraCommonKernelGeosGeoNumeric *self, jdouble x, jdouble y, jboolean force) {
  if (!force && self->sliderFixed_) return;
  self->sliderX_ = x;
  self->sliderY_ = y;
}

jdouble OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(OrgGeogebraCommonKernelGeosGeoNumeric *self) {
  return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->intervalMax_)) getDouble];
}

jdouble OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(OrgGeogebraCommonKernelGeosGeoNumeric *self) {
  return [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->intervalMin_)) getDouble];
}

jdouble OrgGeogebraCommonKernelGeosGeoNumeric_getSliderWidth(OrgGeogebraCommonKernelGeosGeoNumeric *self) {
  return self->sliderWidth_;
}

jboolean OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMaxActive(OrgGeogebraCommonKernelGeosGeoNumeric *self) {
  return self->intervalMaxActive_;
}

jboolean OrgGeogebraCommonKernelGeosGeoNumeric_isIntervalMinActive(OrgGeogebraCommonKernelGeosGeoNumeric *self) {
  return self->intervalMinActive_;
}

jboolean OrgGeogebraCommonKernelGeosGeoNumeric_isSliderFixed(OrgGeogebraCommonKernelGeosGeoNumeric *self) {
  return self->sliderFixed_;
}

void OrgGeogebraCommonKernelGeosGeoNumeric_setSliderFixedWithBoolean_(OrgGeogebraCommonKernelGeosGeoNumeric *self, jboolean isSliderFixed) {
  self->sliderFixed_ = isSliderFixed;
}

jdouble OrgGeogebraCommonKernelGeosGeoNumeric_getRandom(OrgGeogebraCommonKernelGeosGeoNumeric *self) {
  jdouble min = OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self);
  jdouble max = OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self);
  jdouble increment = [self getAnimationStep];
  jint n = 1 + (jint) JavaLangMath_roundWithDouble_((max - min) / increment);
  return OrgGeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(JavaLangMath_floorWithDouble_([((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getRandomNumber] * n) * increment + min);
}

void OrgGeogebraCommonKernelGeosGeoNumeric_resolveMinMax(OrgGeogebraCommonKernelGeosGeoNumeric *self) {
  jdouble oldValue = self->value_;
  if (self->intervalMin_ == nil || self->intervalMax_ == nil) return;
  jboolean okMin = !JavaLangDouble_isNaNWithDouble_(OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self)) && !JavaLangDouble_isInfiniteWithDouble_(OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self));
  jboolean okMax = !JavaLangDouble_isNaNWithDouble_(OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self)) && !JavaLangDouble_isInfiniteWithDouble_(OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self));
  jboolean ok = (OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self) <= OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self));
  OrgGeogebraCommonKernelGeosGeoNumeric_setIntervalMinActiveWithBoolean_(self, ok && okMin);
  OrgGeogebraCommonKernelGeosGeoNumeric_setIntervalMaxActiveWithBoolean_(self, (ok && okMin && okMax) || (OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMin(self) == OrgGeogebraCommonKernelGeosGeoNumeric_getIntervalMax(self) && okMin && okMax));
  if (ok && okMin && okMax) OrgGeogebraCommonKernelGeosGeoNumeric_setValueWithDouble_(self, OrgGeogebraCommonKernelGeosGeoNumeric_isDefined(self) ? self->value_ : 1.0);
  else if (okMin && okMax) OrgGeogebraCommonKernelGeosGeoNumeric_setUndefined(self);
  if (oldValue != self->value_) {
    [self updateCascade];
  }
  else {
    [self update];
  }
}

id<JavaUtilComparator> OrgGeogebraCommonKernelGeosGeoNumeric_getComparator() {
  OrgGeogebraCommonKernelGeosGeoNumeric_initialize();
  if (OrgGeogebraCommonKernelGeosGeoNumeric_comparator_ == nil) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoNumeric_comparator_, nil, new_OrgGeogebraCommonKernelGeosGeoNumeric_$1_init());
  }
  return OrgGeogebraCommonKernelGeosGeoNumeric_comparator_;
}

void OrgGeogebraCommonKernelGeosGeoNumeric_setIntervalMinActiveWithBoolean_(OrgGeogebraCommonKernelGeosGeoNumeric *self, jboolean intervalMinActive) {
  self->intervalMinActive_ = intervalMinActive;
}

void OrgGeogebraCommonKernelGeosGeoNumeric_setIntervalMaxActiveWithBoolean_(OrgGeogebraCommonKernelGeosGeoNumeric *self, jboolean intervalMaxActive) {
  self->intervalMaxActive_ = intervalMaxActive;
}

OrgGeogebraCommonKernelGeosGeoNumeric *OrgGeogebraCommonKernelGeosGeoNumeric_setSliderFromDefaultWithOrgGeogebraCommonKernelGeosGeoNumeric_withBoolean_(OrgGeogebraCommonKernelGeosGeoNumeric *num, jboolean isAngle) {
  OrgGeogebraCommonKernelGeosGeoNumeric_initialize();
  OrgGeogebraCommonKernelGeosGeoNumeric *defaultNum = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(num)) getKernel])) getAlgoDispatcher])) getDefaultNumberWithBoolean:NO];
  OrgGeogebraCommonKernelGeosGeoNumeric *defaultAngleOrNum = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk([num getKernel])) getAlgoDispatcher])) getDefaultNumberWithBoolean:isAngle];
  OrgGeogebraCommonKernelGeosGeoNumeric_setSliderFixedWithBoolean_(num, OrgGeogebraCommonKernelGeosGeoNumeric_isSliderFixed(nil_chk(defaultNum)));
  [num setEuclidianVisibleWithBoolean:YES];
  [num setIntervalMinWithOrgGeogebraCommonKernelArithmeticNumberValue:(OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((OrgGeogebraCommonKernelGeosGeoNumeric *) nil_chk(defaultAngleOrNum)) getIntervalMinObject], [OrgGeogebraCommonKernelGeosGeoNumeric class])];
  [num setIntervalMaxWithOrgGeogebraCommonKernelArithmeticNumberValue:(OrgGeogebraCommonKernelGeosGeoNumeric *) check_class_cast([defaultAngleOrNum getIntervalMaxObject], [OrgGeogebraCommonKernelGeosGeoNumeric class])];
  [num setAnimationStepWithDouble:[defaultAngleOrNum getAnimationStep]];
  [num setAbsoluteScreenLocActiveWithBoolean:YES];
  [num setAnimationTypeWithInt:[defaultNum getAnimationType]];
  OrgGeogebraCommonKernelGeosGeoNumeric_setSliderWidthWithDouble_(num, OrgGeogebraCommonKernelGeosGeoNumeric_getSliderWidth(defaultAngleOrNum));
  [num setRandomWithBoolean:[defaultNum isRandom]];
  [num setLineThicknessWithInt:OrgGeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_THICKNESS];
  OrgGeogebraCommonKernelGeosGeoNumeric_setDrawableWithBoolean_withBoolean_(num, NO, NO);
  [num update];
  return num;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoNumeric)

@implementation OrgGeogebraCommonKernelGeosGeoNumeric_$1

- (jint)compareWithId:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)itemA
               withId:(id<OrgGeogebraCommonKernelGeosGeoNumberValue>)itemB {
  jdouble comp = [((id<OrgGeogebraCommonKernelGeosGeoNumberValue>) nil_chk(itemA)) getDouble] - [((id<OrgGeogebraCommonKernelGeosGeoNumberValue>) nil_chk(itemB)) getDouble];
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(comp)) {
    return [itemA getConstructionIndex] > [itemB getConstructionIndex] ? -1 : 1;
  }
  return comp < 0 ? -1 : +1;
}

- (instancetype)init {
  OrgGeogebraCommonKernelGeosGeoNumeric_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgGeogebraCommonKernelGeosGeoNumeric", "getComparator" };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoNumeric_$1 = { 2, "", "org.geogebra.common.kernel.geos", "GeoNumeric", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Comparator<Lorg/geogebra/common/kernel/geos/GeoNumberValue;>;" };
  return &_OrgGeogebraCommonKernelGeosGeoNumeric_$1;
}

@end

void OrgGeogebraCommonKernelGeosGeoNumeric_$1_init(OrgGeogebraCommonKernelGeosGeoNumeric_$1 *self) {
  NSObject_init(self);
}

OrgGeogebraCommonKernelGeosGeoNumeric_$1 *new_OrgGeogebraCommonKernelGeosGeoNumeric_$1_init() {
  OrgGeogebraCommonKernelGeosGeoNumeric_$1 *self = [OrgGeogebraCommonKernelGeosGeoNumeric_$1 alloc];
  OrgGeogebraCommonKernelGeosGeoNumeric_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoNumeric_$1)
