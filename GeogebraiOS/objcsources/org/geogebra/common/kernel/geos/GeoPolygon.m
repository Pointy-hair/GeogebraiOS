//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/sources/org/geogebra/common/kernel/geos/GeoPolygon.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/TreeSet.h"
#include "org/geogebra/common/awt/GColor.h"
#include "org/geogebra/common/euclidian/EuclidianView.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "org/geogebra/common/kernel/Matrix/CoordSys.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/MatrixTransformable.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/PathMover.h"
#include "org/geogebra/common/kernel/PathMoverGeneric.h"
#include "org/geogebra/common/kernel/PathParameter.h"
#include "org/geogebra/common/kernel/RegionParameters.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "org/geogebra/common/kernel/algos/AlgoJoinPointsSegmentInterface.h"
#include "org/geogebra/common/kernel/algos/AlgoPolygon.h"
#include "org/geogebra/common/kernel/algos/AlgoPolygonRegularND.h"
#include "org/geogebra/common/kernel/algos/AlgoTransformation.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/GetCommand.h"
#include "org/geogebra/common/kernel/algos/PolygonAlgo.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/ChangeableCoordParent.h"
#include "org/geogebra/common/kernel/geos/GeoBoolean.h"
#include "org/geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoPolyLine.h"
#include "org/geogebra/common/kernel/geos/GeoPolygon.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/main/Localization.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/util/MyMath.h"

@interface OrgGeogebraCommonKernelGeosGeoPolygon () {
 @public
  jboolean defined_;
  jboolean createSegments_;
  jboolean notFixedPointsLength_;
  JavaUtilArrayList *segmentsArray_;
  JavaUtilArrayList *pointsArray_;
  JavaLangStringBuilder *sbToString_;
  jboolean asBoundary__;
  jboolean trace_;
  jint convexOrientation_;
  OrgGeogebraCommonKernelMatrixCoords *labelPosition_;
  OrgGeogebraCommonKernelGeosChangeableCoordParent *changeableCoordParent_;
  IOSDoubleArray *tmp3_;
  JavaUtilTreeSet *metas_;
  jboolean reverseNormalForDrawing_;
}

- (void)defaultSegmentLabels;

+ (void)setLabelWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)s
                  withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p;

+ (jint)intersectOxWithDouble:(jdouble)px1
                   withDouble:(jdouble)py1
                   withDouble:(jdouble)px2
                   withDouble:(jdouble)py2;

- (void)updatePathRegion;

- (void)setPointSizeWithInt:(jint)size;

- (void)setPointNotVisibile;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoPolygon, segmentsArray_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoPolygon, pointsArray_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoPolygon, sbToString_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoPolygon, labelPosition_, OrgGeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoPolygon, changeableCoordParent_, OrgGeogebraCommonKernelGeosChangeableCoordParent *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoPolygon, tmp3_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoPolygon, metas_, JavaUtilTreeSet *)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoPolygon_defaultSegmentLabels(OrgGeogebraCommonKernelGeosGeoPolygon *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoPolygon_setLabelWithOrgGeogebraCommonKernelKernelNDGeoSegmentND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> s, id<OrgGeogebraCommonKernelKernelNDGeoPointND> p);

__attribute__((unused)) static id<OrgGeogebraCommonKernelKernelNDGeoPointND> OrgGeogebraCommonKernelGeosGeoPolygon_getPointNDWithInt_(OrgGeogebraCommonKernelGeosGeoPolygon *self, jint i);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoPolygon_setAreaWithDouble_(OrgGeogebraCommonKernelGeosGeoPolygon *self, jdouble area);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoPolygon_updateRegionCSWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelGeosGeoPolygon *self, OrgGeogebraCommonKernelGeosGeoPoint *newp0, OrgGeogebraCommonKernelGeosGeoPoint *newp1, OrgGeogebraCommonKernelGeosGeoPoint *newp2);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoPolygon_updateRegionCS(OrgGeogebraCommonKernelGeosGeoPolygon *self);

__attribute__((unused)) static jint OrgGeogebraCommonKernelGeosGeoPolygon_intersectOxWithDouble_withDouble_withDouble_withDouble_(jdouble px1, jdouble py1, jdouble px2, jdouble py2);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoPolygon_setChangeableCoordParentWithOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoPolygon *self, OrgGeogebraCommonKernelGeosGeoNumeric *number, OrgGeogebraCommonKernelGeosGeoElement *direction);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoPolygon_updatePathRegion(OrgGeogebraCommonKernelGeosGeoPolygon *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoPolygon_setPointSizeWithInt_(OrgGeogebraCommonKernelGeosGeoPolygon *self, jint size);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoPolygon_setPointNotVisibile(OrgGeogebraCommonKernelGeosGeoPolygon *self);

@implementation OrgGeogebraCommonKernelGeosGeoPolygon

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
         withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, points);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
         withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                  withOrgGeogebraCommonKernelMatrixCoordSys:(OrgGeogebraCommonKernelMatrixCoordSys *)cs
                                                withBoolean:(jboolean)createSegments {
  OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelMatrixCoordSys_withBoolean_(self, c, points, cs, createSegments);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                                withBoolean:(jboolean)isIntersection {
  OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, cons, isIntersection);
  return self;
}

- (void)setCoordSysWithOrgGeogebraCommonKernelMatrixCoordSys:(OrgGeogebraCommonKernelMatrixCoordSys *)cs {
}

- (void)setCoordSysWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)poly {
}

- (void)setCoordSysAndPoints3DWithOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)p {
}

- (void)setNotFixedPointsLengthWithBoolean:(jboolean)flag {
  notFixedPointsLength_ = flag;
}

- (NSString *)getTypeString {
  if (notFixedPointsLength_ || points_ == nil) return @"Polygon";
  switch ([self getPointsLength]) {
    case 3:
    return @"Triangle";
    case 4:
    return @"Quadrilateral";
    case 5:
    return @"Pentagon";
    case 6:
    return @"Hexagon";
    default:
    return @"Polygon";
  }
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_POLYGON();
}

- (void)setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  [self setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points withOrgGeogebraCommonKernelMatrixCoordSys:nil withBoolean:YES];
}

- (void)setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                          withOrgGeogebraCommonKernelMatrixCoordSys:(OrgGeogebraCommonKernelMatrixCoordSys *)cs
                                                        withBoolean:(jboolean)createSegments {
  OrgGeogebraCommonKernelGeosGeoPolygon_set_points_(self, points);
  [self setCoordSysWithOrgGeogebraCommonKernelMatrixCoordSys:cs];
  if (createSegments) [self updateSegments];
}

- (jint)getPointsLength {
  if ([self getPoints] == nil) return 0;
  return ((IOSObjectArray *) nil_chk([self getPoints]))->size_;
}

- (jdouble)getPointXWithInt:(jint)i {
  return ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i]))->inhomX_;
}

- (jdouble)getPointYWithInt:(jint)i {
  return ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i]))->inhomY_;
}

- (void)initLabelsWithNSStringArray:(IOSObjectArray *)labels {
  if ([((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive]) return;
  initLabelsCalled_ = YES;
  if (labels == nil || labels->size_ == 0) {
    [self setLabelWithNSString:nil];
    if (segments_ != nil) {
      OrgGeogebraCommonKernelGeosGeoPolygon_defaultSegmentLabels(self);
    }
    return;
  }
  [self setLabelWithNSString:IOSObjectArray_Get(nil_chk(labels), 0)];
  if (points_ != nil && segments_ != nil) {
    if (labels->size_ == 1 + segments_->size_ + [self getPointsLength] - 2) {
      jint i = 1;
      for (jint k = 0; k < segments_->size_; k++, i++) {
        [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, k))) setLabelWithNSString:IOSObjectArray_Get(labels, i)];
      }
      for (jint k = 2; k < [self getPointsLength]; k++, i++) {
        [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, k))) setLabelWithNSString:IOSObjectArray_Get(labels, i)];
      }
    }
    else if (labels->size_ == 1 + segments_->size_) {
      jint i = 1;
      for (jint k = 0; k < segments_->size_; k++, i++) {
        [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, k))) setLabelWithNSString:IOSObjectArray_Get(labels, i)];
      }
    }
    else {
      OrgGeogebraCommonKernelGeosGeoPolygon_defaultSegmentLabels(self);
    }
  }
}

- (jboolean)wasInitLabelsCalled {
  return initLabelsCalled_;
}

- (void)defaultSegmentLabels {
  OrgGeogebraCommonKernelGeosGeoPolygon_defaultSegmentLabels(self);
}

+ (void)setLabelWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)s
                  withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  OrgGeogebraCommonKernelGeosGeoPolygon_setLabelWithOrgGeogebraCommonKernelKernelNDGeoSegmentND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(s, p);
}

- (void)updateSegments {
  if (points_ == nil) return;
  [self setDefined];
  jboolean euclidianVisible;
  if (segmentsArray_ == nil) {
    OrgGeogebraCommonKernelGeosGeoPolygon_setAndConsume_segmentsArray_(self, new_JavaUtilArrayList_init());
  }
  if ([((JavaUtilArrayList *) nil_chk(segmentsArray_)) size] < 1) {
    euclidianVisible = [self isEuclidianVisible];
  }
  else {
    euclidianVisible = [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk([segmentsArray_ getWithInt:0])) isEuclidianVisible];
  }
  OrgGeogebraCommonKernelGeosGeoPolygon_setAndConsume_segments_(self, [IOSObjectArray newArrayWithLength:[self getPointsLength] type:OrgGeogebraCommonKernelKernelNDGeoSegmentND_class_()]);
  for (jint i = 0; i < [segmentsArray_ size] && i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) {
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> startPoint = IOSObjectArray_Get(nil_chk(points_), i);
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> endPoint = IOSObjectArray_Get(points_, (i + 1) % [self getPointsLength]);
    id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> segment = [segmentsArray_ getWithInt:i];
    id<OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegmentInterface> algo = (id<OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegmentInterface>) check_protocol_cast([((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) getParentAlgorithm], @protocol(OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegmentInterface));
    [((id<OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegmentInterface>) nil_chk(algo)) modifyInputPointsWithOrgGeogebraCommonKernelKernelNDGeoPointND:startPoint withOrgGeogebraCommonKernelKernelNDGeoPointND:endPoint];
    [algo compute];
    IOSObjectArray_Set(segments_, i, segment);
    [segment setEuclidianVisibleWithBoolean:euclidianVisible];
  }
  for (jint i = [segmentsArray_ size]; i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) {
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> startPoint = IOSObjectArray_Get(points_, i);
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> endPoint = IOSObjectArray_Get(points_, (i + 1) % [self getPointsLength]);
    id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> segment = [self createSegmentWithOrgGeogebraCommonKernelKernelNDGeoPointND:startPoint withOrgGeogebraCommonKernelKernelNDGeoPointND:endPoint withBoolean:euclidianVisible];
    [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) getParentAlgorithm])) setProtectedInputWithBoolean:YES];
    [segmentsArray_ addWithId:segment];
    IOSObjectArray_Set(segments_, i, segment);
  }
  for (jint i = points_->size_; i < [segmentsArray_ size]; i++) {
    [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk([segmentsArray_ getWithInt:i])) setUndefined];
  }
}

- (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)createSegmentWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)startPoint
                                                                withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)endPoint
                                                                                                  withBoolean:(jboolean)euclidianVisible {
  OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegment *algoSegment = [new_OrgGeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPolygon_(cons_, (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(startPoint, [OrgGeogebraCommonKernelGeosGeoPoint class]), (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(endPoint, [OrgGeogebraCommonKernelGeosGeoPoint class]), self) autorelease];
  [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithOrgGeogebraCommonKernelAlgosConstructionElement:algoSegment];
  return [self createSegmentWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:[algoSegment getSegment] withBoolean:euclidianVisible];
}

- (id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)createSegmentWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>)segment
                                                                                                    withBoolean:(jboolean)euclidianVisible {
  [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) setObjColorWithOrgGeogebraCommonAwtGColor:[self getObjectColor]];
  [segment setLineThicknessWithInt:[self getLineThickness]];
  [segment setLineTypeWithInt:[self getLineType]];
  [segment setEuclidianVisibleWithBoolean:euclidianVisible];
  if (condShowObject_ != nil) {
    @try {
      [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(segment, [OrgGeogebraCommonKernelGeosGeoElement class])) setShowObjectConditionWithOrgGeogebraCommonKernelGeosGeoBoolean:[self getShowObjectCondition]];
    }
    @catch (JavaLangException *e) {
    }
  }
  return segment;
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [self getArea]) autorelease];
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copyInternalWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1 {
  OrgGeogebraCommonKernelGeosGeoPolygon *ret = [self newGeoPolygonWithOrgGeogebraCommonKernelConstruction:cons1];
  [self copyInternalWithOrgGeogebraCommonKernelConstruction:cons1 withOrgGeogebraCommonKernelGeosGeoPolygon:ret];
  return ret;
}

- (void)copyInternalWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1
                  withOrgGeogebraCommonKernelGeosGeoPolygon:(OrgGeogebraCommonKernelGeosGeoPolygon *)ret {
  [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(ret)) setPoints2DWithOrgGeogebraCommonKernelGeosGeoPointArray:OrgGeogebraCommonKernelGeosGeoElement_copyPointsWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons1, [self getPoints])];
  [ret setWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

- (OrgGeogebraCommonKernelGeosGeoPolygon *)newGeoPolygonWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons1 {
  return [new_OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, nil) autorelease];
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  OrgGeogebraCommonKernelGeosGeoPolygon *poly = (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPolygon class]);
  area_ = ((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly))->area_;
  [self setReverseNormalForDrawingWithBoolean:[poly getReverseNormalForDrawing]];
  if (!notFixedPointsLength_) {
    notFixedPointsLength_ = poly->notFixedPointsLength_;
  }
  if ([poly getPoints] == nil) {
    [self setUndefined];
    return;
  }
  jint polyLength = ((IOSObjectArray *) nil_chk([poly getPoints]))->size_;
  [self setPointsLengthWithInt:polyLength withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:nil];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([self getPoints]))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) setWithOrgGeogebraCommonKernelGeosGeoElement:[((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([poly getPointWithInt:i])) toGeoElement]];
  }
  [self setCoordSysAndPoints3DWithOrgGeogebraCommonKernelGeosGeoPolygon:poly];
  [self updateSegments];
  defined_ = poly->defined_;
  if ([poly hasChangeableCoordParentNumbers]) OrgGeogebraCommonKernelGeosGeoPolygon_setChangeableCoordParentWithOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoElement_(self, [((OrgGeogebraCommonKernelGeosChangeableCoordParent *) nil_chk(poly->changeableCoordParent_)) getNumber], [poly->changeableCoordParent_ getDirector]);
  OrgGeogebraCommonKernelGeosGeoPolygon_updateRegionCS(self);
}

- (void)setPointsAndSegmentsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)geos {
  [self setPointsLengthWithInt:((IOSObjectArray *) nil_chk(geos))->size_ withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:geos];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([self getPoints]))->size_; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) setWithOrgGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(geos, i)];
  }
  [self updateSegments];
}

- (void)setPointsAndSegmentsLengthWithInt:(jint)polyLength {
  [self setPointsLengthWithInt:polyLength withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:nil];
  [self updateSegments];
}

- (void)setPointsLengthWithInt:(jint)polyLength
withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)template_ {
  if (pointsArray_ == nil) {
    OrgGeogebraCommonKernelGeosGeoPolygon_setAndConsume_pointsArray_(self, new_JavaUtilArrayList_init());
  }
  for (jint i = [((JavaUtilArrayList *) nil_chk(pointsArray_)) size]; i < polyLength; i++) {
    if (template_ != nil && template_->size_ > i && [IOSObjectArray_Get(template_, i) isKindOfClass:[OrgGeogebraCommonKernelGeosGeoPoint class]]) {
      [pointsArray_ addWithId:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(template_, i), [OrgGeogebraCommonKernelGeosGeoPoint class])];
    }
    else {
      [pointsArray_ addWithId:[new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease]];
    }
  }
  for (jint i = polyLength; i < [pointsArray_ size]; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([pointsArray_ getWithInt:i])) setUndefined];
  }
  if ([self getPoints] == nil || ((IOSObjectArray *) nil_chk([self getPoints]))->size_ != polyLength) {
    IOSObjectArray *tempPoints = [IOSObjectArray arrayWithLength:polyLength type:OrgGeogebraCommonKernelGeosGeoPoint_class_()];
    for (jint i = 0; i < polyLength; i++) {
      IOSObjectArray_Set(tempPoints, i, [pointsArray_ getWithInt:i]);
    }
    [self setPoints2DWithOrgGeogebraCommonKernelGeosGeoPointArray:tempPoints];
  }
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getPointWithInt:(jint)i {
  return (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(points_), i), [OrgGeogebraCommonKernelGeosGeoPoint class]);
}

- (IOSObjectArray *)getPoints {
  return points_;
}

- (void)setPoints2DWithOrgGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points {
  OrgGeogebraCommonKernelGeosGeoPolygon_set_points_(self, points);
}

- (IOSObjectArray *)getPointsND {
  return points_;
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getPointNDWithInt:(jint)i {
  return OrgGeogebraCommonKernelGeosGeoPolygon_getPointNDWithInt_(self, i);
}

- (IOSObjectArray *)getSegments {
  return segments_;
}

- (void)setSegmentsWithOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray:(IOSObjectArray *)segments {
  OrgGeogebraCommonKernelGeosGeoPolygon_set_segments_(self, segments);
}

- (jboolean)isFillable {
  return YES;
}

- (jboolean)isInverseFillable {
  return [self isFillable];
}

- (void)setAreaWithDouble:(jdouble)area {
  OrgGeogebraCommonKernelGeosGeoPolygon_setAreaWithDouble_(self, area);
}

- (jdouble)getArea {
  if ([self isDefined]) {
    return JavaLangMath_absWithDouble_(area_);
  }
  return JavaLangDouble_NaN;
}

- (jdouble)getMeasure {
  return [self getArea];
}

- (id<OrgGeogebraCommonKernelPath>)getBoundary {
  jboolean suppress = [((OrgGeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
  [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([self getConstruction])) getKernel])) setSilentModeWithBoolean:YES];
  IOSObjectArray *pointsForPolyLine = [IOSObjectArray arrayWithLength:[self getPointsLength] + 1 type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(points_, 0, pointsForPolyLine, 0, [self getPointsLength]);
  IOSObjectArray_Set(pointsForPolyLine, [self getPointsLength], IOSObjectArray_Get(pointsForPolyLine, 0));
  OrgGeogebraCommonKernelGeosGeoPolyLine *pl = [new_OrgGeogebraCommonKernelGeosGeoPolyLine_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_([self getConstruction], pointsForPolyLine) autorelease];
  [((OrgGeogebraCommonKernelKernel *) nil_chk([((OrgGeogebraCommonKernelConstruction *) nil_chk([self getConstruction])) getKernel])) setSilentModeWithBoolean:NO];
  [cons_ setSuppressLabelCreationWithBoolean:suppress];
  return pl;
}

- (jdouble)getDirection {
  if (defined_) {
    return OrgGeogebraCommonUtilMyMath_sgnWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, area_);
  }
  return JavaLangDouble_NaN;
}

- (jdouble)getAreaWithSign {
  if (defined_) {
    return area_;
  }
  return JavaLangDouble_NaN;
}

- (jboolean)isDefined {
  return defined_;
}

- (void)setDefined {
  defined_ = YES;
}

- (void)setUndefined {
  defined_ = NO;
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)hasLineOpacity {
  return YES;
}

- (void)setLineOpacityWithInt:(jint)lineOpacity {
  [self setLineOpacityWithInt:lineOpacity withBoolean:YES];
}

- (void)setLineOpacityWithInt:(jint)lineOpacity
                  withBoolean:(jboolean)updateSegments {
  [super setLineOpacityWithInt:lineOpacity];
  if (updateSegments && segments_ != nil) {
    for (jint i = 0; i < segments_->size_; i++) {
      [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) setLineOpacityWithInt:lineOpacity];
      [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) updateVisualStyle];
    }
  }
}

- (jboolean)hasSameAreaWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolygon]) {
    return OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([self getArea], [((OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPolygon class])) getArea]);
  }
  return NO;
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoElement3D]) {
    return [geo isEqualWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
  if ([geo isGeoPolygon]) {
    OrgGeogebraCommonKernelGeosGeoPolygon *g = (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPolygon class]);
    jint gLength = [g getPointsLength];
    if (gLength == [self getPointsLength]) {
      OrgGeogebraCommonKernelGeosGeoPoint *firstPoint = [self getPointWithInt:0];
      jboolean fPointFound = NO;
      jint iFirstPoint = 0;
      while ((!fPointFound) && (iFirstPoint < gLength)) {
        if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(firstPoint)) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:[g getPointWithInt:iFirstPoint]]) {
          fPointFound = YES;
        }
        else {
          iFirstPoint++;
        }
      }
      if (fPointFound) {
        jboolean sPointFound = NO;
        jint step = 1;
        if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:1])) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:[g getPointWithInt:(iFirstPoint + step) % gLength]]) {
          sPointFound = YES;
        }
        else {
          step = -1;
          jint j = iFirstPoint + step;
          if (j < 0) j = gLength - 1;
          if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:1])) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:[g getPointWithInt:j]]) {
            sPointFound = YES;
          }
        }
        if (sPointFound) {
          jint i = 2;
          jint j = iFirstPoint + step + step;
          if (j < 0) j = j + gLength;
          j = j % gLength;
          jboolean pointOK = YES;
          while ((pointOK) && (i < gLength)) {
            pointOK = ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) isEqualWithOrgGeogebraCommonKernelGeosGeoElement:[g getPointWithInt:j]]);
            if (pointOK) {
              j = j + step;
              if (j < 0) j = gLength - 1;
              j = j % gLength;
              i++;
            }
            return pointOK;
          }
        }
      }
    }
  }
  return NO;
}

- (void)setEuclidianVisibleWithBoolean:(jboolean)visible {
  [self setEuclidianVisibleWithBoolean:visible withBoolean:YES];
}

- (void)setEuclidianVisibleWithBoolean:(jboolean)visible
                           withBoolean:(jboolean)updateSegments {
  [super setEuclidianVisibleWithBoolean:visible];
  if (updateSegments && segments_ != nil) {
    for (jint i = 0; i < segments_->size_; i++) {
      [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) setEuclidianVisibleWithBoolean:visible];
      [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) updateVisualStyle];
    }
  }
}

- (void)setObjColorWithOrgGeogebraCommonAwtGColor:(OrgGeogebraCommonAwtGColor *)color {
  [super setObjColorWithOrgGeogebraCommonAwtGColor:color];
  if (segments_ != nil && createSegments_) {
    for (jint i = 0; i < segments_->size_; i++) {
      [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) setObjColorWithOrgGeogebraCommonAwtGColor:color];
      [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) updateVisualStyle];
    }
  }
}

- (void)setLineTypeWithInt:(jint)type {
  [self setLineTypeWithInt:type withBoolean:YES];
}

- (void)setLineTypeWithInt:(jint)type
               withBoolean:(jboolean)updateSegments {
  [super setLineTypeWithInt:type];
  if (updateSegments) if (segments_ != nil) {
    for (jint i = 0; i < segments_->size_; i++) {
      [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) setLineTypeWithInt:type];
      [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) updateVisualStyle];
    }
  }
}

- (void)setLineTypeHiddenWithInt:(jint)type {
  [self setLineTypeHiddenWithInt:type withBoolean:YES];
}

- (void)setLineTypeHiddenWithInt:(jint)type
                     withBoolean:(jboolean)updateSegments {
  [super setLineTypeHiddenWithInt:type];
  if (updateSegments) if (segments_ != nil) {
    for (jint i = 0; i < segments_->size_; i++) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(segments_, i), [OrgGeogebraCommonKernelGeosGeoElement class])))) setLineTypeHiddenWithInt:type];
      [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) updateVisualStyle];
    }
  }
}

- (void)setLineThicknessWithInt:(jint)th {
  [self setLineThicknessWithInt:th withBoolean:YES];
}

- (void)setLineThicknessWithInt:(jint)th
                    withBoolean:(jboolean)updateSegments {
  [super setLineThicknessWithInt:th];
  if (updateSegments) if (segments_ != nil) {
    for (jint i = 0; i < segments_->size_; i++) {
      [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) setLineThicknessWithInt:th];
      [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) updateVisualStyle];
    }
  }
}

- (void)setLineThicknessOrVisibilityWithInt:(jint)th {
  [super setLineThicknessWithInt:th];
  if (segments_ != nil) {
    for (jint i = 0; i < segments_->size_; i++) {
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(segments_, i), [OrgGeogebraCommonKernelGeosGeoElement class])))) setLineThicknessOrVisibilityWithInt:th];
      [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) updateVisualStyle];
    }
  }
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  [sbToString_ appendWithNSString:label_];
  [sbToString_ appendWithNSString:@" = "];
  [sbToString_ appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[self getArea] withOrgGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString_ description];
}

- (NSString *)toStringMinimalWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  [sbToString_ appendWithNSString:[self regrFormatWithDouble:[self getArea]]];
  return [sbToString_ description];
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[self getArea] withOrgGeogebraCommonKernelStringTemplate:tpl];
}

- (OrgGeogebraCommonKernelArithmeticMyDouble *)getNumber {
  return [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, [self getArea]) autorelease];
}

- (jdouble)getDouble {
  return [self getArea];
}

- (jboolean)showInEuclidianView {
  return defined_;
}

- (jboolean)isNumberValue {
  return YES;
}

- (jboolean)isGeoPolygon {
  return YES;
}

- (jboolean)isPath {
  return YES;
}

- (id<OrgGeogebraCommonKernelPathMover>)createPathMover {
  return [new_OrgGeogebraCommonKernelPathMoverGeneric_initWithOrgGeogebraCommonKernelPath_(self) autorelease];
}

- (jdouble)getMaxParameter {
  return [self getPointsLength];
}

- (jdouble)getMinParameter {
  return 0;
}

- (jboolean)isClosedPath {
  return YES;
}

- (jboolean)isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI
                                                       withDouble:(jdouble)eps {
  OrgGeogebraCommonKernelGeosGeoPoint *P = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(PI, [OrgGeogebraCommonKernelGeosGeoPoint class]);
  if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getPath] == self) return YES;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(segments_))->size_; i++) {
    if ([((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:P withDouble:eps]) return YES;
  }
  return NO;
}

- (jboolean)isOnPathWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords
                                                 withDouble:(jdouble)eps {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(segments_))->size_; i++) {
    if ([((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) isOnPathWithOrgGeogebraCommonKernelMatrixCoords:coords withDouble:eps]) return YES;
  }
  return NO;
}

- (void)pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI]) {
    [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI];
    return;
  }
  OrgGeogebraCommonKernelPathParameter *pp = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) getPathParameter];
  ((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ = fmod(pp->t_, ((IOSObjectArray *) nil_chk(segments_))->size_);
  if (pp->t_ < 0) pp->t_ += segments_->size_;
  jint index = J2ObjCFpToInt(JavaLangMath_floorWithDouble_(pp->t_));
  id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> seg = IOSObjectArray_Get(segments_, index);
  jdouble segParameter = pp->t_ - index;
  [PI setCoords2DWithDouble:[((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) getPointXWithDouble:segParameter] withDouble:[seg getPointYWithDouble:segParameter] withDouble:1];
}

- (void)pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) getCoordsInD2];
  jdouble qx = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] / [coords getZ];
  jdouble qy = [coords getY] / [coords getZ];
  jdouble minDist = JavaLangDouble_POSITIVE_INFINITY;
  jdouble resx = 0, resy = 0, resz = 0, param = 0;
  OrgGeogebraCommonKernelPathParameter *pp = [PI getPathParameter];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(segments_))->size_; i++) {
    [PI setCoords2DWithDouble:qx withDouble:qy withDouble:1];
    [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments_, i))) pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI];
    coords = [PI getCoordsInD2];
    jdouble x = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] / [coords getZ] - qx;
    jdouble y = [coords getY] / [coords getZ] - qy;
    jdouble dist = x * x + y * y;
    if (dist < minDist) {
      minDist = dist;
      resx = [coords getX];
      resy = [coords getY];
      resz = [coords getZ];
      param = i + ((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_;
    }
  }
  [PI setCoords2DWithDouble:resx withDouble:resy withDouble:resz];
  ((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ = param;
}

- (jboolean)isRegion {
  return YES;
}

- (jboolean)isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI
                                                        withBoolean:(jboolean)update {
  OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) getCoordsInD2];
  return [self isInRegionWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] / [coords getZ] withDouble:[coords getY] / [coords getZ]];
}

- (jboolean)isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI {
  return [self isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:PI withBoolean:NO];
}

- (jboolean)isInRegionWithDouble:(jdouble)x0
                      withDouble:(jdouble)y0 {
  jdouble x1, y1, x2, y2;
  jint numPoints = [self getPointsLength];
  x1 = [self getPointXWithInt:numPoints - 1] - x0;
  y1 = [self getPointYWithInt:numPoints - 1] - y0;
  jboolean ret = NO;
  for (jint i = 0; i < numPoints; i++) {
    x2 = [self getPointXWithInt:i] - x0;
    y2 = [self getPointYWithInt:i] - y0;
    jint inter = OrgGeogebraCommonKernelGeosGeoPolygon_intersectOxWithDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2);
    if (inter == 2) return YES;
    ret = (ret ^ (inter == 1));
    x1 = x2;
    y1 = y2;
  }
  return ret;
}

- (void)regionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:P]) {
    [self pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  OrgGeogebraCommonKernelRegionParameters *rp = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getRegionParameters];
  if ([((OrgGeogebraCommonKernelRegionParameters *) nil_chk(rp)) isOnPath]) [self pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
  else {
    jdouble xu = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p1_))->inhomX_ - ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p0_))->inhomX_;
    jdouble yu = p1_->inhomY_ - p0_->inhomY_;
    jdouble xv = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p2_))->inhomX_ - p0_->inhomX_;
    jdouble yv = p2_->inhomY_ - p0_->inhomY_;
    [self setRegionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P withDouble:p0_->inhomX_ + [rp getT1] * xu + [rp getT2] * xv withDouble:p0_->inhomY_ + [rp getT1] * yu + [rp getT2] * yv];
    if (![self isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:P withBoolean:NO]) {
      [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
      [rp setIsOnPathWithBoolean:YES];
    }
  }
}

- (void)setRegionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI
                                                           withDouble:(jdouble)x
                                                           withDouble:(jdouble)y {
  OrgGeogebraCommonKernelGeosGeoPoint *P = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(PI, [OrgGeogebraCommonKernelGeosGeoPoint class]);
  ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P))->x_ = x;
  P->y_ = y;
  P->z_ = 1;
}

- (void)pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) updateCoords2D];
  OrgGeogebraCommonKernelRegionParameters *rp = [P getRegionParameters];
  if (![self isInRegionWithDouble:[P getX2D] withDouble:[P getY2D]]) {
    [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    [((OrgGeogebraCommonKernelRegionParameters *) nil_chk(rp)) setIsOnPathWithBoolean:YES];
  }
  else {
    if (numCS_ != 3) {
      [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
      [((OrgGeogebraCommonKernelRegionParameters *) nil_chk(rp)) setIsOnPathWithBoolean:YES];
    }
    else {
      [((OrgGeogebraCommonKernelRegionParameters *) nil_chk(rp)) setIsOnPathWithBoolean:NO];
      jdouble xu = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p1_))->inhomX_ - ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p0_))->inhomX_;
      jdouble yu = p1_->inhomY_ - p0_->inhomY_;
      jdouble xv = ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p2_))->inhomX_ - p0_->inhomX_;
      jdouble yv = p2_->inhomY_ - p0_->inhomY_;
      jdouble x = [P getX2D] - p0_->inhomX_;
      jdouble y = [P getY2D] - p0_->inhomY_;
      [rp setT1WithDouble:(xv * y - x * yv) / (xv * yu - xu * yv)];
      [rp setT2WithDouble:(x * yu - xu * y) / (xv * yu - xu * yv)];
      [P updateCoordsFrom2DWithBoolean:NO withOrgGeogebraCommonKernelMatrixCoordSys:nil];
    }
  }
}

- (void)updateRegionCSWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)newp0
                      withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)newp1
                      withOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)newp2 {
  OrgGeogebraCommonKernelGeosGeoPolygon_updateRegionCSWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, newp0, newp1, newp2);
}

- (void)updateRegionCSWithFirstPoints {
  OrgGeogebraCommonKernelGeosGeoPolygon_updateRegionCSWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self, [self getPointWithInt:0], [self getPointWithInt:1], [self getPointWithInt:2]);
}

- (void)updateRegionCS {
  OrgGeogebraCommonKernelGeosGeoPolygon_updateRegionCS(self);
}

- (void)setRoleWithBoolean:(jboolean)isAsBoundary {
  self->asBoundary__ = isAsBoundary;
}

- (jboolean)asBoundary {
  return asBoundary__;
}

+ (jint)intersectOxWithDouble:(jdouble)px1
                   withDouble:(jdouble)py1
                   withDouble:(jdouble)px2
                   withDouble:(jdouble)py2 {
  return OrgGeogebraCommonKernelGeosGeoPolygon_intersectOxWithDouble_withDouble_withDouble_withDouble_(px1, py1, px2, py2);
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [self getLineStyleXMLWithJavaLangStringBuilder:sb];
  [self getXMLvisualTagsWithJavaLangStringBuilder:sb];
  [self getXMLanimationTagsWithJavaLangStringBuilder:sb];
  [self getXMLfixedTagWithJavaLangStringBuilder:sb];
  [self getAuxiliaryXMLWithJavaLangStringBuilder:sb];
  [self getBreakpointXMLWithJavaLangStringBuilder:sb];
  [self getScriptTagsWithJavaLangStringBuilder:sb];
}

- (jint)getMinimumLineThickness {
  return 0;
}

- (jboolean)isTraceable {
  return YES;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (jboolean)getTrace {
  return trace_;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getPoint3DWithInt:(jint)i {
  return [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) getInhomCoordsInD3];
}

- (jboolean)isPartOfClosedSurface {
  return NO;
}

- (jboolean)isConvex {
  JavaUtilArrayList *xList = [new_JavaUtilArrayList_init() autorelease];
  JavaUtilArrayList *yList = [new_JavaUtilArrayList_init() autorelease];
  jdouble x0 = [self getPointXWithInt:0];
  jdouble y0 = [self getPointYWithInt:0];
  [xList addWithId:JavaLangDouble_valueOfWithDouble_(x0)];
  [yList addWithId:JavaLangDouble_valueOfWithDouble_(y0)];
  for (jint i = 1; i < [self getPointsLength]; i++) {
    jdouble x1 = [self getPointXWithInt:i];
    jdouble y1 = [self getPointYWithInt:i];
    if (!OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(x0, x1) || !OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(y0, y1)) {
      [xList addWithId:JavaLangDouble_valueOfWithDouble_(x1)];
      [yList addWithId:JavaLangDouble_valueOfWithDouble_(y1)];
      x0 = x1;
      y0 = y1;
    }
  }
  jint n = [xList size];
  if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((JavaLangDouble *) nil_chk([xList getWithInt:0])) doubleValue], [((JavaLangDouble *) nil_chk([xList getWithInt:n - 1])) doubleValue]) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((JavaLangDouble *) nil_chk([yList getWithInt:0])) doubleValue], [((JavaLangDouble *) nil_chk([yList getWithInt:n - 1])) doubleValue])) {
    [xList removeWithInt:n - 1];
    [yList removeWithInt:n - 1];
    n--;
  }
  jboolean answer = YES;
  jboolean hasAngle360 = NO;
  jdouble x1 = [((JavaLangDouble *) nil_chk([xList getWithInt:n - 1])) doubleValue];
  jdouble y1 = [((JavaLangDouble *) nil_chk([yList getWithInt:n - 1])) doubleValue];
  jdouble dx1 = x1 - [((JavaLangDouble *) nil_chk([xList getWithInt:n - 2])) doubleValue];
  jdouble dy1 = y1 - [((JavaLangDouble *) nil_chk([yList getWithInt:n - 2])) doubleValue];
  jdouble x2 = [((JavaLangDouble *) nil_chk([xList getWithInt:0])) doubleValue];
  jdouble y2 = [((JavaLangDouble *) nil_chk([yList getWithInt:0])) doubleValue];
  jdouble dx2 = x2 - x1;
  jdouble dy2 = y2 - y1;
  jint orientation = OrgGeogebraCommonKernelKernel_compareWithDouble_withDouble_(dy1 * dx2, dx1 * dy2);
  if (orientation == 0) {
    if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(0, dx1 * dx2 + dy1 * dy2)) {
      answer = NO;
    }
  }
  jint i = 1;
  while ((answer == YES) && (i < n)) {
    dx1 = dx2;
    dy1 = dy2;
    x1 = x2;
    y1 = y2;
    x2 = [((JavaLangDouble *) nil_chk([xList getWithInt:i])) doubleValue];
    y2 = [((JavaLangDouble *) nil_chk([yList getWithInt:i])) doubleValue];
    dx2 = x2 - x1;
    dy2 = y2 - y1;
    jint orientation2 = OrgGeogebraCommonKernelKernel_compareWithDouble_withDouble_(dy1 * dx2, dx1 * dy2);
    if (!hasAngle360 && orientation2 == 0) {
      if (OrgGeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(0, dx1 * dx2 + dy1 * dy2)) {
        answer = NO;
      }
    }
    if (answer) {
      if (orientation == 0) {
        orientation = orientation2;
      }
      else {
        if (orientation2 != 0 && orientation2 != orientation) {
          answer = NO;
        }
      }
    }
    i++;
  }
  if (answer) {
    convexOrientation_ = orientation;
  }
  return answer;
}

- (jboolean)isConvexInverseDirection {
  return (convexOrientation_ > 0);
}

- (jboolean)hasDrawable3D {
  return YES;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getLabelPosition {
  jdouble x = 0;
  jdouble y = 0;
  jdouble z = 0;
  for (jint i = 0; i < [self getPointsLength]; i++) {
    OrgGeogebraCommonKernelMatrixCoords *coords = [self getPoint3DWithInt:i];
    x += [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX];
    y += [coords getY];
    z += [coords getZ];
  }
  if (labelPosition_ == nil) {
    OrgGeogebraCommonKernelGeosGeoPolygon_setAndConsume_labelPosition_(self, new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(x / [self getPointsLength], y / [self getPointsLength], z / [self getPointsLength], 1));
  }
  else {
    [labelPosition_ setXWithDouble:x / [self getPointsLength]];
    [labelPosition_ setYWithDouble:y / [self getPointsLength]];
    [labelPosition_ setZWithDouble:z / [self getPointsLength]];
  }
  return labelPosition_;
}

- (OrgGeogebraCommonKernelMatrixCoordSys *)getCoordSys {
  return OrgGeogebraCommonKernelMatrixCoordSys_get_Identity3D_();
}

- (OrgGeogebraCommonKernelMatrixCoords *)getPointWithDouble:(jdouble)x2d
                                                 withDouble:(jdouble)y2d {
  return [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getPointWithDouble:x2d withDouble:y2d];
}

- (IOSObjectArray *)getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords {
  return [((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:coords];
}

- (IOSObjectArray *)getProjectionWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)oldCoords
                                 withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)willingCoords
                                 withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)willingDirection {
  IOSObjectArray *result = [IOSObjectArray arrayWithObjects:(id[]){ [new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease], [new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease] } count:2 type:OrgGeogebraCommonKernelMatrixCoords_class_()];
  [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(willingCoords)) projectPlaneThruVIfPossibleWithOrgGeogebraCommonKernelMatrixCoordMatrix:[((OrgGeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getMatrixOrthonormal] withOrgGeogebraCommonKernelMatrixCoords:oldCoords withOrgGeogebraCommonKernelMatrixCoords:willingDirection withOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 0) withOrgGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 1)];
  return result;
}

- (void)setChangeableCoordParentWithOrgGeogebraCommonKernelGeosGeoNumeric:(OrgGeogebraCommonKernelGeosGeoNumeric *)number
                                withOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)direction {
  OrgGeogebraCommonKernelGeosGeoPolygon_setChangeableCoordParentWithOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoElement_(self, number, direction);
}

- (jboolean)hasChangeableCoordParentNumbers {
  return (changeableCoordParent_ != nil);
}

- (void)recordChangeableCoordParentNumbers {
  [((OrgGeogebraCommonKernelGeosChangeableCoordParent *) nil_chk(changeableCoordParent_)) record];
}

- (jboolean)moveFromChangeableCoordParentNumbersWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)rwTransVec
                                                withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)endPosition
                                                withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)viewDirection
                                                                  withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                                                                  withJavaUtilArrayList:(JavaUtilArrayList *)tempMoveObjectList
                                            withOrgGeogebraCommonEuclidianEuclidianView:(OrgGeogebraCommonEuclidianEuclidianView *)view {
  if (changeableCoordParent_ == nil) {
    return NO;
  }
  return [((OrgGeogebraCommonKernelGeosChangeableCoordParent *) nil_chk(changeableCoordParent_)) moveWithOrgGeogebraCommonKernelMatrixCoords:rwTransVec withOrgGeogebraCommonKernelMatrixCoords:endPosition withOrgGeogebraCommonKernelMatrixCoords:viewDirection withJavaUtilArrayList:updateGeos withJavaUtilArrayList:tempMoveObjectList withOrgGeogebraCommonEuclidianEuclidianView:view];
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r {
  for (jint i = 0; i < [self getPointsLength]; i++) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:r];
  OrgGeogebraCommonKernelGeosGeoPolygon_updatePathRegion(self);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)S {
  OrgGeogebraCommonKernelMatrixCoords *Scoords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(S)) getInhomCoords];
  for (jint i = 0; i < [self getPointsLength]; i++) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:r withOrgGeogebraCommonKernelMatrixCoords:Scoords];
  OrgGeogebraCommonKernelGeosGeoPolygon_updatePathRegion(self);
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11 {
  for (jint i = 0; i < [self getPointsLength]; i++) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) matrixTransformWithDouble:a00 withDouble:a01 withDouble:a10 withDouble:a11];
  [self calcArea];
  OrgGeogebraCommonKernelGeosGeoPolygon_updatePathRegion(self);
}

- (void)translateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  for (jint i = 0; i < [self getPointsLength]; i++) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) translateWithOrgGeogebraCommonKernelMatrixCoords:v];
  }
  OrgGeogebraCommonKernelGeosGeoPolygon_updatePathRegion(self);
}

- (void)dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)S {
  for (jint i = 0; i < [self getPointsLength]; i++) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:r withOrgGeogebraCommonKernelMatrixCoords:S];
  [self calcArea];
  OrgGeogebraCommonKernelGeosGeoPolygon_updatePathRegion(self);
}

- (void)mirrorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)Q {
  area_ *= -1;
  for (jint i = 0; i < [self getPointsLength]; i++) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) mirrorWithOrgGeogebraCommonKernelMatrixCoords:Q];
  OrgGeogebraCommonKernelGeosGeoPolygon_updatePathRegion(self);
}

- (void)updatePathRegion {
  OrgGeogebraCommonKernelGeosGeoPolygon_updatePathRegion(self);
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g {
  area_ *= -1;
  for (jint i = 0; i < [self getPointsLength]; i++) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:g];
  OrgGeogebraCommonKernelGeosGeoPolygon_updatePathRegion(self);
}

- (jboolean)isAllVertexLabelsSet {
  for (jint i = 0; i < [self getPointsLength]; i++) if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) isLabelSet]) return NO;
  return YES;
}

- (jboolean)isVertexCountFixed {
  if ([[self getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoPolygonRegularND class]]) return NO;
  if (((IOSObjectArray *) nil_chk([((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk([self getParentAlgorithm])) getInput]))->size_ < 3) return NO;
  return YES;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getDirectionInD3 {
  return OrgGeogebraCommonKernelMatrixCoords_get_VZ_();
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  for (jint i = 0; i < [self getPointsLength]; i++) {
    [((id<OrgGeogebraCommonKernelMatrixTransformable>) nil_chk(((id<OrgGeogebraCommonKernelMatrixTransformable>) check_protocol_cast(OrgGeogebraCommonKernelGeosGeoPolygon_getPointNDWithInt_(self, i), @protocol(OrgGeogebraCommonKernelMatrixTransformable))))) matrixTransformWithDouble:a00 withDouble:a01 withDouble:a02 withDouble:a10 withDouble:a11 withDouble:a12 withDouble:a20 withDouble:a21 withDouble:a22];
  }
  [self calcArea];
  OrgGeogebraCommonKernelGeosGeoPolygon_updatePathRegion(self);
}

- (void)calcArea {
  if ([algoParent_ isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoTransformation class]]) {
    OrgGeogebraCommonKernelAlgosAlgoTransformation *algo = (OrgGeogebraCommonKernelAlgosAlgoTransformation *) check_class_cast(algoParent_, [OrgGeogebraCommonKernelAlgosAlgoTransformation class]);
    jdouble sf = [((OrgGeogebraCommonKernelAlgosAlgoTransformation *) nil_chk(algo)) getAreaScaleFactor];
    OrgGeogebraCommonKernelGeosGeoPolygon *input = (OrgGeogebraCommonKernelGeosGeoPolygon *) check_class_cast([algo getInputWithInt:[((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getClassName] == OrgGeogebraCommonKernelCommandsCommandsEnum_get_ApplyMatrix() ? 1 : 0], [OrgGeogebraCommonKernelGeosGeoPolygon class]);
    OrgGeogebraCommonKernelGeosGeoPolygon_setAreaWithDouble_(self, [((OrgGeogebraCommonKernelGeosGeoPolygon *) nil_chk(input)) getAreaWithSign] * sf);
    return;
  }
  if ([OrgGeogebraCommonKernelAlgosPolygonAlgo_class_() isInstance:algoParent_]) {
    [((id<OrgGeogebraCommonKernelAlgosPolygonAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosPolygonAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosPolygonAlgo))))) calcArea];
  }
  OrgGeogebraCommonKernelGeosGeoPolygon_setAreaWithDouble_(self, OrgGeogebraCommonKernelAlgosAlgoPolygon_calcAreaWithSignWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray_([self getPoints]));
}

- (void)calcCentroidWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  if ([OrgGeogebraCommonKernelAlgosPolygonAlgo_class_() isInstance:algoParent_]) {
    [((id<OrgGeogebraCommonKernelAlgosPolygonAlgo>) nil_chk(((id<OrgGeogebraCommonKernelAlgosPolygonAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosPolygonAlgo))))) calcCentroidWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoPoint class])];
    return;
  }
  if (tmp3_ == nil) {
    OrgGeogebraCommonKernelGeosGeoPolygon_setAndConsume_tmp3_(self, [IOSDoubleArray newArrayWithLength:3]);
  }
  OrgGeogebraCommonKernelAlgosAlgoPolygon_calcCentroidWithDoubleArray_withDouble_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(tmp3_, area_, [self getPoints]);
  if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(tmp3_), 0))) {
    [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) setUndefined];
  }
  else {
    [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) setCoordsWithDouble:IOSDoubleArray_Get(tmp3_, 0) withDouble:IOSDoubleArray_Get(tmp3_, 1) withDouble:IOSDoubleArray_Get(tmp3_, 2)];
  }
}

- (void)toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:(OrgGeogebraCommonKernelGeosGeoCurveCartesian *)curve {
  [((OrgGeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve)) setFromPolyLineWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points_ withBoolean:YES];
}

- (NSString *)getDefaultLabelWithCharArray:(IOSCharArray *)chars
                               withBoolean:(jboolean)isInteger {
  if (chars != nil) return [super getDefaultLabelWithCharArray:chars withBoolean:isInteger];
  jint counter = 0;
  NSString *str;
  NSString *name;
  if ([self getMetasLength] == 1) name = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainLabelWithNSString:@"face"];
  else name = [((OrgGeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainLabelWithNSString:@"polygon"];
  do {
    counter++;
    str = JreStrcat("$$", name, [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) internationalizeDigitsWithNSString:JreStrcat("I", counter) withOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
  }
  while (![((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isFreeLabelWithNSString:str]);
  return str;
}

- (void)modifyInputPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)newPoints {
  OrgGeogebraCommonKernelAlgosAlgoPolygon *algo = (OrgGeogebraCommonKernelAlgosAlgoPolygon *) check_class_cast([self getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoPolygon class]);
  [((OrgGeogebraCommonKernelAlgosAlgoPolygon *) nil_chk(algo)) modifyInputPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:newPoints];
}

- (IOSObjectArray *)getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return nil;
}

- (IOSObjectArray *)getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  return nil;
}

- (jint)getMetasLength {
  if (metas_ == nil) {
    return 0;
  }
  return [((JavaUtilTreeSet *) nil_chk(metas_)) size];
}

- (IOSObjectArray *)getMetas {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilTreeSet *) nil_chk(metas_)) size] type:OrgGeogebraCommonKernelGeosGeoElement_class_()];
  [metas_ toArrayWithNSObjectArray:ret];
  return ret;
}

- (void)addMetaWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)polyhedron {
  if (metas_ == nil) {
    OrgGeogebraCommonKernelGeosGeoPolygon_setAndConsume_metas_(self, new_JavaUtilTreeSet_init());
  }
  [((JavaUtilTreeSet *) nil_chk(metas_)) addWithId:polyhedron];
}

- (void)removeMetaWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)polyhedron {
  if (metas_ != nil) {
    [metas_ removeWithId:polyhedron];
  }
}

- (jdouble)distanceWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p {
  jdouble d = JavaLangDouble_POSITIVE_INFINITY;
  {
    IOSObjectArray *a__ = [self getSegments];
    id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> seg = *b__++;
      jdouble d1 = [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) distanceWithOrgGeogebraCommonKernelKernelNDGeoPointND:p];
      if (d1 < d) {
        d = d1;
      }
    }
  }
  return d;
}

- (void)setReverseNormalForDrawingWithBoolean:(jboolean)flag {
  reverseNormalForDrawing_ = flag;
}

- (jboolean)getReverseNormalForDrawing {
  return reverseNormalForDrawing_;
}

- (void)setPointSizeOrVisibilityWithInt:(jint)size {
  if (size > 0) {
    OrgGeogebraCommonKernelGeosGeoPolygon_setPointSizeWithInt_(self, size);
  }
  else {
    OrgGeogebraCommonKernelGeosGeoPolygon_setPointNotVisibile(self);
  }
}

- (void)setPointSizeWithInt:(jint)size {
  OrgGeogebraCommonKernelGeosGeoPolygon_setPointSizeWithInt_(self, size);
}

- (void)setPointNotVisibile {
  OrgGeogebraCommonKernelGeosGeoPolygon_setPointNotVisibile(self);
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)newGeoPointWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons {
  return [new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(cons) autorelease];
}

- (jint)getNumPoints {
  return points_ == nil ? 0 : points_->size_;
}

- (void)dealloc {
  RELEASE_(points_);
  RELEASE_(segments_);
  RELEASE_(p0_);
  RELEASE_(p1_);
  RELEASE_(p2_);
  RELEASE_(segmentsArray_);
  RELEASE_(pointsArray_);
  RELEASE_(sbToString_);
  RELEASE_(labelPosition_);
  RELEASE_(changeableCoordParent_);
  RELEASE_(tmp3_);
  RELEASE_(metas_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "GeoPolygon", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:withOrgGeogebraCommonKernelMatrixCoordSys:withBoolean:", "GeoPolygon", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoPolygon", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withBoolean:", "GeoPolygon", NULL, 0x1, NULL, NULL },
    { "setCoordSysWithOrgGeogebraCommonKernelMatrixCoordSys:", "setCoordSys", "V", 0x1, NULL, NULL },
    { "setCoordSysWithOrgGeogebraCommonKernelGeosGeoPolygon:", "setCoordSys", "V", 0x1, NULL, NULL },
    { "setCoordSysAndPoints3DWithOrgGeogebraCommonKernelGeosGeoPolygon:", "setCoordSysAndPoints3D", "V", 0x1, NULL, NULL },
    { "setNotFixedPointsLengthWithBoolean:", "setNotFixedPointsLength", "V", 0x1, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "setPoints", "V", 0x11, NULL, NULL },
    { "setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:withOrgGeogebraCommonKernelMatrixCoordSys:withBoolean:", "setPoints", "V", 0x1, NULL, NULL },
    { "getPointsLength", NULL, "I", 0x1, NULL, NULL },
    { "getPointXWithInt:", "getPointX", "D", 0x1, NULL, NULL },
    { "getPointYWithInt:", "getPointY", "D", 0x1, NULL, NULL },
    { "initLabelsWithNSStringArray:", "initLabels", "V", 0x1, NULL, NULL },
    { "wasInitLabelsCalled", NULL, "Z", 0x11, NULL, NULL },
    { "defaultSegmentLabels", NULL, "V", 0x2, NULL, NULL },
    { "setLabelWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "setLabel", "V", 0xa, NULL, NULL },
    { "updateSegments", NULL, "V", 0x4, NULL, NULL },
    { "createSegmentWithOrgGeogebraCommonKernelKernelNDGeoPointND:withOrgGeogebraCommonKernelKernelNDGeoPointND:withBoolean:", "createSegment", "Lorg.geogebra.common.kernel.kernelND.GeoSegmentND;", 0x1, NULL, NULL },
    { "createSegmentWithOrgGeogebraCommonKernelKernelNDGeoSegmentND:withBoolean:", "createSegment", "Lorg.geogebra.common.kernel.kernelND.GeoSegmentND;", 0x4, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "copyInternalWithOrgGeogebraCommonKernelConstruction:", "copyInternal", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "copyInternalWithOrgGeogebraCommonKernelConstruction:withOrgGeogebraCommonKernelGeosGeoPolygon:", "copyInternal", "V", 0x1, NULL, NULL },
    { "newGeoPolygonWithOrgGeogebraCommonKernelConstruction:", "newGeoPolygon", "Lorg.geogebra.common.kernel.geos.GeoPolygon;", 0x4, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setPointsAndSegmentsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "setPointsAndSegments", "V", 0x1, NULL, NULL },
    { "setPointsAndSegmentsLengthWithInt:", "setPointsAndSegmentsLength", "V", 0x1, NULL, NULL },
    { "setPointsLengthWithInt:withOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "setPointsLength", "V", 0x4, NULL, NULL },
    { "getPointWithInt:", "getPoint", "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getPoints", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "setPoints2DWithOrgGeogebraCommonKernelGeosGeoPointArray:", "setPoints2D", "V", 0x1, NULL, NULL },
    { "getPointsND", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x11, NULL, NULL },
    { "getPointNDWithInt:", "getPointND", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x11, NULL, NULL },
    { "getSegments", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoSegmentND;", 0x1, NULL, NULL },
    { "setSegmentsWithOrgGeogebraCommonKernelKernelNDGeoSegmentNDArray:", "setSegments", "V", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "isInverseFillable", NULL, "Z", 0x1, NULL, NULL },
    { "setAreaWithDouble:", "setArea", "V", 0x11, NULL, NULL },
    { "getArea", NULL, "D", 0x1, NULL, NULL },
    { "getMeasure", NULL, "D", 0x1, NULL, NULL },
    { "getBoundary", NULL, "Lorg.geogebra.common.kernel.Path;", 0x1, NULL, NULL },
    { "getDirection", NULL, "D", 0x1, NULL, NULL },
    { "getAreaWithSign", NULL, "D", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setDefined", NULL, "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x11, NULL, NULL },
    { "hasLineOpacity", NULL, "Z", 0x1, NULL, NULL },
    { "setLineOpacityWithInt:", "setLineOpacity", "V", 0x1, NULL, NULL },
    { "setLineOpacityWithInt:withBoolean:", "setLineOpacity", "V", 0x1, NULL, NULL },
    { "hasSameAreaWithOrgGeogebraCommonKernelGeosGeoElement:", "hasSameArea", "Z", 0x1, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "setEuclidianVisibleWithBoolean:", "setEuclidianVisible", "V", 0x1, NULL, NULL },
    { "setEuclidianVisibleWithBoolean:withBoolean:", "setEuclidianVisible", "V", 0x1, NULL, NULL },
    { "setObjColorWithOrgGeogebraCommonAwtGColor:", "setObjColor", "V", 0x1, NULL, NULL },
    { "setLineTypeWithInt:", "setLineType", "V", 0x1, NULL, NULL },
    { "setLineTypeWithInt:withBoolean:", "setLineType", "V", 0x1, NULL, NULL },
    { "setLineTypeHiddenWithInt:", "setLineTypeHidden", "V", 0x1, NULL, NULL },
    { "setLineTypeHiddenWithInt:withBoolean:", "setLineTypeHidden", "V", 0x1, NULL, NULL },
    { "setLineThicknessWithInt:", "setLineThickness", "V", 0x1, NULL, NULL },
    { "setLineThicknessWithInt:withBoolean:", "setLineThickness", "V", 0x1, NULL, NULL },
    { "setLineThicknessOrVisibilityWithInt:", "setLineThicknessOrVisibility", "V", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toStringMinimalWithOrgGeogebraCommonKernelStringTemplate:", "toStringMinimal", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getNumber", NULL, "Lorg.geogebra.common.kernel.arithmetic.MyDouble;", 0x1, NULL, NULL },
    { "getDouble", NULL, "D", 0x11, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoPolygon", NULL, "Z", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lorg.geogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelMatrixCoords:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "isRegion", NULL, "Z", 0x1, NULL, NULL },
    { "isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:withBoolean:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "isInRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "isInRegionWithDouble:withDouble:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "regionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "regionChanged", "V", 0x11, NULL, NULL },
    { "setRegionChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:withDouble:", "setRegionChanged", "V", 0x1, NULL, NULL },
    { "pointChangedForRegionWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChangedForRegion", "V", 0x1, NULL, NULL },
    { "updateRegionCSWithOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:withOrgGeogebraCommonKernelGeosGeoPoint:", "updateRegionCS", "V", 0x11, NULL, NULL },
    { "updateRegionCSWithFirstPoints", NULL, "V", 0x11, NULL, NULL },
    { "updateRegionCS", NULL, "V", 0x11, NULL, NULL },
    { "setRoleWithBoolean:", "setRole", "V", 0x1, NULL, NULL },
    { "asBoundary", NULL, "Z", 0x1, NULL, NULL },
    { "intersectOxWithDouble:withDouble:withDouble:withDouble:", "intersectOx", "I", 0xa, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getMinimumLineThickness", NULL, "I", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "getPoint3DWithInt:", "getPoint3D", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isPartOfClosedSurface", NULL, "Z", 0x1, NULL, NULL },
    { "isConvex", NULL, "Z", 0x1, NULL, NULL },
    { "isConvexInverseDirection", NULL, "Z", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordSys", NULL, "Lorg.geogebra.common.kernel.Matrix.CoordSys;", 0x1, NULL, NULL },
    { "getPointWithDouble:withDouble:", "getPoint", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getNormalProjectionWithOrgGeogebraCommonKernelMatrixCoords:", "getNormalProjection", "[Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getProjectionWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:", "getProjection", "[Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "setChangeableCoordParentWithOrgGeogebraCommonKernelGeosGeoNumeric:withOrgGeogebraCommonKernelGeosGeoElement:", "setChangeableCoordParent", "V", 0x11, NULL, NULL },
    { "hasChangeableCoordParentNumbers", NULL, "Z", 0x1, NULL, NULL },
    { "recordChangeableCoordParentNumbers", NULL, "V", 0x1, NULL, NULL },
    { "moveFromChangeableCoordParentNumbersWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelMatrixCoords:withJavaUtilArrayList:withJavaUtilArrayList:withOrgGeogebraCommonEuclidianEuclidianView:", "moveFromChangeableCoordParentNumbers", "Z", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "translateWithOrgGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "updatePathRegion", NULL, "V", 0x2, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "isAllVertexLabelsSet", NULL, "Z", 0x1, NULL, NULL },
    { "isVertexCountFixed", NULL, "Z", 0x1, NULL, NULL },
    { "getDirectionInD3", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "calcArea", NULL, "V", 0x1, NULL, NULL },
    { "calcCentroidWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "calcCentroid", "V", 0x1, NULL, NULL },
    { "toGeoCurveCartesianWithOrgGeogebraCommonKernelGeosGeoCurveCartesian:", "toGeoCurveCartesian", "V", 0x1, NULL, NULL },
    { "getDefaultLabelWithCharArray:withBoolean:", "getDefaultLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "modifyInputPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:", "modifyInputPoints", "V", 0x1, NULL, NULL },
    { "getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lorg.geogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getMetasLength", NULL, "I", 0x1, NULL, NULL },
    { "getMetas", NULL, "[Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "addMetaWithOrgGeogebraCommonKernelGeosGeoElement:", "addMeta", "V", 0x1, NULL, NULL },
    { "removeMetaWithOrgGeogebraCommonKernelGeosGeoElement:", "removeMeta", "V", 0x1, NULL, NULL },
    { "distanceWithOrgGeogebraCommonKernelGeosGeoPoint:", "distance", "D", 0x1, NULL, NULL },
    { "setReverseNormalForDrawingWithBoolean:", "setReverseNormalForDrawing", "V", 0x1, NULL, NULL },
    { "getReverseNormalForDrawing", NULL, "Z", 0x1, NULL, NULL },
    { "setPointSizeOrVisibilityWithInt:", "setPointSizeOrVisibility", "V", 0x1, NULL, NULL },
    { "setPointSizeWithInt:", "setPointSize", "V", 0x2, NULL, NULL },
    { "setPointNotVisibile", NULL, "V", 0x2, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
    { "newGeoPointWithOrgGeogebraCommonKernelConstruction:", "newGeoPoint", "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getNumPoints", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "POLYGON_MAX_POINTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoPolygon_POLYGON_MAX_POINTS },
    { "points_", NULL, 0x4, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "segments_", NULL, 0x4, "[Lorg.geogebra.common.kernel.kernelND.GeoSegmentND;", NULL, NULL,  },
    { "p0_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "p1_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "p2_", NULL, 0x4, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "numCS_", NULL, 0x4, "I", NULL, NULL,  },
    { "area_", NULL, 0x4, "D", NULL, NULL,  },
    { "defined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "initLabelsCalled_", NULL, 0x4, "Z", NULL, NULL,  },
    { "createSegments_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isIntersection_", NULL, 0x4, "Z", NULL, NULL,  },
    { "notFixedPointsLength_", NULL, 0x2, "Z", NULL, NULL,  },
    { "segmentsArray_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/kernelND/GeoSegmentND;>;",  },
    { "pointsArray_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoPoint;>;",  },
    { "sbToString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "asBoundary__", "asBoundary", 0x2, "Z", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
    { "convexOrientation_", NULL, 0x2, "I", NULL, NULL,  },
    { "labelPosition_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "changeableCoordParent_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.ChangeableCoordParent;", NULL, NULL,  },
    { "tmp3_", NULL, 0x2, "[D", NULL, NULL,  },
    { "metas_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lorg/geogebra/common/kernel/geos/GeoElement;>;",  },
    { "reverseNormalForDrawing_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoPolygon = { 2, "GeoPolygon", "org.geogebra.common.kernel.geos", NULL, 0x1, 145, methods, 24, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoPolygon;
}

@end

void OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonKernelGeosGeoPolygon *self, OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *points) {
  OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelMatrixCoordSys_withBoolean_(self, c, points, nil, YES);
}

OrgGeogebraCommonKernelGeosGeoPolygon *new_OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *points) {
  OrgGeogebraCommonKernelGeosGeoPolygon *self = [OrgGeogebraCommonKernelGeosGeoPolygon alloc];
  OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, points);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelMatrixCoordSys_withBoolean_(OrgGeogebraCommonKernelGeosGeoPolygon *self, OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *points, OrgGeogebraCommonKernelMatrixCoordSys *cs, jboolean createSegments) {
  OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->createSegments_ = createSegments;
  [self setPointsWithOrgGeogebraCommonKernelKernelNDGeoPointNDArray:points withOrgGeogebraCommonKernelMatrixCoordSys:cs withBoolean:createSegments];
  [self setLabelVisibleWithBoolean:NO];
}

OrgGeogebraCommonKernelGeosGeoPolygon *new_OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelMatrixCoordSys_withBoolean_(OrgGeogebraCommonKernelConstruction *c, IOSObjectArray *points, OrgGeogebraCommonKernelMatrixCoordSys *cs, jboolean createSegments) {
  OrgGeogebraCommonKernelGeosGeoPolygon *self = [OrgGeogebraCommonKernelGeosGeoPolygon alloc];
  OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelKernelNDGeoPointNDArray_withOrgGeogebraCommonKernelMatrixCoordSys_withBoolean_(self, c, points, cs, createSegments);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoPolygon *self, OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, cons, NO);
}

OrgGeogebraCommonKernelGeosGeoPolygon *new_OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *cons) {
  OrgGeogebraCommonKernelGeosGeoPolygon *self = [OrgGeogebraCommonKernelGeosGeoPolygon alloc];
  OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(OrgGeogebraCommonKernelGeosGeoPolygon *self, OrgGeogebraCommonKernelConstruction *cons, jboolean isIntersection) {
  OrgGeogebraCommonKernelGeosGeoElement_initWithOrgGeogebraCommonKernelConstruction_(self, cons);
  self->numCS_ = 0;
  self->defined_ = NO;
  self->initLabelsCalled_ = NO;
  self->createSegments_ = YES;
  self->notFixedPointsLength_ = NO;
  OrgGeogebraCommonKernelGeosGeoPolygon_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  self->asBoundary__ = NO;
  OrgGeogebraCommonKernelGeosGeoPolygon_set_changeableCoordParent_(self, nil);
  self->reverseNormalForDrawing_ = NO;
  self->isIntersection_ = isIntersection;
  [self setConstructionDefaults];
}

OrgGeogebraCommonKernelGeosGeoPolygon *new_OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(OrgGeogebraCommonKernelConstruction *cons, jboolean isIntersection) {
  OrgGeogebraCommonKernelGeosGeoPolygon *self = [OrgGeogebraCommonKernelGeosGeoPolygon alloc];
  OrgGeogebraCommonKernelGeosGeoPolygon_initWithOrgGeogebraCommonKernelConstruction_withBoolean_(self, cons, isIntersection);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoPolygon_defaultSegmentLabels(OrgGeogebraCommonKernelGeosGeoPolygon *self) {
  if ([self getPointsLength] == 3) {
    if ([[self getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoPolygonRegularND class]]) [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(self->points_), 2))) setLabelWithNSString:nil];
    OrgGeogebraCommonKernelGeosGeoPolygon_setLabelWithOrgGeogebraCommonKernelKernelNDGeoSegmentND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(IOSObjectArray_Get(nil_chk(self->segments_), 0), IOSObjectArray_Get(nil_chk(self->points_), 2));
    OrgGeogebraCommonKernelGeosGeoPolygon_setLabelWithOrgGeogebraCommonKernelKernelNDGeoSegmentND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(IOSObjectArray_Get(self->segments_, 1), IOSObjectArray_Get(self->points_, 0));
    OrgGeogebraCommonKernelGeosGeoPolygon_setLabelWithOrgGeogebraCommonKernelKernelNDGeoSegmentND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(IOSObjectArray_Get(self->segments_, 2), IOSObjectArray_Get(self->points_, 1));
  }
  else {
    for (jint i = 0; i < [self getPointsLength]; i++) {
      OrgGeogebraCommonKernelGeosGeoPolygon_setLabelWithOrgGeogebraCommonKernelKernelNDGeoSegmentND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(IOSObjectArray_Get(nil_chk(self->segments_), i), IOSObjectArray_Get(nil_chk(self->points_), i));
    }
  }
}

void OrgGeogebraCommonKernelGeosGeoPolygon_setLabelWithOrgGeogebraCommonKernelKernelNDGeoSegmentND_withOrgGeogebraCommonKernelKernelNDGeoPointND_(id<OrgGeogebraCommonKernelKernelNDGeoSegmentND> s, id<OrgGeogebraCommonKernelKernelNDGeoPointND> p) {
  OrgGeogebraCommonKernelGeosGeoPolygon_initialize();
  if (![((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) isLabelSet] || [p getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_get_defaultTemplate_()] == nil) {
    [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(s)) setLabelWithNSString:nil];
  }
  else {
    NSString *lowerCaseLabel = [((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoElement class])) getFreeLabelWithNSString:[((NSString *) nil_chk([p getLabelWithOrgGeogebraCommonKernelStringTemplate:OrgGeogebraCommonKernelStringTemplate_getWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA())])) lowercaseString]];
    [((id<OrgGeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(s)) setLabelWithNSString:lowerCaseLabel];
  }
}

id<OrgGeogebraCommonKernelKernelNDGeoPointND> OrgGeogebraCommonKernelGeosGeoPolygon_getPointNDWithInt_(OrgGeogebraCommonKernelGeosGeoPolygon *self, jint i) {
  return IOSObjectArray_Get(nil_chk(self->points_), i);
}

void OrgGeogebraCommonKernelGeosGeoPolygon_setAreaWithDouble_(OrgGeogebraCommonKernelGeosGeoPolygon *self, jdouble area) {
  self->area_ = area;
  self->defined_ = !(JavaLangDouble_isNaNWithDouble_(area) || JavaLangDouble_isInfiniteWithDouble_(area));
}

void OrgGeogebraCommonKernelGeosGeoPolygon_updateRegionCSWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(OrgGeogebraCommonKernelGeosGeoPolygon *self, OrgGeogebraCommonKernelGeosGeoPoint *newp0, OrgGeogebraCommonKernelGeosGeoPoint *newp1, OrgGeogebraCommonKernelGeosGeoPoint *newp2) {
  OrgGeogebraCommonKernelGeosGeoPolygon_set_p0_(self, newp0);
  OrgGeogebraCommonKernelGeosGeoPolygon_set_p1_(self, newp1);
  OrgGeogebraCommonKernelGeosGeoPolygon_set_p2_(self, newp2);
  self->numCS_ = 3;
}

void OrgGeogebraCommonKernelGeosGeoPolygon_updateRegionCS(OrgGeogebraCommonKernelGeosGeoPolygon *self) {
  if ([self getPoints] == nil) {
    return;
  }
  if (self->p2_ == nil || OrgGeogebraCommonKernelGeosGeoPoint_collinearWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self->p0_, self->p1_, self->p2_)) {
    OrgGeogebraCommonKernelGeosGeoPolygon_set_p0_(self, [self getPointWithInt:0]);
    self->numCS_ = 1;
    jint secondPoint = -1;
    jboolean secondPointFound = NO;
    for (secondPoint = 1; secondPoint < ((IOSObjectArray *) nil_chk([self getPoints]))->size_ && !secondPointFound; secondPoint++) {
      OrgGeogebraCommonKernelGeosGeoPolygon_set_p1_(self, [self getPointWithInt:secondPoint]);
      if (!OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->p0_))->inhomX_, ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->p1_))->inhomX_, OrgGeogebraCommonKernelKernel_STANDARD_PRECISION)) secondPointFound = YES;
      else if (!OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(self->p0_->inhomY_, self->p1_->inhomY_, OrgGeogebraCommonKernelKernel_STANDARD_PRECISION)) secondPointFound = YES;
    }
    jint thirdPoint = -1;
    if (secondPointFound) {
      self->numCS_++;
      secondPoint--;
      jboolean thirdPointFound = NO;
      for (thirdPoint = ((IOSObjectArray *) nil_chk([self getPoints]))->size_ - 1; thirdPoint > secondPoint && !thirdPointFound; thirdPoint--) {
        OrgGeogebraCommonKernelGeosGeoPolygon_set_p2_(self, [self getPointWithInt:thirdPoint]);
        if (!OrgGeogebraCommonKernelGeosGeoPoint_collinearWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self->p0_, self->p1_, self->p2_)) {
          thirdPointFound = YES;
          self->numCS_++;
        }
      }
    }
  }
}

jint OrgGeogebraCommonKernelGeosGeoPolygon_intersectOxWithDouble_withDouble_withDouble_withDouble_(jdouble px1, jdouble py1, jdouble px2, jdouble py2) {
  OrgGeogebraCommonKernelGeosGeoPolygon_initialize();
  jdouble x1 = px1, x2 = px2, y1 = py1, y2 = py2;
  jdouble eps = OrgGeogebraCommonKernelKernel_STANDARD_PRECISION;
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(y1)) {
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(y2)) {
      if (OrgGeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(0, x1 * x2)) return 2;
      return -1;
    }
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(x1)) return 2;
    return y2 > eps && x1 > eps ? 1 : -1;
  }
  else if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(y2)) {
    if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(x2)) return 2;
    return y1 > eps && x2 > eps ? 1 : -1;
  }
  else if (y1 * y2 > eps) return -1;
  else {
    if (y1 > y2) {
      jdouble y = y1;
      y1 = y2;
      y2 = y;
      jdouble x = x1;
      x1 = x2;
      x2 = x;
    }
    if ((x1 + eps < 0) && (x2 + eps < 0)) return -1;
    else if ((x1 > eps) && (x2 > eps)) return 1;
    else if (x1 * y2 > x2 * y1 + eps) return 1;
    else if (x1 * y2 + eps < x2 * y1) return -1;
    else return 2;
  }
}

void OrgGeogebraCommonKernelGeosGeoPolygon_setChangeableCoordParentWithOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoElement_(OrgGeogebraCommonKernelGeosGeoPolygon *self, OrgGeogebraCommonKernelGeosGeoNumeric *number, OrgGeogebraCommonKernelGeosGeoElement *direction) {
  OrgGeogebraCommonKernelGeosGeoPolygon_setAndConsume_changeableCoordParent_(self, new_OrgGeogebraCommonKernelGeosChangeableCoordParent_initWithOrgGeogebraCommonKernelGeosGeoElement_withOrgGeogebraCommonKernelGeosGeoNumeric_withOrgGeogebraCommonKernelGeosGeoElement_(self, number, direction));
}

void OrgGeogebraCommonKernelGeosGeoPolygon_updatePathRegion(OrgGeogebraCommonKernelGeosGeoPolygon *self) {
  OrgGeogebraCommonKernelGeosGeoPolygon_updateRegionCS(self);
  [self updateSegments];
}

void OrgGeogebraCommonKernelGeosGeoPolygon_setPointSizeWithInt_(OrgGeogebraCommonKernelGeosGeoPolygon *self, jint size) {
  {
    IOSObjectArray *a__ = self->points_;
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = *b__++;
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class])))) setEuclidianVisibleIfNoConditionToShowObjectWithBoolean:YES];
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) setPointSizeWithInt:size];
      [point updateRepaint];
    }
  }
}

void OrgGeogebraCommonKernelGeosGeoPolygon_setPointNotVisibile(OrgGeogebraCommonKernelGeosGeoPolygon *self) {
  {
    IOSObjectArray *a__ = self->points_;
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<OrgGeogebraCommonKernelKernelNDGeoPointND> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<OrgGeogebraCommonKernelKernelNDGeoPointND> point = *b__++;
      [((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(((OrgGeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [OrgGeogebraCommonKernelGeosGeoElement class])))) setEuclidianVisibleIfNoConditionToShowObjectWithBoolean:NO];
      [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) updateRepaint];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoPolygon)
