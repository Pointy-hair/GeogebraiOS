//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/geos/GeoVector.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "org/geogebra/common/kernel/CircularDefinitionException.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/LocateableList.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/PathMover.h"
#include "org/geogebra/common/kernel/PathMoverGeneric.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoDependentVector.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/DependentAlgo.h"
#include "org/geogebra/common/kernel/algos/SymbolicParameters.h"
#include "org/geogebra/common/kernel/algos/SymbolicParametersAlgo.h"
#include "org/geogebra/common/kernel/algos/SymbolicParametersBotanaAlgo.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "org/geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "org/geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoNumeric.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoSegment.h"
#include "org/geogebra/common/kernel/geos/GeoText.h"
#include "org/geogebra/common/kernel/geos/GeoVec2D.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/geos/GeoVector.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/main/App.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/MyMath.h"
#include "org/geogebra/common/util/Unicode.h"

@interface OrgGeogebraCommonKernelGeosGeoVector () {
 @public
  id<OrgGeogebraCommonKernelKernelNDGeoPointND> startPoint_;
  OrgGeogebraCommonKernelGeosGeoSegment *pathSegment_;
  OrgGeogebraCommonKernelGeosGeoPoint *pathStartPoint_, *pathEndPoint_;
  jboolean waitingForStartPoint_;
  JavaUtilHashSet *waitingPointSet_;
  JavaLangStringBuilder *sbToString_GeoVector_;
  JavaLangStringBuilder *sbBuildValueString_;
  JavaLangStringBuilder *sb_;
}

- (JavaLangStringBuilder *)buildValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (void)initPathSegment OBJC_METHOD_FAMILY_NONE;

- (void)updatePathSegment;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoVector, startPoint_, id<OrgGeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoVector, pathSegment_, OrgGeogebraCommonKernelGeosGeoSegment *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoVector, pathStartPoint_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoVector, pathEndPoint_, OrgGeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoVector, waitingPointSet_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoVector, sbToString_GeoVector_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoVector, sbBuildValueString_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoVector, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoVector_setCoordsWithDouble_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoVector *self, jdouble x, jdouble y, jdouble z);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoVec2D *OrgGeogebraCommonKernelGeosGeoVector_getInhomVec(OrgGeogebraCommonKernelGeosGeoVector *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoVector_isFinite(OrgGeogebraCommonKernelGeosGeoVector *self);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoVector_isInfinite(OrgGeogebraCommonKernelGeosGeoVector *self);

__attribute__((unused)) static JavaLangStringBuilder *OrgGeogebraCommonKernelGeosGeoVector_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoVector *self, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoVector_initPathSegment(OrgGeogebraCommonKernelGeosGeoVector *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoVector_updatePathSegment(OrgGeogebraCommonKernelGeosGeoVector *self);

@implementation OrgGeogebraCommonKernelGeosGeoVector

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_VECTOR();
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                               withNSString:(NSString *)label
                                                 withDouble:(jdouble)x
                                                 withDouble:(jdouble)y
                                                 withDouble:(jdouble)z {
  OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self, c, label, x, y, z);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoVector:(OrgGeogebraCommonKernelGeosGeoVector *)vector {
  OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelGeosGeoVector_(self, vector);
  return self;
}

- (void)setCoordsWithDouble:(jdouble)x
                 withDouble:(jdouble)y
                 withDouble:(jdouble)z {
  OrgGeogebraCommonKernelGeosGeoVector_setCoordsWithDouble_withDouble_withDouble_(self, x, y, z);
}

- (void)setCoordsWithDoubleArray:(IOSDoubleArray *)c {
  OrgGeogebraCommonKernelGeosGeoVector_setCoordsWithDouble_withDouble_withDouble_(self, IOSDoubleArray_Get(nil_chk(c), 0), IOSDoubleArray_Get(c, 1), IOSDoubleArray_Get(c, 2));
}

- (void)setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:(OrgGeogebraCommonKernelGeosGeoVec3D *)v {
  x_ = ((OrgGeogebraCommonKernelGeosGeoVec3D *) nil_chk(v))->x_;
  y_ = v->y_;
  z_ = v->z_;
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if ([((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
    OrgGeogebraCommonKernelGeosGeoPoint *p = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoPoint class]);
    OrgGeogebraCommonKernelGeosGeoVector_setCoordsWithDouble_withDouble_withDouble_(self, [p getX] / [p getZ], [p getY] / [p getZ], 0.0);
  }
  else {
    [super setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  }
  if (![geo isGeoVector]) return;
  OrgGeogebraCommonKernelGeosGeoVector *vec = (OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoVector class]);
  if (geo->cons_ != cons_ && [self isAlgoMacroOutput]) return;
  @try {
    if (vec->startPoint_ != nil) {
      if ([vec hasAbsoluteLocation]) {
        [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:[vec->startPoint_ copy__]];
      }
      else {
        [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:vec->startPoint_];
      }
    }
  }
  @catch (OrgGeogebraCommonKernelCircularDefinitionException *e) {
    OrgGeogebraCommonMainApp_debugWithNSString_(@"set GeoVector: CircularDefinitionException");
  }
}

- (OrgGeogebraCommonKernelGeosGeoElement *)copy__ {
  return new_OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelGeosGeoVector_(self);
}

- (void)setPolarCoordsWithDouble:(jdouble)r
                      withDouble:(jdouble)phi {
  x_ = r * JavaLangMath_cosWithDouble_(phi);
  y_ = r * JavaLangMath_sinWithDouble_(phi);
  z_ = 0.0;
}

- (void)setCoordsWithOrgGeogebraCommonKernelGeosGeoVec2D:(OrgGeogebraCommonKernelGeosGeoVec2D *)v {
  x_ = [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(v)) getX];
  y_ = [v getY];
  z_ = 0.0;
}

- (OrgGeogebraCommonKernelGeosGeoVec2D *)getInhomVec {
  return OrgGeogebraCommonKernelGeosGeoVector_getInhomVec(self);
}

- (id<OrgGeogebraCommonKernelKernelNDGeoPointND>)getStartPoint {
  return startPoint_;
}

- (IOSObjectArray *)getStartPoints {
  if (startPoint_ == nil) return nil;
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:1 type:OrgGeogebraCommonKernelKernelNDGeoPointND_class_()];
  (void) IOSObjectArray_Set(ret, 0, startPoint_);
  return ret;
}

- (jboolean)hasAbsoluteLocation {
  return startPoint_ == nil || [startPoint_ isAbsoluteStartPoint];
}

- (void)setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p
                                                           withInt:(jint)number {
  [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:p];
}

- (void)initStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p
                                                            withInt:(jint)number {
  startPoint_ = p;
}

- (void)removeStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  if (startPoint_ == p) {
    @try {
      [self setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:nil];
    }
    @catch (JavaLangException *e) {
    }
  }
}

- (void)setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  if (startPoint_ == p) return;
  if ([self isAlgoMacroOutput]) return;
  if ([self isParentOfWithOrgGeogebraCommonKernelKernelNDGeoElementND:p]) {
    OrgGeogebraCommonMainApp_debugWithNSString_(JreStrcat("@$@", self, @" startpoint ", p));
  }
  if (startPoint_ != nil) [((OrgGeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) unregisterLocateableWithOrgGeogebraCommonKernelLocateable:self];
  startPoint_ = p;
  if (startPoint_ != nil) [((OrgGeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) registerLocateableWithOrgGeogebraCommonKernelLocateable:self];
  if (pathSegment_ != nil) {
    OrgGeogebraCommonKernelGeosGeoVector_initPathSegment(self);
  }
  if (waitingForStartPoint_) {
    waitingForStartPoint_ = NO;
    if (waitingPointSet_ != nil) {
      OrgGeogebraCommonKernelGeosGeoVector_updatePathSegment(self);
      OrgGeogebraCommonKernelGeosGeoPoint *P;
      id<JavaUtilIterator> it = [waitingPointSet_ iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        P = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast([it next], [OrgGeogebraCommonKernelGeosGeoPoint class]);
        [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(pathSegment_)) pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
        [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) updateCoords];
      }
    }
    waitingPointSet_ = nil;
  }
}

- (void)setWaitForStartPoint {
  waitingForStartPoint_ = YES;
}

- (void)doRemove {
  [super doRemove];
  if (startPoint_ != nil) [((OrgGeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) unregisterLocateableWithOrgGeogebraCommonKernelLocateable:self];
}

- (jboolean)isFinite {
  return OrgGeogebraCommonKernelGeosGeoVector_isFinite(self);
}

- (jboolean)isInfinite {
  return OrgGeogebraCommonKernelGeosGeoVector_isInfinite(self);
}

- (jboolean)showInEuclidianView {
  return [self isDefined] && !OrgGeogebraCommonKernelGeosGeoVector_isInfinite(self);
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoVector]) return NO;
  OrgGeogebraCommonKernelGeosGeoVector *v = (OrgGeogebraCommonKernelGeosGeoVector *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoVector class]);
  if (!(OrgGeogebraCommonKernelGeosGeoVector_isFinite(self) && OrgGeogebraCommonKernelGeosGeoVector_isFinite(v))) return NO;
  return OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(x_, v->x_) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(y_, v->y_);
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phi {
  [self rotateXYWithOrgGeogebraCommonKernelArithmeticNumberValue:phi];
}

- (void)translateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)r
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)S {
  [self rotateXYWithOrgGeogebraCommonKernelArithmeticNumberValue:r];
}

- (void)mirrorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)Q {
  OrgGeogebraCommonKernelGeosGeoVector_setCoordsWithDouble_withDouble_withDouble_(self, -x_, -y_, z_);
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g1 {
  OrgGeogebraCommonKernelGeosGeoLine *g = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g1, [OrgGeogebraCommonKernelGeosGeoLine class]);
  [self mirrorXYWithDouble:2.0 * JavaLangMath_atan2WithDouble_withDouble_(-[((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g)) getX], [g getY])];
}

- (void)dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)rval
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)S {
  jdouble r = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble];
  OrgGeogebraCommonKernelGeosGeoVector_setCoordsWithDouble_withDouble_withDouble_(self, r * x_, r * y_, z_);
}

- (void)matrixTransformWithDouble:(jdouble)a
                       withDouble:(jdouble)b
                       withDouble:(jdouble)c
                       withDouble:(jdouble)d {
  JavaLangDouble *x1 = JavaLangDouble_valueOfWithDouble_(a * x_ + b * y_);
  JavaLangDouble *y1 = JavaLangDouble_valueOfWithDouble_(c * x_ + d * y_);
  OrgGeogebraCommonKernelGeosGeoVector_setCoordsWithDouble_withDouble_withDouble_(self, [x1 doubleValue], [y1 doubleValue], z_);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_GeoVector_)) setLengthWithInt:0];
  (void) [sbToString_GeoVector_ appendWithNSString:label_];
  switch ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getCoordStyleWithInt:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getCoordStyle]]) {
    case OrgGeogebraCommonKernelKernel_COORD_STYLE_FRENCH:
    (void) [sbToString_GeoVector_ appendWithNSString:@": "];
    case OrgGeogebraCommonKernelKernel_COORD_STYLE_AUSTRIAN:
    break;
    default:
    (void) [sbToString_GeoVector_ appendWithNSString:@" = "];
  }
  NSString *str = [((JavaLangStringBuilder *) nil_chk(OrgGeogebraCommonKernelGeosGeoVector_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl))) description];
  (void) [sbToString_GeoVector_ appendWithNSString:str];
  return [sbToString_GeoVector_ description];
}

- (NSString *)toStringMinimalWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_GeoVector_)) setLengthWithInt:0];
  (void) [sbToString_GeoVector_ appendWithNSString:JreStrcat("$C$", [self regrFormatWithDouble:x_], ' ', [self regrFormatWithDouble:y_])];
  return [sbToString_GeoVector_ description];
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((JavaLangStringBuilder *) nil_chk(OrgGeogebraCommonKernelGeosGeoVector_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl))) description];
}

- (JavaLangStringBuilder *)buildValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelGeosGeoVector_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (OrgGeogebraCommonKernelGeosGeoVec2D *)getVector {
  OrgGeogebraCommonKernelGeosGeoVec2D *ret = new_OrgGeogebraCommonKernelGeosGeoVec2D_initWithOrgGeogebraCommonKernelKernel_withDouble_withDouble_(kernel_, x_, y_);
  [ret setModeWithInt:toStringMode_];
  return ret;
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)xmlsb {
  [super getXMLtagsWithJavaLangStringBuilder:xmlsb];
  [self getLineStyleXMLWithJavaLangStringBuilder:xmlsb];
  switch (toStringMode_) {
    case OrgGeogebraCommonKernelKernel_COORD_POLAR:
    (void) [((JavaLangStringBuilder *) nil_chk(xmlsb)) appendWithNSString:@"\t<coordStyle style=\"polar\"/>\n"];
    break;
    case OrgGeogebraCommonKernelKernel_COORD_COMPLEX:
    (void) [((JavaLangStringBuilder *) nil_chk(xmlsb)) appendWithNSString:@"\t<coordStyle style=\"complex\"/>\n"];
    break;
    case OrgGeogebraCommonKernelKernel_COORD_CARTESIAN_3D:
    (void) [((JavaLangStringBuilder *) nil_chk(xmlsb)) appendWithNSString:@"\t<coordStyle style=\"cartesian3d\"/>\n"];
    break;
    case OrgGeogebraCommonKernelKernel_COORD_SPHERICAL:
    (void) [((JavaLangStringBuilder *) nil_chk(xmlsb)) appendWithNSString:@"\t<coordStyle style=\"spherical\"/>\n"];
    break;
    default:
    (void) [((JavaLangStringBuilder *) nil_chk(xmlsb)) appendWithNSString:@"\t<coordStyle style=\"cartesian\"/>\n"];
  }
  if (startPoint_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk(xmlsb)) appendWithNSString:[startPoint_ getStartPointXML]];
  }
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)evaluatesToNonComplex2DVector {
  return [self getMode] != OrgGeogebraCommonKernelKernel_COORD_COMPLEX;
}

- (jboolean)evaluatesToVectorNotPoint {
  return [self getMode] != OrgGeogebraCommonKernelKernel_COORD_COMPLEX;
}

- (jboolean)isClosedPath {
  return NO;
}

- (void)pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  if (startPoint_ == nil && waitingForStartPoint_) {
    if (waitingPointSet_ == nil) waitingPointSet_ = new_JavaUtilHashSet_init();
    [((JavaUtilHashSet *) nil_chk(waitingPointSet_)) addWithId:P];
    return;
  }
  if (pathSegment_ == nil) OrgGeogebraCommonKernelGeosGeoVector_updatePathSegment(self);
  [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(pathSegment_)) pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
}

- (void)pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:P]) {
    [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  OrgGeogebraCommonKernelGeosGeoVector_updatePathSegment(self);
  [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(pathSegment_)) pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
}

- (jboolean)isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P
                                                       withDouble:(jdouble)eps {
  OrgGeogebraCommonKernelGeosGeoVector_updatePathSegment(self);
  return [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(pathSegment_)) isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:P withDouble:eps];
}

- (jboolean)isPath {
  return YES;
}

- (jdouble)getMinParameter {
  return 0;
}

- (jdouble)getMaxParameter {
  return 1;
}

- (id<OrgGeogebraCommonKernelPathMover>)createPathMover {
  return new_OrgGeogebraCommonKernelPathMoverGeneric_initWithOrgGeogebraCommonKernelPath_(self);
}

- (void)initPathSegment {
  OrgGeogebraCommonKernelGeosGeoVector_initPathSegment(self);
}

- (void)updatePathSegment {
  OrgGeogebraCommonKernelGeosGeoVector_updatePathSegment(self);
}

- (jboolean)isGeoVector {
  return YES;
}

- (jboolean)isAlwaysFixed {
  return NO;
}

- (jboolean)isMatrixTransformable {
  return YES;
}

+ (void)buildLatexValueStringCoordCartesian3DWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                     withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                                    withDouble:(jdouble)x
                                                                    withDouble:(jdouble)y
                                                                    withDouble:(jdouble)z
                                                     withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)vector
                                                                   withBoolean:(jboolean)symbolic {
  OrgGeogebraCommonKernelGeosGeoVector_buildLatexValueStringCoordCartesian3DWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelKernelNDGeoVectorND_withBoolean_(kernel, tpl, x, y, z, sb, vector, symbolic);
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  if (sb_ == nil) sb_ = new_JavaLangStringBuilder_init();
  else [sb_ setLengthWithInt:0];
  return OrgGeogebraCommonKernelGeosGeoVector_buildLatexStringWithOrgGeogebraCommonKernelKernel_withJavaLangStringBuilder_withBoolean_withOrgGeogebraCommonKernelStringTemplate_withInt_withDouble_withDouble_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(kernel_, sb_, symbolic, tpl, toStringMode_, x_, y_, self);
}

+ (NSString *)buildLatexStringWithOrgGeogebraCommonKernelKernel:(OrgGeogebraCommonKernelKernel *)kernel
                                      withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                    withBoolean:(jboolean)symbolic
                      withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl
                                                        withInt:(jint)toStringMode
                                                     withDouble:(jdouble)x
                                                     withDouble:(jdouble)y
                 withOrgGeogebraCommonKernelKernelNDGeoVectorND:(id<OrgGeogebraCommonKernelKernelNDGeoVectorND>)vector {
  return OrgGeogebraCommonKernelGeosGeoVector_buildLatexStringWithOrgGeogebraCommonKernelKernel_withJavaLangStringBuilder_withBoolean_withOrgGeogebraCommonKernelStringTemplate_withInt_withDouble_withDouble_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(kernel, sb, symbolic, tpl, toStringMode, x, y, vector);
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCoordsInD2 {
  OrgGeogebraCommonKernelMatrixCoords *ret = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(3);
  [ret setXWithDouble:[self getX]];
  [ret setYWithDouble:[self getY]];
  [ret setZWithDouble:[self getZ]];
  return ret;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCoordsInD3 {
  OrgGeogebraCommonKernelMatrixCoords *ret = new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(4);
  [ret setXWithDouble:[self getX]];
  [ret setYWithDouble:[self getY]];
  [ret setZWithDouble:[self getZ]];
  return ret;
}

- (jboolean)hasDrawable3D {
  return YES;
}

- (void)updateStartPointPosition {
}

- (OrgGeogebraCommonKernelMatrixCoords *)getDirectionInD3 {
  return [self getCoordsInD3];
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  jdouble x1 = a00 * x_ + a01 * y_ + a02 * 1;
  jdouble y1 = a10 * x_ + a11 * y_ + a12 * 1;
  jdouble z1 = a20 * x_ + a21 * y_ + a22 * 1;
  OrgGeogebraCommonKernelGeosGeoVector_setCoordsWithDouble_withDouble_withDouble_(self, x1 / z1, y1 / z1, 0);
}

- (jboolean)isLaTeXDrawableGeo {
  return YES;
}

- (void)updateColumnHeadingsForTraceValues {
  [self resetSpreadsheetColumnHeadings];
  [((JavaUtilArrayList *) nil_chk(spreadsheetColumnHeadings_)) addWithId:[self getColumnHeadingTextWithOrgGeogebraCommonKernelArithmeticExpressionNode:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) getXBracket], OrgGeogebraCommonPluginOperationEnum_get_PLUS(), new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getNameGeo], OrgGeogebraCommonPluginOperationEnum_get_PLUS(), [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) getCloseBracket]))]];
  [spreadsheetColumnHeadings_ addWithId:[self getColumnHeadingTextWithOrgGeogebraCommonKernelArithmeticExpressionNode:new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) getYBracket], OrgGeogebraCommonPluginOperationEnum_get_PLUS(), new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getNameGeo], OrgGeogebraCommonPluginOperationEnum_get_PLUS(), [((OrgGeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) getCloseBracket]))]];
}

- (OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)getTraceModes {
  return OrgGeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_SEVERAL_VALUES_OR_COPY();
}

- (NSString *)getTraceDialogAsValues {
  NSString *name = [self getLabelTextOrHTMLWithBoolean:NO];
  JavaLangStringBuilder *sbTrace = new_JavaLangStringBuilder_init();
  (void) [sbTrace appendWithNSString:@"x("];
  (void) [sbTrace appendWithNSString:name];
  (void) [sbTrace appendWithNSString:@"), y("];
  (void) [sbTrace appendWithNSString:name];
  (void) [sbTrace appendWithNSString:@")"];
  return [sbTrace description];
}

- (void)addToSpreadsheetTraceListWithJavaUtilArrayList:(JavaUtilArrayList *)spreadsheetTraceList {
  OrgGeogebraCommonKernelGeosGeoNumeric *xx = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(OrgGeogebraCommonKernelGeosGeoVector_getInhomVec(self))) getX]);
  [((JavaUtilArrayList *) nil_chk(spreadsheetTraceList)) addWithId:xx];
  OrgGeogebraCommonKernelGeosGeoNumeric *yy = new_OrgGeogebraCommonKernelGeosGeoNumeric_initWithOrgGeogebraCommonKernelConstruction_withDouble_(cons_, [((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(OrgGeogebraCommonKernelGeosGeoVector_getInhomVec(self))) getY]);
  [spreadsheetTraceList addWithId:yy];
}

- (OrgGeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  if (algoParent_ != nil && ([OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_])) {
    return new_OrgGeogebraCommonKernelAlgosSymbolicParameters_initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo)));
  }
  return nil;
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if (algoParent_ != nil && ([OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_])) {
    [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (IOSIntArray *)getDegrees {
  if (algoParent_ != nil && ([OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_])) {
    return [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getDegrees];
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if (algoParent_ != nil && ([OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_])) {
    return [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getExactCoordinatesWithJavaUtilHashMap:values];
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (IOSObjectArray *)getPolynomials {
  if (algoParent_ != nil && [OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_]) {
    return [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getPolynomials];
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (IOSObjectArray *)getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (algoParent_ != nil && [OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo_class_() isInstance:algoParent_]) {
    return [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
  return nil;
}

- (IOSObjectArray *)getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (algoParent_ != nil && [OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo_class_() isInstance:algoParent_]) {
    return [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))) getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
  @throw new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init();
}

- (IOSDoubleArray *)getInhomCoords {
  IOSDoubleArray *ret = [IOSDoubleArray newArrayWithLength:2];
  *IOSDoubleArray_GetRef(ret, 0) = [self getX];
  *IOSDoubleArray_GetRef(ret, 1) = [self getY];
  return ret;
}

- (void)updateLocation {
  [self updateGeo];
  [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateLocationWithOrgGeogebraCommonKernelGeosGeoElement:self];
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoVector", NULL, 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x11, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withDouble:withDouble:withDouble:", "GeoVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoVector:", "GeoVector", NULL, 0x1, NULL, NULL },
    { "setCoordsWithDouble:withDouble:withDouble:", "setCoords", "V", 0x11, NULL, NULL },
    { "setCoordsWithDoubleArray:", "setCoords", "V", 0x11, NULL, NULL },
    { "setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:", "setCoords", "V", 0x11, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setPolarCoordsWithDouble:withDouble:", "setPolarCoords", "V", 0x11, NULL, NULL },
    { "setCoordsWithOrgGeogebraCommonKernelGeosGeoVec2D:", "setCoords", "V", 0x11, NULL, NULL },
    { "getInhomVec", NULL, "Lorg.geogebra.common.kernel.geos.GeoVec2D;", 0x11, NULL, NULL },
    { "getStartPoint", NULL, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x11, NULL, NULL },
    { "getStartPoints", NULL, "[Lorg.geogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "hasAbsoluteLocation", NULL, "Z", 0x1, NULL, NULL },
    { "setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "setStartPoint", "V", 0x1, "Lorg.geogebra.common.kernel.CircularDefinitionException;", NULL },
    { "initStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:withInt:", "initStartPoint", "V", 0x1, NULL, NULL },
    { "removeStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "removeStartPoint", "V", 0x1, NULL, NULL },
    { "setStartPointWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "setStartPoint", "V", 0x1, "Lorg.geogebra.common.kernel.CircularDefinitionException;", NULL },
    { "setWaitForStartPoint", NULL, "V", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "isFinite", NULL, "Z", 0x11, NULL, NULL },
    { "isInfinite", NULL, "Z", 0x11, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x14, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x11, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x11, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x11, NULL, NULL },
    { "translateWithOrgGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toStringMinimalWithOrgGeogebraCommonKernelStringTemplate:", "toStringMinimal", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "buildValueStringWithOrgGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x2, NULL, NULL },
    { "getVector", NULL, "Lorg.geogebra.common.kernel.geos.GeoVec2D;", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToNonComplex2DVector", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToVectorNotPoint", NULL, "Z", 0x1, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lorg.geogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "initPathSegment", NULL, "V", 0x2, NULL, NULL },
    { "updatePathSegment", NULL, "V", 0x2, NULL, NULL },
    { "isGeoVector", NULL, "Z", 0x1, NULL, NULL },
    { "isAlwaysFixed", NULL, "Z", 0x1, NULL, NULL },
    { "isMatrixTransformable", NULL, "Z", 0x1, NULL, NULL },
    { "buildLatexValueStringCoordCartesian3DWithOrgGeogebraCommonKernelKernel:withOrgGeogebraCommonKernelStringTemplate:withDouble:withDouble:withDouble:withJavaLangStringBuilder:withOrgGeogebraCommonKernelKernelNDGeoVectorND:withBoolean:", "buildLatexValueStringCoordCartesian3D", "V", 0x19, NULL, NULL },
    { "toLaTeXStringWithBoolean:withOrgGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "buildLatexStringWithOrgGeogebraCommonKernelKernel:withJavaLangStringBuilder:withBoolean:withOrgGeogebraCommonKernelStringTemplate:withInt:withDouble:withDouble:withOrgGeogebraCommonKernelKernelNDGeoVectorND:", "buildLatexString", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "getCoordsInD2", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsInD3", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "updateStartPointPosition", NULL, "V", 0x1, NULL, NULL },
    { "getDirectionInD3", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "updateColumnHeadingsForTraceValues", NULL, "V", 0x1, NULL, NULL },
    { "getTraceModes", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$TraceModesEnum;", 0x1, NULL, NULL },
    { "getTraceDialogAsValues", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "addToSpreadsheetTraceListWithJavaUtilArrayList:", "addToSpreadsheetTraceList", "V", 0x1, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lorg.geogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lorg.geogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getInhomCoords", NULL, "[D", 0x1, NULL, NULL },
    { "updateLocation", NULL, "V", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "startPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "pathSegment_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoSegment;", NULL, NULL,  },
    { "pathStartPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "pathEndPoint_", NULL, 0x2, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "waitingForStartPoint_", NULL, 0x2, "Z", NULL, NULL,  },
    { "waitingPointSet_", NULL, 0x2, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lorg/geogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "sbToString_GeoVector_", "sbToString", 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sbBuildValueString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoVector = { 2, "GeoVector", "org.geogebra.common.kernel.geos", NULL, 0x11, 80, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoVector;
}

@end

void OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoVector *self, OrgGeogebraCommonKernelConstruction *c) {
  (void) OrgGeogebraCommonKernelGeosGeoVec3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->waitingForStartPoint_ = NO;
  self->sbToString_GeoVector_ = new_JavaLangStringBuilder_initWithInt_(50);
  self->sbBuildValueString_ = new_JavaLangStringBuilder_initWithInt_(50);
  [self setConstructionDefaults];
}

OrgGeogebraCommonKernelGeosGeoVector *new_OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoVector *self = [OrgGeogebraCommonKernelGeosGeoVector alloc];
  OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoVector *self, OrgGeogebraCommonKernelConstruction *c, NSString *label, jdouble x, jdouble y, jdouble z) {
  (void) OrgGeogebraCommonKernelGeosGeoVec3D_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self, c, x, y, z);
  self->waitingForStartPoint_ = NO;
  self->sbToString_GeoVector_ = new_JavaLangStringBuilder_initWithInt_(50);
  self->sbBuildValueString_ = new_JavaLangStringBuilder_initWithInt_(50);
  [self setConstructionDefaults];
  [self setLabelWithNSString:label];
}

OrgGeogebraCommonKernelGeosGeoVector *new_OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(OrgGeogebraCommonKernelConstruction *c, NSString *label, jdouble x, jdouble y, jdouble z) {
  OrgGeogebraCommonKernelGeosGeoVector *self = [OrgGeogebraCommonKernelGeosGeoVector alloc];
  OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self, c, label, x, y, z);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelGeosGeoVector_(OrgGeogebraCommonKernelGeosGeoVector *self, OrgGeogebraCommonKernelGeosGeoVector *vector) {
  (void) OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelConstruction_(self, ((OrgGeogebraCommonKernelGeosGeoVector *) nil_chk(vector))->cons_);
  [self setWithOrgGeogebraCommonKernelGeosGeoElement:vector];
}

OrgGeogebraCommonKernelGeosGeoVector *new_OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelGeosGeoVector_(OrgGeogebraCommonKernelGeosGeoVector *vector) {
  OrgGeogebraCommonKernelGeosGeoVector *self = [OrgGeogebraCommonKernelGeosGeoVector alloc];
  OrgGeogebraCommonKernelGeosGeoVector_initWithOrgGeogebraCommonKernelGeosGeoVector_(self, vector);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoVector_setCoordsWithDouble_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoVector *self, jdouble x, jdouble y, jdouble z) {
  self->x_ = x;
  self->y_ = y;
  self->z_ = z;
}

OrgGeogebraCommonKernelGeosGeoVec2D *OrgGeogebraCommonKernelGeosGeoVector_getInhomVec(OrgGeogebraCommonKernelGeosGeoVector *self) {
  return new_OrgGeogebraCommonKernelGeosGeoVec2D_initWithOrgGeogebraCommonKernelKernel_withDouble_withDouble_(self->kernel_, self->x_, self->y_);
}

jboolean OrgGeogebraCommonKernelGeosGeoVector_isFinite(OrgGeogebraCommonKernelGeosGeoVector *self) {
  return !OrgGeogebraCommonKernelGeosGeoVector_isInfinite(self);
}

jboolean OrgGeogebraCommonKernelGeosGeoVector_isInfinite(OrgGeogebraCommonKernelGeosGeoVector *self) {
  return JavaLangDouble_isInfiniteWithDouble_(self->x_) || JavaLangDouble_isInfiniteWithDouble_(self->y_);
}

JavaLangStringBuilder *OrgGeogebraCommonKernelGeosGeoVector_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoVector *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  [((JavaLangStringBuilder *) nil_chk(self->sbBuildValueString_)) setLengthWithInt:0];
  switch ([[((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
    case OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    (void) [self->sbBuildValueString_ appendWithNSString:@"ggbvect["];
    (void) [self->sbBuildValueString_ appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(OrgGeogebraCommonKernelGeosGeoVector_getInhomVec(self))) getX] withOrgGeogebraCommonKernelStringTemplate:tpl]];
    (void) [self->sbBuildValueString_ appendWithChar:','];
    (void) [self->sbBuildValueString_ appendWithNSString:[self->kernel_ formatWithDouble:[((OrgGeogebraCommonKernelGeosGeoVec2D *) nil_chk(OrgGeogebraCommonKernelGeosGeoVector_getInhomVec(self))) getY] withOrgGeogebraCommonKernelStringTemplate:tpl]];
    (void) [self->sbBuildValueString_ appendWithNSString:@"]"];
    return self->sbBuildValueString_;
    default:
    ;
  }
  switch (self->toStringMode_) {
    case OrgGeogebraCommonKernelKernel_COORD_POLAR:
    (void) [self->sbBuildValueString_ appendWithNSString:@"("];
    (void) [self->sbBuildValueString_ appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(self->x_, self->y_) withOrgGeogebraCommonKernelStringTemplate:tpl]];
    (void) [self->sbBuildValueString_ appendWithNSString:@"; "];
    (void) [self->sbBuildValueString_ appendWithJavaLangCharSequence:[self->kernel_ formatAngleWithDouble:JavaLangMath_atan2WithDouble_withDouble_(self->y_, self->x_) withOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:NO]];
    (void) [self->sbBuildValueString_ appendWithNSString:@")"];
    break;
    case OrgGeogebraCommonKernelKernel_COORD_COMPLEX:
    (void) [self->sbBuildValueString_ appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:self->x_ withOrgGeogebraCommonKernelStringTemplate:tpl]];
    (void) [self->sbBuildValueString_ appendWithNSString:@" "];
    [self->kernel_ formatSignedWithDouble:self->y_ withJavaLangStringBuilder:self->sbBuildValueString_ withOrgGeogebraCommonKernelStringTemplate:tpl];
    (void) [self->sbBuildValueString_ appendWithNSString:OrgGeogebraCommonUtilUnicode_get_IMAGINARY_()];
    break;
    case OrgGeogebraCommonKernelKernel_COORD_CARTESIAN_3D:
    OrgGeogebraCommonKernelGeosGeoPoint_buildValueStringCoordCartesian3DWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(self->kernel_, tpl, self->x_, self->y_, 0, self->sbBuildValueString_);
    break;
    case OrgGeogebraCommonKernelKernel_COORD_SPHERICAL:
    OrgGeogebraCommonKernelGeosGeoPoint_buildValueStringCoordSphericalWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(self->kernel_, tpl, self->x_, self->y_, 0, self->sbBuildValueString_);
    break;
    default:
    (void) [self->sbBuildValueString_ appendWithNSString:@"("];
    (void) [self->sbBuildValueString_ appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:self->x_ withOrgGeogebraCommonKernelStringTemplate:tpl]];
    switch ([tpl getCoordStyleWithInt:[self->kernel_ getCoordStyle]]) {
      case OrgGeogebraCommonKernelKernel_COORD_STYLE_AUSTRIAN:
      (void) [self->sbBuildValueString_ appendWithNSString:@" | "];
      break;
      default:
      (void) [self->sbBuildValueString_ appendWithNSString:@", "];
    }
    (void) [self->sbBuildValueString_ appendWithNSString:[self->kernel_ formatWithDouble:self->y_ withOrgGeogebraCommonKernelStringTemplate:tpl]];
    (void) [self->sbBuildValueString_ appendWithNSString:@")"];
    break;
  }
  return self->sbBuildValueString_;
}

void OrgGeogebraCommonKernelGeosGeoVector_initPathSegment(OrgGeogebraCommonKernelGeosGeoVector *self) {
  if (self->startPoint_ != nil && ![self->startPoint_ isGeoElement3D]) {
    self->pathStartPoint_ = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->startPoint_, [OrgGeogebraCommonKernelGeosGeoPoint class]);
  }
  else {
    self->pathStartPoint_ = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
    [self->pathStartPoint_ setCoordsWithDouble:0 withDouble:0 withDouble:1];
  }
  self->pathEndPoint_ = new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(self->cons_);
  self->pathSegment_ = new_OrgGeogebraCommonKernelGeosGeoSegment_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_(self->cons_, self->pathStartPoint_, self->pathEndPoint_);
}

void OrgGeogebraCommonKernelGeosGeoVector_updatePathSegment(OrgGeogebraCommonKernelGeosGeoVector *self) {
  if (self->pathSegment_ == nil) OrgGeogebraCommonKernelGeosGeoVector_initPathSegment(self);
  [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->pathEndPoint_)) setCoordsWithDouble:((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->pathStartPoint_))->inhomX_ + self->x_ withDouble:self->pathStartPoint_->inhomY_ + self->y_ withDouble:1.0];
  OrgGeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoPoint_withOrgGeogebraCommonKernelGeosGeoLine_(self->pathStartPoint_, self->pathEndPoint_, self->pathSegment_);
  [((OrgGeogebraCommonKernelGeosGeoSegment *) nil_chk(self->pathSegment_)) calcLength];
}

void OrgGeogebraCommonKernelGeosGeoVector_buildLatexValueStringCoordCartesian3DWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelKernelNDGeoVectorND_withBoolean_(OrgGeogebraCommonKernelKernel *kernel, OrgGeogebraCommonKernelStringTemplate *tpl, jdouble x, jdouble y, jdouble z, JavaLangStringBuilder *sb, id<OrgGeogebraCommonKernelKernelNDGeoVectorND> vector, jboolean symbolic) {
  OrgGeogebraCommonKernelGeosGeoVector_initialize();
  IOSObjectArray *inputs;
  if (symbolic && [OrgGeogebraCommonKernelAlgosDependentAlgo_class_() isInstance:[((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(vector)) getParentAlgorithm]]) {
    OrgGeogebraCommonKernelAlgosAlgoElement *algo = [vector getParentAlgorithm];
    NSString *symbolicStr = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
    jint firstIndex = [((NSString *) nil_chk(symbolicStr)) indexOfString:@"\\left("];
    jint lastIndex = [symbolicStr lastIndexOfString:@"\\right)"];
    inputs = [((NSString *) nil_chk([symbolicStr substring:firstIndex + 6 endIndex:lastIndex])) split:@","];
  }
  else {
    inputs = [IOSObjectArray newArrayWithLength:3 type:NSString_class_()];
    (void) IOSObjectArray_Set(inputs, 0, [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:x withOrgGeogebraCommonKernelStringTemplate:tpl]);
    (void) IOSObjectArray_Set(inputs, 1, [kernel formatWithDouble:y withOrgGeogebraCommonKernelStringTemplate:tpl]);
    (void) IOSObjectArray_Set(inputs, 2, [kernel formatWithDouble:z withOrgGeogebraCommonKernelStringTemplate:tpl]);
  }
  if (((IOSObjectArray *) nil_chk(inputs))->size_ == 3 && [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getApplication])) isHTML5Applet]) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\openparenonly{\\closeparenonly{\\ggbtable{\\ggbtr{\\ggbtd{"];
    (void) [sb appendWithNSString:IOSObjectArray_Get(inputs, 0)];
    (void) [sb appendWithNSString:@"}}\\ggbtr{\\ggbtd{"];
    (void) [sb appendWithNSString:IOSObjectArray_Get(inputs, 1)];
    (void) [sb appendWithNSString:@"}}\\ggbtr{\\ggbtd{"];
    (void) [sb appendWithNSString:IOSObjectArray_Get(inputs, 2)];
    (void) [sb appendWithNSString:@"}}}}}"];
    return;
  }
  jboolean alignOnDecimalPoint = YES;
  for (jint i = 0; i < inputs->size_; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(inputs, i))) indexOf:'.'] == -1) {
      alignOnDecimalPoint = NO;
      continue;
    }
  }
  if (alignOnDecimalPoint) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\left( \\begin{tabular}{r@{.}l}"];
    for (jint i = 0; i < inputs->size_; i++) {
      (void) IOSObjectArray_Set(inputs, i, [((NSString *) nil_chk(IOSObjectArray_Get(inputs, i))) replace:'.' withChar:'&']);
    }
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\left( \\begin{tabular}{r}"];
  }
  for (jint i = 0; i < inputs->size_; i++) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:IOSObjectArray_Get(inputs, i)];
    (void) [sb appendWithNSString:@" \\\\ "];
  }
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\end{tabular} \\right)"];
}

NSString *OrgGeogebraCommonKernelGeosGeoVector_buildLatexStringWithOrgGeogebraCommonKernelKernel_withJavaLangStringBuilder_withBoolean_withOrgGeogebraCommonKernelStringTemplate_withInt_withDouble_withDouble_withOrgGeogebraCommonKernelKernelNDGeoVectorND_(OrgGeogebraCommonKernelKernel *kernel, JavaLangStringBuilder *sb, jboolean symbolic, OrgGeogebraCommonKernelStringTemplate *tpl, jint toStringMode, jdouble x, jdouble y, id<OrgGeogebraCommonKernelKernelNDGeoVectorND> vector) {
  OrgGeogebraCommonKernelGeosGeoVector_initialize();
  {
    IOSObjectArray *inputs;
    switch (toStringMode) {
      case OrgGeogebraCommonKernelKernel_COORD_POLAR:
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"("];
      (void) [sb appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x, y) withOrgGeogebraCommonKernelStringTemplate:tpl]];
      (void) [sb appendWithNSString:@"; "];
      (void) [sb appendWithJavaLangCharSequence:[kernel formatAngleWithDouble:JavaLangMath_atan2WithDouble_withDouble_(y, x) withOrgGeogebraCommonKernelStringTemplate:tpl withBoolean:NO]];
      (void) [sb appendWithNSString:@")"];
      break;
      case OrgGeogebraCommonKernelKernel_COORD_COMPLEX:
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:x withOrgGeogebraCommonKernelStringTemplate:tpl]];
      (void) [sb appendWithNSString:@" "];
      [kernel formatSignedWithDouble:y withJavaLangStringBuilder:sb withOrgGeogebraCommonKernelStringTemplate:tpl];
      (void) [sb appendWithNSString:OrgGeogebraCommonUtilUnicode_get_IMAGINARY_()];
      break;
      case OrgGeogebraCommonKernelKernel_COORD_CARTESIAN_3D:
      OrgGeogebraCommonKernelGeosGeoVector_buildLatexValueStringCoordCartesian3DWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_withOrgGeogebraCommonKernelKernelNDGeoVectorND_withBoolean_(kernel, tpl, x, y, 0, sb, vector, symbolic);
      break;
      case OrgGeogebraCommonKernelKernel_COORD_SPHERICAL:
      OrgGeogebraCommonKernelGeosGeoPoint_buildValueStringCoordSphericalWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(kernel, tpl, x, y, 0, sb);
      break;
      default:
      if (symbolic && [[((id<OrgGeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(vector)) getParentAlgorithm] isKindOfClass:[OrgGeogebraCommonKernelAlgosAlgoDependentVector class]]) {
        OrgGeogebraCommonKernelAlgosAlgoDependentVector *algo = (OrgGeogebraCommonKernelAlgosAlgoDependentVector *) check_class_cast([vector getParentAlgorithm], [OrgGeogebraCommonKernelAlgosAlgoDependentVector class]);
        OrgGeogebraCommonKernelArithmeticExpressionNode *en = [((OrgGeogebraCommonKernelAlgosAlgoDependentVector *) nil_chk(algo)) getExpression];
        id<OrgGeogebraCommonKernelArithmeticExpressionValue> ev = [((OrgGeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) unwrap];
        if ([ev isKindOfClass:[OrgGeogebraCommonKernelArithmeticMyVecNode class]]) {
          OrgGeogebraCommonKernelArithmeticMyVecNode *vn = (OrgGeogebraCommonKernelArithmeticMyVecNode *) check_class_cast(ev, [OrgGeogebraCommonKernelArithmeticMyVecNode class]);
          inputs = [IOSObjectArray newArrayWithLength:2 type:NSString_class_()];
          (void) IOSObjectArray_Set(inputs, 0, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((OrgGeogebraCommonKernelArithmeticMyVecNode *) nil_chk(vn)) getX])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]);
          (void) IOSObjectArray_Set(inputs, 1, [((id<OrgGeogebraCommonKernelArithmeticExpressionValue>) nil_chk([vn getY])) toStringWithOrgGeogebraCommonKernelStringTemplate:tpl]);
        }
        else {
          return [algo toStringWithOrgGeogebraCommonKernelStringTemplate:tpl];
        }
      }
      else {
        inputs = [IOSObjectArray newArrayWithLength:2 type:NSString_class_()];
        (void) IOSObjectArray_Set(inputs, 0, [((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:x withOrgGeogebraCommonKernelStringTemplate:tpl]);
        (void) IOSObjectArray_Set(inputs, 1, [kernel formatWithDouble:y withOrgGeogebraCommonKernelStringTemplate:tpl]);
      }
      if (((IOSObjectArray *) nil_chk(inputs))->size_ == 2 && [((OrgGeogebraCommonMainApp *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel)) getApplication])) isHTML5Applet]) {
        (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" \\binom{ "];
        (void) [sb appendWithNSString:IOSObjectArray_Get(inputs, 0)];
        (void) [sb appendWithNSString:@" }{ "];
        (void) [sb appendWithNSString:IOSObjectArray_Get(inputs, 1)];
        (void) [sb appendWithNSString:@" }"];
      }
      else {
        jboolean alignOnDecimalPoint = YES;
        for (jint i = 0; i < inputs->size_; i++) {
          if ([((NSString *) nil_chk(IOSObjectArray_Get(inputs, i))) indexOf:'.'] == -1) {
            alignOnDecimalPoint = NO;
            continue;
          }
        }
        if (alignOnDecimalPoint) {
          (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\left( \\begin{tabular}{r@{.}l}"];
          for (jint i = 0; i < inputs->size_; i++) {
            (void) IOSObjectArray_Set(inputs, i, [((NSString *) nil_chk(IOSObjectArray_Get(inputs, i))) replace:'.' withChar:'&']);
          }
        }
        else {
          (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\left( \\begin{tabular}{r}"];
        }
        for (jint i = 0; i < inputs->size_; i++) {
          (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:IOSObjectArray_Get(inputs, i)];
          (void) [sb appendWithNSString:@" \\\\ "];
        }
        (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\end{tabular} \\right)"];
      }
      break;
    }
  }
  return [((JavaLangStringBuilder *) nil_chk(sb)) description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoVector)
