//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeogebraiOS/GeogebraiOS/javasources/org/geogebra/common/kernel/geos/GeoLine.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "org/geogebra/common/kernel/Construction.h"
#include "org/geogebra/common/kernel/Kernel.h"
#include "org/geogebra/common/kernel/LocusEquation.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "org/geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/Path.h"
#include "org/geogebra/common/kernel/PathMover.h"
#include "org/geogebra/common/kernel/PathMoverGeneric.h"
#include "org/geogebra/common/kernel/PathParameter.h"
#include "org/geogebra/common/kernel/StringTemplate.h"
#include "org/geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "org/geogebra/common/kernel/algos/AlgoElement.h"
#include "org/geogebra/common/kernel/algos/ConstructionElement.h"
#include "org/geogebra/common/kernel/algos/EquationElementInterface.h"
#include "org/geogebra/common/kernel/algos/GetCommand.h"
#include "org/geogebra/common/kernel/algos/SymbolicParameters.h"
#include "org/geogebra/common/kernel/algos/SymbolicParametersAlgo.h"
#include "org/geogebra/common/kernel/algos/SymbolicParametersBotanaAlgo.h"
#include "org/geogebra/common/kernel/algos/TangentAlgo.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "org/geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "org/geogebra/common/kernel/arithmetic/Function.h"
#include "org/geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "org/geogebra/common/kernel/arithmetic/MyDouble.h"
#include "org/geogebra/common/kernel/arithmetic/NumberValue.h"
#include "org/geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "org/geogebra/common/kernel/commands/Commands.h"
#include "org/geogebra/common/kernel/geos/GeoConic.h"
#include "org/geogebra/common/kernel/geos/GeoElement.h"
#include "org/geogebra/common/kernel/geos/GeoFunction.h"
#include "org/geogebra/common/kernel/geos/GeoLine.h"
#include "org/geogebra/common/kernel/geos/GeoPoint.h"
#include "org/geogebra/common/kernel/geos/GeoVec3D.h"
#include "org/geogebra/common/kernel/kernelND/GeoLineND.h"
#include "org/geogebra/common/kernel/kernelND/GeoPointND.h"
#include "org/geogebra/common/kernel/locusequ/EquationScope.h"
#include "org/geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "org/geogebra/common/plugin/GeoClass.h"
#include "org/geogebra/common/plugin/Operation.h"
#include "org/geogebra/common/util/MyMath.h"

@interface OrgGeogebraCommonKernelGeosGeoLine () {
 @public
  jboolean showUndefinedInAlgebraView__;
  NSString *parameter_;
  OrgGeogebraCommonKernelPathParameter *tempPP_;
  JavaLangStringBuilder *sbToString_GeoLine_;
  JavaLangStringBuilder *sbBuildValueString_;
}

- (JavaLangStringBuilder *)getSbToString;

- (JavaLangStringBuilder *)buildValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl;

- (JavaLangStringBuilder *)getSbBuildValueString;

- (void)doPointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P;

- (OrgGeogebraCommonKernelMatrixCoords *)getStartCoordsInDWithInt:(jint)dimension;

- (OrgGeogebraCommonKernelMatrixCoords *)getDirectionInDWithInt:(jint)dimension;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoLine, parameter_, NSString *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoLine, tempPP_, OrgGeogebraCommonKernelPathParameter *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoLine, sbToString_GeoLine_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoLine, sbBuildValueString_, JavaLangStringBuilder *)

static jboolean OrgGeogebraCommonKernelGeosGeoLine_KEEP_LEADING_SIGN_ = YES;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoLine, KEEP_LEADING_SIGN_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(OrgGeogebraCommonKernelGeosGeoLine, KEEP_LEADING_SIGN_, jboolean)

static IOSObjectArray *OrgGeogebraCommonKernelGeosGeoLine_vars_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoLine, vars_, IOSObjectArray *)

static JavaLangStringBuilder *OrgGeogebraCommonKernelGeosGeoLine_sbToStringLHS_;
J2OBJC_STATIC_FIELD_GETTER(OrgGeogebraCommonKernelGeosGeoLine, sbToStringLHS_, JavaLangStringBuilder *)
J2OBJC_STATIC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoLine, sbToStringLHS_, JavaLangStringBuilder *)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoLine *self, jdouble x, jdouble y, jdouble z);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoLine_isOnFullLineWithOrgGeogebraCommonKernelGeosGeoPoint_withDouble_(OrgGeogebraCommonKernelGeosGeoLine *self, OrgGeogebraCommonKernelGeosGeoPoint *P, jdouble eps);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoLine_isOnFullLineWithOrgGeogebraCommonKernelMatrixCoords_withDouble_(OrgGeogebraCommonKernelGeosGeoLine *self, OrgGeogebraCommonKernelMatrixCoords *Pnd, jdouble eps);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelGeosGeoLine_isParallelWithOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelGeosGeoLine *self, OrgGeogebraCommonKernelGeosGeoLine *g);

__attribute__((unused)) static jdouble OrgGeogebraCommonKernelGeosGeoLine_distanceWithOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelGeosGeoLine *self, OrgGeogebraCommonKernelGeosGeoLine *g);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoLine_getInhomPointOnLineWithDoubleArray_(OrgGeogebraCommonKernelGeosGeoLine *self, IOSDoubleArray *p);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoLine_setStandardStartPoint(OrgGeogebraCommonKernelGeosGeoLine *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelGeosGeoLine_getStartPoint(OrgGeogebraCommonKernelGeosGeoLine *self);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelGeosGeoLine_getEndPoint(OrgGeogebraCommonKernelGeosGeoLine *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoLine_setModeWithInt_(OrgGeogebraCommonKernelGeosGeoLine *self, jint mode);

__attribute__((unused)) static JavaLangStringBuilder *OrgGeogebraCommonKernelGeosGeoLine_getSbToString(OrgGeogebraCommonKernelGeosGeoLine *self);

__attribute__((unused)) static JavaLangStringBuilder *OrgGeogebraCommonKernelGeosGeoLine_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoLine *self, OrgGeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static JavaLangStringBuilder *OrgGeogebraCommonKernelGeosGeoLine_getSbBuildValueString(OrgGeogebraCommonKernelGeosGeoLine *self);

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoLine_doPointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelGeosGeoLine *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P);

__attribute__((unused)) static OrgGeogebraCommonKernelMatrixCoords *OrgGeogebraCommonKernelGeosGeoLine_getStartCoordsInDWithInt_(OrgGeogebraCommonKernelGeosGeoLine *self, jint dimension);

__attribute__((unused)) static OrgGeogebraCommonKernelMatrixCoords *OrgGeogebraCommonKernelGeosGeoLine_getDirectionInDWithInt_(OrgGeogebraCommonKernelGeosGeoLine *self, jint dimension);

@interface OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine : OrgGeogebraCommonKernelPathMoverGeneric {
 @public
  OrgGeogebraCommonKernelGeosGeoLine *this$0_;
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)outer$;

- (void)init__WithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine)

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine, this$0_, OrgGeogebraCommonKernelGeosGeoLine *)

__attribute__((unused)) static void OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine_initWithOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine *self, OrgGeogebraCommonKernelGeosGeoLine *outer$);

__attribute__((unused)) static OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine *new_OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine_initWithOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelGeosGeoLine *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine)

J2OBJC_INITIALIZED_DEFN(OrgGeogebraCommonKernelGeosGeoLine)

@implementation OrgGeogebraCommonKernelGeosGeoLine

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c {
  OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
                                                    withInt:(jint)mode {
  OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_withInt_(self, c, mode);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)cons
                                               withNSString:(NSString *)label
                                                 withDouble:(jdouble)a
                                                 withDouble:(jdouble)b
                                                 withDouble:(jdouble)c {
  OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self, cons, label, a, b, c);
  return self;
}

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)line {
  OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelGeosGeoLine_(self, line);
  return self;
}

- (OrgGeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return OrgGeogebraCommonPluginGeoClassEnum_get_LINE();
}

- (OrgGeogebraCommonKernelGeosGeoLine *)copy__ {
  return [new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelGeosGeoLine_(self) autorelease];
}

- (void)setCoordsWithDouble:(jdouble)x
                 withDouble:(jdouble)y
                 withDouble:(jdouble)z {
  OrgGeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(self, x, y, z);
}

- (void)setLineThroughWithDouble:(jdouble)pointX
                      withDouble:(jdouble)pointY {
  OrgGeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(self, x_, y_, -((x_ * pointX) + (y_ * pointY)));
}

- (void)setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:(OrgGeogebraCommonKernelGeosGeoVec3D *)v {
  OrgGeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(self, ((OrgGeogebraCommonKernelGeosGeoVec3D *) nil_chk(v))->x_, v->y_, v->z_);
}

- (jboolean)isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p
                                                                    withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelGeosGeoLine_isOnFullLineWithOrgGeogebraCommonKernelGeosGeoPoint_withDouble_(self, p, eps);
}

- (jboolean)isOnFullLineWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P
                                                     withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelGeosGeoLine_isOnFullLineWithOrgGeogebraCommonKernelGeosGeoPoint_withDouble_(self, P, eps);
}

- (jboolean)isOnFullLineWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)Pnd
                                                     withDouble:(jdouble)eps {
  return OrgGeogebraCommonKernelGeosGeoLine_isOnFullLineWithOrgGeogebraCommonKernelMatrixCoords_withDouble_(self, Pnd, eps);
}

- (jboolean)isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)PI
                                                       withDouble:(jdouble)eps {
  OrgGeogebraCommonKernelGeosGeoPoint *P = (OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(PI, [OrgGeogebraCommonKernelGeosGeoPoint class]);
  if ([((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getPath] == self) {
    return YES;
  }
  if (!OrgGeogebraCommonKernelGeosGeoLine_isOnFullLineWithOrgGeogebraCommonKernelGeosGeoPoint_withDouble_(self, P, eps)) {
    return NO;
  }
  OrgGeogebraCommonPluginGeoClassEnum *classType = [self getGeoClassType];
  if ([((OrgGeogebraCommonPluginGeoClassEnum *) nil_chk(classType)) isEqual:OrgGeogebraCommonPluginGeoClassEnum_get_LINE()]) {
    return YES;
  }
  jdouble px = P->x_, py = P->y_, pz = P->z_;
  OrgGeogebraCommonKernelPathParameter *tempParam = [self getTempPathParameter];
  OrgGeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  [((OrgGeogebraCommonKernelPathParameter *) nil_chk(tempParam)) setWithOrgGeogebraCommonKernelPathParameter:pp];
  OrgGeogebraCommonKernelGeosGeoLine_doPointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND_(self, P);
  jboolean result;
  switch ([classType ordinal]) {
    case OrgGeogebraCommonPluginGeoClass_SEGMENT:
    result = (((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ >= -eps && pp->t_ <= 1 + eps);
    break;
    case OrgGeogebraCommonPluginGeoClass_RAY:
    result = (((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ >= -eps);
    break;
    default:
    result = YES;
  }
  P->x_ = px;
  P->y_ = py;
  P->z_ = pz;
  [((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp)) setWithOrgGeogebraCommonKernelPathParameter:tempParam];
  return result;
}

- (jboolean)isOnPathWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)Pnd
                                                 withDouble:(jdouble)eps {
  OrgGeogebraCommonKernelMatrixCoords *P2d = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(Pnd)) getCoordsIn2DView];
  return OrgGeogebraCommonKernelGeosGeoLine_isOnFullLineWithOrgGeogebraCommonKernelMatrixCoords_withDouble_(self, P2d, eps);
}

- (jboolean)respectLimitedPathWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords
                                                           withDouble:(jdouble)eps {
  return YES;
}

- (jdouble)getPossibleParameterWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords {
  OrgGeogebraCommonKernelPathParameter *tempParam = [self getTempPathParameter];
  [self doPointChangedWithOrgGeogebraCommonKernelMatrixCoords:coords withOrgGeogebraCommonKernelPathParameter:tempParam];
  return ((OrgGeogebraCommonKernelPathParameter *) nil_chk(tempParam))->t_;
}

- (OrgGeogebraCommonKernelPathParameter *)getTempPathParameter {
  if (tempPP_ == nil) OrgGeogebraCommonKernelGeosGeoLine_setAndConsume_tempPP_(self, new_OrgGeogebraCommonKernelPathParameter_init());
  return tempPP_;
}

- (jboolean)isParallelWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g {
  return OrgGeogebraCommonKernelGeosGeoLine_isParallelWithOrgGeogebraCommonKernelGeosGeoLine_(self, g);
}

- (jboolean)isSameDirectionWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g {
  return (((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g))->x_ * x_ >= 0) && (g->y_ * y_ >= 0) && OrgGeogebraCommonKernelGeosGeoLine_isParallelWithOrgGeogebraCommonKernelGeosGeoLine_(self, g);
}

- (jboolean)isPerpendicularWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g {
  return OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g))->x_ * x_, -g->y_ * y_);
}

- (jdouble)distanceWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p {
  return [self distanceWithDouble:((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_ withDouble:p->inhomY_];
}

- (jdouble)distanceWithDouble:(jdouble)x0
                   withDouble:(jdouble)y0 {
  return JavaLangMath_absWithDouble_((x_ * x0 + y_ * y0 + z_) / OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x_, y_));
}

- (jdouble)distanceHomWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p {
  return JavaLangMath_absWithDouble_((x_ * ((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->x_ / p->z_ + y_ * p->y_ / p->z_ + z_) / OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x_, y_));
}

- (jdouble)distanceHomWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)p {
  return JavaLangMath_absWithDouble_((x_ * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(p)) getX] / [p getZ] + y_ * [p getY] / [p getZ] + z_) / OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x_, y_));
}

- (jdouble)distanceWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)g {
  return OrgGeogebraCommonKernelGeosGeoLine_distanceWithOrgGeogebraCommonKernelGeosGeoLine_(self, g);
}

- (void)getDirectionWithOrgGeogebraCommonKernelGeosGeoVec3D:(OrgGeogebraCommonKernelGeosGeoVec3D *)outArg {
  [((OrgGeogebraCommonKernelGeosGeoVec3D *) nil_chk(outArg)) setCoordsWithDouble:y_ withDouble:-x_ withDouble:0.0];
}

- (void)getDirectionWithDoubleArray:(IOSDoubleArray *)dir {
  *IOSDoubleArray_GetRef(nil_chk(dir), 0) = y_;
  *IOSDoubleArray_GetRef(dir, 1) = -x_;
}

- (void)getInhomPointOnLineWithDoubleArray:(IOSDoubleArray *)p {
  OrgGeogebraCommonKernelGeosGeoLine_getInhomPointOnLineWithDoubleArray_(self, p);
}

- (void)getPointOnLineWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)p {
  if (startPoint_ != nil && [startPoint_ isFinite]) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:startPoint_];
  }
  else {
    if (JavaLangMath_absWithDouble_(x_) > JavaLangMath_absWithDouble_(y_)) {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setCoordsWithDouble:-z_ / x_ withDouble:0.0 withDouble:1.0];
    }
    else {
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setCoordsWithDouble:0.0 withDouble:-z_ / y_ withDouble:1.0];
    }
  }
}

- (void)setStandardStartPoint {
  OrgGeogebraCommonKernelGeosGeoLine_setStandardStartPoint(self);
}

- (void)setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)P {
  if (startPoint_ == P) return;
  OrgGeogebraCommonKernelGeosGeoLine_set_startPoint_(self, P);
  if (P != nil) [P addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self withBoolean:YES];
}

- (void)setEndPointWithOrgGeogebraCommonKernelGeosGeoPoint:(OrgGeogebraCommonKernelGeosGeoPoint *)Q {
  if (endPoint_ == Q) return;
  OrgGeogebraCommonKernelGeosGeoLine_set_endPoint_(self, Q);
  if (Q != nil) [Q addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self withBoolean:YES];
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getStartPoint {
  return OrgGeogebraCommonKernelGeosGeoLine_getStartPoint(self);
}

- (OrgGeogebraCommonKernelGeosGeoPoint *)getEndPoint {
  return OrgGeogebraCommonKernelGeosGeoLine_getEndPoint(self);
}

- (jboolean)isDefined {
  return (!(JavaLangDouble_isNaNWithDouble_(x_) || JavaLangDouble_isNaNWithDouble_(y_) || JavaLangDouble_isNaNWithDouble_(z_)) && !(OrgGeogebraCommonKernelKernel_isZeroWithDouble_(x_) && OrgGeogebraCommonKernelKernel_isZeroWithDouble_(y_)));
}

- (jboolean)showInEuclidianView {
  return [self isDefined];
}

- (jboolean)showInAlgebraView {
  return [self isLabelSet] && ([self isDefined] || showUndefinedInAlgebraView__);
}

- (void)showUndefinedInAlgebraViewWithBoolean:(jboolean)flag {
  showUndefinedInAlgebraView__ = flag;
}

- (void)setWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  [super setWithOrgGeogebraCommonKernelGeosGeoElement:geo];
  OrgGeogebraCommonKernelGeosGeoLine *l = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoLine class]);
  OrgGeogebraCommonKernelGeosGeoLine_set_parameter_(self, ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(l))->parameter_);
  toStringMode_ = l->toStringMode_;
}

- (jboolean)isEqualWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (![((OrgGeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined] || ![self isDefined]) {
    return NO;
  }
  if ([geo isGeoFunction]) {
    OrgGeogebraCommonKernelArithmeticPolyFunction *poly = [((OrgGeogebraCommonKernelArithmeticFunction *) nil_chk([((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunction class])) getFunction])) expandToPolyFunctionWithOrgGeogebraCommonKernelArithmeticExpressionValue:[((OrgGeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoFunction class])) getFunctionExpression] withBoolean:NO withBoolean:YES];
    if (poly == nil) {
      return NO;
    }
    jint degree = [((OrgGeogebraCommonKernelArithmeticPolyFunction *) nil_chk(poly)) getDegree];
    if (degree > 1) {
      return NO;
    }
    IOSDoubleArray *coeffs = [poly getCoeffs];
    if (degree == 0) {
      if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(x_, 0) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(-z_ / y_, IOSDoubleArray_Get(nil_chk(coeffs), 0))) {
        return YES;
      }
    }
    else {
      if (OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(-x_ / y_, IOSDoubleArray_Get(nil_chk(coeffs), 1)) && OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(-z_ / y_, IOSDoubleArray_Get(coeffs, 0))) {
        return YES;
      }
    }
    return NO;
  }
  if ([geo isGeoRay] || [geo isGeoSegment]) {
    return NO;
  }
  if ([geo isGeoLine]) {
    return [self linDepWithOrgGeogebraCommonKernelGeosGeoVec3D:(OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(geo, [OrgGeogebraCommonKernelGeosGeoLine class])];
  }
  return NO;
}

- (jboolean)isDefinedTangentWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c {
  jboolean isTangent = NO;
  id ob = [self getParentAlgorithm];
  if ([OrgGeogebraCommonKernelAlgosTangentAlgo_class_() isInstance:ob]) {
    IOSObjectArray *input = [((OrgGeogebraCommonKernelAlgosAlgoElement *) nil_chk(((OrgGeogebraCommonKernelAlgosAlgoElement *) check_class_cast(ob, [OrgGeogebraCommonKernelAlgosAlgoElement class])))) getInput];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input))->size_; i++) {
      if (IOSObjectArray_Get(input, i) == c) {
        isTangent = YES;
        break;
      }
    }
  }
  return isTangent;
}

- (jboolean)isDefinedAsymptoteWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)c {
  jboolean isAsymptote = NO;
  OrgGeogebraCommonKernelAlgosAlgoElement *ob = [self getParentAlgorithm];
  if (ob != nil && [((id<OrgGeogebraCommonKernelAlgosGetCommand>) nil_chk([ob getClassName])) isEqual:OrgGeogebraCommonKernelCommandsCommandsEnum_get_Asymptote()]) {
    IOSObjectArray *input = [ob getInput];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input))->size_; i++) {
      if (IOSObjectArray_Get(input, i) == c) {
        isAsymptote = YES;
        break;
      }
    }
  }
  return isAsymptote;
}

- (void)translateWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)v {
  z_ -= x_ * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX] + y_ * [v getY];
}

- (jboolean)isTranslateable {
  return YES;
}

- (void)dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)rval
                       withOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)S {
  jdouble r = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble];
  jdouble temp = (r - 1);
  z_ = temp * (x_ * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(S)) getX] + y_ * [S getY]) + r * z_;
  x_ *= r;
  y_ *= r;
  z_ *= r;
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiVal {
  [self rotateXYWithOrgGeogebraCommonKernelArithmeticNumberValue:phiVal];
}

- (void)rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:(id<OrgGeogebraCommonKernelArithmeticNumberValue>)phiVal
                 withOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)point {
  OrgGeogebraCommonKernelMatrixCoords *Q = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoords];
  jdouble phi = [((id<OrgGeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiVal)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  jdouble qx = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(Q)) getX];
  jdouble qy = [Q getY];
  jdouble x0 = x_ * cos - y_ * sin;
  jdouble y0 = x_ * sin + y_ * cos;
  z_ = z_ + (x_ * qx + y_ * qy) * (1.0 - cos) + (y_ * qx - x_ * qy) * sin;
  x_ = x0;
  y_ = y0;
}

- (void)mirrorWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)Q {
  jdouble qx = x_ * [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(Q)) getX];
  jdouble qy = y_ * [Q getY];
  z_ = z_ + 2.0 * (qx + qy);
  x_ = -x_;
  y_ = -y_;
}

- (void)mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g1 {
  OrgGeogebraCommonKernelGeosGeoLine *g = (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g1, [OrgGeogebraCommonKernelGeosGeoLine class]);
  jdouble qx, qy;
  if (JavaLangMath_absWithDouble_([((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g)) getX]) > JavaLangMath_absWithDouble_([g getY])) {
    qx = -[g getZ] / [g getX];
    qy = 0.0;
  }
  else {
    qx = 0.0;
    qy = -[g getZ] / [g getY];
  }
  jdouble phi = 2.0 * JavaLangMath_atan2WithDouble_withDouble_(-[g getX], [g getY]);
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  jdouble x0 = x_ * cos + y_ * sin;
  jdouble y0 = x_ * sin - y_ * cos;
  jdouble xqx = x_ * qx;
  jdouble yqy = y_ * qy;
  z_ += (xqx + yqy) + (yqy - xqx) * cos - (x_ * qy + y_ * qx) * sin;
  x_ = x0;
  y_ = y0;
  x_ = -x_;
  y_ = -y_;
  z_ = -z_;
}

- (void)setToParametricWithNSString:(NSString *)parameter {
  OrgGeogebraCommonKernelGeosGeoLine_setModeWithInt_(self, OrgGeogebraCommonKernelGeosGeoLine_PARAMETRIC);
  if (parameter != nil && ((jint) [parameter length]) > 0) OrgGeogebraCommonKernelGeosGeoLine_set_parameter_(self, parameter);
}

- (void)setToExplicit {
  OrgGeogebraCommonKernelGeosGeoLine_setModeWithInt_(self, OrgGeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT);
}

- (void)setToImplicit {
  OrgGeogebraCommonKernelGeosGeoLine_setModeWithInt_(self, OrgGeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT);
}

- (void)setModeWithInt:(jint)mode {
  OrgGeogebraCommonKernelGeosGeoLine_setModeWithInt_(self, mode);
}

- (NSString *)toStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToStr = OrgGeogebraCommonKernelGeosGeoLine_getSbToString(self);
  [((JavaLangStringBuilder *) nil_chk(sbToStr)) setLengthWithInt:0];
  [sbToStr appendWithNSString:label_];
  [sbToStr appendWithNSString:@": "];
  [sbToStr appendWithNSString:[((JavaLangStringBuilder *) nil_chk(OrgGeogebraCommonKernelGeosGeoLine_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl))) description]];
  return [sbToStr description];
}

- (JavaLangStringBuilder *)getSbToString {
  return OrgGeogebraCommonKernelGeosGeoLine_getSbToString(self);
}

- (NSString *)toValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return [((JavaLangStringBuilder *) nil_chk(OrgGeogebraCommonKernelGeosGeoLine_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl))) description];
}

- (NSString *)toStringMinimalWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToStr = OrgGeogebraCommonKernelGeosGeoLine_getSbToString(self);
  [((JavaLangStringBuilder *) nil_chk(sbToStr)) setLengthWithInt:0];
  [self getXMLtagsMinimalWithJavaLangStringBuilder:sbToStr withOrgGeogebraCommonKernelStringTemplate:tpl];
  return [sbToStr description];
}

- (JavaLangStringBuilder *)buildValueStringWithOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  return OrgGeogebraCommonKernelGeosGeoLine_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (JavaLangStringBuilder *)getSbBuildValueString {
  return OrgGeogebraCommonKernelGeosGeoLine_getSbBuildValueString(self);
}

- (void)toStringLHSWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
   withOrgGeogebraCommonKernelStringTemplate:(OrgGeogebraCommonKernelStringTemplate *)tpl {
  IOSDoubleArray *g = [IOSDoubleArray arrayWithLength:3];
  if ([self isDefined]) {
    *IOSDoubleArray_GetRef(g, 0) = x_;
    *IOSDoubleArray_GetRef(g, 1) = y_;
    *IOSDoubleArray_GetRef(g, 2) = z_;
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithJavaLangCharSequence:[((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) buildLHSWithDoubleArray:g withNSStringArray:OrgGeogebraCommonKernelGeosGeoLine_vars_ withBoolean:OrgGeogebraCommonKernelGeosGeoLine_KEEP_LEADING_SIGN_ withBoolean:YES withBoolean:NO withOrgGeogebraCommonKernelStringTemplate:tpl]];
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithJavaLangCharSequence:OrgGeogebraCommonKernelGeosGeoLine_sbToStringLHS_];
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [self getLineStyleXMLWithJavaLangStringBuilder:sb];
  switch (toStringMode_) {
    case OrgGeogebraCommonKernelGeosGeoLine_PARAMETRIC:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<eqnStyle style=\"parametric\" parameter=\""];
    [sb appendWithNSString:parameter_];
    [sb appendWithNSString:@"\"/>\n"];
    break;
    case OrgGeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<eqnStyle style=\"explicit\"/>\n"];
    break;
    case OrgGeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT_NON_CANONICAL:
    break;
    default:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<eqnStyle style=\"implicit\"/>\n"];
  }
}

- (jboolean)isClosedPath {
  return NO;
}

- (void)pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonKernelGeosGeoLine_doPointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND_(self, P);
}

- (void)doPointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  OrgGeogebraCommonKernelGeosGeoLine_doPointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND_(self, P);
}

- (void)doPointChangedWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)coords
                     withOrgGeogebraCommonKernelPathParameter:(OrgGeogebraCommonKernelPathParameter *)pp {
  jdouble px = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] / [coords getZ];
  jdouble py = [coords getY] / [coords getZ];
  jdouble t = -(z_ + x_ * px + y_ * py) / (x_ * x_ + y_ * y_);
  px += t * x_;
  py += t * y_;
  [coords setXWithDouble:px];
  [coords setYWithDouble:py];
  [coords setZWithDouble:1];
  jdouble spx = 0;
  jdouble spy = 0;
  jdouble spz = 1;
  if (startPoint_ != nil) {
    spx = startPoint_->x_;
    spy = startPoint_->y_;
    spz = startPoint_->z_;
  }
  else {
    if (x_ != 0 && y_ != 0) {
      spx = -z_ * x_ / (x_ * x_ + y_ * y_);
      spy = -z_ * y_ / (x_ * x_ + y_ * y_);
    }
    else if (x_ != 0) {
      spx = -z_ / x_;
    }
    else if (y_ != 0) {
      spy = -z_ / y_;
    }
  }
  if (JavaLangMath_absWithDouble_(x_) <= JavaLangMath_absWithDouble_(y_)) {
    ((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ = (spz * px - spx) / (y_ * spz);
  }
  else {
    ((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ = (spy - spz * py) / (x_ * spz);
  }
}

- (void)pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((OrgGeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithOrgGeogebraCommonKernelKernelNDGeoPointND:P]) {
    [self pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD2];
  OrgGeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  [self pathChangedWithOrgGeogebraCommonKernelMatrixCoords:coords withOrgGeogebraCommonKernelPathParameter:pp];
  [P setCoords2DWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
  [P updateCoordsFrom2DWithBoolean:NO withOrgGeogebraCommonKernelMatrixCoordSys:nil];
}

- (void)pathChangedWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)P
                  withOrgGeogebraCommonKernelPathParameter:(OrgGeogebraCommonKernelPathParameter *)pp {
  if (startPoint_ != nil) {
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:startPoint_->inhomX_ + ((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ * y_];
    [P setYWithDouble:startPoint_->inhomY_ - pp->t_ * x_];
    [P setZWithDouble:1.0];
  }
  else {
    jdouble inhomX = 0;
    jdouble inhomY = 0;
    if (x_ != 0 && y_ != 0) {
      inhomX = -z_ * x_ / (x_ * x_ + y_ * y_);
      inhomY = -z_ * y_ / (x_ * x_ + y_ * y_);
    }
    else if (x_ != 0) {
      inhomX = -z_ / x_;
    }
    else if (y_ != 0) {
      inhomY = -z_ / y_;
    }
    [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:inhomX + ((OrgGeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ * y_];
    [P setYWithDouble:inhomY - pp->t_ * x_];
    [P setZWithDouble:1.0];
  }
}

- (jboolean)isPath {
  return YES;
}

- (jboolean)isGeoLine {
  return YES;
}

- (jdouble)getMinParameter {
  return JavaLangDouble_NEGATIVE_INFINITY;
}

- (jdouble)getMaxParameter {
  return JavaLangDouble_POSITIVE_INFINITY;
}

- (id<OrgGeogebraCommonKernelPathMover>)createPathMover {
  return [new_OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine_initWithOrgGeogebraCommonKernelGeosGeoLine_(self) autorelease];
}

- (void)setZero {
  OrgGeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(self, 0, 1, 0);
}

- (NSString *)getAssignmentOperator {
  return @": ";
}

- (void)matrixTransformWithDouble:(jdouble)p
                       withDouble:(jdouble)q
                       withDouble:(jdouble)r
                       withDouble:(jdouble)s {
  jdouble x1, y1;
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(y_)) {
    x1 = s;
    y1 = -q;
    OrgGeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(self, x1 * x_, y1 * x_, -q * r * z_ + s * p * z_);
  }
  else {
    x1 = r * y_ - s * x_;
    y1 = q * x_ - p * y_;
    OrgGeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(self, x1 * y_, y1 * y_, q * z_ * x1 + s * z_ * y1);
  }
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getGeoFunction {
  OrgGeogebraCommonKernelGeosGeoFunction *ret;
  OrgGeogebraCommonKernelArithmeticFunctionVariable *fv = [new_OrgGeogebraCommonKernelArithmeticFunctionVariable_initWithOrgGeogebraCommonKernelKernel_(kernel_) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *xCoord = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *yCoord = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_YCOORD(), nil) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *zCoord = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, OrgGeogebraCommonPluginOperationEnum_get_ZCOORD(), nil) autorelease];
  OrgGeogebraCommonKernelArithmeticExpressionNode *temp = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, xCoord, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), yCoord) autorelease];
  temp = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_OrgGeogebraCommonKernelArithmeticMyDouble_initWithOrgGeogebraCommonKernelKernel_withDouble_(kernel_, -1.0) autorelease], OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), temp) autorelease];
  temp = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, temp, OrgGeogebraCommonPluginOperationEnum_get_MULTIPLY(), fv) autorelease];
  temp = [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, temp, OrgGeogebraCommonPluginOperationEnum_get_MINUS(), [new_OrgGeogebraCommonKernelArithmeticExpressionNode_initWithOrgGeogebraCommonKernelKernel_withOrgGeogebraCommonKernelArithmeticExpressionValue_withOrgGeogebraCommonPluginOperationEnum_withOrgGeogebraCommonKernelArithmeticExpressionValue_(kernel_, zCoord, OrgGeogebraCommonPluginOperationEnum_get_DIVIDE(), yCoord) autorelease]) autorelease];
  OrgGeogebraCommonKernelArithmeticFunction *fun = [new_OrgGeogebraCommonKernelArithmeticFunction_initWithOrgGeogebraCommonKernelArithmeticExpressionNode_withOrgGeogebraCommonKernelArithmeticFunctionVariable_(temp, fv) autorelease];
  if ([self isLabelSet] || ![self isIndependent]) {
    jboolean oldMacroMode = [((OrgGeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    ret = [((OrgGeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((OrgGeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) DependentFunctionWithNSString:nil withOrgGeogebraCommonKernelArithmeticFunction:fun];
    [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  else {
    ret = [new_OrgGeogebraCommonKernelGeosGeoFunction_initWithOrgGeogebraCommonKernelConstruction_(cons_) autorelease];
    [ret setFunctionWithOrgGeogebraCommonKernelArithmeticFunction:fun];
  }
  return ret;
}

- (jboolean)isGeoFunctionable {
  return YES;
}

- (jboolean)isMatrixTransformable {
  return YES;
}

- (void)toGeoConicWithOrgGeogebraCommonKernelGeosGeoConic:(OrgGeogebraCommonKernelGeosGeoConic *)con {
  [((OrgGeogebraCommonKernelGeosGeoConic *) nil_chk(con)) fromLineWithOrgGeogebraCommonKernelGeosGeoLine:self];
}

- (jdouble)evaluateWithDouble:(jdouble)x_var {
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(y_)) return JavaLangDouble_NaN;
  return (-x_ * x_var - z_) / y_;
}

- (jboolean)hasDrawable3D {
  return YES;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self getPointInDWithInt:3 withDouble:0.5])) getInhomCoordsInSameDimension];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getPointInDWithInt:(jint)dimension
                                                 withDouble:(jdouble)lambda {
  return [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(OrgGeogebraCommonKernelGeosGeoLine_getStartCoordsInDWithInt_(self, dimension))) addWithOrgGeogebraCommonKernelMatrixCoords:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(OrgGeogebraCommonKernelGeosGeoLine_getDirectionInDWithInt_(self, dimension))) mulWithDouble:lambda]];
}

- (OrgGeogebraCommonKernelMatrixCoords *)getStartCoordsInDWithInt:(jint)dimension {
  return OrgGeogebraCommonKernelGeosGeoLine_getStartCoordsInDWithInt_(self, dimension);
}

- (OrgGeogebraCommonKernelMatrixCoords *)getDirectionInDWithInt:(jint)dimension {
  return OrgGeogebraCommonKernelGeosGeoLine_getDirectionInDWithInt_(self, dimension);
}

- (OrgGeogebraCommonKernelMatrixCoords *)getMainDirection {
  return OrgGeogebraCommonKernelGeosGeoLine_getDirectionInDWithInt_(self, 3);
}

- (OrgGeogebraCommonKernelMatrixCoords *)getDirectionForEquation {
  return OrgGeogebraCommonKernelGeosGeoLine_getDirectionInDWithInt_(self, 3);
}

- (OrgGeogebraCommonKernelMatrixCoords *)getCartesianEquationVectorWithOrgGeogebraCommonKernelMatrixCoordMatrix:(OrgGeogebraCommonKernelMatrixCoordMatrix *)m {
  if (m == nil) {
    return [new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(x_, y_, z_) autorelease];
  }
  OrgGeogebraCommonKernelMatrixCoords *o = [self getStartInhomCoords];
  OrgGeogebraCommonKernelMatrixCoords *d = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self getEndInhomCoords])) subWithOrgGeogebraCommonKernelMatrixCoords:o];
  return OrgGeogebraCommonKernelMatrixCoordMatrixUtil_lineEquationVectorWithOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoords_withOrgGeogebraCommonKernelMatrixCoordMatrix_(o, d, m);
}

- (OrgGeogebraCommonKernelMatrixCoords *)getStartInhomCoords {
  if (startPoint_ != nil && [startPoint_ isFinite]) {
    return [startPoint_ getInhomCoordsInD3];
  }
  return OrgGeogebraCommonKernelGeosGeoLine_getStartCoordsInDWithInt_(self, 3);
}

- (OrgGeogebraCommonKernelMatrixCoords *)getEndInhomCoords {
  if (OrgGeogebraCommonKernelGeosGeoLine_getEndPoint(self) != nil) {
    return [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(OrgGeogebraCommonKernelGeosGeoLine_getEndPoint(self))) getInhomCoordsInD3];
  }
  return [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension];
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getDirectionInD3 {
  if (OrgGeogebraCommonKernelGeosGeoLine_getEndPoint(self) == nil) {
    return [new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(-y_, x_, 0, 0) autorelease];
  }
  return [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk([self getEndInhomCoords])) subWithOrgGeogebraCommonKernelMatrixCoords:[self getStartInhomCoords]];
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  IOSObjectArray *b = OrgGeogebraCommonUtilMyMath_adjointWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(a00, a01, a02, a10, a11, a12, a20, a21, a22);
  jdouble x1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(b), 0)), 0) * x_ + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 0)), 1) * y_ + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 0)), 2) * z_;
  jdouble y1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 1)), 0) * x_ + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 1)), 1) * y_ + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 1)), 2) * z_;
  jdouble z1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 2)), 0) * x_ + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 2)), 1) * y_ + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 2)), 2) * z_;
  OrgGeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(self, x1, y1, z1);
}

- (JavaUtilArrayList *)getPointsOnLine {
  return pointsOnLine_;
}

- (void)addPointOnLineWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  if (pointsOnLine_ == nil) {
    OrgGeogebraCommonKernelGeosGeoLine_setAndConsume_pointsOnLine_(self, new_JavaUtilArrayList_init());
  }
  if (![((JavaUtilArrayList *) nil_chk(pointsOnLine_)) containsWithId:p]) [pointsOnLine_ addWithId:(OrgGeogebraCommonKernelGeosGeoPoint *) check_class_cast(p, [OrgGeogebraCommonKernelGeosGeoPoint class])];
}

- (void)removePointOnLineWithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  if (pointsOnLine_ != nil) [pointsOnLine_ removeWithId:p];
}

- (void)doRemove {
  if (OrgGeogebraCommonKernelGeosGeoLine_getStartPoint(self) != nil) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(OrgGeogebraCommonKernelGeosGeoLine_getStartPoint(self))) removeIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self];
  if (OrgGeogebraCommonKernelGeosGeoLine_getEndPoint(self) != nil) [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(OrgGeogebraCommonKernelGeosGeoLine_getEndPoint(self))) removeIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self];
  if (pointsOnLine_ != nil) {
    for (jint i = 0; i < [pointsOnLine_ size]; ++i) {
      OrgGeogebraCommonKernelGeosGeoPoint *p = [pointsOnLine_ getWithInt:i];
      [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) removeIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self];
    }
  }
  [super doRemove];
}

- (OrgGeogebraCommonKernelArithmeticFunction *)getFunction {
  return [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk([self getGeoFunction])) getFunction];
}

- (OrgGeogebraCommonKernelGeosGeoFunction *)getGeoDerivativeWithInt:(jint)order {
  return [((OrgGeogebraCommonKernelGeosGeoFunction *) nil_chk([self getGeoFunction])) getGeoDerivativeWithInt:order];
}

- (OrgGeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  if (algoParent_ != nil && ([OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_])) {
    return [new_OrgGeogebraCommonKernelAlgosSymbolicParameters_initWithOrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) autorelease];
  }
  return nil;
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if (algoParent_ != nil && ([OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_])) {
    [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSIntArray *)getDegrees {
  if (algoParent_ != nil && ([OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_])) {
    return [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getDegrees];
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if (algoParent_ != nil && ([OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_])) {
    return [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getExactCoordinatesWithJavaUtilHashMap:values];
  }
  return nil;
}

- (IOSObjectArray *)getPolynomials {
  if (algoParent_ != nil && [OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_]) {
    return [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersAlgo))) getPolynomials];
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (algoParent_ != nil && [OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo_class_() isInstance:algoParent_]) {
    return [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))) getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
  return nil;
}

- (IOSObjectArray *)getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:(OrgGeogebraCommonKernelGeosGeoElement *)geo {
  if (algoParent_ != nil && [OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo_class_() isInstance:algoParent_]) {
    return [((id<OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(algoParent_, @protocol(OrgGeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))) getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:self];
  }
  @throw [new_OrgGeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (jdouble)distanceWithOrgGeogebraCommonKernelKernelNDGeoLineND:(id<OrgGeogebraCommonKernelKernelNDGeoLineND>)g {
  return OrgGeogebraCommonKernelGeosGeoLine_distanceWithOrgGeogebraCommonKernelGeosGeoLine_(self, (OrgGeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [OrgGeogebraCommonKernelGeosGeoLine class]));
}

- (jboolean)respectLimitedPathWithDouble:(jdouble)param {
  return YES;
}

- (IOSDoubleArray *)getnormalizedCoefficientsWithDoubleArray:(IOSDoubleArray *)ret {
  *IOSDoubleArray_GetRef(nil_chk(ret), 0) = x_;
  *IOSDoubleArray_GetRef(ret, 1) = y_;
  *IOSDoubleArray_GetRef(ret, 2) = z_;
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(x_) && OrgGeogebraCommonKernelKernel_isZeroWithDouble_(y_) && OrgGeogebraCommonKernelKernel_isZeroWithDouble_(z_)) {
    return ret;
  }
  if (JavaLangDouble_isNaNWithDouble_(x_) || JavaLangDouble_isNaNWithDouble_(y_) || JavaLangDouble_isNaNWithDouble_(z_)) {
    return ret;
  }
  if (JavaLangDouble_isInfiniteWithDouble_(x_) || JavaLangDouble_isInfiniteWithDouble_(y_) || JavaLangDouble_isInfiniteWithDouble_(z_)) {
    return ret;
  }
  while (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(ret, 0)) < 0.5 && JavaLangMath_absWithDouble_(IOSDoubleArray_Get(ret, 1)) < 0.5 && JavaLangMath_absWithDouble_(IOSDoubleArray_Get(ret, 2)) < 0.5) {
    *IOSDoubleArray_GetRef(ret, 0) *= 2;
    *IOSDoubleArray_GetRef(ret, 1) *= 2;
    *IOSDoubleArray_GetRef(ret, 2) *= 2;
  }
  while (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(ret, 0)) > 1 && JavaLangMath_absWithDouble_(IOSDoubleArray_Get(ret, 1)) > 1 && JavaLangMath_absWithDouble_(IOSDoubleArray_Get(ret, 2)) > 1) {
    *IOSDoubleArray_GetRef(ret, 0) /= 2;
    *IOSDoubleArray_GetRef(ret, 1) /= 2;
    *IOSDoubleArray_GetRef(ret, 2) /= 2;
  }
  return ret;
}

- (id<OrgGeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementWithOrgGeogebraCommonKernelLocusequEquationScope:(OrgGeogebraCommonKernelLocusequEquationScope *)scope {
  return OrgGeogebraCommonKernelLocusEquation_eqnLineWithOrgGeogebraCommonKernelGeosGeoLine_withOrgGeogebraCommonKernelAlgosEquationScopeInterface_(self, scope);
}

- (jboolean)hasLineOpacity {
  return YES;
}

- (OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return OrgGeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (void)dealloc {
  RELEASE_(parameter_);
  RELEASE_(startPoint_);
  RELEASE_(endPoint_);
  RELEASE_(tempPP_);
  RELEASE_(sbToString_GeoLine_);
  RELEASE_(sbBuildValueString_);
  RELEASE_(pointsOnLine_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgGeogebraCommonKernelGeosGeoLine class]) {
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoLine_vars_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ @"x", @"y" } count:2 type:NSString_class_()]);
    JreStrongAssignAndConsume(&OrgGeogebraCommonKernelGeosGeoLine_sbToStringLHS_, nil, new_JavaLangStringBuilder_initWithNSString_(@"\u221e"));
    J2OBJC_SET_INITIALIZED(OrgGeogebraCommonKernelGeosGeoLine)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelConstruction:", "GeoLine", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withInt:", "GeoLine", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelConstruction:withNSString:withDouble:withDouble:withDouble:", "GeoLine", NULL, 0x1, NULL, NULL },
    { "initWithOrgGeogebraCommonKernelGeosGeoLine:", "GeoLine", NULL, 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lorg.geogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.geogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "setCoordsWithDouble:withDouble:withDouble:", "setCoords", "V", 0x11, NULL, NULL },
    { "setLineThroughWithDouble:withDouble:", "setLineThrough", "V", 0x11, NULL, NULL },
    { "setCoordsWithOrgGeogebraCommonKernelGeosGeoVec3D:", "setCoords", "V", 0x11, NULL, NULL },
    { "isIntersectionPointIncidentWithOrgGeogebraCommonKernelGeosGeoPoint:withDouble:", "isIntersectionPointIncident", "Z", 0x1, NULL, NULL },
    { "isOnFullLineWithOrgGeogebraCommonKernelGeosGeoPoint:withDouble:", "isOnFullLine", "Z", 0x11, NULL, NULL },
    { "isOnFullLineWithOrgGeogebraCommonKernelMatrixCoords:withDouble:", "isOnFullLine", "Z", 0x11, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x11, NULL, NULL },
    { "isOnPathWithOrgGeogebraCommonKernelMatrixCoords:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "respectLimitedPathWithOrgGeogebraCommonKernelMatrixCoords:withDouble:", "respectLimitedPath", "Z", 0x1, NULL, NULL },
    { "getPossibleParameterWithOrgGeogebraCommonKernelMatrixCoords:", "getPossibleParameter", "D", 0x1, NULL, NULL },
    { "getTempPathParameter", NULL, "Lorg.geogebra.common.kernel.PathParameter;", 0x4, NULL, NULL },
    { "isParallelWithOrgGeogebraCommonKernelGeosGeoLine:", "isParallel", "Z", 0x11, NULL, NULL },
    { "isSameDirectionWithOrgGeogebraCommonKernelGeosGeoLine:", "isSameDirection", "Z", 0x11, NULL, NULL },
    { "isPerpendicularWithOrgGeogebraCommonKernelGeosGeoLine:", "isPerpendicular", "Z", 0x11, NULL, NULL },
    { "distanceWithOrgGeogebraCommonKernelGeosGeoPoint:", "distance", "D", 0x1, NULL, NULL },
    { "distanceWithDouble:withDouble:", "distance", "D", 0x1, NULL, NULL },
    { "distanceHomWithOrgGeogebraCommonKernelGeosGeoPoint:", "distanceHom", "D", 0x11, NULL, NULL },
    { "distanceHomWithOrgGeogebraCommonKernelMatrixCoords:", "distanceHom", "D", 0x11, NULL, NULL },
    { "distanceWithOrgGeogebraCommonKernelGeosGeoLine:", "distance", "D", 0x11, NULL, NULL },
    { "getDirectionWithOrgGeogebraCommonKernelGeosGeoVec3D:", "getDirection", "V", 0x11, NULL, NULL },
    { "getDirectionWithDoubleArray:", "getDirection", "V", 0x11, NULL, NULL },
    { "getInhomPointOnLineWithDoubleArray:", "getInhomPointOnLine", "V", 0x11, NULL, NULL },
    { "getPointOnLineWithOrgGeogebraCommonKernelGeosGeoPoint:", "getPointOnLine", "V", 0x11, NULL, NULL },
    { "setStandardStartPoint", NULL, "V", 0x11, NULL, NULL },
    { "setStartPointWithOrgGeogebraCommonKernelGeosGeoPoint:", "setStartPoint", "V", 0x11, NULL, NULL },
    { "setEndPointWithOrgGeogebraCommonKernelGeosGeoPoint:", "setEndPoint", "V", 0x11, NULL, NULL },
    { "getStartPoint", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "getEndPoint", NULL, "Lorg.geogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showUndefinedInAlgebraViewWithBoolean:", "showUndefinedInAlgebraView", "V", 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "isEqualWithOrgGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "isDefinedTangentWithOrgGeogebraCommonKernelGeosGeoConic:", "isDefinedTangent", "Z", 0x11, NULL, NULL },
    { "isDefinedAsymptoteWithOrgGeogebraCommonKernelGeosGeoConic:", "isDefinedAsymptote", "Z", 0x11, NULL, NULL },
    { "translateWithOrgGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x11, NULL, NULL },
    { "dilateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithOrgGeogebraCommonKernelArithmeticNumberValue:withOrgGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "setToParametricWithNSString:", "setToParametric", "V", 0x11, NULL, NULL },
    { "setToExplicit", NULL, "V", 0x11, NULL, NULL },
    { "setToImplicit", NULL, "V", 0x11, NULL, NULL },
    { "setModeWithInt:", "setMode", "V", 0x11, NULL, NULL },
    { "toStringWithOrgGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getSbToString", NULL, "Ljava.lang.StringBuilder;", 0x2, NULL, NULL },
    { "toValueStringWithOrgGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringMinimalWithOrgGeogebraCommonKernelStringTemplate:", "toStringMinimal", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "buildValueStringWithOrgGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x2, NULL, NULL },
    { "getSbBuildValueString", NULL, "Ljava.lang.StringBuilder;", 0x2, NULL, NULL },
    { "toStringLHSWithJavaLangStringBuilder:withOrgGeogebraCommonKernelStringTemplate:", "toStringLHS", "V", 0x11, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "pointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "doPointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "doPointChanged", "V", 0x2, NULL, NULL },
    { "doPointChangedWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelPathParameter:", "doPointChanged", "V", 0x1, NULL, NULL },
    { "pathChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "pathChangedWithOrgGeogebraCommonKernelMatrixCoords:withOrgGeogebraCommonKernelPathParameter:", "pathChanged", "V", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoLine", NULL, "Z", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lorg.geogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "setZero", NULL, "V", 0x1, NULL, NULL },
    { "getAssignmentOperator", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "getGeoFunction", NULL, "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "isGeoFunctionable", NULL, "Z", 0x1, NULL, NULL },
    { "isMatrixTransformable", NULL, "Z", 0x1, NULL, NULL },
    { "toGeoConicWithOrgGeogebraCommonKernelGeosGeoConic:", "toGeoConic", "V", 0x1, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPointInDWithInt:withDouble:", "getPointInD", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getStartCoordsInDWithInt:", "getStartCoordsInD", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x2, NULL, NULL },
    { "getDirectionInDWithInt:", "getDirectionInD", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x2, NULL, NULL },
    { "getMainDirection", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getDirectionForEquation", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCartesianEquationVectorWithOrgGeogebraCommonKernelMatrixCoordMatrix:", "getCartesianEquationVector", "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getStartInhomCoords", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getEndInhomCoords", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x11, NULL, NULL },
    { "getDirectionInD3", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "getPointsOnLine", NULL, "Ljava.util.ArrayList;", 0x11, NULL, NULL },
    { "addPointOnLineWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "addPointOnLine", "V", 0x11, NULL, NULL },
    { "removePointOnLineWithOrgGeogebraCommonKernelKernelNDGeoPointND:", "removePointOnLine", "V", 0x11, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "getFunction", NULL, "Lorg.geogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "getGeoDerivativeWithInt:", "getGeoDerivative", "Lorg.geogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lorg.geogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getBotanaVarsWithOrgGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lorg.geogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithOrgGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lorg.geogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lorg.geogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "distanceWithOrgGeogebraCommonKernelKernelNDGeoLineND:", "distance", "D", 0x1, NULL, NULL },
    { "respectLimitedPathWithDouble:", "respectLimitedPath", "Z", 0x1, NULL, NULL },
    { "getnormalizedCoefficientsWithDoubleArray:", "getnormalizedCoefficients", "[D", 0x1, NULL, NULL },
    { "buildEquationElementWithOrgGeogebraCommonKernelLocusequEquationScope:", "buildEquationElement", "Lorg.geogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
    { "hasLineOpacity", NULL, "Z", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lorg.geogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "EQUATION_IMPLICIT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT },
    { "EQUATION_EXPLICIT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT },
    { "PARAMETRIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoLine_PARAMETRIC },
    { "EQUATION_IMPLICIT_NON_CANONICAL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgGeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT_NON_CANONICAL },
    { "showUndefinedInAlgebraView__", "showUndefinedInAlgebraView", 0x2, "Z", NULL, NULL,  },
    { "parameter_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "startPoint_", NULL, 0x1, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "endPoint_", NULL, 0x1, "Lorg.geogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "KEEP_LEADING_SIGN_", NULL, 0xa, "Z", &OrgGeogebraCommonKernelGeosGeoLine_KEEP_LEADING_SIGN_, NULL,  },
    { "vars_", NULL, 0x1a, "[Ljava.lang.String;", &OrgGeogebraCommonKernelGeosGeoLine_vars_, NULL,  },
    { "tempPP_", NULL, 0x2, "Lorg.geogebra.common.kernel.PathParameter;", NULL, NULL,  },
    { "sbToString_GeoLine_", "sbToString", 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sbBuildValueString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sbToStringLHS_", NULL, 0xa, "Ljava.lang.StringBuilder;", &OrgGeogebraCommonKernelGeosGeoLine_sbToStringLHS_, NULL,  },
    { "pointsOnLine_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/geogebra/common/kernel/geos/GeoPoint;>;",  },
  };
  static const char *inner_classes[] = {"Lorg.geogebra.common.kernel.geos.GeoLine$PathMoverLine;"};
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoLine = { 2, "GeoLine", "org.geogebra.common.kernel.geos", NULL, 0x1, 112, methods, 15, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoLine;
}

@end

void OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelGeosGeoLine *self, OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoVec3D_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  self->showUndefinedInAlgebraView__ = NO;
  OrgGeogebraCommonKernelGeosGeoLine_set_parameter_(self, @"\u03bb");
  OrgGeogebraCommonKernelGeosGeoLine_setAndConsume_sbBuildValueString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  [self setConstructionDefaults];
}

OrgGeogebraCommonKernelGeosGeoLine *new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(OrgGeogebraCommonKernelConstruction *c) {
  OrgGeogebraCommonKernelGeosGeoLine *self = [OrgGeogebraCommonKernelGeosGeoLine alloc];
  OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_withInt_(OrgGeogebraCommonKernelGeosGeoLine *self, OrgGeogebraCommonKernelConstruction *c, jint mode) {
  OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(self, c);
  OrgGeogebraCommonKernelGeosGeoLine_setModeWithInt_(self, mode);
}

OrgGeogebraCommonKernelGeosGeoLine *new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_withInt_(OrgGeogebraCommonKernelConstruction *c, jint mode) {
  OrgGeogebraCommonKernelGeosGeoLine *self = [OrgGeogebraCommonKernelGeosGeoLine alloc];
  OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_withInt_(self, c, mode);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoLine *self, OrgGeogebraCommonKernelConstruction *cons, NSString *label, jdouble a, jdouble b, jdouble c) {
  OrgGeogebraCommonKernelGeosGeoVec3D_initWithOrgGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self, cons, a, b, c);
  self->showUndefinedInAlgebraView__ = NO;
  OrgGeogebraCommonKernelGeosGeoLine_set_parameter_(self, @"\u03bb");
  OrgGeogebraCommonKernelGeosGeoLine_setAndConsume_sbBuildValueString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  [self setConstructionDefaults];
  [self setLabelWithNSString:label];
}

OrgGeogebraCommonKernelGeosGeoLine *new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(OrgGeogebraCommonKernelConstruction *cons, NSString *label, jdouble a, jdouble b, jdouble c) {
  OrgGeogebraCommonKernelGeosGeoLine *self = [OrgGeogebraCommonKernelGeosGeoLine alloc];
  OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self, cons, label, a, b, c);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelGeosGeoLine *self, OrgGeogebraCommonKernelGeosGeoLine *line) {
  OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelConstruction_(self, ((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(line))->cons_);
  [self setWithOrgGeogebraCommonKernelGeosGeoElement:line];
}

OrgGeogebraCommonKernelGeosGeoLine *new_OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelGeosGeoLine *line) {
  OrgGeogebraCommonKernelGeosGeoLine *self = [OrgGeogebraCommonKernelGeosGeoLine alloc];
  OrgGeogebraCommonKernelGeosGeoLine_initWithOrgGeogebraCommonKernelGeosGeoLine_(self, line);
  return self;
}

void OrgGeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(OrgGeogebraCommonKernelGeosGeoLine *self, jdouble x, jdouble y, jdouble z) {
  self->x_ = x;
  self->y_ = y;
  self->z_ = z;
}

jboolean OrgGeogebraCommonKernelGeosGeoLine_isOnFullLineWithOrgGeogebraCommonKernelGeosGeoPoint_withDouble_(OrgGeogebraCommonKernelGeosGeoLine *self, OrgGeogebraCommonKernelGeosGeoPoint *P, jdouble eps) {
  if (![((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) isDefined]) return NO;
  jdouble simplelength = JavaLangMath_absWithDouble_(self->x_) + JavaLangMath_absWithDouble_(self->y_);
  if ([P isInfinite]) {
    return JavaLangMath_absWithDouble_(self->x_ * P->x_ + self->y_ * P->y_) < eps * simplelength;
  }
  return JavaLangMath_absWithDouble_(self->x_ * P->inhomX_ + self->y_ * P->inhomY_ + self->z_) < eps * simplelength;
}

jboolean OrgGeogebraCommonKernelGeosGeoLine_isOnFullLineWithOrgGeogebraCommonKernelMatrixCoords_withDouble_(OrgGeogebraCommonKernelGeosGeoLine *self, OrgGeogebraCommonKernelMatrixCoords *Pnd, jdouble eps) {
  OrgGeogebraCommonKernelMatrixCoords *P = [((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(Pnd)) getCoordsIn2DView];
  jdouble simplelength = JavaLangMath_absWithDouble_(self->x_) + JavaLangMath_absWithDouble_(self->y_);
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_([((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(P)) getZ])) {
    return JavaLangMath_absWithDouble_(self->x_ * [P getX] + self->y_ * [P getY]) < eps * simplelength;
  }
  return JavaLangMath_absWithDouble_(self->x_ * [P getX] / [P getZ] + self->y_ * [P getY] / [P getZ] + self->z_) < eps * simplelength;
}

jboolean OrgGeogebraCommonKernelGeosGeoLine_isParallelWithOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelGeosGeoLine *self, OrgGeogebraCommonKernelGeosGeoLine *g) {
  return OrgGeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g))->x_ * self->y_, g->y_ * self->x_);
}

jdouble OrgGeogebraCommonKernelGeosGeoLine_distanceWithOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelGeosGeoLine *self, OrgGeogebraCommonKernelGeosGeoLine *g) {
  if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(((OrgGeogebraCommonKernelGeosGeoLine *) nil_chk(g))->x_ * self->y_ - g->y_ * self->x_)) {
    jdouble px, py;
    if (JavaLangMath_absWithDouble_(g->x_) > JavaLangMath_absWithDouble_(g->y_)) {
      px = -g->z_ / g->x_;
      py = 0.0;
    }
    else {
      px = 0.0;
      py = -g->z_ / g->y_;
    }
    return JavaLangMath_absWithDouble_((self->x_ * px + self->y_ * py + self->z_) / OrgGeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(self->x_, self->y_));
  }
  return 0.0;
}

void OrgGeogebraCommonKernelGeosGeoLine_getInhomPointOnLineWithDoubleArray_(OrgGeogebraCommonKernelGeosGeoLine *self, IOSDoubleArray *p) {
  if (self->startPoint_ != nil && [self->startPoint_ isFinite]) {
    *IOSDoubleArray_GetRef(nil_chk(p), 0) = self->startPoint_->inhomX_;
    *IOSDoubleArray_GetRef(p, 1) = self->startPoint_->inhomY_;
  }
  else {
    if (JavaLangMath_absWithDouble_(self->x_) > JavaLangMath_absWithDouble_(self->y_)) {
      *IOSDoubleArray_GetRef(nil_chk(p), 0) = -self->z_ / self->x_;
      *IOSDoubleArray_GetRef(p, 1) = 0.0;
    }
    else {
      *IOSDoubleArray_GetRef(nil_chk(p), 0) = 0.0;
      *IOSDoubleArray_GetRef(p, 1) = -self->z_ / self->y_;
    }
  }
}

void OrgGeogebraCommonKernelGeosGeoLine_setStandardStartPoint(OrgGeogebraCommonKernelGeosGeoLine *self) {
  if (self->startPoint_ == nil) {
    OrgGeogebraCommonKernelGeosGeoLine_setAndConsume_startPoint_(self, new_OrgGeogebraCommonKernelGeosGeoPoint_initWithOrgGeogebraCommonKernelConstruction_(self->cons_));
    [self->startPoint_ addIncidenceWithOrgGeogebraCommonKernelGeosGeoElement:self withBoolean:YES];
  }
  if (self->x_ != 0 || self->y_ != 0) {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->startPoint_)) setCoordsWithDouble:-self->z_ * self->x_ / (self->x_ * self->x_ + self->y_ * self->y_) withDouble:-self->z_ * self->y_ / (self->x_ * self->x_ + self->y_ * self->y_) withDouble:1.0];
  }
  else {
    [((OrgGeogebraCommonKernelGeosGeoPoint *) nil_chk(self->startPoint_)) setCoordsWithDouble:0.0 withDouble:0.0 withDouble:1.0];
  }
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelGeosGeoLine_getStartPoint(OrgGeogebraCommonKernelGeosGeoLine *self) {
  return self->startPoint_;
}

OrgGeogebraCommonKernelGeosGeoPoint *OrgGeogebraCommonKernelGeosGeoLine_getEndPoint(OrgGeogebraCommonKernelGeosGeoLine *self) {
  return self->endPoint_;
}

void OrgGeogebraCommonKernelGeosGeoLine_setModeWithInt_(OrgGeogebraCommonKernelGeosGeoLine *self, jint mode) {
  switch (mode) {
    case OrgGeogebraCommonKernelGeosGeoLine_PARAMETRIC:
    self->toStringMode_ = OrgGeogebraCommonKernelGeosGeoLine_PARAMETRIC;
    break;
    case OrgGeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT:
    self->toStringMode_ = OrgGeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT;
    break;
    case OrgGeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT_NON_CANONICAL:
    self->toStringMode_ = OrgGeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT_NON_CANONICAL;
    break;
    default:
    self->toStringMode_ = OrgGeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT;
  }
}

JavaLangStringBuilder *OrgGeogebraCommonKernelGeosGeoLine_getSbToString(OrgGeogebraCommonKernelGeosGeoLine *self) {
  if (self->sbToString_GeoLine_ == nil) OrgGeogebraCommonKernelGeosGeoLine_setAndConsume_sbToString_GeoLine_(self, new_JavaLangStringBuilder_initWithInt_(50));
  return self->sbToString_GeoLine_;
}

JavaLangStringBuilder *OrgGeogebraCommonKernelGeosGeoLine_buildValueStringWithOrgGeogebraCommonKernelStringTemplate_(OrgGeogebraCommonKernelGeosGeoLine *self, OrgGeogebraCommonKernelStringTemplate *tpl) {
  if ([((OrgGeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithOrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:OrgGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
    JavaLangStringBuilder *sb = OrgGeogebraCommonKernelGeosGeoLine_getSbBuildValueString(self);
    [((JavaLangStringBuilder *) nil_chk(sb)) setLengthWithInt:0];
    [sb appendWithNSString:@"("];
    [sb appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:self->x_ withOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithNSString:@")*"];
    [sb appendWithNSString:[tpl printVariableNameWithNSString:@"x"]];
    [sb appendWithNSString:@"+("];
    [sb appendWithNSString:[self->kernel_ formatWithDouble:self->y_ withOrgGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithNSString:@")*"];
    [sb appendWithNSString:[tpl printVariableNameWithNSString:@"y"]];
    [sb appendWithChar:'='];
    [sb appendWithNSString:[self->kernel_ formatWithDouble:-self->z_ withOrgGeogebraCommonKernelStringTemplate:tpl]];
    return sb;
  }
  IOSDoubleArray *P = [IOSDoubleArray arrayWithLength:2];
  IOSDoubleArray *g = [IOSDoubleArray arrayWithLength:3];
  jchar op = '=';
  if (![self isDefined]) {
    return [new_JavaLangStringBuilder_initWithNSString_((self->toStringMode_ == OrgGeogebraCommonKernelGeosGeoLine_PARAMETRIC) ? @"X = (?, ?)" : @"y = ?") autorelease];
  }
  {
    JavaLangStringBuilder *sbBuildValueStr;
    switch (self->toStringMode_) {
      case OrgGeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT:
      *IOSDoubleArray_GetRef(g, 0) = self->x_;
      *IOSDoubleArray_GetRef(g, 1) = self->y_;
      *IOSDoubleArray_GetRef(g, 2) = self->z_;
      return [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) buildExplicitLineEquationWithDoubleArray:g withNSStringArray:OrgGeogebraCommonKernelGeosGeoLine_vars_ withChar:op withOrgGeogebraCommonKernelStringTemplate:tpl];
      case OrgGeogebraCommonKernelGeosGeoLine_PARAMETRIC:
      OrgGeogebraCommonKernelGeosGeoLine_getInhomPointOnLineWithDoubleArray_(self, P);
      sbBuildValueStr = OrgGeogebraCommonKernelGeosGeoLine_getSbBuildValueString(self);
      [((JavaLangStringBuilder *) nil_chk(sbBuildValueStr)) setLengthWithInt:0];
      [sbBuildValueStr appendWithNSString:@"X = ("];
      [sbBuildValueStr appendWithNSString:[((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:IOSDoubleArray_Get(P, 0) withOrgGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueStr appendWithNSString:@", "];
      [sbBuildValueStr appendWithNSString:[self->kernel_ formatWithDouble:IOSDoubleArray_Get(P, 1) withOrgGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueStr appendWithNSString:@") + "];
      [sbBuildValueStr appendWithNSString:self->parameter_];
      [sbBuildValueStr appendWithNSString:@" ("];
      [sbBuildValueStr appendWithNSString:[self->kernel_ formatWithDouble:self->y_ withOrgGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueStr appendWithNSString:@", "];
      [sbBuildValueStr appendWithNSString:[self->kernel_ formatWithDouble:-self->x_ withOrgGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueStr appendWithNSString:@")"];
      return sbBuildValueStr;
      case OrgGeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT_NON_CANONICAL:
      *IOSDoubleArray_GetRef(g, 0) = self->x_;
      *IOSDoubleArray_GetRef(g, 1) = self->y_;
      *IOSDoubleArray_GetRef(g, 2) = self->z_;
      if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(self->x_) || OrgGeogebraCommonKernelKernel_isZeroWithDouble_(self->y_)) {
        return [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) buildExplicitLineEquationWithDoubleArray:g withNSStringArray:OrgGeogebraCommonKernelGeosGeoLine_vars_ withChar:op withOrgGeogebraCommonKernelStringTemplate:tpl];
      }
      return [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) buildImplicitEquationWithDoubleArray:g withNSStringArray:OrgGeogebraCommonKernelGeosGeoLine_vars_ withBoolean:OrgGeogebraCommonKernelGeosGeoLine_KEEP_LEADING_SIGN_ withBoolean:NO withBoolean:NO withChar:op withOrgGeogebraCommonKernelStringTemplate:tpl];
      default:
      *IOSDoubleArray_GetRef(g, 0) = self->x_;
      *IOSDoubleArray_GetRef(g, 1) = self->y_;
      *IOSDoubleArray_GetRef(g, 2) = self->z_;
      if (OrgGeogebraCommonKernelKernel_isZeroWithDouble_(self->x_) || OrgGeogebraCommonKernelKernel_isZeroWithDouble_(self->y_)) {
        return [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) buildExplicitLineEquationWithDoubleArray:g withNSStringArray:OrgGeogebraCommonKernelGeosGeoLine_vars_ withChar:op withOrgGeogebraCommonKernelStringTemplate:tpl];
      }
      return [((OrgGeogebraCommonKernelKernel *) nil_chk(self->kernel_)) buildImplicitEquationWithDoubleArray:g withNSStringArray:OrgGeogebraCommonKernelGeosGeoLine_vars_ withBoolean:OrgGeogebraCommonKernelGeosGeoLine_KEEP_LEADING_SIGN_ withBoolean:YES withBoolean:NO withChar:op withOrgGeogebraCommonKernelStringTemplate:tpl];
    }
  }
}

JavaLangStringBuilder *OrgGeogebraCommonKernelGeosGeoLine_getSbBuildValueString(OrgGeogebraCommonKernelGeosGeoLine *self) {
  if (self->sbBuildValueString_ == nil) OrgGeogebraCommonKernelGeosGeoLine_setAndConsume_sbBuildValueString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  return self->sbBuildValueString_;
}

void OrgGeogebraCommonKernelGeosGeoLine_doPointChangedWithOrgGeogebraCommonKernelKernelNDGeoPointND_(OrgGeogebraCommonKernelGeosGeoLine *self, id<OrgGeogebraCommonKernelKernelNDGeoPointND> P) {
  OrgGeogebraCommonKernelMatrixCoords *coords = [((id<OrgGeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD2];
  OrgGeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  [self doPointChangedWithOrgGeogebraCommonKernelMatrixCoords:coords withOrgGeogebraCommonKernelPathParameter:pp];
  [P setCoords2DWithDouble:[((OrgGeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
  [P updateCoordsFrom2DWithBoolean:NO withOrgGeogebraCommonKernelMatrixCoordSys:nil];
}

OrgGeogebraCommonKernelMatrixCoords *OrgGeogebraCommonKernelGeosGeoLine_getStartCoordsInDWithInt_(OrgGeogebraCommonKernelGeosGeoLine *self, jint dimension) {
  OrgGeogebraCommonKernelMatrixCoords *startCoords;
  if (self->startPoint_ != nil && [self->startPoint_ isFinite]) {
    startCoords = [self->startPoint_ getCoordsInDWithInt:dimension];
  }
  else {
    startCoords = [new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(dimension + 1) autorelease];
    if (JavaLangMath_absWithDouble_(self->x_) > JavaLangMath_absWithDouble_(self->y_)) {
      [startCoords setXWithDouble:-self->z_ / self->x_];
    }
    else {
      [startCoords setYWithDouble:-self->z_ / self->y_];
    }
    [startCoords setWithInt:dimension + 1 withDouble:1];
  }
  return startCoords;
}

OrgGeogebraCommonKernelMatrixCoords *OrgGeogebraCommonKernelGeosGeoLine_getDirectionInDWithInt_(OrgGeogebraCommonKernelGeosGeoLine *self, jint dimension) {
  OrgGeogebraCommonKernelMatrixCoords *direction = [new_OrgGeogebraCommonKernelMatrixCoords_initWithInt_(dimension + 1) autorelease];
  [direction setXWithDouble:self->y_];
  [direction setYWithDouble:-self->x_];
  return direction;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoLine)

@implementation OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine

- (instancetype)initWithOrgGeogebraCommonKernelGeosGeoLine:(OrgGeogebraCommonKernelGeosGeoLine *)outer$ {
  OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine_initWithOrgGeogebraCommonKernelGeosGeoLine_(self, outer$);
  return self;
}

- (void)init__WithOrgGeogebraCommonKernelKernelNDGeoPointND:(id<OrgGeogebraCommonKernelKernelNDGeoPointND>)p {
  if (this$0_->startPoint_ == nil) {
    OrgGeogebraCommonKernelGeosGeoLine_setStandardStartPoint(this$0_);
  }
  [super init__WithOrgGeogebraCommonKernelKernelNDGeoPointND:p];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgGeogebraCommonKernelGeosGeoLine:", "PathMoverLine", NULL, 0x1, NULL, NULL },
    { "init__WithOrgGeogebraCommonKernelKernelNDGeoPointND:", "init", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.geogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine = { 2, "PathMoverLine", "org.geogebra.common.kernel.geos", "GeoLine", 0x2, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine;
}

@end

void OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine_initWithOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine *self, OrgGeogebraCommonKernelGeosGeoLine *outer$) {
  OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine_set_this$0_(self, outer$);
  OrgGeogebraCommonKernelPathMoverGeneric_initWithOrgGeogebraCommonKernelPath_(self, outer$);
}

OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine *new_OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine_initWithOrgGeogebraCommonKernelGeosGeoLine_(OrgGeogebraCommonKernelGeosGeoLine *outer$) {
  OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine *self = [OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine alloc];
  OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine_initWithOrgGeogebraCommonKernelGeosGeoLine_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelGeosGeoLine_PathMoverLine)
