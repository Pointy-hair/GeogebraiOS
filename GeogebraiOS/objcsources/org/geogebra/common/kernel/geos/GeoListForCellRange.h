//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/geos/GeoListForCellRange.java
//

#ifndef _OrgGeogebraCommonKernelGeosGeoListForCellRange_H_
#define _OrgGeogebraCommonKernelGeosGeoListForCellRange_H_

#include "J2ObjC_header.h"
#include "org/geogebra/common/kernel/geos/GeoList.h"

@class OrgGeogebraCommonKernelAlgosAlgoElement;
@class OrgGeogebraCommonKernelConstruction;
@class OrgGeogebraCommonKernelStatisticsAlgoCellRange;

@interface OrgGeogebraCommonKernelGeosGeoListForCellRange : OrgGeogebraCommonKernelGeosGeoList

#pragma mark Public

- (instancetype)initWithOrgGeogebraCommonKernelConstruction:(OrgGeogebraCommonKernelConstruction *)c
         withOrgGeogebraCommonKernelStatisticsAlgoCellRange:(OrgGeogebraCommonKernelStatisticsAlgoCellRange *)algo;

- (jboolean)addToUpdateSetsWithOrgGeogebraCommonKernelAlgosAlgoElement:(OrgGeogebraCommonKernelAlgosAlgoElement *)algorithm;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgGeogebraCommonKernelGeosGeoListForCellRange)

FOUNDATION_EXPORT void OrgGeogebraCommonKernelGeosGeoListForCellRange_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelStatisticsAlgoCellRange_(OrgGeogebraCommonKernelGeosGeoListForCellRange *self, OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelStatisticsAlgoCellRange *algo);

FOUNDATION_EXPORT OrgGeogebraCommonKernelGeosGeoListForCellRange *new_OrgGeogebraCommonKernelGeosGeoListForCellRange_initWithOrgGeogebraCommonKernelConstruction_withOrgGeogebraCommonKernelStatisticsAlgoCellRange_(OrgGeogebraCommonKernelConstruction *c, OrgGeogebraCommonKernelStatisticsAlgoCellRange *algo) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgGeogebraCommonKernelGeosGeoListForCellRange)

#endif // _OrgGeogebraCommonKernelGeosGeoListForCellRange_H_
