//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/RegionParameters.java
//


#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "org/geogebra/common/kernel/Matrix/Coords.h"
#include "org/geogebra/common/kernel/RegionParameters.h"

@interface OrgGeogebraCommonKernelRegionParameters () {
 @public
  jdouble t1_, t2_;
  OrgGeogebraCommonKernelMatrixCoords *normal_;
  jboolean isOnPath__;
}

+ (jboolean)isNaNWithDouble:(jdouble)t;

@end

J2OBJC_FIELD_SETTER(OrgGeogebraCommonKernelRegionParameters, normal_, OrgGeogebraCommonKernelMatrixCoords *)

__attribute__((unused)) static void OrgGeogebraCommonKernelRegionParameters_setT1WithDouble_(OrgGeogebraCommonKernelRegionParameters *self, jdouble t1);

__attribute__((unused)) static void OrgGeogebraCommonKernelRegionParameters_setT2WithDouble_(OrgGeogebraCommonKernelRegionParameters *self, jdouble t2);

__attribute__((unused)) static jboolean OrgGeogebraCommonKernelRegionParameters_isNaNWithDouble_(jdouble t);

@implementation OrgGeogebraCommonKernelRegionParameters

- (instancetype)init {
  OrgGeogebraCommonKernelRegionParameters_init(self);
  return self;
}

- (instancetype)initWithDouble:(jdouble)t1
                    withDouble:(jdouble)t2 {
  OrgGeogebraCommonKernelRegionParameters_initWithDouble_withDouble_(self, t1, t2);
  return self;
}

- (void)setWithOrgGeogebraCommonKernelRegionParameters:(OrgGeogebraCommonKernelRegionParameters *)rp {
  OrgGeogebraCommonKernelRegionParameters_setT1WithDouble_(self, ((OrgGeogebraCommonKernelRegionParameters *) nil_chk(rp))->t1_);
  OrgGeogebraCommonKernelRegionParameters_setT2WithDouble_(self, rp->t2_);
}

- (jdouble)getT1 {
  return t1_;
}

- (void)setT1WithDouble:(jdouble)t1 {
  OrgGeogebraCommonKernelRegionParameters_setT1WithDouble_(self, t1);
}

- (jdouble)getT2 {
  return t2_;
}

- (void)setT2WithDouble:(jdouble)t2 {
  OrgGeogebraCommonKernelRegionParameters_setT2WithDouble_(self, t2);
}

+ (jboolean)isNaNWithDouble:(jdouble)t {
  return OrgGeogebraCommonKernelRegionParameters_isNaNWithDouble_(t);
}

- (void)setNormalWithOrgGeogebraCommonKernelMatrixCoords:(OrgGeogebraCommonKernelMatrixCoords *)normal {
  self->normal_ = normal;
}

- (OrgGeogebraCommonKernelMatrixCoords *)getNormal {
  return self->normal_;
}

- (void)setIsOnPathWithBoolean:(jboolean)isOnPath {
  self->isOnPath__ = isOnPath;
}

- (jboolean)isOnPath {
  return isOnPath__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "RegionParameters", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withDouble:", "RegionParameters", NULL, 0x1, NULL, NULL },
    { "setWithOrgGeogebraCommonKernelRegionParameters:", "set", "V", 0x11, NULL, NULL },
    { "getT1", NULL, "D", 0x11, NULL, NULL },
    { "setT1WithDouble:", "setT1", "V", 0x11, NULL, NULL },
    { "getT2", NULL, "D", 0x11, NULL, NULL },
    { "setT2WithDouble:", "setT2", "V", 0x11, NULL, NULL },
    { "isNaNWithDouble:", "isNaN", "Z", 0x1a, NULL, NULL },
    { "setNormalWithOrgGeogebraCommonKernelMatrixCoords:", "setNormal", "V", 0x1, NULL, NULL },
    { "getNormal", NULL, "Lorg.geogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "setIsOnPathWithBoolean:", "setIsOnPath", "V", 0x11, NULL, NULL },
    { "isOnPath", NULL, "Z", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "t1_", NULL, 0x2, "D", NULL, NULL,  },
    { "t2_", NULL, 0x2, "D", NULL, NULL,  },
    { "normal_", NULL, 0x2, "Lorg.geogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "isOnPath__", "isOnPath", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelRegionParameters = { 2, "RegionParameters", "org.geogebra.common.kernel", NULL, 0x1, 12, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelRegionParameters;
}

@end

void OrgGeogebraCommonKernelRegionParameters_init(OrgGeogebraCommonKernelRegionParameters *self) {
  (void) OrgGeogebraCommonKernelRegionParameters_initWithDouble_withDouble_(self, JavaLangDouble_NaN, JavaLangDouble_NaN);
}

OrgGeogebraCommonKernelRegionParameters *new_OrgGeogebraCommonKernelRegionParameters_init() {
  OrgGeogebraCommonKernelRegionParameters *self = [OrgGeogebraCommonKernelRegionParameters alloc];
  OrgGeogebraCommonKernelRegionParameters_init(self);
  return self;
}

void OrgGeogebraCommonKernelRegionParameters_initWithDouble_withDouble_(OrgGeogebraCommonKernelRegionParameters *self, jdouble t1, jdouble t2) {
  (void) NSObject_init(self);
  self->isOnPath__ = NO;
  OrgGeogebraCommonKernelRegionParameters_setT1WithDouble_(self, t1);
  OrgGeogebraCommonKernelRegionParameters_setT2WithDouble_(self, t2);
  self->normal_ = new_OrgGeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 1, 0);
}

OrgGeogebraCommonKernelRegionParameters *new_OrgGeogebraCommonKernelRegionParameters_initWithDouble_withDouble_(jdouble t1, jdouble t2) {
  OrgGeogebraCommonKernelRegionParameters *self = [OrgGeogebraCommonKernelRegionParameters alloc];
  OrgGeogebraCommonKernelRegionParameters_initWithDouble_withDouble_(self, t1, t2);
  return self;
}

void OrgGeogebraCommonKernelRegionParameters_setT1WithDouble_(OrgGeogebraCommonKernelRegionParameters *self, jdouble t1) {
  if (OrgGeogebraCommonKernelRegionParameters_isNaNWithDouble_(t1)) return;
  self->t1_ = t1;
}

void OrgGeogebraCommonKernelRegionParameters_setT2WithDouble_(OrgGeogebraCommonKernelRegionParameters *self, jdouble t2) {
  if (OrgGeogebraCommonKernelRegionParameters_isNaNWithDouble_(t2)) return;
  self->t2_ = t2;
}

jboolean OrgGeogebraCommonKernelRegionParameters_isNaNWithDouble_(jdouble t) {
  OrgGeogebraCommonKernelRegionParameters_initialize();
  if (JavaLangDouble_isNaNWithDouble_(t)) {
    return YES;
  }
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelRegionParameters)
