//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/GeoGebraiOSARC/GeoGebraiOSARC/javasources/org/geogebra/common/kernel/PathNormalizer.java
//


#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "org/geogebra/common/kernel/PathNormalizer.h"

@implementation OrgGeogebraCommonKernelPathNormalizer

+ (jdouble)toParentPathParameterWithDouble:(jdouble)pn
                                withDouble:(jdouble)min
                                withDouble:(jdouble)max {
  return OrgGeogebraCommonKernelPathNormalizer_toParentPathParameterWithDouble_withDouble_withDouble_(pn, min, max);
}

+ (jdouble)toNormalizedPathParameterWithDouble:(jdouble)p
                                    withDouble:(jdouble)min
                                    withDouble:(jdouble)max {
  return OrgGeogebraCommonKernelPathNormalizer_toNormalizedPathParameterWithDouble_withDouble_withDouble_(p, min, max);
}

+ (jdouble)infFunctionWithDouble:(jdouble)t {
  return OrgGeogebraCommonKernelPathNormalizer_infFunctionWithDouble_(t);
}

+ (jdouble)inverseInfFunctionWithDouble:(jdouble)z {
  return OrgGeogebraCommonKernelPathNormalizer_inverseInfFunctionWithDouble_(z);
}

- (instancetype)init {
  OrgGeogebraCommonKernelPathNormalizer_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "toParentPathParameterWithDouble:withDouble:withDouble:", "toParentPathParameter", "D", 0x9, NULL, NULL },
    { "toNormalizedPathParameterWithDouble:withDouble:withDouble:", "toNormalizedPathParameter", "D", 0x9, NULL, NULL },
    { "infFunctionWithDouble:", "infFunction", "D", 0x9, NULL, NULL },
    { "inverseInfFunctionWithDouble:", "inverseInfFunction", "D", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgGeogebraCommonKernelPathNormalizer = { 2, "PathNormalizer", "org.geogebra.common.kernel", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgGeogebraCommonKernelPathNormalizer;
}

@end

jdouble OrgGeogebraCommonKernelPathNormalizer_toParentPathParameterWithDouble_withDouble_withDouble_(jdouble pn, jdouble min, jdouble max) {
  OrgGeogebraCommonKernelPathNormalizer_initialize();
  jdouble tn = pn;
  if (min == max) return min;
  if (tn < 0) tn = 0;
  else if (tn > 1) tn = 1;
  if (min == JavaLangDouble_NEGATIVE_INFINITY) {
    if (max == JavaLangDouble_POSITIVE_INFINITY) {
      return OrgGeogebraCommonKernelPathNormalizer_infFunctionWithDouble_(2 * tn - 1);
    }
    return max + OrgGeogebraCommonKernelPathNormalizer_infFunctionWithDouble_(tn - 1);
  }
  if (max == JavaLangDouble_POSITIVE_INFINITY) {
    return min + OrgGeogebraCommonKernelPathNormalizer_infFunctionWithDouble_(tn);
  }
  return (1 - tn) * min + tn * max;
}

jdouble OrgGeogebraCommonKernelPathNormalizer_toNormalizedPathParameterWithDouble_withDouble_withDouble_(jdouble p, jdouble min, jdouble max) {
  OrgGeogebraCommonKernelPathNormalizer_initialize();
  jdouble t = p;
  if (min == max) {
    return 0;
  }
  if (t < min) {
    t = min;
  }
  else if (t > max) {
    t = max;
  }
  if (min == JavaLangDouble_NEGATIVE_INFINITY) {
    if (max == JavaLangDouble_POSITIVE_INFINITY) {
      if (t == JavaLangDouble_NEGATIVE_INFINITY) return 0;
      else if (t == JavaLangDouble_POSITIVE_INFINITY) return 1;
      else {
        return 0.5 + 0.5 * OrgGeogebraCommonKernelPathNormalizer_inverseInfFunctionWithDouble_(t);
      }
    }
    if (t == JavaLangDouble_NEGATIVE_INFINITY) {
      return 0;
    }
    return 1 + OrgGeogebraCommonKernelPathNormalizer_inverseInfFunctionWithDouble_(t - max);
  }
  if (max == JavaLangDouble_POSITIVE_INFINITY) {
    return OrgGeogebraCommonKernelPathNormalizer_inverseInfFunctionWithDouble_(t - min);
  }
  return (t - min) / (max - min);
}

jdouble OrgGeogebraCommonKernelPathNormalizer_infFunctionWithDouble_(jdouble t) {
  OrgGeogebraCommonKernelPathNormalizer_initialize();
  return t / (1 - JavaLangMath_absWithDouble_(t));
}

jdouble OrgGeogebraCommonKernelPathNormalizer_inverseInfFunctionWithDouble_(jdouble z) {
  OrgGeogebraCommonKernelPathNormalizer_initialize();
  if (z >= 0) {
    return z / (1 + z);
  }
  return z / (1 - z);
}

void OrgGeogebraCommonKernelPathNormalizer_init(OrgGeogebraCommonKernelPathNormalizer *self) {
  (void) NSObject_init(self);
}

OrgGeogebraCommonKernelPathNormalizer *new_OrgGeogebraCommonKernelPathNormalizer_init() {
  OrgGeogebraCommonKernelPathNormalizer *self = [OrgGeogebraCommonKernelPathNormalizer alloc];
  OrgGeogebraCommonKernelPathNormalizer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgGeogebraCommonKernelPathNormalizer)
