//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/data/StatPanelSettings.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/view/data/DataSource.h"
#include "geogebra/common/gui/view/data/DataVariable.h"
#include "geogebra/common/gui/view/data/PlotSettings.h"
#include "geogebra/common/gui/view/data/StatPanelSettings.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

@interface GeogebraCommonGuiViewDataStatPanelSettings () {
 @public
  jint frequencyType_;
  jboolean isCumulative__;
  jboolean useManualClasses_;
  jboolean hasOverlayNormal_;
  jboolean hasOverlayPolygon_;
  jboolean showFrequencyTable_;
  jboolean showHistogram_;
  jboolean showScatterplotLine_;
  jboolean showOutliers_;
  jdouble classStart_;
  jdouble classWidth_;
  jint numClasses_;
  jboolean isLeftRule__;
  jdouble barWidth_;
  jboolean isAutomaticBarWidth__;
  jboolean isAutomaticWindow__;
  GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum *coordMode_;
  jint stemAdjust_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataStatPanelSettings, coordMode_, GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum *)

@interface GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum () {
 @public
  jint mode__;
}

@end

__attribute__((unused)) static void GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_initWithInt_withNSString_withInt_(GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum *self, jint mode, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum *new_GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_initWithInt_withNSString_withInt_(jint mode, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation GeogebraCommonGuiViewDataStatPanelSettings

- (instancetype)init {
  GeogebraCommonGuiViewDataStatPanelSettings_init(self);
  return self;
}

- (GeogebraCommonGuiViewDataDataSource *)getDataSource {
  return dataSource_;
}

- (void)setDataSourceWithGeogebraCommonGuiViewDataDataSource:(GeogebraCommonGuiViewDataDataSource *)dataSource {
  GeogebraCommonGuiViewDataStatPanelSettings_set_dataSource_(self, dataSource);
}

- (GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)groupType {
  return [((GeogebraCommonGuiViewDataDataSource *) nil_chk(dataSource_)) getGroupType];
}

- (jboolean)isNumericData {
  return [((GeogebraCommonGuiViewDataDataSource *) nil_chk(dataSource_)) isNumericData];
}

- (jboolean)isPointList {
  return [((GeogebraCommonGuiViewDataDataSource *) nil_chk(dataSource_)) isPointData];
}

- (jboolean)isUseManualClasses {
  return useManualClasses_;
}

- (void)setUseManualClassesWithBoolean:(jboolean)useManualClasses {
  self->useManualClasses_ = useManualClasses;
}

- (jboolean)isCumulative {
  return isCumulative__;
}

- (void)setCumulativeWithBoolean:(jboolean)isCumulative {
  self->isCumulative__ = isCumulative;
}

- (jint)getFrequencyType {
  return frequencyType_;
}

- (void)setFrequencyTypeWithInt:(jint)frequencyType {
  self->frequencyType_ = frequencyType;
}

- (jboolean)isHasOverlayNormal {
  return hasOverlayNormal_;
}

- (void)setHasOverlayNormalWithBoolean:(jboolean)hasOverlayNormal {
  self->hasOverlayNormal_ = hasOverlayNormal;
}

- (jboolean)isHasOverlayPolygon {
  return hasOverlayPolygon_;
}

- (void)setHasOverlayPolygonWithBoolean:(jboolean)hasOverlayPolygon {
  self->hasOverlayPolygon_ = hasOverlayPolygon;
}

- (jboolean)isAutomaticWindow {
  return isAutomaticWindow__;
}

- (void)setAutomaticWindowWithBoolean:(jboolean)isAutomaticWindow {
  self->isAutomaticWindow__ = isAutomaticWindow;
}

- (jboolean)isShowFrequencyTable {
  return showFrequencyTable_;
}

- (void)setShowFrequencyTableWithBoolean:(jboolean)showFrequencyTable {
  self->showFrequencyTable_ = showFrequencyTable;
}

- (jboolean)isShowHistogram {
  return showHistogram_;
}

- (void)setShowHistogramWithBoolean:(jboolean)showHistogram {
  self->showHistogram_ = showHistogram;
}

- (jboolean)isLeftRule {
  return isLeftRule__;
}

- (void)setLeftRuleWithBoolean:(jboolean)isLeftRule {
  self->isLeftRule__ = isLeftRule;
}

- (jboolean)isShowScatterplotLine {
  return showScatterplotLine_;
}

- (void)setShowScatterplotLineWithBoolean:(jboolean)showScatterplotLine {
  self->showScatterplotLine_ = showScatterplotLine;
}

- (jboolean)isShowOutliers {
  return showOutliers_;
}

- (void)setShowOutliersWithBoolean:(jboolean)showOutliers {
  self->showOutliers_ = showOutliers;
}

- (jboolean)isAutomaticBarWidth {
  return isAutomaticBarWidth__;
}

- (void)setAutomaticBarWidthWithBoolean:(jboolean)isAutomaticBarWidth {
  self->isAutomaticBarWidth__ = isAutomaticBarWidth;
}

- (jdouble)getBarWidth {
  return barWidth_;
}

- (void)setBarWidthWithDouble:(jdouble)barWidth {
  self->barWidth_ = barWidth;
}

- (jint)getNumClasses {
  return numClasses_;
}

- (void)setNumClassesWithInt:(jint)numClasses {
  self->numClasses_ = numClasses;
}

- (jdouble)getClassStart {
  return classStart_;
}

- (void)setClassStartWithDouble:(jdouble)classStart {
  self->classStart_ = classStart;
}

- (jdouble)getClassWidth {
  return classWidth_;
}

- (void)setClassWidthWithDouble:(jdouble)classWidth {
  self->classWidth_ = classWidth;
}

- (jint)getStemAdjust {
  return stemAdjust_;
}

- (void)setStemAdjustWithInt:(jint)stemAdjust {
  self->stemAdjust_ = stemAdjust;
}

- (void)setCoordModeWithGeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum:(GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum *)coordMode {
  GeogebraCommonGuiViewDataStatPanelSettings_set_coordMode_(self, coordMode);
  switch ([coordMode ordinal]) {
    case GeogebraCommonGuiViewDataStatPanelSettings_CoordMode_STANDTOSTAND:
    self->logXAxis_ = NO;
    self->logYAxis_ = NO;
    break;
    case GeogebraCommonGuiViewDataStatPanelSettings_CoordMode_LOGTOSTAND:
    self->logXAxis_ = YES;
    self->logYAxis_ = NO;
    break;
    case GeogebraCommonGuiViewDataStatPanelSettings_CoordMode_STANDTOLOG:
    self->logXAxis_ = NO;
    self->logYAxis_ = YES;
    break;
    case GeogebraCommonGuiViewDataStatPanelSettings_CoordMode_LOGTOLOG:
    self->logXAxis_ = YES;
    self->logYAxis_ = YES;
    break;
  }
}

- (GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum *)getCoordMode {
  return coordMode_;
}

- (void)dealloc {
  RELEASE_(dataSource_);
  RELEASE_(coordMode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "StatPanelSettings", NULL, 0x1, NULL, NULL },
    { "getDataSource", NULL, "Lgeogebra.common.gui.view.data.DataSource;", 0x1, NULL, NULL },
    { "setDataSourceWithGeogebraCommonGuiViewDataDataSource:", "setDataSource", "V", 0x1, NULL, NULL },
    { "groupType", NULL, "Lgeogebra.common.gui.view.data.DataVariable$GroupType;", 0x1, NULL, NULL },
    { "isNumericData", NULL, "Z", 0x1, NULL, NULL },
    { "isPointList", NULL, "Z", 0x1, NULL, NULL },
    { "isUseManualClasses", NULL, "Z", 0x1, NULL, NULL },
    { "setUseManualClassesWithBoolean:", "setUseManualClasses", "V", 0x1, NULL, NULL },
    { "isCumulative", NULL, "Z", 0x1, NULL, NULL },
    { "setCumulativeWithBoolean:", "setCumulative", "V", 0x1, NULL, NULL },
    { "getFrequencyType", NULL, "I", 0x1, NULL, NULL },
    { "setFrequencyTypeWithInt:", "setFrequencyType", "V", 0x1, NULL, NULL },
    { "isHasOverlayNormal", NULL, "Z", 0x1, NULL, NULL },
    { "setHasOverlayNormalWithBoolean:", "setHasOverlayNormal", "V", 0x1, NULL, NULL },
    { "isHasOverlayPolygon", NULL, "Z", 0x1, NULL, NULL },
    { "setHasOverlayPolygonWithBoolean:", "setHasOverlayPolygon", "V", 0x1, NULL, NULL },
    { "isAutomaticWindow", NULL, "Z", 0x1, NULL, NULL },
    { "setAutomaticWindowWithBoolean:", "setAutomaticWindow", "V", 0x1, NULL, NULL },
    { "isShowFrequencyTable", NULL, "Z", 0x1, NULL, NULL },
    { "setShowFrequencyTableWithBoolean:", "setShowFrequencyTable", "V", 0x1, NULL, NULL },
    { "isShowHistogram", NULL, "Z", 0x1, NULL, NULL },
    { "setShowHistogramWithBoolean:", "setShowHistogram", "V", 0x1, NULL, NULL },
    { "isLeftRule", NULL, "Z", 0x1, NULL, NULL },
    { "setLeftRuleWithBoolean:", "setLeftRule", "V", 0x1, NULL, NULL },
    { "isShowScatterplotLine", NULL, "Z", 0x1, NULL, NULL },
    { "setShowScatterplotLineWithBoolean:", "setShowScatterplotLine", "V", 0x1, NULL, NULL },
    { "isShowOutliers", NULL, "Z", 0x1, NULL, NULL },
    { "setShowOutliersWithBoolean:", "setShowOutliers", "V", 0x1, NULL, NULL },
    { "isAutomaticBarWidth", NULL, "Z", 0x1, NULL, NULL },
    { "setAutomaticBarWidthWithBoolean:", "setAutomaticBarWidth", "V", 0x1, NULL, NULL },
    { "getBarWidth", NULL, "D", 0x1, NULL, NULL },
    { "setBarWidthWithDouble:", "setBarWidth", "V", 0x1, NULL, NULL },
    { "getNumClasses", NULL, "I", 0x1, NULL, NULL },
    { "setNumClassesWithInt:", "setNumClasses", "V", 0x1, NULL, NULL },
    { "getClassStart", NULL, "D", 0x1, NULL, NULL },
    { "setClassStartWithDouble:", "setClassStart", "V", 0x1, NULL, NULL },
    { "getClassWidth", NULL, "D", 0x1, NULL, NULL },
    { "setClassWidthWithDouble:", "setClassWidth", "V", 0x1, NULL, NULL },
    { "getStemAdjust", NULL, "I", 0x1, NULL, NULL },
    { "setStemAdjustWithInt:", "setStemAdjust", "V", 0x1, NULL, NULL },
    { "setCoordModeWithGeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum:", "setCoordMode", "V", 0x1, NULL, NULL },
    { "getCoordMode", NULL, "Lgeogebra.common.gui.view.data.StatPanelSettings$CoordMode;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dataSource_", NULL, 0x1, "Lgeogebra.common.gui.view.data.DataSource;", NULL, NULL,  },
    { "TYPE_COUNT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewDataStatPanelSettings_TYPE_COUNT },
    { "TYPE_RELATIVE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewDataStatPanelSettings_TYPE_RELATIVE },
    { "TYPE_NORMALIZED_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewDataStatPanelSettings_TYPE_NORMALIZED },
    { "frequencyType_", NULL, 0x2, "I", NULL, NULL,  },
    { "isCumulative__", "isCumulative", 0x2, "Z", NULL, NULL,  },
    { "useManualClasses_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hasOverlayNormal_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hasOverlayPolygon_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showFrequencyTable_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showHistogram_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showScatterplotLine_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showOutliers_", NULL, 0x2, "Z", NULL, NULL,  },
    { "classStart_", NULL, 0x2, "D", NULL, NULL,  },
    { "classWidth_", NULL, 0x2, "D", NULL, NULL,  },
    { "numClasses_", NULL, 0x2, "I", NULL, NULL,  },
    { "isLeftRule__", "isLeftRule", 0x2, "Z", NULL, NULL,  },
    { "barWidth_", NULL, 0x2, "D", NULL, NULL,  },
    { "isAutomaticBarWidth__", "isAutomaticBarWidth", 0x2, "Z", NULL, NULL,  },
    { "isAutomaticWindow__", "isAutomaticWindow", 0x2, "Z", NULL, NULL,  },
    { "coordMode_", NULL, 0x2, "Lgeogebra.common.gui.view.data.StatPanelSettings$CoordMode;", NULL, NULL,  },
    { "stemAdjust_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.view.data.StatPanelSettings$CoordMode;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiViewDataStatPanelSettings = { 2, "StatPanelSettings", "geogebra.common.gui.view.data", NULL, 0x1, 42, methods, 22, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiViewDataStatPanelSettings;
}

@end

void GeogebraCommonGuiViewDataStatPanelSettings_init(GeogebraCommonGuiViewDataStatPanelSettings *self) {
  GeogebraCommonGuiViewDataPlotSettings_init(self);
  self->frequencyType_ = GeogebraCommonGuiViewDataStatPanelSettings_TYPE_COUNT;
  self->isCumulative__ = NO;
  self->useManualClasses_ = NO;
  self->hasOverlayNormal_ = NO;
  self->hasOverlayPolygon_ = NO;
  self->showFrequencyTable_ = NO;
  self->showHistogram_ = YES;
  self->showScatterplotLine_ = NO;
  self->showOutliers_ = YES;
  self->classStart_ = 0;
  self->classWidth_ = 5;
  self->numClasses_ = 5;
  self->isLeftRule__ = YES;
  self->barWidth_ = 0.5;
  self->isAutomaticBarWidth__ = YES;
  self->isAutomaticWindow__ = YES;
  GeogebraCommonGuiViewDataStatPanelSettings_set_coordMode_(self, GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_get_STANDTOSTAND());
  self->stemAdjust_ = 0;
}

GeogebraCommonGuiViewDataStatPanelSettings *new_GeogebraCommonGuiViewDataStatPanelSettings_init() {
  GeogebraCommonGuiViewDataStatPanelSettings *self = [GeogebraCommonGuiViewDataStatPanelSettings alloc];
  GeogebraCommonGuiViewDataStatPanelSettings_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewDataStatPanelSettings)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum)

GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum *GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_values_[4];

@implementation GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum

- (instancetype)initWithInt:(jint)mode
               withNSString:(NSString *)__name
                    withInt:(jint)__ordinal {
  GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_initWithInt_withNSString_withInt_(self, mode, __name, __ordinal);
  return self;
}

- (jint)mode {
  return mode__;
}

IOSObjectArray *GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_values() {
  GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_values_ count:4 type:GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_values();
}

+ (GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_valueOfWithNSString_(name);
}

GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum *GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_initialize();
  for (int i = 0; i < 4; i++) {
    GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum *e = GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum class]) {
    GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_STANDTOSTAND = new_GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_initWithInt_withNSString_withInt_(0, @"STANDTOSTAND", 0);
    GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_LOGTOSTAND = new_GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_initWithInt_withNSString_withInt_(1, @"LOGTOSTAND", 1);
    GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_STANDTOLOG = new_GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_initWithInt_withNSString_withInt_(2, @"STANDTOLOG", 2);
    GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_LOGTOLOG = new_GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_initWithInt_withNSString_withInt_(3, @"LOGTOLOG", 3);
    J2OBJC_SET_INITIALIZED(GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "mode", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "STANDTOSTAND", "STANDTOSTAND", 0x4019, "Lgeogebra.common.gui.view.data.StatPanelSettings$CoordMode;", &GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_STANDTOSTAND, NULL,  },
    { "LOGTOSTAND", "LOGTOSTAND", 0x4019, "Lgeogebra.common.gui.view.data.StatPanelSettings$CoordMode;", &GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_LOGTOSTAND, NULL,  },
    { "STANDTOLOG", "STANDTOLOG", 0x4019, "Lgeogebra.common.gui.view.data.StatPanelSettings$CoordMode;", &GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_STANDTOLOG, NULL,  },
    { "LOGTOLOG", "LOGTOLOG", 0x4019, "Lgeogebra.common.gui.view.data.StatPanelSettings$CoordMode;", &GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_LOGTOLOG, NULL,  },
    { "mode__", "mode", 0x2, "I", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.gui.view.data.StatPanelSettings$CoordMode;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum = { 2, "CoordMode", "geogebra.common.gui.view.data", "StatPanelSettings", 0x4019, 1, methods, 5, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/gui/view/data/StatPanelSettings$CoordMode;>;" };
  return &_GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum;
}

@end

void GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_initWithInt_withNSString_withInt_(GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum *self, jint mode, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->mode__ = mode;
}

GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum *new_GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_initWithInt_withNSString_withInt_(jint mode, NSString *__name, jint __ordinal) {
  GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum *self = [GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum alloc];
  GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum_initWithInt_withNSString_withInt_(self, mode, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewDataStatPanelSettings_CoordModeEnum)
