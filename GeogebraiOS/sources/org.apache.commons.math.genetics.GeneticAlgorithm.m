//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/genetics/GeneticAlgorithm.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/genetics/Chromosome.h"
#include "org/apache/commons/math/genetics/ChromosomePair.h"
#include "org/apache/commons/math/genetics/CrossoverPolicy.h"
#include "org/apache/commons/math/genetics/GeneticAlgorithm.h"
#include "org/apache/commons/math/genetics/MutationPolicy.h"
#include "org/apache/commons/math/genetics/Population.h"
#include "org/apache/commons/math/genetics/SelectionPolicy.h"
#include "org/apache/commons/math/genetics/StoppingCondition.h"
#include "org/apache/commons/math/random/JDKRandomGenerator.h"
#include "org/apache/commons/math/random/RandomGenerator.h"

@interface OrgApacheCommonsMathGeneticsGeneticAlgorithm () {
 @public
  id<OrgApacheCommonsMathGeneticsCrossoverPolicy> crossoverPolicy_;
  jdouble crossoverRate_;
  id<OrgApacheCommonsMathGeneticsMutationPolicy> mutationPolicy_;
  jdouble mutationRate_;
  id<OrgApacheCommonsMathGeneticsSelectionPolicy> selectionPolicy_;
  jint generationsEvolved_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathGeneticsGeneticAlgorithm, crossoverPolicy_, id<OrgApacheCommonsMathGeneticsCrossoverPolicy>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathGeneticsGeneticAlgorithm, mutationPolicy_, id<OrgApacheCommonsMathGeneticsMutationPolicy>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathGeneticsGeneticAlgorithm, selectionPolicy_, id<OrgApacheCommonsMathGeneticsSelectionPolicy>)

static id<OrgApacheCommonsMathRandomRandomGenerator> OrgApacheCommonsMathGeneticsGeneticAlgorithm_randomGenerator_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathGeneticsGeneticAlgorithm, randomGenerator_, id<OrgApacheCommonsMathRandomRandomGenerator>)
J2OBJC_STATIC_FIELD_SETTER(OrgApacheCommonsMathGeneticsGeneticAlgorithm, randomGenerator_, id<OrgApacheCommonsMathRandomRandomGenerator>)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsMathGeneticsGeneticAlgorithm)

@implementation OrgApacheCommonsMathGeneticsGeneticAlgorithm

- (instancetype)initWithOrgApacheCommonsMathGeneticsCrossoverPolicy:(id<OrgApacheCommonsMathGeneticsCrossoverPolicy>)crossoverPolicy
                                                         withDouble:(jdouble)crossoverRate
                     withOrgApacheCommonsMathGeneticsMutationPolicy:(id<OrgApacheCommonsMathGeneticsMutationPolicy>)mutationPolicy
                                                         withDouble:(jdouble)mutationRate
                    withOrgApacheCommonsMathGeneticsSelectionPolicy:(id<OrgApacheCommonsMathGeneticsSelectionPolicy>)selectionPolicy {
  OrgApacheCommonsMathGeneticsGeneticAlgorithm_initWithOrgApacheCommonsMathGeneticsCrossoverPolicy_withDouble_withOrgApacheCommonsMathGeneticsMutationPolicy_withDouble_withOrgApacheCommonsMathGeneticsSelectionPolicy_(self, crossoverPolicy, crossoverRate, mutationPolicy, mutationRate, selectionPolicy);
  return self;
}

+ (void)setRandomGeneratorWithOrgApacheCommonsMathRandomRandomGenerator:(id<OrgApacheCommonsMathRandomRandomGenerator>)random {
  OrgApacheCommonsMathGeneticsGeneticAlgorithm_setRandomGeneratorWithOrgApacheCommonsMathRandomRandomGenerator_(random);
}

+ (id<OrgApacheCommonsMathRandomRandomGenerator>)getRandomGenerator {
  return OrgApacheCommonsMathGeneticsGeneticAlgorithm_getRandomGenerator();
}

- (id<OrgApacheCommonsMathGeneticsPopulation>)evolveWithOrgApacheCommonsMathGeneticsPopulation:(id<OrgApacheCommonsMathGeneticsPopulation>)initial
                                             withOrgApacheCommonsMathGeneticsStoppingCondition:(id<OrgApacheCommonsMathGeneticsStoppingCondition>)condition {
  id<OrgApacheCommonsMathGeneticsPopulation> current = initial;
  generationsEvolved_ = 0;
  while (![((id<OrgApacheCommonsMathGeneticsStoppingCondition>) nil_chk(condition)) isSatisfiedWithOrgApacheCommonsMathGeneticsPopulation:current]) {
    current = [self nextGenerationWithOrgApacheCommonsMathGeneticsPopulation:current];
    generationsEvolved_++;
  }
  return current;
}

- (id<OrgApacheCommonsMathGeneticsPopulation>)nextGenerationWithOrgApacheCommonsMathGeneticsPopulation:(id<OrgApacheCommonsMathGeneticsPopulation>)current {
  id<OrgApacheCommonsMathGeneticsPopulation> nextGeneration = [((id<OrgApacheCommonsMathGeneticsPopulation>) nil_chk(current)) nextGeneration];
  id<OrgApacheCommonsMathRandomRandomGenerator> randGen = OrgApacheCommonsMathGeneticsGeneticAlgorithm_getRandomGenerator();
  while ([((id<OrgApacheCommonsMathGeneticsPopulation>) nil_chk(nextGeneration)) getPopulationSize] < [nextGeneration getPopulationLimit]) {
    OrgApacheCommonsMathGeneticsChromosomePair *pair = [((id<OrgApacheCommonsMathGeneticsSelectionPolicy>) nil_chk([self getSelectionPolicy])) selectWithOrgApacheCommonsMathGeneticsPopulation:current];
    if ([((id<OrgApacheCommonsMathRandomRandomGenerator>) nil_chk(randGen)) nextDouble] < [self getCrossoverRate]) {
      pair = [((id<OrgApacheCommonsMathGeneticsCrossoverPolicy>) nil_chk([self getCrossoverPolicy])) crossoverWithOrgApacheCommonsMathGeneticsChromosome:[((OrgApacheCommonsMathGeneticsChromosomePair *) nil_chk(pair)) getFirst] withOrgApacheCommonsMathGeneticsChromosome:[pair getSecond]];
    }
    if ([randGen nextDouble] < [self getMutationRate]) {
      pair = [new_OrgApacheCommonsMathGeneticsChromosomePair_initWithOrgApacheCommonsMathGeneticsChromosome_withOrgApacheCommonsMathGeneticsChromosome_([((id<OrgApacheCommonsMathGeneticsMutationPolicy>) nil_chk([self getMutationPolicy])) mutateWithOrgApacheCommonsMathGeneticsChromosome:[((OrgApacheCommonsMathGeneticsChromosomePair *) nil_chk(pair)) getFirst]], [((id<OrgApacheCommonsMathGeneticsMutationPolicy>) nil_chk([self getMutationPolicy])) mutateWithOrgApacheCommonsMathGeneticsChromosome:[pair getSecond]]) autorelease];
    }
    [nextGeneration addChromosomeWithOrgApacheCommonsMathGeneticsChromosome:[((OrgApacheCommonsMathGeneticsChromosomePair *) nil_chk(pair)) getFirst]];
    if ([nextGeneration getPopulationSize] < [nextGeneration getPopulationLimit]) {
      [nextGeneration addChromosomeWithOrgApacheCommonsMathGeneticsChromosome:[pair getSecond]];
    }
  }
  return nextGeneration;
}

- (id<OrgApacheCommonsMathGeneticsCrossoverPolicy>)getCrossoverPolicy {
  return crossoverPolicy_;
}

- (jdouble)getCrossoverRate {
  return crossoverRate_;
}

- (id<OrgApacheCommonsMathGeneticsMutationPolicy>)getMutationPolicy {
  return mutationPolicy_;
}

- (jdouble)getMutationRate {
  return mutationRate_;
}

- (id<OrgApacheCommonsMathGeneticsSelectionPolicy>)getSelectionPolicy {
  return selectionPolicy_;
}

- (jint)getGenerationsEvolved {
  return generationsEvolved_;
}

- (void)dealloc {
  RELEASE_(crossoverPolicy_);
  RELEASE_(mutationPolicy_);
  RELEASE_(selectionPolicy_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheCommonsMathGeneticsGeneticAlgorithm class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsMathGeneticsGeneticAlgorithm_randomGenerator_, nil, new_OrgApacheCommonsMathRandomJDKRandomGenerator_init());
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsMathGeneticsGeneticAlgorithm)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsMathGeneticsCrossoverPolicy:withDouble:withOrgApacheCommonsMathGeneticsMutationPolicy:withDouble:withOrgApacheCommonsMathGeneticsSelectionPolicy:", "GeneticAlgorithm", NULL, 0x1, NULL, NULL },
    { "setRandomGeneratorWithOrgApacheCommonsMathRandomRandomGenerator:", "setRandomGenerator", "V", 0x29, NULL, NULL },
    { "getRandomGenerator", NULL, "Lorg.apache.commons.math.random.RandomGenerator;", 0x29, NULL, NULL },
    { "evolveWithOrgApacheCommonsMathGeneticsPopulation:withOrgApacheCommonsMathGeneticsStoppingCondition:", "evolve", "Lorg.apache.commons.math.genetics.Population;", 0x1, NULL, NULL },
    { "nextGenerationWithOrgApacheCommonsMathGeneticsPopulation:", "nextGeneration", "Lorg.apache.commons.math.genetics.Population;", 0x1, NULL, NULL },
    { "getCrossoverPolicy", NULL, "Lorg.apache.commons.math.genetics.CrossoverPolicy;", 0x1, NULL, NULL },
    { "getCrossoverRate", NULL, "D", 0x1, NULL, NULL },
    { "getMutationPolicy", NULL, "Lorg.apache.commons.math.genetics.MutationPolicy;", 0x1, NULL, NULL },
    { "getMutationRate", NULL, "D", 0x1, NULL, NULL },
    { "getSelectionPolicy", NULL, "Lorg.apache.commons.math.genetics.SelectionPolicy;", 0x1, NULL, NULL },
    { "getGenerationsEvolved", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "randomGenerator_", NULL, 0xa, "Lorg.apache.commons.math.random.RandomGenerator;", &OrgApacheCommonsMathGeneticsGeneticAlgorithm_randomGenerator_, NULL,  },
    { "crossoverPolicy_", NULL, 0x12, "Lorg.apache.commons.math.genetics.CrossoverPolicy;", NULL, NULL,  },
    { "crossoverRate_", NULL, 0x12, "D", NULL, NULL,  },
    { "mutationPolicy_", NULL, 0x12, "Lorg.apache.commons.math.genetics.MutationPolicy;", NULL, NULL,  },
    { "mutationRate_", NULL, 0x12, "D", NULL, NULL,  },
    { "selectionPolicy_", NULL, 0x12, "Lorg.apache.commons.math.genetics.SelectionPolicy;", NULL, NULL,  },
    { "generationsEvolved_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathGeneticsGeneticAlgorithm = { 2, "GeneticAlgorithm", "org.apache.commons.math.genetics", NULL, 0x1, 11, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathGeneticsGeneticAlgorithm;
}

@end

void OrgApacheCommonsMathGeneticsGeneticAlgorithm_initWithOrgApacheCommonsMathGeneticsCrossoverPolicy_withDouble_withOrgApacheCommonsMathGeneticsMutationPolicy_withDouble_withOrgApacheCommonsMathGeneticsSelectionPolicy_(OrgApacheCommonsMathGeneticsGeneticAlgorithm *self, id<OrgApacheCommonsMathGeneticsCrossoverPolicy> crossoverPolicy, jdouble crossoverRate, id<OrgApacheCommonsMathGeneticsMutationPolicy> mutationPolicy, jdouble mutationRate, id<OrgApacheCommonsMathGeneticsSelectionPolicy> selectionPolicy) {
  NSObject_init(self);
  self->generationsEvolved_ = 0;
  if (crossoverRate < 0 || crossoverRate > 1) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"crossoverRate must be between 0 and 1") autorelease];
  }
  if (mutationRate < 0 || mutationRate > 1) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"mutationRate must be between 0 and 1") autorelease];
  }
  OrgApacheCommonsMathGeneticsGeneticAlgorithm_set_crossoverPolicy_(self, crossoverPolicy);
  self->crossoverRate_ = crossoverRate;
  OrgApacheCommonsMathGeneticsGeneticAlgorithm_set_mutationPolicy_(self, mutationPolicy);
  self->mutationRate_ = mutationRate;
  OrgApacheCommonsMathGeneticsGeneticAlgorithm_set_selectionPolicy_(self, selectionPolicy);
}

OrgApacheCommonsMathGeneticsGeneticAlgorithm *new_OrgApacheCommonsMathGeneticsGeneticAlgorithm_initWithOrgApacheCommonsMathGeneticsCrossoverPolicy_withDouble_withOrgApacheCommonsMathGeneticsMutationPolicy_withDouble_withOrgApacheCommonsMathGeneticsSelectionPolicy_(id<OrgApacheCommonsMathGeneticsCrossoverPolicy> crossoverPolicy, jdouble crossoverRate, id<OrgApacheCommonsMathGeneticsMutationPolicy> mutationPolicy, jdouble mutationRate, id<OrgApacheCommonsMathGeneticsSelectionPolicy> selectionPolicy) {
  OrgApacheCommonsMathGeneticsGeneticAlgorithm *self = [OrgApacheCommonsMathGeneticsGeneticAlgorithm alloc];
  OrgApacheCommonsMathGeneticsGeneticAlgorithm_initWithOrgApacheCommonsMathGeneticsCrossoverPolicy_withDouble_withOrgApacheCommonsMathGeneticsMutationPolicy_withDouble_withOrgApacheCommonsMathGeneticsSelectionPolicy_(self, crossoverPolicy, crossoverRate, mutationPolicy, mutationRate, selectionPolicy);
  return self;
}

void OrgApacheCommonsMathGeneticsGeneticAlgorithm_setRandomGeneratorWithOrgApacheCommonsMathRandomRandomGenerator_(id<OrgApacheCommonsMathRandomRandomGenerator> random) {
  OrgApacheCommonsMathGeneticsGeneticAlgorithm_initialize();
  @synchronized(OrgApacheCommonsMathGeneticsGeneticAlgorithm_class_()) {
    JreStrongAssign(&OrgApacheCommonsMathGeneticsGeneticAlgorithm_randomGenerator_, nil, random);
  }
}

id<OrgApacheCommonsMathRandomRandomGenerator> OrgApacheCommonsMathGeneticsGeneticAlgorithm_getRandomGenerator() {
  OrgApacheCommonsMathGeneticsGeneticAlgorithm_initialize();
  @synchronized(OrgApacheCommonsMathGeneticsGeneticAlgorithm_class_()) {
    return OrgApacheCommonsMathGeneticsGeneticAlgorithm_randomGenerator_;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathGeneticsGeneticAlgorithm)
