//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/collections15/map/FixedSizeMap.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/commons/collections15/collection/UnmodifiableCollection.h"
#include "org/apache/commons/collections15/map/AbstractMapDecorator.h"
#include "org/apache/commons/collections15/map/FixedSizeMap.h"
#include "org/apache/commons/collections15/set/UnmodifiableSet.h"

#define OrgApacheCommonsCollections15MapFixedSizeMap_serialVersionUID 7450927208116179316LL

@interface OrgApacheCommonsCollections15MapFixedSizeMap ()

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsCollections15MapFixedSizeMap, serialVersionUID, jlong)

@implementation OrgApacheCommonsCollections15MapFixedSizeMap

+ (id<JavaUtilMap>)decorateWithJavaUtilMap:(id<JavaUtilMap>)map {
  return OrgApacheCommonsCollections15MapFixedSizeMap_decorateWithJavaUtilMap_(map);
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  OrgApacheCommonsCollections15MapFixedSizeMap_initWithJavaUtilMap_(self, map);
  return self;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  [outArg writeObjectWithId:map_];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  OrgApacheCommonsCollections15MapAbstractMapDecorator_set_map_(self, (id<JavaUtilMap>) check_protocol_cast([inArg readObject], @protocol(JavaUtilMap)));
}

- (id)putWithId:(id)key
         withId:(id)value {
  if ([((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:key] == NO) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot put new key/value pair - Map is fixed size") autorelease];
  }
  return [map_ putWithId:key withId:value];
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)mapToCopy {
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(mapToCopy)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    if ([mapToCopy containsKeyWithId:[it next]] == NO) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot put new key/value pair - Map is fixed size") autorelease];
    }
  }
  [((id<JavaUtilMap>) nil_chk(map_)) putAllWithJavaUtilMap:mapToCopy];
}

- (void)clear {
  @throw [new_JavaLangUnsupportedOperationException_initWithNSString_(@"Map is fixed size") autorelease];
}

- (id)removeWithId:(id)key {
  @throw [new_JavaLangUnsupportedOperationException_initWithNSString_(@"Map is fixed size") autorelease];
}

- (id<JavaUtilSet>)entrySet {
  id<JavaUtilSet> set = [((id<JavaUtilMap>) nil_chk(map_)) entrySet];
  return OrgApacheCommonsCollections15SetUnmodifiableSet_decorateWithJavaUtilSet_(set);
}

- (id<JavaUtilSet>)keySet {
  id<JavaUtilSet> set = [((id<JavaUtilMap>) nil_chk(map_)) keySet];
  return OrgApacheCommonsCollections15SetUnmodifiableSet_decorateWithJavaUtilSet_(set);
}

- (id<JavaUtilCollection>)values {
  id<JavaUtilCollection> coll = [((id<JavaUtilMap>) nil_chk(map_)) values];
  return OrgApacheCommonsCollections15CollectionUnmodifiableCollection_decorateWithJavaUtilCollection_(coll);
}

- (jboolean)isFull {
  return YES;
}

- (jint)maxSize {
  return [self size];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "decorateWithJavaUtilMap:", "decorate", "Ljava.util.Map;", 0x9, NULL, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/util/Map<TK;TV;>;)Ljava/util/Map<TK;TV;>;" },
    { "initWithJavaUtilMap:", "FixedSizeMap", NULL, 0x4, NULL, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;", NULL },
    { "putWithId:withId:", "put", "TV;", 0x1, NULL, "(TK;TV;)TV;" },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "removeWithId:", "remove", "TV;", 0x1, NULL, "(Ljava/lang/Object;)TV;" },
    { "entrySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "values", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "isFull", NULL, "Z", 0x1, NULL, NULL },
    { "maxSize", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsCollections15MapFixedSizeMap_serialVersionUID },
  };
  static const char *superclass_type_args[] = {"TK;", "TV;"};
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15MapFixedSizeMap = { 2, "FixedSizeMap", "org.apache.commons.collections15.map", NULL, 0x1, 13, methods, 1, fields, 2, superclass_type_args, 0, NULL, NULL, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Lorg/apache/commons/collections15/map/AbstractMapDecorator<TK;TV;>;Ljava/util/Map<TK;TV;>;Lorg/apache/commons/collections15/BoundedMap<TK;TV;>;Ljava/io/Serializable;" };
  return &_OrgApacheCommonsCollections15MapFixedSizeMap;
}

@end

id<JavaUtilMap> OrgApacheCommonsCollections15MapFixedSizeMap_decorateWithJavaUtilMap_(id<JavaUtilMap> map) {
  OrgApacheCommonsCollections15MapFixedSizeMap_initialize();
  return [new_OrgApacheCommonsCollections15MapFixedSizeMap_initWithJavaUtilMap_(map) autorelease];
}

void OrgApacheCommonsCollections15MapFixedSizeMap_initWithJavaUtilMap_(OrgApacheCommonsCollections15MapFixedSizeMap *self, id<JavaUtilMap> map) {
  OrgApacheCommonsCollections15MapAbstractMapDecorator_initWithJavaUtilMap_(self, map);
}

OrgApacheCommonsCollections15MapFixedSizeMap *new_OrgApacheCommonsCollections15MapFixedSizeMap_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  OrgApacheCommonsCollections15MapFixedSizeMap *self = [OrgApacheCommonsCollections15MapFixedSizeMap alloc];
  OrgApacheCommonsCollections15MapFixedSizeMap_initWithJavaUtilMap_(self, map);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15MapFixedSizeMap)
