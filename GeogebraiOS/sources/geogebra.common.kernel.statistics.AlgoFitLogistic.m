//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoFitLogistic.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/statistics/AlgoFitLogistic.h"
#include "geogebra/common/kernel/statistics/RegressionMath.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

#define GeogebraCommonKernelStatisticsAlgoFitLogistic_LMFACTORDIV 3.0
#define GeogebraCommonKernelStatisticsAlgoFitLogistic_LMFACTORMULT 2.0
#define GeogebraCommonKernelStatisticsAlgoFitLogistic_MAXITERATIONS 200
#define GeogebraCommonKernelStatisticsAlgoFitLogistic_EPSILONFIND 1.0E-6
#define GeogebraCommonKernelStatisticsAlgoFitLogistic_EPSILONREG 1.0E-14
#define GeogebraCommonKernelStatisticsAlgoFitLogistic_EPSSING 1.0E-20

@interface GeogebraCommonKernelStatisticsAlgoFitLogistic () {
 @public
  GeogebraCommonKernelGeosGeoList *geolist_;
  GeogebraCommonKernelGeosGeoFunction *geofunction_;
}

+ (void)doReg;

+ (void)findParameters;

+ (void)Logistic_Reg;

+ (jdouble)fWithDouble:(jdouble)x
            withDouble:(jdouble)a1
            withDouble:(jdouble)b1
            withDouble:(jdouble)c1;

+ (jdouble)fWithDouble:(jdouble)x
            withDouble:(jdouble)k;

+ (jdouble)df_cWithDouble:(jdouble)x
               withDouble:(jdouble)a1
               withDouble:(jdouble)b1;

+ (jdouble)df_aWithDouble:(jdouble)x
               withDouble:(jdouble)a1
               withDouble:(jdouble)b1
               withDouble:(jdouble)c1;

+ (jdouble)df_bWithDouble:(jdouble)x
               withDouble:(jdouble)a1
               withDouble:(jdouble)b1
               withDouble:(jdouble)c1;

+ (jdouble)betaWithDouble:(jdouble)x
               withDouble:(jdouble)y
               withDouble:(jdouble)a1
               withDouble:(jdouble)b1
               withDouble:(jdouble)c1;

+ (jdouble)betaWithDouble:(jdouble)x
               withDouble:(jdouble)y
               withDouble:(jdouble)b1;

+ (jdouble)beta2WithDoubleArray:(IOSDoubleArray *)x
                withDoubleArray:(IOSDoubleArray *)y
                     withDouble:(jdouble)a1
                     withDouble:(jdouble)b1
                     withDouble:(jdouble)c1;

+ (jdouble)beta2WithDouble:(jdouble)k1;

+ (jdouble)cWithDouble:(jdouble)cx1
            withDouble:(jdouble)cy1
            withDouble:(jdouble)cx2
            withDouble:(jdouble)cy2
            withDouble:(jdouble)cb;

+ (jdouble)aWithDouble:(jdouble)ax1
            withDouble:(jdouble)ay1
            withDouble:(jdouble)ax2
            withDouble:(jdouble)ay2
            withDouble:(jdouble)ab;

- (void)getPoints;

+ (void)errorMsgWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, geolist_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, geofunction_, GeogebraCommonKernelGeosGeoFunction *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, LMFACTORDIV, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, LMFACTORMULT, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, MAXITERATIONS, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, EPSILONFIND, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, EPSILONREG, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, EPSSING, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_a__;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, a__, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, a__, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_b_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, b_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, b_, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_c__;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, c__, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, c__, jdouble)

static IOSDoubleArray *GeogebraCommonKernelStatisticsAlgoFitLogistic_xd_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, xd_, IOSDoubleArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, xd_, IOSDoubleArray *)

static IOSDoubleArray *GeogebraCommonKernelStatisticsAlgoFitLogistic_yd_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, yd_, IOSDoubleArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, yd_, IOSDoubleArray *)

static jint GeogebraCommonKernelStatisticsAlgoFitLogistic_size_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, size_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, size_, jint)

static jint GeogebraCommonKernelStatisticsAlgoFitLogistic_iterations_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, iterations_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, iterations_, jint)

static jboolean GeogebraCommonKernelStatisticsAlgoFitLogistic_error_ = NO;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, error_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, error_, jboolean)

static jboolean GeogebraCommonKernelStatisticsAlgoFitLogistic_allplus_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, allplus_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, allplus_, jboolean)

static jboolean GeogebraCommonKernelStatisticsAlgoFitLogistic_allneg_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, allneg_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, allneg_, jboolean)

static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_x1_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, x1_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, x1_, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_y1_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, y1_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, y1_, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_x2_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, x2_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, x2_, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_y2_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, y2_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, y2_, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_ymult_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, ymult_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, ymult_, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_e1_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, e1_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, e1_, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_e2_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, e2_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, e2_, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_emult_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, emult_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, emult_, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_ydiff_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, ydiff_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitLogistic, ydiff_, jdouble)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitLogistic_compute(GeogebraCommonKernelStatisticsAlgoFitLogistic *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitLogistic_doReg();

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitLogistic_findParameters();

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitLogistic_Logistic_Reg();

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_fWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble a1, jdouble b1, jdouble c1);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_fWithDouble_withDouble_(jdouble x, jdouble k);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_df_cWithDouble_withDouble_withDouble_(jdouble x, jdouble a1, jdouble b1);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_df_aWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble a1, jdouble b1, jdouble c1);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_df_bWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble a1, jdouble b1, jdouble c1);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_betaWithDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble a1, jdouble b1, jdouble c1);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_betaWithDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble b1);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_beta2WithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_(IOSDoubleArray *x, IOSDoubleArray *y, jdouble a1, jdouble b1, jdouble c1);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_beta2WithDouble_(jdouble k1);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_cWithDouble_withDouble_withDouble_withDouble_withDouble_(jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble cb);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_aWithDouble_withDouble_withDouble_withDouble_withDouble_(jdouble ax1, jdouble ay1, jdouble ax2, jdouble ay2, jdouble ab);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitLogistic_getPoints(GeogebraCommonKernelStatisticsAlgoFitLogistic *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitLogistic_errorMsgWithNSString_(NSString *s);

@implementation GeogebraCommonKernelStatisticsAlgoFitLogistic

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geolist {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geolist);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geolist {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_FitLogistic();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geolist_);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:geofunction_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunction *)getFitLogistic {
  return geofunction_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_compute(self);
}

+ (void)doReg {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_doReg();
}

+ (void)findParameters {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_findParameters();
}

+ (void)Logistic_Reg {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_Logistic_Reg();
}

+ (jdouble)fWithDouble:(jdouble)x
            withDouble:(jdouble)a1
            withDouble:(jdouble)b1
            withDouble:(jdouble)c1 {
  return GeogebraCommonKernelStatisticsAlgoFitLogistic_fWithDouble_withDouble_withDouble_withDouble_(x, a1, b1, c1);
}

+ (jdouble)fWithDouble:(jdouble)x
            withDouble:(jdouble)k {
  return GeogebraCommonKernelStatisticsAlgoFitLogistic_fWithDouble_withDouble_(x, k);
}

+ (jdouble)df_cWithDouble:(jdouble)x
               withDouble:(jdouble)a1
               withDouble:(jdouble)b1 {
  return GeogebraCommonKernelStatisticsAlgoFitLogistic_df_cWithDouble_withDouble_withDouble_(x, a1, b1);
}

+ (jdouble)df_aWithDouble:(jdouble)x
               withDouble:(jdouble)a1
               withDouble:(jdouble)b1
               withDouble:(jdouble)c1 {
  return GeogebraCommonKernelStatisticsAlgoFitLogistic_df_aWithDouble_withDouble_withDouble_withDouble_(x, a1, b1, c1);
}

+ (jdouble)df_bWithDouble:(jdouble)x
               withDouble:(jdouble)a1
               withDouble:(jdouble)b1
               withDouble:(jdouble)c1 {
  return GeogebraCommonKernelStatisticsAlgoFitLogistic_df_bWithDouble_withDouble_withDouble_withDouble_(x, a1, b1, c1);
}

+ (jdouble)betaWithDouble:(jdouble)x
               withDouble:(jdouble)y
               withDouble:(jdouble)a1
               withDouble:(jdouble)b1
               withDouble:(jdouble)c1 {
  return GeogebraCommonKernelStatisticsAlgoFitLogistic_betaWithDouble_withDouble_withDouble_withDouble_withDouble_(x, y, a1, b1, c1);
}

+ (jdouble)betaWithDouble:(jdouble)x
               withDouble:(jdouble)y
               withDouble:(jdouble)b1 {
  return GeogebraCommonKernelStatisticsAlgoFitLogistic_betaWithDouble_withDouble_withDouble_(x, y, b1);
}

+ (jdouble)beta2WithDoubleArray:(IOSDoubleArray *)x
                withDoubleArray:(IOSDoubleArray *)y
                     withDouble:(jdouble)a1
                     withDouble:(jdouble)b1
                     withDouble:(jdouble)c1 {
  return GeogebraCommonKernelStatisticsAlgoFitLogistic_beta2WithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_(x, y, a1, b1, c1);
}

+ (jdouble)beta2WithDouble:(jdouble)k1 {
  return GeogebraCommonKernelStatisticsAlgoFitLogistic_beta2WithDouble_(k1);
}

+ (jdouble)cWithDouble:(jdouble)cx1
            withDouble:(jdouble)cy1
            withDouble:(jdouble)cx2
            withDouble:(jdouble)cy2
            withDouble:(jdouble)cb {
  return GeogebraCommonKernelStatisticsAlgoFitLogistic_cWithDouble_withDouble_withDouble_withDouble_withDouble_(cx1, cy1, cx2, cy2, cb);
}

+ (jdouble)aWithDouble:(jdouble)ax1
            withDouble:(jdouble)ay1
            withDouble:(jdouble)ax2
            withDouble:(jdouble)ay2
            withDouble:(jdouble)ab {
  return GeogebraCommonKernelStatisticsAlgoFitLogistic_aWithDouble_withDouble_withDouble_withDouble_withDouble_(ax1, ay1, ax2, ay2, ab);
}

- (void)getPoints {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_getPoints(self);
}

+ (void)errorMsgWithNSString:(NSString *)s {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_errorMsgWithNSString_(s);
}

- (void)dealloc {
  RELEASE_(geolist_);
  RELEASE_(geofunction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoFitLogistic", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:", "AlgoFitLogistic", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFitLogistic", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "doReg", NULL, "V", 0x1a, NULL, NULL },
    { "findParameters", NULL, "V", 0x1a, NULL, NULL },
    { "Logistic_Reg", NULL, "V", 0x1a, NULL, NULL },
    { "fWithDouble:withDouble:withDouble:withDouble:", "f", "D", 0x1a, NULL, NULL },
    { "fWithDouble:withDouble:", "f", "D", 0x1a, NULL, NULL },
    { "df_cWithDouble:withDouble:withDouble:", "df_c", "D", 0x1a, NULL, NULL },
    { "df_aWithDouble:withDouble:withDouble:withDouble:", "df_a", "D", 0x1a, NULL, NULL },
    { "df_bWithDouble:withDouble:withDouble:withDouble:", "df_b", "D", 0x1a, NULL, NULL },
    { "betaWithDouble:withDouble:withDouble:withDouble:withDouble:", "beta", "D", 0x1a, NULL, NULL },
    { "betaWithDouble:withDouble:withDouble:", "beta", "D", 0x1a, NULL, NULL },
    { "beta2WithDoubleArray:withDoubleArray:withDouble:withDouble:withDouble:", "beta2", "D", 0x1a, NULL, NULL },
    { "beta2WithDouble:", "beta2", "D", 0x1a, NULL, NULL },
    { "cWithDouble:withDouble:withDouble:withDouble:withDouble:", "c", "D", 0x1a, NULL, NULL },
    { "aWithDouble:withDouble:withDouble:withDouble:withDouble:", "a", "D", 0x1a, NULL, NULL },
    { "getPoints", NULL, "V", 0x12, NULL, NULL },
    { "errorMsgWithNSString:", "errorMsg", "V", 0x1a, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LMFACTORDIV_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelStatisticsAlgoFitLogistic_LMFACTORDIV },
    { "LMFACTORMULT_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelStatisticsAlgoFitLogistic_LMFACTORMULT },
    { "MAXITERATIONS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsAlgoFitLogistic_MAXITERATIONS },
    { "EPSILONFIND_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelStatisticsAlgoFitLogistic_EPSILONFIND },
    { "EPSILONREG_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelStatisticsAlgoFitLogistic_EPSILONREG },
    { "EPSSING_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelStatisticsAlgoFitLogistic_EPSSING },
    { "a__", "a", 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitLogistic_a__, NULL,  },
    { "b_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitLogistic_b_, NULL,  },
    { "c__", "c", 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitLogistic_c__, NULL,  },
    { "xd_", NULL, 0xa, "[D", &GeogebraCommonKernelStatisticsAlgoFitLogistic_xd_, NULL,  },
    { "yd_", NULL, 0xa, "[D", &GeogebraCommonKernelStatisticsAlgoFitLogistic_yd_, NULL,  },
    { "size_", NULL, 0xa, "I", &GeogebraCommonKernelStatisticsAlgoFitLogistic_size_, NULL,  },
    { "iterations_", NULL, 0xa, "I", &GeogebraCommonKernelStatisticsAlgoFitLogistic_iterations_, NULL,  },
    { "error_", NULL, 0xa, "Z", &GeogebraCommonKernelStatisticsAlgoFitLogistic_error_, NULL,  },
    { "allplus_", NULL, 0xa, "Z", &GeogebraCommonKernelStatisticsAlgoFitLogistic_allplus_, NULL,  },
    { "allneg_", NULL, 0xa, "Z", &GeogebraCommonKernelStatisticsAlgoFitLogistic_allneg_, NULL,  },
    { "geolist_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geofunction_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "x1_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitLogistic_x1_, NULL,  },
    { "y1_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitLogistic_y1_, NULL,  },
    { "x2_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitLogistic_x2_, NULL,  },
    { "y2_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitLogistic_y2_, NULL,  },
    { "ymult_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitLogistic_ymult_, NULL,  },
    { "e1_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitLogistic_e1_, NULL,  },
    { "e2_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitLogistic_e2_, NULL,  },
    { "emult_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitLogistic_emult_, NULL,  },
    { "ydiff_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitLogistic_ydiff_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoFitLogistic = { 2, "AlgoFitLogistic", "geogebra.common.kernel.statistics", NULL, 0x11, 22, methods, 27, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoFitLogistic;
}

@end

void GeogebraCommonKernelStatisticsAlgoFitLogistic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFitLogistic *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geolist) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoFitLogistic *new_GeogebraCommonKernelStatisticsAlgoFitLogistic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geolist) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic *self = [GeogebraCommonKernelStatisticsAlgoFitLogistic alloc];
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geolist);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFitLogistic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFitLogistic *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geolist) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoFitLogistic_set_geolist_(self, geolist);
  GeogebraCommonKernelStatisticsAlgoFitLogistic_setAndConsume_geofunction_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoFitLogistic_compute(self);
}

GeogebraCommonKernelStatisticsAlgoFitLogistic *new_GeogebraCommonKernelStatisticsAlgoFitLogistic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geolist) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic *self = [GeogebraCommonKernelStatisticsAlgoFitLogistic alloc];
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFitLogistic_compute(GeogebraCommonKernelStatisticsAlgoFitLogistic *self) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geolist_)) size];
  GeogebraCommonKernelStatisticsAlgoFitLogistic_error_ = NO;
  if (![self->geolist_ isDefined] || (GeogebraCommonKernelStatisticsAlgoFitLogistic_size_ < 3)) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setUndefined];
    GeogebraCommonKernelStatisticsAlgoFitLogistic_errorMsgWithNSString_(@"List not properly defined or too small. (3 points needed, but the more points, the better result!)");
    return;
  }
  GeogebraCommonKernelStatisticsAlgoFitLogistic_getPoints(self);
  @try {
    GeogebraCommonKernelStatisticsAlgoFitLogistic_doReg();
  }
  @catch (JavaLangException *all) {
    GeogebraCommonKernelStatisticsAlgoFitLogistic_error_ = YES;
  }
  if (!GeogebraCommonKernelStatisticsAlgoFitLogistic_error_) {
    GeogebraCommonKernelArithmeticMyDouble *A = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, GeogebraCommonKernelStatisticsAlgoFitLogistic_a__) autorelease];
    GeogebraCommonKernelArithmeticMyDouble *B = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, -GeogebraCommonKernelStatisticsAlgoFitLogistic_b_) autorelease];
    GeogebraCommonKernelArithmeticMyDouble *C = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, GeogebraCommonKernelStatisticsAlgoFitLogistic_c__) autorelease];
    GeogebraCommonKernelArithmeticMyDouble *ONE = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0) autorelease];
    GeogebraCommonKernelArithmeticFunctionVariable *X = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
    id<GeogebraCommonKernelArithmeticExpressionValue> expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, B, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), X) autorelease];
    expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, expr, GeogebraCommonPluginOperationEnum_get_EXP(), nil) autorelease];
    expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, A, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), expr) autorelease];
    expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ONE, GeogebraCommonPluginOperationEnum_get_PLUS(), expr) autorelease];
    GeogebraCommonKernelArithmeticExpressionNode *node = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, C, GeogebraCommonPluginOperationEnum_get_DIVIDE(), expr) autorelease];
    GeogebraCommonKernelArithmeticFunction *f = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(node, X) autorelease];
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setFunctionWithGeogebraCommonKernelArithmeticFunction:f];
    [self->geofunction_ setDefinedWithBoolean:YES];
  }
  else {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setUndefined];
    return;
  }
}

void GeogebraCommonKernelStatisticsAlgoFitLogistic_doReg() {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  GeogebraCommonKernelStatisticsAlgoFitLogistic_findParameters();
  GeogebraCommonKernelStatisticsAlgoFitLogistic_Logistic_Reg();
}

void GeogebraCommonKernelStatisticsAlgoFitLogistic_findParameters() {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  jdouble err, err_old;
  jdouble lambda = 0.01;
  jint sign = 1;
  jdouble k = 0.001;
  GeogebraCommonKernelStatisticsAlgoFitLogistic_x1_ = IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitLogistic_xd_), 0);
  GeogebraCommonKernelStatisticsAlgoFitLogistic_y1_ = IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitLogistic_yd_), 0);
  GeogebraCommonKernelStatisticsAlgoFitLogistic_x2_ = IOSDoubleArray_Get(GeogebraCommonKernelStatisticsAlgoFitLogistic_xd_, GeogebraCommonKernelStatisticsAlgoFitLogistic_size_ - 1);
  GeogebraCommonKernelStatisticsAlgoFitLogistic_y2_ = IOSDoubleArray_Get(GeogebraCommonKernelStatisticsAlgoFitLogistic_yd_, GeogebraCommonKernelStatisticsAlgoFitLogistic_size_ - 1);
  GeogebraCommonKernelStatisticsAlgoFitLogistic_ymult_ = GeogebraCommonKernelStatisticsAlgoFitLogistic_y1_ * GeogebraCommonKernelStatisticsAlgoFitLogistic_y2_;
  GeogebraCommonKernelStatisticsAlgoFitLogistic_e1_ = JavaLangMath_expWithDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_x1_);
  GeogebraCommonKernelStatisticsAlgoFitLogistic_e2_ = JavaLangMath_expWithDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_x2_);
  GeogebraCommonKernelStatisticsAlgoFitLogistic_emult_ = GeogebraCommonKernelStatisticsAlgoFitLogistic_e1_ * GeogebraCommonKernelStatisticsAlgoFitLogistic_e2_;
  GeogebraCommonKernelStatisticsAlgoFitLogistic_ydiff_ = GeogebraCommonKernelStatisticsAlgoFitLogistic_y1_ - GeogebraCommonKernelStatisticsAlgoFitLogistic_y2_;
  jboolean increasing;
  if (GeogebraCommonKernelStatisticsAlgoFitLogistic_y1_ < GeogebraCommonKernelStatisticsAlgoFitLogistic_y2_) {
    increasing = YES;
  }
  else {
    increasing = NO;
  }
  if (GeogebraCommonKernelStatisticsAlgoFitLogistic_allplus_) {
    if (!increasing) {
      sign = -1;
      k = -k;
    }
  }
  else if (GeogebraCommonKernelStatisticsAlgoFitLogistic_allneg_) {
    if (increasing) {
      sign = -1;
      k = -k;
    }
  }
  else {
    if (JavaLangMath_absWithDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_y2_) < JavaLangMath_absWithDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_y1_)) {
      sign = -1;
      k = -k;
    }
  }
  err_old = GeogebraCommonKernelStatisticsAlgoFitLogistic_beta2WithDouble_(k);
  k = k + sign * lambda;
  err = err_old + 1;
  while (JavaLangMath_absWithDouble_(err - err_old) > GeogebraCommonKernelStatisticsAlgoFitLogistic_EPSILONFIND) {
    err = GeogebraCommonKernelStatisticsAlgoFitLogistic_beta2WithDouble_(k);
    if (err < err_old) {
      lambda = lambda * 5;
      err_old = err;
      err = err + 1;
    }
    else {
      k = k - sign * lambda;
      lambda = lambda / 5;
    }
    k += sign * lambda;
  }
  GeogebraCommonKernelStatisticsAlgoFitLogistic_b_ = k;
  GeogebraCommonKernelStatisticsAlgoFitLogistic_a__ = GeogebraCommonKernelStatisticsAlgoFitLogistic_aWithDouble_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_x1_, GeogebraCommonKernelStatisticsAlgoFitLogistic_y1_, GeogebraCommonKernelStatisticsAlgoFitLogistic_x2_, GeogebraCommonKernelStatisticsAlgoFitLogistic_y2_, k);
  GeogebraCommonKernelStatisticsAlgoFitLogistic_c__ = GeogebraCommonKernelStatisticsAlgoFitLogistic_cWithDouble_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_x1_, GeogebraCommonKernelStatisticsAlgoFitLogistic_y1_, GeogebraCommonKernelStatisticsAlgoFitLogistic_x2_, GeogebraCommonKernelStatisticsAlgoFitLogistic_y2_, k);
  if (JavaLangDouble_isNaNWithDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_a__) || JavaLangDouble_isNaNWithDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_b_) || JavaLangDouble_isNaNWithDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_c__)) {
    GeogebraCommonKernelStatisticsAlgoFitLogistic_error_ = YES;
    GeogebraCommonKernelStatisticsAlgoFitLogistic_errorMsgWithNSString_(@"findParameters(): a,b or c undefined");
    return;
  }
}

void GeogebraCommonKernelStatisticsAlgoFitLogistic_Logistic_Reg() {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  jdouble lambda = 0.0;
  jdouble multfaktor = GeogebraCommonKernelStatisticsAlgoFitLogistic_LMFACTORMULT;
  jdouble residual, old_residual = GeogebraCommonKernelStatisticsAlgoFitLogistic_beta2WithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_xd_, GeogebraCommonKernelStatisticsAlgoFitLogistic_yd_, GeogebraCommonKernelStatisticsAlgoFitLogistic_a__, GeogebraCommonKernelStatisticsAlgoFitLogistic_b_, GeogebraCommonKernelStatisticsAlgoFitLogistic_c__);
  jdouble da = GeogebraCommonKernelStatisticsAlgoFitLogistic_EPSILONREG, db = GeogebraCommonKernelStatisticsAlgoFitLogistic_EPSILONREG, dc = GeogebraCommonKernelStatisticsAlgoFitLogistic_EPSILONREG;
  jdouble b1, b2, b3;
  jdouble m11, m12, m13, m21, m22, m23, m31, m32, m33, n;
  jdouble x, y;
  jdouble dfa, dfb, dfc, beta, newa, newb, newc;
  GeogebraCommonKernelStatisticsAlgoFitLogistic_iterations_ = 0;
  b1 = b2 = b3 = 0.0;
  m11 = m22 = m33 = 0.0;
  for (jint i = 0; i < GeogebraCommonKernelStatisticsAlgoFitLogistic_size_; i++) {
    x = IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitLogistic_xd_), i);
    y = IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitLogistic_yd_), i);
    beta = GeogebraCommonKernelStatisticsAlgoFitLogistic_betaWithDouble_withDouble_withDouble_withDouble_withDouble_(x, y, GeogebraCommonKernelStatisticsAlgoFitLogistic_a__, GeogebraCommonKernelStatisticsAlgoFitLogistic_b_, GeogebraCommonKernelStatisticsAlgoFitLogistic_c__);
    dfa = GeogebraCommonKernelStatisticsAlgoFitLogistic_df_aWithDouble_withDouble_withDouble_withDouble_(x, GeogebraCommonKernelStatisticsAlgoFitLogistic_a__, GeogebraCommonKernelStatisticsAlgoFitLogistic_b_, GeogebraCommonKernelStatisticsAlgoFitLogistic_c__);
    dfb = GeogebraCommonKernelStatisticsAlgoFitLogistic_df_bWithDouble_withDouble_withDouble_withDouble_(x, GeogebraCommonKernelStatisticsAlgoFitLogistic_a__, GeogebraCommonKernelStatisticsAlgoFitLogistic_b_, GeogebraCommonKernelStatisticsAlgoFitLogistic_c__);
    dfc = GeogebraCommonKernelStatisticsAlgoFitLogistic_df_cWithDouble_withDouble_withDouble_(x, GeogebraCommonKernelStatisticsAlgoFitLogistic_a__, GeogebraCommonKernelStatisticsAlgoFitLogistic_b_);
    b1 += beta * dfa;
    b2 += beta * dfb;
    b3 += beta * dfc;
    m11 += dfa * dfa;
    m22 += dfb * dfb;
    m33 += dfc * dfc;
  }
  jdouble startfaktor = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(m11, m22), m33);
  lambda = startfaktor * 0.001;
  while (JavaLangMath_absWithDouble_(da) + JavaLangMath_absWithDouble_(db) + JavaLangMath_absWithDouble_(dc) > GeogebraCommonKernelStatisticsAlgoFitLogistic_EPSILONREG) {
    GeogebraCommonKernelStatisticsAlgoFitLogistic_iterations_++;
    if ((GeogebraCommonKernelStatisticsAlgoFitLogistic_iterations_ > GeogebraCommonKernelStatisticsAlgoFitLogistic_MAXITERATIONS) || (GeogebraCommonKernelStatisticsAlgoFitLogistic_error_)) {
      GeogebraCommonKernelStatisticsAlgoFitLogistic_errorMsgWithNSString_(JreStrcat("$I$", @"More than ", GeogebraCommonKernelStatisticsAlgoFitLogistic_MAXITERATIONS, @" iterations. Solution is probably not usable."));
      break;
    }
    b1 = b2 = b3 = 0.0;
    m11 = m12 = m13 = m21 = m22 = m23 = m31 = m32 = m33 = 0.0;
    for (jint i = 0; i < GeogebraCommonKernelStatisticsAlgoFitLogistic_size_; i++) {
      x = IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitLogistic_xd_), i);
      y = IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitLogistic_yd_), i);
      beta = GeogebraCommonKernelStatisticsAlgoFitLogistic_betaWithDouble_withDouble_withDouble_withDouble_withDouble_(x, y, GeogebraCommonKernelStatisticsAlgoFitLogistic_a__, GeogebraCommonKernelStatisticsAlgoFitLogistic_b_, GeogebraCommonKernelStatisticsAlgoFitLogistic_c__);
      dfa = GeogebraCommonKernelStatisticsAlgoFitLogistic_df_aWithDouble_withDouble_withDouble_withDouble_(x, GeogebraCommonKernelStatisticsAlgoFitLogistic_a__, GeogebraCommonKernelStatisticsAlgoFitLogistic_b_, GeogebraCommonKernelStatisticsAlgoFitLogistic_c__);
      dfb = GeogebraCommonKernelStatisticsAlgoFitLogistic_df_bWithDouble_withDouble_withDouble_withDouble_(x, GeogebraCommonKernelStatisticsAlgoFitLogistic_a__, GeogebraCommonKernelStatisticsAlgoFitLogistic_b_, GeogebraCommonKernelStatisticsAlgoFitLogistic_c__);
      dfc = GeogebraCommonKernelStatisticsAlgoFitLogistic_df_cWithDouble_withDouble_withDouble_(x, GeogebraCommonKernelStatisticsAlgoFitLogistic_a__, GeogebraCommonKernelStatisticsAlgoFitLogistic_b_);
      b1 += beta * dfa;
      b2 += beta * dfb;
      b3 += beta * dfc;
      m11 += dfa * dfa + lambda;
      m12 += dfa * dfb;
      m13 += dfa * dfc;
      m22 += dfb * dfb + lambda;
      m23 += dfb * dfc;
      m33 += dfc * dfc + lambda;
    }
    m21 = m12;
    m31 = m13;
    m32 = m23;
    n = GeogebraCommonKernelStatisticsRegressionMath_det33WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(m11, m12, m13, m21, m22, m23, m31, m32, m33);
    if (JavaLangMath_absWithDouble_(n) < GeogebraCommonKernelStatisticsAlgoFitLogistic_EPSSING) {
      GeogebraCommonKernelStatisticsAlgoFitLogistic_error_ = YES;
      GeogebraCommonKernelStatisticsAlgoFitLogistic_errorMsgWithNSString_(@"Singular matrix...");
      da = db = dc = 0.0;
    }
    else {
      da = GeogebraCommonKernelStatisticsRegressionMath_det33WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(b1, m12, m13, b2, m22, m23, b3, m32, m33) / n;
      db = GeogebraCommonKernelStatisticsRegressionMath_det33WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(m11, b1, m13, m21, b2, m23, m31, b3, m33) / n;
      dc = GeogebraCommonKernelStatisticsRegressionMath_det33WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(m11, m12, b1, m21, m22, b2, m31, m32, b3) / n;
      newa = GeogebraCommonKernelStatisticsAlgoFitLogistic_a__ + da;
      newb = GeogebraCommonKernelStatisticsAlgoFitLogistic_b_ + db;
      newc = GeogebraCommonKernelStatisticsAlgoFitLogistic_c__ + dc;
      residual = GeogebraCommonKernelStatisticsAlgoFitLogistic_beta2WithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_xd_, GeogebraCommonKernelStatisticsAlgoFitLogistic_yd_, newa, newb, newc);
      if (residual < old_residual) {
        lambda = lambda / GeogebraCommonKernelStatisticsAlgoFitLogistic_LMFACTORDIV;
        old_residual = residual;
        multfaktor = GeogebraCommonKernelStatisticsAlgoFitLogistic_LMFACTORMULT;
        GeogebraCommonKernelStatisticsAlgoFitLogistic_a__ = newa;
        GeogebraCommonKernelStatisticsAlgoFitLogistic_b_ = newb;
        GeogebraCommonKernelStatisticsAlgoFitLogistic_c__ = newc;
      }
      else {
        lambda = lambda * multfaktor;
        multfaktor *= 2;
      }
    }
  }
  if (JavaLangDouble_isNaNWithDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_a__) || JavaLangDouble_isNaNWithDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_b_) || JavaLangDouble_isNaNWithDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_c__)) {
    GeogebraCommonKernelStatisticsAlgoFitLogistic_error_ = YES;
    GeogebraCommonKernelStatisticsAlgoFitLogistic_errorMsgWithNSString_(@"findParameters(): a,b or c undefined");
    return;
  }
}

jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_fWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble a1, jdouble b1, jdouble c1) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  return GeogebraCommonKernelStatisticsAlgoFitLogistic_df_cWithDouble_withDouble_withDouble_(x, a1, b1) * c1;
}

jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_fWithDouble_withDouble_(jdouble x, jdouble k) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  jdouble e1k = JavaLangMath_powWithDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_e1_, k), e2k = JavaLangMath_powWithDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_e2_, k);
  jdouble efrac = JavaLangMath_powWithDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoFitLogistic_emult_ / JavaLangMath_expWithDouble_(x), k);
  return GeogebraCommonKernelStatisticsAlgoFitLogistic_ymult_ * (e1k - e2k) / (GeogebraCommonKernelStatisticsAlgoFitLogistic_y2_ * e1k - GeogebraCommonKernelStatisticsAlgoFitLogistic_y1_ * e2k + GeogebraCommonKernelStatisticsAlgoFitLogistic_ydiff_ * efrac);
}

jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_df_cWithDouble_withDouble_withDouble_(jdouble x, jdouble a1, jdouble b1) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  return (1.0 / (1.0 + a1 * JavaLangMath_expWithDouble_(-b1 * x)));
}

jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_df_aWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble a1, jdouble b1, jdouble c1) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  jdouble df_c = GeogebraCommonKernelStatisticsAlgoFitLogistic_df_cWithDouble_withDouble_withDouble_(x, a1, b1);
  return df_c * df_c * JavaLangMath_expWithDouble_(-b1 * x) * (-c1);
}

jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_df_bWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble a1, jdouble b1, jdouble c1) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  jdouble df_c = GeogebraCommonKernelStatisticsAlgoFitLogistic_df_cWithDouble_withDouble_withDouble_(x, a1, b1);
  return df_c * df_c * JavaLangMath_expWithDouble_(-b1 * x) * x * a1 * c1;
}

jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_betaWithDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble a1, jdouble b1, jdouble c1) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  return y - GeogebraCommonKernelStatisticsAlgoFitLogistic_fWithDouble_withDouble_withDouble_withDouble_(x, a1, b1, c1);
}

jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_betaWithDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble b1) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  return y - GeogebraCommonKernelStatisticsAlgoFitLogistic_fWithDouble_withDouble_(x, b1);
}

jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_beta2WithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_(IOSDoubleArray *x, IOSDoubleArray *y, jdouble a1, jdouble b1, jdouble c1) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  jdouble sum = 0.0, beta;
  for (jint i = 0; i < GeogebraCommonKernelStatisticsAlgoFitLogistic_size_; i++) {
    beta = GeogebraCommonKernelStatisticsAlgoFitLogistic_betaWithDouble_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(nil_chk(x), i), IOSDoubleArray_Get(nil_chk(y), i), a1, b1, c1);
    sum += beta * beta;
  }
  return sum;
}

jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_beta2WithDouble_(jdouble k1) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  jdouble beta = 0.0, sum = 0.0;
  for (jint i = 0; i < GeogebraCommonKernelStatisticsAlgoFitLogistic_size_; i++) {
    beta = GeogebraCommonKernelStatisticsAlgoFitLogistic_betaWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitLogistic_xd_), i), IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitLogistic_yd_), i), k1);
    sum += beta * beta;
  }
  return sum;
}

jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_cWithDouble_withDouble_withDouble_withDouble_withDouble_(jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble cb) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  return cy1 * cy2 * (JavaLangMath_expWithDouble_(cb * cx1) - JavaLangMath_expWithDouble_(cb * cx2)) / (cy2 * JavaLangMath_expWithDouble_(cb * cx1) - cy1 * JavaLangMath_expWithDouble_(cb * cx2));
}

jdouble GeogebraCommonKernelStatisticsAlgoFitLogistic_aWithDouble_withDouble_withDouble_withDouble_withDouble_(jdouble ax1, jdouble ay1, jdouble ax2, jdouble ay2, jdouble ab) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  return JavaLangMath_expWithDouble_(ab * (ax1 + ax2)) * (ay1 - ay2) / (ay2 * JavaLangMath_expWithDouble_(ab * ax1) - ay1 * JavaLangMath_expWithDouble_(ab * ax2));
}

void GeogebraCommonKernelStatisticsAlgoFitLogistic_getPoints(GeogebraCommonKernelStatisticsAlgoFitLogistic *self) {
  IOSDoubleArray *xlist = nil, *ylist = nil;
  IOSDoubleArray *xy = [IOSDoubleArray arrayWithLength:2];
  GeogebraCommonKernelGeosGeoPoint *geoelement;
  JavaUtilTreeSet *sortedSet;
  sortedSet = [new_JavaUtilTreeSet_initWithJavaUtilComparator_(GeogebraCommonKernelGeosGeoPoint_getComparatorX()) autorelease];
  for (jint i = 0; i < GeogebraCommonKernelStatisticsAlgoFitLogistic_size_; i++) {
    if ([[((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geolist_)) getWithInt:i] isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) {
      geoelement = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([self->geolist_ getWithInt:i], [GeogebraCommonKernelGeosGeoPoint class]);
      [sortedSet addWithId:geoelement];
    }
    else {
      GeogebraCommonKernelStatisticsAlgoFitLogistic_error_ = YES;
    }
  }
  id<JavaUtilIterator> iter = [sortedSet iterator];
  jint i = 0;
  GeogebraCommonKernelStatisticsAlgoFitLogistic_allplus_ = YES;
  GeogebraCommonKernelStatisticsAlgoFitLogistic_allneg_ = YES;
  xlist = [IOSDoubleArray arrayWithLength:GeogebraCommonKernelStatisticsAlgoFitLogistic_size_];
  ylist = [IOSDoubleArray arrayWithLength:GeogebraCommonKernelStatisticsAlgoFitLogistic_size_];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    geoelement = [iter next];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(geoelement)) getInhomCoordsWithDoubleArray:xy];
    *IOSDoubleArray_GetRef(xlist, i) = IOSDoubleArray_Get(xy, 0);
    *IOSDoubleArray_GetRef(ylist, i) = IOSDoubleArray_Get(xy, 1);
    if (IOSDoubleArray_Get(ylist, i) < 0) {
      GeogebraCommonKernelStatisticsAlgoFitLogistic_allplus_ = NO;
    }
    if (IOSDoubleArray_Get(ylist, i) > 0) {
      GeogebraCommonKernelStatisticsAlgoFitLogistic_allneg_ = NO;
    }
    i++;
  }
  JreStrongAssign(&GeogebraCommonKernelStatisticsAlgoFitLogistic_xd_, nil, xlist);
  JreStrongAssign(&GeogebraCommonKernelStatisticsAlgoFitLogistic_yd_, nil, ylist);
  if (GeogebraCommonKernelStatisticsAlgoFitLogistic_error_) {
    GeogebraCommonKernelStatisticsAlgoFitLogistic_errorMsgWithNSString_(@"getPoints(): Wrong list format...");
  }
}

void GeogebraCommonKernelStatisticsAlgoFitLogistic_errorMsgWithNSString_(NSString *s) {
  GeogebraCommonKernelStatisticsAlgoFitLogistic_initialize();
  GeogebraCommonMainApp_debugWithNSString_(s);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoFitLogistic)
