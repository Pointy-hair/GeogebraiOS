//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoDilate3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoDilate3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoTransformation3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoDilate.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoDilate3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)A
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDilate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, A, r, S);
  return self;
}

- (GeogebraCommonKernelGeosGeoElement *)copy__WithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) copy3DWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (GeogebraCommonKernelGeosGeoElement *)getResultTemplateWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (([geo isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]] || [geo isKindOfClass:[GeogebraCommonKernelGeosGeoCurveCartesian class]])) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  return [super getResultTemplateWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (GeogebraCommonKernelGeosGeoElement *)copyInternalWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons1
                                                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) copyInternal3DWithGeogebraCommonKernelConstruction:cons1 withGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)setOutGeo {
  if ([inGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_toGeoCurveCartesianWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(kernel_, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(inGeo_, [GeogebraCommonKernelGeosGeoFunction class]), (GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) check_class_cast(outGeo_, [GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D class]));
  }
  else {
    [super setOutGeo];
  }
}

- (GeogebraCommonKernelMatrixCoords *)getPointCoords {
  return [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(S_)) getInhomCoordsInD3];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoDilate3D", NULL, 0x1, NULL, NULL },
    { "copy__WithGeogebraCommonKernelGeosGeoElement:", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "getResultTemplateWithGeogebraCommonKernelGeosGeoElement:", "getResultTemplate", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "copyInternalWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:", "copyInternal", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "setOutGeo", NULL, "V", 0x4, NULL, NULL },
    { "getPointCoords", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoDilate3D = { 2, "AlgoDilate3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDilate3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoDilate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoDilate3D *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *A, id<GeogebraCommonKernelArithmeticNumberValue> r, id<GeogebraCommonKernelKernelNDGeoPointND> S) {
  GeogebraCommonKernelAlgosAlgoDilate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, A, r, S);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoDilate3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDilate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *A, id<GeogebraCommonKernelArithmeticNumberValue> r, id<GeogebraCommonKernelKernelNDGeoPointND> S) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDilate3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoDilate3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDilate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, A, r, S);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoDilate3D)
