//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoLCM.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoLCM.h"
#include "geogebra/common/kernel/algos/AlgoTwoNumFunction.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"

@implementation GeogebraCommonKernelAlgosAlgoLCM

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b {
  GeogebraCommonKernelAlgosAlgoLCM_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_LCM();
}

- (void)compute {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) isDefined]) {
    if ([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) getDouble] > JavaLangLong_MAX_VALUE || [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) getDouble] > JavaLangLong_MAX_VALUE || [a_ getDouble] < -JavaLangLong_MAX_VALUE || [b_ getDouble] < -JavaLangLong_MAX_VALUE) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setUndefined];
      return;
    }
    if (GeogebraCommonKernelKernel_isZeroWithDouble_([a_ getDouble]) && GeogebraCommonKernelKernel_isZeroWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) getDouble])) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:0];
      return;
    }
    if ([a_ getDouble] == JavaLangMath_floorWithDouble_([a_ getDouble]) && [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) getDouble] == JavaLangMath_floorWithDouble_([b_ getDouble])) {
      JavaMathBigInteger *i1 = JavaMathBigInteger_valueOfWithLong_(J2ObjCFpToLong([a_ getDouble]));
      JavaMathBigInteger *i2 = JavaMathBigInteger_valueOfWithLong_(J2ObjCFpToLong([b_ getDouble]));
      JavaMathBigInteger *gcd = [((JavaMathBigInteger *) nil_chk(i1)) gcdWithJavaMathBigInteger:i2];
      i1 = [i1 divideWithJavaMathBigInteger:gcd];
      jdouble result = JavaLangMath_absWithDouble_([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(i1)) multiplyWithJavaMathBigInteger:i2])) doubleValue]);
      if (result > 1e15) {
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setUndefined];
        return;
      }
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:result];
    }
    else {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setUndefined];
    }
  }
  else [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setUndefined];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoLCM", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoLCM = { 2, "AlgoLCM", "geogebra.common.kernel.algos", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoLCM;
}

@end

void GeogebraCommonKernelAlgosAlgoLCM_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoLCM *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b) {
  GeogebraCommonKernelAlgosAlgoTwoNumFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
}

GeogebraCommonKernelAlgosAlgoLCM *new_GeogebraCommonKernelAlgosAlgoLCM_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b) {
  GeogebraCommonKernelAlgosAlgoLCM *self = [GeogebraCommonKernelAlgosAlgoLCM alloc];
  GeogebraCommonKernelAlgosAlgoLCM_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoLCM)
