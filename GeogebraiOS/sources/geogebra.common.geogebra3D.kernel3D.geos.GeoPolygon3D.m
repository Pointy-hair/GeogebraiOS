//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "geogebra/common/geogebra3D/euclidianForPlane/EuclidianViewForPlaneCompanion.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoJoinPoints3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCoordSys1D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/Region.h"
#include "geogebra/common/kernel/algos/AlgoPolygon.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/AppCompanion.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D () {
 @public
  GeogebraCommonKernelMatrixCoordSys *coordSys_;
  IOSObjectArray *points2D_;
  jboolean isPartOfClosedSurface__;
  jboolean createSegments_GeoPolygon3D_;
  JavaUtilArrayList *points3DArray_;
  GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *euclidianViewForPlane_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *tmpMatrix4x4_;
  jboolean reverseNormal_;
  IOSDoubleArray *tmp3_GeoPolygon3D_;
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiVal
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D, coordSys_, GeogebraCommonKernelMatrixCoordSys *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D, points2D_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D, points3DArray_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D, euclidianViewForPlane_, GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D, tmpMatrix4x4_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D, tmp3_GeoPolygon3D_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *self, id<GeogebraCommonKernelArithmeticNumberValue> phiVal, GeogebraCommonKernelMatrixCoords *center, GeogebraCommonKernelMatrixCoords *direction);

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                  withGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)cs2D
                                             withBoolean:(jboolean)createSegments {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelMatrixCoordSys_withBoolean_(self, c, points, cs2D, createSegments);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, points);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                             withBoolean:(jboolean)isIntersection {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withBoolean_(self, cons, isIntersection);
  return self;
}

- (jboolean)isIntersection {
  return isIntersection_;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_POLYGON3D();
}

- (jboolean)isGeoElement3D {
  return YES;
}

- (id<GeogebraCommonKernelKernelNDGeoSegmentND>)createSegmentWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)startPoint
                                                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)endPoint
                                                                                            withBoolean:(jboolean)euclidianVisible {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(startPoint, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(endPoint, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) return [super createSegmentWithGeogebraCommonKernelKernelNDGeoPointND:startPoint withGeogebraCommonKernelKernelNDGeoPointND:endPoint withBoolean:euclidianVisible];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D *algoSegment = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonPluginGeoClassEnum_(cons_, startPoint, endPoint, self, GeogebraCommonPluginGeoClassEnum_get_SEGMENT3D()) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoSegment];
  return [self createSegmentWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast([algoSegment getCS], @protocol(GeogebraCommonKernelKernelNDGeoSegmentND)) withBoolean:euclidianVisible];
}

- (GeogebraCommonKernelGeosGeoPoint *)getPointWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(points2D_), i);
}

- (GeogebraCommonKernelMatrixCoords *)getPoint3DWithInt:(jint)i {
  GeogebraCommonKernelMatrixCoords *v = [super getPoint3DWithInt:i];
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys_)) getPointWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX] withDouble:[v getY]];
}

- (GeogebraCommonKernelMatrixCoords *)getMainDirection {
  if (reverseNormal_) {
    return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys_)) getNormal])) mulWithDouble:-1];
  }
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys_)) getNormal];
}

- (IOSObjectArray *)getPoints {
  return points2D_;
}

- (void)setPoints2DWithGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_set_points2D_(self, points);
}

- (void)setEuclidianVisibleWithBoolean:(jboolean)visible {
  [self setEuclidianVisibleWithBoolean:visible withBoolean:createSegments_GeoPolygon3D_];
}

- (void)setCoordSysWithGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)cs {
  if (points_ == nil) return;
  [self setDefined];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_set_coordSys_(self, cs);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_setAndConsume_points2D_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(points_))->size_ type:GeogebraCommonKernelGeosGeoPoint_class_()]);
  for (jint i = 0; i < points_->size_; i++) {
    IOSObjectArray_SetAndConsume(points2D_, i, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withBoolean_([self getConstruction], YES));
  }
  if (coordSys_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_setAndConsume_coordSys_(self, new_GeogebraCommonKernelMatrixCoordSys_initWithInt_(2));
    [self updateCoordSys];
  }
}

- (void)setCoordSysWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly {
  if (coordSys_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_setAndConsume_coordSys_(self, new_GeogebraCommonKernelMatrixCoordSys_initWithInt_(2));
  }
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys_)) setWithGeogebraCommonKernelMatrixCoordSys:[((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly)) getCoordSys]];
}

- (void)setCoordSysAndPoints3DWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly {
  [self setCoordSysWithGeogebraCommonKernelGeosGeoPolygon:poly];
  [self setPoints3DLength];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points2D_))->size_; i++) {
    GeogebraCommonKernelMatrixCoords *v = [super getPoint3DWithInt:i];
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [((JavaUtilArrayList *) nil_chk(points3DArray_)) getWithInt:i];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys_)) getPointWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX] withDouble:[v getY]]];
  }
  for (jint i = points2D_->size_; i < [((JavaUtilArrayList *) nil_chk(points3DArray_)) size]; i++) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([points3DArray_ getWithInt:i])) setUndefined];
  }
}

- (void)setPoints3DLength {
  if (points3DArray_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_setAndConsume_points3DArray_(self, new_JavaUtilArrayList_init());
  }
  for (jint i = [((JavaUtilArrayList *) nil_chk(points3DArray_)) size]; i < ((IOSObjectArray *) nil_chk(points2D_))->size_; i++) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    [points3DArray_ addWithId:point];
    [point setCanBeRemovedAsInputWithBoolean:NO];
  }
  GeogebraCommonKernelGeosGeoPolygon_setAndConsume_points_(self, [IOSObjectArray newArrayWithLength:points2D_->size_ type:GeogebraCommonKernelKernelNDGeoPointND_class_()]);
  for (jint i = 0; i < points2D_->size_; i++) {
    IOSObjectArray_Set(points_, i, [points3DArray_ getWithInt:i]);
  }
}

- (void)setPointsAndSegmentsLengthWithInt:(jint)polyLength {
  [self setPointsLengthWithInt:polyLength withGeogebraCommonKernelKernelNDGeoPointNDArray:nil];
  [self setPoints3DLength];
  [self updateSegments];
}

- (jboolean)checkPointsAreOnCoordSys {
  GeogebraCommonKernelMatrixCoords *tmpCoords = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_checkPointsAreOnCoordSysWithGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoPointArray_withGeogebraCommonKernelMatrixCoords_(coordSys_, points_, points2D_, tmpCoords);
}

+ (jboolean)checkPointsAreOnCoordSysWithGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)coordSys
                           withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                                 withGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points2D
                                      withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)tmpCoords {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_checkPointsAreOnCoordSysWithGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoPointArray_withGeogebraCommonKernelMatrixCoords_(coordSys, points, points2D, tmpCoords);
}

- (jboolean)updateCoordSys {
  GeogebraCommonKernelMatrixCoords *tmpCoords = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_updateCoordSysWithGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoPointArray_withGeogebraCommonKernelMatrixCoords_(coordSys_, points_, points2D_, tmpCoords);
}

+ (jboolean)updateCoordSysWithGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)coordSys
                 withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                       withGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points2D
                            withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)tmpCoords {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_updateCoordSysWithGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoPointArray_withGeogebraCommonKernelMatrixCoords_(coordSys, points, points2D, tmpCoords);
}

- (void)setOrthoNormalRegionCS {
  [self updateRegionCSWithGeogebraCommonKernelGeosGeoPoint:[new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons_, 0, 0, 1) autorelease] withGeogebraCommonKernelGeosGeoPoint:[new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons_, 1, 0, 1) autorelease] withGeogebraCommonKernelGeosGeoPoint:[new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons_, 0, 1, 1) autorelease]];
}

- (GeogebraCommonKernelMatrixCoordSys *)getCoordSys {
  return coordSys_;
}

- (jboolean)isDefined {
  if (coordSys_ == nil) return NO;
  else return [super isDefined] && [coordSys_ isDefined];
}

- (void)setIsPartOfClosedSurfaceWithBoolean:(jboolean)v {
  isPartOfClosedSurface__ = v;
}

- (jboolean)isPartOfClosedSurface {
  return isPartOfClosedSurface__;
}

- (void)pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI {
  if (![((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithGeogebraCommonKernelKernelNDGeoPointND:PI]) {
    [self pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:PI];
    return;
  }
  if (!([PI isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]])) return;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *P = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(PI, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  GeogebraCommonKernelPathParameter *pp = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(P)) getPathParameter];
  jdouble oldT = [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) getT];
  jint index = J2ObjCFpToInt([pp getT]);
  id<GeogebraCommonKernelKernelNDGeoSegmentND> seg;
  if (segments_ == nil) {
    seg = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(seg, [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class])) setCoordFromPointsWithGeogebraCommonKernelMatrixCoords:[self getPoint3DWithInt:index] withGeogebraCommonKernelMatrixCoords:[self getPoint3DWithInt:(index + 1) % [self getPointsLength]]];
  }
  else {
    seg = IOSObjectArray_Get(segments_, index);
  }
  [pp setTWithDouble:[pp getT] - index];
  [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
  [pp setTWithDouble:oldT];
}

- (void)pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI {
  if (!([PI isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]])) return;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *P = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(PI, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  GeogebraCommonKernelMatrixCoords *coordsOld = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(P)) getInhomCoords])) copyVector];
  id<GeogebraCommonKernelRegion> region = [P getRegion];
  [P setRegionWithGeogebraCommonKernelRegion:nil];
  jdouble minDist = JavaLangDouble_POSITIVE_INFINITY;
  GeogebraCommonKernelMatrixCoords *res = nil;
  jdouble param = 0;
  GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *segment = nil;
  if (segments_ == nil) {
    segment = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  }
  GeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  for (jint i = 0; i < [self getPointsLength]; i++) {
    [P setCoordsWithGeogebraCommonKernelMatrixCoords:coordsOld withBoolean:NO];
    if (segment == nil) {
      [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(nil_chk(segments_), i))) pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
    }
    else {
      [segment setCoordFromPointsWithGeogebraCommonKernelMatrixCoords:[self getPoint3DWithInt:i] withGeogebraCommonKernelMatrixCoords:[self getPoint3DWithInt:(i + 1) % [self getPointsLength]]];
      [segment pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
    }
    jdouble dist;
    if ([P hasWillingCoords] && [P hasWillingDirection]) {
      dist = [((GeogebraCommonKernelMatrixCoords *) nil_chk([P getInhomCoords])) distLineWithGeogebraCommonKernelMatrixCoords:[P getWillingCoords] withGeogebraCommonKernelMatrixCoords:[P getWillingDirection]];
    }
    else {
      dist = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([P getInhomCoords])) subWithGeogebraCommonKernelMatrixCoords:coordsOld])) squareNorm];
    }
    if (dist < minDist) {
      minDist = dist;
      res = [((GeogebraCommonKernelMatrixCoords *) nil_chk([P getInhomCoords])) copyVector];
      param = i + [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) getT];
    }
  }
  [P setCoordsWithGeogebraCommonKernelMatrixCoords:res withBoolean:NO];
  [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) setTWithDouble:param];
  [P setRegionWithGeogebraCommonKernelRegion:region];
}

- (void)setRegionChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI
                                                        withDouble:(jdouble)x
                                                        withDouble:(jdouble)y {
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) setCoords2DWithDouble:x withDouble:y withDouble:1];
  [PI updateCoordsFrom2DWithBoolean:NO withGeogebraCommonKernelMatrixCoordSys:nil];
}

- (jboolean)isInRegionWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI
                                                     withBoolean:(jboolean)update {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *P = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(PI, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(P)) updateCoords2DWithGeogebraCommonKernelRegion:self withBoolean:NO];
  return [self isInRegionWithDouble:[P getX2D] withDouble:[P getY2D]];
}

- (GeogebraCommonKernelGeosGeoPolygon *)newGeoPolygonWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, nil) autorelease];
}

- (GeogebraCommonKernelMatrixCoords *)getDirectionInD3 {
  return [self getMainDirection];
}

- (void)createView2D {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_set_euclidianViewForPlane_(self, (GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) check_class_cast([((GeogebraCommonMainAppCompanion *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getCompanion])) createEuclidianViewForPlaneWithGeogebraCommonKernelKernelNDViewCreator:self withBoolean:YES], [GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion class]));
  [((GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(euclidianViewForPlane_)) setTransformRegardingView];
}

- (void)removeView2D {
  [((GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(euclidianViewForPlane_)) doRemove];
}

- (void)setEuclidianViewForPlaneWithGeogebraCommonEuclidianEuclidianViewCompanion:(GeogebraCommonEuclidianEuclidianViewCompanion *)view {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_set_euclidianViewForPlane_(self, (GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) check_class_cast(view, [GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion class]));
}

- (jboolean)hasView2DVisible {
  return euclidianViewForPlane_ != nil && [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getGuiManager])) showViewWithInt:[euclidianViewForPlane_ getId]];
}

- (void)setView2DVisibleWithBoolean:(jboolean)flag {
  if (euclidianViewForPlane_ == nil) {
    if (flag) [self createView2D];
    return;
  }
  [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getGuiManager])) setShowViewWithBoolean:flag withInt:[((GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(euclidianViewForPlane_)) getId]];
}

- (void)update {
  [super update];
  if (euclidianViewForPlane_ != nil) {
    [euclidianViewForPlane_ updateForPlane];
  }
}

- (void)doRemove {
  if (euclidianViewForPlane_ != nil) {
    [self removeView2D];
  }
  [super doRemove];
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11 {
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_set_tmpMatrix4x4_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  }
  else {
    [tmpMatrix4x4_ setWithInt:1 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:1 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:2 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:2 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:1 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:2 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:1 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:2 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:4 withDouble:1];
  }
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_)) setWithInt:1 withInt:1 withDouble:a00];
  [tmpMatrix4x4_ setWithInt:1 withInt:2 withDouble:a01];
  [tmpMatrix4x4_ setWithInt:2 withInt:1 withDouble:a10];
  [tmpMatrix4x4_ setWithInt:2 withInt:2 withDouble:a11];
  IOSDoubleArray *ret = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) matrixTransformWithGeogebraCommonKernelMatrixCoordMatrix4x4:tmpMatrix4x4_];
  [super matrixTransformWithDouble:IOSDoubleArray_Get(nil_chk(ret), 0) withDouble:IOSDoubleArray_Get(ret, 1) withDouble:0 withDouble:IOSDoubleArray_Get(ret, 2)];
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_set_tmpMatrix4x4_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  }
  else {
    [tmpMatrix4x4_ setWithInt:1 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:2 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:1 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:2 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:4 withDouble:1];
  }
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_)) setWithInt:1 withInt:1 withDouble:a00];
  [tmpMatrix4x4_ setWithInt:1 withInt:2 withDouble:a01];
  [tmpMatrix4x4_ setWithInt:1 withInt:3 withDouble:a02];
  [tmpMatrix4x4_ setWithInt:2 withInt:1 withDouble:a10];
  [tmpMatrix4x4_ setWithInt:2 withInt:2 withDouble:a11];
  [tmpMatrix4x4_ setWithInt:2 withInt:3 withDouble:a12];
  [tmpMatrix4x4_ setWithInt:3 withInt:1 withDouble:a20];
  [tmpMatrix4x4_ setWithInt:3 withInt:2 withDouble:a21];
  [tmpMatrix4x4_ setWithInt:3 withInt:3 withDouble:a22];
  IOSDoubleArray *ret = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) matrixTransformWithGeogebraCommonKernelMatrixCoordMatrix4x4:tmpMatrix4x4_];
  [super matrixTransformWithDouble:IOSDoubleArray_Get(nil_chk(ret), 0) withDouble:IOSDoubleArray_Get(ret, 1) withDouble:0 withDouble:IOSDoubleArray_Get(ret, 2)];
}

- (void)setInitLabelsCalledWithBoolean:(jboolean)flag {
  initLabelsCalled_ = flag;
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) rotateWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble] withGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_O_()];
  for (jint i = 0; i < [self getPointsLength]; i++) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([super getPointNDWithInt:i], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) rotateWithGeogebraCommonKernelArithmeticNumberValue:r];
  }
  {
    IOSObjectArray *a__ = [self getSegments];
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = *b__++;
      if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) isGeoElement3D]) {
        [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(seg, [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class])) rotateWithGeogebraCommonKernelArithmeticNumberValue:r];
      }
    }
  }
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) rotateWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble] withGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(S)) getInhomCoordsInD3]];
  for (jint i = 0; i < [self getPointsLength]; i++) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([super getPointNDWithInt:i], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoPointND:S];
  }
  {
    IOSObjectArray *a__ = [self getSegments];
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = *b__++;
      if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) isGeoElement3D]) {
        [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(seg, [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class])) rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoPointND:S];
      }
    }
  }
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiVal
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q
             withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, phiVal, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Q)) getInhomCoordsInD3], [((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation)) getDirectionInD3]);
  for (jint i = 0; i < [self getPointsLength]; i++) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([super getPointNDWithInt:i], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) rotateWithGeogebraCommonKernelArithmeticNumberValue:phiVal withGeogebraCommonKernelKernelNDGeoPointND:Q withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  }
  {
    IOSObjectArray *a__ = [self getSegments];
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = *b__++;
      if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) isGeoElement3D]) {
        [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(seg, [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class])) rotateWithGeogebraCommonKernelArithmeticNumberValue:phiVal withGeogebraCommonKernelKernelNDGeoPointND:Q withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
      }
    }
  }
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiVal
                  withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, phiVal, [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getStartInhomCoords], [line getDirectionInD3]);
  for (jint i = 0; i < [self getPointsLength]; i++) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([super getPointNDWithInt:i], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) rotateWithGeogebraCommonKernelArithmeticNumberValue:phiVal withGeogebraCommonKernelKernelNDGeoLineND:line];
  }
  {
    IOSObjectArray *a__ = [self getSegments];
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = *b__++;
      if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) isGeoElement3D]) {
        [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(seg, [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class])) rotateWithGeogebraCommonKernelArithmeticNumberValue:phiVal withGeogebraCommonKernelKernelNDGeoLineND:line];
      }
    }
  }
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiVal
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, phiVal, center, direction);
}

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) translateWithGeogebraCommonKernelMatrixCoords:v];
  for (jint i = 0; i < [self getPointsLength]; i++) {
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([super getPointNDWithInt:i])) translateWithGeogebraCommonKernelMatrixCoords:v];
  }
  {
    IOSObjectArray *a__ = [self getSegments];
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = *b__++;
      if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) isGeoElement3D]) {
        [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(seg, [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class])) translateWithGeogebraCommonKernelMatrixCoords:v];
      }
    }
  }
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Q {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) mirrorWithGeogebraCommonKernelMatrixCoords:Q];
  for (jint i = 0; i < [self getPointsLength]; i++) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([super getPointNDWithInt:i], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) mirrorWithGeogebraCommonKernelMatrixCoords:Q];
  }
  {
    IOSObjectArray *a__ = [self getSegments];
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = *b__++;
      if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) isGeoElement3D]) {
        [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(seg, [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class])) mirrorWithGeogebraCommonKernelMatrixCoords:Q];
      }
    }
  }
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonKernelMatrixCoords *point = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getStartInhomCoords];
  GeogebraCommonKernelMatrixCoords *direction = [((GeogebraCommonKernelMatrixCoords *) nil_chk([line getDirectionInD3])) normalized];
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) mirrorWithGeogebraCommonKernelMatrixCoords:point withGeogebraCommonKernelMatrixCoords:direction];
  reverseNormal_ = !reverseNormal_;
  for (jint i = 0; i < [self getPointsLength]; i++) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([super getPointNDWithInt:i], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) mirrorWithGeogebraCommonKernelKernelNDGeoLineND:line];
  }
  {
    IOSObjectArray *a__ = [self getSegments];
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = *b__++;
      if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) isGeoElement3D]) {
        [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(seg, [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class])) mirrorWithGeogebraCommonKernelKernelNDGeoLineND:line];
      }
    }
  }
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) mirrorWithGeogebraCommonKernelMatrixCoordSys:[((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane)) getCoordSys]];
  reverseNormal_ = !reverseNormal_;
  for (jint i = 0; i < [self getPointsLength]; i++) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([super getPointNDWithInt:i], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:plane];
  }
  {
    IOSObjectArray *a__ = [self getSegments];
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = *b__++;
      if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) isGeoElement3D]) {
        [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(seg, [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class])) mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:plane];
      }
    }
  }
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)rval
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)S {
  jdouble r = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble];
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) dilateWithDouble:r withGeogebraCommonKernelMatrixCoords:S];
  if (r < 0) {
    r = -r;
  }
  for (jint i = 0; i < [self getPointsLength]; i++) [((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPointWithInt:i])) dilateWithDouble:r];
  [self calcArea];
  for (jint i = 0; i < [self getPointsLength]; i++) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([super getPointNDWithInt:i], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) dilateWithGeogebraCommonKernelArithmeticNumberValue:rval withGeogebraCommonKernelMatrixCoords:S];
  }
  {
    IOSObjectArray *a__ = [self getSegments];
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = *b__++;
      if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) isGeoElement3D]) {
        [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(seg, [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class])) dilateWithGeogebraCommonKernelArithmeticNumberValue:rval withGeogebraCommonKernelMatrixCoords:S];
      }
    }
  }
}

- (void)setReverseNormal {
  reverseNormal_ = YES;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolygon] && [geo isGeoElement3D]) {
    reverseNormal_ = ((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class]))->reverseNormal_;
  }
  [super setWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolygon]) {
    GeogebraCommonKernelGeosGeoPolygon *g = (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPolygon class]);
    jint gLength = [g getPointsLength];
    if (gLength == [self getPointsLength]) {
      GeogebraCommonKernelMatrixCoords *firstPoint = [self getPoint3DWithInt:0];
      jboolean fPointFound = NO;
      jint iFirstPoint = 0;
      while ((!fPointFound) && (iFirstPoint < gLength)) {
        if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(firstPoint)) equalsForKernelWithGeogebraCommonKernelMatrixCoords:[g getPoint3DWithInt:iFirstPoint]]) {
          fPointFound = YES;
        }
        else {
          iFirstPoint++;
        }
      }
      if (fPointFound) {
        jboolean sPointFound = NO;
        jint step = 1;
        if ([((GeogebraCommonKernelMatrixCoords *) nil_chk([self getPoint3DWithInt:1])) equalsForKernelWithGeogebraCommonKernelMatrixCoords:[g getPoint3DWithInt:(iFirstPoint + step) % gLength]]) {
          sPointFound = YES;
        }
        else {
          step = -1;
          jint j = iFirstPoint + step;
          if (j < 0) j = gLength - 1;
          if ([((GeogebraCommonKernelMatrixCoords *) nil_chk([self getPoint3DWithInt:1])) equalsForKernelWithGeogebraCommonKernelMatrixCoords:[g getPoint3DWithInt:j]]) {
            sPointFound = YES;
          }
        }
        if (sPointFound) {
          jint i = 2;
          jint j = iFirstPoint + step + step;
          if (j < 0) j = j + gLength;
          j = j % gLength;
          jboolean pointOK = YES;
          while ((pointOK) && (i < gLength)) {
            pointOK = ([((GeogebraCommonKernelMatrixCoords *) nil_chk([self getPoint3DWithInt:i])) equalsForKernelWithGeogebraCommonKernelMatrixCoords:[g getPoint3DWithInt:j]]);
            j = j + step;
            if (j < 0) j = gLength - 1;
            j = j % gLength;
            i++;
          }
          return pointOK;
        }
      }
    }
  }
  return NO;
}

- (jboolean)isConvexInverseDirection {
  return reverseNormal_;
}

- (void)calcCentroidWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  if (tmp3_GeoPolygon3D_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_setAndConsume_tmp3_GeoPolygon3D_(self, [IOSDoubleArray newArrayWithLength:3]);
  }
  GeogebraCommonKernelAlgosAlgoPolygon_calcCentroidWithDoubleArray_withDouble_withGeogebraCommonKernelKernelNDGeoPointNDArray_(tmp3_GeoPolygon3D_, area_, [self getPoints]);
  if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(tmp3_GeoPolygon3D_), 0))) {
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) setUndefined];
  }
  else {
    GeogebraCommonKernelMatrixCoords *c = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getPointWithDouble:IOSDoubleArray_Get(tmp3_GeoPolygon3D_, 0) withDouble:IOSDoubleArray_Get(tmp3_GeoPolygon3D_, 1) withDouble:IOSDoubleArray_Get(tmp3_GeoPolygon3D_, 2)];
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) setCoordsWithGeogebraCommonKernelMatrixCoords:c withBoolean:NO];
  }
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)newGeoPointWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
}

- (void)dealloc {
  RELEASE_(coordSys_);
  RELEASE_(points2D_);
  RELEASE_(points3DArray_);
  RELEASE_(euclidianViewForPlane_);
  RELEASE_(tmpMatrix4x4_);
  RELEASE_(tmp3_GeoPolygon3D_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelMatrixCoordSys:withBoolean:", "GeoPolygon3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "GeoPolygon3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "GeoPolygon3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withBoolean:", "GeoPolygon3D", NULL, 0x1, NULL, NULL },
    { "isIntersection", NULL, "Z", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "isGeoElement3D", NULL, "Z", 0x1, NULL, NULL },
    { "createSegmentWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withBoolean:", "createSegment", "Lgeogebra.common.kernel.kernelND.GeoSegmentND;", 0x1, NULL, NULL },
    { "getPointWithInt:", "getPoint", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getPoint3DWithInt:", "getPoint3D", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMainDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPoints", NULL, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "setPoints2DWithGeogebraCommonKernelGeosGeoPointArray:", "setPoints2D", "V", 0x1, NULL, NULL },
    { "setEuclidianVisibleWithBoolean:", "setEuclidianVisible", "V", 0x1, NULL, NULL },
    { "setCoordSysWithGeogebraCommonKernelMatrixCoordSys:", "setCoordSys", "V", 0x1, NULL, NULL },
    { "setCoordSysWithGeogebraCommonKernelGeosGeoPolygon:", "setCoordSys", "V", 0x1, NULL, NULL },
    { "setCoordSysAndPoints3DWithGeogebraCommonKernelGeosGeoPolygon:", "setCoordSysAndPoints3D", "V", 0x1, NULL, NULL },
    { "setPoints3DLength", NULL, "V", 0x1, NULL, NULL },
    { "setPointsAndSegmentsLengthWithInt:", "setPointsAndSegmentsLength", "V", 0x1, NULL, NULL },
    { "checkPointsAreOnCoordSys", NULL, "Z", 0x1, NULL, NULL },
    { "checkPointsAreOnCoordSysWithGeogebraCommonKernelMatrixCoordSys:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoPointArray:withGeogebraCommonKernelMatrixCoords:", "checkPointsAreOnCoordSys", "Z", 0x19, NULL, NULL },
    { "updateCoordSys", NULL, "Z", 0x1, NULL, NULL },
    { "updateCoordSysWithGeogebraCommonKernelMatrixCoordSys:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoPointArray:withGeogebraCommonKernelMatrixCoords:", "updateCoordSys", "Z", 0x19, NULL, NULL },
    { "setOrthoNormalRegionCS", NULL, "V", 0x11, NULL, NULL },
    { "getCoordSys", NULL, "Lgeogebra.common.kernel.Matrix.CoordSys;", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setIsPartOfClosedSurfaceWithBoolean:", "setIsPartOfClosedSurface", "V", 0x1, NULL, NULL },
    { "isPartOfClosedSurface", NULL, "Z", 0x1, NULL, NULL },
    { "pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "setRegionChangedWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:withDouble:", "setRegionChanged", "V", 0x1, NULL, NULL },
    { "isInRegionWithGeogebraCommonKernelKernelNDGeoPointND:withBoolean:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "newGeoPolygonWithGeogebraCommonKernelConstruction:", "newGeoPolygon", "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x4, NULL, NULL },
    { "getDirectionInD3", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "createView2D", NULL, "V", 0x1, NULL, NULL },
    { "removeView2D", NULL, "V", 0x1, NULL, NULL },
    { "setEuclidianViewForPlaneWithGeogebraCommonEuclidianEuclidianViewCompanion:", "setEuclidianViewForPlane", "V", 0x1, NULL, NULL },
    { "hasView2DVisible", NULL, "Z", 0x1, NULL, NULL },
    { "setView2DVisibleWithBoolean:", "setView2DVisible", "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "setInitLabelsCalledWithBoolean:", "setInitLabelsCalled", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoLineND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "rotate", "V", 0x12, NULL, NULL },
    { "translateWithGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:", "mirror", "V", 0x1, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "setReverseNormal", NULL, "V", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x11, NULL, NULL },
    { "isConvexInverseDirection", NULL, "Z", 0x1, NULL, NULL },
    { "calcCentroidWithGeogebraCommonKernelKernelNDGeoPointND:", "calcCentroid", "V", 0x1, NULL, NULL },
    { "newGeoPointWithGeogebraCommonKernelConstruction:", "newGeoPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "coordSys_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordSys;", NULL, NULL,  },
    { "points2D_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "isPartOfClosedSurface__", "isPartOfClosedSurface", 0x2, "Z", NULL, NULL,  },
    { "createSegments_GeoPolygon3D_", "createSegments", 0x2, "Z", NULL, NULL,  },
    { "points3DArray_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D;>;",  },
    { "euclidianViewForPlane_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidianForPlane.EuclidianViewForPlaneCompanion;", NULL, NULL,  },
    { "tmpMatrix4x4_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "reverseNormal_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tmp3_GeoPolygon3D_", "tmp3", 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D = { 2, "GeoPolygon3D", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 60, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelMatrixCoordSys_withBoolean_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *points, GeogebraCommonKernelMatrixCoordSys *cs2D, jboolean createSegments) {
  GeogebraCommonKernelGeosGeoPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelMatrixCoordSys_withBoolean_(self, c, points, cs2D, createSegments);
  self->isPartOfClosedSurface__ = NO;
  self->createSegments_GeoPolygon3D_ = YES;
  self->reverseNormal_ = NO;
  self->createSegments_GeoPolygon3D_ = createSegments;
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelMatrixCoordSys_withBoolean_(GeogebraCommonKernelConstruction *c, IOSObjectArray *points, GeogebraCommonKernelMatrixCoordSys *cs2D, jboolean createSegments) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelMatrixCoordSys_withBoolean_(self, c, points, cs2D, createSegments);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *points) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelMatrixCoordSys_withBoolean_(self, c, points, nil, YES);
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonKernelConstruction *c, IOSObjectArray *points) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, points);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *self, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withBoolean_(self, cons, NO);
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *self, GeogebraCommonKernelConstruction *cons, jboolean isIntersection) {
  GeogebraCommonKernelGeosGeoPolygon_initWithGeogebraCommonKernelConstruction_withBoolean_(self, cons, isIntersection);
  self->isPartOfClosedSurface__ = NO;
  self->createSegments_GeoPolygon3D_ = YES;
  self->reverseNormal_ = NO;
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonKernelConstruction *cons, jboolean isIntersection) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withBoolean_(self, cons, isIntersection);
  return self;
}

jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_checkPointsAreOnCoordSysWithGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoPointArray_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelMatrixCoordSys *coordSys, IOSObjectArray *points, IOSObjectArray *points2D, GeogebraCommonKernelMatrixCoords *tmpCoords) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initialize();
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys)) getOrigin];
  GeogebraCommonKernelMatrixCoords *vn = [coordSys getVz];
  GeogebraCommonKernelMatrixCoordMatrix4x4 *matrix = [coordSys getMatrixOrthonormal];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) {
    if (![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) isDefined] || ![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) isFinite]) {
      [coordSys setUndefined];
      return NO;
    }
    GeogebraCommonKernelMatrixCoords *p = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) getInhomCoordsInD3];
    if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) dotproductWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) subWithGeogebraCommonKernelMatrixCoords:o]])) {
      [coordSys setUndefined];
      return NO;
    }
    [p projectPlaneInPlaneCoordsWithGeogebraCommonKernelMatrixCoordMatrix:matrix withGeogebraCommonKernelMatrixCoords:tmpCoords];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(points2D), i))) setCoordsWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords)) getX] withDouble:[tmpCoords getY] withDouble:[tmpCoords getW]];
  }
  return YES;
}

jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_updateCoordSysWithGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoPointArray_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelMatrixCoordSys *coordSys, IOSObjectArray *points, IOSObjectArray *points2D, GeogebraCommonKernelMatrixCoords *tmpCoords) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initialize();
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys)) resetCoordSys];
  for (jint i = 0; (![coordSys isMadeCoordSys]) && (i < ((IOSObjectArray *) nil_chk(points))->size_); i++) {
    if (![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(points), i))) isDefined] || ![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) isFinite]) {
      [coordSys setUndefined];
      return NO;
    }
    [coordSys addPointWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) getInhomCoordsInD3]];
  }
  if ([coordSys getMadeCoordSys] != 2) {
    [coordSys completeCoordSys2D];
  }
  if ([coordSys makeOrthoMatrixWithBoolean:NO withBoolean:NO]) {
    return GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_checkPointsAreOnCoordSysWithGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoPointArray_withGeogebraCommonKernelMatrixCoords_(coordSys, points, points2D, tmpCoords);
  }
  return YES;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *self, id<GeogebraCommonKernelArithmeticNumberValue> phiVal, GeogebraCommonKernelMatrixCoords *center, GeogebraCommonKernelMatrixCoords *direction) {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) rotateWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiVal)) getDouble] withGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(direction)) normalized]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D)
