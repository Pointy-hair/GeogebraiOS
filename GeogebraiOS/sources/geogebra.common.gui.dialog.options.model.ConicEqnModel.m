//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/options/model/ConicEqnModel.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/gui/dialog/options/model/ConicEqnModel.h"
#include "geogebra/common/gui/dialog/options/model/IComboListener.h"
#include "geogebra/common/gui/dialog/options/model/MultipleOptionsModel.h"
#include "geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/main/Localization.h"
#include "java/util/List.h"

@interface GeogebraCommonGuiDialogOptionsModelConicEqnModel () {
 @public
  GeogebraCommonMainLocalization *loc_;
}

- (GeogebraCommonKernelGeosGeoConic *)getConicAtWithInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelConicEqnModel, loc_, GeogebraCommonMainLocalization *)

__attribute__((unused)) static GeogebraCommonKernelGeosGeoConic *GeogebraCommonGuiDialogOptionsModelConicEqnModel_getConicAtWithInt_(GeogebraCommonGuiDialogOptionsModelConicEqnModel *self, jint index);

@implementation GeogebraCommonGuiDialogOptionsModelConicEqnModel

- (instancetype)initWithGeogebraCommonGuiDialogOptionsModelIComboListener:(id<GeogebraCommonGuiDialogOptionsModelIComboListener>)listener
                                       withGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc {
  GeogebraCommonGuiDialogOptionsModelConicEqnModel_initWithGeogebraCommonGuiDialogOptionsModelIComboListener_withGeogebraCommonMainLocalization_(self, listener, loc);
  return self;
}

- (jboolean)isValidAtWithInt:(jint)index {
  return ([[self getObjectAtWithInt:index] isKindOfClass:[GeogebraCommonKernelGeosGeoConic class]]);
}

- (GeogebraCommonKernelGeosGeoConic *)getConicAtWithInt:(jint)index {
  return GeogebraCommonGuiDialogOptionsModelConicEqnModel_getConicAtWithInt_(self, index);
}

- (void)updateProperties {
  GeogebraCommonKernelGeosGeoConic *temp, *geo0 = GeogebraCommonGuiDialogOptionsModelConicEqnModel_getConicAtWithInt_(self, 0);
  jboolean equalType = YES;
  jboolean equalMode = YES;
  jboolean specificPossible = [((GeogebraCommonKernelGeosGeoConic *) nil_chk(geo0)) isSpecificPossible];
  jboolean explicitPossible = [geo0 isExplicitPossible];
  for (jint i = 1; i < [self getGeosLength]; i++) {
    temp = GeogebraCommonGuiDialogOptionsModelConicEqnModel_getConicAtWithInt_(self, i);
    if ([geo0 getType] != [((GeogebraCommonKernelGeosGeoConic *) nil_chk(temp)) getType]) equalType = NO;
    if ([geo0 getToStringMode] != [temp getToStringMode]) equalMode = NO;
    if (![temp isSpecificPossible]) specificPossible = NO;
    if (![temp isExplicitPossible]) explicitPossible = NO;
  }
  if (!equalType) specificPossible = NO;
  specificIndex_ = -1;
  explicitIndex_ = -1;
  implicitIndex_ = -1;
  jint counter = -1;
  if (specificPossible) {
    [((id<GeogebraCommonGuiDialogOptionsModelIComboListener>) nil_chk([self getListener])) addItemWithNSString:[geo0 getSpecificEquation]];
    specificIndex_ = ++counter;
  }
  if (explicitPossible) {
    [((id<GeogebraCommonGuiDialogOptionsModelIComboListener>) nil_chk([self getListener])) addItemWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(loc_)) getPlainWithNSString:@"ExplicitConicEquation"]];
    explicitIndex_ = ++counter;
  }
  implicitIndex_ = ++counter;
  [((id<GeogebraCommonGuiDialogOptionsModelIComboListener>) nil_chk([self getListener])) addItemWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(loc_)) getPlainWithNSString:@"ImplicitConicEquation"]];
  jint mode;
  if (equalMode) mode = [geo0 getToStringMode];
  else mode = -1;
  switch (mode) {
    case GeogebraCommonKernelKernelNDGeoConicND_EQUATION_SPECIFIC:
    if (specificIndex_ > -1) [((id<GeogebraCommonGuiDialogOptionsModelIComboListener>) nil_chk([self getListener])) setSelectedIndexWithInt:specificIndex_];
    break;
    case GeogebraCommonKernelKernelNDGeoConicND_EQUATION_EXPLICIT:
    if (explicitIndex_ > -1) [((id<GeogebraCommonGuiDialogOptionsModelIComboListener>) nil_chk([self getListener])) setSelectedIndexWithInt:explicitIndex_];
    break;
    case GeogebraCommonKernelKernelNDGeoConicND_EQUATION_IMPLICIT:
    [((id<GeogebraCommonGuiDialogOptionsModelIComboListener>) nil_chk([self getListener])) setSelectedIndexWithInt:implicitIndex_];
    break;
    default:
    [((id<GeogebraCommonGuiDialogOptionsModelIComboListener>) nil_chk([self getListener])) setSelectedIndexWithInt:-1];
  }
}

- (id<JavaUtilList>)getChoichesWithGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc {
  return nil;
}

- (void)applyWithInt:(jint)index
             withInt:(jint)value {
  GeogebraCommonKernelGeosGeoConic *geo = GeogebraCommonGuiDialogOptionsModelConicEqnModel_getConicAtWithInt_(self, index);
  if (value == specificIndex_) {
    [((GeogebraCommonKernelGeosGeoConic *) nil_chk(geo)) setToSpecific];
  }
  else if (value == explicitIndex_) {
    [((GeogebraCommonKernelGeosGeoConic *) nil_chk(geo)) setToExplicit];
  }
  else if (value == implicitIndex_) {
    [((GeogebraCommonKernelGeosGeoConic *) nil_chk(geo)) setToImplicit];
  }
  [((GeogebraCommonKernelGeosGeoConic *) nil_chk(geo)) updateRepaint];
}

- (jint)getValueAtWithInt:(jint)index {
  return 0;
}

- (void)dealloc {
  RELEASE_(loc_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGuiDialogOptionsModelIComboListener:withGeogebraCommonMainLocalization:", "ConicEqnModel", NULL, 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x1, NULL, NULL },
    { "getConicAtWithInt:", "getConicAt", "Lgeogebra.common.kernel.geos.GeoConic;", 0x2, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "getChoichesWithGeogebraCommonMainLocalization:", "getChoiches", "Ljava.util.List;", 0x1, NULL, NULL },
    { "applyWithInt:withInt:", "apply", "V", 0x4, NULL, NULL },
    { "getValueAtWithInt:", "getValueAt", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "loc_", NULL, 0x2, "Lgeogebra.common.main.Localization;", NULL, NULL,  },
    { "implicitIndex_", NULL, 0x0, "I", NULL, NULL,  },
    { "explicitIndex_", NULL, 0x0, "I", NULL, NULL,  },
    { "specificIndex_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelConicEqnModel = { 2, "ConicEqnModel", "geogebra.common.gui.dialog.options.model", NULL, 0x1, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelConicEqnModel;
}

@end

void GeogebraCommonGuiDialogOptionsModelConicEqnModel_initWithGeogebraCommonGuiDialogOptionsModelIComboListener_withGeogebraCommonMainLocalization_(GeogebraCommonGuiDialogOptionsModelConicEqnModel *self, id<GeogebraCommonGuiDialogOptionsModelIComboListener> listener, GeogebraCommonMainLocalization *loc) {
  GeogebraCommonGuiDialogOptionsModelMultipleOptionsModel_initWithGeogebraCommonGuiDialogOptionsModelIComboListener_(self, listener);
  GeogebraCommonGuiDialogOptionsModelConicEqnModel_set_loc_(self, loc);
}

GeogebraCommonGuiDialogOptionsModelConicEqnModel *new_GeogebraCommonGuiDialogOptionsModelConicEqnModel_initWithGeogebraCommonGuiDialogOptionsModelIComboListener_withGeogebraCommonMainLocalization_(id<GeogebraCommonGuiDialogOptionsModelIComboListener> listener, GeogebraCommonMainLocalization *loc) {
  GeogebraCommonGuiDialogOptionsModelConicEqnModel *self = [GeogebraCommonGuiDialogOptionsModelConicEqnModel alloc];
  GeogebraCommonGuiDialogOptionsModelConicEqnModel_initWithGeogebraCommonGuiDialogOptionsModelIComboListener_withGeogebraCommonMainLocalization_(self, listener, loc);
  return self;
}

GeogebraCommonKernelGeosGeoConic *GeogebraCommonGuiDialogOptionsModelConicEqnModel_getConicAtWithInt_(GeogebraCommonGuiDialogOptionsModelConicEqnModel *self, jint index) {
  return (GeogebraCommonKernelGeosGeoConic *) check_class_cast([self getObjectAtWithInt:index], [GeogebraCommonKernelGeosGeoConic class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelConicEqnModel)
