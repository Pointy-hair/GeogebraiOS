//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoLaTeX.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoLaTeX.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/main/App.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelAlgosAlgoLaTeX () {
 @public
  GeogebraCommonKernelGeosGeoElement *geo_;
  GeogebraCommonKernelGeosGeoBoolean *substituteVars_;
  GeogebraCommonKernelGeosGeoBoolean *showName_;
  GeogebraCommonKernelGeosGeoText *text_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLaTeX, geo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLaTeX, substituteVars_, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLaTeX, showName_, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLaTeX, text_, GeogebraCommonKernelGeosGeoText *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLaTeX_compute(GeogebraCommonKernelAlgosAlgoLaTeX *self);

@implementation GeogebraCommonKernelAlgosAlgoLaTeX

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)substituteVars
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)showName {
  GeogebraCommonKernelAlgosAlgoLaTeX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, geo, substituteVars, showName);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelAlgosAlgoLaTeX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, geo);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_LaTeX();
}

- (void)setInputOutput {
  JavaUtilArrayList *geos = [new_JavaUtilArrayList_init() autorelease];
  [geos addWithId:geo_];
  if (substituteVars_ != nil) [geos addWithId:substituteVars_];
  if (showName_ != nil) [geos addWithId:showName_];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isGeoText]) [((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo_, [GeogebraCommonKernelGeosGeoText class])) addTextDescendantWithGeogebraCommonKernelGeosGeoText:text_];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:[geos size] type:GeogebraCommonKernelGeosGeoElement_class_()]);
  for (jint i = 0; i < input_->size_; i++) {
    IOSObjectArray_Set(input_, i, [geos getWithInt:i]);
  }
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:text_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoText *)getGeoText {
  return text_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoLaTeX_compute(self);
}

- (jboolean)isLaTeXTextCommand {
  return YES;
}

- (void)dealloc {
  RELEASE_(geo_);
  RELEASE_(substituteVars_);
  RELEASE_(showName_);
  RELEASE_(text_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoBoolean:", "AlgoLaTeX", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:", "AlgoLaTeX", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getGeoText", NULL, "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "isLaTeXTextCommand", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "substituteVars_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "showName_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "text_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoLaTeX = { 2, "AlgoLaTeX", "geogebra.common.kernel.algos", NULL, 0x1, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoLaTeX;
}

@end

void GeogebraCommonKernelAlgosAlgoLaTeX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelAlgosAlgoLaTeX *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelGeosGeoBoolean *substituteVars, GeogebraCommonKernelGeosGeoBoolean *showName) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoLaTeX_set_geo_(self, geo);
  GeogebraCommonKernelAlgosAlgoLaTeX_set_substituteVars_(self, substituteVars);
  GeogebraCommonKernelAlgosAlgoLaTeX_set_showName_(self, showName);
  GeogebraCommonKernelAlgosAlgoLaTeX_setAndConsume_text_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons));
  [self->text_ setFormulaTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:[((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getPreferredFormulaRenderingType]];
  [self->text_ setLaTeXWithBoolean:YES withBoolean:NO];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoLaTeX_compute(self);
  [self->text_ setLabelWithNSString:label];
  [self->text_ setSerifFontWithBoolean:NO];
}

GeogebraCommonKernelAlgosAlgoLaTeX *new_GeogebraCommonKernelAlgosAlgoLaTeX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelGeosGeoBoolean *substituteVars, GeogebraCommonKernelGeosGeoBoolean *showName) {
  GeogebraCommonKernelAlgosAlgoLaTeX *self = [GeogebraCommonKernelAlgosAlgoLaTeX alloc];
  GeogebraCommonKernelAlgosAlgoLaTeX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, geo, substituteVars, showName);
  return self;
}

void GeogebraCommonKernelAlgosAlgoLaTeX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoLaTeX *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoLaTeX_set_geo_(self, geo);
  GeogebraCommonKernelAlgosAlgoLaTeX_set_substituteVars_(self, nil);
  GeogebraCommonKernelAlgosAlgoLaTeX_set_showName_(self, nil);
  GeogebraCommonKernelAlgosAlgoLaTeX_setAndConsume_text_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons));
  [self->text_ setFormulaTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:[((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getPreferredFormulaRenderingType]];
  [self->text_ setLaTeXWithBoolean:YES withBoolean:NO];
  [self->text_ setIsTextCommandWithBoolean:YES];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoLaTeX_compute(self);
  [self->text_ setLabelWithNSString:label];
  [self->text_ setSerifFontWithBoolean:NO];
}

GeogebraCommonKernelAlgosAlgoLaTeX *new_GeogebraCommonKernelAlgosAlgoLaTeX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonKernelAlgosAlgoLaTeX *self = [GeogebraCommonKernelAlgosAlgoLaTeX alloc];
  GeogebraCommonKernelAlgosAlgoLaTeX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, geo);
  return self;
}

void GeogebraCommonKernelAlgosAlgoLaTeX_compute(GeogebraCommonKernelAlgosAlgoLaTeX *self) {
  jboolean useLaTeX = YES;
  GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *formulaRendererType = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getPreferredFormulaRenderingType];
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isDefined] || (self->substituteVars_ != nil && ![self->substituteVars_ isDefined]) || (self->showName_ != nil && ![self->showName_ isDefined])) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) setTextStringWithNSString:@""];
  }
  else {
    jboolean substitute = self->substituteVars_ == nil ? YES : [self->substituteVars_ getBoolean];
    jboolean show = self->showName_ == nil ? NO : [self->showName_ getBoolean];
    if (![self->geo_ isLabelSet]) {
      show = NO;
    }
    GeogebraCommonKernelStringTemplate *tpl = [((GeogebraCommonKernelStringTemplate *) nil_chk([((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) getStringTemplate])) deriveReal];
    if (show) {
      if ([self->geo_ isGeoCasCell]) {
        [self->text_ setTextStringWithNSString:[((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoCasCell class])) getOutputWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericLatex_()]];
        formulaRendererType = GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX();
      }
      else {
        [self->text_ setTextStringWithNSString:[self->geo_ getLaTeXAlgebraDescriptionWithBoolean:substitute withGeogebraCommonKernelStringTemplate:tpl]];
      }
      if ([self->text_ getTextString] == nil) {
        NSString *desc = [self->geo_ getAlgebraDescriptionWithGeogebraCommonKernelStringTemplate:[self->text_ getStringTemplate]];
        if ([self->geo_ hasIndexLabel]) desc = GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(desc, YES);
        [self->text_ setTextStringWithNSString:desc];
        useLaTeX = NO;
      }
    }
    else {
      if ([self->geo_ isGeoText]) {
        [self->text_ setTextStringWithNSString:[((GeogebraCommonKernelGeosGeoText *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoText class])) getTextString]];
        formulaRendererType = GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX();
      }
      else if ([self->geo_ isGeoCasCell]) {
        [self->text_ setTextStringWithNSString:[((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoCasCell class])) getOutputWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericLatex_()]];
        formulaRendererType = GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX();
      }
      else {
        [self->text_ setTextStringWithNSString:[self->geo_ getFormulaStringWithGeogebraCommonKernelStringTemplate:tpl withBoolean:substitute]];
      }
    }
  }
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) setFormulaTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:formulaRendererType];
  [self->text_ setLaTeXWithBoolean:useLaTeX withBoolean:NO];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoLaTeX)
