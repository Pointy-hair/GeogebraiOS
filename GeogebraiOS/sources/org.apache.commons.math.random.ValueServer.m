//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/random/ValueServer.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/util/List.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/random/EmpiricalDistribution.h"
#include "org/apache/commons/math/random/EmpiricalDistributionImpl.h"
#include "org/apache/commons/math/random/RandomData.h"
#include "org/apache/commons/math/random/RandomDataImpl.h"
#include "org/apache/commons/math/random/ValueServer.h"
#include "org/apache/commons/math/stat/descriptive/StatisticalSummary.h"

@interface OrgApacheCommonsMathRandomValueServer () {
 @public
  jint mode_;
  JavaNetURL *valuesFileURL_;
  jdouble mu_;
  jdouble sigma_;
  id<OrgApacheCommonsMathRandomEmpiricalDistribution> empiricalDistribution_;
  JavaIoBufferedReader *filePointer_;
  id<OrgApacheCommonsMathRandomRandomData> randomData_;
}

- (jdouble)getNextDigest;

- (jdouble)getNextReplay;

- (jdouble)getNextUniform;

- (jdouble)getNextExponential;

- (jdouble)getNextGaussian;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathRandomValueServer, valuesFileURL_, JavaNetURL *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathRandomValueServer, empiricalDistribution_, id<OrgApacheCommonsMathRandomEmpiricalDistribution>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathRandomValueServer, filePointer_, JavaIoBufferedReader *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathRandomValueServer, randomData_, id<OrgApacheCommonsMathRandomRandomData>)

__attribute__((unused)) static jdouble OrgApacheCommonsMathRandomValueServer_getNextDigest(OrgApacheCommonsMathRandomValueServer *self);

__attribute__((unused)) static jdouble OrgApacheCommonsMathRandomValueServer_getNextReplay(OrgApacheCommonsMathRandomValueServer *self);

__attribute__((unused)) static jdouble OrgApacheCommonsMathRandomValueServer_getNextUniform(OrgApacheCommonsMathRandomValueServer *self);

__attribute__((unused)) static jdouble OrgApacheCommonsMathRandomValueServer_getNextExponential(OrgApacheCommonsMathRandomValueServer *self);

__attribute__((unused)) static jdouble OrgApacheCommonsMathRandomValueServer_getNextGaussian(OrgApacheCommonsMathRandomValueServer *self);

@implementation OrgApacheCommonsMathRandomValueServer

- (instancetype)init {
  OrgApacheCommonsMathRandomValueServer_init(self);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathRandomRandomData:(id<OrgApacheCommonsMathRandomRandomData>)randomData {
  OrgApacheCommonsMathRandomValueServer_initWithOrgApacheCommonsMathRandomRandomData_(self, randomData);
  return self;
}

- (jdouble)getNext {
  switch (mode_) {
    case OrgApacheCommonsMathRandomValueServer_DIGEST_MODE:
    return OrgApacheCommonsMathRandomValueServer_getNextDigest(self);
    case OrgApacheCommonsMathRandomValueServer_REPLAY_MODE:
    return OrgApacheCommonsMathRandomValueServer_getNextReplay(self);
    case OrgApacheCommonsMathRandomValueServer_UNIFORM_MODE:
    return OrgApacheCommonsMathRandomValueServer_getNextUniform(self);
    case OrgApacheCommonsMathRandomValueServer_EXPONENTIAL_MODE:
    return OrgApacheCommonsMathRandomValueServer_getNextExponential(self);
    case OrgApacheCommonsMathRandomValueServer_GAUSSIAN_MODE:
    return OrgApacheCommonsMathRandomValueServer_getNextGaussian(self);
    case OrgApacheCommonsMathRandomValueServer_CONSTANT_MODE:
    return mu_;
    default:
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalStateExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_UNKNOWN_MODE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(mode_), @"DIGEST_MODE", JavaLangInteger_valueOfWithInt_(OrgApacheCommonsMathRandomValueServer_DIGEST_MODE), @"REPLAY_MODE", JavaLangInteger_valueOfWithInt_(OrgApacheCommonsMathRandomValueServer_REPLAY_MODE), @"UNIFORM_MODE", JavaLangInteger_valueOfWithInt_(OrgApacheCommonsMathRandomValueServer_UNIFORM_MODE), @"EXPONENTIAL_MODE", JavaLangInteger_valueOfWithInt_(OrgApacheCommonsMathRandomValueServer_EXPONENTIAL_MODE), @"GAUSSIAN_MODE", JavaLangInteger_valueOfWithInt_(OrgApacheCommonsMathRandomValueServer_GAUSSIAN_MODE), @"CONSTANT_MODE", JavaLangInteger_valueOfWithInt_(OrgApacheCommonsMathRandomValueServer_CONSTANT_MODE) } count:13 type:NSObject_class_()]);
  }
}

- (void)fillWithDoubleArray:(IOSDoubleArray *)values {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(values))->size_; i++) {
    *IOSDoubleArray_GetRef(values, i) = [self getNext];
  }
}

- (IOSDoubleArray *)fillWithInt:(jint)length {
  IOSDoubleArray *out = [IOSDoubleArray arrayWithLength:length];
  for (jint i = 0; i < length; i++) {
    *IOSDoubleArray_GetRef(out, i) = [self getNext];
  }
  return out;
}

- (void)computeDistribution {
  OrgApacheCommonsMathRandomValueServer_setAndConsume_empiricalDistribution_(self, new_OrgApacheCommonsMathRandomEmpiricalDistributionImpl_init());
  [empiricalDistribution_ load__WithJavaNetURL:valuesFileURL_];
}

- (void)computeDistributionWithInt:(jint)binCount {
  OrgApacheCommonsMathRandomValueServer_setAndConsume_empiricalDistribution_(self, new_OrgApacheCommonsMathRandomEmpiricalDistributionImpl_initWithInt_(binCount));
  [empiricalDistribution_ load__WithJavaNetURL:valuesFileURL_];
  mu_ = [((id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>) nil_chk([empiricalDistribution_ getSampleStats])) getMean];
  sigma_ = [((id<OrgApacheCommonsMathStatDescriptiveStatisticalSummary>) nil_chk([empiricalDistribution_ getSampleStats])) getStandardDeviation];
}

- (jint)getMode {
  return mode_;
}

- (void)setModeWithInt:(jint)mode {
  self->mode_ = mode;
}

- (JavaNetURL *)getValuesFileURL {
  return valuesFileURL_;
}

- (void)setValuesFileURLWithNSString:(NSString *)url {
  OrgApacheCommonsMathRandomValueServer_setAndConsume_valuesFileURL_(self, new_JavaNetURL_initWithNSString_(url));
}

- (void)setValuesFileURLWithJavaNetURL:(JavaNetURL *)url {
  OrgApacheCommonsMathRandomValueServer_set_valuesFileURL_(self, url);
}

- (id<OrgApacheCommonsMathRandomEmpiricalDistribution>)getEmpiricalDistribution {
  return empiricalDistribution_;
}

- (void)resetReplayFile {
  if (filePointer_ != nil) {
    @try {
      [filePointer_ close];
      OrgApacheCommonsMathRandomValueServer_set_filePointer_(self, nil);
    }
    @catch (JavaIoIOException *ex) {
    }
  }
  OrgApacheCommonsMathRandomValueServer_setAndConsume_filePointer_(self, new_JavaIoBufferedReader_initWithJavaIoReader_([new_JavaIoInputStreamReader_initWithJavaIoInputStream_([((JavaNetURL *) nil_chk(valuesFileURL_)) openStream]) autorelease]));
}

- (void)closeReplayFile {
  if (filePointer_ != nil) {
    [filePointer_ close];
    OrgApacheCommonsMathRandomValueServer_set_filePointer_(self, nil);
  }
}

- (jdouble)getMu {
  return mu_;
}

- (void)setMuWithDouble:(jdouble)mu {
  self->mu_ = mu;
}

- (jdouble)getSigma {
  return sigma_;
}

- (void)setSigmaWithDouble:(jdouble)sigma {
  self->sigma_ = sigma;
}

- (jdouble)getNextDigest {
  return OrgApacheCommonsMathRandomValueServer_getNextDigest(self);
}

- (jdouble)getNextReplay {
  return OrgApacheCommonsMathRandomValueServer_getNextReplay(self);
}

- (jdouble)getNextUniform {
  return OrgApacheCommonsMathRandomValueServer_getNextUniform(self);
}

- (jdouble)getNextExponential {
  return OrgApacheCommonsMathRandomValueServer_getNextExponential(self);
}

- (jdouble)getNextGaussian {
  return OrgApacheCommonsMathRandomValueServer_getNextGaussian(self);
}

- (void)dealloc {
  RELEASE_(valuesFileURL_);
  RELEASE_(empiricalDistribution_);
  RELEASE_(filePointer_);
  RELEASE_(randomData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ValueServer", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathRandomRandomData:", "ValueServer", NULL, 0x1, NULL, NULL },
    { "getNext", NULL, "D", 0x1, "Ljava.io.IOException;", NULL },
    { "fillWithDoubleArray:", "fill", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "fillWithInt:", "fill", "[D", 0x1, "Ljava.io.IOException;", NULL },
    { "computeDistribution", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "computeDistributionWithInt:", "computeDistribution", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "getMode", NULL, "I", 0x1, NULL, NULL },
    { "setModeWithInt:", "setMode", "V", 0x1, NULL, NULL },
    { "getValuesFileURL", NULL, "Ljava.net.URL;", 0x1, NULL, NULL },
    { "setValuesFileURLWithNSString:", "setValuesFileURL", "V", 0x1, "Ljava.net.MalformedURLException;", NULL },
    { "setValuesFileURLWithJavaNetURL:", "setValuesFileURL", "V", 0x1, NULL, NULL },
    { "getEmpiricalDistribution", NULL, "Lorg.apache.commons.math.random.EmpiricalDistribution;", 0x1, NULL, NULL },
    { "resetReplayFile", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "closeReplayFile", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "getMu", NULL, "D", 0x1, NULL, NULL },
    { "setMuWithDouble:", "setMu", "V", 0x1, NULL, NULL },
    { "getSigma", NULL, "D", 0x1, NULL, NULL },
    { "setSigmaWithDouble:", "setSigma", "V", 0x1, NULL, NULL },
    { "getNextDigest", NULL, "D", 0x2, NULL, NULL },
    { "getNextReplay", NULL, "D", 0x2, "Ljava.io.IOException;", NULL },
    { "getNextUniform", NULL, "D", 0x2, NULL, NULL },
    { "getNextExponential", NULL, "D", 0x2, NULL, NULL },
    { "getNextGaussian", NULL, "D", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DIGEST_MODE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathRandomValueServer_DIGEST_MODE },
    { "REPLAY_MODE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathRandomValueServer_REPLAY_MODE },
    { "UNIFORM_MODE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathRandomValueServer_UNIFORM_MODE },
    { "EXPONENTIAL_MODE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathRandomValueServer_EXPONENTIAL_MODE },
    { "GAUSSIAN_MODE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathRandomValueServer_GAUSSIAN_MODE },
    { "CONSTANT_MODE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathRandomValueServer_CONSTANT_MODE },
    { "mode_", NULL, 0x2, "I", NULL, NULL,  },
    { "valuesFileURL_", NULL, 0x2, "Ljava.net.URL;", NULL, NULL,  },
    { "mu_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigma_", NULL, 0x2, "D", NULL, NULL,  },
    { "empiricalDistribution_", NULL, 0x2, "Lorg.apache.commons.math.random.EmpiricalDistribution;", NULL, NULL,  },
    { "filePointer_", NULL, 0x2, "Ljava.io.BufferedReader;", NULL, NULL,  },
    { "randomData_", NULL, 0x12, "Lorg.apache.commons.math.random.RandomData;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathRandomValueServer = { 2, "ValueServer", "org.apache.commons.math.random", NULL, 0x1, 24, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathRandomValueServer;
}

@end

void OrgApacheCommonsMathRandomValueServer_init(OrgApacheCommonsMathRandomValueServer *self) {
  NSObject_init(self);
  self->mode_ = 5;
  OrgApacheCommonsMathRandomValueServer_set_valuesFileURL_(self, nil);
  self->mu_ = 0.0;
  self->sigma_ = 0.0;
  OrgApacheCommonsMathRandomValueServer_set_empiricalDistribution_(self, nil);
  OrgApacheCommonsMathRandomValueServer_set_filePointer_(self, nil);
  OrgApacheCommonsMathRandomValueServer_setAndConsume_randomData_(self, new_OrgApacheCommonsMathRandomRandomDataImpl_init());
}

OrgApacheCommonsMathRandomValueServer *new_OrgApacheCommonsMathRandomValueServer_init() {
  OrgApacheCommonsMathRandomValueServer *self = [OrgApacheCommonsMathRandomValueServer alloc];
  OrgApacheCommonsMathRandomValueServer_init(self);
  return self;
}

void OrgApacheCommonsMathRandomValueServer_initWithOrgApacheCommonsMathRandomRandomData_(OrgApacheCommonsMathRandomValueServer *self, id<OrgApacheCommonsMathRandomRandomData> randomData) {
  NSObject_init(self);
  self->mode_ = 5;
  OrgApacheCommonsMathRandomValueServer_set_valuesFileURL_(self, nil);
  self->mu_ = 0.0;
  self->sigma_ = 0.0;
  OrgApacheCommonsMathRandomValueServer_set_empiricalDistribution_(self, nil);
  OrgApacheCommonsMathRandomValueServer_set_filePointer_(self, nil);
  OrgApacheCommonsMathRandomValueServer_set_randomData_(self, randomData);
}

OrgApacheCommonsMathRandomValueServer *new_OrgApacheCommonsMathRandomValueServer_initWithOrgApacheCommonsMathRandomRandomData_(id<OrgApacheCommonsMathRandomRandomData> randomData) {
  OrgApacheCommonsMathRandomValueServer *self = [OrgApacheCommonsMathRandomValueServer alloc];
  OrgApacheCommonsMathRandomValueServer_initWithOrgApacheCommonsMathRandomRandomData_(self, randomData);
  return self;
}

jdouble OrgApacheCommonsMathRandomValueServer_getNextDigest(OrgApacheCommonsMathRandomValueServer *self) {
  if ((self->empiricalDistribution_ == nil) || ([((id<JavaUtilList>) nil_chk([self->empiricalDistribution_ getBinStats])) size] == 0)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalStateExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIGEST_NOT_INITIALIZED(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  return [((id<OrgApacheCommonsMathRandomEmpiricalDistribution>) nil_chk(self->empiricalDistribution_)) getNextValue];
}

jdouble OrgApacheCommonsMathRandomValueServer_getNextReplay(OrgApacheCommonsMathRandomValueServer *self) {
  NSString *str = nil;
  if (self->filePointer_ == nil) {
    [self resetReplayFile];
  }
  if ((str = [((JavaIoBufferedReader *) nil_chk(self->filePointer_)) readLine]) == nil) {
    [self closeReplayFile];
    [self resetReplayFile];
    if ((str = [self->filePointer_ readLine]) == nil) {
      @throw OrgApacheCommonsMathMathRuntimeException_createEOFExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_URL_CONTAINS_NO_DATA(), [IOSObjectArray arrayWithObjects:(id[]){ self->valuesFileURL_ } count:1 type:NSObject_class_()]);
    }
  }
  return [JavaLangDouble_valueOfWithNSString_(str) doubleValue];
}

jdouble OrgApacheCommonsMathRandomValueServer_getNextUniform(OrgApacheCommonsMathRandomValueServer *self) {
  return [((id<OrgApacheCommonsMathRandomRandomData>) nil_chk(self->randomData_)) nextUniformWithDouble:0 withDouble:2 * self->mu_];
}

jdouble OrgApacheCommonsMathRandomValueServer_getNextExponential(OrgApacheCommonsMathRandomValueServer *self) {
  return [((id<OrgApacheCommonsMathRandomRandomData>) nil_chk(self->randomData_)) nextExponentialWithDouble:self->mu_];
}

jdouble OrgApacheCommonsMathRandomValueServer_getNextGaussian(OrgApacheCommonsMathRandomValueServer *self) {
  return [((id<OrgApacheCommonsMathRandomRandomData>) nil_chk(self->randomData_)) nextGaussianWithDouble:self->mu_ withDouble:self->sigma_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathRandomValueServer)
