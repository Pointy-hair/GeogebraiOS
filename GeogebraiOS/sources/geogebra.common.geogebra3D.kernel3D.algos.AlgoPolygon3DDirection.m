//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolygon3DDirection.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolygon3DDirection.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoPolygon.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/StringBuilder.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3DDirection

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3DDirection_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, labels, points, direction);
  return self;
}

- (IOSObjectArray *)createEfficientInput {
  IOSObjectArray *efficientInput;
  if (geoList_ != nil) {
    efficientInput = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray_Set(efficientInput, 0, geoList_);
    IOSObjectArray_Set(efficientInput, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(direction_, [GeogebraCommonKernelGeosGeoElement class]));
  }
  else {
    efficientInput = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(points_))->size_ + 1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    for (jint i = 0; i < points_->size_; i++) IOSObjectArray_Set(efficientInput, i, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points_, i), [GeogebraCommonKernelGeosGeoElement class]));
    IOSObjectArray_Set(efficientInput, points_->size_, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(direction_, [GeogebraCommonKernelGeosGeoElement class]));
  }
  return efficientInput;
}

- (void)createPolygonWithBoolean:(jboolean)createSegments {
  GeogebraCommonKernelAlgosAlgoPolygon_setAndConsume_poly_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelMatrixCoordSys_withBoolean_(cons_, points_, cs2D_, createSegments));
}

- (void)compute {
  GeogebraCommonKernelMatrixCoordSys *coordsys = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) getCoordSys];
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys)) resetCoordSys];
  [coordsys addPointWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(points_), 0))) getInhomCoordsInD3]];
  IOSObjectArray *v = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction_)) getDirectionInD3])) completeOrthonormal];
  [coordsys addVectorWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk(v), 0)];
  [coordsys addVectorWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(v, 1)];
  [coordsys makeOrthoMatrixWithBoolean:NO withBoolean:NO];
  if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast(poly_, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])) checkPointsAreOnCoordSys]) [super compute];
}

- (void)createStringBuilderWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (sb_ == nil) {
    GeogebraCommonKernelAlgosAlgoPolygon_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  }
  else {
    [sb_ setLengthWithInt:0];
  }
  NSString *label;
  if (geoList_ != nil) {
    label = [geoList_ getLabelWithGeogebraCommonKernelStringTemplate:tpl];
  }
  else {
    jint last = ((IOSObjectArray *) nil_chk(points_))->size_ - 1;
    for (jint i = 0; i < last; i++) {
      [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, i))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
      [sb_ appendWithNSString:@", "];
    }
    [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, last))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
    label = [sb_ description];
    [sb_ setLengthWithInt:0];
  }
  [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"PolygonAParallelToB" withNSString:label withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(direction_, [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoPolygon3DDirection", NULL, 0x1, NULL, NULL },
    { "createEfficientInput", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "createPolygonWithBoolean:", "createPolygon", "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "createStringBuilderWithGeogebraCommonKernelStringTemplate:", "createStringBuilder", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3DDirection = { 2, "AlgoPolygon3DDirection", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3DDirection;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3DDirection_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3DDirection *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction) {
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelMatrixCoordSys_withBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, labels, points, nil, nil, YES, nil, direction);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3DDirection *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3DDirection_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3DDirection *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3DDirection alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3DDirection_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, labels, points, direction);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3DDirection)
