//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoFitNL.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/optimization/FitRealFunction.h"
#include "geogebra/common/kernel/statistics/AlgoFitNL.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Throwable.h"
#include "org/apache/commons/math/optimization/fitting/CurveFitter.h"
#include "org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.h"

#define GeogebraCommonKernelStatisticsAlgoFitNL_DEBUG NO

@interface GeogebraCommonKernelStatisticsAlgoFitNL () {
 @public
  GeogebraCommonKernelGeosGeoList *pointlist_;
  GeogebraCommonKernelGeosGeoFunction *inputfunction_;
  GeogebraCommonKernelGeosGeoFunction *outputfunction_;
  jint datasize_;
  IOSDoubleArray *xdata_;
  IOSDoubleArray *ydata_;
  GeogebraCommonKernelOptimizationFitRealFunction *prfunction_;
  OrgApacheCommonsMathOptimizationGeneralLevenbergMarquardtOptimizer *LMO_;
  OrgApacheCommonsMathOptimizationFittingCurveFitter *curvefitter_;
}

- (jboolean)makeDataArrays;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitNL, pointlist_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitNL, inputfunction_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitNL, outputfunction_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitNL, xdata_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitNL, ydata_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitNL, prfunction_, GeogebraCommonKernelOptimizationFitRealFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitNL, LMO_, OrgApacheCommonsMathOptimizationGeneralLevenbergMarquardtOptimizer *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitNL, curvefitter_, OrgApacheCommonsMathOptimizationFittingCurveFitter *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitNL, DEBUG, jboolean)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitNL_compute(GeogebraCommonKernelStatisticsAlgoFitNL *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelStatisticsAlgoFitNL_makeDataArrays(GeogebraCommonKernelStatisticsAlgoFitNL *self);

@implementation GeogebraCommonKernelStatisticsAlgoFitNL

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)pointlist
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)inputfunction {
  GeogebraCommonKernelStatisticsAlgoFitNL_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, pointlist, inputfunction);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Fit();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, pointlist_);
  IOSObjectArray_Set(input_, 1, inputfunction_);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:outputfunction_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunction *)getFitNL {
  return outputfunction_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoFitNL_compute(self);
}

- (jboolean)makeDataArrays {
  return GeogebraCommonKernelStatisticsAlgoFitNL_makeDataArrays(self);
}

- (IOSDoubleArray *)getCoeffs {
  IOSObjectArray *coeffs = [((GeogebraCommonKernelOptimizationFitRealFunction *) nil_chk(prfunction_)) getCoeffs];
  IOSDoubleArray *ret = [IOSDoubleArray arrayWithLength:((IOSObjectArray *) nil_chk(coeffs))->size_];
  for (jint i = 0; i < coeffs->size_; i++) {
    *IOSDoubleArray_GetRef(ret, i) = [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(IOSObjectArray_Get(coeffs, i))) getDouble];
  }
  return ret;
}

- (void)dealloc {
  RELEASE_(pointlist_);
  RELEASE_(inputfunction_);
  RELEASE_(outputfunction_);
  RELEASE_(xdata_);
  RELEASE_(ydata_);
  RELEASE_(prfunction_);
  RELEASE_(LMO_);
  RELEASE_(curvefitter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoFunction:", "AlgoFitNL", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFitNL", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "makeDataArrays", NULL, "Z", 0x12, NULL, NULL },
    { "getCoeffs", NULL, "[D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG__", "DEBUG", 0x1a, "Z", NULL, NULL, .constantValue.asBOOL = GeogebraCommonKernelStatisticsAlgoFitNL_DEBUG },
    { "pointlist_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "inputfunction_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "outputfunction_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "datasize_", NULL, 0x2, "I", NULL, NULL,  },
    { "xdata_", NULL, 0x2, "[D", NULL, NULL,  },
    { "ydata_", NULL, 0x2, "[D", NULL, NULL,  },
    { "prfunction_", NULL, 0x2, "Lgeogebra.common.kernel.optimization.FitRealFunction;", NULL, NULL,  },
    { "LMO_", NULL, 0x2, "Lorg.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;", NULL, NULL,  },
    { "curvefitter_", NULL, 0x2, "Lorg.apache.commons.math.optimization.fitting.CurveFitter;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoFitNL = { 2, "AlgoFitNL", "geogebra.common.kernel.statistics", NULL, 0x1, 7, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoFitNL;
}

@end

void GeogebraCommonKernelStatisticsAlgoFitNL_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelStatisticsAlgoFitNL *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *pointlist, GeogebraCommonKernelGeosGeoFunction *inputfunction) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->datasize_ = 0;
  GeogebraCommonKernelStatisticsAlgoFitNL_set_xdata_(self, nil);
  GeogebraCommonKernelStatisticsAlgoFitNL_set_ydata_(self, nil);
  GeogebraCommonKernelStatisticsAlgoFitNL_set_prfunction_(self, nil);
  GeogebraCommonKernelStatisticsAlgoFitNL_setAndConsume_LMO_(self, new_OrgApacheCommonsMathOptimizationGeneralLevenbergMarquardtOptimizer_init());
  GeogebraCommonKernelStatisticsAlgoFitNL_setAndConsume_curvefitter_(self, new_OrgApacheCommonsMathOptimizationFittingCurveFitter_initWithOrgApacheCommonsMathOptimizationDifferentiableMultivariateVectorialOptimizer_(self->LMO_));
  GeogebraCommonKernelStatisticsAlgoFitNL_set_pointlist_(self, pointlist);
  GeogebraCommonKernelStatisticsAlgoFitNL_set_inputfunction_(self, inputfunction);
  GeogebraCommonKernelStatisticsAlgoFitNL_setAndConsume_outputfunction_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoFitNL_compute(self);
  [self->outputfunction_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoFitNL *new_GeogebraCommonKernelStatisticsAlgoFitNL_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *pointlist, GeogebraCommonKernelGeosGeoFunction *inputfunction) {
  GeogebraCommonKernelStatisticsAlgoFitNL *self = [GeogebraCommonKernelStatisticsAlgoFitNL alloc];
  GeogebraCommonKernelStatisticsAlgoFitNL_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, pointlist, inputfunction);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFitNL_compute(GeogebraCommonKernelStatisticsAlgoFitNL *self) {
  GeogebraCommonKernelGeosGeoElement *geo1 = nil;
  GeogebraCommonKernelGeosGeoElement *geo2 = nil;
  self->datasize_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->pointlist_)) size];
  if (![self->pointlist_ isDefined] || ![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->inputfunction_)) isDefined] || (self->datasize_ < 1)) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->outputfunction_)) setUndefined];
    return;
  }
  geo1 = [self->pointlist_ getWithInt:0];
  geo2 = self->inputfunction_;
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) isGeoFunction] || ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) isGeoPoint]) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->outputfunction_)) setUndefined];
    return;
  }
  @try {
    if (!GeogebraCommonKernelStatisticsAlgoFitNL_makeDataArrays(self)) {
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->outputfunction_)) setUndefined];
      return;
    }
    GeogebraCommonKernelStatisticsAlgoFitNL_setAndConsume_prfunction_(self, new_GeogebraCommonKernelOptimizationFitRealFunction_initWithGeogebraCommonKernelArithmeticFunction_([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->inputfunction_)) getFunction]));
    if (!self->prfunction_->parametersOK_) {
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->outputfunction_)) setUndefined];
      return;
    }
    [((OrgApacheCommonsMathOptimizationFittingCurveFitter *) nil_chk(self->curvefitter_)) clearObservations];
    for (jint i = 0; i < self->datasize_; i++) {
      [self->curvefitter_ addObservedPointWithDouble:1.0 withDouble:IOSDoubleArray_Get(nil_chk(self->xdata_), i) withDouble:IOSDoubleArray_Get(nil_chk(self->ydata_), i)];
    }
    [self->curvefitter_ fitWithOrgApacheCommonsMathOptimizationFittingParametricRealFunction:self->prfunction_ withDoubleArray:[self->prfunction_ getStartValues]];
    jint iter = [((OrgApacheCommonsMathOptimizationGeneralLevenbergMarquardtOptimizer *) nil_chk(self->LMO_)) getIterations];
    if (iter > 200) {
      GeogebraCommonMainApp_debugWithNSString_(@"More than 200 iterations...");
    }
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->outputfunction_)) setFunctionWithGeogebraCommonKernelArithmeticFunction:[self->prfunction_ getFunction]];
    [self->outputfunction_ setDefinedWithBoolean:YES];
  }
  @catch (JavaLangThrowable *t) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->outputfunction_)) setUndefined];
    GeogebraCommonMainApp_debugWithNSString_([((JavaLangThrowable *) nil_chk(t)) getMessage]);
  }
}

jboolean GeogebraCommonKernelStatisticsAlgoFitNL_makeDataArrays(GeogebraCommonKernelStatisticsAlgoFitNL *self) {
  GeogebraCommonKernelGeosGeoElement *geo = nil;
  GeogebraCommonKernelGeosGeoPoint *point = nil;
  self->datasize_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->pointlist_)) size];
  GeogebraCommonKernelStatisticsAlgoFitNL_setAndConsume_xdata_(self, [IOSDoubleArray newArrayWithLength:self->datasize_]);
  GeogebraCommonKernelStatisticsAlgoFitNL_setAndConsume_ydata_(self, [IOSDoubleArray newArrayWithLength:self->datasize_]);
  for (jint i = 0; i < self->datasize_; i++) {
    geo = [self->pointlist_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      return NO;
    }
    point = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class]);
    *IOSDoubleArray_GetRef(self->xdata_, i) = [point getX];
    *IOSDoubleArray_GetRef(self->ydata_, i) = [point getY];
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoFitNL)
