//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoToBase.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/advanced/AlgoToBase.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/math/BigInteger.h"

@interface GeogebraCommonKernelAdvancedAlgoToBase () {
 @public
  id<GeogebraCommonKernelArithmeticNumberValue> base_;
  id<GeogebraCommonKernelArithmeticNumberValue> number_;
  GeogebraCommonKernelGeosGeoText *result_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoToBase, base_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoToBase, number_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoToBase, result_, GeogebraCommonKernelGeosGeoText *)

@implementation GeogebraCommonKernelAdvancedAlgoToBase

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)number
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)base {
  GeogebraCommonKernelAdvancedAlgoToBase_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, c, label, number, base);
  return self;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(number_)) toGeoElement], [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(base_)) toGeoElement] } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoText *)getResult {
  return result_;
}

- (void)compute {
  if (![((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(number_)) isDefined] || ![((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(base_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(result_)) setUndefined];
    return;
  }
  jint b = J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(base_)) getDouble]);
  if (b < 2 || b > 36) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(result_)) setUndefined];
    return;
  }
  jint digits = ((jint) [((NSString *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:1.0 / 9.0 withGeogebraCommonKernelStringTemplate:[((GeogebraCommonKernelGeosGeoText *) nil_chk(result_)) getStringTemplate]])) length]) - 2;
  jdouble power = JavaLangMath_roundWithDouble_(JavaLangMath_powWithDouble_withDouble_(b, digits));
  jdouble in = [number_ getDouble];
  in = in + 1 / power > JavaLangMath_ceilWithDouble_(in) ? JavaLangMath_ceilWithDouble_(in) : in;
  JavaMathBigInteger *bi = JavaMathBigInteger_valueOfWithLong_(J2ObjCFpToLong(in));
  NSString *intPart = GeogebraCommonUtilStringUtil_toUpperCaseWithNSString_([((JavaMathBigInteger *) nil_chk(bi)) toStringWithInt:b]);
  if (GeogebraCommonKernelKernel_isIntegerWithDouble_(in)) {
    [result_ setTextStringWithNSString:intPart];
  }
  else {
    jdouble decimal = JavaLangMath_roundWithDouble_(power * ([number_ getDouble] - JavaLangMath_floorWithDouble_([number_ getDouble])));
    bi = JavaMathBigInteger_valueOfWithLong_(J2ObjCFpToLong(decimal));
    NSString *decimalPart = GeogebraCommonUtilStringUtil_toUpperCaseWithNSString_([((JavaMathBigInteger *) nil_chk(bi)) toStringWithInt:b]);
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(digits) autorelease];
    [sb appendWithNSString:intPart];
    [sb appendWithChar:'.'];
    for (jint i = 0; i < digits - ((jint) [((NSString *) nil_chk(decimalPart)) length]); i++) {
      [sb appendWithChar:'0'];
    }
    [sb appendWithNSString:decimalPart];
    [result_ setTextStringWithNSString:[sb description]];
  }
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ToBase();
}

- (void)dealloc {
  RELEASE_(base_);
  RELEASE_(number_);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoToBase", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "base_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "number_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoToBase = { 2, "AlgoToBase", "geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoToBase;
}

@end

void GeogebraCommonKernelAdvancedAlgoToBase_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAdvancedAlgoToBase *self, GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> number, id<GeogebraCommonKernelArithmeticNumberValue> base) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelAdvancedAlgoToBase_set_base_(self, base);
  GeogebraCommonKernelAdvancedAlgoToBase_set_number_(self, number);
  GeogebraCommonKernelAdvancedAlgoToBase_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoToBase *new_GeogebraCommonKernelAdvancedAlgoToBase_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> number, id<GeogebraCommonKernelArithmeticNumberValue> base) {
  GeogebraCommonKernelAdvancedAlgoToBase *self = [GeogebraCommonKernelAdvancedAlgoToBase alloc];
  GeogebraCommonKernelAdvancedAlgoToBase_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, c, label, number, base);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoToBase)
