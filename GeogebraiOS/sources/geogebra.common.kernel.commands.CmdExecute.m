//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdExecute.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/CmdExecute.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/Exception.h"

@implementation GeogebraCommonKernelCommandsCmdExecute

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdExecute_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  if (n > 10) @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList] && [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class])))) size] == 0) || ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isDefined]) return [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:GeogebraCommonKernelGeosGeoElement_class_()];
  if ((![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoList]) || (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class])))) getGeoElementForPropertiesDialog])) isGeoText])) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
  GeogebraCommonKernelGeosGeoList *list = (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]);
  jboolean oldVal = [((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) isUsingInternalCommandNames];
  [kernelA_ setUseInternalCommandNamesWithBoolean:YES];
  for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoList *) nil_chk(list)) size]; i++) {
    @try {
      NSString *cmdText = [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast([list getWithInt:i], [GeogebraCommonKernelGeosGeoText class])))) getTextString];
      for (jint k = 1; k < n; k++) cmdText = [((NSString *) nil_chk(cmdText)) replace:JreStrcat("CI", '%', k) withSequence:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, k))) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_maxPrecision_()]];
      [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernelA_ getAlgebraProcessor])) processAlgebraCommandNoExceptionHandlingWithNSString:cmdText withBoolean:NO withBoolean:NO withBoolean:YES withBoolean:NO];
    }
    @catch (GeogebraCommonMainMyError *e) {
      [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithGeogebraCommonMainMyError:e];
      break;
    }
    @catch (JavaLangException *e) {
      [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:[((JavaLangException *) nil_chk(e)) getLocalizedMessage]];
      [e printStackTrace];
      break;
    }
  }
  [kernelA_ setUseInternalCommandNamesWithBoolean:oldVal];
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
  return [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdExecute", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdExecute = { 2, "CmdExecute", "geogebra.common.kernel.commands", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdExecute;
}

@end

void GeogebraCommonKernelCommandsCmdExecute_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdExecute *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdExecute *new_GeogebraCommonKernelCommandsCmdExecute_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdExecute *self = [GeogebraCommonKernelCommandsCmdExecute alloc];
  GeogebraCommonKernelCommandsCmdExecute_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdExecute)
