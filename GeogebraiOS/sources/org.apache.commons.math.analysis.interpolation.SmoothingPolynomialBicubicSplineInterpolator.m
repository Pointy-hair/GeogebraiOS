//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.h"
#include "org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.h"
#include "org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.h"
#include "org/apache/commons/math/analysis/polynomials/PolynomialFunction.h"
#include "org/apache/commons/math/exception/DimensionMismatchException.h"
#include "org/apache/commons/math/exception/NoDataException.h"
#include "org/apache/commons/math/optimization/fitting/PolynomialFitter.h"
#include "org/apache/commons/math/optimization/general/GaussNewtonOptimizer.h"
#include "org/apache/commons/math/util/MathUtils.h"

@interface OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator () {
 @public
  OrgApacheCommonsMathOptimizationFittingPolynomialFitter *xFitter_;
  OrgApacheCommonsMathOptimizationFittingPolynomialFitter *yFitter_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator, xFitter_, OrgApacheCommonsMathOptimizationFittingPolynomialFitter *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator, yFitter_, OrgApacheCommonsMathOptimizationFittingPolynomialFitter *)

@implementation OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator

- (instancetype)init {
  OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)degree {
  OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_initWithInt_(self, degree);
  return self;
}

- (instancetype)initWithInt:(jint)xDegree
                    withInt:(jint)yDegree {
  OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_initWithInt_withInt_(self, xDegree, yDegree);
  return self;
}

- (OrgApacheCommonsMathAnalysisInterpolationBicubicSplineInterpolatingFunction *)interpolateWithDoubleArray:(IOSDoubleArray *)xval
                                                                                            withDoubleArray:(IOSDoubleArray *)yval
                                                                                           withDoubleArray2:(IOSObjectArray *)fval {
  if (((IOSDoubleArray *) nil_chk(xval))->size_ == 0 || ((IOSDoubleArray *) nil_chk(yval))->size_ == 0 || ((IOSObjectArray *) nil_chk(fval))->size_ == 0) {
    @throw [new_OrgApacheCommonsMathExceptionNoDataException_init() autorelease];
  }
  if (xval->size_ != ((IOSObjectArray *) nil_chk(fval))->size_) {
    @throw [new_OrgApacheCommonsMathExceptionDimensionMismatchException_initWithInt_withInt_(xval->size_, fval->size_) autorelease];
  }
  jint xLen = xval->size_;
  jint yLen = ((IOSDoubleArray *) nil_chk(yval))->size_;
  for (jint i = 0; i < xLen; i++) {
    if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(fval, i)))->size_ != yLen) {
      @throw [new_OrgApacheCommonsMathExceptionDimensionMismatchException_initWithInt_withInt_(((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(fval, i)))->size_, yLen) autorelease];
    }
  }
  OrgApacheCommonsMathUtilMathUtils_checkOrderWithDoubleArray_(xval);
  OrgApacheCommonsMathUtilMathUtils_checkOrderWithDoubleArray_(yval);
  IOSObjectArray *yPolyX = [IOSObjectArray arrayWithLength:yLen type:OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_class_()];
  for (jint j = 0; j < yLen; j++) {
    [((OrgApacheCommonsMathOptimizationFittingPolynomialFitter *) nil_chk(xFitter_)) clearObservations];
    for (jint i = 0; i < xLen; i++) {
      [xFitter_ addObservedPointWithDouble:1 withDouble:IOSDoubleArray_Get(xval, i) withDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(fval, i)), j)];
    }
    IOSObjectArray_Set(yPolyX, j, [xFitter_ fit]);
  }
  IOSObjectArray *fval_1 = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ xLen, yLen }];
  for (jint j = 0; j < yLen; j++) {
    OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *f = IOSObjectArray_Get(yPolyX, j);
    for (jint i = 0; i < xLen; i++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(fval_1, i)), j) = [((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(f)) valueWithDouble:IOSDoubleArray_Get(xval, i)];
    }
  }
  IOSObjectArray *xPolyY = [IOSObjectArray arrayWithLength:xLen type:OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_class_()];
  for (jint i = 0; i < xLen; i++) {
    [((OrgApacheCommonsMathOptimizationFittingPolynomialFitter *) nil_chk(yFitter_)) clearObservations];
    for (jint j = 0; j < yLen; j++) {
      [yFitter_ addObservedPointWithDouble:1 withDouble:IOSDoubleArray_Get(yval, j) withDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(fval_1, i)), j)];
    }
    IOSObjectArray_Set(xPolyY, i, [yFitter_ fit]);
  }
  IOSObjectArray *fval_2 = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ xLen, yLen }];
  for (jint i = 0; i < xLen; i++) {
    OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *f = IOSObjectArray_Get(xPolyY, i);
    for (jint j = 0; j < yLen; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(fval_2, i)), j) = [((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(f)) valueWithDouble:IOSDoubleArray_Get(yval, j)];
    }
  }
  return [super interpolateWithDoubleArray:xval withDoubleArray:yval withDoubleArray2:fval_2];
}

- (void)dealloc {
  RELEASE_(xFitter_);
  RELEASE_(yFitter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SmoothingPolynomialBicubicSplineInterpolator", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "SmoothingPolynomialBicubicSplineInterpolator", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "SmoothingPolynomialBicubicSplineInterpolator", NULL, 0x1, NULL, NULL },
    { "interpolateWithDoubleArray:withDoubleArray:withDoubleArray2:", "interpolate", "Lorg.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction;", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "xFitter_", NULL, 0x12, "Lorg.apache.commons.math.optimization.fitting.PolynomialFitter;", NULL, NULL,  },
    { "yFitter_", NULL, 0x12, "Lorg.apache.commons.math.optimization.fitting.PolynomialFitter;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator = { 2, "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math.analysis.interpolation", NULL, 0x1, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator;
}

@end

void OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_init(OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator *self) {
  OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_initWithInt_(self, 3);
}

OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator *new_OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_init() {
  OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator *self = [OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator alloc];
  OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_init(self);
  return self;
}

void OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_initWithInt_(OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator *self, jint degree) {
  OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_initWithInt_withInt_(self, degree, degree);
}

OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator *new_OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_initWithInt_(jint degree) {
  OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator *self = [OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator alloc];
  OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_initWithInt_(self, degree);
  return self;
}

void OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_initWithInt_withInt_(OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator *self, jint xDegree, jint yDegree) {
  OrgApacheCommonsMathAnalysisInterpolationBicubicSplineInterpolator_init(self);
  OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_setAndConsume_xFitter_(self, new_OrgApacheCommonsMathOptimizationFittingPolynomialFitter_initWithInt_withOrgApacheCommonsMathOptimizationDifferentiableMultivariateVectorialOptimizer_(xDegree, [new_OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer_initWithBoolean_(NO) autorelease]));
  OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_setAndConsume_yFitter_(self, new_OrgApacheCommonsMathOptimizationFittingPolynomialFitter_initWithInt_withOrgApacheCommonsMathOptimizationDifferentiableMultivariateVectorialOptimizer_(yDegree, [new_OrgApacheCommonsMathOptimizationGeneralGaussNewtonOptimizer_initWithBoolean_(NO) autorelease]));
}

OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator *new_OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_initWithInt_withInt_(jint xDegree, jint yDegree) {
  OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator *self = [OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator alloc];
  OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator_initWithInt_withInt_(self, xDegree, yDegree);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathAnalysisInterpolationSmoothingPolynomialBicubicSplineInterpolator)
