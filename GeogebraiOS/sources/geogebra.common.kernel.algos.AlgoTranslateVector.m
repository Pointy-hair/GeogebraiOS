//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoTranslateVector.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoTranslateVector.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonKernelAlgosAlgoTranslateVector () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> A_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTranslateVector, A_, id<GeogebraCommonKernelKernelNDGeoPointND>)

@implementation GeogebraCommonKernelAlgosAlgoTranslateVector

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                   withGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *)v
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A {
  GeogebraCommonKernelAlgosAlgoTranslateVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoVector_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, v, A);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
             withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A {
  GeogebraCommonKernelAlgosAlgoTranslateVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, v, A);
  return self;
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)newGeoVectorWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Translate();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(v_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(A_, [GeogebraCommonKernelGeosGeoElement class]));
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(w_, [GeogebraCommonKernelGeosGeoElement class])];
  [self setDependencies];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getPoint {
  return A_;
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)getVector {
  return v_;
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)getTranslatedVector {
  return w_;
}

- (void)compute {
  [((GeogebraCommonKernelGeosGeoVector *) nil_chk(((GeogebraCommonKernelGeosGeoVector *) check_class_cast(w_, [GeogebraCommonKernelGeosGeoVector class])))) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *) check_class_cast(v_, [GeogebraCommonKernelGeosGeoVec3D class])];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"TranslationOfAtoB" withNSString:[((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(v_);
  RELEASE_(w_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoVector:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoTranslateVector", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoVectorND:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoTranslateVector", NULL, 0x4, NULL, NULL },
    { "newGeoVectorWithGeogebraCommonKernelConstruction:", "newGeoVector", "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x0, NULL, NULL },
    { "getVector", NULL, "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x0, NULL, NULL },
    { "getTranslatedVector", NULL, "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "v_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoVectorND;", NULL, NULL,  },
    { "w_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoVectorND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoTranslateVector = { 2, "AlgoTranslateVector", "geogebra.common.kernel.algos", NULL, 0x1, 11, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoTranslateVector;
}

@end

void GeogebraCommonKernelAlgosAlgoTranslateVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoVector_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoTranslateVector *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoVector *v, id<GeogebraCommonKernelKernelNDGeoPointND> A) {
  GeogebraCommonKernelAlgosAlgoTranslateVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, v, A);
}

GeogebraCommonKernelAlgosAlgoTranslateVector *new_GeogebraCommonKernelAlgosAlgoTranslateVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoVector_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoVector *v, id<GeogebraCommonKernelKernelNDGeoPointND> A) {
  GeogebraCommonKernelAlgosAlgoTranslateVector *self = [GeogebraCommonKernelAlgosAlgoTranslateVector alloc];
  GeogebraCommonKernelAlgosAlgoTranslateVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoVector_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, v, A);
  return self;
}

void GeogebraCommonKernelAlgosAlgoTranslateVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoTranslateVector *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoVectorND> v, id<GeogebraCommonKernelKernelNDGeoPointND> A) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoTranslateVector_set_A_(self, A);
  GeogebraCommonKernelAlgosAlgoTranslateVector_set_v_(self, v);
  GeogebraCommonKernelAlgosAlgoTranslateVector_set_w_(self, [self newGeoVectorWithGeogebraCommonKernelConstruction:cons]);
  @try {
    [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->w_)) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:A];
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
  }
  [self setInputOutput];
  [self compute];
  [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->w_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoTranslateVector *new_GeogebraCommonKernelAlgosAlgoTranslateVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoVectorND> v, id<GeogebraCommonKernelKernelNDGeoPointND> A) {
  GeogebraCommonKernelAlgosAlgoTranslateVector *self = [GeogebraCommonKernelAlgosAlgoTranslateVector alloc];
  GeogebraCommonKernelAlgosAlgoTranslateVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, v, A);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoTranslateVector)
