//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoInsert.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/advanced/AlgoInsert.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"

@interface GeogebraCommonKernelAdvancedAlgoInsert () {
 @public
  GeogebraCommonKernelGeosGeoElement *inputGeo_;
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoNumeric *n_;
  GeogebraCommonKernelGeosGeoList *outputList_;
  jint size_, insertPoint_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoInsert, inputGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoInsert, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoInsert, n_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoInsert, outputList_, GeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoInsert_compute(GeogebraCommonKernelAdvancedAlgoInsert *self);

@implementation GeogebraCommonKernelAdvancedAlgoInsert

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inputGeo
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n {
  GeogebraCommonKernelAdvancedAlgoInsert_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputGeo, inputList, n);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Insert();
}

- (void)setInputOutput {
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(outputList_)) setTypeStringForXMLWithNSString:[((GeogebraCommonKernelGeosGeoList *) nil_chk(inputList_)) getTypeStringForXML]];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputGeo_);
  IOSObjectArray_Set(input_, 1, inputList_);
  IOSObjectArray_Set(input_, 2, n_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outputList_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoInsert_compute(self);
}

- (void)dealloc {
  RELEASE_(inputGeo_);
  RELEASE_(inputList_);
  RELEASE_(n_);
  RELEASE_(outputList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoInsert", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
    { "insertPoint_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoInsert = { 2, "AlgoInsert", "geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoInsert;
}

@end

void GeogebraCommonKernelAdvancedAlgoInsert_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAdvancedAlgoInsert *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inputGeo, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoNumeric *n) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoInsert_set_inputGeo_(self, inputGeo);
  GeogebraCommonKernelAdvancedAlgoInsert_set_inputList_(self, inputList);
  GeogebraCommonKernelAdvancedAlgoInsert_set_n_(self, n);
  GeogebraCommonKernelAdvancedAlgoInsert_setAndConsume_outputList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoInsert_compute(self);
  [self->outputList_ setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoInsert *new_GeogebraCommonKernelAdvancedAlgoInsert_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inputGeo, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoNumeric *n) {
  GeogebraCommonKernelAdvancedAlgoInsert *self = [GeogebraCommonKernelAdvancedAlgoInsert alloc];
  GeogebraCommonKernelAdvancedAlgoInsert_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputGeo, inputList, n);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoInsert_compute(GeogebraCommonKernelAdvancedAlgoInsert *self) {
  self->size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  self->insertPoint_ = J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDouble]);
  if (self->insertPoint_ < 0) self->insertPoint_ = self->size_ + self->insertPoint_ + 2;
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->inputGeo_)) isDefined] || ![self->inputList_ isDefined] || self->insertPoint_ <= 0 || self->insertPoint_ > self->size_ + 1) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setDefinedWithBoolean:YES];
  [self->outputList_ clear];
  if (self->insertPoint_ > 1) for (jint i = 0; i < self->insertPoint_ - 1; i++) [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->inputList_ getWithInt:i])) copyInternalWithGeogebraCommonKernelConstruction:self->cons_]];
  if ([self->inputGeo_ isGeoList]) {
    GeogebraCommonKernelGeosGeoList *list = (GeogebraCommonKernelGeosGeoList *) check_class_cast(self->inputGeo_, [GeogebraCommonKernelGeosGeoList class]);
    if ([list size] > 0) for (jint i = 0; i < [list size]; i++) [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([list getWithInt:i])) copyInternalWithGeogebraCommonKernelConstruction:self->cons_]];
  }
  else {
    [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:[self->inputGeo_ copyInternalWithGeogebraCommonKernelConstruction:self->cons_]];
  }
  if (self->insertPoint_ <= self->size_) for (jint i = self->insertPoint_ - 1; i < self->size_; i++) {
    [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->inputList_ getWithInt:i])) copyInternalWithGeogebraCommonKernelConstruction:self->cons_]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoInsert)
