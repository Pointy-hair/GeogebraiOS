//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdConic.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoConicFromCoeffList.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdConic.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/GeoClass.h"

@interface GeogebraCommonKernelCommandsCmdConic ()

- (IOSObjectArray *)ConicWithNSString:(NSString *)label
  withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)coeffList;

@end

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsCmdConic_ConicWithNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelCommandsCmdConic *self, NSString *label, GeogebraCommonKernelGeosGeoList *coeffList);

@implementation GeogebraCommonKernelCommandsCmdConic

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdConic_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  {
    IOSObjectArray *ret;
    switch (n) {
      case 1:
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList]) return GeogebraCommonKernelCommandsCmdConic_ConicWithNSString_withGeogebraCommonKernelGeosGeoList_(self, [c getLabel], (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]));
      case 5:
      for (jint i = 0; i < 5; i++) {
        if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), i))) isGeoPoint]) {
          @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, i)];
        }
      }
      ret = [IOSObjectArray arrayWithObjects:(id[]){ [self ConicWithNSString:[c getLabel] withGeogebraCommonKernelGeosGeoElementArray:arg] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
      default:
      if ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)]) {
        GeogebraCommonKernelGeosGeoList *list = GeogebraCommonKernelCommandsCommandProcessor_wrapInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElementArray_withInt_withGeogebraCommonPluginGeoClassEnum_(kernelA_, arg, arg->size_, GeogebraCommonPluginGeoClassEnum_get_NUMERIC());
        if (list != nil) {
          ret = GeogebraCommonKernelCommandsCmdConic_ConicWithNSString_withGeogebraCommonKernelGeosGeoList_(self, [c getLabel], list);
          return ret;
        }
      }
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

- (IOSObjectArray *)ConicWithNSString:(NSString *)label
  withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)coeffList {
  return GeogebraCommonKernelCommandsCmdConic_ConicWithNSString_withGeogebraCommonKernelGeosGeoList_(self, label, coeffList);
}

- (GeogebraCommonKernelGeosGeoElement *)ConicWithNSString:(NSString *)label
              withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg {
  IOSObjectArray *points = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(arg), 0), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 2), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 3), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 4), [GeogebraCommonKernelGeosGeoPoint class]) } count:5 type:GeogebraCommonKernelGeosGeoPoint_class_()];
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) ConicWithNSString:label withGeogebraCommonKernelGeosGeoPointArray:points];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdConic", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "ConicWithNSString:withGeogebraCommonKernelGeosGeoList:", "Conic", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
    { "ConicWithNSString:withGeogebraCommonKernelGeosGeoElementArray:", "Conic", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdConic = { 2, "CmdConic", "geogebra.common.kernel.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdConic;
}

@end

void GeogebraCommonKernelCommandsCmdConic_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdConic *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdConic *new_GeogebraCommonKernelCommandsCmdConic_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdConic *self = [GeogebraCommonKernelCommandsCmdConic alloc];
  GeogebraCommonKernelCommandsCmdConic_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

IOSObjectArray *GeogebraCommonKernelCommandsCmdConic_ConicWithNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelCommandsCmdConic *self, NSString *label, GeogebraCommonKernelGeosGeoList *coeffList) {
  GeogebraCommonKernelAlgosAlgoConicFromCoeffList *algo = [new_GeogebraCommonKernelAlgosAlgoConicFromCoeffList_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self->cons_, label, coeffList) autorelease];
  return [IOSObjectArray arrayWithObjects:(id[]){ [algo getConic] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdConic)
