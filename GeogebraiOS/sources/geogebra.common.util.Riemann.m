//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/util/Riemann.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/util/Complex.h"
#include "geogebra/common/util/MyMath.h"
#include "geogebra/common/util/Riemann.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"

@interface GeogebraCommonUtilRiemann ()

- (instancetype)init;

@end

__attribute__((unused)) static void GeogebraCommonUtilRiemann_init(GeogebraCommonUtilRiemann *self);

__attribute__((unused)) static GeogebraCommonUtilRiemann *new_GeogebraCommonUtilRiemann_init() NS_RETURNS_RETAINED;

@implementation GeogebraCommonUtilRiemann

- (instancetype)init {
  GeogebraCommonUtilRiemann_init(self);
  return self;
}

+ (IOSDoubleArray *)chiWithDoubleArray:(IOSDoubleArray *)s {
  return GeogebraCommonUtilRiemann_chiWithDoubleArray_(s);
}

+ (IOSDoubleArray *)zetaWithDoubleArray:(IOSDoubleArray *)s {
  return GeogebraCommonUtilRiemann_zetaWithDoubleArray_(s);
}

+ (jdouble)ZWithDouble:(jdouble)t {
  return GeogebraCommonUtilRiemann_ZWithDouble_(t);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Riemann", NULL, 0x2, NULL, NULL },
    { "chiWithDoubleArray:", "chi", "[D", 0x9, NULL, NULL },
    { "zetaWithDoubleArray:", "zeta", "[D", 0x9, NULL, NULL },
    { "ZWithDouble:", "Z", "D", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "EPSILON_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonUtilRiemann_EPSILON },
  };
  static const J2ObjcClassInfo _GeogebraCommonUtilRiemann = { 2, "Riemann", "geogebra.common.util", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonUtilRiemann;
}

@end

void GeogebraCommonUtilRiemann_init(GeogebraCommonUtilRiemann *self) {
  NSObject_init(self);
}

GeogebraCommonUtilRiemann *new_GeogebraCommonUtilRiemann_init() {
  GeogebraCommonUtilRiemann *self = [GeogebraCommonUtilRiemann alloc];
  GeogebraCommonUtilRiemann_init(self);
  return self;
}

IOSDoubleArray *GeogebraCommonUtilRiemann_chiWithDoubleArray_(IOSDoubleArray *s) {
  GeogebraCommonUtilRiemann_initialize();
  if (IOSDoubleArray_Get(nil_chk(s), 0) > 0.5) {
    return GeogebraCommonUtilComplex_divideWithDouble_withDoubleArray_(1.0, GeogebraCommonUtilRiemann_chiWithDoubleArray_(GeogebraCommonUtilComplex_subtractWithDoubleArray_withDoubleArray_(GeogebraCommonUtilComplex_get_ONE__(), s)));
  }
  IOSDoubleArray *result;
  if (JavaLangMath_PI * JavaLangMath_absWithDouble_(IOSDoubleArray_Get(s, 1)) > 709) {
    result = GeogebraCommonUtilComplex_multiplyWithDouble_withDoubleArray_(JavaLangMath_logWithDouble_(2), s);
    result = GeogebraCommonUtilComplex_addWithDoubleArray_withDoubleArray_(result, GeogebraCommonUtilComplex_multiplyWithDouble_withDoubleArray_(JavaLangMath_logWithDouble_(JavaLangMath_PI), GeogebraCommonUtilComplex_subtractWithDoubleArray_withDoubleArray_(s, GeogebraCommonUtilComplex_get_ONE__())));
    result = GeogebraCommonUtilComplex_addWithDoubleArray_withDoubleArray_(result, GeogebraCommonUtilComplex_lnGammaWithDoubleArray_(GeogebraCommonUtilComplex_subtractWithDoubleArray_withDoubleArray_(GeogebraCommonUtilComplex_get_ONE__(), s)));
    result = GeogebraCommonUtilComplex_addWithDoubleArray_withDoubleArray_(result, GeogebraCommonUtilComplex_lnSinWithDoubleArray_(GeogebraCommonUtilComplex_multiplyWithDouble_withDoubleArray_(JavaLangMath_PI / 2, s)));
    return GeogebraCommonUtilComplex_expWithDoubleArray_(result);
  }
  result = GeogebraCommonUtilComplex_gammaWithDoubleArray_(GeogebraCommonUtilComplex_subtractWithDoubleArray_withDoubleArray_(GeogebraCommonUtilComplex_get_ONE__(), s));
  result = GeogebraCommonUtilComplex_multiplyWithDoubleArray_withDoubleArray_(result, GeogebraCommonUtilComplex_sinWithDoubleArray_(GeogebraCommonUtilComplex_multiplyWithDouble_withDoubleArray_(JavaLangMath_PI / 2, s)));
  result = GeogebraCommonUtilComplex_multiplyWithDoubleArray_withDoubleArray_(result, GeogebraCommonUtilComplex_powerWithDouble_withDoubleArray_(JavaLangMath_PI, GeogebraCommonUtilComplex_subtractWithDoubleArray_withDoubleArray_(s, GeogebraCommonUtilComplex_get_ONE__())));
  result = GeogebraCommonUtilComplex_multiplyWithDoubleArray_withDoubleArray_(result, GeogebraCommonUtilComplex_powerWithDouble_withDoubleArray_(2, s));
  return result;
}

IOSDoubleArray *GeogebraCommonUtilRiemann_zetaWithDoubleArray_(IOSDoubleArray *s) {
  GeogebraCommonUtilRiemann_initialize();
  IOSDoubleArray *sum = [IOSDoubleArray arrayWithLength:2];
  IOSDoubleArray *tmp = [IOSDoubleArray arrayWithLength:2];
  IOSDoubleArray *exponent = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 1 - IOSDoubleArray_Get(nil_chk(s), 0), -IOSDoubleArray_Get(s, 1) } count:2];
  if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(s, 0) - 1) < GeogebraCommonUtilRiemann_EPSILON && JavaLangMath_absWithDouble_(IOSDoubleArray_Get(s, 1)) < GeogebraCommonUtilRiemann_EPSILON) {
    *IOSDoubleArray_GetRef(sum, 0) = JavaLangDouble_POSITIVE_INFINITY;
  }
  else if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(s, 0)) < GeogebraCommonUtilRiemann_EPSILON && JavaLangMath_absWithDouble_(IOSDoubleArray_Get(s, 1)) < GeogebraCommonUtilRiemann_EPSILON) {
    *IOSDoubleArray_GetRef(sum, 0) = -.5;
    return sum;
  }
  else if (IOSDoubleArray_Get(s, 0) < 0 && JavaLangMath_absWithDouble_(fmod(IOSDoubleArray_Get(s, 0), 2)) < GeogebraCommonUtilRiemann_EPSILON && JavaLangMath_absWithDouble_(IOSDoubleArray_Get(s, 1)) < GeogebraCommonUtilRiemann_EPSILON) {
    return sum;
  }
  else if (IOSDoubleArray_Get(s, 0) > 0 && IOSDoubleArray_Get(s, 0) < 1 && JavaLangMath_absWithDouble_(IOSDoubleArray_Get(s, 1)) > 45) {
    jint m = J2ObjCFpToInt(JavaLangMath_sqrtWithDouble_(JavaLangMath_absWithDouble_(IOSDoubleArray_Get(s, 1)) / (2 * JavaLangMath_PI)));
    IOSDoubleArray *chi = GeogebraCommonUtilRiemann_chiWithDoubleArray_(s);
    exponent = GeogebraCommonUtilComplex_subtractWithDoubleArray_withDoubleArray_(s, GeogebraCommonUtilComplex_get_ONE__());
    for (jint n = 1; n <= m; n++) {
      sum = GeogebraCommonUtilComplex_addWithDoubleArray_withDoubleArray_(sum, GeogebraCommonUtilComplex_divideWithDouble_withDoubleArray_(1, GeogebraCommonUtilComplex_powerWithDouble_withDoubleArray_(n, s)));
      sum = GeogebraCommonUtilComplex_addWithDoubleArray_withDoubleArray_(sum, GeogebraCommonUtilComplex_multiplyWithDoubleArray_withDoubleArray_(chi, GeogebraCommonUtilComplex_powerWithDouble_withDoubleArray_(n, exponent)));
    }
    return sum;
  }
  else if (IOSDoubleArray_Get(s, 0) < 0.0) {
    return GeogebraCommonUtilComplex_multiplyWithDoubleArray_withDoubleArray_(GeogebraCommonUtilRiemann_chiWithDoubleArray_(s), GeogebraCommonUtilRiemann_zetaWithDoubleArray_(GeogebraCommonUtilComplex_subtractWithDoubleArray_withDoubleArray_(GeogebraCommonUtilComplex_get_ONE__(), s)));
  }
  else if (IOSDoubleArray_Get(s, 0) > 6) {
    jint nMax = J2ObjCFpToInt(JavaLangMath_powWithDouble_withDouble_(GeogebraCommonUtilRiemann_EPSILON, -1 / IOSDoubleArray_Get(s, 0)));
    jint maxIntern = J2ObjCFpToInt(5e6) + 1;
    if (nMax <= 0 || nMax > maxIntern) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$D$IC", @"== Accuracy +/- ", GeogebraCommonUtilRiemann_EPSILON, @", requires the zeta sum to be summed up to n=", nMax, ';')];
      nMax = maxIntern;
    }
    for (jint n = 1; n <= nMax; n++) {
      *IOSDoubleArray_GetRef(tmp, 0) = JavaLangMath_powWithDouble_withDouble_(n, -IOSDoubleArray_Get(s, 0)) * JavaLangMath_cosWithDouble_(-IOSDoubleArray_Get(s, 1) * JavaLangMath_logWithDouble_(n));
      *IOSDoubleArray_GetRef(tmp, 1) = JavaLangMath_powWithDouble_withDouble_(n, -IOSDoubleArray_Get(s, 0)) * JavaLangMath_sinWithDouble_(-IOSDoubleArray_Get(s, 1) * JavaLangMath_logWithDouble_(n));
      if (n % 2 == 0) {
        *IOSDoubleArray_GetRef(sum, 0) -= IOSDoubleArray_Get(tmp, 0);
        *IOSDoubleArray_GetRef(sum, 1) -= IOSDoubleArray_Get(tmp, 1);
      }
      else {
        *IOSDoubleArray_GetRef(sum, 0) += IOSDoubleArray_Get(tmp, 0);
        *IOSDoubleArray_GetRef(sum, 1) += IOSDoubleArray_Get(tmp, 1);
      }
    }
    tmp = GeogebraCommonUtilComplex_powerWithDouble_withDoubleArray_(2.0, exponent);
    *IOSDoubleArray_GetRef(nil_chk(tmp), 0) = 1 - IOSDoubleArray_Get(tmp, 0);
    *IOSDoubleArray_GetRef(tmp, 1) = -IOSDoubleArray_Get(tmp, 1);
    sum = GeogebraCommonUtilComplex_divideWithDoubleArray_withDoubleArray_(sum, tmp);
  }
  else {
    jint nMax = 30;
    IOSDoubleArray *factor = GeogebraCommonUtilComplex_powerWithDouble_withDoubleArray_(2., exponent);
    *IOSDoubleArray_GetRef(nil_chk(factor), 0) = 1 - IOSDoubleArray_Get(factor, 0);
    *IOSDoubleArray_GetRef(factor, 1) *= -1;
    factor = GeogebraCommonUtilComplex_divideWithDoubleArray_withDoubleArray_(GeogebraCommonUtilComplex_get_ONE__(), factor);
    IOSDoubleArray *h = [IOSDoubleArray arrayWithLength:2];
    *IOSDoubleArray_GetRef(exponent, 0) = -IOSDoubleArray_Get(s, 0);
    if (IOSDoubleArray_Get(s, 0) < 0 && nMax > -IOSDoubleArray_Get(s, 0)) nMax = J2ObjCFpToInt(JavaLangMath_floorWithDouble_(-IOSDoubleArray_Get(s, 0))) + 1;
    for (jint n = 0; n <= nMax; n++) {
      h = GeogebraCommonUtilComplex_multiplyWithDouble_withDoubleArray_(JavaLangMath_powWithDouble_withDouble_(2, -(n + 1)), factor);
      for (jint k = 0; k <= n; k++) {
        tmp = GeogebraCommonUtilComplex_powerWithDouble_withDoubleArray_(k + 1, exponent);
        tmp = GeogebraCommonUtilComplex_multiplyWithDouble_withDoubleArray_(GeogebraCommonUtilMyMath_binomialWithDouble_withDouble_(n, k), tmp);
        tmp = GeogebraCommonUtilComplex_multiplyWithDoubleArray_withDoubleArray_(h, tmp);
        if (k % 2 == 0) {
          *IOSDoubleArray_GetRef(sum, 0) += IOSDoubleArray_Get(nil_chk(tmp), 0);
          *IOSDoubleArray_GetRef(sum, 1) += IOSDoubleArray_Get(tmp, 1);
        }
        else {
          *IOSDoubleArray_GetRef(sum, 0) -= IOSDoubleArray_Get(nil_chk(tmp), 0);
          *IOSDoubleArray_GetRef(sum, 1) -= IOSDoubleArray_Get(tmp, 1);
        }
      }
    }
  }
  return sum;
}

jdouble GeogebraCommonUtilRiemann_ZWithDouble_(jdouble t) {
  GeogebraCommonUtilRiemann_initialize();
  if (JavaLangMath_absWithDouble_(t) < 10) {
    IOSDoubleArray *s = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0.5, t } count:2];
    return -GeogebraCommonUtilComplex_absWithDoubleArray_(GeogebraCommonUtilRiemann_zetaWithDoubleArray_(s));
  }
  jdouble theta = t / 2 * JavaLangMath_logWithDouble_(t / (2 * JavaLangMath_PI)) - t / 2 - JavaLangMath_PI / 8 + 1 / (48 * t);
  jlong m = J2ObjCFpToLong(JavaLangMath_floorWithDouble_(JavaLangMath_sqrtWithDouble_(JavaLangMath_absWithDouble_(t) / (2 * JavaLangMath_PI))));
  jdouble sum = 0;
  for (jlong n = 1; n <= m; n++) {
    sum += JavaLangMath_cosWithDouble_(theta - t * JavaLangMath_logWithDouble_(n)) / JavaLangMath_sqrtWithDouble_(n);
  }
  return 2 * sum;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilRiemann)
