//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/MyPoint3D.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GPoint2D.h"
#include "geogebra/common/geogebra3D/kernel3D/MyPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/util/MyMath.h"

@implementation GeogebraCommonGeogebra3DKernel3DMyPoint3D

- (instancetype)initWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)z
                   withBoolean:(jboolean)lineTo {
  GeogebraCommonGeogebra3DKernel3DMyPoint3D_initWithDouble_withDouble_withDouble_withBoolean_(self, x, y, z, lineTo);
  return self;
}

- (instancetype)init {
  GeogebraCommonGeogebra3DKernel3DMyPoint3D_init(self);
  return self;
}

- (jdouble)distSqrWithDouble:(jdouble)px
                  withDouble:(jdouble)py
                  withDouble:(jdouble)pz {
  jdouble vx = px - x_;
  jdouble vy = py - y_;
  jdouble vz = pz - z_;
  return vx * vx + vy * vy + vz * vz;
}

- (jboolean)isEqualWithDouble:(jdouble)px
                   withDouble:(jdouble)py
                   withDouble:(jdouble)pz {
  return [super isEqualWithDouble:px withDouble:py] && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(z_, pz, GeogebraCommonKernelKernel_MIN_PRECISION);
}

- (NSString *)description {
  return JreStrcat("CD$D$DC", '(', x_, @", ", y_, @", ", z_, ')');
}

- (jdouble)distanceWithGeogebraCommonGeogebra3DKernel3DMyPoint3D:(GeogebraCommonGeogebra3DKernel3DMyPoint3D *)p {
  return GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_withDouble_(((GeogebraCommonGeogebra3DKernel3DMyPoint3D *) nil_chk(p))->x_ - x_, p->y_ - y_, p->z_ - z_);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)getGeoPoint3DWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_withDouble_(cons, nil, x_, y_, z_, 1.0) autorelease];
}

- (jdouble)getZ {
  return z_;
}

- (jdouble)distanceWithDouble:(jdouble)x1
                   withDouble:(jdouble)y1
                   withDouble:(jdouble)z1 {
  return [self distSqrWithDouble:x1 withDouble:y1 withDouble:z1];
}

- (void)setZWithDouble:(jdouble)z {
  self->z_ = z;
}

- (jdouble)distanceWithGeogebraCommonAwtGPoint2D:(GeogebraCommonAwtGPoint2D *)q {
  return [self distanceWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(q)) getX] withDouble:[q getY] withDouble:0];
}

- (jboolean)isEqualWithGeogebraCommonGeogebra3DKernel3DMyPoint3D:(GeogebraCommonGeogebra3DKernel3DMyPoint3D *)point {
  return [self isEqualWithDouble:((GeogebraCommonGeogebra3DKernel3DMyPoint3D *) nil_chk(point))->x_ withDouble:point->y_ withDouble:point->z_];
}

- (jboolean)isFinite {
  return [super isFinite] && GeogebraCommonKernelMyPoint_isFiniteWithDouble_(z_);
}

- (GeogebraCommonGeogebra3DKernel3DMyPoint3D *)barycenterWithDouble:(jdouble)t
                                    withGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)point2 {
  return [new_GeogebraCommonGeogebra3DKernel3DMyPoint3D_initWithDouble_withDouble_withDouble_withBoolean_((1 - t) * x_ + t * ((GeogebraCommonKernelMyPoint *) nil_chk(point2))->x_, (1 - t) * y_ + t * point2->y_, (1 - t) * z_ + t * [point2 getZ], NO) autorelease];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:withDouble:withBoolean:", "MyPoint3D", NULL, 0x1, NULL, NULL },
    { "init", "MyPoint3D", NULL, 0x1, NULL, NULL },
    { "distSqrWithDouble:withDouble:withDouble:", "distSqr", "D", 0x1, NULL, NULL },
    { "isEqualWithDouble:withDouble:withDouble:", "isEqual", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "distanceWithGeogebraCommonGeogebra3DKernel3DMyPoint3D:", "distance", "D", 0x1, NULL, NULL },
    { "getGeoPoint3DWithGeogebraCommonKernelConstruction:", "getGeoPoint3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "getZ", NULL, "D", 0x1, NULL, NULL },
    { "distanceWithDouble:withDouble:withDouble:", "distance", "D", 0x1, NULL, NULL },
    { "setZWithDouble:", "setZ", "V", 0x1, NULL, NULL },
    { "distanceWithGeogebraCommonAwtGPoint2D:", "distance", "D", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonGeogebra3DKernel3DMyPoint3D:", "isEqual", "Z", 0x1, NULL, NULL },
    { "isFinite", NULL, "Z", 0x1, NULL, NULL },
    { "barycenterWithDouble:withGeogebraCommonKernelMyPoint:", "barycenter", "Lgeogebra.common.geogebra3D.kernel3D.MyPoint3D;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "z_", NULL, 0x1, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DMyPoint3D = { 2, "MyPoint3D", "geogebra.common.geogebra3D.kernel3D", NULL, 0x1, 14, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DMyPoint3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DMyPoint3D_initWithDouble_withDouble_withDouble_withBoolean_(GeogebraCommonGeogebra3DKernel3DMyPoint3D *self, jdouble x, jdouble y, jdouble z, jboolean lineTo) {
  GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(self, x, y, lineTo);
  self->z_ = z;
}

GeogebraCommonGeogebra3DKernel3DMyPoint3D *new_GeogebraCommonGeogebra3DKernel3DMyPoint3D_initWithDouble_withDouble_withDouble_withBoolean_(jdouble x, jdouble y, jdouble z, jboolean lineTo) {
  GeogebraCommonGeogebra3DKernel3DMyPoint3D *self = [GeogebraCommonGeogebra3DKernel3DMyPoint3D alloc];
  GeogebraCommonGeogebra3DKernel3DMyPoint3D_initWithDouble_withDouble_withDouble_withBoolean_(self, x, y, z, lineTo);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DMyPoint3D_init(GeogebraCommonGeogebra3DKernel3DMyPoint3D *self) {
  GeogebraCommonKernelMyPoint_init(self);
}

GeogebraCommonGeogebra3DKernel3DMyPoint3D *new_GeogebraCommonGeogebra3DKernel3DMyPoint3D_init() {
  GeogebraCommonGeogebra3DKernel3DMyPoint3D *self = [GeogebraCommonGeogebra3DKernel3DMyPoint3D alloc];
  GeogebraCommonGeogebra3DKernel3DMyPoint3D_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DMyPoint3D)
