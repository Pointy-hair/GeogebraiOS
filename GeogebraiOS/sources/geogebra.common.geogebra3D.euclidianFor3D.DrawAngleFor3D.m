//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidianFor3D/DrawAngleFor3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "geogebra/common/euclidian/draw/DrawAngle.h"
#include "geogebra/common/geogebra3D/euclidianFor3D/DrawAngleFor3D.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoAngle.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"

@implementation GeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                        withGeogebraCommonKernelGeosGeoAngle:(GeogebraCommonKernelGeosGeoAngle *)angle {
  GeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoAngle_(self, view, angle);
  return self;
}

- (jboolean)inViewWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point {
  return GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) getZ]);
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsInViewWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point {
  return [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:point];
}

- (jdouble)getAngleStartWithDouble:(jdouble)start
                        withDouble:(jdouble)extent {
  if ([((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCompanion])) goToZPlusWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelAlgosAlgoAngle *) nil_chk(((GeogebraCommonKernelAlgosAlgoAngle *) check_class_cast([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getDrawAlgorithm], [GeogebraCommonKernelAlgosAlgoAngle class])))) getVn]]) {
    return [super getAngleStartWithDouble:start withDouble:extent];
  }
  return start - extent;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoAngle:", "DrawAngleFor3D", NULL, 0x1, NULL, NULL },
    { "inViewWithGeogebraCommonKernelMatrixCoords:", "inView", "Z", 0x1, NULL, NULL },
    { "getCoordsInViewWithGeogebraCommonKernelMatrixCoords:", "getCoordsInView", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getAngleStartWithDouble:withDouble:", "getAngleStart", "D", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D = { 2, "DrawAngleFor3D", "geogebra.common.geogebra3D.euclidianFor3D", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D;
}

@end

void GeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoAngle_(GeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoAngle *angle) {
  GeogebraCommonEuclidianDrawDrawAngle_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoAngle_(self, view, angle);
}

GeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D *new_GeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoAngle_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoAngle *angle) {
  GeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D *self = [GeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D alloc];
  GeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoAngle_(self, view, angle);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D)
