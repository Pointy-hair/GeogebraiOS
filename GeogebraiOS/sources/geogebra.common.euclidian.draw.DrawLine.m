//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawLine.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GArea.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GLine2D.h"
#include "geogebra/common/awt/GPoint2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianStatic.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/GeneralPathClipped.h"
#include "geogebra/common/euclidian/draw/DrawLine.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/ConstructionDefaults.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/util/MyMath.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

#define GeogebraCommonEuclidianDrawDrawLine_LEFT 0
#define GeogebraCommonEuclidianDrawDrawLine_RIGHT 1
#define GeogebraCommonEuclidianDrawDrawLine_TOP 2
#define GeogebraCommonEuclidianDrawDrawLine_BOTTOM 3

@interface GeogebraCommonEuclidianDrawDrawLine () {
 @public
  id<GeogebraCommonKernelKernelNDGeoLineND> g_;
  id<GeogebraCommonAwtGLine2D> line_;
  jdouble k_;
  jdouble d_;
  jdouble gx_;
  jdouble gy_;
  jdouble gz_;
  jint labelPos_, p1Pos_, p2Pos_;
  jint x_, y_;
  jboolean isVisible_;
  jboolean labelVisible_;
  JavaUtilArrayList *points_;
  JavaUtilArrayList *lines_;
  id<GeogebraCommonKernelKernelNDGeoPointND> startPoint_, previewPoint2_;
  IOSBooleanArray *attr1_, *attr2_;
  GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *previewMode_;
  GeogebraCommonAwtGPoint2D *endPoint_;
}

- (void)setClippedLine;

- (void)clipTopBottom;

- (void)clipLeftRight;

- (void)setLabelPosition;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawLine, g_, id<GeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawLine, line_, id<GeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawLine, points_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawLine, lines_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawLine, startPoint_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawLine, previewPoint2_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawLine, attr1_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawLine, attr2_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawLine, previewMode_, GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawLine, endPoint_, GeogebraCommonAwtGPoint2D *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianDrawDrawLine, LEFT, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianDrawDrawLine, RIGHT, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianDrawDrawLine, TOP, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianDrawDrawLine, BOTTOM, jint)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawLine_setClippedLine(GeogebraCommonEuclidianDrawDrawLine *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawLine_clipTopBottom(GeogebraCommonEuclidianDrawDrawLine *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawLine_clipLeftRight(GeogebraCommonEuclidianDrawDrawLine *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawLine_setLabelPosition(GeogebraCommonEuclidianDrawDrawLine *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawLine_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawLine *self, id<GeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawLine_updatePreview(GeogebraCommonEuclidianDrawDrawLine *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *new_GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation GeogebraCommonEuclidianDrawDrawLine

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                   withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g {
  GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(self, view, g);
  return self;
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                                       withJavaUtilArrayList:(JavaUtilArrayList *)points
     withGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum:(GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *)previewMode {
  GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_(self, view, points, previewMode);
  return self;
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                                       withJavaUtilArrayList:(JavaUtilArrayList *)points
                                       withJavaUtilArrayList:(JavaUtilArrayList *)lines
                                                 withBoolean:(jboolean)parallel {
  GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_withBoolean_(self, view, points, lines, parallel);
  return self;
}

- (void)update {
  [self updateWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getMatrix]];
}

- (void)updateWithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)matrix {
  isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isEuclidianVisible];
  if (isVisible_) {
    labelVisible_ = [geo_ isLabelVisible];
    [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:g_];
    GeogebraCommonKernelMatrixCoords *equation = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getCartesianEquationVectorWithGeogebraCommonKernelMatrixCoordMatrix:matrix];
    if (equation == nil) {
      isVisible_ = NO;
      return;
    }
    gx_ = [((GeogebraCommonKernelMatrixCoords *) nil_chk(equation)) getX];
    gy_ = [equation getY];
    gz_ = [equation getZ];
    GeogebraCommonEuclidianDrawDrawLine_setClippedLine(self);
    if (![((id<GeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithInt:-GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE withInt:-GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE withInt:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE withInt:[view_ getHeight] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE]) {
      isVisible_ = NO;
    }
    if ([g_ getTrace]) {
      isTracing__ = YES;
      id<GeogebraCommonAwtGGraphics2D> g2 = [view_ getBackgroundGraphics];
      if (g2 != nil) GeogebraCommonEuclidianDrawDrawLine_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
    }
    else {
      if (isTracing__) {
        isTracing__ = NO;
      }
    }
    if (labelVisible_) {
      GeogebraCommonEuclidianDrawable_set_labelDesc_(self, [geo_ getLabelDescription]);
      GeogebraCommonEuclidianDrawDrawLine_setLabelPosition(self);
      [self addLabelOffsetEnsureOnScreen];
    }
  }
}

- (void)setClippedLine {
  GeogebraCommonEuclidianDrawDrawLine_setClippedLine(self);
}

- (void)clipTopBottom {
  GeogebraCommonEuclidianDrawDrawLine_clipTopBottom(self);
}

- (void)clipLeftRight {
  GeogebraCommonEuclidianDrawDrawLine_clipLeftRight(self);
}

- (void)setLabelPosition {
  GeogebraCommonEuclidianDrawDrawLine_setLabelPosition(self);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getSelColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithGeogebraCommonAwtGShape:line_];
    }
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[self getObjectColor]];
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithGeogebraCommonAwtGShape:line_];
    if (labelVisible_) {
      [g2 setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontLine]];
      [g2 setColorWithGeogebraCommonAwtGColor:[geo_ getLabelColor]];
      [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (void)drawTraceWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianDrawDrawLine_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)updatePreview {
  GeogebraCommonEuclidianDrawDrawLine_updatePreview(self);
}

- (void)updateMousePosWithDouble:(jdouble)mouseRWx
                      withDouble:(jdouble)mouseRWy {
  jdouble xRW = mouseRWx;
  jdouble yRW = mouseRWy;
  if (isVisible_) {
    GeogebraCommonKernelMatrixCoords *coords;
    {
      id<GeogebraCommonKernelKernelNDGeoLineND> lND;
      GeogebraCommonKernelMatrixCoords *equation;
      jdouble startx;
      jdouble starty;
      GeogebraCommonKernelGeosGeoLine *g1;
      GeogebraCommonKernelGeosGeoLine *h;
      jdouble g2x;
      jdouble g2y;
      jdouble lenG;
      jdouble hx;
      jdouble hy;
      jdouble lenH;
      jdouble wx, wy;
      jdouble ip;
      jdouble length;
      switch ([previewMode_ ordinal]) {
        case GeogebraCommonEuclidianDrawDrawLine_PreviewType_LINE:
        if ([((JavaUtilArrayList *) nil_chk(points_)) size] == 1 && [((GeogebraCommonEuclidianEuclidianController *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getEuclidianController])) isAltDown]) {
          GeogebraCommonKernelGeosGeoPoint *p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([points_ getWithInt:0], [GeogebraCommonKernelGeosGeoPoint class]);
          jdouble px = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_;
          jdouble py = p->inhomY_;
          jdouble angle = JavaLangMath_atan2WithDouble_withDouble_(yRW - py, xRW - px) * 180 / JavaLangMath_PI;
          jdouble radius = JavaLangMath_sqrtWithDouble_((py - yRW) * (py - yRW) + (px - xRW) * (px - xRW));
          angle = JavaLangMath_roundWithDouble_(angle / 15) * 15;
          xRW = px + radius * JavaLangMath_cosWithDouble_(angle * JavaLangMath_PI / 180);
          yRW = py + radius * JavaLangMath_sinWithDouble_(angle * JavaLangMath_PI / 180);
          [((GeogebraCommonAwtGPoint2D *) nil_chk(endPoint_)) setXWithDouble:xRW];
          [endPoint_ setYWithDouble:yRW];
          [((GeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) setLineEndPointWithGeogebraCommonAwtGPoint2D:endPoint_];
        }
        else [((GeogebraCommonEuclidianEuclidianController *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getEuclidianController])) setLineEndPointWithGeogebraCommonAwtGPoint2D_Double:nil];
        coords = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint_)) getInhomCoordsInD3]])) projectInfDim])) crossProductWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(xRW, yRW, 1) autorelease]];
        [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class])))) setCoordsWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
        break;
        case GeogebraCommonEuclidianDrawDrawLine_PreviewType_PARALLEL:
        lND = [((JavaUtilArrayList *) nil_chk(lines_)) getWithInt:0];
        equation = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(lND)) getCartesianEquationVectorWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getMatrix]];
        GeogebraCommonKernelGeosGeoVec3D_crossWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withGeogebraCommonKernelGeosGeoVec3D_(xRW, yRW, 1.0, [((GeogebraCommonKernelMatrixCoords *) nil_chk(equation)) getY], -[equation getX], 0.0, ((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class])));
        break;
        case GeogebraCommonEuclidianDrawDrawLine_PreviewType_PERPENDICULAR:
        lND = [((JavaUtilArrayList *) nil_chk(lines_)) getWithInt:0];
        equation = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(lND)) getCartesianEquationVectorWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getMatrix]];
        GeogebraCommonKernelGeosGeoVec3D_crossWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withGeogebraCommonKernelGeosGeoVec3D_(xRW, yRW, 1.0, [((GeogebraCommonKernelMatrixCoords *) nil_chk(equation)) getX], [equation getY], 0.0, ((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class])));
        break;
        case GeogebraCommonEuclidianDrawDrawLine_PreviewType_PERPENDICULAR_BISECTOR:
        coords = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint_)) getInhomCoordsInD2];
        startx = [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX];
        starty = [coords getY];
        GeogebraCommonKernelGeosGeoVec3D_crossWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withGeogebraCommonKernelGeosGeoVec3D_((xRW + startx) / 2, (yRW + starty) / 2, 1.0, -yRW + starty, xRW - startx, 0.0, ((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class])));
        break;
        case GeogebraCommonEuclidianDrawDrawLine_PreviewType_ANGLE_BISECTOR:
        g1 = [new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getKernel])) getConstruction]) autorelease];
        h = [new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk([view_ getKernel])) getConstruction]) autorelease];
        coords = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(previewPoint2_)) getCoordsInD2])) crossProductWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint_)) getCoordsInD2]];
        [g1 setCoordsWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
        coords = [((GeogebraCommonKernelMatrixCoords *) nil_chk([previewPoint2_ getCoordsInD2])) crossProductWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(xRW, yRW, 1) autorelease]];
        [h setCoordsWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
        g2x = g1->y_;
        g2y = -g1->x_;
        lenG = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(g2x, g2y);
        g2x /= lenG;
        g2y /= lenG;
        hx = h->y_;
        hy = -h->x_;
        lenH = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(hx, hy);
        hx /= lenH;
        hy /= lenH;
        ip = g2x * hx + g2y * hy;
        if (ip >= 0.0) {
          wx = g2x + hx;
          wy = g2y + hy;
        }
        else {
          wx = hy - g2y;
          wy = g2x - hx;
          if (g2x * hy < g2y * hx) {
            wx = -wx;
            wy = -wy;
          }
        }
        length = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(wx, wy);
        wx /= length;
        wy /= length;
        coords = [previewPoint2_ getInhomCoordsInD2];
        ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class]))))->x_ = -wy;
        ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class]))))->y_ = wx;
        ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class]))))->z_ = -([((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] * ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class]))))->x_ + [coords getY] * ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class]))))->y_);
        break;
      }
    }
    if ([((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class])))) isZero]) {
      isVisible_ = NO;
      return;
    }
    gx_ = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class]))))->x_;
    gy_ = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class]))))->y_;
    gz_ = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class]))))->z_;
    GeogebraCommonEuclidianDrawDrawLine_setClippedLine(self);
  }
}

- (void)drawPreviewWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[self getObjectColor]];
    [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:geo_];
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithGeogebraCommonAwtGShape:line_];
  }
}

- (void)disposePreview {
}

- (jboolean)hitWithInt:(jint)screenx
               withInt:(jint)screeny
               withInt:(jint)hitThreshold {
  return isVisible_ && [((id<GeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithInt:screenx - hitThreshold withInt:screeny - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return NO;
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((id<GeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithGeogebraCommonAwtGRectangle2D:rect];
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (id<GeogebraCommonAwtGArea>)getShape {
  return [self getShapeWithBoolean:NO];
}

- (id<GeogebraCommonAwtGArea>)getShapeWithBoolean:(jboolean)forConic {
  GeogebraCommonEuclidianGeneralPathClipped *gpc = [new_GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(view_) autorelease];
  jboolean invert = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) isInverseFill];
  if (x1_ > x2_) {
    jdouble swap = x1_;
    x1_ = x2_;
    x2_ = swap;
    swap = y1_;
    y1_ = y2_;
    y2_ = swap;
  }
  [gpc moveToWithDouble:x1_ withDouble:y1_];
  [gpc lineToWithDouble:x2_ withDouble:y2_];
  if (x1_ > 0 && x2_ <= [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth]) {
    if (y2_ < y1_) {
      [gpc lineToWithDouble:0 withDouble:0];
      [gpc lineToWithDouble:0 withDouble:[view_ getHeight]];
    }
    else {
      [gpc lineToWithDouble:0 withDouble:[view_ getHeight]];
      [gpc lineToWithDouble:0 withDouble:0];
      if (!forConic) invert = !invert;
    }
  }
  else if (x1_ > 0 && x2_ > [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth]) {
    [gpc lineToWithDouble:[view_ getWidth] withDouble:y1_];
    invert ^= forConic ? YES : y1_ > 0;
  }
  else if (x1_ <= 0 && x2_ <= [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth]) {
    [gpc lineToWithDouble:0 withDouble:y2_];
    invert ^= (y2_ > 0);
  }
  else {
    [gpc lineToWithDouble:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth] withDouble:0];
    [gpc lineToWithDouble:0 withDouble:0];
  }
  [gpc closePath];
  id<GeogebraCommonAwtGArea> gpcArea = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithGeogebraCommonAwtGShape:gpc];
  if (!invert) return gpcArea;
  id<GeogebraCommonAwtGArea> complement = [GeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithGeogebraCommonAwtGShape:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBoundingPath]];
  [((id<GeogebraCommonAwtGArea>) nil_chk(complement)) subtractWithGeogebraCommonAwtGArea:gpcArea];
  return complement;
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(line_);
  RELEASE_(points_);
  RELEASE_(lines_);
  RELEASE_(startPoint_);
  RELEASE_(previewPoint2_);
  RELEASE_(attr1_);
  RELEASE_(attr2_);
  RELEASE_(previewMode_);
  RELEASE_(endPoint_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelKernelNDGeoLineND:", "DrawLine", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianView:withJavaUtilArrayList:withGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum:", "DrawLine", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianView:withJavaUtilArrayList:withJavaUtilArrayList:withBoolean:", "DrawLine", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "updateWithGeogebraCommonKernelMatrixCoordMatrix:", "update", "V", 0x1, NULL, NULL },
    { "setClippedLine", NULL, "V", 0x12, NULL, NULL },
    { "clipTopBottom", NULL, "V", 0x12, NULL, NULL },
    { "clipLeftRight", NULL, "V", 0x12, NULL, NULL },
    { "setLabelPosition", NULL, "V", 0x12, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x1, NULL, NULL },
    { "drawTraceWithGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x11, NULL, NULL },
    { "updatePreview", NULL, "V", 0x11, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x1, NULL, NULL },
    { "drawPreviewWithGeogebraCommonAwtGGraphics2D:", "drawPreview", "V", 0x11, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x11, NULL, NULL },
    { "getShape", NULL, "Lgeogebra.common.awt.GArea;", 0x1, NULL, NULL },
    { "getShapeWithBoolean:", "getShape", "Lgeogebra.common.awt.GArea;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LEFT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianDrawDrawLine_LEFT },
    { "RIGHT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianDrawDrawLine_RIGHT },
    { "TOP_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianDrawDrawLine_TOP },
    { "BOTTOM_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianDrawDrawLine_BOTTOM },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lgeogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "y1_", NULL, 0x1, "D", NULL, NULL,  },
    { "y2_", NULL, 0x1, "D", NULL, NULL,  },
    { "x1_", NULL, 0x1, "D", NULL, NULL,  },
    { "x2_", NULL, 0x1, "D", NULL, NULL,  },
    { "k_", NULL, 0x2, "D", NULL, NULL,  },
    { "d_", NULL, 0x2, "D", NULL, NULL,  },
    { "gx_", NULL, 0x2, "D", NULL, NULL,  },
    { "gy_", NULL, 0x2, "D", NULL, NULL,  },
    { "gz_", NULL, 0x2, "D", NULL, NULL,  },
    { "labelPos_", NULL, 0x2, "I", NULL, NULL,  },
    { "p1Pos_", NULL, 0x2, "I", NULL, NULL,  },
    { "p2Pos_", NULL, 0x2, "I", NULL, NULL,  },
    { "x_", NULL, 0x2, "I", NULL, NULL,  },
    { "y_", NULL, 0x2, "I", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "points_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "lines_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoLineND;>;",  },
    { "startPoint_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "previewPoint2_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "attr1_", NULL, 0x2, "[Z", NULL, NULL,  },
    { "attr2_", NULL, 0x2, "[Z", NULL, NULL,  },
    { "previewMode_", NULL, 0x2, "Lgeogebra.common.euclidian.draw.DrawLine$PreviewType;", NULL, NULL,  },
    { "endPoint_", NULL, 0x2, "Lgeogebra.common.awt.GPoint2D;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.euclidian.draw.DrawLine$PreviewType;"};
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawLine = { 2, "DrawLine", "geogebra.common.euclidian.draw", NULL, 0x1, 22, methods, 30, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawLine;
}

@end

void GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonEuclidianDrawDrawLine *self, GeogebraCommonEuclidianEuclidianView *view, id<GeogebraCommonKernelKernelNDGeoLineND> g) {
  GeogebraCommonEuclidianDrawable_init(self);
  self->labelPos_ = GeogebraCommonEuclidianDrawDrawLine_LEFT;
  GeogebraCommonEuclidianDrawDrawLine_setAndConsume_attr1_(self, [IOSBooleanArray newArrayWithLength:4]);
  GeogebraCommonEuclidianDrawDrawLine_setAndConsume_attr2_(self, [IOSBooleanArray newArrayWithLength:4]);
  GeogebraCommonEuclidianDrawDrawLine_set_previewMode_(self, GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_NONE());
  GeogebraCommonEuclidianDrawDrawLine_set_endPoint_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawLine_set_g_(self, g);
  GeogebraCommonEuclidianDrawable_set_geo_(self, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(g, [GeogebraCommonKernelGeosGeoElement class]));
  [self update];
}

GeogebraCommonEuclidianDrawDrawLine *new_GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonEuclidianEuclidianView *view, id<GeogebraCommonKernelKernelNDGeoLineND> g) {
  GeogebraCommonEuclidianDrawDrawLine *self = [GeogebraCommonEuclidianDrawDrawLine alloc];
  GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(self, view, g);
  return self;
}

void GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_(GeogebraCommonEuclidianDrawDrawLine *self, GeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points, GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *previewMode) {
  GeogebraCommonEuclidianDrawable_init(self);
  self->labelPos_ = GeogebraCommonEuclidianDrawDrawLine_LEFT;
  GeogebraCommonEuclidianDrawDrawLine_setAndConsume_attr1_(self, [IOSBooleanArray newArrayWithLength:4]);
  GeogebraCommonEuclidianDrawDrawLine_setAndConsume_attr2_(self, [IOSBooleanArray newArrayWithLength:4]);
  GeogebraCommonEuclidianDrawDrawLine_set_previewMode_(self, GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_NONE());
  GeogebraCommonEuclidianDrawDrawLine_set_endPoint_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  GeogebraCommonEuclidianDrawDrawLine_set_previewMode_(self, previewMode);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawLine_set_points_(self, points);
  if ([((JavaUtilArrayList *) nil_chk(points)) size] == 2) {
    GeogebraCommonKernelGeosGeoPoint *p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([points getWithInt:1], [GeogebraCommonKernelGeosGeoPoint class]);
    [p setCoordsWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_ withDouble:JavaLangMath_roundWithDouble_(p->inhomY_) withDouble:1];
  }
  GeogebraCommonEuclidianDrawDrawLine_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction]));
  GeogebraCommonEuclidianDrawable_set_geo_(self, [((GeogebraCommonKernelConstructionDefaults *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([view getKernel])) getConstruction])) getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_LINE]);
  GeogebraCommonEuclidianDrawDrawLine_updatePreview(self);
}

GeogebraCommonEuclidianDrawDrawLine *new_GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_(GeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points, GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *previewMode) {
  GeogebraCommonEuclidianDrawDrawLine *self = [GeogebraCommonEuclidianDrawDrawLine alloc];
  GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_(self, view, points, previewMode);
  return self;
}

void GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_withBoolean_(GeogebraCommonEuclidianDrawDrawLine *self, GeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points, JavaUtilArrayList *lines, jboolean parallel) {
  GeogebraCommonEuclidianDrawable_init(self);
  self->labelPos_ = GeogebraCommonEuclidianDrawDrawLine_LEFT;
  GeogebraCommonEuclidianDrawDrawLine_setAndConsume_attr1_(self, [IOSBooleanArray newArrayWithLength:4]);
  GeogebraCommonEuclidianDrawDrawLine_setAndConsume_attr2_(self, [IOSBooleanArray newArrayWithLength:4]);
  GeogebraCommonEuclidianDrawDrawLine_set_previewMode_(self, GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_NONE());
  GeogebraCommonEuclidianDrawDrawLine_set_endPoint_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  if (parallel) GeogebraCommonEuclidianDrawDrawLine_set_previewMode_(self, GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_PARALLEL());
  else GeogebraCommonEuclidianDrawDrawLine_set_previewMode_(self, GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_PERPENDICULAR());
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawLine_set_points_(self, points);
  GeogebraCommonEuclidianDrawDrawLine_set_lines_(self, lines);
  GeogebraCommonEuclidianDrawDrawLine_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction]));
  GeogebraCommonEuclidianDrawable_set_geo_(self, [((GeogebraCommonKernelConstructionDefaults *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([view getKernel])) getConstruction])) getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_LINE]);
  GeogebraCommonEuclidianDrawDrawLine_updatePreview(self);
}

GeogebraCommonEuclidianDrawDrawLine *new_GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_withBoolean_(GeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points, JavaUtilArrayList *lines, jboolean parallel) {
  GeogebraCommonEuclidianDrawDrawLine *self = [GeogebraCommonEuclidianDrawDrawLine alloc];
  GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_withBoolean_(self, view, points, lines, parallel);
  return self;
}

void GeogebraCommonEuclidianDrawDrawLine_setClippedLine(GeogebraCommonEuclidianDrawDrawLine *self) {
  if (JavaLangMath_absWithDouble_(self->gx_) * [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getScaleRatio] < JavaLangMath_absWithDouble_(self->gy_)) {
    self->k_ = self->gx_ / self->gy_ * [self->view_ getScaleRatio];
    self->d_ = [self->view_ getyZero] + self->gz_ / self->gy_ * [self->view_ getYscale] - self->k_ * [self->view_ getxZero];
    self->x1_ = -GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->y1_ = self->k_ * self->x1_ + self->d_;
    self->x2_ = [self->view_ getWidth] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->y2_ = self->k_ * self->x2_ + self->d_;
    self->p1Pos_ = GeogebraCommonEuclidianDrawDrawLine_LEFT;
    self->p2Pos_ = GeogebraCommonEuclidianDrawDrawLine_RIGHT;
    GeogebraCommonEuclidianDrawDrawLine_clipTopBottom(self);
  }
  else {
    self->k_ = self->gy_ / (self->gx_ * [self->view_ getScaleRatio]);
    self->d_ = [self->view_ getxZero] - self->gz_ / self->gx_ * [self->view_ getXscale] - self->k_ * [self->view_ getyZero];
    self->y1_ = [self->view_ getHeight] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->x1_ = self->k_ * self->y1_ + self->d_;
    self->y2_ = -GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->x2_ = self->k_ * self->y2_ + self->d_;
    self->p1Pos_ = GeogebraCommonEuclidianDrawDrawLine_BOTTOM;
    self->p2Pos_ = GeogebraCommonEuclidianDrawDrawLine_TOP;
    GeogebraCommonEuclidianDrawDrawLine_clipLeftRight(self);
  }
  if (self->line_ == nil) GeogebraCommonEuclidianDrawDrawLine_set_line_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
  [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->line_)) setLineWithDouble:self->x1_ withDouble:self->y1_ withDouble:self->x2_ withDouble:self->y2_];
}

void GeogebraCommonEuclidianDrawDrawLine_clipTopBottom(GeogebraCommonEuclidianDrawDrawLine *self) {
  *IOSBooleanArray_GetRef(nil_chk(self->attr1_), GeogebraCommonEuclidianDrawDrawLine_TOP) = (self->y1_ < -GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  *IOSBooleanArray_GetRef(self->attr1_, GeogebraCommonEuclidianDrawDrawLine_BOTTOM) = (self->y1_ > [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHeight] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  *IOSBooleanArray_GetRef(nil_chk(self->attr2_), GeogebraCommonEuclidianDrawDrawLine_TOP) = (self->y2_ < -GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  *IOSBooleanArray_GetRef(self->attr2_, GeogebraCommonEuclidianDrawDrawLine_BOTTOM) = (self->y2_ > [self->view_ getHeight] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  if ((IOSBooleanArray_Get(self->attr1_, GeogebraCommonEuclidianDrawDrawLine_TOP) && IOSBooleanArray_Get(self->attr2_, GeogebraCommonEuclidianDrawDrawLine_TOP)) || (IOSBooleanArray_Get(self->attr1_, GeogebraCommonEuclidianDrawDrawLine_BOTTOM) && IOSBooleanArray_Get(self->attr2_, GeogebraCommonEuclidianDrawDrawLine_BOTTOM))) return;
  if (IOSBooleanArray_Get(self->attr1_, GeogebraCommonEuclidianDrawDrawLine_TOP)) {
    self->y1_ = -GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->x1_ = (self->y1_ - self->d_) / self->k_;
    self->p1Pos_ = GeogebraCommonEuclidianDrawDrawLine_TOP;
  }
  else if (IOSBooleanArray_Get(self->attr1_, GeogebraCommonEuclidianDrawDrawLine_BOTTOM)) {
    self->y1_ = [self->view_ getHeight] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->x1_ = (self->y1_ - self->d_) / self->k_;
    self->p1Pos_ = GeogebraCommonEuclidianDrawDrawLine_BOTTOM;
  }
  if (IOSBooleanArray_Get(self->attr2_, GeogebraCommonEuclidianDrawDrawLine_TOP)) {
    self->y2_ = -GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->x2_ = (self->y2_ - self->d_) / self->k_;
    self->p2Pos_ = GeogebraCommonEuclidianDrawDrawLine_TOP;
  }
  else if (IOSBooleanArray_Get(self->attr2_, GeogebraCommonEuclidianDrawDrawLine_BOTTOM)) {
    self->y2_ = [self->view_ getHeight] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->x2_ = (self->y2_ - self->d_) / self->k_;
    self->p2Pos_ = GeogebraCommonEuclidianDrawDrawLine_BOTTOM;
  }
}

void GeogebraCommonEuclidianDrawDrawLine_clipLeftRight(GeogebraCommonEuclidianDrawDrawLine *self) {
  *IOSBooleanArray_GetRef(nil_chk(self->attr1_), GeogebraCommonEuclidianDrawDrawLine_LEFT) = (self->x1_ < -GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  *IOSBooleanArray_GetRef(self->attr1_, GeogebraCommonEuclidianDrawDrawLine_RIGHT) = (self->x1_ > [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  *IOSBooleanArray_GetRef(nil_chk(self->attr2_), GeogebraCommonEuclidianDrawDrawLine_LEFT) = (self->x2_ < -GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  *IOSBooleanArray_GetRef(self->attr2_, GeogebraCommonEuclidianDrawDrawLine_RIGHT) = (self->x2_ > [self->view_ getWidth] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  if ((IOSBooleanArray_Get(self->attr1_, GeogebraCommonEuclidianDrawDrawLine_LEFT) && IOSBooleanArray_Get(self->attr2_, GeogebraCommonEuclidianDrawDrawLine_LEFT)) || (IOSBooleanArray_Get(self->attr1_, GeogebraCommonEuclidianDrawDrawLine_RIGHT) && IOSBooleanArray_Get(self->attr2_, GeogebraCommonEuclidianDrawDrawLine_RIGHT))) return;
  if (IOSBooleanArray_Get(self->attr1_, GeogebraCommonEuclidianDrawDrawLine_LEFT)) {
    self->x1_ = -GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->y1_ = (self->x1_ - self->d_) / self->k_;
    self->p1Pos_ = GeogebraCommonEuclidianDrawDrawLine_LEFT;
  }
  else if (IOSBooleanArray_Get(self->attr1_, GeogebraCommonEuclidianDrawDrawLine_RIGHT)) {
    self->x1_ = [self->view_ getWidth] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->y1_ = (self->x1_ - self->d_) / self->k_;
    self->p1Pos_ = GeogebraCommonEuclidianDrawDrawLine_RIGHT;
  }
  if (IOSBooleanArray_Get(self->attr2_, GeogebraCommonEuclidianDrawDrawLine_LEFT)) {
    self->x2_ = -GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->y2_ = (self->x2_ - self->d_) / self->k_;
    self->p2Pos_ = GeogebraCommonEuclidianDrawDrawLine_LEFT;
  }
  else if (IOSBooleanArray_Get(self->attr2_, GeogebraCommonEuclidianDrawDrawLine_RIGHT)) {
    self->x2_ = [self->view_ getWidth] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE;
    self->y2_ = (self->x2_ - self->d_) / self->k_;
    self->p2Pos_ = GeogebraCommonEuclidianDrawDrawLine_RIGHT;
  }
}

void GeogebraCommonEuclidianDrawDrawLine_setLabelPosition(GeogebraCommonEuclidianDrawDrawLine *self) {
  if (JavaLangMath_absWithDouble_(self->xLabel_ - self->x1_) + JavaLangMath_absWithDouble_(self->yLabel_ - self->y1_) > JavaLangMath_absWithDouble_(self->xLabel_ - self->x2_) + JavaLangMath_absWithDouble_(self->yLabel_ - self->y2_)) {
    self->x_ = J2ObjCFpToInt(self->x2_);
    self->y_ = J2ObjCFpToInt(self->y2_);
    self->labelPos_ = self->p2Pos_;
  }
  else {
    self->x_ = J2ObjCFpToInt(self->x1_);
    self->y_ = J2ObjCFpToInt(self->y1_);
    self->labelPos_ = self->p1Pos_;
  }
  switch (self->labelPos_) {
    case GeogebraCommonEuclidianDrawDrawLine_LEFT:
    self->xLabel_ = 5;
    if (2 * self->y_ < [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHeight]) {
      self->yLabel_ = self->y_ + 16 + J2ObjCFpToInt((16 * (self->gx_ / self->gy_)));
    }
    else {
      self->yLabel_ = self->y_ - 8 + J2ObjCFpToInt((16 * (self->gx_ / self->gy_)));
    }
    break;
    case GeogebraCommonEuclidianDrawDrawLine_RIGHT:
    self->xLabel_ = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth] - 15;
    if (2 * self->y_ < [self->view_ getHeight]) {
      self->yLabel_ = self->y_ + 16 - J2ObjCFpToInt((16 * (self->gx_ / self->gy_)));
    }
    else {
      self->yLabel_ = self->y_ - 8 - J2ObjCFpToInt((16 * (self->gx_ / self->gy_)));
    }
    break;
    case GeogebraCommonEuclidianDrawDrawLine_TOP:
    self->yLabel_ = 15;
    if (2 * self->x_ < [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth]) {
      self->xLabel_ = self->x_ + 8 + J2ObjCFpToInt((16 * (self->gy_ / self->gx_)));
    }
    else {
      self->xLabel_ = self->x_ - 16 + J2ObjCFpToInt((16 * (self->gy_ / self->gx_)));
    }
    break;
    case GeogebraCommonEuclidianDrawDrawLine_BOTTOM:
    self->yLabel_ = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getHeight] - 5;
    if (2 * self->x_ < [self->view_ getWidth]) {
      self->xLabel_ = self->x_ + 8 - J2ObjCFpToInt((16 * (self->gy_ / self->gx_)));
    }
    else {
      self->xLabel_ = self->x_ - 16 - J2ObjCFpToInt((16 * (self->gy_ / self->gx_)));
    }
    break;
  }
}

void GeogebraCommonEuclidianDrawDrawLine_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawLine *self, id<GeogebraCommonAwtGGraphics2D> g2) {
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[self getObjectColor]];
  [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:self->objStroke_];
  [g2 drawWithGeogebraCommonAwtGShape:self->line_];
}

void GeogebraCommonEuclidianDrawDrawLine_updatePreview(GeogebraCommonEuclidianDrawDrawLine *self) {
  switch ([self->previewMode_ ordinal]) {
    case GeogebraCommonEuclidianDrawDrawLine_PreviewType_LINE:
    case GeogebraCommonEuclidianDrawDrawLine_PreviewType_PERPENDICULAR_BISECTOR:
    self->isVisible_ = ([((JavaUtilArrayList *) nil_chk(self->points_)) size] == 1);
    if (self->isVisible_) {
      GeogebraCommonEuclidianDrawDrawLine_set_startPoint_(self, [self->points_ getWithInt:0]);
    }
    break;
    case GeogebraCommonEuclidianDrawDrawLine_PreviewType_PARALLEL:
    case GeogebraCommonEuclidianDrawDrawLine_PreviewType_PERPENDICULAR:
    self->isVisible_ = ([((JavaUtilArrayList *) nil_chk(self->lines_)) size] == 1);
    break;
    case GeogebraCommonEuclidianDrawDrawLine_PreviewType_ANGLE_BISECTOR:
    self->isVisible_ = ([((JavaUtilArrayList *) nil_chk(self->points_)) size] == 2);
    if (self->isVisible_) {
      GeogebraCommonEuclidianDrawDrawLine_set_startPoint_(self, [self->points_ getWithInt:0]);
      GeogebraCommonEuclidianDrawDrawLine_set_previewPoint2_(self, [self->points_ getWithInt:1]);
    }
    break;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawLine)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum)

GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_values_[6];

@implementation GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_values() {
  GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_values_ count:6 type:GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_values();
}

+ (GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_valueOfWithNSString_(name);
}

GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initialize();
  for (int i = 0; i < 6; i++) {
    GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *e = GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum class]) {
    GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_NONE = new_GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(@"NONE", 0);
    GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_LINE = new_GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(@"LINE", 1);
    GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_PARALLEL = new_GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(@"PARALLEL", 2);
    GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_PERPENDICULAR = new_GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(@"PERPENDICULAR", 3);
    GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_PERPENDICULAR_BISECTOR = new_GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(@"PERPENDICULAR_BISECTOR", 4);
    GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_ANGLE_BISECTOR = new_GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(@"ANGLE_BISECTOR", 5);
    J2OBJC_SET_INITIALIZED(GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "NONE", 0x4019, "Lgeogebra.common.euclidian.draw.DrawLine$PreviewType;", &GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_NONE, NULL,  },
    { "LINE", "LINE", 0x4019, "Lgeogebra.common.euclidian.draw.DrawLine$PreviewType;", &GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_LINE, NULL,  },
    { "PARALLEL", "PARALLEL", 0x4019, "Lgeogebra.common.euclidian.draw.DrawLine$PreviewType;", &GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_PARALLEL, NULL,  },
    { "PERPENDICULAR", "PERPENDICULAR", 0x4019, "Lgeogebra.common.euclidian.draw.DrawLine$PreviewType;", &GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_PERPENDICULAR, NULL,  },
    { "PERPENDICULAR_BISECTOR", "PERPENDICULAR_BISECTOR", 0x4019, "Lgeogebra.common.euclidian.draw.DrawLine$PreviewType;", &GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_PERPENDICULAR_BISECTOR, NULL,  },
    { "ANGLE_BISECTOR", "ANGLE_BISECTOR", 0x4019, "Lgeogebra.common.euclidian.draw.DrawLine$PreviewType;", &GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_ANGLE_BISECTOR, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.euclidian.draw.DrawLine$PreviewType;"};
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum = { 2, "PreviewType", "geogebra.common.euclidian.draw", "DrawLine", 0x4019, 0, NULL, 6, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/euclidian/draw/DrawLine$PreviewType;>;" };
  return &_GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum;
}

@end

void GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *new_GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum *self = [GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum alloc];
  GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum)
