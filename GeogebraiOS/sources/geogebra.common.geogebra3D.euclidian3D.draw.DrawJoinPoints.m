//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawJoinPoints.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawJoinPoints.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DCurves.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/PlotterBrush.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints () {
 @public
  IOSDoubleArray *drawMinMax_;
  GeogebraCommonKernelMatrixCoords *startPoint_, *endPoint_;
  JavaUtilArrayList *selectedPoints_;
  GeogebraCommonKernelMatrixCoords *project1_, *project2_;
  IOSDoubleArray *lineCoords_, *tmp_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints, drawMinMax_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints, startPoint_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints, endPoint_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints, selectedPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints, project1_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints, project2_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints, lineCoords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints, tmp_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_updateForItSelfWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints *self, GeogebraCommonKernelMatrixCoords *p1, GeogebraCommonKernelMatrixCoords *p2);

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                    withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, a_view3D, geo);
  return self;
}

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3d {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, a_view3d);
  return self;
}

- (void)setDrawMinMaxWithDouble:(jdouble)drawMin
                     withDouble:(jdouble)drawMax {
  *IOSDoubleArray_GetRef(nil_chk(self->drawMinMax_), 0) = drawMin;
  *IOSDoubleArray_GetRef(self->drawMinMax_, 1) = drawMax;
}

- (IOSDoubleArray *)getDrawMinMax {
  return drawMinMax_;
}

- (void)drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawWithInt:[self getGeometryIndex]];
}

- (void)drawInObjFormatWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if ([self isVisible]) {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawInObjFormatWithGeogebraCommonKernelGeosGeoElement:[self getGeoElement] withInt:[self getGeometryIndex]];
  }
}

- (IOSObjectArray *)calcPoints {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)updateForItSelf {
  IOSObjectArray *points = [self calcPoints];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_updateForItSelfWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, IOSObjectArray_Get(nil_chk(points), 0), IOSObjectArray_Get(points, 1));
  return YES;
}

- (void)setStartEndPointsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p1
                         withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p2 {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_set_startPoint_(self, p1);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_set_endPoint_(self, p2);
}

- (void)updateForItSelfWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p1
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p2 {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_updateForItSelfWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, p1, p2);
}

- (void)setArrowTypeBeforeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush {
}

- (void)setArrowTypeAfterWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush {
}

- (jint)getLineThickness {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineThickness];
}

- (jint)getPickOrder {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_PATH;
}

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                                     withJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints
                                    withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoElement_(self, a_view3D, selectedPoints, geo);
  return self;
}

- (void)updateMousePosWithDouble:(jdouble)xRW
                      withDouble:(jdouble)yRW {
}

- (void)updatePreview {
  if (selectedPoints_ == nil) {
    [self setWaitForUpdate];
    return;
  }
  if ([((JavaUtilArrayList *) nil_chk(selectedPoints_)) size] == 2) {
    id<GeogebraCommonKernelKernelNDGeoPointND> firstPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([selectedPoints_ getWithInt:0], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    id<GeogebraCommonKernelKernelNDGeoPointND> secondPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([selectedPoints_ getWithInt:1], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    [self setPreviewableCoordsWithGeogebraCommonKernelKernelNDGeoPointND:firstPoint withGeogebraCommonKernelKernelNDGeoPointND:secondPoint];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) setEuclidianVisibleWithBoolean:YES];
  }
  else if ([selectedPoints_ size] == 1) {
    id<GeogebraCommonKernelKernelNDGeoPointND> firstPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([selectedPoints_ getWithInt:0], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    id<GeogebraCommonKernelKernelNDGeoPointND> secondPoint = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getCursor3D];
    [self setPreviewableCoordsWithGeogebraCommonKernelKernelNDGeoPointND:firstPoint withGeogebraCommonKernelKernelNDGeoPointND:secondPoint];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) setEuclidianVisibleWithBoolean:YES];
  }
  else {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) setEuclidianVisibleWithBoolean:NO];
  }
  [self setWaitForUpdate];
}

- (void)setPreviewableCoordsWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)firstPoint
                            withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)secondPoint {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting {
  if (waitForReset_) {
    return NO;
  }
  if ([((GeogebraCommonGeogebra3DEuclidian3DHitting *) nil_chk(hitting)) isSphere]) {
    if (project1_ == nil) {
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_setAndConsume_project1_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_setAndConsume_lineCoords_(self, [IOSDoubleArray newArrayWithLength:2]);
    }
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(hitting->origin_)) projectLineWithGeogebraCommonKernelMatrixCoords:startPoint_ withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(endPoint_)) subWithGeogebraCommonKernelMatrixCoords:startPoint_] withGeogebraCommonKernelMatrixCoords:project1_ withDoubleArray:lineCoords_];
    jdouble parameterOnCS = IOSDoubleArray_Get(nil_chk(lineCoords_), 0);
    if (parameterOnCS < 0 || parameterOnCS > 1) {
      jdouble d = [((GeogebraCommonKernelMatrixCoords *) nil_chk(startPoint_)) distanceWithGeogebraCommonKernelMatrixCoords:hitting->origin_];
      if (d * [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale] <= [hitting getThreshold]) {
        [self setZPickWithDouble:-d withDouble:-d];
        return YES;
      }
      d = [endPoint_ distanceWithGeogebraCommonKernelMatrixCoords:hitting->origin_];
      if (d * [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale] <= [hitting getThreshold]) {
        [self setZPickWithDouble:-d withDouble:-d];
        return YES;
      }
      return NO;
    }
    jdouble d = [((GeogebraCommonKernelMatrixCoords *) nil_chk(project1_)) distanceWithGeogebraCommonKernelMatrixCoords:hitting->origin_];
    if (d * [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale] <= [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineThickness] + [hitting getThreshold]) {
      [self setZPickWithDouble:d withDouble:d];
      return YES;
    }
  }
  else {
    if (project1_ == nil) {
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_setAndConsume_project1_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_setAndConsume_project2_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_setAndConsume_lineCoords_(self, [IOSDoubleArray newArrayWithLength:2]);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_setAndConsume_tmp_(self, [IOSDoubleArray newArrayWithLength:4]);
    }
    GeogebraCommonKernelMatrixCoordMatrixUtil_nearestPointsFromTwoLinesWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_(hitting->origin_, hitting->direction_, startPoint_, [((GeogebraCommonKernelMatrixCoords *) nil_chk(endPoint_)) subWithGeogebraCommonKernelMatrixCoords:startPoint_], ((GeogebraCommonKernelMatrixCoords *) nil_chk(project1_))->val_, ((GeogebraCommonKernelMatrixCoords *) nil_chk(project2_))->val_, lineCoords_, tmp_);
    jdouble parameterOnHitting = IOSDoubleArray_Get(nil_chk(lineCoords_), 0);
    if (JavaLangDouble_isNaNWithDouble_(parameterOnHitting)) {
      return NO;
    }
    jdouble parameterOnCS = IOSDoubleArray_Get(lineCoords_, 1);
    if (parameterOnCS < 0 || parameterOnCS > 1) {
      return NO;
    }
    if (![hitting isInsideClippingWithGeogebraCommonKernelMatrixCoords:project2_]) {
      return NO;
    }
    jdouble d = [project1_ distanceWithGeogebraCommonKernelMatrixCoords:project2_];
    if (d * [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale] <= [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineThickness] + 2) {
      jdouble z = -parameterOnHitting;
      jdouble dz = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineThickness] / [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale];
      [self setZPickWithDouble:z + dz withDouble:z - dz];
      return YES;
    }
  }
  return NO;
}

- (void)dealloc {
  RELEASE_(drawMinMax_);
  RELEASE_(startPoint_);
  RELEASE_(endPoint_);
  RELEASE_(selectedPoints_);
  RELEASE_(project1_);
  RELEASE_(project2_);
  RELEASE_(lineCoords_);
  RELEASE_(tmp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonKernelGeosGeoElement:", "DrawJoinPoints", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "DrawJoinPoints", NULL, 0x1, NULL, NULL },
    { "setDrawMinMaxWithDouble:withDouble:", "setDrawMinMax", "V", 0x1, NULL, NULL },
    { "getDrawMinMax", NULL, "[D", 0x1, NULL, NULL },
    { "drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometry", "V", 0x1, NULL, NULL },
    { "drawInObjFormatWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawInObjFormat", "V", 0x1, NULL, NULL },
    { "calcPoints", NULL, "[Lgeogebra.common.kernel.Matrix.Coords;", 0x404, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "setStartEndPointsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "setStartEndPoints", "V", 0x4, NULL, NULL },
    { "updateForItSelfWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "updateForItSelf", "V", 0x14, NULL, NULL },
    { "setArrowTypeBeforeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:", "setArrowTypeBefore", "V", 0x4, NULL, NULL },
    { "setArrowTypeAfterWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:", "setArrowTypeAfter", "V", 0x4, NULL, NULL },
    { "getLineThickness", NULL, "I", 0x4, NULL, NULL },
    { "getPickOrder", NULL, "I", 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withJavaUtilArrayList:withGeogebraCommonKernelGeosGeoElement:", "DrawJoinPoints", NULL, 0x1, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x1, NULL, NULL },
    { "updatePreview", NULL, "V", 0x1, NULL, NULL },
    { "setPreviewableCoordsWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "setPreviewableCoords", "V", 0x404, NULL, NULL },
    { "hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:", "hit", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "drawMinMax_", NULL, 0x2, "[D", NULL, NULL,  },
    { "startPoint_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "endPoint_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "selectedPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, NULL,  },
    { "project1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "project2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "lineCoords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "tmp_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints = { 2, "DrawJoinPoints", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x401, 19, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DCurves_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, a_view3D, geo);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_setAndConsume_drawMinMax_(self, [IOSDoubleArray newArrayWithLength:2]);
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3d) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DCurves_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, a_view3d);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_setAndConsume_drawMinMax_(self, [IOSDoubleArray newArrayWithLength:2]);
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_updateForItSelfWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints *self, GeogebraCommonKernelMatrixCoords *p1, GeogebraCommonKernelMatrixCoords *p2) {
  [self setStartEndPointsWithGeogebraCommonKernelMatrixCoords:p1 withGeogebraCommonKernelMatrixCoords:p2];
  IOSDoubleArray *minmax = [self getDrawMinMax];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *brush = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getBrush];
  if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(minmax), 0)) > 1E10 || JavaLangMath_absWithDouble_(IOSDoubleArray_Get(minmax, 1)) > 1E10 || IOSDoubleArray_Get(minmax, 0) > IOSDoubleArray_Get(minmax, 1)) {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) startWithInt:[self getReusableGeometryIndex]];
    [self setGeometryIndexWithInt:[brush end]];
    return;
  }
  [self setArrowTypeBeforeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:brush];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) startWithInt:[self getReusableGeometryIndex]];
  [brush setThicknessWithInt:[self getLineThickness] withFloat:(jfloat) [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale]];
  [brush setAffineTextureWithFloat:(jfloat) ((0.5 - IOSDoubleArray_Get(minmax, 0)) / (IOSDoubleArray_Get(minmax, 1) - IOSDoubleArray_Get(minmax, 0))) withFloat:0.25f];
  [brush segmentWithGeogebraCommonKernelMatrixCoords:p1 withGeogebraCommonKernelMatrixCoords:p2];
  [self setArrowTypeAfterWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:brush];
  [self setGeometryIndexWithInt:[brush end]];
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPoints, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DCurves_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, a_view3D);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_setAndConsume_drawMinMax_(self, [IOSDoubleArray newArrayWithLength:2]);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setIsPickableWithBoolean:NO];
  [self setGeoElementWithGeogebraCommonKernelGeosGeoElement:geo];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_set_selectedPoints_(self, selectedPoints);
  [self updatePreview];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints)
