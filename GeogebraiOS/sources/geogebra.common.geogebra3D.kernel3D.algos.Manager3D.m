//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/Manager3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/Construction3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleLinePlane.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleLines3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleLines3DOrientation.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePlanes.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePoints3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePoints3DOrientation.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePolygon3DOrientation.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleVectors3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleVectors3DOrientation.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngularBisectorLines3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngularBisectorPoints3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngularBisectorPoints3DOrientation.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoArchimedeanSolid.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoArchimedeanSolidThreePoints.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCenterConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCenterQuadric.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DAxisPoint.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointDirection.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointPointDirection.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointRadiusDirection.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DThreePoints.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoClosestPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoClosestPointLines3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoClosestPointToRegion3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCommonTangents3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoConeInfinitePointPointNumber.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoConeInfinitePointVectorNumber.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoConePointLineAngle.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoConicFivePoints3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoConicPartCircle3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoConicPartCircle3DOrientation.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoConicPartCircumcircle3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCornerConicSection.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCurveCartesian3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCylinderAxisRadius.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCylinderInfinitePointPointNumber.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCylinderInfinitePointVectorNumber.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoDependentPlane3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoDependentPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoDependentQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoDependentVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoDiameterLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoDiameterVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoDistanceLines3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoDistancePointPlane3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoEllipseHyperbolaFociPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoEllipseHyperbolaFociPoint3DOriented.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoFunctionNVarND.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCS1D1D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCS1D2D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectConics3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCoordSys.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLineConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLinePolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLineQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPathLinePolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPathPlanePolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneConic.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanePolygon.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanePolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneQuadric.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneQuadricLimited.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneQuadricPart.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanes.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectQuadricsAsCircle.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectSingle3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoJoinPoints3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoLengthVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoLineBisectorSegmentDirection3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoLineBisectorTwoPointsDirection3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoLinePointLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoLinePointVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoLocus3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoMidpoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoMidpointSegment3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrientedHeight.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLineLineLine.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLinePointDirectionDirection.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLinePointLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLinePointPlane.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlaneBisectorPointPoint.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlaneBisectorSegment.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlanePointLine.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlanePointVector.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoVectorLineDirection.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoVectorPlane.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoParabolaPointLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneCS2D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThreePoints.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPointAndLine.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPointAndPlane.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneTwoLines.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPoint3DInRegion.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPoint3DOnPath.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolygon3DDirection.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolygonRegular3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronConvex.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronNetConvex.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronNetPrism.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronNetPyramid.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPointsPrism.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPointsPyramid.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadric.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricEnd.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricEndBottom.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricEndTop.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedConicHeightCone.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedConicHeightCylinder.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedPointPointRadius.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedPointPointRadiusCone.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedPointPointRadiusCylinder.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricSide.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoSemicircle3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoSpherePointRadius.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoSphereTwoPoints.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoSurfaceCartesian3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoTangentCurve3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoTangentLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoTangentPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoUnitOrthoVectorPlane.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoVolume.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/Manager3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/Geo3DVec.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConicPart3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConicSection.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCoordSys1D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3DConstant.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoRay3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSpace.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/transform/Transform3D.h"
#include "geogebra/common/geogebra3D/kernel3D/transform/TransformDilate3D.h"
#include "geogebra/common/geogebra3D/kernel3D/transform/TransformMirror3D.h"
#include "geogebra/common/geogebra3D/kernel3D/transform/TransformRotate3D.h"
#include "geogebra/common/geogebra3D/kernel3D/transform/TransformTranslate3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/Region.h"
#include "geogebra/common/kernel/Transform.h"
#include "geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "geogebra/common/kernel/algos/AlgoDependentNumber.h"
#include "geogebra/common/kernel/algos/AlgoDependentPoint.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoDistancePoints.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "geogebra/common/kernel/algos/AlgoMidpoint.h"
#include "geogebra/common/kernel/algos/AlgoOrthoLinePointLine.h"
#include "geogebra/common/kernel/algos/AlgoPolygon.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic3D/MyVec3DNode.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoLocusND.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/geos/GeoSurfaceFinite.h"
#include "geogebra/common/kernel/kernelND/Geo3DVec.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoCurveCartesianND.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/kernel/kernelND/GeoSurfaceCartesianND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/kernel/kernelND/HasHeight.h"
#include "geogebra/common/kernel/kernelND/HasVolume.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Math.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosManager3D () {
 @public
  GeogebraCommonKernelKernel *kernel_;
  GeogebraCommonKernelConstruction *cons_;
}

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *)getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                                                                                          withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c;

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *)getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)A
                                                                                          withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)B;

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *)getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)A
                                                                                             withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)B;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosManager3D, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosManager3D, cons_, GeogebraCommonKernelConstruction *)

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DInWithNSString_withGeogebraCommonKernelRegion_withGeogebraCommonKernelMatrixCoords_withBoolean_withBoolean_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelRegion> region, GeogebraCommonKernelMatrixCoords *coords, jboolean addToConstruction, jboolean coords2D);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DWithNSString_withGeogebraCommonKernelPath_withDouble_withDouble_withDouble_withBoolean_withBoolean_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelPath> path, jdouble x, jdouble y, jdouble z, jboolean addToConstruction, jboolean coords2D);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoConicND *c);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineConicSingleWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoConicND *c, jint index);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectConicsSingleWithNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, GeogebraCommonKernelKernelNDGeoConicND *A, GeogebraCommonKernelKernelNDGeoConicND *B, jint index);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, id<GeogebraCommonKernelKernelNDGeoLineND> A, GeogebraCommonKernelKernelNDGeoQuadricND *B);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineQuadricSingleWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoQuadricND_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoQuadricND *q, jint index);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoCoordSys2D_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, id<GeogebraCommonKernelKernelNDGeoCoordSys2D> A, GeogebraCommonKernelKernelNDGeoConicND *B);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoAngle *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoAngle *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoAngle *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoAngle *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Rotate3DWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, GeogebraCommonKernelGeosGeoElement *geoRot, id<GeogebraCommonKernelGeosGeoNumberValue> phi, id<GeogebraCommonKernelKernelNDGeoPointND> center, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_CircleArcSector3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, jint type);

__attribute__((unused)) static GeogebraCommonKernelKernelNDGeoConicND *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_EllipseHyperbola3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, jint type);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosManager3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DAlgosManager3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)Point3DWithNSString:(NSString *)label
                                                             withDouble:(jdouble)x
                                                             withDouble:(jdouble)y
                                                             withDouble:(jdouble)z
                                                            withBoolean:(jboolean)coords2D {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  if (coords2D) [p setCartesian];
  else [p setCartesian3D];
  [p setCoordsWithDouble:x withDouble:y withDouble:z withDouble:1.0];
  [p setLabelWithNSString:label];
  return p;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)Point3DWithDouble:(jdouble)x
                                                           withDouble:(jdouble)y
                                                           withDouble:(jdouble)z
                                                          withBoolean:(jboolean)coords2D {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  if (coords2D) [p setCartesian];
  else [p setCartesian3D];
  [p setCoordsWithDouble:x withDouble:y withDouble:z withDouble:1.0];
  return p;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)DependentPoint3DWithNSString:(NSString *)label
                                withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPoint3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(cons_, label, root) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *P = [algo getPoint3D];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(P)) setCartesian3D];
  [P update];
  return P;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *)DependentVector3DWithNSString:(NSString *)label
                                  withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentVector3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(cons_, label, root) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *P = [algo getVector3D];
  return P;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *)Vector3DWithNSString:(NSString *)label
                                                               withDouble:(jdouble)x
                                                               withDouble:(jdouble)y
                                                               withDouble:(jdouble)z {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *v = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons_, x, y, z) autorelease];
  [v setLabelWithNSString:label];
  return v;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *)Vector3DWithNSString:(NSString *)label
                               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoVector3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, P, Q) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *v = (GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast([algo getVector], [GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class]);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(v)) setEuclidianVisibleWithBoolean:YES];
  [v update];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:v];
  return v;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)Point3DInWithNSString:(NSString *)label
                                           withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region
                                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
                                                              withBoolean:(jboolean)addToConstruction
                                                              withBoolean:(jboolean)coords2D {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DInWithNSString_withGeogebraCommonKernelRegion_withGeogebraCommonKernelMatrixCoords_withBoolean_withBoolean_(self, label, region, coords, addToConstruction, coords2D);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)Point3DInWithGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region
                                                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
                                                                                withBoolean:(jboolean)coords2D {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DInRegion *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DInRegion_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelRegion_withGeogebraCommonKernelMatrixCoords_(cons_, region, coords) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = [algo getP];
  if (coords2D) [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCartesian];
  else [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCartesian3D];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) update];
  return p;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)Point3DInWithNSString:(NSString *)label
                                           withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region
                                                              withBoolean:(jboolean)coords2D {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DInWithNSString_withGeogebraCommonKernelRegion_withGeogebraCommonKernelMatrixCoords_withBoolean_withBoolean_(self, label, region, nil, YES, coords2D);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)Point3DWithNSString:(NSString *)label
                                           withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
                                                             withDouble:(jdouble)x
                                                             withDouble:(jdouble)y
                                                             withDouble:(jdouble)z
                                                            withBoolean:(jboolean)addToConstruction
                                                            withBoolean:(jboolean)coords2D {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DWithNSString_withGeogebraCommonKernelPath_withDouble_withDouble_withDouble_withBoolean_withBoolean_(self, label, path, x, y, z, addToConstruction, coords2D);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)Point3DWithNSString:(NSString *)label
                                           withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
                                                            withBoolean:(jboolean)coords2D {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DWithNSString_withGeogebraCommonKernelPath_withDouble_withDouble_withDouble_withBoolean_withBoolean_(self, label, path, 0, 0, 0, YES, coords2D);
  return p;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)Point3DWithNSString:(NSString *)label
                                     withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
                    withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)param {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath *algo = nil;
  if (param == nil) {
    algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelPath_withDouble_withDouble_withDouble_(cons_, label, path, 0, 0, 0) autorelease];
  }
  else {
    algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelPath_withDouble_withDouble_withDouble_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, path, 0, 0, 0, param) autorelease];
  }
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((GeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath *) nil_chk(algo)) getP], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  if (![((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) isDefined]) {
    [p setCoordsWithDouble:1 withDouble:0 withDouble:0 withDouble:1];
    [algo update];
  }
  if (![p isDefined]) {
    [p setCoordsWithDouble:JavaLangMath_random() withDouble:0 withDouble:0 withDouble:1];
    [algo update];
  }
  return p;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)MidpointWithNSString:(NSString *)label
                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoMidpoint3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoMidpoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, P, Q) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *M = [algo getPoint];
  return M;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)MidpointWithNSString:(NSString *)label
                      withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoMidpoint3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoMidpointSegment3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoSegmentND_(cons_, label, segment) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *M = [algo getPoint];
  return M;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)CenterWithNSString:(NSString *)label
                      withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCenterConic3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCenterConic3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_(cons_, label, conic) autorelease];
  return [algo getPoint];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)CenterQuadricWithNSString:(NSString *)label
                           withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCenterQuadric *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCenterQuadric_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(cons_, label, (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(quadric, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class])) autorelease];
  return [algo getPoint];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *)Segment3DWithNSString:(NSString *)label
                                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P1
                                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonPluginGeoClassEnum_(cons_, label, P1, P2, GeogebraCommonPluginGeoClassEnum_get_SEGMENT3D()) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *s = (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast([algo getCS], [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class]);
  return s;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)Line3DWithNSString:(NSString *)label
                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P1
                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonPluginGeoClassEnum_(cons_, label, P1, P2, GeogebraCommonPluginGeoClassEnum_get_LINE3D()) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *l = (GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast([algo getCS], [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class]);
  return l;
}

- (id<GeogebraCommonKernelKernelNDGeoLineND>)Line3DWithNSString:(NSString *)label
                     withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                      withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)l {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, P, l) autorelease];
  id<GeogebraCommonKernelKernelNDGeoLineND> g = [algo getLine];
  return g;
}

- (id<GeogebraCommonKernelKernelNDGeoLineND>)Line3DWithNSString:(NSString *)label
                     withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                    withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointVector3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, P, v) autorelease];
  id<GeogebraCommonKernelKernelNDGeoLineND> g = [algo getLine];
  return g;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *)Ray3DWithNSString:(NSString *)label
                         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P1
                         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonPluginGeoClassEnum_(cons_, label, P1, P2, GeogebraCommonPluginGeoClassEnum_get_RAY3D()) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *l = (GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *) check_class_cast([algo getCS], [GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D class]);
  return l;
}

- (id<GeogebraCommonKernelKernelNDGeoLineND>)OrthogonalLine3DWithNSString:(NSString *)label
                               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                            withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)cs {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointPlane_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, label, point, cs) autorelease];
  return [algo getLine];
}

- (id<GeogebraCommonKernelKernelNDGeoLineND>)OrthogonalLine3DWithNSString:(NSString *)label
                               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                                withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, point, line) autorelease];
  return [algo getLine];
}

- (id<GeogebraCommonKernelKernelNDGeoLineND>)OrthogonalLine3DWithNSString:(NSString *)label
                               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                           withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)line
                           withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  if ([GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:line] && [direction isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoSpace class]]) return [self OrthogonalLine3DWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:point withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(line, @protocol(GeogebraCommonKernelKernelNDGeoLineND))];
  if ((!([cons_ isKindOfClass:[GeogebraCommonGeogebra3DKernel3DConstruction3D class]]) || direction == [((GeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [GeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getXOYPlane]) && ([point isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) && ([line isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]])) {
    GeogebraCommonKernelAlgosAlgoOrthoLinePointLine *algo = [new_GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_(cons_, label, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(point, [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoLine *) check_class_cast(line, [GeogebraCommonKernelGeosGeoLine class])) autorelease];
    return [algo getLine];
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, point, line, direction) autorelease];
  return [algo getLine];
}

- (id<GeogebraCommonKernelKernelNDGeoLineND>)OrthogonalLine3DWithNSString:(NSString *)label
                                withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line1
                                withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLineLineLine *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLineLineLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, line1, line2) autorelease];
  return [algo getLine];
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)OrthogonalVector3DWithNSString:(NSString *)label
                                withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorPlane_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, label, plane) autorelease];
  return [algo getVector];
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)OrthogonalVector3DWithNSString:(NSString *)label
                                    withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line
                               withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorLineDirection *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoVectorLineDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, line, direction) autorelease];
  return [algo getVector];
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)UnitOrthogonalVector3DWithNSString:(NSString *)label
                                    withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitOrthoVectorPlane *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitOrthoVectorPlane_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, label, plane) autorelease];
  return [algo getVector];
}

- (IOSObjectArray *)Polygon3DWithNSStringArray:(IOSObjectArray *)label
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoElement_(cons_, label, points, nil) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)Polygon3DWithNSStringArray:(IOSObjectArray *)label
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  GeogebraCommonKernelAlgosAlgoPolygon *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3DDirection_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, points, direction) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PolyLine3DWithNSStringArray:(IOSObjectArray *)labels
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)P {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, labels, P) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PolyLine3DWithNSStringArray:(IOSObjectArray *)labels
            withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)pointList {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(cons_, labels, pointList) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PrismWithNSStringArray:(IOSObjectArray *)labels
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrism *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrism_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, labels, points) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PrismWithNSStringArray:(IOSObjectArray *)labels
    withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrism *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrism_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, labels, polygon, point) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PrismWithNSStringArray:(IOSObjectArray *)labels
    withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon
withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)height {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrism *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrism_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, polygon, height) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PyramidWithNSStringArray:(IOSObjectArray *)labels
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, labels, points) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PyramidWithNSStringArray:(IOSObjectArray *)labels
      withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon
  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, labels, polygon, point) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PyramidWithNSStringArray:(IOSObjectArray *)labels
      withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon
withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)height {
  GeogebraCommonMainApp_debugWithNSString_(@"pyramid");
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, polygon, height) autorelease];
  return [algo getOutput];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)Plane3DWithNSString:(NSString *)label
                                                             withDouble:(jdouble)a
                                                             withDouble:(jdouble)b
                                                             withDouble:(jdouble)c
                                                             withDouble:(jdouble)d {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_withDouble_(cons_, label, a, b, c, d) autorelease];
  return plane;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)DependentPlane3DWithNSString:(NSString *)label
                                      withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPlane3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPlane3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_(cons_, label, equ) autorelease];
  return [algo getPlane];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)DependentQuadric3DWithNSString:(NSString *)label
                                          withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentQuadric3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentQuadric3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_(cons_, label, equ) autorelease];
  return [algo getQuadric];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)Plane3DWithNSString:(NSString *)label
                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                              withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, point, line) autorelease];
  return [algo getPlane];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)Plane3DWithNSString:(NSString *)label
                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                          withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)cs {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, label, point, cs) autorelease];
  return [algo getPlane];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)OrthogonalPlane3DWithNSString:(NSString *)label
                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                                        withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  return [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePointLine *) [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePointLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, point, line) autorelease]) getPlane];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)OrthogonalPlane3DWithNSString:(NSString *)label
                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                                      withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)vector {
  return [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePointVector *) [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlanePointVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, point, vector) autorelease]) getPlane];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)PlaneBisectorWithNSString:(NSString *)label
                                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point1
                                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point2 {
  return [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorPointPoint *) [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorPointPoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, point1, point2) autorelease]) getPlane];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)PlaneBisectorWithNSString:(NSString *)label
                                 withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  return [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment *) [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoSegmentND_(cons_, label, segment) autorelease]) getPlane];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)SphereWithNSString:(NSString *)label
                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
                           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoSpherePointRadius *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoSpherePointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, M, r) autorelease];
  return [algo getSphere];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)SphereWithNSString:(NSString *)label
                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoSphereTwoPoints *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoSphereTwoPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, M, P) autorelease];
  return [algo getSphere];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)ConeWithNSString:(NSString *)label
                            withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)origin
                           withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)direction
                         withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)angle {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadric *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConeInfinitePointVectorNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, origin, direction, angle) autorelease];
  return [algo getQuadric];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)ConeWithNSString:(NSString *)label
                            withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)origin
                            withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)secondPoint
                         withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)angle {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadric *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConeInfinitePointPointNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, origin, secondPoint, angle) autorelease];
  return [algo getQuadric];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)ConeWithNSString:(NSString *)label
                            withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)origin
                             withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)axis
                         withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)angle {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, origin, axis, angle) autorelease];
  return [algo getQuadric];
}

- (IOSObjectArray *)ConeLimitedWithNSStringArray:(IOSObjectArray *)labels
      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)origin
      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)secondPoint
   withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCone_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, origin, secondPoint, r) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)ConeLimitedWithNSStringArray:(IOSObjectArray *)labels
      withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)bottom
   withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)height {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedConicHeightCone *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedConicHeightCone_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, bottom, height) autorelease];
  [algo update];
  return [algo getOutput];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)CylinderWithNSString:(NSString *)label
                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)origin
                               withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)direction
                             withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadric *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderInfinitePointVectorNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, origin, direction, r) autorelease];
  return [algo getQuadric];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)CylinderWithNSString:(NSString *)label
                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)origin
                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)secondPoint
                             withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadric *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderInfinitePointPointNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, origin, secondPoint, r) autorelease];
  return [algo getQuadric];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)CylinderWithNSString:(NSString *)label
                                 withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)axis
                             withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadric *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, axis, r) autorelease];
  return [algo getQuadric];
}

- (IOSObjectArray *)CylinderLimitedWithNSStringArray:(IOSObjectArray *)labels
          withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)origin
          withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)secondPoint
       withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, origin, secondPoint, r) autorelease];
  [algo update];
  return [algo getOutput];
}

- (IOSObjectArray *)CylinderLimitedWithNSStringArray:(IOSObjectArray *)labels
          withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)bottom
       withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)height {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedConicHeightCylinder *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedConicHeightCylinder_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, bottom, height) autorelease];
  [algo update];
  return [algo getOutput];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *)QuadricSideWithNSString:(NSString *)label
                                     withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadric *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(cons_, label, (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(quadric, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])) autorelease];
  return (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast([algo getQuadric], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class]);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)QuadricBottomWithNSString:(NSString *)label
                                 withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricEnd *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricEndBottom_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(cons_, label, (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(quadric, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])) autorelease];
  return [algo getSection];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)QuadricTopWithNSString:(NSString *)label
                              withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricEnd *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricEndTop_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(cons_, label, (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(quadric, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])) autorelease];
  return [algo getSection];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)Circle3DWithNSString:(NSString *)label
                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  GeogebraCommonKernelAlgosAlgoCircleThreePoints *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DThreePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, A, B, C) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *circle = (GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) check_class_cast([algo getCircle], [GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D class]);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(circle)) update];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:circle];
  return circle;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)Circle3DWithNSString:(NSString *)label
                               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)axis
                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DAxisPoint *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DAxisPoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, axis, A) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *circle = [algo getCircle];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(circle)) update];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:circle];
  return circle;
}

- (GeogebraCommonKernelKernelNDGeoConicND *)Circle3DWithNSString:(NSString *)label
                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                   withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)radius
                  withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)axis {
  if (![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A)) isGeoElement3D] && axis == [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
    return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) CircleWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelArithmeticNumberValue:radius];
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, A, radius, axis) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *circle = [algo getCircle];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(circle)) update];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:circle];
  return circle;
}

- (GeogebraCommonKernelKernelNDGeoConicND *)Circle3DWithNSString:(NSString *)label
                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                   withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)radius {
  return [self Circle3DWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelArithmeticNumberValue:radius withGeogebraCommonKernelKernelNDGeoDirectionND:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)Circle3DWithNSString:(NSString *)label
                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                  withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(A, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(B, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] && orientation == [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
    return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) CircleWithNSString:label withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [GeogebraCommonKernelGeosGeoPoint class])];
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointPointDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, A, B, orientation) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *circle = [algo getCircle];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(circle)) update];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:circle];
  return circle;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)Plane3DWithNSString:(NSString *)label
                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThreePoints *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThreePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, A, B, C) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([algo getCoordSys], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  return plane;
}

- (GeogebraCommonKernelGeosGeoElement *)Plane3DWithNSString:(NSString *)label
                  withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)a
                  withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)b {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, a, b) autorelease];
  return (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([algo getCoordSys], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)Plane3DWithNSString:(NSString *)label
                          withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)cs2D {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, label, cs2D) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([algo getCoordSys], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  return plane;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)Plane3DWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)cs2D {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneCS2D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, cs2D) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([algo getCoordSys], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  return plane;
}

- (GeogebraCommonKernelGeosGeoElement *)IntersectWithNSString:(NSString *)label
                       withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)cs1
                       withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)cs2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCoordSys *algo = nil;
  if ([GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:cs1]) {
    if ([GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:cs2]) algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D1D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(cs1, @protocol(GeogebraCommonKernelKernelNDGeoLineND)), (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(cs2, @protocol(GeogebraCommonKernelKernelNDGeoLineND))) autorelease];
    else if ([GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:cs2]) algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(cons_, label, cs1, cs2) autorelease];
  }
  else if ([GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:cs1]) {
    if ([GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:cs2]) algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(cons_, label, cs1, cs2) autorelease];
  }
  return [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCoordSys *) nil_chk(algo)) getIntersection];
}

- (IOSObjectArray *)IntersectionPointWithNSStringArray:(IOSObjectArray *)labels
             withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
          withGeogebraCommonKernelGeosGeoSurfaceFinite:(id<GeogebraCommonKernelGeosGeoSurfaceFinite>)p {
  if ([p isKindOfClass:[GeogebraCommonKernelGeosGeoPolygon class]]) {
    GeogebraCommonKernelAlgosAlgoElement *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelGeosGeoPolygon_(cons_, labels, g, (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(p, [GeogebraCommonKernelGeosGeoPolygon class])) autorelease];
    return [algo getOutput];
  }
  return nil;
}

- (IOSObjectArray *)IntersectionPointWithNSStringArray:(IOSObjectArray *)labels
            withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)plane
                withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)s {
  if ([s isKindOfClass:[GeogebraCommonKernelGeosGeoPolygon class]]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelGeosGeoPolygon_(cons_, labels, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(s, [GeogebraCommonKernelGeosGeoPolygon class])) autorelease];
    return [algo getOutput];
  }
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(s)) isGeoPolyhedron]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(cons_, labels, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(s, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class])) autorelease];
    return [algo getOutput];
  }
  return nil;
}

- (IOSObjectArray *)IntersectPathWithNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
      withGeogebraCommonKernelGeosGeoSurfaceFinite:(id<GeogebraCommonKernelGeosGeoSurfaceFinite>)p {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathLinePolygon3D *algo;
  if ([p isKindOfClass:[GeogebraCommonKernelGeosGeoPolygon class]]) {
    algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(cons_, labels, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(g, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(p, [GeogebraCommonKernelGeosGeoPolygon class])) autorelease];
    return [algo getOutput];
  }
  return nil;
}

- (IOSObjectArray *)IntersectPathWithNSStringArray:(IOSObjectArray *)labels
        withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)plane
            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)p {
  if ([p isKindOfClass:[GeogebraCommonKernelGeosGeoPolygon class]]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathPlanePolygon3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathPlanePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelGeosGeoElement_(cons_, labels, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(p, [GeogebraCommonKernelGeosGeoPolygon class])) autorelease];
    return [algo getOutput];
  }
  return nil;
}

- (IOSObjectArray *)IntersectPathWithGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)plane
                                     withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathPlanePolygon3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathPlanePolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelGeosGeoElement_(cons_, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), p) autorelease];
  [algo update];
  return [algo getOutput];
}

- (IOSObjectArray *)IntersectRegionWithNSStringArray:(IOSObjectArray *)labels
          withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)plane
              withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)p
                                        withIntArray:(IOSIntArray *)outputSizes {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(p)) isGeoPolyhedron]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withIntArray_(cons_, labels, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(p, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]), outputSizes) autorelease];
    return [algo getOutput];
  }
  return nil;
}

- (IOSObjectArray *)IntersectRegionWithGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)plane
                                       withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)p {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(p)) isGeoPolyhedron]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(cons_, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(p, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class])) autorelease];
    [algo update];
    return [algo getOutput];
  }
  return nil;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)IntersectWithNSString:(NSString *)label
                               withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)plane
                             withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  if ([quadric isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class]]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricPart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, label, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), quadric) autorelease];
    return [algo getConic];
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, label, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), quadric) autorelease];
  return [algo getConic];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)IntersectQuadricLimitedWithNSString:(NSString *)label
                                     withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)plane
                                   withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, label, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), quadric) autorelease];
  return [algo getConic];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)IntersectQuadricLimitedWithGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)plane
                                                                 withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), quadric) autorelease];
  return [algo getConic];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)IntersectWithGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)plane
                                                           withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(plane, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), quadric) autorelease];
  return [algo getConic];
}

- (IOSObjectArray *)IntersectAsCircleWithNSStringArray:(IOSObjectArray *)labels
          withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric1
          withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoQuadricND_withGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, labels, quadric1, quadric2) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)IntersectAsCircleWithGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric1
                                     withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectQuadricsAsCircle_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoQuadricND_withGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, quadric1, quadric2) autorelease];
  return [algo getOutput];
}

- (GeogebraCommonKernelGeosGeoFunctionNVar *)Function2VarWithNSString:(NSString *)label
                        withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)zcoord
                               withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)localVarU
                        withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)Ufrom
                        withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)Uto
                               withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)localVarV
                        withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)Vfrom
                        withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)Vto {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoFunctionNVarND *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoFunctionNVarND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelGeosGeoNumericArray_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelArithmeticNumberValueArray_(cons_, label, [IOSObjectArray arrayWithObjects:(id[]){ zcoord } count:1 type:GeogebraCommonKernelArithmeticNumberValue_class_()], [IOSObjectArray arrayWithObjects:(id[]){ localVarU, localVarV } count:2 type:GeogebraCommonKernelGeosGeoNumeric_class_()], [IOSObjectArray arrayWithObjects:(id[]){ Ufrom, Vfrom } count:2 type:GeogebraCommonKernelArithmeticNumberValue_class_()], [IOSObjectArray arrayWithObjects:(id[]){ Uto, Vto } count:2 type:GeogebraCommonKernelArithmeticNumberValue_class_()]) autorelease];
  return [algo getFunction];
}

- (GeogebraCommonKernelGeosGeoFunctionNVar *)Function2VarWithNSString:(NSString *)label
                          withGeogebraCommonKernelGeosGeoFunctionNVar:(GeogebraCommonKernelGeosGeoFunctionNVar *)f
                        withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)xFrom
                        withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)xTo
                        withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)yFrom
                        withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)yTo {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoFunctionNVarND *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoFunctionNVarND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunctionNVar_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelArithmeticNumberValueArray_(cons_, label, f, [IOSObjectArray arrayWithObjects:(id[]){ xFrom, yFrom } count:2 type:GeogebraCommonKernelArithmeticNumberValue_class_()], [IOSObjectArray arrayWithObjects:(id[]){ xTo, yTo } count:2 type:GeogebraCommonKernelArithmeticNumberValue_class_()]) autorelease];
  return [algo getFunction];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)CurveCartesian3DWithNSString:(NSString *)label
                                            withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)xcoord
                                            withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)ycoord
                                            withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)zcoord
                                                   withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)localVar
                                            withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)from
                                            withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)to {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCurveCartesian3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCurveCartesian3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, [IOSObjectArray arrayWithObjects:(id[]){ xcoord, ycoord, zcoord } count:3 type:GeogebraCommonKernelArithmeticNumberValue_class_()], localVar, from, to) autorelease];
  return (GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) check_class_cast([algo getCurve], [GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D class]);
}

- (GeogebraCommonKernelGeosGeoElement *)SurfaceCartesian3DWithNSString:(NSString *)label
                         withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)xcoord
                         withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)ycoord
                         withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)zcoord
                                withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)uVar
                         withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)uFrom
                         withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)uTo
                                withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)vVar
                         withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)vFrom
                         withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)vTo {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelGeosGeoNumericArray_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelArithmeticNumberValueArray_(cons_, label, [IOSObjectArray arrayWithObjects:(id[]){ xcoord, ycoord, zcoord } count:3 type:GeogebraCommonKernelArithmeticNumberValue_class_()], [IOSObjectArray arrayWithObjects:(id[]){ uVar, vVar } count:2 type:GeogebraCommonKernelGeosGeoNumeric_class_()], [IOSObjectArray arrayWithObjects:(id[]){ uFrom, vFrom } count:2 type:GeogebraCommonKernelArithmeticNumberValue_class_()], [IOSObjectArray arrayWithObjects:(id[]){ uTo, vTo } count:2 type:GeogebraCommonKernelArithmeticNumberValue_class_()]) autorelease];
  return [algo getSurface];
}

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *)getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                                                                                          withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, g, c);
}

- (IOSObjectArray *)IntersectLineConicWithNSStringArray:(IOSObjectArray *)labels
              withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
             withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *algo = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, g, c);
  [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(labels, points);
  return points;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineConicSingleWithNSString:(NSString *)label
                                               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                                              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c
                                                                              withDouble:(jdouble)xRW
                                                                              withDouble:(jdouble)yRW
                                               withGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)mat {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *algo = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, g, c);
  jint index = [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *) nil_chk(algo)) getClosestPointIndexWithDouble:xRW withDouble:yRW withGeogebraCommonKernelMatrixCoordMatrix:mat];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(label, algo, index) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineConicSingleWithNSString:(NSString *)label
                                               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                                              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c
                                           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)index {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineConicSingleWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_withInt_(self, label, g, c, J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(index)) getDouble]) - 1);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineConicSingleWithNSString:(NSString *)label
                                               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                                              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c
                                                                                 withInt:(jint)index {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineConicSingleWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_withInt_(self, label, g, c, index);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineConicSingleWithNSString:(NSString *)label
                                               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                                              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c
                                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)refPoint {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *algo = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, g, c);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withGeogebraCommonKernelKernelNDGeoPointND_(label, algo, refPoint) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *)getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)A
                                                                                        withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)B {
  GeogebraCommonKernelAlgosAlgoElement *existingAlgo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:A withGeogebraCommonKernelGeosGeoElement:B];
  if (existingAlgo != nil) return (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *) check_class_cast(existingAlgo, [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D class]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_(cons_, A, B) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) addIntersectionAlgorithmWithGeogebraCommonKernelAlgosAlgoIntersectAbstract:algo];
  return algo;
}

- (IOSObjectArray *)IntersectConicsWithNSStringArray:(IOSObjectArray *)labels
          withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)A
          withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)B {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoConicND:A withGeogebraCommonKernelKernelNDGeoConicND:B];
  [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(labels, points);
  return points;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectConicsSingleWithNSString:(NSString *)label
                                           withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)A
                                           withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)B
                                                                           withDouble:(jdouble)xRW
                                                                           withDouble:(jdouble)yRW
                                            withGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)mat {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoConicND:A withGeogebraCommonKernelKernelNDGeoConicND:B];
  jint index = [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *) nil_chk(algo)) getClosestPointIndexWithDouble:xRW withDouble:yRW withGeogebraCommonKernelMatrixCoordMatrix:mat];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(label, algo, index) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectConicsSingleWithNSString:(NSString *)label
                                           withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)A
                                           withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)B
                                        withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)index {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectConicsSingleWithNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_withInt_(self, label, A, B, J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(index)) getDouble]) - 1);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectConicsSingleWithNSString:(NSString *)label
                                           withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)A
                                           withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)B
                                                                              withInt:(jint)index {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectConicsSingleWithNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_withInt_(self, label, A, B, index);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectConicsSingleWithNSString:(NSString *)label
                                           withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)A
                                           withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)B
                                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)refPoint {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoConicND:A withGeogebraCommonKernelKernelNDGeoConicND:B];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withGeogebraCommonKernelKernelNDGeoPointND_(label, algo, refPoint) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *)getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)A
                                                                                          withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)B {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, A, B);
}

- (IOSObjectArray *)IntersectLineQuadricWithNSStringArray:(IOSObjectArray *)labels
                withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)A
             withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)B {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *algo = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, A, B);
  [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(labels, points);
  return points;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineQuadricSingleWithNSString:(NSString *)label
                                                 withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                                              withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)q
                                             withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)index {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineQuadricSingleWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoQuadricND_withInt_(self, label, g, q, J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(index)) getDouble]) - 1);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineQuadricSingleWithNSString:(NSString *)label
                                                 withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                                              withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)q
                                                                                   withInt:(jint)index {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineQuadricSingleWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoQuadricND_withInt_(self, label, g, q, index);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineQuadricSingleWithNSString:(NSString *)label
                                                 withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                                              withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)q
                                                                                withDouble:(jdouble)xRW
                                                                                withDouble:(jdouble)yRW
                                              withGeogebraCommonKernelMatrixCoordMatrix4x4:(GeogebraCommonKernelMatrixCoordMatrix4x4 *)mat {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *algo = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, g, q);
  jint index = [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *) nil_chk(algo)) getClosestPointIndexWithDouble:xRW withDouble:yRW withGeogebraCommonKernelMatrixCoordMatrix:mat];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(label, algo, index) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)IntersectLineQuadricSingleWithNSString:(NSString *)label
                                                 withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                                              withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)q
                                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)refPoint {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *algo = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, g, q);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withGeogebraCommonKernelKernelNDGeoPointND_(label, algo, refPoint) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *)getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)A
                                                                                             withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)B {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoCoordSys2D_withGeogebraCommonKernelKernelNDGeoConicND_(self, A, B);
}

- (IOSObjectArray *)IntersectPlaneConicWithNSStringArray:(IOSObjectArray *)labels
           withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)A
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)B {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *algo = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoCoordSys2D_withGeogebraCommonKernelKernelNDGeoConicND_(self, A, B);
  [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(labels, points);
  return points;
}

- (GeogebraCommonKernelGeosGeoElement *)IntersectPlanesWithNSString:(NSString *)label
                         withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)cs1
                         withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)cs2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonKernelKernelNDGeoPlaneND_(cons_, label, cs1, cs2) autorelease];
  return [algo getIntersection];
}

- (GeogebraCommonKernelGeosGeoElement *)IntersectPlanesWithGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)cs1
                                                       withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)cs2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonKernelKernelNDGeoPlaneND_(cons_, cs1, cs2) autorelease];
  return [algo getIntersection];
}

- (GeogebraCommonKernelGeosGeoElement *)ClosestPointWithNSString:(NSString *)label
                       withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                       withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, g, h) autorelease];
  return [algo getPoint];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)ClosestPointWithNSString:(NSString *)label
                                                withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)p
                                  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPoint3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelPath_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, p, P) autorelease];
  return (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([algo getP], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)ClosestPointWithNSString:(NSString *)label
                                        withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)r
                            withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointToRegion3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointToRegion3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelRegion_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, r, P) autorelease];
  return [algo getOutputPoint];
}

- (GeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, label, A, B, C);
}

- (GeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
           withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, label, A, B, C, orientation);
}

- (IOSObjectArray *)AngleWithNSStringArray:(IOSObjectArray *)labels
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)alpha
withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation
                               withBoolean:(jboolean)posOrientation {
  NSString *pointLabel = nil, *angleLabel = nil;
  if (labels != nil) {
    switch (labels->size_) {
      case 2:
      pointLabel = IOSObjectArray_Get(labels, 1);
      case 1:
      angleLabel = IOSObjectArray_Get(labels, 0);
      default:
      ;
    }
  }
  id<GeogebraCommonKernelKernelNDGeoPointND> C = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk(GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Rotate3DWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, pointLabel, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(B, [GeogebraCommonKernelGeosGeoElement class]), alpha, A, orientation)), 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND));
  GeogebraCommonKernelGeosGeoAngle *angle;
  if (posOrientation) {
    angle = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, angleLabel, B, A, C, orientation);
  }
  else {
    angle = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, angleLabel, C, A, B, orientation);
  }
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ angle, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(C, [GeogebraCommonKernelGeosGeoElement class]) } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

- (GeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
                withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, label, g, h);
}

- (GeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
                withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h
           withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, label, g, h, orientation);
}

- (GeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)p1
               withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)p2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(cons_, label, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(p1, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(p2, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])) autorelease];
  GeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

- (GeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
                withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)l
               withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)p {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(cons_, label, l, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(p, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])) autorelease];
  GeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

- (GeogebraCommonKernelGeosGeoAngle *)createLineAngleWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line1
                                                     withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line2 {
  GeogebraCommonKernelGeosGeoAngle *angle = nil;
  if (([GeogebraCommonKernelKernelNDGeoSegmentND_class_() isInstance:line1]) && ([GeogebraCommonKernelKernelNDGeoSegmentND_class_() isInstance:line2])) {
    id<GeogebraCommonKernelKernelNDGeoSegmentND> a = (id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(line1, @protocol(GeogebraCommonKernelKernelNDGeoSegmentND));
    id<GeogebraCommonKernelKernelNDGeoSegmentND> b = (id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(line2, @protocol(GeogebraCommonKernelKernelNDGeoSegmentND));
    id<GeogebraCommonKernelKernelNDGeoPointND> a1 = [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(a)) getStartPoint];
    id<GeogebraCommonKernelKernelNDGeoPointND> a2 = [a getEndPoint];
    id<GeogebraCommonKernelKernelNDGeoPointND> b1 = [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(b)) getStartPoint];
    id<GeogebraCommonKernelKernelNDGeoPointND> b2 = [b getEndPoint];
    if (a1 == b1) {
      angle = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, nil, a2, a1, b2);
    }
    else if (a1 == b2) {
      angle = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, nil, a2, a1, b1);
    }
    else if (a2 == b1) {
      angle = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, nil, a1, a2, b2);
    }
    else if (a2 == b2) {
      angle = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, nil, a1, a2, b1);
    }
  }
  if (angle == nil) {
    angle = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, nil, line1, line2);
  }
  return angle;
}

- (GeogebraCommonKernelGeosGeoAngle *)createLineAngleWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line1
                                                     withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line2
                                                withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonKernelGeosGeoAngle *angle = nil;
  if (([GeogebraCommonKernelKernelNDGeoSegmentND_class_() isInstance:line1]) && ([GeogebraCommonKernelKernelNDGeoSegmentND_class_() isInstance:line2])) {
    id<GeogebraCommonKernelKernelNDGeoSegmentND> a = (id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(line1, @protocol(GeogebraCommonKernelKernelNDGeoSegmentND));
    id<GeogebraCommonKernelKernelNDGeoSegmentND> b = (id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(line2, @protocol(GeogebraCommonKernelKernelNDGeoSegmentND));
    id<GeogebraCommonKernelKernelNDGeoPointND> a1 = [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(a)) getStartPoint];
    id<GeogebraCommonKernelKernelNDGeoPointND> a2 = [a getEndPoint];
    id<GeogebraCommonKernelKernelNDGeoPointND> b1 = [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(b)) getStartPoint];
    id<GeogebraCommonKernelKernelNDGeoPointND> b2 = [b getEndPoint];
    if (a1 == b1) {
      angle = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, nil, a2, a1, b2, orientation);
    }
    else if (a1 == b2) {
      angle = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, nil, a2, a1, b1, orientation);
    }
    else if (a2 == b1) {
      angle = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, nil, a1, a2, b2, orientation);
    }
    else if (a2 == b2) {
      angle = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, nil, a1, a2, b1, orientation);
    }
  }
  if (angle == nil) {
    angle = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, nil, line1, line2, orientation);
  }
  return angle;
}

- (GeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v
              withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)w {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVectors3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVectors3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, v, w) autorelease];
  GeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

- (GeogebraCommonKernelGeosGeoAngle *)Angle3DWithNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v
              withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)w
           withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVectors3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVectors3DOrientation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, v, w, orientation) autorelease];
  GeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

- (IOSObjectArray *)Angles3DWithNSStringArray:(IOSObjectArray *)labels
       withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePolygon3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_(cons_, labels, poly) autorelease];
  IOSObjectArray *angles = [algo getAngles];
  return angles;
}

- (IOSObjectArray *)Angles3DWithNSStringArray:(IOSObjectArray *)labels
       withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly
withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePolygon3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePolygon3DOrientation_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, labels, poly, orientation) autorelease];
  IOSObjectArray *angles = [algo getAngles];
  return angles;
}

- (GeogebraCommonKernelGeosGeoNumeric *)LengthWithNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLengthVector3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoLengthVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, v) autorelease];
  GeogebraCommonKernelGeosGeoNumeric *num = [algo getLength];
  return num;
}

- (IOSObjectArray *)ArchimedeanSolidWithNSStringArray:(IOSObjectArray *)labels
           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
       withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)v
         withGeogebraCommonKernelCommandsCommandsEnum:(GeogebraCommonKernelCommandsCommandsEnum *)name {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoArchimedeanSolid *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoArchimedeanSolid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_withGeogebraCommonKernelCommandsCommandsEnum_(cons_, labels, A, B, v, name) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)ArchimedeanSolidWithNSStringArray:(IOSObjectArray *)labels
           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
         withGeogebraCommonKernelCommandsCommandsEnum:(GeogebraCommonKernelCommandsCommandsEnum *)name {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoArchimedeanSolidThreePoints *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoArchimedeanSolidThreePoints_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelCommandsCommandsEnum_(cons_, labels, A, B, C, name) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)ArchimedeanSolidWithNSStringArray:(IOSObjectArray *)labels
           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
         withGeogebraCommonKernelCommandsCommandsEnum:(GeogebraCommonKernelCommandsCommandsEnum *)name {
  id<GeogebraCommonKernelKernelNDGeoSegmentND> segAB;
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D *algoSegment = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonPluginGeoClassEnum_(cons_, A, B, nil, GeogebraCommonPluginGeoClassEnum_get_SEGMENT3D()) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoSegment];
    segAB = (id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast([algoSegment getCS], @protocol(GeogebraCommonKernelKernelNDGeoSegmentND));
  }
  else {
    GeogebraCommonKernelAlgosAlgoJoinPointsSegment *algoSegment = [new_GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(cons_, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [GeogebraCommonKernelGeosGeoPoint class]), nil) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoSegment];
    segAB = [algoSegment getSegment];
  }
  GeogebraCommonKernelAlgosAlgoDistancePoints *algoDistance = [new_GeogebraCommonKernelAlgosAlgoDistancePoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, A, B) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoDistance];
  GeogebraCommonKernelGeosGeoNumeric *distance = [algoDistance getDistance];
  id<GeogebraCommonKernelKernelNDGeoPointND> center;
  GeogebraCommonKernelGeosGeoNumeric *radius;
  {
    GeogebraCommonKernelArithmeticExpressionNode *expr;
    GeogebraCommonKernelAlgosAlgoDependentNumber *exprAlgo;
    GeogebraCommonKernelArithmeticExpressionNode *exprSqrt5;
    GeogebraCommonKernelArithmeticExpressionNode *exprPoint;
    GeogebraCommonKernelArithmeticExpressionNode *expr2;
    switch ([name ordinal]) {
      case GeogebraCommonKernelCommandsCommands_Tetrahedron:
      case GeogebraCommonKernelCommandsCommands_Octahedron:
      case GeogebraCommonKernelCommandsCommands_Icosahedron:
      if ([A isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B)) isGeoElement3D]) {
        GeogebraCommonGeogebra3DKernel3DAlgosAlgoMidpoint3D *algoMidpoint = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoMidpoint3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, A, B) autorelease];
        [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoMidpoint];
        center = [algoMidpoint getPoint];
      }
      else {
        GeogebraCommonKernelAlgosAlgoMidpoint *algoMidpoint = [new_GeogebraCommonKernelAlgosAlgoMidpoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons_, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [GeogebraCommonKernelGeosGeoPoint class])) autorelease];
        [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoMidpoint];
        center = [algoMidpoint getPoint];
      }
      expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 3) autorelease], GeogebraCommonPluginOperationEnum_get_SQRT(), nil) autorelease];
      expr = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([expr divideWithDouble:2])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:distance];
      exprAlgo = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, expr, NO) autorelease];
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:exprAlgo];
      radius = [exprAlgo getNumber];
      break;
      case GeogebraCommonKernelCommandsCommands_Cube:
      default:
      center = B;
      radius = distance;
      break;
      case GeogebraCommonKernelCommandsCommands_Dodecahedron:
      exprSqrt5 = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 5) autorelease], GeogebraCommonPluginOperationEnum_get_SQRT(), nil) autorelease];
      expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 1) autorelease], GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      exprPoint = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, A, GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      expr = [exprPoint multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[expr subtractWithGeogebraCommonKernelArithmeticExpressionValue:exprSqrt5]];
      expr2 = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 3) autorelease], GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      exprPoint = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, B, GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      expr2 = [exprPoint multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[expr2 plusWithGeogebraCommonKernelArithmeticExpressionValue:exprSqrt5]];
      expr = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expr)) plusWithGeogebraCommonKernelArithmeticExpressionValue:expr2])) divideWithDouble:4];
      if ([A isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B)) isGeoElement3D]) {
        GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPoint3D *exprAlgoPoint = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPoint3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(cons_, expr) autorelease];
        [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:exprAlgoPoint];
        center = [exprAlgoPoint getPoint3D];
      }
      else {
        GeogebraCommonKernelAlgosAlgoDependentPoint *exprAlgoPoint = [new_GeogebraCommonKernelAlgosAlgoDependentPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, expr, NO) autorelease];
        [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:exprAlgoPoint];
        center = [exprAlgoPoint getPoint];
      }
      expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 10) autorelease], GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      expr2 = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 2) autorelease], GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      expr = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([expr plusWithGeogebraCommonKernelArithmeticExpressionValue:[exprSqrt5 multiplyWithGeogebraCommonKernelArithmeticExpressionValue:expr2]])) sqrt])) divideWithDouble:4])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:distance];
      exprAlgo = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, expr, NO) autorelease];
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:exprAlgo];
      radius = [exprAlgo getNumber];
      break;
    }
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection *algoCircle = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, center, radius, segAB) autorelease];
  [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoCircle];
  GeogebraCommonKernelMatrixCoords *cA = [A getInhomCoordsInD3];
  GeogebraCommonKernelMatrixCoords *cB = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B)) getInhomCoordsInDWithInt:3];
  GeogebraCommonKernelMatrixCoords *AB = [((GeogebraCommonKernelMatrixCoords *) nil_chk(cB)) subWithGeogebraCommonKernelMatrixCoords:cA];
  GeogebraCommonKernelMatrixCoords *vn = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(AB)) completeOrthonormalKeepInXOYPlaneIfPossibleWithGeogebraCommonKernelMatrixCoords:vn];
  GeogebraCommonKernelMatrixCoords *coords = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(center)) getInhomCoordsInDWithInt:3])) addWithGeogebraCommonKernelMatrixCoords:[vn mulWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(radius)) getDouble]]];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath *algoPoint = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelPath_withDouble_withDouble_withDouble_(cons_, nil, [algoCircle getCircle], [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX], [coords getY], [coords getZ]) autorelease];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoArchimedeanSolidThreePoints *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoArchimedeanSolidThreePoints_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelCommandsCommandsEnum_(cons_, labels, A, B, [algoPoint getP], name) autorelease];
  return [algo getOutput];
}

- (GeogebraCommonKernelGeosGeoNumeric *)DistanceWithNSString:(NSString *)label
                   withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                   withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDistanceLines3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDistanceLines3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, g, h) autorelease];
  return [algo getDistance];
}

- (GeogebraCommonKernelGeosGeoNumeric *)DistanceWithNSString:(NSString *)label
                  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                  withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)plane {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDistancePointPlane3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDistancePointPlane3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPlaneND_(cons_, label, point, plane) autorelease];
  return [algo getDistance];
}

- (IOSObjectArray *)Translate3DWithNSString:(NSString *)label
     withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoTrans
withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v {
  GeogebraCommonGeogebra3DKernel3DTransformTransform3D *t = [new_GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoVectorND_(cons_, v) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:geoTrans withNSString:label];
}

- (id<GeogebraCommonKernelKernelNDGeo3DVec>)newGeo3DVecWithDouble:(jdouble)x
                                                       withDouble:(jdouble)y
                                                       withDouble:(jdouble)z {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_initWithGeogebraCommonKernelKernel_withDouble_withDouble_withDouble_(kernel_, x, y, z) autorelease];
}

- (IOSObjectArray *)Rotate3DWithNSString:(NSString *)label
  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoRot
withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)phi
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)center
withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Rotate3DWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, label, geoRot, phi, center, orientation);
}

- (IOSObjectArray *)Rotate3DWithNSString:(NSString *)label
  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoRot
withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)phi
withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, phi, line) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:geoRot withNSString:label];
}

- (IOSObjectArray *)Mirror3DWithNSString:(NSString *)label
  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, p) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:geo withNSString:label];
}

- (IOSObjectArray *)Mirror3DWithNSString:(NSString *)label
  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, line) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:geo withNSString:label];
}

- (IOSObjectArray *)Mirror3DWithNSString:(NSString *)label
  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, plane) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:geo withNSString:label];
}

- (IOSObjectArray *)Dilate3DWithNSString:(NSString *)label
  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoDil
withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonGeogebra3DKernel3DTransformTransformDilate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, r, S) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:geoDil withNSString:label];
}

- (GeogebraCommonKernelGeosGeoNumeric *)VolumeWithNSString:(NSString *)label
                 withGeogebraCommonKernelKernelNDHasVolume:(id<GeogebraCommonKernelKernelNDHasVolume>)hasVolume {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoVolume_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDHasVolume_(cons_, label, hasVolume) autorelease];
  return [algo getVolume];
}

- (GeogebraCommonKernelGeosGeoNumeric *)OrientedHeightWithNSString:(NSString *)label
                         withGeogebraCommonKernelKernelNDHasHeight:(id<GeogebraCommonKernelKernelNDHasHeight>)hasHeight {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrientedHeight *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrientedHeight_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDHasHeight_(cons_, label, hasHeight) autorelease];
  return [algo getOrientedHeight];
}

- (IOSObjectArray *)CornerWithNSStringArray:(IOSObjectArray *)labels
 withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCornerConicSection *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCornerConicSection_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection_(cons_, labels, (GeogebraCommonGeogebra3DKernel3DGeosGeoConicSection *) check_class_cast(conic, [GeogebraCommonGeogebra3DKernel3DGeosGeoConicSection class])) autorelease];
  return [algo getCorners];
}

- (IOSObjectArray *)RegularPolygonWithNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
      withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)n
     withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, labels, A, B, n, direction) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PolyhedronNetWithNSStringArray:(IOSObjectArray *)labels
            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)p
     withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)v
            withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)bottomFace
 withGeogebraCommonKernelKernelNDGeoSegmentNDArray:(IOSObjectArray *)pivotSegments {
  GeogebraCommonKernelAlgosAlgoElement *algo;
  switch ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(p, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class])))) getType]) {
    case GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_PYRAMID:
    algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(p, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]), v) autorelease];
    return [algo getOutput];
    case GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_PRISM:
    algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPrism_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(p, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]), v) autorelease];
    return [algo getOutput];
    default:
    algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetConvex_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoSegmentNDArray_(cons_, labels, (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(p, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]), v, bottomFace, pivotSegments) autorelease];
    return [algo getOutput];
  }
}

- (IOSObjectArray *)PolyhedronConvexWithNSStringArray:(IOSObjectArray *)labels
          withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)pointList {
  GeogebraCommonKernelAlgosAlgoElement *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronConvex_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(cons_, labels, pointList) autorelease];
  return [algo getOutput];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D *)CircumcircleArc3DWithNSString:(NSString *)label
                                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons_, label, A, B, C, GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC) autorelease];
  return [algo getConicPart];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D *)CircumcircleSector3DWithNSString:(NSString *)label
                                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons_, label, A, B, C, GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) autorelease];
  return [algo getConicPart];
}

- (IOSObjectArray *)AngularBisector3DWithNSStringArray:(IOSObjectArray *)labels
             withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
             withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, labels, g, h) autorelease];
  IOSObjectArray *lines = [algo getLines];
  return lines;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)AngularBisector3DWithNSString:(NSString *)label
                                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorPoints3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorPoints3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, A, B, C) autorelease];
  return [algo getLine];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)AngularBisector3DWithNSString:(NSString *)label
                                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
                                  withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorPoints3DOrientation *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorPoints3DOrientation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, A, B, C, orientation) autorelease];
  return [algo getLine];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D *)CircleArcSector3DWithNSString:(NSString *)label
                                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
                                                                              withInt:(jint)type {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_CircleArcSector3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, label, A, B, C, type);
}

- (id<GeogebraCommonKernelKernelNDGeoConicPartND>)CircleArcSector3DWithNSString:(NSString *)label
                                     withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                     withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                     withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
                                 withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation
                                                                        withInt:(jint)type {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(A, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(B, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(C, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    if (orientation == [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getSpace]) {
      return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_CircleArcSector3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, nil, A, B, C, type);
    }
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircle3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircle3DOrientation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(cons_, label, A, B, C, orientation, type) autorelease];
    return [algo getConicPart];
  }
  if (orientation == [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
    return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) CircleArcSectorWithNSString:label withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(C, [GeogebraCommonKernelGeosGeoPoint class]) withInt:type];
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircle3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircle3DOrientation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(cons_, label, A, B, C, orientation, type) autorelease];
  return [algo getConicPart];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)Line3DWithNSString:(NSString *)label
               withGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefX
               withGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefY
               withGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefZ {
  GeogebraCommonKernelArithmetic3DMyVec3DNode *start = [new_GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(nil_chk(coefX), 0), IOSObjectArray_Get(nil_chk(coefY), 0), IOSObjectArray_Get(nil_chk(coefZ), 0)) autorelease];
  GeogebraCommonKernelArithmetic3DMyVec3DNode *v = [new_GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(coefX, 1), IOSObjectArray_Get(coefY, 1), IOSObjectArray_Get(coefZ, 1)) autorelease];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPoint3D *pt = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentPoint3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(cons_, [start wrap]) autorelease];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentVector3D *vec = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDependentVector3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(cons_, [v wrap]) autorelease];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointVector3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, [pt getPoint3D], [vec getVector3D]) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *g = [algo getLine];
  return g;
}

- (id<GeogebraCommonKernelKernelNDGeoConicPartND>)Semicircle3DWithNSString:(NSString *)label
                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                            withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(A, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(B, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoSemicircle3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoSemicircle3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, A, B, orientation) autorelease];
    return [algo getSemicircle];
  }
  if (orientation == [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
    return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) SemicircleWithNSString:label withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [GeogebraCommonKernelGeosGeoPoint class])];
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoSemicircle3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoSemicircle3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, A, B, orientation) autorelease];
  return [algo getSemicircle];
}

- (IOSObjectArray *)Tangent3DWithNSStringArray:(IOSObjectArray *)labels
    withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
    withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) isGeoElement3D] || [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(cons_, labels, P, c) autorelease];
    return [algo getOutput];
  }
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) TangentWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoPointND:P withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (IOSObjectArray *)Tangent3DWithNSStringArray:(IOSObjectArray *)labels
     withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)l
    withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(l)) isGeoElement3D] || [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(cons_, labels, l, c) autorelease];
    return [algo getOutput];
  }
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) TangentWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoLineND:l withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (IOSObjectArray *)CommonTangents3DWithNSStringArray:(IOSObjectArray *)labels
           withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c1
           withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c2 {
  if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c1)) isGeoElement3D] || [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c2)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoCommonTangents3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCommonTangents3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_(cons_, labels, c1, c2) autorelease];
    return [algo getOutput];
  }
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) CommonTangentsWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoConicND:c1 withGeogebraCommonKernelKernelNDGeoConicND:c2];
}

- (GeogebraCommonKernelGeosGeoElement *)DiameterLine3DWithNSString:(NSString *)label
                         withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                        withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g)) isGeoElement3D] || [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, c, g) autorelease];
    return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getDiameter], [GeogebraCommonKernelGeosGeoElement class]);
  }
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) DiameterLineWithNSString:label withGeogebraCommonKernelKernelNDGeoLineND:g withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (GeogebraCommonKernelGeosGeoElement *)DiameterLine3DWithNSString:(NSString *)label
                       withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v
                        withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v)) isGeoElement3D] || [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDiameterVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, c, v) autorelease];
    return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getDiameter], [GeogebraCommonKernelGeosGeoElement class]);
  }
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) DiameterLineWithNSString:label withGeogebraCommonKernelKernelNDGeoVectorND:v withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (GeogebraCommonKernelGeosGeoElement *)LineBisector3DWithNSString:(NSString *)label
                      withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment
                    withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  if (![((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) isGeoElement3D] && orientation == [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
    return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) LineBisectorWithNSString:nil withGeogebraCommonKernelGeosGeoSegment:(GeogebraCommonKernelGeosGeoSegment *) check_class_cast(segment, [GeogebraCommonKernelGeosGeoSegment class])];
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorSegmentDirection3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoSegmentND_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, segment, orientation) autorelease];
  return [algo getLine];
}

- (GeogebraCommonKernelGeosGeoElement *)LineBisector3DWithNSString:(NSString *)label
                        withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                        withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)b
                    withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  if (![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(a)) isGeoElement3D] && ![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(b)) isGeoElement3D] && orientation == [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
    return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) LineBisectorWithNSString:label withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(a, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(b, [GeogebraCommonKernelGeosGeoPoint class])];
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorTwoPointsDirection3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoLineBisectorTwoPointsDirection3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, a, b, orientation) autorelease];
  return [algo getLine];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)Conic3DWithNSString:(NSString *)label
                withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicFivePoints3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicFivePoints3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, label, points) autorelease];
  return [algo getConic];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)EllipseHyperbola3DWithNSString:(NSString *)label
                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
                                                                   withInt:(jint)type {
  return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_EllipseHyperbola3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, label, A, B, C, type);
}

- (GeogebraCommonKernelKernelNDGeoConicND *)EllipseHyperbola3DWithNSString:(NSString *)label
                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
                            withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation
                                                                   withInt:(jint)type {
  if (![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A)) isGeoElement3D] && ![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B)) isGeoElement3D] && ![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(C)) isGeoElement3D] && orientation == [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane]) {
    return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) EllipseHyperbolaWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelKernelNDGeoPointND:B withGeogebraCommonKernelKernelNDGeoPointND:C withInt:type];
  }
  if (orientation == [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getSpace]) {
    return GeogebraCommonGeogebra3DKernel3DAlgosManager3D_EllipseHyperbola3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, nil, A, B, C, type);
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(cons_, label, A, B, C, orientation, type) autorelease];
  return [algo getConic];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)Parabola3DWithNSString:(NSString *)label
                        withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)F
                         withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)l {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, F, l) autorelease];
  return [algo getParabola];
}

- (GeogebraCommonKernelGeosGeoElement *)Locus3DWithNSString:(NSString *)label
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) LocusCheckWithGeogebraCommonKernelKernelNDGeoPointND:P withGeogebraCommonKernelKernelNDGeoPointND:Q]) {
    return nil;
  }
  return [([new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoLocus3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, Q, P) autorelease]) getLocus];
}

- (GeogebraCommonKernelGeosGeoElement *)Tangent3DWithNSString:(NSString *)label
                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
          withGeogebraCommonKernelKernelNDGeoCurveCartesianND:(GeogebraCommonKernelKernelNDGeoCurveCartesianND *)curve {
  if ([((GeogebraCommonKernelKernelNDGeoCurveCartesianND *) nil_chk(curve)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentCurve3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentCurve3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(cons_, label, point, (GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) check_class_cast(curve, [GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D class])) autorelease];
    [algo update];
    return IOSObjectArray_Get(nil_chk([algo getOutput]), 0);
  }
  return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) TangentWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:point withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(curve, [GeogebraCommonKernelGeosGeoCurveCartesian class])];
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(cons_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "Manager3D", NULL, 0x1, NULL, NULL },
    { "Point3DWithNSString:withDouble:withDouble:withDouble:withBoolean:", "Point3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "Point3DWithDouble:withDouble:withDouble:withBoolean:", "Point3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "DependentPoint3DWithNSString:withGeogebraCommonKernelArithmeticExpressionNode:", "DependentPoint3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "DependentVector3DWithNSString:withGeogebraCommonKernelArithmeticExpressionNode:", "DependentVector3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoVector3D;", 0x11, NULL, NULL },
    { "Vector3DWithNSString:withDouble:withDouble:withDouble:", "Vector3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoVector3D;", 0x11, NULL, NULL },
    { "Vector3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "Vector3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoVector3D;", 0x11, NULL, NULL },
    { "Point3DInWithNSString:withGeogebraCommonKernelRegion:withGeogebraCommonKernelMatrixCoords:withBoolean:withBoolean:", "Point3DIn", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "Point3DInWithGeogebraCommonKernelRegion:withGeogebraCommonKernelMatrixCoords:withBoolean:", "Point3DIn", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "Point3DInWithNSString:withGeogebraCommonKernelRegion:withBoolean:", "Point3DIn", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "Point3DWithNSString:withGeogebraCommonKernelPath:withDouble:withDouble:withDouble:withBoolean:withBoolean:", "Point3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "Point3DWithNSString:withGeogebraCommonKernelPath:withBoolean:", "Point3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "Point3DWithNSString:withGeogebraCommonKernelPath:withGeogebraCommonKernelArithmeticNumberValue:", "Point3D", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "MidpointWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "Midpoint", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "MidpointWithNSString:withGeogebraCommonKernelKernelNDGeoSegmentND:", "Midpoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "CenterWithNSString:withGeogebraCommonKernelKernelNDGeoConicND:", "Center", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "CenterQuadricWithNSString:withGeogebraCommonKernelKernelNDGeoQuadricND:", "CenterQuadric", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "Segment3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "Segment3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoSegment3D;", 0x11, NULL, NULL },
    { "Line3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "Line3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x11, NULL, NULL },
    { "Line3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "Line3D", "Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x11, NULL, NULL },
    { "Line3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoVectorND:", "Line3D", "Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x11, NULL, NULL },
    { "Ray3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "Ray3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoRay3D;", 0x11, NULL, NULL },
    { "OrthogonalLine3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoCoordSys2D:", "OrthogonalLine3D", "Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "OrthogonalLine3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "OrthogonalLine3D", "Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "OrthogonalLine3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "OrthogonalLine3D", "Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "OrthogonalLine3DWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "OrthogonalLine3D", "Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "OrthogonalVector3DWithNSString:withGeogebraCommonKernelKernelNDGeoCoordSys2D:", "OrthogonalVector3D", "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x1, NULL, NULL },
    { "OrthogonalVector3DWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "OrthogonalVector3D", "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x1, NULL, NULL },
    { "UnitOrthogonalVector3DWithNSString:withGeogebraCommonKernelKernelNDGeoCoordSys2D:", "UnitOrthogonalVector3D", "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x1, NULL, NULL },
    { "Polygon3DWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "Polygon3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Polygon3DWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelKernelNDGeoDirectionND:", "Polygon3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PolyLine3DWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "PolyLine3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PolyLine3DWithNSStringArray:withGeogebraCommonKernelGeosGeoList:", "PolyLine3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PrismWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "Prism", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PrismWithNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelKernelNDGeoPointND:", "Prism", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PrismWithNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelArithmeticNumberValue:", "Prism", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PyramidWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "Pyramid", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PyramidWithNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelKernelNDGeoPointND:", "Pyramid", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PyramidWithNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelArithmeticNumberValue:", "Pyramid", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Plane3DWithNSString:withDouble:withDouble:withDouble:withDouble:", "Plane3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "DependentPlane3DWithNSString:withGeogebraCommonKernelArithmeticEquation:", "DependentPlane3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "DependentQuadric3DWithNSString:withGeogebraCommonKernelArithmeticEquation:", "DependentQuadric3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "Plane3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "Plane3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "Plane3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoCoordSys2D:", "Plane3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "OrthogonalPlane3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "OrthogonalPlane3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "OrthogonalPlane3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoVectorND:", "OrthogonalPlane3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "PlaneBisectorWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "PlaneBisector", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "PlaneBisectorWithNSString:withGeogebraCommonKernelKernelNDGeoSegmentND:", "PlaneBisector", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "SphereWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "Sphere", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "SphereWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "Sphere", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "ConeWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoVectorND:withGeogebraCommonKernelArithmeticNumberValue:", "Cone", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "ConeWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "Cone", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "ConeWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelArithmeticNumberValue:", "Cone", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "ConeLimitedWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "ConeLimited", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "ConeLimitedWithNSStringArray:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelArithmeticNumberValue:", "ConeLimited", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "CylinderWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoVectorND:withGeogebraCommonKernelArithmeticNumberValue:", "Cylinder", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "CylinderWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "Cylinder", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "CylinderWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelArithmeticNumberValue:", "Cylinder", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3D;", 0x11, NULL, NULL },
    { "CylinderLimitedWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "CylinderLimited", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "CylinderLimitedWithNSStringArray:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelArithmeticNumberValue:", "CylinderLimited", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "QuadricSideWithNSString:withGeogebraCommonKernelKernelNDGeoQuadricND:", "QuadricSide", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3DPart;", 0x11, NULL, NULL },
    { "QuadricBottomWithNSString:withGeogebraCommonKernelKernelNDGeoQuadricND:", "QuadricBottom", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x11, NULL, NULL },
    { "QuadricTopWithNSString:withGeogebraCommonKernelKernelNDGeoQuadricND:", "QuadricTop", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x11, NULL, NULL },
    { "Circle3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "Circle3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x11, NULL, NULL },
    { "Circle3DWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoPointND:", "Circle3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x1, NULL, NULL },
    { "Circle3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoDirectionND:", "Circle3D", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "Circle3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "Circle3D", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "Circle3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "Circle3D", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "Plane3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "Plane3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "Plane3DWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "Plane3D", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "Plane3DWithNSString:withGeogebraCommonKernelKernelNDGeoCoordSys2D:", "Plane3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "Plane3DWithGeogebraCommonKernelKernelNDGeoCoordSys2D:", "Plane3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x11, NULL, NULL },
    { "IntersectWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "Intersect", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectionPointWithNSStringArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelGeosGeoSurfaceFinite:", "IntersectionPoint", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectionPointWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonKernelGeosGeoElement:", "IntersectionPoint", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectPathWithNSStringArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelGeosGeoSurfaceFinite:", "IntersectPath", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectPathWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonKernelGeosGeoElement:", "IntersectPath", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectPathWithGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonKernelGeosGeoPolygon:", "IntersectPath", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectRegionWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonKernelGeosGeoElement:withIntArray:", "IntersectRegion", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectRegionWithGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonKernelGeosGeoElement:", "IntersectRegion", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectWithNSString:withGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonKernelKernelNDGeoQuadricND:", "Intersect", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x1, NULL, NULL },
    { "IntersectQuadricLimitedWithNSString:withGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonKernelKernelNDGeoQuadricND:", "IntersectQuadricLimited", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "IntersectQuadricLimitedWithGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonKernelKernelNDGeoQuadricND:", "IntersectQuadricLimited", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "IntersectWithGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonKernelKernelNDGeoQuadricND:", "Intersect", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x1, NULL, NULL },
    { "IntersectAsCircleWithNSStringArray:withGeogebraCommonKernelKernelNDGeoQuadricND:withGeogebraCommonKernelKernelNDGeoQuadricND:", "IntersectAsCircle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "IntersectAsCircleWithGeogebraCommonKernelKernelNDGeoQuadricND:withGeogebraCommonKernelKernelNDGeoQuadricND:", "IntersectAsCircle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "Function2VarWithNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "Function2Var", "Lgeogebra.common.kernel.geos.GeoFunctionNVar;", 0x11, NULL, NULL },
    { "Function2VarWithNSString:withGeogebraCommonKernelGeosGeoFunctionNVar:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "Function2Var", "Lgeogebra.common.kernel.geos.GeoFunctionNVar;", 0x11, NULL, NULL },
    { "CurveCartesian3DWithNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "CurveCartesian3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoCurveCartesian3D;", 0x11, NULL, NULL },
    { "SurfaceCartesian3DWithNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "SurfaceCartesian3D", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "getIntersectionAlgorithm", "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectLineConic3D;", 0x2, NULL, NULL },
    { "IntersectLineConicWithNSStringArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "IntersectLineConic", "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectLineConicSingleWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:withDouble:withDouble:withGeogebraCommonKernelMatrixCoordMatrix:", "IntersectLineConicSingle", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectLineConicSingleWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelArithmeticNumberValue:", "IntersectLineConicSingle", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectLineConicSingleWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:withInt:", "IntersectLineConicSingle", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectLineConicSingleWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoPointND:", "IntersectLineConicSingle", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoConicND:", "getIntersectionAlgorithm", "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectConics3D;", 0x1, NULL, NULL },
    { "IntersectConicsWithNSStringArray:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoConicND:", "IntersectConics", "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectConicsSingleWithNSString:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoConicND:withDouble:withDouble:withGeogebraCommonKernelMatrixCoordMatrix:", "IntersectConicsSingle", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectConicsSingleWithNSString:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelArithmeticNumberValue:", "IntersectConicsSingle", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectConicsSingleWithNSString:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoConicND:withInt:", "IntersectConicsSingle", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectConicsSingleWithNSString:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoPointND:", "IntersectConicsSingle", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoQuadricND:", "getIntersectionAlgorithm", "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectLineQuadric3D;", 0x2, NULL, NULL },
    { "IntersectLineQuadricWithNSStringArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoQuadricND:", "IntersectLineQuadric", "[Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "IntersectLineQuadricSingleWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoQuadricND:withGeogebraCommonKernelArithmeticNumberValue:", "IntersectLineQuadricSingle", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectLineQuadricSingleWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoQuadricND:withInt:", "IntersectLineQuadricSingle", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectLineQuadricSingleWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoQuadricND:withDouble:withDouble:withGeogebraCommonKernelMatrixCoordMatrix4x4:", "IntersectLineQuadricSingle", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "IntersectLineQuadricSingleWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoQuadricND:withGeogebraCommonKernelKernelNDGeoPointND:", "IntersectLineQuadricSingle", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoCoordSys2D:withGeogebraCommonKernelKernelNDGeoConicND:", "getIntersectionAlgorithm", "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectPlaneConic;", 0x2, NULL, NULL },
    { "IntersectPlaneConicWithNSStringArray:withGeogebraCommonKernelKernelNDGeoCoordSys2D:withGeogebraCommonKernelKernelNDGeoConicND:", "IntersectPlaneConic", "[Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "IntersectPlanesWithNSString:withGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonKernelKernelNDGeoPlaneND:", "IntersectPlanes", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectPlanesWithGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonKernelKernelNDGeoPlaneND:", "IntersectPlanes", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "ClosestPointWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "ClosestPoint", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "ClosestPointWithNSString:withGeogebraCommonKernelPath:withGeogebraCommonKernelKernelNDGeoPointND:", "ClosestPoint", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "ClosestPointWithNSString:withGeogebraCommonKernelRegion:withGeogebraCommonKernelKernelNDGeoPointND:", "ClosestPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "Angle3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "Angle3D", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "Angle3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "Angle3D", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "AngleWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelKernelNDGeoDirectionND:withBoolean:", "Angle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Angle3DWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "Angle3D", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "Angle3DWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "Angle3D", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "Angle3DWithNSString:withGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonKernelKernelNDGeoPlaneND:", "Angle3D", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "Angle3DWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoPlaneND:", "Angle3D", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "createLineAngleWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "createLineAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "createLineAngleWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "createLineAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "Angle3DWithNSString:withGeogebraCommonKernelKernelNDGeoVectorND:withGeogebraCommonKernelKernelNDGeoVectorND:", "Angle3D", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "Angle3DWithNSString:withGeogebraCommonKernelKernelNDGeoVectorND:withGeogebraCommonKernelKernelNDGeoVectorND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "Angle3D", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "Angles3DWithNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:", "Angles3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Angles3DWithNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelKernelNDGeoDirectionND:", "Angles3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "LengthWithNSString:withGeogebraCommonKernelKernelNDGeoVectorND:", "Length", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "ArchimedeanSolidWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:withGeogebraCommonKernelCommandsCommandsEnum:", "ArchimedeanSolid", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "ArchimedeanSolidWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelCommandsCommandsEnum:", "ArchimedeanSolid", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "ArchimedeanSolidWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelCommandsCommandsEnum:", "ArchimedeanSolid", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "DistanceWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "Distance", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "DistanceWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPlaneND:", "Distance", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "Translate3DWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoVectorND:", "Translate3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "newGeo3DVecWithDouble:withDouble:withDouble:", "newGeo3DVec", "Lgeogebra.common.kernel.kernelND.Geo3DVec;", 0x1, NULL, NULL },
    { "Rotate3DWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "Rotate3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Rotate3DWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelKernelNDGeoLineND:", "Rotate3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Mirror3DWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoPointND:", "Mirror3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Mirror3DWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoLineND:", "Mirror3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Mirror3DWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoCoordSys2D:", "Mirror3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Dilate3DWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "Dilate3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "VolumeWithNSString:withGeogebraCommonKernelKernelNDHasVolume:", "Volume", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "OrientedHeightWithNSString:withGeogebraCommonKernelKernelNDHasHeight:", "OrientedHeight", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "CornerWithNSStringArray:withGeogebraCommonKernelKernelNDGeoConicND:", "Corner", "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x11, NULL, NULL },
    { "RegularPolygonWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoDirectionND:", "RegularPolygon", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PolyhedronNetWithNSStringArray:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelKernelNDGeoSegmentNDArray:", "PolyhedronNet", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "PolyhedronConvexWithNSStringArray:withGeogebraCommonKernelGeosGeoElementArray:", "PolyhedronConvex", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "CircumcircleArc3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "CircumcircleArc3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConicPart3D;", 0x11, NULL, NULL },
    { "CircumcircleSector3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "CircumcircleSector3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConicPart3D;", 0x11, NULL, NULL },
    { "AngularBisector3DWithNSStringArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "AngularBisector3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "AngularBisector3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "AngularBisector3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x11, NULL, NULL },
    { "AngularBisector3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AngularBisector3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x11, NULL, NULL },
    { "CircleArcSector3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withInt:", "CircleArcSector3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConicPart3D;", 0x11, NULL, NULL },
    { "CircleArcSector3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:withInt:", "CircleArcSector3D", "Lgeogebra.common.kernel.kernelND.GeoConicPartND;", 0x11, NULL, NULL },
    { "Line3DWithNSString:withGeogebraCommonKernelArithmeticExpressionValueArray:withGeogebraCommonKernelArithmeticExpressionValueArray:withGeogebraCommonKernelArithmeticExpressionValueArray:", "Line3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x1, NULL, NULL },
    { "Semicircle3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "Semicircle3D", "Lgeogebra.common.kernel.kernelND.GeoConicPartND;", 0x11, NULL, NULL },
    { "Tangent3DWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoConicND:", "Tangent3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Tangent3DWithNSStringArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "Tangent3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "CommonTangents3DWithNSStringArray:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoConicND:", "CommonTangents3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "DiameterLine3DWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "DiameterLine3D", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "DiameterLine3DWithNSString:withGeogebraCommonKernelKernelNDGeoVectorND:withGeogebraCommonKernelKernelNDGeoConicND:", "DiameterLine3D", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "LineBisector3DWithNSString:withGeogebraCommonKernelKernelNDGeoSegmentND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "LineBisector3D", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "LineBisector3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "LineBisector3D", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Conic3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "Conic3D", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "EllipseHyperbola3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withInt:", "EllipseHyperbola3D", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "EllipseHyperbola3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:withInt:", "EllipseHyperbola3D", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "Parabola3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "Parabola3D", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "Locus3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "Locus3D", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "Tangent3DWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoCurveCartesianND:", "Tangent3D", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cons_", NULL, 0x2, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosManager3D = { 2, "Manager3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 170, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosManager3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosManager3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, GeogebraCommonKernelKernel *kernel) {
  NSObject_init(self);
  GeogebraCommonGeogebra3DKernel3DAlgosManager3D_set_kernel_(self, kernel);
  GeogebraCommonGeogebra3DKernel3DAlgosManager3D_set_cons_(self, [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction]);
}

GeogebraCommonGeogebra3DKernel3DAlgosManager3D *new_GeogebraCommonGeogebra3DKernel3DAlgosManager3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosManager3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosManager3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DInWithNSString_withGeogebraCommonKernelRegion_withGeogebraCommonKernelMatrixCoords_withBoolean_withBoolean_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelRegion> region, GeogebraCommonKernelMatrixCoords *coords, jboolean addToConstruction, jboolean coords2D) {
  jboolean oldMacroMode = NO;
  if (!addToConstruction) {
    oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DInRegion *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DInRegion_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelRegion_withGeogebraCommonKernelMatrixCoords_(self->cons_, label, region, coords) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = [algo getP];
  if (coords2D) [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCartesian];
  else [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCartesian3D];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) update];
  if (!addToConstruction) {
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  return p;
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Point3DWithNSString_withGeogebraCommonKernelPath_withDouble_withDouble_withDouble_withBoolean_withBoolean_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelPath> path, jdouble x, jdouble y, jdouble z, jboolean addToConstruction, jboolean coords2D) {
  jboolean oldMacroMode = NO;
  if (!addToConstruction) {
    oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPoint3DOnPath_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelPath_withDouble_withDouble_withDouble_(self->cons_, label, path, x, y, z) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([algo getP], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  if (coords2D) [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCartesian];
  else [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCartesian3D];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) update];
  if (!addToConstruction) {
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  return p;
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonKernelAlgosAlgoElement *existingAlgo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgoDispatcher])) findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(g, [GeogebraCommonKernelGeosGeoElement class]) withGeogebraCommonKernelGeosGeoElement:c];
  if (existingAlgo != nil) return (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *) check_class_cast(existingAlgo, [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D class]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self->cons_, g, c) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self->kernel_ getAlgoDispatcher])) addIntersectionAlgorithmWithGeogebraCommonKernelAlgosAlgoIntersectAbstract:algo];
  return algo;
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineConicSingleWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoConicND *c, jint index) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineConic3D *algo = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, g, c);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(label, algo, index) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectConicsSingleWithNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, GeogebraCommonKernelKernelNDGeoConicND *A, GeogebraCommonKernelKernelNDGeoConicND *B, jint index) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConics3D *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoConicND:A withGeogebraCommonKernelKernelNDGeoConicND:B];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(label, algo, index) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, id<GeogebraCommonKernelKernelNDGeoLineND> A, GeogebraCommonKernelKernelNDGeoQuadricND *B) {
  GeogebraCommonKernelAlgosAlgoElement *existingAlgo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgoDispatcher])) findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(A, [GeogebraCommonKernelGeosGeoElement class]) withGeogebraCommonKernelGeosGeoElement:B];
  if (existingAlgo != nil) return (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *) check_class_cast(existingAlgo, [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D class]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoQuadricND_(self->cons_, A, B) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self->kernel_ getAlgoDispatcher])) addIntersectionAlgorithmWithGeogebraCommonKernelAlgosAlgoIntersectAbstract:algo];
  return algo;
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_IntersectLineQuadricSingleWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoQuadricND_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoQuadricND *q, jint index) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineQuadric3D *algo = GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, g, q);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *salgo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(label, algo, index) autorelease];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [salgo getPoint];
  return point;
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_getIntersectionAlgorithmWithGeogebraCommonKernelKernelNDGeoCoordSys2D_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, id<GeogebraCommonKernelKernelNDGeoCoordSys2D> A, GeogebraCommonKernelKernelNDGeoConicND *B) {
  GeogebraCommonKernelAlgosAlgoElement *existingAlgo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgoDispatcher])) findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(A, [GeogebraCommonKernelGeosGeoElement class]) withGeogebraCommonKernelGeosGeoElement:B];
  if (existingAlgo != nil) return (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *) check_class_cast(existingAlgo, [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic class]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoCoordSys2D_withGeogebraCommonKernelKernelNDGeoConicND_(self->cons_, A, B) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self->kernel_ getAlgoDispatcher])) addIntersectionAlgorithmWithGeogebraCommonKernelAlgosAlgoIntersectAbstract:algo];
  return algo;
}

GeogebraCommonKernelGeosGeoAngle *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePoints3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePoints3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self->cons_, label, A, B, C) autorelease];
  GeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

GeogebraCommonKernelGeosGeoAngle *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePoints3DOrientation *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePoints3DOrientation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self->cons_, label, A, B, C, orientation) autorelease];
  GeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

GeogebraCommonKernelGeosGeoAngle *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self->cons_, label, g, h) autorelease];
  GeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

GeogebraCommonKernelGeosGeoAngle *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Angle3DWithNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self->cons_, label, g, h, orientation) autorelease];
  GeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

IOSObjectArray *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_Rotate3DWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, GeogebraCommonKernelGeosGeoElement *geoRot, id<GeogebraCommonKernelGeosGeoNumberValue> phi, id<GeogebraCommonKernelKernelNDGeoPointND> center, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self->cons_, phi, center, orientation) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:geoRot withNSString:label];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_CircleArcSector3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, jint type) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircle3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircle3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self->cons_, label, A, B, C, type) autorelease];
  return [algo getConicPart];
}

GeogebraCommonKernelKernelNDGeoConicND *GeogebraCommonGeogebra3DKernel3DAlgosManager3D_EllipseHyperbola3DWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosManager3D *self, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, jint type) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self->cons_, label, A, B, C, type) autorelease];
  return [algo getConic];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosManager3D)
