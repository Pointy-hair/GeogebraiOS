//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/modes/ModeDelete.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/Hits.h"
#include "geogebra/common/euclidian/event/AbstractEvent.h"
#include "geogebra/common/euclidian/event/PointerEventType.h"
#include "geogebra/common/euclidian/modes/ModeDelete.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoAttachCopyToView.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "geogebra/common/kernel/algos/AlgorithmSet.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPenStroke.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Math.h"
#include "java/util/Iterator.h"

@interface GeogebraCommonEuclidianModesModeDelete () {
 @public
  GeogebraCommonEuclidianEuclidianView *view_;
  GeogebraCommonKernelKernel *kernel_;
  GeogebraCommonEuclidianEuclidianController *ec_;
  jboolean objDeleteMode_, penDeleteMode_;
}

- (void)updatePenDeleteModeWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)h;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianModesModeDelete, view_, GeogebraCommonEuclidianEuclidianView *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianModesModeDelete, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianModesModeDelete, ec_, GeogebraCommonEuclidianEuclidianController *)

__attribute__((unused)) static void GeogebraCommonEuclidianModesModeDelete_updatePenDeleteModeWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianModesModeDelete *self, GeogebraCommonEuclidianHits *h);

@implementation GeogebraCommonEuclidianModesModeDelete

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view {
  GeogebraCommonEuclidianModesModeDelete_initWithGeogebraCommonEuclidianEuclidianView_(self, view);
  return self;
}

- (void)handleMouseDraggedForDeleteWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)e
                                                                         withInt:(jint)deleteSize
                                                                     withBoolean:(jboolean)forceOnlyStrokes {
  if (e == nil) {
    return;
  }
  jint eventX = [((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(e)) getX];
  jint eventY = [e getY];
  id<GeogebraCommonAwtGRectangle> rect = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:eventX - deleteSize / 2 withInt:eventY - deleteSize / 2 withInt:deleteSize withInt:deleteSize];
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setDeletionRectangleWithGeogebraCommonAwtGRectangle:rect];
  [view_ setIntersectionHitsWithGeogebraCommonAwtGRectangle:rect];
  GeogebraCommonEuclidianHits *h = [view_ getHits];
  if (!self->objDeleteMode_ && !self->penDeleteMode_) {
    GeogebraCommonEuclidianModesModeDelete_updatePenDeleteModeWithGeogebraCommonEuclidianHits_(self, h);
  }
  jboolean onlyStrokes = forceOnlyStrokes || self->penDeleteMode_;
  [view_ setTransparentCursor];
  id<JavaUtilIterator> it = [((GeogebraCommonEuclidianHits *) nil_chk(h)) iterator];
  GeogebraCommonKernelAlgosAlgorithmSet *as = nil;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoPenStroke class]]) {
      GeogebraCommonKernelGeosGeoPenStroke *gps = (GeogebraCommonKernelGeosGeoPenStroke *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPenStroke class]);
      IOSObjectArray *realPoints = (IOSObjectArray *) check_class_cast([((GeogebraCommonKernelGeosGeoPenStroke *) nil_chk(gps)) getPoints], [IOSObjectArray class]);
      IOSObjectArray *dataPoints;
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm] != nil && ([[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoAttachCopyToView class]])) {
        GeogebraCommonKernelAlgosAlgoElement *ae = [geo getParentAlgorithm];
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(ae)) getInput]))->size_; i++) {
          if ([IOSObjectArray_Get(nil_chk([ae getInput]), i) isKindOfClass:[GeogebraCommonKernelGeosGeoPenStroke class]]) {
            gps = (GeogebraCommonKernelGeosGeoPenStroke *) check_class_cast(IOSObjectArray_Get(nil_chk([ae getInput]), i), [GeogebraCommonKernelGeosGeoPenStroke class]);
          }
        }
      }
      if ([((GeogebraCommonKernelGeosGeoPenStroke *) nil_chk(gps)) getParentAlgorithm] != nil && [[gps getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPolyLine class]]) {
        dataPoints = [((GeogebraCommonKernelAlgosAlgoPolyLine *) nil_chk(((GeogebraCommonKernelAlgosAlgoPolyLine *) check_class_cast([gps getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoPolyLine class])))) getPoints];
      }
      else {
        dataPoints = (IOSObjectArray *) check_class_cast([gps getPoints], [IOSObjectArray class]);
      }
      jboolean hasVisibleLine = NO;
      jboolean lastWasVisible = NO;
      if (((IOSObjectArray *) nil_chk(realPoints))->size_ == ((IOSObjectArray *) nil_chk(dataPoints))->size_) {
        for (jint i = 0; i < dataPoints->size_; i++) {
          GeogebraCommonKernelGeosGeoPoint *p = IOSObjectArray_Get(realPoints, i);
          if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) isDefined] && JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(eventX - [view_ toScreenCoordXdWithDouble:p->inhomX_]), JavaLangMath_absWithDouble_(eventY - [view_ toScreenCoordYdWithDouble:p->inhomY_])) <= deleteSize / 2) {
            [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(dataPoints, i))) setUndefined];
            if (as == nil) {
              as = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(dataPoints, i))) getAlgoUpdateSet];
            }
            else {
              [as addAllWithGeogebraCommonKernelAlgosAlgorithmSet:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(dataPoints, i))) getAlgoUpdateSet]];
            }
          }
          if (lastWasVisible && [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(dataPoints, i))) isDefined]) {
            hasVisibleLine = YES;
          }
          lastWasVisible = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(dataPoints, i))) isDefined];
        }
      }
      else {
        GeogebraCommonMainApp_debugWithNSString_(@"Can't delete points on stroke. Different number of in and output points.");
      }
      if (hasVisibleLine) {
        [it remove];
      }
    }
    else {
      if (!self->penDeleteMode_) {
        self->objDeleteMode_ = YES;
      }
      if (onlyStrokes) {
        [it remove];
      }
    }
  }
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) deleteAllWithGeogebraCommonEuclidianHits:h];
  if (as != nil) [as updateAll];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)updatePenDeleteModeWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)h {
  GeogebraCommonEuclidianModesModeDelete_updatePenDeleteModeWithGeogebraCommonEuclidianHits_(self, h);
}

- (void)mousePressedWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  self->objDeleteMode_ = NO;
  self->penDeleteMode_ = NO;
}

- (jboolean)processWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits
                                       withBoolean:(jboolean)control {
  if ([((GeogebraCommonEuclidianHits *) nil_chk(hits)) isEmpty] || self->penDeleteMode_) {
    return NO;
  }
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) addSelectedGeoWithGeogebraCommonEuclidianHits:hits withInt:1 withBoolean:NO];
  if ([ec_ selGeos] == 1) {
    IOSObjectArray *geos = [ec_ getSelectedGeos];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(geos), 0))) removeOrSetUndefinedIfHasFixedDescendent];
    return YES;
  }
  return NO;
}

- (void)dealloc {
  RELEASE_(view_);
  RELEASE_(kernel_);
  RELEASE_(ec_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:", "ModeDelete", NULL, 0x1, NULL, NULL },
    { "handleMouseDraggedForDeleteWithGeogebraCommonEuclidianEventAbstractEvent:withInt:withBoolean:", "handleMouseDraggedForDelete", "V", 0x1, NULL, NULL },
    { "updatePenDeleteModeWithGeogebraCommonEuclidianHits:", "updatePenDeleteMode", "V", 0x2, NULL, NULL },
    { "mousePressedWithGeogebraCommonEuclidianEventPointerEventTypeEnum:", "mousePressed", "V", 0x1, NULL, NULL },
    { "processWithGeogebraCommonEuclidianHits:withBoolean:", "process", "Z", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "view_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "ec_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "objDeleteMode_", NULL, 0x2, "Z", NULL, NULL,  },
    { "penDeleteMode_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianModesModeDelete = { 2, "ModeDelete", "geogebra.common.euclidian.modes", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianModesModeDelete;
}

@end

void GeogebraCommonEuclidianModesModeDelete_initWithGeogebraCommonEuclidianEuclidianView_(GeogebraCommonEuclidianModesModeDelete *self, GeogebraCommonEuclidianEuclidianView *view) {
  NSObject_init(self);
  self->objDeleteMode_ = NO;
  self->penDeleteMode_ = NO;
  GeogebraCommonEuclidianModesModeDelete_set_ec_(self, [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getEuclidianController]);
  GeogebraCommonEuclidianModesModeDelete_set_kernel_(self, [view getKernel]);
  GeogebraCommonEuclidianModesModeDelete_set_view_(self, view);
}

GeogebraCommonEuclidianModesModeDelete *new_GeogebraCommonEuclidianModesModeDelete_initWithGeogebraCommonEuclidianEuclidianView_(GeogebraCommonEuclidianEuclidianView *view) {
  GeogebraCommonEuclidianModesModeDelete *self = [GeogebraCommonEuclidianModesModeDelete alloc];
  GeogebraCommonEuclidianModesModeDelete_initWithGeogebraCommonEuclidianEuclidianView_(self, view);
  return self;
}

void GeogebraCommonEuclidianModesModeDelete_updatePenDeleteModeWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianModesModeDelete *self, GeogebraCommonEuclidianHits *h) {
  id<JavaUtilIterator> it2 = [((GeogebraCommonEuclidianHits *) nil_chk(h)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo2 = [it2 next];
    if ([geo2 isKindOfClass:[GeogebraCommonKernelGeosGeoPenStroke class]]) {
      self->penDeleteMode_ = YES;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianModesModeDelete)
