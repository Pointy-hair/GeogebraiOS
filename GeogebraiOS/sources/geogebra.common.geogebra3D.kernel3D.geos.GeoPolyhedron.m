//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoJoinPoints3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPoints.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCoordSys1D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/ConstructionElementCycle.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/PathMover.h"
#include "geogebra/common/kernel/PathMoverGeneric.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/Region.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/Traceable.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron () {
 @public
  JavaUtilTreeMap *segmentsLinked_;
  GeogebraCommonKernelConstructionElementCycle *currentFace_;
  jint topFaceIndex_;
  jboolean allLabelsAreSet__;
  JavaLangStringBuffer *sb_;
  jboolean isDefined__;
  JavaLangStringBuilder *sbToString_GeoPolyhedron_;
  jdouble volume_;
  jdouble area_;
  jboolean trace_;
  jdouble orientedHeight_;
}

- (void)addSegmentsLinkedWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon;

- (void)defaultPointsLabels;

+ (jint)usableLabelWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (void)defaultPolygonsLabels;

- (void)defaultSegmentLabels;

- (jboolean)setPolygonWithInt:(jint)index
withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p;

- (jboolean)setSegmentWithLong:(jlong)index
withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)s;

- (void)setPointSizeWithInt:(jint)size;

- (void)setPointNotVisibile;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, segmentsLinked_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, currentFace_, GeogebraCommonKernelConstructionElementCycle *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, sb_, JavaLangStringBuffer *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, sbToString_GeoPolyhedron_, JavaLangStringBuilder *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_addSegmentsLinkedWithGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self, GeogebraCommonKernelGeosGeoPolygon *polygon);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultPointsLabels(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self);

__attribute__((unused)) static jint GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_usableLabelWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultPolygonsLabels(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultSegmentLabels(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setPolygonWithInt_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self, jint index, GeogebraCommonKernelGeosGeoPolygon *p);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setSegmentWithLong_withGeogebraCommonKernelKernelNDGeoSegmentND_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self, jlong index, id<GeogebraCommonKernelKernelNDGeoSegmentND> s);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setPointSizeWithInt_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self, jint size);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setPointNotVisibile(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self);

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (void)addSegmentsLinkedWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_addSegmentsLinkedWithGeogebraCommonKernelGeosGeoPolygon_(self, polygon);
}

- (void)updateSegmentsLinked {
  [((JavaUtilTreeMap *) nil_chk(segmentsLinked_)) clear];
  for (GeogebraCommonKernelGeosGeoPolygon * __strong p in nil_chk([self getPolygonsLinked])) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_addSegmentsLinkedWithGeogebraCommonKernelGeosGeoPolygon_(self, p);
  }
}

- (id<JavaUtilCollection>)getSegmentsLinked {
  return [((JavaUtilTreeMap *) nil_chk(segmentsLinked_)) values];
}

- (id<JavaUtilCollection>)getPolygonsLinked {
  return polygonsLinked_;
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)polyhedron {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(self, polyhedron);
  return self;
}

- (void)setTypeWithInt:(jint)type {
  self->type_ = type;
}

- (jint)getType {
  return type_;
}

- (void)startNewFace {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setAndConsume_currentFace_(self, new_GeogebraCommonKernelConstructionElementCycle_init());
}

- (void)addPointToCurrentFaceWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  [((GeogebraCommonKernelConstructionElementCycle *) nil_chk(currentFace_)) addWithId:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class])];
}

- (void)endCurrentFace {
  [((GeogebraCommonKernelConstructionElementCycle *) nil_chk(currentFace_)) setDirection];
  [((JavaUtilTreeMap *) nil_chk(polygonsIndex_)) putWithId:currentFace_ withId:[new_JavaLangInteger_initWithInt_(polygonsIndexMax_) autorelease]];
  [((JavaUtilArrayList *) nil_chk(polygonsDescriptions_)) addWithId:currentFace_];
  polygonsIndexMax_++;
}

- (void)setCurrentFaceIsTopFace {
  topFaceIndex_ = polygonsIndexMax_ - 1;
}

- (void)updateFacesDeprecated {
  GeogebraCommonMainApp_debugWithNSString_(@"old file version");
  for (GeogebraCommonKernelConstructionElementCycle * __strong currentFace in nil_chk([((JavaUtilTreeMap *) nil_chk(polygonsIndex_)) keySet])) {
    if ([((JavaUtilTreeMap *) nil_chk(polygons_)) containsKeyWithId:[polygonsIndex_ getWithId:currentFace]]) continue;
    IOSObjectArray *p = [IOSObjectArray arrayWithLength:[((GeogebraCommonKernelConstructionElementCycle *) nil_chk(currentFace)) size] type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
    IOSObjectArray *s = [IOSObjectArray arrayWithLength:[currentFace size] type:GeogebraCommonKernelKernelNDGeoSegmentND_class_()];
    id<JavaUtilIterator> it2 = [currentFace iterator];
    id<GeogebraCommonKernelKernelNDGeoPointND> endPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((id<JavaUtilIterator>) nil_chk(it2)) next], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    jint j = 0;
    IOSObjectArray_Set(p, j, endPoint);
    id<GeogebraCommonKernelKernelNDGeoPointND> firstPoint = endPoint;
    for (; [it2 hasNext]; ) {
      id<GeogebraCommonKernelKernelNDGeoPointND> startPoint = endPoint;
      endPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([it2 next], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
      IOSObjectArray_Set(s, j, [self createSegmentWithGeogebraCommonKernelKernelNDGeoPointND:startPoint withGeogebraCommonKernelKernelNDGeoPointND:endPoint]);
      j++;
      IOSObjectArray_Set(p, j, endPoint);
    }
    IOSObjectArray_Set(s, j, [self createSegmentWithGeogebraCommonKernelKernelNDGeoPointND:endPoint withGeogebraCommonKernelKernelNDGeoPointND:firstPoint]);
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *polygon = [self createPolygonWithGeogebraCommonKernelKernelNDGeoPointNDArray:p withInt:[((JavaLangInteger *) nil_chk([polygonsIndex_ getWithId:currentFace])) intValue]];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setSegmentsWithGeogebraCommonKernelKernelNDGeoSegmentNDArray:s];
  }
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)createPolygonWithInt:(jint)index {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_set_currentFace_(self, [((JavaUtilArrayList *) nil_chk(polygonsDescriptions_)) getWithInt:index]);
  IOSObjectArray *p = [IOSObjectArray arrayWithLength:[((GeogebraCommonKernelConstructionElementCycle *) nil_chk(currentFace_)) size] type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
  IOSObjectArray *s = [IOSObjectArray arrayWithLength:[currentFace_ size] type:GeogebraCommonKernelKernelNDGeoSegmentND_class_()];
  id<GeogebraCommonKernelKernelNDGeoPointND> endPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([currentFace_ getWithInt:0], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
  IOSObjectArray_Set(p, 0, endPoint);
  id<GeogebraCommonKernelKernelNDGeoPointND> firstPoint = endPoint;
  jint j;
  for (j = 1; j < [currentFace_ size]; j++) {
    id<GeogebraCommonKernelKernelNDGeoPointND> startPoint = endPoint;
    endPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([currentFace_ getWithInt:j], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    IOSObjectArray_Set(s, j - 1, [self createSegmentWithGeogebraCommonKernelKernelNDGeoPointND:startPoint withGeogebraCommonKernelKernelNDGeoPointND:endPoint]);
    IOSObjectArray_Set(p, j, endPoint);
  }
  IOSObjectArray_Set(s, j - 1, [self createSegmentWithGeogebraCommonKernelKernelNDGeoPointND:endPoint withGeogebraCommonKernelKernelNDGeoPointND:firstPoint]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *polygon = [self createPolygonWithGeogebraCommonKernelKernelNDGeoPointNDArray:p withInt:index];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setSegmentsWithGeogebraCommonKernelKernelNDGeoSegmentNDArray:s];
  return polygon;
}

- (void)createFaces {
  for (jint index = 0; index < [((JavaUtilArrayList *) nil_chk(polygonsDescriptions_)) size]; index++) {
    [self createPolygonWithInt:index];
  }
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)createPolygonWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                                                                                                           withInt:(jint)index {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_withGeogebraCommonKernelGeosGeoElement_(cons_, points, NO, self) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *polygon = (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast([algo getPoly], [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class]);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setObjColorWithGeogebraCommonAwtGColor:[self getObjectColor]];
  [polygon setAlphaValueWithFloat:[self getAlphaValue]];
  [polygon setLineThicknessWithInt:[self getLineThickness]];
  [polygon setLineTypeWithInt:[self getLineType]];
  [polygon setInitLabelsCalledWithBoolean:YES];
  if (condShowObject_ != nil) {
    @try {
      [polygon setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:[self getShowObjectCondition]];
    }
    @catch (JavaLangException *e) {
    }
  }
  [((JavaUtilTreeMap *) nil_chk(polygons_)) putWithId:JavaLangInteger_valueOfWithInt_(index) withId:polygon];
  return polygon;
}

- (void)addPolygonLinkedWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon {
  [((JavaUtilArrayList *) nil_chk(polygonsLinked_)) addWithId:polygon];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_addSegmentsLinkedWithGeogebraCommonKernelGeosGeoPolygon_(self, polygon);
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) addMetaWithGeogebraCommonKernelGeosGeoElement:self];
}

- (void)addPointCreatedWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)point {
  [((JavaUtilArrayList *) nil_chk(pointsCreated_)) addWithId:point];
}

- (id<GeogebraCommonKernelKernelNDGeoSegmentND>)createSegmentWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)startPoint
                                                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)endPoint {
  GeogebraCommonKernelConstructionElementCycle *key = GeogebraCommonKernelConstructionElementCycle_SegmentDescriptionWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_((GeogebraCommonKernelGeosGeoElement *) check_class_cast(startPoint, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(endPoint, [GeogebraCommonKernelGeosGeoElement class]));
  if ([((JavaUtilTreeMap *) nil_chk(segmentsIndex_)) containsKeyWithId:key]) {
    return [((JavaUtilTreeMap *) nil_chk(segments_)) getWithId:[segmentsIndex_ getWithId:key]];
  }
  if ([((JavaUtilTreeMap *) nil_chk(segmentsLinked_)) containsKeyWithId:key]) {
    return [segmentsLinked_ getWithId:key];
  }
  return [self createNewSegmentWithGeogebraCommonKernelKernelNDGeoPointND:startPoint withGeogebraCommonKernelKernelNDGeoPointND:endPoint withGeogebraCommonKernelConstructionElementCycle:key];
}

- (id<GeogebraCommonKernelKernelNDGeoSegmentND>)createNewSegmentWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)startPoint
                                                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)endPoint
                                                          withGeogebraCommonKernelConstructionElementCycle:(GeogebraCommonKernelConstructionElementCycle *)key {
  GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *segment;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D *algoSegment = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonPluginGeoClassEnum_(cons_, startPoint, endPoint, self, GeogebraCommonPluginGeoClassEnum_get_SEGMENT3D()) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoSegment];
  segment = (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast([algoSegment getCS], [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class]);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) setObjColorWithGeogebraCommonAwtGColor:[self getObjectColor]];
  [segment setLineThicknessWithInt:[self getLineThickness]];
  [segment setLineTypeWithInt:[self getLineType]];
  if (condShowObject_ != nil) {
    @try {
      [segment setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:[self getShowObjectCondition]];
    }
    @catch (JavaLangException *e) {
    }
  }
  [self storeSegmentWithGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D:segment withGeogebraCommonKernelConstructionElementCycle:key];
  return segment;
}

- (void)storeSegmentWithGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *)segment
                        withGeogebraCommonKernelConstructionElementCycle:(GeogebraCommonKernelConstructionElementCycle *)key {
  JavaLangLong *index = [new_JavaLangLong_initWithLong_(segmentsIndexMax_) autorelease];
  [((JavaUtilTreeMap *) nil_chk(segmentsIndex_)) putWithId:key withId:index];
  [((JavaUtilTreeMap *) nil_chk(segments_)) putWithId:index withId:segment];
  segmentsIndexMax_++;
}

- (id<GeogebraCommonKernelKernelNDGeoSegmentND>)getSegmentWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)startPoint
                                                          withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)endPoint {
  GeogebraCommonKernelConstructionElementCycle *key = GeogebraCommonKernelConstructionElementCycle_SegmentDescriptionWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_((GeogebraCommonKernelGeosGeoElement *) check_class_cast(startPoint, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(endPoint, [GeogebraCommonKernelGeosGeoElement class]));
  if ([((JavaUtilTreeMap *) nil_chk(segmentsIndex_)) containsKeyWithId:key]) return [((JavaUtilTreeMap *) nil_chk(segments_)) getWithId:[segmentsIndex_ getWithId:key]];
  if ([((JavaUtilTreeMap *) nil_chk(segmentsLinked_)) containsKeyWithId:key]) return [segmentsLinked_ getWithId:key];
  return nil;
}

- (void)addSegmentLinkedWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  GeogebraCommonKernelConstructionElementCycle *key = GeogebraCommonKernelConstructionElementCycle_SegmentDescriptionWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) getStartPointAsGeoElement], [segment getEndPointAsGeoElement]);
  [((JavaUtilTreeMap *) nil_chk(segmentsLinked_)) putWithId:key withId:segment];
}

- (void)defaultLabelsWithNSStringArray:(IOSObjectArray *)labels {
  if ([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive]) {
    return;
  }
  if (labels == nil || labels->size_ == 0) labels = [IOSObjectArray arrayWithLength:1 type:NSString_class_()];
  [self setLabelWithNSString:IOSObjectArray_Get(nil_chk(labels), 0)];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultPolygonsLabels(self);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultSegmentLabels(self);
}

- (jboolean)allLabelsAreSet {
  return allLabelsAreSet__;
}

- (void)setAllLabelsAreSetWithBoolean:(jboolean)flag {
  allLabelsAreSet__ = flag;
}

- (void)initLabelsWithNSStringArray:(IOSObjectArray *)labels {
  if ([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive]) {
    return;
  }
  [self setAllLabelsAreSetWithBoolean:YES];
  if (labels == nil || labels->size_ == 0) {
    labels = [IOSObjectArray arrayWithLength:1 type:NSString_class_()];
  }
  [self setLabelWithNSString:IOSObjectArray_Get(nil_chk(labels), 0)];
  jint index = 1;
  if (labels->size_ - index < [((JavaUtilArrayList *) nil_chk(pointsCreated_)) size]) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultPointsLabels(self);
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultPolygonsLabels(self);
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultSegmentLabels(self);
    return;
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D * __strong point in pointsCreated_) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setLabelWithNSString:IOSObjectArray_Get(labels, index)];
    index++;
  }
  if (labels->size_ - index < [((JavaUtilTreeMap *) nil_chk(polygons_)) size]) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultPolygonsLabels(self);
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultSegmentLabels(self);
    return;
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([polygons_ values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setLabelWithNSString:IOSObjectArray_Get(labels, index)];
    index++;
  }
  if (labels->size_ - index < [((JavaUtilTreeMap *) nil_chk(segments_)) size]) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultSegmentLabels(self);
    return;
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([segments_ values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) setLabelWithNSString:IOSObjectArray_Get(labels, index)];
    index++;
  }
}

- (void)defaultPointsLabels {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultPointsLabels(self);
}

+ (jint)usableLabelWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_usableLabelWithGeogebraCommonKernelGeosGeoElement_(geo);
}

- (void)defaultPolygonsLabels {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultPolygonsLabels(self);
}

- (void)defaultSegmentLabels {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultSegmentLabels(self);
}

- (IOSObjectArray *)getSegments {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilTreeMap *) nil_chk(segments_)) size] type:GeogebraCommonKernelKernelNDGeoSegmentND_class_()];
  jint i = 0;
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([segments_ values])) {
    IOSObjectArray_Set(ret, i, segment);
    i++;
  }
  return ret;
}

- (IOSObjectArray *)getSegments3D {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((JavaUtilTreeMap *) nil_chk(segments_)) size] type:GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_class_()];
  jint i = 0;
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([segments_ values])) {
    IOSObjectArray_Set(ret, i, segment);
    i++;
  }
  return ret;
}

- (IOSObjectArray *)getFaces {
  IOSObjectArray *polygonsArray = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(polygonsLinked_)) size] + [((JavaUtilTreeMap *) nil_chk(polygons_)) size] type:GeogebraCommonKernelGeosGeoPolygon_class_()];
  jint index = 0;
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in polygonsLinked_) {
    IOSObjectArray_Set(polygonsArray, index, polygon);
    index++;
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk([polygons_ values])) {
    IOSObjectArray_Set(polygonsArray, index, polygon);
    index++;
  }
  return polygonsArray;
}

- (IOSObjectArray *)getFaces3D {
  IOSObjectArray *polygonsArray = [IOSObjectArray arrayWithLength:[((JavaUtilTreeMap *) nil_chk(polygons_)) size] type:GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_class_()];
  jint index = 0;
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([polygons_ values])) {
    IOSObjectArray_Set(polygonsArray, index, polygon);
    index++;
  }
  return polygonsArray;
}

- (id<JavaUtilCollection>)getFacesCollection {
  return [((JavaUtilTreeMap *) nil_chk(polygons_)) values];
}

- (GeogebraCommonKernelGeosGeoPolygon *)getFaceWithInt:(jint)index {
  jint polygonsLinkedSize = [((JavaUtilArrayList *) nil_chk(polygonsLinked_)) size];
  if (index < polygonsLinkedSize) {
    return [polygonsLinked_ getWithInt:index];
  }
  return [((JavaUtilTreeMap *) nil_chk(polygons_)) getWithId:JavaLangInteger_valueOfWithInt_(index - polygonsLinkedSize)];
}

- (jint)getFacesSize {
  return [((JavaUtilArrayList *) nil_chk(polygonsLinked_)) size] + [((JavaUtilTreeMap *) nil_chk(polygons_)) size];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)getFace3DWithInt:(jint)index {
  return [((JavaUtilTreeMap *) nil_chk(polygons_)) getWithId:JavaLangInteger_valueOfWithInt_(index)];
}

- (id<JavaUtilCollection>)getPolygons {
  return [((JavaUtilTreeMap *) nil_chk(polygons_)) values];
}

- (void)setReverseNormalsForDrawingWithBoolean:(jboolean)flag {
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) setReverseNormalForDrawingWithBoolean:flag];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setReverseNormalForDrawingWithBoolean:flag];
  }
}

- (void)setReverseNormals {
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setReverseNormal];
  }
  [self setReverseNormalsForDrawingWithBoolean:YES];
}

- (void)setEuclidianVisibleWithBoolean:(jboolean)visible {
  [super setEuclidianVisibleWithBoolean:visible];
  if ([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFileLoading]) return;
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setEuclidianVisibleWithBoolean:visible withBoolean:NO];
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) setEuclidianVisibleWithBoolean:visible withBoolean:NO];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) setEuclidianVisibleWithBoolean:visible];
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([self getSegmentsLinked])) {
    [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) setEuclidianVisibleWithBoolean:visible];
  }
}

- (void)setObjColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color {
  [super setObjColorWithGeogebraCommonAwtGColor:color];
  if ([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFileLoading]) return;
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setObjColorWithGeogebraCommonAwtGColor:color];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) setObjColorWithGeogebraCommonAwtGColor:color];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) setObjColorWithGeogebraCommonAwtGColor:color];
    [segment updateVisualStyle];
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([self getSegmentsLinked])) {
    [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) setObjColorWithGeogebraCommonAwtGColor:color];
    [segment updateVisualStyle];
  }
  [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyRepaint];
}

- (void)removeColorFunction {
  [super removeColorFunction];
  if (polygons_ == nil || [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFileLoading]) {
    return;
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) removeColorFunction];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) removeColorFunction];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) removeColorFunction];
    [segment updateVisualStyle];
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([self getSegmentsLinked])) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(segment, [GeogebraCommonKernelGeosGeoElement class])))) removeColorFunction];
    [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) updateVisualStyle];
  }
  [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyRepaint];
}

- (void)setColorFunctionWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)col {
  [super setColorFunctionWithGeogebraCommonKernelGeosGeoList:col];
  if (polygons_ == nil || [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFileLoading]) {
    return;
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setColorFunctionWithGeogebraCommonKernelGeosGeoList:col];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) setColorFunctionWithGeogebraCommonKernelGeosGeoList:col];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) setColorFunctionWithGeogebraCommonKernelGeosGeoList:col];
    [segment updateVisualStyle];
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([self getSegmentsLinked])) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(segment, [GeogebraCommonKernelGeosGeoElement class])))) setColorFunctionWithGeogebraCommonKernelGeosGeoList:col];
    [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) updateVisualStyle];
  }
  [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyRepaint];
}

- (void)setLineTypeWithInt:(jint)type {
  [super setLineTypeWithInt:type];
  if (polygons_ == nil || [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFileLoading]) return;
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setLineTypeWithInt:type withBoolean:NO];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) setLineTypeWithInt:type withBoolean:NO];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) setLineTypeWithInt:type];
    [segment updateVisualStyle];
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([self getSegmentsLinked])) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(segment, [GeogebraCommonKernelGeosGeoElement class])))) setLineTypeWithInt:type];
    [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) updateVisualStyle];
  }
}

- (void)setLayerWithInt:(jint)layer2 {
  [super setLayerWithInt:layer2];
  if (polygons_ == nil || [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFileLoading]) return;
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setLayerWithInt:layer2];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) setLayerWithInt:layer2];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) setLayerWithInt:layer2];
    [segment updateVisualStyle];
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([self getSegmentsLinked])) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(segment, [GeogebraCommonKernelGeosGeoElement class])))) setLayerWithInt:layer2];
    [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) updateVisualStyle];
  }
}

- (void)setLineTypeHiddenWithInt:(jint)type {
  [super setLineTypeHiddenWithInt:type];
  if (polygons_ == nil || [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFileLoading]) return;
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setLineTypeHiddenWithInt:type withBoolean:NO];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) setLineTypeHiddenWithInt:type withBoolean:NO];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) setLineTypeHiddenWithInt:type];
    [segment updateVisualStyle];
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([self getSegmentsLinked])) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(segment, [GeogebraCommonKernelGeosGeoElement class])))) setLineTypeHiddenWithInt:type];
    [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) updateVisualStyle];
  }
}

- (void)setLineThicknessWithInt:(jint)th {
  [super setLineThicknessWithInt:th];
  if (polygons_ == nil || [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFileLoading]) return;
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setLineThicknessWithInt:th withBoolean:NO];
    [polygon update];
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) setLineThicknessWithInt:th withBoolean:NO];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) setLineThicknessWithInt:th];
    [segment updateVisualStyle];
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([self getSegmentsLinked])) {
    [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) setLineThicknessWithInt:th];
    [segment updateVisualStyle];
  }
}

- (void)setLineThicknessOrVisibilityWithInt:(jint)th {
  [super setLineThicknessWithInt:th];
  if (polygons_ == nil || [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFileLoading]) return;
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setLineThicknessWithInt:th withBoolean:NO];
    [polygon update];
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) setLineThicknessWithInt:th withBoolean:NO];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) setLineThicknessOrVisibilityWithInt:th];
    [segment updateVisualStyle];
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([self getSegmentsLinked])) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(segment, [GeogebraCommonKernelGeosGeoElement class])))) setLineThicknessOrVisibilityWithInt:th];
    [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) updateVisualStyle];
  }
}

- (void)setAlphaValueWithFloat:(jfloat)alpha {
  [super setAlphaValueWithFloat:alpha];
  if ([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFileLoading]) return;
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setAlphaValueWithFloat:alpha];
    [polygon updateVisualStyle];
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) setAlphaValueWithFloat:alpha];
    [polygon updateVisualStyle];
  }
  [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyRepaint];
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(self) autorelease];
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_POLYHEDRON();
}

- (NSString *)getTypeString {
  switch (type_) {
    case GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_PRISM:
    return @"Prism";
    case GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_PYRAMID:
    return @"Pyramid";
    case GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_TETRAHEDRON:
    return @"Tetrahedron";
    case GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_CUBE:
    return @"Cube";
    case GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_OCTAHEDRON:
    return @"Octahedron";
    case GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_DODECAHEDRON:
    return @"Dodecahedron";
    case GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_ICOSAHEDRON:
    return @"Icosahedron";
    default:
    return @"Polyhedron";
  }
}

- (jboolean)isDefined {
  return isDefined__;
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Geo {
  return NO;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolyhedron]) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *polyhedron = (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]);
    isDefined__ = polyhedron->isDefined__;
    type_ = polyhedron->type_;
    [self setVolumeWithDouble:[polyhedron getVolume]];
    [self setAreaWithDouble:[polyhedron getArea]];
    [self setOrientedHeightWithDouble:[polyhedron getOrientedHeight]];
    topFaceIndex_ = polyhedron->topFaceIndex_;
    if (![((JavaUtilArrayList *) nil_chk(polyhedron->polygonsLinked_)) isEmpty]) {
      topFaceIndex_++;
    }
    jint index = 0;
    for (GeogebraCommonKernelGeosGeoPolygon * __strong p in polyhedron->polygonsLinked_) {
      if (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setPolygonWithInt_withGeogebraCommonKernelGeosGeoPolygon_(self, index, p)) {
        index++;
      }
    }
    for (GeogebraCommonKernelGeosGeoPolygon * __strong p in nil_chk([((JavaUtilTreeMap *) nil_chk(polyhedron->polygons_)) values])) {
      if (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setPolygonWithInt_withGeogebraCommonKernelGeosGeoPolygon_(self, index, p)) {
        index++;
      }
    }
    if (![polygons_ isEmpty]) {
      for (jint i = index; i <= [((JavaLangInteger *) nil_chk([polygons_ lastKey])) intValue]; i++) {
        [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk([polygons_ getWithId:JavaLangInteger_valueOfWithInt_(i)])) setUndefined];
      }
    }
    index = 0;
    for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong s in nil_chk([((JavaUtilTreeMap *) nil_chk(polyhedron->segmentsLinked_)) values])) {
      if (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setSegmentWithLong_withGeogebraCommonKernelKernelNDGeoSegmentND_(self, index, s)) {
        index++;
      }
    }
    for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong s in nil_chk([((JavaUtilTreeMap *) nil_chk(polyhedron->segments_)) values])) {
      if (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setSegmentWithLong_withGeogebraCommonKernelKernelNDGeoSegmentND_(self, index, s)) {
        index++;
      }
    }
    if (![segments_ isEmpty]) {
      for (jint i = index; i <= [((JavaLangLong *) nil_chk([segments_ lastKey])) longLongValue]; i++) {
        [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk([segments_ getWithId:JavaLangLong_valueOfWithLong_((jlong) i)])) setUndefined];
      }
    }
  }
}

- (jboolean)setPolygonWithInt:(jint)index
withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setPolygonWithInt_withGeogebraCommonKernelGeosGeoPolygon_(self, index, p);
}

- (jboolean)setSegmentWithLong:(jlong)index
withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)s {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setSegmentWithLong_withGeogebraCommonKernelKernelNDGeoSegmentND_(self, index, s);
}

- (void)setUndefined {
  isDefined__ = NO;
  volume_ = JavaLangDouble_NaN;
}

- (void)setDefined {
  isDefined__ = YES;
}

- (jboolean)showInAlgebraView {
  return [self isDefined];
}

- (jboolean)showInEuclidianView {
  return [self isDefined];
}

- (jboolean)isGeoPolyhedron {
  return YES;
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[self getVolume] withGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_GeoPolyhedron_)) setLengthWithInt:0];
  [sbToString_GeoPolyhedron_ appendWithNSString:label_];
  [sbToString_GeoPolyhedron_ appendWithNSString:@" = "];
  [sbToString_GeoPolyhedron_ appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[self getVolume] withGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString_GeoPolyhedron_ description];
}

- (NSString *)toStringMinimalWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_GeoPolyhedron_)) setLengthWithInt:0];
  [sbToString_GeoPolyhedron_ appendWithNSString:[self regrFormatWithDouble:[self getVolume]]];
  return [sbToString_GeoPolyhedron_ description];
}

- (jboolean)isFillable {
  return YES;
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [self getLineStyleXMLWithJavaLangStringBuilder:sb];
  [super getXMLtagsWithJavaLangStringBuilder:sb];
}

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
}

- (void)remove {
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) removeMetaWithGeogebraCommonKernelGeosGeoElement:self];
  }
  if (self != [((GeogebraCommonKernelConstruction *) nil_chk([self getConstruction])) getKeepGeo]) [super remove];
}

- (void)setVolumeWithDouble:(jdouble)volume {
  self->volume_ = volume;
}

- (jdouble)getVolume {
  return volume_;
}

- (jboolean)hasFiniteVolume {
  return [self isDefined];
}

- (void)setAreaWithDouble:(jdouble)area {
  self->area_ = area;
}

- (jdouble)getArea {
  GeogebraCommonKernelAlgosAlgoElement *algo = [self getParentAlgorithm];
  if (algo != nil && [algo isKindOfClass:[GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints class]]) {
    area_ = 0;
    for (GeogebraCommonKernelGeosGeoPolygon * __strong p in nil_chk(polygonsLinked_)) {
      area_ += [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) getArea];
    }
    for (GeogebraCommonKernelGeosGeoPolygon * __strong p in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
      if ([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) isDefined]) {
        area_ += [p getArea];
      }
    }
  }
  return area_;
}

- (jboolean)hasFiniteArea {
  return [self isDefined];
}

- (jboolean)isTraceable {
  return YES;
}

- (jboolean)getTrace {
  return trace_;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
  if (polygons_ == nil) {
    return;
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setTraceWithBoolean:trace];
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) setTraceWithBoolean:trace];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) setTraceWithBoolean:trace];
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([self getSegmentsLinked])) {
    [((id<GeogebraCommonKernelGeosTraceable>) nil_chk(((id<GeogebraCommonKernelGeosTraceable>) check_protocol_cast(segment, @protocol(GeogebraCommonKernelGeosTraceable))))) setTraceWithBoolean:trace];
  }
  [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyRepaint];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S {
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong seg in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg)) isDefined]) {
      [seg rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoPointND:S];
    }
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong p in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(p)) isDefined]) {
      [p rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoPointND:S];
    }
  }
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong seg in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg)) isDefined]) {
      [seg rotateWithGeogebraCommonKernelArithmeticNumberValue:r];
    }
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong p in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(p)) isDefined]) {
      [p rotateWithGeogebraCommonKernelArithmeticNumberValue:r];
    }
  }
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S
             withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong seg in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg)) isDefined]) {
      [seg rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoPointND:S withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
    }
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong p in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(p)) isDefined]) {
      [p rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoPointND:S withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
    }
  }
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                  withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong seg in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg)) isDefined]) {
      [seg rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoLineND:line];
    }
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong p in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(p)) isDefined]) {
      [p rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoLineND:line];
    }
  }
}

- (jboolean)isTranslateable {
  return YES;
}

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong seg in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg)) isDefined]) {
      [seg translateWithGeogebraCommonKernelMatrixCoords:v];
    }
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong p in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(p)) isDefined]) {
      [p translateWithGeogebraCommonKernelMatrixCoords:v];
    }
  }
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Q {
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong seg in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg)) isDefined]) {
      [seg mirrorWithGeogebraCommonKernelMatrixCoords:Q];
    }
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong p in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(p)) isDefined]) {
      [p mirrorWithGeogebraCommonKernelMatrixCoords:Q];
    }
  }
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g {
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong seg in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg)) isDefined]) {
      [seg mirrorWithGeogebraCommonKernelKernelNDGeoLineND:g];
    }
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong p in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(p)) isDefined]) {
      [p mirrorWithGeogebraCommonKernelKernelNDGeoLineND:g];
    }
  }
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong seg in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg)) isDefined]) {
      [seg mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:plane];
    }
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong p in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(p)) isDefined]) {
      [p mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:plane];
    }
  }
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)rval
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)S {
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong seg in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg)) isDefined]) {
      [seg dilateWithGeogebraCommonKernelArithmeticNumberValue:rval withGeogebraCommonKernelMatrixCoords:S];
    }
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong p in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(p)) isDefined]) {
      [p dilateWithGeogebraCommonKernelArithmeticNumberValue:rval withGeogebraCommonKernelMatrixCoords:S];
    }
  }
  jdouble r = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble];
  jdouble rAbs = JavaLangMath_absWithDouble_(r);
  volume_ *= rAbs * rAbs * rAbs;
  area_ *= rAbs * rAbs;
  orientedHeight_ *= r;
}

- (void)setOrientedHeightWithDouble:(jdouble)height {
  orientedHeight_ = height;
}

- (jdouble)getOrientedHeight {
  return orientedHeight_;
}

- (GeogebraCommonKernelGeosGeoPolygon *)getBottomFace {
  if ([((JavaUtilArrayList *) nil_chk(polygonsLinked_)) isEmpty]) {
    return [((JavaUtilTreeMap *) nil_chk(polygons_)) getWithId:JavaLangInteger_valueOfWithInt_(0)];
  }
  return [polygonsLinked_ getWithInt:0];
}

- (GeogebraCommonKernelGeosGeoPolygon *)getTopFace {
  return [((JavaUtilTreeMap *) nil_chk(polygons_)) getWithId:JavaLangInteger_valueOfWithInt_(topFaceIndex_)];
}

- (GeogebraCommonKernelGeosGeoPolygon *)getFirstSideFace {
  if ([((JavaUtilArrayList *) nil_chk(polygonsLinked_)) isEmpty]) {
    return [((JavaUtilTreeMap *) nil_chk(polygons_)) getWithId:JavaLangInteger_valueOfWithInt_(1)];
  }
  return [((JavaUtilTreeMap *) nil_chk(polygons_)) getWithId:JavaLangInteger_valueOfWithInt_(0)];
}

- (GeogebraCommonKernelMatrixCoords *)getTopPoint {
  GeogebraCommonKernelGeosGeoPolygon *p = [self getFirstSideFace];
  return [p getPoint3DWithInt:[((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) getPointsLength] - 1];
}

- (jboolean)isPath {
  return YES;
}

- (id<GeogebraCommonKernelPathMover>)createPathMover {
  return [new_GeogebraCommonKernelPathMoverGeneric_initWithGeogebraCommonKernelPath_(self) autorelease];
}

- (jdouble)getMaxParameter {
  return [((JavaUtilTreeMap *) nil_chk(segmentsLinked_)) size] + [((JavaUtilTreeMap *) nil_chk(segments_)) size];
}

- (jdouble)getMinParameter {
  return 0;
}

- (jboolean)isClosedPath {
  return YES;
}

- (void)pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI {
  if (![((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithGeogebraCommonKernelKernelNDGeoPointND:PI]) {
    [self pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:PI];
    return;
  }
  if (!([PI isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]])) return;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *P = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(PI, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  GeogebraCommonKernelPathParameter *pp = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(P)) getPathParameter];
  jdouble oldT = [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) getT];
  jint index = J2ObjCFpToInt([pp getT]);
  id<GeogebraCommonKernelKernelNDGeoSegmentND> seg;
  if (index < [((JavaUtilTreeMap *) nil_chk(segmentsLinked_)) size]) {
    seg = (id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(IOSObjectArray_Get(nil_chk([((id<JavaUtilCollection>) nil_chk([segmentsLinked_ values])) toArray]), index), @protocol(GeogebraCommonKernelKernelNDGeoSegmentND));
  }
  else {
    seg = (id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(IOSObjectArray_Get(nil_chk([((id<JavaUtilCollection>) nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) toArray]), index - [segmentsLinked_ size]), @protocol(GeogebraCommonKernelKernelNDGeoSegmentND));
  }
  [pp setTWithDouble:[pp getT] - index];
  [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
  [pp setTWithDouble:oldT];
}

- (void)pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI {
  if (!([PI isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]])) return;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *P = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(PI, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  GeogebraCommonKernelMatrixCoords *coordsOld = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(P)) getInhomCoords])) copyVector];
  id<GeogebraCommonKernelRegion> region = [P getRegion];
  [P setRegionWithGeogebraCommonKernelRegion:nil];
  jdouble minDist = JavaLangDouble_POSITIVE_INFINITY;
  GeogebraCommonKernelMatrixCoords *res = nil;
  jdouble param = 0;
  GeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  jint i = 0;
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segmentsLinked_)) values])) {
    [P setCoordsWithGeogebraCommonKernelMatrixCoords:coordsOld withBoolean:NO];
    if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) isDefined]) {
      [segment pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
    }
    jdouble dist;
    if ([P hasWillingCoords] && [P hasWillingDirection]) {
      dist = [((GeogebraCommonKernelMatrixCoords *) nil_chk([P getInhomCoords])) distLineWithGeogebraCommonKernelMatrixCoords:[P getWillingCoords] withGeogebraCommonKernelMatrixCoords:[P getWillingDirection]];
    }
    else {
      dist = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([P getInhomCoords])) subWithGeogebraCommonKernelMatrixCoords:coordsOld])) squareNorm];
    }
    if (dist < minDist) {
      minDist = dist;
      res = [((GeogebraCommonKernelMatrixCoords *) nil_chk([P getInhomCoords])) copyVector];
      param = i + [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) getT];
    }
    i++;
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    [P setCoordsWithGeogebraCommonKernelMatrixCoords:coordsOld withBoolean:NO];
    if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) isDefined]) {
      [segment pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
    }
    jdouble dist;
    if ([P hasWillingCoords] && [P hasWillingDirection]) {
      dist = [((GeogebraCommonKernelMatrixCoords *) nil_chk([P getInhomCoords])) distLineWithGeogebraCommonKernelMatrixCoords:[P getWillingCoords] withGeogebraCommonKernelMatrixCoords:[P getWillingDirection]];
    }
    else {
      dist = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([P getInhomCoords])) subWithGeogebraCommonKernelMatrixCoords:coordsOld])) squareNorm];
    }
    if (dist < minDist) {
      minDist = dist;
      res = [((GeogebraCommonKernelMatrixCoords *) nil_chk([P getInhomCoords])) copyVector];
      param = i + [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) getT];
    }
    i++;
  }
  [P setCoordsWithGeogebraCommonKernelMatrixCoords:res withBoolean:NO];
  [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) setTWithDouble:param];
  [P setRegionWithGeogebraCommonKernelRegion:region];
}

- (jboolean)isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI
                                                    withDouble:(jdouble)eps {
  GeogebraCommonKernelGeosGeoPoint *P = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(PI, [GeogebraCommonKernelGeosGeoPoint class]);
  if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getPath] == self) return YES;
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segmentsLinked_)) values])) {
    if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) isDefined] && [segment isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:P withDouble:eps]) return YES;
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) isDefined] && [segment isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:P withDouble:eps]) return YES;
  }
  return NO;
}

- (void)setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)cond {
  [super setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:cond];
  if ([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFileLoading]) return;
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D * __strong point in nil_chk(pointsCreated_)) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:cond];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:cond];
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:cond];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:cond];
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([self getSegmentsLinked])) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(segment, [GeogebraCommonKernelGeosGeoElement class])))) setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:cond];
  }
}

- (void)updateVisualStyle {
  [super updateVisualStyle];
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D * __strong point in nil_chk(pointsCreated_)) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) updateVisualStyle];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D * __strong polygon in nil_chk([((JavaUtilTreeMap *) nil_chk(polygons_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) updateVisualStyle];
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) updateVisualStyle];
  }
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D * __strong segment in nil_chk([((JavaUtilTreeMap *) nil_chk(segments_)) values])) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) updateVisualStyle];
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong segment in nil_chk([self getSegmentsLinked])) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(segment, [GeogebraCommonKernelGeosGeoElement class])))) updateVisualStyle];
  }
}

- (void)setPointSizeOrVisibilityWithInt:(jint)size {
  if (size > 0) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setPointSizeWithInt_(self, size);
  }
  else {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setPointNotVisibile(self);
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong p in nil_chk(polygonsLinked_)) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) setPointSizeOrVisibilityWithInt:size];
  }
}

- (void)setPointSizeWithInt:(jint)size {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setPointSizeWithInt_(self, size);
}

- (void)setPointNotVisibile {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setPointNotVisibile(self);
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (GeogebraCommonKernelArithmeticMyDouble *)getNumber {
  return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, [self getDouble]) autorelease];
}

- (jdouble)getDouble {
  return [self getVolume];
}

- (void)dealloc {
  RELEASE_(segmentsIndex_);
  RELEASE_(segments_);
  RELEASE_(segmentsLinked_);
  RELEASE_(polygonsIndex_);
  RELEASE_(polygonsDescriptions_);
  RELEASE_(polygons_);
  RELEASE_(polygonsLinked_);
  RELEASE_(pointsCreated_);
  RELEASE_(currentFace_);
  RELEASE_(sb_);
  RELEASE_(sbToString_GeoPolyhedron_);
  [super dealloc];
}

+ (IOSObjectArray *)__annotations_updateFacesDeprecated {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoPolyhedron", NULL, 0x1, NULL, NULL },
    { "addSegmentsLinkedWithGeogebraCommonKernelGeosGeoPolygon:", "addSegmentsLinked", "V", 0x2, NULL, NULL },
    { "updateSegmentsLinked", NULL, "V", 0x1, NULL, NULL },
    { "getSegmentsLinked", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getPolygonsLinked", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:", "GeoPolyhedron", NULL, 0x1, NULL, NULL },
    { "setTypeWithInt:", "setType", "V", 0x1, NULL, NULL },
    { "getType", NULL, "I", 0x1, NULL, NULL },
    { "startNewFace", NULL, "V", 0x1, NULL, NULL },
    { "addPointToCurrentFaceWithGeogebraCommonKernelKernelNDGeoPointND:", "addPointToCurrentFace", "V", 0x1, NULL, NULL },
    { "endCurrentFace", NULL, "V", 0x1, NULL, NULL },
    { "setCurrentFaceIsTopFace", NULL, "V", 0x1, NULL, NULL },
    { "updateFacesDeprecated", NULL, "V", 0x1, NULL, NULL },
    { "createPolygonWithInt:", "createPolygon", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPolygon3D;", 0x1, NULL, NULL },
    { "createFaces", NULL, "V", 0x1, NULL, NULL },
    { "createPolygonWithGeogebraCommonKernelKernelNDGeoPointNDArray:withInt:", "createPolygon", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPolygon3D;", 0x1, NULL, NULL },
    { "addPolygonLinkedWithGeogebraCommonKernelGeosGeoPolygon:", "addPolygonLinked", "V", 0x1, NULL, NULL },
    { "addPointCreatedWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:", "addPointCreated", "V", 0x1, NULL, NULL },
    { "createSegmentWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "createSegment", "Lgeogebra.common.kernel.kernelND.GeoSegmentND;", 0x1, NULL, NULL },
    { "createNewSegmentWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelConstructionElementCycle:", "createNewSegment", "Lgeogebra.common.kernel.kernelND.GeoSegmentND;", 0x4, NULL, NULL },
    { "storeSegmentWithGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D:withGeogebraCommonKernelConstructionElementCycle:", "storeSegment", "V", 0x4, NULL, NULL },
    { "getSegmentWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "getSegment", "Lgeogebra.common.kernel.kernelND.GeoSegmentND;", 0x1, NULL, NULL },
    { "addSegmentLinkedWithGeogebraCommonKernelKernelNDGeoSegmentND:", "addSegmentLinked", "V", 0x1, NULL, NULL },
    { "defaultLabelsWithNSStringArray:", "defaultLabels", "V", 0x1, NULL, NULL },
    { "allLabelsAreSet", NULL, "Z", 0x11, NULL, NULL },
    { "setAllLabelsAreSetWithBoolean:", "setAllLabelsAreSet", "V", 0x1, NULL, NULL },
    { "initLabelsWithNSStringArray:", "initLabels", "V", 0x1, NULL, NULL },
    { "defaultPointsLabels", NULL, "V", 0x2, NULL, NULL },
    { "usableLabelWithGeogebraCommonKernelGeosGeoElement:", "usableLabel", "I", 0xa, NULL, NULL },
    { "defaultPolygonsLabels", NULL, "V", 0x2, NULL, NULL },
    { "defaultSegmentLabels", NULL, "V", 0x2, NULL, NULL },
    { "getSegments", NULL, "[Lgeogebra.common.kernel.kernelND.GeoSegmentND;", 0x1, NULL, NULL },
    { "getSegments3D", NULL, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoSegment3D;", 0x1, NULL, NULL },
    { "getFaces", NULL, "[Lgeogebra.common.kernel.geos.GeoPolygon;", 0x1, NULL, NULL },
    { "getFaces3D", NULL, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPolygon3D;", 0x1, NULL, NULL },
    { "getFacesCollection", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getFaceWithInt:", "getFace", "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x1, NULL, NULL },
    { "getFacesSize", NULL, "I", 0x1, NULL, NULL },
    { "getFace3DWithInt:", "getFace3D", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPolygon3D;", 0x1, NULL, NULL },
    { "getPolygons", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "setReverseNormalsForDrawingWithBoolean:", "setReverseNormalsForDrawing", "V", 0x1, NULL, NULL },
    { "setReverseNormals", NULL, "V", 0x1, NULL, NULL },
    { "setEuclidianVisibleWithBoolean:", "setEuclidianVisible", "V", 0x1, NULL, NULL },
    { "setObjColorWithGeogebraCommonAwtGColor:", "setObjColor", "V", 0x1, NULL, NULL },
    { "removeColorFunction", NULL, "V", 0x1, NULL, NULL },
    { "setColorFunctionWithGeogebraCommonKernelGeosGeoList:", "setColorFunction", "V", 0x1, NULL, NULL },
    { "setLineTypeWithInt:", "setLineType", "V", 0x1, NULL, NULL },
    { "setLayerWithInt:", "setLayer", "V", 0x1, NULL, NULL },
    { "setLineTypeHiddenWithInt:", "setLineTypeHidden", "V", 0x1, NULL, NULL },
    { "setLineThicknessWithInt:", "setLineThickness", "V", 0x1, NULL, NULL },
    { "setLineThicknessOrVisibilityWithInt:", "setLineThicknessOrVisibility", "V", 0x1, NULL, NULL },
    { "setAlphaValueWithFloat:", "setAlphaValue", "V", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setPolygonWithInt:withGeogebraCommonKernelGeosGeoPolygon:", "setPolygon", "Z", 0x2, NULL, NULL },
    { "setSegmentWithLong:withGeogebraCommonKernelKernelNDGeoSegmentND:", "setSegment", "Z", 0x2, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "setDefined", NULL, "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "isGeoPolyhedron", NULL, "Z", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringMinimalWithGeogebraCommonKernelStringTemplate:", "toStringMinimal", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getLabelPosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "setVolumeWithDouble:", "setVolume", "V", 0x1, NULL, NULL },
    { "getVolume", NULL, "D", 0x1, NULL, NULL },
    { "hasFiniteVolume", NULL, "Z", 0x1, NULL, NULL },
    { "setAreaWithDouble:", "setArea", "V", 0x1, NULL, NULL },
    { "getArea", NULL, "D", 0x1, NULL, NULL },
    { "hasFiniteArea", NULL, "Z", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoLineND:", "rotate", "V", 0x1, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x11, NULL, NULL },
    { "translateWithGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:", "mirror", "V", 0x1, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "setOrientedHeightWithDouble:", "setOrientedHeight", "V", 0x1, NULL, NULL },
    { "getOrientedHeight", NULL, "D", 0x1, NULL, NULL },
    { "getBottomFace", NULL, "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x1, NULL, NULL },
    { "getTopFace", NULL, "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x1, NULL, NULL },
    { "getFirstSideFace", NULL, "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x1, NULL, NULL },
    { "getTopPoint", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lgeogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:", "setShowObjectCondition", "V", 0x1, "Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
    { "updateVisualStyle", NULL, "V", 0x1, NULL, NULL },
    { "setPointSizeOrVisibilityWithInt:", "setPointSizeOrVisibility", "V", 0x1, NULL, NULL },
    { "setPointSizeWithInt:", "setPointSize", "V", 0x2, NULL, NULL },
    { "setPointNotVisibile", NULL, "V", 0x2, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
    { "getNumber", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x1, NULL, NULL },
    { "getDouble", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_PYRAMID_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_PYRAMID },
    { "TYPE_PRISM_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_PRISM },
    { "TYPE_TETRAHEDRON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_TETRAHEDRON },
    { "TYPE_CUBE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_CUBE },
    { "TYPE_OCTAHEDRON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_OCTAHEDRON },
    { "TYPE_DODECAHEDRON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_DODECAHEDRON },
    { "TYPE_ICOSAHEDRON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_ICOSAHEDRON },
    { "type_", NULL, 0x0, "I", NULL, NULL,  },
    { "segmentsIndex_", NULL, 0x4, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Lgeogebra/common/kernel/ConstructionElementCycle;Ljava/lang/Long;>;",  },
    { "segmentsIndexMax_", NULL, 0x4, "J", NULL, NULL,  },
    { "segments_", NULL, 0x4, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Ljava/lang/Long;Lgeogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D;>;",  },
    { "segmentsLinked_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Lgeogebra/common/kernel/ConstructionElementCycle;Lgeogebra/common/kernel/kernelND/GeoSegmentND;>;",  },
    { "polygonsIndex_", NULL, 0x4, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Lgeogebra/common/kernel/ConstructionElementCycle;Ljava/lang/Integer;>;",  },
    { "polygonsDescriptions_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/ConstructionElementCycle;>;",  },
    { "polygonsIndexMax_", NULL, 0x4, "I", NULL, NULL,  },
    { "polygons_", NULL, 0x4, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Ljava/lang/Integer;Lgeogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D;>;",  },
    { "polygonsLinked_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoPolygon;>;",  },
    { "pointsCreated_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D;>;",  },
    { "currentFace_", NULL, 0x2, "Lgeogebra.common.kernel.ConstructionElementCycle;", NULL, NULL,  },
    { "topFaceIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "allLabelsAreSet__", "allLabelsAreSet", 0x2, "Z", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuffer;", NULL, NULL,  },
    { "isDefined__", "isDefined", 0x2, "Z", NULL, NULL,  },
    { "sbToString_GeoPolyhedron_", "sbToString", 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "volume_", NULL, 0x2, "D", NULL, NULL,  },
    { "area_", NULL, 0x2, "D", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
    { "orientedHeight_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron = { 2, "GeoPolyhedron", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 113, methods, 28, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoElement3D_initWithGeogebraCommonKernelConstruction_(self, c);
  self->segmentsIndexMax_ = 0;
  self->polygonsIndexMax_ = 0;
  self->allLabelsAreSet__ = NO;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setAndConsume_sb_(self, new_JavaLangStringBuffer_init());
  self->isDefined__ = YES;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setAndConsume_sbToString_GeoPolyhedron_(self, new_JavaLangStringBuilder_initWithInt_(50));
  self->volume_ = JavaLangDouble_NaN;
  self->area_ = JavaLangDouble_NaN;
  [self setConstructionDefaults];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setAndConsume_polygonsIndex_(self, new_JavaUtilTreeMap_init());
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setAndConsume_polygonsDescriptions_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setAndConsume_polygons_(self, new_JavaUtilTreeMap_init());
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setAndConsume_segmentsIndex_(self, new_JavaUtilTreeMap_init());
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setAndConsume_segments_(self, new_JavaUtilTreeMap_init());
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setAndConsume_segmentsLinked_(self, new_JavaUtilTreeMap_init());
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setAndConsume_polygonsLinked_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setAndConsume_pointsCreated_(self, new_JavaUtilArrayList_init());
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_addSegmentsLinkedWithGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self, GeogebraCommonKernelGeosGeoPolygon *polygon) {
  if ([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) getSegments] != nil) {
    {
      IOSObjectArray *a__ = [polygon getSegments];
      id<GeogebraCommonKernelKernelNDGeoSegmentND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<GeogebraCommonKernelKernelNDGeoSegmentND> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<GeogebraCommonKernelKernelNDGeoSegmentND> segment = *b__++;
        [self addSegmentLinkedWithGeogebraCommonKernelKernelNDGeoSegmentND:segment];
      }
    }
  }
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *polyhedron) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonKernelConstruction_(self, [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron)) getConstruction]);
  [self setWithGeogebraCommonKernelGeosGeoElement:polyhedron];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *polyhedron) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(self, polyhedron);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultPointsLabels(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self) {
  for (id<GeogebraCommonKernelKernelNDGeoPointND> __strong point in nil_chk(self->pointsCreated_)) [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) setLabelWithNSString:nil];
}

jint GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_usableLabelWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initialize();
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) return 2;
  else if ([((NSString *) nil_chk([geo getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) contains:@"_"]) return 2;
  else return 0;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultPolygonsLabels(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self) {
  for (GeogebraCommonKernelConstructionElementCycle * __strong key in nil_chk([((JavaUtilTreeMap *) nil_chk(self->polygonsIndex_)) keySet])) {
    NSString *label = nil;
    jint labelUsability = 0;
    IOSObjectArray *points = [IOSObjectArray arrayWithLength:[((GeogebraCommonKernelConstructionElementCycle *) nil_chk(key)) size] type:NSString_class_()];
    jint indexFirstPointName = 0;
    jint i = 0;
    for (id<JavaUtilIterator> it = [key iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (labelUsability < 2); ) {
      GeogebraCommonKernelGeosGeoElement *p = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([it next], [GeogebraCommonKernelGeosGeoElement class]);
      labelUsability += GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_usableLabelWithGeogebraCommonKernelGeosGeoElement_(p);
      if (labelUsability < 2) {
        IOSObjectArray_Set(points, i, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(p)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
        if ([((NSString *) nil_chk(IOSObjectArray_Get(points, i))) compareToIgnoreCase:IOSObjectArray_Get(points, indexFirstPointName)] < 0) indexFirstPointName = i;
        i++;
      }
    }
    if (labelUsability < 2) {
      [((JavaLangStringBuffer *) nil_chk(self->sb_)) setLengthWithInt:0];
      [self->sb_ appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Name.face"]];
      jint indexSecondPointPlus = indexFirstPointName + 1;
      if (indexSecondPointPlus == points->size_) indexSecondPointPlus = 0;
      jint indexSecondPointMinus = indexFirstPointName - 1;
      if (indexSecondPointMinus == -1) indexSecondPointMinus = points->size_ - 1;
      if ([((NSString *) nil_chk(IOSObjectArray_Get(points, indexSecondPointPlus))) compareToIgnoreCase:IOSObjectArray_Get(points, indexSecondPointMinus)] < 0) {
        for (jint j = indexFirstPointName; j < points->size_; j++) [self->sb_ appendWithNSString:IOSObjectArray_Get(points, j)];
        for (jint j = 0; j < indexFirstPointName; j++) [self->sb_ appendWithNSString:IOSObjectArray_Get(points, j)];
      }
      else {
        for (jint j = indexFirstPointName; j >= 0; j--) [self->sb_ appendWithNSString:IOSObjectArray_Get(points, j)];
        for (jint j = points->size_ - 1; j > indexFirstPointName; j--) [self->sb_ appendWithNSString:IOSObjectArray_Get(points, j)];
      }
      label = [self->sb_ description];
    }
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk([((JavaUtilTreeMap *) nil_chk(self->polygons_)) getWithId:[self->polygonsIndex_ getWithId:key]])) setLabelWithNSString:label];
  }
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_defaultSegmentLabels(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self) {
  for (GeogebraCommonKernelConstructionElementCycle * __strong key in nil_chk([((JavaUtilTreeMap *) nil_chk(self->segmentsIndex_)) keySet])) {
    jint labelUsability = 0;
    NSString *label = nil;
    IOSObjectArray *points = [IOSObjectArray arrayWithLength:2 type:NSString_class_()];
    jint i = 0;
    for (id<JavaUtilIterator> it = [((GeogebraCommonKernelConstructionElementCycle *) nil_chk(key)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (labelUsability < 2); ) {
      GeogebraCommonKernelGeosGeoElement *p = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([it next], [GeogebraCommonKernelGeosGeoElement class]);
      labelUsability += GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_usableLabelWithGeogebraCommonKernelGeosGeoElement_(p);
      if (labelUsability < 2) {
        IOSObjectArray_Set(points, i, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(p)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
        i++;
      }
    }
    if (labelUsability < 2) {
      [((JavaLangStringBuffer *) nil_chk(self->sb_)) setLengthWithInt:0];
      [self->sb_ appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Name.edge"]];
      if ([((NSString *) nil_chk(IOSObjectArray_Get(points, 0))) compareToIgnoreCase:IOSObjectArray_Get(points, 1)] < 0) {
        [self->sb_ appendWithNSString:IOSObjectArray_Get(points, 0)];
        [self->sb_ appendWithNSString:IOSObjectArray_Get(points, 1)];
      }
      else {
        [self->sb_ appendWithNSString:IOSObjectArray_Get(points, 1)];
        [self->sb_ appendWithNSString:IOSObjectArray_Get(points, 0)];
      }
      label = [self->sb_ description];
    }
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk([((JavaUtilTreeMap *) nil_chk(self->segments_)) getWithId:[self->segmentsIndex_ getWithId:key]])) setLabelWithNSString:label];
  }
}

jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setPolygonWithInt_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self, jint index, GeogebraCommonKernelGeosGeoPolygon *p) {
  if (![((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) isDefined]) {
    return NO;
  }
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *poly = [((JavaUtilTreeMap *) nil_chk(self->polygons_)) getWithId:JavaLangInteger_valueOfWithInt_(index)];
  if (poly == nil) {
    poly = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_([self getConstruction]) autorelease];
    [self->polygons_ putWithId:JavaLangInteger_valueOfWithInt_(index) withId:poly];
  }
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(poly)) setWithGeogebraCommonKernelGeosGeoElement:p];
  return YES;
}

jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setSegmentWithLong_withGeogebraCommonKernelKernelNDGeoSegmentND_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self, jlong index, id<GeogebraCommonKernelKernelNDGeoSegmentND> s) {
  if (![((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(s)) isDefined]) {
    return NO;
  }
  GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *seg = [((JavaUtilTreeMap *) nil_chk(self->segments_)) getWithId:JavaLangLong_valueOfWithLong_(index)];
  if (seg == nil) {
    seg = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_initWithGeogebraCommonKernelConstruction_([self getConstruction]) autorelease];
    [self->segments_ putWithId:JavaLangLong_valueOfWithLong_(index) withId:seg];
  }
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg)) setSegmentWithGeogebraCommonKernelKernelNDGeoSegmentND:s];
  return YES;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setPointSizeWithInt_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self, jint size) {
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D * __strong point in nil_chk(self->pointsCreated_)) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setEuclidianVisibleIfNoConditionToShowObjectWithBoolean:YES];
    [point setPointSizeWithInt:size];
    [point updateRepaint];
  }
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_setPointNotVisibile(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self) {
  for (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D * __strong point in nil_chk(self->pointsCreated_)) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setEuclidianVisibleIfNoConditionToShowObjectWithBoolean:NO];
    [point updateRepaint];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron)
