//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoLocusND.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GPoint2D.h"
#include "geogebra/common/awt/GRectangle2D.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Macro.h"
#include "geogebra/common/kernel/MacroKernel.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/PathMover.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoLocusND.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLocusND.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelAlgosAlgoLocusND () {
 @public
  IOSObjectArray *efficientInput_AlgoLocusND_, *standardInput_;
  id<GeogebraCommonKernelPath> path_;
  id<GeogebraCommonKernelPathMover> pathMover_;
  IOSObjectArray *nearToScreenRect_;
  jboolean continuous_;
  jboolean foundDefined_;
  jboolean maxTimeExceeded_;
  GeogebraCommonKernelConstruction *macroCons_;
  GeogebraCommonKernelMacroKernel *macroKernel_;
  JavaUtilTreeSet *locusConsOrigElements_;
  JavaUtilTreeSet *Qin_;
  jint views_;
  IOSObjectArray *qcopyCache_;
  jint cacheIndex_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (void)buildLocusMacroConstructionWithJavaUtilTreeSet:(JavaUtilTreeSet *)locusConsElements;

- (void)resetMacroConstruction;

+ (jboolean)isPathIterableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoElement;

- (void)pcopyUpdateCascade;

- (void)clearCache;

- (GeogebraCommonAwtGPoint2D *)getCachedPointWithDouble:(jdouble)param;

- (void)putCachedPointWithDouble:(jdouble)param
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Qcopy;

- (jboolean)distanceOKWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusND, efficientInput_AlgoLocusND_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusND, standardInput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusND, path_, id<GeogebraCommonKernelPath>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusND, pathMover_, id<GeogebraCommonKernelPathMover>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusND, nearToScreenRect_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusND, macroCons_, GeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusND, macroKernel_, GeogebraCommonKernelMacroKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusND, locusConsOrigElements_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusND, Qin_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusND, qcopyCache_, IOSObjectArray *)

static jint GeogebraCommonKernelAlgosAlgoLocusND_MAX_Y_PIXEL_DIST_ = 5;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoLocusND, MAX_Y_PIXEL_DIST_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelAlgosAlgoLocusND, MAX_Y_PIXEL_DIST_, jint)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusND_init__(GeogebraCommonKernelAlgosAlgoLocusND *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusND_buildLocusMacroConstructionWithJavaUtilTreeSet_(GeogebraCommonKernelAlgosAlgoLocusND *self, JavaUtilTreeSet *locusConsElements);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusND_resetMacroConstruction(GeogebraCommonKernelAlgosAlgoLocusND *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusND_compute(GeogebraCommonKernelAlgosAlgoLocusND *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoLocusND_isPathIterableWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *geoElement);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusND_pcopyUpdateCascade(GeogebraCommonKernelAlgosAlgoLocusND *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusND_clearCache(GeogebraCommonKernelAlgosAlgoLocusND *self);

__attribute__((unused)) static GeogebraCommonAwtGPoint2D *GeogebraCommonKernelAlgosAlgoLocusND_getCachedPointWithDouble_(GeogebraCommonKernelAlgosAlgoLocusND *self, jdouble param);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusND_putCachedPointWithDouble_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoLocusND *self, jdouble param, id<GeogebraCommonKernelKernelNDGeoPointND> Qcopy);

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoLocusND_distanceOKWithGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoLocusND *self, id<GeogebraCommonKernelKernelNDGeoPointND> Q);

jint GeogebraCommonKernelAlgosAlgoLocusND_MAX_TIME_FOR_ONE_STEP_ = 500;
jint GeogebraCommonKernelAlgosAlgoLocusND_MAX_X_PIXEL_DIST_ = 5;

@implementation GeogebraCommonKernelAlgosAlgoLocusND

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                                                 withInt:(jint)min_steps
                                             withBoolean:(jboolean)registerCE {
  GeogebraCommonKernelAlgosAlgoLocusND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_withBoolean_(self, cons, Q, P, min_steps, registerCE);
  return self;
}

- (void)createMaxDistances {
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_maxXdist_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_maxYdist_(self, [IOSDoubleArray newArrayWithLength:3]);
}

- (void)createStartPosWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (GeogebraCommonKernelGeosGeoLocusND *)newGeoLocusWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonKernelAlgosAlgoLocusND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, Q, P);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Locus();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_LOCUS;
}

- (JavaUtilArrayList *)getMoveableInputPoints {
  return nil;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getQ {
  return locusPoint_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getLocusPoint {
  return locusPoint_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getMovingPoint {
  return movingPoint_;
}

- (void)init__ {
  GeogebraCommonKernelAlgosAlgoLocusND_init__(self);
}

- (void)setInputOutput {
  JavaUtilTreeSet *inSet = [new_JavaUtilTreeSet_init() autorelease];
  [inSet addWithId:[((id<GeogebraCommonKernelPath>) nil_chk(path_)) toGeoElement]];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(Qin_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent] || [geo isPointOnPath]) {
      [inSet addWithId:geo];
    }
  }
  [inSet removeWithId:movingPoint_];
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_efficientInput_AlgoLocusND_(self, [IOSObjectArray newArrayWithLength:[inSet size] type:GeogebraCommonKernelGeosGeoElement_class_()]);
  it = [inSet iterator];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(efficientInput_AlgoLocusND_, i, [it next]);
    i++;
  }
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_standardInput_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(standardInput_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(locusPoint_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(standardInput_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(movingPoint_, [GeogebraCommonKernelGeosGeoElement class]));
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:locus_];
  [self setEfficientDependenciesWithGeogebraCommonKernelGeosGeoElementArray:standardInput_ withGeogebraCommonKernelGeosGeoElementArray:efficientInput_AlgoLocusND_];
}

- (GeogebraCommonKernelGeosGeoLocusND *)getLocus {
  return locus_;
}

- (void)buildLocusMacroConstructionWithJavaUtilTreeSet:(JavaUtilTreeSet *)locusConsElements {
  GeogebraCommonKernelAlgosAlgoLocusND_buildLocusMacroConstructionWithJavaUtilTreeSet_(self, locusConsElements);
}

- (void)resetMacroConstruction {
  GeogebraCommonKernelAlgosAlgoLocusND_resetMacroConstruction(self);
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoLocusND_compute(self);
}

- (jboolean)differentFromLastWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)areEqualWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                    withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (jboolean)isPathIterableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoElement {
  return GeogebraCommonKernelAlgosAlgoLocusND_isPathIterableWithGeogebraCommonKernelGeosGeoElement_(geoElement);
}

- (void)pcopyUpdateCascade {
  GeogebraCommonKernelAlgosAlgoLocusND_pcopyUpdateCascade(self);
}

- (void)clearCache {
  GeogebraCommonKernelAlgosAlgoLocusND_clearCache(self);
}

- (GeogebraCommonAwtGPoint2D *)getCachedPointWithDouble:(jdouble)param {
  return GeogebraCommonKernelAlgosAlgoLocusND_getCachedPointWithDouble_(self, param);
}

- (void)putCachedPointWithDouble:(jdouble)param
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Qcopy {
  GeogebraCommonKernelAlgosAlgoLocusND_putCachedPointWithDouble_withGeogebraCommonKernelKernelNDGeoPointND_(self, param, Qcopy);
}

- (IOSObjectArray *)createQCopyCache {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setQCopyCacheWithGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)copy_
          withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)newCache {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)insertPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                                                  withBoolean:(jboolean)lineTo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isFarAwayWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                                                        withInt:(jint)i {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)distanceOKWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q
                               withGeogebraCommonAwtGRectangle2D:(id<GeogebraCommonAwtGRectangle2D>)rectangle {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)distanceOKWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  return GeogebraCommonKernelAlgosAlgoLocusND_distanceOKWithGeogebraCommonKernelKernelNDGeoPointND_(self, Q);
}

- (jboolean)distanceSmallWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q
                                                        withBoolean:(jboolean)orInsteadOfAnd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isVisibleInEVWithInt:(jint)i {
  switch (i) {
    case 1:
    if (![((GeogebraCommonKernelGeosGeoLocusND *) nil_chk(locus_)) isVisibleInViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN]) return NO;
    if (![((GeogebraCommonEuclidianEuclidianView *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getEuclidianView1])) isShowing]) return NO;
    return YES;
    case 2:
    if (![((GeogebraCommonKernelGeosGeoLocusND *) nil_chk(locus_)) isVisibleInViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2]) return NO;
    if (![((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) hasEuclidianView2WithInt:1]) return NO;
    return YES;
    case 3:
    if (![((GeogebraCommonKernelGeosGeoLocusND *) nil_chk(locus_)) isVisibleInView3D]) return NO;
    if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isEuclidianView3Dinited]) return [((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk([((GeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) getEuclidianView3D])) isShowing];
  }
  return NO;
}

- (void)updateScreenBordersIfNecessary {
  for (jint i = 0; i < ((IOSBooleanArray *) nil_chk(visibleEV_))->size_; i++) {
    if ([self isVisibleInEVWithInt:i + 1] != IOSBooleanArray_Get(visibleEV_, i)) {
      [self updateScreenBorders];
      return;
    }
  }
}

- (void)updateScreenBordersWithInt:(jint)i {
  *IOSDoubleArray_GetRef(nil_chk(xmax_), i) = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXmaxWithInt:i];
  *IOSDoubleArray_GetRef(nil_chk(xmin_), i) = [kernel_ getXminWithInt:i];
  *IOSDoubleArray_GetRef(nil_chk(ymax_), i) = [kernel_ getYmaxWithInt:i];
  *IOSDoubleArray_GetRef(nil_chk(ymin_), i) = [kernel_ getYminWithInt:i];
  [self setMaxDistancesWithInt:i];
  [((id<GeogebraCommonAwtGRectangle2D>) nil_chk(IOSObjectArray_Get(nil_chk(nearToScreenRect_), i))) setFrameWithDouble:IOSDoubleArray_Get(nil_chk(farXmin_), i) withDouble:IOSDoubleArray_Get(nil_chk(farYmin_), i) withDouble:IOSDoubleArray_Get(nil_chk(farXmax_), i) - IOSDoubleArray_Get(farXmin_, i) withDouble:IOSDoubleArray_Get(nil_chk(farYmax_), i) - IOSDoubleArray_Get(farYmin_, i)];
}

- (void)setMaxDistancesWithInt:(jint)i {
  *IOSDoubleArray_GetRef(nil_chk(maxXdist_), i) = GeogebraCommonKernelAlgosAlgoLocusND_MAX_X_PIXEL_DIST_ / [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXscaleWithInt:i];
  *IOSDoubleArray_GetRef(nil_chk(maxYdist_), i) = GeogebraCommonKernelAlgosAlgoLocusND_MAX_Y_PIXEL_DIST_ / [kernel_ getYscaleWithInt:i];
  jdouble widthRW = IOSDoubleArray_Get(nil_chk(xmax_), i) - IOSDoubleArray_Get(nil_chk(xmin_), i);
  jdouble heightRW = IOSDoubleArray_Get(nil_chk(ymax_), i) - IOSDoubleArray_Get(nil_chk(ymin_), i);
  *IOSDoubleArray_GetRef(nil_chk(farXmin_), i) = IOSDoubleArray_Get(xmin_, i) - widthRW / 2;
  *IOSDoubleArray_GetRef(nil_chk(farXmax_), i) = IOSDoubleArray_Get(xmax_, i) + widthRW / 2;
  *IOSDoubleArray_GetRef(nil_chk(farYmin_), i) = IOSDoubleArray_Get(ymin_, i) - heightRW / 2;
  *IOSDoubleArray_GetRef(nil_chk(farYmax_), i) = IOSDoubleArray_Get(ymax_, i) + heightRW / 2;
}

- (void)updateScreenBorders {
  for (jint i = 0; i < ((IOSBooleanArray *) nil_chk(visibleEV_))->size_; i++) {
    *IOSBooleanArray_GetRef(visibleEV_, i) = [self isVisibleInEVWithInt:i + 1];
  }
  if (IOSBooleanArray_Get(visibleEV_, 0) && IOSBooleanArray_Get(visibleEV_, 1)) {
    views_ = 2;
  }
  else {
    views_ = 1;
  }
  if (IOSBooleanArray_Get(visibleEV_, 2)) {
    views_++;
  }
  for (jint i = 0; i < visibleEV_->size_; i++) {
    if (IOSBooleanArray_Get(visibleEV_, i)) {
      [self updateScreenBordersWithInt:i];
    }
  }
}

- (jboolean)euclidianViewUpdate {
  [self updateScreenBorders];
  [self update];
  return NO;
}

- (void)dealloc {
  RELEASE_(movingPoint_);
  RELEASE_(locusPoint_);
  RELEASE_(locus_);
  RELEASE_(efficientInput_AlgoLocusND_);
  RELEASE_(standardInput_);
  RELEASE_(path_);
  RELEASE_(pathMover_);
  RELEASE_(Pcopy_);
  RELEASE_(Qcopy_);
  RELEASE_(PstartPos_);
  RELEASE_(QstartPos_);
  RELEASE_(maxXdist_);
  RELEASE_(maxYdist_);
  RELEASE_(xmin_);
  RELEASE_(xmax_);
  RELEASE_(ymin_);
  RELEASE_(ymax_);
  RELEASE_(farXmin_);
  RELEASE_(farXmax_);
  RELEASE_(farYmin_);
  RELEASE_(farYmax_);
  RELEASE_(nearToScreenRect_);
  RELEASE_(lastFarAway_);
  RELEASE_(macroCons_);
  RELEASE_(macroKernel_);
  RELEASE_(locusConsOrigElements_);
  RELEASE_(Qin_);
  RELEASE_(paramCache_);
  RELEASE_(qcopyCache_);
  RELEASE_(visibleEV_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withInt:withBoolean:", "AlgoLocusND", NULL, 0x1, NULL, NULL },
    { "createMaxDistances", NULL, "V", 0x4, NULL, NULL },
    { "createStartPosWithGeogebraCommonKernelConstruction:", "createStartPos", "V", 0x404, NULL, NULL },
    { "newGeoLocusWithGeogebraCommonKernelConstruction:", "newGeoLocus", "Lgeogebra.common.kernel.geos.GeoLocusND;", 0x404, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoLocusND", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getMoveableInputPoints", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getQ", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getLocusPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getMovingPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "init__", "init", "V", 0x2, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getLocus", NULL, "Lgeogebra.common.kernel.geos.GeoLocusND;", 0x1, NULL, NULL },
    { "buildLocusMacroConstructionWithJavaUtilTreeSet:", "buildLocusMacroConstruction", "V", 0x2, NULL, NULL },
    { "resetMacroConstruction", NULL, "V", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "differentFromLastWithGeogebraCommonKernelKernelNDGeoPointND:", "differentFromLast", "Z", 0x404, NULL, NULL },
    { "areEqualWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "areEqual", "Z", 0x404, NULL, NULL },
    { "isPathIterableWithGeogebraCommonKernelGeosGeoElement:", "isPathIterable", "Z", 0xa, NULL, NULL },
    { "pcopyUpdateCascade", NULL, "V", 0x2, NULL, NULL },
    { "clearCache", NULL, "V", 0x2, NULL, NULL },
    { "getCachedPointWithDouble:", "getCachedPoint", "Lgeogebra.common.awt.GPoint2D;", 0x2, NULL, NULL },
    { "putCachedPointWithDouble:withGeogebraCommonKernelKernelNDGeoPointND:", "putCachedPoint", "V", 0x2, NULL, NULL },
    { "createQCopyCache", NULL, "[Lgeogebra.common.kernel.MyPoint;", 0x404, NULL, NULL },
    { "setQCopyCacheWithGeogebraCommonKernelMyPoint:withGeogebraCommonKernelKernelNDGeoPointND:", "setQCopyCache", "V", 0x404, NULL, "(TT;Lgeogebra/common/kernel/kernelND/GeoPointND;)V" },
    { "newCache", NULL, "TT;", 0x404, NULL, "()TT;" },
    { "insertPointWithGeogebraCommonKernelKernelNDGeoPointND:withBoolean:", "insertPoint", "V", 0x404, NULL, NULL },
    { "isFarAwayWithGeogebraCommonKernelKernelNDGeoPointND:withInt:", "isFarAway", "Z", 0x404, NULL, NULL },
    { "distanceOKWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonAwtGRectangle2D:", "distanceOK", "Z", 0x404, NULL, NULL },
    { "distanceOKWithGeogebraCommonKernelKernelNDGeoPointND:", "distanceOK", "Z", 0x2, NULL, NULL },
    { "distanceSmallWithGeogebraCommonKernelKernelNDGeoPointND:withBoolean:", "distanceSmall", "Z", 0x404, NULL, NULL },
    { "isVisibleInEVWithInt:", "isVisibleInEV", "Z", 0x0, NULL, NULL },
    { "updateScreenBordersIfNecessary", NULL, "V", 0x0, NULL, NULL },
    { "updateScreenBordersWithInt:", "updateScreenBorders", "V", 0x0, NULL, NULL },
    { "setMaxDistancesWithInt:", "setMaxDistances", "V", 0x4, NULL, NULL },
    { "updateScreenBorders", NULL, "V", 0x0, NULL, NULL },
    { "euclidianViewUpdate", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_TIME_FOR_ONE_STEP_", NULL, 0x9, "I", &GeogebraCommonKernelAlgosAlgoLocusND_MAX_TIME_FOR_ONE_STEP_, NULL,  },
    { "MIN_STEPS_INSTANCE_", NULL, 0x1, "I", NULL, NULL,  },
    { "MAX_X_PIXEL_DIST_", NULL, 0xc, "I", &GeogebraCommonKernelAlgosAlgoLocusND_MAX_X_PIXEL_DIST_, NULL,  },
    { "MAX_Y_PIXEL_DIST_", NULL, 0xa, "I", &GeogebraCommonKernelAlgosAlgoLocusND_MAX_Y_PIXEL_DIST_, NULL,  },
    { "movingPoint_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "locusPoint_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "locus_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoLocusND;", NULL, "Lgeogebra/common/kernel/geos/GeoLocusND<TT;>;",  },
    { "efficientInput_AlgoLocusND_", "efficientInput", 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "standardInput_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "path_", NULL, 0x2, "Lgeogebra.common.kernel.Path;", NULL, NULL,  },
    { "pathMover_", NULL, 0x2, "Lgeogebra.common.kernel.PathMover;", NULL, NULL,  },
    { "pointCount_", NULL, 0x4, "I", NULL, NULL,  },
    { "Pcopy_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "Qcopy_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "PstartPos_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "QstartPos_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "lastX_", NULL, 0x4, "D", NULL, NULL,  },
    { "lastY_", NULL, 0x4, "D", NULL, NULL,  },
    { "maxXdist_", NULL, 0x4, "[D", NULL, NULL,  },
    { "maxYdist_", NULL, 0x4, "[D", NULL, NULL,  },
    { "xmin_", NULL, 0x4, "[D", NULL, NULL,  },
    { "xmax_", NULL, 0x4, "[D", NULL, NULL,  },
    { "ymin_", NULL, 0x4, "[D", NULL, NULL,  },
    { "ymax_", NULL, 0x4, "[D", NULL, NULL,  },
    { "farXmin_", NULL, 0x4, "[D", NULL, NULL,  },
    { "farXmax_", NULL, 0x4, "[D", NULL, NULL,  },
    { "farYmin_", NULL, 0x4, "[D", NULL, NULL,  },
    { "farYmax_", NULL, 0x4, "[D", NULL, NULL,  },
    { "nearToScreenRect_", NULL, 0x2, "[Lgeogebra.common.awt.GRectangle2D;", NULL, NULL,  },
    { "continuous_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lastFarAway_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "foundDefined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "maxTimeExceeded_", NULL, 0x2, "Z", NULL, NULL,  },
    { "macroCons_", NULL, 0x2, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "macroKernel_", NULL, 0x2, "Lgeogebra.common.kernel.MacroKernel;", NULL, NULL,  },
    { "locusConsOrigElements_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/kernel/algos/ConstructionElement;>;",  },
    { "Qin_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "views_", NULL, 0x2, "I", NULL, NULL,  },
    { "paramCache_", NULL, 0x4, "[D", NULL, NULL,  },
    { "qcopyCache_", NULL, 0x2, "[Lgeogebra.common.kernel.MyPoint;", NULL, "[TT;",  },
    { "cacheIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "visibleEV_", NULL, 0x4, "[Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoLocusND = { 2, "AlgoLocusND", "geogebra.common.kernel.algos", NULL, 0x401, 38, methods, 42, fields, 0, NULL, 0, NULL, NULL, "<T:Lgeogebra/common/kernel/MyPoint;>Lgeogebra/common/kernel/algos/AlgoElement;" };
  return &_GeogebraCommonKernelAlgosAlgoLocusND;
}

@end

void GeogebraCommonKernelAlgosAlgoLocusND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_withBoolean_(GeogebraCommonKernelAlgosAlgoLocusND *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> Q, id<GeogebraCommonKernelKernelNDGeoPointND> P, jint min_steps, jboolean registerCE) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->MIN_STEPS_INSTANCE_ = GeogebraCommonKernelPathMover_MIN_STEPS;
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_xmin_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_xmax_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_ymin_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_ymax_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_farXmin_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_farXmax_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_farYmin_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_farYmax_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_nearToScreenRect_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangle2D], [GeogebraCommonFactoriesAwtFactory_get_prototype_() newRectangle2D], [GeogebraCommonFactoriesAwtFactory_get_prototype_() newRectangle2D] } count:3 type:GeogebraCommonAwtGRectangle2D_class_()]);
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_lastFarAway_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO, NO } count:3]);
  self->views_ = 1;
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_paramCache_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonKernelAlgosAlgoLocusND_set_qcopyCache_(self, [self createQCopyCache]);
  self->cacheIndex_ = 0;
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_visibleEV_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO, NO } count:3]);
  [self createMaxDistances];
  self->MIN_STEPS_INSTANCE_ = min_steps;
  GeogebraCommonKernelAlgosAlgoLocusND_set_movingPoint_(self, P);
  GeogebraCommonKernelAlgosAlgoLocusND_set_locusPoint_(self, Q);
  GeogebraCommonKernelAlgosAlgoLocusND_set_path_(self, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPath]);
  GeogebraCommonKernelAlgosAlgoLocusND_set_pathMover_(self, [((id<GeogebraCommonKernelPath>) nil_chk(self->path_)) createPathMover]);
  [self createStartPosWithGeogebraCommonKernelConstruction:cons];
  GeogebraCommonKernelAlgosAlgoLocusND_set_locus_(self, [self newGeoLocusWithGeogebraCommonKernelConstruction:cons]);
  GeogebraCommonKernelAlgosAlgoLocusND_init__(self);
  [self updateScreenBorders];
  [self setInputOutput];
  if (registerCE) {
    [((GeogebraCommonKernelConstruction *) nil_chk(cons)) registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:self];
  }
  GeogebraCommonKernelAlgosAlgoLocusND_compute(self);
  [self->path_ pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
}

void GeogebraCommonKernelAlgosAlgoLocusND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoLocusND *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> Q, id<GeogebraCommonKernelKernelNDGeoPointND> P) {
  GeogebraCommonKernelAlgosAlgoLocusND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_withBoolean_(self, cons, Q, P, GeogebraCommonKernelPathMover_MIN_STEPS, YES);
  [((GeogebraCommonKernelGeosGeoLocusND *) nil_chk(self->locus_)) setLabelWithNSString:label];
}

void GeogebraCommonKernelAlgosAlgoLocusND_init__(GeogebraCommonKernelAlgosAlgoLocusND *self) {
  GeogebraCommonKernelAlgosAlgoLocusND_set_Qin_(self, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->locusPoint_, [GeogebraCommonKernelGeosGeoElement class])))) getAllPredecessors]);
  GeogebraCommonKernelAlgosAlgoLocusND_setAndConsume_locusConsOrigElements_(self, new_JavaUtilTreeSet_init());
  JavaUtilTreeSet *usedAlgoIds = [new_JavaUtilTreeSet_init() autorelease];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(self->Qin_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *parent = [it next];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(parent)) isLabelSet] && [parent isChildOfWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movingPoint_, [GeogebraCommonKernelGeosGeoElement class])]) {
      GeogebraCommonKernelMacro_addDependentElementWithGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_(parent, self->locusConsOrigElements_, usedAlgoIds);
    }
  }
  jboolean isLabeledP = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->movingPoint_)) isLabelSet];
  if (!isLabeledP) {
    [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movingPoint_, [GeogebraCommonKernelGeosGeoElement class])) setLabelSimpleWithNSString:[((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movingPoint_, [GeogebraCommonKernelGeosGeoElement class])) getDefaultLabel]];
    ((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movingPoint_, [GeogebraCommonKernelGeosGeoElement class]))->labelSet_ = YES;
  }
  jboolean isLabeledQ = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->locusPoint_)) isLabelSet];
  if (!isLabeledQ) {
    [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->locusPoint_, [GeogebraCommonKernelGeosGeoElement class])) setLabelSimpleWithNSString:[((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->locusPoint_, [GeogebraCommonKernelGeosGeoElement class])) getDefaultLabel]];
    ((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->locusPoint_, [GeogebraCommonKernelGeosGeoElement class]))->labelSet_ = YES;
  }
  GeogebraCommonKernelMacro_addDependentElementWithGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movingPoint_, [GeogebraCommonKernelGeosGeoElement class]), self->locusConsOrigElements_, usedAlgoIds);
  GeogebraCommonKernelMacro_addDependentElementWithGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->locusPoint_, [GeogebraCommonKernelGeosGeoElement class]), self->locusConsOrigElements_, usedAlgoIds);
  GeogebraCommonKernelAlgosAlgoLocusND_buildLocusMacroConstructionWithJavaUtilTreeSet_(self, self->locusConsOrigElements_);
  if (!isLabeledP) ((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movingPoint_, [GeogebraCommonKernelGeosGeoElement class]))->labelSet_ = NO;
  if (!isLabeledQ) ((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->locusPoint_, [GeogebraCommonKernelGeosGeoElement class]))->labelSet_ = NO;
}

void GeogebraCommonKernelAlgosAlgoLocusND_buildLocusMacroConstructionWithJavaUtilTreeSet_(GeogebraCommonKernelAlgosAlgoLocusND *self, JavaUtilTreeSet *locusConsElements) {
  GeogebraCommonKernelAlgosAlgoLocusND_set_macroKernel_(self, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) newMacroKernel]);
  [((GeogebraCommonKernelMacroKernel *) nil_chk(self->macroKernel_)) setGlobalVariableLookupWithBoolean:YES];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(locusConsElements)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelAlgosConstructionElement *ce = [it next];
    if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isGeoElement]) {
      GeogebraCommonKernelGeosGeoElement *geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoElement class]);
      [self->macroKernel_ addReservedLabelWithNSString:[geo getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    }
  }
  @try {
    NSString *locusConsXML = [((JavaLangStringBuilder *) nil_chk(GeogebraCommonKernelMacro_buildMacroXMLWithGeogebraCommonKernelKernel_withJavaUtilSet_(self->kernel_, locusConsElements))) description];
    [self->macroKernel_ loadXMLWithNSString:locusConsXML];
    GeogebraCommonKernelAlgosAlgoLocusND_set_Pcopy_(self, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self->macroKernel_ lookupLabelWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->movingPoint_, [GeogebraCommonKernelGeosGeoElement class])))) getLabelSimple]], @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->Pcopy_, [GeogebraCommonKernelGeosGeoElement class])))) setFixedWithBoolean:NO];
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->Pcopy_)) setPathWithGeogebraCommonKernelPath:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->movingPoint_)) getPath]];
    GeogebraCommonKernelAlgosAlgoLocusND_set_Qcopy_(self, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self->macroKernel_ lookupLabelWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->locusPoint_, [GeogebraCommonKernelGeosGeoElement class])))) getLabelSimple]], @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
    GeogebraCommonKernelAlgosAlgoLocusND_set_macroCons_(self, [self->macroKernel_ getConstruction]);
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    [((GeogebraCommonKernelGeosGeoLocusND *) nil_chk(self->locus_)) setUndefined];
    GeogebraCommonKernelAlgosAlgoLocusND_set_macroCons_(self, nil);
  }
}

void GeogebraCommonKernelAlgosAlgoLocusND_resetMacroConstruction(GeogebraCommonKernelAlgosAlgoLocusND *self) {
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(self->locusConsOrigElements_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelAlgosConstructionElement *ce = [it next];
    if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isGeoElement]) {
      GeogebraCommonKernelGeosGeoElement *geoOrig = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoElement class]);
      if (![geoOrig isGeoFunction]) {
        GeogebraCommonKernelGeosGeoElement *geoCopy = [((GeogebraCommonKernelConstruction *) nil_chk(self->macroCons_)) lookupLabelWithNSString:[geoOrig getLabelSimple]];
        if (geoCopy != nil) {
          @try {
            [geoCopy setWithGeogebraCommonKernelGeosGeoElement:geoOrig];
            [geoCopy update];
          }
          @catch (JavaLangException *e) {
            GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"AlgoLocus: error in resetMacroConstruction(): ", [((JavaLangException *) nil_chk(e)) getMessage]));
          }
        }
      }
    }
  }
}

void GeogebraCommonKernelAlgosAlgoLocusND_compute(GeogebraCommonKernelAlgosAlgoLocusND *self) {
  if (![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->movingPoint_)) isDefined] || self->macroCons_ == nil || !GeogebraCommonKernelAlgosAlgoLocusND_isPathIterableWithGeogebraCommonKernelGeosGeoElement_([((id<GeogebraCommonKernelPath>) nil_chk(self->path_)) toGeoElement])) {
    [((GeogebraCommonKernelGeosGeoLocusND *) nil_chk(self->locus_)) setUndefined];
    return;
  }
  [self updateScreenBordersIfNecessary];
  [((GeogebraCommonKernelGeosGeoLocusND *) nil_chk(self->locus_)) clearPoints];
  GeogebraCommonKernelAlgosAlgoLocusND_clearCache(self);
  self->pointCount_ = 0;
  self->lastX_ = JavaLangDouble_MAX_VALUE;
  self->lastY_ = JavaLangDouble_MAX_VALUE;
  self->maxTimeExceeded_ = NO;
  self->foundDefined_ = NO;
  jboolean prevQcopyDefined = NO;
  jint max_runs;
  self->continuous_ = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isContinuous];
  [((GeogebraCommonKernelMacroKernel *) nil_chk(self->macroKernel_)) setContinuousWithBoolean:self->continuous_];
  GeogebraCommonKernelAlgosAlgoLocusND_resetMacroConstruction(self);
  [((GeogebraCommonKernelConstruction *) nil_chk(self->macroCons_)) updateConstruction];
  [((id<GeogebraCommonKernelPathMover>) nil_chk(self->pathMover_)) init__WithGeogebraCommonKernelKernelNDGeoPointND:self->Pcopy_ withInt:self->MIN_STEPS_INSTANCE_];
  if (self->continuous_) {
    max_runs = GeogebraCommonKernelGeosGeoLocusND_MAX_PATH_RUNS;
  }
  else {
    max_runs = 1;
  }
  GeogebraCommonKernelAlgosAlgoLocusND_pcopyUpdateCascade(self);
  prevQcopyDefined = ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->Qcopy_)) isDefined] && ![self->Qcopy_ isInfinite]);
  jint runs = 1;
  jint MAX_LOOPS = 2 * GeogebraCommonKernelPathMover_MAX_POINTS * self->views_;
  jint whileLoops = 0;
  do {
    jboolean finishedRun = NO;
    while (!finishedRun && !self->maxTimeExceeded_ && self->pointCount_ <= GeogebraCommonKernelPathMover_MAX_POINTS * self->views_ && whileLoops <= MAX_LOOPS) {
      whileLoops++;
      jboolean parameterJump = ![self->pathMover_ getNextWithGeogebraCommonKernelKernelNDGeoPointND:self->Pcopy_];
      jboolean stepChanged = NO;
      GeogebraCommonKernelAlgosAlgoLocusND_pcopyUpdateCascade(self);
      if ([self->Qcopy_ isDefined] && ![self->Qcopy_ isInfinite]) {
        if (!parameterJump) {
          while ([self->Qcopy_ isDefined] && ![self->Qcopy_ isInfinite] && !GeogebraCommonKernelAlgosAlgoLocusND_distanceOKWithGeogebraCommonKernelKernelNDGeoPointND_(self, self->Qcopy_) && !self->maxTimeExceeded_) {
            jboolean smallerStep = [self->pathMover_ smallerStep];
            if (!smallerStep) break;
            stepChanged = YES;
            [self->pathMover_ stepBack];
            [self->pathMover_ getNextWithGeogebraCommonKernelKernelNDGeoPointND:self->Pcopy_];
            GeogebraCommonKernelAlgosAlgoLocusND_pcopyUpdateCascade(self);
          }
          if ([self->Qcopy_ isDefined] && ![self->Qcopy_ isInfinite]) {
            [self insertPointWithGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_ withBoolean:[self distanceSmallWithGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_ withBoolean:YES]];
            prevQcopyDefined = YES;
          }
        }
        else {
          [self insertPointWithGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_ withBoolean:[self distanceSmallWithGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_ withBoolean:YES]];
          prevQcopyDefined = YES;
        }
      }
      else {
        if (prevQcopyDefined && !parameterJump) {
          [self->pathMover_ stepBack];
          if (![self->pathMover_ smallerStep]) {
            prevQcopyDefined = NO;
          }
          else stepChanged = YES;
        }
      }
      if (!stepChanged) {
        [self->pathMover_ biggerStep];
      }
      if (![self->pathMover_ hasNext]) {
        if ([self distanceSmallWithGeogebraCommonKernelKernelNDGeoPointND:self->QstartPos_ withBoolean:YES]) {
          [self insertPointWithGeogebraCommonKernelKernelNDGeoPointND:self->QstartPos_ withBoolean:YES];
          finishedRun = YES;
        }
        else {
          while (![self->pathMover_ hasNext] && [self->pathMover_ smallerStep]) {
          }
          if (![self->pathMover_ hasNext]) finishedRun = YES;
        }
      }
    }
    if (self->maxTimeExceeded_) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:@"AlgoLocus: max time exceeded"];
      return;
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->Pcopy_, [GeogebraCommonKernelGeosGeoElement class])))) setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->PstartPos_, [GeogebraCommonKernelGeosGeoElement class])];
    GeogebraCommonKernelAlgosAlgoLocusND_pcopyUpdateCascade(self);
    if ([self differentFromLastWithGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_]) [self insertPointWithGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_ withBoolean:[self distanceSmallWithGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_ withBoolean:YES]];
    if ([self->pathMover_ hasPositiveOrientation]) {
      jboolean equal = [self areEqualWithGeogebraCommonKernelKernelNDGeoPointND:self->QstartPos_ withGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_];
      if (equal) {
        break;
      }
    }
    [self->pathMover_ resetStartParameter];
    runs++;
  }
  while (runs < max_runs);
  [self->locus_ setDefinedWithBoolean:self->foundDefined_];
}

jboolean GeogebraCommonKernelAlgosAlgoLocusND_isPathIterableWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *geoElement) {
  GeogebraCommonKernelAlgosAlgoLocusND_initialize();
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geoElement)) isGeoImplicitPoly]) return [((GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(geoElement, [GeogebraCommonKernelImplicitGeoImplicitPoly class])) isOnScreen];
  return [geoElement isDefined];
}

void GeogebraCommonKernelAlgosAlgoLocusND_pcopyUpdateCascade(GeogebraCommonKernelAlgosAlgoLocusND *self) {
  if (self->continuous_) {
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->Pcopy_)) updateCascade];
  }
  else {
    jdouble param = ((GeogebraCommonKernelPathParameter *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->Pcopy_)) getPathParameter]))->t_;
    GeogebraCommonAwtGPoint2D *cachedPoint = GeogebraCommonKernelAlgosAlgoLocusND_getCachedPointWithDouble_(self, param);
    if (cachedPoint == nil) {
      jlong startTime = JavaLangSystem_currentTimeMillis();
      [self->Pcopy_ updateCascade];
      jlong updateTime = JavaLangSystem_currentTimeMillis() - startTime;
      if (updateTime > GeogebraCommonKernelAlgosAlgoLocusND_MAX_TIME_FOR_ONE_STEP_) {
        GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$J", @"AlgoLocus: max time exceeded ", updateTime));
        self->maxTimeExceeded_ = YES;
      }
      GeogebraCommonKernelAlgosAlgoLocusND_putCachedPointWithDouble_withGeogebraCommonKernelKernelNDGeoPointND_(self, param, self->Qcopy_);
    }
    else {
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->Qcopy_)) setCoordsWithDouble:[cachedPoint getX] withDouble:[cachedPoint getY] withDouble:1.0];
    }
  }
  if (!self->foundDefined_ && [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->Qcopy_)) isDefined] && ![self->Qcopy_ isInfinite]) {
    [((id<GeogebraCommonKernelPathMover>) nil_chk(self->pathMover_)) init__WithGeogebraCommonKernelKernelNDGeoPointND:self->Pcopy_ withInt:self->MIN_STEPS_INSTANCE_];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->PstartPos_, [GeogebraCommonKernelGeosGeoElement class])))) setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->Pcopy_, [GeogebraCommonKernelGeosGeoElement class])];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->QstartPos_, [GeogebraCommonKernelGeosGeoElement class])))) setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->Qcopy_, [GeogebraCommonKernelGeosGeoElement class])];
    self->foundDefined_ = YES;
    [self insertPointWithGeogebraCommonKernelKernelNDGeoPointND:self->Qcopy_ withBoolean:NO];
  }
}

void GeogebraCommonKernelAlgosAlgoLocusND_clearCache(GeogebraCommonKernelAlgosAlgoLocusND *self) {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(self->paramCache_))->size_; i++) {
    *IOSDoubleArray_GetRef(self->paramCache_, i) = JavaLangDouble_NaN;
    if (IOSObjectArray_Get(nil_chk(self->qcopyCache_), i) == nil) IOSObjectArray_Set(self->qcopyCache_, i, [self newCache]);
  }
}

GeogebraCommonAwtGPoint2D *GeogebraCommonKernelAlgosAlgoLocusND_getCachedPointWithDouble_(GeogebraCommonKernelAlgosAlgoLocusND *self, jdouble param) {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(self->paramCache_))->size_; i++) {
    if (param == IOSDoubleArray_Get(self->paramCache_, i)) return IOSObjectArray_Get(nil_chk(self->qcopyCache_), i);
  }
  return nil;
}

void GeogebraCommonKernelAlgosAlgoLocusND_putCachedPointWithDouble_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoLocusND *self, jdouble param, id<GeogebraCommonKernelKernelNDGeoPointND> Qcopy) {
  self->cacheIndex_++;
  if (self->cacheIndex_ >= ((IOSDoubleArray *) nil_chk(self->paramCache_))->size_) self->cacheIndex_ = 0;
  *IOSDoubleArray_GetRef(self->paramCache_, self->cacheIndex_) = param;
  [self setQCopyCacheWithGeogebraCommonKernelMyPoint:IOSObjectArray_Get(nil_chk(self->qcopyCache_), self->cacheIndex_) withGeogebraCommonKernelKernelNDGeoPointND:Qcopy];
}

jboolean GeogebraCommonKernelAlgosAlgoLocusND_distanceOKWithGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoLocusND *self, id<GeogebraCommonKernelKernelNDGeoPointND> Q) {
  IOSBooleanArray *distanceOK = [IOSBooleanArray arrayWithBooleans:(jboolean[]){ NO, NO, NO } count:3];
  for (jint i = 0; i < distanceOK->size_; i++) {
    if (IOSBooleanArray_Get(nil_chk(self->lastFarAway_), i) && [self isFarAwayWithGeogebraCommonKernelKernelNDGeoPointND:Q withInt:i]) {
      *IOSBooleanArray_GetRef(distanceOK, i) = [self distanceOKWithGeogebraCommonKernelKernelNDGeoPointND:Q withGeogebraCommonAwtGRectangle2D:IOSObjectArray_Get(nil_chk(self->nearToScreenRect_), i)];
    }
    else {
      *IOSBooleanArray_GetRef(distanceOK, i) = [self distanceSmallWithGeogebraCommonKernelKernelNDGeoPointND:Q withBoolean:NO];
    }
  }
  for (jint i = 0; i < distanceOK->size_; i++) {
    if (!IOSBooleanArray_Get(distanceOK, i)) {
      return NO;
    }
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoLocusND)
