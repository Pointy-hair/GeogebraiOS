//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdPolyLine.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdPolyLine.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelCommandsCmdPolyLine

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdPolyLine_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  {
    jint size;
    jboolean penStroke;
    IOSObjectArray *points;
    jboolean is3D;
    switch (n) {
      case 0:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
      case 1:
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList]) return [self PolyLineWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class])];
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      case 2:
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList]) {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoBoolean]) {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      }
      return [self PolyLineWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class])];
      default:
      size = n;
      penStroke = NO;
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, ((IOSObjectArray *) nil_chk(arg))->size_ - 1))) isGeoBoolean]) {
        size = size - 1;
        penStroke = [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, arg->size_ - 1), [GeogebraCommonKernelGeosGeoBoolean class])))) getBoolean];
      }
      points = [IOSObjectArray arrayWithLength:size type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
      is3D = NO;
      for (jint i = 0; i < size; i++) {
        if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, i))) isGeoPoint])) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, i)];
        IOSObjectArray_Set(points, i, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, i), @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
        is3D = [self checkIs3DWithBoolean:is3D withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, i)];
      }
      return [self PolyLineWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoPointNDArray:points withBoolean:penStroke withBoolean:is3D];
    }
  }
}

- (IOSObjectArray *)PolyLineWithNSStringArray:(IOSObjectArray *)labels
          withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)pointList {
  GeogebraCommonKernelAlgosAlgoPolyLine *algo = [new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(cons_, labels, pointList) autorelease];
  return [algo getOutput];
}

- (jboolean)checkIs3DWithBoolean:(jboolean)is3D
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return NO;
}

- (IOSObjectArray *)PolyLineWithNSStringArray:(IOSObjectArray *)labels
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                                  withBoolean:(jboolean)penStroke
                                  withBoolean:(jboolean)is3D {
  return [((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) PolyLineWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoPointNDArray:points withBoolean:penStroke];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdPolyLine", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "PolyLineWithNSStringArray:withGeogebraCommonKernelGeosGeoList:", "PolyLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "checkIs3DWithBoolean:withGeogebraCommonKernelGeosGeoElement:", "checkIs3D", "Z", 0x4, NULL, NULL },
    { "PolyLineWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withBoolean:withBoolean:", "PolyLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdPolyLine = { 2, "CmdPolyLine", "geogebra.common.kernel.commands", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdPolyLine;
}

@end

void GeogebraCommonKernelCommandsCmdPolyLine_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdPolyLine *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdPolyLine *new_GeogebraCommonKernelCommandsCmdPolyLine_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdPolyLine *self = [GeogebraCommonKernelCommandsCmdPolyLine alloc];
  GeogebraCommonKernelCommandsCmdPolyLine_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdPolyLine)
