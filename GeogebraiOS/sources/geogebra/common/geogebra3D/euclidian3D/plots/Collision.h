//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/plots/Collision.java
//

#ifndef _GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_H_
#define _GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_H_

#include "J2ObjC_header.h"

@class IOSFloatArray;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangFloat;

#define GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_USE_EPSILON_TEST YES
#define GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_EPSILON 1.0E-5f

@interface GeogebraCommonGeogebra3DEuclidian3DPlotsCollision : NSObject

#pragma mark Public

- (instancetype)init;

+ (jboolean)rayBoxIntersectWithFloatArray:(IOSFloatArray *)box
                           withFloatArray:(IOSFloatArray *)origin
                           withFloatArray:(IOSFloatArray *)t
                           withFloatArray:(IOSFloatArray *)entry_
                           withFloatArray:(IOSFloatArray *)exit;

+ (IOSFloatArray *)segmentBoundingBoxWithFloatArray:(IOSFloatArray *)p0
                                     withFloatArray:(IOSFloatArray *)p1;

+ (jboolean)segmentTriIntersectWithFloatArray:(IOSFloatArray *)p0
                               withFloatArray:(IOSFloatArray *)p1
                               withFloatArray:(IOSFloatArray *)t
                               withFloatArray:(IOSFloatArray *)intersection;

+ (IOSFloatArray *)triangleBoundingBoxWithFloatArray:(IOSFloatArray *)tri;

+ (IOSFloatArray *)triTriIntersectWithFloatArray:(IOSFloatArray *)t0
                                  withFloatArray:(IOSFloatArray *)t1
                             withJavaLangBoolean:(JavaLangBoolean *)coplanar
                             withJavaLangBoolean:(JavaLangBoolean *)intersect;

+ (IOSObjectArray *)triTriIntersectionWithGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)t1
                                      withGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)t2;

#pragma mark Package-Private

+ (jint)rayTriIntersectWithFloatArray:(IOSFloatArray *)p0
                       withFloatArray:(IOSFloatArray *)p1
                       withFloatArray:(IOSFloatArray *)t
                    withJavaLangFloat:(JavaLangFloat *)param
                       withFloatArray:(IOSFloatArray *)intersection;

@end

J2OBJC_STATIC_INIT(GeogebraCommonGeogebra3DEuclidian3DPlotsCollision)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DPlotsCollision, USE_EPSILON_TEST, jboolean)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DPlotsCollision, EPSILON, jfloat)

FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_AAB_NORMALS_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DPlotsCollision, AAB_NORMALS_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DPlotsCollision, AAB_NORMALS_, IOSObjectArray *)

FOUNDATION_EXPORT IOSFloatArray *GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_triangleBoundingBoxWithFloatArray_(IOSFloatArray *tri);

FOUNDATION_EXPORT IOSFloatArray *GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_segmentBoundingBoxWithFloatArray_withFloatArray_(IOSFloatArray *p0, IOSFloatArray *p1);

FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_triTriIntersectionWithGeogebraCommonKernelMatrixCoordsArray_withGeogebraCommonKernelMatrixCoordsArray_(IOSObjectArray *t1, IOSObjectArray *t2);

FOUNDATION_EXPORT IOSFloatArray *GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_triTriIntersectWithFloatArray_withFloatArray_withJavaLangBoolean_withJavaLangBoolean_(IOSFloatArray *t0, IOSFloatArray *t1, JavaLangBoolean *coplanar, JavaLangBoolean *intersect);

FOUNDATION_EXPORT jint GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_rayTriIntersectWithFloatArray_withFloatArray_withFloatArray_withJavaLangFloat_withFloatArray_(IOSFloatArray *p0, IOSFloatArray *p1, IOSFloatArray *t, JavaLangFloat *param, IOSFloatArray *intersection);

FOUNDATION_EXPORT jboolean GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_rayBoxIntersectWithFloatArray_withFloatArray_withFloatArray_withFloatArray_withFloatArray_(IOSFloatArray *box, IOSFloatArray *origin, IOSFloatArray *t, IOSFloatArray *entry_, IOSFloatArray *exit);

FOUNDATION_EXPORT jboolean GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_segmentTriIntersectWithFloatArray_withFloatArray_withFloatArray_withFloatArray_(IOSFloatArray *p0, IOSFloatArray *p1, IOSFloatArray *t, IOSFloatArray *intersection);

FOUNDATION_EXPORT void GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_init(GeogebraCommonGeogebra3DEuclidian3DPlotsCollision *self);

FOUNDATION_EXPORT GeogebraCommonGeogebra3DEuclidian3DPlotsCollision *new_GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DEuclidian3DPlotsCollision)

#endif // _GeogebraCommonGeogebra3DEuclidian3DPlotsCollision_H_
