//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/openGL/ManagerShaders.java
//

#ifndef _GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_H_
#define _GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_H_

#include "J2ObjC_header.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "java/util/ArrayList.h"

@class GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D;
@class GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet;
@class GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer;
@class GeogebraCommonKernelMatrixCoords;
@class IOSDoubleArray;
@class IOSObjectArray;
@class JavaUtilTreeMap;
@protocol GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer;

@interface GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders : GeogebraCommonGeogebra3DEuclidian3DOpenGLManager {
 @public
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer_;
  JavaUtilTreeMap *geometriesSetList_;
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet *currentGeometriesSet_;
}

#pragma mark Public

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                   withGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D;

- (void)drawWithInt:(jint)index;

- (void)drawLabelWithInt:(jint)index;

- (void)drawPolygonWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)n
              withGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)v;

- (void)endGeometry;

- (void)endGeometryDirect;

- (void)endList;

- (void)endPolygons;

- (void)rectangleGeometryWithInt:(jint)x
                         withInt:(jint)y
                         withInt:(jint)z
                         withInt:(jint)width
                         withInt:(jint)height;

- (void)removeWithInt:(jint)index;

- (void)startGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *)type;

- (void)startGeometryDirectWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *)type
                                                                                 withInt:(jint)size;

- (jint)startNewListWithInt:(jint)old;

- (jint)startPolygonsWithInt:(jint)old;

#pragma mark Protected

- (void)colorWithDouble:(jdouble)r
             withDouble:(jdouble)g
             withDouble:(jdouble)b;

- (void)colorWithDouble:(jdouble)r
             withDouble:(jdouble)g
             withDouble:(jdouble)b
             withDouble:(jdouble)a;

- (GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)getRenderer;

- (void)initGeometriesList OBJC_METHOD_FAMILY_NONE;

- (void)normalWithDouble:(jdouble)x
              withDouble:(jdouble)y
              withDouble:(jdouble)z;

- (void)normalDirectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)z;

- (void)pointSizeWithDouble:(jdouble)size;

- (void)setDummyTexture;

- (void)setRendererWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer;

- (void)textureWithDouble:(jdouble)x
               withDouble:(jdouble)y;

- (void)vertexWithDouble:(jdouble)x
              withDouble:(jdouble)y
              withDouble:(jdouble)z;

- (void)vertexDirectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)z;

- (void)vertexIntWithInt:(jint)x
                 withInt:(jint)y
                 withInt:(jint)z;

- (void)verticesWithDoubleArray:(IOSDoubleArray *)vertices;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders)

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders, renderer_, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders, geometriesSetList_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders, currentGeometriesSet_, GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet *)

FOUNDATION_EXPORT void GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D);

FOUNDATION_EXPORT GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *new_GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders)

@interface GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry : NSObject

#pragma mark Public

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders:(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *)outer$
                  withGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *)type;

- (void)allocateBuffersWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

- (void)end;

- (id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>)getColors;

- (jint)getLength;

- (id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>)getNormals;

- (id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>)getTextures;

- (GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *)getType;

- (id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>)getVertices;

- (void)normalDirectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)z;

- (void)setColorsWithJavaUtilArrayList:(JavaUtilArrayList *)array
                               withInt:(jint)length;

- (void)setLengthWithInt:(jint)l;

- (void)setNormalsWithJavaUtilArrayList:(JavaUtilArrayList *)array
                                withInt:(jint)length;

- (void)setTexturesWithJavaUtilArrayList:(JavaUtilArrayList *)array
                                 withInt:(jint)length;

- (void)setTexturesEmpty;

- (void)setTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *)type;

- (void)setVerticesWithJavaUtilArrayList:(JavaUtilArrayList *)array
                                 withInt:(jint)length;

- (void)vertexDirectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)z;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry)

FOUNDATION_EXPORT void GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_withGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum_(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *outer$, GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *type);

FOUNDATION_EXPORT GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *new_GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_withGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum_(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *outer$, GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *type) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry)

@interface GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet : JavaUtilArrayList

#pragma mark Public

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders:(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *)outer$;

- (void)allocateWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

- (void)endGeometry;

- (jint)getGeometriesLength;

- (void)normalDirectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)z;

- (void)reset;

- (void)setColorsWithJavaUtilArrayList:(JavaUtilArrayList *)colors
                               withInt:(jint)length;

- (void)setNormalsWithJavaUtilArrayList:(JavaUtilArrayList *)normals
                                withInt:(jint)length;

- (void)setTexturesWithJavaUtilArrayList:(JavaUtilArrayList *)textures
                                 withInt:(jint)length;

- (void)setVerticesWithJavaUtilArrayList:(JavaUtilArrayList *)vertices
                                 withInt:(jint)length;

- (void)startGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *)type;

- (void)vertexDirectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)z;

#pragma mark Package-Private


@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet)

FOUNDATION_EXPORT void GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *outer$);

FOUNDATION_EXPORT GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet *new_GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet)

#endif // _GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_H_
