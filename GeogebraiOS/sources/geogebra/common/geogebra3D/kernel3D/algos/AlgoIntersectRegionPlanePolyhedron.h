//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron.java
//

#ifndef _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_H_
#define _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_H_

#include "J2ObjC_header.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPathPlanePolygon3D.h"

@class GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D;
@class GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron;
@class GeogebraCommonKernelAlgosAlgoElement_OutputHandler;
@class GeogebraCommonKernelCommandsCommandsEnum;
@class GeogebraCommonKernelConstruction;
@class GeogebraCommonKernelGeosGeoElement;
@class GeogebraCommonKernelMatrixCoords;
@class GeogebraCommonKernelStringTemplate;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaLangStringBuilder;
@class JavaUtilTreeSet;
@protocol GeogebraCommonKernelKernelNDGeoElementND;
@protocol JavaUtilComparator;

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron : GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathPlanePolygon3D {
 @public
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler *outputSegments_AlgoIntersectRegionPlanePolyhedron_;
  JavaUtilTreeSet *newCoords_AlgoIntersectRegionPlanePolyhedron_;
}

#pragma mark Public

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
   withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)p;

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
   withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)p
                                            withIntArray:(IOSIntArray *)outputSizes;

- (void)compute;

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName;

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

#pragma mark Protected

- (void)addCoordsWithDouble:(jdouble)parameter
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)parent;

- (jboolean)checkParameterWithDouble:(jdouble)t1;

- (void)getCmdOutputXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
          withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (GeogebraCommonKernelGeosGeoElement *)getSecondInput;

- (void)setInputOutput;

- (void)setNewCoords;

- (void)setSecondInputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

@end

J2OBJC_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron)

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, outputSegments_AlgoIntersectRegionPlanePolyhedron_, GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, newCoords_AlgoIntersectRegionPlanePolyhedron_, JavaUtilTreeSet *)

FOUNDATION_EXPORT id<JavaUtilComparator> GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_COORDS_COMPARATOR_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, COORDS_COMPARATOR_, id<JavaUtilComparator>)

FOUNDATION_EXPORT void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonKernelConstruction *c, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p);

FOUNDATION_EXPORT GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(GeogebraCommonKernelConstruction *c, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withIntArray_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, IOSIntArray *outputSizes);

FOUNDATION_EXPORT GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withIntArray_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, IOSIntArray *outputSizes) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron)

#endif // _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_H_
