//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanePolyhedron.java
//

#ifndef _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_H_
#define _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_H_

#include "J2ObjC_header.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLinePolygon3D.h"

@class GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D;
@class GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron;
@class GeogebraCommonKernelCommandsCommandsEnum;
@class GeogebraCommonKernelConstruction;
@class GeogebraCommonKernelGeosGeoElement;
@class IOSObjectArray;
@class JavaUtilTreeMap;
@protocol GeogebraCommonKernelKernelNDHasSegments;

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron : GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D

#pragma mark Public

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
   withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)p;

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName;

#pragma mark Protected

- (jboolean)checkParameterWithDouble:(jdouble)t1;

- (GeogebraCommonKernelGeosGeoElement *)getFirstInput;

- (void)intersectionsCoordsWithGeogebraCommonKernelKernelNDHasSegments:(id<GeogebraCommonKernelKernelNDHasSegments>)p
                                                   withJavaUtilTreeMap:(JavaUtilTreeMap *)newCoords;

- (void)setFirstInputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (void)setIntersectionLine;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron)

FOUNDATION_EXPORT void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p);

FOUNDATION_EXPORT GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron)

#endif // _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolyhedron_H_
