//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLinePolygon3D.java
//

#ifndef _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_H_
#define _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_H_

#include "J2ObjC_header.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"

@class GeogebraCommonKernelAlgosAlgoElement_OutputHandler;
@class GeogebraCommonKernelCommandsCommandsEnum;
@class GeogebraCommonKernelConstruction;
@class GeogebraCommonKernelGeosGeoElement;
@class GeogebraCommonKernelGeosGeoPolygon;
@class GeogebraCommonKernelMatrixCoords;
@class IOSObjectArray;
@class JavaUtilTreeMap;
@protocol GeogebraCommonKernelKernelNDGeoLineND;
@protocol GeogebraCommonKernelKernelNDHasSegments;

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D : GeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D {
 @public
  jint spaceDim_;
  id<GeogebraCommonKernelKernelNDHasSegments> p_;
  id<GeogebraCommonKernelKernelNDGeoLineND> g_;
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler *outputPoints_;
  GeogebraCommonKernelMatrixCoords *o1_, *d1_;
}

#pragma mark Public

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g
             withGeogebraCommonKernelKernelNDHasSegments:(id<GeogebraCommonKernelKernelNDHasSegments>)p;

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p;

- (void)compute;

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName;

#pragma mark Protected

- (jboolean)checkParameterWithDouble:(jdouble)t1;

- (GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)createOutputPoints;

- (GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)createOutputSegments;

- (GeogebraCommonKernelGeosGeoElement *)getFirstInput;

- (void)intersectionsCoordsWithGeogebraCommonKernelKernelNDHasSegments:(id<GeogebraCommonKernelKernelNDHasSegments>)hasSegments
                                                   withJavaUtilTreeMap:(JavaUtilTreeMap *)newCoords;

- (void)intersectionsCoordsContainedWithGeogebraCommonKernelKernelNDHasSegments:(id<GeogebraCommonKernelKernelNDHasSegments>)p
                                                            withJavaUtilTreeMap:(JavaUtilTreeMap *)newCoords;

- (void)intersectionsCoordsGeneralWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p
                                                     withJavaUtilTreeMap:(JavaUtilTreeMap *)newCoords;

- (void)setFirstInputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (void)setInputOutput;

- (void)setIntersectionLine;

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D)

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D, p_, id<GeogebraCommonKernelKernelNDHasSegments>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D, g_, id<GeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D, outputPoints_, GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D, o1_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D, d1_, GeogebraCommonKernelMatrixCoords *)

FOUNDATION_EXPORT void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelGeosGeoPolygon *p);

FOUNDATION_EXPORT GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelGeosGeoPolygon *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDHasSegments_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoElement *g, id<GeogebraCommonKernelKernelNDHasSegments> p);

FOUNDATION_EXPORT GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDHasSegments_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoElement *g, id<GeogebraCommonKernelKernelNDHasSegments> p) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D)

#endif // _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_H_
