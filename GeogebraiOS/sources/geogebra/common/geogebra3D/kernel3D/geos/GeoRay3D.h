//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoRay3D.java
//

#ifndef _GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_H_
#define _GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_H_

#include "J2ObjC_header.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/kernel/geos/LimitedPath.h"
#include "geogebra/common/kernel/kernelND/GeoRayND.h"

@class GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D;
@class GeogebraCommonKernelConstruction;
@class GeogebraCommonKernelGeosGeoElement;
@class GeogebraCommonKernelGeosGeoPoint;
@class GeogebraCommonKernelMatrixCoords;
@class GeogebraCommonKernelTransform;
@class GeogebraCommonPluginGeoClassEnum;
@class IOSObjectArray;
@class JavaLangStringBuilder;
@protocol GeogebraCommonKernelKernelNDGeoPointND;

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D : GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D < GeogebraCommonKernelKernelNDGeoRayND, GeogebraCommonKernelGeosLimitedPath >

#pragma mark Public

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)construction;

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)O;

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)O
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q;

- (jboolean)allowOutlyingIntersections;

- (GeogebraCommonKernelGeosGeoElement *)copyFreeRay OBJC_METHOD_FAMILY_NONE;

- (GeogebraCommonKernelGeosGeoElement *)copyInternalWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons OBJC_METHOD_FAMILY_NONE;

- (IOSObjectArray *)createTransformedObjectWithGeogebraCommonKernelTransform:(GeogebraCommonKernelTransform *)t
                                                                withNSString:(NSString *)label;

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType;

- (jdouble)getMinParameter;

- (jboolean)isAllEndpointsLabelsSet;

- (jboolean)isGeoRay;

- (jboolean)isIntersectionPointIncidentWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p
                                                                 withDouble:(jdouble)eps;

- (jboolean)isLimitedPath;

- (jboolean)isOnPathWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p
                                              withDouble:(jdouble)eps;

- (jboolean)isValidCoordWithDouble:(jdouble)x;

- (jboolean)keepsTypeOnGeometricTransform;

- (jboolean)respectLimitedPathWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p
                                                        withDouble:(jdouble)eps;

- (jboolean)respectLimitedPathWithDouble:(jdouble)parameter;

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (void)setAllowOutlyingIntersectionsWithBoolean:(jboolean)flag;

- (void)setKeepTypeOnGeometricTransformWithBoolean:(jboolean)flag;

#pragma mark Protected

- (GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *)createWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons;

- (void)getCoordsXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D)

FOUNDATION_EXPORT void GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *self, GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelKernelNDGeoPointND> O, id<GeogebraCommonKernelKernelNDGeoPointND> Q);

FOUNDATION_EXPORT GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelKernelNDGeoPointND> O, id<GeogebraCommonKernelKernelNDGeoPointND> Q) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *self, GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelKernelNDGeoPointND> O);

FOUNDATION_EXPORT GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelKernelNDGeoPointND> O) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *self, GeogebraCommonKernelConstruction *construction);

FOUNDATION_EXPORT GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *construction) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D)

#endif // _GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_H_
