//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.java
//

#ifndef _GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_H_
#define _GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_H_

#include "J2ObjC_header.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/transform/MirrorableAtPlane.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/geos/Dilateable.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/Traceable.h"
#include "geogebra/common/kernel/geos/Transformable.h"
#include "geogebra/common/kernel/geos/Translateable.h"
#include "geogebra/common/kernel/kernelND/GeoPolyhedronInterface.h"
#include "geogebra/common/kernel/kernelND/HasHeight.h"
#include "geogebra/common/kernel/kernelND/HasSegments.h"
#include "geogebra/common/kernel/kernelND/HasVolume.h"
#include "geogebra/common/kernel/kernelND/RotateableND.h"

@class GeogebraCommonAwtGColor;
@class GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D;
@class GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D;
@class GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D;
@class GeogebraCommonKernelArithmeticMyDouble;
@class GeogebraCommonKernelConstruction;
@class GeogebraCommonKernelConstructionElementCycle;
@class GeogebraCommonKernelGeosGeoBoolean;
@class GeogebraCommonKernelGeosGeoElement;
@class GeogebraCommonKernelGeosGeoElement_HitTypeEnum;
@class GeogebraCommonKernelGeosGeoList;
@class GeogebraCommonKernelGeosGeoPolygon;
@class GeogebraCommonKernelMatrixCoords;
@class GeogebraCommonKernelStringTemplate;
@class GeogebraCommonPluginGeoClassEnum;
@class IOSObjectArray;
@class JavaLangStringBuilder;
@class JavaUtilArrayList;
@class JavaUtilTreeMap;
@protocol GeogebraCommonKernelArithmeticNumberValue;
@protocol GeogebraCommonKernelKernelNDGeoCoordSys2D;
@protocol GeogebraCommonKernelKernelNDGeoDirectionND;
@protocol GeogebraCommonKernelKernelNDGeoLineND;
@protocol GeogebraCommonKernelKernelNDGeoPointND;
@protocol GeogebraCommonKernelKernelNDGeoSegmentND;
@protocol GeogebraCommonKernelPathMover;
@protocol JavaUtilCollection;

#define GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_PYRAMID 1
#define GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_PRISM 3
#define GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_TETRAHEDRON 4
#define GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_CUBE 5
#define GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_OCTAHEDRON 6
#define GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_DODECAHEDRON 7
#define GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_ICOSAHEDRON 8

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron : GeogebraCommonGeogebra3DKernel3DGeosGeoElement3D < GeogebraCommonKernelKernelNDHasSegments, GeogebraCommonKernelKernelNDHasVolume, GeogebraCommonKernelGeosTraceable, GeogebraCommonKernelKernelNDRotateableND, GeogebraCommonKernelGeosTranslateable, GeogebraCommonGeogebra3DKernel3DTransformMirrorableAtPlane, GeogebraCommonKernelGeosTransformable, GeogebraCommonKernelGeosDilateable, GeogebraCommonKernelKernelNDHasHeight, GeogebraCommonKernelPath, GeogebraCommonKernelKernelNDGeoPolyhedronInterface, GeogebraCommonKernelGeosGeoNumberValue > {
 @public
  jint type_;
  JavaUtilTreeMap *segmentsIndex_;
  jlong segmentsIndexMax_;
  JavaUtilTreeMap *segments_;
  JavaUtilTreeMap *polygonsIndex_;
  JavaUtilArrayList *polygonsDescriptions_;
  jint polygonsIndexMax_;
  JavaUtilTreeMap *polygons_;
  JavaUtilArrayList *polygonsLinked_;
  JavaUtilArrayList *pointsCreated_;
}

#pragma mark Public

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c;

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)polyhedron;

- (void)addPointCreatedWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)point;

- (void)addPointToCurrentFaceWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point;

- (void)addPolygonLinkedWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon;

- (void)addSegmentLinkedWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment;

- (jboolean)allLabelsAreSet;

- (GeogebraCommonKernelGeosGeoElement *)copy__ OBJC_METHOD_FAMILY_NONE;

- (void)createFaces;

- (id<GeogebraCommonKernelPathMover>)createPathMover;

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)createPolygonWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                                                                                                           withInt:(jint)index;

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)createPolygonWithInt:(jint)index;

- (id<GeogebraCommonKernelKernelNDGeoSegmentND>)createSegmentWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)startPoint
                                                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)endPoint;

- (void)defaultLabelsWithNSStringArray:(IOSObjectArray *)labels;

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)rval
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)S;

- (void)endCurrentFace;

- (jdouble)getArea;

- (GeogebraCommonKernelGeosGeoPolygon *)getBottomFace;

- (jdouble)getDouble;

- (GeogebraCommonKernelGeosGeoPolygon *)getFaceWithInt:(jint)index;

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)getFace3DWithInt:(jint)index;

- (IOSObjectArray *)getFaces;

- (IOSObjectArray *)getFaces3D;

- (id<JavaUtilCollection>)getFacesCollection;

- (jint)getFacesSize;

- (GeogebraCommonKernelGeosGeoPolygon *)getFirstSideFace;

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType;

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition;

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType;

- (jdouble)getMaxParameter;

- (jdouble)getMinParameter;

- (GeogebraCommonKernelArithmeticMyDouble *)getNumber;

- (jdouble)getOrientedHeight;

- (id<JavaUtilCollection>)getPolygons;

- (id<JavaUtilCollection>)getPolygonsLinked;

- (id<GeogebraCommonKernelKernelNDGeoSegmentND>)getSegmentWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)startPoint
                                                          withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)endPoint;

- (IOSObjectArray *)getSegments;

- (IOSObjectArray *)getSegments3D;

- (id<JavaUtilCollection>)getSegmentsLinked;

- (GeogebraCommonKernelGeosGeoPolygon *)getTopFace;

- (GeogebraCommonKernelMatrixCoords *)getTopPoint;

- (jboolean)getTrace;

- (jint)getType;

- (NSString *)getTypeString;

- (jdouble)getVolume;

- (jboolean)hasFiniteArea;

- (jboolean)hasFiniteVolume;

- (void)initLabelsWithNSStringArray:(IOSObjectArray *)labels OBJC_METHOD_FAMILY_NONE;

- (jboolean)isClosedPath;

- (jboolean)isDefined;

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Geo;

- (jboolean)isFillable;

- (jboolean)isGeoPolyhedron;

- (jboolean)isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI
                                                    withDouble:(jdouble)eps;

- (jboolean)isPath;

- (jboolean)isTraceable;

- (jboolean)isTranslateable;

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Q;

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane;

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g;

- (void)pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI;

- (void)pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI;

- (void)remove;

- (void)removeColorFunction;

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r;

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                  withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line;

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S;

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S
             withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation;

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (void)setAllLabelsAreSetWithBoolean:(jboolean)flag;

- (void)setAlphaValueWithFloat:(jfloat)alpha;

- (void)setAreaWithDouble:(jdouble)area;

- (void)setColorFunctionWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)col;

- (void)setCurrentFaceIsTopFace;

- (void)setDefined;

- (void)setEuclidianVisibleWithBoolean:(jboolean)visible;

- (void)setLayerWithInt:(jint)layer2;

- (void)setLineThicknessWithInt:(jint)th;

- (void)setLineThicknessOrVisibilityWithInt:(jint)th;

- (void)setLineTypeWithInt:(jint)type;

- (void)setLineTypeHiddenWithInt:(jint)type;

- (void)setObjColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color;

- (void)setOrientedHeightWithDouble:(jdouble)height;

- (void)setPointSizeOrVisibilityWithInt:(jint)size;

- (void)setReverseNormals;

- (void)setReverseNormalsForDrawingWithBoolean:(jboolean)flag;

- (void)setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)cond;

- (void)setTraceWithBoolean:(jboolean)trace;

- (void)setTypeWithInt:(jint)type;

- (void)setUndefined;

- (void)setVolumeWithDouble:(jdouble)volume;

- (jboolean)showInAlgebraView;

- (void)startNewFace;

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)toStringMinimalWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v;

- (void)updateFacesDeprecated;

- (void)updateSegmentsLinked;

- (void)updateVisualStyle;

#pragma mark Protected

- (id<GeogebraCommonKernelKernelNDGeoSegmentND>)createNewSegmentWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)startPoint
                                                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)endPoint
                                                          withGeogebraCommonKernelConstructionElementCycle:(GeogebraCommonKernelConstructionElementCycle *)key;

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (jboolean)showInEuclidianView;

- (void)storeSegmentWithGeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *)segment
                        withGeogebraCommonKernelConstructionElementCycle:(GeogebraCommonKernelConstructionElementCycle *)key;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron)

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, segmentsIndex_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, segments_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, polygonsIndex_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, polygonsDescriptions_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, polygons_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, polygonsLinked_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, pointsCreated_, JavaUtilArrayList *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, TYPE_PYRAMID, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, TYPE_PRISM, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, TYPE_TETRAHEDRON, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, TYPE_CUBE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, TYPE_OCTAHEDRON, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, TYPE_DODECAHEDRON, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron, TYPE_ICOSAHEDRON, jint)

FOUNDATION_EXPORT void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self, GeogebraCommonKernelConstruction *c);

FOUNDATION_EXPORT GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *self, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *polyhedron);

FOUNDATION_EXPORT GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *polyhedron) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron)

#endif // _GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_H_
