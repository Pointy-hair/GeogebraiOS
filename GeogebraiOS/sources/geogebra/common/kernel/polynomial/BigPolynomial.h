//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/polynomial/BigPolynomial.java
//

#ifndef _GeogebraCommonKernelPolynomialBigPolynomial_H_
#define _GeogebraCommonKernelPolynomialBigPolynomial_H_

#include "J2ObjC_header.h"

@class GeogebraCommonKernelPolynomialBigComplex;
@class IOSDoubleArray;
@class IOSObjectArray;
@class JavaMathBigDecimal;
@class JavaMathMathContext;

@interface GeogebraCommonKernelPolynomialBigPolynomial : NSObject < NSCopying > {
 @public
  IOSObjectArray *coefficients_;
  NSString *representation_;
  JavaMathMathContext *mc_;
  JavaMathBigDecimal *plusEps_;
  JavaMathBigDecimal *minusEps_;
}

#pragma mark Public

- (instancetype)initWithJavaMathBigDecimalArray:(IOSObjectArray *)coeff
                         withJavaMathBigDecimal:(JavaMathBigDecimal *)eps
                        withJavaMathMathContext:(JavaMathMathContext *)mc;

- (instancetype)initWithDouble:(jdouble)constant
                       withInt:(jint)precision;

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)coeff
                            withInt:(jint)precision;

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)coeff
            withJavaMathMathContext:(JavaMathMathContext *)mc;

- (GeogebraCommonKernelPolynomialBigPolynomial *)addWithGeogebraCommonKernelPolynomialBigPolynomial:(GeogebraCommonKernelPolynomialBigPolynomial *)p;

- (id)clone;

- (GeogebraCommonKernelPolynomialBigPolynomial *)copy__ OBJC_METHOD_FAMILY_NONE;

- (jint)degree;

- (GeogebraCommonKernelPolynomialBigPolynomial *)divideWithGeogebraCommonKernelPolynomialBigPolynomial:(GeogebraCommonKernelPolynomialBigPolynomial *)divisor;

- (JavaMathBigDecimal *)evalWithJavaMathBigDecimal:(JavaMathBigDecimal *)val;

- (jdouble)evalWithDouble:(jdouble)d;

- (JavaMathBigDecimal *)getCoeffWithInt:(jint)index;

- (jdouble)getCoeffDoubleWithInt:(jint)index;

- (IOSObjectArray *)getCoefficients;

- (IOSDoubleArray *)getCoefficientsDouble;

- (IOSDoubleArray *)getRealRootsDoubleWithInt:(jint)precision;

- (GeogebraCommonKernelPolynomialBigComplex *)getRootWithGeogebraCommonKernelPolynomialBigComplexArray:(IOSObjectArray *)coeff
                                                          withGeogebraCommonKernelPolynomialBigComplex:(GeogebraCommonKernelPolynomialBigComplex *)start
                                                                               withJavaMathMathContext:(JavaMathMathContext *)mc;

- (IOSObjectArray *)getRootsLaguerreWithJavaMathMathContext:(JavaMathMathContext *)mc;

- (jboolean)isZeroPolynomial;

- (GeogebraCommonKernelPolynomialBigPolynomial *)multiplyWithGeogebraCommonKernelPolynomialBigPolynomial:(GeogebraCommonKernelPolynomialBigPolynomial *)p;

- (GeogebraCommonKernelPolynomialBigComplex *)rootPolishingWithGeogebraCommonKernelPolynomialBigComplex:(GeogebraCommonKernelPolynomialBigComplex *)x;

- (GeogebraCommonKernelPolynomialBigPolynomial *)subtractWithGeogebraCommonKernelPolynomialBigPolynomial:(GeogebraCommonKernelPolynomialBigPolynomial *)p;

- (NSString *)description;

#pragma mark Protected

- (instancetype)initWithGeogebraCommonKernelPolynomialBigPolynomial:(GeogebraCommonKernelPolynomialBigPolynomial *)p
                                        withJavaMathBigDecimalArray:(IOSObjectArray *)coeff;

- (jboolean)smallerEpsWithJavaMathBigDecimal:(JavaMathBigDecimal *)d;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelPolynomialBigPolynomial)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelPolynomialBigPolynomial, coefficients_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelPolynomialBigPolynomial, representation_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelPolynomialBigPolynomial, mc_, JavaMathMathContext *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelPolynomialBigPolynomial, plusEps_, JavaMathBigDecimal *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelPolynomialBigPolynomial, minusEps_, JavaMathBigDecimal *)

FOUNDATION_EXPORT void GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_withJavaMathBigDecimalArray_(GeogebraCommonKernelPolynomialBigPolynomial *self, GeogebraCommonKernelPolynomialBigPolynomial *p, IOSObjectArray *coeff);

FOUNDATION_EXPORT GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_withJavaMathBigDecimalArray_(GeogebraCommonKernelPolynomialBigPolynomial *p, IOSObjectArray *coeff) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelPolynomialBigPolynomial_initWithJavaMathBigDecimalArray_withJavaMathBigDecimal_withJavaMathMathContext_(GeogebraCommonKernelPolynomialBigPolynomial *self, IOSObjectArray *coeff, JavaMathBigDecimal *eps, JavaMathMathContext *mc);

FOUNDATION_EXPORT GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_initWithJavaMathBigDecimalArray_withJavaMathBigDecimal_withJavaMathMathContext_(IOSObjectArray *coeff, JavaMathBigDecimal *eps, JavaMathMathContext *mc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelPolynomialBigPolynomial_initWithDoubleArray_withJavaMathMathContext_(GeogebraCommonKernelPolynomialBigPolynomial *self, IOSDoubleArray *coeff, JavaMathMathContext *mc);

FOUNDATION_EXPORT GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_initWithDoubleArray_withJavaMathMathContext_(IOSDoubleArray *coeff, JavaMathMathContext *mc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelPolynomialBigPolynomial_initWithDoubleArray_withInt_(GeogebraCommonKernelPolynomialBigPolynomial *self, IOSDoubleArray *coeff, jint precision);

FOUNDATION_EXPORT GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_initWithDoubleArray_withInt_(IOSDoubleArray *coeff, jint precision) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelPolynomialBigPolynomial_initWithDouble_withInt_(GeogebraCommonKernelPolynomialBigPolynomial *self, jdouble constant, jint precision);

FOUNDATION_EXPORT GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_initWithDouble_withInt_(jdouble constant, jint precision) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelPolynomialBigPolynomial)

#endif // _GeogebraCommonKernelPolynomialBigPolynomial_H_
