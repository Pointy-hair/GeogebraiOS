//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoCasCell.java
//

#ifndef _GeogebraCommonKernelGeosGeoCasCell_H_
#define _GeogebraCommonKernelGeosGeoCasCell_H_

#include "J2ObjC_header.h"
#include "geogebra/common/kernel/VarString.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/TextProperties.h"

@class GeogebraCommonAwtGColor;
@class GeogebraCommonAwtGFont;
@class GeogebraCommonKernelAlgosAlgoElement;
@class GeogebraCommonKernelArithmeticMyList;
@class GeogebraCommonKernelArithmeticValidExpression;
@class GeogebraCommonKernelConstruction;
@class GeogebraCommonKernelGeosGeoText;
@class GeogebraCommonKernelStringTemplate;
@class GeogebraCommonPluginGeoClassEnum;
@class IOSObjectArray;
@class JavaLangStringBuilder;
@class JavaUtilTreeSet;

#define GeogebraCommonKernelGeosGeoCasCell_ROW_REFERENCE_STATIC '#'
#define GeogebraCommonKernelGeosGeoCasCell_ROW_REFERENCE_DYNAMIC '$'

@interface GeogebraCommonKernelGeosGeoCasCell : GeogebraCommonKernelGeosGeoElement < GeogebraCommonKernelVarString, GeogebraCommonKernelGeosTextProperties >

#pragma mark Public

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c;

- (jboolean)addToUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algorithm;

- (void)adjustPointListWithBoolean:(jboolean)onlySolutions;

- (void)computeOutput;

- (GeogebraCommonKernelGeosGeoElement *)copy__ OBJC_METHOD_FAMILY_NONE;

- (void)doRemove;

- (GeogebraCommonAwtGColor *)getAlgebraColor;

- (NSString *)getAssignmentVariable;

- (NSString *)getCommandAndComment;

- (NSString *)getEvalText;

- (GeogebraCommonKernelArithmeticValidExpression *)getEvalVE;

- (GeogebraCommonAwtGColor *)getFontColor;

- (jdouble)getFontSizeMultiplier;

- (jint)getFontStyle;

- (NSString *)getFunctionVariable;

- (GeogebraCommonKernelArithmeticMyList *)getFunctionVariableList;

- (IOSObjectArray *)getFunctionVariables;

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType;

- (JavaUtilTreeSet *)getGeoElementVariables;

- (GeogebraCommonKernelGeosGeoText *)getGeoText;

- (NSString *)getInputWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (GeogebraCommonKernelArithmeticValidExpression *)getInputVE;

- (NSString *)getInVarWithInt:(jint)n;

- (NSString *)getLabelWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType;

- (NSString *)getLaTeXOutput;

- (NSString *)getOutputWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)getOutputRHSWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (GeogebraCommonKernelArithmeticValidExpression *)getOutputValidExpression;

- (NSString *)getPostfix;

- (NSString *)getPrefix;

- (jint)getPrintDecimals;

- (jint)getPrintFigures;

- (jint)getRowNumber;

- (NSString *)getTooltipTextWithBoolean:(jboolean)colored
                            withBoolean:(jboolean)alwaysOn;

- (GeogebraCommonKernelGeosGeoElement *)getTwinGeo;

- (NSString *)getVarStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (jboolean)hasCoords;

- (jboolean)hasTwinGeo;

- (jboolean)hasVariablesOrCommands;

- (jboolean)includesNumericCommand;

- (jboolean)includesOnlyDefinedVariables;

- (jboolean)includesOnlyDefinedVariablesWithBoolean:(jboolean)ignoreUndefinedXY;

- (jboolean)includesRowReferences;

- (jboolean)isAssignmentVariableDefined;

- (jboolean)isCircularDefinition;

- (jboolean)isDefined;

- (jboolean)isEmpty;

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Geo;

- (jboolean)isError;

- (jboolean)isFunctionVariableWithNSString:(NSString *)var;

- (jboolean)isGeoCasCell;

- (jboolean)isInputEmpty;

- (jboolean)isInputVariableWithNSString:(NSString *)var;

- (jboolean)isLaTeXDrawableGeo;

- (jboolean)isLaTeXTextCommand;

- (jboolean)isNative;

- (jboolean)isOutputEmpty;

- (jboolean)isSerifFont;

- (jboolean)isStructurallyEqualToLocalizedInputWithNSString:(NSString *)newInput;

- (jboolean)isUseAsText;

- (jboolean)justFontSize;

- (jboolean)plot;

- (jboolean)removeFromUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algorithm;

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (void)setErrorWithNSString:(NSString *)error;

- (void)setEvalCommandWithNSString:(NSString *)cmd;

- (void)setEvalCommentWithNSString:(NSString *)comment;

- (void)setFontWithGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)ft;

- (void)setFontColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)c;

- (void)setFontSizeMultiplierWithDouble:(jdouble)d;

- (void)setFontStyleWithInt:(jint)style;

- (void)setGeoTextWithGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)gt;

- (jboolean)setInputWithNSString:(NSString *)inValue;

- (jboolean)setInputWithNSString:(NSString *)inValue
                     withBoolean:(jboolean)internalInput;

- (void)setInputFromTwinGeoWithBoolean:(jboolean)force;

- (void)setKeepInputUsedWithBoolean:(jboolean)keepInputUsed;

- (jboolean)setLabelOfTwinGeo;

- (void)setNativeWithBoolean:(jboolean)b;

- (void)setOutputWithNSString:(NSString *)output
                  withBoolean:(jboolean)prependLabel;

- (void)setPointListWithBoolean:(jboolean)pointList2;

- (void)setPrintDecimalsWithInt:(jint)printDecimals
                    withBoolean:(jboolean)update;

- (void)setPrintFiguresWithInt:(jint)printFigures
                   withBoolean:(jboolean)update;

- (void)setProcessingInformationWithNSString:(NSString *)prefix
                                withNSString:(NSString *)evaluate
                                withNSString:(NSString *)postfix;

- (void)setRowNumberWithInt:(jint)row;

- (void)setSerifFontWithBoolean:(jboolean)serifFont;

- (void)setUndefined;

- (void)setUseAsTextWithBoolean:(jboolean)val;

- (jboolean)showInAlgebraView;

- (jboolean)showOutput;

- (void)toggleTwinGeoEuclidianVisible;

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (void)update;

- (void)updateCascade;

- (void)updateInputStringWithRowReferences;

- (void)updateInputStringWithRowReferencesWithBoolean:(jboolean)force;

- (void)updateTwinGeoWithBoolean:(jboolean)allowFunction;

- (jboolean)useSignificantFigures;

#pragma mark Protected

- (void)getElementCloseTagXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (void)getElementOpenTagXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (jboolean)showInEuclidianView;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelGeosGeoCasCell)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoCasCell, ROW_REFERENCE_STATIC, jchar)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoCasCell, ROW_REFERENCE_DYNAMIC, jchar)

FOUNDATION_EXPORT void GeogebraCommonKernelGeosGeoCasCell_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoCasCell *self, GeogebraCommonKernelConstruction *c);

FOUNDATION_EXPORT GeogebraCommonKernelGeosGeoCasCell *new_GeogebraCommonKernelGeosGeoCasCell_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelGeosGeoCasCell)

#endif // _GeogebraCommonKernelGeosGeoCasCell_H_
