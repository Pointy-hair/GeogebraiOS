//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoIntersectLineConic.java
//

#ifndef _GeogebraCommonKernelAlgosAlgoIntersectLineConic_H_
#define _GeogebraCommonKernelAlgosAlgoIntersectLineConic_H_

#include "J2ObjC_header.h"
#include "geogebra/common/kernel/RestrictionAlgoForLocusEquation.h"
#include "geogebra/common/kernel/algos/AlgoIntersect.h"
#include "geogebra/common/kernel/algos/SymbolicParametersBotanaAlgo.h"

@class GeogebraCommonKernelCommandsCommandsEnum;
@class GeogebraCommonKernelConstruction;
@class GeogebraCommonKernelGeosGeoConic;
@class GeogebraCommonKernelGeosGeoElement;
@class GeogebraCommonKernelGeosGeoLine;
@class GeogebraCommonKernelKernelNDGeoConicND;
@class IOSObjectArray;
@protocol GeogebraCommonKernelAlgosEquationElementInterface;
@protocol GeogebraCommonKernelAlgosEquationScopeInterface;

#define GeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_PRODUCING_LINE 1
#define GeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_ASYMPTOTIC_LINE 2
#define GeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_MEETING_LINE 3
#define GeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_TANGENT_LINE 4
#define GeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_SECANT_LINE 5
#define GeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_PASSING_LINE 6

@interface GeogebraCommonKernelAlgosAlgoIntersectLineConic : GeogebraCommonKernelAlgosAlgoIntersect < GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo, GeogebraCommonKernelRestrictionAlgoForLocusEquation > {
 @public
  GeogebraCommonKernelGeosGeoLine *g_;
  GeogebraCommonKernelGeosGeoConic *c_;
  IOSObjectArray *P_, *Q_;
  jint intersectionType_;
  jboolean possibleSpecialCase_;
  jint specialCasePointOnCircleIndex_;
}

#pragma mark Public

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                    withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c;

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope;

- (void)compute;

- (IOSObjectArray *)getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (IOSObjectArray *)getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName;

- (GeogebraCommonKernelGeosGeoConic *)getConic;

- (IOSObjectArray *)getIntersectionPoints;

- (GeogebraCommonKernelGeosGeoLine *)getLine;

- (jint)getRelatedModeID;

- (void)initForNearToRelationship OBJC_METHOD_FAMILY_NONE;

+ (jint)intersectLineConicWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                   withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c
                    withGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)sol
                                                   withDouble:(jdouble)eps;

- (jboolean)isLocusEquable;

- (jboolean)isNearToAlgorithm;

- (void)setInputOutput;

#pragma mark Protected

- (IOSObjectArray *)getLastDefinedIntersectionPoints;

- (void)initElements OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_INIT(GeogebraCommonKernelAlgosAlgoIntersectLineConic)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectLineConic, g_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectLineConic, c_, GeogebraCommonKernelGeosGeoConic *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectLineConic, P_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectLineConic, Q_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoIntersectLineConic, INTERSECTION_PRODUCING_LINE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoIntersectLineConic, INTERSECTION_ASYMPTOTIC_LINE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoIntersectLineConic, INTERSECTION_MEETING_LINE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoIntersectLineConic, INTERSECTION_TANGENT_LINE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoIntersectLineConic, INTERSECTION_SECANT_LINE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoIntersectLineConic, INTERSECTION_PASSING_LINE, jint)

FOUNDATION_EXPORT void GeogebraCommonKernelAlgosAlgoIntersectLineConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelAlgosAlgoIntersectLineConic *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoConic *c);

FOUNDATION_EXPORT GeogebraCommonKernelAlgosAlgoIntersectLineConic *new_GeogebraCommonKernelAlgosAlgoIntersectLineConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoConic *c) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT jint GeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectLineConicWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelGeosGeoPointArray_withDouble_(GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelKernelNDGeoConicND *c, IOSObjectArray *sol, jdouble eps);

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelAlgosAlgoIntersectLineConic)

#endif // _GeogebraCommonKernelAlgosAlgoIntersectLineConic_H_
