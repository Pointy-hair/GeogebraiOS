//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/SymbolicParameters.java
//

#ifndef _GeogebraCommonKernelAlgosSymbolicParameters_H_
#define _GeogebraCommonKernelAlgosSymbolicParameters_H_

#include "J2ObjC_header.h"

@class GeogebraCommonKernelGeosGeoElement;
@class GeogebraCommonKernelProverPolynomialVariable;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class JavaUtilHashMap;
@class JavaUtilHashSet;
@protocol GeogebraCommonKernelAlgosSymbolicParametersAlgo;

@interface GeogebraCommonKernelAlgosSymbolicParameters : NSObject {
 @public
  IOSIntArray *degree_;
}

#pragma mark Public

- (instancetype)initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo:(id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>)spa;

+ (IOSObjectArray *)addBotanaVarsJoinPointsWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input;

+ (IOSIntArray *)addDegreeWithIntArray:(IOSIntArray *)degree1
                          withIntArray:(IOSIntArray *)degree2;

+ (IOSObjectArray *)botanaPolynomialsLineBisectorWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)Ax
                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)Ay
                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)Bx
                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)By
                                            withGeogebraCommonKernelProverPolynomialVariableArray:(IOSObjectArray *)botanaVars;

+ (IOSObjectArray *)botanaPolynomialsMidpointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)P
                                             withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Q
                              withGeogebraCommonKernelProverPolynomialVariableArray:(IOSObjectArray *)botanaVars;

+ (IOSIntArray *)crossDegreeWithIntArray:(IOSIntArray *)degree1
                            withIntArray:(IOSIntArray *)degree2;

+ (IOSObjectArray *)crossProductWithJavaMathBigIntegerArray:(IOSObjectArray *)a
                                withJavaMathBigIntegerArray:(IOSObjectArray *)b;

+ (JavaMathBigInteger *)det4WithJavaMathBigIntegerArray2:(IOSObjectArray *)matrix;

- (IOSIntArray *)getDegrees;

- (jint)getDimension;

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values;

- (JavaUtilHashSet *)getFreeVariables;

+ (IOSIntArray *)getMaxDegreeWithIntArray:(IOSIntArray *)degree1
                             withIntArray:(IOSIntArray *)degree2;

+ (IOSObjectArray *)reduceWithJavaMathBigIntegerArray:(IOSObjectArray *)vect;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelAlgosSymbolicParameters)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosSymbolicParameters, degree_, IOSIntArray *)

FOUNDATION_EXPORT void GeogebraCommonKernelAlgosSymbolicParameters_initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo_(GeogebraCommonKernelAlgosSymbolicParameters *self, id<GeogebraCommonKernelAlgosSymbolicParametersAlgo> spa);

FOUNDATION_EXPORT GeogebraCommonKernelAlgosSymbolicParameters *new_GeogebraCommonKernelAlgosSymbolicParameters_initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo_(id<GeogebraCommonKernelAlgosSymbolicParametersAlgo> spa) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IOSIntArray *GeogebraCommonKernelAlgosSymbolicParameters_getMaxDegreeWithIntArray_withIntArray_(IOSIntArray *degree1, IOSIntArray *degree2);

FOUNDATION_EXPORT IOSIntArray *GeogebraCommonKernelAlgosSymbolicParameters_addDegreeWithIntArray_withIntArray_(IOSIntArray *degree1, IOSIntArray *degree2);

FOUNDATION_EXPORT IOSIntArray *GeogebraCommonKernelAlgosSymbolicParameters_crossDegreeWithIntArray_withIntArray_(IOSIntArray *degree1, IOSIntArray *degree2);

FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonKernelAlgosSymbolicParameters_crossProductWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *a, IOSObjectArray *b);

FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonKernelAlgosSymbolicParameters_reduceWithJavaMathBigIntegerArray_(IOSObjectArray *vect);

FOUNDATION_EXPORT JavaMathBigInteger *GeogebraCommonKernelAlgosSymbolicParameters_det4WithJavaMathBigIntegerArray2_(IOSObjectArray *matrix);

FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonKernelAlgosSymbolicParameters_addBotanaVarsJoinPointsWithGeogebraCommonKernelGeosGeoElementArray_(IOSObjectArray *input);

FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonKernelAlgosSymbolicParameters_botanaPolynomialsMidpointWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelProverPolynomialVariableArray_(GeogebraCommonKernelGeosGeoElement *P, GeogebraCommonKernelGeosGeoElement *Q, IOSObjectArray *botanaVars);

FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonKernelAlgosSymbolicParameters_botanaPolynomialsLineBisectorWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariableArray_(GeogebraCommonKernelProverPolynomialVariable *Ax, GeogebraCommonKernelProverPolynomialVariable *Ay, GeogebraCommonKernelProverPolynomialVariable *Bx, GeogebraCommonKernelProverPolynomialVariable *By, IOSObjectArray *botanaVars);

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelAlgosSymbolicParameters)

#endif // _GeogebraCommonKernelAlgosSymbolicParameters_H_
