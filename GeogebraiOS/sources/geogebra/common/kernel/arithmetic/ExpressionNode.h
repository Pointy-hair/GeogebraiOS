//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/ExpressionNode.java
//

#ifndef _GeogebraCommonKernelArithmeticExpressionNode_H_
#define _GeogebraCommonKernelArithmeticExpressionNode_H_

#include "J2ObjC_header.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ReplaceChildrenByValues.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"

@class GeogebraCommonKernelArithmeticCommand;
@class GeogebraCommonKernelArithmeticEquation;
@class GeogebraCommonKernelArithmeticFunctionVariable;
@class GeogebraCommonKernelArithmeticPolynomial;
@class GeogebraCommonKernelGeosGeoElement;
@class GeogebraCommonKernelGeosGeoFunction;
@class GeogebraCommonKernelKernel;
@class GeogebraCommonKernelStringTemplate;
@class GeogebraCommonPluginOperationEnum;
@class IOSObjectArray;
@class JavaLangDouble;
@class JavaUtilArrayList;
@class JavaUtilHashSet;
@protocol GeogebraCommonKernelArithmeticExpressionValue;
@protocol GeogebraCommonKernelArithmeticInspecting;
@protocol GeogebraCommonKernelArithmeticTraversing;

@interface GeogebraCommonKernelArithmeticExpressionNode : GeogebraCommonKernelArithmeticValidExpression < GeogebraCommonKernelArithmeticExpressionNodeConstants, GeogebraCommonKernelArithmeticReplaceChildrenByValues > {
 @public
  jboolean holdsLaTeXtext_;
  jboolean leaf_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)node;

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel2
                                        withDouble:(jdouble)d;

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)leaf;

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)left
             withGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)operation
 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)right;

- (GeogebraCommonKernelArithmeticExpressionNode *)abs;

- (GeogebraCommonKernelArithmeticExpressionNode *)and__WithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v2;

- (GeogebraCommonKernelArithmeticExpressionNode *)applyWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)operation2;

- (GeogebraCommonKernelArithmeticExpressionNode *)applyWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)operation2
                                           withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)arg;

- (GeogebraCommonKernelArithmeticExpressionNode *)atan;

- (GeogebraCommonKernelArithmeticExpressionNode *)betaWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v2;

- (GeogebraCommonKernelArithmeticExpressionNode *)betaRegularizedWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v1
                                                                 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v2;

- (GeogebraCommonKernelGeosGeoFunction *)buildFunctionWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv;

- (GeogebraCommonKernelArithmeticExpressionNode *)cbrt;

+ (jboolean)chainedBooleanOpWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)op;

- (jboolean)containsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev;

- (jboolean)containsCasEvaluableFunction;

- (jboolean)containsFreeFunctionVariable;

- (jboolean)containsGeoFunctionNVar;

- (jboolean)containsMyStringBuffer;

+ (id<GeogebraCommonKernelArithmeticExpressionValue>)copy__WithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                              withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel OBJC_METHOD_FAMILY_NONE;

- (GeogebraCommonKernelArithmeticExpressionNode *)cos;

- (GeogebraCommonKernelArithmeticExpressionNode *)cosec;

- (GeogebraCommonKernelArithmeticExpressionNode *)cosech;

- (GeogebraCommonKernelArithmeticExpressionNode *)cosh;

- (GeogebraCommonKernelArithmeticExpressionNode *)cot;

- (GeogebraCommonKernelArithmeticExpressionNode *)coth;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel1;

- (GeogebraCommonKernelArithmeticExpressionNode *)derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv;

- (GeogebraCommonKernelArithmeticExpressionNode *)divideWithDouble:(jdouble)d;

- (GeogebraCommonKernelArithmeticExpressionNode *)divideWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v2;

- (GeogebraCommonKernelArithmeticExpressionNode *)erf;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)evaluateWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (jdouble)evaluateDouble;

- (jboolean)evaluatesTo3DVector;

- (jboolean)evaluatesToList;

- (jboolean)evaluatesToNonComplex2DVector;

- (jboolean)evaluatesToNumberWithBoolean:(jboolean)def;

- (jboolean)evaluatesToText;

- (jboolean)evaluatesToVectorNotPoint;

- (GeogebraCommonKernelArithmeticExpressionNode *)exp;

- (GeogebraCommonKernelArithmeticExpressionNode *)factorial;

- (GeogebraCommonKernelArithmeticExpressionNode *)gamma;

- (GeogebraCommonKernelArithmeticExpressionNode *)gammaIncompleteWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v2;

- (GeogebraCommonKernelArithmeticExpressionNode *)gammaIncompleteReverseArgsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v2;

- (NSString *)getCASstringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                     withBoolean:(jboolean)symbolic;

- (JavaLangDouble *)getCoefficientWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv;

- (GeogebraCommonKernelArithmeticExpressionNode *)getCopyWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel1;

- (IOSObjectArray *)getGeoElementVariables;

- (GeogebraCommonKernelKernel *)getKernel;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getLeft;

- (GeogebraCommonKernelArithmeticExpressionNode *)getLeftTree;

- (GeogebraCommonPluginOperationEnum *)getOperation;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getRight;

- (GeogebraCommonKernelArithmeticExpressionNode *)getRightTree;

- (GeogebraCommonKernelGeosGeoElement *)getSingleGeoElement;

- (GeogebraCommonKernelArithmeticCommand *)getTopLevelCommand;

- (NSString *)getTreeClass;

- (JavaUtilHashSet *)getUnconditionalVars;

- (JavaUtilHashSet *)getVariables;

- (jboolean)hasBrackets;

- (jboolean)hasCoords;

- (jboolean)hasOperations;

- (GeogebraCommonKernelArithmeticExpressionNode *)ifElseWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ifBranch
                                                        withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)elseBranch;

- (jboolean)includesDivisionByWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)val;

- (jboolean)includesNonContinuousIntegral;

- (jboolean)inspectWithGeogebraCommonKernelArithmeticInspecting:(id<GeogebraCommonKernelArithmeticInspecting>)t;

- (GeogebraCommonKernelArithmeticExpressionNode *)integralWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv;

- (jboolean)isConditional;

- (jboolean)isConditionalDeep;

- (jboolean)isConstant;

+ (jboolean)isEqualWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev1
                   withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev2;

+ (jboolean)isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                withDouble:(jdouble)val
                                                               withBoolean:(jboolean)symbolic;

- (jboolean)isExpressionNode;

- (jboolean)isForcedFunction;

- (jboolean)isForcedPoint;

- (jboolean)isForcedVector;

- (jboolean)isImaginaryUnit;

- (jboolean)isLeaf;

+ (jboolean)isMultiplyOrDivideWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)exp;

- (jboolean)isNumberValue;

- (jboolean)isSingleGeoElement;

- (jboolean)isSingleVariable;

- (jboolean)isTopLevelCommand;

- (GeogebraCommonKernelArithmeticExpressionNode *)lessThanWithDouble:(jdouble)d;

- (GeogebraCommonKernelArithmeticExpressionNode *)lessThanWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v2;

- (GeogebraCommonKernelArithmeticExpressionNode *)lessThanEqualWithDouble:(jdouble)d;

- (GeogebraCommonKernelArithmeticExpressionNode *)ln;

- (GeogebraCommonKernelArithmeticExpressionNode *)multiplyWithDouble:(jdouble)d;

- (GeogebraCommonKernelArithmeticExpressionNode *)multiplyWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v2;

- (GeogebraCommonKernelArithmeticExpressionNode *)multiplyRWithDouble:(jdouble)d;

- (GeogebraCommonKernelArithmeticExpressionNode *)multiplyRWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v2;

- (GeogebraCommonKernelArithmeticExpressionNode *)negation;

- (GeogebraCommonKernelArithmeticExpressionNode *)nrootWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)n;

+ (NSString *)operationToStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)left
                               withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)right
                                           withGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)operation
                                                                    withNSString:(NSString *)leftStr
                                                                    withNSString:(NSString *)rightStr
                                                                     withBoolean:(jboolean)valueForm
                                          withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                  withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel;

+ (jint)opIDWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev;

- (GeogebraCommonKernelArithmeticExpressionNode *)plusWithDouble:(jdouble)d;

- (GeogebraCommonKernelArithmeticExpressionNode *)plusWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v2;

- (GeogebraCommonKernelArithmeticExpressionNode *)plusRWithDouble:(jdouble)d;

- (GeogebraCommonKernelArithmeticExpressionNode *)polygammaWithDouble:(jdouble)n;

- (GeogebraCommonKernelArithmeticExpressionNode *)powerWithDouble:(jdouble)d;

- (GeogebraCommonKernelArithmeticExpressionNode *)powerWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v2;

- (GeogebraCommonKernelArithmeticExpressionNode *)powerRWithDouble:(jdouble)d;

- (GeogebraCommonKernelArithmeticExpressionNode *)reciprocate;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)replaceWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)oldObj
                                                            withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)newObj;

- (GeogebraCommonKernelArithmeticExpressionNode *)replaceCasCommands;

- (void)replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (jboolean)replacePowersRootsWithBoolean:(jboolean)toRoot
                                  withInt:(jint)maxRoot;

- (jint)replaceVariablesWithNSString:(NSString *)varName
withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fVar;

- (void)resolveVariables;

- (GeogebraCommonKernelArithmeticExpressionNode *)reverseSign;

- (GeogebraCommonKernelArithmeticExpressionNode *)reverseSign2;

- (GeogebraCommonKernelArithmeticExpressionNode *)sec;

- (GeogebraCommonKernelArithmeticExpressionNode *)sech;

- (void)setBracketsWithBoolean:(jboolean)brackets;

- (void)setForceFunction;

- (void)setForcePoint;

- (void)setForceVector;

- (void)setHoldsLaTeXtextWithBoolean:(jboolean)flag;

- (void)setLeftWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)l;

- (void)setOperationWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)op;

- (void)setRightWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)r;

- (GeogebraCommonKernelArithmeticExpressionNode *)sgn;

- (jboolean)shouldEvaluateToGeoVector;

- (void)simplifyConstantIntegers;

- (void)simplifyLeafs;

- (GeogebraCommonKernelArithmeticExpressionNode *)sin;

- (GeogebraCommonKernelArithmeticExpressionNode *)sinh;

- (GeogebraCommonKernelArithmeticExpressionNode *)sqrt;

- (GeogebraCommonKernelArithmeticExpressionNode *)square;

- (GeogebraCommonKernelArithmeticExpressionNode *)subtractWithDouble:(jdouble)d;

- (GeogebraCommonKernelArithmeticExpressionNode *)subtractWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v2;

- (GeogebraCommonKernelArithmeticExpressionNode *)subtractRWithDouble:(jdouble)d;

- (GeogebraCommonKernelArithmeticExpressionNode *)tan;

- (GeogebraCommonKernelArithmeticExpressionNode *)tanh;

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)toOutputValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)traverseWithGeogebraCommonKernelArithmeticTraversing:(id<GeogebraCommonKernelArithmeticTraversing>)t;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)unwrap;

- (GeogebraCommonKernelArithmeticExpressionNode *)wrap;

#pragma mark Protected

- (GeogebraCommonKernelArithmeticPolynomial *)makePolynomialTreeWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ;

- (jint)replaceXYZnodesWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)xVar
                       withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)yVar
                       withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)zVar
                                                    withJavaUtilArrayList:(JavaUtilArrayList *)undecided;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelArithmeticExpressionNode)

FOUNDATION_EXPORT void GeogebraCommonKernelArithmeticExpressionNode_init(GeogebraCommonKernelArithmeticExpressionNode *self);

FOUNDATION_EXPORT GeogebraCommonKernelArithmeticExpressionNode *new_GeogebraCommonKernelArithmeticExpressionNode_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmeticExpressionNode *self, GeogebraCommonKernelKernel *kernel, id<GeogebraCommonKernelArithmeticExpressionValue> left, GeogebraCommonPluginOperationEnum *operation, id<GeogebraCommonKernelArithmeticExpressionValue> right);

FOUNDATION_EXPORT GeogebraCommonKernelArithmeticExpressionNode *new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelKernel *kernel, id<GeogebraCommonKernelArithmeticExpressionValue> left, GeogebraCommonPluginOperationEnum *operation, id<GeogebraCommonKernelArithmeticExpressionValue> right) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmeticExpressionNode *self, GeogebraCommonKernelKernel *kernel, id<GeogebraCommonKernelArithmeticExpressionValue> leaf);

FOUNDATION_EXPORT GeogebraCommonKernelArithmeticExpressionNode *new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelKernel *kernel, id<GeogebraCommonKernelArithmeticExpressionValue> leaf) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelArithmeticExpressionNode *self, GeogebraCommonKernelArithmeticExpressionNode *node);

FOUNDATION_EXPORT GeogebraCommonKernelArithmeticExpressionNode *new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelArithmeticExpressionNode *node) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(GeogebraCommonKernelArithmeticExpressionNode *self, GeogebraCommonKernelKernel *kernel2, jdouble d);

FOUNDATION_EXPORT GeogebraCommonKernelArithmeticExpressionNode *new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(GeogebraCommonKernelKernel *kernel2, jdouble d) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticExpressionNode_copy__WithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(id<GeogebraCommonKernelArithmeticExpressionValue> ev, GeogebraCommonKernelKernel *kernel);

FOUNDATION_EXPORT NSString *GeogebraCommonKernelArithmeticExpressionNode_operationToStringWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withNSString_withNSString_withBoolean_withGeogebraCommonKernelStringTemplate_withGeogebraCommonKernelKernel_(id<GeogebraCommonKernelArithmeticExpressionValue> left, id<GeogebraCommonKernelArithmeticExpressionValue> right, GeogebraCommonPluginOperationEnum *operation, NSString *leftStr, NSString *rightStr, jboolean valueForm, GeogebraCommonKernelStringTemplate *tpl, GeogebraCommonKernelKernel *kernel);

FOUNDATION_EXPORT jboolean GeogebraCommonKernelArithmeticExpressionNode_isMultiplyOrDivideWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelArithmeticExpressionNode *exp);

FOUNDATION_EXPORT jint GeogebraCommonKernelArithmeticExpressionNode_opIDWithGeogebraCommonKernelArithmeticExpressionValue_(id<GeogebraCommonKernelArithmeticExpressionValue> ev);

FOUNDATION_EXPORT jboolean GeogebraCommonKernelArithmeticExpressionNode_isEqualWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(id<GeogebraCommonKernelArithmeticExpressionValue> ev1, id<GeogebraCommonKernelArithmeticExpressionValue> ev2);

FOUNDATION_EXPORT jboolean GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(id<GeogebraCommonKernelArithmeticExpressionValue> ev, jdouble val, jboolean symbolic);

FOUNDATION_EXPORT jboolean GeogebraCommonKernelArithmeticExpressionNode_chainedBooleanOpWithGeogebraCommonPluginOperationEnum_(GeogebraCommonPluginOperationEnum *op);

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelArithmeticExpressionNode)

#endif // _GeogebraCommonKernelArithmeticExpressionNode_H_
