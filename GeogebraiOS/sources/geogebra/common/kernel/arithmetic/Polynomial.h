//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/Polynomial.java
//

#ifndef _GeogebraCommonKernelArithmeticPolynomial_H_
#define _GeogebraCommonKernelArithmeticPolynomial_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"

@class GeogebraCommonKernelArithmeticEquation;
@class GeogebraCommonKernelArithmeticExpressionNode;
@class GeogebraCommonKernelArithmeticTerm;
@class GeogebraCommonKernelKernel;
@class GeogebraCommonPluginOperationEnum;
@class IOSObjectArray;
@protocol GeogebraCommonKernelArithmeticExpressionValue;

@interface GeogebraCommonKernelArithmeticPolynomial : NSObject < JavaIoSerializable >

#pragma mark Public

- (jint)degree;

- (IOSObjectArray *)getCoeff;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getCoefficientWithNSString:(NSString *)variables;

- (jdouble)getCoeffValueWithNSString:(NSString *)variables;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getConstantCoefficient;

- (jboolean)isConstant;

- (jboolean)isFreeOfWithChar:(jchar)var;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
      withGeogebraCommonKernelArithmeticPolynomial:(GeogebraCommonKernelArithmeticPolynomial *)poly;

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                      withNSString:(NSString *)vars;

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
            withGeogebraCommonKernelArithmeticTerm:(GeogebraCommonKernelArithmeticTerm *)t;

- (void)addWithGeogebraCommonKernelArithmeticPolynomial:(GeogebraCommonKernelArithmeticPolynomial *)e
             withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)eq;

- (GeogebraCommonKernelArithmeticPolynomial *)applyWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)operation
                                       withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)rt
                                              withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ;

- (GeogebraCommonKernelArithmeticPolynomial *)applyWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)operation
                                            withGeogebraCommonKernelArithmeticPolynomial:(GeogebraCommonKernelArithmeticPolynomial *)rt
                                              withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ;

- (jboolean)containsWithNSString:(NSString *)var;

+ (GeogebraCommonKernelArithmeticPolynomial *)fromNodeWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)lhs
                                                            withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)eqn;

- (GeogebraCommonKernelArithmeticTerm *)getTermWithInt:(jint)i;

- (jboolean)isEmpty;

- (jboolean)isVarWithNSString:(NSString *)var;

- (jint)length;

- (void)multiplyWithDouble:(jdouble)d;

- (void)simplifyWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)eq;

- (jint)singleDegree;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelArithmeticPolynomial)

FOUNDATION_EXPORT void GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticTerm_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelArithmeticTerm *t);

FOUNDATION_EXPORT GeogebraCommonKernelArithmeticPolynomial *new_GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticTerm_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelArithmeticTerm *t) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withNSString_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelKernel *kernel, NSString *vars);

FOUNDATION_EXPORT GeogebraCommonKernelArithmeticPolynomial *new_GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withNSString_(GeogebraCommonKernelKernel *kernel, NSString *vars) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticPolynomial_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelArithmeticPolynomial *poly);

FOUNDATION_EXPORT GeogebraCommonKernelArithmeticPolynomial *new_GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticPolynomial_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelArithmeticPolynomial *poly) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GeogebraCommonKernelArithmeticPolynomial *GeogebraCommonKernelArithmeticPolynomial_fromNodeWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelArithmeticExpressionNode *lhs, GeogebraCommonKernelArithmeticEquation *eqn);

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelArithmeticPolynomial)

#endif // _GeogebraCommonKernelArithmeticPolynomial_H_
