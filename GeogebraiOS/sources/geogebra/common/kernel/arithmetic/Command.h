//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/Command.java
//

#ifndef _GeogebraCommonKernelArithmeticCommand_H_
#define _GeogebraCommonKernelArithmeticCommand_H_

#include "J2ObjC_header.h"
#include "geogebra/common/kernel/arithmetic/GetItem.h"
#include "geogebra/common/kernel/arithmetic/ReplaceChildrenByValues.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"

@class GeogebraCommonKernelArithmeticExpressionNode;
@class GeogebraCommonKernelArithmeticFunctionVariable;
@class GeogebraCommonKernelGeosGeoElement;
@class GeogebraCommonKernelKernel;
@class GeogebraCommonKernelMacro;
@class GeogebraCommonKernelStringTemplate;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaUtilHashSet;
@protocol GeogebraCommonKernelArithmeticExpressionValue;
@protocol GeogebraCommonKernelArithmeticInspecting;
@protocol GeogebraCommonKernelArithmeticTraversing;

@interface GeogebraCommonKernelArithmeticCommand : GeogebraCommonKernelArithmeticValidExpression < GeogebraCommonKernelArithmeticReplaceChildrenByValues, GeogebraCommonKernelArithmeticGetItem >

#pragma mark Public

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                      withNSString:(NSString *)name
                                       withBoolean:(jboolean)translateName;

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                      withNSString:(NSString *)name
                                       withBoolean:(jboolean)translateName
                                       withBoolean:(jboolean)allowEvaluationForTypeCheck;

- (void)addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)arg;

- (jboolean)containsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel1;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)evaluateWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (IOSObjectArray *)evaluateMultiple;

- (jboolean)evaluatesTo3DVector;

- (jboolean)evaluatesToList;

- (jboolean)evaluatesToNonComplex2DVector;

- (jboolean)evaluatesToText;

- (jboolean)evaluatesToVectorNotPoint;

- (GeogebraCommonKernelArithmeticExpressionNode *)getArgumentWithInt:(jint)i;

- (jint)getArgumentNumber;

- (IOSObjectArray *)getArguments;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getItemWithInt:(jint)i;

- (GeogebraCommonKernelKernel *)getKernel;

- (jint)getLength;

- (GeogebraCommonKernelMacro *)getMacro;

- (NSString *)getName;

- (IOSIntArray *)getOutputSizes;

- (GeogebraCommonKernelArithmeticCommand *)getTopLevelCommand;

- (NSString *)getVariableNameWithInt:(jint)i;

- (JavaUtilHashSet *)getVariables;

- (jboolean)hasCoords;

- (jboolean)inspectWithGeogebraCommonKernelArithmeticInspecting:(id<GeogebraCommonKernelArithmeticInspecting>)t;

- (jboolean)isConstant;

- (jboolean)isLeaf;

- (jboolean)isNumberValue;

- (jboolean)isTopLevelCommand;

- (void)replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (jint)replaceVariablesWithNSString:(NSString *)varName
withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fVar;

- (void)resolveVariables;

- (void)setArgumentWithInt:(jint)i
withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)en;

- (void)setMacroWithGeogebraCommonKernelMacro:(GeogebraCommonKernelMacro *)macro;

- (void)setOutputSizesWithIntArray:(IOSIntArray *)sizes;

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)toOutputValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)traverseWithGeogebraCommonKernelArithmeticTraversing:(id<GeogebraCommonKernelArithmeticTraversing>)t;

- (GeogebraCommonKernelArithmeticExpressionNode *)wrap;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelArithmeticCommand)

FOUNDATION_EXPORT void GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_(GeogebraCommonKernelArithmeticCommand *self, GeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName);

FOUNDATION_EXPORT GeogebraCommonKernelArithmeticCommand *new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_(GeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(GeogebraCommonKernelArithmeticCommand *self, GeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName, jboolean allowEvaluationForTypeCheck);

FOUNDATION_EXPORT GeogebraCommonKernelArithmeticCommand *new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(GeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName, jboolean allowEvaluationForTypeCheck) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelArithmeticCommand)

#endif // _GeogebraCommonKernelArithmeticCommand_H_
