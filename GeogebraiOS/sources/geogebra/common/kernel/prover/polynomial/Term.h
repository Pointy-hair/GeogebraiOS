//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/prover/polynomial/Term.java
//

#ifndef _GeogebraCommonKernelProverPolynomialTerm_H_
#define _GeogebraCommonKernelProverPolynomialTerm_H_

#include "J2ObjC_header.h"
#include "java/lang/Comparable.h"

@class GeogebraCommonKernelProverPolynomialVariable;
@class JavaUtilHashSet;
@class JavaUtilTreeMap;

@interface GeogebraCommonKernelProverPolynomialTerm : NSObject < JavaLangComparable >

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithGeogebraCommonKernelProverPolynomialTerm:(GeogebraCommonKernelProverPolynomialTerm *)t;

- (instancetype)initWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)variable;

- (instancetype)initWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)variable
                                                             withInt:(jint)exponent;

- (jint)compareToWithId:(GeogebraCommonKernelProverPolynomialTerm *)o;

+ (jboolean)dividesWithGeogebraCommonKernelProverPolynomialTerm:(GeogebraCommonKernelProverPolynomialTerm *)f
                   withGeogebraCommonKernelProverPolynomialTerm:(GeogebraCommonKernelProverPolynomialTerm *)g;

- (jboolean)isEqual:(id)o;

- (GeogebraCommonKernelProverPolynomialVariable *)getHighestVariable;

- (JavaUtilTreeMap *)getTerm;

- (JavaUtilHashSet *)getVars;

- (NSUInteger)hash;

- (GeogebraCommonKernelProverPolynomialTerm *)timesWithGeogebraCommonKernelProverPolynomialTerm:(GeogebraCommonKernelProverPolynomialTerm *)term;

- (NSString *)description;

- (NSString *)toTeX;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)variables;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelProverPolynomialTerm)

FOUNDATION_EXPORT void GeogebraCommonKernelProverPolynomialTerm_init(GeogebraCommonKernelProverPolynomialTerm *self);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialTerm *new_GeogebraCommonKernelProverPolynomialTerm_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialTerm_(GeogebraCommonKernelProverPolynomialTerm *self, GeogebraCommonKernelProverPolynomialTerm *t);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialTerm *new_GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialTerm_(GeogebraCommonKernelProverPolynomialTerm *t) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelProverPolynomialTerm_initWithJavaUtilTreeMap_(GeogebraCommonKernelProverPolynomialTerm *self, JavaUtilTreeMap *variables);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialTerm *new_GeogebraCommonKernelProverPolynomialTerm_initWithJavaUtilTreeMap_(JavaUtilTreeMap *variables) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialTerm *self, GeogebraCommonKernelProverPolynomialVariable *variable);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialTerm *new_GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialVariable *variable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_withInt_(GeogebraCommonKernelProverPolynomialTerm *self, GeogebraCommonKernelProverPolynomialVariable *variable, jint exponent);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialTerm *new_GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_withInt_(GeogebraCommonKernelProverPolynomialVariable *variable, jint exponent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT jboolean GeogebraCommonKernelProverPolynomialTerm_dividesWithGeogebraCommonKernelProverPolynomialTerm_withGeogebraCommonKernelProverPolynomialTerm_(GeogebraCommonKernelProverPolynomialTerm *f, GeogebraCommonKernelProverPolynomialTerm *g);

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelProverPolynomialTerm)

#endif // _GeogebraCommonKernelProverPolynomialTerm_H_
