//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/prover/polynomial/Polynomial.java
//

#ifndef _GeogebraCommonKernelProverPolynomialPolynomial_H_
#define _GeogebraCommonKernelProverPolynomialPolynomial_H_

#include "J2ObjC_header.h"
#include "java/lang/Comparable.h"

@class GeogebraCommonKernelKernel;
@class GeogebraCommonKernelProverPolynomialTerm;
@class GeogebraCommonKernelProverPolynomialVariable;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaUtilHashMap;
@class JavaUtilHashSet;
@class JavaUtilTreeMap;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface GeogebraCommonKernelProverPolynomialPolynomial : NSObject < JavaLangComparable >

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)coeff;

- (instancetype)initWithInt:(jint)coeff
withGeogebraCommonKernelProverPolynomialTerm:(GeogebraCommonKernelProverPolynomialTerm *)t;

- (instancetype)initWithInt:(jint)coeff
withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)variable;

- (instancetype)initWithInt:(jint)coeff
withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)variable
                    withInt:(jint)power;

- (instancetype)initWithGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)poly;

- (instancetype)initWithGeogebraCommonKernelProverPolynomialTerm:(GeogebraCommonKernelProverPolynomialTerm *)t;

- (instancetype)initWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)fv;

- (GeogebraCommonKernelProverPolynomialPolynomial *)addWithGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)poly;

+ (NSString *)addLeadingCommaWithNSString:(NSString *)inArg;

+ (jboolean)areAssociates1WithGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)p1
                          withGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)p2;

+ (NSString *)coalesceWithNSString:(NSString *)in1
                      withNSString:(NSString *)in2;

+ (GeogebraCommonKernelProverPolynomialPolynomial *)collinearWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)fv1
                                                             withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)fv2
                                                             withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)fv3
                                                             withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)fv4
                                                             withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)fv5
                                                             withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)fv6;

- (jint)compareToWithId:(GeogebraCommonKernelProverPolynomialPolynomial *)poly;

+ (NSString *)createEliminateFactorizedScriptWithGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys
                                               withGeogebraCommonKernelProverPolynomialVariableArray:(IOSObjectArray *)pVariables
                                                                                     withJavaUtilSet:(id<JavaUtilSet>)dependentVariables;

+ (NSString *)createGroebnerSolvableScriptWithJavaUtilHashMap:(JavaUtilHashMap *)substitutions
                                                 withNSString:(NSString *)polys
                                                 withNSString:(NSString *)fieldVars
                                                 withNSString:(NSString *)ringVars
                                                  withBoolean:(jboolean)transcext;

+ (IOSObjectArray *)crossProductWithGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)a
                                withGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)b;

+ (GeogebraCommonKernelProverPolynomialPolynomial *)det4WithGeogebraCommonKernelProverPolynomialPolynomialArray2:(IOSObjectArray *)matrix;

+ (id<JavaUtilSet>)eliminateWithGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)eqSystem
                                                                withJavaUtilHashMap:(JavaUtilHashMap *)substitutions
                                                     withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                                                            withInt:(jint)permutation;

- (jboolean)isEqual:(id)o;

+ (GeogebraCommonKernelProverPolynomialPolynomial *)equidistantWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)a1
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)a2
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)o1
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)o2
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)b1
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)b2;

+ (NSString *)getPolysAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys;

- (NSString *)getSingularMultiplicationWithNSString:(NSString *)ringVariable
 withGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)p1
 withGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)p2;

- (JavaUtilTreeMap *)getTerms;

- (JavaUtilHashSet *)getVars;

+ (JavaUtilHashSet *)getVarsWithGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys;

+ (NSString *)getVarsAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys
                                                                               withJavaUtilHashSet:(JavaUtilHashSet *)extraVars
                                                                               withJavaLangBoolean:(JavaLangBoolean *)free;

- (NSUInteger)hash;

- (jboolean)isConstant;

- (jboolean)isOne;

- (jboolean)isZero;

- (GeogebraCommonKernelProverPolynomialPolynomial *)multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)poly;

- (GeogebraCommonKernelProverPolynomialPolynomial *)negate;

+ (GeogebraCommonKernelProverPolynomialPolynomial *)parallelWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v1
                                                            withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v2
                                                            withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v3
                                                            withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v4
                                                            withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v5
                                                            withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v6
                                                            withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v7
                                                            withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v8;

+ (GeogebraCommonKernelProverPolynomialPolynomial *)perpendicularWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v1
                                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v2
                                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v3
                                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v4
                                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v5
                                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v6
                                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v7
                                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v8;

+ (JavaLangBoolean *)solvableWithGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys
                                                                 withJavaUtilHashMap:(JavaUtilHashMap *)substitutions
                                                      withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                                                         withBoolean:(jboolean)transcext;

+ (GeogebraCommonKernelProverPolynomialPolynomial *)sqrWithGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)p;

+ (GeogebraCommonKernelProverPolynomialPolynomial *)sqrDistanceWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)a1
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)a2
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)b1
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)b2;

- (GeogebraCommonKernelProverPolynomialPolynomial *)substituteWithJavaUtilMap:(id<JavaUtilMap>)substitutions;

- (GeogebraCommonKernelProverPolynomialPolynomial *)subtractWithGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)poly;

- (NSString *)description;

- (NSString *)toTeX;

#pragma mark Package-Private

+ (NSString *)substitutionsStringWithJavaUtilHashMap:(JavaUtilHashMap *)subst;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelProverPolynomialPolynomial)

FOUNDATION_EXPORT void GeogebraCommonKernelProverPolynomialPolynomial_init(GeogebraCommonKernelProverPolynomialPolynomial *self);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialPolynomial_(GeogebraCommonKernelProverPolynomialPolynomial *self, GeogebraCommonKernelProverPolynomialPolynomial *poly);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialPolynomial_(GeogebraCommonKernelProverPolynomialPolynomial *poly) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(GeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(jint coeff) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialPolynomial *self, GeogebraCommonKernelProverPolynomialVariable *fv);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialVariable *fv) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff, GeogebraCommonKernelProverPolynomialVariable *variable);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialVariable_(jint coeff, GeogebraCommonKernelProverPolynomialVariable *variable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialVariable_withInt_(GeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff, GeogebraCommonKernelProverPolynomialVariable *variable, jint power);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialVariable_withInt_(jint coeff, GeogebraCommonKernelProverPolynomialVariable *variable, jint power) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialTerm_(GeogebraCommonKernelProverPolynomialPolynomial *self, GeogebraCommonKernelProverPolynomialTerm *t);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialTerm_(GeogebraCommonKernelProverPolynomialTerm *t) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialTerm_(GeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff, GeogebraCommonKernelProverPolynomialTerm *t);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialTerm_(jint coeff, GeogebraCommonKernelProverPolynomialTerm *t) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilHashSet *GeogebraCommonKernelProverPolynomialPolynomial_getVarsWithGeogebraCommonKernelProverPolynomialPolynomialArray_(IOSObjectArray *polys);

FOUNDATION_EXPORT NSString *GeogebraCommonKernelProverPolynomialPolynomial_getVarsAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashSet_withJavaLangBoolean_(IOSObjectArray *polys, JavaUtilHashSet *extraVars, JavaLangBoolean *free);

FOUNDATION_EXPORT NSString *GeogebraCommonKernelProverPolynomialPolynomial_getPolysAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray_(IOSObjectArray *polys);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomial_collinearWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialVariable *fv1, GeogebraCommonKernelProverPolynomialVariable *fv2, GeogebraCommonKernelProverPolynomialVariable *fv3, GeogebraCommonKernelProverPolynomialVariable *fv4, GeogebraCommonKernelProverPolynomialVariable *fv5, GeogebraCommonKernelProverPolynomialVariable *fv6);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomial_perpendicularWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialVariable *v1, GeogebraCommonKernelProverPolynomialVariable *v2, GeogebraCommonKernelProverPolynomialVariable *v3, GeogebraCommonKernelProverPolynomialVariable *v4, GeogebraCommonKernelProverPolynomialVariable *v5, GeogebraCommonKernelProverPolynomialVariable *v6, GeogebraCommonKernelProverPolynomialVariable *v7, GeogebraCommonKernelProverPolynomialVariable *v8);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomial_parallelWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialVariable *v1, GeogebraCommonKernelProverPolynomialVariable *v2, GeogebraCommonKernelProverPolynomialVariable *v3, GeogebraCommonKernelProverPolynomialVariable *v4, GeogebraCommonKernelProverPolynomialVariable *v5, GeogebraCommonKernelProverPolynomialVariable *v6, GeogebraCommonKernelProverPolynomialVariable *v7, GeogebraCommonKernelProverPolynomialVariable *v8);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomial_det4WithGeogebraCommonKernelProverPolynomialPolynomialArray2_(IOSObjectArray *matrix);

FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonKernelProverPolynomialPolynomial_crossProductWithGeogebraCommonKernelProverPolynomialPolynomialArray_withGeogebraCommonKernelProverPolynomialPolynomialArray_(IOSObjectArray *a, IOSObjectArray *b);

FOUNDATION_EXPORT jboolean GeogebraCommonKernelProverPolynomialPolynomial_areAssociates1WithGeogebraCommonKernelProverPolynomialPolynomial_withGeogebraCommonKernelProverPolynomialPolynomial_(GeogebraCommonKernelProverPolynomialPolynomial *p1, GeogebraCommonKernelProverPolynomialPolynomial *p2);

FOUNDATION_EXPORT NSString *GeogebraCommonKernelProverPolynomialPolynomial_substitutionsStringWithJavaUtilHashMap_(JavaUtilHashMap *subst);

FOUNDATION_EXPORT NSString *GeogebraCommonKernelProverPolynomialPolynomial_addLeadingCommaWithNSString_(NSString *inArg);

FOUNDATION_EXPORT NSString *GeogebraCommonKernelProverPolynomialPolynomial_coalesceWithNSString_withNSString_(NSString *in1, NSString *in2);

FOUNDATION_EXPORT NSString *GeogebraCommonKernelProverPolynomialPolynomial_createGroebnerSolvableScriptWithJavaUtilHashMap_withNSString_withNSString_withNSString_withBoolean_(JavaUtilHashMap *substitutions, NSString *polys, NSString *fieldVars, NSString *ringVars, jboolean transcext);

FOUNDATION_EXPORT NSString *GeogebraCommonKernelProverPolynomialPolynomial_createEliminateFactorizedScriptWithGeogebraCommonKernelProverPolynomialPolynomialArray_withGeogebraCommonKernelProverPolynomialVariableArray_withJavaUtilSet_(IOSObjectArray *polys, IOSObjectArray *pVariables, id<JavaUtilSet> dependentVariables);

FOUNDATION_EXPORT JavaLangBoolean *GeogebraCommonKernelProverPolynomialPolynomial_solvableWithGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withGeogebraCommonKernelKernel_withBoolean_(IOSObjectArray *polys, JavaUtilHashMap *substitutions, GeogebraCommonKernelKernel *kernel, jboolean transcext);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomial_sqrWithGeogebraCommonKernelProverPolynomialPolynomial_(GeogebraCommonKernelProverPolynomialPolynomial *p);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomial_sqrDistanceWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialVariable *a1, GeogebraCommonKernelProverPolynomialVariable *a2, GeogebraCommonKernelProverPolynomialVariable *b1, GeogebraCommonKernelProverPolynomialVariable *b2);

FOUNDATION_EXPORT GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomial_equidistantWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialVariable *a1, GeogebraCommonKernelProverPolynomialVariable *a2, GeogebraCommonKernelProverPolynomialVariable *o1, GeogebraCommonKernelProverPolynomialVariable *o2, GeogebraCommonKernelProverPolynomialVariable *b1, GeogebraCommonKernelProverPolynomialVariable *b2);

FOUNDATION_EXPORT id<JavaUtilSet> GeogebraCommonKernelProverPolynomialPolynomial_eliminateWithGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withGeogebraCommonKernelKernel_withInt_(IOSObjectArray *eqSystem, JavaUtilHashMap *substitutions, GeogebraCommonKernelKernel *kernel, jint permutation);

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelProverPolynomialPolynomial)

#endif // _GeogebraCommonKernelProverPolynomialPolynomial_H_
