//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawConicSection.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GAffineTransform.h"
#include "geogebra/common/awt/GArc2D.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGeneralPath.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GLine2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/awt/GShape.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "geogebra/common/euclidian/GeneralPathClipped.h"
#include "geogebra/common/euclidian/clipping/ClipShape.h"
#include "geogebra/common/euclidian/draw/DrawConic.h"
#include "geogebra/common/euclidian/draw/DrawConicSection.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicSectionInterface.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"

@interface GeogebraCommonEuclidianDrawDrawConicSection () {
 @public
  id<GeogebraCommonAwtGArc2D> arc_DrawConicSection_;
  id<GeogebraCommonAwtGLine2D> line_;
  IOSObjectArray *lines_DrawConicSection_;
  GeogebraCommonEuclidianGeneralPathClipped *hyp_;
  jboolean onlyEdge_;
  IOSObjectArray *endPoints_;
  jboolean drawLeft_;
}

- (void)updateEllipseEdge;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConicSection, arc_DrawConicSection_, id<GeogebraCommonAwtGArc2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConicSection, line_, id<GeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConicSection, lines_DrawConicSection_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConicSection, hyp_, GeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConicSection, endPoints_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawConicSection_updateEllipseEdge(GeogebraCommonEuclidianDrawDrawConicSection *self);

@implementation GeogebraCommonEuclidianDrawDrawConicSection

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                  withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonEuclidianDrawDrawConicSection_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicND_(self, view, c);
  return self;
}

- (jdouble)getStartWithInt:(jint)i {
  return [((id<GeogebraCommonKernelKernelNDGeoConicSectionInterface>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoConicSectionInterface>) check_protocol_cast([self getGeoElement], @protocol(GeogebraCommonKernelKernelNDGeoConicSectionInterface))))) getParameterStartWithInt:i];
}

- (jdouble)getExtentWithInt:(jint)i {
  return [((id<GeogebraCommonKernelKernelNDGeoConicSectionInterface>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoConicSectionInterface>) check_protocol_cast([self getGeoElement], @protocol(GeogebraCommonKernelKernelNDGeoConicSectionInterface))))) getParameterExtentWithInt:i];
}

- (jdouble)getEndWithInt:(jint)i {
  return [((id<GeogebraCommonKernelKernelNDGeoConicSectionInterface>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoConicSectionInterface>) check_protocol_cast([self getGeoElement], @protocol(GeogebraCommonKernelKernelNDGeoConicSectionInterface))))) getParameterEndWithInt:i];
}

+ (GeogebraCommonKernelMatrixCoords *)ellipsePointWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)m
                                                  withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)ev0
                                                  withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)ev1
                                                                            withDouble:(jdouble)r0
                                                                            withDouble:(jdouble)r1
                                                                            withDouble:(jdouble)parameter {
  return GeogebraCommonEuclidianDrawDrawConicSection_ellipsePointWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDouble_withDouble_withDouble_(m, ev0, ev1, r0, r1, parameter);
}

- (void)updateEllipseEdge {
  GeogebraCommonEuclidianDrawDrawConicSection_updateEllipseEdge(self);
}

- (void)updateCircle {
  onlyEdge_ = NO;
  [super updateCircle];
}

- (void)updateHyperbola {
  onlyEdge_ = NO;
  [super updateHyperbola];
}

- (void)updateParabola {
  onlyEdge_ = NO;
  [super updateParabola];
}

- (jboolean)checkIsOnFilling {
  return [super checkIsOnFilling] && !onlyEdge_;
}

- (jboolean)hitEllipseWithInt:(jint)hitX
                      withInt:(jint)hitY
                      withInt:(jint)hitThreshold {
  if (onlyEdge_) {
    return [((id<GeogebraCommonAwtGShape>) nil_chk(shape_DrawConic_)) intersectsWithInt:hitX - hitThreshold withInt:hitY - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
  }
  return [super hitEllipseWithInt:hitX withInt:hitY withInt:hitThreshold];
}

- (void)updateEllipse {
  onlyEdge_ = NO;
  JavaLangDouble *start0 = JavaLangDouble_valueOfWithDouble_([self getStartWithInt:0]);
  if (JavaLangDouble_isNaNWithDouble_([start0 doubleValue])) {
    [super updateEllipse];
    return;
  }
  GeogebraCommonKernelMatrixCoords *M = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D]];
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(M)) getZ])) {
    GeogebraCommonEuclidianDrawDrawConicSection_updateEllipseEdge(self);
    onlyEdge_ = YES;
    return;
  }
  if (ev_ == nil) {
    GeogebraCommonEuclidianDrawDrawConic_setAndConsume_ev_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelMatrixCoords_class_()]);
  }
  for (jint j = 0; j < 2; j++) {
    IOSObjectArray_Set(nil_chk(ev_), j, [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[conic_ getEigenvec3DWithInt:j]]);
    if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(ev_, j))) getZ])) {
      GeogebraCommonEuclidianDrawDrawConicSection_updateEllipseEdge(self);
      onlyEdge_ = YES;
      return;
    }
  }
  jdouble xradius = IOSDoubleArray_Get(nil_chk(halfAxes_), 0) * [view_ getXscale];
  jdouble yradius = IOSDoubleArray_Get(halfAxes_, 1) * [view_ getYscale];
  id<GeogebraCommonAwtGShape> arcs;
  if (arc_DrawConicSection_ == nil) {
    GeogebraCommonEuclidianDrawDrawConicSection_set_arc_DrawConicSection_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newArc2D]);
  }
  JavaLangDouble *extent0 = JavaLangDouble_valueOfWithDouble_([self getExtentWithInt:0]);
  JavaLangDouble *start1 = JavaLangDouble_valueOfWithDouble_([self getStartWithInt:1]);
  jint type;
  if (JavaLangDouble_isNaNWithDouble_([start1 doubleValue])) {
    type = GeogebraCommonAwtGArc2D_CHORD;
  }
  else {
    type = GeogebraCommonAwtGArc2D_OPEN;
  }
  [((id<GeogebraCommonAwtGArc2D>) nil_chk(arc_DrawConicSection_)) setArcWithDouble:-IOSDoubleArray_Get(halfAxes_, 0) withDouble:-IOSDoubleArray_Get(halfAxes_, 1) withDouble:2 * IOSDoubleArray_Get(halfAxes_, 0) withDouble:2 * IOSDoubleArray_Get(halfAxes_, 1) withDouble:-JavaLangMath_toDegreesWithDouble_([start0 doubleValue]) withDouble:-JavaLangMath_toDegreesWithDouble_([extent0 doubleValue]) withInt:type];
  if (JavaLangDouble_isNaNWithDouble_([start1 doubleValue])) {
    arcs = arc_DrawConicSection_;
  }
  else {
    arcs = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath];
    [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(((id<GeogebraCommonAwtGGeneralPath>) check_protocol_cast(arcs, @protocol(GeogebraCommonAwtGGeneralPath))))) appendWithGeogebraCommonAwtGShape:arc_DrawConicSection_ withBoolean:YES];
    JavaLangDouble *extent1 = JavaLangDouble_valueOfWithDouble_([self getExtentWithInt:1]);
    [arc_DrawConicSection_ setArcWithDouble:-IOSDoubleArray_Get(halfAxes_, 0) withDouble:-IOSDoubleArray_Get(halfAxes_, 1) withDouble:2 * IOSDoubleArray_Get(halfAxes_, 0) withDouble:2 * IOSDoubleArray_Get(halfAxes_, 1) withDouble:-JavaLangMath_toDegreesWithDouble_([start1 doubleValue]) withDouble:-JavaLangMath_toDegreesWithDouble_([extent1 doubleValue]) withInt:GeogebraCommonAwtGArc2D_OPEN];
    [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(((id<GeogebraCommonAwtGGeneralPath>) check_protocol_cast(arcs, @protocol(GeogebraCommonAwtGGeneralPath))))) appendWithGeogebraCommonAwtGShape:arc_DrawConicSection_ withBoolean:YES];
    [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(((id<GeogebraCommonAwtGGeneralPath>) check_protocol_cast(arcs, @protocol(GeogebraCommonAwtGGeneralPath))))) closePath];
  }
  [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(transform_)) setTransformWithGeogebraCommonAwtGAffineTransform:[view_ getCoordTransform]];
  [transform_ concatenateWithGeogebraCommonAwtGAffineTransform:[((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([view_ getCompanion])) getTransformWithGeogebraCommonKernelKernelNDGeoConicND:conic_ withGeogebraCommonKernelMatrixCoords:M withGeogebraCommonKernelMatrixCoordsArray:ev_]];
  jint BIG_RADIUS = [view_ getWidth] + [view_ getHeight];
  if (xradius < BIG_RADIUS && yradius < BIG_RADIUS) {
    GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, [transform_ createTransformedShapeWithGeogebraCommonAwtGShape:arcs]);
  }
  else {
    GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, GeogebraCommonEuclidianClippingClipShape_clipToRectWithGeogebraCommonAwtGShape_withGeogebraCommonAwtGAffineTransform_withGeogebraCommonAwtGRectangle2D_(arcs, transform_, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:-1 withInt:-1 withInt:[view_ getWidth] + 2 withInt:[view_ getHeight] + 2]));
  }
  *IOSDoubleArray_GetRef(nil_chk(labelCoords_), 0) = IOSDoubleArray_Get(halfAxes_, 0) * JavaLangMath_cosWithDouble_([start0 doubleValue]);
  *IOSDoubleArray_GetRef(labelCoords_, 1) = IOSDoubleArray_Get(halfAxes_, 1) * JavaLangMath_sinWithDouble_([start0 doubleValue]);
  [transform_ transformWithDoubleArray:labelCoords_ withInt:0 withDoubleArray:labelCoords_ withInt:0 withInt:1];
  xLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(labelCoords_, 0));
  yLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(labelCoords_, 1));
}

- (void)updateLines {
  if (endPoints_ == nil) {
    GeogebraCommonEuclidianDrawDrawConicSection_setAndConsume_endPoints_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelMatrixCoords_class_()]);
  }
  GeogebraCommonKernelMatrixCoords *m = [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getOrigin3DWithInt:0];
  GeogebraCommonKernelMatrixCoords *d = [conic_ getDirection3DWithInt:0];
  IOSObjectArray_Set(nil_chk(endPoints_), 0, [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(m)) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(d)) mulWithDouble:[self getStartWithInt:0]]]]);
  IOSObjectArray_Set(endPoints_, 1, [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[m addWithGeogebraCommonKernelMatrixCoords:[d mulWithDouble:[self getEndWithInt:0]]]]);
  m = [conic_ getOrigin3DWithInt:1];
  d = [conic_ getDirection3DWithInt:1];
  IOSObjectArray_Set(endPoints_, 3, [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(m)) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(d)) mulWithDouble:[self getStartWithInt:1]]]]);
  IOSObjectArray_Set(endPoints_, 2, [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[m addWithGeogebraCommonKernelMatrixCoords:[d mulWithDouble:[self getEndWithInt:1]]]]);
  id<GeogebraCommonAwtGGeneralPath> path = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath];
  jint numPoints = -1;
  jint tx0 = 0, ty0 = 0, x1 = 0, y1 = 0, x2, y2;
  jfloat x, y;
  for (jint i = 0; i < 4; i++) {
    if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(endPoints_, i))) getZ])) {
      if (numPoints == -1) {
        x = (jfloat) [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(endPoints_, i))) getX];
        y = (jfloat) [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(endPoints_, i))) getY];
        [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(path)) moveToWithFloat:x withFloat:y];
        numPoints++;
        tx0 = [view_ toScreenCoordXWithDouble:x];
        ty0 = [view_ toScreenCoordYWithDouble:y];
        x1 = tx0;
        y1 = ty0;
      }
      else {
        x = (jfloat) [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(endPoints_, i))) getX];
        y = (jfloat) [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(endPoints_, i))) getY];
        [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(path)) lineToWithFloat:x withFloat:y];
        x2 = [view_ toScreenCoordXWithDouble:x];
        y2 = [view_ toScreenCoordYWithDouble:y];
        if (lines_DrawConicSection_ == nil) {
          GeogebraCommonEuclidianDrawDrawConicSection_setAndConsume_lines_DrawConicSection_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonAwtGLine2D_class_()]);
        }
        if (IOSObjectArray_Get(nil_chk(lines_DrawConicSection_), numPoints) == nil) IOSObjectArray_Set(lines_DrawConicSection_, numPoints, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newLine2D]);
        [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(lines_DrawConicSection_, numPoints))) setLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2];
        x1 = x2;
        y1 = y2;
        numPoints++;
      }
    }
  }
  if (numPoints > 0) {
    [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(path)) closePath];
    if (IOSObjectArray_Get(nil_chk(lines_DrawConicSection_), numPoints) == nil) IOSObjectArray_Set(lines_DrawConicSection_, numPoints, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newLine2D]);
    [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(lines_DrawConicSection_, numPoints))) setLineWithDouble:x1 withDouble:y1 withDouble:tx0 withDouble:ty0];
  }
  [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(transform_)) setTransformWithGeogebraCommonAwtGAffineTransform:[view_ getCoordTransform]];
  GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, [transform_ createTransformedShapeWithGeogebraCommonAwtGShape:path]);
}

- (void)updateDoubleLine {
  GeogebraCommonKernelMatrixCoords *m = [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getOrigin3DWithInt:0];
  GeogebraCommonKernelMatrixCoords *d = [conic_ getDirection3DWithInt:0];
  GeogebraCommonKernelMatrixCoords *A = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(m)) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(d)) mulWithDouble:[self getStartWithInt:0]]]];
  GeogebraCommonKernelMatrixCoords *B = [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[m addWithGeogebraCommonKernelMatrixCoords:[d mulWithDouble:[self getEndWithInt:0]]]];
  if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(A)) getZ]) && GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(B)) getZ])) {
    if (line_ == nil) GeogebraCommonEuclidianDrawDrawConicSection_set_line_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
    [((id<GeogebraCommonAwtGLine2D>) nil_chk(line_)) setLineWithDouble:[A getX] withDouble:[A getY] withDouble:[B getX] withDouble:[B getY]];
  }
  else {
    isVisible_ = NO;
    return;
  }
  [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(transform_)) setTransformWithGeogebraCommonAwtGAffineTransform:[view_ getCoordTransform]];
  GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, [transform_ createTransformedShapeWithGeogebraCommonAwtGShape:line_]);
}

- (void)drawLinesWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:shape_DrawConic_ withBoolean:NO];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
    [g2 setColorWithGeogebraCommonAwtGColor:[geo_ getSelColor]];
    [g2 drawWithGeogebraCommonAwtGShape:shape_DrawConic_];
  }
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
  [g2 setColorWithGeogebraCommonAwtGColor:[geo_ getObjectColor]];
  [g2 drawWithGeogebraCommonAwtGShape:shape_DrawConic_];
  if (labelVisible_) {
    [g2 setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontConic]];
    [g2 setColorWithGeogebraCommonAwtGColor:[geo_ getLabelColor]];
    [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (jboolean)hitLinesWithInt:(jint)screenx
                    withInt:(jint)screeny
                    withInt:(jint)hitThreshold {
  if (lines_DrawConicSection_ == nil) {
    return NO;
  }
  for (jint i = 0; i < 4; i++) {
    GeogebraCommonEuclidianDrawDrawConicSection_set_line_(self, IOSObjectArray_Get(nil_chk(lines_DrawConicSection_), i));
    if (line_ != nil) {
      if ([line_ intersectsWithInt:screenx - hitThreshold withInt:screeny - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold]) {
        return YES;
      }
    }
  }
  return NO;
}

- (void)updateParabolaX0Y0 {
  y0_ = [self getEndWithInt:0] * ((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_))->p_;
  x0_ = y0_ * y0_ / (conic_->p_ * 2);
}

- (void)updateParabolaEdge {
  GeogebraCommonKernelMatrixCoords *m = [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D];
  GeogebraCommonKernelMatrixCoords *ev1 = [conic_ getEigenvec3DWithInt:0];
  GeogebraCommonKernelMatrixCoords *ev2 = [conic_ getEigenvec3DWithInt:1];
  jdouble t, u, v;
  t = [self getStartWithInt:0];
  u = conic_->p_ * t * t / 2;
  v = conic_->p_ * t;
  GeogebraCommonKernelMatrixCoords *A = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(m)) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(ev1)) mulWithDouble:u]])) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(ev2)) mulWithDouble:v]]];
  t = [self getEndWithInt:0];
  u = conic_->p_ * t * t / 2;
  v = conic_->p_ * t;
  GeogebraCommonKernelMatrixCoords *B = [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([m addWithGeogebraCommonKernelMatrixCoords:[ev1 mulWithDouble:u]])) addWithGeogebraCommonKernelMatrixCoords:[ev2 mulWithDouble:v]]];
  if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(A)) getZ]) && GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(B)) getZ])) {
    if (line_ == nil) GeogebraCommonEuclidianDrawDrawConicSection_set_line_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
    [((id<GeogebraCommonAwtGLine2D>) nil_chk(line_)) setLineWithDouble:[A getX] withDouble:[A getY] withDouble:[B getX] withDouble:[B getY]];
  }
  else {
    isVisible_ = NO;
    return;
  }
  [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(transform_)) setTransformWithGeogebraCommonAwtGAffineTransform:[view_ getCoordTransform]];
  GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, [transform_ createTransformedShapeWithGeogebraCommonAwtGShape:line_]);
}

- (void)updateParabolaPath {
  [super updateParabolaPath];
  [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(parabola_)) closePath];
}

- (void)updateParabolaLabelCoords {
  *IOSDoubleArray_GetRef(nil_chk(labelCoords_), 0) = 0;
  *IOSDoubleArray_GetRef(labelCoords_, 1) = 0;
}

- (void)updateHyperbolaEdge {
  GeogebraCommonKernelMatrixCoords *m = [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D];
  GeogebraCommonKernelMatrixCoords *ev1 = [conic_ getEigenvec3DWithInt:0];
  GeogebraCommonKernelMatrixCoords *ev2 = [conic_ getEigenvec3DWithInt:1];
  jdouble e1 = [conic_ getHalfAxisWithInt:0];
  jdouble e2 = [conic_ getHalfAxisWithInt:1];
  GeogebraCommonKernelMatrixCoords *A = nil, *B = nil;
  jdouble start = [self getStartWithInt:0];
  jdouble end;
  if (!JavaLangDouble_isNaNWithDouble_(start)) {
    end = [self getEndWithInt:0];
    A = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(m)) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(ev1)) mulWithDouble:e1 * JavaLangMath_coshWithDouble_(start)]])) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(ev2)) mulWithDouble:e2 * JavaLangMath_sinhWithDouble_(start)]]];
    B = [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([m addWithGeogebraCommonKernelMatrixCoords:[ev1 mulWithDouble:e1 * JavaLangMath_coshWithDouble_(end)]])) addWithGeogebraCommonKernelMatrixCoords:[ev2 mulWithDouble:e2 * JavaLangMath_sinhWithDouble_(end)]]];
  }
  else {
    start = [self getStartWithInt:1];
    if (!JavaLangDouble_isNaNWithDouble_(start)) {
      end = [self getEndWithInt:1];
      A = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(m)) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(ev1)) mulWithDouble:-e1 * JavaLangMath_coshWithDouble_(start)]])) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(ev2)) mulWithDouble:e2 * JavaLangMath_sinhWithDouble_(start)]]];
      B = [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([m addWithGeogebraCommonKernelMatrixCoords:[ev1 mulWithDouble:-e1 * JavaLangMath_coshWithDouble_(end)]])) addWithGeogebraCommonKernelMatrixCoords:[ev2 mulWithDouble:e2 * JavaLangMath_sinhWithDouble_(end)]]];
    }
  }
  if (A != nil && GeogebraCommonKernelKernel_isZeroWithDouble_([A getZ]) && GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(B)) getZ])) {
    if (line_ == nil) GeogebraCommonEuclidianDrawDrawConicSection_set_line_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
    [((id<GeogebraCommonAwtGLine2D>) nil_chk(line_)) setLineWithDouble:[A getX] withDouble:[A getY] withDouble:[B getX] withDouble:[B getY]];
  }
  else {
    isVisible_ = NO;
    return;
  }
  [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(transform_)) setTransformWithGeogebraCommonAwtGAffineTransform:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordTransform]];
  GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, [transform_ createTransformedShapeWithGeogebraCommonAwtGShape:line_]);
}

- (void)updateHyperbolaResetPaths {
  if (firstHyperbola_) {
    firstHyperbola_ = NO;
    points_ = GeogebraCommonEuclidianDrawDrawConic_PLOT_POINTS;
    GeogebraCommonEuclidianDrawDrawConicSection_setAndConsume_hyp_(self, new_GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(view_));
  }
  else {
    [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hyp_)) reset];
  }
}

- (void)updateHyperbolaX0 {
  jdouble end = [self getEndWithInt:0];
  if (JavaLangDouble_isNaNWithDouble_(end)) {
    x0_ = a_ * JavaLangMath_coshWithDouble_([self getEndWithInt:1]);
    drawLeft_ = NO;
  }
  else {
    x0_ = a_ * JavaLangMath_coshWithDouble_(end);
    drawLeft_ = YES;
  }
}

- (void)updateHyperbolaAddPointWithInt:(jint)index
                            withDouble:(jdouble)x
                            withDouble:(jdouble)y {
  if (drawLeft_) {
    [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hyp_)) addPointWithInt:index withDouble:x withDouble:y];
  }
  else {
    [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hyp_)) addPointWithInt:index withDouble:-x withDouble:y];
  }
}

- (void)updateHyperboalSetTransformToPaths {
  [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hyp_)) transformWithGeogebraCommonAwtGAffineTransform:transform_];
}

- (void)updateHyperbolaClosePaths {
  [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hyp_)) closePath];
}

- (void)updateHyperbolaSetShape {
  GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, hyp_);
}

- (void)drawHyperbolaWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:shape_DrawConic_ withBoolean:YES];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
    [g2 setColorWithGeogebraCommonAwtGColor:[geo_ getSelColor]];
    [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:shape_DrawConic_];
  }
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
  [g2 setColorWithGeogebraCommonAwtGColor:[geo_ getObjectColor]];
  [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:shape_DrawConic_];
  if (labelVisible_) {
    [g2 setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontConic]];
    [g2 setColorWithGeogebraCommonAwtGColor:[geo_ getLabelColor]];
    [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (void)updateHyperbolaLabelCoords {
  if (drawLeft_) {
    *IOSDoubleArray_GetRef(nil_chk(labelCoords_), 0) = a_;
  }
  else {
    *IOSDoubleArray_GetRef(nil_chk(labelCoords_), 0) = -a_;
  }
  *IOSDoubleArray_GetRef(nil_chk(labelCoords_), 1) = 0;
}

- (jboolean)checkHyperbolaOnScreenWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)viewRect {
  return YES;
}

- (jboolean)checkCircleEllipseParabolaOnScreenWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)viewRect {
  return YES;
}

- (jboolean)hitHyperbolaWithInt:(jint)hitX
                        withInt:(jint)hitY
                        withInt:(jint)hitThreshold {
  return NO;
}

- (void)dealloc {
  RELEASE_(arc_DrawConicSection_);
  RELEASE_(line_);
  RELEASE_(lines_DrawConicSection_);
  RELEASE_(hyp_);
  RELEASE_(endPoints_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelKernelNDGeoConicND:", "DrawConicSection", NULL, 0x1, NULL, NULL },
    { "getStartWithInt:", "getStart", "D", 0x4, NULL, NULL },
    { "getExtentWithInt:", "getExtent", "D", 0x4, NULL, NULL },
    { "getEndWithInt:", "getEnd", "D", 0x4, NULL, NULL },
    { "ellipsePointWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withDouble:withDouble:withDouble:", "ellipsePoint", "Lgeogebra.common.kernel.Matrix.Coords;", 0x19, NULL, NULL },
    { "updateEllipseEdge", NULL, "V", 0x2, NULL, NULL },
    { "updateCircle", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbola", NULL, "V", 0x4, NULL, NULL },
    { "updateParabola", NULL, "V", 0x4, NULL, NULL },
    { "checkIsOnFilling", NULL, "Z", 0x4, NULL, NULL },
    { "hitEllipseWithInt:withInt:withInt:", "hitEllipse", "Z", 0x1, NULL, NULL },
    { "updateEllipse", NULL, "V", 0x4, NULL, NULL },
    { "updateLines", NULL, "V", 0x4, NULL, NULL },
    { "updateDoubleLine", NULL, "V", 0x4, NULL, NULL },
    { "drawLinesWithGeogebraCommonAwtGGraphics2D:", "drawLines", "V", 0x4, NULL, NULL },
    { "hitLinesWithInt:withInt:withInt:", "hitLines", "Z", 0x1, NULL, NULL },
    { "updateParabolaX0Y0", NULL, "V", 0x4, NULL, NULL },
    { "updateParabolaEdge", NULL, "V", 0x4, NULL, NULL },
    { "updateParabolaPath", NULL, "V", 0x4, NULL, NULL },
    { "updateParabolaLabelCoords", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaEdge", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaResetPaths", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaX0", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaAddPointWithInt:withDouble:withDouble:", "updateHyperbolaAddPoint", "V", 0x4, NULL, NULL },
    { "updateHyperboalSetTransformToPaths", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaClosePaths", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaSetShape", NULL, "V", 0x4, NULL, NULL },
    { "drawHyperbolaWithGeogebraCommonAwtGGraphics2D:", "drawHyperbola", "V", 0x4, NULL, NULL },
    { "updateHyperbolaLabelCoords", NULL, "V", 0x4, NULL, NULL },
    { "checkHyperbolaOnScreenWithGeogebraCommonAwtGRectangle:", "checkHyperbolaOnScreen", "Z", 0x4, NULL, NULL },
    { "checkCircleEllipseParabolaOnScreenWithGeogebraCommonAwtGRectangle:", "checkCircleEllipseParabolaOnScreen", "Z", 0x4, NULL, NULL },
    { "hitHyperbolaWithInt:withInt:withInt:", "hitHyperbola", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "arc_DrawConicSection_", "arc", 0x2, "Lgeogebra.common.awt.GArc2D;", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lgeogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "lines_DrawConicSection_", "lines", 0x2, "[Lgeogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "hyp_", NULL, 0x2, "Lgeogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "onlyEdge_", NULL, 0x2, "Z", NULL, NULL,  },
    { "endPoints_", NULL, 0x2, "[Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "drawLeft_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawConicSection = { 2, "DrawConicSection", "geogebra.common.euclidian.draw", NULL, 0x1, 32, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawConicSection;
}

@end

void GeogebraCommonEuclidianDrawDrawConicSection_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonEuclidianDrawDrawConicSection *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(self, view, c, NO);
}

GeogebraCommonEuclidianDrawDrawConicSection *new_GeogebraCommonEuclidianDrawDrawConicSection_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonEuclidianDrawDrawConicSection *self = [GeogebraCommonEuclidianDrawDrawConicSection alloc];
  GeogebraCommonEuclidianDrawDrawConicSection_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicND_(self, view, c);
  return self;
}

GeogebraCommonKernelMatrixCoords *GeogebraCommonEuclidianDrawDrawConicSection_ellipsePointWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDouble_withDouble_withDouble_(GeogebraCommonKernelMatrixCoords *m, GeogebraCommonKernelMatrixCoords *ev0, GeogebraCommonKernelMatrixCoords *ev1, jdouble r0, jdouble r1, jdouble parameter) {
  GeogebraCommonEuclidianDrawDrawConicSection_initialize();
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(m)) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(ev0)) mulWithDouble:r0 * JavaLangMath_cosWithDouble_(parameter)]])) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(ev1)) mulWithDouble:r1 * JavaLangMath_sinWithDouble_(parameter)]];
}

void GeogebraCommonEuclidianDrawDrawConicSection_updateEllipseEdge(GeogebraCommonEuclidianDrawDrawConicSection *self) {
  GeogebraCommonKernelMatrixCoords *m = [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) getMidpoint3D];
  GeogebraCommonKernelMatrixCoords *ev0 = [self->conic_ getEigenvec3DWithInt:0];
  GeogebraCommonKernelMatrixCoords *ev1 = [self->conic_ getEigenvec3DWithInt:1];
  jdouble r0 = [self->conic_ getHalfAxisWithInt:0];
  jdouble r1 = [self->conic_ getHalfAxisWithInt:1];
  jdouble start0 = [self getStartWithInt:0];
  jdouble end0 = [self getEndWithInt:0];
  jdouble start1 = [self getStartWithInt:1];
  jdouble end1 = [self getEndWithInt:1];
  GeogebraCommonKernelMatrixCoords *A, *B;
  if (!JavaLangDouble_isNaNWithDouble_(start1)) {
    A = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:GeogebraCommonEuclidianDrawDrawConicSection_ellipsePointWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDouble_withDouble_withDouble_(m, ev0, ev1, r0, r1, end0)];
    if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(A)) getZ])) {
      B = [self->view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:GeogebraCommonEuclidianDrawDrawConicSection_ellipsePointWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDouble_withDouble_withDouble_(m, ev0, ev1, r0, r1, start1)];
    }
    else {
      A = [self->view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:GeogebraCommonEuclidianDrawDrawConicSection_ellipsePointWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDouble_withDouble_withDouble_(m, ev0, ev1, r0, r1, end1)];
      B = [self->view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:GeogebraCommonEuclidianDrawDrawConicSection_ellipsePointWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDouble_withDouble_withDouble_(m, ev0, ev1, r0, r1, start0)];
    }
  }
  else {
    A = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:GeogebraCommonEuclidianDrawDrawConicSection_ellipsePointWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDouble_withDouble_withDouble_(m, ev0, ev1, r0, r1, end0)];
    B = [self->view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:GeogebraCommonEuclidianDrawDrawConicSection_ellipsePointWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDouble_withDouble_withDouble_(m, ev0, ev1, r0, r1, start0)];
  }
  if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(B)) getZ])) {
    if (self->line_ == nil) GeogebraCommonEuclidianDrawDrawConicSection_set_line_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
    [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->line_)) setLineWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(A)) getX] withDouble:[A getY] withDouble:[B getX] withDouble:[B getY]];
  }
  else {
    self->isVisible_ = NO;
    return;
  }
  [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(self->transform_)) setTransformWithGeogebraCommonAwtGAffineTransform:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordTransform]];
  GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, [self->transform_ createTransformedShapeWithGeogebraCommonAwtGShape:self->line_]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawConicSection)
