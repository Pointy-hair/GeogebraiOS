//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/TransformTranslate.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Transform.h"
#include "geogebra/common/kernel/TransformTranslate.h"
#include "geogebra/common/kernel/algos/AlgoTransformation.h"
#include "geogebra/common/kernel/algos/AlgoTranslate.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"

@interface GeogebraCommonKernelTransformTranslate () {
 @public
  GeogebraCommonKernelGeosGeoVec3D *transVec_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelTransformTranslate, transVec_, GeogebraCommonKernelGeosGeoVec3D *)

@implementation GeogebraCommonKernelTransformTranslate

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                    withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)transVec {
  GeogebraCommonKernelTransformTranslate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoVec3D_(self, cons, transVec);
  return self;
}

- (GeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelAlgosAlgoTranslate *algo = [new_GeogebraCommonKernelAlgosAlgoTranslate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(cons_, geo, transVec_) autorelease];
  return algo;
}

- (void)dealloc {
  RELEASE_(transVec_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoVec3D:", "TransformTranslate", NULL, 0x1, NULL, NULL },
    { "getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:", "getTransformAlgo", "Lgeogebra.common.kernel.algos.AlgoTransformation;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "transVec_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoVec3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelTransformTranslate = { 2, "TransformTranslate", "geogebra.common.kernel", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelTransformTranslate;
}

@end

void GeogebraCommonKernelTransformTranslate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoVec3D_(GeogebraCommonKernelTransformTranslate *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoVec3D *transVec) {
  GeogebraCommonKernelTransform_init(self);
  GeogebraCommonKernelTransformTranslate_set_transVec_(self, transVec);
  GeogebraCommonKernelTransform_set_cons_(self, cons);
}

GeogebraCommonKernelTransformTranslate *new_GeogebraCommonKernelTransformTranslate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoVec3D_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoVec3D *transVec) {
  GeogebraCommonKernelTransformTranslate *self = [GeogebraCommonKernelTransformTranslate alloc];
  GeogebraCommonKernelTransformTranslate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoVec3D_(self, cons, transVec);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelTransformTranslate)
