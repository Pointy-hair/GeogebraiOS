//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdToolImage.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoImage.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/scripting/CmdToolImage.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/util/ImageManager.h"
#include "geogebra/common/util/StringUtil.h"

@implementation GeogebraCommonKernelScriptingCmdToolImage

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdToolImage_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  switch (n) {
    case 1:
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoNumeric]) {
      jint mode = J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]);
      NSString *modeStr = GeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getModeTextWithInt:mode]);
      if ([@"" isEqual:modeStr]) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      NSString *fileName = [((GeogebraCommonUtilImageManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getImageManager])) createImageWithNSString:JreStrcat("$$$", @"/geogebra/gui/toolbar/images/64/mode_", modeStr, @".png") withGeogebraCommonMainApp:app_];
      GeogebraCommonKernelGeosGeoImage *geoImage = [new_GeogebraCommonKernelGeosGeoImage_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk([app_ getKernel])) getConstruction]) autorelease];
      [geoImage setImageFileNameWithNSString:fileName];
      [geoImage setTooltipModeWithInt:GeogebraCommonKernelGeosGeoElement_TOOLTIP_OFF];
      jboolean oldState = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
      [cons_ setSuppressLabelCreationWithBoolean:YES];
      GeogebraCommonKernelGeosGeoPoint *corner = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons_, nil, 0, 0, 1) autorelease];
      [cons_ setSuppressLabelCreationWithBoolean:oldState];
      @try {
        [geoImage setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:corner];
      }
      @catch (GeogebraCommonKernelCircularDefinitionException *e) {
        [((GeogebraCommonKernelCircularDefinitionException *) nil_chk(e)) printStackTrace];
      }
      [geoImage setLabelWithNSString:nil];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdToolImage", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdToolImage = { 2, "CmdToolImage", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdToolImage;
}

@end

void GeogebraCommonKernelScriptingCmdToolImage_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdToolImage *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdToolImage *new_GeogebraCommonKernelScriptingCmdToolImage_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdToolImage *self = [GeogebraCommonKernelScriptingCmdToolImage alloc];
  GeogebraCommonKernelScriptingCmdToolImage_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdToolImage)
