//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadWriteFloatArrayBuffer.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/Buffer.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/BufferOverflowException.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/FloatArrayBuffer.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/FloatBuffer.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadOnlyFloatArrayBuffer.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ReadWriteFloatArrayBuffer.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/System.h"

@implementation GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer

+ (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer *)copy__WithGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer:(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer *)other
                                                                                                                                                withInt:(jint)markOfOther {
  return GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_copy__WithGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_withInt_(other, markOfOther);
}

- (instancetype)initWithFloatArray:(IOSFloatArray *)array {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initWithFloatArray_(self, array);
  return self;
}

- (instancetype)initWithInt:(jint)capacity {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithInt:(jint)capacity
             withFloatArray:(IOSFloatArray *)backingArray
                    withInt:(jint)arrayOffset {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initWithInt_withFloatArray_withInt_(self, capacity, backingArray, arrayOffset);
  return self;
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)asReadOnlyBuffer {
  return GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadOnlyFloatArrayBuffer_copy__WithGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_withInt_(self, mark__);
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)compact {
  for (jint i = position__ + offset_, j = offset_, k = 0; k < [self remaining]; i++, j++, k++) {
    *IOSFloatArray_GetRef(nil_chk(backingArray_), j) = IOSFloatArray_Get(backingArray_, i);
  }
  position__ = limit__ - position__;
  limit__ = capacity__;
  mark__ = GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBuffer_UNSET_MARK;
  return self;
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)duplicate {
  return GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_copy__WithGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_withInt_(self, mark__);
}

- (jboolean)isReadOnly {
  return NO;
}

- (IOSFloatArray *)protectedArray {
  return backingArray_;
}

- (jint)protectedArrayOffset {
  return offset_;
}

- (jboolean)protectedHasArray {
  return YES;
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)putWithFloat:(jfloat)c {
  if (position__ == limit__) {
    @throw [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBufferOverflowException_init() autorelease];
  }
  *IOSFloatArray_GetRef(nil_chk(backingArray_), offset_ + position__++) = c;
  return self;
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)putWithInt:(jint)index
                                                                 withFloat:(jfloat)c {
  if (index < 0 || index >= limit__) {
    @throw [new_JavaLangIndexOutOfBoundsException_init() autorelease];
  }
  *IOSFloatArray_GetRef(nil_chk(backingArray_), offset_ + index) = c;
  return self;
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)putWithFloatArray:(IOSFloatArray *)src
                                                                          withInt:(jint)off
                                                                          withInt:(jint)len {
  jint length = ((IOSFloatArray *) nil_chk(src))->size_;
  if (off < 0 || len < 0 || (jlong) off + (jlong) len > length) {
    @throw [new_JavaLangIndexOutOfBoundsException_init() autorelease];
  }
  if (len > [self remaining]) {
    @throw [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBufferOverflowException_init() autorelease];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(src, off, backingArray_, offset_ + position__, len);
  position__ += len;
  return self;
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatBuffer *)slice {
  return [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initWithInt_withFloatArray_withInt_([self remaining], backingArray_, offset_ + position__) autorelease];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "copy__WithGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer:withInt:", "copy", "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.ReadWriteFloatArrayBuffer;", 0x8, NULL, NULL },
    { "initWithFloatArray:", "ReadWriteFloatArrayBuffer", NULL, 0x0, NULL, NULL },
    { "initWithInt:", "ReadWriteFloatArrayBuffer", NULL, 0x0, NULL, NULL },
    { "initWithInt:withFloatArray:withInt:", "ReadWriteFloatArrayBuffer", NULL, 0x0, NULL, NULL },
    { "asReadOnlyBuffer", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x1, NULL, NULL },
    { "compact", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x1, NULL, NULL },
    { "duplicate", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x1, NULL, NULL },
    { "isReadOnly", NULL, "Z", 0x1, NULL, NULL },
    { "protectedArray", NULL, "[F", 0x4, NULL, NULL },
    { "protectedArrayOffset", NULL, "I", 0x4, NULL, NULL },
    { "protectedHasArray", NULL, "Z", 0x4, NULL, NULL },
    { "putWithFloat:", "put", "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x1, NULL, NULL },
    { "putWithInt:withFloat:", "put", "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x1, NULL, NULL },
    { "putWithFloatArray:withInt:withInt:", "put", "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x1, NULL, NULL },
    { "slice", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.FloatBuffer;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer = { 2, "ReadWriteFloatArrayBuffer", "geogebra.common.geogebra3D.euclidian3D.plots.java.nio", NULL, 0x10, 15, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer;
}

@end

GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer *GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_copy__WithGeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_withInt_(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer *other, jint markOfOther) {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initialize();
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer *buf = [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initWithInt_withFloatArray_withInt_([((GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer *) nil_chk(other)) capacity], other->backingArray_, other->offset_) autorelease];
  buf->limit__ = [other limit];
  buf->position__ = [other position];
  buf->mark__ = markOfOther;
  return buf;
}

void GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initWithFloatArray_(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer *self, IOSFloatArray *array) {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_initWithFloatArray_(self, array);
}

GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer *new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initWithFloatArray_(IOSFloatArray *array) {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer *self = [GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer alloc];
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initWithFloatArray_(self, array);
  return self;
}

void GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initWithInt_(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer *self, jint capacity) {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_initWithInt_(self, capacity);
}

GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer *new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initWithInt_(jint capacity) {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer *self = [GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer alloc];
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initWithInt_(self, capacity);
  return self;
}

void GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initWithInt_withFloatArray_withInt_(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer *self, jint capacity, IOSFloatArray *backingArray, jint arrayOffset) {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioFloatArrayBuffer_initWithInt_withFloatArray_withInt_(self, capacity, backingArray, arrayOffset);
}

GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer *new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initWithInt_withFloatArray_withInt_(jint capacity, IOSFloatArray *backingArray, jint arrayOffset) {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer *self = [GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer alloc];
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer_initWithInt_withFloatArray_withInt_(self, capacity, backingArray, arrayOffset);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioReadWriteFloatArrayBuffer)
