//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawPolyLine3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPolyLine3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DCurves.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/PlotterBrush.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPolyLine.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D () {
 @public
  IOSDoubleArray *drawMinMax_;
  GeogebraCommonKernelMatrixCoords *boundsMin_, *boundsMax_;
  JavaUtilArrayList *selectedPoints_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D, drawMinMax_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D, boundsMin_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D, boundsMax_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D, selectedPoints_, JavaUtilArrayList *)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                    withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)p {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, a_view3D, p);
  return self;
}

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3d {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, a_view3d);
  return self;
}

- (void)setDrawMinMaxWithDouble:(jdouble)drawMin
                     withDouble:(jdouble)drawMax {
  *IOSDoubleArray_GetRef(nil_chk(self->drawMinMax_), 0) = drawMin;
  *IOSDoubleArray_GetRef(self->drawMinMax_, 1) = drawMax;
}

- (IOSDoubleArray *)getDrawMinMax {
  return drawMinMax_;
}

- (void)drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawWithInt:[self getGeometryIndex]];
}

- (jboolean)updateForItSelf {
  GeogebraCommonKernelGeosGeoPolyLine *p = (GeogebraCommonKernelGeosGeoPolyLine *) check_class_cast([self getGeoElement], [GeogebraCommonKernelGeosGeoPolyLine class]);
  jint num = [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(p)) getNumPoints];
  IOSDoubleArray *minmax = [self getDrawMinMax];
  if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(minmax), 0)) > 1E10) return YES;
  if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(minmax, 1)) > 1E10) return YES;
  if (IOSDoubleArray_Get(minmax, 0) > IOSDoubleArray_Get(minmax, 1)) return YES;
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *brush = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getBrush];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) startWithInt:[self getReusableGeometryIndex]];
  [brush setThicknessWithInt:[self getLineThickness] withFloat:(jfloat) [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale]];
  [brush setAffineTextureWithFloat:(jfloat) ((0.5 - IOSDoubleArray_Get(minmax, 0)) / (IOSDoubleArray_Get(minmax, 1) - IOSDoubleArray_Get(minmax, 0))) withFloat:0.25f];
  if (num > 0) {
    GeogebraCommonKernelMatrixCoords *previous = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([p getPointNDWithInt:0])) getInhomCoordsInD3];
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMin_)) setValuesWithGeogebraCommonKernelMatrixCoords:previous withInt:3];
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMax_)) setValuesWithGeogebraCommonKernelMatrixCoords:previous withInt:3];
    for (jint i = 1; i < num; i++) {
      GeogebraCommonKernelMatrixCoords *current = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([p getPointNDWithInt:i])) getInhomCoordsInD3];
      [brush segmentWithGeogebraCommonKernelMatrixCoords:previous withGeogebraCommonKernelMatrixCoords:current];
      previous = current;
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(boundsMin_, boundsMax_, current);
    }
  }
  [self setGeometryIndexWithInt:[brush end]];
  return YES;
}

- (void)enlargeBoundsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)min
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)max {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(min, max, boundsMin_, boundsMax_);
}

- (void)updateForItSelfWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p1
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p2 {
}

- (jint)getLineThickness {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineThickness];
}

- (jint)getPickOrder {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_PATH;
}

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                                     withJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints
                                   withGeogebraCommonKernelGeosGeoPolyLine:(GeogebraCommonKernelGeosGeoPolyLine *)p {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoPolyLine_(self, a_view3D, selectedPoints, p);
  return self;
}

- (void)updateMousePosWithDouble:(jdouble)xRW
                      withDouble:(jdouble)yRW {
}

- (void)updatePreview {
  if ([((JavaUtilArrayList *) nil_chk(selectedPoints_)) size] > 0) {
    IOSObjectArray *points = [IOSObjectArray arrayWithLength:[selectedPoints_ size] type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
    for (jint i = 0; i < [selectedPoints_ size]; i++) {
      IOSObjectArray_Set(points, i, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([selectedPoints_ getWithInt:i], @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
    }
    [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(((GeogebraCommonKernelGeosGeoPolyLine *) check_class_cast([self getGeoElement], [GeogebraCommonKernelGeosGeoPolyLine class])))) setPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:points];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) setEuclidianVisibleWithBoolean:YES];
    [self setWaitForUpdate];
  }
  else {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) setEuclidianVisibleWithBoolean:NO];
  }
}

- (void)updateForView {
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom]) [self updateForItSelf];
}

- (void)dealloc {
  RELEASE_(drawMinMax_);
  RELEASE_(boundsMin_);
  RELEASE_(boundsMax_);
  RELEASE_(selectedPoints_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonKernelGeosGeoElement:", "DrawPolyLine3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "DrawPolyLine3D", NULL, 0x1, NULL, NULL },
    { "setDrawMinMaxWithDouble:withDouble:", "setDrawMinMax", "V", 0x1, NULL, NULL },
    { "getDrawMinMax", NULL, "[D", 0x1, NULL, NULL },
    { "drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometry", "V", 0x1, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "enlargeBoundsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "enlargeBounds", "V", 0x1, NULL, NULL },
    { "updateForItSelfWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "updateForItSelf", "V", 0x4, NULL, NULL },
    { "getLineThickness", NULL, "I", 0x4, NULL, NULL },
    { "getPickOrder", NULL, "I", 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withJavaUtilArrayList:withGeogebraCommonKernelGeosGeoPolyLine:", "DrawPolyLine3D", NULL, 0x1, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x1, NULL, NULL },
    { "updatePreview", NULL, "V", 0x1, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "drawMinMax_", NULL, 0x2, "[D", NULL, NULL,  },
    { "boundsMin_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "boundsMax_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "selectedPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D = { 2, "DrawPolyLine3D", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 14, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, GeogebraCommonKernelGeosGeoElement *p) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DCurves_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, a_view3D, p);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_setAndConsume_drawMinMax_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_setAndConsume_boundsMin_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_setAndConsume_boundsMax_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, GeogebraCommonKernelGeosGeoElement *p) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, a_view3D, p);
  return self;
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3d) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DCurves_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, a_view3d);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_setAndConsume_drawMinMax_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_setAndConsume_boundsMin_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_setAndConsume_boundsMax_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3d) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, a_view3d);
  return self;
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoPolyLine_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPoints, GeogebraCommonKernelGeosGeoPolyLine *p) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DCurves_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, a_view3D);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_setAndConsume_drawMinMax_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_setAndConsume_boundsMin_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_setAndConsume_boundsMax_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(p)) setIsPickableWithBoolean:NO];
  [self setGeoElementWithGeogebraCommonKernelGeosGeoElement:p];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_set_selectedPoints_(self, selectedPoints);
  [self updatePreview];
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoPolyLine_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPoints, GeogebraCommonKernelGeosGeoPolyLine *p) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoPolyLine_(self, a_view3D, selectedPoints, p);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D)
