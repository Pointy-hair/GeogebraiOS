//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawSegment.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GLine2D.h"
#include "geogebra/common/awt/GPoint2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianStatic.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/clipping/ClipLine.h"
#include "geogebra/common/euclidian/draw/DrawSegment.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/ConstructionDefaults.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/util/MyMath.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonEuclidianDrawDrawSegment () {
 @public
  id<GeogebraCommonKernelKernelNDGeoLineND> s_;
  jboolean isVisible_, labelVisible_;
  JavaUtilArrayList *points_;
  id<GeogebraCommonAwtGLine2D> line_;
  IOSDoubleArray *coordsA_;
  IOSDoubleArray *coordsB_;
  IOSObjectArray *decoTicks_;
  GeogebraCommonAwtGPoint2D *endPoint_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawSegment, s_, id<GeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawSegment, points_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawSegment, line_, id<GeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawSegment, coordsA_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawSegment, coordsB_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawSegment, decoTicks_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawSegment, endPoint_, GeogebraCommonAwtGPoint2D *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawSegment_update(GeogebraCommonEuclidianDrawDrawSegment *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawSegment_updateWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonEuclidianDrawDrawSegment *self, GeogebraCommonKernelMatrixCoords *A, GeogebraCommonKernelMatrixCoords *B);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawSegment_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawSegment *self, id<GeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawSegment_updatePreview(GeogebraCommonEuclidianDrawDrawSegment *self);

@implementation GeogebraCommonEuclidianDrawDrawSegment

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                   withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)s {
  GeogebraCommonEuclidianDrawDrawSegment_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(self, view, s);
  return self;
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                                       withJavaUtilArrayList:(JavaUtilArrayList *)points {
  GeogebraCommonEuclidianDrawDrawSegment_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawSegment_update(self);
}

- (void)updateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)A
              withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)B {
  GeogebraCommonEuclidianDrawDrawSegment_updateWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, A, B);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_))->lineThickness_ == 0) return;
  if (isVisible_) {
    if ([geo_ doHighlighting]) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getSelColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithGeogebraCommonAwtGShape:line_];
    }
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[self getObjectColor]];
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithGeogebraCommonAwtGShape:line_];
    if (geo_->decorationType_ != GeogebraCommonKernelGeosGeoElement_DECORATION_NONE && decoTicks_ != nil) {
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:decoStroke_];
      switch (geo_->decorationType_) {
        case GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_ONE_TICK:
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 0)];
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_TWO_TICKS:
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 0)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 1)];
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_THREE_TICKS:
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 0)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 1)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 2)];
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_ONE_ARROW:
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 0)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 1)];
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_TWO_ARROWS:
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 0)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 1)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 2)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 3)];
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_THREE_ARROWS:
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 0)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 1)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 2)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 3)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 4)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(decoTicks_, 5)];
        break;
      }
    }
    if (labelVisible_) {
      [g2 setPaintWithGeogebraCommonAwtGPaint:[geo_ getLabelColor]];
      [g2 setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontLine]];
      [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (void)drawTraceWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianDrawDrawSegment_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)updatePreview {
  GeogebraCommonEuclidianDrawDrawSegment_updatePreview(self);
}

- (void)updateMousePosWithDouble:(jdouble)mouseRWx
                      withDouble:(jdouble)mouseRWy {
  jdouble xRW = mouseRWx;
  jdouble yRW = mouseRWy;
  if (isVisible_) {
    jint mx = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toScreenCoordXWithDouble:xRW];
    jint my = [view_ toScreenCoordYWithDouble:yRW];
    if ([((JavaUtilArrayList *) nil_chk(points_)) size] == 1 && [((GeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) isAltDown]) {
      GeogebraCommonKernelGeosGeoPoint *p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([points_ getWithInt:0], [GeogebraCommonKernelGeosGeoPoint class]);
      jdouble px = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_;
      jdouble py = p->inhomY_;
      jdouble angle = JavaLangMath_atan2WithDouble_withDouble_(yRW - py, xRW - px) * 180 / JavaLangMath_PI;
      jdouble radius = JavaLangMath_sqrtWithDouble_((py - yRW) * (py - yRW) + (px - xRW) * (px - xRW));
      angle = JavaLangMath_roundWithDouble_(angle / 15) * 15;
      xRW = px + radius * JavaLangMath_cosWithDouble_(angle * JavaLangMath_PI / 180);
      yRW = py + radius * JavaLangMath_sinWithDouble_(angle * JavaLangMath_PI / 180);
      mx = [view_ toScreenCoordXWithDouble:xRW];
      my = [view_ toScreenCoordYWithDouble:yRW];
      [((GeogebraCommonAwtGPoint2D *) nil_chk(endPoint_)) setXWithDouble:xRW];
      [endPoint_ setYWithDouble:yRW];
      [((GeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) setLineEndPointWithGeogebraCommonAwtGPoint2D:endPoint_];
    }
    else [((GeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) setLineEndPointWithGeogebraCommonAwtGPoint2D_Double:nil];
    [((id<GeogebraCommonAwtGLine2D>) nil_chk(line_)) setLineWithDouble:IOSDoubleArray_Get(nil_chk(coordsA_), 0) withDouble:IOSDoubleArray_Get(coordsA_, 1) withDouble:mx withDouble:my];
  }
}

- (void)drawPreviewWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getObjectColor]];
    [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:geo_];
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithGeogebraCommonAwtGShape:line_];
  }
}

- (void)disposePreview {
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return line_ != nil && [line_ intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return line_ != nil && [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithGeogebraCommonAwtGPoint2D:[line_ getP1]] && [rect containsWithGeogebraCommonAwtGPoint2D:[line_ getP2]];
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((id<GeogebraCommonAwtGLine2D>) nil_chk(line_)) intersectsWithGeogebraCommonAwtGRectangle2D:rect];
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  if (line_ == nil || ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithGeogebraCommonAwtGRectangle:[((id<GeogebraCommonAwtGLine2D>) nil_chk(line_)) getBounds]];
}

- (void)setIsVisible {
  isVisible_ = YES;
}

- (void)dealloc {
  RELEASE_(s_);
  RELEASE_(points_);
  RELEASE_(line_);
  RELEASE_(coordsA_);
  RELEASE_(coordsB_);
  RELEASE_(decoTicks_);
  RELEASE_(endPoint_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelKernelNDGeoLineND:", "DrawSegment", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianView:withJavaUtilArrayList:", "DrawSegment", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "updateWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "update", "V", 0x11, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "drawTraceWithGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x14, NULL, NULL },
    { "updatePreview", NULL, "V", 0x11, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x11, NULL, NULL },
    { "drawPreviewWithGeogebraCommonAwtGGraphics2D:", "drawPreview", "V", 0x11, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "setIsVisible", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "s_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "points_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "line_", NULL, 0x2, "Lgeogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "coordsA_", NULL, 0x2, "[D", NULL, NULL,  },
    { "coordsB_", NULL, 0x2, "[D", NULL, NULL,  },
    { "decoTicks_", NULL, 0x2, "[Lgeogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "endPoint_", NULL, 0x2, "Lgeogebra.common.awt.GPoint2D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawSegment = { 2, "DrawSegment", "geogebra.common.euclidian.draw", NULL, 0x1, 17, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawSegment;
}

@end

void GeogebraCommonEuclidianDrawDrawSegment_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonEuclidianDrawDrawSegment *self, GeogebraCommonEuclidianEuclidianView *view, id<GeogebraCommonKernelKernelNDGeoLineND> s) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawSegment_setAndConsume_coordsA_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawSegment_setAndConsume_coordsB_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawSegment_set_endPoint_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawSegment_set_s_(self, s);
  GeogebraCommonEuclidianDrawable_set_geo_(self, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(s, [GeogebraCommonKernelGeosGeoElement class]));
  GeogebraCommonEuclidianDrawDrawSegment_update(self);
}

GeogebraCommonEuclidianDrawDrawSegment *new_GeogebraCommonEuclidianDrawDrawSegment_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonEuclidianEuclidianView *view, id<GeogebraCommonKernelKernelNDGeoLineND> s) {
  GeogebraCommonEuclidianDrawDrawSegment *self = [GeogebraCommonEuclidianDrawDrawSegment alloc];
  GeogebraCommonEuclidianDrawDrawSegment_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(self, view, s);
  return self;
}

void GeogebraCommonEuclidianDrawDrawSegment_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(GeogebraCommonEuclidianDrawDrawSegment *self, GeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawSegment_setAndConsume_coordsA_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawSegment_setAndConsume_coordsB_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawSegment_set_endPoint_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawSegment_set_points_(self, points);
  GeogebraCommonEuclidianDrawable_set_geo_(self, [((GeogebraCommonKernelConstructionDefaults *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction])) getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_SEGMENT]);
  GeogebraCommonEuclidianDrawDrawSegment_updatePreview(self);
}

GeogebraCommonEuclidianDrawDrawSegment *new_GeogebraCommonEuclidianDrawDrawSegment_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(GeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  GeogebraCommonEuclidianDrawDrawSegment *self = [GeogebraCommonEuclidianDrawDrawSegment alloc];
  GeogebraCommonEuclidianDrawDrawSegment_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

void GeogebraCommonEuclidianDrawDrawSegment_update(GeogebraCommonEuclidianDrawDrawSegment *self) {
  self->isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  GeogebraCommonKernelMatrixCoords *A = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(self->s_)) getStartInhomCoords]];
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(A)) getZ])) {
    self->isVisible_ = NO;
    return;
  }
  GeogebraCommonKernelMatrixCoords *B = [self->view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[self->s_ getEndInhomCoords]];
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(B)) getZ])) {
    self->isVisible_ = NO;
    return;
  }
  GeogebraCommonEuclidianDrawDrawSegment_updateWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, A, B);
}

void GeogebraCommonEuclidianDrawDrawSegment_updateWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonEuclidianDrawDrawSegment *self, GeogebraCommonKernelMatrixCoords *A, GeogebraCommonKernelMatrixCoords *B) {
  self->labelVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isLabelVisible];
  [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:self->geo_];
  *IOSDoubleArray_GetRef(nil_chk(self->coordsA_), 0) = [((GeogebraCommonKernelMatrixCoords *) nil_chk(A)) getX];
  *IOSDoubleArray_GetRef(self->coordsA_, 1) = [A getY];
  *IOSDoubleArray_GetRef(nil_chk(self->coordsB_), 0) = [((GeogebraCommonKernelMatrixCoords *) nil_chk(B)) getX];
  *IOSDoubleArray_GetRef(self->coordsB_, 1) = [B getY];
  jboolean onscreenA = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordsWithDoubleArray:self->coordsA_];
  jboolean onscreenB = [self->view_ toScreenCoordsWithDoubleArray:self->coordsB_];
  if (self->line_ == nil) GeogebraCommonEuclidianDrawDrawSegment_set_line_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
  if (onscreenA && onscreenB) {
    [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->line_)) setLineWithDouble:IOSDoubleArray_Get(self->coordsA_, 0) withDouble:IOSDoubleArray_Get(self->coordsA_, 1) withDouble:IOSDoubleArray_Get(self->coordsB_, 0) withDouble:IOSDoubleArray_Get(self->coordsB_, 1)];
  }
  else {
    IOSObjectArray *clippedPoints = GeogebraCommonEuclidianClippingClipLine_getClippedWithDouble_withDouble_withDouble_withDouble_withInt_withInt_withInt_withInt_(IOSDoubleArray_Get(self->coordsA_, 0), IOSDoubleArray_Get(self->coordsA_, 1), IOSDoubleArray_Get(self->coordsB_, 0), IOSDoubleArray_Get(self->coordsB_, 1), -GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, [self->view_ getWidth] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, -GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE, [self->view_ getHeight] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
    if (clippedPoints == nil) {
      self->isVisible_ = NO;
    }
    else {
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->line_)) setLineWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 0))) getX] withDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 0))) getY] withDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 1))) getX] withDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, 1))) getY]];
    }
  }
  if ([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(self->s_)) getTrace]) {
    self->isTracing__ = YES;
    id<GeogebraCommonAwtGGraphics2D> g2 = [self->view_ getBackgroundGraphics];
    if (g2 != nil) GeogebraCommonEuclidianDrawDrawSegment_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
  }
  else {
    if (self->isTracing__) {
      self->isTracing__ = NO;
    }
  }
  if (!self->labelVisible_ && self->geo_->decorationType_ == GeogebraCommonKernelGeosGeoElement_DECORATION_NONE) return;
  jdouble midX = (IOSDoubleArray_Get(self->coordsA_, 0) + IOSDoubleArray_Get(self->coordsB_, 0)) / 2.0;
  jdouble midY = (IOSDoubleArray_Get(self->coordsA_, 1) + IOSDoubleArray_Get(self->coordsB_, 1)) / 2.0;
  jdouble nx = IOSDoubleArray_Get(self->coordsA_, 1) - IOSDoubleArray_Get(self->coordsB_, 1);
  jdouble ny = IOSDoubleArray_Get(self->coordsB_, 0) - IOSDoubleArray_Get(self->coordsA_, 0);
  jdouble nLength = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(nx, ny);
  if (self->labelVisible_) {
    GeogebraCommonEuclidianDrawable_set_labelDesc_(self, [self->geo_ getLabelDescription]);
    if (nLength > 0.0) {
      self->xLabel_ = J2ObjCFpToInt((midX + nx * 16 / nLength));
      self->yLabel_ = J2ObjCFpToInt((midY + ny * 16 / nLength));
    }
    else {
      self->xLabel_ = J2ObjCFpToInt(midX);
      self->yLabel_ = J2ObjCFpToInt((midY + 16));
    }
    [self addLabelOffset];
  }
  if (self->geo_->decorationType_ != GeogebraCommonKernelGeosGeoElement_DECORATION_NONE && nLength > 0) {
    if (self->decoTicks_ == nil) {
      GeogebraCommonEuclidianDrawDrawSegment_setAndConsume_decoTicks_(self, [IOSObjectArray newArrayWithLength:6 type:GeogebraCommonAwtGLine2D_class_()]);
      for (jint i = 0; i < self->decoTicks_->size_; i++) IOSObjectArray_Set(self->decoTicks_, i, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
    }
    jdouble tickSpacing = 2.5 + self->geo_->lineThickness_ / 2.0;
    jdouble tickLength = tickSpacing + 1;
    jdouble arrowlength = 1.5;
    jdouble vx, vy, factor;
    switch (self->geo_->decorationType_) {
      case GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_ONE_TICK:
      factor = tickLength / nLength;
      nx *= factor;
      ny *= factor;
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(nil_chk(self->decoTicks_), 0))) setLineWithDouble:midX - nx withDouble:midY - ny withDouble:midX + nx withDouble:midY + ny];
      break;
      case GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_TWO_TICKS:
      factor = tickSpacing / (2 * nLength);
      vx = -ny * factor;
      vy = nx * factor;
      factor = tickLength / nLength;
      nx *= factor;
      ny *= factor;
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(nil_chk(self->decoTicks_), 0))) setLineWithDouble:midX + vx - nx withDouble:midY + vy - ny withDouble:midX + vx + nx withDouble:midY + vy + ny];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(self->decoTicks_, 1))) setLineWithDouble:midX - vx - nx withDouble:midY - vy - ny withDouble:midX - vx + nx withDouble:midY - vy + ny];
      break;
      case GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_THREE_TICKS:
      factor = tickSpacing / nLength;
      vx = -ny * factor;
      vy = nx * factor;
      factor = tickLength / nLength;
      nx *= factor;
      ny *= factor;
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(nil_chk(self->decoTicks_), 0))) setLineWithDouble:midX + vx - nx withDouble:midY + vy - ny withDouble:midX + vx + nx withDouble:midY + vy + ny];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(self->decoTicks_, 1))) setLineWithDouble:midX - nx withDouble:midY - ny withDouble:midX + nx withDouble:midY + ny];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(self->decoTicks_, 2))) setLineWithDouble:midX - vx - nx withDouble:midY - vy - ny withDouble:midX - vx + nx withDouble:midY - vy + ny];
      break;
      case GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_ONE_ARROW:
      factor = tickSpacing / (1.5 * nLength);
      vx = -ny * factor;
      vy = nx * factor;
      factor = tickLength / (1.5 * nLength);
      nx *= factor;
      ny *= factor;
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(nil_chk(self->decoTicks_), 0))) setLineWithDouble:midX - arrowlength * vx withDouble:midY - arrowlength * vy withDouble:midX - arrowlength * vx + arrowlength * (nx + vx) withDouble:midY - arrowlength * vy + arrowlength * (ny + vy)];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(self->decoTicks_, 1))) setLineWithDouble:midX - arrowlength * vx withDouble:midY - arrowlength * vy withDouble:midX - arrowlength * vx + arrowlength * (-nx + vx) withDouble:midY - arrowlength * vy + arrowlength * (-ny + vy)];
      break;
      case GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_TWO_ARROWS:
      factor = tickSpacing / (1.5 * nLength);
      vx = -ny * factor;
      vy = nx * factor;
      factor = tickLength / (1.5 * nLength);
      nx *= factor;
      ny *= factor;
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(nil_chk(self->decoTicks_), 0))) setLineWithDouble:midX - 2 * arrowlength * vx withDouble:midY - 2 * arrowlength * vy withDouble:midX - 2 * arrowlength * vx + arrowlength * (nx + vx) withDouble:midY - 2 * arrowlength * vy + arrowlength * (ny + vy)];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(self->decoTicks_, 1))) setLineWithDouble:midX - 2 * arrowlength * vx withDouble:midY - 2 * arrowlength * vy withDouble:midX - 2 * arrowlength * vx + arrowlength * (-nx + vx) withDouble:midY - 2 * arrowlength * vy + arrowlength * (-ny + vy)];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(self->decoTicks_, 2))) setLineWithDouble:midX withDouble:midY withDouble:midX + arrowlength * (nx + vx) withDouble:midY + arrowlength * (ny + vy)];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(self->decoTicks_, 3))) setLineWithDouble:midX withDouble:midY withDouble:midX + arrowlength * (-nx + vx) withDouble:midY + arrowlength * (-ny + vy)];
      break;
      case GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_THREE_ARROWS:
      factor = tickSpacing / (1.5 * nLength);
      vx = -ny * factor;
      vy = nx * factor;
      factor = tickLength / (1.5 * nLength);
      nx *= factor;
      ny *= factor;
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(nil_chk(self->decoTicks_), 0))) setLineWithDouble:midX - arrowlength * vx withDouble:midY - arrowlength * vy withDouble:midX - arrowlength * vx + arrowlength * (nx + vx) withDouble:midY - arrowlength * vy + arrowlength * (ny + vy)];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(self->decoTicks_, 1))) setLineWithDouble:midX - arrowlength * vx withDouble:midY - arrowlength * vy withDouble:midX - arrowlength * vx + arrowlength * (-nx + vx) withDouble:midY - arrowlength * vy + arrowlength * (-ny + vy)];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(self->decoTicks_, 2))) setLineWithDouble:midX + arrowlength * vx withDouble:midY + arrowlength * vy withDouble:midX + arrowlength * vx + arrowlength * (nx + vx) withDouble:midY + arrowlength * vy + arrowlength * (ny + vy)];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(self->decoTicks_, 3))) setLineWithDouble:midX + arrowlength * vx withDouble:midY + arrowlength * vy withDouble:midX + arrowlength * vx + arrowlength * (-nx + vx) withDouble:midY + arrowlength * vy + arrowlength * (-ny + vy)];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(self->decoTicks_, 4))) setLineWithDouble:midX - 3 * arrowlength * vx withDouble:midY - 3 * arrowlength * vy withDouble:midX - 3 * arrowlength * vx + arrowlength * (nx + vx) withDouble:midY - 3 * arrowlength * vy + arrowlength * (ny + vy)];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(self->decoTicks_, 5))) setLineWithDouble:midX - 3 * arrowlength * vx withDouble:midY - 3 * arrowlength * vy withDouble:midX - 3 * arrowlength * vx + arrowlength * (-nx + vx) withDouble:midY - 3 * arrowlength * vy + arrowlength * (-ny + vy)];
      break;
    }
  }
  else {
    if (self->decoTicks_ != nil) {
      for (jint i = 0; i < self->decoTicks_->size_; i++) [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(self->decoTicks_, i))) setLineWithDouble:JavaLangDouble_NaN withDouble:JavaLangDouble_NaN withDouble:JavaLangDouble_NaN withDouble:JavaLangDouble_NaN];
    }
  }
}

void GeogebraCommonEuclidianDrawDrawSegment_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawSegment *self, id<GeogebraCommonAwtGGraphics2D> g2) {
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getObjectColor]];
  [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:self->objStroke_];
  [g2 drawWithGeogebraCommonAwtGShape:self->line_];
}

void GeogebraCommonEuclidianDrawDrawSegment_updatePreview(GeogebraCommonEuclidianDrawDrawSegment *self) {
  self->isVisible_ = ([((JavaUtilArrayList *) nil_chk(self->points_)) size] == 1);
  if (self->isVisible_) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self->points_ getWithInt:0])) getInhomCoordsInD3]])) getWithDoubleArray:self->coordsA_];
    [self->view_ toScreenCoordsWithDoubleArray:self->coordsA_];
    if (self->line_ == nil) GeogebraCommonEuclidianDrawDrawSegment_set_line_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawSegment)
