//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoMacro.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Locateable.h"
#include "geogebra/common/kernel/Macro.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoMacro.h"
#include "geogebra/common/kernel/algos/Algos.h"
#include "geogebra/common/kernel/algos/DrawInformationAlgo.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"

@interface GeogebraCommonKernelAlgosAlgoMacro () {
 @public
  GeogebraCommonKernelMacro *macro_;
  IOSObjectArray *macroInput_, *macroOutput_;
  JavaUtilHashMap *macroToAlgoMap_;
  JavaUtilArrayList *macroOutputAndReferencedGeos_;
  JavaUtilArrayList *algoOutputAndReferencedGeos_;
}

- (jboolean)isMacroInputObjectWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)macroGeo;

- (void)createOutputObjects;

- (void)initMap OBJC_METHOD_FAMILY_NONE;

- (void)mapWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)macroGeo
           withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)algoGeo;

- (GeogebraCommonKernelGeosGeoElement *)getAlgoGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)macroGeo;

- (GeogebraCommonKernelGeosGeoElement *)createAlgoCopyWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)macroGeo;

- (void)initSpecialReferencesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)macroGeo
                             withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)algoGeo OBJC_METHOD_FAMILY_NONE;

- (void)initLineWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)macroLine
                withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line OBJC_METHOD_FAMILY_NONE;

- (void)initConicWithGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)macroConic
                 withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)conic OBJC_METHOD_FAMILY_NONE;

- (void)initLocateableWithGeogebraCommonKernelLocateable:(id<GeogebraCommonKernelLocateable>)macroLocateable
                      withGeogebraCommonKernelLocateable:(id<GeogebraCommonKernelLocateable>)locateable OBJC_METHOD_FAMILY_NONE;

- (void)initPolygonWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)macroPoly
                   withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly OBJC_METHOD_FAMILY_NONE;

- (void)replaceReferencedMacroObjectsWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)exp;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMacro, macro_, GeogebraCommonKernelMacro *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMacro, macroInput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMacro, macroOutput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMacro, macroToAlgoMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMacro, macroOutputAndReferencedGeos_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMacro, algoOutputAndReferencedGeos_, JavaUtilArrayList *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMacro_compute(GeogebraCommonKernelAlgosAlgoMacro *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoMacro_isMacroInputObjectWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoElement *macroGeo);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMacro_setMacroConstructionState(GeogebraCommonKernelAlgosAlgoMacro *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMacro_getMacroConstructionState(GeogebraCommonKernelAlgosAlgoMacro *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMacro_createOutputObjects(GeogebraCommonKernelAlgosAlgoMacro *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMacro_initMap(GeogebraCommonKernelAlgosAlgoMacro *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMacro_mapWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoElement *macroGeo, GeogebraCommonKernelGeosGeoElement *algoGeo);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoElement *macroGeo);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelAlgosAlgoMacro_createAlgoCopyWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoElement *macroGeo);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMacro_initSpecialReferencesWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoElement *macroGeo, GeogebraCommonKernelGeosGeoElement *algoGeo);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMacro_initLineWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoLine *macroLine, GeogebraCommonKernelGeosGeoLine *line);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMacro_initConicWithGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoConic *macroConic, GeogebraCommonKernelGeosGeoConic *conic);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMacro_initLocateableWithGeogebraCommonKernelLocateable_withGeogebraCommonKernelLocateable_(GeogebraCommonKernelAlgosAlgoMacro *self, id<GeogebraCommonKernelLocateable> macroLocateable, id<GeogebraCommonKernelLocateable> locateable);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMacro_initPolygonWithGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoPolygon *macroPoly, GeogebraCommonKernelGeosGeoPolygon *poly);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMacro_initListWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoList *macroList, GeogebraCommonKernelGeosGeoList *geoList);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMacro_initFunctionWithGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelArithmeticFunctionNVar *fun);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMacro_replaceReferencedMacroObjectsWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelArithmeticExpressionNode *exp);

@implementation GeogebraCommonKernelAlgosAlgoMacro

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
                           withGeogebraCommonKernelMacro:(GeogebraCommonKernelMacro *)macro
             withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input {
  GeogebraCommonKernelAlgosAlgoMacro_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelMacro_withGeogebraCommonKernelGeosGeoElementArray_(self, cons, labels, macro, input);
  return self;
}

- (void)remove {
  if (removed_) return;
  [((GeogebraCommonKernelMacro *) nil_chk(macro_)) unregisterAlgorithmWithGeogebraCommonKernelAlgosAlgoMacroInterface:self];
  [super remove];
}

- (GeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return GeogebraCommonKernelAlgosAlgosEnum_get_AlgoMacro();
}

- (NSString *)getCommandNameWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelMacro *) nil_chk(macro_)) getCommandName];
}

- (void)setInputOutput {
  [self setDependencies];
}

- (GeogebraCommonKernelMacro *)getMacro {
  return macro_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoMacro_compute(self);
}

- (jboolean)isMacroInputObjectWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)macroGeo {
  return GeogebraCommonKernelAlgosAlgoMacro_isMacroInputObjectWithGeogebraCommonKernelGeosGeoElement_(self, macroGeo);
}

- (void)setMacroConstructionState {
  GeogebraCommonKernelAlgosAlgoMacro_setMacroConstructionState(self);
}

- (void)getMacroConstructionState {
  GeogebraCommonKernelAlgosAlgoMacro_getMacroConstructionState(self);
}

- (void)createOutputObjects {
  GeogebraCommonKernelAlgosAlgoMacro_createOutputObjects(self);
}

- (void)initMap {
  GeogebraCommonKernelAlgosAlgoMacro_initMap(self);
}

- (void)mapWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)macroGeo
           withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)algoGeo {
  GeogebraCommonKernelAlgosAlgoMacro_mapWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, macroGeo, algoGeo);
}

- (GeogebraCommonKernelGeosGeoElement *)getAlgoGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)macroGeo {
  return GeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithGeogebraCommonKernelGeosGeoElement_(self, macroGeo);
}

- (GeogebraCommonKernelGeosGeoElement *)createAlgoCopyWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)macroGeo {
  return GeogebraCommonKernelAlgosAlgoMacro_createAlgoCopyWithGeogebraCommonKernelGeosGeoElement_(self, macroGeo);
}

- (void)initSpecialReferencesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)macroGeo
                             withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)algoGeo {
  GeogebraCommonKernelAlgosAlgoMacro_initSpecialReferencesWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, macroGeo, algoGeo);
}

- (void)initLineWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)macroLine
                withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line {
  GeogebraCommonKernelAlgosAlgoMacro_initLineWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, macroLine, line);
}

- (void)initConicWithGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)macroConic
                 withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)conic {
  GeogebraCommonKernelAlgosAlgoMacro_initConicWithGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_(self, macroConic, conic);
}

- (void)initLocateableWithGeogebraCommonKernelLocateable:(id<GeogebraCommonKernelLocateable>)macroLocateable
                      withGeogebraCommonKernelLocateable:(id<GeogebraCommonKernelLocateable>)locateable {
  GeogebraCommonKernelAlgosAlgoMacro_initLocateableWithGeogebraCommonKernelLocateable_withGeogebraCommonKernelLocateable_(self, macroLocateable, locateable);
}

- (void)initPolygonWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)macroPoly
                   withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly {
  GeogebraCommonKernelAlgosAlgoMacro_initPolygonWithGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelGeosGeoPolygon_(self, macroPoly, poly);
}

- (void)initListWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)macroList
                withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelAlgosAlgoMacro_initListWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, macroList, geoList);
}

- (void)initFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *)fun {
  GeogebraCommonKernelAlgosAlgoMacro_initFunctionWithGeogebraCommonKernelArithmeticFunctionNVar_(self, fun);
}

- (void)replaceReferencedMacroObjectsWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)exp {
  GeogebraCommonKernelAlgosAlgoMacro_replaceReferencedMacroObjectsWithGeogebraCommonKernelArithmeticExpressionNode_(self, exp);
}

- (jboolean)drawBeforeWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoElement
                      withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)other {
  jint myIndex = 0, otherIndex = 0;
  for (jint i = 0; i < [self getOutputLength]; i++) {
    if ([((JavaUtilArrayList *) nil_chk(self->algoOutputAndReferencedGeos_)) getWithInt:i] == geoElement) {
      myIndex = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((JavaUtilArrayList *) nil_chk(self->macroOutputAndReferencedGeos_)) getWithInt:i])) getConstructionIndex];
    }
    if ([self->algoOutputAndReferencedGeos_ getWithInt:i] == other) {
      otherIndex = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((JavaUtilArrayList *) nil_chk(self->macroOutputAndReferencedGeos_)) getWithInt:i])) getConstructionIndex];
    }
  }
  return myIndex < otherIndex;
}

- (void)dealloc {
  RELEASE_(macro_);
  RELEASE_(macroInput_);
  RELEASE_(macroOutput_);
  RELEASE_(macroToAlgoMap_);
  RELEASE_(macroOutputAndReferencedGeos_);
  RELEASE_(algoOutputAndReferencedGeos_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelMacro:withGeogebraCommonKernelGeosGeoElementArray:", "AlgoMacro", NULL, 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "getCommandNameWithGeogebraCommonKernelStringTemplate:", "getCommandName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getMacro", NULL, "Lgeogebra.common.kernel.Macro;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "isMacroInputObjectWithGeogebraCommonKernelGeosGeoElement:", "isMacroInputObject", "Z", 0x2, NULL, NULL },
    { "setMacroConstructionState", NULL, "V", 0x10, NULL, NULL },
    { "getMacroConstructionState", NULL, "V", 0x10, NULL, NULL },
    { "createOutputObjects", NULL, "V", 0x2, NULL, NULL },
    { "initMap", NULL, "V", 0x2, NULL, NULL },
    { "mapWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "map", "V", 0x2, NULL, NULL },
    { "getAlgoGeoWithGeogebraCommonKernelGeosGeoElement:", "getAlgoGeo", "Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "createAlgoCopyWithGeogebraCommonKernelGeosGeoElement:", "createAlgoCopy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "initSpecialReferencesWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "initSpecialReferences", "V", 0x2, NULL, NULL },
    { "initLineWithGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoLine:", "initLine", "V", 0x2, NULL, NULL },
    { "initConicWithGeogebraCommonKernelGeosGeoConic:withGeogebraCommonKernelGeosGeoConic:", "initConic", "V", 0x2, NULL, NULL },
    { "initLocateableWithGeogebraCommonKernelLocateable:withGeogebraCommonKernelLocateable:", "initLocateable", "V", 0x2, NULL, NULL },
    { "initPolygonWithGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelGeosGeoPolygon:", "initPolygon", "V", 0x2, NULL, NULL },
    { "initListWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "initList", "V", 0x11, NULL, NULL },
    { "initFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:", "initFunction", "V", 0x11, NULL, NULL },
    { "replaceReferencedMacroObjectsWithGeogebraCommonKernelArithmeticExpressionNode:", "replaceReferencedMacroObjects", "V", 0x2, NULL, NULL },
    { "drawBeforeWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "drawBefore", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "macro_", NULL, 0x2, "Lgeogebra.common.kernel.Macro;", NULL, NULL,  },
    { "macroInput_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "macroOutput_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "macroToAlgoMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lgeogebra/common/kernel/geos/GeoElement;Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "macroOutputAndReferencedGeos_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "algoOutputAndReferencedGeos_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoMacro = { 2, "AlgoMacro", "geogebra.common.kernel.algos", NULL, 0x1, 24, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoMacro;
}

@end

void GeogebraCommonKernelAlgosAlgoMacro_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelMacro_withGeogebraCommonKernelGeosGeoElementArray_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelMacro *macro, IOSObjectArray *input) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoElement_set_input_(self, input);
  GeogebraCommonKernelAlgosAlgoMacro_set_macro_(self, macro);
  GeogebraCommonKernelAlgosAlgoMacro_set_macroInput_(self, [((GeogebraCommonKernelMacro *) nil_chk(macro)) getMacroInput]);
  GeogebraCommonKernelAlgosAlgoMacro_set_macroOutput_(self, [macro getMacroOutput]);
  [macro registerAlgorithmWithGeogebraCommonKernelAlgosAlgoMacroInterface:self];
  GeogebraCommonKernelAlgosAlgoMacro_createOutputObjects(self);
  GeogebraCommonKernelAlgosAlgoMacro_initMap(self);
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoMacro_compute(self);
  if ([((GeogebraCommonKernelConstruction *) nil_chk([macro getMacroConstruction])) hasEuclidianViewCE]) {
    [((GeogebraCommonKernelConstruction *) nil_chk(cons)) registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:self];
  }
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(labels, [self getOutput]);
  if ([macro isCopyCaptionsAndVisibility]) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->macroOutput_))->size_; i++) if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroOutput_, i))) isSetEuclidianVisible]) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) setEuclidianVisibleWithBoolean:NO];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) update];
    }
  }
  else {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->macroOutput_))->size_; i++) if ([IOSObjectArray_Get(self->macroOutput_, i) isKindOfClass:[GeogebraCommonKernelGeosGeoAngle class]]) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) setEuclidianVisibleWithBoolean:NO];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) update];
    }
  }
}

GeogebraCommonKernelAlgosAlgoMacro *new_GeogebraCommonKernelAlgosAlgoMacro_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelMacro_withGeogebraCommonKernelGeosGeoElementArray_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelMacro *macro, IOSObjectArray *input) {
  GeogebraCommonKernelAlgosAlgoMacro *self = [GeogebraCommonKernelAlgosAlgoMacro alloc];
  GeogebraCommonKernelAlgosAlgoMacro_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelMacro_withGeogebraCommonKernelGeosGeoElementArray_(self, cons, labels, macro, input);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMacro_compute(GeogebraCommonKernelAlgosAlgoMacro *self) {
  @try {
    GeogebraCommonKernelAlgosAlgoMacro_setMacroConstructionState(self);
    [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelMacro *) nil_chk(self->macro_)) getMacroConstruction])) updateAllAlgorithms];
    GeogebraCommonKernelAlgosAlgoMacro_getMacroConstructionState(self);
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_(@"AlgoMacro compute():\n");
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    for (jint i = 0; i < [self getOutputLength]; i++) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) setUndefined];
    }
  }
}

jboolean GeogebraCommonKernelAlgosAlgoMacro_isMacroInputObjectWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoElement *macroGeo) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->macroInput_))->size_; i++) {
    if (macroGeo == IOSObjectArray_Get(self->macroInput_, i)) return YES;
  }
  return NO;
}

void GeogebraCommonKernelAlgosAlgoMacro_setMacroConstructionState(GeogebraCommonKernelAlgosAlgoMacro *self) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->macroInput_))->size_; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroInput_, i))) setWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(self->input_), i)];
    @try {
      if ([IOSObjectArray_Get(self->macroInput_, i) isKindOfClass:[GeogebraCommonKernelGeosGeoVector class]]) [((GeogebraCommonKernelGeosGeoVector *) nil_chk(((GeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(self->macroInput_, i), [GeogebraCommonKernelGeosGeoVector class])))) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:nil];
    }
    @catch (JavaLangException *e) {
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"Exception while handling vector input: ", e));
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroInput_, i))) setRealLabelWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) getLabelSimple]];
  }
}

void GeogebraCommonKernelAlgosAlgoMacro_getMacroConstructionState(GeogebraCommonKernelAlgosAlgoMacro *self) {
  jint size = [((JavaUtilArrayList *) nil_chk(self->macroOutputAndReferencedGeos_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *macroGeo = [self->macroOutputAndReferencedGeos_ getWithInt:i];
    GeogebraCommonKernelGeosGeoElement *algoGeo = [((JavaUtilArrayList *) nil_chk(self->algoOutputAndReferencedGeos_)) getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(macroGeo)) isDefined]) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(algoGeo)) setWithGeogebraCommonKernelGeosGeoElement:macroGeo];
      GeogebraCommonKernelAlgosAlgoElement *drawAlgo = [macroGeo getParentAlgorithm];
      if ([((GeogebraCommonKernelMacro *) nil_chk(self->macro_)) isCopyCaptionsAndVisibility]) {
        [algoGeo setAdvancedVisualStyleCopyWithGeogebraCommonKernelGeosGeoElement:macroGeo];
      }
      jboolean oldVisible = [algoGeo isSetEuclidianVisible];
      if ([GeogebraCommonKernelAlgosDrawInformationAlgo_class_() isInstance:drawAlgo]) {
        [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(algoGeo, [GeogebraCommonKernelGeosGeoNumeric class])) setDrawableWithBoolean:YES withBoolean:oldVisible];
        [algoGeo setDrawAlgorithmWithGeogebraCommonKernelAlgosDrawInformationAlgo:[((id<GeogebraCommonKernelAlgosDrawInformationAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosDrawInformationAlgo>) check_protocol_cast(drawAlgo, @protocol(GeogebraCommonKernelAlgosDrawInformationAlgo))))) copy__]];
      }
    }
    else [((GeogebraCommonKernelGeosGeoElement *) nil_chk(algoGeo)) setUndefined];
  }
}

void GeogebraCommonKernelAlgosAlgoMacro_createOutputObjects(GeogebraCommonKernelAlgosAlgoMacro *self) {
  [self setOutputLengthWithInt:((IOSObjectArray *) nil_chk(self->macroOutput_))->size_];
  jint layer = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getMaxLayerUsed];
  for (jint i = 0; i < self->macroOutput_->size_; i++) {
    [self setOutputWithInt:i withGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroOutput_, i))) copyInternalWithGeogebraCommonKernelConstruction:self->cons_]];
    GeogebraCommonKernelGeosGeoElement *out = [self getOutputWithInt:i];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(out)) setUseVisualDefaultsWithBoolean:NO];
    [out setVisualStyleWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(self->macroOutput_, i)];
    [out setLayerWithInt:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroOutput_, i))) getLayer]];
    [out setAdvancedVisualStyleCopyWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(self->macroOutput_, i)];
    if ([((GeogebraCommonKernelMacro *) nil_chk(self->macro_)) isCopyCaptionsAndVisibility]) {
      [out setCaptionWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroOutput_, i))) getRawCaption]];
    }
    [out setLayerWithInt:layer];
    GeogebraCommonKernelAlgosAlgoElement *drawAlgo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroOutput_, i))) getParentAlgorithm];
    if ([GeogebraCommonKernelAlgosDrawInformationAlgo_class_() isInstance:drawAlgo]) {
      [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(out, [GeogebraCommonKernelGeosGeoNumeric class])) setDrawableWithBoolean:YES];
      [out setDrawAlgorithmWithGeogebraCommonKernelAlgosDrawInformationAlgo:[((id<GeogebraCommonKernelAlgosDrawInformationAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosDrawInformationAlgo>) check_protocol_cast(drawAlgo, @protocol(GeogebraCommonKernelAlgosDrawInformationAlgo))))) copy__]];
    }
    [out setAlgoMacroOutputWithBoolean:YES];
  }
}

void GeogebraCommonKernelAlgosAlgoMacro_initMap(GeogebraCommonKernelAlgosAlgoMacro *self) {
  GeogebraCommonKernelAlgosAlgoMacro_setAndConsume_macroToAlgoMap_(self, new_JavaUtilHashMap_init());
  GeogebraCommonKernelAlgosAlgoMacro_setAndConsume_macroOutputAndReferencedGeos_(self, new_JavaUtilArrayList_init());
  GeogebraCommonKernelAlgosAlgoMacro_setAndConsume_algoOutputAndReferencedGeos_(self, new_JavaUtilArrayList_init());
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->macroInput_))->size_; i++) {
    GeogebraCommonKernelAlgosAlgoMacro_mapWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(self->macroInput_, i), IOSObjectArray_Get(nil_chk(self->input_), i));
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->macroOutput_))->size_; i++) {
    GeogebraCommonKernelAlgosAlgoMacro_mapWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(self->macroOutput_, i), [self getOutputWithInt:i]);
  }
  for (jint i = 0; i < self->macroOutput_->size_; i++) {
    GeogebraCommonKernelAlgosAlgoMacro_initSpecialReferencesWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(self->macroOutput_, i), [self getOutputWithInt:i]);
  }
}

void GeogebraCommonKernelAlgosAlgoMacro_mapWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoElement *macroGeo, GeogebraCommonKernelGeosGeoElement *algoGeo) {
  if ([((JavaUtilHashMap *) nil_chk(self->macroToAlgoMap_)) getWithId:macroGeo] == nil) {
    [self->macroToAlgoMap_ putWithId:macroGeo withId:algoGeo];
    if (!GeogebraCommonKernelAlgosAlgoMacro_isMacroInputObjectWithGeogebraCommonKernelGeosGeoElement_(self, macroGeo)) {
      [((JavaUtilArrayList *) nil_chk(self->macroOutputAndReferencedGeos_)) addWithId:macroGeo];
      [((JavaUtilArrayList *) nil_chk(self->algoOutputAndReferencedGeos_)) addWithId:algoGeo];
    }
  }
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoElement *macroGeo) {
  if (macroGeo == nil) return nil;
  GeogebraCommonKernelGeosGeoElement *algoGeo = [((JavaUtilHashMap *) nil_chk(self->macroToAlgoMap_)) getWithId:macroGeo];
  if (algoGeo == nil) {
    algoGeo = GeogebraCommonKernelAlgosAlgoMacro_createAlgoCopyWithGeogebraCommonKernelGeosGeoElement_(self, macroGeo);
    GeogebraCommonKernelAlgosAlgoMacro_mapWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, macroGeo, algoGeo);
  }
  return algoGeo;
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelAlgosAlgoMacro_createAlgoCopyWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoElement *macroGeo) {
  GeogebraCommonKernelGeosGeoElement *algoGeo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(macroGeo)) copyInternalWithGeogebraCommonKernelConstruction:self->cons_];
  return algoGeo;
}

void GeogebraCommonKernelAlgosAlgoMacro_initSpecialReferencesWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoElement *macroGeo, GeogebraCommonKernelGeosGeoElement *algoGeo) {
  switch ([[((GeogebraCommonKernelGeosGeoElement *) nil_chk(macroGeo)) getGeoClassType] ordinal]) {
    case GeogebraCommonPluginGeoClass_INTERVAL:
    case GeogebraCommonPluginGeoClass_FUNCTION:
    GeogebraCommonKernelAlgosAlgoMacro_initFunctionWithGeogebraCommonKernelArithmeticFunctionNVar_(self, [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(algoGeo, [GeogebraCommonKernelGeosGeoFunction class])))) getFunction]);
    break;
    case GeogebraCommonPluginGeoClass_FUNCTIONCONDITIONAL:
    break;
    case GeogebraCommonPluginGeoClass_LIST:
    GeogebraCommonKernelAlgosAlgoMacro_initListWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast(macroGeo, [GeogebraCommonKernelGeosGeoList class]), (GeogebraCommonKernelGeosGeoList *) check_class_cast(algoGeo, [GeogebraCommonKernelGeosGeoList class]));
    break;
    case GeogebraCommonPluginGeoClass_LINE:
    GeogebraCommonKernelAlgosAlgoMacro_initLineWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, (GeogebraCommonKernelGeosGeoLine *) check_class_cast(macroGeo, [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoLine *) check_class_cast(algoGeo, [GeogebraCommonKernelGeosGeoLine class]));
    break;
    case GeogebraCommonPluginGeoClass_POLYGON:
    GeogebraCommonKernelAlgosAlgoMacro_initPolygonWithGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelGeosGeoPolygon_(self, (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(macroGeo, [GeogebraCommonKernelGeosGeoPolygon class]), (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(algoGeo, [GeogebraCommonKernelGeosGeoPolygon class]));
    break;
    case GeogebraCommonPluginGeoClass_CONIC:
    GeogebraCommonKernelAlgosAlgoMacro_initConicWithGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_(self, (GeogebraCommonKernelGeosGeoConic *) check_class_cast(macroGeo, [GeogebraCommonKernelGeosGeoConic class]), (GeogebraCommonKernelGeosGeoConic *) check_class_cast(algoGeo, [GeogebraCommonKernelGeosGeoConic class]));
    break;
    case GeogebraCommonPluginGeoClass_TEXT:
    case GeogebraCommonPluginGeoClass_VECTOR:
    case GeogebraCommonPluginGeoClass_IMAGE:
    GeogebraCommonKernelAlgosAlgoMacro_initLocateableWithGeogebraCommonKernelLocateable_withGeogebraCommonKernelLocateable_(self, (id<GeogebraCommonKernelLocateable>) check_protocol_cast(macroGeo, @protocol(GeogebraCommonKernelLocateable)), (id<GeogebraCommonKernelLocateable>) check_protocol_cast(algoGeo, @protocol(GeogebraCommonKernelLocateable)));
    break;
    default:
    ;
  }
}

void GeogebraCommonKernelAlgosAlgoMacro_initLineWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoLine *macroLine, GeogebraCommonKernelGeosGeoLine *line) {
  GeogebraCommonKernelGeosGeoPoint *startPoint = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(GeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithGeogebraCommonKernelGeosGeoElement_(self, [((GeogebraCommonKernelGeosGeoLine *) nil_chk(macroLine)) getStartPoint]), [GeogebraCommonKernelGeosGeoPoint class]);
  GeogebraCommonKernelGeosGeoPoint *endPoint = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(GeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithGeogebraCommonKernelGeosGeoElement_(self, [macroLine getEndPoint]), [GeogebraCommonKernelGeosGeoPoint class]);
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(line)) setStartPointWithGeogebraCommonKernelGeosGeoPoint:startPoint];
  [line setEndPointWithGeogebraCommonKernelGeosGeoPoint:endPoint];
}

void GeogebraCommonKernelAlgosAlgoMacro_initConicWithGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoConic *macroConic, GeogebraCommonKernelGeosGeoConic *conic) {
  JavaUtilArrayList *macroPoints = [((GeogebraCommonKernelGeosGeoConic *) nil_chk(macroConic)) getPointsOnConic];
  if (macroPoints == nil) return;
  jint size = [((JavaUtilArrayList *) nil_chk(macroPoints)) size];
  JavaUtilArrayList *points = [new_JavaUtilArrayList_initWithInt_(size) autorelease];
  for (jint i = 0; i < size; i++) {
    [points addWithId:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(GeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithGeogebraCommonKernelGeosGeoElement_(self, (GeogebraCommonKernelGeosGeoElement *) check_class_cast([macroPoints getWithInt:i], [GeogebraCommonKernelGeosGeoElement class])), @protocol(GeogebraCommonKernelKernelNDGeoPointND))];
  }
  [((GeogebraCommonKernelGeosGeoConic *) nil_chk(conic)) setPointsOnConicWithJavaUtilArrayList:points];
}

void GeogebraCommonKernelAlgosAlgoMacro_initLocateableWithGeogebraCommonKernelLocateable_withGeogebraCommonKernelLocateable_(GeogebraCommonKernelAlgosAlgoMacro *self, id<GeogebraCommonKernelLocateable> macroLocateable, id<GeogebraCommonKernelLocateable> locateable) {
  IOSObjectArray *macroStartPoints = [((id<GeogebraCommonKernelLocateable>) nil_chk(macroLocateable)) getStartPoints];
  if (macroStartPoints == nil) return;
  @try {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(macroStartPoints))->size_; i++) {
      id<GeogebraCommonKernelKernelNDGeoPointND> point = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(GeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithGeogebraCommonKernelGeosGeoElement_(self, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(macroStartPoints, i), [GeogebraCommonKernelGeosGeoElement class])), @protocol(GeogebraCommonKernelKernelNDGeoPointND));
      [((id<GeogebraCommonKernelLocateable>) nil_chk(locateable)) initStartPointWithGeogebraCommonKernelKernelNDGeoPointND:point withInt:i];
    }
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_(@"AlgoMacro.initLocateable:");
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

void GeogebraCommonKernelAlgosAlgoMacro_initPolygonWithGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoPolygon *macroPoly, GeogebraCommonKernelGeosGeoPolygon *poly) {
  IOSObjectArray *macroPolyPoints = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(macroPoly)) getPoints];
  IOSObjectArray *polyPoints = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(macroPolyPoints))->size_ type:GeogebraCommonKernelGeosGeoPoint_class_()];
  for (jint i = 0; i < macroPolyPoints->size_; i++) {
    IOSObjectArray_Set(polyPoints, i, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(GeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithGeogebraCommonKernelGeosGeoElement_(self, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(macroPolyPoints, i), [GeogebraCommonKernelGeosGeoElement class])), [GeogebraCommonKernelGeosGeoPoint class]));
  }
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly)) setPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:polyPoints];
}

void GeogebraCommonKernelAlgosAlgoMacro_initListWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelGeosGeoList *macroList, GeogebraCommonKernelGeosGeoList *geoList) {
  jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(macroList)) size];
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(geoList)) clear];
  [geoList ensureCapacityWithInt:size];
  for (jint i = 0; i < size; i++) {
    [geoList addWithGeogebraCommonKernelGeosGeoElement:GeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithGeogebraCommonKernelGeosGeoElement_(self, [macroList getWithInt:i])];
  }
}

void GeogebraCommonKernelAlgosAlgoMacro_initFunctionWithGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelArithmeticFunctionNVar *fun) {
  GeogebraCommonKernelAlgosAlgoMacro_replaceReferencedMacroObjectsWithGeogebraCommonKernelArithmeticExpressionNode_(self, [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun)) getExpression]);
}

void GeogebraCommonKernelAlgosAlgoMacro_replaceReferencedMacroObjectsWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelAlgosAlgoMacro *self, GeogebraCommonKernelArithmeticExpressionNode *exp) {
  id<GeogebraCommonKernelArithmeticExpressionValue> left = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) getLeft];
  id<GeogebraCommonKernelArithmeticExpressionValue> right = [exp getRight];
  if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isGeoElement]) {
    GeogebraCommonKernelGeosGeoElement *referencedGeo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(left, [GeogebraCommonKernelGeosGeoElement class]);
    if ([((GeogebraCommonKernelMacro *) nil_chk(self->macro_)) isInMacroConstructionWithGeogebraCommonKernelGeosGeoElement:referencedGeo]) {
      [exp setLeftWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithGeogebraCommonKernelGeosGeoElement_(self, referencedGeo)];
    }
  }
  else if ([left isExpressionNode]) {
    GeogebraCommonKernelAlgosAlgoMacro_replaceReferencedMacroObjectsWithGeogebraCommonKernelArithmeticExpressionNode_(self, (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class]));
  }
  if (right == nil) return;
  else if ([right isGeoElement]) {
    GeogebraCommonKernelGeosGeoElement *referencedGeo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(right, [GeogebraCommonKernelGeosGeoElement class]);
    if ([((GeogebraCommonKernelMacro *) nil_chk(self->macro_)) isInMacroConstructionWithGeogebraCommonKernelGeosGeoElement:referencedGeo]) {
      [exp setRightWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelAlgosAlgoMacro_getAlgoGeoWithGeogebraCommonKernelGeosGeoElement_(self, referencedGeo)];
    }
  }
  else if ([right isExpressionNode]) {
    GeogebraCommonKernelAlgosAlgoMacro_replaceReferencedMacroObjectsWithGeogebraCommonKernelArithmeticExpressionNode_(self, (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class]));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoMacro)
