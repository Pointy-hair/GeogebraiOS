//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoConicPartCircumcircleND.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "geogebra/common/kernel/algos/AlgoConicPart.h"
#include "geogebra/common/kernel/algos/AlgoConicPartCircumcircleND.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND () {
 @public
  GeogebraCommonKernelGeosGeoLine *line_;
}

- (void)setIncidence;

- (void)computeDegenerate;

- (void)computeCircle;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND, line_, GeogebraCommonKernelGeosGeoLine *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_setIncidence(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeDegenerate(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeCircle(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAx(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAy(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBx(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBy(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCx(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCy(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self);

@implementation GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
                                                 withInt:(jint)type {
  GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, cons, label, A, B, C, type);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
                                                 withInt:(jint)type {
  GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, cons, A, B, C, type);
  return self;
}

- (GeogebraCommonKernelKernelNDGeoConicND *)createConicPartWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                                                        withInt:(jint)type {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonKernelAlgosAlgoCircleThreePoints *)getAlgo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setIncidence {
  GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_setIncidence(self);
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC:
    return GeogebraCommonKernelCommandsCommandsEnum_get_CircumcircleArc();
    default:
    return GeogebraCommonKernelCommandsCommandsEnum_get_CircumcircleSector();
  }
}

- (jint)getRelatedModeID {
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC:
    return GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_ARC_THREE_POINTS;
    default:
    return GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCUMCIRCLE_SECTOR_THREE_POINTS;
  }
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(A_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(B_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 2, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(C_, [GeogebraCommonKernelGeosGeoElement class]));
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:conicPart_];
  [self setDependencies];
}

- (void)compute {
  if (![((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) isDefined]) {
    [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conicPart_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conicPart_)) setWithGeogebraCommonKernelGeosGeoElement:conic_];
  switch ([conicPart_ getType]) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeDegenerate(self);
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeCircle(self);
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    [self computeSinglePoint];
    break;
    default:
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I", @"AlgoCirclePartPoints: unexpected conic type: ", [conicPart_ getType]));
    [conicPart_ setUndefined];
  }
}

- (void)computeDegenerate {
  GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeDegenerate(self);
}

- (void)computeCircle {
  GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeCircle(self);
}

- (void)computeSinglePoint {
  [((id<GeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(conicPart_, @protocol(GeogebraCommonKernelKernelNDGeoConicPartND))))) setParametersToSinglePoint];
}

- (GeogebraCommonKernelGeosGeoPoint *)getA {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonKernelGeosGeoPoint *)getB {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonKernelGeosGeoPoint *)getC {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getAx {
  return GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAx(self);
}

- (jdouble)getAy {
  return GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAy(self);
}

- (jdouble)getBx {
  return GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBx(self);
}

- (jdouble)getBy {
  return GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBy(self);
}

- (jdouble)getCx {
  return GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCx(self);
}

- (jdouble)getCy {
  return GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCy(self);
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(B_);
  RELEASE_(C_);
  RELEASE_(line_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withInt:", "AlgoConicPartCircumcircleND", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withInt:", "AlgoConicPartCircumcircleND", NULL, 0x1, NULL, NULL },
    { "createConicPartWithGeogebraCommonKernelConstruction:withInt:", "createConicPart", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x404, NULL, NULL },
    { "getAlgo", NULL, "Lgeogebra.common.kernel.algos.AlgoCircleThreePoints;", 0x404, NULL, NULL },
    { "setIncidence", NULL, "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "computeDegenerate", NULL, "V", 0x2, NULL, NULL },
    { "computeCircle", NULL, "V", 0x2, NULL, NULL },
    { "computeSinglePoint", NULL, "V", 0x4, NULL, NULL },
    { "getA", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x401, NULL, NULL },
    { "getB", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x401, NULL, NULL },
    { "getC", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x401, NULL, NULL },
    { "getAx", NULL, "D", 0x14, NULL, NULL },
    { "getAy", NULL, "D", 0x14, NULL, NULL },
    { "getBx", NULL, "D", 0x14, NULL, NULL },
    { "getBy", NULL, "D", 0x14, NULL, NULL },
    { "getCx", NULL, "D", 0x14, NULL, NULL },
    { "getCy", NULL, "D", 0x14, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "B_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "C_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND = { 2, "AlgoConicPartCircumcircleND", "geogebra.common.kernel.algos", NULL, 0x401, 21, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND;
}

@end

void GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, jint type) {
  GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, cons, A, B, C, type);
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conicPart_)) setLabelWithNSString:label];
}

void GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, jint type) {
  GeogebraCommonKernelAlgosAlgoConicPart_initWithGeogebraCommonKernelConstruction_withInt_(self, cons, type);
  GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_set_A_(self, A);
  GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_set_B_(self, B);
  GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_set_C_(self, C);
  GeogebraCommonKernelAlgosAlgoCircleThreePoints *algo = [self getAlgo];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
  GeogebraCommonKernelAlgosAlgoConicPart_set_conic_(self, [((GeogebraCommonKernelAlgosAlgoCircleThreePoints *) nil_chk(algo)) getCircle]);
  GeogebraCommonKernelAlgosAlgoConicPart_set_conicPart_(self, [self createConicPartWithGeogebraCommonKernelConstruction:cons withInt:type]);
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conicPart_)) addPointOnConicWithGeogebraCommonKernelKernelNDGeoPointND:A];
  [self->conicPart_ addPointOnConicWithGeogebraCommonKernelKernelNDGeoPointND:B];
  [self->conicPart_ addPointOnConicWithGeogebraCommonKernelKernelNDGeoPointND:C];
  [self setInputOutput];
  [self compute];
  GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_setIncidence(self);
}

void GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_setIncidence(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->A_)) addIncidenceWithGeogebraCommonKernelGeosGeoElement:self->conicPart_ withBoolean:NO];
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->B_)) addIncidenceWithGeogebraCommonKernelGeosGeoElement:self->conicPart_ withBoolean:NO];
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->C_)) addIncidenceWithGeogebraCommonKernelGeosGeoElement:self->conicPart_ withBoolean:NO];
}

void GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeDegenerate(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  if (self->line_ == nil) {
    GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_set_line_(self, IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conicPart_)) getLines]), 0));
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->line_)) setStartPointWithGeogebraCommonKernelGeosGeoPoint:[self getA]];
    [self->line_ setEndPointWithGeogebraCommonKernelGeosGeoPoint:[self getC]];
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk([self->conicPart_ getLines]), 1))) setStartPointWithGeogebraCommonKernelGeosGeoPoint:[self getC]];
  }
  GeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_([self getA], [self getC], self->line_);
  jdouble lambda = GeogebraCommonKernelGeosGeoPoint_affineRatioWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_([self getA], [self getC], [self getB]);
  if (lambda < 0 || lambda > 1) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conicPart_)) getLines]), 1))) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:self->line_];
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->line_)) changeSign];
    [((id<GeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(self->conicPart_, @protocol(GeogebraCommonKernelKernelNDGeoConicPartND))) setParametersWithDouble:0 withDouble:1 withBoolean:NO];
  }
  else {
    [((id<GeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(self->conicPart_, @protocol(GeogebraCommonKernelKernelNDGeoConicPartND))))) setParametersWithDouble:0 withDouble:1 withBoolean:YES];
  }
}

void GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_computeCircle(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  jdouble alpha = JavaLangMath_atan2WithDouble_withDouble_(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAy(self) - [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conicPart_)) getTranslationVector])) getY], GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAx(self) - [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk([self->conicPart_ getTranslationVector])) getX]);
  jdouble beta = JavaLangMath_atan2WithDouble_withDouble_(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCy(self) - [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk([self->conicPart_ getTranslationVector])) getY], GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCx(self) - [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk([self->conicPart_ getTranslationVector])) getX]);
  jdouble det = (GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBx(self) - GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAx(self)) * (GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCy(self) - GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAy(self)) - (GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBy(self) - GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAy(self)) * (GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCx(self) - GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAx(self));
  [((id<GeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(self->conicPart_, @protocol(GeogebraCommonKernelKernelNDGeoConicPartND))) setParametersWithDouble:alpha withDouble:beta withBoolean:det > 0];
}

jdouble GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAx(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  return ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getA]))->inhomX_;
}

jdouble GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getAy(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  return ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getA]))->inhomY_;
}

jdouble GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBx(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  return ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getB]))->inhomX_;
}

jdouble GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getBy(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  return ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getB]))->inhomY_;
}

jdouble GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCx(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  return ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getC]))->inhomX_;
}

jdouble GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_getCy(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND *self) {
  return ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getC]))->inhomY_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND)
