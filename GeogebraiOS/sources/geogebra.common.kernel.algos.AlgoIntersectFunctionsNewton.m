//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoIntersectFunctionsNewton.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntersectFunctionsNewton.h"
#include "geogebra/common/kernel/algos/AlgoRootNewton.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/IneqTree.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Double.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton () {
 @public
  GeogebraCommonKernelGeosGeoFunction *f_AlgoIntersectFunctionsNewton_, *g_;
  GeogebraCommonKernelGeosGeoPoint *startPoint_, *rootPoint_AlgoIntersectFunctionsNewton_;
  GeogebraCommonKernelArithmeticFunction *diffFunction_;
}

- (void)computeRootBooleanWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)bool_
                          withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)real;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton, f_AlgoIntersectFunctionsNewton_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton, g_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton, startPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton, rootPoint_AlgoIntersectFunctionsNewton_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton, diffFunction_, GeogebraCommonKernelArithmeticFunction *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_compute(GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_computeRootBooleanWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton *self, GeogebraCommonKernelGeosGeoFunction *bool_, GeogebraCommonKernelGeosGeoFunction *real);

@implementation GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)g
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)startPoint {
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoPoint_(self, cons, f, g, startPoint);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)g
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)startPoint {
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, f, g, startPoint);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, f_AlgoIntersectFunctionsNewton_);
  IOSObjectArray_Set(input_, 1, g_);
  IOSObjectArray_Set(input_, 2, startPoint_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:rootPoint_AlgoIntersectFunctionsNewton_];
  [self setDependencies];
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_compute(self);
}

- (void)computeRootBooleanWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)bool_
                          withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)real {
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_computeRootBooleanWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(self, bool_, real);
}

- (GeogebraCommonKernelGeosGeoPoint *)getIntersectionPoint {
  return rootPoint_AlgoIntersectFunctionsNewton_;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionPointOfABWithInitialValueC" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(f_AlgoIntersectFunctionsNewton_);
  RELEASE_(g_);
  RELEASE_(startPoint_);
  RELEASE_(rootPoint_AlgoIntersectFunctionsNewton_);
  RELEASE_(diffFunction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoPoint:", "AlgoIntersectFunctionsNewton", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoPoint:", "AlgoIntersectFunctionsNewton", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "computeRootBooleanWithGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoFunction:", "computeRootBoolean", "V", 0x2, NULL, NULL },
    { "getIntersectionPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_AlgoIntersectFunctionsNewton_", "f", 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "startPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "rootPoint_AlgoIntersectFunctionsNewton_", "rootPoint", 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "diffFunction_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton = { 2, "AlgoIntersectFunctionsNewton", "geogebra.common.kernel.algos", NULL, 0x1, 9, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton;
}

@end

void GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoFunction *f, GeogebraCommonKernelGeosGeoFunction *g, GeogebraCommonKernelGeosGeoPoint *startPoint) {
  GeogebraCommonKernelAlgosAlgoRootNewton_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_set_f_AlgoIntersectFunctionsNewton_(self, f);
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_set_g_(self, g);
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_set_startPoint_(self, startPoint);
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_setAndConsume_diffFunction_(self, new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelKernel_(self->kernel_));
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_setAndConsume_rootPoint_AlgoIntersectFunctionsNewton_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_compute(self);
}

GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton *new_GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoFunction *f, GeogebraCommonKernelGeosGeoFunction *g, GeogebraCommonKernelGeosGeoPoint *startPoint) {
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton *self = [GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton alloc];
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoPoint_(self, cons, f, g, startPoint);
  return self;
}

void GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, GeogebraCommonKernelGeosGeoFunction *g, GeogebraCommonKernelGeosGeoPoint *startPoint) {
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoPoint_(self, cons, f, g, startPoint);
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rootPoint_AlgoIntersectFunctionsNewton_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton *new_GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, GeogebraCommonKernelGeosGeoFunction *g, GeogebraCommonKernelGeosGeoPoint *startPoint) {
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton *self = [GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton alloc];
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, f, g, startPoint);
  return self;
}

void GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_compute(GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton *self) {
  if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) isBooleanFunction]) {
    if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_AlgoIntersectFunctionsNewton_)) isBooleanFunction]) {
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rootPoint_AlgoIntersectFunctionsNewton_)) setUndefined];
    }
    else {
      GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_computeRootBooleanWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(self, self->g_, self->f_AlgoIntersectFunctionsNewton_);
    }
    return;
  }
  else if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_AlgoIntersectFunctionsNewton_)) isBooleanFunction]) {
    GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_computeRootBooleanWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(self, self->f_AlgoIntersectFunctionsNewton_, self->g_);
    return;
  }
  if (!([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_AlgoIntersectFunctionsNewton_)) isDefined] && [self->g_ isDefined] && [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->startPoint_)) isDefined])) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rootPoint_AlgoIntersectFunctionsNewton_)) setUndefined];
  }
  else {
    GeogebraCommonKernelArithmeticFunction_differenceWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_([self->f_AlgoIntersectFunctionsNewton_ getFunctionWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->startPoint_))->inhomX_], [self->g_ getFunctionWithDouble:self->startPoint_->inhomX_], self->diffFunction_);
    jdouble x = [self calcRootWithGeogebraCommonKernelArithmeticFunction:self->diffFunction_ withDouble:self->startPoint_->inhomX_];
    if (JavaLangDouble_isNaNWithDouble_(x) || JavaLangDouble_isNaNWithDouble_([self->g_ evaluateWithDouble:x])) {
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rootPoint_AlgoIntersectFunctionsNewton_)) setUndefined];
      return;
    }
    jdouble y = [self->f_AlgoIntersectFunctionsNewton_ evaluateWithDouble:x];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rootPoint_AlgoIntersectFunctionsNewton_)) setCoordsWithDouble:x withDouble:y withDouble:1.0];
    if (![self->startPoint_ isLabelSet] && [self->startPoint_ isIndependent] && [self->rootPoint_AlgoIntersectFunctionsNewton_ isDefined]) {
      [self->startPoint_ setCoordsWithGeogebraCommonKernelGeosGeoVec3D:self->rootPoint_AlgoIntersectFunctionsNewton_];
    }
  }
}

void GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_computeRootBooleanWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton *self, GeogebraCommonKernelGeosGeoFunction *bool_, GeogebraCommonKernelGeosGeoFunction *real) {
  if ([((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(bool_)) getFunction])) getIneqs] == nil) {
    [((GeogebraCommonKernelArithmeticFunction *) nil_chk([bool_ getFunction])) initIneqsWithGeogebraCommonKernelArithmeticExpressionNode:[bool_ getFunctionExpression] withGeogebraCommonKernelArithmeticFunctionalNVar:bool_];
  }
  else if (![bool_ isLabelSet]) {
    [((GeogebraCommonKernelArithmeticFunction *) nil_chk([bool_ getFunction])) updateIneqs];
  }
  JavaUtilTreeSet *zeros = [new_JavaUtilTreeSet_init() autorelease];
  [((GeogebraCommonKernelArithmeticIneqTree *) nil_chk([((GeogebraCommonKernelArithmeticFunction *) nil_chk([bool_ getFunction])) getIneqs])) getZerosWithJavaUtilSet:zeros];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rootPoint_AlgoIntersectFunctionsNewton_)) setUndefined];
  if ([zeros isEmpty]) {
    return;
  }
  jdouble lower = JavaLangDouble_NaN;
  jdouble higher = JavaLangDouble_NaN;
  for (JavaLangDouble * __strong d in zeros) {
    if ([((JavaLangDouble *) nil_chk(d)) doubleValue] < [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->startPoint_)) getInhomX]) {
      lower = [d doubleValue];
    }
    if ([d doubleValue] >= [self->startPoint_ getInhomX]) {
      higher = [d doubleValue];
      break;
    }
  }
  jdouble x = JavaLangDouble_isNaNWithDouble_(higher) || ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->startPoint_)) getInhomX] - lower < higher - [self->startPoint_ getInhomX]) ? lower : higher;
  [self->rootPoint_AlgoIntersectFunctionsNewton_ setCoordsWithDouble:x withDouble:[((GeogebraCommonKernelGeosGeoFunction *) nil_chk(real)) evaluateWithDouble:x] withDouble:1];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton)
