//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/index/bintree/Interval.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/index/bintree/Interval.h"

@implementation ComVividsolutionsJtsIndexBintreeInterval

- (instancetype)init {
  ComVividsolutionsJtsIndexBintreeInterval_init(self);
  return self;
}

- (instancetype)initWithDouble:(jdouble)min
                    withDouble:(jdouble)max {
  ComVividsolutionsJtsIndexBintreeInterval_initWithDouble_withDouble_(self, min, max);
  return self;
}

- (instancetype)initWithComVividsolutionsJtsIndexBintreeInterval:(ComVividsolutionsJtsIndexBintreeInterval *)interval {
  ComVividsolutionsJtsIndexBintreeInterval_initWithComVividsolutionsJtsIndexBintreeInterval_(self, interval);
  return self;
}

- (void)init__WithDouble:(jdouble)min
              withDouble:(jdouble)max {
  self->min_ = min;
  self->max_ = max;
  if (min > max) {
    self->min_ = max;
    self->max_ = min;
  }
}

- (jdouble)getMin {
  return min_;
}

- (jdouble)getMax {
  return max_;
}

- (jdouble)getWidth {
  return max_ - min_;
}

- (void)expandToIncludeWithComVividsolutionsJtsIndexBintreeInterval:(ComVividsolutionsJtsIndexBintreeInterval *)interval {
  if (((ComVividsolutionsJtsIndexBintreeInterval *) nil_chk(interval))->max_ > max_) max_ = interval->max_;
  if (interval->min_ < min_) min_ = interval->min_;
}

- (jboolean)overlapsWithComVividsolutionsJtsIndexBintreeInterval:(ComVividsolutionsJtsIndexBintreeInterval *)interval {
  return [self overlapsWithDouble:((ComVividsolutionsJtsIndexBintreeInterval *) nil_chk(interval))->min_ withDouble:interval->max_];
}

- (jboolean)overlapsWithDouble:(jdouble)min
                    withDouble:(jdouble)max {
  if (self->min_ > max || self->max_ < min) return NO;
  return YES;
}

- (jboolean)containsWithComVividsolutionsJtsIndexBintreeInterval:(ComVividsolutionsJtsIndexBintreeInterval *)interval {
  return [self containsWithDouble:((ComVividsolutionsJtsIndexBintreeInterval *) nil_chk(interval))->min_ withDouble:interval->max_];
}

- (jboolean)containsWithDouble:(jdouble)min
                    withDouble:(jdouble)max {
  return (min >= self->min_ && max <= self->max_);
}

- (jboolean)containsWithDouble:(jdouble)p {
  return (p >= self->min_ && p <= self->max_);
}

- (NSString *)description {
  return JreStrcat("CD$DC", '[', min_, @", ", max_, ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Interval", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withDouble:", "Interval", NULL, 0x1, NULL, NULL },
    { "initWithComVividsolutionsJtsIndexBintreeInterval:", "Interval", NULL, 0x1, NULL, NULL },
    { "init__WithDouble:withDouble:", "init", "V", 0x1, NULL, NULL },
    { "getMin", NULL, "D", 0x1, NULL, NULL },
    { "getMax", NULL, "D", 0x1, NULL, NULL },
    { "getWidth", NULL, "D", 0x1, NULL, NULL },
    { "expandToIncludeWithComVividsolutionsJtsIndexBintreeInterval:", "expandToInclude", "V", 0x1, NULL, NULL },
    { "overlapsWithComVividsolutionsJtsIndexBintreeInterval:", "overlaps", "Z", 0x1, NULL, NULL },
    { "overlapsWithDouble:withDouble:", "overlaps", "Z", 0x1, NULL, NULL },
    { "containsWithComVividsolutionsJtsIndexBintreeInterval:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "min_", NULL, 0x1, "D", NULL, NULL,  },
    { "max_", NULL, 0x1, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsIndexBintreeInterval = { 2, "Interval", "com.vividsolutions.jts.index.bintree", NULL, 0x1, 14, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsIndexBintreeInterval;
}

@end

void ComVividsolutionsJtsIndexBintreeInterval_init(ComVividsolutionsJtsIndexBintreeInterval *self) {
  NSObject_init(self);
  self->min_ = 0.0;
  self->max_ = 0.0;
}

ComVividsolutionsJtsIndexBintreeInterval *new_ComVividsolutionsJtsIndexBintreeInterval_init() {
  ComVividsolutionsJtsIndexBintreeInterval *self = [ComVividsolutionsJtsIndexBintreeInterval alloc];
  ComVividsolutionsJtsIndexBintreeInterval_init(self);
  return self;
}

void ComVividsolutionsJtsIndexBintreeInterval_initWithDouble_withDouble_(ComVividsolutionsJtsIndexBintreeInterval *self, jdouble min, jdouble max) {
  NSObject_init(self);
  [self init__WithDouble:min withDouble:max];
}

ComVividsolutionsJtsIndexBintreeInterval *new_ComVividsolutionsJtsIndexBintreeInterval_initWithDouble_withDouble_(jdouble min, jdouble max) {
  ComVividsolutionsJtsIndexBintreeInterval *self = [ComVividsolutionsJtsIndexBintreeInterval alloc];
  ComVividsolutionsJtsIndexBintreeInterval_initWithDouble_withDouble_(self, min, max);
  return self;
}

void ComVividsolutionsJtsIndexBintreeInterval_initWithComVividsolutionsJtsIndexBintreeInterval_(ComVividsolutionsJtsIndexBintreeInterval *self, ComVividsolutionsJtsIndexBintreeInterval *interval) {
  NSObject_init(self);
  [self init__WithDouble:((ComVividsolutionsJtsIndexBintreeInterval *) nil_chk(interval))->min_ withDouble:interval->max_];
}

ComVividsolutionsJtsIndexBintreeInterval *new_ComVividsolutionsJtsIndexBintreeInterval_initWithComVividsolutionsJtsIndexBintreeInterval_(ComVividsolutionsJtsIndexBintreeInterval *interval) {
  ComVividsolutionsJtsIndexBintreeInterval *self = [ComVividsolutionsJtsIndexBintreeInterval alloc];
  ComVividsolutionsJtsIndexBintreeInterval_initWithComVividsolutionsJtsIndexBintreeInterval_(self, interval);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsIndexBintreeInterval)
