//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/ode/AbstractIntegrator.h"
#include "org/apache/commons/math/ode/DerivativeException.h"
#include "org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.h"
#include "org/apache/commons/math/ode/FirstOrderDifferentialEquations.h"
#include "org/apache/commons/math/ode/IntegratorException.h"
#include "org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.h"
#include "org/apache/commons/math/util/FastMath.h"

@interface OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator () {
 @public
  jdouble initialStep_;
  jdouble minStep_;
  jdouble maxStep_;
}

@end

@implementation OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator

- (instancetype)initWithNSString:(NSString *)name
                      withDouble:(jdouble)minStep
                      withDouble:(jdouble)maxStep
                      withDouble:(jdouble)scalAbsoluteTolerance
                      withDouble:(jdouble)scalRelativeTolerance {
  OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator_initWithNSString_withDouble_withDouble_withDouble_withDouble_(self, name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                      withDouble:(jdouble)minStep
                      withDouble:(jdouble)maxStep
                 withDoubleArray:(IOSDoubleArray *)vecAbsoluteTolerance
                 withDoubleArray:(IOSDoubleArray *)vecRelativeTolerance {
  OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator_initWithNSString_withDouble_withDouble_withDoubleArray_withDoubleArray_(self, name, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
  return self;
}

- (void)setInitialStepSizeWithDouble:(jdouble)initialStepSize {
  if ((initialStepSize < minStep_) || (initialStepSize > maxStep_)) {
    initialStep_ = -1.0;
  }
  else {
    initialStep_ = initialStepSize;
  }
}

- (void)sanityChecksWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:(id<OrgApacheCommonsMathOdeFirstOrderDifferentialEquations>)equations
                                                                    withDouble:(jdouble)t0
                                                               withDoubleArray:(IOSDoubleArray *)y0
                                                                    withDouble:(jdouble)t
                                                               withDoubleArray:(IOSDoubleArray *)y {
  [super sanityChecksWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:equations withDouble:t0 withDoubleArray:y0 withDouble:t withDoubleArray:y];
  if ([OrgApacheCommonsMathOdeExtendedFirstOrderDifferentialEquations_class_() isInstance:equations]) {
    mainSetDimension_ = [((id<OrgApacheCommonsMathOdeExtendedFirstOrderDifferentialEquations>) nil_chk(((id<OrgApacheCommonsMathOdeExtendedFirstOrderDifferentialEquations>) check_protocol_cast(equations, @protocol(OrgApacheCommonsMathOdeExtendedFirstOrderDifferentialEquations))))) getMainSetDimension];
  }
  else {
    mainSetDimension_ = [((id<OrgApacheCommonsMathOdeFirstOrderDifferentialEquations>) nil_chk(equations)) getDimension];
  }
  if ((vecAbsoluteTolerance_ != nil) && (vecAbsoluteTolerance_->size_ != mainSetDimension_)) {
    @throw [new_OrgApacheCommonsMathOdeIntegratorException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_SIMPLE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(mainSetDimension_), JavaLangInteger_valueOfWithInt_(vecAbsoluteTolerance_->size_) } count:2 type:NSObject_class_()]) autorelease];
  }
  if ((vecRelativeTolerance_ != nil) && (vecRelativeTolerance_->size_ != mainSetDimension_)) {
    @throw [new_OrgApacheCommonsMathOdeIntegratorException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_SIMPLE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(mainSetDimension_), JavaLangInteger_valueOfWithInt_(vecRelativeTolerance_->size_) } count:2 type:NSObject_class_()]) autorelease];
  }
}

- (jdouble)initializeStepWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:(id<OrgApacheCommonsMathOdeFirstOrderDifferentialEquations>)equations
                                                                        withBoolean:(jboolean)forward
                                                                            withInt:(jint)order
                                                                    withDoubleArray:(IOSDoubleArray *)scale_
                                                                         withDouble:(jdouble)t0
                                                                    withDoubleArray:(IOSDoubleArray *)y0
                                                                    withDoubleArray:(IOSDoubleArray *)yDot0
                                                                    withDoubleArray:(IOSDoubleArray *)y1
                                                                    withDoubleArray:(IOSDoubleArray *)yDot1 {
  if (initialStep_ > 0) {
    return forward ? initialStep_ : -initialStep_;
  }
  jdouble ratio;
  jdouble yOnScale2 = 0;
  jdouble yDotOnScale2 = 0;
  for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(scale_))->size_; ++j) {
    ratio = IOSDoubleArray_Get(nil_chk(y0), j) / IOSDoubleArray_Get(scale_, j);
    yOnScale2 += ratio * ratio;
    ratio = IOSDoubleArray_Get(nil_chk(yDot0), j) / IOSDoubleArray_Get(scale_, j);
    yDotOnScale2 += ratio * ratio;
  }
  jdouble h = ((yOnScale2 < 1.0e-10) || (yDotOnScale2 < 1.0e-10)) ? 1.0e-6 : (0.01 * OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(yOnScale2 / yDotOnScale2));
  if (!forward) {
    h = -h;
  }
  for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(y0))->size_; ++j) {
    *IOSDoubleArray_GetRef(nil_chk(y1), j) = IOSDoubleArray_Get(y0, j) + h * IOSDoubleArray_Get(nil_chk(yDot0), j);
  }
  [self computeDerivativesWithDouble:t0 + h withDoubleArray:y1 withDoubleArray:yDot1];
  jdouble yDDotOnScale = 0;
  for (jint j = 0; j < scale_->size_; ++j) {
    ratio = (IOSDoubleArray_Get(nil_chk(yDot1), j) - IOSDoubleArray_Get(nil_chk(yDot0), j)) / IOSDoubleArray_Get(scale_, j);
    yDDotOnScale += ratio * ratio;
  }
  yDDotOnScale = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(yDDotOnScale) / h;
  jdouble maxInv2 = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(yDotOnScale2), yDDotOnScale);
  jdouble h1 = (maxInv2 < 1.0e-15) ? OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(1.0e-6, 0.001 * OrgApacheCommonsMathUtilFastMath_absWithDouble_(h)) : OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(0.01 / maxInv2, 1.0 / order);
  h = OrgApacheCommonsMathUtilFastMath_minWithDouble_withDouble_(100.0 * OrgApacheCommonsMathUtilFastMath_absWithDouble_(h), h1);
  h = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(h, 1.0e-12 * OrgApacheCommonsMathUtilFastMath_absWithDouble_(t0));
  if (h < [self getMinStep]) {
    h = [self getMinStep];
  }
  if (h > [self getMaxStep]) {
    h = [self getMaxStep];
  }
  if (!forward) {
    h = -h;
  }
  return h;
}

- (jdouble)filterStepWithDouble:(jdouble)h
                    withBoolean:(jboolean)forward
                    withBoolean:(jboolean)acceptSmall {
  jdouble filteredH = h;
  if (OrgApacheCommonsMathUtilFastMath_absWithDouble_(h) < minStep_) {
    if (acceptSmall) {
      filteredH = forward ? minStep_ : -minStep_;
    }
    else {
      @throw [new_OrgApacheCommonsMathOdeIntegratorException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(minStep_), JavaLangDouble_valueOfWithDouble_(OrgApacheCommonsMathUtilFastMath_absWithDouble_(h)) } count:2 type:NSObject_class_()]) autorelease];
    }
  }
  if (filteredH > maxStep_) {
    filteredH = maxStep_;
  }
  else if (filteredH < -maxStep_) {
    filteredH = -maxStep_;
  }
  return filteredH;
}

- (jdouble)integrateWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:(id<OrgApacheCommonsMathOdeFirstOrderDifferentialEquations>)equations
                                                                    withDouble:(jdouble)t0
                                                               withDoubleArray:(IOSDoubleArray *)y0
                                                                    withDouble:(jdouble)t
                                                               withDoubleArray:(IOSDoubleArray *)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getCurrentStepStart {
  return stepStart_;
}

- (void)resetInternalState {
  stepStart_ = JavaLangDouble_NaN;
  stepSize_ = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(minStep_ * maxStep_);
}

- (jdouble)getMinStep {
  return minStep_;
}

- (jdouble)getMaxStep {
  return maxStep_;
}

- (void)dealloc {
  RELEASE_(vecAbsoluteTolerance_);
  RELEASE_(vecRelativeTolerance_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withDouble:withDouble:withDouble:withDouble:", "AdaptiveStepsizeIntegrator", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withDouble:withDouble:withDoubleArray:withDoubleArray:", "AdaptiveStepsizeIntegrator", NULL, 0x1, NULL, NULL },
    { "setInitialStepSizeWithDouble:", "setInitialStepSize", "V", 0x1, NULL, NULL },
    { "sanityChecksWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:withDouble:withDoubleArray:withDouble:withDoubleArray:", "sanityChecks", "V", 0x4, "Lorg.apache.commons.math.ode.IntegratorException;", NULL },
    { "initializeStepWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:withBoolean:withInt:withDoubleArray:withDouble:withDoubleArray:withDoubleArray:withDoubleArray:withDoubleArray:", "initializeStep", "D", 0x1, "Lorg.apache.commons.math.ode.DerivativeException;", NULL },
    { "filterStepWithDouble:withBoolean:withBoolean:", "filterStep", "D", 0x4, "Lorg.apache.commons.math.ode.IntegratorException;", NULL },
    { "integrateWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:withDouble:withDoubleArray:withDouble:withDoubleArray:", "integrate", "D", 0x401, "Lorg.apache.commons.math.ode.DerivativeException;Lorg.apache.commons.math.ode.IntegratorException;", NULL },
    { "getCurrentStepStart", NULL, "D", 0x1, NULL, NULL },
    { "resetInternalState", NULL, "V", 0x4, NULL, NULL },
    { "getMinStep", NULL, "D", 0x1, NULL, NULL },
    { "getMaxStep", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "scalAbsoluteTolerance_", NULL, 0x14, "D", NULL, NULL,  },
    { "scalRelativeTolerance_", NULL, 0x14, "D", NULL, NULL,  },
    { "vecAbsoluteTolerance_", NULL, 0x14, "[D", NULL, NULL,  },
    { "vecRelativeTolerance_", NULL, 0x14, "[D", NULL, NULL,  },
    { "mainSetDimension_", NULL, 0x4, "I", NULL, NULL,  },
    { "initialStep_", NULL, 0x2, "D", NULL, NULL,  },
    { "minStep_", NULL, 0x12, "D", NULL, NULL,  },
    { "maxStep_", NULL, 0x12, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator = { 2, "AdaptiveStepsizeIntegrator", "org.apache.commons.math.ode.nonstiff", NULL, 0x401, 11, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator;
}

@end

void OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator_initWithNSString_withDouble_withDouble_withDouble_withDouble_(OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator *self, NSString *name, jdouble minStep, jdouble maxStep, jdouble scalAbsoluteTolerance, jdouble scalRelativeTolerance) {
  OrgApacheCommonsMathOdeAbstractIntegrator_initWithNSString_(self, name);
  self->minStep_ = OrgApacheCommonsMathUtilFastMath_absWithDouble_(minStep);
  self->maxStep_ = OrgApacheCommonsMathUtilFastMath_absWithDouble_(maxStep);
  self->initialStep_ = -1.0;
  self->scalAbsoluteTolerance_ = scalAbsoluteTolerance;
  self->scalRelativeTolerance_ = scalRelativeTolerance;
  OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator_set_vecAbsoluteTolerance_(self, nil);
  OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator_set_vecRelativeTolerance_(self, nil);
  [self resetInternalState];
}

void OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator_initWithNSString_withDouble_withDouble_withDoubleArray_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator *self, NSString *name, jdouble minStep, jdouble maxStep, IOSDoubleArray *vecAbsoluteTolerance, IOSDoubleArray *vecRelativeTolerance) {
  OrgApacheCommonsMathOdeAbstractIntegrator_initWithNSString_(self, name);
  self->minStep_ = minStep;
  self->maxStep_ = maxStep;
  self->initialStep_ = -1.0;
  self->scalAbsoluteTolerance_ = 0;
  self->scalRelativeTolerance_ = 0;
  OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator_set_vecAbsoluteTolerance_(self, [((IOSDoubleArray *) nil_chk(vecAbsoluteTolerance)) clone]);
  OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator_set_vecRelativeTolerance_(self, [((IOSDoubleArray *) nil_chk(vecRelativeTolerance)) clone]);
  [self resetInternalState];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator)
