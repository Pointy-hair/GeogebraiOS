//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/CmdAxes3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAxes3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdAxes3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/advanced/CmdAxes.h"
#include "geogebra/common/kernel/algos/AlgoAxesQuadricND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"

@implementation GeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (GeogebraCommonKernelAlgosAlgoAxesQuadricND *)axesConicWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons1
                                                                            withNSStringArray:(IOSObjectArray *)labels
                                                 withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)c {
  if ([((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(c)) isGeoElement3D]) {
    return [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoQuadricND_(cons1, labels, c) autorelease];
  }
  return [super axesConicWithGeogebraCommonKernelConstruction:cons1 withNSStringArray:labels withGeogebraCommonKernelKernelNDGeoQuadricND:c];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdAxes3D", NULL, 0x1, NULL, NULL },
    { "axesConicWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoQuadricND:", "axesConic", "Lgeogebra.common.kernel.algos.AlgoAxesQuadricND;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D = { 2, "CmdAxes3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelAdvancedCmdAxes_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D *new_GeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D)
