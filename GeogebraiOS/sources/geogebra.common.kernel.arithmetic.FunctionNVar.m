//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/FunctionNVar.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/BooleanValue.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/arithmetic/IneqTree.h"
#include "geogebra/common/kernel/arithmetic/Inequality.h"
#include "geogebra/common/kernel/arithmetic/Inspecting.h"
#include "geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/parser/Parser.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/MaxSizeHashMap.h"
#include "geogebra/common/util/MyMath.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/TreeSet.h"

#define GeogebraCommonKernelArithmeticFunctionNVar_MAX_CAS_EVAL_MAP_SIZE 100

@interface GeogebraCommonKernelArithmeticFunctionNVar () {
 @public
  GeogebraCommonKernelArithmeticIneqTree *ineqs_;
  GeogebraCommonKernelArithmeticExpressionNode *casEvalExpression_;
  NSString *casEvalStringSymbolic_;
  GeogebraCommonUtilMaxSizeHashMap *casEvalMap_;
}

- (void)fixStructure;

- (jboolean)initTypeWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev OBJC_METHOD_FAMILY_NONE;

- (GeogebraCommonUtilMaxSizeHashMap *)getCasEvalMap;

- (GeogebraCommonKernelArithmeticFunctionNVar *)lookupCasEvalMapWithNSString:(NSString *)casString;

- (jboolean)initIneqsWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)fe
                     withGeogebraCommonKernelArithmeticFunctionalNVar:(id<GeogebraCommonKernelArithmeticFunctionalNVar>)functional
                           withGeogebraCommonKernelArithmeticIneqTree:(GeogebraCommonKernelArithmeticIneqTree *)tree
                                                          withBoolean:(jboolean)negate OBJC_METHOD_FAMILY_NONE;

+ (GeogebraCommonPluginOperationEnum *)adjustOpWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)op
                                                                         withBoolean:(jboolean)negate;

- (void)translateXWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)en
                                                        withDouble:(jdouble)vx
                                                           withInt:(jint)varNo;

- (GeogebraCommonKernelArithmeticExpressionNode *)shiftXnodeWithDouble:(jdouble)vx
                                                               withInt:(jint)varNo;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticFunctionNVar, ineqs_, GeogebraCommonKernelArithmeticIneqTree *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticFunctionNVar, casEvalExpression_, GeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticFunctionNVar, casEvalStringSymbolic_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticFunctionNVar, casEvalMap_, GeogebraCommonUtilMaxSizeHashMap *)

static JavaUtilArrayList *GeogebraCommonKernelArithmeticFunctionNVar_undecided_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticFunctionNVar, undecided_, JavaUtilArrayList *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticFunctionNVar, undecided_, JavaUtilArrayList *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticFunctionNVar, MAX_CAS_EVAL_MAP_SIZE, jint)

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelArithmeticFunctionNVar_getExpression(GeogebraCommonKernelArithmeticFunctionNVar *self);

__attribute__((unused)) static jint GeogebraCommonKernelArithmeticFunctionNVar_getVarNumber(GeogebraCommonKernelArithmeticFunctionNVar *self);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticFunctionNVar_fixStructure(GeogebraCommonKernelArithmeticFunctionNVar *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelArithmeticFunctionNVar_initTypeWithGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmeticFunctionNVar *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev);

__attribute__((unused)) static jdouble GeogebraCommonKernelArithmeticFunctionNVar_evaluateWithDoubleArray_(GeogebraCommonKernelArithmeticFunctionNVar *self, IOSDoubleArray *vals);

__attribute__((unused)) static jboolean GeogebraCommonKernelArithmeticFunctionNVar_evaluateBooleanWithDoubleArray_(GeogebraCommonKernelArithmeticFunctionNVar *self, IOSDoubleArray *vals);

__attribute__((unused)) static GeogebraCommonUtilMaxSizeHashMap *GeogebraCommonKernelArithmeticFunctionNVar_getCasEvalMap(GeogebraCommonKernelArithmeticFunctionNVar *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticFunctionNVar *GeogebraCommonKernelArithmeticFunctionNVar_lookupCasEvalMapWithNSString_(GeogebraCommonKernelArithmeticFunctionNVar *self, NSString *casString);

__attribute__((unused)) static jboolean GeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticIneqTree_withBoolean_(GeogebraCommonKernelArithmeticFunctionNVar *self, GeogebraCommonKernelArithmeticExpressionNode *fe, id<GeogebraCommonKernelArithmeticFunctionalNVar> functional, GeogebraCommonKernelArithmeticIneqTree *tree, jboolean negate);

__attribute__((unused)) static GeogebraCommonPluginOperationEnum *GeogebraCommonKernelArithmeticFunctionNVar_adjustOpWithGeogebraCommonPluginOperationEnum_withBoolean_(GeogebraCommonPluginOperationEnum *op, jboolean negate);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticFunctionNVar_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_withInt_(GeogebraCommonKernelArithmeticFunctionNVar *self, GeogebraCommonKernelArithmeticExpressionNode *en, jdouble vx, jint varNo);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelArithmeticFunctionNVar_shiftXnodeWithDouble_withInt_(GeogebraCommonKernelArithmeticFunctionNVar *self, jdouble vx, jint varNo);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticFunctionNVar)

@implementation GeogebraCommonKernelArithmeticFunctionNVar

- (instancetype)initWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)expression {
  GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_(self, expression);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)exp
             withGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fVars {
  GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_(self, exp, fVars);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *)f
                                    withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticFunctionNVar_withGeogebraCommonKernelKernel_(self, f, kernel);
  return self;
}

- (jboolean)isFunctionVariableWithNSString:(NSString *)var {
  if (fVars_ == nil) {
    return NO;
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fVars_))->size_; i++) {
    if ([((NSString *) nil_chk([((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(fVars_, i))) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:var]) {
      return YES;
    }
  }
  return NO;
}

- (GeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel1 {
  return [new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticFunctionNVar_withGeogebraCommonKernelKernel_(self, kernel1) autorelease];
}

- (GeogebraCommonKernelArithmeticExpressionNode *)getExpression {
  return GeogebraCommonKernelArithmeticFunctionNVar_getExpression(self);
}

- (void)resolveVariables {
  [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) resolveVariables];
}

- (void)replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (expression_ != nil) {
    [expression_ replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (void)setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)exp {
  GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, exp);
}

- (void)setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)exp
              withGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)vars {
  GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, exp);
  GeogebraCommonKernelArithmeticFunctionNVar_set_fVars_(self, vars);
}

- (GeogebraCommonKernelArithmeticFunctionNVar *)getFunction {
  return self;
}

- (IOSObjectArray *)getFunctionVariables {
  return fVars_;
}

- (NSString *)getVarStringWithInt:(jint)i
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(fVars_), i))) toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (jint)getVarNumber {
  return GeogebraCommonKernelArithmeticFunctionNVar_getVarNumber(self);
}

- (NSString *)getVarStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  return [((JavaLangStringBuilder *) nil_chk([self appendVarStringWithJavaLangStringBuilder:sb withGeogebraCommonKernelStringTemplate:tpl])) description];
}

- (JavaLangStringBuilder *)appendVarStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                             withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fVars_))->size_ - 1; i++) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(fVars_, i))) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithNSString:@", "];
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(fVars_, fVars_->size_ - 1))) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
  return sb;
}

- (jboolean)initFunction {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fVars_))->size_; i++) {
    GeogebraCommonKernelArithmeticFunctionVariable *fVar = IOSObjectArray_Get(fVars_, i);
    GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *s = GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_getReplacerWithGeogebraCommonKernelArithmeticFunctionVariable_(fVar);
    [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) traverseWithGeogebraCommonKernelArithmeticTraversing:s];
    jint replacements = [((GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *) nil_chk(s)) getReplacements];
    isConstantFunction__ = (isConstantFunction__ && replacements == 0);
  }
  [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) resolveVariables];
  [expression_ simplifyConstantIntegers];
  id<GeogebraCommonKernelArithmeticExpressionValue> ev;
  @try {
    ev = [expression_ evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  }
  @catch (GeogebraCommonMainMyError *err) {
    @try {
      GeogebraCommonKernelArithmeticFunctionNVar_fixStructure(self);
      ev = [expression_ evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    }
    @catch (JavaLangThrowable *th) {
      @throw err;
    }
  }
  return GeogebraCommonKernelArithmeticFunctionNVar_initTypeWithGeogebraCommonKernelArithmeticExpressionValue_(self, ev);
}

- (void)fixStructure {
  GeogebraCommonKernelArithmeticFunctionNVar_fixStructure(self);
}

- (jboolean)initTypeWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  return GeogebraCommonKernelArithmeticFunctionNVar_initTypeWithGeogebraCommonKernelArithmeticExpressionValue_(self, ev);
}

- (jboolean)isBooleanFunction {
  return isBooleanFunction__;
}

- (jboolean)isConstantFunction {
  if (isConstantFunction__) return YES;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fVars_))->size_; i++) if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) containsWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(fVars_, i)]) return NO;
  return YES;
}

- (jboolean)isConstant {
  return NO;
}

- (jboolean)isLeaf {
  return YES;
}

- (jdouble)evaluateWithDoubleArray:(IOSDoubleArray *)vals {
  return GeogebraCommonKernelArithmeticFunctionNVar_evaluateWithDoubleArray_(self, vals);
}

- (jboolean)evaluateBooleanWithDoubleArray:(IOSDoubleArray *)vals {
  return GeogebraCommonKernelArithmeticFunctionNVar_evaluateBooleanWithDoubleArray_(self, vals);
}

- (JavaUtilHashSet *)getVariables {
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) getVariables];
}

- (IOSObjectArray *)getGeoElementVariables {
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) getGeoElementVariables];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toOutputValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) toOutputValueStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) toLaTeXStringWithBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl];
}

- (GeogebraCommonKernelArithmeticFunctionNVar *)evalCasCommandWithNSString:(NSString *)ggbCasCmd
                                                               withBoolean:(jboolean)symb
                     withGeogebraCommonKernelArithmeticMyArbitraryConstant:(GeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(80) autorelease];
  jboolean useCaching = YES;
  jboolean symbolic = symb;
  symbolic = (symbolic && ![((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) containsGeoFunctionNVar]);
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_prefixedDefault_();
  if (casEvalExpression_ != expression_ || (symbolic && casEvalStringSymbolic_ == nil)) {
    GeogebraCommonKernelArithmeticFunctionNVar_set_casEvalExpression_(self, expression_);
    if (symbolic) {
      GeogebraCommonKernelArithmeticFunctionNVar_set_casEvalStringSymbolic_(self, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) getCASstringWithGeogebraCommonKernelStringTemplate:tpl withBoolean:YES]);
    }
    useCaching = (symbolic && ![((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) containsCasEvaluableFunction]);
  }
  NSString *expString = symbolic ? casEvalStringSymbolic_ : [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) getCASstringWithGeogebraCommonKernelStringTemplate:tpl withBoolean:NO];
  NSString *casString = [((NSString *) nil_chk(ggbCasCmd)) replaceAll:@"%" withReplacement:expString];
  GeogebraCommonKernelArithmeticFunctionNVar *resultFun = nil;
  @try {
    if (useCaching) {
      resultFun = GeogebraCommonKernelArithmeticFunctionNVar_lookupCasEvalMapWithNSString_(self, casString);
      if (resultFun != nil) {
        return resultFun;
      }
    }
    GeogebraCommonMainApp_debugWithNSString_(casString);
    NSString *result = symbolic ? [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) evaluateGeoGebraCASWithNSString:casString withGeogebraCommonKernelArithmeticMyArbitraryConstant:arbconst] : [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) evaluateCachedGeoGebraCASWithNSString:casString withGeogebraCommonKernelArithmeticMyArbitraryConstant:arbconst];
    [sb setLengthWithInt:0];
    [sb appendWithNSString:@"f("];
    [sb appendWithNSString:[self getVarStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    [sb appendWithNSString:@") = "];
    [sb appendWithNSString:result];
    if (GeogebraCommonKernelArithmeticFunctionNVar_getVarNumber(self) == 1) {
      resultFun = ([((GeogebraCommonKernelParserParser *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getParser])) parseFunctionWithNSString:[sb description]]);
    }
    else {
      resultFun = ([((GeogebraCommonKernelParserParser *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getParser])) parseFunctionNVarWithNSString:[sb description]]);
    }
    [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(resultFun)) initFunction];
  }
  @catch (JavaLangError *err) {
    [((JavaLangError *) nil_chk(err)) printStackTrace];
    resultFun = nil;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    resultFun = nil;
  }
  @catch (JavaLangThrowable *e) {
    resultFun = nil;
  }
  if (useCaching && resultFun != nil) {
    [((GeogebraCommonUtilMaxSizeHashMap *) nil_chk(GeogebraCommonKernelArithmeticFunctionNVar_getCasEvalMap(self))) putWithId:casString withId:resultFun];
  }
  return resultFun;
}

- (GeogebraCommonUtilMaxSizeHashMap *)getCasEvalMap {
  return GeogebraCommonKernelArithmeticFunctionNVar_getCasEvalMap(self);
}

- (GeogebraCommonKernelArithmeticFunctionNVar *)lookupCasEvalMapWithNSString:(NSString *)casString {
  return GeogebraCommonKernelArithmeticFunctionNVar_lookupCasEvalMapWithNSString_(self, casString);
}

- (void)clearCasEvalMapWithNSString:(NSString *)label {
  if (casEvalMap_ == nil) return;
  [((GeogebraCommonUtilMaxSizeHashMap *) nil_chk(casEvalMap_)) clear];
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)containsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

- (NSString *)getLabelForAssignment {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:[self getLabel]];
  [sb appendWithNSString:@"("];
  [sb appendWithNSString:[self getVarStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  [sb appendWithNSString:@")"];
  return [sb description];
}

- (GeogebraCommonKernelArithmeticIneqTree *)getIneqs {
  return ineqs_;
}

- (jboolean)initIneqsWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)fe
                     withGeogebraCommonKernelArithmeticFunctionalNVar:(id<GeogebraCommonKernelArithmeticFunctionalNVar>)functional {
  if (ineqs_ == nil || fe == GeogebraCommonKernelArithmeticFunctionNVar_getExpression(self)) GeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_ineqs_(self, new_GeogebraCommonKernelArithmeticIneqTree_init());
  jboolean b = GeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, fe, functional, ineqs_, NO);
  [((GeogebraCommonKernelArithmeticIneqTree *) nil_chk(ineqs_)) recomputeSize];
  return b;
}

- (jboolean)initIneqsWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)fe
                     withGeogebraCommonKernelArithmeticFunctionalNVar:(id<GeogebraCommonKernelArithmeticFunctionalNVar>)functional
                           withGeogebraCommonKernelArithmeticIneqTree:(GeogebraCommonKernelArithmeticIneqTree *)tree
                                                          withBoolean:(jboolean)negate {
  return GeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, fe, functional, tree, negate);
}

+ (GeogebraCommonPluginOperationEnum *)adjustOpWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)op
                                                                         withBoolean:(jboolean)negate {
  return GeogebraCommonKernelArithmeticFunctionNVar_adjustOpWithGeogebraCommonPluginOperationEnum_withBoolean_(op, negate);
}

- (jboolean)updateIneqs {
  if (ineqs_ == nil) return NO;
  return [((GeogebraCommonKernelArithmeticIneqTree *) nil_chk(ineqs_)) updateCoef];
}

- (jdouble)evaluateWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)pt {
  if (((IOSObjectArray *) nil_chk(fVars_))->size_ == 1 && [@"y" isEqual:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(fVars_, 0))) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) return GeogebraCommonKernelArithmeticFunctionNVar_evaluateWithDoubleArray_(self, [IOSDoubleArray arrayWithDoubles:(jdouble[]){ ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(pt))->y_ / pt->z_ } count:1]);
  return GeogebraCommonKernelArithmeticFunctionNVar_evaluateWithDoubleArray_(self, [IOSDoubleArray arrayWithDoubles:(jdouble[]){ ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(pt))->x_ / pt->z_, pt->y_ / pt->z_ } count:2]);
}

- (jboolean)evaluateBooleanWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)pt {
  if (((IOSObjectArray *) nil_chk(fVars_))->size_ == 1 && [@"y" isEqual:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(fVars_, 0))) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) return GeogebraCommonKernelArithmeticFunctionNVar_evaluateBooleanWithDoubleArray_(self, [IOSDoubleArray arrayWithDoubles:(jdouble[]){ ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(pt))->y_ / pt->z_ } count:1]);
  return GeogebraCommonKernelArithmeticFunctionNVar_evaluateBooleanWithDoubleArray_(self, [IOSDoubleArray arrayWithDoubles:(jdouble[]){ ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(pt))->x_ / pt->z_, pt->y_ / pt->z_ } count:2]);
}

- (void)translateWithDouble:(jdouble)vx
                 withDouble:(jdouble)vy {
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_(vx)) {
    GeogebraCommonKernelArithmeticFunctionNVar_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_withInt_(self, expression_, vx, 0);
  }
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_(vy)) {
    GeogebraCommonKernelArithmeticFunctionNVar_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_withInt_(self, expression_, vy, 1);
  }
  if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) isLeaf] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expression_ getLeft])) isExpressionNode]) {
    GeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_expression_(self, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelArithmeticExpressionNode_((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([expression_ getLeft], [GeogebraCommonKernelArithmeticExpressionNode class])));
  }
  else {
    GeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_expression_(self, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelArithmeticExpressionNode_(expression_));
  }
}

- (void)translateXWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)en
                                                        withDouble:(jdouble)vx
                                                           withInt:(jint)varNo {
  GeogebraCommonKernelArithmeticFunctionNVar_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_withInt_(self, en, vx, varNo);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)shiftXnodeWithDouble:(jdouble)vx
                                                               withInt:(jint)varNo {
  return GeogebraCommonKernelArithmeticFunctionNVar_shiftXnodeWithDouble_withInt_(self, vx, varNo);
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11 {
  GeogebraCommonKernelArithmeticExpressionNode *dummy = [new_GeogebraCommonKernelArithmeticExpressionNode_init() autorelease];
  [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(fVars_), 0) withGeogebraCommonKernelArithmeticExpressionValue:dummy])) wrap];
  GeogebraCommonKernelArithmeticMyDouble *ma00 = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, a00) autorelease];
  GeogebraCommonKernelArithmeticMyDouble *ma01 = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, a01) autorelease];
  GeogebraCommonKernelArithmeticMyDouble *ma10 = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, a10) autorelease];
  GeogebraCommonKernelArithmeticMyDouble *ma11 = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, a11) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *newX = [((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ma00, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 0)) autorelease]) plusWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ma01, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 1)) autorelease]];
  GeogebraCommonKernelArithmeticExpressionNode *newY = [((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ma10, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 0)) autorelease]) plusWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ma11, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 1)) autorelease]];
  GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expression_ replaceWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(fVars_, 1) withGeogebraCommonKernelArithmeticExpressionValue:newY])) wrap]);
  GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:dummy withGeogebraCommonKernelArithmeticExpressionValue:newX])) wrap]);
  [self initIneqsWithGeogebraCommonKernelArithmeticExpressionNode:expression_ withGeogebraCommonKernelArithmeticFunctionalNVar:self];
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  GeogebraCommonKernelArithmeticExpressionNode *dummy = [new_GeogebraCommonKernelArithmeticExpressionNode_init() autorelease];
  GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(fVars_), 0) withGeogebraCommonKernelArithmeticExpressionValue:dummy])) wrap]);
  IOSObjectArray *b = GeogebraCommonUtilMyMath_adjointWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(a00, a01, a02, a10, a11, a12, a20, a21, a22);
  IOSObjectArray *mbTrans = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ 3, 3 } type:GeogebraCommonKernelArithmeticMyDouble_class_()];
  for (jint i = 0; i < 3; i++) for (jint j = 0; j < 3; j++) IOSObjectArray_SetAndConsume(nil_chk(IOSObjectArray_Get(mbTrans, i)), j, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(b), j)), i)));
  GeogebraCommonKernelArithmeticExpressionNode *newZ = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 2)), 0), GeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 0)) autorelease]) plusWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 2)), 1), GeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 1)) autorelease]])) plusWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 2)), 2)];
  GeogebraCommonKernelArithmeticExpressionNode *newX = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 0)), 0), GeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 0)) autorelease]) plusWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 0)), 1), GeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 1)) autorelease]])) plusWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 0)), 2)];
  GeogebraCommonKernelArithmeticExpressionNode *newY = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 1)), 0), GeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 0)) autorelease]) plusWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 1)), 1), GeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(fVars_, 1)) autorelease]])) plusWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mbTrans, 1)), 2)];
  GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(fVars_, 1) withGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(newY)) divideWithGeogebraCommonKernelArithmeticExpressionValue:newZ]])) wrap]);
  GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:dummy withGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(newX)) divideWithGeogebraCommonKernelArithmeticExpressionValue:newZ]])) wrap]);
  [self initIneqsWithGeogebraCommonKernelArithmeticExpressionNode:expression_ withGeogebraCommonKernelArithmeticFunctionalNVar:self];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)traverseWithGeogebraCommonKernelArithmeticTraversing:(id<GeogebraCommonKernelArithmeticTraversing>)t {
  id<GeogebraCommonKernelArithmeticExpressionValue> ev = [((id<GeogebraCommonKernelArithmeticTraversing>) nil_chk(t)) processWithGeogebraCommonKernelArithmeticExpressionValue:self];
  if (ev != self) return ev;
  GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) traverseWithGeogebraCommonKernelArithmeticTraversing:t])) wrap]);
  return self;
}

- (jboolean)inspectWithGeogebraCommonKernelArithmeticInspecting:(id<GeogebraCommonKernelArithmeticInspecting>)t {
  return [((id<GeogebraCommonKernelArithmeticInspecting>) nil_chk(t)) checkWithGeogebraCommonKernelArithmeticExpressionValue:self] || [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) inspectWithGeogebraCommonKernelArithmeticInspecting:t];
}

- (GeogebraCommonKernelArithmeticExpressionNode *)getFunctionExpression {
  return expression_;
}

- (jboolean)isDefined {
  return YES;
}

- (GeogebraCommonKernelArithmeticFunctionNVar *)getDerivativeNoCASWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                                             withInt:(jint)n {
  GeogebraCommonKernelArithmeticExpressionNode *expDeriv = expression_;
  for (jint i = 0; i < n; i++) {
    expDeriv = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expDeriv)) derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:fv];
  }
  [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expDeriv)) simplifyConstantIntegers];
  return [new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_(expDeriv, fVars_) autorelease];
}

- (GeogebraCommonKernelArithmeticFunctionNVar *)getIntegralNoCASWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv {
  return [new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) integralWithGeogebraCommonKernelArithmeticFunctionVariable:fv], fVars_) autorelease];
}

- (void)fillVariablesWithGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)oldVars {
  if (oldVars == nil) {
    return;
  }
  jint length = ((IOSObjectArray *) nil_chk(oldVars))->size_;
  if (((IOSObjectArray *) nil_chk(fVars_))->size_ >= length) {
    return;
  }
  IOSObjectArray *newVars = [IOSObjectArray arrayWithLength:length type:GeogebraCommonKernelArithmeticFunctionVariable_class_()];
  JavaUtilTreeSet *usedNames = [new_JavaUtilTreeSet_init() autorelease];
  for (jint i = 0; i < fVars_->size_; i++) {
    IOSObjectArray_Set(newVars, i, IOSObjectArray_Get(fVars_, i));
    [usedNames addWithId:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(fVars_, i))) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  jint pos = fVars_->size_;
  for (jint i = 0; i < oldVars->size_ && pos < length; i++) {
    if (![usedNames containsWithId:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(oldVars, i))) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
      IOSObjectArray_Set(newVars, pos, IOSObjectArray_Get(oldVars, i));
      pos++;
    }
  }
  GeogebraCommonKernelArithmeticFunctionNVar_set_fVars_(self, newVars);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self) autorelease];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv {
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:fv];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)integralWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv {
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) integralWithGeogebraCommonKernelArithmeticFunctionVariable:fv];
}

- (void)dealloc {
  RELEASE_(expression_);
  RELEASE_(fVars_);
  RELEASE_(ineqs_);
  RELEASE_(kernel_);
  RELEASE_(casEvalExpression_);
  RELEASE_(casEvalStringSymbolic_);
  RELEASE_(casEvalMap_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticFunctionNVar class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticFunctionNVar_undecided_, nil, new_JavaUtilArrayList_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticFunctionNVar)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelArithmeticExpressionNode:", "FunctionNVar", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticFunctionVariableArray:", "FunctionNVar", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelKernel:", "FunctionNVar", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelArithmeticFunctionNVar:withGeogebraCommonKernelKernel:", "FunctionNVar", NULL, 0x1, NULL, NULL },
    { "isFunctionVariableWithNSString:", "isFunctionVariable", "Z", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "deepCopyWithGeogebraCommonKernelKernel:", "deepCopy", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getExpression", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:", "replaceChildrenByValues", "V", 0x1, NULL, NULL },
    { "setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:", "setExpression", "V", 0x1, NULL, NULL },
    { "setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticFunctionVariableArray:", "setExpression", "V", 0x1, NULL, NULL },
    { "getFunction", NULL, "Lgeogebra.common.kernel.arithmetic.FunctionNVar;", 0x1, NULL, NULL },
    { "getFunctionVariables", NULL, "[Lgeogebra.common.kernel.arithmetic.FunctionVariable;", 0x1, NULL, NULL },
    { "getVarStringWithInt:withGeogebraCommonKernelStringTemplate:", "getVarString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getVarNumber", NULL, "I", 0x11, NULL, NULL },
    { "getVarStringWithGeogebraCommonKernelStringTemplate:", "getVarString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "appendVarStringWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "appendVarString", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "initFunction", NULL, "Z", 0x1, NULL, NULL },
    { "fixStructure", NULL, "V", 0x2, NULL, NULL },
    { "initTypeWithGeogebraCommonKernelArithmeticExpressionValue:", "initType", "Z", 0x2, NULL, NULL },
    { "isBooleanFunction", NULL, "Z", 0x11, NULL, NULL },
    { "isConstantFunction", NULL, "Z", 0x11, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "evaluateWithDoubleArray:", "evaluate", "D", 0x11, NULL, NULL },
    { "evaluateBooleanWithDoubleArray:", "evaluateBoolean", "Z", 0x11, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "getGeoElementVariables", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toOutputValueStringWithGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toLaTeXStringWithBoolean:withGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "evalCasCommandWithNSString:withBoolean:withGeogebraCommonKernelArithmeticMyArbitraryConstant:", "evalCasCommand", "Lgeogebra.common.kernel.arithmetic.FunctionNVar;", 0x11, NULL, NULL },
    { "getCasEvalMap", NULL, "Lgeogebra.common.util.MaxSizeHashMap;", 0x2, NULL, NULL },
    { "lookupCasEvalMapWithNSString:", "lookupCasEvalMap", "Lgeogebra.common.kernel.arithmetic.FunctionNVar;", 0x2, NULL, NULL },
    { "clearCasEvalMapWithNSString:", "clearCasEvalMap", "V", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "containsWithGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "getLabelForAssignment", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getIneqs", NULL, "Lgeogebra.common.kernel.arithmetic.IneqTree;", 0x1, NULL, NULL },
    { "initIneqsWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticFunctionalNVar:", "initIneqs", "Z", 0x1, NULL, NULL },
    { "initIneqsWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticFunctionalNVar:withGeogebraCommonKernelArithmeticIneqTree:withBoolean:", "initIneqs", "Z", 0x2, NULL, NULL },
    { "adjustOpWithGeogebraCommonPluginOperationEnum:withBoolean:", "adjustOp", "Lgeogebra.common.plugin.Operation;", 0xa, NULL, NULL },
    { "updateIneqs", NULL, "Z", 0x1, NULL, NULL },
    { "evaluateWithGeogebraCommonKernelGeosGeoPoint:", "evaluate", "D", 0x1, NULL, NULL },
    { "evaluateBooleanWithGeogebraCommonKernelGeosGeoPoint:", "evaluateBoolean", "Z", 0x1, NULL, NULL },
    { "translateWithDouble:withDouble:", "translate", "V", 0x1, NULL, NULL },
    { "translateXWithGeogebraCommonKernelArithmeticExpressionNode:withDouble:withInt:", "translateX", "V", 0x2, NULL, NULL },
    { "shiftXnodeWithDouble:withInt:", "shiftXnode", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "traverseWithGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "inspectWithGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x1, NULL, NULL },
    { "getFunctionExpression", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "getDerivativeNoCASWithGeogebraCommonKernelArithmeticFunctionVariable:withInt:", "getDerivativeNoCAS", "Lgeogebra.common.kernel.arithmetic.FunctionNVar;", 0x1, NULL, NULL },
    { "getIntegralNoCASWithGeogebraCommonKernelArithmeticFunctionVariable:", "getIntegralNoCAS", "Lgeogebra.common.kernel.arithmetic.FunctionNVar;", 0x1, NULL, NULL },
    { "fillVariablesWithGeogebraCommonKernelArithmeticFunctionVariableArray:", "fillVariables", "V", 0x1, NULL, NULL },
    { "wrap", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:", "derivative", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "integralWithGeogebraCommonKernelArithmeticFunctionVariable:", "integral", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "expression_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "fVars_", NULL, 0x4, "[Lgeogebra.common.kernel.arithmetic.FunctionVariable;", NULL, NULL,  },
    { "ineqs_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.IneqTree;", NULL, NULL,  },
    { "isBooleanFunction__", "isBooleanFunction", 0x4, "Z", NULL, NULL,  },
    { "isConstantFunction__", "isConstantFunction", 0x4, "Z", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "undecided_", NULL, 0xa, "Ljava.util.ArrayList;", &GeogebraCommonKernelArithmeticFunctionNVar_undecided_, "Ljava/util/ArrayList<Lgeogebra/common/kernel/arithmetic/ExpressionNode;>;",  },
    { "casEvalExpression_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "casEvalStringSymbolic_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "MAX_CAS_EVAL_MAP_SIZE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelArithmeticFunctionNVar_MAX_CAS_EVAL_MAP_SIZE },
    { "casEvalMap_", NULL, 0x2, "Lgeogebra.common.util.MaxSizeHashMap;", NULL, "Lgeogebra/common/util/MaxSizeHashMap<Ljava/lang/String;Lgeogebra/common/kernel/arithmetic/FunctionNVar;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticFunctionNVar = { 2, "FunctionNVar", "geogebra.common.kernel.arithmetic", NULL, 0x1, 62, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticFunctionNVar;
}

@end

void GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelArithmeticFunctionNVar *self, GeogebraCommonKernelArithmeticExpressionNode *expression) {
  GeogebraCommonKernelArithmeticValidExpression_init(self);
  self->isBooleanFunction__ = NO;
  self->isConstantFunction__ = NO;
  GeogebraCommonKernelArithmeticFunctionNVar_set_kernel_(self, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression)) getKernel]);
  GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, expression);
}

GeogebraCommonKernelArithmeticFunctionNVar *new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelArithmeticExpressionNode *expression) {
  GeogebraCommonKernelArithmeticFunctionNVar *self = [GeogebraCommonKernelArithmeticFunctionNVar alloc];
  GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_(self, expression);
  return self;
}

void GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_(GeogebraCommonKernelArithmeticFunctionNVar *self, GeogebraCommonKernelArithmeticExpressionNode *exp, IOSObjectArray *fVars) {
  GeogebraCommonKernelArithmeticValidExpression_init(self);
  self->isBooleanFunction__ = NO;
  self->isConstantFunction__ = NO;
  GeogebraCommonKernelArithmeticFunctionNVar_set_kernel_(self, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) getKernel]);
  GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, exp);
  GeogebraCommonKernelArithmeticFunctionNVar_set_fVars_(self, fVars);
}

GeogebraCommonKernelArithmeticFunctionNVar *new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_(GeogebraCommonKernelArithmeticExpressionNode *exp, IOSObjectArray *fVars) {
  GeogebraCommonKernelArithmeticFunctionNVar *self = [GeogebraCommonKernelArithmeticFunctionNVar alloc];
  GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_(self, exp, fVars);
  return self;
}

void GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticFunctionNVar *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticValidExpression_init(self);
  self->isBooleanFunction__ = NO;
  self->isConstantFunction__ = NO;
  GeogebraCommonKernelArithmeticFunctionNVar_set_kernel_(self, kernel);
}

GeogebraCommonKernelArithmeticFunctionNVar *new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticFunctionNVar *self = [GeogebraCommonKernelArithmeticFunctionNVar alloc];
  GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticFunctionNVar_withGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticFunctionNVar *self, GeogebraCommonKernelArithmeticFunctionNVar *f, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticValidExpression_init(self);
  self->isBooleanFunction__ = NO;
  self->isConstantFunction__ = NO;
  GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(f))->expression_)) getCopyWithGeogebraCommonKernelKernel:kernel]);
  GeogebraCommonKernelArithmeticFunctionNVar_set_fVars_(self, f->fVars_);
  self->isBooleanFunction__ = f->isBooleanFunction__;
  self->isConstantFunction__ = f->isConstantFunction__;
  GeogebraCommonKernelArithmeticFunctionNVar_set_kernel_(self, kernel);
}

GeogebraCommonKernelArithmeticFunctionNVar *new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticFunctionNVar_withGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticFunctionNVar *f, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticFunctionNVar *self = [GeogebraCommonKernelArithmeticFunctionNVar alloc];
  GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticFunctionNVar_withGeogebraCommonKernelKernel_(self, f, kernel);
  return self;
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelArithmeticFunctionNVar_getExpression(GeogebraCommonKernelArithmeticFunctionNVar *self) {
  return self->expression_;
}

jint GeogebraCommonKernelArithmeticFunctionNVar_getVarNumber(GeogebraCommonKernelArithmeticFunctionNVar *self) {
  return ((IOSObjectArray *) nil_chk(self->fVars_))->size_;
}

void GeogebraCommonKernelArithmeticFunctionNVar_fixStructure(GeogebraCommonKernelArithmeticFunctionNVar *self) {
  GeogebraCommonKernelArithmeticFunctionVariable *xVar = nil, *yVar = nil, *zVar = nil;
  {
    IOSObjectArray *a__ = self->fVars_;
    GeogebraCommonKernelArithmeticFunctionVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    GeogebraCommonKernelArithmeticFunctionVariable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      GeogebraCommonKernelArithmeticFunctionVariable *fVar = *b__++;
      if ([@"x" isEqual:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fVar)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) xVar = fVar;
      else if ([@"y" isEqual:[fVar toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) yVar = fVar;
      else if ([@"z" isEqual:[fVar toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) zVar = fVar;
    }
  }
  [((JavaUtilArrayList *) nil_chk(GeogebraCommonKernelArithmeticFunctionNVar_undecided_)) clear];
  [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) replaceXYZnodesWithGeogebraCommonKernelArithmeticFunctionVariable:xVar withGeogebraCommonKernelArithmeticFunctionVariable:yVar withGeogebraCommonKernelArithmeticFunctionVariable:zVar withJavaUtilArrayList:GeogebraCommonKernelArithmeticFunctionNVar_undecided_];
  for (GeogebraCommonKernelArithmeticExpressionNode * __strong en in GeogebraCommonKernelArithmeticFunctionNVar_undecided_) [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) setOperationWithGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_MULTIPLY()];
  [GeogebraCommonKernelArithmeticFunctionNVar_undecided_ clear];
}

jboolean GeogebraCommonKernelArithmeticFunctionNVar_initTypeWithGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmeticFunctionNVar *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev) {
  if ([GeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:ev]) {
    self->isBooleanFunction__ = YES;
  }
  else if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:ev]) {
    self->isBooleanFunction__ = NO;
  }
  else if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticFunctionNVar class]]) {
    GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, GeogebraCommonKernelArithmeticFunctionNVar_getExpression(nil_chk(((GeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(ev, [GeogebraCommonKernelArithmeticFunctionNVar class])))));
    GeogebraCommonKernelArithmeticFunctionNVar_set_fVars_(self, [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(((GeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(ev, [GeogebraCommonKernelArithmeticFunctionNVar class])))) getFunctionVariables]);
  }
  else if ([ev isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
    GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoFunction class])))) getFunctionExpression]);
    GeogebraCommonKernelArithmeticFunctionNVar_set_fVars_(self, [((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoFunction class])))) getFunction])) getFunctionVariables]);
  }
  else {
    return NO;
  }
  return YES;
}

jdouble GeogebraCommonKernelArithmeticFunctionNVar_evaluateWithDoubleArray_(GeogebraCommonKernelArithmeticFunctionNVar *self, IOSDoubleArray *vals) {
  if (self->isBooleanFunction__) {
    return GeogebraCommonKernelArithmeticFunctionNVar_evaluateBooleanWithDoubleArray_(self, vals) ? 1 : 0;
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->fVars_))->size_; i++) {
    [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(self->fVars_, i))) setWithDouble:IOSDoubleArray_Get(nil_chk(vals), i)];
  }
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) evaluateDouble];
}

jboolean GeogebraCommonKernelArithmeticFunctionNVar_evaluateBooleanWithDoubleArray_(GeogebraCommonKernelArithmeticFunctionNVar *self, IOSDoubleArray *vals) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->fVars_))->size_; i++) [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(self->fVars_, i))) setWithDouble:IOSDoubleArray_Get(nil_chk(vals), i)];
  return [((id<GeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<GeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @protocol(GeogebraCommonKernelArithmeticBooleanValue))))) getBoolean];
}

GeogebraCommonUtilMaxSizeHashMap *GeogebraCommonKernelArithmeticFunctionNVar_getCasEvalMap(GeogebraCommonKernelArithmeticFunctionNVar *self) {
  if (self->casEvalMap_ == nil) {
    GeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_casEvalMap_(self, new_GeogebraCommonUtilMaxSizeHashMap_initWithInt_(GeogebraCommonKernelArithmeticFunctionNVar_MAX_CAS_EVAL_MAP_SIZE));
  }
  return self->casEvalMap_;
}

GeogebraCommonKernelArithmeticFunctionNVar *GeogebraCommonKernelArithmeticFunctionNVar_lookupCasEvalMapWithNSString_(GeogebraCommonKernelArithmeticFunctionNVar *self, NSString *casString) {
  if (self->casEvalMap_ == nil) {
    return nil;
  }
  return [((GeogebraCommonUtilMaxSizeHashMap *) nil_chk(self->casEvalMap_)) getWithId:casString];
}

jboolean GeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticIneqTree_withBoolean_(GeogebraCommonKernelArithmeticFunctionNVar *self, GeogebraCommonKernelArithmeticExpressionNode *fe, id<GeogebraCommonKernelArithmeticFunctionalNVar> functional, GeogebraCommonKernelArithmeticIneqTree *tree, jboolean negate) {
  GeogebraCommonPluginOperationEnum *op = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(fe)) getOperation];
  GeogebraCommonKernelArithmeticExpressionNode *leftTree = [fe getLeftTree];
  GeogebraCommonKernelArithmeticExpressionNode *rightTree = [fe getRightTree];
  if ([((GeogebraCommonPluginOperationEnum *) nil_chk(op)) isEqual:GeogebraCommonPluginOperationEnum_get_GREATER()] || [op isEqual:GeogebraCommonPluginOperationEnum_get_GREATER_EQUAL()] || [op isEqual:GeogebraCommonPluginOperationEnum_get_LESS()] || [op isEqual:GeogebraCommonPluginOperationEnum_get_LESS_EQUAL()]) {
    GeogebraCommonKernelArithmeticInequality *newIneq = [new_GeogebraCommonKernelArithmeticInequality_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticFunctionVariableArray_withGeogebraCommonKernelArithmeticFunctionalNVar_(self->kernel_, leftTree, rightTree, GeogebraCommonKernelArithmeticFunctionNVar_adjustOpWithGeogebraCommonPluginOperationEnum_withBoolean_(op, negate), [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([self getFunction])) getFunctionVariables], functional) autorelease];
    if ([newIneq getType] != GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_INVALID()) {
      if ([newIneq getType] != GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_1VAR_X() && [newIneq getType] != GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_1VAR_Y()) [((GeogebraCommonKernelGeosGeoElement *) nil_chk([newIneq getBorder])) setInverseFillWithBoolean:[newIneq isAboveBorder]];
      [((GeogebraCommonKernelArithmeticIneqTree *) nil_chk(tree)) setIneqWithGeogebraCommonKernelArithmeticInequality:newIneq];
    }
    return [newIneq getType] != GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_INVALID();
  }
  else if ([op isEqual:GeogebraCommonPluginOperationEnum_get_AND()] || [op isEqual:GeogebraCommonPluginOperationEnum_get_AND_INTERVAL()] || [op isEqual:GeogebraCommonPluginOperationEnum_get_OR()] || [op isEqual:GeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()] || [op isEqual:GeogebraCommonPluginOperationEnum_get_NOT_EQUAL()]) {
    [((GeogebraCommonKernelArithmeticIneqTree *) nil_chk(tree)) setOperationWithGeogebraCommonPluginOperationEnum:GeogebraCommonKernelArithmeticFunctionNVar_adjustOpWithGeogebraCommonPluginOperationEnum_withBoolean_(op, negate)];
    [tree setLeftWithGeogebraCommonKernelArithmeticIneqTree:[new_GeogebraCommonKernelArithmeticIneqTree_init() autorelease]];
    [tree setRightWithGeogebraCommonKernelArithmeticIneqTree:[new_GeogebraCommonKernelArithmeticIneqTree_init() autorelease]];
    return GeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, leftTree, functional, [tree getLeft], negate) && GeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, rightTree, functional, [tree getRight], negate);
  }
  else if ([op isEqual:GeogebraCommonPluginOperationEnum_get_NOT()]) {
    return GeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, leftTree, functional, tree, !negate);
  }
  else if ([op isEqual:GeogebraCommonPluginOperationEnum_get_IMPLICATION()]) {
    [((GeogebraCommonKernelArithmeticIneqTree *) nil_chk(tree)) setOperationWithGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_OR()];
    [tree setLeftWithGeogebraCommonKernelArithmeticIneqTree:[new_GeogebraCommonKernelArithmeticIneqTree_init() autorelease]];
    [tree setRightWithGeogebraCommonKernelArithmeticIneqTree:[new_GeogebraCommonKernelArithmeticIneqTree_init() autorelease]];
    return GeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, leftTree, functional, [tree getLeft], !negate) && GeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, rightTree, functional, [tree getRight], negate);
  }
  else if ([op isEqual:GeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR()]) {
    id<GeogebraCommonKernelArithmeticFunctionalNVar> nv = (id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(leftTree)) getLeft], @protocol(GeogebraCommonKernelArithmeticFunctionalNVar));
    GeogebraCommonKernelArithmeticExpressionNode *subExpr = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(GeogebraCommonKernelArithmeticFunctionNVar_getExpression(nil_chk([((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(nv)) getFunction])))) getCopyWithGeogebraCommonKernelKernel:self->kernel_];
    IOSObjectArray *subVars = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([nv getFunction])) getFunctionVariables];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subVars))->size_; i++) [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(subExpr)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(subVars, i) withGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticMyList *) nil_chk(((GeogebraCommonKernelArithmeticMyList *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rightTree)) getLeft], [GeogebraCommonKernelArithmeticMyList class])))) getListElementWithInt:i]];
    return GeogebraCommonKernelArithmeticFunctionNVar_initIneqsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticIneqTree_withBoolean_(self, subExpr, functional, tree, negate);
  }
  else return NO;
}

GeogebraCommonPluginOperationEnum *GeogebraCommonKernelArithmeticFunctionNVar_adjustOpWithGeogebraCommonPluginOperationEnum_withBoolean_(GeogebraCommonPluginOperationEnum *op, jboolean negate) {
  GeogebraCommonKernelArithmeticFunctionNVar_initialize();
  if (negate == NO) return op;
  switch ([op ordinal]) {
    case GeogebraCommonPluginOperation_AND:
    return GeogebraCommonPluginOperationEnum_get_OR();
    case GeogebraCommonPluginOperation_OR:
    return GeogebraCommonPluginOperationEnum_get_AND();
    case GeogebraCommonPluginOperation_GREATER_EQUAL:
    return GeogebraCommonPluginOperationEnum_get_LESS();
    case GeogebraCommonPluginOperation_GREATER:
    return GeogebraCommonPluginOperationEnum_get_LESS_EQUAL();
    case GeogebraCommonPluginOperation_LESS_EQUAL:
    return GeogebraCommonPluginOperationEnum_get_GREATER();
    case GeogebraCommonPluginOperation_LESS:
    return GeogebraCommonPluginOperationEnum_get_GREATER_EQUAL();
    case GeogebraCommonPluginOperation_EQUAL_BOOLEAN:
    return GeogebraCommonPluginOperationEnum_get_NOT_EQUAL();
    case GeogebraCommonPluginOperation_NOT_EQUAL:
    return GeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN();
  }
  return GeogebraCommonPluginOperationEnum_get_NO_OPERATION();
}

void GeogebraCommonKernelArithmeticFunctionNVar_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_withInt_(GeogebraCommonKernelArithmeticFunctionNVar *self, GeogebraCommonKernelArithmeticExpressionNode *en, jdouble vx, jint varNo) {
  id<GeogebraCommonKernelArithmeticExpressionValue> left = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getLeft];
  id<GeogebraCommonKernelArithmeticExpressionValue> right = [en getRight];
  if (left == IOSObjectArray_Get(nil_chk(self->fVars_), varNo)) {
    @try {
      GeogebraCommonKernelArithmeticMyDouble *num = (GeogebraCommonKernelArithmeticMyDouble *) check_class_cast(right, [GeogebraCommonKernelArithmeticMyDouble class]);
      jdouble temp;
      switch ([[en getOperation] ordinal]) {
        case GeogebraCommonPluginOperation_PLUS:
        temp = [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble] - vx;
        if (GeogebraCommonKernelKernel_isZeroWithDouble_(temp)) {
          GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:en withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fVars_, varNo)])) wrap]);
        }
        else if (temp < 0) {
          [en setOperationWithGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_MINUS()];
          [num setWithDouble:-temp];
        }
        else {
          [num setWithDouble:temp];
        }
        return;
        case GeogebraCommonPluginOperation_MINUS:
        temp = [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble] + vx;
        if (GeogebraCommonKernelKernel_isZeroWithDouble_(temp)) {
          GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:en withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fVars_, varNo)])) wrap]);
        }
        else if (temp < 0) {
          [en setOperationWithGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_PLUS()];
          [num setWithDouble:-temp];
        }
        else {
          [num setWithDouble:temp];
        }
        return;
        default:
        [en setLeftWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelArithmeticFunctionNVar_shiftXnodeWithDouble_withInt_(self, vx, varNo)];
      }
    }
    @catch (JavaLangException *e) {
      [en setLeftWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelArithmeticFunctionNVar_shiftXnodeWithDouble_withInt_(self, vx, varNo)];
    }
  }
  else if ([left isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
    GeogebraCommonKernelArithmeticFunctionNVar_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_withInt_(self, (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class]), vx, varNo);
  }
  if (right == IOSObjectArray_Get(self->fVars_, varNo)) {
    [en setRightWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelArithmeticFunctionNVar_shiftXnodeWithDouble_withInt_(self, vx, varNo)];
  }
  else if ([right isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
    GeogebraCommonKernelArithmeticFunctionNVar_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_withInt_(self, (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class]), vx, varNo);
  }
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelArithmeticFunctionNVar_shiftXnodeWithDouble_withInt_(GeogebraCommonKernelArithmeticFunctionNVar *self, jdouble vx, jint varNo) {
  GeogebraCommonKernelArithmeticExpressionNode *node;
  if (vx > 0) {
    node = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, IOSObjectArray_Get(nil_chk(self->fVars_), varNo), GeogebraCommonPluginOperationEnum_get_MINUS(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, vx) autorelease]) autorelease];
  }
  else {
    node = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, IOSObjectArray_Get(nil_chk(self->fVars_), varNo), GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, -vx) autorelease]) autorelease];
  }
  return node;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticFunctionNVar)
