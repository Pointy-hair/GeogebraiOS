//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/transform/TransformRotate3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoRotate3DLine.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoRotate3DPointOrientation.h"
#include "geogebra/common/geogebra3D/kernel3D/transform/TransformRotate3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/TransformRotate.h"
#include "geogebra/common/kernel/algos/AlgoTransformation.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@interface GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D () {
 @public
  id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation_;
  id<GeogebraCommonKernelKernelNDGeoLineND> line_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D, orientation_, id<GeogebraCommonKernelKernelNDGeoDirectionND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D, line_, id<GeogebraCommonKernelKernelNDGeoLineND>)

@implementation GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)angle
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)center
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, angle, center, orientation);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)angle
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, angle, line);
  return self;
}

- (GeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelAlgosAlgoTransformation *algo = nil;
  if (line_ == nil) algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, geo, angle_, center_, orientation_) autorelease];
  else algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, geo, angle_, line_) autorelease];
  return algo;
}

- (void)dealloc {
  RELEASE_(orientation_);
  RELEASE_(line_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "TransformRotate3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelKernelNDGeoLineND:", "TransformRotate3D", NULL, 0x1, NULL, NULL },
    { "getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:", "getTransformAlgo", "Lgeogebra.common.kernel.algos.AlgoTransformation;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "orientation_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoDirectionND;", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D = { 2, "TransformRotate3D", "geogebra.common.geogebra3D.kernel3D.transform", NULL, 0x1, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelGeosGeoNumberValue> angle, id<GeogebraCommonKernelKernelNDGeoPointND> center, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonKernelTransformRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, angle, center);
  GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D_set_orientation_(self, orientation);
}

GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D *new_GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelGeosGeoNumberValue> angle, id<GeogebraCommonKernelKernelNDGeoPointND> center, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D *self = [GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D alloc];
  GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, angle, center, orientation);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelGeosGeoNumberValue> angle, id<GeogebraCommonKernelKernelNDGeoLineND> line) {
  GeogebraCommonKernelTransformRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, angle);
  GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D_set_line_(self, line);
}

GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D *new_GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelGeosGeoNumberValue> angle, id<GeogebraCommonKernelKernelNDGeoLineND> line) {
  GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D *self = [GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D alloc];
  GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, angle, line);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DTransformTransformRotate3D)
