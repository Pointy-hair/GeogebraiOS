//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneQuadricLimited.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneConic.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneQuadric.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneQuadricLimited.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConicSection.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/PathNormalizer.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited () {
 @public
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *algoBottom_, *algoTop_;
  IOSObjectArray *bottomP_, *topP_;
  GeogebraCommonKernelMatrixCoords *tmpCoords_;
}

- (jboolean)planeOutsideAxis;

- (void)setSinglePointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2;

- (IOSDoubleArray *)setPartPointsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *)algo
                                                       withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c
                                          withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3DArray:(IOSObjectArray *)points;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited, algoBottom_, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited, algoTop_, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited, bottomP_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited, topP_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited, tmpCoords_, GeogebraCommonKernelMatrixCoords *)

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_planeOutsideAxis(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setSinglePointWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited *self, id<GeogebraCommonKernelKernelNDGeoPointND> p1, id<GeogebraCommonKernelKernelNDGeoPointND> p2);

__attribute__((unused)) static IOSDoubleArray *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setPartPointsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3DArray_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *algo, GeogebraCommonKernelKernelNDGeoConicND *c, IOSObjectArray *points);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
            withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, plane, quadric);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
            withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, label, plane, quadric);
  return self;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)newConicWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoConicSection_initWithGeogebraCommonKernelConstruction_withBoolean_(cons, YES) autorelease];
}

- (void)end {
  jboolean oldSilentMode = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) isSilentMode];
  [kernel_ setSilentModeWithBoolean:YES];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setAndConsume_algoBottom_(self, new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic_initWithGeogebraCommonKernelConstruction_(cons_));
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setAndConsume_algoTop_(self, new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic_initWithGeogebraCommonKernelConstruction_(cons_));
  [kernel_ setSilentModeWithBoolean:oldSilentMode];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setAndConsume_bottomP_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_class_()]);
  for (jint i = 0; i < 2; i++) {
    IOSObjectArray_SetAndConsume(bottomP_, i, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(cons_));
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setAndConsume_topP_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_class_()]);
  for (jint i = 0; i < 2; i++) {
    IOSObjectArray_SetAndConsume(topP_, i, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(cons_));
  }
  [super end];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)getBottom {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(quadric_, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])))) getBottom];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)getTop {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(quadric_, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])))) getTop];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *)getSide {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(quadric_, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])))) getSide];
}

- (void)compute {
  [super compute];
  IOSDoubleArray *bottomParameters = GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setPartPointsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3DArray_(self, algoBottom_, [self getBottom], bottomP_);
  IOSDoubleArray *topParameters = GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setPartPointsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3DArray_(self, algoTop_, [self getTop], topP_);
  switch ([((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(conic_)) getType]) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(bottomParameters), 0))) {
      *IOSDoubleArray_GetRef(bottomParameters, 0) = IOSDoubleArray_Get(nil_chk(topParameters), 0);
      *IOSDoubleArray_GetRef(bottomParameters, 1) = IOSDoubleArray_Get(topParameters, 1);
      *IOSDoubleArray_GetRef(topParameters, 0) = JavaLangDouble_NaN;
    }
    if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(topParameters), 0), IOSDoubleArray_Get(topParameters, 1))) {
      *IOSDoubleArray_GetRef(topParameters, 0) = JavaLangDouble_NaN;
    }
    if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(topParameters, 0))) {
      if (!JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(bottomParameters, 0))) {
        if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(IOSDoubleArray_Get(bottomParameters, 0), IOSDoubleArray_Get(bottomParameters, 1))) {
          if (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_planeOutsideAxis(self)) {
            GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setSinglePointWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, IOSObjectArray_Get(nil_chk(bottomP_), 0), IOSObjectArray_Get(nil_chk(topP_), 0));
          }
          else {
            *IOSDoubleArray_GetRef(bottomParameters, 0) = JavaLangDouble_NaN;
          }
        }
        else {
          jdouble midParameter = (IOSDoubleArray_Get(bottomParameters, 0) + IOSDoubleArray_Get(bottomParameters, 1)) / 2;
          GeogebraCommonKernelPathParameter *pp = [new_GeogebraCommonKernelPathParameter_initWithDouble_(midParameter) autorelease];
          GeogebraCommonKernelMatrixCoords *P = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(3) autorelease];
          [conic_ pathChangedWithoutCheckWithGeogebraCommonKernelMatrixCoords:P withGeogebraCommonKernelPathParameter:pp withBoolean:NO];
          P = [conic_ getPointWithDouble:[P getX] withDouble:[P getY]];
          if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk([self getSide])) isInRegionWithGeogebraCommonKernelMatrixCoords:P]) {
            *IOSDoubleArray_GetRef(topParameters, 0) = midParameter;
          }
          else {
            *IOSDoubleArray_GetRef(topParameters, 0) = midParameter + JavaLangMath_PI;
            if (midParameter < 0) {
              *IOSDoubleArray_GetRef(topParameters, 0) = midParameter + JavaLangMath_PI;
            }
            else {
              *IOSDoubleArray_GetRef(topParameters, 0) = midParameter - JavaLangMath_PI;
            }
          }
          *IOSDoubleArray_GetRef(topParameters, 1) = IOSDoubleArray_Get(topParameters, 0);
        }
      }
      else {
        if (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_planeOutsideAxis(self)) {
          [conic_ setUndefined];
          return;
        }
      }
    }
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(bottomParameters), 0))) {
      if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(topParameters), 0))) {
        [conic_ setUndefined];
      }
      else if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(IOSDoubleArray_Get(topParameters, 0), IOSDoubleArray_Get(topParameters, 1))) {
        GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setSinglePointWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, IOSObjectArray_Get(nil_chk(topP_), 0), IOSObjectArray_Get(topP_, 1));
      }
    }
    else if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(IOSDoubleArray_Get(bottomParameters, 0), IOSDoubleArray_Get(bottomParameters, 1))) {
      GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setSinglePointWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, IOSObjectArray_Get(nil_chk(bottomP_), 0), IOSObjectArray_Get(bottomP_, 1));
    }
    break;
  }
  GeogebraCommonGeogebra3DKernel3DGeosGeoConicSection *cp = (GeogebraCommonGeogebra3DKernel3DGeosGeoConicSection *) check_class_cast(conic_, [GeogebraCommonGeogebra3DKernel3DGeosGeoConicSection class]);
  [cp setParametersWithDouble:IOSDoubleArray_Get(nil_chk(bottomParameters), 0) withDouble:IOSDoubleArray_Get(bottomParameters, 1) withDouble:IOSDoubleArray_Get(nil_chk(topParameters), 0) withDouble:IOSDoubleArray_Get(topParameters, 1)];
}

- (jdouble)getBottomParameter {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(quadric_, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])))) getBottomParameter];
}

- (jdouble)getTopParameter {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(quadric_, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])))) getTopParameter];
}

- (jboolean)planeOutsideAxis {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_planeOutsideAxis(self);
}

- (void)setSinglePointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setSinglePointWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, p1, p2);
}

- (IOSDoubleArray *)setPartPointsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *)algo
                                                       withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c
                                          withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3DArray:(IOSObjectArray *)points {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setPartPointsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3DArray_(self, algo, c, points);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)getBottomPointWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(bottomP_), index);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)getTopPointWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(topP_), index);
}

- (void)dealloc {
  RELEASE_(algoBottom_);
  RELEASE_(algoTop_);
  RELEASE_(bottomP_);
  RELEASE_(topP_);
  RELEASE_(tmpCoords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withGeogebraCommonKernelKernelNDGeoQuadricND:", "AlgoIntersectPlaneQuadricLimited", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withGeogebraCommonKernelKernelNDGeoQuadricND:", "AlgoIntersectPlaneQuadricLimited", NULL, 0x0, NULL, NULL },
    { "newConicWithGeogebraCommonKernelConstruction:", "newConic", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x4, NULL, NULL },
    { "end", NULL, "V", 0x4, NULL, NULL },
    { "getBottom", NULL, "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "getTop", NULL, "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "getSide", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3DPart;", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getBottomParameter", NULL, "D", 0x4, NULL, NULL },
    { "getTopParameter", NULL, "D", 0x4, NULL, NULL },
    { "planeOutsideAxis", NULL, "Z", 0x2, NULL, NULL },
    { "setSinglePointWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "setSinglePoint", "V", 0x2, NULL, NULL },
    { "setPartPointsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3DArray:", "setPartPoints", "[D", 0x2, NULL, NULL },
    { "getBottomPointWithInt:", "getBottomPoint", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "getTopPointWithInt:", "getTopPoint", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "algoBottom_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectPlaneConic;", NULL, NULL,  },
    { "algoTop_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectPlaneConic;", NULL, NULL,  },
    { "bottomP_", NULL, 0x2, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", NULL, NULL,  },
    { "topP_", NULL, 0x2, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", NULL, NULL,  },
    { "tmpCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited = { 2, "AlgoIntersectPlaneQuadricLimited", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 15, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonKernelKernelNDGeoQuadricND *quadric) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, plane, quadric);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonKernelConstruction *cons, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonKernelKernelNDGeoQuadricND *quadric) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, plane, quadric);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonKernelKernelNDGeoQuadricND *quadric) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, plane, quadric);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(self->conic_)) setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonKernelKernelNDGeoQuadricND *quadric) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, label, plane, quadric);
  return self;
}

jboolean GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_planeOutsideAxis(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited *self) {
  if (self->tmpCoords_ == nil) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setAndConsume_tmpCoords_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(self->quadric_)) getMidpoint3D])) projectPlaneThruVInPlaneCoordsWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(self->plane_)) getCoordSys])) getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:[self->quadric_ getEigenvec3DWithInt:2] withGeogebraCommonKernelMatrixCoords:self->tmpCoords_];
  jdouble parameter = -[((GeogebraCommonKernelMatrixCoords *) nil_chk(self->tmpCoords_)) getZ];
  jdouble min = [self getBottomParameter];
  jdouble max = [self getTopParameter];
  if (min > max) {
    jdouble m = min;
    min = max;
    max = m;
  }
  return GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(min, parameter) || GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(parameter, max);
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setSinglePointWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited *self, id<GeogebraCommonKernelKernelNDGeoPointND> p1, id<GeogebraCommonKernelKernelNDGeoPointND> p2) {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) isDefined]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(self->conic_)) setSinglePointWithGeogebraCommonKernelKernelNDGeoPointND:p1];
  }
  else {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(self->conic_)) setSinglePointWithGeogebraCommonKernelKernelNDGeoPointND:p2];
  }
}

IOSDoubleArray *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited_setPartPointsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3DArray_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *algo, GeogebraCommonKernelKernelNDGeoConicND *c, IOSObjectArray *points) {
  if (![((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isDefined] || [c getType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY) {
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ JavaLangDouble_NaN, JavaLangDouble_NaN } count:2];
  }
  [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneConic *) nil_chk(algo)) intersectWithGeogebraCommonKernelKernelNDGeoCoordSys2D:self->plane_ withGeogebraCommonKernelKernelNDGeoConicND:c withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3DArray:points];
  if (![((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(nil_chk(points), 0))) isDefined]) {
    return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ JavaLangDouble_NaN, JavaLangDouble_NaN } count:2];
  }
  GeogebraCommonKernelMatrixCoords *c0 = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(points, 0))) getCoordsInD2WithGeogebraCommonKernelMatrixCoordSys:[((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(self->conic_)) getCoordSys]];
  GeogebraCommonKernelMatrixCoords *c1 = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(points, 1))) getCoordsInD2WithGeogebraCommonKernelMatrixCoordSys:[self->conic_ getCoordSys]];
  IOSDoubleArray *ret = [IOSDoubleArray arrayWithLength:2];
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(c0)) equalsForKernelWithGeogebraCommonKernelMatrixCoords:c1] && [self->conic_ getType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES) {
    GeogebraCommonKernelPathParameter *pp = [new_GeogebraCommonKernelPathParameter_init() autorelease];
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->conic_->lines_), 0))) doPointChangedWithGeogebraCommonKernelMatrixCoords:c0 withGeogebraCommonKernelPathParameter:pp];
    *IOSDoubleArray_GetRef(ret, 0) = GeogebraCommonKernelPathNormalizer_inverseInfFunctionWithDouble_([pp getT]);
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->conic_->lines_, 1))) doPointChangedWithGeogebraCommonKernelMatrixCoords:c1 withGeogebraCommonKernelPathParameter:pp];
    *IOSDoubleArray_GetRef(ret, 1) = GeogebraCommonKernelPathNormalizer_inverseInfFunctionWithDouble_([pp getT]) + 2;
  }
  else {
    GeogebraCommonKernelPathParameter *pp = [new_GeogebraCommonKernelPathParameter_init() autorelease];
    [self->conic_ pointChangedWithGeogebraCommonKernelMatrixCoords:c0 withGeogebraCommonKernelPathParameter:pp withBoolean:NO];
    *IOSDoubleArray_GetRef(ret, 0) = [pp getT];
    [self->conic_ pointChangedWithGeogebraCommonKernelMatrixCoords:c1 withGeogebraCommonKernelPathParameter:pp withBoolean:NO];
    *IOSDoubleArray_GetRef(ret, 1) = [pp getT];
  }
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadricLimited)
