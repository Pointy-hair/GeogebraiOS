//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoCircumferenceConic.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoCircumferenceConic.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/integration/EllipticArcLength.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelAlgosAlgoCircumferenceConic () {
 @public
  GeogebraCommonKernelKernelNDGeoConicND *conic_;
  GeogebraCommonKernelGeosGeoNumeric *circum_;
  GeogebraCommonKernelIntegrationEllipticArcLength *ellipticArcLength_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCircumferenceConic, conic_, GeogebraCommonKernelKernelNDGeoConicND *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCircumferenceConic, circum_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCircumferenceConic, ellipticArcLength_, GeogebraCommonKernelIntegrationEllipticArcLength *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoCircumferenceConic_compute(GeogebraCommonKernelAlgosAlgoCircumferenceConic *self);

@implementation GeogebraCommonKernelAlgosAlgoCircumferenceConic

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  GeogebraCommonKernelAlgosAlgoCircumferenceConic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, label, conic);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  GeogebraCommonKernelAlgosAlgoCircumferenceConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, conic);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Circumference();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, conic_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:circum_];
  [self setDependencies];
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoCircumferenceConic_compute(self);
}

- (GeogebraCommonKernelGeosGeoNumeric *)getCircumference {
  return circum_;
}

- (void)dealloc {
  RELEASE_(conic_);
  RELEASE_(circum_);
  RELEASE_(ellipticArcLength_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoCircumferenceConic", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoCircumferenceConic", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getCircumference", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "conic_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "circum_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "ellipticArcLength_", NULL, 0x2, "Lgeogebra.common.kernel.integration.EllipticArcLength;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoCircumferenceConic = { 2, "AlgoCircumferenceConic", "geogebra.common.kernel.algos", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoCircumferenceConic;
}

@end

void GeogebraCommonKernelAlgosAlgoCircumferenceConic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelAlgosAlgoCircumferenceConic *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelKernelNDGeoConicND *conic) {
  GeogebraCommonKernelAlgosAlgoCircumferenceConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, conic);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoCircumferenceConic *new_GeogebraCommonKernelAlgosAlgoCircumferenceConic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelKernelNDGeoConicND *conic) {
  GeogebraCommonKernelAlgosAlgoCircumferenceConic *self = [GeogebraCommonKernelAlgosAlgoCircumferenceConic alloc];
  GeogebraCommonKernelAlgosAlgoCircumferenceConic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, label, conic);
  return self;
}

void GeogebraCommonKernelAlgosAlgoCircumferenceConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelAlgosAlgoCircumferenceConic *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelKernelNDGeoConicND *conic) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoCircumferenceConic_set_ellipticArcLength_(self, nil);
  GeogebraCommonKernelAlgosAlgoCircumferenceConic_set_conic_(self, conic);
  GeogebraCommonKernelAlgosAlgoCircumferenceConic_setAndConsume_circum_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoCircumferenceConic_compute(self);
}

GeogebraCommonKernelAlgosAlgoCircumferenceConic *new_GeogebraCommonKernelAlgosAlgoCircumferenceConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelKernelNDGeoConicND *conic) {
  GeogebraCommonKernelAlgosAlgoCircumferenceConic *self = [GeogebraCommonKernelAlgosAlgoCircumferenceConic alloc];
  GeogebraCommonKernelAlgosAlgoCircumferenceConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, conic);
  return self;
}

void GeogebraCommonKernelAlgosAlgoCircumferenceConic_compute(GeogebraCommonKernelAlgosAlgoCircumferenceConic *self) {
  if (![((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) isDefined]) [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setUndefined];
  jint type = [self->conic_ getType];
  if ([self->conic_ isGeoConicPart]) {
    GeogebraCommonKernelGeosGeoConicPart *conicPart = (GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(self->conic_, [GeogebraCommonKernelGeosGeoConicPart class]);
    jint partType = [conicPart getConicPartType];
    if (type == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE && partType == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) {
      jdouble area = [conicPart getValue];
      jdouble r = [self->conic_ getHalfAxisWithInt:0];
      jdouble arclength = area * 2.0 / r;
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setValueWithDouble:arclength + 2 * r];
    }
    else if (type == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE && partType == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC) {
      jdouble arclength = [conicPart getValue];
      jdouble r = [self->conic_ getHalfAxisWithInt:0];
      jdouble angle = [conicPart getParameterExtent];
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setValueWithDouble:arclength + 2.0 * r * JavaLangMath_sinWithDouble_(angle / 2)];
    }
    else [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setUndefined];
    return;
  }
  {
    jdouble r;
    switch (type) {
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      r = [self->conic_ getHalfAxisWithInt:0];
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setValueWithDouble:2 * r * JavaLangMath_PI];
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      if (self->ellipticArcLength_ == nil) GeogebraCommonKernelAlgosAlgoCircumferenceConic_setAndConsume_ellipticArcLength_(self, new_GeogebraCommonKernelIntegrationEllipticArcLength_initWithGeogebraCommonKernelKernelNDGeoConicND_(self->conic_));
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setValueWithDouble:[((GeogebraCommonKernelIntegrationEllipticArcLength *) nil_chk(self->ellipticArcLength_)) computeWithDouble:0 withDouble:2 * JavaLangMath_PI]];
      break;
      default:
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setUndefined];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoCircumferenceConic)
