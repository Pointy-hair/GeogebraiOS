//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/util/Assignment.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Macro.h"
#include "geogebra/common/kernel/algos/AlgoMacro.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/Test.h"
#include "geogebra/common/kernel/prover/AlgoAreEqual.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/util/Assignment.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonUtilAssignment () {
 @public
  GeogebraCommonKernelMacro *macro_;
  GeogebraCommonKernelKernel *kernel_;
}

- (GeogebraCommonUtilAssignment_ResultEnum *)checkEqualityOfGeosWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input
                                                                                      withJavaUtilArrayList:(JavaUtilArrayList *)possibleOutputGeos
                                                                       withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonUtilAssignment, macro_, GeogebraCommonKernelMacro *)
J2OBJC_FIELD_SETTER(GeogebraCommonUtilAssignment, kernel_, GeogebraCommonKernelKernel *)

__attribute__((unused)) static GeogebraCommonUtilAssignment_ResultEnum *GeogebraCommonUtilAssignment_checkEqualityOfGeosWithGeogebraCommonKernelGeosGeoElementArray_withJavaUtilArrayList_withGeogebraCommonKernelConstruction_(GeogebraCommonUtilAssignment *self, IOSObjectArray *input, JavaUtilArrayList *possibleOutputGeos, GeogebraCommonKernelConstruction *cons);

@interface GeogebraCommonUtilPermutationOfGeOElementsUtil () {
 @public
  IOSObjectArray *arr_;
  IOSIntArray *permSwappings_;
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonUtilPermutationOfGeOElementsUtil, arr_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonUtilPermutationOfGeOElementsUtil, permSwappings_, IOSIntArray *)

__attribute__((unused)) static void GeogebraCommonUtilPermutationOfGeOElementsUtil_swapWithInt_withInt_(GeogebraCommonUtilPermutationOfGeOElementsUtil *self, jint i, jint j);

__attribute__((unused)) static void GeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(GeogebraCommonUtilAssignment_ResultEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonUtilAssignment_ResultEnum *new_GeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation GeogebraCommonUtilAssignment

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonUtilAssignment_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

- (GeogebraCommonUtilAssignment_ResultEnum *)checkAssignment {
  GeogebraCommonUtilAssignment_ResultEnum *res = GeogebraCommonUtilAssignment_ResultEnum_get_UNKNOWN();
  JavaUtilTreeSet *possibleInputGeos = [new_JavaUtilTreeSet_init() autorelease];
  JavaUtilTreeSet *possibleOutputGeos = [new_JavaUtilTreeSet_init() autorelease];
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction];
  JavaUtilTreeSet *sortedSet = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) getGeoSetNameDescriptionOrder];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(sortedSet)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent] || [geo hasChildren]) {
      {
        IOSObjectArray *a__ = [((GeogebraCommonKernelMacro *) nil_chk(macro_)) getMacroInput];
        GeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          GeogebraCommonKernelGeosGeoElement *macroIn = *b__++;
          if ([[geo getClass] isEqual:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(macroIn)) getClass]]) {
            [possibleInputGeos addWithId:geo];
          }
        }
      }
    }
    if (![geo isIndependent]) {
      {
        IOSObjectArray *a__ = [((GeogebraCommonKernelMacro *) nil_chk(macro_)) getMacroOutput];
        GeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          GeogebraCommonKernelGeosGeoElement *macroOut = *b__++;
          if ([[((GeogebraCommonKernelGeosGeoElement *) nil_chk(macroOut)) getClass] isEqual:[geo getClass]]) {
            [possibleOutputGeos addWithId:geo];
          }
        }
      }
    }
  }
  IOSObjectArray *inputGeos = [IOSObjectArray arrayWithLength:[possibleInputGeos size] type:GeogebraCommonKernelGeosGeoElement_class_()];
  [possibleInputGeos toArrayWithNSObjectArray:inputGeos];
  jboolean typesOK = YES;
  IOSObjectArray *inputTypes = [((GeogebraCommonKernelMacro *) nil_chk(macro_)) getInputTypes];
  if (((IOSObjectArray *) nil_chk([macro_ getInputTypes]))->size_ > [possibleInputGeos size]) {
    res = GeogebraCommonUtilAssignment_ResultEnum_get_NOT_ENOUGH_INPUTS();
  }
  else if ([possibleOutputGeos isEmpty]) {
    res = GeogebraCommonUtilAssignment_ResultEnum_get_WRONG_OUTPUT_TYPE();
  }
  else {
    IOSObjectArray *input = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(inputTypes))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()];
    GeogebraCommonUtilPermutationOfGeOElementsUtil *permutationUtil = [new_GeogebraCommonUtilPermutationOfGeOElementsUtil_initWithGeogebraCommonKernelGeosGeoElementArray_withInt_(inputGeos, inputTypes->size_) autorelease];
    IOSObjectArray *inputNextPermutation = [permutationUtil next];
    while (inputNextPermutation != nil && (res == GeogebraCommonUtilAssignment_ResultEnum_get_WRONG() || res == GeogebraCommonUtilAssignment_ResultEnum_get_UNKNOWN())) {
      jint i = 0;
      typesOK = YES;
      while (i < ((IOSObjectArray *) nil_chk(inputNextPermutation))->size_ && typesOK) {
        if ([((GeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(inputTypes, i))) checkWithId:IOSObjectArray_Get(inputNextPermutation, i)]) {
          IOSObjectArray_Set(input, i, IOSObjectArray_Get(inputNextPermutation, i));
          typesOK = YES;
        }
        else {
          typesOK = NO;
        }
        i++;
      }
      if (typesOK) {
        res = GeogebraCommonUtilAssignment_checkEqualityOfGeosWithGeogebraCommonKernelGeosGeoElementArray_withJavaUtilArrayList_withGeogebraCommonKernelConstruction_(self, input, [new_JavaUtilArrayList_initWithJavaUtilCollection_(possibleOutputGeos) autorelease], cons);
      }
      inputNextPermutation = [permutationUtil next];
    }
    if (res == GeogebraCommonUtilAssignment_ResultEnum_get_UNKNOWN()) {
      if (typesOK) {
        res = GeogebraCommonUtilAssignment_ResultEnum_get_WRONG();
      }
      else {
        res = GeogebraCommonUtilAssignment_ResultEnum_get_WRONG_INPUT_TYPES();
      }
    }
  }
  return res;
}

- (GeogebraCommonUtilAssignment_ResultEnum *)checkEqualityOfGeosWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input
                                                                                      withJavaUtilArrayList:(JavaUtilArrayList *)possibleOutputGeos
                                                                       withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return GeogebraCommonUtilAssignment_checkEqualityOfGeosWithGeogebraCommonKernelGeosGeoElementArray_withJavaUtilArrayList_withGeogebraCommonKernelConstruction_(self, input, possibleOutputGeos, cons);
}

- (void)dealloc {
  RELEASE_(macro_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:", "Assignment", NULL, 0x1, NULL, NULL },
    { "checkAssignment", NULL, "Lgeogebra.common.util.Assignment$Result;", 0x1, NULL, NULL },
    { "checkEqualityOfGeosWithGeogebraCommonKernelGeosGeoElementArray:withJavaUtilArrayList:withGeogebraCommonKernelConstruction:", "checkEqualityOfGeos", "Lgeogebra.common.util.Assignment$Result;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "macro_", NULL, 0x2, "Lgeogebra.common.kernel.Macro;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.util.Assignment$Result;"};
  static const J2ObjcClassInfo _GeogebraCommonUtilAssignment = { 2, "Assignment", "geogebra.common.util", NULL, 0x1, 3, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonUtilAssignment;
}

@end

void GeogebraCommonUtilAssignment_initWithGeogebraCommonMainApp_(GeogebraCommonUtilAssignment *self, GeogebraCommonMainApp *app) {
  NSObject_init(self);
  GeogebraCommonUtilAssignment_set_kernel_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getKernel]);
  JavaUtilArrayList *appMacros = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAllMacros];
  if (![((JavaUtilArrayList *) nil_chk(appMacros)) isEmpty]) {
    GeogebraCommonUtilAssignment_set_macro_(self, [appMacros getWithInt:0]);
  }
}

GeogebraCommonUtilAssignment *new_GeogebraCommonUtilAssignment_initWithGeogebraCommonMainApp_(GeogebraCommonMainApp *app) {
  GeogebraCommonUtilAssignment *self = [GeogebraCommonUtilAssignment alloc];
  GeogebraCommonUtilAssignment_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

GeogebraCommonUtilAssignment_ResultEnum *GeogebraCommonUtilAssignment_checkEqualityOfGeosWithGeogebraCommonKernelGeosGeoElementArray_withJavaUtilArrayList_withGeogebraCommonKernelConstruction_(GeogebraCommonUtilAssignment *self, IOSObjectArray *input, JavaUtilArrayList *possibleOutputGeos, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonUtilAssignment_ResultEnum *solved = GeogebraCommonUtilAssignment_ResultEnum_get_UNKNOWN();
  GeogebraCommonKernelAlgosAlgoMacro *algoMacro = [new_GeogebraCommonKernelAlgosAlgoMacro_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelMacro_withGeogebraCommonKernelGeosGeoElementArray_(cons, nil, self->macro_, input) autorelease];
  IOSObjectArray *macroOutput = [algoMacro getOutput];
  GeogebraCommonKernelGeosGeoElement *saveInput;
  jint i = 0;
  while (i < [((JavaUtilArrayList *) nil_chk(possibleOutputGeos)) size] && (solved == GeogebraCommonUtilAssignment_ResultEnum_get_UNKNOWN() || solved == GeogebraCommonUtilAssignment_ResultEnum_get_WRONG())) {
    GeogebraCommonKernelProverAlgoAreEqual *algoEqual = [new_GeogebraCommonKernelProverAlgoAreEqual_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(cons, @"", IOSObjectArray_Get(nil_chk(macroOutput), 0), [possibleOutputGeos getWithInt:i]) autorelease];
    solved = [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk([algoEqual getResult])) getBoolean] ? GeogebraCommonUtilAssignment_ResultEnum_get_CORRECT() : GeogebraCommonUtilAssignment_ResultEnum_get_WRONG();
    jint j = 0;
    while (j < ((IOSObjectArray *) nil_chk(input))->size_ && solved == GeogebraCommonUtilAssignment_ResultEnum_get_CORRECT()) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, j))) isRandomizable]) {
        saveInput = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, j))) copy__];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, j))) randomizeForProbabilisticChecking];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, j))) updateCascade];
        solved = [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk([algoEqual getResult])) getBoolean] ? GeogebraCommonUtilAssignment_ResultEnum_get_CORRECT() : GeogebraCommonUtilAssignment_ResultEnum_get_WRONG_AFTER_RANDOMIZE();
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, j))) setWithGeogebraCommonKernelGeosGeoElement:saveInput];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, j))) updateCascade];
      }
      j++;
    }
    i++;
  }
  [algoMacro remove];
  return solved;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilAssignment)

@implementation GeogebraCommonUtilPermutationOfGeOElementsUtil

- (instancetype)initWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arr {
  GeogebraCommonUtilPermutationOfGeOElementsUtil_initWithGeogebraCommonKernelGeosGeoElementArray_(self, arr);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arr
                                                        withInt:(jint)permSize {
  GeogebraCommonUtilPermutationOfGeOElementsUtil_initWithGeogebraCommonKernelGeosGeoElementArray_withInt_(self, arr, permSize);
  return self;
}

- (IOSObjectArray *)next {
  if (arr_ == nil) {
    return nil;
  }
  IOSObjectArray *res = [IOSObjectArray arrayWithLength:((IOSIntArray *) nil_chk(permSwappings_))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr_, 0, res, 0, permSwappings_->size_);
  jint i = permSwappings_->size_ - 1;
  while (i >= 0 && IOSIntArray_Get(permSwappings_, i) == ((IOSObjectArray *) nil_chk(arr_))->size_ - 1) {
    GeogebraCommonUtilPermutationOfGeOElementsUtil_swapWithInt_withInt_(self, i, IOSIntArray_Get(permSwappings_, i));
    *IOSIntArray_GetRef(permSwappings_, i) = i;
    i--;
  }
  if (i < 0) {
    GeogebraCommonUtilPermutationOfGeOElementsUtil_set_arr_(self, nil);
  }
  else {
    jint prev = IOSIntArray_Get(permSwappings_, i);
    GeogebraCommonUtilPermutationOfGeOElementsUtil_swapWithInt_withInt_(self, i, prev);
    jint next = prev + 1;
    *IOSIntArray_GetRef(permSwappings_, i) = next;
    GeogebraCommonUtilPermutationOfGeOElementsUtil_swapWithInt_withInt_(self, i, next);
  }
  return res;
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j {
  GeogebraCommonUtilPermutationOfGeOElementsUtil_swapWithInt_withInt_(self, i, j);
}

- (void)dealloc {
  RELEASE_(arr_);
  RELEASE_(permSwappings_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoElementArray:", "PermutationOfGeOElementsUtil", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelGeosGeoElementArray:withInt:", "PermutationOfGeOElementsUtil", NULL, 0x1, NULL, NULL },
    { "next", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "swapWithInt:withInt:", "swap", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "arr_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "permSwappings_", NULL, 0x2, "[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonUtilPermutationOfGeOElementsUtil = { 2, "PermutationOfGeOElementsUtil", "geogebra.common.util", NULL, 0x0, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonUtilPermutationOfGeOElementsUtil;
}

@end

void GeogebraCommonUtilPermutationOfGeOElementsUtil_initWithGeogebraCommonKernelGeosGeoElementArray_(GeogebraCommonUtilPermutationOfGeOElementsUtil *self, IOSObjectArray *arr) {
  GeogebraCommonUtilPermutationOfGeOElementsUtil_initWithGeogebraCommonKernelGeosGeoElementArray_withInt_(self, arr, ((IOSObjectArray *) nil_chk(arr))->size_);
}

GeogebraCommonUtilPermutationOfGeOElementsUtil *new_GeogebraCommonUtilPermutationOfGeOElementsUtil_initWithGeogebraCommonKernelGeosGeoElementArray_(IOSObjectArray *arr) {
  GeogebraCommonUtilPermutationOfGeOElementsUtil *self = [GeogebraCommonUtilPermutationOfGeOElementsUtil alloc];
  GeogebraCommonUtilPermutationOfGeOElementsUtil_initWithGeogebraCommonKernelGeosGeoElementArray_(self, arr);
  return self;
}

void GeogebraCommonUtilPermutationOfGeOElementsUtil_initWithGeogebraCommonKernelGeosGeoElementArray_withInt_(GeogebraCommonUtilPermutationOfGeOElementsUtil *self, IOSObjectArray *arr, jint permSize) {
  NSObject_init(self);
  GeogebraCommonUtilPermutationOfGeOElementsUtil_setAndConsume_arr_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(arr))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr, 0, self->arr_, 0, arr->size_);
  GeogebraCommonUtilPermutationOfGeOElementsUtil_setAndConsume_permSwappings_(self, [IOSIntArray newArrayWithLength:permSize]);
  for (jint i = 0; i < self->permSwappings_->size_; i++) {
    *IOSIntArray_GetRef(self->permSwappings_, i) = i;
  }
}

GeogebraCommonUtilPermutationOfGeOElementsUtil *new_GeogebraCommonUtilPermutationOfGeOElementsUtil_initWithGeogebraCommonKernelGeosGeoElementArray_withInt_(IOSObjectArray *arr, jint permSize) {
  GeogebraCommonUtilPermutationOfGeOElementsUtil *self = [GeogebraCommonUtilPermutationOfGeOElementsUtil alloc];
  GeogebraCommonUtilPermutationOfGeOElementsUtil_initWithGeogebraCommonKernelGeosGeoElementArray_withInt_(self, arr, permSize);
  return self;
}

void GeogebraCommonUtilPermutationOfGeOElementsUtil_swapWithInt_withInt_(GeogebraCommonUtilPermutationOfGeOElementsUtil *self, jint i, jint j) {
  GeogebraCommonKernelGeosGeoElement *tmp = IOSObjectArray_Get(nil_chk(self->arr_), i);
  IOSObjectArray_Set(self->arr_, i, IOSObjectArray_Get(self->arr_, j));
  IOSObjectArray_Set(self->arr_, j, tmp);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilPermutationOfGeOElementsUtil)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonUtilAssignment_ResultEnum)

GeogebraCommonUtilAssignment_ResultEnum *GeogebraCommonUtilAssignment_ResultEnum_values_[8];

@implementation GeogebraCommonUtilAssignment_ResultEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonUtilAssignment_ResultEnum_values() {
  GeogebraCommonUtilAssignment_ResultEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonUtilAssignment_ResultEnum_values_ count:8 type:GeogebraCommonUtilAssignment_ResultEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonUtilAssignment_ResultEnum_values();
}

+ (GeogebraCommonUtilAssignment_ResultEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonUtilAssignment_ResultEnum_valueOfWithNSString_(name);
}

GeogebraCommonUtilAssignment_ResultEnum *GeogebraCommonUtilAssignment_ResultEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonUtilAssignment_ResultEnum_initialize();
  for (int i = 0; i < 8; i++) {
    GeogebraCommonUtilAssignment_ResultEnum *e = GeogebraCommonUtilAssignment_ResultEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonUtilAssignment_ResultEnum class]) {
    GeogebraCommonUtilAssignment_ResultEnum_CORRECT = new_GeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"CORRECT", 0);
    GeogebraCommonUtilAssignment_ResultEnum_WRONG = new_GeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"WRONG", 1);
    GeogebraCommonUtilAssignment_ResultEnum_NOT_ENOUGH_INPUTS = new_GeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"NOT_ENOUGH_INPUTS", 2);
    GeogebraCommonUtilAssignment_ResultEnum_WRONG_INPUT_TYPES = new_GeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"WRONG_INPUT_TYPES", 3);
    GeogebraCommonUtilAssignment_ResultEnum_WRONG_OUTPUT_TYPE = new_GeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"WRONG_OUTPUT_TYPE", 4);
    GeogebraCommonUtilAssignment_ResultEnum_WRONG_AFTER_RANDOMIZE = new_GeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"WRONG_AFTER_RANDOMIZE", 5);
    GeogebraCommonUtilAssignment_ResultEnum_UNKNOWN = new_GeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"UNKNOWN", 6);
    GeogebraCommonUtilAssignment_ResultEnum_INPUT_AMBIGUOUS = new_GeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(@"INPUT_AMBIGUOUS", 7);
    J2OBJC_SET_INITIALIZED(GeogebraCommonUtilAssignment_ResultEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "CORRECT", "CORRECT", 0x4019, "Lgeogebra.common.util.Assignment$Result;", &GeogebraCommonUtilAssignment_ResultEnum_CORRECT, NULL,  },
    { "WRONG", "WRONG", 0x4019, "Lgeogebra.common.util.Assignment$Result;", &GeogebraCommonUtilAssignment_ResultEnum_WRONG, NULL,  },
    { "NOT_ENOUGH_INPUTS", "NOT_ENOUGH_INPUTS", 0x4019, "Lgeogebra.common.util.Assignment$Result;", &GeogebraCommonUtilAssignment_ResultEnum_NOT_ENOUGH_INPUTS, NULL,  },
    { "WRONG_INPUT_TYPES", "WRONG_INPUT_TYPES", 0x4019, "Lgeogebra.common.util.Assignment$Result;", &GeogebraCommonUtilAssignment_ResultEnum_WRONG_INPUT_TYPES, NULL,  },
    { "WRONG_OUTPUT_TYPE", "WRONG_OUTPUT_TYPE", 0x4019, "Lgeogebra.common.util.Assignment$Result;", &GeogebraCommonUtilAssignment_ResultEnum_WRONG_OUTPUT_TYPE, NULL,  },
    { "WRONG_AFTER_RANDOMIZE", "WRONG_AFTER_RANDOMIZE", 0x4019, "Lgeogebra.common.util.Assignment$Result;", &GeogebraCommonUtilAssignment_ResultEnum_WRONG_AFTER_RANDOMIZE, NULL,  },
    { "UNKNOWN", "UNKNOWN", 0x4019, "Lgeogebra.common.util.Assignment$Result;", &GeogebraCommonUtilAssignment_ResultEnum_UNKNOWN, NULL,  },
    { "INPUT_AMBIGUOUS", "INPUT_AMBIGUOUS", 0x4019, "Lgeogebra.common.util.Assignment$Result;", &GeogebraCommonUtilAssignment_ResultEnum_INPUT_AMBIGUOUS, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.util.Assignment$Result;"};
  static const J2ObjcClassInfo _GeogebraCommonUtilAssignment_ResultEnum = { 2, "Result", "geogebra.common.util", "Assignment", 0x4019, 0, NULL, 8, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/util/Assignment$Result;>;" };
  return &_GeogebraCommonUtilAssignment_ResultEnum;
}

@end

void GeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(GeogebraCommonUtilAssignment_ResultEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonUtilAssignment_ResultEnum *new_GeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonUtilAssignment_ResultEnum *self = [GeogebraCommonUtilAssignment_ResultEnum alloc];
  GeogebraCommonUtilAssignment_ResultEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilAssignment_ResultEnum)
