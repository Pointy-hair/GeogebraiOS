//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoCellRange.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/gui/view/spreadsheet/CellRange.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgorithmSet.h"
#include "geogebra/common/kernel/algos/Algos.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoListForCellRange.h"
#include "geogebra/common/kernel/statistics/AlgoCellRange.h"
#include "geogebra/common/main/AlgoCellRangeManager.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/SpreadsheetTableModel.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

@interface GeogebraCommonKernelStatisticsAlgoCellRange () {
 @public
  GeogebraCommonKernelGeosGeoListForCellRange *geoList_;
  NSString *startCell_, *endCell_;
  NSString *toStringOutput_;
  GeogebraCommonGuiViewSpreadsheetCellRange *cellRange_;
  JavaUtilArrayList *listItems_;
  GeogebraCommonAwtGPoint *startCoords_, *endCoords_;
  jint maxExistingCol_;
  jint maxExistingRow_;
}

- (void)clearGeoList;

- (void)updateList;

- (void)addWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (void)addToListWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (JavaUtilArrayList *)initCellRangeListWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)startCoords
                                        withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)endCoords OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoCellRange, geoList_, GeogebraCommonKernelGeosGeoListForCellRange *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoCellRange, startCell_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoCellRange, endCell_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoCellRange, toStringOutput_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoCellRange, cellRange_, GeogebraCommonGuiViewSpreadsheetCellRange *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoCellRange, listItems_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoCellRange, startCoords_, GeogebraCommonAwtGPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoCellRange, endCoords_, GeogebraCommonAwtGPoint *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoCellRange_clearGeoList(GeogebraCommonKernelStatisticsAlgoCellRange *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoCellRange_updateList(GeogebraCommonKernelStatisticsAlgoCellRange *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoCellRange_addWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelStatisticsAlgoCellRange *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoCellRange_addToListWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelStatisticsAlgoCellRange *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static JavaUtilArrayList *GeogebraCommonKernelStatisticsAlgoCellRange_initCellRangeListWithGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(GeogebraCommonKernelStatisticsAlgoCellRange *self, GeogebraCommonAwtGPoint *startCoords, GeogebraCommonAwtGPoint *endCoords);

@implementation GeogebraCommonKernelStatisticsAlgoCellRange

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                                            withNSString:(NSString *)startCell
                                            withNSString:(NSString *)endCell {
  GeogebraCommonKernelStatisticsAlgoCellRange_initWithGeogebraCommonKernelConstruction_withNSString_withNSString_withNSString_(self, cons, label, startCell, endCell);
  return self;
}

- (GeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return GeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (void)remove {
  if (removed_) return;
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(listItems_)) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) removeFromUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:self];
  }
  [super remove];
  [((GeogebraCommonMainAlgoCellRangeManager *) nil_chk([((GeogebraCommonMainSpreadsheetTableModel *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) getApplication])) getSpreadsheetTableModel])) getCellRangeManager])) unregisterCellRangeListenerAlgoWithGeogebraCommonKernelStatisticsAlgoCellRange:self];
  GeogebraCommonKernelStatisticsAlgoCellRange_clearGeoList(self);
}

- (void)clearGeoList {
  GeogebraCommonKernelStatisticsAlgoCellRange_clearGeoList(self);
}

- (void)updateListWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                             withBoolean:(jboolean)isRemoveAction {
  if ([((JavaUtilArrayList *) nil_chk(listItems_)) containsWithId:geo]) {
    if (!isRemoveAction) {
      return;
    }
    [listItems_ removeWithId:geo];
  }
  else {
    GeogebraCommonKernelStatisticsAlgoCellRange_set_listItems_(self, GeogebraCommonKernelStatisticsAlgoCellRange_initCellRangeListWithGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(self, startCoords_, endCoords_));
  }
  GeogebraCommonKernelStatisticsAlgoCellRange_updateList(self);
  [self update];
  [((GeogebraCommonKernelGeosGeoListForCellRange *) nil_chk(geoList_)) updateRepaint];
}

- (void)updateList {
  GeogebraCommonKernelStatisticsAlgoCellRange_updateList(self);
}

- (void)addWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelStatisticsAlgoCellRange_addWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)addToListWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                            withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)loc {
  if (((GeogebraCommonAwtGPoint *) nil_chk(loc))->x_ >= maxExistingCol_ && loc->y_ > maxExistingRow_) {
    maxExistingCol_ = loc->x_;
    maxExistingRow_ = loc->y_;
    GeogebraCommonKernelStatisticsAlgoCellRange_addToListWithGeogebraCommonKernelGeosGeoElement_(self, geo);
  }
  else {
    [self updateListWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:NO];
  }
}

- (void)addToListWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelStatisticsAlgoCellRange_addToListWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)setInputOutput {
  GeogebraCommonKernelStatisticsAlgoCellRange_set_startCoords_(self, GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(startCell_));
  GeogebraCommonKernelStatisticsAlgoCellRange_set_endCoords_(self, GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(endCell_));
  GeogebraCommonKernelStatisticsAlgoCellRange_set_toStringOutput_(self, JreStrcat("$C$", startCell_, ':', endCell_));
  GeogebraCommonKernelStatisticsAlgoCellRange_setAndConsume_cellRange_(self, new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) getApplication], ((GeogebraCommonAwtGPoint *) nil_chk(startCoords_))->x_, startCoords_->y_, ((GeogebraCommonAwtGPoint *) nil_chk(endCoords_))->x_, endCoords_->y_));
  GeogebraCommonKernelStatisticsAlgoCellRange_set_listItems_(self, GeogebraCommonKernelStatisticsAlgoCellRange_initCellRangeListWithGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(self, startCoords_, endCoords_));
  GeogebraCommonKernelStatisticsAlgoCellRange_setAndConsume_geoList_(self, new_GeogebraCommonKernelGeosGeoListForCellRange_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelStatisticsAlgoCellRange_(cons_, self));
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:0 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  GeogebraCommonKernelStatisticsAlgoCellRange_updateList(self);
  [self update];
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:geoList_];
  [self setDependenciesOutputOnly];
}

- (JavaUtilArrayList *)initCellRangeListWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)startCoords
                                        withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)endCoords {
  return GeogebraCommonKernelStatisticsAlgoCellRange_initCellRangeListWithGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(self, startCoords, endCoords);
}

- (GeogebraCommonKernelGeosGeoList *)getList {
  return geoList_;
}

- (GeogebraCommonGuiViewSpreadsheetCellRange *)getCellRange {
  return cellRange_;
}

- (void)compute {
  [((GeogebraCommonKernelGeosGeoListForCellRange *) nil_chk(geoList_)) update];
}

- (NSString *)getCommandDescriptionWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return toStringOutput_;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return toStringOutput_;
}

- (IOSObjectArray *)getRectangle {
  GeogebraCommonAwtGPoint *startCoords = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(startCell_);
  GeogebraCommonAwtGPoint *endCoords = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(endCell_);
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ startCoords, endCoords } count:2 type:GeogebraCommonAwtGPoint_class_()];
  return ret;
}

- (void)addToItemsAlgoUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algo {
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(listItems_)) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) addToUpdateSetOnlyWithGeogebraCommonKernelAlgosAlgoElement:algo];
  }
}

- (NSString *)getStart {
  return startCell_;
}

- (NSString *)getEnd {
  return endCell_;
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(startCell_);
  RELEASE_(endCell_);
  RELEASE_(toStringOutput_);
  RELEASE_(cellRange_);
  RELEASE_(listItems_);
  RELEASE_(startCoords_);
  RELEASE_(endCoords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withNSString:withNSString:", "AlgoCellRange", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "clearGeoList", NULL, "V", 0x2, NULL, NULL },
    { "updateListWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "updateList", "V", 0x1, NULL, NULL },
    { "updateList", NULL, "V", 0x2, NULL, NULL },
    { "addWithGeogebraCommonKernelGeosGeoElement:", "add", "V", 0x2, NULL, NULL },
    { "addToListWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonAwtGPoint:", "addToList", "V", 0x1, NULL, NULL },
    { "addToListWithGeogebraCommonKernelGeosGeoElement:", "addToList", "V", 0x2, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "initCellRangeListWithGeogebraCommonAwtGPoint:withGeogebraCommonAwtGPoint:", "initCellRangeList", "Ljava.util.ArrayList;", 0x2, NULL, NULL },
    { "getList", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getCellRange", NULL, "Lgeogebra.common.gui.view.spreadsheet.CellRange;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getCommandDescriptionWithGeogebraCommonKernelStringTemplate:", "getCommandDescription", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getRectangle", NULL, "[Lgeogebra.common.awt.GPoint;", 0x1, NULL, NULL },
    { "addToItemsAlgoUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:", "addToItemsAlgoUpdateSets", "V", 0x1, NULL, NULL },
    { "getStart", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getEnd", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoListForCellRange;", NULL, NULL,  },
    { "startCell_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "endCell_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "toStringOutput_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "cellRange_", NULL, 0x2, "Lgeogebra.common.gui.view.spreadsheet.CellRange;", NULL, NULL,  },
    { "listItems_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "startCoords_", NULL, 0x2, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "endCoords_", NULL, 0x2, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "maxExistingCol_", NULL, 0x2, "I", NULL, NULL,  },
    { "maxExistingRow_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoCellRange = { 2, "AlgoCellRange", "geogebra.common.kernel.statistics", NULL, 0x1, 20, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoCellRange;
}

@end

void GeogebraCommonKernelStatisticsAlgoCellRange_initWithGeogebraCommonKernelConstruction_withNSString_withNSString_withNSString_(GeogebraCommonKernelStatisticsAlgoCellRange *self, GeogebraCommonKernelConstruction *cons, NSString *label, NSString *startCell, NSString *endCell) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoCellRange_set_startCell_(self, startCell);
  GeogebraCommonKernelStatisticsAlgoCellRange_set_endCell_(self, endCell);
  [self setInputOutput];
  [((GeogebraCommonKernelGeosGeoListForCellRange *) nil_chk(self->geoList_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoCellRange *new_GeogebraCommonKernelStatisticsAlgoCellRange_initWithGeogebraCommonKernelConstruction_withNSString_withNSString_withNSString_(GeogebraCommonKernelConstruction *cons, NSString *label, NSString *startCell, NSString *endCell) {
  GeogebraCommonKernelStatisticsAlgoCellRange *self = [GeogebraCommonKernelStatisticsAlgoCellRange alloc];
  GeogebraCommonKernelStatisticsAlgoCellRange_initWithGeogebraCommonKernelConstruction_withNSString_withNSString_withNSString_(self, cons, label, startCell, endCell);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoCellRange_clearGeoList(GeogebraCommonKernelStatisticsAlgoCellRange *self) {
  for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoListForCellRange *) nil_chk(self->geoList_)) size]; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoList_ getWithInt:i])) removeCellRangeUser];
  }
  [self->geoList_ clear];
}

void GeogebraCommonKernelStatisticsAlgoCellRange_updateList(GeogebraCommonKernelStatisticsAlgoCellRange *self) {
  [((GeogebraCommonKernelGeosGeoListForCellRange *) nil_chk(self->geoList_)) clear];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(self->listItems_)) {
    GeogebraCommonKernelStatisticsAlgoCellRange_addWithGeogebraCommonKernelGeosGeoElement_(self, geo);
  }
}

void GeogebraCommonKernelStatisticsAlgoCellRange_addWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelStatisticsAlgoCellRange *self, GeogebraCommonKernelGeosGeoElement *geo) {
  [((GeogebraCommonKernelGeosGeoListForCellRange *) nil_chk(self->geoList_)) addWithGeogebraCommonKernelGeosGeoElement:geo];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) addToUpdateSetOnlyWithGeogebraCommonKernelAlgosAlgoElement:self];
  id<JavaUtilIterator> it = [((GeogebraCommonKernelAlgosAlgorithmSet *) nil_chk([self->geoList_ getAlgoUpdateSet])) getIterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [geo addToUpdateSetOnlyWithGeogebraCommonKernelAlgosAlgoElement:[it next]];
  }
}

void GeogebraCommonKernelStatisticsAlgoCellRange_addToListWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelStatisticsAlgoCellRange *self, GeogebraCommonKernelGeosGeoElement *geo) {
  [((JavaUtilArrayList *) nil_chk(self->listItems_)) addWithId:geo];
  GeogebraCommonKernelStatisticsAlgoCellRange_addWithGeogebraCommonKernelGeosGeoElement_(self, geo);
  [((GeogebraCommonKernelGeosGeoListForCellRange *) nil_chk(self->geoList_)) updateRepaint];
}

JavaUtilArrayList *GeogebraCommonKernelStatisticsAlgoCellRange_initCellRangeListWithGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(GeogebraCommonKernelStatisticsAlgoCellRange *self, GeogebraCommonAwtGPoint *startCoords, GeogebraCommonAwtGPoint *endCoords) {
  JavaUtilArrayList *listItems = [new_JavaUtilArrayList_init() autorelease];
  jboolean validRange = startCoords != nil && endCoords != nil;
  if (!validRange) {
    return listItems;
  }
  jint minCol = JavaLangMath_minWithInt_withInt_(((GeogebraCommonAwtGPoint *) nil_chk(startCoords))->x_, ((GeogebraCommonAwtGPoint *) nil_chk(endCoords))->x_);
  jint maxCol = JavaLangMath_maxWithInt_withInt_(startCoords->x_, endCoords->x_);
  jint minRow = JavaLangMath_minWithInt_withInt_(startCoords->y_, endCoords->y_);
  jint maxRow = JavaLangMath_maxWithInt_withInt_(startCoords->y_, endCoords->y_);
  self->maxExistingCol_ = minCol - 1;
  self->maxExistingRow_ = minRow - 1;
  for (jint colIndex = minCol; colIndex <= maxCol; colIndex++) {
    for (jint rowIndex = minRow; rowIndex <= maxRow; rowIndex++) {
      NSString *cellLabel = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(colIndex, rowIndex);
      GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:cellLabel];
      if (geo == nil || [geo isEmptySpreadsheetCell]) {
        continue;
      }
      [listItems addWithId:geo];
      self->maxExistingCol_ = colIndex;
      self->maxExistingRow_ = rowIndex;
    }
  }
  return listItems;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoCellRange)
