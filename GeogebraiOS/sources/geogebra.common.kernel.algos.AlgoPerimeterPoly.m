//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoPerimeterPoly.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPerimeterPoly.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"

@interface GeogebraCommonKernelAlgosAlgoPerimeterPoly () {
 @public
  GeogebraCommonKernelGeosGeoPolygon *polygon_;
  GeogebraCommonKernelGeosGeoNumeric *circum_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPerimeterPoly, polygon_, GeogebraCommonKernelGeosGeoPolygon *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPerimeterPoly, circum_, GeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPerimeterPoly_compute(GeogebraCommonKernelAlgosAlgoPerimeterPoly *self);

@implementation GeogebraCommonKernelAlgosAlgoPerimeterPoly

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon {
  GeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPolygon_(self, cons, label, polygon);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon {
  GeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPolygon_(self, cons, polygon);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Perimeter();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, polygon_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:circum_];
  [self setDependencies];
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoPerimeterPoly_compute(self);
}

- (GeogebraCommonKernelGeosGeoNumeric *)getCircumference {
  return circum_;
}

- (void)dealloc {
  RELEASE_(polygon_);
  RELEASE_(circum_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPolygon:", "AlgoPerimeterPoly", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoPolygon:", "AlgoPerimeterPoly", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getCircumference", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "polygon_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "circum_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoPerimeterPoly = { 2, "AlgoPerimeterPoly", "geogebra.common.kernel.algos", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoPerimeterPoly;
}

@end

void GeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelAlgosAlgoPerimeterPoly *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPolygon *polygon) {
  GeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPolygon_(self, cons, polygon);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoPerimeterPoly *new_GeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPolygon *polygon) {
  GeogebraCommonKernelAlgosAlgoPerimeterPoly *self = [GeogebraCommonKernelAlgosAlgoPerimeterPoly alloc];
  GeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPolygon_(self, cons, label, polygon);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelAlgosAlgoPerimeterPoly *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPolygon *polygon) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoPerimeterPoly_set_polygon_(self, polygon);
  GeogebraCommonKernelAlgosAlgoPerimeterPoly_setAndConsume_circum_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoPerimeterPoly_compute(self);
}

GeogebraCommonKernelAlgosAlgoPerimeterPoly *new_GeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPolygon *polygon) {
  GeogebraCommonKernelAlgosAlgoPerimeterPoly *self = [GeogebraCommonKernelAlgosAlgoPerimeterPoly alloc];
  GeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPolygon_(self, cons, polygon);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPerimeterPoly_compute(GeogebraCommonKernelAlgosAlgoPerimeterPoly *self) {
  if (![((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->polygon_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setUndefined];
    return;
  }
  IOSObjectArray *segment = [self->polygon_ getSegments];
  jdouble length = 0;
  for (jint i = 0; i < [self->polygon_ getPointsLength]; i++) {
    length = length + ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(nil_chk(segment), i))) getLength]);
  }
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setValueWithDouble:length];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoPerimeterPoly)
