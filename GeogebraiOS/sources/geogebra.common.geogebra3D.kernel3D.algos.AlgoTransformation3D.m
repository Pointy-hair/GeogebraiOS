//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoTransformation3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoTransformation3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D

+ (void)toGeoCurveCartesianWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                  withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)geoFun
withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)curve {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_toGeoCurveCartesianWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(kernel, geoFun, curve);
}

- (instancetype)init {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "toGeoCurveCartesianWithGeogebraCommonKernelKernel:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:", "toGeoCurveCartesian", "V", 0x19, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D = { 2, "AlgoTransformation3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_toGeoCurveCartesianWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelGeosGeoFunction *geoFun, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *curve) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_initialize();
  GeogebraCommonKernelArithmeticFunctionVariable *t = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel, @"t") autorelease];
  GeogebraCommonKernelArithmeticFunctionVariable *x = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(geoFun)) getFunction])) getFunctionVariable];
  GeogebraCommonKernelArithmeticExpressionNode *yExp = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticFunction *) nil_chk([geoFun getFunction])) getExpression])) deepCopyWithGeogebraCommonKernelKernel:kernel], [GeogebraCommonKernelArithmeticExpressionNode class])))) replaceWithGeogebraCommonKernelArithmeticExpressionValue:x withGeogebraCommonKernelArithmeticExpressionValue:t], [GeogebraCommonKernelArithmeticExpressionNode class]);
  IOSObjectArray *fun = [IOSObjectArray arrayWithLength:3 type:GeogebraCommonKernelArithmeticFunction_class_()];
  IOSObjectArray_SetAndConsume(fun, 0, new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_([new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, t) autorelease], t));
  IOSObjectArray_SetAndConsume(fun, 1, new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(yExp, t));
  IOSObjectArray_SetAndConsume(fun, 2, new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_([new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel, 0) autorelease], t));
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) nil_chk(curve)) setFunWithGeogebraCommonKernelArithmeticFunctionArray:fun];
  if ([geoFun hasInterval]) {
    [curve setIntervalWithDouble:[geoFun getIntervalMin] withDouble:[geoFun getIntervalMax]];
  }
  else {
    jdouble min = [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getXminForFunctions];
    jdouble max = [kernel getXmaxForFunctions];
    [curve setIntervalWithDouble:min withDouble:max];
  }
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_init(GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D *self) {
  NSObject_init(self);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_init() {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D)
