//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/Matrix/CoordMatrix.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/App.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"

@class GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix;
@class GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes;
@protocol GeogebraCommonKernelMatrixCoordMatrix_PivotInterface;

@interface GeogebraCommonKernelMatrixCoordMatrix () {
 @public
  GeogebraCommonKernelMatrixCoordMatrix *inverse__;
  GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes *pivotSolRes_;
  GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix *pivotInverseMatrix_;
  IOSObjectArray *pivotMatrix_;
}

- (void)initialiseWithInt:(jint)rows
                  withInt:(jint)columns OBJC_METHOD_FAMILY_NONE;

- (void)updatePivotMatrix;

+ (void)pivotWithDoubleArray2:(IOSObjectArray *)matrix
withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface:(id<GeogebraCommonKernelMatrixCoordMatrix_PivotInterface>)psr
                      withInt:(jint)step
        withJavaUtilArrayList:(JavaUtilArrayList *)stack;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordMatrix, inverse__, GeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordMatrix, pivotSolRes_, GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordMatrix, pivotInverseMatrix_, GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordMatrix, pivotMatrix_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelMatrixCoordMatrix_initialiseWithInt_withInt_(GeogebraCommonKernelMatrixCoordMatrix *self, jint rows, jint columns);

__attribute__((unused)) static void GeogebraCommonKernelMatrixCoordMatrix_updatePivotMatrix(GeogebraCommonKernelMatrixCoordMatrix *self);

__attribute__((unused)) static void GeogebraCommonKernelMatrixCoordMatrix_pivotWithDoubleArray2_withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface_withInt_withJavaUtilArrayList_(IOSObjectArray *matrix, id<GeogebraCommonKernelMatrixCoordMatrix_PivotInterface> psr, jint step, JavaUtilArrayList *stack);

@protocol GeogebraCommonKernelMatrixCoordMatrix_PivotInterface < NSObject, JavaObject >

- (void)divideFirstWithInt:(jint)index
                withDouble:(jdouble)factor;

- (void)divideResWithInt:(jint)step
              withDouble:(jdouble)value;

- (void)subResWithInt:(jint)l
              withInt:(jint)step
           withDouble:(jdouble)coef;

- (void)calcSolWithInt:(jint)index
               withInt:(jint)step
      withDoubleArray2:(IOSObjectArray *)matrix
 withJavaUtilArrayList:(JavaUtilArrayList *)stack;

@end

@interface GeogebraCommonKernelMatrixCoordMatrix_PivotInterface : NSObject
@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelMatrixCoordMatrix_PivotInterface)

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelMatrixCoordMatrix_PivotInterface)

@interface GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes : NSObject < GeogebraCommonKernelMatrixCoordMatrix_PivotInterface > {
 @public
  IOSDoubleArray *sol_;
  IOSDoubleArray *res_;
}

- (instancetype)init;

- (void)divideFirstWithInt:(jint)index
                withDouble:(jdouble)factor;

- (void)divideResWithInt:(jint)step
              withDouble:(jdouble)value;

- (void)subResWithInt:(jint)l
              withInt:(jint)step
           withDouble:(jdouble)coef;

- (void)calcSolWithInt:(jint)index
               withInt:(jint)step
      withDoubleArray2:(IOSObjectArray *)matrix
 withJavaUtilArrayList:(JavaUtilArrayList *)stack;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes, sol_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes, res_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes_init(GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes *self);

__attribute__((unused)) static GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes *new_GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes)

@interface GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix : NSObject < GeogebraCommonKernelMatrixCoordMatrix_PivotInterface > {
 @public
  jint columns_;
  IOSDoubleArray *matrixRes_;
  IOSObjectArray *inverse_;
}

- (instancetype)init;

- (void)divideFirstWithInt:(jint)index
                withDouble:(jdouble)factor;

- (void)divideResWithInt:(jint)step
              withDouble:(jdouble)value;

- (void)subResWithInt:(jint)l
              withInt:(jint)step
           withDouble:(jdouble)coef;

- (void)calcSolWithInt:(jint)index
               withInt:(jint)step
      withDoubleArray2:(IOSObjectArray *)matrix
 withJavaUtilArrayList:(JavaUtilArrayList *)stack;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix, matrixRes_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix, inverse_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix_init(GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix *self);

__attribute__((unused)) static GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix *new_GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix)

@implementation GeogebraCommonKernelMatrixCoordMatrix

- (instancetype)initWithInt:(jint)rows
                    withInt:(jint)columns
            withDoubleArray:(IOSDoubleArray *)val {
  GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_withDoubleArray_(self, rows, columns, val);
  return self;
}

- (instancetype)initWithInt:(jint)rows
                    withInt:(jint)columns {
  GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(self, rows, columns);
  return self;
}

- (void)initialiseWithInt:(jint)rows
                  withInt:(jint)columns {
  GeogebraCommonKernelMatrixCoordMatrix_initialiseWithInt_withInt_(self, rows, columns);
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelMatrixCoordMatrix_initWithGeogebraCommonKernelGeosGeoList_(self, inputList);
  return self;
}

+ (GeogebraCommonKernelMatrixCoordMatrix *)IdentityWithInt:(jint)n {
  return GeogebraCommonKernelMatrixCoordMatrix_IdentityWithInt_(n);
}

+ (GeogebraCommonKernelMatrixCoordMatrix *)ScaleMatrixWithDoubleArray:(IOSDoubleArray *)v {
  return GeogebraCommonKernelMatrixCoordMatrix_ScaleMatrixWithDoubleArray_(v);
}

+ (GeogebraCommonKernelMatrixCoordMatrix *)ScaleMatrixWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  return GeogebraCommonKernelMatrixCoordMatrix_ScaleMatrixWithGeogebraCommonKernelMatrixCoords_(v);
}

+ (GeogebraCommonKernelMatrixCoordMatrix *)DiagonalMatrixWithDoubleArray:(IOSDoubleArray *)vals {
  return GeogebraCommonKernelMatrixCoordMatrix_DiagonalMatrixWithDoubleArray_(vals);
}

+ (GeogebraCommonKernelMatrixCoordMatrix *)TranslationMatrixWithDoubleArray:(IOSDoubleArray *)v {
  return GeogebraCommonKernelMatrixCoordMatrix_TranslationMatrixWithDoubleArray_(v);
}

+ (GeogebraCommonKernelMatrixCoordMatrix *)TranslationMatrixWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  return GeogebraCommonKernelMatrixCoordMatrix_TranslationMatrixWithGeogebraCommonKernelMatrixCoords_(v);
}

+ (GeogebraCommonKernelMatrixCoordMatrix *)Rotation3DMatrixWithInt:(jint)axe
                                                        withDouble:(jdouble)angle {
  return GeogebraCommonKernelMatrixCoordMatrix_Rotation3DMatrixWithInt_withDouble_(axe, angle);
}

+ (void)Rotation3x3WithDouble:(jdouble)angle
withGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m {
  GeogebraCommonKernelMatrixCoordMatrix_Rotation3x3WithDouble_withGeogebraCommonKernelMatrixCoordMatrix_(angle, m);
}

+ (void)Rotation3x3WithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)u
                                             withDouble:(jdouble)angle
              withGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m {
  GeogebraCommonKernelMatrixCoordMatrix_Rotation3x3WithGeogebraCommonKernelMatrixCoords_withDouble_withGeogebraCommonKernelMatrixCoordMatrix_(u, angle, m);
}

- (void)getWithDoubleArray:(IOSDoubleArray *)val {
  for (jint i = 0; i < rows_; i++) {
    for (jint j = 0; j < columns_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(val), i + j * rows_) = [self getWithInt:i + 1 withInt:j + 1];
    }
  }
}

- (jdouble)getWithInt:(jint)i
              withInt:(jint)j {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(vectors_), j - 1))) getWithInt:i];
}

- (GeogebraCommonKernelMatrixCoordMatrix *)subMatrixWithInt:(jint)i
                                                    withInt:(jint)j {
  GeogebraCommonKernelMatrixCoordMatrix *ret = [new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_([self getRows] - 1, [self getColumns] - 1) autorelease];
  for (jint i1 = 1; i1 < i; i1++) {
    for (jint j1 = 1; j1 < j; j1++) {
      [ret setWithInt:i1 withInt:j1 withDouble:[self getWithInt:i1 withInt:j1]];
    }
    for (jint j1 = j + 1; j1 <= [self getColumns]; j1++) {
      [ret setWithInt:i1 withInt:j1 - 1 withDouble:[self getWithInt:i1 withInt:j1]];
    }
  }
  for (jint i1 = i + 1; i1 <= [self getRows]; i1++) {
    for (jint j1 = 1; j1 < j; j1++) {
      [ret setWithInt:i1 - 1 withInt:j1 withDouble:[self getWithInt:i1 withInt:j1]];
    }
    for (jint j1 = j + 1; j1 <= [self getColumns]; j1++) {
      [ret setWithInt:i1 - 1 withInt:j1 - 1 withDouble:[self getWithInt:i1 withInt:j1]];
    }
  }
  return ret;
}

- (GeogebraCommonKernelMatrixCoords *)getColumnWithInt:(jint)j {
  return IOSObjectArray_Get(nil_chk(vectors_), j - 1);
}

- (GeogebraCommonKernelGeosGeoList *)getGeoListWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)outputList
                                              withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  if ([self isSingular]) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(outputList)) setDefinedWithBoolean:NO];
    return outputList;
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(outputList)) clear];
  [outputList setDefinedWithBoolean:YES];
  for (jint r = 0; r < rows_; r++) {
    GeogebraCommonKernelGeosGeoList *columnList = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
    for (jint c = 0; c < columns_; c++) {
      GeogebraCommonKernelGeosGeoNumeric *num = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
      [num setValueWithDouble:[self getWithInt:r + 1 withInt:c + 1]];
      [columnList addWithGeogebraCommonKernelGeosGeoElement:num];
    }
    [outputList addWithGeogebraCommonKernelGeosGeoElement:columnList];
  }
  return outputList;
}

- (void)setWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)V
                                        withInt:(jint)j {
  for (jint i = 1; i <= [((GeogebraCommonKernelMatrixCoords *) nil_chk(V)) getLength]; i++) {
    [self setWithInt:i withInt:j withDouble:[V getWithInt:i]];
  }
}

- (void)setWithGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)V {
  jint j;
  for (j = 0; j < ((IOSObjectArray *) nil_chk(V))->size_; j++) {
    [self setWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(V, j) withInt:j + 1];
  }
}

- (void)setWithInt:(jint)i
           withInt:(jint)j
        withDouble:(jdouble)val0 {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(vectors_), j - 1))) setWithInt:i withDouble:val0];
}

- (void)setWithDouble:(jdouble)val0 {
  for (jint i = 0; i < columns_; i++) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(vectors_), i))) setWithDouble:val0];
  }
}

- (void)setWithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m {
  for (jint i = 1; i <= [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m)) getRows]; i++) {
    for (jint j = 1; j <= [m getColumns]; j++) {
      [self setWithInt:i withInt:j withDouble:[m getWithInt:i withInt:j]];
    }
  }
}

- (jint)getRows {
  return rows_;
}

- (jint)getColumns {
  return columns_;
}

- (GeogebraCommonKernelMatrixCoordMatrix *)copy__ {
  GeogebraCommonKernelMatrixCoordMatrix *result = [new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_([self getRows], [self getColumns]) autorelease];
  for (jint i = 1; i <= [result getRows]; i++) {
    for (jint j = 1; j <= [result getColumns]; j++) {
      [result setWithInt:i withInt:j withDouble:[self getWithInt:i withInt:j]];
    }
  }
  return result;
}

- (void)copy__WithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)result {
  for (jint i = 1; i <= [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(result)) getRows]; i++) {
    for (jint j = 1; j <= [result getColumns]; j++) {
      [result setWithInt:i withInt:j withDouble:[self getWithInt:i withInt:j]];
    }
  }
}

- (GeogebraCommonKernelMatrixCoordMatrix *)transposeCopy {
  GeogebraCommonKernelMatrixCoordMatrix *result = [new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(columns_, rows_) autorelease];
  [self transposeCopyWithGeogebraCommonKernelMatrixCoordMatrix:result];
  return result;
}

- (void)transposeCopyWithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)result {
  for (jint i = 1; i <= [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(result)) getRows]; i++) {
    for (jint j = 1; j <= [result getColumns]; j++) {
      [result setWithInt:i withInt:j withDouble:[self getWithInt:j withInt:i]];
    }
  }
}

- (void)SystemPrint {
  GeogebraCommonMainApp_debugWithNSString_([self description]);
}

- (NSString *)description {
  NSString *s = @"";
  for (jint i = 1; i <= [self getRows]; i++) {
    for (jint j = 1; j <= [self getColumns]; j++) {
      jdouble v = [self getWithInt:i withInt:j];
      if (GeogebraCommonKernelKernel_isZeroWithDouble_(v)) v = 0;
      s = JreStrcat("$$", s, JreStrcat("$D", @"  ", v));
    }
    s = JreStrcat("$C", s, 0x000a);
  }
  return s;
}

- (jboolean)isDefined {
  for (jint i = 0; i < columns_; i++) {
    if (![((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(vectors_), i))) isDefined]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)isFinite {
  for (jint i = 0; i < columns_; i++) {
    if (![((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(vectors_), i))) isFinite]) {
      return NO;
    }
  }
  return YES;
}

- (GeogebraCommonKernelMatrixCoordMatrix *)mulWithDouble:(jdouble)val0 {
  GeogebraCommonKernelMatrixCoordMatrix *result = [new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_([self getRows], [self getColumns]) autorelease];
  for (jint i = 1; i <= [result getRows]; i++) {
    for (jint j = 1; j <= [result getColumns]; j++) {
      [result setWithInt:i withInt:j withDouble:val0 * [self getWithInt:i withInt:j]];
    }
  }
  return result;
}

- (void)mulInsideWithDouble:(jdouble)v {
  for (jint i = 0; i < columns_; i++) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(vectors_), i))) mulInsideWithDouble:v];
  }
}

- (GeogebraCommonKernelMatrixCoordMatrix *)addWithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m {
  GeogebraCommonKernelMatrixCoordMatrix *result = [new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_([self getRows], [self getColumns]) autorelease];
  for (jint i = 1; i <= [result getRows]; i++) {
    for (jint j = 1; j <= [result getColumns]; j++) {
      [result setWithInt:i withInt:j withDouble:[self getWithInt:i withInt:j] + [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m)) getWithInt:i withInt:j]];
    }
  }
  return result;
}

- (GeogebraCommonKernelMatrixCoordMatrix *)addSmallerWithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m {
  GeogebraCommonKernelMatrixCoordMatrix *result = [new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_([self getRows], [self getColumns]) autorelease];
  for (jint i = 1; i <= [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m)) getRows]; i++) {
    for (jint j = 1; j <= [m getColumns]; j++) {
      [result setWithInt:i withInt:j withDouble:[self getWithInt:i withInt:j] + [m getWithInt:i withInt:j]];
    }
  }
  return result;
}

- (GeogebraCommonKernelMatrixCoords *)mulWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  GeogebraCommonKernelMatrixCoords *result = [new_GeogebraCommonKernelMatrixCoords_initWithInt_([self getRows]) autorelease];
  for (jint i = 1; i <= [result getLength]; i++) {
    jdouble r = 0;
    for (jint n = 1; n <= [self getColumns]; n++) r += [self getWithInt:i withInt:n] * [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getWithInt:n];
    [result setWithInt:i withDouble:r];
  }
  return result;
}

- (GeogebraCommonKernelMatrixCoordMatrix *)mulWithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m {
  GeogebraCommonKernelMatrixCoordMatrix *result = [new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_([self getRows], [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m)) getColumns]) autorelease];
  [self mulWithGeogebraCommonKernelMatrixCoordMatrix:m withGeogebraCommonKernelMatrixCoordMatrix:result];
  return result;
}

- (void)mulWithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m
           withGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)result {
  for (jint i = 1; i <= [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(result)) getRows]; i++) {
    for (jint j = 1; j <= [result getColumns]; j++) {
      jdouble r = 0;
      for (jint n = 1; n <= [self getColumns]; n++) r += [self getWithInt:i withInt:n] * [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m)) getWithInt:n withInt:j];
      [result setWithInt:i withInt:j withDouble:r];
    }
  }
}

- (GeogebraCommonKernelMatrixCoordMatrix *)setMulWithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m1
                                                 withGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m2 {
  for (jint i = 1; i <= [self getRows]; i++) {
    for (jint j = 1; j <= [self getColumns]; j++) {
      jdouble r = 0;
      for (jint n = 1; n <= [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m1)) getColumns]; n++) {
        r += [m1 getWithInt:i withInt:n] * [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m2)) getWithInt:n withInt:j];
      }
      [self setWithInt:i withInt:j withDouble:r];
    }
  }
  return self;
}

- (GeogebraCommonKernelMatrixCoordMatrix *)setMulT1WithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m1
                                                   withGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m2 {
  for (jint i = 1; i <= [self getRows]; i++) {
    for (jint j = 1; j <= [self getColumns]; j++) {
      jdouble r = 0;
      for (jint n = 1; n <= [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m1)) getRows]; n++) {
        r += [m1 getWithInt:n withInt:i] * [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m2)) getWithInt:n withInt:j];
      }
      [self setWithInt:i withInt:j withDouble:r];
    }
  }
  return self;
}

- (GeogebraCommonKernelMatrixCoordMatrix4x4 *)mul3x3WithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m {
  GeogebraCommonKernelMatrixCoordMatrix4x4 *result = [new_GeogebraCommonKernelMatrixCoordMatrix4x4_init() autorelease];
  for (jint i = 1; i <= 3; i++) {
    for (jint j = 1; j <= 3; j++) {
      jdouble r = 0;
      for (jint n = 1; n <= 3; n++) r += [self getWithInt:i withInt:n] * [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m)) getWithInt:n withInt:j];
      [result setWithInt:i withInt:j withDouble:r];
    }
  }
  return result;
}

- (jdouble)det {
  jdouble ret = 0.0;
  if ([self getRows] == 1) {
    ret = [self getWithInt:1 withInt:1];
  }
  else {
    jdouble signe = 1.0;
    for (jint j = 1; j <= [self getColumns]; j++) {
      ret += [self getWithInt:1 withInt:j] * signe * ([((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk([self subMatrixWithInt:1 withInt:j])) det]);
      signe = -signe;
    }
  }
  return ret;
}

- (jboolean)isSquare {
  if ([self isSingular]) return NO;
  return [self getRows] == [self getColumns];
}

- (GeogebraCommonKernelMatrixCoordMatrix *)inverse {
  if (inverse__ == nil) {
    GeogebraCommonKernelMatrixCoordMatrix_setAndConsume_inverse__(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_([self getRows], [self getColumns]));
  }
  if (pivotInverseMatrix_ == nil) {
    GeogebraCommonKernelMatrixCoordMatrix_setAndConsume_pivotInverseMatrix_(self, new_GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix_init());
    GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix_setAndConsume_matrixRes_(pivotInverseMatrix_, [IOSDoubleArray newArrayWithLength:columns_ * columns_]);
    for (jint c = 0; c < columns_; c++) {
      *IOSDoubleArray_GetRef(pivotInverseMatrix_->matrixRes_, c * rows_ + c) = 1;
    }
    GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix_set_inverse_(pivotInverseMatrix_, ((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(inverse__))->vectors_);
    pivotInverseMatrix_->columns_ = columns_;
  }
  else {
    for (jint c = 0; c < columns_; c++) {
      for (jint r = 0; r < rows_; r++) {
        *IOSDoubleArray_GetRef(nil_chk(pivotInverseMatrix_->matrixRes_), c * rows_ + r) = 0;
      }
      *IOSDoubleArray_GetRef(nil_chk(pivotInverseMatrix_->matrixRes_), c * rows_ + c) = 1;
    }
  }
  GeogebraCommonKernelMatrixCoordMatrix_updatePivotMatrix(self);
  GeogebraCommonKernelMatrixCoordMatrix_pivotWithDoubleArray2_withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface_(pivotMatrix_, pivotInverseMatrix_);
  return inverse__;
}

- (GeogebraCommonKernelMatrixCoords *)solveWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  GeogebraCommonKernelMatrixCoords *sol = [new_GeogebraCommonKernelMatrixCoords_initWithInt_([((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getLength]) autorelease];
  [self pivotWithGeogebraCommonKernelMatrixCoords:sol withGeogebraCommonKernelMatrixCoords:v];
  return sol;
}

+ (void)solveWithDoubleArray:(IOSDoubleArray *)sol
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)res
withGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)columns {
  GeogebraCommonKernelMatrixCoordMatrix_solveWithDoubleArray_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordsArray_(sol, res, columns);
}

- (void)updatePivotMatrix {
  GeogebraCommonKernelMatrixCoordMatrix_updatePivotMatrix(self);
}

- (void)pivotWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)sol
             withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)res {
  GeogebraCommonKernelMatrixCoordMatrix_updatePivotMatrix(self);
  if (pivotSolRes_ == nil) {
    GeogebraCommonKernelMatrixCoordMatrix_setAndConsume_pivotSolRes_(self, new_GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes_init());
  }
  GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes_setAndConsume_res_(nil_chk(pivotSolRes_), [IOSDoubleArray newArrayWithLength:[((GeogebraCommonKernelMatrixCoords *) nil_chk(res)) getLength]]);
  for (jint r = 0; r < rows_; r++) {
    *IOSDoubleArray_GetRef(pivotSolRes_->res_, r) = IOSDoubleArray_Get(nil_chk(res->val_), r);
  }
  GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes_set_sol_(pivotSolRes_, ((GeogebraCommonKernelMatrixCoords *) nil_chk(sol))->val_);
  GeogebraCommonKernelMatrixCoordMatrix_pivotWithDoubleArray2_withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface_(pivotMatrix_, pivotSolRes_);
}

+ (void)pivotWithDoubleArray2:(IOSObjectArray *)matrix
withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface:(id<GeogebraCommonKernelMatrixCoordMatrix_PivotInterface>)psr {
  GeogebraCommonKernelMatrixCoordMatrix_pivotWithDoubleArray2_withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface_(matrix, psr);
}

+ (void)pivotWithDoubleArray2:(IOSObjectArray *)matrix
withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface:(id<GeogebraCommonKernelMatrixCoordMatrix_PivotInterface>)psr
                      withInt:(jint)step
        withJavaUtilArrayList:(JavaUtilArrayList *)stack {
  GeogebraCommonKernelMatrixCoordMatrix_pivotWithDoubleArray2_withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface_withInt_withJavaUtilArrayList_(matrix, psr, step, stack);
}

- (jboolean)isSingular {
  return JavaLangDouble_isNaNWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(vectors_), 0))) getWithInt:1]);
}

- (void)setIsSingularWithBoolean:(jboolean)isSingular {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(vectors_), 0))) setWithInt:1 withDouble:JavaLangDouble_NaN];
}

- (GeogebraCommonKernelMatrixCoords *)getOrigin {
  return [self getColumnWithInt:[self getColumns]];
}

- (GeogebraCommonKernelMatrixCoords *)getVx {
  return [self getColumnWithInt:1];
}

- (GeogebraCommonKernelMatrixCoords *)getVy {
  return [self getColumnWithInt:2];
}

- (GeogebraCommonKernelMatrixCoords *)getVz {
  return [self getColumnWithInt:3];
}

- (void)setOriginWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [self setWithGeogebraCommonKernelMatrixCoords:v withInt:[self getColumns]];
}

- (void)addToOriginWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [self addToColumnWithGeogebraCommonKernelMatrixCoords:v withInt:[self getColumns]];
}

- (void)subToOriginWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [self subToColumnWithGeogebraCommonKernelMatrixCoords:v withInt:[self getColumns]];
}

- (void)addToVxWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [self addToColumnWithGeogebraCommonKernelMatrixCoords:v withInt:1];
}

- (void)addToVyWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [self addToColumnWithGeogebraCommonKernelMatrixCoords:v withInt:2];
}

- (void)addToVzWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [self addToColumnWithGeogebraCommonKernelMatrixCoords:v withInt:3];
}

- (void)addToColumnWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v
                                                withInt:(jint)j {
  for (jint i = 1; i <= [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getLength]; i++) {
    [self setWithInt:i withInt:j withDouble:[self getWithInt:i withInt:j] + [v getWithInt:i]];
  }
}

- (void)subToColumnWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v
                                                withInt:(jint)j {
  for (jint i = 1; i <= [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getLength]; i++) {
    [self setWithInt:i withInt:j withDouble:[self getWithInt:i withInt:j] - [v getWithInt:i]];
  }
}

- (void)mulColumnWithDouble:(jdouble)v
                    withInt:(jint)j {
  for (jint i = 1; i <= [self getRows]; i++) {
    [self setWithInt:i withInt:j withDouble:[self getWithInt:i withInt:j] * v];
  }
}

- (void)mulOriginWithDouble:(jdouble)v {
  [self mulColumnWithDouble:v withInt:[self getColumns]];
}

- (void)setVxWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [self setWithGeogebraCommonKernelMatrixCoords:v withInt:1];
}

- (void)setVyWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [self setWithGeogebraCommonKernelMatrixCoords:v withInt:2];
}

- (void)setVzWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [self setWithGeogebraCommonKernelMatrixCoords:v withInt:3];
}

- (void)getForGLWithFloatArray:(IOSFloatArray *)val {
  jint index = 0;
  for (jint x = 0; x < columns_; x++) {
    for (jint y = 0; y < rows_; y++) {
      *IOSFloatArray_GetRef(nil_chk(val), index) = (jfloat) [self getWithInt:y + 1 withInt:x + 1];
      index++;
    }
  }
}

+ (void)test {
  GeogebraCommonKernelMatrixCoordMatrix_test();
}

- (void)dealloc {
  RELEASE_(vectors_);
  RELEASE_(inverse__);
  RELEASE_(pivotSolRes_);
  RELEASE_(pivotInverseMatrix_);
  RELEASE_(pivotMatrix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withDoubleArray:", "CoordMatrix", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "CoordMatrix", NULL, 0x1, NULL, NULL },
    { "initialiseWithInt:withInt:", "initialise", "V", 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelGeosGeoList:", "CoordMatrix", NULL, 0x1, NULL, NULL },
    { "IdentityWithInt:", "Identity", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x19, NULL, NULL },
    { "ScaleMatrixWithDoubleArray:", "ScaleMatrix", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x19, NULL, NULL },
    { "ScaleMatrixWithGeogebraCommonKernelMatrixCoords:", "ScaleMatrix", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x19, NULL, NULL },
    { "DiagonalMatrixWithDoubleArray:", "DiagonalMatrix", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x19, NULL, NULL },
    { "TranslationMatrixWithDoubleArray:", "TranslationMatrix", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x19, NULL, NULL },
    { "TranslationMatrixWithGeogebraCommonKernelMatrixCoords:", "TranslationMatrix", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x19, NULL, NULL },
    { "Rotation3DMatrixWithInt:withDouble:", "Rotation3DMatrix", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x19, NULL, NULL },
    { "Rotation3x3WithDouble:withGeogebraCommonKernelMatrixCoordMatrix:", "Rotation3x3", "V", 0x19, NULL, NULL },
    { "Rotation3x3WithGeogebraCommonKernelMatrixCoords:withDouble:withGeogebraCommonKernelMatrixCoordMatrix:", "Rotation3x3", "V", 0x19, NULL, NULL },
    { "getWithDoubleArray:", "get", "V", 0x1, NULL, NULL },
    { "getWithInt:withInt:", "get", "D", 0x1, NULL, NULL },
    { "subMatrixWithInt:withInt:", "subMatrix", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "getColumnWithInt:", "getColumn", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getGeoListWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelConstruction:", "getGeoList", "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelMatrixCoords:withInt:", "set", "V", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelMatrixCoordsArray:", "set", "V", 0x1, NULL, NULL },
    { "setWithInt:withInt:withDouble:", "set", "V", 0x1, NULL, NULL },
    { "setWithDouble:", "set", "V", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelMatrixCoordMatrix:", "set", "V", 0x1, NULL, NULL },
    { "getRows", NULL, "I", 0x1, NULL, NULL },
    { "getColumns", NULL, "I", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "copy__WithGeogebraCommonKernelMatrixCoordMatrix:", "copy", "V", 0x1, NULL, NULL },
    { "transposeCopy", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "transposeCopyWithGeogebraCommonKernelMatrixCoordMatrix:", "transposeCopy", "V", 0x1, NULL, NULL },
    { "SystemPrint", NULL, "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "isFinite", NULL, "Z", 0x1, NULL, NULL },
    { "mulWithDouble:", "mul", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "mulInsideWithDouble:", "mulInside", "V", 0x1, NULL, NULL },
    { "addWithGeogebraCommonKernelMatrixCoordMatrix:", "add", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "addSmallerWithGeogebraCommonKernelMatrixCoordMatrix:", "addSmaller", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "mulWithGeogebraCommonKernelMatrixCoords:", "mul", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "mulWithGeogebraCommonKernelMatrixCoordMatrix:", "mul", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "mulWithGeogebraCommonKernelMatrixCoordMatrix:withGeogebraCommonKernelMatrixCoordMatrix:", "mul", "V", 0x1, NULL, NULL },
    { "setMulWithGeogebraCommonKernelMatrixCoordMatrix:withGeogebraCommonKernelMatrixCoordMatrix:", "setMul", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "setMulT1WithGeogebraCommonKernelMatrixCoordMatrix:withGeogebraCommonKernelMatrixCoordMatrix:", "setMulT1", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "mul3x3WithGeogebraCommonKernelMatrixCoordMatrix:", "mul3x3", "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", 0x4, NULL, NULL },
    { "det", NULL, "D", 0x1, NULL, NULL },
    { "isSquare", NULL, "Z", 0x1, NULL, NULL },
    { "inverse", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "solveWithGeogebraCommonKernelMatrixCoords:", "solve", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "solveWithDoubleArray:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoordsArray:", "solve", "V", 0x99, NULL, NULL },
    { "updatePivotMatrix", NULL, "V", 0x2, NULL, NULL },
    { "pivotWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "pivot", "V", 0x1, NULL, NULL },
    { "pivotWithDoubleArray2:withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface:", "pivot", "V", 0x19, NULL, NULL },
    { "pivotWithDoubleArray2:withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface:withInt:withJavaUtilArrayList:", "pivot", "V", 0x1a, NULL, NULL },
    { "isSingular", NULL, "Z", 0x1, NULL, NULL },
    { "setIsSingularWithBoolean:", "setIsSingular", "V", 0x1, NULL, NULL },
    { "getOrigin", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getVx", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getVy", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getVz", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "setOriginWithGeogebraCommonKernelMatrixCoords:", "setOrigin", "V", 0x1, NULL, NULL },
    { "addToOriginWithGeogebraCommonKernelMatrixCoords:", "addToOrigin", "V", 0x1, NULL, NULL },
    { "subToOriginWithGeogebraCommonKernelMatrixCoords:", "subToOrigin", "V", 0x1, NULL, NULL },
    { "addToVxWithGeogebraCommonKernelMatrixCoords:", "addToVx", "V", 0x1, NULL, NULL },
    { "addToVyWithGeogebraCommonKernelMatrixCoords:", "addToVy", "V", 0x1, NULL, NULL },
    { "addToVzWithGeogebraCommonKernelMatrixCoords:", "addToVz", "V", 0x1, NULL, NULL },
    { "addToColumnWithGeogebraCommonKernelMatrixCoords:withInt:", "addToColumn", "V", 0x1, NULL, NULL },
    { "subToColumnWithGeogebraCommonKernelMatrixCoords:withInt:", "subToColumn", "V", 0x1, NULL, NULL },
    { "mulColumnWithDouble:withInt:", "mulColumn", "V", 0x1, NULL, NULL },
    { "mulOriginWithDouble:", "mulOrigin", "V", 0x1, NULL, NULL },
    { "setVxWithGeogebraCommonKernelMatrixCoords:", "setVx", "V", 0x1, NULL, NULL },
    { "setVyWithGeogebraCommonKernelMatrixCoords:", "setVy", "V", 0x1, NULL, NULL },
    { "setVzWithGeogebraCommonKernelMatrixCoords:", "setVz", "V", 0x1, NULL, NULL },
    { "getForGLWithFloatArray:", "getForGL", "V", 0x1, NULL, NULL },
    { "test", NULL, "V", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vectors_", NULL, 0x4, "[Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "rows_", NULL, 0x4, "I", NULL, NULL,  },
    { "columns_", NULL, 0x4, "I", NULL, NULL,  },
    { "X_AXIS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelMatrixCoordMatrix_X_AXIS },
    { "Y_AXIS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelMatrixCoordMatrix_Y_AXIS },
    { "Z_AXIS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelMatrixCoordMatrix_Z_AXIS },
    { "inverse__", "inverse", 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "pivotSolRes_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix$PivotSolRes;", NULL, NULL,  },
    { "pivotInverseMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix$PivotInverseMatrix;", NULL, NULL,  },
    { "pivotMatrix_", NULL, 0x2, "[[D", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.Matrix.CoordMatrix$PivotInterface;", "Lgeogebra.common.kernel.Matrix.CoordMatrix$PivotSolRes;", "Lgeogebra.common.kernel.Matrix.CoordMatrix$PivotInverseMatrix;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelMatrixCoordMatrix = { 2, "CoordMatrix", "geogebra.common.kernel.Matrix", NULL, 0x1, 73, methods, 10, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelMatrixCoordMatrix;
}

@end

void GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_withDoubleArray_(GeogebraCommonKernelMatrixCoordMatrix *self, jint rows, jint columns, IOSDoubleArray *val) {
  NSObject_init(self);
  self->rows_ = rows;
  self->columns_ = columns;
  GeogebraCommonKernelMatrixCoordMatrix_setAndConsume_vectors_(self, [IOSObjectArray newArrayWithLength:columns type:GeogebraCommonKernelMatrixCoords_class_()]);
  for (jint j = 0; j < columns; j++) {
    IOSObjectArray_SetAndConsume(self->vectors_, j, new_GeogebraCommonKernelMatrixCoords_initWithInt_(rows));
    for (jint i = 0; i < rows; i++) {
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->vectors_, j))) setWithInt:i + 1 withDouble:IOSDoubleArray_Get(nil_chk(val), j * rows + i)];
    }
  }
}

GeogebraCommonKernelMatrixCoordMatrix *new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_withDoubleArray_(jint rows, jint columns, IOSDoubleArray *val) {
  GeogebraCommonKernelMatrixCoordMatrix *self = [GeogebraCommonKernelMatrixCoordMatrix alloc];
  GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_withDoubleArray_(self, rows, columns, val);
  return self;
}

void GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(GeogebraCommonKernelMatrixCoordMatrix *self, jint rows, jint columns) {
  NSObject_init(self);
  GeogebraCommonKernelMatrixCoordMatrix_initialiseWithInt_withInt_(self, rows, columns);
}

GeogebraCommonKernelMatrixCoordMatrix *new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(jint rows, jint columns) {
  GeogebraCommonKernelMatrixCoordMatrix *self = [GeogebraCommonKernelMatrixCoordMatrix alloc];
  GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(self, rows, columns);
  return self;
}

void GeogebraCommonKernelMatrixCoordMatrix_initialiseWithInt_withInt_(GeogebraCommonKernelMatrixCoordMatrix *self, jint rows, jint columns) {
  self->rows_ = rows;
  self->columns_ = columns;
  GeogebraCommonKernelMatrixCoordMatrix_setAndConsume_vectors_(self, [IOSObjectArray newArrayWithLength:columns type:GeogebraCommonKernelMatrixCoords_class_()]);
  for (jint i = 0; i < columns; i++) {
    IOSObjectArray_SetAndConsume(self->vectors_, i, new_GeogebraCommonKernelMatrixCoords_initWithInt_(rows));
  }
}

void GeogebraCommonKernelMatrixCoordMatrix_initWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelMatrixCoordMatrix *self, GeogebraCommonKernelGeosGeoList *inputList) {
  NSObject_init(self);
  jint cols = [((GeogebraCommonKernelGeosGeoList *) nil_chk(inputList)) size];
  if (![inputList isDefined] || cols == 0) {
    [self setIsSingularWithBoolean:YES];
    return;
  }
  GeogebraCommonKernelGeosGeoElement *geo = [inputList getWithInt:0];
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
    [self setIsSingularWithBoolean:YES];
    return;
  }
  jint rows = [((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])) size];
  if (rows == 0) {
    [self setIsSingularWithBoolean:YES];
    return;
  }
  GeogebraCommonKernelMatrixCoordMatrix_initialiseWithInt_withInt_(self, rows, cols);
  GeogebraCommonKernelGeosGeoList *columnList;
  for (jint r = 0; r < rows; r++) {
    geo = [inputList getWithInt:r];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
      [self setIsSingularWithBoolean:YES];
      return;
    }
    columnList = (GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class]);
    if ([columnList size] != self->columns_) {
      [self setIsSingularWithBoolean:YES];
      return;
    }
    for (jint c = 0; c < rows; c++) {
      geo = [columnList getWithInt:c];
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) {
        [self setIsSingularWithBoolean:YES];
        return;
      }
      [self setWithInt:r + 1 withInt:c + 1 withDouble:[((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) getValue]];
    }
  }
}

GeogebraCommonKernelMatrixCoordMatrix *new_GeogebraCommonKernelMatrixCoordMatrix_initWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelMatrixCoordMatrix *self = [GeogebraCommonKernelMatrixCoordMatrix alloc];
  GeogebraCommonKernelMatrixCoordMatrix_initWithGeogebraCommonKernelGeosGeoList_(self, inputList);
  return self;
}

GeogebraCommonKernelMatrixCoordMatrix *GeogebraCommonKernelMatrixCoordMatrix_IdentityWithInt_(jint n) {
  GeogebraCommonKernelMatrixCoordMatrix_initialize();
  GeogebraCommonKernelMatrixCoordMatrix *m = [new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(n, n) autorelease];
  for (jint i = 1; i <= n; i++) {
    [m setWithInt:i withInt:i withDouble:1.0];
  }
  return m;
}

GeogebraCommonKernelMatrixCoordMatrix *GeogebraCommonKernelMatrixCoordMatrix_ScaleMatrixWithDoubleArray_(IOSDoubleArray *v) {
  GeogebraCommonKernelMatrixCoordMatrix_initialize();
  return GeogebraCommonKernelMatrixCoordMatrix_ScaleMatrixWithGeogebraCommonKernelMatrixCoords_([new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_(v) autorelease]);
}

GeogebraCommonKernelMatrixCoordMatrix *GeogebraCommonKernelMatrixCoordMatrix_ScaleMatrixWithGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelMatrixCoords *v) {
  GeogebraCommonKernelMatrixCoordMatrix_initialize();
  jint n = [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getLength];
  GeogebraCommonKernelMatrixCoordMatrix *m = [new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(n + 1, n + 1) autorelease];
  for (jint i = 1; i <= n; i++) {
    [m setWithInt:i withInt:i withDouble:[v getWithInt:i]];
  }
  [m setWithInt:n + 1 withInt:n + 1 withDouble:1.0];
  return m;
}

GeogebraCommonKernelMatrixCoordMatrix *GeogebraCommonKernelMatrixCoordMatrix_DiagonalMatrixWithDoubleArray_(IOSDoubleArray *vals) {
  GeogebraCommonKernelMatrixCoordMatrix_initialize();
  jint n = ((IOSDoubleArray *) nil_chk(vals))->size_;
  GeogebraCommonKernelMatrixCoordMatrix *m = [new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(n, n) autorelease];
  for (jint i = 1; i <= n; i++) {
    [m setWithInt:i withInt:i withDouble:IOSDoubleArray_Get(vals, i - 1)];
  }
  return m;
}

GeogebraCommonKernelMatrixCoordMatrix *GeogebraCommonKernelMatrixCoordMatrix_TranslationMatrixWithDoubleArray_(IOSDoubleArray *v) {
  GeogebraCommonKernelMatrixCoordMatrix_initialize();
  return GeogebraCommonKernelMatrixCoordMatrix_TranslationMatrixWithGeogebraCommonKernelMatrixCoords_([new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_(v) autorelease]);
}

GeogebraCommonKernelMatrixCoordMatrix *GeogebraCommonKernelMatrixCoordMatrix_TranslationMatrixWithGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelMatrixCoords *v) {
  GeogebraCommonKernelMatrixCoordMatrix_initialize();
  jint n = [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getLength];
  GeogebraCommonKernelMatrixCoordMatrix *m = [new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(n + 1, n + 1) autorelease];
  for (jint i = 1; i <= n; i++) {
    [m setWithInt:i withInt:i withDouble:1.0];
    [m setWithInt:i withInt:n + 1 withDouble:[v getWithInt:i]];
  }
  [m setWithInt:n + 1 withInt:n + 1 withDouble:1.0];
  return m;
}

GeogebraCommonKernelMatrixCoordMatrix *GeogebraCommonKernelMatrixCoordMatrix_Rotation3DMatrixWithInt_withDouble_(jint axe, jdouble angle) {
  GeogebraCommonKernelMatrixCoordMatrix_initialize();
  GeogebraCommonKernelMatrixCoordMatrix *m = [new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 4) autorelease];
  switch (axe) {
    case GeogebraCommonKernelMatrixCoordMatrix_Z_AXIS:
    [m setWithInt:1 withInt:1 withDouble:JavaLangMath_cosWithDouble_(angle)];
    [m setWithInt:1 withInt:2 withDouble:-JavaLangMath_sinWithDouble_(angle)];
    [m setWithInt:2 withInt:1 withDouble:JavaLangMath_sinWithDouble_(angle)];
    [m setWithInt:2 withInt:2 withDouble:JavaLangMath_cosWithDouble_(angle)];
    [m setWithInt:3 withInt:3 withDouble:1.0];
    break;
    case GeogebraCommonKernelMatrixCoordMatrix_X_AXIS:
    [m setWithInt:1 withInt:1 withDouble:1.0];
    [m setWithInt:2 withInt:2 withDouble:JavaLangMath_cosWithDouble_(angle)];
    [m setWithInt:2 withInt:3 withDouble:-JavaLangMath_sinWithDouble_(angle)];
    [m setWithInt:3 withInt:2 withDouble:JavaLangMath_sinWithDouble_(angle)];
    [m setWithInt:3 withInt:3 withDouble:JavaLangMath_cosWithDouble_(angle)];
    break;
    case GeogebraCommonKernelMatrixCoordMatrix_Y_AXIS:
    [m setWithInt:2 withInt:2 withDouble:1.0];
    [m setWithInt:3 withInt:3 withDouble:JavaLangMath_cosWithDouble_(angle)];
    [m setWithInt:3 withInt:1 withDouble:-JavaLangMath_sinWithDouble_(angle)];
    [m setWithInt:1 withInt:3 withDouble:JavaLangMath_sinWithDouble_(angle)];
    [m setWithInt:1 withInt:1 withDouble:JavaLangMath_cosWithDouble_(angle)];
    break;
    default:
    break;
  }
  [m setWithInt:4 withInt:4 withDouble:1.0];
  return m;
}

void GeogebraCommonKernelMatrixCoordMatrix_Rotation3x3WithDouble_withGeogebraCommonKernelMatrixCoordMatrix_(jdouble angle, GeogebraCommonKernelMatrixCoordMatrix *m) {
  GeogebraCommonKernelMatrixCoordMatrix_initialize();
  jdouble cos = JavaLangMath_cosWithDouble_(angle);
  jdouble sin = JavaLangMath_sinWithDouble_(angle);
  [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m)) setWithInt:1 withInt:1 withDouble:cos];
  [m setWithInt:1 withInt:2 withDouble:-sin];
  [m setWithInt:2 withInt:1 withDouble:sin];
  [m setWithInt:2 withInt:2 withDouble:cos];
  [m setWithInt:3 withInt:3 withDouble:1];
}

void GeogebraCommonKernelMatrixCoordMatrix_Rotation3x3WithGeogebraCommonKernelMatrixCoords_withDouble_withGeogebraCommonKernelMatrixCoordMatrix_(GeogebraCommonKernelMatrixCoords *u, jdouble angle, GeogebraCommonKernelMatrixCoordMatrix *m) {
  GeogebraCommonKernelMatrixCoordMatrix_initialize();
  jdouble ux = [((GeogebraCommonKernelMatrixCoords *) nil_chk(u)) getX];
  jdouble uy = [u getY];
  jdouble uz = [u getZ];
  jdouble c = JavaLangMath_cosWithDouble_(angle);
  jdouble s = JavaLangMath_sinWithDouble_(angle);
  IOSObjectArray *vectors = ((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m))->vectors_;
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(vectors), 0))) setXWithDouble:ux * ux * (1 - c) + c];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(vectors, 0))) setYWithDouble:ux * uy * (1 - c) + uz * s];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(vectors, 0))) setZWithDouble:ux * uz * (1 - c) - uy * s];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(vectors, 1))) setXWithDouble:ux * uy * (1 - c) - uz * s];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(vectors, 1))) setYWithDouble:uy * uy * (1 - c) + c];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(vectors, 1))) setZWithDouble:uy * uz * (1 - c) + ux * s];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(vectors, 2))) setXWithDouble:ux * uz * (1 - c) + uy * s];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(vectors, 2))) setYWithDouble:uy * uz * (1 - c) - ux * s];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(vectors, 2))) setZWithDouble:uz * uz * (1 - c) + c];
}

void GeogebraCommonKernelMatrixCoordMatrix_solveWithDoubleArray_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordsArray_(IOSDoubleArray *sol, GeogebraCommonKernelMatrixCoords *res, IOSObjectArray *columns) {
  GeogebraCommonKernelMatrixCoordMatrix_initialize();
  jint size = [((GeogebraCommonKernelMatrixCoords *) nil_chk(res)) getLength];
  IOSObjectArray *matrix = [IOSObjectArray arrayWithLength:size type:IOSClass_doubleArray(1)];
  for (jint i = 0; i < size; i++) {
    IOSObjectArray_SetAndConsume(matrix, i, [IOSDoubleArray newArrayWithLength:size]);
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(columns), i))) copy__WithDoubleArray:IOSObjectArray_Get(matrix, i)];
  }
  GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes *pivotSolRes = [new_GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes_init() autorelease];
  GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes_setAndConsume_res_(pivotSolRes, [IOSDoubleArray newArrayWithLength:size]);
  [res copy__WithDoubleArray:pivotSolRes->res_];
  GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes_set_sol_(pivotSolRes, sol);
  GeogebraCommonKernelMatrixCoordMatrix_pivotWithDoubleArray2_withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface_(matrix, pivotSolRes);
}

void GeogebraCommonKernelMatrixCoordMatrix_updatePivotMatrix(GeogebraCommonKernelMatrixCoordMatrix *self) {
  if (self->pivotMatrix_ == nil) {
    GeogebraCommonKernelMatrixCoordMatrix_setAndConsume_pivotMatrix_(self, [IOSObjectArray newArrayWithLength:self->columns_ type:IOSClass_doubleArray(1)]);
  }
  for (jint c = 0; c < self->columns_; c++) {
    IOSObjectArray_SetAndConsume(nil_chk(self->pivotMatrix_), c, [IOSDoubleArray newArrayWithLength:self->rows_]);
    for (jint r = 0; r < self->rows_; r++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(self->pivotMatrix_, c)), r) = [self getWithInt:r + 1 withInt:c + 1];
    }
  }
}

void GeogebraCommonKernelMatrixCoordMatrix_pivotWithDoubleArray2_withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface_(IOSObjectArray *matrix, id<GeogebraCommonKernelMatrixCoordMatrix_PivotInterface> psr) {
  GeogebraCommonKernelMatrixCoordMatrix_initialize();
  jint size = ((IOSObjectArray *) nil_chk(matrix))->size_;
  JavaUtilArrayList *stack = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = size - 1; i >= 0; i--) {
    [stack addWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  GeogebraCommonKernelMatrixCoordMatrix_pivotWithDoubleArray2_withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface_withInt_withJavaUtilArrayList_(matrix, psr, size - 1, stack);
}

void GeogebraCommonKernelMatrixCoordMatrix_pivotWithDoubleArray2_withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface_withInt_withJavaUtilArrayList_(IOSObjectArray *matrix, id<GeogebraCommonKernelMatrixCoordMatrix_PivotInterface> psr, jint step, JavaUtilArrayList *stack) {
  GeogebraCommonKernelMatrixCoordMatrix_initialize();
  if (step == 0) {
    jint index = [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(stack)) getWithInt:0])) intValue];
    [((id<GeogebraCommonKernelMatrixCoordMatrix_PivotInterface>) nil_chk(psr)) divideFirstWithInt:index withDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix), index)), 0)];
  }
  else {
    jint stackIndex = 0;
    jint index = [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(stack)) getWithInt:0])) intValue];
    jdouble value = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix), index)), step);
    for (jint currentStackIndex = 1; currentStackIndex < [stack size]; currentStackIndex++) {
      jint currentIndex = [((JavaLangInteger *) nil_chk([stack getWithInt:currentStackIndex])) intValue];
      jdouble currentValue = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(matrix, currentIndex)), step);
      if (JavaLangMath_absWithDouble_(currentValue) > JavaLangMath_absWithDouble_(value)) {
        stackIndex = currentStackIndex;
        index = currentIndex;
        value = currentValue;
      }
    }
    for (JavaLangInteger *boxed__ in stack) {
      jint i = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(matrix, i)), step) /= value;
    }
    [((id<GeogebraCommonKernelMatrixCoordMatrix_PivotInterface>) nil_chk(psr)) divideResWithInt:step withDouble:value];
    for (jint l = 0; l < step; l++) {
      jdouble coef = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(matrix, index)), l);
      for (JavaLangInteger *boxed__ in stack) {
        jint i = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(matrix, i)), l) -= coef * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(matrix, i)), step);
      }
      [psr subResWithInt:l withInt:step withDouble:coef];
    }
    [stack removeWithInt:stackIndex];
    GeogebraCommonKernelMatrixCoordMatrix_pivotWithDoubleArray2_withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface_withInt_withJavaUtilArrayList_(matrix, psr, step - 1, stack);
    [psr calcSolWithInt:index withInt:step withDoubleArray2:matrix withJavaUtilArrayList:stack];
    [stack addWithId:JavaLangInteger_valueOfWithInt_(index)];
  }
}

void GeogebraCommonKernelMatrixCoordMatrix_test() {
  GeogebraCommonKernelMatrixCoordMatrix_initialize();
  GeogebraCommonKernelMatrixCoordMatrix *matrix = [new_GeogebraCommonKernelMatrixCoordMatrix4x4_init() autorelease];
  [matrix setVxWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(1, 1, -1, 0) autorelease]];
  [matrix setVyWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(-1, 1, -1, 0) autorelease]];
  [matrix setVzWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(1, 2, 5, 0) autorelease]];
  [matrix setOriginWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(4, 5, 6, 1) autorelease]];
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$", @"==== MATRIX ====\n", [matrix description])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"==== INVERSE ====\n", [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk([matrix inverse])) description])];
  GeogebraCommonKernelMatrixCoordMatrix_setAndConsume_pivotInverseMatrix_(matrix, new_GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix_init());
  GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix_setAndConsume_matrixRes_(matrix->pivotInverseMatrix_, [IOSDoubleArray newArrayWithLength:4 * 4]);
  for (jint c = 0; c < 4; c++) {
    *IOSDoubleArray_GetRef(matrix->pivotInverseMatrix_->matrixRes_, c * 4 + c) = 1;
  }
  GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix_set_inverse_(matrix->pivotInverseMatrix_, ((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(matrix->inverse__))->vectors_);
  matrix->pivotInverseMatrix_->columns_ = [matrix getColumns];
  IOSObjectArray *matrixD = [IOSObjectArray arrayWithLength:matrix->columns_ type:IOSClass_doubleArray(1)];
  for (jint c = 0; c < matrix->columns_; c++) {
    IOSObjectArray_SetAndConsume(matrixD, c, [IOSDoubleArray newArrayWithLength:matrix->rows_]);
    for (jint r = 0; r < matrix->rows_; r++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(matrixD, c)), r) = [matrix getWithInt:r + 1 withInt:c + 1];
    }
  }
  GeogebraCommonKernelMatrixCoordMatrix_pivotWithDoubleArray2_withGeogebraCommonKernelMatrixCoordMatrix_PivotInterface_(matrixD, matrix->pivotInverseMatrix_);
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"==== PIVOT INVERSE ====\n", [matrix->inverse__ description])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"==== MATRIX * INVERSE ====\n", [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk([matrix mulWithGeogebraCommonKernelMatrixCoordMatrix:matrix->inverse__])) description])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelMatrixCoordMatrix)

@implementation GeogebraCommonKernelMatrixCoordMatrix_PivotInterface

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "divideFirstWithInt:withDouble:", "divideFirst", "V", 0x401, NULL, NULL },
    { "divideResWithInt:withDouble:", "divideRes", "V", 0x401, NULL, NULL },
    { "subResWithInt:withInt:withDouble:", "subRes", "V", 0x401, NULL, NULL },
    { "calcSolWithInt:withInt:withDoubleArray2:withJavaUtilArrayList:", "calcSol", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelMatrixCoordMatrix_PivotInterface = { 2, "PivotInterface", "geogebra.common.kernel.Matrix", "CoordMatrix", 0x60a, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelMatrixCoordMatrix_PivotInterface;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonKernelMatrixCoordMatrix_PivotInterface)

@implementation GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes

- (instancetype)init {
  GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes_init(self);
  return self;
}

- (void)divideFirstWithInt:(jint)index
                withDouble:(jdouble)factor {
  *IOSDoubleArray_GetRef(nil_chk(sol_), index) = IOSDoubleArray_Get(nil_chk(res_), 0) / factor;
}

- (void)divideResWithInt:(jint)step
              withDouble:(jdouble)value {
  *IOSDoubleArray_GetRef(nil_chk(res_), step) /= value;
}

- (void)subResWithInt:(jint)l
              withInt:(jint)step
           withDouble:(jdouble)coef {
  *IOSDoubleArray_GetRef(nil_chk(res_), l) -= coef * IOSDoubleArray_Get(res_, step);
}

- (void)calcSolWithInt:(jint)index
               withInt:(jint)step
      withDoubleArray2:(IOSObjectArray *)matrix
 withJavaUtilArrayList:(JavaUtilArrayList *)stack {
  jdouble s = IOSDoubleArray_Get(nil_chk(res_), step);
  for (JavaLangInteger *boxed__ in nil_chk(stack)) {
    jint i = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    s -= IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix), i)), step) * IOSDoubleArray_Get(nil_chk(sol_), i);
  }
  *IOSDoubleArray_GetRef(nil_chk(sol_), index) = s;
}

- (void)dealloc {
  RELEASE_(sol_);
  RELEASE_(res_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PivotSolRes", NULL, 0x1, NULL, NULL },
    { "divideFirstWithInt:withDouble:", "divideFirst", "V", 0x1, NULL, NULL },
    { "divideResWithInt:withDouble:", "divideRes", "V", 0x1, NULL, NULL },
    { "subResWithInt:withInt:withDouble:", "subRes", "V", 0x1, NULL, NULL },
    { "calcSolWithInt:withInt:withDoubleArray2:withJavaUtilArrayList:", "calcSol", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sol_", NULL, 0x1, "[D", NULL, NULL,  },
    { "res_", NULL, 0x1, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes = { 2, "PivotSolRes", "geogebra.common.kernel.Matrix", "CoordMatrix", 0xa, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes;
}

@end

void GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes_init(GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes *self) {
  NSObject_init(self);
}

GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes *new_GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes_init() {
  GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes *self = [GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes alloc];
  GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelMatrixCoordMatrix_PivotSolRes)

@implementation GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix

- (instancetype)init {
  GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix_init(self);
  return self;
}

- (void)divideFirstWithInt:(jint)index
                withDouble:(jdouble)factor {
  for (jint i = 0; i < columns_; i++) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(inverse_), i))) setWithInt:index + 1 withDouble:IOSDoubleArray_Get(nil_chk(matrixRes_), i * columns_) / factor];
  }
}

- (void)divideResWithInt:(jint)step
              withDouble:(jdouble)value {
  for (jint i = 0; i < columns_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(matrixRes_), step + i * columns_) /= value;
  }
}

- (void)subResWithInt:(jint)l
              withInt:(jint)step
           withDouble:(jdouble)coef {
  for (jint i = 0; i < columns_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(matrixRes_), l + i * columns_) -= coef * IOSDoubleArray_Get(matrixRes_, step + i * columns_);
  }
}

- (void)calcSolWithInt:(jint)index
               withInt:(jint)step
      withDoubleArray2:(IOSObjectArray *)matrix
 withJavaUtilArrayList:(JavaUtilArrayList *)stack {
  for (jint j = 0; j < columns_; j++) {
    jdouble s = IOSDoubleArray_Get(nil_chk(matrixRes_), step + j * columns_);
    for (JavaLangInteger *boxed__ in nil_chk(stack)) {
      jint i = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      s -= IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix), i)), step) * [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(inverse_), j))) getWithInt:i + 1];
    }
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(inverse_), j))) setWithInt:index + 1 withDouble:s];
  }
}

- (void)dealloc {
  RELEASE_(matrixRes_);
  RELEASE_(inverse_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PivotInverseMatrix", NULL, 0x1, NULL, NULL },
    { "divideFirstWithInt:withDouble:", "divideFirst", "V", 0x1, NULL, NULL },
    { "divideResWithInt:withDouble:", "divideRes", "V", 0x1, NULL, NULL },
    { "subResWithInt:withInt:withDouble:", "subRes", "V", 0x1, NULL, NULL },
    { "calcSolWithInt:withInt:withDoubleArray2:withJavaUtilArrayList:", "calcSol", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "columns_", NULL, 0x1, "I", NULL, NULL,  },
    { "matrixRes_", NULL, 0x1, "[D", NULL, NULL,  },
    { "inverse_", NULL, 0x1, "[Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix = { 2, "PivotInverseMatrix", "geogebra.common.kernel.Matrix", "CoordMatrix", 0xa, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix;
}

@end

void GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix_init(GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix *self) {
  NSObject_init(self);
}

GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix *new_GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix_init() {
  GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix *self = [GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix alloc];
  GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelMatrixCoordMatrix_PivotInverseMatrix)
