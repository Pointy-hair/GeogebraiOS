//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/options/model/ShowObjectModel.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/gui/dialog/options/model/BooleanOptionModel.h"
#include "geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "geogebra/common/gui/dialog/options/model/ShowObjectModel.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"

@interface GeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener : NSObject
@end

@implementation GeogebraCommonGuiDialogOptionsModelShowObjectModel

- (instancetype)initWithGeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener:(id<GeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener>)listener {
  GeogebraCommonGuiDialogOptionsModelShowObjectModel_initWithGeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener_(self, listener);
  return self;
}

- (void)updateProperties {
  GeogebraCommonKernelGeosGeoElement *temp, *geo0 = [self getGeoAtWithInt:0];
  jboolean equalObjectVal = YES;
  jboolean showObjectCondition = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getShowObjectCondition] != nil;
  for (jint i = 1; i < [self getGeosLength]; i++) {
    temp = [self getGeoAtWithInt:i];
    if ([geo0 isSetEuclidianVisible] != [((GeogebraCommonKernelGeosGeoElement *) nil_chk(temp)) isSetEuclidianVisible]) {
      equalObjectVal = NO;
      break;
    }
    if ([temp getShowObjectCondition] != nil) {
      showObjectCondition = YES;
    }
  }
  [((id<GeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener>) nil_chk(((id<GeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener>) check_protocol_cast([self getListener], @protocol(GeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener))))) updateCheckboxWithBoolean:equalObjectVal ? [geo0 isSetEuclidianVisible] : NO withBoolean:!showObjectCondition];
}

- (jboolean)isValidAtWithInt:(jint)index {
  jboolean isValid = YES;
  GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:index];
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDrawable] || ([geo isGeoNumeric] && [geo isFixed])) {
    isValid = NO;
  }
  return isValid;
}

- (jboolean)getValueAtWithInt:(jint)index {
  return NO;
}

- (void)applyWithInt:(jint)index
         withBoolean:(jboolean)value {
  GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:index];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setEuclidianVisibleWithBoolean:value];
  [geo updateRepaint];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener:", "ShowObjectModel", NULL, 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x1, NULL, NULL },
    { "getValueAtWithInt:", "getValueAt", "Z", 0x1, NULL, NULL },
    { "applyWithInt:withBoolean:", "apply", "V", 0x1, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.dialog.options.model.ShowObjectModel$IShowObjectListener;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelShowObjectModel = { 2, "ShowObjectModel", "geogebra.common.gui.dialog.options.model", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelShowObjectModel;
}

@end

void GeogebraCommonGuiDialogOptionsModelShowObjectModel_initWithGeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener_(GeogebraCommonGuiDialogOptionsModelShowObjectModel *self, id<GeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener> listener) {
  GeogebraCommonGuiDialogOptionsModelBooleanOptionModel_initWithGeogebraCommonGuiDialogOptionsModelBooleanOptionModel_IBooleanOptionListener_(self, listener);
}

GeogebraCommonGuiDialogOptionsModelShowObjectModel *new_GeogebraCommonGuiDialogOptionsModelShowObjectModel_initWithGeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener_(id<GeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener> listener) {
  GeogebraCommonGuiDialogOptionsModelShowObjectModel *self = [GeogebraCommonGuiDialogOptionsModelShowObjectModel alloc];
  GeogebraCommonGuiDialogOptionsModelShowObjectModel_initWithGeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener_(self, listener);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelShowObjectModel)

@implementation GeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "updateCheckboxWithBoolean:withBoolean:", "updateCheckbox", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener = { 2, "IShowObjectListener", "geogebra.common.gui.dialog.options.model", "ShowObjectModel", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelShowObjectModel_IShowObjectListener)
