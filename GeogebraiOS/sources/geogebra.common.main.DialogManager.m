//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/main/DialogManager.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianControllerCompanion.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/gui/InputHandler.h"
#include "geogebra/common/gui/dialog/InputDialog.h"
#include "geogebra/common/gui/dialog/TextInputDialog.h"
#include "geogebra/common/gui/dialog/handler/ColorChangeHandler.h"
#include "geogebra/common/gui/dialog/handler/RedefineInputHandler.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/Transformable.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/DialogManager.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/OptionType.h"
#include "geogebra/common/util/AsyncOperation.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@interface GeogebraCommonMainDialogManager () {
 @public
  id oldString_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonMainDialogManager, oldString_, id)

__attribute__((unused)) static void GeogebraCommonMainDialogManager_showTextDialogWithGeogebraCommonKernelGeosGeoText_(GeogebraCommonMainDialogManager *self, GeogebraCommonKernelGeosGeoText *text);

@implementation GeogebraCommonMainDialogManager

- (instancetype)init {
  GeogebraCommonMainDialogManager_init(self);
  return self;
}

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonMainDialogManager_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

- (jboolean)showFunctionInspectorWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)geoFunction {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)showDataSourceDialogWithInt:(jint)mode
                        withBoolean:(jboolean)doAutoLoadSelectedGeos {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showRedefineDialogWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                     withBoolean:(jboolean)allowTextDialog {
  if (allowTextDialog && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText] && ![geo isTextCommand]) {
    GeogebraCommonMainDialogManager_showTextDialogWithGeogebraCommonKernelGeosGeoText_(self, (GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class]));
    return;
  }
  NSString *str = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getRedefineStringWithBoolean:NO withBoolean:YES];
  id<GeogebraCommonGuiInputHandler> handler = [new_GeogebraCommonGuiDialogHandlerRedefineInputHandler_initWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoElement_withNSString_(app_, geo, str) autorelease];
  [self newInputDialogWithGeogebraCommonMainApp:app_ withNSString:[geo getNameDescription] withNSString:[((GeogebraCommonMainApp *) nil_chk(app_)) getPlainWithNSString:@"Redefine"] withNSString:str withBoolean:YES withGeogebraCommonGuiInputHandler:handler withGeogebraCommonKernelGeosGeoElement:geo];
}

- (GeogebraCommonGuiDialogInputDialog *)newInputDialogWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                                                   withNSString:(NSString *)message
                                                                   withNSString:(NSString *)title
                                                                   withNSString:(NSString *)initString
                                                                    withBoolean:(jboolean)autoComplete
                                              withGeogebraCommonGuiInputHandler:(id<GeogebraCommonGuiInputHandler>)handler
                                         withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)showNumberInputDialogSegmentFixedWithNSString:(NSString *)menu
           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showNumberInputDialogAngleFixedWithNSString:(NSString *)menu
  withGeogebraCommonKernelKernelNDGeoSegmentNDArray:(IOSObjectArray *)selectedSegments
    withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)selectedPoints
        withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)selGeos
     withGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)ec {
  GeogebraCommonMainDialogManager_doAngleFixedWithGeogebraCommonKernelKernel_withGeogebraCommonKernelKernelNDGeoSegmentNDArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoNumberValue_withBoolean_withGeogebraCommonEuclidianEuclidianController_([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel], selectedSegments, selectedPoints, selGeos, [self getNumberWithGeogebraCommonKernelKernel:[app_ getKernel] withNSString:JreStrcat("$C$", menu, ' ', [app_ getPlainWithNSString:@"Length"]) withNSString:@""], NO, ec);
}

+ (void)doAngleFixedWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
 withGeogebraCommonKernelKernelNDGeoSegmentNDArray:(IOSObjectArray *)segments
   withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
       withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)selGeo2s
        withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)num
                                       withBoolean:(jboolean)clockWise
    withGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)ec {
  GeogebraCommonMainDialogManager_doAngleFixedWithGeogebraCommonKernelKernel_withGeogebraCommonKernelKernelNDGeoSegmentNDArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoNumberValue_withBoolean_withGeogebraCommonEuclidianEuclidianController_(kernel, segments, points, selGeo2s, num, clockWise, ec);
}

- (jboolean)showSliderCreationDialogWithInt:(jint)x
                                    withInt:(jint)y {
  GeogebraCommonKernelKernel *kernel = [((GeogebraCommonMainApp *) nil_chk(app_)) getKernel];
  jboolean isAngle = ![self confirmWithNSString:@"OK for number, Cancel for angle"];
  GeogebraCommonKernelGeosGeoNumeric *slider = GeogebraCommonKernelGeosGeoNumeric_setSliderFromDefaultWithGeogebraCommonKernelGeosGeoNumeric_withBoolean_(isAngle ? [new_GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction]) autorelease] : [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction]) autorelease], isAngle);
  GeogebraCommonKernelStringTemplate *tmpl = GeogebraCommonKernelStringTemplate_get_defaultTemplate_();
  NSString *minStr = isAngle ? JreStrcat("$$", [((GeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:JavaLangMath_toDegreesWithDouble_([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slider)) getIntervalMin]) withGeogebraCommonKernelStringTemplate:tmpl], GeogebraCommonUtilUnicode_get_degree_()) : [((GeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slider)) getIntervalMin] withGeogebraCommonKernelStringTemplate:tmpl];
  NSString *maxStr = isAngle ? JreStrcat("$$", [((GeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:JavaLangMath_toDegreesWithDouble_([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slider)) getIntervalMax]) withGeogebraCommonKernelStringTemplate:tmpl], GeogebraCommonUtilUnicode_get_degree_()) : [((GeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slider)) getIntervalMax] withGeogebraCommonKernelStringTemplate:tmpl];
  NSString *incStr = isAngle ? JreStrcat("$$", [((GeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:JavaLangMath_toDegreesWithDouble_([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slider)) getAnimationStep]) withGeogebraCommonKernelStringTemplate:tmpl], GeogebraCommonUtilUnicode_get_degree_()) : [((GeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slider)) getAnimationStep] withGeogebraCommonKernelStringTemplate:tmpl];
  id<GeogebraCommonKernelArithmeticNumberValue> min = [self getNumberWithGeogebraCommonKernelKernel:kernel withNSString:@"Enter minimum" withNSString:minStr];
  id<GeogebraCommonKernelArithmeticNumberValue> max = [self getNumberWithGeogebraCommonKernelKernel:kernel withNSString:@"Enter maximum" withNSString:maxStr];
  id<GeogebraCommonKernelArithmeticNumberValue> increment = [self getNumberWithGeogebraCommonKernelKernel:kernel withNSString:@"Enter increment" withNSString:incStr];
  if (min != nil) [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slider)) setIntervalMinWithGeogebraCommonKernelArithmeticNumberValue:min];
  if (max != nil) [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slider)) setIntervalMaxWithGeogebraCommonKernelArithmeticNumberValue:max];
  if (increment != nil) [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slider)) setAnimationStepWithGeogebraCommonKernelArithmeticNumberValue:increment];
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slider)) setLabelWithNSString:nil];
  [slider setValueWithDouble:isAngle ? 45 * JavaLangMath_PI / 180 : 1];
  [slider setSliderLocationWithDouble:x withDouble:y withBoolean:YES];
  [slider setEuclidianVisibleWithBoolean:YES];
  [slider setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE];
  [slider setLabelVisibleWithBoolean:YES];
  [slider update];
  [app_ storeUndoInfo];
  return YES;
}

- (jboolean)confirmWithNSString:(NSString *)string {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)showNumberInputDialogRotateWithNSString:(NSString *)menu
    withGeogebraCommonKernelGeosGeoPolygonArray:(IOSObjectArray *)selectedPolygons
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)selectedPoints
    withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)selGeos
 withGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)ec {
  NSString *inputString = [self promptWithNSString:JreStrcat("$C$", menu, ' ', [((GeogebraCommonMainApp *) nil_chk(app_)) getPlainWithNSString:@"Angle"]) withNSString:defaultAngle_];
  GeogebraCommonMainDialogManager_set_defaultAngle_(self, GeogebraCommonMainDialogManager_rotateObjectWithGeogebraCommonMainApp_withNSString_withBoolean_withGeogebraCommonKernelGeosGeoPolygonArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonEuclidianEuclidianController_(app_, inputString, NO, selectedPolygons, selectedPoints, selGeos, ec));
}

- (void)showNumberInputDialogDilateWithNSString:(NSString *)menu
    withGeogebraCommonKernelGeosGeoPolygonArray:(IOSObjectArray *)selectedPolygons
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)selectedPoints
    withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)selGeos
 withGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)ec {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showNumberInputDialogRegularPolygonWithNSString:(NSString *)menu
         withGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)ec
             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint1
             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showBooleanCheckboxCreationDialogWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)loc
                              withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)bool_ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showNumberInputDialogCirclePointRadiusWithNSString:(NSString *)title
                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPointND
                  withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showNumberInputDialogWithNSString:(NSString *)title
                             withNSString:(NSString *)message
                             withNSString:(NSString *)initText
     withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)callback {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showNumberInputDialogWithNSString:(NSString *)title
                             withNSString:(NSString *)message
                             withNSString:(NSString *)initText
                              withBoolean:(jboolean)changingSign
                             withNSString:(NSString *)checkBoxText
     withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)callback {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showAngleInputDialogWithNSString:(NSString *)title
                            withNSString:(NSString *)message
                            withNSString:(NSString *)initText
    withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)callback {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)showButtonCreationDialogWithInt:(jint)x
                                    withInt:(jint)y
                                withBoolean:(jboolean)textfield {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (NSString *)rotateObjectWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                       withNSString:(NSString *)inputText
                                        withBoolean:(jboolean)clockwise
        withGeogebraCommonKernelGeosGeoPolygonArray:(IOSObjectArray *)polys
    withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
        withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)selGeos
     withGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)ec {
  return GeogebraCommonMainDialogManager_rotateObjectWithGeogebraCommonMainApp_withNSString_withBoolean_withGeogebraCommonKernelGeosGeoPolygonArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonEuclidianEuclidianController_(app, inputText, clockwise, polys, points, selGeos, ec);
}

+ (jboolean)makeRegularPolygonWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
         withGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)ec
                                           withNSString:(NSString *)inputString
             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint1
             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint2 {
  return GeogebraCommonMainDialogManager_makeRegularPolygonWithGeogebraCommonMainApp_withGeogebraCommonEuclidianEuclidianController_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(app, ec, inputString, geoPoint1, geoPoint2);
}

- (id<GeogebraCommonKernelGeosGeoNumberValue>)getNumberWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                                                         withNSString:(NSString *)message
                                                                         withNSString:(NSString *)def {
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction];
  jboolean oldVal = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive];
  [cons setSuppressLabelCreationWithBoolean:YES];
  NSString *str = [self promptWithNSString:message withNSString:def];
  id<GeogebraCommonKernelGeosGeoNumberValue> result = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel getAlgebraProcessor])) evaluateToNumericWithNSString:str withBoolean:YES];
  [cons setSuppressLabelCreationWithBoolean:oldVal];
  return result;
}

- (NSString *)promptWithNSString:(NSString *)message
                    withNSString:(NSString *)def {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)closeAll {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showRenameDialogWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                   withBoolean:(jboolean)b
                                                  withNSString:(NSString *)label
                                                   withBoolean:(jboolean)c {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showPropertiesDialog {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showPropertiesDialogWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showPropertiesDialogWithGeogebraCommonMainOptionTypeEnum:(GeogebraCommonMainOptionTypeEnum *)type
                                           withJavaUtilArrayList:(JavaUtilArrayList *)geos {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showToolbarConfigDialog {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showLogInDialog {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showLogOutDialog {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (jboolean)doDilateWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
     withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)num
   withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
       withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)selGeos
    withGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)ec {
  return GeogebraCommonMainDialogManager_doDilateWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonEuclidianEuclidianController_(kernel, num, points, selGeos, ec);
}

+ (void)doSegmentFixedWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
          withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint1
       withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)num {
  GeogebraCommonMainDialogManager_doSegmentFixedWithGeogebraCommonKernelKernel_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(kernel, geoPoint1, num);
}

- (void)showTextDialogWithGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)text {
  GeogebraCommonMainDialogManager_showTextDialogWithGeogebraCommonKernelGeosGeoText_(self, text);
}

- (void)showTextCreationDialogWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)startPoint {
  [self showTextDialogWithGeogebraCommonKernelGeosGeoText:nil withGeogebraCommonKernelKernelNDGeoPointND:startPoint];
}

- (void)openToolHelp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showTextDialogWithGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)text
               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)startPoint {
  [((GeogebraCommonMainApp *) nil_chk(app_)) setWaitCursor];
  if (textInputDialog_ == nil) {
    GeogebraCommonMainDialogManager_set_textInputDialog_(self, [self createTextDialogWithGeogebraCommonKernelGeosGeoText:text withGeogebraCommonKernelKernelNDGeoPointND:startPoint]);
  }
  else {
    [textInputDialog_ reInitEditorWithGeogebraCommonKernelGeosGeoText:text withGeogebraCommonKernelKernelNDGeoPointND:startPoint];
  }
  [((id<GeogebraCommonGuiDialogTextInputDialog>) nil_chk(textInputDialog_)) setVisibleWithBoolean:YES];
  [app_ setDefaultCursor];
}

- (id<GeogebraCommonGuiDialogTextInputDialog>)createTextDialogWithGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)text
                                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)startPoint {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)showNumberInputDialogSpherePointRadiusWithNSString:(NSString *)title
                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint {
}

- (void)showNumberInputDialogConeTwoPointsRadiusWithNSString:(NSString *)title
                  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)b {
}

- (void)showNumberInputDialogCylinderTwoPointsRadiusWithNSString:(NSString *)title
                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)b {
}

- (void)showNumberInputDialogCirclePointDirectionRadiusWithNSString:(NSString *)title
                         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint
                     withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)forAxis {
}

- (void)showNumberInputDialogRotateWithNSString:(NSString *)title
    withGeogebraCommonKernelGeosGeoPolygonArray:(IOSObjectArray *)polys
 withGeogebraCommonKernelKernelNDGeoLineNDArray:(IOSObjectArray *)selectedLines
    withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)selGeos
 withGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)ec {
}

- (void)showColorChooserDialogWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)originalColor
     withGeogebraCommonGuiDialogHandlerColorChangeHandler:(id<GeogebraCommonGuiDialogHandlerColorChangeHandler>)handler {
}

- (void)dealloc {
  RELEASE_(defaultAngle_);
  RELEASE_(app_);
  RELEASE_(oldString_);
  RELEASE_(textInputDialog_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DialogManager", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonMainApp:", "DialogManager", NULL, 0x1, NULL, NULL },
    { "showFunctionInspectorWithGeogebraCommonKernelGeosGeoFunction:", "showFunctionInspector", "Z", 0x401, NULL, NULL },
    { "showDataSourceDialogWithInt:withBoolean:", "showDataSourceDialog", "V", 0x401, NULL, NULL },
    { "showRedefineDialogWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "showRedefineDialog", "V", 0x1, NULL, NULL },
    { "newInputDialogWithGeogebraCommonMainApp:withNSString:withNSString:withNSString:withBoolean:withGeogebraCommonGuiInputHandler:withGeogebraCommonKernelGeosGeoElement:", "newInputDialog", "Lgeogebra.common.gui.dialog.InputDialog;", 0x401, NULL, NULL },
    { "showNumberInputDialogSegmentFixedWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:", "showNumberInputDialogSegmentFixed", "V", 0x401, NULL, NULL },
    { "showNumberInputDialogAngleFixedWithNSString:withGeogebraCommonKernelKernelNDGeoSegmentNDArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonEuclidianEuclidianController:", "showNumberInputDialogAngleFixed", "V", 0x1, NULL, NULL },
    { "doAngleFixedWithGeogebraCommonKernelKernel:withGeogebraCommonKernelKernelNDGeoSegmentNDArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonKernelGeosGeoNumberValue:withBoolean:withGeogebraCommonEuclidianEuclidianController:", "doAngleFixed", "V", 0x9, NULL, NULL },
    { "showSliderCreationDialogWithInt:withInt:", "showSliderCreationDialog", "Z", 0x1, NULL, NULL },
    { "confirmWithNSString:", "confirm", "Z", 0x404, NULL, NULL },
    { "showNumberInputDialogRotateWithNSString:withGeogebraCommonKernelGeosGeoPolygonArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonEuclidianEuclidianController:", "showNumberInputDialogRotate", "V", 0x1, NULL, NULL },
    { "showNumberInputDialogDilateWithNSString:withGeogebraCommonKernelGeosGeoPolygonArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonEuclidianEuclidianController:", "showNumberInputDialogDilate", "V", 0x401, NULL, NULL },
    { "showNumberInputDialogRegularPolygonWithNSString:withGeogebraCommonEuclidianEuclidianController:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "showNumberInputDialogRegularPolygon", "V", 0x401, NULL, NULL },
    { "showBooleanCheckboxCreationDialogWithGeogebraCommonAwtGPoint:withGeogebraCommonKernelGeosGeoBoolean:", "showBooleanCheckboxCreationDialog", "V", 0x401, NULL, NULL },
    { "showNumberInputDialogCirclePointRadiusWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonEuclidianEuclidianView:", "showNumberInputDialogCirclePointRadius", "V", 0x401, NULL, NULL },
    { "showNumberInputDialogWithNSString:withNSString:withNSString:withGeogebraCommonUtilAsyncOperation:", "showNumberInputDialog", "V", 0x401, NULL, NULL },
    { "showNumberInputDialogWithNSString:withNSString:withNSString:withBoolean:withNSString:withGeogebraCommonUtilAsyncOperation:", "showNumberInputDialog", "V", 0x401, NULL, NULL },
    { "showAngleInputDialogWithNSString:withNSString:withNSString:withGeogebraCommonUtilAsyncOperation:", "showAngleInputDialog", "V", 0x401, NULL, NULL },
    { "showButtonCreationDialogWithInt:withInt:withBoolean:", "showButtonCreationDialog", "Z", 0x401, NULL, NULL },
    { "rotateObjectWithGeogebraCommonMainApp:withNSString:withBoolean:withGeogebraCommonKernelGeosGeoPolygonArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonEuclidianEuclidianController:", "rotateObject", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "makeRegularPolygonWithGeogebraCommonMainApp:withGeogebraCommonEuclidianEuclidianController:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "makeRegularPolygon", "Z", 0x9, NULL, NULL },
    { "getNumberWithGeogebraCommonKernelKernel:withNSString:withNSString:", "getNumber", "Lgeogebra.common.kernel.geos.GeoNumberValue;", 0x4, NULL, NULL },
    { "promptWithNSString:withNSString:", "prompt", "Ljava.lang.String;", 0x404, NULL, NULL },
    { "closeAll", NULL, "V", 0x401, NULL, NULL },
    { "showRenameDialogWithGeogebraCommonKernelGeosGeoElement:withBoolean:withNSString:withBoolean:", "showRenameDialog", "V", 0x401, NULL, NULL },
    { "showPropertiesDialog", NULL, "V", 0x401, NULL, NULL },
    { "showPropertiesDialogWithJavaUtilArrayList:", "showPropertiesDialog", "V", 0x401, NULL, NULL },
    { "showPropertiesDialogWithGeogebraCommonMainOptionTypeEnum:withJavaUtilArrayList:", "showPropertiesDialog", "V", 0x401, NULL, NULL },
    { "showToolbarConfigDialog", NULL, "V", 0x401, NULL, NULL },
    { "showLogInDialog", NULL, "V", 0x401, NULL, NULL },
    { "showLogOutDialog", NULL, "V", 0x401, NULL, NULL },
    { "doDilateWithGeogebraCommonKernelKernel:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonEuclidianEuclidianController:", "doDilate", "Z", 0x9, NULL, NULL },
    { "doSegmentFixedWithGeogebraCommonKernelKernel:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "doSegmentFixed", "V", 0x9, NULL, NULL },
    { "showTextDialogWithGeogebraCommonKernelGeosGeoText:", "showTextDialog", "V", 0x11, NULL, NULL },
    { "showTextCreationDialogWithGeogebraCommonKernelKernelNDGeoPointND:", "showTextCreationDialog", "V", 0x11, NULL, NULL },
    { "openToolHelp", NULL, "V", 0x401, NULL, NULL },
    { "showTextDialogWithGeogebraCommonKernelGeosGeoText:withGeogebraCommonKernelKernelNDGeoPointND:", "showTextDialog", "V", 0x4, NULL, NULL },
    { "createTextDialogWithGeogebraCommonKernelGeosGeoText:withGeogebraCommonKernelKernelNDGeoPointND:", "createTextDialog", "Lgeogebra.common.gui.dialog.TextInputDialog;", 0x401, NULL, NULL },
    { "showNumberInputDialogSpherePointRadiusWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:", "showNumberInputDialogSpherePointRadius", "V", 0x1, NULL, NULL },
    { "showNumberInputDialogConeTwoPointsRadiusWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "showNumberInputDialogConeTwoPointsRadius", "V", 0x1, NULL, NULL },
    { "showNumberInputDialogCylinderTwoPointsRadiusWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "showNumberInputDialogCylinderTwoPointsRadius", "V", 0x1, NULL, NULL },
    { "showNumberInputDialogCirclePointDirectionRadiusWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "showNumberInputDialogCirclePointDirectionRadius", "V", 0x1, NULL, NULL },
    { "showNumberInputDialogRotateWithNSString:withGeogebraCommonKernelGeosGeoPolygonArray:withGeogebraCommonKernelKernelNDGeoLineNDArray:withGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonEuclidianEuclidianController:", "showNumberInputDialogRotate", "V", 0x1, NULL, NULL },
    { "showColorChooserDialogWithGeogebraCommonAwtGColor:withGeogebraCommonGuiDialogHandlerColorChangeHandler:", "showColorChooserDialog", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defaultAngle_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "app_", NULL, 0x4, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "oldString_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL,  },
    { "textInputDialog_", NULL, 0x4, "Lgeogebra.common.gui.dialog.TextInputDialog;", NULL, NULL,  },
    { "oldVal_", NULL, 0x4, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonMainDialogManager = { 2, "DialogManager", "geogebra.common.main", NULL, 0x401, 45, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonMainDialogManager;
}

@end

void GeogebraCommonMainDialogManager_init(GeogebraCommonMainDialogManager *self) {
  NSObject_init(self);
  GeogebraCommonMainDialogManager_set_defaultAngle_(self, JreStrcat("$$", @"45", GeogebraCommonUtilUnicode_get_degree_()));
}

void GeogebraCommonMainDialogManager_initWithGeogebraCommonMainApp_(GeogebraCommonMainDialogManager *self, GeogebraCommonMainApp *app) {
  NSObject_init(self);
  GeogebraCommonMainDialogManager_set_defaultAngle_(self, JreStrcat("$$", @"45", GeogebraCommonUtilUnicode_get_degree_()));
  GeogebraCommonMainDialogManager_set_app_(self, app);
}

void GeogebraCommonMainDialogManager_doAngleFixedWithGeogebraCommonKernelKernel_withGeogebraCommonKernelKernelNDGeoSegmentNDArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoNumberValue_withBoolean_withGeogebraCommonEuclidianEuclidianController_(GeogebraCommonKernelKernel *kernel, IOSObjectArray *segments, IOSObjectArray *points, IOSObjectArray *selGeo2s, id<GeogebraCommonKernelGeosGeoNumberValue> num, jboolean clockWise, GeogebraCommonEuclidianEuclidianController *ec) {
  GeogebraCommonMainDialogManager_initialize();
  GeogebraCommonKernelGeosGeoAngle *angle;
  if (((IOSObjectArray *) nil_chk(points))->size_ == 2) {
    angle = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec)) getCompanion])) createAngleWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1) withGeogebraCommonKernelGeosGeoNumberValue:num withBoolean:clockWise];
  }
  else {
    angle = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec)) getCompanion])) createAngleWithGeogebraCommonKernelKernelNDGeoPointND:[((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(nil_chk(segments), 0))) getEndPoint] withGeogebraCommonKernelKernelNDGeoPointND:[((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(IOSObjectArray_Get(segments, 0))) getStartPoint] withGeogebraCommonKernelGeosGeoNumberValue:num withBoolean:clockWise];
  }
  if ([((GeogebraCommonKernelGeosGeoAngle *) nil_chk(angle)) isLabelVisible]) [angle setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE];
  else [angle setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_VALUE];
  [angle setLabelVisibleWithBoolean:YES];
  [angle updateRepaint];
  [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getApplication])) storeUndoInfo];
}

NSString *GeogebraCommonMainDialogManager_rotateObjectWithGeogebraCommonMainApp_withNSString_withBoolean_withGeogebraCommonKernelGeosGeoPolygonArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonEuclidianEuclidianController_(GeogebraCommonMainApp *app, NSString *inputText, jboolean clockwise, IOSObjectArray *polys, IOSObjectArray *points, IOSObjectArray *selGeos, GeogebraCommonEuclidianEuclidianController *ec) {
  GeogebraCommonMainDialogManager_initialize();
  NSString *defaultRotateAngle = @"45\u00b0";
  NSString *angleText = inputText;
  GeogebraCommonKernelKernel *kernel = [((GeogebraCommonMainApp *) nil_chk(app)) getKernel];
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction];
  jboolean oldVal = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive];
  [cons setSuppressLabelCreationWithBoolean:YES];
  if ([((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec)) getCompanion])) viewOrientationForClockwiseWithBoolean:clockwise]) {
    inputText = JreStrcat("$$C", @"-(", inputText, ')');
  }
  IOSObjectArray *result = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel getAlgebraProcessor])) processAlgebraCommandWithNSString:inputText withBoolean:NO];
  [cons setSuppressLabelCreationWithBoolean:oldVal];
  jboolean success = result != nil && [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(result, 0)];
  if (success) {
    id<GeogebraCommonKernelGeosGeoNumberValue> num = (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(result), 0), @protocol(GeogebraCommonKernelGeosGeoNumberValue));
    if ([((NSString *) nil_chk(angleText)) hasSuffix:@"\u00b0"]) defaultRotateAngle = angleText;
    if (((IOSObjectArray *) nil_chk(polys))->size_ == 1) {
      IOSObjectArray *geos = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk([ec getCompanion])) rotateByAngleWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(polys, 0) withGeogebraCommonKernelGeosGeoNumberValue:num withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0)];
      if (geos != nil) {
        [app storeUndoInfo];
        [ec memorizeJustCreatedGeosWithGeogebraCommonKernelGeosGeoElementArray:geos];
      }
      return defaultRotateAngle;
    }
    JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(selGeos))->size_; i++) {
      if (IOSObjectArray_Get(selGeos, i) != IOSObjectArray_Get(nil_chk(points), 0)) {
        if ([GeogebraCommonKernelGeosTransformable_class_() isInstance:IOSObjectArray_Get(selGeos, i)]) {
          [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk([ec getCompanion])) rotateByAngleWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(selGeos, i) withGeogebraCommonKernelGeosGeoNumberValue:num withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0)])];
        }
        else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(selGeos, i))) isGeoPolygon]) {
          [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk([ec getCompanion])) rotateByAngleWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(selGeos, i) withGeogebraCommonKernelGeosGeoNumberValue:num withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 0)])];
        }
      }
    }
    if (![ret isEmpty]) {
      [app storeUndoInfo];
      [ec memorizeJustCreatedGeosWithJavaUtilArrayList:ret];
    }
  }
  else {
    [app showErrorWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([app getLocalization])) getErrorWithNSString:@"NumberExpected"]];
  }
  return success ? defaultRotateAngle : nil;
}

jboolean GeogebraCommonMainDialogManager_makeRegularPolygonWithGeogebraCommonMainApp_withGeogebraCommonEuclidianEuclidianController_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonMainApp *app, GeogebraCommonEuclidianEuclidianController *ec, NSString *inputString, id<GeogebraCommonKernelKernelNDGeoPointND> geoPoint1, id<GeogebraCommonKernelKernelNDGeoPointND> geoPoint2) {
  GeogebraCommonMainDialogManager_initialize();
  if (inputString == nil || [@"" isEqual:inputString]) {
    return NO;
  }
  GeogebraCommonKernelKernel *kernel = [((GeogebraCommonMainApp *) nil_chk(app)) getKernel];
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction];
  jboolean oldVal = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive];
  [cons setSuppressLabelCreationWithBoolean:YES];
  IOSObjectArray *result = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel getAlgebraProcessor])) processAlgebraCommandWithNSString:inputString withBoolean:NO];
  [cons setSuppressLabelCreationWithBoolean:oldVal];
  jboolean success = result != nil && [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(result, 0)];
  if (!success) {
    [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel getAlgebraProcessor])) showErrorWithNSString:@"NumberExpected"];
    return NO;
  }
  IOSObjectArray *geos = [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec)) getCompanion])) regularPolygonWithGeogebraCommonKernelKernelNDGeoPointND:geoPoint1 withGeogebraCommonKernelKernelNDGeoPointND:geoPoint2 withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(result), 0), @protocol(GeogebraCommonKernelGeosGeoNumberValue))];
  IOSObjectArray *onlypoly = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  if (geos != nil) {
    IOSObjectArray_Set(onlypoly, 0, IOSObjectArray_Get(geos, 0));
    [app storeUndoInfo];
    [ec memorizeJustCreatedGeosWithGeogebraCommonKernelGeosGeoElementArray:onlypoly];
  }
  return YES;
}

jboolean GeogebraCommonMainDialogManager_doDilateWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonEuclidianEuclidianController_(GeogebraCommonKernelKernel *kernel, id<GeogebraCommonKernelArithmeticNumberValue> num, IOSObjectArray *points, IOSObjectArray *selGeos, GeogebraCommonEuclidianEuclidianController *ec) {
  GeogebraCommonMainDialogManager_initialize();
  if (((IOSObjectArray *) nil_chk(selGeos))->size_ > 0) {
    id<GeogebraCommonKernelKernelNDGeoPointND> point = IOSObjectArray_Get(nil_chk(points), 0);
    JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
    for (jint i = 0; i < selGeos->size_; i++) {
      if (IOSObjectArray_Get(selGeos, i) != point) {
        if (([GeogebraCommonKernelGeosTransformable_class_() isInstance:IOSObjectArray_Get(selGeos, i)]) || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(selGeos, i))) isGeoList]) [ret addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec)) getCompanion])) dilateFromPointWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(selGeos, i) withGeogebraCommonKernelArithmeticNumberValue:num withGeogebraCommonKernelKernelNDGeoPointND:point])];
      }
    }
    if (![ret isEmpty]) {
      [((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec)) memorizeJustCreatedGeosWithJavaUtilArrayList:ret];
      [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getApplication])) storeUndoInfo];
      return YES;
    }
  }
  return NO;
}

void GeogebraCommonMainDialogManager_doSegmentFixedWithGeogebraCommonKernelKernel_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelKernel *kernel, id<GeogebraCommonKernelKernelNDGeoPointND> geoPoint1, id<GeogebraCommonKernelArithmeticNumberValue> num) {
  GeogebraCommonMainDialogManager_initialize();
  IOSObjectArray *segment = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getAlgoDispatcher])) SegmentWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointND:geoPoint1 withGeogebraCommonKernelArithmeticNumberValue:num];
  IOSObjectArray *onlysegment = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  if (segment != nil) {
    IOSObjectArray_Set(onlysegment, 0, IOSObjectArray_Get(segment, 0));
    [((GeogebraCommonMainApp *) nil_chk([kernel getApplication])) storeUndoInfo];
    [((GeogebraCommonEuclidianEuclidianController *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk([kernel getApplication])) getActiveEuclidianView])) getEuclidianController])) memorizeJustCreatedGeosWithGeogebraCommonKernelGeosGeoElementArray:onlysegment];
  }
}

void GeogebraCommonMainDialogManager_showTextDialogWithGeogebraCommonKernelGeosGeoText_(GeogebraCommonMainDialogManager *self, GeogebraCommonKernelGeosGeoText *text) {
  [self showTextDialogWithGeogebraCommonKernelGeosGeoText:text withGeogebraCommonKernelKernelNDGeoPointND:nil];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonMainDialogManager)
