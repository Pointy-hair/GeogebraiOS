//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoTakeString.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoTakeString.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"

@interface GeogebraCommonKernelAlgosAlgoTakeString () {
 @public
  GeogebraCommonKernelGeosGeoText *inputText_;
  GeogebraCommonKernelGeosGeoNumeric *n_, *m_;
  GeogebraCommonKernelGeosGeoText *outputText_;
  jint size_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTakeString, inputText_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTakeString, n_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTakeString, m_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTakeString, outputText_, GeogebraCommonKernelGeosGeoText *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoTakeString_compute(GeogebraCommonKernelAlgosAlgoTakeString *self);

@implementation GeogebraCommonKernelAlgosAlgoTakeString

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)inputText
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)m
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n {
  GeogebraCommonKernelAlgosAlgoTakeString_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputText, m, n);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Take();
}

- (void)setInputOutput {
  if (n_ != nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 2, n_);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  }
  IOSObjectArray_Set(nil_chk(input_), 0, inputText_);
  IOSObjectArray_Set(input_, 1, m_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outputText_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoText *)getResult {
  return outputText_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoTakeString_compute(self);
}

- (void)dealloc {
  RELEASE_(inputText_);
  RELEASE_(n_);
  RELEASE_(m_);
  RELEASE_(outputText_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoText:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoTakeString", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputText_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "m_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "outputText_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoTakeString = { 2, "AlgoTakeString", "geogebra.common.kernel.algos", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoTakeString;
}

@end

void GeogebraCommonKernelAlgosAlgoTakeString_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAlgosAlgoTakeString *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoText *inputText, GeogebraCommonKernelGeosGeoNumeric *m, GeogebraCommonKernelGeosGeoNumeric *n) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoTakeString_set_inputText_(self, inputText);
  GeogebraCommonKernelAlgosAlgoTakeString_set_m_(self, m);
  GeogebraCommonKernelAlgosAlgoTakeString_set_n_(self, n);
  GeogebraCommonKernelAlgosAlgoTakeString_setAndConsume_outputText_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons));
  [self->outputText_ setIsTextCommandWithBoolean:YES];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoTakeString_compute(self);
  [self->outputText_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoTakeString *new_GeogebraCommonKernelAlgosAlgoTakeString_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoText *inputText, GeogebraCommonKernelGeosGeoNumeric *m, GeogebraCommonKernelGeosGeoNumeric *n) {
  GeogebraCommonKernelAlgosAlgoTakeString *self = [GeogebraCommonKernelAlgosAlgoTakeString alloc];
  GeogebraCommonKernelAlgosAlgoTakeString_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputText, m, n);
  return self;
}

void GeogebraCommonKernelAlgosAlgoTakeString_compute(GeogebraCommonKernelAlgosAlgoTakeString *self) {
  if (![((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->m_)) isDefined] || (self->n_ != nil && ![self->n_ isDefined]) || self->inputText_ == nil) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->outputText_)) setTextStringWithNSString:@""];
    return;
  }
  NSString *str = [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->inputText_)) getTextString];
  if (str == nil) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->outputText_)) setUndefined];
    return;
  }
  self->size_ = ((jint) [((NSString *) nil_chk(str)) length]);
  jint start = J2ObjCFpToInt([self->m_ getDouble]);
  jdouble nVal = self->n_ == nil ? self->size_ : [self->n_ getDouble];
  jint end = J2ObjCFpToInt(nVal);
  if (nVal == 0 && [self->inputText_ isDefined] && start > 0 && start <= self->size_) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->outputText_)) setTextStringWithNSString:@""];
    return;
  }
  if (![self->inputText_ isDefined] || self->size_ == 0 || start <= 0 || end > self->size_ || start > end) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->outputText_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->outputText_)) setTextStringWithNSString:[str substring:start - 1 endIndex:end]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoTakeString)
