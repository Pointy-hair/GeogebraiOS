//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoTangentPoint.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "geogebra/common/kernel/algos/AlgoTangentPoint.h"
#include "geogebra/common/kernel/algos/AlgoTangentPointND.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/util/ArrayList.h"

@implementation GeogebraCommonKernelAlgosAlgoTangentPoint

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonKernelAlgosAlgoTangentPoint_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, P, c);
  return self;
}

- (jboolean)isIntersectionPointIncident {
  return [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) isIntersectionPointIncidentWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoPoint class]) withDouble:GeogebraCommonKernelKernel_MIN_PRECISION] || [((JavaUtilArrayList *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) getIncidenceList])) containsWithId:c_];
}

- (void)setPolar {
  GeogebraCommonKernelAlgosAlgoTangentPointND_setAndConsume_polar_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_));
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) polarLineWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoLine:polar_];
  GeogebraCommonKernelAlgosAlgoTangentPointND_setAndConsume_algoIntersect_(self, new_GeogebraCommonKernelAlgosAlgoIntersectLineConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_(cons_, polar_, (GeogebraCommonKernelGeosGeoConic *) check_class_cast(c_, [GeogebraCommonKernelGeosGeoConic class])));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoIntersect_];
  GeogebraCommonKernelAlgosAlgoTangentPointND_set_tangentPoints_(self, [algoIntersect_ getIntersectionPoints]);
}

- (void)setTangentFromPolarWithInt:(jint)i {
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), i), [GeogebraCommonKernelGeosGeoLine class])))) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:polar_];
}

- (void)setTangents {
  GeogebraCommonKernelAlgosAlgoTangentPointND_setAndConsume_tangents_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoLine_class_()]);
  IOSObjectArray_SetAndConsume(tangents_, 0, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_));
  IOSObjectArray_SetAndConsume(tangents_, 1, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_));
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 0), [GeogebraCommonKernelGeosGeoLine class])))) setStartPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoPoint class])];
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 1), [GeogebraCommonKernelGeosGeoLine class])))) setStartPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (GeogebraCommonKernelGeosGeoPoint *)getPoint {
  return (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoPoint class]);
}

- (GeogebraCommonKernelGeosGeoConic *)getConic {
  return (GeogebraCommonKernelGeosGeoConic *) check_class_cast(c_, [GeogebraCommonKernelGeosGeoConic class]);
}

- (void)initForNearToRelationship {
  GeogebraCommonKernelAlgosAlgoTangentPoint_initForNearToRelationshipWithGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDAlgoIntersectND_(tangentPoints_, IOSObjectArray_Get(nil_chk(tangents_), 0), algoIntersect_);
}

+ (void)initForNearToRelationshipWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)tangentPoints
                                       withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)tangent
                                 withGeogebraCommonKernelKernelNDAlgoIntersectND:(GeogebraCommonKernelKernelNDAlgoIntersectND *)algoIntersect {
  GeogebraCommonKernelAlgosAlgoTangentPoint_initForNearToRelationshipWithGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDAlgoIntersectND_(tangentPoints, tangent, algoIntersect);
}

- (void)updatePolarLine {
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) polarLineWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoLine:polar_];
}

- (void)updateTangents {
  GeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(tangentPoints_), 0), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), 0), [GeogebraCommonKernelGeosGeoLine class]));
  GeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(tangentPoints_, 1), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 1), [GeogebraCommonKernelGeosGeoLine class]));
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoTangentPoint", NULL, 0x1, NULL, NULL },
    { "isIntersectionPointIncident", NULL, "Z", 0x4, NULL, NULL },
    { "setPolar", NULL, "V", 0x4, NULL, NULL },
    { "setTangentFromPolarWithInt:", "setTangentFromPolar", "V", 0x4, NULL, NULL },
    { "setTangents", NULL, "V", 0x4, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getConic", NULL, "Lgeogebra.common.kernel.geos.GeoConic;", 0x1, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x1, NULL, NULL },
    { "initForNearToRelationshipWithGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDAlgoIntersectND:", "initForNearToRelationship", "V", 0x9, NULL, NULL },
    { "updatePolarLine", NULL, "V", 0x4, NULL, NULL },
    { "updateTangents", NULL, "V", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoTangentPoint = { 2, "AlgoTangentPoint", "geogebra.common.kernel.algos", NULL, 0x1, 11, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoTangentPoint;
}

@end

void GeogebraCommonKernelAlgosAlgoTangentPoint_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelAlgosAlgoTangentPoint *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoPointND> P, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonKernelAlgosAlgoTangentPointND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, P, c);
}

GeogebraCommonKernelAlgosAlgoTangentPoint *new_GeogebraCommonKernelAlgosAlgoTangentPoint_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoPointND> P, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonKernelAlgosAlgoTangentPoint *self = [GeogebraCommonKernelAlgosAlgoTangentPoint alloc];
  GeogebraCommonKernelAlgosAlgoTangentPoint_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, P, c);
  return self;
}

void GeogebraCommonKernelAlgosAlgoTangentPoint_initForNearToRelationshipWithGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDAlgoIntersectND_(IOSObjectArray *tangentPoints, id<GeogebraCommonKernelKernelNDGeoLineND> tangent, GeogebraCommonKernelKernelNDAlgoIntersectND *algoIntersect) {
  GeogebraCommonKernelAlgosAlgoTangentPoint_initialize();
  GeogebraCommonKernelGeosGeoPoint *firstTangentPoint = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(tangentPoints), 0), [GeogebraCommonKernelGeosGeoPoint class]);
  if (![((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(tangent, [GeogebraCommonKernelGeosGeoLine class])))) isOnFullLineWithGeogebraCommonKernelGeosGeoPoint:firstTangentPoint withDouble:GeogebraCommonKernelKernel_MIN_PRECISION]) {
    [((GeogebraCommonKernelKernelNDAlgoIntersectND *) nil_chk(algoIntersect)) initForNearToRelationship];
    jdouble px = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(firstTangentPoint))->x_;
    jdouble py = firstTangentPoint->y_;
    jdouble pz = firstTangentPoint->z_;
    [algoIntersect setIntersectionPointWithInt:0 withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(tangentPoints, 1)];
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(tangentPoints, 1))) setCoordsWithDouble:px withDouble:py withDouble:pz];
    [algoIntersect setIntersectionPointWithInt:1 withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(tangentPoints, 1)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoTangentPoint)
