//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/CmdPolar3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolarLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolarPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdPolar3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/advanced/CmdPolar.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation GeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (GeogebraCommonKernelGeosGeoElement *)PolarLineWithNSString:(NSString *)label
                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                   withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) isGeoElement3D] || [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, c, P) autorelease];
    return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getLine], [GeogebraCommonKernelGeosGeoElement class]);
  }
  return [super PolarLineWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:P withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (GeogebraCommonKernelGeosGeoElement *)PolarPointWithNSString:(NSString *)label
                     withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line
                    withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) isGeoElement3D] || [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarPoint3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, c, line) autorelease];
    return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getPoint], [GeogebraCommonKernelGeosGeoElement class]);
  }
  return [super PolarPointWithNSString:label withGeogebraCommonKernelKernelNDGeoLineND:line withGeogebraCommonKernelKernelNDGeoConicND:c];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdPolar3D", NULL, 0x1, NULL, NULL },
    { "PolarLineWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoConicND:", "PolarLine", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "PolarPointWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "PolarPoint", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D = { 2, "CmdPolar3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelAdvancedCmdPolar_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D *new_GeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D)
