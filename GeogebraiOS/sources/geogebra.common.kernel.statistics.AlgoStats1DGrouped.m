//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoStats1DGrouped.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/Algos.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/AlgoStats1DGrouped.h"
#include "java/lang/Math.h"

#define GeogebraCommonKernelStatisticsAlgoStats1DGrouped_serialVersionUID 1LL

@interface GeogebraCommonKernelStatisticsAlgoStats1DGrouped () {
 @public
  GeogebraCommonKernelGeosGeoList *geoList_;
  GeogebraCommonKernelGeosGeoList *geoList2_;
  jint stat_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoStats1DGrouped, geoList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoStats1DGrouped, geoList2_, GeogebraCommonKernelGeosGeoList *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoStats1DGrouped, serialVersionUID, jlong)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoStats1DGrouped_compute(GeogebraCommonKernelStatisticsAlgoStats1DGrouped *self);

@implementation GeogebraCommonKernelStatisticsAlgoStats1DGrouped

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList2
                                                 withInt:(jint)stat {
  GeogebraCommonKernelStatisticsAlgoStats1DGrouped_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withInt_(self, cons, label, geoList, geoList2, stat);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList2
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)Truncate
                                                 withInt:(jint)stat {
  GeogebraCommonKernelStatisticsAlgoStats1DGrouped_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, label, geoList, geoList2, Truncate, stat);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList2
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)Truncate
                                                 withInt:(jint)stat {
  GeogebraCommonKernelStatisticsAlgoStats1DGrouped_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, geoList, geoList2, Truncate, stat);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList2
                                                 withInt:(jint)stat {
  GeogebraCommonKernelStatisticsAlgoStats1DGrouped_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withInt_(self, cons, geoList, geoList2, stat);
  return self;
}

- (GeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setInputOutput {
  if (Truncate_ == nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, geoList_);
    IOSObjectArray_Set(input_, 1, geoList2_);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, geoList_);
    IOSObjectArray_Set(input_, 1, geoList2_);
    IOSObjectArray_Set(input_, 2, Truncate_);
  }
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getResult {
  return result_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoStats1DGrouped_compute(self);
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(geoList2_);
  RELEASE_(Truncate_);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withInt:", "AlgoStats1DGrouped", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:withInt:", "AlgoStats1DGrouped", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:withInt:", "AlgoStats1DGrouped", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withInt:", "AlgoStats1DGrouped", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.Algos;", 0x401, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonKernelStatisticsAlgoStats1DGrouped_serialVersionUID },
    { "geoList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geoList2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "Truncate_", NULL, 0x1, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "result_", NULL, 0x1, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "stat_", NULL, 0x2, "I", NULL, NULL,  },
    { "STATS_MEAN_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_MEAN },
    { "STATS_VARIANCE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_VARIANCE },
    { "STATS_SIGMAX_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_SIGMAX },
    { "STATS_SIGMAXX_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_SIGMAXX },
    { "STATS_SD_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_SD },
    { "STATS_PRODUCT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_PRODUCT },
    { "STATS_SXX_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_SXX },
    { "STATS_SAMPLE_VARIANCE_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_SAMPLE_VARIANCE },
    { "STATS_SAMPLE_SD_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_SAMPLE_SD },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoStats1DGrouped = { 2, "AlgoStats1DGrouped", "geogebra.common.kernel.statistics", NULL, 0x401, 8, methods, 15, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoStats1DGrouped;
}

@end

void GeogebraCommonKernelStatisticsAlgoStats1DGrouped_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withInt_(GeogebraCommonKernelStatisticsAlgoStats1DGrouped *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelGeosGeoList *geoList2, jint stat) {
  GeogebraCommonKernelStatisticsAlgoStats1DGrouped_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, label, geoList, geoList2, nil, stat);
}

void GeogebraCommonKernelStatisticsAlgoStats1DGrouped_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withInt_(GeogebraCommonKernelStatisticsAlgoStats1DGrouped *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelGeosGeoList *geoList2, GeogebraCommonKernelGeosGeoNumeric *Truncate, jint stat) {
  GeogebraCommonKernelStatisticsAlgoStats1DGrouped_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, geoList, geoList2, Truncate, stat);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setLabelWithNSString:label];
}

void GeogebraCommonKernelStatisticsAlgoStats1DGrouped_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withInt_(GeogebraCommonKernelStatisticsAlgoStats1DGrouped *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelGeosGeoList *geoList2, GeogebraCommonKernelGeosGeoNumeric *Truncate, jint stat) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoStats1DGrouped_set_geoList_(self, geoList);
  GeogebraCommonKernelStatisticsAlgoStats1DGrouped_set_geoList2_(self, geoList2);
  self->stat_ = stat;
  GeogebraCommonKernelStatisticsAlgoStats1DGrouped_set_Truncate_(self, Truncate);
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(geoList)) size] > 0 && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([geoList getWithInt:0])) isAngle]) GeogebraCommonKernelStatisticsAlgoStats1DGrouped_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_(cons));
  else GeogebraCommonKernelStatisticsAlgoStats1DGrouped_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoStats1DGrouped_compute(self);
}

void GeogebraCommonKernelStatisticsAlgoStats1DGrouped_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withInt_(GeogebraCommonKernelStatisticsAlgoStats1DGrouped *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelGeosGeoList *geoList2, jint stat) {
  GeogebraCommonKernelStatisticsAlgoStats1DGrouped_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, geoList, geoList2, nil, stat);
}

void GeogebraCommonKernelStatisticsAlgoStats1DGrouped_compute(GeogebraCommonKernelStatisticsAlgoStats1DGrouped *self) {
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
    return;
  }
  jint truncate;
  jint size = [self->geoList_ size];
  if (self->Truncate_ != nil) {
    truncate = J2ObjCFpToInt([self->Truncate_ getDouble]);
    if (truncate == 0) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:0];
      return;
    }
    if (truncate < 1 || truncate > size) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
      return;
    }
    size = truncate;
  }
  if (size == 0) {
    switch (self->stat_) {
      case GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_SIGMAX:
      case GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_SIGMAXX:
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:0];
      return;
      case GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_PRODUCT:
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:1];
      return;
      default:
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
      return;
    }
  }
  jdouble sumVal = 0;
  jdouble sumFreq = 0;
  jdouble sumSquares = 0;
  jdouble product = 1;
  jdouble val;
  jdouble frequency;
  jdouble val_by_freq;
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self->geoList_ getWithInt:i];
    GeogebraCommonKernelGeosGeoElement *geo2 = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList2_)) getWithInt:i];
    if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo] && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo2]) {
      id<GeogebraCommonKernelArithmeticNumberValue> num = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticNumberValue));
      id<GeogebraCommonKernelArithmeticNumberValue> freq = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo2, @protocol(GeogebraCommonKernelArithmeticNumberValue));
      val = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
      frequency = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(freq)) getDouble];
      val_by_freq = val * frequency;
      sumVal += val_by_freq;
      sumSquares += val * val_by_freq;
      sumFreq += frequency;
      product *= JavaLangMath_powWithDouble_withDouble_(val, frequency);
    }
    else {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
      return;
    }
  }
  jdouble mu = sumVal / sumFreq;
  jdouble var;
  switch (self->stat_) {
    case GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_MEAN:
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:mu];
    break;
    case GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_SD:
    var = sumSquares / sumFreq - mu * mu;
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:JavaLangMath_sqrtWithDouble_(var)];
    break;
    case GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_SAMPLE_SD:
    var = (sumSquares - sumVal * sumVal / sumFreq) / (sumFreq - 1);
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:JavaLangMath_sqrtWithDouble_(var)];
    break;
    case GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_VARIANCE:
    var = sumSquares / sumFreq - mu * mu;
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:var];
    break;
    case GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_SAMPLE_VARIANCE:
    var = (sumSquares - sumVal * sumVal / sumFreq) / (sumFreq - 1);
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:var];
    break;
    case GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_SXX:
    var = sumSquares - (sumVal * sumVal) / sumFreq;
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:var];
    break;
    case GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_SIGMAX:
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:sumVal];
    break;
    case GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_SIGMAXX:
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:sumSquares];
    break;
    case GeogebraCommonKernelStatisticsAlgoStats1DGrouped_STATS_PRODUCT:
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:product];
    break;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoStats1DGrouped)
