//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanes.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCoordSys.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanes.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoPlaneND.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes () {
 @public
  GeogebraCommonKernelMatrixCoords *o_, *vn_, *vn1_, *vn2_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes, o_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes, vn_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes, vn1_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes, vn2_, GeogebraCommonKernelMatrixCoords *)

jint GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_NA_ = -1;
jint GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_GENERAL_ = 1;
jint GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_PARALLEL_ = 2;
jint GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_CONTAINED_ = 3;

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)cs1
              withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)cs2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonKernelKernelNDGeoPlaneND_(self, cons, label, cs1, cs2);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)cs1
              withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)cs2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonKernelKernelNDGeoPlaneND_(self, cons, cs1, cs2);
  return self;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoElement3D *)createIntersectionWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *ret = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withBoolean_(cons, YES) autorelease];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_setAndConsume_o_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 1));
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_setAndConsume_vn_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 0));
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_setAndConsume_vn1_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 0));
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_setAndConsume_vn2_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 0));
  return ret;
}

- (void)compute {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p1 = (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getCS1], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p2 = (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getCS2], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  GeogebraCommonKernelMatrixCoords *v1 = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getCS1], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])))) getCoordSys])) getEquationVector];
  GeogebraCommonKernelMatrixCoords *v2 = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getCS2], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])))) getCoordSys])) getEquationVector];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(vn_)) setCrossProductWithGeogebraCommonKernelMatrixCoords:v1 withGeogebraCommonKernelMatrixCoords:v2];
  if ([vn_ isZero]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoElement3D *) nil_chk([self getIntersection])) setUndefined];
    return;
  }
  GeogebraCommonKernelMatrixCoords *o1 = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getCS1], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])))) getCoordSys])) getOrigin];
  GeogebraCommonKernelMatrixCoords *o2 = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getCS2], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])))) getCoordSys])) getOrigin];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(vn1_)) setCrossProductWithGeogebraCommonKernelMatrixCoords:v1 withGeogebraCommonKernelMatrixCoords:vn_];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(vn2_)) setCrossProductWithGeogebraCommonKernelMatrixCoords:v2 withGeogebraCommonKernelMatrixCoords:vn_];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(o2)) projectPlaneWithGeogebraCommonKernelMatrixCoords:vn_ withGeogebraCommonKernelMatrixCoords:vn1_ withGeogebraCommonKernelMatrixCoords:vn2_ withGeogebraCommonKernelMatrixCoords:o1 withGeogebraCommonKernelMatrixCoords:o_];
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *l = (GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast([self getIntersection], [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class]);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(l)) setCoordWithGeogebraCommonKernelMatrixCoords:o_ withGeogebraCommonKernelMatrixCoords:vn_];
}

+ (GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)getIntersectPlanePlaneWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)cs1
                                                                         withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)cs2 {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getIntersectPlanePlaneWithGeogebraCommonKernelKernelNDGeoCoordSys2D_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(cs1, cs2);
}

+ (GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)getIntersectPlanePlaneWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                                       withGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)cs1
                                                                       withGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)cs2 {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getIntersectPlanePlaneWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelMatrixCoordSys_(cons, cs1, cs2);
}

+ (jint)getConfigPlanePlaneWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane1
                           withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane2 {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithGeogebraCommonKernelKernelNDGeoCoordSys2D_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(plane1, plane2);
}

+ (jint)getConfigPlanePlaneWithGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)cs1
                           withGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)cs2 {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelMatrixCoordSys_(cs1, cs2);
}

- (NSString *)getIntersectionTypeString {
  return @"IntersectionLineOfAB";
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_IntersectPath();
}

- (void)dealloc {
  RELEASE_(o_);
  RELEASE_(vn_);
  RELEASE_(vn1_);
  RELEASE_(vn2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonKernelKernelNDGeoPlaneND:", "AlgoIntersectPlanes", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonKernelKernelNDGeoPlaneND:", "AlgoIntersectPlanes", NULL, 0x1, NULL, NULL },
    { "createIntersectionWithGeogebraCommonKernelConstruction:", "createIntersection", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoElement3D;", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getIntersectPlanePlaneWithGeogebraCommonKernelKernelNDGeoCoordSys2D:withGeogebraCommonKernelKernelNDGeoCoordSys2D:", "getIntersectPlanePlane", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x9, NULL, NULL },
    { "getIntersectPlanePlaneWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelMatrixCoordSys:withGeogebraCommonKernelMatrixCoordSys:", "getIntersectPlanePlane", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x9, NULL, NULL },
    { "getConfigPlanePlaneWithGeogebraCommonKernelKernelNDGeoCoordSys2D:withGeogebraCommonKernelKernelNDGeoCoordSys2D:", "getConfigPlanePlane", "I", 0x9, NULL, NULL },
    { "getConfigPlanePlaneWithGeogebraCommonKernelMatrixCoordSys:withGeogebraCommonKernelMatrixCoordSys:", "getConfigPlanePlane", "I", 0x9, NULL, NULL },
    { "getIntersectionTypeString", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "o_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "vn_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "vn1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "vn2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "RESULTCATEGORY_NA_", NULL, 0x9, "I", &GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_NA_, NULL,  },
    { "RESULTCATEGORY_GENERAL_", NULL, 0x9, "I", &GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_GENERAL_, NULL,  },
    { "RESULTCATEGORY_PARALLEL_", NULL, 0x9, "I", &GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_PARALLEL_, NULL,  },
    { "RESULTCATEGORY_CONTAINED_", NULL, 0x9, "I", &GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_CONTAINED_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes = { 2, "AlgoIntersectPlanes", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 10, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonKernelKernelNDGeoPlaneND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPlaneND> cs1, id<GeogebraCommonKernelKernelNDGeoPlaneND> cs2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCoordSys_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(cs1, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(cs2, [GeogebraCommonKernelGeosGeoElement class]));
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonKernelKernelNDGeoPlaneND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPlaneND> cs1, id<GeogebraCommonKernelKernelNDGeoPlaneND> cs2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonKernelKernelNDGeoPlaneND_(self, cons, label, cs1, cs2);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonKernelKernelNDGeoPlaneND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPlaneND> cs1, id<GeogebraCommonKernelKernelNDGeoPlaneND> cs2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCoordSys_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, cons, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(cs1, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(cs2, [GeogebraCommonKernelGeosGeoElement class]));
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonKernelKernelNDGeoPlaneND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPlaneND> cs1, id<GeogebraCommonKernelKernelNDGeoPlaneND> cs2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonKernelKernelNDGeoPlaneND_(self, cons, cs1, cs2);
  return self;
}

GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getIntersectPlanePlaneWithGeogebraCommonKernelKernelNDGeoCoordSys2D_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(id<GeogebraCommonKernelKernelNDGeoCoordSys2D> cs1, id<GeogebraCommonKernelKernelNDGeoCoordSys2D> cs2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initialize();
  IOSObjectArray *intersection = GeogebraCommonKernelMatrixCoordMatrixUtil_intersectPlanesWithGeogebraCommonKernelMatrixCoordMatrix_withGeogebraCommonKernelMatrixCoordMatrix_([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(cs1)) getCoordSys])) getMatrixOrthonormal], [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(cs2)) getCoordSys])) getMatrixOrthonormal]);
  GeogebraCommonKernelConstruction *c = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([cs1 toGeoElement])) getConstruction];
  [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(c)) getKernel])) setSilentModeWithBoolean:YES];
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *l = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(c, IOSObjectArray_Get(nil_chk(intersection), 0), IOSObjectArray_Get(intersection, 1)) autorelease];
  [((GeogebraCommonKernelKernel *) nil_chk([c getKernel])) setSilentModeWithBoolean:NO];
  return l;
}

GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getIntersectPlanePlaneWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelMatrixCoordSys_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelMatrixCoordSys *cs1, GeogebraCommonKernelMatrixCoordSys *cs2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initialize();
  IOSObjectArray *intersection = GeogebraCommonKernelMatrixCoordMatrixUtil_intersectPlanesWithGeogebraCommonKernelMatrixCoordMatrix_withGeogebraCommonKernelMatrixCoordMatrix_([((GeogebraCommonKernelMatrixCoordSys *) nil_chk(cs1)) getMatrixOrthonormal], [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(cs2)) getMatrixOrthonormal]);
  [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel])) setSilentModeWithBoolean:YES];
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *l = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(cons, IOSObjectArray_Get(nil_chk(intersection), 0), IOSObjectArray_Get(intersection, 1)) autorelease];
  [((GeogebraCommonKernelKernel *) nil_chk([cons getKernel])) setSilentModeWithBoolean:NO];
  return l;
}

jint GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithGeogebraCommonKernelKernelNDGeoCoordSys2D_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(id<GeogebraCommonKernelKernelNDGeoCoordSys2D> plane1, id<GeogebraCommonKernelKernelNDGeoCoordSys2D> plane2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initialize();
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane1)) getDirectionInD3])) crossProductWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane2)) getDirectionInD3]])) isZero]) {
    if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([plane2 getCoordSys])) getOrigin])) subWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([plane1 getCoordSys])) getOrigin]])) dotproductWithGeogebraCommonKernelMatrixCoords:[plane1 getDirectionInD3]])) {
      return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_CONTAINED_;
    }
    else {
      return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_PARALLEL_;
    }
  }
  else {
    return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_GENERAL_;
  }
}

jint GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_getConfigPlanePlaneWithGeogebraCommonKernelMatrixCoordSys_withGeogebraCommonKernelMatrixCoordSys_(GeogebraCommonKernelMatrixCoordSys *cs1, GeogebraCommonKernelMatrixCoordSys *cs2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_initialize();
  if ([((GeogebraCommonKernelMatrixCoordSys *) nil_chk(cs1)) getDimension] != 2 || [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(cs2)) getDimension] != 2) return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_NA_;
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([cs1 getNormal])) crossProductWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk(cs2)) getNormal]])) isZero]) {
    if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([cs2 getOrigin])) subWithGeogebraCommonKernelMatrixCoords:[cs1 getOrigin]])) dotproductWithGeogebraCommonKernelMatrixCoords:[cs1 getNormal]])) {
      return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_CONTAINED_;
    }
    else {
      return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_PARALLEL_;
    }
  }
  else {
    return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes_RESULTCATEGORY_GENERAL_;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanes)
