//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoCanvasImage.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GBufferedImage.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/MyImage.h"
#include "geogebra/common/euclidian/EuclidianStatic.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/geos/GeoCanvasImage.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoImage.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelGeosGeoCanvasImage () {
 @public
  id<GeogebraCommonAwtMyImage> bufferedImage_;
  id<GeogebraCommonAwtGGraphics2D> g_;
}

- (id<GeogebraCommonAwtGGraphics2D>)createImageWithGeogebraCommonAwtGBasicStroke:(id<GeogebraCommonAwtGBasicStroke>)objStroke
                                                     withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color
                                                     withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)bgColor1
                                                                       withFloat:(jfloat)backgroundTransparency
                                                                         withInt:(jint)xInt
                                                                         withInt:(jint)yInt;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoCanvasImage, bufferedImage_, id<GeogebraCommonAwtMyImage>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoCanvasImage, g_, id<GeogebraCommonAwtGGraphics2D>)

__attribute__((unused)) static id<GeogebraCommonAwtGGraphics2D> GeogebraCommonKernelGeosGeoCanvasImage_createImageWithGeogebraCommonAwtGBasicStroke_withGeogebraCommonAwtGColor_withGeogebraCommonAwtGColor_withFloat_withInt_withInt_(GeogebraCommonKernelGeosGeoCanvasImage *self, id<GeogebraCommonAwtGBasicStroke> objStroke, GeogebraCommonAwtGColor *color, GeogebraCommonAwtGColor *bgColor1, jfloat backgroundTransparency, jint xInt, jint yInt);

@implementation GeogebraCommonKernelGeosGeoCanvasImage

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label {
  GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_withNSString_(self, c, label);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                                 withInt:(jint)width
                                                 withInt:(jint)height {
  GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_withInt_withInt_(self, c, width, height);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoCanvasImage:(GeogebraCommonKernelGeosGeoCanvasImage *)img {
  GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelGeosGeoCanvasImage_(self, img);
  return self;
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelGeosGeoCanvasImage_(self) autorelease];
}

- (jboolean)showInEuclidianView {
  return [self isDefined];
}

- (id<GeogebraCommonAwtMyImage>)getFillImage {
  return bufferedImage_;
}

- (id<GeogebraCommonAwtGGraphics2D>)getGraphics {
  return g_;
}

- (jint)getWidth {
  return pixelWidth_;
}

- (jint)getHeight {
  return pixelHeight_;
}

- (id<GeogebraCommonAwtGGraphics2D>)createImageWithGeogebraCommonAwtGBasicStroke:(id<GeogebraCommonAwtGBasicStroke>)objStroke
                                                     withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color
                                                     withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)bgColor1
                                                                       withFloat:(jfloat)backgroundTransparency
                                                                         withInt:(jint)xInt
                                                                         withInt:(jint)yInt {
  return GeogebraCommonKernelGeosGeoCanvasImage_createImageWithGeogebraCommonAwtGBasicStroke_withGeogebraCommonAwtGColor_withGeogebraCommonAwtGColor_withFloat_withInt_withInt_(self, objStroke, color, bgColor1, backgroundTransparency, xInt, yInt);
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_IMAGE();
}

- (jboolean)isGeoImage {
  return YES;
}

- (jboolean)isIndependent {
  return YES;
}

- (void)getXMLWithBoolean:(jboolean)getListenersToo
withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
}

- (void)dealloc {
  RELEASE_(bufferedImage_);
  RELEASE_(g_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoCanvasImage", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:", "GeoCanvasImage", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withInt:withInt:", "GeoCanvasImage", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelGeosGeoCanvasImage:", "GeoCanvasImage", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "getFillImage", NULL, "Lgeogebra.common.awt.MyImage;", 0x1, NULL, NULL },
    { "getGraphics", NULL, "Lgeogebra.common.awt.GGraphics2D;", 0x1, NULL, NULL },
    { "getWidth", NULL, "I", 0x1, NULL, NULL },
    { "getHeight", NULL, "I", 0x1, NULL, NULL },
    { "createImageWithGeogebraCommonAwtGBasicStroke:withGeogebraCommonAwtGColor:withGeogebraCommonAwtGColor:withFloat:withInt:withInt:", "createImage", "Lgeogebra.common.awt.GGraphics2D;", 0x2, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "isGeoImage", NULL, "Z", 0x1, NULL, NULL },
    { "isIndependent", NULL, "Z", 0x1, NULL, NULL },
    { "getXMLWithBoolean:withJavaLangStringBuilder:", "getXML", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bufferedImage_", NULL, 0x2, "Lgeogebra.common.awt.MyImage;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.awt.GGraphics2D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoCanvasImage = { 2, "GeoCanvasImage", "geogebra.common.kernel.geos", NULL, 0x1, 15, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoCanvasImage;
}

@end

void GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoCanvasImage *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_withInt_withInt_(self, c, 200, 100);
}

GeogebraCommonKernelGeosGeoCanvasImage *new_GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoCanvasImage *self = [GeogebraCommonKernelGeosGeoCanvasImage alloc];
  GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_withNSString_(GeogebraCommonKernelGeosGeoCanvasImage *self, GeogebraCommonKernelConstruction *c, NSString *label) {
  GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_(self, c);
  [self setLabelWithNSString:label];
}

GeogebraCommonKernelGeosGeoCanvasImage *new_GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_withNSString_(GeogebraCommonKernelConstruction *c, NSString *label) {
  GeogebraCommonKernelGeosGeoCanvasImage *self = [GeogebraCommonKernelGeosGeoCanvasImage alloc];
  GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_withNSString_(self, c, label);
  return self;
}

void GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_withInt_withInt_(GeogebraCommonKernelGeosGeoCanvasImage *self, GeogebraCommonKernelConstruction *c, jint width, jint height) {
  GeogebraCommonKernelGeosGeoImage_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelGeosGeoCanvasImage_set_bufferedImage_(self, nil);
  self->pixelWidth_ = width;
  self->pixelHeight_ = height;
  [self setBackgroundColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_blue_()];
  id<GeogebraCommonAwtGBasicStroke> objStroke = GeogebraCommonEuclidianEuclidianStatic_getDefaultStroke();
  GeogebraCommonKernelGeosGeoCanvasImage_createImageWithGeogebraCommonAwtGBasicStroke_withGeogebraCommonAwtGColor_withGeogebraCommonAwtGColor_withFloat_withInt_withInt_(self, objStroke, [self getAlgebraColor], [self getBackgroundColor], self->alphaValue_, self->pixelWidth_, self->pixelHeight_);
}

GeogebraCommonKernelGeosGeoCanvasImage *new_GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_withInt_withInt_(GeogebraCommonKernelConstruction *c, jint width, jint height) {
  GeogebraCommonKernelGeosGeoCanvasImage *self = [GeogebraCommonKernelGeosGeoCanvasImage alloc];
  GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_withInt_withInt_(self, c, width, height);
  return self;
}

void GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelGeosGeoCanvasImage_(GeogebraCommonKernelGeosGeoCanvasImage *self, GeogebraCommonKernelGeosGeoCanvasImage *img) {
  GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_(self, ((GeogebraCommonKernelGeosGeoCanvasImage *) nil_chk(img))->cons_);
  [self setWithGeogebraCommonKernelGeosGeoElement:img];
}

GeogebraCommonKernelGeosGeoCanvasImage *new_GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelGeosGeoCanvasImage_(GeogebraCommonKernelGeosGeoCanvasImage *img) {
  GeogebraCommonKernelGeosGeoCanvasImage *self = [GeogebraCommonKernelGeosGeoCanvasImage alloc];
  GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelGeosGeoCanvasImage_(self, img);
  return self;
}

id<GeogebraCommonAwtGGraphics2D> GeogebraCommonKernelGeosGeoCanvasImage_createImageWithGeogebraCommonAwtGBasicStroke_withGeogebraCommonAwtGColor_withGeogebraCommonAwtGColor_withFloat_withInt_withInt_(GeogebraCommonKernelGeosGeoCanvasImage *self, id<GeogebraCommonAwtGBasicStroke> objStroke, GeogebraCommonAwtGColor *color, GeogebraCommonAwtGColor *bgColor1, jfloat backgroundTransparency, jint xInt, jint yInt) {
  GeogebraCommonKernelGeosGeoCanvasImage_set_bufferedImage_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newMyImageWithInt:xInt withInt:yInt withInt:GeogebraCommonAwtGBufferedImage_TYPE_INT_ARGB]);
  GeogebraCommonKernelGeosGeoCanvasImage_set_g_(self, [((id<GeogebraCommonAwtMyImage>) nil_chk(self->bufferedImage_)) createGraphics]);
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(self->g_)) setTransparent];
  if (bgColor1 == nil) {
    [self->g_ setColorWithGeogebraCommonAwtGColor:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newColorWithInt:255 withInt:255 withInt:255 withInt:J2ObjCFpToInt((backgroundTransparency * 255.0f))]];
  }
  else {
    [self->g_ setColorWithGeogebraCommonAwtGColor:bgColor1];
  }
  [self->g_ fillRectWithInt:0 withInt:0 withInt:xInt withInt:yInt];
  [self->g_ setColorWithGeogebraCommonAwtGColor:color];
  [self->g_ setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke];
  return self->g_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoCanvasImage)
