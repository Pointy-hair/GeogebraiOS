//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/Kernel3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/GeoGebraConstants.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/geogebra3D/io/MyXMLHandler3D.h"
#include "geogebra/common/geogebra3D/kernel3D/Construction3D.h"
#include "geogebra/common/geogebra3D/kernel3D/Kernel3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoDispatcher3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoVectorPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/Manager3D.h"
#include "geogebra/common/geogebra3D/kernel3D/arithmetic/ExpressionNodeEvaluator3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/AlgebraProcessor3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CommandDispatcher3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoAngle3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoAxis3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoClippingCube3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCoords4D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3DConstant.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoRay3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSpace.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSurfaceCartesian3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "geogebra/common/io/MyXMLHandler.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoVectorPoint.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeEvaluator.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/CommandDispatcher.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoAxisND.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoRayND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonGeogebra3DKernel3DKernel3D () {
 @public
  jdouble zmin3_, zmax3_, zscale3_;
}

@end

@implementation GeogebraCommonGeogebra3DKernel3DKernel3D

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonGeogebra3DKernel3DKernel3D_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

- (id<GeogebraCommonKernelKernelNDGeoAxisND>)getXAxis3D {
  return [((GeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [GeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getXAxis3D];
}

- (id<GeogebraCommonKernelKernelNDGeoAxisND>)getYAxis3D {
  return [((GeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [GeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getYAxis3D];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D *)getZAxis3D {
  return [((GeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [GeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getZAxis3D];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3DConstant *)getXOYPlane {
  return [((GeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [GeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getXOYPlane];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D *)getClippingCube {
  return [((GeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [GeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getClippingCube];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoSpace *)getSpace {
  return [((GeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [GeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getSpace];
}

- (NSString *)getModeTextWithInt:(jint)mode {
  switch (mode) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_VIEW_IN_FRONT_OF:
    return @"ViewInFrontOf";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PLANE_THREE_POINTS:
    return @"PlaneThreePoint";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PLANE:
    return @"Plane";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL_PLANE:
    return @"OrthogonalPlane";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PARALLEL_PLANE:
    return @"ParallelPlane";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CUBE:
    return @"Cube";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_TETRAHEDRON:
    return @"Tetrahedron";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
    return @"Prism";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_EXTRUSION:
    return @"Extrusion";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CONIFY:
    return @"Conify";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
    return @"Pyramid";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_NET:
    return @"Net";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_POINT_RADIUS:
    return @"SpherePointRadius";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_SPHERE_TWO_POINTS:
    return @"Sphere2";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CONE_TWO_POINTS_RADIUS:
    return @"Cone";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CYLINDER_TWO_POINTS_RADIUS:
    return @"Cylinder";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATEVIEW:
    return @"RotateView";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS_DIRECTION:
    return @"CirclePointRadiusDirection";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_AXIS_POINT:
    return @"CircleAxisPoint";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_VOLUME:
    return @"Volume";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_PLANE:
    return @"MirrorAtPlane";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_AROUND_LINE:
    return @"RotateAroundLine";
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL_THREE_D:
    return @"OrthogonalThreeD";
    default:
    return [super getModeTextWithInt:mode];
  }
}

- (id<GeogebraCommonKernelManager3DInterface>)newManager3DWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  return [new_GeogebraCommonGeogebra3DKernel3DAlgosManager3D_initWithGeogebraCommonKernelKernel_(kernel) autorelease];
}

- (jboolean)isZvarAllowed {
  return NO;
}

- (void)newConstruction {
  GeogebraCommonKernelKernel_setAndConsume_cons_(self, new_GeogebraCommonGeogebra3DKernel3DConstruction3D_initWithGeogebraCommonGeogebra3DKernel3DKernel3D_(self));
}

- (GeogebraCommonIoMyXMLHandler *)newMyXMLHandlerWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                           withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)construction {
  return [new_GeogebraCommonGeogebra3DIoMyXMLHandler3D_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(kernel, construction) autorelease];
}

- (GeogebraCommonKernelArithmeticExpressionNodeEvaluator *)newExpressionNodeEvaluatorWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  return [new_GeogebraCommonGeogebra3DKernel3DArithmeticExpressionNodeEvaluator3D_initWithGeogebraCommonMainLocalization_withGeogebraCommonKernelKernel_([((GeogebraCommonMainApp *) nil_chk(app_)) getLocalization], kernel) autorelease];
}

- (GeogebraCommonKernelCommandsAlgebraProcessor *)newAlgebraProcessorWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCommandDispatcher *cd = [new_GeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D_initWithGeogebraCommonKernelKernel_(kernel) autorelease];
  return [new_GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandDispatcher_(kernel, cd) autorelease];
}

- (JavaUtilTreeSet *)getPointSet {
  JavaUtilTreeSet *t3d = [((GeogebraCommonKernelConstruction *) nil_chk([self getConstruction])) getGeoSetLabelOrderWithGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_POINT3D()];
  JavaUtilTreeSet *t = [super getPointSet];
  [((JavaUtilTreeSet *) nil_chk(t)) addAllWithJavaUtilCollection:t3d];
  return t;
}

- (GeogebraCommonKernelGeosGeoElement *)createGeoElementWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons1
                                                                                withNSString:(NSString *)type {
  switch ([((NSString *) nil_chk(type)) charAtWithInt:0]) {
    case 'a':
    if ([type isEqual:@"axis3d"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"angle3d"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'c':
    if ([type isEqual:@"conic3d"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"curvecartesian3d"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'l':
    if ([type isEqual:@"line3d"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'p':
    if ([type isEqual:@"point3d"]) {
      return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
    }
    else if ([type isEqual:@"polygon3d"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons1, nil) autorelease];
    else if ([type isEqual:@"plane3d"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"polyline3d"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons1, nil) autorelease];
    else if ([type isEqual:@"polyhedron"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'q':
    if ([type isEqual:@"quadric3d"] || [type isEqual:@"quadric"]) {
      return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
    }
    else if ([type isEqual:@"quadric3dpart"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
    else if ([type isEqual:@"quadric3dlimited"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'r':
    if ([type isEqual:@"ray3d"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 's':
    if ([type isEqual:@"segment3d"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
    if ([type isEqual:@"surfacecartesian3d"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoSurfaceCartesian3D_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
    case 'v':
    if ([type isEqual:@"vector3d"]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
  }
  return [super createGeoElementWithGeogebraCommonKernelConstruction:cons1 withNSString:type];
}

- (jboolean)handleCoordsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                     withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  if ([geo isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class]]) {
    @try {
      jdouble ox = JavaLangDouble_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"ox"]);
      jdouble oy = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"oy"]);
      jdouble oz = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"oz"]);
      jdouble ow = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"ow"]);
      jdouble vx = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"vx"]);
      jdouble vy = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"vy"]);
      jdouble vz = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"vz"]);
      jdouble vw = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"vw"]);
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setCoordWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(ox, oy, oz, ow) autorelease] withGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(vx, vy, vz, vw) autorelease]];
      return YES;
    }
    @catch (JavaLangException *e) {
      return NO;
    }
  }
  if (!([GeogebraCommonGeogebra3DKernel3DGeosGeoCoords4D_class_() isInstance:geo])) {
    return [super handleCoordsWithGeogebraCommonKernelGeosGeoElement:geo withJavaUtilLinkedHashMap:attrs];
  }
  @try {
    jdouble x = JavaLangDouble_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"x"]);
    jdouble y = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"y"]);
    jdouble z = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"z"]);
    jdouble w = JavaLangDouble_parseDoubleWithNSString_([attrs getWithId:@"w"]);
    [((id<GeogebraCommonGeogebra3DKernel3DGeosGeoCoords4D>) nil_chk(((id<GeogebraCommonGeogebra3DKernel3DGeosGeoCoords4D>) check_protocol_cast(geo, @protocol(GeogebraCommonGeogebra3DKernel3DGeosGeoCoords4D))))) setCoordsWithDouble:x withDouble:y withDouble:z withDouble:w];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)getDefaultPlane {
  return [self getXOYPlane];
}

- (id<GeogebraCommonKernelKernelNDGeoLineND>)OrthogonalLineWithNSString:(NSString *)label
                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                              withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)l
                         withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([self getManager3D])) OrthogonalLine3DWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:P withGeogebraCommonKernelKernelNDGeoDirectionND:l withGeogebraCommonKernelKernelNDGeoDirectionND:direction];
}

- (NSString *)getXMLFileFormat {
  return GeogebraCommonGeoGebraConstants_get_XML_FILE_FORMAT_();
}

- (GeogebraCommonKernelGeosGeoElement *)copy3DWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  {
    GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *v;
    GeogebraCommonKernelGeosGeoElement *ret;
    switch ([[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
      case GeogebraCommonPluginGeoClass_POINT:
      return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelKernelNDGeoPointND_((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) autorelease];
      case GeogebraCommonPluginGeoClass_VECTOR:
      v = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_([geo getConstruction]) autorelease];
      [v setWithGeogebraCommonKernelGeosGeoElement:geo];
      return v;
      case GeogebraCommonPluginGeoClass_LINE:
      ret = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_([geo getConstruction]) autorelease];
      [ret setWithGeogebraCommonKernelGeosGeoElement:geo];
      return ret;
      case GeogebraCommonPluginGeoClass_SEGMENT:
      ret = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_initWithGeogebraCommonKernelConstruction_([geo getConstruction]) autorelease];
      [ret setWithGeogebraCommonKernelGeosGeoElement:geo];
      return ret;
      case GeogebraCommonPluginGeoClass_RAY:
      ret = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithGeogebraCommonKernelConstruction_([geo getConstruction]) autorelease];
      [ret setWithGeogebraCommonKernelGeosGeoElement:geo];
      return ret;
      case GeogebraCommonPluginGeoClass_POLYGON:
      ret = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_([geo getConstruction]) autorelease];
      [ret setWithGeogebraCommonKernelGeosGeoElement:geo];
      return ret;
      case GeogebraCommonPluginGeoClass_CONIC:
      return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelKernelNDGeoConicND_((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoConicND class])) autorelease];
      default:
      return [super copy3DWithGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (GeogebraCommonKernelGeosGeoElement *)copyInternal3DWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                    withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *poly;
    switch ([[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
      case GeogebraCommonPluginGeoClass_POLYGON:
      poly = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, nil) autorelease];
      [((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPolygon class])) copyInternalWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelGeosGeoPolygon:poly];
      return poly;
      default:
      return [super copyInternal3DWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (id<GeogebraCommonKernelKernelNDGeoRayND>)RayNDWithNSString:(NSString *)label
                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([self getManager3D])) Ray3DWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:P withGeogebraCommonKernelKernelNDGeoPointND:Q];
  return [super RayWithNSString:label withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(Q, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (id<GeogebraCommonKernelKernelNDGeoSegmentND>)SegmentNDWithNSString:(NSString *)label
                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                           withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([self getManager3D])) Segment3DWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:P withGeogebraCommonKernelKernelNDGeoPointND:Q];
  return [super SegmentWithNSString:label withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(Q, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (IOSObjectArray *)PolygonNDWithNSStringArray:(IOSObjectArray *)labels
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)P {
  jboolean is3D = NO;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(P))->size_ && !is3D; i++) if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(P, i), [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) is3D = YES;
  if (is3D) return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([self getManager3D])) Polygon3DWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoPointNDArray:P];
  return [super PolygonWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoPointNDArray:P];
}

- (IOSObjectArray *)PolyLineNDWithNSStringArray:(IOSObjectArray *)labels
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)P {
  jboolean is3D = NO;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(P))->size_ && !is3D; i++) if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(P, i), [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) is3D = YES;
  if (is3D) return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([self getManager3D])) PolyLine3DWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoPointNDArray:P];
  return [super PolyLineWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoPointNDArray:P withBoolean:NO];
}

- (GeogebraCommonKernelAlgosAlgoDispatcher *)newAlgoDispatcherWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons1 {
  return [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDispatcher3D_initWithGeogebraCommonKernelConstruction_(cons1) autorelease];
}

- (jdouble)getZmaxWithInt:(jint)i {
  if (i == 2) {
    return zmax3_;
  }
  return [super getZmaxWithInt:i];
}

- (jdouble)getZminWithInt:(jint)i {
  if (i == 2) {
    return zmin3_;
  }
  return [super getZminWithInt:i];
}

- (jdouble)getZscaleWithInt:(jint)i {
  if (i == 2) {
    return zscale3_;
  }
  return [super getZscaleWithInt:i];
}

- (void)setEuclidianView3DBoundsWithInt:(jint)view
                             withDouble:(jdouble)xmin
                             withDouble:(jdouble)xmax
                             withDouble:(jdouble)ymin
                             withDouble:(jdouble)ymax
                             withDouble:(jdouble)zmin
                             withDouble:(jdouble)zmax
                             withDouble:(jdouble)xscale
                             withDouble:(jdouble)yscale
                             withDouble:(jdouble)zscale {
  if (3 > ((IOSDoubleArray *) nil_chk(self->xmin_))->size_) {
    GeogebraCommonKernelKernel_set_xmin_(self, [self prolongWithDoubleArray:self->xmin_ withInt:3]);
    GeogebraCommonKernelKernel_set_xmax_(self, [self prolongWithDoubleArray:self->xmin_ withInt:3]);
    GeogebraCommonKernelKernel_set_ymin_(self, [self prolongWithDoubleArray:self->ymin_ withInt:3]);
    GeogebraCommonKernelKernel_set_ymax_(self, [self prolongWithDoubleArray:self->ymax_ withInt:3]);
    GeogebraCommonKernelKernel_set_xscale_(self, [self prolongWithDoubleArray:self->xscale_ withInt:3]);
    GeogebraCommonKernelKernel_set_yscale_(self, [self prolongWithDoubleArray:self->yscale_ withInt:3]);
  }
  *IOSDoubleArray_GetRef(nil_chk(self->xmin_), 2) = xmin;
  *IOSDoubleArray_GetRef(nil_chk(self->xmax_), 2) = xmax;
  *IOSDoubleArray_GetRef(nil_chk(self->ymin_), 2) = ymin;
  *IOSDoubleArray_GetRef(nil_chk(self->ymax_), 2) = ymax;
  self->zmin3_ = zmin;
  self->zmax3_ = zmax;
  *IOSDoubleArray_GetRef(nil_chk(self->xscale_), 2) = xscale;
  *IOSDoubleArray_GetRef(nil_chk(self->yscale_), 2) = yscale;
  self->zscale3_ = zscale;
  [self notifyEuclidianViewCE];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)RigidPolygonPointOnCircleWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)circle
                                                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point1 {
  if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle)) isGeoElement3D]) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([self getManager3D])) Point3DWithNSString:nil withGeogebraCommonKernelPath:circle withDouble:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point1)) getInhomX] withDouble:[point1 getInhomY] withDouble:[point1 getInhomZ] withBoolean:NO withBoolean:YES];
  }
  return [super RigidPolygonPointOnCircleWithGeogebraCommonKernelKernelNDGeoConicND:circle withGeogebraCommonKernelKernelNDGeoPointND:point1];
}

- (void)RigidPolygonAddEndOfCommandWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                 withBoolean:(jboolean)is3D {
  if (is3D) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"],xOyPlane]"];
  }
  else {
    [super RigidPolygonAddEndOfCommandWithJavaLangStringBuilder:sb withBoolean:is3D];
  }
}

- (GeogebraCommonKernelGeosGeoElement *)wrapInVectorWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)pt {
  if ([pt isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoVectorPoint3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoVectorPoint3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, pt) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
    return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getVector], [GeogebraCommonKernelGeosGeoElement class]);
  }
  GeogebraCommonKernelAlgosAlgoVectorPoint *algo = [new_GeogebraCommonKernelAlgosAlgoVectorPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, pt) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
  return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getVector], [GeogebraCommonKernelGeosGeoElement class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:", "Kernel3D", NULL, 0x1, NULL, NULL },
    { "getXAxis3D", NULL, "Lgeogebra.common.kernel.kernelND.GeoAxisND;", 0x1, NULL, NULL },
    { "getYAxis3D", NULL, "Lgeogebra.common.kernel.kernelND.GeoAxisND;", 0x1, NULL, NULL },
    { "getZAxis3D", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoAxis3D;", 0x1, NULL, NULL },
    { "getXOYPlane", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3DConstant;", 0x1, NULL, NULL },
    { "getClippingCube", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoClippingCube3D;", 0x1, NULL, NULL },
    { "getSpace", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoSpace;", 0x1, NULL, NULL },
    { "getModeTextWithInt:", "getModeText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "newManager3DWithGeogebraCommonKernelKernel:", "newManager3D", "Lgeogebra.common.kernel.Manager3DInterface;", 0x1, NULL, NULL },
    { "isZvarAllowed", NULL, "Z", 0x1, NULL, NULL },
    { "newConstruction", NULL, "V", 0x4, NULL, NULL },
    { "newMyXMLHandlerWithGeogebraCommonKernelKernel:withGeogebraCommonKernelConstruction:", "newMyXMLHandler", "Lgeogebra.common.io.MyXMLHandler;", 0x1, NULL, NULL },
    { "newExpressionNodeEvaluatorWithGeogebraCommonKernelKernel:", "newExpressionNodeEvaluator", "Lgeogebra.common.kernel.arithmetic.ExpressionNodeEvaluator;", 0x1, NULL, NULL },
    { "newAlgebraProcessorWithGeogebraCommonKernelKernel:", "newAlgebraProcessor", "Lgeogebra.common.kernel.commands.AlgebraProcessor;", 0x1, NULL, NULL },
    { "getPointSet", NULL, "Ljava.util.TreeSet;", 0x1, NULL, NULL },
    { "createGeoElementWithGeogebraCommonKernelConstruction:withNSString:", "createGeoElement", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "handleCoordsWithGeogebraCommonKernelGeosGeoElement:withJavaUtilLinkedHashMap:", "handleCoords", "Z", 0x1, NULL, NULL },
    { "getDefaultPlane", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x1, NULL, NULL },
    { "OrthogonalLineWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "OrthogonalLine", "Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "getXMLFileFormat", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "copy3DWithGeogebraCommonKernelGeosGeoElement:", "copy3D", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "copyInternal3DWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:", "copyInternal3D", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "RayNDWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "RayND", "Lgeogebra.common.kernel.kernelND.GeoRayND;", 0x11, NULL, NULL },
    { "SegmentNDWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "SegmentND", "Lgeogebra.common.kernel.kernelND.GeoSegmentND;", 0x11, NULL, NULL },
    { "PolygonNDWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "PolygonND", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PolyLineNDWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "PolyLineND", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "newAlgoDispatcherWithGeogebraCommonKernelConstruction:", "newAlgoDispatcher", "Lgeogebra.common.kernel.algos.AlgoDispatcher;", 0x4, NULL, NULL },
    { "getZmaxWithInt:", "getZmax", "D", 0x1, NULL, NULL },
    { "getZminWithInt:", "getZmin", "D", 0x1, NULL, NULL },
    { "getZscaleWithInt:", "getZscale", "D", 0x1, NULL, NULL },
    { "setEuclidianView3DBoundsWithInt:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setEuclidianView3DBounds", "V", 0x11, NULL, NULL },
    { "RigidPolygonPointOnCircleWithGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoPointND:", "RigidPolygonPointOnCircle", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "RigidPolygonAddEndOfCommandWithJavaLangStringBuilder:withBoolean:", "RigidPolygonAddEndOfCommand", "V", 0x4, NULL, NULL },
    { "wrapInVectorWithGeogebraCommonKernelKernelNDGeoPointND:", "wrapInVector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "zmin3_", NULL, 0x2, "D", NULL, NULL,  },
    { "zmax3_", NULL, 0x2, "D", NULL, NULL,  },
    { "zscale3_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DKernel3D = { 2, "Kernel3D", "geogebra.common.geogebra3D.kernel3D", NULL, 0x1, 34, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DKernel3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DKernel3D_initWithGeogebraCommonMainApp_(GeogebraCommonGeogebra3DKernel3DKernel3D *self, GeogebraCommonMainApp *app) {
  GeogebraCommonKernelKernel_initWithGeogebraCommonMainApp_(self, app);
}

GeogebraCommonGeogebra3DKernel3DKernel3D *new_GeogebraCommonGeogebra3DKernel3DKernel3D_initWithGeogebraCommonMainApp_(GeogebraCommonMainApp *app) {
  GeogebraCommonGeogebra3DKernel3DKernel3D *self = [GeogebraCommonGeogebra3DKernel3DKernel3D alloc];
  GeogebraCommonGeogebra3DKernel3DKernel3D_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DKernel3D)
