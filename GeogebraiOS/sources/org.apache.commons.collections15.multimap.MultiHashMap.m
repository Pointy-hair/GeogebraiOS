//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/collections15/multimap/MultiHashMap.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/System.h"
#include "java/util/AbstractCollection.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"
#include "org/apache/commons/collections15/MultiMap.h"
#include "org/apache/commons/collections15/iterators/EmptyIterator.h"
#include "org/apache/commons/collections15/multimap/MultiHashMap.h"

#define OrgApacheCommonsCollections15MultimapMultiHashMap_serialVersionUID 1943563828307035349LL

@interface OrgApacheCommonsCollections15MultimapMultiHashMap () {
 @public
  id<JavaUtilCollection> values__;
  JavaUtilHashMap *internalMap_;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)s;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCollections15MultimapMultiHashMap, values__, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCollections15MultimapMultiHashMap, internalMap_, JavaUtilHashMap *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsCollections15MultimapMultiHashMap, serialVersionUID, jlong)

@interface OrgApacheCommonsCollections15MultimapMultiHashMap_Values : JavaUtilAbstractCollection {
 @public
  OrgApacheCommonsCollections15MultimapMultiHashMap *this$0_;
}

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (void)clear;

- (instancetype)initWithOrgApacheCommonsCollections15MultimapMultiHashMap:(OrgApacheCommonsCollections15MultimapMultiHashMap *)outer$;


@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCollections15MultimapMultiHashMap_Values)

J2OBJC_FIELD_SETTER(OrgApacheCommonsCollections15MultimapMultiHashMap_Values, this$0_, OrgApacheCommonsCollections15MultimapMultiHashMap *)

__attribute__((unused)) static void OrgApacheCommonsCollections15MultimapMultiHashMap_Values_initWithOrgApacheCommonsCollections15MultimapMultiHashMap_(OrgApacheCommonsCollections15MultimapMultiHashMap_Values *self, OrgApacheCommonsCollections15MultimapMultiHashMap *outer$);

__attribute__((unused)) static OrgApacheCommonsCollections15MultimapMultiHashMap_Values *new_OrgApacheCommonsCollections15MultimapMultiHashMap_Values_initWithOrgApacheCommonsCollections15MultimapMultiHashMap_(OrgApacheCommonsCollections15MultimapMultiHashMap *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsCollections15MultimapMultiHashMap_Values)

@interface OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> backedIterator_;
  id<JavaUtilIterator> tempIterator_;
}

- (instancetype)initWithOrgApacheCommonsCollections15MultimapMultiHashMap:(OrgApacheCommonsCollections15MultimapMultiHashMap *)outer$;

- (jboolean)searchNextIterator;

- (jboolean)hasNext;

- (id)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator)

J2OBJC_FIELD_SETTER(OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator, backedIterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator, tempIterator_, id<JavaUtilIterator>)

__attribute__((unused)) static void OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator_initWithOrgApacheCommonsCollections15MultimapMultiHashMap_(OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator *self, OrgApacheCommonsCollections15MultimapMultiHashMap *outer$);

__attribute__((unused)) static OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator *new_OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator_initWithOrgApacheCommonsCollections15MultimapMultiHashMap_(OrgApacheCommonsCollections15MultimapMultiHashMap *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static jboolean OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator_searchNextIterator(OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator)

@implementation OrgApacheCommonsCollections15MultimapMultiHashMap

- (instancetype)init {
  OrgApacheCommonsCollections15MultimapMultiHashMap_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity {
  OrgApacheCommonsCollections15MultimapMultiHashMap_initWithInt_(self, initialCapacity);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)loadFactor {
  OrgApacheCommonsCollections15MultimapMultiHashMap_initWithInt_withFloat_(self, initialCapacity, loadFactor);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)mapToCopy {
  OrgApacheCommonsCollections15MultimapMultiHashMap_initWithJavaUtilMap_(self, mapToCopy);
  return self;
}

- (instancetype)initWithOrgApacheCommonsCollections15MultiMap:(id<OrgApacheCommonsCollections15MultiMap>)mapToCopy {
  OrgApacheCommonsCollections15MultimapMultiHashMap_initWithOrgApacheCommonsCollections15MultiMap_(self, mapToCopy);
  return self;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)s {
  [((JavaIoObjectInputStream *) nil_chk(s)) defaultReadObject];
  NSString *version_ = @"1.2";
  @try {
    version_ = JavaLangSystem_getPropertyWithNSString_(@"java.version");
  }
  @catch (JavaLangSecurityException *ex) {
  }
  if ([((NSString *) nil_chk(version_)) hasPrefix:@"1.2"] || [version_ hasPrefix:@"1.3"]) {
    for (id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([self entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
      id<JavaUtilMap_Entry> entry_ = [iterator next];
      [((JavaUtilHashMap *) nil_chk(internalMap_)) putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:[entry_ getValue]];
    }
  }
}

- (jint)totalSize {
  jint total = 0;
  id<JavaUtilCollection> values = [((JavaUtilHashMap *) nil_chk(internalMap_)) values];
  for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(values)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilCollection> coll = [it next];
    total += [((id<JavaUtilCollection>) nil_chk(coll)) size];
  }
  return total;
}

- (id<JavaUtilCollection>)getCollectionWithId:(id)key {
  return [((JavaUtilHashMap *) nil_chk(internalMap_)) getWithId:key];
}

- (jint)sizeWithId:(id)key {
  id<JavaUtilCollection> coll = [self getCollectionWithId:key];
  if (coll == nil) {
    return 0;
  }
  return [((id<JavaUtilCollection>) nil_chk(coll)) size];
}

- (id<JavaUtilIterator>)iteratorWithId:(id)key {
  id<JavaUtilCollection> coll = [self getCollectionWithId:key];
  if (coll == nil) {
    return OrgApacheCommonsCollections15IteratorsEmptyIterator_get_INSTANCE_();
  }
  return [((id<JavaUtilCollection>) nil_chk(coll)) iterator];
}

- (id)putWithId:(id)key
         withId:(id)value {
  id<JavaUtilCollection> coll = [self getCollectionWithId:key];
  if (coll == nil) {
    coll = [self createCollectionWithJavaUtilCollection:nil];
    [((JavaUtilHashMap *) nil_chk(internalMap_)) putWithId:key withId:coll];
  }
  jboolean results = [((id<JavaUtilCollection>) nil_chk(coll)) addWithId:value];
  return results ? value : nil;
}

- (jboolean)putAllWithId:(id)key
  withJavaUtilCollection:(id<JavaUtilCollection>)values {
  if (values == nil || [values size] == 0) {
    return NO;
  }
  id<JavaUtilCollection> coll = [self getCollectionWithId:key];
  if (coll == nil) {
    coll = [self createCollectionWithJavaUtilCollection:values];
    if ([((id<JavaUtilCollection>) nil_chk(coll)) size] == 0) {
      return NO;
    }
    [((JavaUtilHashMap *) nil_chk(internalMap_)) putWithId:key withId:coll];
    return YES;
  }
  else {
    return [coll addAllWithJavaUtilCollection:values];
  }
}

- (jboolean)containsValueWithId:(id)value {
  id<JavaUtilSet> pairs = [((JavaUtilHashMap *) nil_chk(internalMap_)) entrySet];
  if (pairs == nil) {
    return NO;
  }
  id<JavaUtilIterator> pairsIterator = [((id<JavaUtilSet>) nil_chk(pairs)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(pairsIterator)) hasNext]) {
    id<JavaUtilMap_Entry> keyValuePair = [pairsIterator next];
    id<JavaUtilCollection> coll = [((id<JavaUtilMap_Entry>) nil_chk(keyValuePair)) getValue];
    if ([((id<JavaUtilCollection>) nil_chk(coll)) containsWithId:value]) {
      return YES;
    }
  }
  return NO;
}

- (jboolean)containsValueWithId:(id)key
                         withId:(id)value {
  id<JavaUtilCollection> coll = [self getCollectionWithId:key];
  if (coll == nil) {
    return NO;
  }
  return [((id<JavaUtilCollection>) nil_chk(coll)) containsWithId:value];
}

- (id)removeWithId:(id)key
            withId:(id)item {
  id<JavaUtilCollection> valuesForKey = [self getCollectionWithId:key];
  if (valuesForKey == nil) {
    return nil;
  }
  [((id<JavaUtilCollection>) nil_chk(valuesForKey)) removeWithId:item];
  if ([valuesForKey isEmpty]) {
    [self removeWithId:key];
  }
  return (id) item;
}

- (void)clear {
  id<JavaUtilSet> pairs = [((JavaUtilHashMap *) nil_chk(internalMap_)) entrySet];
  id<JavaUtilIterator> pairsIterator = [((id<JavaUtilSet>) nil_chk(pairs)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(pairsIterator)) hasNext]) {
    id<JavaUtilMap_Entry> keyValuePair = [pairsIterator next];
    id<JavaUtilCollection> coll = [((id<JavaUtilMap_Entry>) nil_chk(keyValuePair)) getValue];
    [((id<JavaUtilCollection>) nil_chk(coll)) clear];
  }
  [internalMap_ clear];
}

- (jint)size {
  return [((JavaUtilHashMap *) nil_chk(internalMap_)) size];
}

- (id<JavaUtilCollection>)getWithId:(id)key {
  return [((JavaUtilHashMap *) nil_chk(internalMap_)) getWithId:key];
}

- (id<JavaUtilCollection>)removeWithId:(id)key {
  return [((JavaUtilHashMap *) nil_chk(internalMap_)) removeWithId:key];
}

- (jboolean)isEmpty {
  return [((JavaUtilHashMap *) nil_chk(internalMap_)) isEmpty];
}

- (jboolean)containsKeyWithId:(id)key {
  return [((JavaUtilHashMap *) nil_chk(internalMap_)) containsKeyWithId:key];
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  for (id __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(map)) keySet])) {
    [self putWithId:key withId:[map getWithId:key]];
  }
}

- (void)putAllWithOrgApacheCommonsCollections15MultiMap:(id<OrgApacheCommonsCollections15MultiMap>)map {
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<OrgApacheCommonsCollections15MultiMap>) nil_chk(map)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
    for (id __strong v in nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) {
      [self putWithId:[entry_ getKey] withId:v];
    }
  }
}

- (id<JavaUtilSet>)keySet {
  return [((JavaUtilHashMap *) nil_chk(internalMap_)) keySet];
}

- (id<JavaUtilSet>)entrySet {
  return [((JavaUtilHashMap *) nil_chk(internalMap_)) entrySet];
}

- (id<JavaUtilMap>)map {
  return internalMap_;
}

- (id<JavaUtilCollection>)values {
  id<JavaUtilCollection> vs = values__;
  return vs != nil ? vs : (OrgApacheCommonsCollections15MultimapMultiHashMap_setAndConsume_values__(self, new_OrgApacheCommonsCollections15MultimapMultiHashMap_Values_initWithOrgApacheCommonsCollections15MultimapMultiHashMap_(self)));
}

- (id)clone {
  OrgApacheCommonsCollections15MultimapMultiHashMap *cloned = [new_OrgApacheCommonsCollections15MultimapMultiHashMap_init() autorelease];
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(internalMap_)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = [it next];
    for (id __strong v in nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) {
      [cloned putWithId:[entry_ getKey] withId:v];
    }
  }
  return cloned;
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[OrgApacheCommonsCollections15MultimapMultiHashMap class]]) {
    return [((JavaUtilHashMap *) nil_chk(internalMap_)) isEqual:[((OrgApacheCommonsCollections15MultimapMultiHashMap *) nil_chk(((OrgApacheCommonsCollections15MultimapMultiHashMap *) check_class_cast(obj, [OrgApacheCommonsCollections15MultimapMultiHashMap class])))) map]];
  }
  else return NO;
}

- (NSUInteger)hash {
  return ((jint) [((JavaUtilHashMap *) nil_chk(internalMap_)) hash]);
}

- (id<JavaUtilCollection>)createCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  if (coll == nil) {
    return [new_JavaUtilArrayList_init() autorelease];
  }
  else {
    return [new_JavaUtilArrayList_initWithJavaUtilCollection_(coll) autorelease];
  }
}

- (NSString *)description {
  return [((JavaUtilHashMap *) nil_chk(internalMap_)) description];
}

- (void)dealloc {
  RELEASE_(values__);
  RELEASE_(internalMap_);
  [super dealloc];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MultiHashMap", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "MultiHashMap", NULL, 0x1, NULL, NULL },
    { "initWithInt:withFloat:", "MultiHashMap", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilMap:", "MultiHashMap", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsCollections15MultiMap:", "MultiHashMap", NULL, 0x1, NULL, NULL },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;", NULL },
    { "totalSize", NULL, "I", 0x1, NULL, NULL },
    { "getCollectionWithId:", "getCollection", "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "sizeWithId:", "size", "I", 0x1, NULL, NULL },
    { "iteratorWithId:", "iterator", "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "putWithId:withId:", "put", "TV;", 0x1, NULL, "(TK;TV;)TV;" },
    { "putAllWithId:withJavaUtilCollection:", "putAll", "Z", 0x1, NULL, "(TK;Ljava/util/Collection<+TV;>;)Z" },
    { "containsValueWithId:", "containsValue", "Z", 0x1, NULL, NULL },
    { "containsValueWithId:withId:", "containsValue", "Z", 0x1, NULL, NULL },
    { "removeWithId:withId:", "remove", "TV;", 0x1, NULL, "(Ljava/lang/Object;Ljava/lang/Object;)TV;" },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "getWithId:", "get", "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "removeWithId:", "remove", "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "containsKeyWithId:", "containsKey", "Z", 0x1, NULL, NULL },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL, NULL },
    { "putAllWithOrgApacheCommonsCollections15MultiMap:", "putAll", "V", 0x1, NULL, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "entrySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "map", NULL, "Ljava.util.Map;", 0x1, NULL, NULL },
    { "values", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "createCollectionWithJavaUtilCollection:", "createCollection", "Ljava.util.Collection;", 0x4, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "values__", "values", 0x82, "Ljava.util.Collection;", NULL, NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsCollections15MultimapMultiHashMap_serialVersionUID },
    { "internalMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<TK;Ljava/util/Collection<TV;>;>;",  },
  };
  static const char *inner_classes[] = {"Lorg.apache.commons.collections15.multimap.MultiHashMap$Values;", "Lorg.apache.commons.collections15.multimap.MultiHashMap$ValueIterator;"};
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15MultimapMultiHashMap = { 2, "MultiHashMap", "org.apache.commons.collections15.multimap", NULL, 0x1, 32, methods, 3, fields, 0, NULL, 2, inner_classes, NULL, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/collections15/MultiMap<TK;TV;>;Ljava/io/Serializable;Ljava/lang/Cloneable;" };
  return &_OrgApacheCommonsCollections15MultimapMultiHashMap;
}

@end

void OrgApacheCommonsCollections15MultimapMultiHashMap_init(OrgApacheCommonsCollections15MultimapMultiHashMap *self) {
  NSObject_init(self);
  OrgApacheCommonsCollections15MultimapMultiHashMap_set_values__(self, nil);
  OrgApacheCommonsCollections15MultimapMultiHashMap_setAndConsume_internalMap_(self, new_JavaUtilHashMap_init());
}

OrgApacheCommonsCollections15MultimapMultiHashMap *new_OrgApacheCommonsCollections15MultimapMultiHashMap_init() {
  OrgApacheCommonsCollections15MultimapMultiHashMap *self = [OrgApacheCommonsCollections15MultimapMultiHashMap alloc];
  OrgApacheCommonsCollections15MultimapMultiHashMap_init(self);
  return self;
}

void OrgApacheCommonsCollections15MultimapMultiHashMap_initWithInt_(OrgApacheCommonsCollections15MultimapMultiHashMap *self, jint initialCapacity) {
  NSObject_init(self);
  OrgApacheCommonsCollections15MultimapMultiHashMap_set_values__(self, nil);
  OrgApacheCommonsCollections15MultimapMultiHashMap_setAndConsume_internalMap_(self, new_JavaUtilHashMap_initWithInt_(initialCapacity));
}

OrgApacheCommonsCollections15MultimapMultiHashMap *new_OrgApacheCommonsCollections15MultimapMultiHashMap_initWithInt_(jint initialCapacity) {
  OrgApacheCommonsCollections15MultimapMultiHashMap *self = [OrgApacheCommonsCollections15MultimapMultiHashMap alloc];
  OrgApacheCommonsCollections15MultimapMultiHashMap_initWithInt_(self, initialCapacity);
  return self;
}

void OrgApacheCommonsCollections15MultimapMultiHashMap_initWithInt_withFloat_(OrgApacheCommonsCollections15MultimapMultiHashMap *self, jint initialCapacity, jfloat loadFactor) {
  NSObject_init(self);
  OrgApacheCommonsCollections15MultimapMultiHashMap_set_values__(self, nil);
  OrgApacheCommonsCollections15MultimapMultiHashMap_setAndConsume_internalMap_(self, new_JavaUtilHashMap_initWithInt_withFloat_(initialCapacity, loadFactor));
}

OrgApacheCommonsCollections15MultimapMultiHashMap *new_OrgApacheCommonsCollections15MultimapMultiHashMap_initWithInt_withFloat_(jint initialCapacity, jfloat loadFactor) {
  OrgApacheCommonsCollections15MultimapMultiHashMap *self = [OrgApacheCommonsCollections15MultimapMultiHashMap alloc];
  OrgApacheCommonsCollections15MultimapMultiHashMap_initWithInt_withFloat_(self, initialCapacity, loadFactor);
  return self;
}

void OrgApacheCommonsCollections15MultimapMultiHashMap_initWithJavaUtilMap_(OrgApacheCommonsCollections15MultimapMultiHashMap *self, id<JavaUtilMap> mapToCopy) {
  NSObject_init(self);
  OrgApacheCommonsCollections15MultimapMultiHashMap_set_values__(self, nil);
  OrgApacheCommonsCollections15MultimapMultiHashMap_setAndConsume_internalMap_(self, new_JavaUtilHashMap_initWithInt_(J2ObjCFpToInt(([((id<JavaUtilMap>) nil_chk(mapToCopy)) size] * 1.4f))));
  [self putAllWithJavaUtilMap:mapToCopy];
}

OrgApacheCommonsCollections15MultimapMultiHashMap *new_OrgApacheCommonsCollections15MultimapMultiHashMap_initWithJavaUtilMap_(id<JavaUtilMap> mapToCopy) {
  OrgApacheCommonsCollections15MultimapMultiHashMap *self = [OrgApacheCommonsCollections15MultimapMultiHashMap alloc];
  OrgApacheCommonsCollections15MultimapMultiHashMap_initWithJavaUtilMap_(self, mapToCopy);
  return self;
}

void OrgApacheCommonsCollections15MultimapMultiHashMap_initWithOrgApacheCommonsCollections15MultiMap_(OrgApacheCommonsCollections15MultimapMultiHashMap *self, id<OrgApacheCommonsCollections15MultiMap> mapToCopy) {
  NSObject_init(self);
  OrgApacheCommonsCollections15MultimapMultiHashMap_set_values__(self, nil);
  OrgApacheCommonsCollections15MultimapMultiHashMap_setAndConsume_internalMap_(self, new_JavaUtilHashMap_initWithInt_(J2ObjCFpToInt(([((id<OrgApacheCommonsCollections15MultiMap>) nil_chk(mapToCopy)) size] * 1.4f))));
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([mapToCopy entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = [it next];
    id<JavaUtilCollection> coll = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    id<JavaUtilCollection> newColl = [self createCollectionWithJavaUtilCollection:coll];
    [self->internalMap_ putWithId:[entry_ getKey] withId:newColl];
  }
}

OrgApacheCommonsCollections15MultimapMultiHashMap *new_OrgApacheCommonsCollections15MultimapMultiHashMap_initWithOrgApacheCommonsCollections15MultiMap_(id<OrgApacheCommonsCollections15MultiMap> mapToCopy) {
  OrgApacheCommonsCollections15MultimapMultiHashMap *self = [OrgApacheCommonsCollections15MultimapMultiHashMap alloc];
  OrgApacheCommonsCollections15MultimapMultiHashMap_initWithOrgApacheCommonsCollections15MultiMap_(self, mapToCopy);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15MultimapMultiHashMap)

@implementation OrgApacheCommonsCollections15MultimapMultiHashMap_Values

- (id<JavaUtilIterator>)iterator {
  return [new_OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator_initWithOrgApacheCommonsCollections15MultimapMultiHashMap_(this$0_) autorelease];
}

- (jint)size {
  jint compt = 0;
  id<JavaUtilIterator> it = [self iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [it next];
    compt++;
  }
  return compt;
}

- (void)clear {
  [this$0_ clear];
}

- (instancetype)initWithOrgApacheCommonsCollections15MultimapMultiHashMap:(OrgApacheCommonsCollections15MultimapMultiHashMap *)outer$ {
  OrgApacheCommonsCollections15MultimapMultiHashMap_Values_initWithOrgApacheCommonsCollections15MultimapMultiHashMap_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsCollections15MultimapMultiHashMap:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.commons.collections15.multimap.MultiHashMap;", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"TV;"};
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15MultimapMultiHashMap_Values = { 2, "Values", "org.apache.commons.collections15.multimap", "MultiHashMap", 0x2, 4, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/util/AbstractCollection<TV;>;" };
  return &_OrgApacheCommonsCollections15MultimapMultiHashMap_Values;
}

@end

void OrgApacheCommonsCollections15MultimapMultiHashMap_Values_initWithOrgApacheCommonsCollections15MultimapMultiHashMap_(OrgApacheCommonsCollections15MultimapMultiHashMap_Values *self, OrgApacheCommonsCollections15MultimapMultiHashMap *outer$) {
  OrgApacheCommonsCollections15MultimapMultiHashMap_Values_set_this$0_(self, outer$);
  JavaUtilAbstractCollection_init(self);
}

OrgApacheCommonsCollections15MultimapMultiHashMap_Values *new_OrgApacheCommonsCollections15MultimapMultiHashMap_Values_initWithOrgApacheCommonsCollections15MultimapMultiHashMap_(OrgApacheCommonsCollections15MultimapMultiHashMap *outer$) {
  OrgApacheCommonsCollections15MultimapMultiHashMap_Values *self = [OrgApacheCommonsCollections15MultimapMultiHashMap_Values alloc];
  OrgApacheCommonsCollections15MultimapMultiHashMap_Values_initWithOrgApacheCommonsCollections15MultimapMultiHashMap_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15MultimapMultiHashMap_Values)

@implementation OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator

- (instancetype)initWithOrgApacheCommonsCollections15MultimapMultiHashMap:(OrgApacheCommonsCollections15MultimapMultiHashMap *)outer$ {
  OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator_initWithOrgApacheCommonsCollections15MultimapMultiHashMap_(self, outer$);
  return self;
}

- (jboolean)searchNextIterator {
  return OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator_searchNextIterator(self);
}

- (jboolean)hasNext {
  return OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator_searchNextIterator(self);
}

- (id)next {
  if (OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator_searchNextIterator(self) == NO) {
    @throw [new_JavaUtilNoSuchElementException_init() autorelease];
  }
  return [((id<JavaUtilIterator>) nil_chk(tempIterator_)) next];
}

- (void)remove {
  if (tempIterator_ == nil) {
    @throw [new_JavaLangIllegalStateException_init() autorelease];
  }
  [((id<JavaUtilIterator>) nil_chk(tempIterator_)) remove];
}

- (void)dealloc {
  RELEASE_(backedIterator_);
  RELEASE_(tempIterator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsCollections15MultimapMultiHashMap:", "ValueIterator", NULL, 0x2, NULL, NULL },
    { "searchNextIterator", NULL, "Z", 0x2, NULL, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "TV;", 0x1, NULL, "()TV;" },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "backedIterator_", NULL, 0x2, "Ljava.util.Iterator;", NULL, "Ljava/util/Iterator<Ljava/util/Collection<TV;>;>;",  },
    { "tempIterator_", NULL, 0x2, "Ljava.util.Iterator;", NULL, "Ljava/util/Iterator<TV;>;",  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator = { 2, "ValueIterator", "org.apache.commons.collections15.multimap", "MultiHashMap", 0x2, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<TV;>;" };
  return &_OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator;
}

@end

void OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator_initWithOrgApacheCommonsCollections15MultimapMultiHashMap_(OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator *self, OrgApacheCommonsCollections15MultimapMultiHashMap *outer$) {
  NSObject_init(self);
  OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator_set_backedIterator_(self, [((id<JavaUtilCollection>) nil_chk([((JavaUtilHashMap *) nil_chk(outer$->internalMap_)) values])) iterator]);
}

OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator *new_OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator_initWithOrgApacheCommonsCollections15MultimapMultiHashMap_(OrgApacheCommonsCollections15MultimapMultiHashMap *outer$) {
  OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator *self = [OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator alloc];
  OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator_initWithOrgApacheCommonsCollections15MultimapMultiHashMap_(self, outer$);
  return self;
}

jboolean OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator_searchNextIterator(OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator *self) {
  while (self->tempIterator_ == nil || [self->tempIterator_ hasNext] == NO) {
    if ([((id<JavaUtilIterator>) nil_chk(self->backedIterator_)) hasNext] == NO) {
      return NO;
    }
    OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator_set_tempIterator_(self, [((id<JavaUtilCollection>) nil_chk([self->backedIterator_ next])) iterator]);
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15MultimapMultiHashMap_ValueIterator)
