//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoElement.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/view/algebra/AlgebraView.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/View.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoListElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/DependentAlgo.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/algos/GetCommand.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoScriptAction.h"
#include "geogebra/common/kernel/geos/ToGeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelAlgosAlgoElement () {
 @public
  IOSObjectArray *output_;
  IOSObjectArray *efficientInput_;
  jboolean isPrintedInXML__;
  id<JavaUtilList> outputHandler_;
  jboolean mayHaveRandomAncestors_;
  JavaUtilArrayList *freeInputPoints_;
  JavaUtilArrayList *inputPoints_;
  GeogebraCommonKernelAlgosAlgoElement *updateAfterAlgo_;
}

+ (JavaUtilTreeSet *)getTempSet;

- (void)setOutputDependencies;

- (void)appendCheckVectorWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
            withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)getCmdXMLWithNSString:(NSString *)cmdname
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoElement, output_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoElement, efficientInput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoElement, outputHandler_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoElement, freeInputPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoElement, inputPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoElement, updateAfterAlgo_, GeogebraCommonKernelAlgosAlgoElement *)

static JavaUtilTreeSet *GeogebraCommonKernelAlgosAlgoElement_tempSet_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoElement, tempSet_, JavaUtilTreeSet *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoElement, tempSet_, JavaUtilTreeSet *)

__attribute__((unused)) static JavaUtilTreeSet *GeogebraCommonKernelAlgosAlgoElement_getTempSet();

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoElement_setOutputDependencies(GeogebraCommonKernelAlgosAlgoElement *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(GeogebraCommonKernelAlgosAlgoElement *self, JavaUtilTreeSet *set, jboolean onlyIndependent);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoElement_appendCheckVectorWithJavaLangStringBuilder_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelAlgosAlgoElement *self, JavaLangStringBuilder *sb, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoElement_getXMLWithJavaLangStringBuilder_withBoolean_(GeogebraCommonKernelAlgosAlgoElement *self, JavaLangStringBuilder *sb, jboolean includeOutputGeos);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoElement_getXML_OGPWithJavaLangStringBuilder_withBoolean_(GeogebraCommonKernelAlgosAlgoElement *self, JavaLangStringBuilder *sb, jboolean includeOutputGeos);

__attribute__((unused)) static NSString *GeogebraCommonKernelAlgosAlgoElement_getCmdXMLWithNSString_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelAlgosAlgoElement *self, NSString *cmdname, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static jint GeogebraCommonKernelAlgosAlgoElement_getInputLength(GeogebraCommonKernelAlgosAlgoElement *self);

@interface GeogebraCommonKernelAlgosAlgoElement_OutputHandler () {
 @public
  GeogebraCommonKernelAlgosAlgoElement *this$0_;
  id<GeogebraCommonKernelAlgosAlgoElement_elementFactory> fac_;
  JavaUtilArrayList *outputList_;
  IOSObjectArray *labels_;
  NSString *indexLabel_;
  jint labelsSetLength_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoElement_OutputHandler, this$0_, GeogebraCommonKernelAlgosAlgoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoElement_OutputHandler, fac_, id<GeogebraCommonKernelAlgosAlgoElement_elementFactory>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoElement_OutputHandler, outputList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoElement_OutputHandler, labels_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoElement_OutputHandler, indexLabel_, NSString *)

@interface GeogebraCommonKernelAlgosAlgoElement_elementFactory : NSObject
@end

@implementation GeogebraCommonKernelAlgosAlgoElement

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                             withBoolean:(jboolean)addToConstructionList {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, addToConstructionList);
  return self;
}

- (void)addToConstructionList {
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self withBoolean:NO];
}

- (void)setOutputLengthWithInt:(jint)n {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_output_(self, [IOSObjectArray newArrayWithLength:n type:GeogebraCommonKernelGeosGeoElement_class_()]);
}

- (void)setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:(id<GeogebraCommonKernelGeosToGeoElement>)g {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_output_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(output_, 0, [((id<GeogebraCommonKernelGeosToGeoElement>) nil_chk(g)) toGeoElement]);
}

- (void)setOutputWithInt:(jint)i
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  IOSObjectArray_Set(nil_chk(output_), i, geo);
}

- (void)setOutputWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)geo {
  GeogebraCommonKernelAlgosAlgoElement_set_output_(self, geo);
}

- (GeogebraCommonKernelGeosGeoElement *)getOutputWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(output_), i);
}

- (jint)getOutputLength {
  if (output_ == nil) {
    return 0;
  }
  return ((IOSObjectArray *) nil_chk(output_))->size_;
}

- (void)refreshOutput {
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk([self getOutputHandler])) iterator];
  jint n = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    n += [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk([it next])) size];
  }
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_output_(self, [IOSObjectArray newArrayWithLength:n type:GeogebraCommonKernelGeosGeoElement_class_()]);
  it = [((id<JavaUtilList>) nil_chk([self getOutputHandler])) iterator];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelAlgosAlgoElement_OutputHandler *handler = [it next];
    for (jint k = 0; k < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(handler)) size]; k++) {
      IOSObjectArray_Set(output_, i++, [handler getElementWithInt:k]);
    }
  }
}

+ (NSString *)getCommandStringWithGeogebraCommonKernelAlgosGetCommand:(id<GeogebraCommonKernelAlgosGetCommand>)classname {
  return GeogebraCommonKernelAlgosAlgoElement_getCommandStringWithGeogebraCommonKernelAlgosGetCommand_(classname);
}

- (void)setInputOutput {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)compute {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initForNearToRelationship {
}

- (jboolean)isNearToAlgorithm {
  return NO;
}

- (void)update {
  if (stopUpdateCascade_) {
    return;
  }
  [self updateUnlabeledRandomGeos];
  [self compute];
  [self updateDependentGeos];
}

- (jboolean)updateUnlabeledRandomGeos {
  if (!mayHaveRandomAncestors_) {
    return NO;
  }
  jboolean ret = NO;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isLabelSet]) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) getParentAlgorithm] != nil) {
        if ([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) getParentAlgorithm])) updateUnlabeledRandomGeos] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isRandomGeo]) {
          [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) getParentAlgorithm])) compute];
          ret = YES;
        }
      }
      else {
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isRandomGeo]) {
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) updateRandomGeo];
          ret = YES;
        }
      }
    }
  }
  if (!ret) {
    self->mayHaveRandomAncestors_ = NO;
  }
  return ret;
}

- (void)updateDependentGeos {
  for (jint i = 0; i < [self getOutputLength]; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) update];
  }
}

+ (void)updateCascadeAlgosWithJavaUtilArrayList:(JavaUtilArrayList *)algos {
  GeogebraCommonKernelAlgosAlgoElement_updateCascadeAlgosWithJavaUtilArrayList_(algos);
}

+ (JavaUtilTreeSet *)getTempSet {
  return GeogebraCommonKernelAlgosAlgoElement_getTempSet();
}

- (IOSObjectArray *)getOutput {
  return output_;
}

- (IOSObjectArray *)getInput {
  return input_;
}

- (GeogebraCommonKernelGeosGeoElement *)getInputWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(input_), i);
}

- (IOSObjectArray *)getInputForUpdateSetPropagation {
  return input_;
}

- (void)setDependencies {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) addAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  }
  [self doSetDependencies];
}

- (void)setDependenciesOutputOnly {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) addToUpdateSetOnlyWithGeogebraCommonKernelAlgosAlgoElement:self];
  }
  [self doSetDependencies];
}

- (void)doSetDependencies {
  self->mayHaveRandomAncestors_ = YES;
  GeogebraCommonKernelAlgosAlgoElement_setOutputDependencies(self);
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) addToAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:self];
}

- (void)setEfficientDependenciesWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)standardInput
                                withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)efficientInput {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(standardInput))->size_; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(standardInput, i))) addToAlgorithmListOnlyWithGeogebraCommonKernelAlgosAlgoElement:self];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(efficientInput))->size_; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(efficientInput, i))) addToUpdateSetOnlyWithGeogebraCommonKernelAlgosAlgoElement:self];
  }
  GeogebraCommonKernelAlgosAlgoElement_set_input_(self, standardInput);
  GeogebraCommonKernelAlgosAlgoElement_set_efficientInput_(self, efficientInput);
  [self doSetDependencies];
}

- (void)setOutputDependencies {
  GeogebraCommonKernelAlgosAlgoElement_setOutputDependencies(self);
}

- (void)setOutputDependenciesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)output {
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(output)) setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  if ([output isGeoImage]) {
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:self];
  }
  if (cons_ != output->cons_) {
    [output setConstructionWithGeogebraCommonKernelConstruction:cons_];
  }
}

- (jboolean)euclidianViewUpdate {
  [self update];
  return NO;
}

- (void)removeOutput {
  for (jint i = 0; i < [self getOutputLength]; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) doRemove];
  }
}

- (void)remove {
  if (removed_) return;
  removed_ = YES;
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self];
  [cons_ removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:self];
  [self removeOutput];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) {
    if (!protectedInput_ && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) canBeRemovedAsInput] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isLabelSet] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isGeoCasCell]) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) remove];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  }
  if (efficientInput_ != nil) {
    for (jint i = 0; i < efficientInput_->size_; i++) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(efficientInput_, i))) removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
    }
  }
}

- (void)setProtectedInputWithBoolean:(jboolean)flag {
  protectedInput_ = flag;
}

- (void)removeWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)outArg {
  [self remove];
}

- (void)removeOutputExceptWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)keepGeo {
  for (jint i = 0; i < [self getOutputLength]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getOutputWithInt:i];
    if (geo != keepGeo) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) doRemove];
    }
  }
}

- (void)notifyAdd {
  for (jint i = 0; i < [self getOutputLength]; ++i) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) notifyAdd];
  }
}

- (void)notifyRemove {
  for (jint i = 0; i < [self getOutputLength]; ++i) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) notifyRemove];
  }
}

- (IOSObjectArray *)getGeoElements {
  return [self getOutput];
}

- (jboolean)hasSingleOutputType {
  GeogebraCommonPluginGeoClassEnum *type = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) getGeoClassType];
  for (jint i = 1; i < [self getOutputLength]; ++i) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) getGeoClassType] != type) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)isAlgoElement {
  return YES;
}

- (jboolean)isGeoElement {
  return NO;
}

- (jboolean)isConsProtocolBreakpoint {
  for (jint i = 0; i < [self getOutputLength]; i++) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) isConsProtocolBreakpoint]) {
      return YES;
    }
  }
  return NO;
}

- (jint)compareToWithId:(GeogebraCommonKernelAlgosConstructionElement *)obj {
  check_class_cast(obj, [GeogebraCommonKernelAlgosConstructionElement class]);
  if (self == obj) {
    return 0;
  }
  GeogebraCommonKernelAlgosConstructionElement *ce = obj;
  jint thisIndex = [self getConstructionIndex];
  jint objIndex = [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) getConstructionIndex];
  if (thisIndex == objIndex) {
    return [super compareToWithId:obj];
  }
  else if (thisIndex < objIndex) {
    return -1;
  }
  return 1;
}

- (jint)getConstructionIndex {
  jint index = [super getConstructionIndex];
  if (index >= 0) {
    return index;
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) {
    jint temp = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) getConstructionIndex];
    if (temp > index) {
      index = temp;
    }
  }
  return index;
}

- (jint)getMinConstructionIndex {
  jint max = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; ++i) {
    jint index = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) getConstructionIndex];
    if (index > max) {
      max = index;
    }
  }
  return max + 1;
}

- (jint)getMaxConstructionIndex {
  JavaUtilArrayList *algoList;
  jint size, index;
  jint min = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) steps];
  for (jint k = 0; k < [self getOutputLength]; ++k) {
    algoList = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:k])) getAlgorithmList];
    size = [((JavaUtilArrayList *) nil_chk(algoList)) size];
    for (jint i = 0; i < size; ++i) {
      index = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([algoList getWithInt:i])) getConstructionIndex];
      if (index < min) {
        min = index;
      }
    }
  }
  return min - 1;
}

- (JavaUtilTreeSet *)getAllIndependentPredecessors {
  JavaUtilTreeSet *set = [new_JavaUtilTreeSet_init() autorelease];
  GeogebraCommonKernelAlgosAlgoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(self, set, YES);
  return set;
}

- (void)addPredecessorsToSetWithJavaUtilTreeSet:(JavaUtilTreeSet *)set
                                    withBoolean:(jboolean)onlyIndependent {
  GeogebraCommonKernelAlgosAlgoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(self, set, onlyIndependent);
}

- (void)addRandomizablePredecessorsToSetWithJavaUtilTreeSet:(JavaUtilTreeSet *)set {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) {
    GeogebraCommonKernelGeosGeoElement *parent = IOSObjectArray_Get(input_, i);
    if (![((JavaUtilTreeSet *) nil_chk(set)) containsWithId:parent]) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(parent)) addRandomizablePredecessorsToSetWithJavaUtilTreeSet:set];
    }
  }
}

- (JavaUtilArrayList *)getFreeInputPoints {
  if (freeInputPoints_ == nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_freeInputPoints_(self, new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(input_))->size_));
    if (!([GeogebraCommonKernelAlgosDependentAlgo_class_() isInstance:self])) {
      for (jint i = 0; i < input_->size_; i++) {
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isGeoPoint] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isIndependent]) {
          [freeInputPoints_ addWithId:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(input_, i), @protocol(GeogebraCommonKernelKernelNDGeoPointND))];
        }
      }
    }
  }
  return freeInputPoints_;
}

- (JavaUtilArrayList *)getInputPoints {
  if (inputPoints_ == nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_inputPoints_(self, new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(input_))->size_));
    for (jint i = 0; i < input_->size_; i++) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isGeoPoint]) {
        [inputPoints_ addWithId:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(input_, i), @protocol(GeogebraCommonKernelKernelNDGeoPointND))];
      }
    }
  }
  return inputPoints_;
}

- (jboolean)isIndependent {
  return NO;
}

- (NSString *)getNameDescription {
  [((JavaLangStringBuilder *) nil_chk(sbAE_)) setLengthWithInt:0];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isLabelSet]) {
    [sbAE_ appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) getNameDescription]];
  }
  for (jint i = 1; i < [self getOutputLength]; ++i) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) isLabelSet]) {
      [sbAE_ appendWithNSString:@"\n"];
      [sbAE_ appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) getNameDescription]];
    }
  }
  return [sbAE_ description];
}

- (NSString *)getAlgebraDescriptionRegrOutWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbAE_)) setLengthWithInt:0];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isLabelSet]) {
    [sbAE_ appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) getAlgebraDescriptionRegrOutWithGeogebraCommonKernelStringTemplate:tpl]];
  }
  for (jint i = 1; i < [self getOutputLength]; ++i) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) isLabelSet]) {
      [sbAE_ appendWithNSString:@"\n"];
      [sbAE_ appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) getAlgebraDescriptionRegrOutWithGeogebraCommonKernelStringTemplate:tpl]];
    }
  }
  return [sbAE_ description];
}

- (NSString *)getDefinitionDescriptionWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)getCommandDescriptionWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  NSString *cmdname = [self getCommandNameWithGeogebraCommonKernelStringTemplate:tpl];
  if ([((NSString *) nil_chk(cmdname)) isEqual:@"Expression"]) {
    return [self toStringWithGeogebraCommonKernelStringTemplate:tpl];
  }
  if (input_ == nil) return nil;
  [((JavaLangStringBuilder *) nil_chk(sbAE_)) setLengthWithInt:0];
  if ([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isPrintLocalizedCommandNames]) {
    [sbAE_ appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getCommandWithNSString:cmdname]];
  }
  else {
    [sbAE_ appendWithNSString:cmdname];
  }
  jint length = [self getInputLengthForCommandDescription];
  [sbAE_ appendWithNSString:[tpl leftSquareBracket]];
  if (length > 0) {
    [sbAE_ appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getInputWithInt:0])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
  }
  for (jint i = 1; i < length; ++i) {
    [sbAE_ appendWithNSString:@", "];
    GeogebraCommonKernelAlgosAlgoElement_appendCheckVectorWithJavaLangStringBuilder_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelStringTemplate_(self, sbAE_, [self getInputWithInt:i], tpl);
  }
  [sbAE_ appendWithNSString:[tpl rightSquareBracket]];
  return [sbAE_ description];
}

- (void)appendCheckVectorWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
            withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonKernelAlgosAlgoElement_appendCheckVectorWithJavaLangStringBuilder_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelStringTemplate_(self, sb, geo, tpl);
}

- (NSString *)description {
  return [self toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
}

- (NSString *)getCommandNameWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  NSString *cmdname;
  id<GeogebraCommonKernelAlgosGetCommand> classname;
  classname = [self getClassName];
  cmdname = GeogebraCommonKernelAlgosAlgoElement_getCommandStringWithGeogebraCommonKernelAlgosGetCommand_(classname);
  if (![((NSString *) nil_chk(cmdname)) isEqual:@"Expression"]) {
    if ([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isUseTempVariablePrefix]) {
      cmdname = [tpl printVariableNameWithNSString:cmdname];
    }
  }
  return cmdname;
}

- (void)getXMLWithBoolean:(jboolean)getlistenersToo
withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelAlgosAlgoElement_getXMLWithJavaLangStringBuilder_withBoolean_(self, sb, YES);
}

- (void)getXML_OGPWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelAlgosAlgoElement_getXML_OGPWithJavaLangStringBuilder_withBoolean_(self, sb, YES);
}

- (NSString *)getXML {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  GeogebraCommonKernelAlgosAlgoElement_getXMLWithJavaLangStringBuilder_withBoolean_(self, sb, YES);
  return [sb description];
}

- (void)getXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                            withBoolean:(jboolean)includeOutputGeos {
  GeogebraCommonKernelAlgosAlgoElement_getXMLWithJavaLangStringBuilder_withBoolean_(self, sb, includeOutputGeos);
}

- (void)getXML_OGPWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                withBoolean:(jboolean)includeOutputGeos {
  GeogebraCommonKernelAlgosAlgoElement_getXML_OGPWithJavaLangStringBuilder_withBoolean_(self, sb, includeOutputGeos);
}

- (void)getOutputXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = 0; i < [self getOutputLength]; i++) {
    geo = [self getOutputWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
      [geo getXMLWithBoolean:NO withJavaLangStringBuilder:sb];
    }
  }
}

- (NSString *)getExpXMLWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"<expression"];
  if ([self getOutputLength] == 1) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isLabelSet]) {
      [sb appendWithNSString:@" label=\""];
      GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]);
      [sb appendWithNSString:@"\""];
    }
  }
  [sb appendWithNSString:@" exp=\""];
  GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self toExpStringWithGeogebraCommonKernelStringTemplate:tpl]);
  [sb appendWithNSString:@"\""];
  if ([self getOutputLength] > 0) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isGeoPoint]) {
      [sb appendWithNSString:@" type=\"point\""];
    }
    else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isGeoVector]) {
      [sb appendWithNSString:@" type=\"vector\""];
    }
    else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isGeoLine]) {
      [sb appendWithNSString:@" type=\"line\""];
    }
    else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isGeoPlane]) {
      [sb appendWithNSString:@" type=\"plane\""];
    }
    else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isGeoConic]) {
      [sb appendWithNSString:@" type=\"conic\""];
    }
    else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isGeoQuadric]) {
      [sb appendWithNSString:@" type=\"quadric\""];
    }
    else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) isGeoImplicitPoly]) {
      [sb appendWithNSString:@" type=\"implicitPoly\""];
    }
  }
  [sb appendWithNSString:@" />\n"];
  return [sb description];
}

- (NSString *)getCmdXMLWithNSString:(NSString *)cmdname
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelAlgosAlgoElement_getCmdXMLWithNSString_withGeogebraCommonKernelStringTemplate_(self, cmdname, tpl);
}

- (jint)getInputLength {
  return GeogebraCommonKernelAlgosAlgoElement_getInputLength(self);
}

- (jint)getInputLengthForXML {
  return GeogebraCommonKernelAlgosAlgoElement_getInputLength(self);
}

- (jint)getInputLengthForCommandDescription {
  return GeogebraCommonKernelAlgosAlgoElement_getInputLength(self);
}

- (jint)getInputLengthForXMLMayNeedXOYPlane {
  if (![((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isGettingXMLForReplace] || [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane] == nil) {
    return GeogebraCommonKernelAlgosAlgoElement_getInputLength(self);
  }
  return GeogebraCommonKernelAlgosAlgoElement_getInputLength(self) + 1;
}

- (jint)getInputLengthForCommandDescriptionMayNeedXOYPlane {
  if ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) isSaving] || [kernel_ noNeedToSpecifyXOYPlane]) {
    return GeogebraCommonKernelAlgosAlgoElement_getInputLength(self);
  }
  return GeogebraCommonKernelAlgosAlgoElement_getInputLength(self) + 1;
}

- (GeogebraCommonKernelGeosGeoElement *)getInputMaybeXOYPlaneWithInt:(jint)i {
  if (i == GeogebraCommonKernelAlgosAlgoElement_getInputLength(self)) {
    return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXOYPlane], [GeogebraCommonKernelGeosGeoElement class]);
  }
  return IOSObjectArray_Get(nil_chk(input_), i);
}

- (void)getCmdOutputXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
          withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<output"];
  for (jint i = 0; i < [self getOutputLength]; i++) {
    [sb appendWithNSString:@" a"];
    [sb appendWithInt:i];
    [sb appendWithNSString:@"=\""];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) isLabelSet]) {
      GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]);
    }
    [sb appendWithNSString:@"\""];
  }
  [sb appendWithNSString:@"/>\n"];
}

- (id<GeogebraCommonKernelAlgosGetCommand>)getClassName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setPrintedInXMLWithBoolean:(jboolean)flag {
  isPrintedInXML__ = flag;
  if (flag) {
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self withBoolean:YES];
  }
  else {
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self];
  }
}

- (jboolean)isPrintedInXML {
  return isPrintedInXML__;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self getCommandDescriptionWithGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toExpStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (jboolean)doStopUpdateCascade {
  return stopUpdateCascade_;
}

- (void)setStopUpdateCascadeWithBoolean:(jboolean)stopUpdateCascade {
  self->stopUpdateCascade_ = stopUpdateCascade;
}

- (jboolean)wantsConstructionProtocolUpdate {
  return NO;
}

- (void)setUpdateAfterAlgoWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)updateAfterAlgo {
  GeogebraCommonKernelAlgosAlgoElement_set_updateAfterAlgo_(self, updateAfterAlgo);
}

- (GeogebraCommonKernelAlgosAlgoElement *)getUpdateAfterAlgo {
  return updateAfterAlgo_;
}

- (void)removeOutputFromAlgebraView {
  id<GeogebraCommonKernelView> av = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getAlgebraView];
  if (av != nil) {
    for (jint i = 0; i < [self getOutputLength]; i++) {
      [av removeWithGeogebraCommonKernelGeosGeoElement:[self getOutputWithInt:i]];
    }
  }
}

- (void)removeOutputFromPicking {
  for (jint i = 0; i < [self getOutputLength]; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) setIsPickableWithBoolean:NO];
  }
}

- (id<JavaUtilList>)getOutputHandler {
  return outputHandler_;
}

- (void)setOutputHandlerWithJavaUtilList:(id<JavaUtilList>)outputHandler {
  GeogebraCommonKernelAlgosAlgoElement_set_outputHandler_(self, outputHandler);
}

- (jboolean)isLaTeXTextCommand {
  return NO;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)element
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return nil;
}

- (jboolean)isLocusEquable {
  return NO;
}

- (void)dealloc {
  RELEASE_(input_);
  RELEASE_(output_);
  RELEASE_(efficientInput_);
  RELEASE_(outputHandler_);
  RELEASE_(freeInputPoints_);
  RELEASE_(inputPoints_);
  RELEASE_(sbAE_);
  RELEASE_(updateAfterAlgo_);
  [super dealloc];
}

+ (IOSObjectArray *)__annotations_toString {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_output_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "AlgoElement", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withBoolean:", "AlgoElement", NULL, 0x4, NULL, NULL },
    { "addToConstructionList", NULL, "V", 0x1, NULL, NULL },
    { "setOutputLengthWithInt:", "setOutputLength", "V", 0x4, NULL, NULL },
    { "setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:", "setOnlyOutput", "V", 0x4, NULL, NULL },
    { "setOutputWithInt:withGeogebraCommonKernelGeosGeoElement:", "setOutput", "V", 0x4, NULL, NULL },
    { "setOutputWithGeogebraCommonKernelGeosGeoElementArray:", "setOutput", "V", 0x4, NULL, NULL },
    { "getOutputWithInt:", "getOutput", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getOutputLength", NULL, "I", 0x1, NULL, NULL },
    { "refreshOutput", NULL, "V", 0x4, NULL, NULL },
    { "getCommandStringWithGeogebraCommonKernelAlgosGetCommand:", "getCommandString", "Ljava.lang.String;", 0x18, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x404, NULL, NULL },
    { "compute", NULL, "V", 0x401, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x1, NULL, NULL },
    { "isNearToAlgorithm", NULL, "Z", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "updateUnlabeledRandomGeos", NULL, "Z", 0x1, NULL, NULL },
    { "updateDependentGeos", NULL, "V", 0x4, NULL, NULL },
    { "updateCascadeAlgosWithJavaUtilArrayList:", "updateCascadeAlgos", "V", 0x9, NULL, NULL },
    { "getTempSet", NULL, "Ljava.util.TreeSet;", 0xa, NULL, NULL },
    { "getOutput", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getInput", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "getInputWithInt:", "getInput", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getInputForUpdateSetPropagation", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setDependencies", NULL, "V", 0x14, NULL, NULL },
    { "setDependenciesOutputOnly", NULL, "V", 0x14, NULL, NULL },
    { "doSetDependencies", NULL, "V", 0x4, NULL, NULL },
    { "setEfficientDependenciesWithGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonKernelGeosGeoElementArray:", "setEfficientDependencies", "V", 0x14, NULL, NULL },
    { "setOutputDependencies", NULL, "V", 0x2, NULL, NULL },
    { "setOutputDependenciesWithGeogebraCommonKernelGeosGeoElement:", "setOutputDependencies", "V", 0x4, NULL, NULL },
    { "euclidianViewUpdate", NULL, "Z", 0x1, NULL, NULL },
    { "removeOutput", NULL, "V", 0x4, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "setProtectedInputWithBoolean:", "setProtectedInput", "V", 0x1, NULL, NULL },
    { "removeWithGeogebraCommonKernelGeosGeoElement:", "remove", "V", 0x1, NULL, NULL },
    { "removeOutputExceptWithGeogebraCommonKernelGeosGeoElement:", "removeOutputExcept", "V", 0x1, NULL, NULL },
    { "notifyAdd", NULL, "V", 0x11, NULL, NULL },
    { "notifyRemove", NULL, "V", 0x11, NULL, NULL },
    { "getGeoElements", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "hasSingleOutputType", NULL, "Z", 0x11, NULL, NULL },
    { "isAlgoElement", NULL, "Z", 0x11, NULL, NULL },
    { "isGeoElement", NULL, "Z", 0x11, NULL, NULL },
    { "isConsProtocolBreakpoint", NULL, "Z", 0x11, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "getConstructionIndex", NULL, "I", 0x1, NULL, NULL },
    { "getMinConstructionIndex", NULL, "I", 0x1, NULL, NULL },
    { "getMaxConstructionIndex", NULL, "I", 0x1, NULL, NULL },
    { "getAllIndependentPredecessors", NULL, "Ljava.util.TreeSet;", 0x11, NULL, NULL },
    { "addPredecessorsToSetWithJavaUtilTreeSet:withBoolean:", "addPredecessorsToSet", "V", 0x11, NULL, NULL },
    { "addRandomizablePredecessorsToSetWithJavaUtilTreeSet:", "addRandomizablePredecessorsToSet", "V", 0x11, NULL, NULL },
    { "getFreeInputPoints", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getInputPoints", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "isIndependent", NULL, "Z", 0x11, NULL, NULL },
    { "getNameDescription", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAlgebraDescriptionRegrOutWithGeogebraCommonKernelStringTemplate:", "getAlgebraDescriptionRegrOut", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDefinitionDescriptionWithGeogebraCommonKernelStringTemplate:", "getDefinitionDescription", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCommandDescriptionWithGeogebraCommonKernelStringTemplate:", "getCommandDescription", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "appendCheckVectorWithJavaLangStringBuilder:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelStringTemplate:", "appendCheckVector", "V", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getCommandNameWithGeogebraCommonKernelStringTemplate:", "getCommandName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLWithBoolean:withJavaLangStringBuilder:", "getXML", "V", 0x1, NULL, NULL },
    { "getXML_OGPWithJavaLangStringBuilder:", "getXML_OGP", "V", 0x1, NULL, NULL },
    { "getXML", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLWithJavaLangStringBuilder:withBoolean:", "getXML", "V", 0x11, NULL, NULL },
    { "getXML_OGPWithJavaLangStringBuilder:withBoolean:", "getXML_OGP", "V", 0x11, NULL, NULL },
    { "getOutputXMLWithJavaLangStringBuilder:", "getOutputXML", "V", 0x4, NULL, NULL },
    { "getExpXMLWithGeogebraCommonKernelStringTemplate:", "getExpXML", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getCmdXMLWithNSString:withGeogebraCommonKernelStringTemplate:", "getCmdXML", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getInputLength", NULL, "I", 0x14, NULL, NULL },
    { "getInputLengthForXML", NULL, "I", 0x4, NULL, NULL },
    { "getInputLengthForCommandDescription", NULL, "I", 0x4, NULL, NULL },
    { "getInputLengthForXMLMayNeedXOYPlane", NULL, "I", 0x14, NULL, NULL },
    { "getInputLengthForCommandDescriptionMayNeedXOYPlane", NULL, "I", 0x14, NULL, NULL },
    { "getInputMaybeXOYPlaneWithInt:", "getInputMaybeXOYPlane", "Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "getCmdOutputXMLWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "getCmdOutputXML", "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.GetCommand;", 0x401, NULL, NULL },
    { "setPrintedInXMLWithBoolean:", "setPrintedInXML", "V", 0x1, NULL, NULL },
    { "isPrintedInXML", NULL, "Z", 0x4, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toExpStringWithGeogebraCommonKernelStringTemplate:", "toExpString", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "doStopUpdateCascade", NULL, "Z", 0x10, NULL, NULL },
    { "setStopUpdateCascadeWithBoolean:", "setStopUpdateCascade", "V", 0x14, NULL, NULL },
    { "wantsConstructionProtocolUpdate", NULL, "Z", 0x1, NULL, NULL },
    { "setUpdateAfterAlgoWithGeogebraCommonKernelAlgosAlgoElement:", "setUpdateAfterAlgo", "V", 0x11, NULL, NULL },
    { "getUpdateAfterAlgo", NULL, "Lgeogebra.common.kernel.algos.AlgoElement;", 0x11, NULL, NULL },
    { "removeOutputFromAlgebraView", NULL, "V", 0x1, NULL, NULL },
    { "removeOutputFromPicking", NULL, "V", 0x1, NULL, NULL },
    { "getOutputHandler", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "setOutputHandlerWithJavaUtilList:", "setOutputHandler", "V", 0x1, NULL, NULL },
    { "isLaTeXTextCommand", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "input_", NULL, 0x1, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "output_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "efficientInput_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "isPrintedInXML__", "isPrintedInXML", 0x2, "Z", NULL, NULL,  },
    { "stopUpdateCascade_", NULL, 0x4, "Z", NULL, NULL,  },
    { "outputHandler_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<*>;>;",  },
    { "mayHaveRandomAncestors_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tempSet_", NULL, 0xa, "Ljava.util.TreeSet;", &GeogebraCommonKernelAlgosAlgoElement_tempSet_, "Ljava/util/TreeSet<Lgeogebra/common/kernel/algos/AlgoElement;>;",  },
    { "removed_", NULL, 0x4, "Z", NULL, NULL,  },
    { "protectedInput_", NULL, 0x1, "Z", NULL, NULL,  },
    { "freeInputPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "inputPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "sbAE_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "updateAfterAlgo_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoElement;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", "Lgeogebra.common.kernel.algos.AlgoElement$elementFactory;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoElement = { 2, "AlgoElement", "geogebra.common.kernel.algos", NULL, 0x401, 92, methods, 14, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoElement;
}

@end

void GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoElement *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, YES);
}

void GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonKernelAlgosAlgoElement *self, GeogebraCommonKernelConstruction *c, jboolean addToConstructionList) {
  GeogebraCommonKernelAlgosConstructionElement_initWithGeogebraCommonKernelConstruction_(self, c);
  self->isPrintedInXML__ = YES;
  self->stopUpdateCascade_ = NO;
  self->mayHaveRandomAncestors_ = YES;
  self->removed_ = NO;
  self->protectedInput_ = NO;
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_sbAE_(self, new_JavaLangStringBuilder_init());
  if (addToConstructionList) {
    [((GeogebraCommonKernelConstruction *) nil_chk(c)) addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self withBoolean:NO];
  }
}

NSString *GeogebraCommonKernelAlgosAlgoElement_getCommandStringWithGeogebraCommonKernelAlgosGetCommand_(id<GeogebraCommonKernelAlgosGetCommand> classname) {
  GeogebraCommonKernelAlgosAlgoElement_initialize();
  if (classname == nil) return @"";
  return [((id<GeogebraCommonKernelAlgosGetCommand>) nil_chk(classname)) getCommand];
}

void GeogebraCommonKernelAlgosAlgoElement_updateCascadeAlgosWithJavaUtilArrayList_(JavaUtilArrayList *algos) {
  GeogebraCommonKernelAlgosAlgoElement_initialize();
  if (algos == nil) {
    return;
  }
  jint size = [((JavaUtilArrayList *) nil_chk(algos)) size];
  if (size == 0) {
    return;
  }
  JavaUtilArrayList *geos = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelAlgosAlgoElement *algo = [algos getWithInt:i];
    [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) compute];
    for (jint j = 0; j < [algo getOutputLength]; j++) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([algo getOutputWithInt:j])) update];
      [geos addWithId:[algo getOutputWithInt:j]];
    }
  }
  GeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(geos, GeogebraCommonKernelAlgosAlgoElement_getTempSet(), YES);
}

JavaUtilTreeSet *GeogebraCommonKernelAlgosAlgoElement_getTempSet() {
  GeogebraCommonKernelAlgosAlgoElement_initialize();
  if (GeogebraCommonKernelAlgosAlgoElement_tempSet_ == nil) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelAlgosAlgoElement_tempSet_, nil, new_JavaUtilTreeSet_init());
  }
  return GeogebraCommonKernelAlgosAlgoElement_tempSet_;
}

void GeogebraCommonKernelAlgosAlgoElement_setOutputDependencies(GeogebraCommonKernelAlgosAlgoElement *self) {
  for (jint i = 0; i < [self getOutputLength]; i++) {
    [self setOutputDependenciesWithGeogebraCommonKernelGeosGeoElement:[self getOutputWithInt:i]];
  }
}

void GeogebraCommonKernelAlgosAlgoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(GeogebraCommonKernelAlgosAlgoElement *self, JavaUtilTreeSet *set, jboolean onlyIndependent) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->input_))->size_; i++) {
    GeogebraCommonKernelGeosGeoElement *parent = IOSObjectArray_Get(self->input_, i);
    if (![((JavaUtilTreeSet *) nil_chk(set)) containsWithId:parent]) {
      if (!onlyIndependent) {
        [set addWithId:parent];
      }
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(parent)) addPredecessorsToSetWithJavaUtilTreeSet:set withBoolean:onlyIndependent];
    }
  }
}

void GeogebraCommonKernelAlgosAlgoElement_appendCheckVectorWithJavaLangStringBuilder_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelAlgosAlgoElement *self, JavaLangStringBuilder *sb, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelStringTemplate *tpl) {
  NSString *cmd = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelWithGeogebraCommonKernelStringTemplate:tpl];
  if ([geo isGeoVector]) {
    NSString *vectorCommand = @"Vector[";
    if ([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isPrintLocalizedCommandNames]) vectorCommand = JreStrcat("$C", [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getCommandWithNSString:@"Vector"], '[');
    jboolean needsWrapping = ![geo isLabelSet] && ![((NSString *) nil_chk(cmd)) hasPrefix:vectorCommand];
    if (needsWrapping) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:vectorCommand];
    }
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:cmd];
    if (needsWrapping) {
      [sb appendWithChar:']'];
    }
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:cmd];
  }
}

void GeogebraCommonKernelAlgosAlgoElement_getXMLWithJavaLangStringBuilder_withBoolean_(GeogebraCommonKernelAlgosAlgoElement *self, JavaLangStringBuilder *sb, jboolean includeOutputGeos) {
  if (!self->isPrintedInXML__) {
    return;
  }
  @try {
    GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_xmlTemplate_();
    NSString *cmdname = [self getCommandNameWithGeogebraCommonKernelStringTemplate:tpl];
    if ([((NSString *) nil_chk(cmdname)) isEqual:@"Expression"]) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[self getExpXMLWithGeogebraCommonKernelStringTemplate:tpl]];
    }
    else {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:GeogebraCommonKernelAlgosAlgoElement_getCmdXMLWithNSString_withGeogebraCommonKernelStringTemplate_(self, cmdname, tpl)];
    }
    if (includeOutputGeos) {
      [self getOutputXMLWithJavaLangStringBuilder:sb];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

void GeogebraCommonKernelAlgosAlgoElement_getXML_OGPWithJavaLangStringBuilder_withBoolean_(GeogebraCommonKernelAlgosAlgoElement *self, JavaLangStringBuilder *sb, jboolean includeOutputGeos) {
  if (!self->isPrintedInXML__) {
    return;
  }
  @try {
    GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_ogpTemplate_();
    NSString *cmdname = [self getCommandNameWithGeogebraCommonKernelStringTemplate:tpl];
    if ([((NSString *) nil_chk(cmdname)) isEqual:@"Expression"]) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[self getExpXMLWithGeogebraCommonKernelStringTemplate:tpl]];
    }
    else {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:GeogebraCommonKernelAlgosAlgoElement_getCmdXMLWithNSString_withGeogebraCommonKernelStringTemplate_(self, cmdname, tpl)];
    }
    if (includeOutputGeos) {
      [self getOutputXMLWithJavaLangStringBuilder:sb];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

NSString *GeogebraCommonKernelAlgosAlgoElement_getCmdXMLWithNSString_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelAlgosAlgoElement *self, NSString *cmdname, GeogebraCommonKernelStringTemplate *tpl) {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([self getOutputLength] > 0 && [[self getOutputWithInt:0] isKindOfClass:[GeogebraCommonKernelGeosGeoScriptAction class]]) {
    return @"";
  }
  [sb appendWithNSString:@"<command name=\""];
  if ([@"" isEqual:cmdname]) [sb appendWithNSString:@"AlgoNonCommand"];
  else [sb appendWithNSString:cmdname];
  [sb appendWithNSString:@"\""];
  if (![@"" isEqual:cmdname] && ([self isKindOfClass:[GeogebraCommonKernelAlgosAlgoListElement class]] || [((id<GeogebraCommonKernelAlgosGetCommand>) nil_chk([self getClassName])) isEqual:GeogebraCommonKernelCommandsCommandsEnum_get_Cell()] || [((id<GeogebraCommonKernelAlgosGetCommand>) nil_chk([self getClassName])) isEqual:GeogebraCommonKernelCommandsCommandsEnum_get_Object()])) {
    [sb appendWithNSString:@" type=\""];
    [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([self getOutput]), 0))) getXMLtypeString]];
    [sb appendWithNSString:@"\""];
  }
  if ([self getOutputLength] > 0 && [[self getOutputWithInt:0] isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
    NSString *varStr = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast([self getOutputWithInt:0], [GeogebraCommonKernelGeosGeoFunction class])))) getVarStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if (![@"x" isEqual:varStr]) {
      [sb appendWithNSString:@" var=\""];
      [sb appendWithNSString:varStr];
      [sb appendWithNSString:@"\""];
    }
  }
  [sb appendWithNSString:@">\n"];
  if (self->input_ != nil) {
    [sb appendWithNSString:@"\t<input"];
    for (jint i = 0; i < [self getInputLengthForXML]; i++) {
      [sb appendWithNSString:@" a"];
      [sb appendWithInt:i];
      [sb appendWithNSString:@"=\""];
      GeogebraCommonKernelGeosGeoElement *inputGeo = [self getInputWithInt:i];
      NSString *cmd = GeogebraCommonUtilStringUtil_encodeXMLWithNSString_([((GeogebraCommonKernelGeosGeoElement *) nil_chk(inputGeo)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]);
      if ([inputGeo isGeoVector] && ![inputGeo isLabelSet] && ![((NSString *) nil_chk(cmd)) hasPrefix:@"Vector["]) {
        [sb appendWithNSString:@"Vector["];
        [sb appendWithNSString:cmd];
        [sb appendWithNSString:@"]"];
      }
      else {
        [sb appendWithNSString:cmd];
      }
      [sb appendWithNSString:@"\""];
    }
    [sb appendWithNSString:@"/>\n"];
  }
  if ([self getOutputLength] > 0) [self getCmdOutputXMLWithJavaLangStringBuilder:sb withGeogebraCommonKernelStringTemplate:tpl];
  [sb appendWithNSString:@"</command>\n"];
  return [sb description];
}

jint GeogebraCommonKernelAlgosAlgoElement_getInputLength(GeogebraCommonKernelAlgosAlgoElement *self) {
  return ((IOSObjectArray *) nil_chk(self->input_))->size_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoElement)

@implementation GeogebraCommonKernelAlgosAlgoElement_OutputHandler

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)outer$
     withGeogebraCommonKernelAlgosAlgoElement_elementFactory:(id<GeogebraCommonKernelAlgosAlgoElement_elementFactory>)fac {
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, outer$, fac);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)outer$
     withGeogebraCommonKernelAlgosAlgoElement_elementFactory:(id<GeogebraCommonKernelAlgosAlgoElement_elementFactory>)fac
                                           withNSStringArray:(IOSObjectArray *)labels {
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_withNSStringArray_(self, outer$, fac, labels);
  return self;
}

- (void)removeFromHandler {
  [((id<JavaUtilList>) nil_chk([this$0_ getOutputHandler])) removeWithId:self];
}

- (void)adjustOutputSizeWithInt:(jint)size {
  [self adjustOutputSizeWithInt:size withBoolean:YES];
}

- (void)adjustOutputSizeWithInt:(jint)size
                    withBoolean:(jboolean)setDependencies {
  if ([((JavaUtilArrayList *) nil_chk(outputList_)) size] < size) {
    [self augmentOutputSizeWithInt:size - [outputList_ size] withBoolean:setDependencies];
  }
  else {
    for (jint i = size; i < [outputList_ size]; i++) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) setUndefined];
    }
  }
}

- (void)augmentOutputSizeWithInt:(jint)size {
  [self augmentOutputSizeWithInt:size withBoolean:YES];
}

- (void)augmentOutputSizeWithInt:(jint)increment
                     withBoolean:(jboolean)setDependencies {
  jint size = increment + [((JavaUtilArrayList *) nil_chk(outputList_)) size];
  [outputList_ ensureCapacityWithInt:size];
  for (jint i = [outputList_ size]; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *newGeo = [((id<GeogebraCommonKernelAlgosAlgoElement_elementFactory>) nil_chk(fac_)) newElement];
    [outputList_ addWithId:newGeo];
    if (setDependencies) {
      [this$0_ setOutputDependenciesWithGeogebraCommonKernelGeosGeoElement:newGeo];
    }
  }
  [this$0_ refreshOutput];
  if (setLabels__) {
    [self updateLabels];
  }
}

- (void)addOutputWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)geos
                                                 withBoolean:(jboolean)setDependencies
                                                 withBoolean:(jboolean)refresh {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
    [self addOutputWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(geos, i) withBoolean:setDependencies];
  }
  if (refresh) {
    [this$0_ refreshOutput];
  }
}

- (void)addOutputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                            withBoolean:(jboolean)setDependencies {
  [((JavaUtilArrayList *) nil_chk(outputList_)) addWithId:geo];
  if (setDependencies) {
    [this$0_ setOutputDependenciesWithGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler_set_labels_(self, labels);
  setLabels__ = ![((GeogebraCommonKernelConstruction *) nil_chk(this$0_->cons_)) isSuppressLabelsActive];
  if (labels != nil) {
    if (labels->size_ == 1) {
      [self setIndexLabelsWithNSString:IOSObjectArray_Get(labels, 0)];
    }
    [self adjustOutputSizeWithInt:labels->size_];
  }
  else {
    [self updateLabels];
  }
}

- (void)setIndexLabelsWithNSString:(NSString *)label {
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler_set_indexLabel_(self, label);
  setLabels__ = ![((GeogebraCommonKernelConstruction *) nil_chk(this$0_->cons_)) isSuppressLabelsActive];
  [self updateLabels];
}

- (void)updateLabels {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(outputList_)) size]; i++) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) isLabelSet]) {
      if (indexLabel_ != nil) {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) setLabelWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) getIndexLabelWithNSString:indexLabel_]];
      }
      else if ((labels_ != nil) && (i < labels_->size_)) {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) setLabelWithNSString:IOSObjectArray_Get(labels_, i)];
      }
      else {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) setLabelWithNSString:nil];
      }
    }
  }
}

- (void)setUndefined {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(outputList_)) size]; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) setUndefined];
  }
}

- (void)update {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(outputList_)) size]; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) update];
  }
}

- (void)updateParentAlgorithm {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(outputList_)) size]; i++) {
    [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputList_ getWithInt:i])) getParentAlgorithm])) update];
  }
}

- (id)addLabelWithNSString:(NSString *)label {
  GeogebraCommonKernelGeosGeoElement *geo;
  if (labelsSetLength_ < [((JavaUtilArrayList *) nil_chk(outputList_)) size]) {
    geo = [self getElementWithInt:labelsSetLength_];
  }
  else {
    geo = [((id<GeogebraCommonKernelAlgosAlgoElement_elementFactory>) nil_chk(fac_)) newElement];
    [outputList_ addWithId:geo];
    [this$0_ setOutputDependenciesWithGeogebraCommonKernelGeosGeoElement:geo];
    [this$0_ refreshOutput];
  }
  labelsSetLength_++;
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelWithNSString:label];
  return geo;
}

- (id)getElementWithInt:(jint)i {
  return [((JavaUtilArrayList *) nil_chk(outputList_)) getWithInt:i];
}

- (IOSObjectArray *)getOutputWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)a {
  return [((JavaUtilArrayList *) nil_chk(outputList_)) toArrayWithNSObjectArray:a];
}

- (jint)size {
  return [((JavaUtilArrayList *) nil_chk(outputList_)) size];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(fac_);
  RELEASE_(outputList_);
  RELEASE_(labels_);
  RELEASE_(indexLabel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelAlgosAlgoElement:withGeogebraCommonKernelAlgosAlgoElement_elementFactory:", "OutputHandler", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelAlgosAlgoElement:withGeogebraCommonKernelAlgosAlgoElement_elementFactory:withNSStringArray:", "OutputHandler", NULL, 0x1, NULL, NULL },
    { "removeFromHandler", NULL, "V", 0x1, NULL, NULL },
    { "adjustOutputSizeWithInt:", "adjustOutputSize", "V", 0x1, NULL, NULL },
    { "adjustOutputSizeWithInt:withBoolean:", "adjustOutputSize", "V", 0x1, NULL, NULL },
    { "augmentOutputSizeWithInt:", "augmentOutputSize", "V", 0x1, NULL, NULL },
    { "augmentOutputSizeWithInt:withBoolean:", "augmentOutputSize", "V", 0x1, NULL, NULL },
    { "addOutputWithGeogebraCommonKernelGeosGeoElementArray:withBoolean:withBoolean:", "addOutput", "V", 0x1, NULL, NULL },
    { "addOutputWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "addOutput", "V", 0x1, NULL, "(TT;Z)V" },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x1, NULL, NULL },
    { "setIndexLabelsWithNSString:", "setIndexLabels", "V", 0x1, NULL, NULL },
    { "updateLabels", NULL, "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "updateParentAlgorithm", NULL, "V", 0x1, NULL, NULL },
    { "addLabelWithNSString:", "addLabel", "TT;", 0x1, NULL, "(Ljava/lang/String;)TT;" },
    { "getElementWithInt:", "getElement", "TT;", 0x1, NULL, "(I)TT;" },
    { "getOutputWithGeogebraCommonKernelGeosGeoElementArray:", "getOutput", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.algos.AlgoElement;", NULL, NULL,  },
    { "fac_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoElement$elementFactory;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<TT;>;",  },
    { "outputList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<TT;>;",  },
    { "labels_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "indexLabel_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "setLabels__", "setLabels", 0x1, "Z", NULL, NULL,  },
    { "labelsSetLength_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoElement_OutputHandler = { 2, "OutputHandler", "geogebra.common.kernel.algos", "AlgoElement", 0x1, 19, methods, 7, fields, 0, NULL, 0, NULL, NULL, "<T:Lgeogebra/common/kernel/geos/GeoElement;>Ljava/lang/Object;" };
  return &_GeogebraCommonKernelAlgosAlgoElement_OutputHandler;
}

@end

void GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(GeogebraCommonKernelAlgosAlgoElement_OutputHandler *self, GeogebraCommonKernelAlgosAlgoElement *outer$, id<GeogebraCommonKernelAlgosAlgoElement_elementFactory> fac) {
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler_set_this$0_(self, outer$);
  NSObject_init(self);
  self->labelsSetLength_ = 0;
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler_set_fac_(self, fac);
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler_setAndConsume_outputList_(self, new_JavaUtilArrayList_init());
  if ([outer$ getOutputHandler] == nil) {
    [outer$ setOutputHandlerWithJavaUtilList:[new_JavaUtilArrayList_init() autorelease]];
  }
  [((id<JavaUtilList>) nil_chk([outer$ getOutputHandler])) addWithId:self];
}

GeogebraCommonKernelAlgosAlgoElement_OutputHandler *new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(GeogebraCommonKernelAlgosAlgoElement *outer$, id<GeogebraCommonKernelAlgosAlgoElement_elementFactory> fac) {
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler *self = [GeogebraCommonKernelAlgosAlgoElement_OutputHandler alloc];
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, outer$, fac);
  return self;
}

void GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_withNSStringArray_(GeogebraCommonKernelAlgosAlgoElement_OutputHandler *self, GeogebraCommonKernelAlgosAlgoElement *outer$, id<GeogebraCommonKernelAlgosAlgoElement_elementFactory> fac, IOSObjectArray *labels) {
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, outer$, fac);
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler_set_labels_(self, labels);
  if (labels != nil) {
    [self adjustOutputSizeWithInt:labels->size_];
  }
}

GeogebraCommonKernelAlgosAlgoElement_OutputHandler *new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_withNSStringArray_(GeogebraCommonKernelAlgosAlgoElement *outer$, id<GeogebraCommonKernelAlgosAlgoElement_elementFactory> fac, IOSObjectArray *labels) {
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler *self = [GeogebraCommonKernelAlgosAlgoElement_OutputHandler alloc];
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_withNSStringArray_(self, outer$, fac, labels);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoElement_OutputHandler)

@implementation GeogebraCommonKernelAlgosAlgoElement_elementFactory

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "TS;", 0x401, NULL, "()TS;" },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoElement_elementFactory = { 2, "elementFactory", "geogebra.common.kernel.algos", "AlgoElement", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "<S:Lgeogebra/common/kernel/geos/GeoElement;>Ljava/lang/Object;" };
  return &_GeogebraCommonKernelAlgosAlgoElement_elementFactory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoElement_elementFactory)
