//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/locusequ/EquationElement.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/locusequ/EquationAuxiliarSymbolicPoint.h"
#include "geogebra/common/kernel/locusequ/EquationElement.h"
#include "geogebra/common/kernel/locusequ/EquationList.h"
#include "geogebra/common/kernel/locusequ/EquationPoint.h"
#include "geogebra/common/kernel/locusequ/EquationScope.h"

@interface GeogebraCommonKernelLocusequEquationElement () {
 @public
  GeogebraCommonKernelGeosGeoElement *result_;
  GeogebraCommonKernelLocusequEquationScope *scope_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequEquationElement, result_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequEquationElement, scope_, GeogebraCommonKernelLocusequEquationScope *)

@implementation GeogebraCommonKernelLocusequEquationElement

- (instancetype)init {
  GeogebraCommonKernelLocusequEquationElement_init(self);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)element
             withGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope {
  GeogebraCommonKernelLocusequEquationElement_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelLocusequEquationScope_(self, element, scope);
  return self;
}

- (GeogebraCommonKernelLocusequEquationAuxiliarSymbolicPoint *)getNewIncidentPoint {
  GeogebraCommonKernelLocusequEquationAuxiliarSymbolicPoint *np = [((GeogebraCommonKernelLocusequEquationScope *) nil_chk([self getScope])) getNewAuxiliarPoint];
  [((GeogebraCommonKernelLocusequEquationAuxiliarSymbolicPoint *) nil_chk(np)) addIncidenceWithGeogebraCommonKernelLocusequEquationElement:self];
  return np;
}

- (GeogebraCommonKernelLocusequEquationScope *)getScope {
  return self->scope_;
}

- (void)setScopeWithGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope {
  GeogebraCommonKernelLocusequEquationElement_set_scope_(self, scope);
}

- (GeogebraCommonKernelLocusequEquationList *)forPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p
                                             withGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope2 {
  return [self forPointWithGeogebraCommonKernelLocusequEquationPoint:[((GeogebraCommonKernelLocusequEquationScope *) nil_chk(scope2)) getPointWithGeogebraCommonKernelGeosGeoPoint:p]];
}

- (GeogebraCommonKernelLocusequEquationList *)forPointWithGeogebraCommonKernelLocusequEquationPoint:(GeogebraCommonKernelLocusequEquationPoint *)p {
  GeogebraCommonKernelLocusequEquationList *equ = [self forPointImplWithGeogebraCommonKernelLocusequEquationPoint:p];
  [((GeogebraCommonKernelLocusequEquationList *) nil_chk(equ)) setAlgebraicWithBoolean:[self isAlgebraic]];
  return equ;
}

- (GeogebraCommonKernelLocusequEquationList *)forPointImplWithGeogebraCommonKernelLocusequEquationPoint:(GeogebraCommonKernelLocusequEquationPoint *)p {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isAlgebraic {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonKernelGeosGeoElement *)getResult {
  return self->result_;
}

- (void)setResultWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)result {
  GeogebraCommonKernelLocusequEquationElement_set_result_(self, result);
}

- (jboolean)isRestriction {
  return NO;
}

- (void)dealloc {
  RELEASE_(result_);
  RELEASE_(scope_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "EquationElement", NULL, 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelLocusequEquationScope:", "EquationElement", NULL, 0x1, NULL, NULL },
    { "getNewIncidentPoint", NULL, "Lgeogebra.common.kernel.locusequ.EquationAuxiliarSymbolicPoint;", 0x1, NULL, NULL },
    { "getScope", NULL, "Lgeogebra.common.kernel.locusequ.EquationScope;", 0x1, NULL, NULL },
    { "setScopeWithGeogebraCommonKernelLocusequEquationScope:", "setScope", "V", 0x4, NULL, NULL },
    { "forPointWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelLocusequEquationScope:", "forPoint", "Lgeogebra.common.kernel.locusequ.EquationList;", 0x1, NULL, NULL },
    { "forPointWithGeogebraCommonKernelLocusequEquationPoint:", "forPoint", "Lgeogebra.common.kernel.locusequ.EquationList;", 0x1, NULL, NULL },
    { "forPointImplWithGeogebraCommonKernelLocusequEquationPoint:", "forPointImpl", "Lgeogebra.common.kernel.locusequ.EquationList;", 0x404, NULL, NULL },
    { "isAlgebraic", NULL, "Z", 0x401, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setResultWithGeogebraCommonKernelGeosGeoElement:", "setResult", "V", 0x4, NULL, NULL },
    { "isRestriction", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "scope_", NULL, 0x2, "Lgeogebra.common.kernel.locusequ.EquationScope;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelLocusequEquationElement = { 2, "EquationElement", "geogebra.common.kernel.locusequ", NULL, 0x401, 12, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelLocusequEquationElement;
}

@end

void GeogebraCommonKernelLocusequEquationElement_init(GeogebraCommonKernelLocusequEquationElement *self) {
  NSObject_init(self);
}

void GeogebraCommonKernelLocusequEquationElement_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelLocusequEquationElement *self, GeogebraCommonKernelGeosGeoElement *element, GeogebraCommonKernelLocusequEquationScope *scope) {
  NSObject_init(self);
  [self setResultWithGeogebraCommonKernelGeosGeoElement:element];
  [self setScopeWithGeogebraCommonKernelLocusequEquationScope:scope];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelLocusequEquationElement)
