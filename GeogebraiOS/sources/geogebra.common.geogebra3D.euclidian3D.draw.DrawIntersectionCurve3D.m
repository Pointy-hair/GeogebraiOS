//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawIntersectionCurve3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawIntersectionCurve3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DCurves.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D () {
 @public
  JavaUtilArrayList *drawables_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D, drawables_, JavaUtilArrayList *)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                    withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, a_view3D, geo);
  return self;
}

- (void)addWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d {
  [((JavaUtilArrayList *) nil_chk(drawables_)) addWithId:d];
}

- (void)drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(drawables_)) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (jint)getPickOrder {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_PATH;
}

- (jboolean)updateForItSelf {
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(drawables_)) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) updateForItSelf];
  }
  return YES;
}

- (void)updateForView {
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(drawables_)) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) updateForView];
  }
}

- (void)updateMousePosWithDouble:(jdouble)xRW
                      withDouble:(jdouble)yRW {
}

- (void)updatePreview {
  [self setWaitForUpdate];
}

- (void)disposePreview {
  [super disposePreview];
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(drawables_)) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) disposePreview];
  }
}

- (jboolean)hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting {
  if (waitForReset_) {
    return NO;
  }
  jboolean ret = NO;
  [self setZPickWithDouble:JavaLangDouble_NEGATIVE_INFINITY withDouble:JavaLangDouble_NEGATIVE_INFINITY];
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(drawables_)) {
    if ([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:hitting]) {
      if ([d getZPickNear] > [self getZPickNear]) {
        [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:[d getPickingType]];
        [self setZPickWithDouble:[d getZPickNear] withDouble:[d getZPickFar]];
      }
      ret = YES;
    }
  }
  return ret;
}

- (void)addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(drawables_)) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists];
  }
}

- (void)dealloc {
  RELEASE_(drawables_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonKernelGeosGeoElement:", "DrawIntersectionCurve3D", NULL, 0x1, NULL, NULL },
    { "addWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "add", "V", 0x1, NULL, NULL },
    { "drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometry", "V", 0x1, NULL, NULL },
    { "getPickOrder", NULL, "I", 0x1, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x1, NULL, NULL },
    { "updatePreview", NULL, "V", 0x1, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:", "hit", "Z", 0x1, NULL, NULL },
    { "addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "addToDrawable3DLists", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "drawables_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/euclidian3D/draw/Drawable3D;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D = { 2, "DrawIntersectionCurve3D", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 11, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DCurves_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, a_view3D, geo);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D_setAndConsume_drawables_(self, new_JavaUtilArrayList_init());
  [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()];
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, a_view3D, geo);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawIntersectionCurve3D)
