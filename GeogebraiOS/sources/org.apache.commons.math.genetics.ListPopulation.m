//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/genetics/ListPopulation.java
//


#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/apache/commons/math/exception/NotPositiveException.h"
#include "org/apache/commons/math/exception/NumberIsTooLargeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/genetics/Chromosome.h"
#include "org/apache/commons/math/genetics/ListPopulation.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheCommonsMathGeneticsListPopulation () {
 @public
  id<JavaUtilList> chromosomes_;
  jint populationLimit_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathGeneticsListPopulation, chromosomes_, id<JavaUtilList>)

@implementation OrgApacheCommonsMathGeneticsListPopulation

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)chromosomes
                             withInt:(jint)populationLimit {
  OrgApacheCommonsMathGeneticsListPopulation_initWithJavaUtilList_withInt_(self, chromosomes, populationLimit);
  return self;
}

- (instancetype)initWithInt:(jint)populationLimit {
  OrgApacheCommonsMathGeneticsListPopulation_initWithInt_(self, populationLimit);
  return self;
}

- (void)setChromosomesWithJavaUtilList:(id<JavaUtilList>)chromosomes {
  OrgApacheCommonsMathGeneticsListPopulation_set_chromosomes_(self, chromosomes);
}

- (id<JavaUtilList>)getChromosomes {
  return chromosomes_;
}

- (void)addChromosomeWithOrgApacheCommonsMathGeneticsChromosome:(OrgApacheCommonsMathGeneticsChromosome *)chromosome {
  [((id<JavaUtilList>) nil_chk(self->chromosomes_)) addWithId:chromosome];
}

- (OrgApacheCommonsMathGeneticsChromosome *)getFittestChromosome {
  OrgApacheCommonsMathGeneticsChromosome *bestChromosome = [((id<JavaUtilList>) nil_chk(self->chromosomes_)) getWithInt:0];
  for (OrgApacheCommonsMathGeneticsChromosome * __strong chromosome in self->chromosomes_) {
    if ([((OrgApacheCommonsMathGeneticsChromosome *) nil_chk(chromosome)) compareToWithId:bestChromosome] > 0) {
      bestChromosome = chromosome;
    }
  }
  return bestChromosome;
}

- (jint)getPopulationLimit {
  return self->populationLimit_;
}

- (void)setPopulationLimitWithInt:(jint)populationLimit {
  self->populationLimit_ = populationLimit;
}

- (jint)getPopulationSize {
  return [((id<JavaUtilList>) nil_chk(self->chromosomes_)) size];
}

- (NSString *)description {
  return [((id<JavaUtilList>) nil_chk(self->chromosomes_)) description];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilList>) nil_chk(chromosomes_)) iterator];
}

- (void)dealloc {
  RELEASE_(chromosomes_);
  [super dealloc];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilList:withInt:", "ListPopulation", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "ListPopulation", NULL, 0x1, NULL, NULL },
    { "setChromosomesWithJavaUtilList:", "setChromosomes", "V", 0x1, NULL, NULL },
    { "getChromosomes", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "addChromosomeWithOrgApacheCommonsMathGeneticsChromosome:", "addChromosome", "V", 0x1, NULL, NULL },
    { "getFittestChromosome", NULL, "Lorg.apache.commons.math.genetics.Chromosome;", 0x1, NULL, NULL },
    { "getPopulationLimit", NULL, "I", 0x1, NULL, NULL },
    { "setPopulationLimitWithInt:", "setPopulationLimit", "V", 0x1, NULL, NULL },
    { "getPopulationSize", NULL, "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "chromosomes_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/apache/commons/math/genetics/Chromosome;>;",  },
    { "populationLimit_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathGeneticsListPopulation = { 2, "ListPopulation", "org.apache.commons.math.genetics", NULL, 0x401, 11, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathGeneticsListPopulation;
}

@end

void OrgApacheCommonsMathGeneticsListPopulation_initWithJavaUtilList_withInt_(OrgApacheCommonsMathGeneticsListPopulation *self, id<JavaUtilList> chromosomes, jint populationLimit) {
  NSObject_init(self);
  if ([((id<JavaUtilList>) nil_chk(chromosomes)) size] > populationLimit) {
    @throw [new_OrgApacheCommonsMathExceptionNumberIsTooLargeException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_withNSNumber_withBoolean_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(), JavaLangInteger_valueOfWithInt_([chromosomes size]), JavaLangInteger_valueOfWithInt_(populationLimit), NO) autorelease];
  }
  if (populationLimit < 0) {
    @throw [new_OrgApacheCommonsMathExceptionNotPositiveException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_POPULATION_LIMIT_NOT_POSITIVE(), JavaLangInteger_valueOfWithInt_(populationLimit)) autorelease];
  }
  OrgApacheCommonsMathGeneticsListPopulation_set_chromosomes_(self, chromosomes);
  self->populationLimit_ = populationLimit;
}

void OrgApacheCommonsMathGeneticsListPopulation_initWithInt_(OrgApacheCommonsMathGeneticsListPopulation *self, jint populationLimit) {
  NSObject_init(self);
  if (populationLimit < 0) {
    @throw [new_OrgApacheCommonsMathExceptionNotPositiveException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSNumber_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_POPULATION_LIMIT_NOT_POSITIVE(), JavaLangInteger_valueOfWithInt_(populationLimit)) autorelease];
  }
  self->populationLimit_ = populationLimit;
  OrgApacheCommonsMathGeneticsListPopulation_setAndConsume_chromosomes_(self, new_JavaUtilArrayList_initWithInt_(populationLimit));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathGeneticsListPopulation)
