//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/plugin/script/JsScript.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/Event.h"
#include "geogebra/common/plugin/EventType.h"
#include "geogebra/common/plugin/ScriptError.h"
#include "geogebra/common/plugin/ScriptType.h"
#include "geogebra/common/plugin/script/JsScript.h"
#include "geogebra/common/plugin/script/Script.h"
#include "java/lang/Exception.h"

@implementation GeogebraCommonPluginScriptJsScript

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                 withNSString:(NSString *)text {
  GeogebraCommonPluginScriptJsScript_initWithGeogebraCommonMainApp_withNSString_(self, app, text);
  return self;
}

- (void)runWithGeogebraCommonPluginEvent:(GeogebraCommonPluginEvent *)evt {
  NSString *label = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonPluginEvent *) nil_chk(evt))->target_)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  jboolean update = evt->type_ == GeogebraCommonPluginEventTypeEnum_get_UPDATE();
  IOSObjectArray *args;
  @try {
    if ([((GeogebraCommonMainApp *) nil_chk(app_)) isApplet] && [app_ useBrowserForJavaScript] && !update) {
      if (evt->argument_ == nil) {
        args = [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()];
      }
      else {
        args = [IOSObjectArray arrayWithObjects:(id[]){ evt->argument_ } count:1 type:NSObject_class_()];
      }
      [app_ callAppletJavaScriptWithNSString:JreStrcat("$$", @"ggb", label) withNSObjectArray:args];
    }
    else if ([app_ isHTML5Applet] && [app_ useBrowserForJavaScript]) {
      NSString *functionPrefix = update ? @"ggbUpdate" : @"ggb";
      if (evt->argument_ == nil) {
        args = [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()];
      }
      else {
        args = [IOSObjectArray arrayWithObjects:(id[]){ evt->argument_ } count:1 type:NSObject_class_()];
      }
      [app_ callAppletJavaScriptWithNSString:JreStrcat("$$", functionPrefix, label) withNSObjectArray:args];
    }
    else {
      [app_ evalJavaScriptWithGeogebraCommonMainApp:app_ withNSString:text_ withNSString:evt->argument_];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_GeogebraCommonPluginScriptError_initWithNSString_(JreStrcat("$C$$$C$", [((GeogebraCommonMainApp *) nil_chk(app_)) getPlainWithNSString:update ? @"OnUpdate" : @"OnClick"], ' ', label, @":\n", [app_ getPlainWithNSString:@"ErrorInJavaScript"], 0x000a, [e getLocalizedMessage])) autorelease];
  }
}

- (GeogebraCommonPluginScriptTypeEnum *)getType {
  return GeogebraCommonPluginScriptTypeEnum_get_JAVASCRIPT();
}

- (GeogebraCommonPluginScriptScript *)copy__ {
  return [new_GeogebraCommonPluginScriptJsScript_initWithGeogebraCommonMainApp_withNSString_(app_, text_) autorelease];
}

- (jboolean)renameGeoWithNSString:(NSString *)oldLabel
                     withNSString:(NSString *)newLabel {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withNSString:", "JsScript", NULL, 0x1, NULL, NULL },
    { "runWithGeogebraCommonPluginEvent:", "run", "V", 0x1, "Lgeogebra.common.plugin.ScriptError;", NULL },
    { "getType", NULL, "Lgeogebra.common.plugin.ScriptType;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.plugin.script.Script;", 0x1, NULL, NULL },
    { "renameGeoWithNSString:withNSString:", "renameGeo", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonPluginScriptJsScript = { 2, "JsScript", "geogebra.common.plugin.script", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonPluginScriptJsScript;
}

@end

void GeogebraCommonPluginScriptJsScript_initWithGeogebraCommonMainApp_withNSString_(GeogebraCommonPluginScriptJsScript *self, GeogebraCommonMainApp *app, NSString *text) {
  GeogebraCommonPluginScriptScript_initWithGeogebraCommonMainApp_withNSString_(self, app, text);
}

GeogebraCommonPluginScriptJsScript *new_GeogebraCommonPluginScriptJsScript_initWithGeogebraCommonMainApp_withNSString_(GeogebraCommonMainApp *app, NSString *text) {
  GeogebraCommonPluginScriptJsScript *self = [GeogebraCommonPluginScriptJsScript alloc];
  GeogebraCommonPluginScriptJsScript_initWithGeogebraCommonMainApp_withNSString_(self, app, text);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonPluginScriptJsScript)
