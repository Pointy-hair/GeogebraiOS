//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/ValidExpression.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/AssignmentType.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/Inspecting.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Set.h"
#include "java/util/Vector.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface GeogebraCommonKernelArithmeticValidExpression () {
 @public
  JavaUtilVector *labels_;
  jboolean inTree_;
  jboolean keepInputUsed_;
  GeogebraCommonKernelArithmeticAssignmentTypeEnum *assignmentType_;
}

- (void)initLabels OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticValidExpression, labels_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticValidExpression, assignmentType_, GeogebraCommonKernelArithmeticAssignmentTypeEnum *)

__attribute__((unused)) static void GeogebraCommonKernelArithmeticValidExpression_initLabels(GeogebraCommonKernelArithmeticValidExpression *self);

@interface GeogebraCommonKernelArithmeticValidExpression_$1 : NSObject < GeogebraCommonKernelArithmeticInspecting >

- (jboolean)checkWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelArithmeticValidExpression_$1)

__attribute__((unused)) static void GeogebraCommonKernelArithmeticValidExpression_$1_init(GeogebraCommonKernelArithmeticValidExpression_$1 *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticValidExpression_$1 *new_GeogebraCommonKernelArithmeticValidExpression_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelArithmeticValidExpression_$1)

@implementation GeogebraCommonKernelArithmeticValidExpression

- (void)setAssignmentTypeWithGeogebraCommonKernelArithmeticAssignmentTypeEnum:(GeogebraCommonKernelArithmeticAssignmentTypeEnum *)assignmentType {
  GeogebraCommonKernelArithmeticValidExpression_set_assignmentType_(self, assignmentType);
}

- (GeogebraCommonKernelArithmeticAssignmentTypeEnum *)getAssignmentType {
  return assignmentType_;
}

- (void)addLabelWithNSString:(NSString *)label {
  GeogebraCommonKernelArithmeticValidExpression_initLabels(self);
  [((JavaUtilVector *) nil_chk(labels_)) addWithId:label];
}

- (void)initLabels {
  GeogebraCommonKernelArithmeticValidExpression_initLabels(self);
}

- (void)addLabelWithJavaUtilVector:(JavaUtilVector *)labellist {
  GeogebraCommonKernelArithmeticValidExpression_initLabels(self);
  [((JavaUtilVector *) nil_chk(labels_)) addAllWithJavaUtilCollection:labellist];
}

- (jint)labelCount {
  if (labels_ == nil) {
    return 0;
  }
  return [((JavaUtilVector *) nil_chk(labels_)) size];
}

- (NSString *)getLabelWithInt:(jint)index {
  if (index < 0 || index >= [self labelCount]) {
    return nil;
  }
  return [((JavaUtilVector *) nil_chk(labels_)) getWithInt:index];
}

- (IOSObjectArray *)getLabels {
  jint size = [self labelCount];
  if (size == 0) {
    return nil;
  }
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:size type:NSString_class_()];
  for (jint i = 0; i < size; i++) {
    IOSObjectArray_Set(ret, i, [((JavaUtilVector *) nil_chk(labels_)) getWithInt:i]);
  }
  return ret;
}

- (NSString *)getLabel {
  return [self getLabelWithInt:0];
}

- (void)setLabelWithNSString:(NSString *)label {
  GeogebraCommonKernelArithmeticValidExpression_initLabels(self);
  [((JavaUtilVector *) nil_chk(labels_)) clear];
  [labels_ addWithId:label];
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)str {
  GeogebraCommonKernelArithmeticValidExpression_initLabels(self);
  [((JavaUtilVector *) nil_chk(labels_)) clear];
  if (str == nil) return;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(str))->size_; i++) {
    [labels_ addWithId:IOSObjectArray_Get(str, i)];
  }
}

- (jboolean)isVariable {
  return NO;
}

- (jboolean)isInTree {
  return inTree_;
}

- (void)setInTreeWithBoolean:(jboolean)flag {
  inTree_ = flag;
}

- (jboolean)isGeoElement {
  return NO;
}

- (jboolean)isTopLevelCommand {
  return NO;
}

- (GeogebraCommonKernelArithmeticCommand *)getTopLevelCommand {
  return nil;
}

- (NSString *)getLabelForAssignment {
  return [self getLabel];
}

- (NSString *)toAssignmentStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (labels_ == nil) {
    return [self toStringWithGeogebraCommonKernelStringTemplate:tpl];
  }
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  switch ([assignmentType_ ordinal]) {
    case GeogebraCommonKernelArithmeticAssignmentType_DEFAULT:
    [sb appendWithNSString:[self getLabelForAssignment]];
    [sb appendWithNSString:[self getAssignmentOperator]];
    break;
    case GeogebraCommonKernelArithmeticAssignmentType_DELAYED:
    [sb appendWithNSString:[self getLabelForAssignment]];
    [sb appendWithNSString:[self getDelayedAssignmentOperator]];
    break;
  }
  [sb appendWithNSString:[self toStringWithGeogebraCommonKernelStringTemplate:tpl]];
  return [sb description];
}

- (NSString *)toAssignmentLaTeXStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (labels_ == nil) {
    return [self toLaTeXStringWithBoolean:YES withGeogebraCommonKernelStringTemplate:tpl];
  }
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  switch ([assignmentType_ ordinal]) {
    case GeogebraCommonKernelArithmeticAssignmentType_DEFAULT:
    [sb appendWithNSString:[((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:[self getLabelForAssignment]]];
    [sb appendWithNSString:[self getAssignmentOperatorLaTeX]];
    break;
    case GeogebraCommonKernelArithmeticAssignmentType_DELAYED:
    [sb appendWithNSString:[((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:[self getLabelForAssignment]]];
    [sb appendWithNSString:[self getDelayedAssignmentOperatorLaTeX]];
    break;
  }
  [sb appendWithNSString:[self toLaTeXStringWithBoolean:YES withGeogebraCommonKernelStringTemplate:tpl]];
  return [sb description];
}

- (NSString *)getAssignmentOperator {
  return @":=";
}

- (NSString *)getDelayedAssignmentOperator {
  return @"::=";
}

- (NSString *)getAssignmentOperatorLaTeX {
  return @" \\, :=  \\, ";
}

- (NSString *)getDelayedAssignmentOperatorLaTeX {
  return @" \\, ::= \\, ";
}

- (void)addCommandsWithJavaUtilSet:(id<JavaUtilSet>)cmds {
}

- (jboolean)isKeepInputUsed {
  return keepInputUsed_;
}

- (void)setKeepInputUsedWithBoolean:(jboolean)keepInputUsed {
  self->keepInputUsed_ = keepInputUsed;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)evaluateWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return self;
}

- (jdouble)evaluateDouble {
  id<GeogebraCommonKernelArithmeticExpressionValue> ev = [self evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:ev]) return [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(ev, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  return JavaLangDouble_NaN;
}

- (GeogebraCommonKernelArithmeticFunction *)evaluateComplex {
  id<GeogebraCommonKernelArithmeticExpressionValue> ev = [self evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  return (GeogebraCommonKernelArithmeticFunction *) check_class_cast(ev, [GeogebraCommonKernelArithmeticFunction class]);
}

- (NSString *)description {
  return [self toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)traverseWithGeogebraCommonKernelArithmeticTraversing:(id<GeogebraCommonKernelArithmeticTraversing>)t {
  return [((id<GeogebraCommonKernelArithmeticTraversing>) nil_chk(t)) processWithGeogebraCommonKernelArithmeticExpressionValue:self];
}

- (jboolean)inspectWithGeogebraCommonKernelArithmeticInspecting:(id<GeogebraCommonKernelArithmeticInspecting>)t {
  return [((id<GeogebraCommonKernelArithmeticInspecting>) nil_chk(t)) checkWithGeogebraCommonKernelArithmeticExpressionValue:self];
}

+ (NSString *)debugStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)s {
  return GeogebraCommonKernelArithmeticValidExpression_debugStringWithGeogebraCommonKernelArithmeticExpressionValue_(s);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)unwrap {
  return self;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)wrap {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasCoords {
  return NO;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv {
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"derivative from ", [self getClass]));
  return nil;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)integralWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv {
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"integral from ", [self getClass]));
  return nil;
}

- (jboolean)isExpressionNode {
  return NO;
}

- (jboolean)evaluatesToText {
  return NO;
}

- (jboolean)evaluatesToList {
  return NO;
}

- (jboolean)evaluatesToNonComplex2DVector {
  return NO;
}

- (jboolean)evaluatesToVectorNotPoint {
  return NO;
}

- (jboolean)evaluatesTo3DVector {
  return NO;
}

+ (NSString *)printWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)x2
                                                         withBoolean:(jboolean)values
                              withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(x2, values, tpl);
}

- (jboolean)containsFunctionVariable {
  return [self inspectWithGeogebraCommonKernelArithmeticInspecting:[new_GeogebraCommonKernelArithmeticValidExpression_$1_init() autorelease]];
}

- (jboolean)evaluatesToNumberWithBoolean:(jboolean)def {
  return [self isNumberValue];
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticValidExpression_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(labels_);
  RELEASE_(assignmentType_);
  [super dealloc];
}

+ (IOSObjectArray *)__annotations_toString {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setAssignmentTypeWithGeogebraCommonKernelArithmeticAssignmentTypeEnum:", "setAssignmentType", "V", 0x1, NULL, NULL },
    { "getAssignmentType", NULL, "Lgeogebra.common.kernel.arithmetic.AssignmentType;", 0x1, NULL, NULL },
    { "addLabelWithNSString:", "addLabel", "V", 0x1, NULL, NULL },
    { "initLabels", NULL, "V", 0x2, NULL, NULL },
    { "addLabelWithJavaUtilVector:", "addLabel", "V", 0x1, NULL, NULL },
    { "labelCount", NULL, "I", 0x1, NULL, NULL },
    { "getLabelWithInt:", "getLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLabels", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLabel", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setLabelWithNSString:", "setLabel", "V", 0x1, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x1, NULL, NULL },
    { "isVariable", NULL, "Z", 0x1, NULL, NULL },
    { "isInTree", NULL, "Z", 0x11, NULL, NULL },
    { "setInTreeWithBoolean:", "setInTree", "V", 0x11, NULL, NULL },
    { "isGeoElement", NULL, "Z", 0x11, NULL, NULL },
    { "isTopLevelCommand", NULL, "Z", 0x1, NULL, NULL },
    { "getTopLevelCommand", NULL, "Lgeogebra.common.kernel.arithmetic.Command;", 0x1, NULL, NULL },
    { "getLabelForAssignment", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toAssignmentStringWithGeogebraCommonKernelStringTemplate:", "toAssignmentString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toAssignmentLaTeXStringWithGeogebraCommonKernelStringTemplate:", "toAssignmentLaTeXString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getAssignmentOperator", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDelayedAssignmentOperator", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAssignmentOperatorLaTeX", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDelayedAssignmentOperatorLaTeX", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "addCommandsWithJavaUtilSet:", "addCommands", "V", 0x11, NULL, NULL },
    { "isKeepInputUsed", NULL, "Z", 0x1, NULL, NULL },
    { "setKeepInputUsedWithBoolean:", "setKeepInputUsed", "V", 0x1, NULL, NULL },
    { "evaluateWithGeogebraCommonKernelStringTemplate:", "evaluate", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "evaluateDouble", NULL, "D", 0x1, NULL, NULL },
    { "evaluateComplex", NULL, "Lgeogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "traverseWithGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "inspectWithGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x1, NULL, NULL },
    { "debugStringWithGeogebraCommonKernelArithmeticExpressionValue:", "debugString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "unwrap", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "wrap", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x401, NULL, NULL },
    { "hasCoords", NULL, "Z", 0x1, NULL, NULL },
    { "derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:", "derivative", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "integralWithGeogebraCommonKernelArithmeticFunctionVariable:", "integral", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "isExpressionNode", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToText", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToList", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToNonComplex2DVector", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToVectorNotPoint", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesTo3DVector", NULL, "Z", 0x1, NULL, NULL },
    { "printWithGeogebraCommonKernelArithmeticExpressionValue:withBoolean:withGeogebraCommonKernelStringTemplate:", "print", "Ljava.lang.String;", 0xc, NULL, NULL },
    { "containsFunctionVariable", NULL, "Z", 0x11, NULL, NULL },
    { "evaluatesToNumberWithBoolean:", "evaluatesToNumber", "Z", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "labels_", NULL, 0x2, "Ljava.util.Vector;", NULL, "Ljava/util/Vector<Ljava/lang/String;>;",  },
    { "inTree_", NULL, 0x2, "Z", NULL, NULL,  },
    { "keepInputUsed_", NULL, 0x2, "Z", NULL, NULL,  },
    { "assignmentType_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.AssignmentType;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticValidExpression = { 2, "ValidExpression", "geogebra.common.kernel.arithmetic", NULL, 0x401, 51, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticValidExpression;
}

@end

void GeogebraCommonKernelArithmeticValidExpression_initLabels(GeogebraCommonKernelArithmeticValidExpression *self) {
  if (self->labels_ == nil) GeogebraCommonKernelArithmeticValidExpression_setAndConsume_labels_(self, new_JavaUtilVector_init());
}

NSString *GeogebraCommonKernelArithmeticValidExpression_debugStringWithGeogebraCommonKernelArithmeticExpressionValue_(id<GeogebraCommonKernelArithmeticExpressionValue> s) {
  GeogebraCommonKernelArithmeticValidExpression_initialize();
  if (s == nil) return @"<null>";
  if ([s isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) return JreStrcat("$$C@C$C", @"ExNode(", GeogebraCommonKernelArithmeticValidExpression_debugStringWithGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(s, [GeogebraCommonKernelArithmeticExpressionNode class])))) getLeft]), ',', [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(s, [GeogebraCommonKernelArithmeticExpressionNode class])))) getOperation], ',', GeogebraCommonKernelArithmeticValidExpression_debugStringWithGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(s, [GeogebraCommonKernelArithmeticExpressionNode class])))) getRight]), ')');
  if ([s isKindOfClass:[GeogebraCommonKernelArithmeticEquation class]]) return JreStrcat("$$$$C", @"Eq(", GeogebraCommonKernelArithmeticValidExpression_debugStringWithGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelArithmeticEquation *) nil_chk(((GeogebraCommonKernelArithmeticEquation *) check_class_cast(s, [GeogebraCommonKernelArithmeticEquation class])))) getLHS]), @",=,", GeogebraCommonKernelArithmeticValidExpression_debugStringWithGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelArithmeticEquation *) nil_chk(((GeogebraCommonKernelArithmeticEquation *) check_class_cast(s, [GeogebraCommonKernelArithmeticEquation class])))) getRHS]), ')');
  if ([s isKindOfClass:[GeogebraCommonKernelArithmeticMyList class]]) {
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithNSString_(@"MyList(") autorelease];
    for (jint i = 0; i < [((GeogebraCommonKernelArithmeticMyList *) nil_chk(((GeogebraCommonKernelArithmeticMyList *) check_class_cast(s, [GeogebraCommonKernelArithmeticMyList class])))) size]; i++) {
      if (i > 0) [sb appendWithNSString:@","];
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_debugStringWithGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelArithmeticMyList *) nil_chk(((GeogebraCommonKernelArithmeticMyList *) check_class_cast(s, [GeogebraCommonKernelArithmeticMyList class])))) getListElementWithInt:i])];
    }
    [sb appendWithChar:')'];
    return [sb description];
  }
  if ([s isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]]) {
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithNSString_(@"Cmd:") autorelease];
    [sb appendWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(((GeogebraCommonKernelArithmeticCommand *) check_class_cast(s, [GeogebraCommonKernelArithmeticCommand class])))) getName]];
    [sb appendWithNSString:@"("];
    for (jint i = 0; i < [((GeogebraCommonKernelArithmeticCommand *) nil_chk(((GeogebraCommonKernelArithmeticCommand *) check_class_cast(s, [GeogebraCommonKernelArithmeticCommand class])))) getArgumentNumber]; i++) {
      if (i > 0) [sb appendWithNSString:@","];
      [sb appendWithNSString:GeogebraCommonKernelArithmeticValidExpression_debugStringWithGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticCommand *) nil_chk(((GeogebraCommonKernelArithmeticCommand *) check_class_cast(s, [GeogebraCommonKernelArithmeticCommand class])))) getArgumentWithInt:i])) unwrap])];
    }
    [sb appendWithChar:')'];
    return [sb description];
  }
  return JreStrcat("$C$C", [((NSString *) nil_chk([((NSString *) nil_chk([[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(s)) getClass] getName])) replaceAll:@"geogebra.common.kernel.arithmetic." withReplacement:@""])) replaceAll:@"geogebra.common.kernel.geos.Geo" withReplacement:@"G"], '(', [s toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], ')');
}

NSString *GeogebraCommonKernelArithmeticValidExpression_printWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(id<GeogebraCommonKernelArithmeticExpressionValue> x2, jboolean values, GeogebraCommonKernelStringTemplate *tpl) {
  GeogebraCommonKernelArithmeticValidExpression_initialize();
  if (values) {
    return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x2)) toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
  }
  return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(x2)) isGeoElement] ? [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(x2, [GeogebraCommonKernelGeosGeoElement class])) getLabelWithGeogebraCommonKernelStringTemplate:tpl] : [x2 toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

void GeogebraCommonKernelArithmeticValidExpression_init(GeogebraCommonKernelArithmeticValidExpression *self) {
  NSObject_init(self);
  GeogebraCommonKernelArithmeticValidExpression_set_assignmentType_(self, GeogebraCommonKernelArithmeticAssignmentTypeEnum_get_NONE());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticValidExpression)

@implementation GeogebraCommonKernelArithmeticValidExpression_$1

- (jboolean)checkWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v {
  return [v isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]];
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticValidExpression_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkWithGeogebraCommonKernelArithmeticExpressionValue:", "check", "Z", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelArithmeticValidExpression", "containsFunctionVariable" };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticValidExpression_$1 = { 2, "", "geogebra.common.kernel.arithmetic", "ValidExpression", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonKernelArithmeticValidExpression_$1;
}

@end

void GeogebraCommonKernelArithmeticValidExpression_$1_init(GeogebraCommonKernelArithmeticValidExpression_$1 *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticValidExpression_$1 *new_GeogebraCommonKernelArithmeticValidExpression_$1_init() {
  GeogebraCommonKernelArithmeticValidExpression_$1 *self = [GeogebraCommonKernelArithmeticValidExpression_$1 alloc];
  GeogebraCommonKernelArithmeticValidExpression_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticValidExpression_$1)
