//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/MyList.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/Inspecting.h"
#include "geogebra/common/kernel/arithmetic/ListValue.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/ReplaceChildrenByValues.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/arithmetic/Variable.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/GgbMat.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"

@interface GeogebraCommonKernelArithmeticMyList () {
 @public
  GeogebraCommonKernelKernel *kernel_;
  jint matrixRows_;
  jint matrixCols_;
  JavaUtilArrayList *listElements_;
  jboolean isDefined__;
}

- (void)matrixMultiplyWithGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)LHlist
                      withGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)RHlist;

- (void)applyWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)operation
 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)value
                                       withBoolean:(jboolean)right
            withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (void)setIdentityMatrix;

+ (jboolean)isEquationWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ex;

- (jboolean)isMatrixWithGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)LHlist;

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                 withBoolean:(jboolean)valueMode;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticMyList, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticMyList, listElements_, JavaUtilArrayList *)

__attribute__((unused)) static void GeogebraCommonKernelArithmeticMyList_matrixMultiplyWithGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelArithmeticMyList_(GeogebraCommonKernelArithmeticMyList *self, GeogebraCommonKernelArithmeticMyList *LHlist, GeogebraCommonKernelArithmeticMyList *RHlist);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticMyList_applyWithGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticMyList *self, GeogebraCommonPluginOperationEnum *operation, id<GeogebraCommonKernelArithmeticExpressionValue> value, jboolean right, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticMyList_setIdentityMatrix(GeogebraCommonKernelArithmeticMyList *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelArithmeticMyList_isEquationWithGeogebraCommonKernelArithmeticExpressionValue_(id<GeogebraCommonKernelArithmeticExpressionValue> ex);

__attribute__((unused)) static jboolean GeogebraCommonKernelArithmeticMyList_isMatrixWithGeogebraCommonKernelArithmeticMyList_(GeogebraCommonKernelArithmeticMyList *self, GeogebraCommonKernelArithmeticMyList *LHlist);

__attribute__((unused)) static NSString *GeogebraCommonKernelArithmeticMyList_toStringWithGeogebraCommonKernelStringTemplate_withBoolean_(GeogebraCommonKernelArithmeticMyList *self, GeogebraCommonKernelStringTemplate *tpl, jboolean valueMode);

@implementation GeogebraCommonKernelArithmeticMyList

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                           withInt:(jint)size {
  GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_withInt_(self, kernel, size);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                       withBoolean:(jboolean)isFlatList {
  GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_withBoolean_(self, kernel, isFlatList);
  return self;
}

- (void)addListElementWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)arg {
  [((JavaUtilArrayList *) nil_chk(listElements_)) addWithId:arg];
  matrixRows_ = -1;
  matrixCols_ = -1;
}

- (IOSDoubleArray *)toDouble {
  @try {
    IOSDoubleArray *valueArray = [IOSDoubleArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(listElements_)) size]];
    for (jint i = 0; i < valueArray->size_; i++) {
      *IOSDoubleArray_GetRef(valueArray, i) = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([listElements_ getWithInt:i])) evaluateDouble];
    }
    return valueArray;
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (jint)replaceVariablesWithNSString:(NSString *)varName
withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fVar {
  jint replacements = 0;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(listElements_)) size]; i++) {
    id<GeogebraCommonKernelArithmeticExpressionValue> element = [listElements_ getWithInt:i];
    if ([element isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
      replacements += [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(element, [GeogebraCommonKernelArithmeticExpressionNode class])))) replaceVariablesWithNSString:varName withGeogebraCommonKernelArithmeticFunctionVariable:fVar];
    }
    else if ([element isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]]) {
      if ([((NSString *) nil_chk(varName)) isEqual:[((GeogebraCommonKernelArithmeticVariable *) nil_chk(((GeogebraCommonKernelArithmeticVariable *) check_class_cast(element, [GeogebraCommonKernelArithmeticVariable class])))) getNameWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
        [listElements_ setWithInt:i withId:fVar];
        replacements++;
      }
    }
  }
  return replacements;
}

- (void)applyRightWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)operation
      withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)value
                 withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonKernelArithmeticMyList_applyWithGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self, operation, value, YES, tpl);
}

- (void)applyLeftWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)operation
     withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)value
                withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonKernelArithmeticMyList_applyWithGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self, operation, value, NO, tpl);
}

- (void)matrixMultiplyWithGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)LHlist
                      withGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)RHlist {
  GeogebraCommonKernelArithmeticMyList_matrixMultiplyWithGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelArithmeticMyList_(self, LHlist, RHlist);
}

- (void)applyWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)operation
 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)value
                                       withBoolean:(jboolean)right
            withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonKernelArithmeticMyList_applyWithGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(self, operation, value, right, tpl);
}

- (void)setIdentityMatrix {
  GeogebraCommonKernelArithmeticMyList_setIdentityMatrix(self);
}

- (jint)getMatrixRows {
  if (matrixRows_ != -1 && matrixCols_ != -1) return matrixRows_;
  [self isMatrix];
  return matrixRows_;
}

- (jint)getMatrixCols {
  if (matrixRows_ != -1 && matrixCols_ != -1) return matrixCols_;
  [self isMatrix];
  return matrixCols_;
}

- (GeogebraCommonKernelArithmeticMyList *)invert {
  GeogebraCommonUtilGgbMat *g = [new_GeogebraCommonUtilGgbMat_initWithGeogebraCommonKernelArithmeticMyList_(self) autorelease];
  [g inverseImmediate];
  GeogebraCommonKernelArithmeticMyList *gl = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
  [g getMyListWithGeogebraCommonKernelArithmeticMyList:gl withGeogebraCommonKernelKernel:kernel_];
  return [gl getMyList];
}

- (jboolean)isMatrix {
  return GeogebraCommonKernelArithmeticMyList_isMatrixWithGeogebraCommonKernelArithmeticMyList_(self, self);
}

- (void)clear {
  [((JavaUtilArrayList *) nil_chk(listElements_)) clear];
}

+ (jboolean)isEquationWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ex {
  return GeogebraCommonKernelArithmeticMyList_isEquationWithGeogebraCommonKernelArithmeticExpressionValue_(ex);
}

- (jboolean)isMatrixWithGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)LHlist {
  return GeogebraCommonKernelArithmeticMyList_isMatrixWithGeogebraCommonKernelArithmeticMyList_(self, LHlist);
}

+ (id<GeogebraCommonKernelArithmeticExpressionValue>)getCellWithGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)list
                                                                                             withInt:(jint)row
                                                                                             withInt:(jint)col {
  return GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, row, col);
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticMyList_toStringWithGeogebraCommonKernelStringTemplate_withBoolean_(self, tpl, YES);
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *toLaTeXString = [new_JavaLangStringBuilder_init() autorelease];
  if ([self size] == 0) {
    return @"\\left\\{ \\right\\}";
  }
  else if ([self isMatrix]) {
    if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isHTML5Applet]) {
      [toLaTeXString appendWithNSString:@"\\left(\\ggbtable{"];
      for (jint i = 0; i < [self size]; i++) {
        id<GeogebraCommonKernelArithmeticListValue> singleValue = (id<GeogebraCommonKernelArithmeticListValue>) check_protocol_cast([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self getListElementWithInt:i])) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @protocol(GeogebraCommonKernelArithmeticListValue));
        [toLaTeXString appendWithNSString:@"\\ggbtr{"];
        for (jint j = 0; j < [((id<GeogebraCommonKernelArithmeticListValue>) nil_chk(singleValue)) size]; j++) {
          [toLaTeXString appendWithNSString:@"\\ggbtd{"];
          [toLaTeXString appendWithNSString:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([singleValue getListElementWithInt:j])) toLaTeXStringWithBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl]];
          [toLaTeXString appendWithNSString:@"}"];
        }
        [toLaTeXString appendWithNSString:@"}"];
      }
      [toLaTeXString appendWithNSString:@"}\\right)"];
    }
    else {
      [toLaTeXString appendWithNSString:@"\\left(\\begin{array}{"];
      for (jint i = 0; i < matrixCols_; i++) {
        [toLaTeXString appendWithNSString:@"r"];
      }
      [toLaTeXString appendWithNSString:@"}"];
      for (jint i = 0; i < [self size]; i++) {
        id<GeogebraCommonKernelArithmeticListValue> singleValue = (id<GeogebraCommonKernelArithmeticListValue>) check_protocol_cast([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self getListElementWithInt:i])) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @protocol(GeogebraCommonKernelArithmeticListValue));
        if ([((id<GeogebraCommonKernelArithmeticListValue>) nil_chk(singleValue)) size] > 0) {
          [toLaTeXString appendWithNSString:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([singleValue getListElementWithInt:0])) toLaTeXStringWithBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl]];
          for (jint j = 1; j < [singleValue size]; j++) {
            [toLaTeXString appendWithNSString:@"&"];
            [toLaTeXString appendWithNSString:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([singleValue getListElementWithInt:j])) toLaTeXStringWithBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl]];
          }
        }
        [toLaTeXString appendWithNSString:@"\\\\"];
      }
      [toLaTeXString appendWithNSString:@"\\end{array}\\right)"];
    }
  }
  else {
    [toLaTeXString appendWithNSString:@" \\left\\{ "];
    jint lastIndex = [((JavaUtilArrayList *) nil_chk(listElements_)) size] - 1;
    if (lastIndex > -1) {
      for (jint i = 0; i < lastIndex; i++) {
        id<GeogebraCommonKernelArithmeticExpressionValue> exp = [listElements_ getWithInt:i];
        [toLaTeXString appendWithNSString:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) toLaTeXStringWithBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl]];
        [toLaTeXString appendWithNSString:@", "];
      }
      id<GeogebraCommonKernelArithmeticExpressionValue> exp = [listElements_ getWithInt:lastIndex];
      [toLaTeXString appendWithNSString:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) toLaTeXStringWithBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl]];
    }
    [toLaTeXString appendWithNSString:@" \\right\\} "];
  }
  return [toLaTeXString description];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticMyList_toStringWithGeogebraCommonKernelStringTemplate_withBoolean_(self, tpl, NO);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                 withBoolean:(jboolean)valueMode {
  return GeogebraCommonKernelArithmeticMyList_toStringWithGeogebraCommonKernelStringTemplate_withBoolean_(self, tpl, valueMode);
}

- (jint)size {
  return [((JavaUtilArrayList *) nil_chk(listElements_)) size];
}

- (void)resolveVariables {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(listElements_)) size]; i++) {
    id<GeogebraCommonKernelArithmeticExpressionValue> en = [listElements_ getWithInt:i];
    [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(en)) resolveVariables];
  }
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getListElementWithInt:(jint)i {
  return [((JavaUtilArrayList *) nil_chk(listElements_)) getWithInt:i];
}

- (jboolean)isConstant {
  return [((JavaUtilHashSet *) nil_chk([self getVariables])) size] == 0;
}

- (jboolean)isLeaf {
  return YES;
}

- (jboolean)isNumberValue {
  return NO;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel1 {
  jint size = [((JavaUtilArrayList *) nil_chk(listElements_)) size];
  GeogebraCommonKernelArithmeticMyList *c = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_withInt_(kernel1, [self size]) autorelease];
  for (jint i = 0; i < size; i++) {
    [c addListElementWithGeogebraCommonKernelArithmeticExpressionValue:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([listElements_ getWithInt:i])) deepCopyWithGeogebraCommonKernelKernel:kernel1]];
  }
  return c;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)deepCopyExGeoWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel1 {
  jint size = [((JavaUtilArrayList *) nil_chk(listElements_)) size];
  GeogebraCommonKernelArithmeticMyList *c = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_withInt_(kernel1, [self size]) autorelease];
  for (jint i = 0; i < size; i++) {
    [c addListElementWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelArithmeticExpressionNode_copy__WithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_([listElements_ getWithInt:i], kernel1)];
  }
  return c;
}

- (JavaUtilHashSet *)getVariables {
  JavaUtilHashSet *varSet = [new_JavaUtilHashSet_init() autorelease];
  jint size = [((JavaUtilArrayList *) nil_chk(listElements_)) size];
  for (jint i = 0; i < size; i++) {
    JavaUtilHashSet *s = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([listElements_ getWithInt:i])) getVariables];
    if (s != nil) [varSet addAllWithJavaUtilCollection:s];
  }
  return varSet;
}

- (jboolean)evaluatesToList {
  return YES;
}

- (jboolean)containsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

- (GeogebraCommonKernelArithmeticMyList *)getMyList {
  if ([self isInTree]) {
    return (GeogebraCommonKernelArithmeticMyList *) check_class_cast([self deepCopyWithGeogebraCommonKernelKernel:kernel_], [GeogebraCommonKernelArithmeticMyList class]);
  }
  return self;
}

+ (jboolean)isElementOfWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)a
                                withGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)myList {
  return GeogebraCommonKernelArithmeticMyList_isElementOfWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticMyList_(a, myList);
}

+ (jboolean)listContainsWithGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)list1
                        withGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)list2
                          withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticMyList_listContainsWithGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelStringTemplate_(list1, list2, tpl);
}

+ (jboolean)listContainsStrictWithGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)list1
                              withGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)list2
                                withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticMyList_listContainsStrictWithGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelStringTemplate_(list1, list2, tpl);
}

+ (GeogebraCommonKernelArithmeticMyList *)setDifferenceWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                             withGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)list1
                                             withGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)list2 {
  return GeogebraCommonKernelArithmeticMyList_setDifferenceWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelArithmeticMyList_(kernel, list1, list2);
}

- (NSString *)toOutputValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (void)vectorProductWithGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)list {
  id<GeogebraCommonKernelArithmeticExpressionValue> ax = [self getListElementWithInt:0];
  id<GeogebraCommonKernelArithmeticExpressionValue> ay = [self getListElementWithInt:1];
  id<GeogebraCommonKernelArithmeticExpressionValue> bx = [((GeogebraCommonKernelArithmeticMyList *) nil_chk(list)) getListElementWithInt:0];
  id<GeogebraCommonKernelArithmeticExpressionValue> by = [list getListElementWithInt:1];
  GeogebraCommonKernelArithmeticExpressionNode *en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ax, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), by) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *en2 = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ay, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), bx) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *x, *y, *z;
  if ([list size] == 2 || [self size] == 2) {
    [((JavaUtilArrayList *) nil_chk(listElements_)) addWithInt:2 withId:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, en, GeogebraCommonPluginOperationEnum_get_MINUS(), en2) autorelease]];
    [listElements_ setWithInt:0 withId:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 0.0) autorelease], GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease]];
    [listElements_ setWithInt:1 withId:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 0.0) autorelease], GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease]];
    return;
  }
  z = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, en, GeogebraCommonPluginOperationEnum_get_MINUS(), en2) autorelease];
  id<GeogebraCommonKernelArithmeticExpressionValue> az = [self getListElementWithInt:2];
  id<GeogebraCommonKernelArithmeticExpressionValue> bz = [list getListElementWithInt:2];
  en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ay, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), bz) autorelease];
  en2 = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, az, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), by) autorelease];
  x = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, en, GeogebraCommonPluginOperationEnum_get_MINUS(), en2) autorelease];
  en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, az, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), bx) autorelease];
  en2 = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ax, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), bz) autorelease];
  y = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, en, GeogebraCommonPluginOperationEnum_get_MINUS(), en2) autorelease];
  [((JavaUtilArrayList *) nil_chk(listElements_)) setWithInt:0 withId:x];
  [listElements_ setWithInt:1 withId:y];
  [listElements_ setWithInt:2 withId:z];
}

- (GeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (jboolean)isDefined {
  return isDefined__;
}

- (void)replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  for (jint i = 0; i < [self size]; i++) {
    id<GeogebraCommonKernelArithmeticExpressionValue> insert = [self getListElementWithInt:i];
    if ([GeogebraCommonKernelArithmeticReplaceChildrenByValues_class_() isInstance:insert]) [((id<GeogebraCommonKernelArithmeticReplaceChildrenByValues>) nil_chk(((id<GeogebraCommonKernelArithmeticReplaceChildrenByValues>) check_protocol_cast(insert, @protocol(GeogebraCommonKernelArithmeticReplaceChildrenByValues))))) replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (GeogebraCommonKernelArithmeticMyList *)getCopyWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel2 {
  GeogebraCommonKernelArithmeticMyList *ret = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_withInt_(kernel_, [self size]) autorelease];
  for (jint i = 0; i < [self size]; i++) {
    [ret->listElements_ addWithId:GeogebraCommonKernelArithmeticExpressionNode_copy__WithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_([((JavaUtilArrayList *) nil_chk(listElements_)) getWithInt:i], kernel2)];
  }
  return ret;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)traverseWithGeogebraCommonKernelArithmeticTraversing:(id<GeogebraCommonKernelArithmeticTraversing>)t {
  id<GeogebraCommonKernelArithmeticExpressionValue> v = [((id<GeogebraCommonKernelArithmeticTraversing>) nil_chk(t)) processWithGeogebraCommonKernelArithmeticExpressionValue:self];
  for (jint i = 0; i < [self size]; i++) {
    id<GeogebraCommonKernelArithmeticExpressionValue> insert = [self getListElementWithInt:i];
    [((JavaUtilArrayList *) nil_chk(listElements_)) setWithInt:i withId:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(insert)) traverseWithGeogebraCommonKernelArithmeticTraversing:t]];
  }
  return v;
}

- (jboolean)inspectWithGeogebraCommonKernelArithmeticInspecting:(id<GeogebraCommonKernelArithmeticInspecting>)t {
  if ([((id<GeogebraCommonKernelArithmeticInspecting>) nil_chk(t)) checkWithGeogebraCommonKernelArithmeticExpressionValue:self]) return YES;
  for (jint i = 0; i < [self size]; i++) {
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(([self getListElementWithInt:i]))) inspectWithGeogebraCommonKernelArithmeticInspecting:t]) {
      return YES;
    }
  }
  return NO;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getItemWithInt:(jint)i {
  return [((JavaUtilArrayList *) nil_chk(listElements_)) getWithInt:i];
}

- (jint)getLength {
  return [((JavaUtilArrayList *) nil_chk(listElements_)) size];
}

- (GeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self) autorelease];
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(listElements_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "MyList", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelKernel:withInt:", "MyList", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelKernel:withBoolean:", "MyList", NULL, 0x1, NULL, NULL },
    { "addListElementWithGeogebraCommonKernelArithmeticExpressionValue:", "addListElement", "V", 0x1, NULL, NULL },
    { "toDouble", NULL, "[D", 0x1, NULL, NULL },
    { "replaceVariablesWithNSString:withGeogebraCommonKernelArithmeticFunctionVariable:", "replaceVariables", "I", 0x1, NULL, NULL },
    { "applyRightWithGeogebraCommonPluginOperationEnum:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelStringTemplate:", "applyRight", "V", 0x11, NULL, NULL },
    { "applyLeftWithGeogebraCommonPluginOperationEnum:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelStringTemplate:", "applyLeft", "V", 0x11, NULL, NULL },
    { "matrixMultiplyWithGeogebraCommonKernelArithmeticMyList:withGeogebraCommonKernelArithmeticMyList:", "matrixMultiply", "V", 0x12, NULL, NULL },
    { "applyWithGeogebraCommonPluginOperationEnum:withGeogebraCommonKernelArithmeticExpressionValue:withBoolean:withGeogebraCommonKernelStringTemplate:", "apply", "V", 0x2, NULL, NULL },
    { "setIdentityMatrix", NULL, "V", 0x2, NULL, NULL },
    { "getMatrixRows", NULL, "I", 0x1, NULL, NULL },
    { "getMatrixCols", NULL, "I", 0x1, NULL, NULL },
    { "invert", NULL, "Lgeogebra.common.kernel.arithmetic.MyList;", 0x1, NULL, NULL },
    { "isMatrix", NULL, "Z", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "isEquationWithGeogebraCommonKernelArithmeticExpressionValue:", "isEquation", "Z", 0xa, NULL, NULL },
    { "isMatrixWithGeogebraCommonKernelArithmeticMyList:", "isMatrix", "Z", 0x2, NULL, NULL },
    { "getCellWithGeogebraCommonKernelArithmeticMyList:withInt:withInt:", "getCell", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x9, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:withBoolean:", "toString", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "getListElementWithInt:", "getListElement", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "deepCopyWithGeogebraCommonKernelKernel:", "deepCopy", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "deepCopyExGeoWithGeogebraCommonKernelKernel:", "deepCopyExGeo", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "evaluatesToList", NULL, "Z", 0x1, NULL, NULL },
    { "containsWithGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "getMyList", NULL, "Lgeogebra.common.kernel.arithmetic.MyList;", 0x1, NULL, NULL },
    { "isElementOfWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticMyList:", "isElementOf", "Z", 0x9, NULL, NULL },
    { "listContainsWithGeogebraCommonKernelArithmeticMyList:withGeogebraCommonKernelArithmeticMyList:withGeogebraCommonKernelStringTemplate:", "listContains", "Z", 0x9, NULL, NULL },
    { "listContainsStrictWithGeogebraCommonKernelArithmeticMyList:withGeogebraCommonKernelArithmeticMyList:withGeogebraCommonKernelStringTemplate:", "listContainsStrict", "Z", 0x9, NULL, NULL },
    { "setDifferenceWithGeogebraCommonKernelKernel:withGeogebraCommonKernelArithmeticMyList:withGeogebraCommonKernelArithmeticMyList:", "setDifference", "Lgeogebra.common.kernel.arithmetic.MyList;", 0x9, NULL, NULL },
    { "toOutputValueStringWithGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "vectorProductWithGeogebraCommonKernelArithmeticMyList:", "vectorProduct", "V", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:", "replaceChildrenByValues", "V", 0x1, NULL, NULL },
    { "getCopyWithGeogebraCommonKernelKernel:", "getCopy", "Lgeogebra.common.kernel.arithmetic.MyList;", 0x1, NULL, NULL },
    { "traverseWithGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "inspectWithGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x1, NULL, NULL },
    { "getItemWithInt:", "getItem", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getLength", NULL, "I", 0x1, NULL, NULL },
    { "wrap", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "matrixRows_", NULL, 0x2, "I", NULL, NULL,  },
    { "matrixCols_", NULL, 0x2, "I", NULL, NULL,  },
    { "listElements_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/arithmetic/ExpressionValue;>;",  },
    { "isDefined__", "isDefined", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticMyList = { 2, "MyList", "geogebra.common.kernel.arithmetic", NULL, 0x1, 50, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticMyList;
}

@end

void GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticMyList *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_withInt_(self, kernel, 20);
}

GeogebraCommonKernelArithmeticMyList *new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticMyList *self = [GeogebraCommonKernelArithmeticMyList alloc];
  GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_withInt_(GeogebraCommonKernelArithmeticMyList *self, GeogebraCommonKernelKernel *kernel, jint size) {
  GeogebraCommonKernelArithmeticValidExpression_init(self);
  self->matrixRows_ = -1;
  self->matrixCols_ = -1;
  self->isDefined__ = YES;
  GeogebraCommonKernelArithmeticMyList_set_kernel_(self, kernel);
  GeogebraCommonKernelArithmeticMyList_setAndConsume_listElements_(self, new_JavaUtilArrayList_initWithInt_(size));
}

GeogebraCommonKernelArithmeticMyList *new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_withInt_(GeogebraCommonKernelKernel *kernel, jint size) {
  GeogebraCommonKernelArithmeticMyList *self = [GeogebraCommonKernelArithmeticMyList alloc];
  GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_withInt_(self, kernel, size);
  return self;
}

void GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_withBoolean_(GeogebraCommonKernelArithmeticMyList *self, GeogebraCommonKernelKernel *kernel, jboolean isFlatList) {
  GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(self, kernel);
  if (isFlatList) {
    self->matrixRows_ = self->matrixCols_ = 0;
  }
}

GeogebraCommonKernelArithmeticMyList *new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_withBoolean_(GeogebraCommonKernelKernel *kernel, jboolean isFlatList) {
  GeogebraCommonKernelArithmeticMyList *self = [GeogebraCommonKernelArithmeticMyList alloc];
  GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_withBoolean_(self, kernel, isFlatList);
  return self;
}

void GeogebraCommonKernelArithmeticMyList_matrixMultiplyWithGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelArithmeticMyList_(GeogebraCommonKernelArithmeticMyList *self, GeogebraCommonKernelArithmeticMyList *LHlist, GeogebraCommonKernelArithmeticMyList *RHlist) {
  jint LHcols = [((GeogebraCommonKernelArithmeticMyList *) nil_chk(LHlist)) getMatrixCols], LHrows = [LHlist getMatrixRows];
  jint RHcols = [((GeogebraCommonKernelArithmeticMyList *) nil_chk(RHlist)) getMatrixCols];
  GeogebraCommonKernelArithmeticExpressionNode *totalNode;
  GeogebraCommonKernelArithmeticExpressionNode *tempNode;
  [((JavaUtilArrayList *) nil_chk(self->listElements_)) clear];
  if (LHcols != [RHlist getMatrixRows]) {
    self->isDefined__ = NO;
    return;
  }
  self->isDefined__ = YES;
  for (jint row = 0; row < LHrows; row++) {
    GeogebraCommonKernelArithmeticMyList *col1 = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
    for (jint col = 0; col < RHcols; col++) {
      id<GeogebraCommonKernelArithmeticExpressionValue> totalVal = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0.0) autorelease]) autorelease];
      for (jint i = 0; i < LHcols; i++) {
        id<GeogebraCommonKernelArithmeticExpressionValue> leftV = GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(LHlist, i, row);
        id<GeogebraCommonKernelArithmeticExpressionValue> rightV = GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(RHlist, col, i);
        tempNode = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, leftV, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), rightV) autorelease];
        id<GeogebraCommonKernelArithmeticExpressionValue> operationResult = [tempNode evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
        totalNode = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, totalVal, GeogebraCommonPluginOperationEnum_get_PLUS(), operationResult) autorelease];
        totalVal = [totalNode evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      }
      tempNode = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, totalVal) autorelease];
      [col1 addListElementWithGeogebraCommonKernelArithmeticExpressionValue:tempNode];
    }
    GeogebraCommonKernelArithmeticExpressionNode *col1a = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, col1) autorelease];
    [self->listElements_ addWithId:col1a];
  }
  self->matrixRows_ = -1;
  self->matrixCols_ = -1;
}

void GeogebraCommonKernelArithmeticMyList_applyWithGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticMyList *self, GeogebraCommonPluginOperationEnum *operation, id<GeogebraCommonKernelArithmeticExpressionValue> value, jboolean right, GeogebraCommonKernelStringTemplate *tpl) {
  jint size = [self size];
  if (right && operation == GeogebraCommonPluginOperationEnum_get_POWER() && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:value] && [self isMatrix]) {
    jdouble power = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(value, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    if (!GeogebraCommonKernelKernel_isIntegerWithDouble_(power)) {
      [((JavaUtilArrayList *) nil_chk(self->listElements_)) clear];
      return;
    }
    power = JavaLangMath_roundWithDouble_(power);
    if (power == 0) {
      GeogebraCommonKernelArithmeticMyList_setIdentityMatrix(self);
    }
    if (power < 0) {
      GeogebraCommonKernelArithmeticMyList_set_listElements_(self, ((GeogebraCommonKernelArithmeticMyList *) nil_chk([self invert]))->listElements_);
      power *= -1;
      if (power == 1) {
        GeogebraCommonKernelArithmeticMyList *RHlist = (GeogebraCommonKernelArithmeticMyList *) check_class_cast([self deepCopyWithGeogebraCommonKernelKernel:self->kernel_], [GeogebraCommonKernelArithmeticMyList class]);
        GeogebraCommonKernelArithmeticMyList_setIdentityMatrix(nil_chk(RHlist));
        GeogebraCommonKernelArithmeticMyList_matrixMultiplyWithGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelArithmeticMyList_(self, (GeogebraCommonKernelArithmeticMyList *) check_class_cast([self deepCopyWithGeogebraCommonKernelKernel:self->kernel_], [GeogebraCommonKernelArithmeticMyList class]), RHlist);
        return;
      }
    }
    if (power != 1) {
      GeogebraCommonKernelArithmeticMyList *LHlist, *RHlist;
      RHlist = (GeogebraCommonKernelArithmeticMyList *) check_class_cast([self deepCopyWithGeogebraCommonKernelKernel:self->kernel_], [GeogebraCommonKernelArithmeticMyList class]);
      while (power > 1.0) {
        LHlist = (GeogebraCommonKernelArithmeticMyList *) check_class_cast([self deepCopyWithGeogebraCommonKernelKernel:self->kernel_], [GeogebraCommonKernelArithmeticMyList class]);
        GeogebraCommonKernelArithmeticMyList_matrixMultiplyWithGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelArithmeticMyList_(self, LHlist, RHlist);
        power--;
      }
      return;
    }
  }
  GeogebraCommonKernelArithmeticMyList *valueList = [GeogebraCommonKernelArithmeticListValue_class_() isInstance:value] ? [((id<GeogebraCommonKernelArithmeticListValue>) nil_chk(((id<GeogebraCommonKernelArithmeticListValue>) check_protocol_cast(value, @protocol(GeogebraCommonKernelArithmeticListValue))))) getMyList] : nil;
  if (operation == GeogebraCommonPluginOperationEnum_get_MULTIPLY() && valueList != nil) {
    GeogebraCommonKernelArithmeticMyList *LHlist, *RHlist;
    if (!right) {
      LHlist = valueList;
      RHlist = (GeogebraCommonKernelArithmeticMyList *) check_class_cast([self deepCopyWithGeogebraCommonKernelKernel:self->kernel_], [GeogebraCommonKernelArithmeticMyList class]);
    }
    else {
      RHlist = valueList;
      LHlist = (GeogebraCommonKernelArithmeticMyList *) check_class_cast([self deepCopyWithGeogebraCommonKernelKernel:self->kernel_], [GeogebraCommonKernelArithmeticMyList class]);
    }
    jboolean isMatrix = ([((GeogebraCommonKernelArithmeticMyList *) nil_chk(LHlist)) isMatrix] && [((GeogebraCommonKernelArithmeticMyList *) nil_chk(RHlist)) isMatrix]);
    if (isMatrix) {
      GeogebraCommonKernelArithmeticMyList_matrixMultiplyWithGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelArithmeticMyList_(self, LHlist, RHlist);
      return;
    }
  }
  self->matrixRows_ = -1;
  self->matrixCols_ = -1;
  if (size == 0 || (valueList != nil && size != [valueList size])) {
    [((JavaUtilArrayList *) nil_chk(self->listElements_)) clear];
    return;
  }
  GeogebraCommonKernelArithmeticExpressionNode *tempNode = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [((JavaUtilArrayList *) nil_chk(self->listElements_)) getWithInt:0]) autorelease];
  [tempNode setOperationWithGeogebraCommonPluginOperationEnum:operation];
  jboolean b = [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) isSuppressLabelsActive];
  [((GeogebraCommonKernelConstruction *) nil_chk([self->kernel_ getConstruction])) setSuppressLabelCreationWithBoolean:YES];
  for (jint i = 0; i < size; i++) {
    id<GeogebraCommonKernelArithmeticExpressionValue> singleValue = valueList == nil ? [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(value)) deepCopyWithGeogebraCommonKernelKernel:self->kernel_] : [valueList getListElementWithInt:i];
    if (right) {
      [tempNode setLeftWithGeogebraCommonKernelArithmeticExpressionValue:[self->listElements_ getWithInt:i]];
      [tempNode setRightWithGeogebraCommonKernelArithmeticExpressionValue:singleValue];
    }
    else {
      [tempNode setLeftWithGeogebraCommonKernelArithmeticExpressionValue:singleValue];
      [tempNode setRightWithGeogebraCommonKernelArithmeticExpressionValue:[self->listElements_ getWithInt:i]];
    }
    id<GeogebraCommonKernelArithmeticExpressionValue> operationResult = [tempNode evaluateWithGeogebraCommonKernelStringTemplate:tpl];
    if (![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(operationResult)) isExpressionNode]) {
      operationResult = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, operationResult) autorelease];
    }
    [self->listElements_ setWithInt:i withId:operationResult];
  }
  [((GeogebraCommonKernelConstruction *) nil_chk([self->kernel_ getConstruction])) setSuppressLabelCreationWithBoolean:b];
}

void GeogebraCommonKernelArithmeticMyList_setIdentityMatrix(GeogebraCommonKernelArithmeticMyList *self) {
  [self isMatrix];
  [((JavaUtilArrayList *) nil_chk(self->listElements_)) clear];
  if (self->matrixRows_ == self->matrixCols_) for (jint row = 0; row < self->matrixRows_; row++) {
    GeogebraCommonKernelArithmeticMyList *col1 = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
    for (jint col = 0; col < self->matrixCols_; col++) {
      GeogebraCommonKernelArithmeticExpressionNode *md = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, row == col ? 1 : 0) autorelease]) autorelease];
      [col1 addListElementWithGeogebraCommonKernelArithmeticExpressionValue:md];
    }
    GeogebraCommonKernelArithmeticExpressionNode *col1a = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, col1) autorelease];
    [self->listElements_ addWithId:col1a];
  }
}

jboolean GeogebraCommonKernelArithmeticMyList_isEquationWithGeogebraCommonKernelArithmeticExpressionValue_(id<GeogebraCommonKernelArithmeticExpressionValue> ex) {
  GeogebraCommonKernelArithmeticMyList_initialize();
  if ([ex isKindOfClass:[GeogebraCommonKernelArithmeticEquation class]] || ([ex isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]] && [[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ex, [GeogebraCommonKernelArithmeticExpressionNode class])))) getLeft] isKindOfClass:[GeogebraCommonKernelArithmeticEquation class]])) return YES;
  return NO;
}

jboolean GeogebraCommonKernelArithmeticMyList_isMatrixWithGeogebraCommonKernelArithmeticMyList_(GeogebraCommonKernelArithmeticMyList *self, GeogebraCommonKernelArithmeticMyList *LHlist) {
  if (self->matrixRows_ > 0 && self->matrixCols_ > 0) return YES;
  if (self->matrixRows_ == 0 && self->matrixCols_ == 0) return NO;
  @try {
    jboolean isMatrix = YES;
    jint LHrows = [((GeogebraCommonKernelArithmeticMyList *) nil_chk(LHlist)) size], LHcols = 0;
    if (GeogebraCommonKernelArithmeticMyList_isEquationWithGeogebraCommonKernelArithmeticExpressionValue_([LHlist getListElementWithInt:0])) return NO;
    id<GeogebraCommonKernelArithmeticExpressionValue> singleValue = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([LHlist getListElementWithInt:0])) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if (singleValue == nil) {
      self->matrixRows_ = self->matrixCols_ = 0;
      return NO;
    }
    if ([GeogebraCommonKernelArithmeticListValue_class_() isInstance:singleValue]) {
      LHcols = [((GeogebraCommonKernelArithmeticMyList *) nil_chk([((id<GeogebraCommonKernelArithmeticListValue>) nil_chk(((id<GeogebraCommonKernelArithmeticListValue>) check_protocol_cast(singleValue, @protocol(GeogebraCommonKernelArithmeticListValue))))) getMyList])) size];
      if (LHcols > 0 && GeogebraCommonKernelArithmeticMyList_isEquationWithGeogebraCommonKernelArithmeticExpressionValue_([((id<GeogebraCommonKernelArithmeticListValue>) nil_chk(((id<GeogebraCommonKernelArithmeticListValue>) check_protocol_cast(singleValue, @protocol(GeogebraCommonKernelArithmeticListValue))))) getListElementWithInt:0])) return NO;
      if (LHrows > 1) for (jint i = 1; i < LHrows; i++) {
        if (GeogebraCommonKernelArithmeticMyList_isEquationWithGeogebraCommonKernelArithmeticExpressionValue_([LHlist getListElementWithInt:i])) return NO;
        singleValue = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([LHlist getListElementWithInt:i])) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
        if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(singleValue)) evaluatesToList]) {
          GeogebraCommonKernelArithmeticMyList *list = [((id<GeogebraCommonKernelArithmeticListValue>) check_protocol_cast(singleValue, @protocol(GeogebraCommonKernelArithmeticListValue))) getMyList];
          if ([((GeogebraCommonKernelArithmeticMyList *) nil_chk(list)) size] != LHcols) isMatrix = NO;
          else if (([list size] > 0) && GeogebraCommonKernelArithmeticMyList_isEquationWithGeogebraCommonKernelArithmeticExpressionValue_([list getListElementWithInt:0])) isMatrix = NO;
        }
        else isMatrix = NO;
      }
    }
    else isMatrix = NO;
    if (isMatrix) {
      self->matrixCols_ = LHcols;
      self->matrixRows_ = LHrows;
    }
    else {
      self->matrixCols_ = 0;
      self->matrixRows_ = 0;
    }
    return isMatrix;
  }
  @catch (JavaLangThrowable *e) {
    self->matrixRows_ = self->matrixCols_ = 0;
    return NO;
  }
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(GeogebraCommonKernelArithmeticMyList *list, jint row, jint col) {
  GeogebraCommonKernelArithmeticMyList_initialize();
  id<GeogebraCommonKernelArithmeticExpressionValue> singleValue = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticMyList *) nil_chk(list)) getListElementWithInt:col])) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  if ([GeogebraCommonKernelArithmeticListValue_class_() isInstance:singleValue]) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ret = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(([((GeogebraCommonKernelArithmeticMyList *) nil_chk([((id<GeogebraCommonKernelArithmeticListValue>) nil_chk(((id<GeogebraCommonKernelArithmeticListValue>) check_protocol_cast(singleValue, @protocol(GeogebraCommonKernelArithmeticListValue))))) getMyList])) getListElementWithInt:row]))) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    return ret;
  }
  return nil;
}

NSString *GeogebraCommonKernelArithmeticMyList_toStringWithGeogebraCommonKernelStringTemplate_withBoolean_(GeogebraCommonKernelArithmeticMyList *self, GeogebraCommonKernelStringTemplate *tpl, jboolean valueMode) {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    [sb appendWithNSString:@"\\{"];
  }
  else [sb appendWithNSString:@"{"];
  jint lastIndex = [((JavaUtilArrayList *) nil_chk(self->listElements_)) size] - 1;
  if (lastIndex > -1) {
    for (jint i = 0; i < lastIndex; i++) {
      id<GeogebraCommonKernelArithmeticExpressionValue> exp = [self->listElements_ getWithInt:i];
      [sb appendWithNSString:valueMode ? [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) toOutputValueStringWithGeogebraCommonKernelStringTemplate:tpl] : [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
      [sb appendWithNSString:@", "];
    }
    id<GeogebraCommonKernelArithmeticExpressionValue> exp = [self->listElements_ getWithInt:lastIndex];
    [sb appendWithNSString:valueMode ? [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) toOutputValueStringWithGeogebraCommonKernelStringTemplate:tpl] : [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
  }
  if ([tpl hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    [sb appendWithNSString:@"\\}"];
  }
  else [sb appendWithNSString:@"}"];
  return [sb description];
}

jboolean GeogebraCommonKernelArithmeticMyList_isElementOfWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticMyList_(id<GeogebraCommonKernelArithmeticExpressionValue> a, GeogebraCommonKernelArithmeticMyList *myList) {
  GeogebraCommonKernelArithmeticMyList_initialize();
  for (jint i = 0; i < [((GeogebraCommonKernelArithmeticMyList *) nil_chk(myList)) size]; i++) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ev = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([myList getListElementWithInt:i])) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if (ev == nil) {
      GeogebraCommonMainApp_debugWithNSString_([[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([myList getListElementWithInt:i])) getClass] getName]);
      continue;
    }
    if (GeogebraCommonKernelArithmeticExpressionNode_isEqualWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(a, ev)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelArithmeticMyList_listContainsWithGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticMyList *list1, GeogebraCommonKernelArithmeticMyList *list2, GeogebraCommonKernelStringTemplate *tpl) {
  GeogebraCommonKernelArithmeticMyList_initialize();
  if ([((GeogebraCommonKernelArithmeticMyList *) nil_chk(list2)) size] == 0) {
    return YES;
  }
  for (jint i = 0; i < [list2 size]; i++) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ev2 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list2 getListElementWithInt:i])) evaluateWithGeogebraCommonKernelStringTemplate:tpl];
    jboolean hasEqualMember = NO;
    for (jint j = 0; j < [((GeogebraCommonKernelArithmeticMyList *) nil_chk(list1)) size]; j++) {
      id<GeogebraCommonKernelArithmeticExpressionValue> ev1 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list1 getListElementWithInt:j])) evaluateWithGeogebraCommonKernelStringTemplate:tpl];
      if (GeogebraCommonKernelArithmeticExpressionNode_isEqualWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(ev1, ev2)) {
        hasEqualMember = YES;
        break;
      }
    }
    if (!hasEqualMember) return NO;
  }
  return YES;
}

jboolean GeogebraCommonKernelArithmeticMyList_listContainsStrictWithGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticMyList *list1, GeogebraCommonKernelArithmeticMyList *list2, GeogebraCommonKernelStringTemplate *tpl) {
  GeogebraCommonKernelArithmeticMyList_initialize();
  if ([((GeogebraCommonKernelArithmeticMyList *) nil_chk(list2)) size] == 0) {
    return ([((GeogebraCommonKernelArithmeticMyList *) nil_chk(list1)) size] != 0);
  }
  for (jint i = 0; i < [list2 size]; i++) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ev2 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list2 getListElementWithInt:i])) evaluateWithGeogebraCommonKernelStringTemplate:tpl];
    jboolean hasEqualMember = NO;
    for (jint j = 0; j < [((GeogebraCommonKernelArithmeticMyList *) nil_chk(list1)) size]; j++) {
      id<GeogebraCommonKernelArithmeticExpressionValue> ev1 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list1 getListElementWithInt:j])) evaluateWithGeogebraCommonKernelStringTemplate:tpl];
      if (GeogebraCommonKernelArithmeticExpressionNode_isEqualWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(ev1, ev2)) {
        hasEqualMember = YES;
        break;
      }
    }
    if (!hasEqualMember) return NO;
  }
  for (jint i = 0; i < [((GeogebraCommonKernelArithmeticMyList *) nil_chk(list1)) size]; i++) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ev1 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list1 getListElementWithInt:i])) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    jboolean hasEqualMember = NO;
    for (jint j = 0; j < [list2 size]; j++) {
      id<GeogebraCommonKernelArithmeticExpressionValue> ev2 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list2 getListElementWithInt:j])) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      if (GeogebraCommonKernelArithmeticExpressionNode_isEqualWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(ev1, ev2)) {
        hasEqualMember = YES;
        break;
      }
    }
    if (!hasEqualMember) return YES;
  }
  return NO;
}

GeogebraCommonKernelArithmeticMyList *GeogebraCommonKernelArithmeticMyList_setDifferenceWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelArithmeticMyList_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelArithmeticMyList *list1, GeogebraCommonKernelArithmeticMyList *list2) {
  GeogebraCommonKernelArithmeticMyList_initialize();
  if ([((GeogebraCommonKernelArithmeticMyList *) nil_chk(list2)) size] == 0) return list1;
  GeogebraCommonKernelArithmeticMyList *ret = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(kernel) autorelease];
  if ([((GeogebraCommonKernelArithmeticMyList *) nil_chk(list1)) size] == 0) return ret;
  for (jint i = 0; i < [list1 size]; i++) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ev0 = [list1 getListElementWithInt:i];
    id<GeogebraCommonKernelArithmeticExpressionValue> ev1 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev0)) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    jboolean addToList = YES;
    for (jint j = 0; j < [list2 size]; j++) {
      id<GeogebraCommonKernelArithmeticExpressionValue> ev2 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list2 getListElementWithInt:j])) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      if (GeogebraCommonKernelArithmeticExpressionNode_isEqualWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(ev1, ev2)) {
        addToList = NO;
        break;
      }
    }
    if (addToList) [ret addListElementWithGeogebraCommonKernelArithmeticExpressionValue:ev0];
  }
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticMyList)
