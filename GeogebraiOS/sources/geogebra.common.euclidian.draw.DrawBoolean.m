//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawBoolean.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GDimension.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianStatic.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/draw/DrawBoolean.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"

@interface GeogebraCommonEuclidianDrawDrawBoolean () {
 @public
  GeogebraCommonKernelGeosGeoBoolean *geoBool_;
  jboolean isVisible_;
  NSString *oldCaption_;
  GeogebraCommonAwtGPoint *textSize_;
  GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon *checkBoxIcon_;
}

- (void)updateLabel;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawBoolean, geoBool_, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawBoolean, oldCaption_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawBoolean, textSize_, GeogebraCommonAwtGPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawBoolean, checkBoxIcon_, GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawBoolean_update(GeogebraCommonEuclidianDrawDrawBoolean *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawBoolean_updateLabel(GeogebraCommonEuclidianDrawDrawBoolean *self);

@interface GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon () {
 @public
  GeogebraCommonEuclidianEuclidianView *ev_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon, ev_, GeogebraCommonEuclidianEuclidianView *)

@implementation GeogebraCommonEuclidianDrawDrawBoolean

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                      withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)geoBool {
  GeogebraCommonEuclidianDrawDrawBoolean_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoBoolean_(self, view, geoBool);
  return self;
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawBoolean_update(self);
}

- (void)updateLabel {
  GeogebraCommonEuclidianDrawDrawBoolean_updateLabel(self);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    jint size = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBooleanSize];
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithGeogebraCommonAwtGFont:[view_ getFontPoint]];
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:GeogebraCommonEuclidianEuclidianStatic_getDefaultStroke()];
    [((GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon *) nil_chk(checkBoxIcon_)) paintIconWithBoolean:[((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(geoBool_)) getBoolean] withBoolean:[geoBool_ doHighlighting] withGeogebraCommonAwtGGraphics2D:g2 withInt:geoBool_->labelOffsetX_ + 5 withInt:geoBool_->labelOffsetY_ + 5];
    [g2 setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getObjectColor]];
    GeogebraCommonEuclidianDrawDrawBoolean_set_textSize_(self, GeogebraCommonEuclidianEuclidianStatic_drawIndexedStringWithGeogebraCommonMainApp_withGeogebraCommonAwtGGraphics2D_withNSString_withFloat_withFloat_withBoolean_withBoolean_([view_ getApplication], g2, labelDesc_, geoBool_->labelOffsetX_ + size + 9, geoBool_->labelOffsetY_ + (size + 9) / 2 + 5, NO, NO));
    GeogebraCommonEuclidianDrawDrawBoolean_updateLabel(self);
  }
}

- (void)remove {
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return [super hitLabelWithInt:x withInt:y];
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithGeogebraCommonAwtGRectangle2D:labelRectangle_];
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) intersectsWithGeogebraCommonAwtGRectangle2D:labelRectangle_];
}

- (jboolean)hitLabelWithInt:(jint)x
                    withInt:(jint)y {
  return NO;
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (void)dealloc {
  RELEASE_(geoBool_);
  RELEASE_(oldCaption_);
  RELEASE_(textSize_);
  RELEASE_(checkBoxIcon_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoBoolean:", "DrawBoolean", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "updateLabel", NULL, "V", 0x2, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "remove", NULL, "V", 0x11, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "hitLabelWithInt:withInt:", "hitLabel", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoBool_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "oldCaption_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "textSize_", NULL, 0x2, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "checkBoxIcon_", NULL, 0x2, "Lgeogebra.common.euclidian.draw.DrawBoolean$CheckBoxIcon;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.euclidian.draw.DrawBoolean$CheckBoxIcon;"};
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawBoolean = { 2, "DrawBoolean", "geogebra.common.euclidian.draw", NULL, 0x11, 11, methods, 5, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawBoolean;
}

@end

void GeogebraCommonEuclidianDrawDrawBoolean_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonEuclidianDrawDrawBoolean *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoBoolean *geoBool) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawBoolean_setAndConsume_textSize_(self, new_GeogebraCommonAwtGPoint_initWithInt_withInt_(0, 0));
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawBoolean_set_geoBool_(self, geoBool);
  GeogebraCommonEuclidianDrawable_set_geo_(self, geoBool);
  GeogebraCommonEuclidianDrawDrawBoolean_setAndConsume_checkBoxIcon_(self, new_GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon_initWithGeogebraCommonEuclidianEuclidianView_(view));
  GeogebraCommonEuclidianDrawDrawBoolean_update(self);
}

GeogebraCommonEuclidianDrawDrawBoolean *new_GeogebraCommonEuclidianDrawDrawBoolean_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoBoolean *geoBool) {
  GeogebraCommonEuclidianDrawDrawBoolean *self = [GeogebraCommonEuclidianDrawDrawBoolean alloc];
  GeogebraCommonEuclidianDrawDrawBoolean_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoBoolean_(self, view, geoBool);
  return self;
}

void GeogebraCommonEuclidianDrawDrawBoolean_update(GeogebraCommonEuclidianDrawDrawBoolean *self) {
  self->isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) {
    return;
  }
  [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:self->geoBool_];
  if ([self->geo_ isLabelVisible]) {
    NSString *caption = [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->geoBool_)) getCaptionWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if (![((NSString *) nil_chk(caption)) isEqual:self->oldCaption_]) {
      GeogebraCommonEuclidianDrawDrawBoolean_set_oldCaption_(self, caption);
      GeogebraCommonEuclidianDrawable_set_labelDesc_(self, caption);
    }
  }
  else {
    GeogebraCommonEuclidianDrawDrawBoolean_set_oldCaption_(self, @"");
    GeogebraCommonEuclidianDrawable_set_labelDesc_(self, @"");
  }
  GeogebraCommonEuclidianDrawDrawBoolean_updateLabel(self);
}

void GeogebraCommonEuclidianDrawDrawBoolean_updateLabel(GeogebraCommonEuclidianDrawDrawBoolean *self) {
  self->xLabel_ = ((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_))->labelOffsetX_;
  self->yLabel_ = self->geo_->labelOffsetY_;
  jint size = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getBooleanSize];
  GeogebraCommonAwtGDimension *prefSize = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newDimensionWithInt:size + 12 withInt:size + 12];
  [((id<GeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) setBoundsWithInt:self->xLabel_ withInt:self->yLabel_ withInt:[((GeogebraCommonAwtGDimension *) nil_chk(prefSize)) getWidth] + ((self->textSize_ == nil) ? 0 : self->textSize_->x_) withInt:[prefSize getHeight]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawBoolean)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon)

GeogebraCommonAwtGColor *GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon_highlightBackground_;

@implementation GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)ev {
  GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon_initWithGeogebraCommonEuclidianEuclidianView_(self, ev);
  return self;
}

- (void)paintIconWithBoolean:(jboolean)checked
                 withBoolean:(jboolean)highlighted
withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g
                     withInt:(jint)x
                     withInt:(jint)y {
  jint csize = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(ev_)) getBooleanSize];
  {
    {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g)) setColorWithGeogebraCommonAwtGColor:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:220 withInt:220 withInt:220]];
      [g drawRoundRectWithInt:x withInt:y withInt:csize withInt:csize withInt:csize / 5 withInt:csize / 5];
      if (highlighted) {
        [g setColorWithGeogebraCommonAwtGColor:GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon_highlightBackground_];
      }
      else {
        [g setColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_white_()];
      }
      [g fillRoundRectWithInt:x + 1 withInt:y + 1 withInt:csize - 2 withInt:csize - 2 withInt:csize / 5 withInt:csize / 5];
    }
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g)) setColorWithGeogebraCommonAwtGColor:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:102 withInt:102 withInt:102]];
    if (checked) {
      if (csize == 13) {
        [g setStrokeWithGeogebraCommonAwtGBasicStroke:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:2.0f withInt:GeogebraCommonAwtGBasicStroke_CAP_ROUND withInt:GeogebraCommonAwtGBasicStroke_JOIN_ROUND]];
        [g drawLineWithInt:x + 2 withInt:y + 7 withInt:x + 5 withInt:y + 10];
        [g drawLineWithInt:x + 5 withInt:y + 10 withInt:x + 10 withInt:y + 3];
      }
      else {
        [g setStrokeWithGeogebraCommonAwtGBasicStroke:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:4.0f withInt:GeogebraCommonAwtGBasicStroke_CAP_ROUND withInt:GeogebraCommonAwtGBasicStroke_JOIN_ROUND]];
        [g drawLineWithInt:x + 5 withInt:y + 15 withInt:x + 10 withInt:y + 20];
        [g drawLineWithInt:x + 10 withInt:y + 20 withInt:x + 20 withInt:y + 6];
      }
    }
  }
}

- (jint)getIconWidth {
  return [((GeogebraCommonEuclidianEuclidianView *) nil_chk(ev_)) getBooleanSize];
}

- (jint)getIconHeight {
  return [((GeogebraCommonEuclidianEuclidianView *) nil_chk(ev_)) getBooleanSize];
}

- (void)dealloc {
  RELEASE_(ev_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon class]) {
    JreStrongAssign(&GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon_highlightBackground_, nil, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:248 withInt:248 withInt:248]);
    J2OBJC_SET_INITIALIZED(GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:", "CheckBoxIcon", NULL, 0x1, NULL, NULL },
    { "paintIconWithBoolean:withBoolean:withGeogebraCommonAwtGGraphics2D:withInt:withInt:", "paintIcon", "V", 0x1, NULL, NULL },
    { "getIconWidth", NULL, "I", 0x1, NULL, NULL },
    { "getIconHeight", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ev_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "highlightBackground_", NULL, 0x9, "Lgeogebra.common.awt.GColor;", &GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon_highlightBackground_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon = { 2, "CheckBoxIcon", "geogebra.common.euclidian.draw", "DrawBoolean", 0x9, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon;
}

@end

void GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon_initWithGeogebraCommonEuclidianEuclidianView_(GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon *self, GeogebraCommonEuclidianEuclidianView *ev) {
  NSObject_init(self);
  GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon_set_ev_(self, ev);
}

GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon *new_GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon_initWithGeogebraCommonEuclidianEuclidianView_(GeogebraCommonEuclidianEuclidianView *ev) {
  GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon *self = [GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon alloc];
  GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon_initWithGeogebraCommonEuclidianEuclidianView_(self, ev);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawBoolean_CheckBoxIcon)
