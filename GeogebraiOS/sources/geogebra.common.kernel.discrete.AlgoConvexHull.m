//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/discrete/AlgoConvexHull.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GPoint2D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/discrete/AlgoConvexHull.h"
#include "geogebra/common/kernel/discrete/JarvisMarch2D.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface GeogebraCommonKernelDiscreteAlgoConvexHull () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoLocus *locus_;
  JavaUtilArrayList *al_;
  JavaUtilArrayList *vl_;
  jint size_;
}

+ (jboolean)containsWithJavaUtilArrayList:(JavaUtilArrayList *)vl2
                               withDouble:(jdouble)x
                               withDouble:(jdouble)y;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelDiscreteAlgoConvexHull, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelDiscreteAlgoConvexHull, locus_, GeogebraCommonKernelGeosGeoLocus *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelDiscreteAlgoConvexHull, al_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelDiscreteAlgoConvexHull, vl_, JavaUtilArrayList *)

__attribute__((unused)) static jboolean GeogebraCommonKernelDiscreteAlgoConvexHull_containsWithJavaUtilArrayList_withDouble_withDouble_(JavaUtilArrayList *vl2, jdouble x, jdouble y);

@implementation GeogebraCommonKernelDiscreteAlgoConvexHull

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelDiscreteAlgoConvexHull_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ConvexHull();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:locus_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoLocus *)getResult {
  return locus_;
}

- (void)compute {
  size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(inputList_)) size];
  if (![inputList_ isDefined] || size_ == 0) {
    [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) setUndefined];
    return;
  }
  if (vl_ == nil) GeogebraCommonKernelDiscreteAlgoConvexHull_setAndConsume_vl_(self, new_JavaUtilArrayList_init());
  else [vl_ clear];
  IOSDoubleArray *inhom = [IOSDoubleArray arrayWithLength:2];
  for (jint i = 0; i < size_; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [inputList_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined] && [geo isGeoPoint]) {
      id<GeogebraCommonKernelKernelNDGeoPointND> p = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND));
      [p getInhomCoordsWithDoubleArray:inhom];
      if (!GeogebraCommonKernelDiscreteAlgoConvexHull_containsWithJavaUtilArrayList_withDouble_withDouble_(vl_, IOSDoubleArray_Get(inhom, 0), IOSDoubleArray_Get(inhom, 1))) {
        [((JavaUtilArrayList *) nil_chk(vl_)) addWithId:[new_GeogebraCommonAwtGPoint2D_Double_initWithDouble_withDouble_(IOSDoubleArray_Get(inhom, 0), IOSDoubleArray_Get(inhom, 1)) autorelease]];
      }
    }
  }
  if (al_ == nil) {
    GeogebraCommonKernelDiscreteAlgoConvexHull_setAndConsume_al_(self, new_JavaUtilArrayList_init());
  }
  else {
    [al_ clear];
  }
  if ([((JavaUtilArrayList *) nil_chk(vl_)) size] == 1) {
    GeogebraCommonKernelMyPoint *p = [((JavaUtilArrayList *) nil_chk(al_)) getWithInt:0];
    [al_ addWithId:[new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(((GeogebraCommonKernelMyPoint *) nil_chk(p))->x_, p->y_, NO) autorelease]];
    [al_ addWithId:[new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(p->x_, p->y_, YES) autorelease]];
    [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) setPointsWithJavaUtilArrayList:al_];
    [locus_ setDefinedWithBoolean:YES];
    return;
  }
  id<JavaUtilList> edge = GeogebraCommonKernelDiscreteJarvisMarch2D_convexHullWithJavaUtilCollection_(vl_);
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(edge)) size]; i++) {
    GeogebraCommonAwtGPoint2D_Double *p = [edge getWithInt:i];
    [((JavaUtilArrayList *) nil_chk(al_)) addWithId:[new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(((GeogebraCommonAwtGPoint2D_Double *) nil_chk(p))->x_, p->y_, i != 0) autorelease]];
  }
  GeogebraCommonAwtGPoint2D_Double *p = [edge getWithInt:0];
  [((JavaUtilArrayList *) nil_chk(al_)) addWithId:[new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(((GeogebraCommonAwtGPoint2D_Double *) nil_chk(p))->x_, p->y_, YES) autorelease]];
  [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) setPointsWithJavaUtilArrayList:al_];
  [locus_ setDefinedWithBoolean:YES];
}

+ (jboolean)containsWithJavaUtilArrayList:(JavaUtilArrayList *)vl2
                               withDouble:(jdouble)x
                               withDouble:(jdouble)y {
  return GeogebraCommonKernelDiscreteAlgoConvexHull_containsWithJavaUtilArrayList_withDouble_withDouble_(vl2, x, y);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(locus_);
  RELEASE_(al_);
  RELEASE_(vl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoConvexHull", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoLocus;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "containsWithJavaUtilArrayList:withDouble:withDouble:", "contains", "Z", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "locus_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLocus;", NULL, NULL,  },
    { "al_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/MyPoint;>;",  },
    { "vl_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/awt/GPoint2D$Double;>;",  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelDiscreteAlgoConvexHull = { 2, "AlgoConvexHull", "geogebra.common.kernel.discrete", NULL, 0x1, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelDiscreteAlgoConvexHull;
}

@end

void GeogebraCommonKernelDiscreteAlgoConvexHull_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelDiscreteAlgoConvexHull *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelDiscreteAlgoConvexHull_set_inputList_(self, inputList);
  GeogebraCommonKernelDiscreteAlgoConvexHull_setAndConsume_locus_(self, new_GeogebraCommonKernelGeosGeoLocus_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self compute];
  [self->locus_ setLabelWithNSString:label];
}

GeogebraCommonKernelDiscreteAlgoConvexHull *new_GeogebraCommonKernelDiscreteAlgoConvexHull_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelDiscreteAlgoConvexHull *self = [GeogebraCommonKernelDiscreteAlgoConvexHull alloc];
  GeogebraCommonKernelDiscreteAlgoConvexHull_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

jboolean GeogebraCommonKernelDiscreteAlgoConvexHull_containsWithJavaUtilArrayList_withDouble_withDouble_(JavaUtilArrayList *vl2, jdouble x, jdouble y) {
  GeogebraCommonKernelDiscreteAlgoConvexHull_initialize();
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(vl2)) size]; i++) {
    GeogebraCommonAwtGPoint2D_Double *p = [vl2 getWithInt:i];
    if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(((GeogebraCommonAwtGPoint2D_Double *) nil_chk(p))->x_, x) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(p->y_, y)) {
      return YES;
    }
  }
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelDiscreteAlgoConvexHull)
