//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawPolyLine.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GPoint2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/awt/GShape.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/GeneralPathClipped.h"
#include "geogebra/common/euclidian/draw/DrawPolyLine.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/ConstructionDefaults.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolyLine.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonEuclidianDrawDrawPolyLine () {
 @public
  GeogebraCommonKernelGeosGeoPolyLine *poly_;
  jboolean isVisible_, labelVisible_;
  GeogebraCommonEuclidianGeneralPathClipped *gp_;
  IOSDoubleArray *coords_;
  JavaUtilArrayList *points_;
  GeogebraCommonAwtGPoint2D *endPoint_;
}

- (void)addPointsToPathWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)pts;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPolyLine, poly_, GeogebraCommonKernelGeosGeoPolyLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPolyLine, gp_, GeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPolyLine, coords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPolyLine, points_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPolyLine, endPoint_, GeogebraCommonAwtGPoint2D *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawPolyLine_update(GeogebraCommonEuclidianDrawDrawPolyLine *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawPolyLine_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawPolyLine *self, id<GeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawPolyLine_addPointsToPathWithGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonEuclidianDrawDrawPolyLine *self, IOSObjectArray *pts);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawPolyLine_updatePreview(GeogebraCommonEuclidianDrawDrawPolyLine *self);

@implementation GeogebraCommonEuclidianDrawDrawPolyLine

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                     withGeogebraCommonKernelGeosGeoPolyLine:(GeogebraCommonKernelGeosGeoPolyLine *)poly {
  GeogebraCommonEuclidianDrawDrawPolyLine_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoPolyLine_(self, view, poly);
  return self;
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                                       withJavaUtilArrayList:(JavaUtilArrayList *)points {
  GeogebraCommonEuclidianDrawDrawPolyLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawPolyLine_update(self);
}

- (void)drawTraceWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianDrawDrawPolyLine_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)addPointsToPathWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)pts {
  GeogebraCommonEuclidianDrawDrawPolyLine_addPointsToPathWithGeogebraCommonKernelKernelNDGeoPointNDArray_(self, pts);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[self getObjectColor]];
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithGeogebraCommonAwtGShape:gp_];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [g2 setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(poly_)) getSelColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithGeogebraCommonAwtGShape:gp_];
    }
    if (labelVisible_) {
      [g2 setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(poly_)) getLabelColor]];
      [g2 setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontPoint]];
      [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (void)updatePreview {
  GeogebraCommonEuclidianDrawDrawPolyLine_updatePreview(self);
}

- (void)updateMousePosWithDouble:(jdouble)mouseRWx
                      withDouble:(jdouble)mouseRWy {
  jdouble xRW = mouseRWx;
  jdouble yRW = mouseRWy;
  if (isVisible_) {
    jint mx = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toScreenCoordXWithDouble:xRW];
    jint my = [view_ toScreenCoordYWithDouble:yRW];
    if ([((GeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) isAltDown]) {
      GeogebraCommonKernelGeosGeoPoint *p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([points_ getWithInt:[((JavaUtilArrayList *) nil_chk(points_)) size] - 1], [GeogebraCommonKernelGeosGeoPoint class]);
      jdouble px = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_;
      jdouble py = p->inhomY_;
      jdouble angle = JavaLangMath_atan2WithDouble_withDouble_(yRW - py, xRW - px) * 180 / JavaLangMath_PI;
      jdouble radius = JavaLangMath_sqrtWithDouble_((py - yRW) * (py - yRW) + (px - xRW) * (px - xRW));
      angle = JavaLangMath_roundWithDouble_(angle / 15) * 15;
      xRW = px + radius * JavaLangMath_cosWithDouble_(angle * JavaLangMath_PI / 180);
      yRW = py + radius * JavaLangMath_sinWithDouble_(angle * JavaLangMath_PI / 180);
      mx = [view_ toScreenCoordXWithDouble:xRW];
      my = [view_ toScreenCoordYWithDouble:yRW];
      [((GeogebraCommonAwtGPoint2D *) nil_chk(endPoint_)) setXWithDouble:xRW];
      [endPoint_ setYWithDouble:yRW];
      [((GeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) setLineEndPointWithGeogebraCommonAwtGPoint2D:endPoint_];
      [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) lineToWithDouble:mx withDouble:my];
    }
    else [((GeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) setLineEndPointWithGeogebraCommonAwtGPoint2D_Double:nil];
    [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) lineToWithDouble:[view_ toScreenCoordXWithDouble:xRW] withDouble:[view_ toScreenCoordYWithDouble:yRW]];
  }
}

- (void)drawPreviewWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[self getObjectColor]];
    [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:geo_];
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithGeogebraCommonAwtGShape:gp_];
  }
}

- (void)disposePreview {
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  if (isVisible_) {
    if (strokedShape_ == nil) {
      GeogebraCommonEuclidianDrawable_set_strokedShape_(self, [((id<GeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) createStrokedShapeWithGeogebraCommonAwtGShape:gp_]);
    }
    return [((id<GeogebraCommonAwtGShape>) nil_chk(strokedShape_)) intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
  }
  return NO;
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  if (isVisible_) {
    if (strokedShape_ == nil) {
      GeogebraCommonEuclidianDrawable_set_strokedShape_(self, [((id<GeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) createStrokedShapeWithGeogebraCommonAwtGShape:gp_]);
    }
    return [((id<GeogebraCommonAwtGShape>) nil_chk(strokedShape_)) intersectsWithGeogebraCommonAwtGRectangle2D:rect];
  }
  return NO;
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return gp_ != nil && [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithGeogebraCommonAwtGRectangle2D:[gp_ getBounds]];
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) getBounds];
}

- (void)dealloc {
  RELEASE_(poly_);
  RELEASE_(gp_);
  RELEASE_(coords_);
  RELEASE_(points_);
  RELEASE_(endPoint_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoPolyLine:", "DrawPolyLine", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianView:withJavaUtilArrayList:", "DrawPolyLine", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawTraceWithGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x14, NULL, NULL },
    { "addPointsToPathWithGeogebraCommonKernelKernelNDGeoPointNDArray:", "addPointsToPath", "V", 0x2, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "updatePreview", NULL, "V", 0x11, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x11, NULL, NULL },
    { "drawPreviewWithGeogebraCommonAwtGGraphics2D:", "drawPreview", "V", 0x11, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "poly_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPolyLine;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lgeogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "coords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "points_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<*>;",  },
    { "endPoint_", NULL, 0x2, "Lgeogebra.common.awt.GPoint2D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawPolyLine = { 2, "DrawPolyLine", "geogebra.common.euclidian.draw", NULL, 0x1, 16, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawPolyLine;
}

@end

void GeogebraCommonEuclidianDrawDrawPolyLine_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoPolyLine_(GeogebraCommonEuclidianDrawDrawPolyLine *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoPolyLine *poly) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawPolyLine_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawPolyLine_set_endPoint_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawPolyLine_set_poly_(self, poly);
  GeogebraCommonEuclidianDrawable_set_geo_(self, poly);
  GeogebraCommonEuclidianDrawDrawPolyLine_update(self);
}

GeogebraCommonEuclidianDrawDrawPolyLine *new_GeogebraCommonEuclidianDrawDrawPolyLine_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoPolyLine_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoPolyLine *poly) {
  GeogebraCommonEuclidianDrawDrawPolyLine *self = [GeogebraCommonEuclidianDrawDrawPolyLine alloc];
  GeogebraCommonEuclidianDrawDrawPolyLine_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoPolyLine_(self, view, poly);
  return self;
}

void GeogebraCommonEuclidianDrawDrawPolyLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(GeogebraCommonEuclidianDrawDrawPolyLine *self, GeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawPolyLine_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawPolyLine_set_endPoint_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawPolyLine_set_points_(self, points);
  GeogebraCommonEuclidianDrawable_set_geo_(self, [((GeogebraCommonKernelConstructionDefaults *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction])) getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYLINE]);
  GeogebraCommonEuclidianDrawDrawPolyLine_updatePreview(self);
}

GeogebraCommonEuclidianDrawDrawPolyLine *new_GeogebraCommonEuclidianDrawDrawPolyLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(GeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  GeogebraCommonEuclidianDrawDrawPolyLine *self = [GeogebraCommonEuclidianDrawDrawPolyLine alloc];
  GeogebraCommonEuclidianDrawDrawPolyLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

void GeogebraCommonEuclidianDrawDrawPolyLine_update(GeogebraCommonEuclidianDrawDrawPolyLine *self) {
  self->isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (self->isVisible_) {
    self->labelVisible_ = [self->geo_ isLabelVisible];
    [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:self->poly_];
    GeogebraCommonEuclidianDrawDrawPolyLine_addPointsToPathWithGeogebraCommonKernelKernelNDGeoPointNDArray_(self, [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->poly_)) getPointsND]);
    if (![((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(self->gp_)) intersectsWithInt:0 withInt:0 withInt:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth] withInt:[self->view_ getHeight]]) {
      self->isVisible_ = NO;
    }
    if ([self->poly_ getTrace]) {
      self->isTracing__ = YES;
      id<GeogebraCommonAwtGGraphics2D> g2 = [self->view_ getBackgroundGraphics];
      if (g2 != nil) GeogebraCommonEuclidianDrawDrawPolyLine_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
    }
    else {
      if (self->isTracing__) {
        self->isTracing__ = NO;
      }
    }
  }
}

void GeogebraCommonEuclidianDrawDrawPolyLine_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawPolyLine *self, id<GeogebraCommonAwtGGraphics2D> g2) {
  if (self->isVisible_) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[self getObjectColor]];
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:self->objStroke_];
    [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:self->gp_];
  }
}

void GeogebraCommonEuclidianDrawDrawPolyLine_addPointsToPathWithGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonEuclidianDrawDrawPolyLine *self, IOSObjectArray *pts) {
  if (self->gp_ == nil) {
    GeogebraCommonEuclidianDrawDrawPolyLine_setAndConsume_gp_(self, new_GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self->view_));
  }
  else {
    [self->gp_ reset];
  }
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(pts), 0))) getInhomCoordsWithDoubleArray:self->coords_];
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordsWithDoubleArray:self->coords_];
  [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(self->gp_)) moveToWithDouble:IOSDoubleArray_Get(nil_chk(self->coords_), 0) withDouble:IOSDoubleArray_Get(self->coords_, 1)];
  jdouble xsum = IOSDoubleArray_Get(self->coords_, 0);
  jdouble ysum = IOSDoubleArray_Get(self->coords_, 1);
  jboolean skipNextPoint = NO;
  for (jint i = 1; i < pts->size_; i++) {
    if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(pts, i))) isDefined]) {
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(pts, i))) getInhomCoordsWithDoubleArray:self->coords_];
      [self->view_ toScreenCoordsWithDoubleArray:self->coords_];
      if (self->labelVisible_) {
        xsum += IOSDoubleArray_Get(self->coords_, 0);
        ysum += IOSDoubleArray_Get(self->coords_, 1);
      }
      if (skipNextPoint) {
        skipNextPoint = NO;
        [self->gp_ moveToWithDouble:IOSDoubleArray_Get(self->coords_, 0) withDouble:IOSDoubleArray_Get(self->coords_, 1)];
      }
      else {
        [self->gp_ lineToWithDouble:IOSDoubleArray_Get(self->coords_, 0) withDouble:IOSDoubleArray_Get(self->coords_, 1)];
      }
    }
    else {
      skipNextPoint = YES;
    }
  }
  if (self->labelVisible_) {
    GeogebraCommonEuclidianDrawable_set_labelDesc_(self, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getLabelDescription]);
    self->xLabel_ = J2ObjCFpToInt((xsum / pts->size_));
    self->yLabel_ = J2ObjCFpToInt((ysum / pts->size_));
    [self addLabelOffset];
  }
}

void GeogebraCommonEuclidianDrawDrawPolyLine_updatePreview(GeogebraCommonEuclidianDrawDrawPolyLine *self) {
  jint size = [((JavaUtilArrayList *) nil_chk(self->points_)) size];
  self->isVisible_ = (size > 0);
  if (self->isVisible_) {
    IOSObjectArray *pointsArray = [IOSObjectArray arrayWithLength:size type:GeogebraCommonKernelGeosGeoPoint_class_()];
    for (jint i = 0; i < size; i++) {
      IOSObjectArray_Set(pointsArray, i, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([self->points_ getWithInt:i], [GeogebraCommonKernelGeosGeoPoint class]));
    }
    GeogebraCommonEuclidianDrawDrawPolyLine_addPointsToPathWithGeogebraCommonKernelKernelNDGeoPointNDArray_(self, pointsArray);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawPolyLine)
