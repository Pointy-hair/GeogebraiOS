//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdIntersect.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoIntersect.h"
#include "geogebra/common/kernel/algos/AlgoIntersectConics.h"
#include "geogebra/common/kernel/algos/AlgoIntersectCurveCurve.h"
#include "geogebra/common/kernel/algos/AlgoIntersectFunctions.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "geogebra/common/kernel/algos/AlgoIntersectPolynomialConic.h"
#include "geogebra/common/kernel/algos/AlgoIntersectPolynomialLine.h"
#include "geogebra/common/kernel/algos/AlgoIntersectPolynomials.h"
#include "geogebra/common/kernel/algos/AlgoIntersectSingle.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/CmdIntersect.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionable.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolyLine.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/implicit/AlgoIntersectImplicitpolyParametric.h"
#include "geogebra/common/kernel/implicit/AlgoIntersectImplicitpolys.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"

@interface GeogebraCommonKernelCommandsCmdIntersect ()

- (GeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyLineSingleWithNSString:(NSString *)label
                                  withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                              withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l
                                       withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)idx;

- (GeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyConicSingleWithNSString:(NSString *)label
                                   withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                                              withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c1
                                        withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)idx;

- (GeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolysSingleWithNSString:(NSString *)label
                               withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                               withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p2
                                    withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)idx;

- (GeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyPolynomialSingleWithNSString:(NSString *)label
                                        withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                                withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                             withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)idx;

- (GeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialConicSingleWithNSString:(NSString *)label
                                         withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                            withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c
                                      withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)idx;

- (GeogebraCommonKernelGeosGeoPoint *)IntersectConicsSingleWithNSString:(NSString *)label
                                   withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)a
                                   withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)b
                                   withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)refPoint;

- (GeogebraCommonKernelGeosGeoPoint *)IntersectConicsSingleWithNSString:(NSString *)label
                                   withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)a
                                   withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)b
                             withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)index;

- (GeogebraCommonKernelGeosGeoPoint *)IntersectLineConicSingleWithNSString:(NSString *)label
                                       withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)a
                                      withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)b
                                      withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)refPoint;

- (GeogebraCommonKernelGeosGeoPoint *)IntersectLineConicSingleWithNSString:(NSString *)label
                                       withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                                      withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c
                                withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)index;

- (GeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialLineSingleWithNSString:(NSString *)label
                                        withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                            withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l
                                     withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)index;

- (GeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialsSingleWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                                              withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                                                                  withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)a
                                                                  withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)b
                                                               withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)index;

- (IOSObjectArray *)IntersectFunctionsWithNSStringArray:(IOSObjectArray *)labels
                withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)g
          withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)left
          withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)right;

@end

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyLineSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelImplicitGeoImplicitPoly *p, GeogebraCommonKernelGeosGeoLine *l, id<GeogebraCommonKernelGeosGeoNumberValue> idx);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyConicSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelImplicitGeoImplicitPoly *p1, GeogebraCommonKernelGeosGeoConic *c1, id<GeogebraCommonKernelGeosGeoNumberValue> idx);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolysSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelImplicitGeoImplicitPoly *p1, GeogebraCommonKernelImplicitGeoImplicitPoly *p2, id<GeogebraCommonKernelGeosGeoNumberValue> idx);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyPolynomialSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelImplicitGeoImplicitPoly *p, GeogebraCommonKernelGeosGeoFunction *f, id<GeogebraCommonKernelGeosGeoNumberValue> idx);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialConicSingleWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, GeogebraCommonKernelGeosGeoConic *c, id<GeogebraCommonKernelGeosGeoNumberValue> idx);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelGeosGeoConic *a, GeogebraCommonKernelGeosGeoConic *b, GeogebraCommonKernelGeosGeoPoint *refPoint);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelGeosGeoConic *a, GeogebraCommonKernelGeosGeoConic *b, id<GeogebraCommonKernelGeosGeoNumberValue> index);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelGeosGeoLine *a, GeogebraCommonKernelGeosGeoConic *b, GeogebraCommonKernelGeosGeoPoint *refPoint);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoConic *c, id<GeogebraCommonKernelGeosGeoNumberValue> index);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialLineSingleWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, GeogebraCommonKernelGeosGeoLine *l, id<GeogebraCommonKernelGeosGeoNumberValue> index);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialsSingleWithGeogebraCommonKernelArithmeticCommand_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, GeogebraCommonKernelArithmeticCommand *c, IOSObjectArray *arg, GeogebraCommonKernelGeosGeoFunction *a, GeogebraCommonKernelGeosGeoFunction *b, id<GeogebraCommonKernelGeosGeoNumberValue> index);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsCmdIntersect_IntersectFunctionsWithNSStringArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoFunction *f, GeogebraCommonKernelGeosGeoFunction *g, id<GeogebraCommonKernelArithmeticNumberValue> left, id<GeogebraCommonKernelArithmeticNumberValue> right);

@implementation GeogebraCommonKernelCommandsCmdIntersect

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdIntersect_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg;
  switch (n) {
    case 2:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinesWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoLineND:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelKernelNDGeoLineND:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoLine class])], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelGeosGeoCurveCartesian class]]))) {
      IOSObjectArray *ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineCurveWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoCurveCartesian class])];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoCurveCartesian class]])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) {
      IOSObjectArray *ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineCurveWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoCurveCartesian class])];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoCurveCartesian class]])) && (*IOSBooleanArray_GetRef(ok, 1) = ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelGeosGeoCurveCartesian class]]))) {
      IOSObjectArray *ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectCurveCurveWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoCurveCartesian class]) withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoCurveCartesian class])];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelGeosGeoPolyLine class]]))) {
      IOSObjectArray *ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinePolyLineWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoPolyLine:(GeogebraCommonKernelGeosGeoPolyLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoPolyLine class])];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoPolyLine class]])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) {
      IOSObjectArray *ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinePolyLineWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoPolyLine:(GeogebraCommonKernelGeosGeoPolyLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoPolyLine class])];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPolygon]))) {
      IOSObjectArray *ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinePolygonWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoPolygon class])];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolygon])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) {
      IOSObjectArray *ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLinePolygonWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoPolygon class])];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic]))) return (IOSObjectArray *) check_class_cast([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineConicWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoLineND:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoConic class])], [IOSObjectArray class]);
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) return (IOSObjectArray *) check_class_cast([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectLineConicWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoLineND:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoConic class])], [IOSObjectArray class]);
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunction])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic]))) return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialConicWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoFunction class]) withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoConic class])];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunction]))) return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialConicWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoFunction class]) withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoConic class])];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic]))) return (IOSObjectArray *) check_class_cast([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectConicsWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoConic class]) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoConic class])], [IOSObjectArray class]);
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialLineWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoFunction:[((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction] withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoLine class])];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable]))) return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialLineWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoFunction:[((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction] withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoLine class])];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable] || [IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable] || [IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]))) return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolynomialsWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoFunction:[((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction] withGeogebraCommonKernelGeosGeoFunction:[((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction]];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable]) && (*IOSBooleanArray_GetRef(ok, 1) = !([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))))) return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyPolynomialWithNSStringArray:[c getLabels] withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelImplicitGeoImplicitPoly class]) withGeogebraCommonKernelGeosGeoFunction:[((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction]];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable]) && (*IOSBooleanArray_GetRef(ok, 0) = !([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly])) return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyPolynomialWithNSStringArray:[c getLabels] withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelImplicitGeoImplicitPoly class]) withGeogebraCommonKernelGeosGeoFunction:[((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction]];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyLineWithNSStringArray:[c getLabels] withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelImplicitGeoImplicitPoly class]) withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoLine class])];
    else if ((*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine]))) return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyLineWithNSStringArray:[c getLabels] withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelImplicitGeoImplicitPoly class]) withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoLine class])];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly]))) return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolysWithNSStringArray:[c getLabels] withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelImplicitGeoImplicitPoly class]) withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelImplicitGeoImplicitPoly class])];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic]))) return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyConicWithNSStringArray:[c getLabels] withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelImplicitGeoImplicitPoly class]) withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoConic class])];
    else if ((*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic]))) return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectImplicitpolyConicWithNSStringArray:[c getLabels] withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelImplicitGeoImplicitPoly class]) withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoConic class])];
    else {
      if (!IOSBooleanArray_Get(ok, 0)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
    }
    case 3:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoConic class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoConic class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoPoint_(self, [c getLabel], (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoConic class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 2), [GeogebraCommonKernelGeosGeoPoint class])) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoPoint_(self, [c getLabel], (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoConic class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 2), [GeogebraCommonKernelGeosGeoPoint class])) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoPoint_(self, [c getLabel], (GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoConic class]), (GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoConic class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 2), [GeogebraCommonKernelGeosGeoPoint class])) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoConic class]), (GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoConic class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
      GeogebraCommonKernelGeosGeoPoint *ret = GeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialLineSingleWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoLine class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue)));
      if (ret == nil) {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      return [IOSObjectArray arrayWithObjects:(id[]){ ret } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
      GeogebraCommonKernelGeosGeoPoint *ret = GeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialLineSingleWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoLine class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue)));
      if (ret == nil) {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      return [IOSObjectArray arrayWithObjects:(id[]){ ret } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialsSingleWithGeogebraCommonKernelArithmeticCommand_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoNumberValue_(self, c, arg, [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunction])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) return [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialConicSingleWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoFunction class]), (GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoConic class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunction])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) return [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialConicSingleWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoFunction class]), (GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoConic class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable]) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)])) && (*IOSBooleanArray_GetRef(ok, 1) = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk([((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction])) isPolynomialFunctionWithBoolean:NO])))) {
      GeogebraCommonKernelGeosGeoPoint *ret = GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyPolynomialSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelImplicitGeoImplicitPoly class]), [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue)));
      if (ret == nil) {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      return [IOSObjectArray arrayWithObjects:(id[]){ ret } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable]) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)])) && (*IOSBooleanArray_GetRef(ok, 0) = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk([((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction])) isPolynomialFunctionWithBoolean:NO])) {
      GeogebraCommonKernelGeosGeoPoint *ret = GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyPolynomialSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelImplicitGeoImplicitPoly class]), [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue)));
      if (ret == nil) {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      }
      return [IOSObjectArray arrayWithObjects:(id[]){ ret } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) return [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyLineSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelImplicitGeoImplicitPoly class]), (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoLine class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    else if ((*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) return [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyLineSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelImplicitGeoImplicitPoly class]), (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoLine class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 2) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)])) return [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolysSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelImplicitGeoImplicitPoly class]), (GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelImplicitGeoImplicitPoly class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 2) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)])) return [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyConicSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelImplicitGeoImplicitPoly class]), (GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoConic class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    else if ((*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoImplicitPoly])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 2) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)])) return [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyConicSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(self, [c getLabel], (GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelImplicitGeoImplicitPoly class]), (GeogebraCommonKernelGeosGeoConic *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoConic class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectFunctionLineWithNSString:[c getLabel] withGeogebraCommonKernelGeosGeoFunction:[((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction] withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 2), [GeogebraCommonKernelGeosGeoPoint class])] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunctionable] || [IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable] || [IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectFunctionsWithNSString:[c getLabel] withGeogebraCommonKernelGeosGeoFunction:[((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction] withGeogebraCommonKernelGeosGeoFunction:[((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction] withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 2), [GeogebraCommonKernelGeosGeoPoint class])] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectFunctionLineWithNSString:[c getLabel] withGeogebraCommonKernelGeosGeoFunction:[((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction] withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 2), [GeogebraCommonKernelGeosGeoPoint class])] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else {
      if (!IOSBooleanArray_Get(ok, 0)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      else if (!IOSBooleanArray_Get(ok, 1)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      else @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 2)];
    }
    case 4:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoFunction])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunction])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)])) && (*IOSBooleanArray_GetRef(ok, 3) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 3)]))) {
      IOSObjectArray *ret = GeogebraCommonKernelCommandsCmdIntersect_IntersectFunctionsWithNSStringArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, [c getLabels], (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoFunction class]), (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoFunction class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue)), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 3), @protocol(GeogebraCommonKernelGeosGeoNumberValue)));
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoCurveCartesian class]])) && (*IOSBooleanArray_GetRef(ok, 1) = ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelGeosGeoCurveCartesian class]])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)])) && (*IOSBooleanArray_GetRef(ok, 3) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 3)]))) {
      GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_(cons_, [c getLabels], (GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoCurveCartesian class]), (GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoCurveCartesian class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue)), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 3), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) autorelease];
      return [algo getOutput];
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyLineSingleWithNSString:(NSString *)label
                                  withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                              withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l
                                       withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)idx {
  return GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyLineSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoNumberValue_(self, label, p, l, idx);
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyConicSingleWithNSString:(NSString *)label
                                   withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                                              withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c1
                                        withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)idx {
  return GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyConicSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(self, label, p1, c1, idx);
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolysSingleWithNSString:(NSString *)label
                               withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                               withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p2
                                    withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)idx {
  return GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolysSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoNumberValue_(self, label, p1, p2, idx);
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyPolynomialSingleWithNSString:(NSString *)label
                                        withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                                withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                             withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)idx {
  return GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyPolynomialSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoNumberValue_(self, label, p, f, idx);
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialConicSingleWithNSString:(NSString *)label
                                         withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                            withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c
                                      withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)idx {
  return GeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialConicSingleWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(self, label, f, c, idx);
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectConicsSingleWithNSString:(NSString *)label
                                   withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)a
                                   withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)b
                                   withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)refPoint {
  return GeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoPoint_(self, label, a, b, refPoint);
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectConicsSingleWithNSString:(NSString *)label
                                   withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)a
                                   withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)b
                             withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)index {
  return GeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(self, label, a, b, index);
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectLineConicSingleWithNSString:(NSString *)label
                                       withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)a
                                      withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)b
                                      withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)refPoint {
  return GeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoPoint_(self, label, a, b, refPoint);
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectLineConicSingleWithNSString:(NSString *)label
                                       withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                                      withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c
                                withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)index {
  return GeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(self, label, g, c, index);
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialLineSingleWithNSString:(NSString *)label
                                        withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                            withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l
                                     withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)index {
  return GeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialLineSingleWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoNumberValue_(self, label, f, l, index);
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialsSingleWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                                              withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                                                                  withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)a
                                                                  withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)b
                                                               withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)index {
  return GeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialsSingleWithGeogebraCommonKernelArithmeticCommand_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoNumberValue_(self, c, arg, a, b, index);
}

- (IOSObjectArray *)IntersectFunctionsWithNSStringArray:(IOSObjectArray *)labels
                withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)g
          withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)left
          withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)right {
  return GeogebraCommonKernelCommandsCmdIntersect_IntersectFunctionsWithNSStringArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, labels, f, g, left, right);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdIntersect", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "IntersectImplicitpolyLineSingleWithNSString:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoNumberValue:", "IntersectImplicitpolyLineSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectImplicitpolyConicSingleWithNSString:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoConic:withGeogebraCommonKernelGeosGeoNumberValue:", "IntersectImplicitpolyConicSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectImplicitpolysSingleWithNSString:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoNumberValue:", "IntersectImplicitpolysSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectImplicitpolyPolynomialSingleWithNSString:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoNumberValue:", "IntersectImplicitpolyPolynomialSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectPolynomialConicSingleWithNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoConic:withGeogebraCommonKernelGeosGeoNumberValue:", "IntersectPolynomialConicSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectConicsSingleWithNSString:withGeogebraCommonKernelGeosGeoConic:withGeogebraCommonKernelGeosGeoConic:withGeogebraCommonKernelGeosGeoPoint:", "IntersectConicsSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectConicsSingleWithNSString:withGeogebraCommonKernelGeosGeoConic:withGeogebraCommonKernelGeosGeoConic:withGeogebraCommonKernelGeosGeoNumberValue:", "IntersectConicsSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectLineConicSingleWithNSString:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoConic:withGeogebraCommonKernelGeosGeoPoint:", "IntersectLineConicSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectLineConicSingleWithNSString:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoConic:withGeogebraCommonKernelGeosGeoNumberValue:", "IntersectLineConicSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectPolynomialLineSingleWithNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoNumberValue:", "IntersectPolynomialLineSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectPolynomialsSingleWithGeogebraCommonKernelArithmeticCommand:withGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoNumberValue:", "IntersectPolynomialsSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "IntersectFunctionsWithNSStringArray:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "IntersectFunctions", "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdIntersect = { 2, "CmdIntersect", "geogebra.common.kernel.commands", NULL, 0x1, 14, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdIntersect;
}

@end

void GeogebraCommonKernelCommandsCmdIntersect_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdIntersect *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdIntersect *new_GeogebraCommonKernelCommandsCmdIntersect_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdIntersect *self = [GeogebraCommonKernelCommandsCmdIntersect alloc];
  GeogebraCommonKernelCommandsCmdIntersect_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyLineSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelImplicitGeoImplicitPoly *p, GeogebraCommonKernelGeosGeoLine *l, id<GeogebraCommonKernelGeosGeoNumberValue> idx) {
  GeogebraCommonKernelAlgosAlgoIntersect *algo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:p withGeogebraCommonKernelGeosGeoLine:l];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoNumberValue_(label, algo, idx) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyConicSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelImplicitGeoImplicitPoly *p1, GeogebraCommonKernelGeosGeoConic *c1, id<GeogebraCommonKernelGeosGeoNumberValue> idx) {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:p1 withGeogebraCommonKernelGeosGeoConic:c1];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoNumberValue_(label, algo, idx) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolysSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelImplicitGeoImplicitPoly *p1, GeogebraCommonKernelImplicitGeoImplicitPoly *p2, id<GeogebraCommonKernelGeosGeoNumberValue> idx) {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:p1 withGeogebraCommonKernelImplicitGeoImplicitPoly:p2];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoNumberValue_(label, algo, idx) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectImplicitpolyPolynomialSingleWithNSString_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelImplicitGeoImplicitPoly *p, GeogebraCommonKernelGeosGeoFunction *f, id<GeogebraCommonKernelGeosGeoNumberValue> idx) {
  if (![((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) getConstruction])) isFileLoading] && ![f isPolynomialFunctionWithBoolean:NO]) return nil;
  GeogebraCommonKernelAlgosAlgoIntersect *algo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:p withGeogebraCommonKernelGeosGeoFunction:f];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoNumberValue_(label, algo, idx) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialConicSingleWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, GeogebraCommonKernelGeosGeoConic *c, id<GeogebraCommonKernelGeosGeoNumberValue> idx) {
  GeogebraCommonKernelAlgosAlgoIntersect *algo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:f withGeogebraCommonKernelGeosGeoConic:c];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoNumberValue_(label, algo, idx) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelGeosGeoConic *a, GeogebraCommonKernelGeosGeoConic *b, GeogebraCommonKernelGeosGeoPoint *refPoint) {
  GeogebraCommonKernelAlgosAlgoIntersectConics *algo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoConic:a withGeogebraCommonKernelGeosGeoConic:b];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoPoint_(label, algo, refPoint) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectConicsSingleWithNSString_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelGeosGeoConic *a, GeogebraCommonKernelGeosGeoConic *b, id<GeogebraCommonKernelGeosGeoNumberValue> index) {
  GeogebraCommonKernelAlgosAlgoIntersectConics *algo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoConic:a withGeogebraCommonKernelGeosGeoConic:b];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoNumberValue_(label, algo, index) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelGeosGeoLine *a, GeogebraCommonKernelGeosGeoConic *b, GeogebraCommonKernelGeosGeoPoint *refPoint) {
  GeogebraCommonKernelAlgosAlgoIntersectLineConic *algo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoLine:a withGeogebraCommonKernelGeosGeoConic:b];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoPoint_(label, algo, refPoint) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectLineConicSingleWithNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoConic *c, id<GeogebraCommonKernelGeosGeoNumberValue> index) {
  GeogebraCommonKernelAlgosAlgoIntersectLineConic *algo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoLine:g withGeogebraCommonKernelGeosGeoConic:c];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoNumberValue_(label, algo, index) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialLineSingleWithNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, GeogebraCommonKernelGeosGeoLine *l, id<GeogebraCommonKernelGeosGeoNumberValue> index) {
  if (![((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) getConstruction])) isFileLoading] && ![f isPolynomialFunctionWithBoolean:NO]) return nil;
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *algo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:f withGeogebraCommonKernelGeosGeoLine:l];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoNumberValue_(label, algo, index) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsCmdIntersect_IntersectPolynomialsSingleWithGeogebraCommonKernelArithmeticCommand_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, GeogebraCommonKernelArithmeticCommand *c, IOSObjectArray *arg, GeogebraCommonKernelGeosGeoFunction *a, GeogebraCommonKernelGeosGeoFunction *b, id<GeogebraCommonKernelGeosGeoNumberValue> index) {
  if (![((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(a)) getConstruction])) isFileLoading] && ![a isPolynomialFunctionWithBoolean:NO]) {
    @throw [self argErrWithGeogebraCommonMainApp:self->app_ withNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(arg), 0)];
  }
  if (![((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(b)) getConstruction])) isFileLoading] && ![b isPolynomialFunctionWithBoolean:NO]) {
    @throw [self argErrWithGeogebraCommonMainApp:self->app_ withNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(arg), 1)];
  }
  GeogebraCommonKernelAlgosAlgoIntersectPolynomials *algo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:a withGeogebraCommonKernelGeosGeoFunction:b];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoNumberValue_([((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel], algo, index) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

IOSObjectArray *GeogebraCommonKernelCommandsCmdIntersect_IntersectFunctionsWithNSStringArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelCommandsCmdIntersect *self, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoFunction *f, GeogebraCommonKernelGeosGeoFunction *g, id<GeogebraCommonKernelArithmeticNumberValue> left, id<GeogebraCommonKernelArithmeticNumberValue> right) {
  GeogebraCommonKernelAlgosAlgoIntersectFunctions *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectFunctions_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, labels, f, g, left, right) autorelease];
  IOSObjectArray *S = [algo getIntersectionPoints];
  return S;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdIntersect)
