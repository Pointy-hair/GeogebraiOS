//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/cas/CmdImplicitDerivative.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/cas/AlgoImplicitDerivative.h"
#include "geogebra/common/kernel/cas/CmdImplicitDerivative.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelCasCmdImplicitDerivative

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCasCmdImplicitDerivative_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  IOSObjectArray *args = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  if (((IOSObjectArray *) nil_chk(args))->size_ != 1) @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withInt:args->size_];
  if (!([GeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:IOSObjectArray_Get(args, 0)])) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(args, 0)];
  GeogebraCommonKernelCasAlgoImplicitDerivative *algo = [new_GeogebraCommonKernelCasAlgoImplicitDerivative_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionalNVar_(cons_, [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel], (id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(IOSObjectArray_Get(args, 0), @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))) autorelease];
  return [IOSObjectArray arrayWithObjects:(id[]){ [algo getResult] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdImplicitDerivative", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCasCmdImplicitDerivative = { 2, "CmdImplicitDerivative", "geogebra.common.kernel.cas", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCasCmdImplicitDerivative;
}

@end

void GeogebraCommonKernelCasCmdImplicitDerivative_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCasCmdImplicitDerivative *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCasCmdImplicitDerivative *new_GeogebraCommonKernelCasCmdImplicitDerivative_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCasCmdImplicitDerivative *self = [GeogebraCommonKernelCasCmdImplicitDerivative alloc];
  GeogebraCommonKernelCasCmdImplicitDerivative_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCasCmdImplicitDerivative)
