//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/data/StatisticsModel.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/gui/view/data/DataAnalysisModel.h"
#include "geogebra/common/gui/view/data/StatisticsModel.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/Set.h"

#define GeogebraCommonGuiViewDataStatisticsModel_serialVersionUID 1LL

@interface GeogebraCommonGuiViewDataStatisticsModel () {
 @public
  JavaUtilHashMap *labelMap_;
  JavaUtilHashMap *labelMapReverse_;
  jint selectedMode_;
  GeogebraCommonMainApp *app_;
  GeogebraCommonGuiViewDataDataAnalysisModel *daModel_;
  id<GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener> listener_;
}

- (void)createLabelMap;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataStatisticsModel, labelMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataStatisticsModel, labelMapReverse_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataStatisticsModel, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataStatisticsModel, daModel_, GeogebraCommonGuiViewDataDataAnalysisModel *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataStatisticsModel, listener_, id<GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener>)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewDataStatisticsModel, serialVersionUID, jlong)

__attribute__((unused)) static void GeogebraCommonGuiViewDataStatisticsModel_createLabelMap(GeogebraCommonGuiViewDataStatisticsModel *self);

@interface GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener : NSObject
@end

@implementation GeogebraCommonGuiViewDataStatisticsModel

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
withGeogebraCommonGuiViewDataDataAnalysisModel:(GeogebraCommonGuiViewDataDataAnalysisModel *)model
withGeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener:(id<GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener>)listener {
  GeogebraCommonGuiViewDataStatisticsModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewDataDataAnalysisModel_withGeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener_(self, app, model, listener);
  return self;
}

- (void)fillInferenceModes {
  switch ([((GeogebraCommonGuiViewDataDataAnalysisModel *) nil_chk(daModel_)) getMode]) {
    case GeogebraCommonGuiViewDataDataAnalysisModel_MODE_ONEVAR:
    [((id<GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener>) nil_chk(listener_)) addInferenceModeWithNSString:[((JavaUtilHashMap *) nil_chk(labelMap_)) getWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_SUMMARY_STATISTICS)]];
    [listener_ addInferenceModeWithNSString:[labelMap_ getWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_ZTEST)]];
    [listener_ addInferenceModeWithNSString:[labelMap_ getWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST)]];
    [listener_ addInferenceModeWithNSString:[listener_ getSeparator]];
    [listener_ addInferenceModeWithNSString:[labelMap_ getWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_ZINT)]];
    [listener_ addInferenceModeWithNSString:[labelMap_ getWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT)]];
    break;
    case GeogebraCommonGuiViewDataDataAnalysisModel_MODE_REGRESSION:
    [((id<GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener>) nil_chk(listener_)) addInferenceModeWithNSString:[((JavaUtilHashMap *) nil_chk(labelMap_)) getWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_SUMMARY_STATISTICS)]];
    break;
    case GeogebraCommonGuiViewDataDataAnalysisModel_MODE_MULTIVAR:
    [((id<GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener>) nil_chk(listener_)) addInferenceModeWithNSString:[((JavaUtilHashMap *) nil_chk(labelMap_)) getWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_SUMMARY_STATISTICS)]];
    [listener_ addInferenceModeWithNSString:[labelMap_ getWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_ANOVA)]];
    [listener_ addInferenceModeWithNSString:[labelMap_ getWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_2MEANS)]];
    [listener_ addInferenceModeWithNSString:[labelMap_ getWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_PAIRED)]];
    [listener_ addInferenceModeWithNSString:[listener_ getSeparator]];
    [listener_ addInferenceModeWithNSString:[labelMap_ getWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_2MEANS)]];
    [listener_ addInferenceModeWithNSString:[labelMap_ getWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_PAIRED)]];
    break;
  }
  [((id<GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener>) nil_chk(listener_)) selectInferenceModeWithNSString:[((JavaUtilHashMap *) nil_chk(labelMap_)) getWithId:JavaLangInteger_valueOfWithInt_([self getSelectedMode])]];
}

- (void)createLabelMap {
  GeogebraCommonGuiViewDataStatisticsModel_createLabelMap(self);
}

- (void)update {
  switch ([self getSelectedMode]) {
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_ZTEST:
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST:
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_ZINT:
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT:
    [((id<GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener>) nil_chk(listener_)) updateOneVarInferenceWithInt:selectedMode_];
    break;
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_2MEANS:
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_PAIRED:
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_2MEANS:
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_PAIRED:
    [((id<GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener>) nil_chk(listener_)) updateTwoVarInferenceWithInt:selectedMode_];
    break;
    case GeogebraCommonGuiViewDataStatisticsModel_INFER_ANOVA:
    [((id<GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener>) nil_chk(listener_)) updateAnovaTable];
    break;
  }
}

- (void)selectInferenceModeWithNSString:(NSString *)item {
  if ([((NSString *) nil_chk(item)) isEqual:[((id<GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener>) nil_chk(listener_)) getSeparator]]) {
    [listener_ selectInferenceModeWithNSString:[((JavaUtilHashMap *) nil_chk(labelMap_)) getWithId:JavaLangInteger_valueOfWithInt_([self getSelectedMode])]];
  }
  else {
    selectedMode_ = [((JavaLangInteger *) nil_chk([((JavaUtilHashMap *) nil_chk(labelMapReverse_)) getWithId:item])) intValue];
  }
}

- (jint)getSelectedMode {
  return selectedMode_;
}

- (void)setSelectedModeWithInt:(jint)selectedMode {
  self->selectedMode_ = selectedMode;
}

- (void)dealloc {
  RELEASE_(labelMap_);
  RELEASE_(labelMapReverse_);
  RELEASE_(app_);
  RELEASE_(daModel_);
  RELEASE_(listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonGuiViewDataDataAnalysisModel:withGeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener:", "StatisticsModel", NULL, 0x1, NULL, NULL },
    { "fillInferenceModes", NULL, "V", 0x1, NULL, NULL },
    { "createLabelMap", NULL, "V", 0x2, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "selectInferenceModeWithNSString:", "selectInferenceMode", "V", 0x1, NULL, NULL },
    { "getSelectedMode", NULL, "I", 0x1, NULL, NULL },
    { "setSelectedModeWithInt:", "setSelectedMode", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonGuiViewDataStatisticsModel_serialVersionUID },
    { "SUMMARY_STATISTICS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewDataStatisticsModel_SUMMARY_STATISTICS },
    { "INFER_ZTEST_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewDataStatisticsModel_INFER_ZTEST },
    { "INFER_ZINT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewDataStatisticsModel_INFER_ZINT },
    { "INFER_TTEST_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST },
    { "INFER_TINT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT },
    { "INFER_TTEST_2MEANS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_2MEANS },
    { "INFER_TTEST_PAIRED_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_PAIRED },
    { "INFER_TINT_2MEANS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_2MEANS },
    { "INFER_TINT_PAIRED_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_PAIRED },
    { "INFER_ANOVA_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewDataStatisticsModel_INFER_ANOVA },
    { "labelMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/Integer;Ljava/lang/String;>;",  },
    { "labelMapReverse_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;",  },
    { "selectedMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "daModel_", NULL, 0x2, "Lgeogebra.common.gui.view.data.DataAnalysisModel;", NULL, NULL,  },
    { "listener_", NULL, 0x2, "Lgeogebra.common.gui.view.data.StatisticsModel$IStatisticsModelListener;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.view.data.StatisticsModel$IStatisticsModelListener;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiViewDataStatisticsModel = { 2, "StatisticsModel", "geogebra.common.gui.view.data", NULL, 0x1, 7, methods, 17, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiViewDataStatisticsModel;
}

@end

void GeogebraCommonGuiViewDataStatisticsModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewDataDataAnalysisModel_withGeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener_(GeogebraCommonGuiViewDataStatisticsModel *self, GeogebraCommonMainApp *app, GeogebraCommonGuiViewDataDataAnalysisModel *model, id<GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener> listener) {
  NSObject_init(self);
  self->selectedMode_ = GeogebraCommonGuiViewDataStatisticsModel_SUMMARY_STATISTICS;
  GeogebraCommonGuiViewDataStatisticsModel_set_app_(self, app);
  GeogebraCommonGuiViewDataStatisticsModel_set_daModel_(self, model);
  GeogebraCommonGuiViewDataStatisticsModel_set_listener_(self, listener);
  GeogebraCommonGuiViewDataStatisticsModel_createLabelMap(self);
}

GeogebraCommonGuiViewDataStatisticsModel *new_GeogebraCommonGuiViewDataStatisticsModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewDataDataAnalysisModel_withGeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener_(GeogebraCommonMainApp *app, GeogebraCommonGuiViewDataDataAnalysisModel *model, id<GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener> listener) {
  GeogebraCommonGuiViewDataStatisticsModel *self = [GeogebraCommonGuiViewDataStatisticsModel alloc];
  GeogebraCommonGuiViewDataStatisticsModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewDataDataAnalysisModel_withGeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener_(self, app, model, listener);
  return self;
}

void GeogebraCommonGuiViewDataStatisticsModel_createLabelMap(GeogebraCommonGuiViewDataStatisticsModel *self) {
  if (self->labelMap_ == nil) GeogebraCommonGuiViewDataStatisticsModel_setAndConsume_labelMap_(self, new_JavaUtilHashMap_init());
  [((JavaUtilHashMap *) nil_chk(self->labelMap_)) clear];
  [self->labelMap_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST) withId:[((GeogebraCommonMainApp *) nil_chk(self->app_)) getMenuWithNSString:@"TMeanTest"]];
  [self->labelMap_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT) withId:[self->app_ getMenuWithNSString:@"TMeanInterval"]];
  [self->labelMap_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_ZTEST) withId:[self->app_ getMenuWithNSString:@"ZMeanTest"]];
  [self->labelMap_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_ZINT) withId:[self->app_ getMenuWithNSString:@"ZMeanInterval"]];
  [self->labelMap_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_ANOVA) withId:[self->app_ getMenuWithNSString:@"ANOVA"]];
  [self->labelMap_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_SUMMARY_STATISTICS) withId:[self->app_ getMenuWithNSString:@"Statistics"]];
  [self->labelMap_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_2MEANS) withId:[self->app_ getMenuWithNSString:@"TTestDifferenceOfMeans"]];
  [self->labelMap_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_TTEST_PAIRED) withId:[self->app_ getMenuWithNSString:@"TTestPairedDifferences"]];
  [self->labelMap_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_2MEANS) withId:[self->app_ getMenuWithNSString:@"TEstimateDifferenceOfMeans"]];
  [self->labelMap_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonGuiViewDataStatisticsModel_INFER_TINT_PAIRED) withId:[self->app_ getMenuWithNSString:@"TEstimatePairedDifferences"]];
  GeogebraCommonGuiViewDataStatisticsModel_setAndConsume_labelMapReverse_(self, new_JavaUtilHashMap_init());
  for (JavaLangInteger * __strong key in nil_chk([self->labelMap_ keySet])) {
    [self->labelMapReverse_ putWithId:[self->labelMap_ getWithId:key] withId:key];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewDataStatisticsModel)

@implementation GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addInferenceModeWithNSString:", "addInferenceMode", "V", 0x401, NULL, NULL },
    { "selectInferenceModeWithNSString:", "selectInferenceMode", "V", 0x401, NULL, NULL },
    { "getSeparator", NULL, "Ljava.lang.String;", 0x401, NULL, NULL },
    { "updateOneVarInferenceWithInt:", "updateOneVarInference", "V", 0x401, NULL, NULL },
    { "updateTwoVarInferenceWithInt:", "updateTwoVarInference", "V", 0x401, NULL, NULL },
    { "updateAnovaTable", NULL, "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener = { 2, "IStatisticsModelListener", "geogebra.common.gui.view.data", "StatisticsModel", 0x609, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewDataStatisticsModel_IStatisticsModelListener)
