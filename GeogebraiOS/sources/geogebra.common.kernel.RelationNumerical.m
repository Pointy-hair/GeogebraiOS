//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/RelationNumerical.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/RelationNumerical.h"
#include "geogebra/common/kernel/algos/AlgoIntersectConics.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Boolean.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Comparator.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelRelationNumerical () {
 @public
  GeogebraCommonMainApp *app_;
  GeogebraCommonMainLocalization *loc_;
  GeogebraCommonKernelConstruction *cons_;
  id<JavaUtilSet> reports_;
}

- (void)register__WithJavaLangBoolean:(JavaLangBoolean *)boolres
withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum:(GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *)command
                         withNSString:(NSString *)stringres;

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)a
                           withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)b;

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
                           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b;

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)a
                           withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)b;

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                           withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B;

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *)a
                           withGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *)b;

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                         withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p;

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                                   withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path;

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                           withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)h;

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                          withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c;

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoConicPart:(GeogebraCommonKernelGeosGeoConicPart *)a
                           withGeogebraCommonKernelGeosGeoConicPart:(GeogebraCommonKernelGeosGeoConicPart *)b;

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)a
                           withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)b;

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)a
                           withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)b;

- (NSString *)equalityStringWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                       withBoolean:(jboolean)equal;

- (NSString *)linDependencyStringWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                                 withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                            withBoolean:(jboolean)dependent;

- (NSString *)incidenceStringWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)a
                           withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                      withBoolean:(jboolean)incident;

- (NSString *)incidencePerimeterStringWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)a
                                    withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                               withBoolean:(jboolean)incident;

- (NSString *)parallelStringWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)a
                            withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)b;

- (NSString *)triangleNonDegenerateStringWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                                         withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                                         withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)C;

- (NSString *)perpendicularStringWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)a
                                 withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)b
                                                         withBoolean:(jboolean)perp;

- (NSString *)intersectStringWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                             withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                        withBoolean:(jboolean)intersects;

- (NSString *)lineConicStringWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)a
                            withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)b
                                                         withInt:(jint)type;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelRelationNumerical, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelRelationNumerical, loc_, GeogebraCommonMainLocalization *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelRelationNumerical, cons_, GeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelRelationNumerical, reports_, id<JavaUtilSet>)

__attribute__((unused)) static void GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(GeogebraCommonKernelRelationNumerical *self, JavaLangBoolean *boolres, GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *command, NSString *stringres);

__attribute__((unused)) static id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoList *a, GeogebraCommonKernelGeosGeoList *b);

__attribute__((unused)) static id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelRelationNumerical *self, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b);

__attribute__((unused)) static id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelKernelNDGeoSegmentND_withGeogebraCommonKernelKernelNDGeoSegmentND_(GeogebraCommonKernelRelationNumerical *self, id<GeogebraCommonKernelKernelNDGeoSegmentND> a, id<GeogebraCommonKernelKernelNDGeoSegmentND> b);

__attribute__((unused)) static id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B);

__attribute__((unused)) static id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoVector_withGeogebraCommonKernelGeosGeoVector_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoVector *a, GeogebraCommonKernelGeosGeoVector *b);

__attribute__((unused)) static id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPolygon *p);

__attribute__((unused)) static id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelPath_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoPoint *A, id<GeogebraCommonKernelPath> path);

__attribute__((unused)) static id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoLine *h);

__attribute__((unused)) static id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoConic *c);

__attribute__((unused)) static id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoConicPart_withGeogebraCommonKernelGeosGeoConicPart_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoConicPart *a, GeogebraCommonKernelGeosGeoConicPart *b);

__attribute__((unused)) static id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoConic *a, GeogebraCommonKernelGeosGeoConic *b);

__attribute__((unused)) static id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoFunction *a, GeogebraCommonKernelGeosGeoFunction *b);

__attribute__((unused)) static NSString *GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoElement *a, GeogebraCommonKernelGeosGeoElement *b, jboolean equal);

__attribute__((unused)) static NSString *GeogebraCommonKernelRelationNumerical_linDependencyStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoElement *a, GeogebraCommonKernelGeosGeoElement *b, jboolean dependent);

__attribute__((unused)) static NSString *GeogebraCommonKernelRelationNumerical_incidenceStringWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoPoint *a, GeogebraCommonKernelGeosGeoElement *b, jboolean incident);

__attribute__((unused)) static NSString *GeogebraCommonKernelRelationNumerical_incidencePerimeterStringWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoPoint *a, GeogebraCommonKernelGeosGeoElement *b, jboolean incident);

__attribute__((unused)) static NSString *GeogebraCommonKernelRelationNumerical_parallelStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoLine *a, GeogebraCommonKernelGeosGeoLine *b);

__attribute__((unused)) static NSString *GeogebraCommonKernelRelationNumerical_perpendicularStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_withBoolean_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoLine *a, GeogebraCommonKernelGeosGeoLine *b, jboolean perp);

__attribute__((unused)) static NSString *GeogebraCommonKernelRelationNumerical_intersectStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoElement *a, GeogebraCommonKernelGeosGeoElement *b, jboolean intersects);

__attribute__((unused)) static NSString *GeogebraCommonKernelRelationNumerical_lineConicStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withInt_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoLine *a, GeogebraCommonKernelGeosGeoConic *b, jint type);

__attribute__((unused)) static void GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_initWithNSString_withInt_(GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *new_GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface GeogebraCommonKernelRelationNumerical_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(GeogebraCommonKernelRelationNumerical_Report *)r1
               withId:(GeogebraCommonKernelRelationNumerical_Report *)r2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelRelationNumerical_$1)

__attribute__((unused)) static void GeogebraCommonKernelRelationNumerical_$1_init(GeogebraCommonKernelRelationNumerical_$1 *self);

__attribute__((unused)) static GeogebraCommonKernelRelationNumerical_$1 *new_GeogebraCommonKernelRelationNumerical_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelRelationNumerical_$1)

@implementation GeogebraCommonKernelRelationNumerical

+ (id<JavaUtilSortedSet>)sortAlphabeticallyWithJavaUtilSet:(id<JavaUtilSet>)reports {
  return GeogebraCommonKernelRelationNumerical_sortAlphabeticallyWithJavaUtilSet_(reports);
}

- (void)register__WithJavaLangBoolean:(JavaLangBoolean *)boolres
withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum:(GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *)command
                         withNSString:(NSString *)stringres {
  GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, boolres, command, stringres);
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelRelationNumerical_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                           withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(a)) isDefined]) {
    GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, nil, nil, [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getPlainWithNSString:@"AisNotDefined" withNSString:[a getColoredLabel]]);
    return reports_;
  }
  else if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isDefined]) {
    GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, nil, nil, [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getPlainWithNSString:@"AisNotDefined" withNSString:[b getColoredLabel]]);
    return reports_;
  }
  if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]] && [b isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(a, [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(b, [GeogebraCommonKernelGeosGeoPoint class]));
  else if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoVector class]] && [b isKindOfClass:[GeogebraCommonKernelGeosGeoVector class]]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoVector_withGeogebraCommonKernelGeosGeoVector_(self, (GeogebraCommonKernelGeosGeoVector *) check_class_cast(a, [GeogebraCommonKernelGeosGeoVector class]), (GeogebraCommonKernelGeosGeoVector *) check_class_cast(b, [GeogebraCommonKernelGeosGeoVector class]));
  else if ([GeogebraCommonKernelKernelNDGeoSegmentND_class_() isInstance:a] && [GeogebraCommonKernelKernelNDGeoSegmentND_class_() isInstance:b]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelKernelNDGeoSegmentND_withGeogebraCommonKernelKernelNDGeoSegmentND_(self, (id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(a, @protocol(GeogebraCommonKernelKernelNDGeoSegmentND)), (id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(b, @protocol(GeogebraCommonKernelKernelNDGeoSegmentND)));
  else if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]] && [b isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, (GeogebraCommonKernelGeosGeoLine *) check_class_cast(a, [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoLine *) check_class_cast(b, [GeogebraCommonKernelGeosGeoLine class]));
  else if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoConicPart class]] && [b isKindOfClass:[GeogebraCommonKernelGeosGeoConicPart class]]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoConicPart_withGeogebraCommonKernelGeosGeoConicPart_(self, (GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(a, [GeogebraCommonKernelGeosGeoConicPart class]), (GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(b, [GeogebraCommonKernelGeosGeoConicPart class]));
  else if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoConic class]] && [b isKindOfClass:[GeogebraCommonKernelGeosGeoConic class]]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_(self, (GeogebraCommonKernelGeosGeoConic *) check_class_cast(a, [GeogebraCommonKernelGeosGeoConic class]), (GeogebraCommonKernelGeosGeoConic *) check_class_cast(b, [GeogebraCommonKernelGeosGeoConic class]));
  else if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]] && [b isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(self, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(a, [GeogebraCommonKernelGeosGeoFunction class]), (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(b, [GeogebraCommonKernelGeosGeoFunction class]));
  else if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]] && [b isKindOfClass:[GeogebraCommonKernelGeosGeoPolygon class]]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(a, [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(b, [GeogebraCommonKernelGeosGeoPolygon class]));
  else if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoPolygon class]] && [b isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(b, [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(a, [GeogebraCommonKernelGeosGeoPolygon class]));
  else if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]] && [GeogebraCommonKernelPath_class_() isInstance:b]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelPath_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(a, [GeogebraCommonKernelGeosGeoPoint class]), (id<GeogebraCommonKernelPath>) check_protocol_cast(b, @protocol(GeogebraCommonKernelPath)));
  else if ([GeogebraCommonKernelPath_class_() isInstance:a] && [b isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelPath_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(b, [GeogebraCommonKernelGeosGeoPoint class]), (id<GeogebraCommonKernelPath>) check_protocol_cast(a, @protocol(GeogebraCommonKernelPath)));
  else if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoConic class]] && [b isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_(self, (GeogebraCommonKernelGeosGeoLine *) check_class_cast(b, [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoConic *) check_class_cast(a, [GeogebraCommonKernelGeosGeoConic class]));
  else if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]] && [b isKindOfClass:[GeogebraCommonKernelGeosGeoConic class]]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_(self, (GeogebraCommonKernelGeosGeoLine *) check_class_cast(a, [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoConic *) check_class_cast(b, [GeogebraCommonKernelGeosGeoConic class]));
  else if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:a] && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:b]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(a, @protocol(GeogebraCommonKernelArithmeticNumberValue)), (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(b, @protocol(GeogebraCommonKernelArithmeticNumberValue)));
  else if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoList class]] && [b isKindOfClass:[GeogebraCommonKernelGeosGeoList class]]) return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast(a, [GeogebraCommonKernelGeosGeoList class]), (GeogebraCommonKernelGeosGeoList *) check_class_cast(b, [GeogebraCommonKernelGeosGeoList class]));
  else {
    GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, nil, nil, [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getPlainWithNSString:@"AandBcannotBeCompared" withNSString:[a getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) getColoredLabel]]);
    return reports_;
  }
}

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)a
                           withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)b {
  return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, a, b);
}

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
                           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b {
  return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, a, b);
}

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)a
                           withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)b {
  return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelKernelNDGeoSegmentND_withGeogebraCommonKernelKernelNDGeoSegmentND_(self, a, b);
}

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                           withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B {
  return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, A, B);
}

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *)a
                           withGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *)b {
  return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoVector_withGeogebraCommonKernelGeosGeoVector_(self, a, b);
}

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                         withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p {
  return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(self, A, p);
}

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                                   withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path {
  return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelPath_(self, A, path);
}

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                           withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)h {
  return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, g, h);
}

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                          withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c {
  return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_(self, g, c);
}

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoConicPart:(GeogebraCommonKernelGeosGeoConicPart *)a
                           withGeogebraCommonKernelGeosGeoConicPart:(GeogebraCommonKernelGeosGeoConicPart *)b {
  return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoConicPart_withGeogebraCommonKernelGeosGeoConicPart_(self, a, b);
}

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)a
                           withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)b {
  return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_(self, a, b);
}

- (id<JavaUtilSet>)relationWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)a
                           withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)b {
  return GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(self, a, b);
}

- (NSString *)equalityStringWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                       withBoolean:(jboolean)equal {
  return GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, a, b, equal);
}

+ (NSString *)equalityStringWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                       withBoolean:(jboolean)equal
                                withGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc {
  return GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonMainLocalization_(a, b, equal, loc);
}

- (NSString *)linDependencyStringWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                                 withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                            withBoolean:(jboolean)dependent {
  return GeogebraCommonKernelRelationNumerical_linDependencyStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, a, b, dependent);
}

- (NSString *)incidenceStringWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)a
                           withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                      withBoolean:(jboolean)incident {
  return GeogebraCommonKernelRelationNumerical_incidenceStringWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, a, b, incident);
}

- (NSString *)incidencePerimeterStringWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)a
                                    withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                               withBoolean:(jboolean)incident {
  return GeogebraCommonKernelRelationNumerical_incidencePerimeterStringWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, a, b, incident);
}

- (NSString *)parallelStringWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)a
                            withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)b {
  return GeogebraCommonKernelRelationNumerical_parallelStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, a, b);
}

+ (NSString *)parallelStringWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)a
                            withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)b
                             withGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc {
  return GeogebraCommonKernelRelationNumerical_parallelStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonMainLocalization_(a, b, loc);
}

- (NSString *)triangleNonDegenerateStringWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                                         withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                                         withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)C {
  return GeogebraCommonKernelRelationNumerical_triangleNonDegenerateStringWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonMainLocalization_(A, B, C, loc_);
}

+ (NSString *)triangleNonDegenerateStringWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                                         withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                                         withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)C
                                           withGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc {
  return GeogebraCommonKernelRelationNumerical_triangleNonDegenerateStringWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonMainLocalization_(A, B, C, loc);
}

- (NSString *)perpendicularStringWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)a
                                 withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)b
                                                         withBoolean:(jboolean)perp {
  return GeogebraCommonKernelRelationNumerical_perpendicularStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_withBoolean_(self, a, b, perp);
}

+ (NSString *)perpendicularStringWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)a
                                 withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)b
                                                         withBoolean:(jboolean)perp
                                  withGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc {
  return GeogebraCommonKernelRelationNumerical_perpendicularStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_withBoolean_withGeogebraCommonMainLocalization_(a, b, perp, loc);
}

- (NSString *)intersectStringWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                             withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                        withBoolean:(jboolean)intersects {
  return GeogebraCommonKernelRelationNumerical_intersectStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, a, b, intersects);
}

+ (NSString *)intersectStringWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                             withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                        withBoolean:(jboolean)intersects
                                 withGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc {
  return GeogebraCommonKernelRelationNumerical_intersectStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonMainLocalization_(a, b, intersects, loc);
}

- (NSString *)lineConicStringWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)a
                            withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)b
                                                         withInt:(jint)type {
  return GeogebraCommonKernelRelationNumerical_lineConicStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withInt_(self, a, b, type);
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(loc_);
  RELEASE_(cons_);
  RELEASE_(reports_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "sortAlphabeticallyWithJavaUtilSet:", "sortAlphabetically", "Ljava.util.SortedSet;", 0x9, NULL, NULL },
    { "register__WithJavaLangBoolean:withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum:withNSString:", "register", "V", 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelKernel:", "RelationNumerical", NULL, 0x1, NULL, NULL },
    { "relationWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "relation", "Ljava.util.Set;", 0x11, NULL, NULL },
    { "relationWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "relation", "Ljava.util.Set;", 0x12, NULL, NULL },
    { "relationWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "relation", "Ljava.util.Set;", 0x12, NULL, NULL },
    { "relationWithGeogebraCommonKernelKernelNDGeoSegmentND:withGeogebraCommonKernelKernelNDGeoSegmentND:", "relation", "Ljava.util.Set;", 0x12, NULL, NULL },
    { "relationWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "relation", "Ljava.util.Set;", 0x12, NULL, NULL },
    { "relationWithGeogebraCommonKernelGeosGeoVector:withGeogebraCommonKernelGeosGeoVector:", "relation", "Ljava.util.Set;", 0x12, NULL, NULL },
    { "relationWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPolygon:", "relation", "Ljava.util.Set;", 0x12, NULL, NULL },
    { "relationWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelPath:", "relation", "Ljava.util.Set;", 0x12, NULL, NULL },
    { "relationWithGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoLine:", "relation", "Ljava.util.Set;", 0x12, NULL, NULL },
    { "relationWithGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoConic:", "relation", "Ljava.util.Set;", 0x12, NULL, NULL },
    { "relationWithGeogebraCommonKernelGeosGeoConicPart:withGeogebraCommonKernelGeosGeoConicPart:", "relation", "Ljava.util.Set;", 0x12, NULL, NULL },
    { "relationWithGeogebraCommonKernelGeosGeoConic:withGeogebraCommonKernelGeosGeoConic:", "relation", "Ljava.util.Set;", 0x12, NULL, NULL },
    { "relationWithGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoFunction:", "relation", "Ljava.util.Set;", 0x12, NULL, NULL },
    { "equalityStringWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withBoolean:", "equalityString", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "equalityStringWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withBoolean:withGeogebraCommonMainLocalization:", "equalityString", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "linDependencyStringWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withBoolean:", "linDependencyString", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "incidenceStringWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoElement:withBoolean:", "incidenceString", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "incidencePerimeterStringWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoElement:withBoolean:", "incidencePerimeterString", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "parallelStringWithGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoLine:", "parallelString", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "parallelStringWithGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonMainLocalization:", "parallelString", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "triangleNonDegenerateStringWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "triangleNonDegenerateString", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "triangleNonDegenerateStringWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonMainLocalization:", "triangleNonDegenerateString", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "perpendicularStringWithGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoLine:withBoolean:", "perpendicularString", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "perpendicularStringWithGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoLine:withBoolean:withGeogebraCommonMainLocalization:", "perpendicularString", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "intersectStringWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withBoolean:", "intersectString", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "intersectStringWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withBoolean:withGeogebraCommonMainLocalization:", "intersectString", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "lineConicStringWithGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoConic:withInt:", "lineConicString", "Ljava.lang.String;", 0x12, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "loc_", NULL, 0x2, "Lgeogebra.common.main.Localization;", NULL, NULL,  },
    { "cons_", NULL, 0x2, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "reports_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Lgeogebra/common/kernel/RelationNumerical$Report;>;",  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.RelationNumerical$Report;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelRelationNumerical = { 2, "RelationNumerical", "geogebra.common.kernel", NULL, 0x1, 30, methods, 4, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelRelationNumerical;
}

@end

id<JavaUtilSortedSet> GeogebraCommonKernelRelationNumerical_sortAlphabeticallyWithJavaUtilSet_(id<JavaUtilSet> reports) {
  GeogebraCommonKernelRelationNumerical_initialize();
  id<JavaUtilComparator> myComparator = [new_GeogebraCommonKernelRelationNumerical_$1_init() autorelease];
  JavaUtilTreeSet *sortedReports = [new_JavaUtilTreeSet_initWithJavaUtilComparator_(myComparator) autorelease];
  [sortedReports addAllWithJavaUtilCollection:reports];
  return sortedReports;
}

void GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(GeogebraCommonKernelRelationNumerical *self, JavaLangBoolean *boolres, GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *command, NSString *stringres) {
  GeogebraCommonKernelRelationNumerical_Report *r = [new_GeogebraCommonKernelRelationNumerical_Report_initWithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(boolres, command, stringres) autorelease];
  [((id<JavaUtilSet>) nil_chk(self->reports_)) addWithId:r];
}

void GeogebraCommonKernelRelationNumerical_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelKernel *kernel) {
  NSObject_init(self);
  GeogebraCommonKernelRelationNumerical_set_app_(self, [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getApplication]);
  GeogebraCommonKernelRelationNumerical_set_loc_(self, [((GeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization]);
  GeogebraCommonKernelRelationNumerical_set_cons_(self, [kernel getConstruction]);
  GeogebraCommonKernelRelationNumerical_setAndConsume_reports_(self, new_JavaUtilHashSet_init());
}

GeogebraCommonKernelRelationNumerical *new_GeogebraCommonKernelRelationNumerical_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelRelationNumerical *self = [GeogebraCommonKernelRelationNumerical alloc];
  GeogebraCommonKernelRelationNumerical_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoList *a, GeogebraCommonKernelGeosGeoList *b) {
  JavaLangBoolean *bool_ = JavaLangBoolean_valueOfWithBoolean_([((GeogebraCommonKernelGeosGeoList *) nil_chk(a)) isEqualWithGeogebraCommonKernelGeosGeoElement:b]);
  NSString *str = GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, [a toGeoElement], [((GeogebraCommonKernelGeosGeoList *) nil_chk(b)) toGeoElement], [bool_ booleanValue]);
  GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, bool_, GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_get_AreEqual(), str);
  return self->reports_;
}

id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelRelationNumerical *self, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b) {
  JavaLangBoolean *bool_ = JavaLangBoolean_valueOfWithBoolean_(GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(a)) getDouble], [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) getDouble]));
  NSString *str = GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, [a toGeoElement], [b toGeoElement], [bool_ booleanValue]);
  GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, bool_, GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_get_AreEqual(), str);
  return self->reports_;
}

id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelKernelNDGeoSegmentND_withGeogebraCommonKernelKernelNDGeoSegmentND_(GeogebraCommonKernelRelationNumerical *self, id<GeogebraCommonKernelKernelNDGeoSegmentND> a, id<GeogebraCommonKernelKernelNDGeoSegmentND> b) {
  JavaLangBoolean *bool_ = JavaLangBoolean_valueOfWithBoolean_([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(a)) isEqualWithGeogebraCommonKernelKernelNDGeoSegmentND:b]);
  NSString *str = GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(a, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(b, [GeogebraCommonKernelGeosGeoElement class]), [bool_ booleanValue]);
  GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, bool_, nil, str);
  if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([(a) getDouble], [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk((b))) getDouble])) {
    str = [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AhasTheSameLengthAsB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) check_class_cast(a, [GeogebraCommonKernelGeosGeoElement class])) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(b, [GeogebraCommonKernelGeosGeoElement class])))) getColoredLabel]];
    bool_ = JavaLangBoolean_valueOfWithBoolean_(YES);
  }
  else {
    str = [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AdoesNothaveTheSameLengthAsB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) check_class_cast(a, [GeogebraCommonKernelGeosGeoElement class])) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(b, [GeogebraCommonKernelGeosGeoElement class])))) getColoredLabel]];
    bool_ = JavaLangBoolean_valueOfWithBoolean_(NO);
  }
  GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, bool_, GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_get_AreEqual(), str);
  bool_ = JavaLangBoolean_valueOfWithBoolean_([((GeogebraCommonKernelGeosGeoLine *) check_class_cast(a, [GeogebraCommonKernelGeosGeoLine class])) isParallelWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(b, [GeogebraCommonKernelGeosGeoLine class])]);
  if ([bool_ booleanValue]) {
    str = GeogebraCommonKernelRelationNumerical_parallelStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, (GeogebraCommonKernelGeosGeoLine *) check_class_cast(a, [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoLine *) check_class_cast(b, [GeogebraCommonKernelGeosGeoLine class]));
    GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, JavaLangBoolean_valueOfWithBoolean_(YES), GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_get_AreParallel(), str);
  }
  bool_ = JavaLangBoolean_valueOfWithBoolean_([((GeogebraCommonKernelGeosGeoLine *) check_class_cast(a, [GeogebraCommonKernelGeosGeoLine class])) isPerpendicularWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(b, [GeogebraCommonKernelGeosGeoLine class])]);
  if ([bool_ booleanValue]) {
    str = GeogebraCommonKernelRelationNumerical_perpendicularStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_withBoolean_(self, (GeogebraCommonKernelGeosGeoLine *) check_class_cast(a, [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoLine *) check_class_cast(b, [GeogebraCommonKernelGeosGeoLine class]), YES);
    GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, JavaLangBoolean_valueOfWithBoolean_(YES), GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_get_ArePerpendicular(), str);
  }
  return self->reports_;
}

id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B) {
  JavaLangBoolean *bool_ = JavaLangBoolean_valueOfWithBoolean_([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(A)) isEqualWithGeogebraCommonKernelGeosGeoElement:B]);
  NSString *str = GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, A, B, [bool_ booleanValue]);
  GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, bool_, GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_get_AreEqual(), str);
  return self->reports_;
}

id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoVector_withGeogebraCommonKernelGeosGeoVector_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoVector *a, GeogebraCommonKernelGeosGeoVector *b) {
  NSString *str;
  JavaLangBoolean *bool_;
  if ([((GeogebraCommonKernelGeosGeoVector *) nil_chk(a)) isEqualWithGeogebraCommonKernelGeosGeoElement:b]) {
    str = GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, a, b, YES);
    bool_ = JavaLangBoolean_valueOfWithBoolean_(YES);
  }
  else {
    str = GeogebraCommonKernelRelationNumerical_linDependencyStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, a, b, [a linDepWithGeogebraCommonKernelGeosGeoVec3D:b]);
    bool_ = JavaLangBoolean_valueOfWithBoolean_(NO);
  }
  GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, bool_, GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_get_AreEqual(), str);
  return self->reports_;
}

id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPolygon *p) {
  JavaLangBoolean *bool_ = JavaLangBoolean_valueOfWithBoolean_([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:A withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]);
  NSString *str = GeogebraCommonKernelRelationNumerical_incidencePerimeterStringWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, A, [p toGeoElement], [bool_ booleanValue]);
  GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, bool_, nil, str);
  return self->reports_;
}

id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelPath_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoPoint *A, id<GeogebraCommonKernelPath> path) {
  JavaLangBoolean *bool_ = JavaLangBoolean_valueOfWithBoolean_([((id<GeogebraCommonKernelPath>) nil_chk(path)) isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:A withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]);
  NSString *str = GeogebraCommonKernelRelationNumerical_incidenceStringWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, A, [path toGeoElement], [bool_ booleanValue]);
  GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, bool_, GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_get_IsOnPath(), str);
  return self->reports_;
}

id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoLine *h) {
  NSString *str;
  if ([((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) isEqualWithGeogebraCommonKernelGeosGeoElement:h]) {
    str = GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, g, h, YES);
    GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, JavaLangBoolean_valueOfWithBoolean_(YES), GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_get_AreEqual(), str);
  }
  else {
    if ([g isParallelWithGeogebraCommonKernelGeosGeoLine:h]) {
      str = GeogebraCommonKernelRelationNumerical_parallelStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, g, h);
      GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, JavaLangBoolean_valueOfWithBoolean_(YES), GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_get_AreParallel(), str);
    }
    else if ([g isPerpendicularWithGeogebraCommonKernelGeosGeoLine:h]) {
      str = GeogebraCommonKernelRelationNumerical_perpendicularStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_withBoolean_(self, g, h, YES);
      GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, JavaLangBoolean_valueOfWithBoolean_(YES), GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_get_ArePerpendicular(), str);
    }
    else {
      GeogebraCommonKernelGeosGeoPoint *tempPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(g->cons_) autorelease];
      GeogebraCommonKernelGeosGeoVec3D_crossWithGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_(g, h, tempPoint);
      jboolean isIntersection = [g isIntersectionPointIncidentWithGeogebraCommonKernelGeosGeoPoint:tempPoint withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION] && [((GeogebraCommonKernelGeosGeoLine *) nil_chk(h)) isIntersectionPointIncidentWithGeogebraCommonKernelGeosGeoPoint:tempPoint withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION];
      str = GeogebraCommonKernelRelationNumerical_intersectStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, g, h, isIntersection);
      GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, JavaLangBoolean_valueOfWithBoolean_(isIntersection), nil, str);
    }
  }
  return self->reports_;
}

id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoConic *c) {
  jint type;
  NSString *str;
  if ([((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) isLimitedPath] || [((GeogebraCommonKernelGeosGeoConic *) nil_chk(c)) isLimitedPath]) {
    GeogebraCommonKernelAlgosAlgoIntersectLineConic *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectLineConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_(self->cons_, g, c) autorelease];
    IOSObjectArray *points = [algo getIntersectionPoints];
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
    jboolean intersect = NO;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) {
      if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, i))) isDefined]) {
        intersect = YES;
        break;
      }
    }
    str = GeogebraCommonKernelRelationNumerical_intersectStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, g, c, intersect);
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, 0))) remove];
    GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, JavaLangBoolean_valueOfWithBoolean_(intersect), nil, str);
    return self->reports_;
  }
  if ([g isDefinedTangentWithGeogebraCommonKernelGeosGeoConic:c]) {
    str = GeogebraCommonKernelRelationNumerical_lineConicStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withInt_(self, g, c, GeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_TANGENT_LINE);
  }
  else if ([g isDefinedAsymptoteWithGeogebraCommonKernelGeosGeoConic:c]) {
    str = GeogebraCommonKernelRelationNumerical_lineConicStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withInt_(self, g, c, GeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_ASYMPTOTIC_LINE);
  }
  else {
    IOSObjectArray *points = [IOSObjectArray arrayWithObjects:(id[]){ [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease], [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease] } count:2 type:GeogebraCommonKernelGeosGeoPoint_class_()];
    type = GeogebraCommonKernelAlgosAlgoIntersectLineConic_intersectLineConicWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelGeosGeoPointArray_withDouble_(g, c, points, GeogebraCommonKernelKernel_STANDARD_PRECISION);
    str = GeogebraCommonKernelRelationNumerical_lineConicStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withInt_(self, g, c, type);
  }
  GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, nil, nil, str);
  return self->reports_;
}

id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoConicPart_withGeogebraCommonKernelGeosGeoConicPart_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoConicPart *a, GeogebraCommonKernelGeosGeoConicPart *b) {
  JavaLangBoolean *bool_ = JavaLangBoolean_valueOfWithBoolean_([((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(a)) isEqualWithGeogebraCommonKernelGeosGeoElement:b]);
  NSString *str = GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, a, b, [bool_ booleanValue]);
  GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, bool_, nil, str);
  jint type = [a getConicPartType];
  if (type == [((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(b)) getConicPartType]) {
    if (type == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC) {
      if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([(a) getDouble], [(b) getDouble])) {
        str = [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AhasTheSameLengthAsB" withNSString:[a getColoredLabel] withNSString:[b getColoredLabel]];
        GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, JavaLangBoolean_valueOfWithBoolean_(YES), nil, str);
      }
      else {
        str = [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AdoesNothaveTheSameLengthAsB" withNSString:[a getColoredLabel] withNSString:[b getColoredLabel]];
        GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, JavaLangBoolean_valueOfWithBoolean_(NO), nil, str);
      }
    }
    else {
      if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([(a) getDouble], [(b) getDouble])) {
        str = [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AhasTheSameAreaAsB" withNSString:[a getColoredLabel] withNSString:[b getColoredLabel]];
        GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, JavaLangBoolean_valueOfWithBoolean_(YES), nil, str);
      }
      else {
        str = [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AdoesNothaveTheSameAreaAsB" withNSString:[a getColoredLabel] withNSString:[b getColoredLabel]];
        GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, JavaLangBoolean_valueOfWithBoolean_(NO), nil, str);
      }
    }
  }
  return self->reports_;
}

id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoConic *a, GeogebraCommonKernelGeosGeoConic *b) {
  NSString *str;
  if ([((GeogebraCommonKernelGeosGeoConic *) nil_chk(a)) isEqualWithGeogebraCommonKernelGeosGeoElement:b]) {
    str = GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, a, b, YES);
    GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, JavaLangBoolean_valueOfWithBoolean_(YES), nil, str);
  }
  else {
    GeogebraCommonKernelAlgosAlgoIntersectConics *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectConics_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_(self->cons_, a, b) autorelease];
    IOSObjectArray *points = [algo getIntersectionPoints];
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
    jboolean intersect = NO;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) {
      if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, i))) isDefined]) {
        intersect = YES;
        break;
      }
    }
    str = GeogebraCommonKernelRelationNumerical_intersectStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, a, b, intersect);
    GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, JavaLangBoolean_valueOfWithBoolean_(YES), nil, str);
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, 0))) remove];
  }
  return self->reports_;
}

id<JavaUtilSet> GeogebraCommonKernelRelationNumerical_relationWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoFunction *a, GeogebraCommonKernelGeosGeoFunction *b) {
  JavaLangBoolean *bool_ = JavaLangBoolean_valueOfWithBoolean_([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(a)) isEqualWithGeogebraCommonKernelGeosGeoElement:b]);
  NSString *str = GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, a, b, [bool_ booleanValue]);
  GeogebraCommonKernelRelationNumerical_register__WithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, bool_, nil, str);
  return self->reports_;
}

NSString *GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoElement *a, GeogebraCommonKernelGeosGeoElement *b, jboolean equal) {
  return GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonMainLocalization_(a, b, equal, self->loc_);
}

NSString *GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonMainLocalization_(GeogebraCommonKernelGeosGeoElement *a, GeogebraCommonKernelGeosGeoElement *b, jboolean equal, GeogebraCommonMainLocalization *loc) {
  GeogebraCommonKernelRelationNumerical_initialize();
  if (equal) {
    return [((GeogebraCommonMainLocalization *) nil_chk(loc)) getPlainWithNSString:@"AandBareEqual" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) getColoredLabel]];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk(loc)) getPlainWithNSString:@"AandBareNotEqual" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) getColoredLabel]];
}

NSString *GeogebraCommonKernelRelationNumerical_linDependencyStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoElement *a, GeogebraCommonKernelGeosGeoElement *b, jboolean dependent) {
  if (dependent) {
    return [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AandBareLinearlyDependent" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) getColoredLabel]];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AandBareLinearlyIndependent" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) getColoredLabel]];
}

NSString *GeogebraCommonKernelRelationNumerical_incidenceStringWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoPoint *a, GeogebraCommonKernelGeosGeoElement *b, jboolean incident) {
  if (incident) {
    return [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AliesOnB" withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) getColoredLabel]];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AdoesNotLieOnB" withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) getColoredLabel]];
}

NSString *GeogebraCommonKernelRelationNumerical_incidencePerimeterStringWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoPoint *a, GeogebraCommonKernelGeosGeoElement *b, jboolean incident) {
  if (incident) {
    return [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AliesOnThePerimeterOfB" withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) getColoredLabel]];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AdoesNotLieOnThePerimeterOfB" withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) getColoredLabel]];
}

NSString *GeogebraCommonKernelRelationNumerical_parallelStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoLine *a, GeogebraCommonKernelGeosGeoLine *b) {
  return GeogebraCommonKernelRelationNumerical_parallelStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonMainLocalization_(a, b, self->loc_);
}

NSString *GeogebraCommonKernelRelationNumerical_parallelStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonMainLocalization_(GeogebraCommonKernelGeosGeoLine *a, GeogebraCommonKernelGeosGeoLine *b, GeogebraCommonMainLocalization *loc) {
  GeogebraCommonKernelRelationNumerical_initialize();
  return [((GeogebraCommonMainLocalization *) nil_chk(loc)) getPlainWithNSString:@"AandBareParallel" withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(b)) getColoredLabel]];
}

NSString *GeogebraCommonKernelRelationNumerical_triangleNonDegenerateStringWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonMainLocalization_(GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B, GeogebraCommonKernelGeosGeoPoint *C, GeogebraCommonMainLocalization *loc) {
  GeogebraCommonKernelRelationNumerical_initialize();
  return [((GeogebraCommonMainLocalization *) nil_chk(loc)) getPlainWithNSString:@"TriangleABCnonDegenerate" withNSString:JreStrcat("$$$", [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(A)) getColoredLabel], [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(B)) getColoredLabel], [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(C)) getColoredLabel])];
}

NSString *GeogebraCommonKernelRelationNumerical_perpendicularStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_withBoolean_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoLine *a, GeogebraCommonKernelGeosGeoLine *b, jboolean perp) {
  return GeogebraCommonKernelRelationNumerical_perpendicularStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_withBoolean_withGeogebraCommonMainLocalization_(a, b, perp, self->loc_);
}

NSString *GeogebraCommonKernelRelationNumerical_perpendicularStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_withBoolean_withGeogebraCommonMainLocalization_(GeogebraCommonKernelGeosGeoLine *a, GeogebraCommonKernelGeosGeoLine *b, jboolean perp, GeogebraCommonMainLocalization *loc) {
  GeogebraCommonKernelRelationNumerical_initialize();
  if (perp) {
    return [((GeogebraCommonMainLocalization *) nil_chk(loc)) getPlainWithNSString:@"AandBarePerpendicular" withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(b)) getColoredLabel]];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk(loc)) getPlainWithNSString:@"AandBareNotPerpendicular" withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(b)) getColoredLabel]];
}

NSString *GeogebraCommonKernelRelationNumerical_intersectStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoElement *a, GeogebraCommonKernelGeosGeoElement *b, jboolean intersects) {
  return GeogebraCommonKernelRelationNumerical_intersectStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonMainLocalization_(a, b, intersects, self->loc_);
}

NSString *GeogebraCommonKernelRelationNumerical_intersectStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonMainLocalization_(GeogebraCommonKernelGeosGeoElement *a, GeogebraCommonKernelGeosGeoElement *b, jboolean intersects, GeogebraCommonMainLocalization *loc) {
  GeogebraCommonKernelRelationNumerical_initialize();
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if (intersects) [sb appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(loc)) getPlainWithNSString:@"AIntersectsWithB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) getColoredLabel]]];
  else [sb appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(loc)) getPlainWithNSString:@"ADoesNotIntersectWithB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) getColoredLabel]]];
  return [sb description];
}

NSString *GeogebraCommonKernelRelationNumerical_lineConicStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_withInt_(GeogebraCommonKernelRelationNumerical *self, GeogebraCommonKernelGeosGeoLine *a, GeogebraCommonKernelGeosGeoConic *b, jint type) {
  switch (type) {
    case GeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_PRODUCING_LINE:
    return [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AisaDegenerateBranchOfB" withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoConic *) nil_chk(b)) getColoredLabel]];
    case GeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_ASYMPTOTIC_LINE:
    return [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AisAnAsymptoteToB" withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoConic *) nil_chk(b)) getColoredLabel]];
    case GeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_MEETING_LINE:
    return [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AintersectsWithBOnce" withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoConic *) nil_chk(b)) getColoredLabel]];
    case GeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_TANGENT_LINE:
    return [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AisaTangentToB" withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoConic *) nil_chk(b)) getColoredLabel]];
    case GeogebraCommonKernelAlgosAlgoIntersectLineConic_INTERSECTION_SECANT_LINE:
    return [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"AintersectsWithBTwice" withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoConic *) nil_chk(b)) getColoredLabel]];
    default:
    return [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) getPlainWithNSString:@"ADoesNotIntersectWithB" withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(a)) getColoredLabel] withNSString:[((GeogebraCommonKernelGeosGeoConic *) nil_chk(b)) getColoredLabel]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelRelationNumerical)

@implementation GeogebraCommonKernelRelationNumerical_Report

- (instancetype)initWithJavaLangBoolean:(JavaLangBoolean *)boolres
withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum:(GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *)command
                           withNSString:(NSString *)stringres {
  GeogebraCommonKernelRelationNumerical_Report_initWithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, boolres, command, stringres);
  return self;
}

- (jboolean)isEqual:(id)obj {
  if (obj == nil) {
    return NO;
  }
  return [((NSString *) nil_chk(self->stringResult_)) equalsIgnoreCase:((GeogebraCommonKernelRelationNumerical_Report *) nil_chk(((GeogebraCommonKernelRelationNumerical_Report *) check_class_cast(obj, [GeogebraCommonKernelRelationNumerical_Report class]))))->stringResult_];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(stringResult_)) hash]);
}

- (void)dealloc {
  RELEASE_(boolResult_);
  RELEASE_(symbolicCheck_);
  RELEASE_(stringResult_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangBoolean:withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum:withNSString:", "Report", NULL, 0x0, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "boolResult_", NULL, 0x1, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "symbolicCheck_", NULL, 0x1, "Lgeogebra.common.kernel.RelationNumerical$Report$RelationCommand;", NULL, NULL,  },
    { "stringResult_", NULL, 0x1, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.RelationNumerical$Report$RelationCommand;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelRelationNumerical_Report = { 2, "Report", "geogebra.common.kernel", "RelationNumerical", 0x9, 3, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelRelationNumerical_Report;
}

@end

void GeogebraCommonKernelRelationNumerical_Report_initWithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(GeogebraCommonKernelRelationNumerical_Report *self, JavaLangBoolean *boolres, GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *command, NSString *stringres) {
  NSObject_init(self);
  GeogebraCommonKernelRelationNumerical_Report_set_boolResult_(self, boolres);
  GeogebraCommonKernelRelationNumerical_Report_set_symbolicCheck_(self, command);
  GeogebraCommonKernelRelationNumerical_Report_set_stringResult_(self, stringres);
}

GeogebraCommonKernelRelationNumerical_Report *new_GeogebraCommonKernelRelationNumerical_Report_initWithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(JavaLangBoolean *boolres, GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *command, NSString *stringres) {
  GeogebraCommonKernelRelationNumerical_Report *self = [GeogebraCommonKernelRelationNumerical_Report alloc];
  GeogebraCommonKernelRelationNumerical_Report_initWithJavaLangBoolean_withGeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_withNSString_(self, boolres, command, stringres);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelRelationNumerical_Report)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum)

GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_values_[4];

@implementation GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_values() {
  GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_values_ count:4 type:GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_values();
}

+ (GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_initialize();
  for (int i = 0; i < 4; i++) {
    GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *e = GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum class]) {
    GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_AreEqual = new_GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_initWithNSString_withInt_(@"AreEqual", 0);
    GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_AreParallel = new_GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_initWithNSString_withInt_(@"AreParallel", 1);
    GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_ArePerpendicular = new_GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_initWithNSString_withInt_(@"ArePerpendicular", 2);
    GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_IsOnPath = new_GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_initWithNSString_withInt_(@"IsOnPath", 3);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "AreEqual", "AreEqual", 0x4019, "Lgeogebra.common.kernel.RelationNumerical$Report$RelationCommand;", &GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_AreEqual, NULL,  },
    { "AreParallel", "AreParallel", 0x4019, "Lgeogebra.common.kernel.RelationNumerical$Report$RelationCommand;", &GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_AreParallel, NULL,  },
    { "ArePerpendicular", "ArePerpendicular", 0x4019, "Lgeogebra.common.kernel.RelationNumerical$Report$RelationCommand;", &GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_ArePerpendicular, NULL,  },
    { "IsOnPath", "IsOnPath", 0x4019, "Lgeogebra.common.kernel.RelationNumerical$Report$RelationCommand;", &GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_IsOnPath, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.RelationNumerical$Report$RelationCommand;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum = { 2, "RelationCommand", "geogebra.common.kernel", "RelationNumerical$Report", 0x4019, 0, NULL, 4, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/RelationNumerical$Report$RelationCommand;>;" };
  return &_GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum;
}

@end

void GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_initWithNSString_withInt_(GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *new_GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum *self = [GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum alloc];
  GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelRelationNumerical_Report_RelationCommandEnum)

@implementation GeogebraCommonKernelRelationNumerical_$1

- (jint)compareWithId:(GeogebraCommonKernelRelationNumerical_Report *)r1
               withId:(GeogebraCommonKernelRelationNumerical_Report *)r2 {
  return [((NSString *) nil_chk(((GeogebraCommonKernelRelationNumerical_Report *) nil_chk(r1))->stringResult_)) compareToWithId:((GeogebraCommonKernelRelationNumerical_Report *) nil_chk(r2))->stringResult_];
}

- (instancetype)init {
  GeogebraCommonKernelRelationNumerical_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelRelationNumerical", "sortAlphabeticallyWithJavaUtilSet:" };
  static const J2ObjcClassInfo _GeogebraCommonKernelRelationNumerical_$1 = { 2, "", "geogebra.common.kernel", "RelationNumerical", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Comparator<Lgeogebra/common/kernel/RelationNumerical$Report;>;" };
  return &_GeogebraCommonKernelRelationNumerical_$1;
}

@end

void GeogebraCommonKernelRelationNumerical_$1_init(GeogebraCommonKernelRelationNumerical_$1 *self) {
  NSObject_init(self);
}

GeogebraCommonKernelRelationNumerical_$1 *new_GeogebraCommonKernelRelationNumerical_$1_init() {
  GeogebraCommonKernelRelationNumerical_$1 *self = [GeogebraCommonKernelRelationNumerical_$1 alloc];
  GeogebraCommonKernelRelationNumerical_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelRelationNumerical_$1)
