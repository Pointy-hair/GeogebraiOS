//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoContourPlot.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoContourPlot.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/GetCommand.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/Polynomial.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"

#define GeogebraCommonKernelAlgosAlgoContourPlot_minContours 7
#define GeogebraCommonKernelAlgosAlgoContourPlot_maxContours 25

@interface GeogebraCommonKernelAlgosAlgoContourPlot () {
 @public
  GeogebraCommonKernelGeosGeoFunctionNVar *func_;
  jdouble xmin_, xmax_, ymin_, ymax_;
  GeogebraCommonKernelGeosGeoElement *contourStep_;
  GeogebraCommonKernelGeosGeoList *list_;
  GeogebraCommonKernelArithmeticEquation *equ_;
  GeogebraCommonKernelArithmeticPolynomial *poly_;
  GeogebraCommonKernelArithmeticExpressionNode *en_;
  GeogebraCommonKernelImplicitGeoImplicitPoly *implicitPoly_;
  jdouble min_, max_, step_, xstep_, ystep_;
  jint divisionPoints_;
  jdouble calcmin_, calcmax_, calcxmin_, calcxmax_, calcymin_, calcymax_, minadded_, maxadded_;
  jboolean fixed_;
}

- (void)addToListWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                                          withDouble:(jdouble)value;

- (jdouble)checkPolyValueWithInt:(jint)i
                         withInt:(jint)j;

- (jint)calculateBoundaryWithInt:(jint)order;

- (void)addAdditionalElementsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1;

- (jboolean)movedOut;

- (jint)getVisibleContourCount;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoContourPlot, func_, GeogebraCommonKernelGeosGeoFunctionNVar *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoContourPlot, contourStep_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoContourPlot, list_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoContourPlot, equ_, GeogebraCommonKernelArithmeticEquation *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoContourPlot, poly_, GeogebraCommonKernelArithmeticPolynomial *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoContourPlot, en_, GeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoContourPlot, implicitPoly_, GeogebraCommonKernelImplicitGeoImplicitPoly *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoContourPlot, minContours, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoContourPlot, maxContours, jint)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoContourPlot_addToListWithGeogebraCommonKernelGeosGeoList_withDouble_(GeogebraCommonKernelAlgosAlgoContourPlot *self, GeogebraCommonKernelGeosGeoList *list1, jdouble value);

__attribute__((unused)) static jdouble GeogebraCommonKernelAlgosAlgoContourPlot_checkPolyValueWithInt_withInt_(GeogebraCommonKernelAlgosAlgoContourPlot *self, jint i, jint j);

__attribute__((unused)) static jint GeogebraCommonKernelAlgosAlgoContourPlot_calculateBoundaryWithInt_(GeogebraCommonKernelAlgosAlgoContourPlot *self, jint order);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoContourPlot_addAdditionalElementsWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoContourPlot *self, GeogebraCommonKernelGeosGeoList *list1);

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoContourPlot_movedOut(GeogebraCommonKernelAlgosAlgoContourPlot *self);

__attribute__((unused)) static jint GeogebraCommonKernelAlgosAlgoContourPlot_getVisibleContourCount(GeogebraCommonKernelAlgosAlgoContourPlot *self);

@implementation GeogebraCommonKernelAlgosAlgoContourPlot

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
             withGeogebraCommonKernelGeosGeoFunctionNVar:(GeogebraCommonKernelGeosGeoFunctionNVar *)func
                                              withDouble:(jdouble)xmin
                                              withDouble:(jdouble)xmax
                                              withDouble:(jdouble)ymin
                                              withDouble:(jdouble)ymax {
  GeogebraCommonKernelAlgosAlgoContourPlot_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_(self, c, label, func, xmin, xmax, ymin, ymax);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
             withGeogebraCommonKernelGeosGeoFunctionNVar:(GeogebraCommonKernelGeosGeoFunctionNVar *)func
                                              withDouble:(jdouble)xmin
                                              withDouble:(jdouble)xmax
                                              withDouble:(jdouble)ymin
                                              withDouble:(jdouble)ymax
                                              withDouble:(jdouble)contourStep {
  GeogebraCommonKernelAlgosAlgoContourPlot_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_withDouble_(self, c, label, func, xmin, xmax, ymin, ymax, contourStep);
  return self;
}

- (void)setInputOutput {
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) setTypeStringForXMLWithNSString:@"implicitpoly"];
  GeogebraCommonKernelAlgosAlgoContourPlot_set_contourStep_(self, [((GeogebraCommonKernelArithmeticMyDouble *) [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, step_) autorelease]) toGeoElement]);
  if (self->fixed_) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 1, contourStep_);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  }
  IOSObjectArray_Set(nil_chk(input_), 0, func_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:list_];
  [self setDependencies];
}

- (void)addToListWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                                          withDouble:(jdouble)value {
  GeogebraCommonKernelAlgosAlgoContourPlot_addToListWithGeogebraCommonKernelGeosGeoList_withDouble_(self, list1, value);
}

- (jdouble)checkPolyValueWithInt:(jint)i
                         withInt:(jint)j {
  return GeogebraCommonKernelAlgosAlgoContourPlot_checkPolyValueWithInt_withInt_(self, i, j);
}

- (jint)calculateBoundaryWithInt:(jint)order {
  return GeogebraCommonKernelAlgosAlgoContourPlot_calculateBoundaryWithInt_(self, order);
}

- (void)addAdditionalElementsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1 {
  GeogebraCommonKernelAlgosAlgoContourPlot_addAdditionalElementsWithGeogebraCommonKernelGeosGeoList_(self, list1);
}

- (void)compute {
  calcxmin_ = xmin_;
  calcxmax_ = xmax_;
  calcymin_ = ymin_;
  calcymax_ = ymax_;
  min_ = JavaLangDouble_MAX_VALUE;
  max_ = -JavaLangDouble_MAX_VALUE;
  GeogebraCommonKernelAlgosAlgoContourPlot_setAndConsume_implicitPoly_(self, new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelConstruction_(cons_));
  [implicitPoly_ setDefined];
  GeogebraCommonKernelArithmeticFunctionNVar *f = [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(func_)) getFunction];
  IOSObjectArray *fvars = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(f)) getFunctionVariables];
  xstep_ = (xmax_ - xmin_) / (divisionPoints_ - 1.0);
  ystep_ = (ymax_ - ymin_) / (divisionPoints_ - 1.0);
  if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(xstep_, 0) || GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(ystep_, 0)) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) setUndefined];
    return;
  }
  if (((IOSObjectArray *) nil_chk(fvars))->size_ != 2) {
    [implicitPoly_ setUndefined];
    return;
  }
  @try {
    GeogebraCommonKernelAlgosAlgoContourPlot_set_en_(self, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([f getExpression])) getCopyWithGeogebraCommonKernelKernel:kernel_]);
    GeogebraCommonKernelArithmeticFunctionVariable *xVar = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"x") autorelease];
    GeogebraCommonKernelArithmeticFunctionVariable *yVar = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"y") autorelease];
    [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en_)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(fvars, 0) withGeogebraCommonKernelArithmeticExpressionValue:xVar];
    [en_ replaceWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(fvars, 1) withGeogebraCommonKernelArithmeticExpressionValue:yVar];
    GeogebraCommonKernelAlgosAlgoContourPlot_setAndConsume_equ_(self, new_GeogebraCommonKernelArithmeticEquation_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, en_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_(kernel_) autorelease]));
    [equ_ initEquation];
    GeogebraCommonKernelAlgosAlgoContourPlot_set_poly_(self, [equ_ getNormalForm]);
    [implicitPoly_ setCoeffWithGeogebraCommonKernelArithmeticExpressionValueArray2:[((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(poly_)) getCoeff]];
    for (jint i = 0; i < divisionPoints_; i++) {
      for (jint j = 0; j < divisionPoints_; j++) {
        jdouble val = GeogebraCommonKernelAlgosAlgoContourPlot_checkPolyValueWithInt_withInt_(self, i, j);
        if (val < min_) {
          min_ = val;
        }
        if (val > max_) {
          max_ = val;
        }
      }
    }
    if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(max_, min_)) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) setUndefined];
      return;
    }
    jdouble freeTerm = 0;
    if (step_ == 0 && !fixed_) {
      freeTerm = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk([implicitPoly_ getCoeff]), 0)), 0);
      step_ = JavaLangMath_absWithDouble_((max_ - min_) / 10.0);
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(contourStep_)) setWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelArithmeticMyDouble *) [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, step_) autorelease]) toGeoElement]];
    }
    if ((min_ <= freeTerm) && (max_ >= freeTerm)) {
      for (jdouble i = freeTerm; i > min_ - step_; i -= step_) {
        GeogebraCommonKernelAlgosAlgoContourPlot_addToListWithGeogebraCommonKernelGeosGeoList_withDouble_(self, list_, i);
        minadded_ = i;
      }
      for (jdouble i = freeTerm + step_; i < max_ + step_; i += step_) {
        GeogebraCommonKernelAlgosAlgoContourPlot_addToListWithGeogebraCommonKernelGeosGeoList_withDouble_(self, list_, i);
        maxadded_ = i;
      }
    }
    else {
      minadded_ = step_ * JavaLangMath_floorWithDouble_((min_ - freeTerm) / step_);
      for (jdouble i = minadded_; i < max_ + step_; i += step_) {
        GeogebraCommonKernelAlgosAlgoContourPlot_addToListWithGeogebraCommonKernelGeosGeoList_withDouble_(self, list_, i);
        maxadded_ = i;
      }
    }
    GeogebraCommonKernelAlgosAlgoContourPlot_addAdditionalElementsWithGeogebraCommonKernelGeosGeoList_(self, list_);
  }
  @catch (GeogebraCommonMainMyError *e) {
    GeogebraCommonMainApp_debugWithNSString_([((GeogebraCommonMainMyError *) nil_chk(e)) getMessage]);
    [implicitPoly_ setUndefined];
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelImplicitGeoImplicitPoly_(implicitPoly_) autorelease]];
  }
}

- (jboolean)movedOut {
  return GeogebraCommonKernelAlgosAlgoContourPlot_movedOut(self);
}

- (jint)getVisibleContourCount {
  return GeogebraCommonKernelAlgosAlgoContourPlot_getVisibleContourCount(self);
}

- (void)update {
  xmin_ = [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) getApplication])) getActiveEuclidianView])) getXmin];
  xmax_ = [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk([cons_ getApplication])) getActiveEuclidianView])) getXmax];
  ymin_ = [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk([cons_ getApplication])) getActiveEuclidianView])) getYmin];
  ymax_ = [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk([cons_ getApplication])) getActiveEuclidianView])) getYmax];
  jint visible = GeogebraCommonKernelAlgosAlgoContourPlot_getVisibleContourCount(self);
  if (GeogebraCommonKernelAlgosAlgoContourPlot_movedOut(self)) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) clear];
    [self compute];
  }
  if (visible < GeogebraCommonKernelAlgosAlgoContourPlot_minContours && !fixed_) {
    step_ = step_ / 2;
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(contourStep_)) setWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelArithmeticMyDouble *) [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, step_) autorelease]) toGeoElement]];
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) clear];
    [self compute];
  }
  if (visible > GeogebraCommonKernelAlgosAlgoContourPlot_maxContours && !fixed_) {
    step_ = step_ * 2;
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(contourStep_)) setWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelArithmeticMyDouble *) [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, step_) autorelease]) toGeoElement]];
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) clear];
    [self compute];
  }
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) update];
}

- (id<GeogebraCommonKernelAlgosGetCommand>)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ContourPlot();
}

- (void)dealloc {
  RELEASE_(func_);
  RELEASE_(contourStep_);
  RELEASE_(list_);
  RELEASE_(equ_);
  RELEASE_(poly_);
  RELEASE_(en_);
  RELEASE_(implicitPoly_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunctionNVar:withDouble:withDouble:withDouble:withDouble:", "AlgoContourPlot", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunctionNVar:withDouble:withDouble:withDouble:withDouble:withDouble:", "AlgoContourPlot", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "addToListWithGeogebraCommonKernelGeosGeoList:withDouble:", "addToList", "V", 0x2, NULL, NULL },
    { "checkPolyValueWithInt:withInt:", "checkPolyValue", "D", 0x2, NULL, NULL },
    { "calculateBoundaryWithInt:", "calculateBoundary", "I", 0x2, NULL, NULL },
    { "addAdditionalElementsWithGeogebraCommonKernelGeosGeoList:", "addAdditionalElements", "V", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "movedOut", NULL, "Z", 0x2, NULL, NULL },
    { "getVisibleContourCount", NULL, "I", 0x2, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.GetCommand;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "func_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunctionNVar;", NULL, NULL,  },
    { "xmin_", NULL, 0x2, "D", NULL, NULL,  },
    { "xmax_", NULL, 0x2, "D", NULL, NULL,  },
    { "ymin_", NULL, 0x2, "D", NULL, NULL,  },
    { "ymax_", NULL, 0x2, "D", NULL, NULL,  },
    { "contourStep_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "list_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "equ_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Equation;", NULL, NULL,  },
    { "poly_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Polynomial;", NULL, NULL,  },
    { "en_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "implicitPoly_", NULL, 0x2, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
    { "min_", NULL, 0x2, "D", NULL, NULL,  },
    { "max_", NULL, 0x2, "D", NULL, NULL,  },
    { "step_", NULL, 0x2, "D", NULL, NULL,  },
    { "xstep_", NULL, 0x2, "D", NULL, NULL,  },
    { "ystep_", NULL, 0x2, "D", NULL, NULL,  },
    { "divisionPoints_", NULL, 0x2, "I", NULL, NULL,  },
    { "calcmin_", NULL, 0x2, "D", NULL, NULL,  },
    { "calcmax_", NULL, 0x2, "D", NULL, NULL,  },
    { "calcxmin_", NULL, 0x2, "D", NULL, NULL,  },
    { "calcxmax_", NULL, 0x2, "D", NULL, NULL,  },
    { "calcymin_", NULL, 0x2, "D", NULL, NULL,  },
    { "calcymax_", NULL, 0x2, "D", NULL, NULL,  },
    { "minadded_", NULL, 0x2, "D", NULL, NULL,  },
    { "maxadded_", NULL, 0x2, "D", NULL, NULL,  },
    { "fixed_", NULL, 0x2, "Z", NULL, NULL,  },
    { "minContours_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoContourPlot_minContours },
    { "maxContours_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoContourPlot_maxContours },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoContourPlot = { 2, "AlgoContourPlot", "geogebra.common.kernel.algos", NULL, 0x1, 12, methods, 28, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoContourPlot;
}

@end

void GeogebraCommonKernelAlgosAlgoContourPlot_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelAlgosAlgoContourPlot *self, GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelGeosGeoFunctionNVar *func, jdouble xmin, jdouble xmax, jdouble ymin, jdouble ymax) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  [((GeogebraCommonKernelConstruction *) nil_chk(c)) registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:self];
  self->step_ = 0;
  self->xmin_ = xmin;
  self->xmax_ = xmax;
  self->ymin_ = ymin;
  self->ymax_ = ymax;
  GeogebraCommonKernelAlgosAlgoContourPlot_set_func_(self, func);
  self->divisionPoints_ = 5;
  self->fixed_ = NO;
  GeogebraCommonKernelAlgosAlgoContourPlot_setAndConsume_list_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self setInputOutput];
  [self compute];
  [self->list_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoContourPlot *new_GeogebraCommonKernelAlgosAlgoContourPlot_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelGeosGeoFunctionNVar *func, jdouble xmin, jdouble xmax, jdouble ymin, jdouble ymax) {
  GeogebraCommonKernelAlgosAlgoContourPlot *self = [GeogebraCommonKernelAlgosAlgoContourPlot alloc];
  GeogebraCommonKernelAlgosAlgoContourPlot_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_(self, c, label, func, xmin, xmax, ymin, ymax);
  return self;
}

void GeogebraCommonKernelAlgosAlgoContourPlot_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelAlgosAlgoContourPlot *self, GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelGeosGeoFunctionNVar *func, jdouble xmin, jdouble xmax, jdouble ymin, jdouble ymax, jdouble contourStep) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  [((GeogebraCommonKernelConstruction *) nil_chk(c)) registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:self];
  self->step_ = contourStep;
  self->xmin_ = xmin;
  self->xmax_ = xmax;
  self->ymin_ = ymin;
  self->ymax_ = ymax;
  GeogebraCommonKernelAlgosAlgoContourPlot_set_func_(self, func);
  self->divisionPoints_ = 5;
  self->fixed_ = YES;
  GeogebraCommonKernelAlgosAlgoContourPlot_setAndConsume_list_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self setInputOutput];
  [self compute];
  [self->list_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoContourPlot *new_GeogebraCommonKernelAlgosAlgoContourPlot_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelGeosGeoFunctionNVar *func, jdouble xmin, jdouble xmax, jdouble ymin, jdouble ymax, jdouble contourStep) {
  GeogebraCommonKernelAlgosAlgoContourPlot *self = [GeogebraCommonKernelAlgosAlgoContourPlot alloc];
  GeogebraCommonKernelAlgosAlgoContourPlot_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_withDouble_(self, c, label, func, xmin, xmax, ymin, ymax, contourStep);
  return self;
}

void GeogebraCommonKernelAlgosAlgoContourPlot_addToListWithGeogebraCommonKernelGeosGeoList_withDouble_(GeogebraCommonKernelAlgosAlgoContourPlot *self, GeogebraCommonKernelGeosGeoList *list1, jdouble value) {
  GeogebraCommonKernelAlgosAlgoContourPlot_setAndConsume_equ_(self, new_GeogebraCommonKernelArithmeticEquation_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->en_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, value) autorelease]));
  [self->equ_ initEquation];
  GeogebraCommonKernelAlgosAlgoContourPlot_set_poly_(self, [self->equ_ getNormalForm]);
  [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->implicitPoly_)) setCoeffWithGeogebraCommonKernelArithmeticExpressionValueArray2:[((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(self->poly_)) getCoeff]];
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(list1)) addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelImplicitGeoImplicitPoly_(self->implicitPoly_) autorelease]];
}

jdouble GeogebraCommonKernelAlgosAlgoContourPlot_checkPolyValueWithInt_withInt_(GeogebraCommonKernelAlgosAlgoContourPlot *self, jint i, jint j) {
  jdouble x = self->xmin_ + self->xstep_ * i;
  jdouble y = self->ymin_ + self->ystep_ * j;
  return [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->implicitPoly_)) evalPolyAtWithDouble:x withDouble:y];
}

jint GeogebraCommonKernelAlgosAlgoContourPlot_calculateBoundaryWithInt_(GeogebraCommonKernelAlgosAlgoContourPlot *self, jint order) {
  jdouble val;
  jint newContours = 0;
  for (jint i = order - 1; i < self->divisionPoints_ + order - 1; i++) {
    val = GeogebraCommonKernelAlgosAlgoContourPlot_checkPolyValueWithInt_withInt_(self, i, -order);
    if (val < self->min_) {
      self->calcmin_ = val;
    }
    if (val > self->max_) {
      self->calcmax_ = val;
    }
    val = GeogebraCommonKernelAlgosAlgoContourPlot_checkPolyValueWithInt_withInt_(self, i, self->divisionPoints_ + order - 1);
    if (val < self->min_) {
      self->calcmin_ = val;
    }
    if (val > self->max_) {
      self->calcmax_ = val;
    }
    val = GeogebraCommonKernelAlgosAlgoContourPlot_checkPolyValueWithInt_withInt_(self, -order, i);
    if (val < self->min_) {
      self->calcmin_ = val;
    }
    if (val > self->max_) {
      self->calcmax_ = val;
    }
    val = GeogebraCommonKernelAlgosAlgoContourPlot_checkPolyValueWithInt_withInt_(self, self->divisionPoints_ + order - 1, i);
    if (val < self->min_) {
      self->calcmin_ = val;
    }
    if (val > self->max_) {
      self->calcmax_ = val;
    }
  }
  val = GeogebraCommonKernelAlgosAlgoContourPlot_checkPolyValueWithInt_withInt_(self, -order, -order);
  if (val < self->min_) {
    self->calcmin_ = val;
  }
  if (val > self->max_) {
    self->calcmax_ = val;
  }
  val = GeogebraCommonKernelAlgosAlgoContourPlot_checkPolyValueWithInt_withInt_(self, -order, self->divisionPoints_ + order);
  if (val < self->min_) {
    self->calcmin_ = val;
  }
  if (val > self->max_) {
    self->calcmax_ = val;
  }
  val = GeogebraCommonKernelAlgosAlgoContourPlot_checkPolyValueWithInt_withInt_(self, -order, self->divisionPoints_ + order);
  if (val < self->min_) {
    self->calcmin_ = val;
  }
  if (val > self->max_) {
    self->calcmax_ = val;
  }
  val = GeogebraCommonKernelAlgosAlgoContourPlot_checkPolyValueWithInt_withInt_(self, self->divisionPoints_ + order, self->divisionPoints_ + order);
  if (val < self->min_) {
    self->calcmin_ = val;
  }
  if (val > self->max_) {
    self->calcmax_ = val;
  }
  newContours += self->minadded_ > self->calcmin_ ? JavaLangMath_ceilWithDouble_(JavaLangMath_absWithDouble_(self->minadded_ - self->calcmin_) / self->step_) : 0;
  newContours += self->maxadded_ < self->calcmax_ ? JavaLangMath_ceilWithDouble_(JavaLangMath_absWithDouble_(self->calcmax_ - self->maxadded_) / self->step_) : 0;
  self->calcxmin_ -= self->xstep_;
  self->calcxmax_ += self->xstep_;
  self->calcymin_ -= self->ystep_;
  self->calcymax_ += self->ystep_;
  return newContours;
}

void GeogebraCommonKernelAlgosAlgoContourPlot_addAdditionalElementsWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoContourPlot *self, GeogebraCommonKernelGeosGeoList *list1) {
  self->calcmin_ = self->min_;
  self->calcmax_ = self->max_;
  GeogebraCommonKernelAlgosAlgoContourPlot_calculateBoundaryWithInt_(self, 1);
  GeogebraCommonKernelAlgosAlgoContourPlot_calculateBoundaryWithInt_(self, 2);
  for (jdouble i = self->minadded_ - self->step_; i > self->calcmin_ - self->step_; i -= self->step_) {
    GeogebraCommonKernelAlgosAlgoContourPlot_addToListWithGeogebraCommonKernelGeosGeoList_withDouble_(self, list1, i);
    self->minadded_ = i;
  }
  for (jdouble i = self->maxadded_ + self->step_; i < self->calcmax_ + self->step_; i += self->step_) {
    GeogebraCommonKernelAlgosAlgoContourPlot_addToListWithGeogebraCommonKernelGeosGeoList_withDouble_(self, list1, i);
    self->maxadded_ = i;
  }
}

jboolean GeogebraCommonKernelAlgosAlgoContourPlot_movedOut(GeogebraCommonKernelAlgosAlgoContourPlot *self) {
  return self->xmin_ < self->calcxmin_ || self->xmax_ > self->calcxmax_ || self->ymin_ < self->calcymin_ || self->ymax_ > self->calcymax_;
}

jint GeogebraCommonKernelAlgosAlgoContourPlot_getVisibleContourCount(GeogebraCommonKernelAlgosAlgoContourPlot *self) {
  jint count = 0;
  for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) size]; i++) {
    if ([((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(((GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(([self->list_ getWithInt:i]), [GeogebraCommonKernelImplicitGeoImplicitPoly class])))) isOnScreen]) {
      count++;
    }
  }
  return count;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoContourPlot)
