//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoPolynomialFromFunction.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPolynomialFromCoordinates.h"
#include "geogebra/common/kernel/algos/AlgoPolynomialFromFunction.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/parser/Parser.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"

@interface GeogebraCommonKernelAlgosAlgoPolynomialFromFunction () {
 @public
  GeogebraCommonKernelGeosGeoFunction *f_;
  GeogebraCommonKernelGeosGeoFunction *g_;
  GeogebraCommonKernelParserParser *parser_;
}

- (jdouble)evaluateToDoubleWithNSString:(NSString *)str;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolynomialFromFunction, f_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolynomialFromFunction, g_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolynomialFromFunction, parser_, GeogebraCommonKernelParserParser *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolynomialFromFunction_compute(GeogebraCommonKernelAlgosAlgoPolynomialFromFunction *self);

@implementation GeogebraCommonKernelAlgosAlgoPolynomialFromFunction

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelAlgosAlgoPolynomialFromFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Polynomial();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, f_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunction *)getPolynomial {
  return g_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoPolynomialFromFunction_compute(self);
}

- (jdouble)evaluateToDoubleWithNSString:(NSString *)str {
  @try {
    GeogebraCommonKernelArithmeticExpressionNode *en = [((GeogebraCommonKernelParserParser *) nil_chk(parser_)) parseExpressionWithNSString:str];
    return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) evaluateDouble];
  }
  @catch (JavaLangException *e) {
    return JavaLangDouble_NaN;
  }
  @catch (JavaLangError *e) {
    return JavaLangDouble_NaN;
  }
}

- (void)dealloc {
  RELEASE_(f_);
  RELEASE_(g_);
  RELEASE_(parser_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunction:", "AlgoPolynomialFromFunction", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getPolynomial", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "evaluateToDoubleWithNSString:", "evaluateToDouble", "D", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "parser_", NULL, 0x2, "Lgeogebra.common.kernel.parser.Parser;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoPolynomialFromFunction = { 2, "AlgoPolynomialFromFunction", "geogebra.common.kernel.algos", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoPolynomialFromFunction;
}

@end

void GeogebraCommonKernelAlgosAlgoPolynomialFromFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelAlgosAlgoPolynomialFromFunction *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoPolynomialFromFunction_set_f_(self, f);
  GeogebraCommonKernelAlgosAlgoPolynomialFromFunction_setAndConsume_parser_(self, new_GeogebraCommonKernelParserParser_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_([((GeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel], cons));
  GeogebraCommonKernelAlgosAlgoPolynomialFromFunction_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoPolynomialFromFunction_compute(self);
  [self->g_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoPolynomialFromFunction *new_GeogebraCommonKernelAlgosAlgoPolynomialFromFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAlgosAlgoPolynomialFromFunction *self = [GeogebraCommonKernelAlgosAlgoPolynomialFromFunction alloc];
  GeogebraCommonKernelAlgosAlgoPolynomialFromFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolynomialFromFunction_compute(GeogebraCommonKernelAlgosAlgoPolynomialFromFunction *self) {
  if (![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  GeogebraCommonKernelArithmeticFunction *inFun = [self->f_ getFunction];
  GeogebraCommonKernelArithmeticPolyFunction *poly = [inFun expandToPolyFunctionWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticFunction *) nil_chk(inFun)) getExpression] withBoolean:NO withBoolean:NO];
  if (poly == nil) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setDefinedWithBoolean:NO];
    return;
  }
  IOSDoubleArray *coeffs = [((GeogebraCommonKernelArithmeticPolyFunction *) nil_chk(poly)) getCoeffs];
  GeogebraCommonKernelArithmeticFunction *polyFun = GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_buildPolyFunctionExpressionWithGeogebraCommonKernelKernel_withDoubleArray_(self->kernel_, coeffs);
  if (polyFun == nil) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setFunctionWithGeogebraCommonKernelArithmeticFunction:polyFun];
  [self->g_ setDefinedWithBoolean:YES];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoPolynomialFromFunction)
