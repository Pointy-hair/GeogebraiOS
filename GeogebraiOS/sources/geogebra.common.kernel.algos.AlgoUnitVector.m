//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoUnitVector.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoUnitVector.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/main/Localization.h"

@implementation GeogebraCommonKernelAlgosAlgoUnitVector

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inputGeo {
  GeogebraCommonKernelAlgosAlgoUnitVector_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_(self, cons, inputGeo);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inputGeo {
  GeogebraCommonKernelAlgosAlgoUnitVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, inputGeo);
  return self;
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)createVectorWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getInputStartPoint {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputGeo_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(u_, [GeogebraCommonKernelGeosGeoElement class])];
  [self setDependencies];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_UnitVector();
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)getVector {
  return u_;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"UnitVectorOfA" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(inputGeo_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(inputGeo_);
  RELEASE_(u_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:", "AlgoUnitVector", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:", "AlgoUnitVector", NULL, 0x1, NULL, NULL },
    { "createVectorWithGeogebraCommonKernelConstruction:", "createVector", "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x404, NULL, NULL },
    { "getInputStartPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x404, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getVector", NULL, "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputGeo_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "u_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoVectorND;", NULL, NULL,  },
    { "length_", NULL, 0x4, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoUnitVector = { 2, "AlgoUnitVector", "geogebra.common.kernel.algos", NULL, 0x401, 8, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoUnitVector;
}

@end

void GeogebraCommonKernelAlgosAlgoUnitVector_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoUnitVector *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *inputGeo) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoUnitVector_set_inputGeo_(self, inputGeo);
  GeogebraCommonKernelAlgosAlgoUnitVector_set_u_(self, [self createVectorWithGeogebraCommonKernelConstruction:cons]);
  id<GeogebraCommonKernelKernelNDGeoPointND> possStartPoint = [self getInputStartPoint];
  if (possStartPoint != nil && [possStartPoint isLabelSet]) {
    @try {
      [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->u_)) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:possStartPoint];
    }
    @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    }
  }
  [self setInputOutput];
  [self compute];
}

void GeogebraCommonKernelAlgosAlgoUnitVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoUnitVector *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inputGeo) {
  GeogebraCommonKernelAlgosAlgoUnitVector_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_(self, cons, inputGeo);
  [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->u_)) setLabelWithNSString:label];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoUnitVector)
