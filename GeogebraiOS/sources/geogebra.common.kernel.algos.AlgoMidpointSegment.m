//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoMidpointSegment.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoMidpointSegment.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/algos/SymbolicParameters.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "geogebra/common/kernel/prover/polynomial/Variable.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"

@interface GeogebraCommonKernelAlgosAlgoMidpointSegment () {
 @public
  GeogebraCommonKernelGeosGeoSegment *segment_;
  GeogebraCommonKernelGeosGeoPoint *M_;
  GeogebraCommonKernelGeosGeoPoint *P_, *Q_;
  IOSObjectArray *polynomials_;
  IOSObjectArray *botanaVars_;
  IOSObjectArray *botanaPolynomials_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMidpointSegment, segment_, GeogebraCommonKernelGeosGeoSegment *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMidpointSegment, M_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMidpointSegment, P_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMidpointSegment, Q_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMidpointSegment, polynomials_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMidpointSegment, botanaVars_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMidpointSegment, botanaPolynomials_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMidpointSegment_compute(GeogebraCommonKernelAlgosAlgoMidpointSegment *self);

@implementation GeogebraCommonKernelAlgosAlgoMidpointSegment

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoSegment:(GeogebraCommonKernelGeosGeoSegment *)segment {
  GeogebraCommonKernelAlgosAlgoMidpointSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoSegment_(self, cons, label, segment);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoSegment:(GeogebraCommonKernelGeosGeoSegment *)segment {
  GeogebraCommonKernelAlgosAlgoMidpointSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoSegment_(self, cons, segment);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Midpoint();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_MIDPOINT;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, segment_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:M_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoPoint *)getP {
  return P_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getQ {
  return Q_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getPoint {
  return M_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoMidpointSegment_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"MidpointOfA" withNSString:[((GeogebraCommonKernelGeosGeoSegment *) nil_chk(segment_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (GeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  return [new_GeogebraCommonKernelAlgosSymbolicParameters_initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self) autorelease];
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if (P_ != nil && Q_ != nil) {
    [P_ getFreeVariablesWithJavaUtilHashSet:variables];
    [Q_ getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSIntArray *)getDegrees {
  if (P_ != nil && Q_ != nil) {
    IOSIntArray *degreeP = [P_ getDegrees];
    IOSIntArray *degreeQ = [Q_ getDegrees];
    IOSIntArray *result = [IOSIntArray arrayWithLength:3];
    *IOSIntArray_GetRef(result, 0) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(nil_chk(degreeP), 0) + IOSIntArray_Get(nil_chk(degreeQ), 2), IOSIntArray_Get(degreeQ, 0) + IOSIntArray_Get(degreeP, 2));
    *IOSIntArray_GetRef(result, 1) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degreeP, 1) + IOSIntArray_Get(degreeQ, 2), IOSIntArray_Get(degreeQ, 1) + IOSIntArray_Get(degreeP, 2));
    *IOSIntArray_GetRef(result, 2) = IOSIntArray_Get(degreeP, 2) + IOSIntArray_Get(degreeQ, 2);
    return result;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if (P_ != nil && Q_ != nil) {
    IOSObjectArray *pP = [P_ getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *pQ = [Q_ getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *coords = [IOSObjectArray arrayWithLength:3 type:JavaMathBigInteger_class_()];
    IOSObjectArray_Set(coords, 0, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(pP), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(pQ), 2)])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(pQ, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(pP, 2)]]);
    IOSObjectArray_Set(coords, 1, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(pP, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(pQ, 2)])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(pQ, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(pP, 2)]]);
    IOSObjectArray_Set(coords, 2, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(pP, 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(pQ, 2)])) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(2)]);
    return coords;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getPolynomials {
  if (polynomials_ != nil) {
    return polynomials_;
  }
  if (P_ != nil && Q_ != nil) {
    IOSObjectArray *pP = [P_ getPolynomials];
    IOSObjectArray *pQ = [Q_ getPolynomials];
    GeogebraCommonKernelAlgosAlgoMidpointSegment_setAndConsume_polynomials_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelProverPolynomialPolynomial_class_()]);
    IOSObjectArray_Set(polynomials_, 0, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(pP), 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(pQ), 2)])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(pQ, 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(pP, 2)]]);
    IOSObjectArray_Set(polynomials_, 1, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(pP, 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(pQ, 2)])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(pQ, 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(pP, 2)]]);
    IOSObjectArray_Set(polynomials_, 2, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(pP, 2))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(pQ, 2)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(2) autorelease]]);
    return polynomials_;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return botanaVars_;
}

- (IOSObjectArray *)getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (botanaPolynomials_ != nil) {
    return botanaPolynomials_;
  }
  if (P_ == nil || Q_ == nil) @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  if (botanaVars_ == nil) {
    GeogebraCommonKernelAlgosAlgoMidpointSegment_setAndConsume_botanaVars_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelProverPolynomialVariable_class_()]);
    IOSObjectArray_SetAndConsume(botanaVars_, 0, new_GeogebraCommonKernelProverPolynomialVariable_init());
    IOSObjectArray_SetAndConsume(botanaVars_, 1, new_GeogebraCommonKernelProverPolynomialVariable_init());
  }
  GeogebraCommonKernelAlgosAlgoMidpointSegment_set_botanaPolynomials_(self, GeogebraCommonKernelAlgosSymbolicParameters_botanaPolynomialsMidpointWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelProverPolynomialVariableArray_(P_, Q_, botanaVars_));
  return botanaPolynomials_;
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnMidpointSegmentWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (void)dealloc {
  RELEASE_(segment_);
  RELEASE_(M_);
  RELEASE_(P_);
  RELEASE_(Q_);
  RELEASE_(polynomials_);
  RELEASE_(botanaVars_);
  RELEASE_(botanaPolynomials_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoSegment:", "AlgoMidpointSegment", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoSegment:", "AlgoMidpointSegment", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getP", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getQ", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lgeogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lgeogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "segment_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoSegment;", NULL, NULL,  },
    { "M_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "P_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "Q_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "polynomials_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
    { "botanaVars_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Variable;", NULL, NULL,  },
    { "botanaPolynomials_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoMidpointSegment = { 2, "AlgoMidpointSegment", "geogebra.common.kernel.algos", NULL, 0x1, 19, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoMidpointSegment;
}

@end

void GeogebraCommonKernelAlgosAlgoMidpointSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoSegment_(GeogebraCommonKernelAlgosAlgoMidpointSegment *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoSegment *segment) {
  GeogebraCommonKernelAlgosAlgoMidpointSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoSegment_(self, cons, segment);
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->M_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoMidpointSegment *new_GeogebraCommonKernelAlgosAlgoMidpointSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoSegment_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoSegment *segment) {
  GeogebraCommonKernelAlgosAlgoMidpointSegment *self = [GeogebraCommonKernelAlgosAlgoMidpointSegment alloc];
  GeogebraCommonKernelAlgosAlgoMidpointSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoSegment_(self, cons, label, segment);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMidpointSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoSegment_(GeogebraCommonKernelAlgosAlgoMidpointSegment *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoSegment *segment) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoMidpointSegment_set_segment_(self, segment);
  GeogebraCommonKernelAlgosAlgoMidpointSegment_setAndConsume_M_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoMidpointSegment_set_P_(self, [((GeogebraCommonKernelGeosGeoSegment *) nil_chk(segment)) getStartPoint]);
  GeogebraCommonKernelAlgosAlgoMidpointSegment_set_Q_(self, [segment getEndPoint]);
  GeogebraCommonKernelAlgosAlgoMidpointSegment_compute(self);
}

GeogebraCommonKernelAlgosAlgoMidpointSegment *new_GeogebraCommonKernelAlgosAlgoMidpointSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoSegment_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoSegment *segment) {
  GeogebraCommonKernelAlgosAlgoMidpointSegment *self = [GeogebraCommonKernelAlgosAlgoMidpointSegment alloc];
  GeogebraCommonKernelAlgosAlgoMidpointSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoSegment_(self, cons, segment);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMidpointSegment_compute(GeogebraCommonKernelAlgosAlgoMidpointSegment *self) {
  jboolean pInf = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->P_)) isInfinite];
  jboolean qInf = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->Q_)) isInfinite];
  if (!pInf && !qInf) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->M_)) setCoordsWithDouble:(self->P_->inhomX_ + self->Q_->inhomX_) / 2.0 withDouble:(self->P_->inhomY_ + self->Q_->inhomY_) / 2.0 withDouble:1.0];
  }
  else if (pInf && qInf) [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->M_)) setUndefined];
  else if (pInf) [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->M_)) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:self->P_];
  else [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->M_)) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:self->Q_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoMidpointSegment)
