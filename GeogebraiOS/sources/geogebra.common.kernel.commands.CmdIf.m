//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdIf.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoDependentFunction.h"
#include "geogebra/common/kernel/algos/AlgoDependentFunctionNVar.h"
#include "geogebra/common/kernel/algos/AlgoIf.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/arithmetic/Inspecting.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/MyNumberPair.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/CmdIf.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoFunctionable.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelCommandsCmdIf ()

- (jint)replaceVariablesWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)argument
                                                       withNSStringArray:(IOSObjectArray *)varName
                 withGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv;

- (jint)checkAddWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                    withJavaUtilArrayList:(JavaUtilArrayList *)functions
                   withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)fn
                                                  withInt:(jint)vars;

- (IOSObjectArray *)specialFunctionWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                                           withNSStringArray:(IOSObjectArray *)varName
                     withGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv;

- (id<GeogebraCommonKernelArithmeticFunctionalNVar>)resolveFunctionWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                                                                                     withInt:(jint)i
                                                     withGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv
                                                                                                     withInt:(jint)vars;

- (GeogebraCommonKernelGeosGeoElement *)IfWithNSString:(NSString *)label
                                 withJavaUtilArrayList:(JavaUtilArrayList *)conditions
                                 withJavaUtilArrayList:(JavaUtilArrayList *)functions
                                               withInt:(jint)vars;

- (GeogebraCommonKernelArithmeticExpressionNode *)wrapWithGeogebraCommonKernelArithmeticFunctionalNVar:(id<GeogebraCommonKernelArithmeticFunctionalNVar>)boolFun
                                               withGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv
                                                                                           withBoolean:(jboolean)mayUseIndependent;

@end

__attribute__((unused)) static jint GeogebraCommonKernelCommandsCmdIf_replaceVariablesWithGeogebraCommonKernelArithmeticExpressionNode_withNSStringArray_withGeogebraCommonKernelArithmeticFunctionVariableArray_(GeogebraCommonKernelCommandsCmdIf *self, GeogebraCommonKernelArithmeticExpressionNode *argument, IOSObjectArray *varName, IOSObjectArray *fv);

__attribute__((unused)) static jint GeogebraCommonKernelCommandsCmdIf_checkAddWithGeogebraCommonKernelArithmeticCommand_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoElement_withInt_(GeogebraCommonKernelCommandsCmdIf *self, GeogebraCommonKernelArithmeticCommand *c, JavaUtilArrayList *functions, GeogebraCommonKernelGeosGeoElement *fn, jint vars);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsCmdIf_specialFunctionWithGeogebraCommonKernelArithmeticCommand_withNSStringArray_withGeogebraCommonKernelArithmeticFunctionVariableArray_(GeogebraCommonKernelCommandsCmdIf *self, GeogebraCommonKernelArithmeticCommand *c, IOSObjectArray *varName, IOSObjectArray *fv);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticFunctionalNVar> GeogebraCommonKernelCommandsCmdIf_resolveFunctionWithGeogebraCommonKernelArithmeticCommand_withInt_withGeogebraCommonKernelArithmeticFunctionVariableArray_withInt_(GeogebraCommonKernelCommandsCmdIf *self, GeogebraCommonKernelArithmeticCommand *c, jint i, IOSObjectArray *fv, jint vars);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelCommandsCmdIf_IfWithNSString_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(GeogebraCommonKernelCommandsCmdIf *self, NSString *label, JavaUtilArrayList *conditions, JavaUtilArrayList *functions, jint vars);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelCommandsCmdIf_wrapWithGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(GeogebraCommonKernelCommandsCmdIf *self, id<GeogebraCommonKernelArithmeticFunctionalNVar> boolFun, IOSObjectArray *fv, jboolean mayUseIndependent);

@implementation GeogebraCommonKernelCommandsCmdIf

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdIf_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  if (n < 2) {
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
  if ([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getConstruction])) getRegisteredFunctionVariable] != nil) {
    IOSObjectArray *varName = [((GeogebraCommonKernelConstruction *) nil_chk([kernelA_ getConstruction])) getRegisteredFunctionVariables];
    IOSObjectArray *fv = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(varName))->size_ type:GeogebraCommonKernelArithmeticFunctionVariable_class_()];
    jint r = GeogebraCommonKernelCommandsCmdIf_replaceVariablesWithGeogebraCommonKernelArithmeticExpressionNode_withNSStringArray_withGeogebraCommonKernelArithmeticFunctionVariableArray_(self, [c getArgumentWithInt:0], varName, fv);
    if (r > 0) {
      return GeogebraCommonKernelCommandsCmdIf_specialFunctionWithGeogebraCommonKernelArithmeticCommand_withNSStringArray_withGeogebraCommonKernelArithmeticFunctionVariableArray_(self, c, varName, fv);
    }
  }
  arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  if ([IOSObjectArray_Get(nil_chk(arg), 0) isKindOfClass:[GeogebraCommonKernelGeosGeoBoolean class]]) {
    JavaUtilArrayList *cond = [new_JavaUtilArrayList_init() autorelease];
    JavaUtilArrayList *alternatives = [new_JavaUtilArrayList_init() autorelease];
    for (jint i = 0; i < n - 1; i += 2) {
      if ([IOSObjectArray_Get(arg, i) isKindOfClass:[GeogebraCommonKernelGeosGeoBoolean class]]) {
        [cond addWithId:(GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, i), [GeogebraCommonKernelGeosGeoBoolean class])];
      }
      else {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, i)];
      }
      [alternatives addWithId:IOSObjectArray_Get(arg, i + 1)];
    }
    if (n % 2 == 1) {
      [alternatives addWithId:IOSObjectArray_Get(arg, n - 1)];
    }
    return [((GeogebraCommonKernelAlgosAlgoIf *) [new_GeogebraCommonKernelAlgosAlgoIf_initWithGeogebraCommonKernelConstruction_withNSString_withJavaUtilArrayList_withJavaUtilArrayList_(cons_, [c getLabel], cond, alternatives) autorelease]) getOutput];
  }
  JavaUtilArrayList *conditions = [new_JavaUtilArrayList_init() autorelease];
  JavaUtilArrayList *functions = [new_JavaUtilArrayList_init() autorelease];
  jint vars = 1;
  for (jint i = 0; i < n - 1; i += 2) {
    if ([GeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:IOSObjectArray_Get(arg, i)] && [((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(IOSObjectArray_Get(arg, i), @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))))) isBooleanFunction]) {
      [conditions addWithId:(id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(IOSObjectArray_Get(arg, i), @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))];
      vars = vars > 1 ? vars : ((IOSObjectArray *) nil_chk([((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(IOSObjectArray_Get(arg, i), @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))))) getFunctionVariables]))->size_;
    }
    else {
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, i)];
    }
    vars = GeogebraCommonKernelCommandsCmdIf_checkAddWithGeogebraCommonKernelArithmeticCommand_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoElement_withInt_(self, c, functions, IOSObjectArray_Get(arg, i + 1), vars);
  }
  if (n % 2 == 1) {
    vars = GeogebraCommonKernelCommandsCmdIf_checkAddWithGeogebraCommonKernelArithmeticCommand_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoElement_withInt_(self, c, functions, IOSObjectArray_Get(arg, n - 1), vars);
  }
  return [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIf_IfWithNSString_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, [c getLabel], conditions, functions, vars) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

- (jint)replaceVariablesWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)argument
                                                       withNSStringArray:(IOSObjectArray *)varName
                 withGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv {
  return GeogebraCommonKernelCommandsCmdIf_replaceVariablesWithGeogebraCommonKernelArithmeticExpressionNode_withNSStringArray_withGeogebraCommonKernelArithmeticFunctionVariableArray_(self, argument, varName, fv);
}

- (jint)checkAddWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                    withJavaUtilArrayList:(JavaUtilArrayList *)functions
                   withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)fn
                                                  withInt:(jint)vars {
  return GeogebraCommonKernelCommandsCmdIf_checkAddWithGeogebraCommonKernelArithmeticCommand_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoElement_withInt_(self, c, functions, fn, vars);
}

- (IOSObjectArray *)specialFunctionWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                                           withNSStringArray:(IOSObjectArray *)varName
                     withGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv {
  return GeogebraCommonKernelCommandsCmdIf_specialFunctionWithGeogebraCommonKernelArithmeticCommand_withNSStringArray_withGeogebraCommonKernelArithmeticFunctionVariableArray_(self, c, varName, fv);
}

- (id<GeogebraCommonKernelArithmeticFunctionalNVar>)resolveFunctionWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                                                                                     withInt:(jint)i
                                                     withGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv
                                                                                                     withInt:(jint)vars {
  return GeogebraCommonKernelCommandsCmdIf_resolveFunctionWithGeogebraCommonKernelArithmeticCommand_withInt_withGeogebraCommonKernelArithmeticFunctionVariableArray_withInt_(self, c, i, fv, vars);
}

- (GeogebraCommonKernelGeosGeoElement *)IfWithNSString:(NSString *)label
                                 withJavaUtilArrayList:(JavaUtilArrayList *)conditions
                                 withJavaUtilArrayList:(JavaUtilArrayList *)functions
                                               withInt:(jint)vars {
  return GeogebraCommonKernelCommandsCmdIf_IfWithNSString_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, label, conditions, functions, vars);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)wrapWithGeogebraCommonKernelArithmeticFunctionalNVar:(id<GeogebraCommonKernelArithmeticFunctionalNVar>)boolFun
                                               withGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv
                                                                                           withBoolean:(jboolean)mayUseIndependent {
  return GeogebraCommonKernelCommandsCmdIf_wrapWithGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, boolFun, fv, mayUseIndependent);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdIf", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "replaceVariablesWithGeogebraCommonKernelArithmeticExpressionNode:withNSStringArray:withGeogebraCommonKernelArithmeticFunctionVariableArray:", "replaceVariables", "I", 0x2, NULL, NULL },
    { "checkAddWithGeogebraCommonKernelArithmeticCommand:withJavaUtilArrayList:withGeogebraCommonKernelGeosGeoElement:withInt:", "checkAdd", "I", 0x2, NULL, NULL },
    { "specialFunctionWithGeogebraCommonKernelArithmeticCommand:withNSStringArray:withGeogebraCommonKernelArithmeticFunctionVariableArray:", "specialFunction", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "resolveFunctionWithGeogebraCommonKernelArithmeticCommand:withInt:withGeogebraCommonKernelArithmeticFunctionVariableArray:withInt:", "resolveFunction", "Lgeogebra.common.kernel.arithmetic.FunctionalNVar;", 0x2, NULL, NULL },
    { "IfWithNSString:withJavaUtilArrayList:withJavaUtilArrayList:withInt:", "If", "Lgeogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
    { "wrapWithGeogebraCommonKernelArithmeticFunctionalNVar:withGeogebraCommonKernelArithmeticFunctionVariableArray:withBoolean:", "wrap", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdIf = { 2, "CmdIf", "geogebra.common.kernel.commands", NULL, 0x1, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdIf;
}

@end

void GeogebraCommonKernelCommandsCmdIf_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdIf *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdIf *new_GeogebraCommonKernelCommandsCmdIf_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdIf *self = [GeogebraCommonKernelCommandsCmdIf alloc];
  GeogebraCommonKernelCommandsCmdIf_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

jint GeogebraCommonKernelCommandsCmdIf_replaceVariablesWithGeogebraCommonKernelArithmeticExpressionNode_withNSStringArray_withGeogebraCommonKernelArithmeticFunctionVariableArray_(GeogebraCommonKernelCommandsCmdIf *self, GeogebraCommonKernelArithmeticExpressionNode *argument, IOSObjectArray *varName, IOSObjectArray *fv) {
  jint rep = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(varName))->size_; i++) {
    if (IOSObjectArray_Get(nil_chk(fv), i) == nil) {
      IOSObjectArray_SetAndConsume(fv, i, new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernelA_, IOSObjectArray_Get(varName, i)));
    }
    rep += [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(argument)) replaceVariablesWithNSString:IOSObjectArray_Get(varName, i) withGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(fv, i)];
  }
  return rep;
}

jint GeogebraCommonKernelCommandsCmdIf_checkAddWithGeogebraCommonKernelArithmeticCommand_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoElement_withInt_(GeogebraCommonKernelCommandsCmdIf *self, GeogebraCommonKernelArithmeticCommand *c, JavaUtilArrayList *functions, GeogebraCommonKernelGeosGeoElement *fn, jint vars) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(fn)) isGeoFunctionable] && !([fn isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]])) {
    [((JavaUtilArrayList *) nil_chk(functions)) addWithId:[((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(fn, @protocol(GeogebraCommonKernelGeosGeoFunctionable))) getGeoFunction]];
    return vars;
  }
  else if ([fn isKindOfClass:[GeogebraCommonKernelGeosGeoFunctionNVar class]]) {
    [((JavaUtilArrayList *) nil_chk(functions)) addWithId:(GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(fn, [GeogebraCommonKernelGeosGeoFunctionNVar class])];
    return 2;
  }
  else {
    @throw [self argErrWithGeogebraCommonMainApp:self->app_ withNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withGeogebraCommonKernelArithmeticExpressionValue:fn];
  }
}

IOSObjectArray *GeogebraCommonKernelCommandsCmdIf_specialFunctionWithGeogebraCommonKernelArithmeticCommand_withNSStringArray_withGeogebraCommonKernelArithmeticFunctionVariableArray_(GeogebraCommonKernelCommandsCmdIf *self, GeogebraCommonKernelArithmeticCommand *c, IOSObjectArray *varName, IOSObjectArray *fv) {
  jboolean oldFlag = [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernelA_)) getConstruction])) isSuppressLabelsActive];
  [((GeogebraCommonKernelConstruction *) nil_chk([self->kernelA_ getConstruction])) setSuppressLabelCreationWithBoolean:YES];
  JavaUtilArrayList *conditions = [new_JavaUtilArrayList_init() autorelease];
  JavaUtilArrayList *functions = [new_JavaUtilArrayList_init() autorelease];
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  jint vars = ((IOSObjectArray *) nil_chk(varName))->size_;
  for (jint i = 0; i < n - 1; i += 2) {
    GeogebraCommonKernelCommandsCmdIf_replaceVariablesWithGeogebraCommonKernelArithmeticExpressionNode_withNSStringArray_withGeogebraCommonKernelArithmeticFunctionVariableArray_(self, [c getArgumentWithInt:i], varName, fv);
    id<GeogebraCommonKernelArithmeticFunctionalNVar> current = GeogebraCommonKernelCommandsCmdIf_resolveFunctionWithGeogebraCommonKernelArithmeticCommand_withInt_withGeogebraCommonKernelArithmeticFunctionVariableArray_withInt_(self, c, i, fv, vars);
    if ([((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(current)) isBooleanFunction]) {
      [conditions addWithId:current];
    }
    else {
      @throw [self argErrWithGeogebraCommonMainApp:self->app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:current];
    }
    GeogebraCommonKernelCommandsCmdIf_replaceVariablesWithGeogebraCommonKernelArithmeticExpressionNode_withNSStringArray_withGeogebraCommonKernelArithmeticFunctionVariableArray_(self, [c getArgumentWithInt:i + 1], varName, fv);
    GeogebraCommonKernelCommandsCmdIf_checkAddWithGeogebraCommonKernelArithmeticCommand_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoElement_withInt_(self, c, functions, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(GeogebraCommonKernelCommandsCmdIf_resolveFunctionWithGeogebraCommonKernelArithmeticCommand_withInt_withGeogebraCommonKernelArithmeticFunctionVariableArray_withInt_(self, c, i + 1, fv, vars), [GeogebraCommonKernelGeosGeoElement class]), vars);
  }
  if (n % 2 == 1) {
    GeogebraCommonKernelCommandsCmdIf_replaceVariablesWithGeogebraCommonKernelArithmeticExpressionNode_withNSStringArray_withGeogebraCommonKernelArithmeticFunctionVariableArray_(self, [c getArgumentWithInt:n - 1], varName, fv);
    GeogebraCommonKernelCommandsCmdIf_checkAddWithGeogebraCommonKernelArithmeticCommand_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoElement_withInt_(self, c, functions, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(GeogebraCommonKernelCommandsCmdIf_resolveFunctionWithGeogebraCommonKernelArithmeticCommand_withInt_withGeogebraCommonKernelArithmeticFunctionVariableArray_withInt_(self, c, n - 1, fv, vars), [GeogebraCommonKernelGeosGeoElement class]), vars);
  }
  [((GeogebraCommonKernelConstruction *) nil_chk([self->kernelA_ getConstruction])) setSuppressLabelCreationWithBoolean:oldFlag];
  return [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdIf_IfWithNSString_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, [c getLabel], conditions, functions, vars) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

id<GeogebraCommonKernelArithmeticFunctionalNVar> GeogebraCommonKernelCommandsCmdIf_resolveFunctionWithGeogebraCommonKernelArithmeticCommand_withInt_withGeogebraCommonKernelArithmeticFunctionVariableArray_withInt_(GeogebraCommonKernelCommandsCmdIf *self, GeogebraCommonKernelArithmeticCommand *c, jint i, IOSObjectArray *fv, jint vars) {
  [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentWithInt:i])) resolveVariables];
  if ([[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:i])) unwrap] isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
    return (GeogebraCommonKernelGeosGeoFunction *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:i])) unwrap], [GeogebraCommonKernelGeosGeoFunction class]);
  }
  if (vars < 2) {
    return (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernelA_)) getAlgebraProcessor])) processFunctionWithGeogebraCommonKernelArithmeticFunction:[new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_([c getArgumentWithInt:i], IOSObjectArray_Get(nil_chk(fv), 0)) autorelease]]), 0), [GeogebraCommonKernelGeosGeoFunction class]);
  }
  return (GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernelA_)) getAlgebraProcessor])) processFunctionNVarWithGeogebraCommonKernelArithmeticFunctionNVar:[new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_([c getArgumentWithInt:i], fv) autorelease]]), 0), [GeogebraCommonKernelGeosGeoFunctionNVar class]);
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelCommandsCmdIf_IfWithNSString_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(GeogebraCommonKernelCommandsCmdIf *self, NSString *label, JavaUtilArrayList *conditions, JavaUtilArrayList *functions, jint vars) {
  IOSObjectArray *fv = [((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk([((JavaUtilArrayList *) nil_chk(conditions)) getWithInt:0])) getFunctionVariables];
  GeogebraCommonKernelArithmeticExpressionNode *expr;
  jboolean mayUseIndependent = YES;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(functions)) size]; i++) {
    if ([((id<GeogebraCommonKernelArithmeticInspecting>) nil_chk(GeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_())) checkWithGeogebraCommonKernelArithmeticExpressionValue:[functions getWithInt:i]] || (i < [conditions size] && [GeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_() checkWithGeogebraCommonKernelArithmeticExpressionValue:[conditions getWithInt:i]])) {
      mayUseIndependent = NO;
      break;
    }
  }
  if ([functions size] == 1) {
    expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernelA_, GeogebraCommonKernelCommandsCmdIf_wrapWithGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, [conditions getWithInt:0], fv, mayUseIndependent), GeogebraCommonPluginOperationEnum_get_IF(), GeogebraCommonKernelCommandsCmdIf_wrapWithGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, [functions getWithInt:0], fv, mayUseIndependent)) autorelease];
  }
  else if ([functions size] == 2 && [conditions size] == 1) {
    expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernelA_, [new_GeogebraCommonKernelArithmeticMyNumberPair_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernelA_, GeogebraCommonKernelCommandsCmdIf_wrapWithGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, [conditions getWithInt:0], fv, mayUseIndependent), GeogebraCommonKernelCommandsCmdIf_wrapWithGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, [functions getWithInt:0], fv, mayUseIndependent)) autorelease], GeogebraCommonPluginOperationEnum_get_IF_ELSE(), GeogebraCommonKernelCommandsCmdIf_wrapWithGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, [functions getWithInt:1], fv, mayUseIndependent)) autorelease];
  }
  else {
    GeogebraCommonKernelArithmeticMyList *cond = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(self->kernelA_) autorelease], *funs = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(self->kernelA_) autorelease];
    for (id<GeogebraCommonKernelArithmeticFunctionalNVar> __strong f in conditions) {
      [cond addListElementWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCmdIf_wrapWithGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, f, fv, mayUseIndependent)];
    }
    for (id<GeogebraCommonKernelArithmeticFunctionalNVar> __strong f in functions) {
      [funs addListElementWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCmdIf_wrapWithGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(self, f, fv, mayUseIndependent)];
    }
    expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernelA_, cond, GeogebraCommonPluginOperationEnum_get_IF_LIST(), funs) autorelease];
  }
  if (vars < 2) {
    GeogebraCommonKernelArithmeticFunction *fun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(expr, IOSObjectArray_Get(nil_chk(fv), 0)) autorelease];
    if (mayUseIndependent) {
      return [new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunction_(self->cons_, label, fun) autorelease];
    }
    GeogebraCommonKernelAlgosAlgoDependentFunction *algo = [new_GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunction_(self->cons_, label, fun) autorelease];
    return [algo getFunction];
  }
  GeogebraCommonKernelArithmeticFunctionNVar *fun = [new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_(expr, fv) autorelease];
  if (mayUseIndependent) {
    return [new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(self->cons_, label, fun) autorelease];
  }
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar *algo = [new_GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(self->cons_, label, fun) autorelease];
  return [algo getFunction];
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelCommandsCmdIf_wrapWithGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelArithmeticFunctionVariableArray_withBoolean_(GeogebraCommonKernelCommandsCmdIf *self, id<GeogebraCommonKernelArithmeticFunctionalNVar> boolFun, IOSObjectArray *fv, jboolean mayUseIndependent) {
  if (!mayUseIndependent) {
    if (((IOSObjectArray *) nil_chk(fv))->size_ == 1) {
      return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernelA_, boolFun, GeogebraCommonPluginOperationEnum_get_FUNCTION(), IOSObjectArray_Get(fv, 0)) autorelease];
    }
    GeogebraCommonKernelArithmeticMyList *arg = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(self->kernelA_) autorelease];
    for (jint i = 0; i < fv->size_; i++) {
      [arg addListElementWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(fv, i)];
    }
    return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernelA_, boolFun, GeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR(), arg) autorelease];
  }
  id<GeogebraCommonKernelArithmeticExpressionValue> exp = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(boolFun)) getFunctionExpression])) deepCopyWithGeogebraCommonKernelKernel:self->kernelA_];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fv))->size_; i++) {
    exp = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_getReplacerWithGeogebraCommonKernelArithmeticFunctionVariable_(IOSObjectArray_Get(fv, i))];
  }
  return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(exp)) wrap];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdIf)
