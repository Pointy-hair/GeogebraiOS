//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoNpR.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/AlgoNpR.h"
#include "geogebra/common/util/MyMath2.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"

@interface GeogebraCommonKernelStatisticsAlgoNpR () {
 @public
  GeogebraCommonKernelGeosGeoNumeric *result_;
  id<GeogebraCommonKernelArithmeticNumberValue> num1_, num2_;
}

+ (jdouble)NpRWithDouble:(jdouble)n
              withDouble:(jdouble)r;

+ (jdouble)NpRBigWithDouble:(jdouble)n
                 withDouble:(jdouble)r;

+ (jdouble)NpRLogWithDouble:(jdouble)n
                 withDouble:(jdouble)r;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoNpR, result_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoNpR, num1_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoNpR, num2_, id<GeogebraCommonKernelArithmeticNumberValue>)

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoNpR_NpRWithDouble_withDouble_(jdouble n, jdouble r);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoNpR_NpRBigWithDouble_withDouble_(jdouble n, jdouble r);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoNpR_NpRLogWithDouble_withDouble_(jdouble n, jdouble r);

@implementation GeogebraCommonKernelStatisticsAlgoNpR

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)num1
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)num2 {
  GeogebraCommonKernelStatisticsAlgoNpR_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, num1, num2);
  return self;
}

- (void)setInputOutput {
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num1_)) toGeoElement], [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num2_)) toGeoElement] } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  [self setDependencies];
}

- (void)compute {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) isDefined]) {
    jdouble nCr = GeogebraCommonKernelStatisticsAlgoNpR_NpRWithDouble_withDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num1_)) getDouble], [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num2_)) getDouble]);
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setValueWithDouble:nCr];
  }
  else [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setUndefined];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_nPr();
}

- (GeogebraCommonKernelGeosGeoNumeric *)getResult {
  return result_;
}

+ (jdouble)NpRWithDouble:(jdouble)n
              withDouble:(jdouble)r {
  return GeogebraCommonKernelStatisticsAlgoNpR_NpRWithDouble_withDouble_(n, r);
}

+ (jdouble)NpRBigWithDouble:(jdouble)n
                 withDouble:(jdouble)r {
  return GeogebraCommonKernelStatisticsAlgoNpR_NpRBigWithDouble_withDouble_(n, r);
}

+ (jdouble)NpRLogWithDouble:(jdouble)n
                 withDouble:(jdouble)r {
  return GeogebraCommonKernelStatisticsAlgoNpR_NpRLogWithDouble_withDouble_(n, r);
}

- (void)dealloc {
  RELEASE_(result_);
  RELEASE_(num1_);
  RELEASE_(num2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoNpR", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "NpRWithDouble:withDouble:", "NpR", "D", 0xa, NULL, NULL },
    { "NpRBigWithDouble:withDouble:", "NpRBig", "D", 0xa, NULL, NULL },
    { "NpRLogWithDouble:withDouble:", "NpRLog", "D", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "num1_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "num2_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoNpR = { 2, "AlgoNpR", "geogebra.common.kernel.statistics", NULL, 0x1, 8, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoNpR;
}

@end

void GeogebraCommonKernelStatisticsAlgoNpR_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelStatisticsAlgoNpR *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> num1, id<GeogebraCommonKernelArithmeticNumberValue> num2) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoNpR_set_num1_(self, num1);
  GeogebraCommonKernelStatisticsAlgoNpR_set_num2_(self, num2);
  GeogebraCommonKernelStatisticsAlgoNpR_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoNpR *new_GeogebraCommonKernelStatisticsAlgoNpR_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> num1, id<GeogebraCommonKernelArithmeticNumberValue> num2) {
  GeogebraCommonKernelStatisticsAlgoNpR *self = [GeogebraCommonKernelStatisticsAlgoNpR alloc];
  GeogebraCommonKernelStatisticsAlgoNpR_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, num1, num2);
  return self;
}

jdouble GeogebraCommonKernelStatisticsAlgoNpR_NpRWithDouble_withDouble_(jdouble n, jdouble r) {
  GeogebraCommonKernelStatisticsAlgoNpR_initialize();
  jdouble INFINITY_ = JavaLangDouble_POSITIVE_INFINITY;
  @try {
    if (n == 0.0 && r == 0.0) return 1.0;
    if (n < 1.0 || r < 0.0 || n < r) return 0.0;
    if (JavaLangMath_floorWithDouble_(n) != n || JavaLangMath_floorWithDouble_(r) != r) return 0.0;
    jdouble ncr = GeogebraCommonKernelStatisticsAlgoNpR_NpRLogWithDouble_withDouble_(n, r);
    if (ncr == INFINITY_) return INFINITY_;
    if (n <= 16) return ncr;
    return GeogebraCommonKernelStatisticsAlgoNpR_NpRBigWithDouble_withDouble_(n, r);
  }
  @catch (JavaLangException *e) {
    return INFINITY_;
  }
}

jdouble GeogebraCommonKernelStatisticsAlgoNpR_NpRBigWithDouble_withDouble_(jdouble n, jdouble r) {
  GeogebraCommonKernelStatisticsAlgoNpR_initialize();
  JavaMathBigInteger *ncr = JavaMathBigInteger_get_ONE_(), *nn, *nr;
  JavaLangDouble *nnn = [new_JavaLangDouble_initWithDouble_(n) autorelease];
  JavaLangDouble *rrr = [new_JavaLangDouble_initWithDouble_(n - r) autorelease];
  nn = [([new_JavaMathBigDecimal_initWithNSString_([nnn description]) autorelease]) toBigInteger];
  nr = [([new_JavaMathBigDecimal_initWithNSString_([rrr description]) autorelease]) toBigInteger];
  nr = [((JavaMathBigInteger *) nil_chk(nr)) addWithJavaMathBigInteger:JavaMathBigInteger_get_ONE_()];
  while ([((JavaMathBigInteger *) nil_chk(nr)) compareToWithId:nn] <= 0) {
    ncr = [((JavaMathBigInteger *) nil_chk(ncr)) multiplyWithJavaMathBigInteger:nr];
    nr = [nr addWithJavaMathBigInteger:JavaMathBigInteger_get_ONE_()];
  }
  return [((JavaMathBigInteger *) nil_chk(ncr)) doubleValue];
}

jdouble GeogebraCommonKernelStatisticsAlgoNpR_NpRLogWithDouble_withDouble_(jdouble n, jdouble r) {
  GeogebraCommonKernelStatisticsAlgoNpR_initialize();
  return JavaLangMath_floorWithDouble_(0.5 + JavaLangMath_expWithDouble_(GeogebraCommonUtilMyMath2_logGammaWithDouble_(n + 1.0) - GeogebraCommonUtilMyMath2_logGammaWithDouble_(n - r + 1)));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoNpR)
