//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoRotateVector.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoRotateVector.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonKernelAlgosAlgoRotateVector () {
 @public
  GeogebraCommonKernelGeosGeoVector *A_;
  GeogebraCommonKernelGeosGeoNumeric *angle_;
  GeogebraCommonKernelGeosGeoVector *B_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRotateVector, A_, GeogebraCommonKernelGeosGeoVector *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRotateVector, angle_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRotateVector, B_, GeogebraCommonKernelGeosGeoVector *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoRotateVector_compute(GeogebraCommonKernelAlgosAlgoRotateVector *self);

@implementation GeogebraCommonKernelAlgosAlgoRotateVector

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                   withGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *)A
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)angle {
  GeogebraCommonKernelAlgosAlgoRotateVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoVector_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, A, angle);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Rotate();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, A_);
  IOSObjectArray_Set(input_, 1, angle_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:B_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoVector *)getVector {
  return A_;
}

- (GeogebraCommonKernelGeosGeoNumeric *)getAngle {
  return angle_;
}

- (GeogebraCommonKernelGeosGeoVector *)getRotatedVector {
  return B_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoRotateVector_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"ARotatedByAngleB" withNSString:[((GeogebraCommonKernelGeosGeoVector *) nil_chk(A_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(angle_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(angle_);
  RELEASE_(B_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoVector:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoRotateVector", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getVector", NULL, "Lgeogebra.common.kernel.geos.GeoVector;", 0x0, NULL, NULL },
    { "getAngle", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x0, NULL, NULL },
    { "getRotatedVector", NULL, "Lgeogebra.common.kernel.geos.GeoVector;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
    { "angle_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "B_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoRotateVector = { 2, "AlgoRotateVector", "geogebra.common.kernel.algos", NULL, 0x1, 9, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoRotateVector;
}

@end

void GeogebraCommonKernelAlgosAlgoRotateVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoVector_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAlgosAlgoRotateVector *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoVector *A, GeogebraCommonKernelGeosGeoNumeric *angle) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoRotateVector_set_A_(self, A);
  GeogebraCommonKernelAlgosAlgoRotateVector_set_angle_(self, angle);
  GeogebraCommonKernelAlgosAlgoRotateVector_setAndConsume_B_(self, new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoRotateVector_compute(self);
  [self->B_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoRotateVector *new_GeogebraCommonKernelAlgosAlgoRotateVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoVector_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoVector *A, GeogebraCommonKernelGeosGeoNumeric *angle) {
  GeogebraCommonKernelAlgosAlgoRotateVector *self = [GeogebraCommonKernelAlgosAlgoRotateVector alloc];
  GeogebraCommonKernelAlgosAlgoRotateVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoVector_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, A, angle);
  return self;
}

void GeogebraCommonKernelAlgosAlgoRotateVector_compute(GeogebraCommonKernelAlgosAlgoRotateVector *self) {
  [((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->B_)) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:self->A_];
  [self->B_ rotateWithGeogebraCommonKernelArithmeticNumberValue:self->angle_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoRotateVector)
