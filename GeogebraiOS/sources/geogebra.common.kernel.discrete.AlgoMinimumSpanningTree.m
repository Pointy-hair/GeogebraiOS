//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/discrete/AlgoMinimumSpanningTree.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/discrete/AlgoHull.h"
#include "geogebra/common/kernel/discrete/AlgoMinimumSpanningTree.h"
#include "geogebra/common/kernel/discrete/alds/al/graphs/PrimMinimumSpanningTree.h"
#include "geogebra/common/kernel/discrete/alds/ds/graphs/Graph.h"
#include "geogebra/common/kernel/discrete/alds/ds/graphs/Vertex.h"
#include "geogebra/common/kernel/discrete/alds/ds/graphs/WeightedGraph.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Map.h"

@implementation GeogebraCommonKernelDiscreteAlgoMinimumSpanningTree

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelDiscreteAlgoMinimumSpanningTree_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_MinimumSpanningTree();
}

- (void)compute {
  size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(inputList_)) size];
  if (![inputList_ isDefined] || size_ == 0) {
    [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) setUndefined];
    return;
  }
  IOSDoubleArray *inhom = [IOSDoubleArray arrayWithLength:2];
  GeogebraCommonKernelDiscreteAldsDsGraphsWeightedGraph *weightedGraph = [new_GeogebraCommonKernelDiscreteAldsDsGraphsWeightedGraph_initWithGeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_get_UNDIRECTED()) autorelease];
  IOSObjectArray *vertices = [IOSObjectArray arrayWithLength:size_ type:GeogebraCommonKernelDiscreteAldsDsGraphsVertex_class_()];
  for (jint i = 0; i < size_; i++) {
    IOSObjectArray_SetAndConsume(vertices, i, new_GeogebraCommonKernelDiscreteAldsDsGraphsVertex_initWithNSString_withGeogebraCommonKernelKernelNDGeoPointND_(JreStrcat("I", i), (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([inputList_ getWithInt:i], @protocol(GeogebraCommonKernelKernelNDGeoPointND))));
  }
  jdouble maxDistance = 0;
  for (jint i = 0; i < size_ - 1; i++) {
    id<GeogebraCommonKernelKernelNDGeoPointND> p1 = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([inputList_ getWithInt:i], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    for (jint j = i + 1; j < size_; j++) {
      id<GeogebraCommonKernelKernelNDGeoPointND> p2 = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([inputList_ getWithInt:j], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
      maxDistance = JavaLangMath_maxWithDouble_withDouble_(maxDistance, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) distanceWithGeogebraCommonKernelKernelNDGeoPointND:p2]);
    }
  }
  jdouble max = JavaLangInteger_MAX_VALUE;
  jdouble FACTOR = max / maxDistance;
  for (jint i = 0; i < size_ - 1; i++) {
    id<GeogebraCommonKernelKernelNDGeoPointND> p1 = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([inputList_ getWithInt:i], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    for (jint j = i + 1; j < size_; j++) {
      id<GeogebraCommonKernelKernelNDGeoPointND> p2 = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([inputList_ getWithInt:j], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
      [weightedGraph addEdgeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:IOSObjectArray_Get(vertices, i) withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:IOSObjectArray_Get(vertices, j) withInt:J2ObjCFpToInt((FACTOR * [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) distanceWithGeogebraCommonKernelKernelNDGeoPointND:p2]))];
    }
  }
  GeogebraCommonKernelDiscreteAldsAlGraphsPrimMinimumSpanningTree *minimumSpanningTree = [new_GeogebraCommonKernelDiscreteAldsAlGraphsPrimMinimumSpanningTree_initWithGeogebraCommonKernelDiscreteAldsDsGraphsWeightedGraph_withGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(weightedGraph, IOSObjectArray_Get(vertices, 0)) autorelease];
  id<JavaUtilMap> predecessor = [((GeogebraCommonKernelDiscreteAldsAlGraphsPrimMinimumSpanningTree *) nil_chk([minimumSpanningTree compute])) getPredecessorMap];
  GeogebraCommonKernelMatrixCoords *coords;
  if (al_ == nil) GeogebraCommonKernelDiscreteAlgoHull_setAndConsume_al_(self, new_JavaUtilArrayList_init());
  else [al_ clear];
  for (jint i = 0; i < size_; i++) {
    GeogebraCommonKernelDiscreteAldsDsGraphsVertex *connectedVertex = [((id<JavaUtilMap>) nil_chk(predecessor)) getWithId:IOSObjectArray_Get(vertices, i)];
    if (connectedVertex != nil) {
      id<GeogebraCommonKernelKernelNDGeoPointND> point1 = [((GeogebraCommonKernelDiscreteAldsDsGraphsVertex *) nil_chk(IOSObjectArray_Get(vertices, i))) getPoint];
      id<GeogebraCommonKernelKernelNDGeoPointND> point2 = [connectedVertex getPoint];
      coords = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point1)) getInhomCoordsInD2];
      [((JavaUtilArrayList *) nil_chk(al_)) addWithId:[new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_([((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getWithInt:1], [coords getWithInt:2], NO) autorelease]];
      coords = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point2)) getInhomCoordsInD2];
      [al_ addWithId:[new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_([((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getWithInt:1], [coords getWithInt:2], YES) autorelease]];
    }
  }
  [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) setPointsWithJavaUtilArrayList:al_];
  [locus_ setDefinedWithBoolean:YES];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoMinimumSpanningTree", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelDiscreteAlgoMinimumSpanningTree = { 2, "AlgoMinimumSpanningTree", "geogebra.common.kernel.discrete", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelDiscreteAlgoMinimumSpanningTree;
}

@end

void GeogebraCommonKernelDiscreteAlgoMinimumSpanningTree_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelDiscreteAlgoMinimumSpanningTree *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelDiscreteAlgoHull_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputList, nil);
}

GeogebraCommonKernelDiscreteAlgoMinimumSpanningTree *new_GeogebraCommonKernelDiscreteAlgoMinimumSpanningTree_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelDiscreteAlgoMinimumSpanningTree *self = [GeogebraCommonKernelDiscreteAlgoMinimumSpanningTree alloc];
  GeogebraCommonKernelDiscreteAlgoMinimumSpanningTree_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelDiscreteAlgoMinimumSpanningTree)
