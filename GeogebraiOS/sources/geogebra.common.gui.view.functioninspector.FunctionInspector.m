//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/functioninspector/FunctionInspector.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/gui/SetLabels.h"
#include "geogebra/common/gui/view/functioninspector/FunctionInspector.h"
#include "geogebra/common/gui/view/functioninspector/FunctionInspectorModel.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/ModeSetter.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/GeoElementSelectionListener.h"
#include "geogebra/common/main/SelectionManager.h"
#include "java/lang/Exception.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface GeogebraCommonGuiViewFunctioninspectorFunctionInspector () {
 @public
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *model_;
  GeogebraCommonKernelKernel *kernel_;
  jboolean isIniting_;
  jboolean isChangingValue_;
  GeogebraCommonMainApp *app_;
}

- (void)createHelpPanel;

- (void)createGeoElementSlectionListener;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspector, model_, GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspector, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspector, app_, GeogebraCommonMainApp *)

__attribute__((unused)) static void GeogebraCommonGuiViewFunctioninspectorFunctionInspector_createHelpPanel(GeogebraCommonGuiViewFunctioninspectorFunctionInspector *self);

__attribute__((unused)) static void GeogebraCommonGuiViewFunctioninspectorFunctionInspector_createGeoElementSlectionListener(GeogebraCommonGuiViewFunctioninspectorFunctionInspector *self);

@interface GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1 : NSObject < GeogebraCommonMainGeoElementSelectionListener > {
 @public
  GeogebraCommonGuiViewFunctioninspectorFunctionInspector *this$0_;
}

- (void)geoElementSelectedWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                     withBoolean:(jboolean)addToSelection;

- (instancetype)initWithGeogebraCommonGuiViewFunctioninspectorFunctionInspector:(GeogebraCommonGuiViewFunctioninspectorFunctionInspector *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1)

J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1, this$0_, GeogebraCommonGuiViewFunctioninspectorFunctionInspector *)

__attribute__((unused)) static void GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1_initWithGeogebraCommonGuiViewFunctioninspectorFunctionInspector_(GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1 *self, GeogebraCommonGuiViewFunctioninspectorFunctionInspector *outer$);

__attribute__((unused)) static GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1 *new_GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1_initWithGeogebraCommonGuiViewFunctioninspectorFunctionInspector_(GeogebraCommonGuiViewFunctioninspectorFunctionInspector *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1)

@implementation GeogebraCommonGuiViewFunctioninspectorFunctionInspector

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
      withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)selectedGeo {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspector_initWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoFunction_(self, app, selectedGeo);
  return self;
}

- (void)createGUI {
  [self createGUIElements];
  [self createHeaderPanel];
  [self createTabPanel];
}

- (void)createTabPanel {
  [self createTabPointPanel];
  [self createTabIntervalPanel];
  [self buildTabPanel];
}

- (void)buildTabPanel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)buildHelpPanel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)buildHeaderPanel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)createHeaderPanel {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspector_createHelpPanel(self);
  [self buildHeaderPanel];
}

- (void)createHelpPanel {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspector_createHelpPanel(self);
}

- (void)createTabIntervalPanel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)createTabPointPanel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)createGUIElements {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateIntervalTab {
  [self updateIntervalTable];
  [((GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *) nil_chk([self getModel])) updateIntervalGeoVisiblity];
}

- (void)updatePointsTab {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isIntervalTabSelected {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)updateGUI {
  if ([self isIntervalTabSelected]) {
    [self updateIntervalTab];
  }
  else {
    [self updatePointsTab];
  }
  [self setLabels];
}

- (void)updateTabPanels {
  if ([self isIntervalTabSelected]) {
    [self updateIntervalFields];
  }
  else {
    [self updatePointsTab];
  }
  [((GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *) nil_chk([self getModel])) updateGeosWithBoolean:[self isIntervalTabSelected]];
  [self updateGUI];
}

- (void)updateIntervalFields {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateIntervalTable {
  isChangingValue_ = YES;
  [((GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *) nil_chk([self getModel])) updateIntervalTable];
  isChangingValue_ = NO;
}

- (void)updateXYTable {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)removeColumn {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setInspectorVisibleWithBoolean:(jboolean)isVisible {
  if (isVisible) {
    GeogebraCommonMainApp_debugWithNSString_(@"setInspectorVisible(true)");
    [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk([self getApp])) getKernel])) attachWithGeogebraCommonKernelView:self];
  }
  else {
    GeogebraCommonMainApp_debugWithNSString_(@"setInspectorVisible(false)");
    [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk([self getApp])) getKernel])) detachWithGeogebraCommonKernelView:self];
    [((GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *) nil_chk([self getModel])) clearGeoList];
  }
}

- (void)updateWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (![((GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *) nil_chk([self getModel])) isValid] || isChangingValue_ || isIniting_) {
    return;
  }
  [((GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *) nil_chk([self getModel])) updateWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:![self isIntervalTabSelected]];
}

- (void)updateVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [self updateWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)addWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)removeWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)renameWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)updateAuxiliaryObjectWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)repaintView {
}

- (void)clearView {
}

- (void)setModeWithInt:(jint)mode
withGeogebraCommonKernelModeSetterEnum:(GeogebraCommonKernelModeSetterEnum *)m {
}

- (void)createGeoElementSlectionListener {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspector_createGeoElementSlectionListener(self);
}

- (void)insertGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (geo == nil || ![geo isGeoFunction]) {
    return;
  }
  [((GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *) nil_chk([self getModel])) insertGeoElementWithGeogebraCommonKernelGeosGeoElement:geo];
  [self updateTabPanels];
}

- (void)updateTestPoint {
  if (isIniting_) {
    return;
  }
  isChangingValue_ = YES;
  [((GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *) nil_chk([self getModel])) updateTestPoint];
  isChangingValue_ = NO;
}

- (void)setStartWithDouble:(jdouble)x {
  @try {
    [((GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *) nil_chk([self getModel])) setStartWithDouble:x];
    [self updateXYTable];
    [self updateTestPoint];
  }
  @catch (JavaLangException *e1) {
    [((JavaLangException *) nil_chk(e1)) printStackTrace];
  }
}

- (void)changeStartWithDouble:(jdouble)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)changedNumberFormat {
  [self updateGUI];
  [self updateIntervalFields];
  [self updateTestPoint];
}

- (void)createOptionsButton {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)doCopyToSpreadsheet {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)getViewID {
  return GeogebraCommonMainApp_VIEW_FUNCTION_INSPECTOR;
}

- (void)repaint {
  GeogebraCommonMainApp_debugWithNSString_(@"unimplemented");
}

- (jboolean)isShowing {
  GeogebraCommonMainApp_debugWithNSString_(@"unimplemented");
  return NO;
}

- (void)startBatchUpdate {
}

- (void)endBatchUpdate {
}

- (GeogebraCommonMainApp *)getApp {
  return app_;
}

- (void)setAppWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspector_set_app_(self, app);
}

- (GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *)getModel {
  return model_;
}

- (void)setModelWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel:(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *)model {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspector_set_model_(self, model);
}

- (GeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (void)setKernelWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspector_set_kernel_(self, kernel);
}

- (void)dealloc {
  RELEASE_(model_);
  RELEASE_(kernel_);
  RELEASE_(app_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonKernelGeosGeoFunction:", "FunctionInspector", NULL, 0x1, NULL, NULL },
    { "createGUI", NULL, "V", 0x4, NULL, NULL },
    { "createTabPanel", NULL, "V", 0x4, NULL, NULL },
    { "buildTabPanel", NULL, "V", 0x404, NULL, NULL },
    { "buildHelpPanel", NULL, "V", 0x404, NULL, NULL },
    { "buildHeaderPanel", NULL, "V", 0x404, NULL, NULL },
    { "createHeaderPanel", NULL, "V", 0x4, NULL, NULL },
    { "createHelpPanel", NULL, "V", 0x2, NULL, NULL },
    { "createTabIntervalPanel", NULL, "V", 0x404, NULL, NULL },
    { "createTabPointPanel", NULL, "V", 0x404, NULL, NULL },
    { "createGUIElements", NULL, "V", 0x404, NULL, NULL },
    { "updateIntervalTab", NULL, "V", 0x4, NULL, NULL },
    { "updatePointsTab", NULL, "V", 0x404, NULL, NULL },
    { "isIntervalTabSelected", NULL, "Z", 0x404, NULL, NULL },
    { "updateGUI", NULL, "V", 0x1, NULL, NULL },
    { "updateTabPanels", NULL, "V", 0x1, NULL, NULL },
    { "updateIntervalFields", NULL, "V", 0x404, NULL, NULL },
    { "updateIntervalTable", NULL, "V", 0x4, NULL, NULL },
    { "updateXYTable", NULL, "V", 0x404, NULL, NULL },
    { "removeColumn", NULL, "V", 0x404, NULL, NULL },
    { "setInspectorVisibleWithBoolean:", "setInspectorVisible", "V", 0x1, NULL, NULL },
    { "updateWithGeogebraCommonKernelGeosGeoElement:", "update", "V", 0x1, NULL, NULL },
    { "updateVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "updateVisualStyle", "V", 0x11, NULL, NULL },
    { "addWithGeogebraCommonKernelGeosGeoElement:", "add", "V", 0x1, NULL, NULL },
    { "removeWithGeogebraCommonKernelGeosGeoElement:", "remove", "V", 0x1, NULL, NULL },
    { "renameWithGeogebraCommonKernelGeosGeoElement:", "rename", "V", 0x1, NULL, NULL },
    { "updateAuxiliaryObjectWithGeogebraCommonKernelGeosGeoElement:", "updateAuxiliaryObject", "V", 0x1, NULL, NULL },
    { "repaintView", NULL, "V", 0x1, NULL, NULL },
    { "clearView", NULL, "V", 0x1, NULL, NULL },
    { "setModeWithInt:withGeogebraCommonKernelModeSetterEnum:", "setMode", "V", 0x1, NULL, NULL },
    { "createGeoElementSlectionListener", NULL, "V", 0x2, NULL, NULL },
    { "insertGeoElementWithGeogebraCommonKernelGeosGeoElement:", "insertGeoElement", "V", 0x1, NULL, NULL },
    { "updateTestPoint", NULL, "V", 0x4, NULL, NULL },
    { "setStartWithDouble:", "setStart", "V", 0x4, NULL, NULL },
    { "changeStartWithDouble:", "changeStart", "V", 0x404, NULL, NULL },
    { "changedNumberFormat", NULL, "V", 0x1, NULL, NULL },
    { "createOptionsButton", NULL, "V", 0x404, NULL, NULL },
    { "doCopyToSpreadsheet", NULL, "V", 0x404, NULL, NULL },
    { "getViewID", NULL, "I", 0x1, NULL, NULL },
    { "repaint", NULL, "V", 0x1, NULL, NULL },
    { "isShowing", NULL, "Z", 0x1, NULL, NULL },
    { "startBatchUpdate", NULL, "V", 0x1, NULL, NULL },
    { "endBatchUpdate", NULL, "V", 0x1, NULL, NULL },
    { "getApp", NULL, "Lgeogebra.common.main.App;", 0x1, NULL, NULL },
    { "setAppWithGeogebraCommonMainApp:", "setApp", "V", 0x1, NULL, NULL },
    { "getModel", NULL, "Lgeogebra.common.gui.view.functioninspector.FunctionInspectorModel;", 0x1, NULL, NULL },
    { "setModelWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel:", "setModel", "V", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "setKernelWithGeogebraCommonKernelKernel:", "setKernel", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "model_", NULL, 0x2, "Lgeogebra.common.gui.view.functioninspector.FunctionInspectorModel;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "isIniting_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isChangingValue_", NULL, 0x2, "Z", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewFunctioninspectorFunctionInspector = { 2, "FunctionInspector", "geogebra.common.gui.view.functioninspector", NULL, 0x401, 49, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewFunctioninspectorFunctionInspector;
}

@end

void GeogebraCommonGuiViewFunctioninspectorFunctionInspector_initWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonGuiViewFunctioninspectorFunctionInspector *self, GeogebraCommonMainApp *app, GeogebraCommonKernelGeosGeoFunction *selectedGeo) {
  NSObject_init(self);
  [self setAppWithGeogebraCommonMainApp:app];
  [self setKernelWithGeogebraCommonKernelKernel:[((GeogebraCommonMainApp *) nil_chk(app)) getKernel]];
  [((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) attachWithGeogebraCommonKernelView:self];
  [self setModelWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel:[new_GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_initWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener_(app, selectedGeo, self) autorelease]];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspector_createGeoElementSlectionListener(self);
  [self createGUI];
  [self insertGeoElementWithGeogebraCommonKernelGeosGeoElement:selectedGeo];
  self->isIniting_ = NO;
}

void GeogebraCommonGuiViewFunctioninspectorFunctionInspector_createHelpPanel(GeogebraCommonGuiViewFunctioninspectorFunctionInspector *self) {
  [self createOptionsButton];
  [self buildHelpPanel];
}

void GeogebraCommonGuiViewFunctioninspectorFunctionInspector_createGeoElementSlectionListener(GeogebraCommonGuiViewFunctioninspectorFunctionInspector *self) {
  id<GeogebraCommonMainGeoElementSelectionListener> sl = [new_GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1_initWithGeogebraCommonGuiViewFunctioninspectorFunctionInspector_(self) autorelease];
  [((GeogebraCommonMainSelectionManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSelectionManager])) addSelectionListenerWithGeogebraCommonMainGeoElementSelectionListener:sl];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewFunctioninspectorFunctionInspector)

@implementation GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1

- (void)geoElementSelectedWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                     withBoolean:(jboolean)addToSelection {
  [this$0_ insertGeoElementWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (instancetype)initWithGeogebraCommonGuiViewFunctioninspectorFunctionInspector:(GeogebraCommonGuiViewFunctioninspectorFunctionInspector *)outer$ {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1_initWithGeogebraCommonGuiViewFunctioninspectorFunctionInspector_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "geoElementSelectedWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "geoElementSelected", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonGuiViewFunctioninspectorFunctionInspector:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.gui.view.functioninspector.FunctionInspector;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonGuiViewFunctioninspectorFunctionInspector", "createGeoElementSlectionListener" };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1 = { 2, "", "geogebra.common.gui.view.functioninspector", "FunctionInspector", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1;
}

@end

void GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1_initWithGeogebraCommonGuiViewFunctioninspectorFunctionInspector_(GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1 *self, GeogebraCommonGuiViewFunctioninspectorFunctionInspector *outer$) {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1 *new_GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1_initWithGeogebraCommonGuiViewFunctioninspectorFunctionInspector_(GeogebraCommonGuiViewFunctioninspectorFunctionInspector *outer$) {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1 *self = [GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1 alloc];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1_initWithGeogebraCommonGuiViewFunctioninspectorFunctionInspector_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewFunctioninspectorFunctionInspector_$1)
