//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/discrete/AlgoShortestDistance.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/uci/ics/jung/algorithms/shortestpath/DijkstraShortestPath.h"
#include "edu/uci/ics/jung/graph/SparseMultigraph.h"
#include "edu/uci/ics/jung/graph/util/EdgeType.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/discrete/AlgoShortestDistance.h"
#include "geogebra/common/kernel/discrete/MyNode.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "org/apache/commons/collections15/Transformer.h"

__attribute__((unused)) static void GeogebraCommonKernelDiscreteAlgoShortestDistance_compute(GeogebraCommonKernelDiscreteAlgoShortestDistance *self);

@interface GeogebraCommonKernelDiscreteAlgoShortestDistance_$1 : NSObject < OrgApacheCommonsCollections15Transformer >

- (JavaLangDouble *)transformWithId:(GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink *)link;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelDiscreteAlgoShortestDistance_$1)

__attribute__((unused)) static void GeogebraCommonKernelDiscreteAlgoShortestDistance_$1_init(GeogebraCommonKernelDiscreteAlgoShortestDistance_$1 *self);

__attribute__((unused)) static GeogebraCommonKernelDiscreteAlgoShortestDistance_$1 *new_GeogebraCommonKernelDiscreteAlgoShortestDistance_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelDiscreteAlgoShortestDistance_$1)

@implementation GeogebraCommonKernelDiscreteAlgoShortestDistance

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)start
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)end
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)weighted {
  GeogebraCommonKernelDiscreteAlgoShortestDistance_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, inputList, start, end, weighted);
  return self;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  IOSObjectArray_Set(input_, 1, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(start_)) toGeoElement]);
  IOSObjectArray_Set(input_, 2, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(end_)) toGeoElement]);
  IOSObjectArray_Set(input_, 3, weighted_);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:locus_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoLocus *)getResult {
  return locus_;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ShortestDistance();
}

- (void)compute {
  GeogebraCommonKernelDiscreteAlgoShortestDistance_compute(self);
}

- (void)dealloc {
  RELEASE_(start_);
  RELEASE_(end_);
  RELEASE_(inputList_);
  RELEASE_(locus_);
  RELEASE_(weighted_);
  RELEASE_(al_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoBoolean:", "AlgoShortestDistance", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoLocus;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "start_", NULL, 0x0, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "end_", NULL, 0x0, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "inputList_", NULL, 0x0, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "locus_", NULL, 0x0, "Lgeogebra.common.kernel.geos.GeoLocus;", NULL, NULL,  },
    { "weighted_", NULL, 0x0, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "al_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/MyPoint;>;",  },
    { "edgeCount_", NULL, 0x4, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.discrete.AlgoShortestDistance$MyLink;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelDiscreteAlgoShortestDistance = { 2, "AlgoShortestDistance", "geogebra.common.kernel.discrete", NULL, 0x1, 5, methods, 7, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelDiscreteAlgoShortestDistance;
}

@end

void GeogebraCommonKernelDiscreteAlgoShortestDistance_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelDiscreteAlgoShortestDistance *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList, id<GeogebraCommonKernelKernelNDGeoPointND> start, id<GeogebraCommonKernelKernelNDGeoPointND> end, GeogebraCommonKernelGeosGeoBoolean *weighted) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->edgeCount_ = 0;
  GeogebraCommonKernelDiscreteAlgoShortestDistance_set_inputList_(self, inputList);
  GeogebraCommonKernelDiscreteAlgoShortestDistance_set_start_(self, start);
  GeogebraCommonKernelDiscreteAlgoShortestDistance_set_end_(self, end);
  GeogebraCommonKernelDiscreteAlgoShortestDistance_set_weighted_(self, weighted);
  GeogebraCommonKernelDiscreteAlgoShortestDistance_setAndConsume_locus_(self, new_GeogebraCommonKernelGeosGeoLocus_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelDiscreteAlgoShortestDistance_compute(self);
  [self->locus_ setLabelWithNSString:label];
}

GeogebraCommonKernelDiscreteAlgoShortestDistance *new_GeogebraCommonKernelDiscreteAlgoShortestDistance_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList, id<GeogebraCommonKernelKernelNDGeoPointND> start, id<GeogebraCommonKernelKernelNDGeoPointND> end, GeogebraCommonKernelGeosGeoBoolean *weighted) {
  GeogebraCommonKernelDiscreteAlgoShortestDistance *self = [GeogebraCommonKernelDiscreteAlgoShortestDistance alloc];
  GeogebraCommonKernelDiscreteAlgoShortestDistance_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, inputList, start, end, weighted);
  return self;
}

void GeogebraCommonKernelDiscreteAlgoShortestDistance_compute(GeogebraCommonKernelDiscreteAlgoShortestDistance *self) {
  jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  if (![self->inputList_ isDefined] || ![((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->weighted_)) isDefined] || size == 0) {
    [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) setUndefined];
    return;
  }
  JavaUtilHashMap *nodes = [new_JavaUtilHashMap_init() autorelease];
  EduUciIcsJungGraphSparseMultigraph *g = [new_EduUciIcsJungGraphSparseMultigraph_init() autorelease];
  GeogebraCommonKernelDiscreteMyNode *node1, *node2, *startNode = nil, *endNode = nil;
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self->inputList_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined] && [geo isGeoSegment]) {
      GeogebraCommonKernelGeosGeoSegment *seg = (GeogebraCommonKernelGeosGeoSegment *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoSegment class]);
      id<GeogebraCommonKernelKernelNDGeoPointND> p1 = ((GeogebraCommonKernelGeosGeoPoint *) [seg getStartPoint]);
      id<GeogebraCommonKernelKernelNDGeoPointND> p2 = ((GeogebraCommonKernelGeosGeoPoint *) [seg getEndPoint]);
      node1 = [nodes getWithId:p1];
      node2 = [nodes getWithId:p2];
      if (node1 == nil) {
        node1 = [new_GeogebraCommonKernelDiscreteMyNode_initWithGeogebraCommonKernelKernelNDGeoPointND_(p1) autorelease];
        [nodes putWithId:p1 withId:node1];
      }
      if (node2 == nil) {
        node2 = [new_GeogebraCommonKernelDiscreteMyNode_initWithGeogebraCommonKernelKernelNDGeoPointND_(p2) autorelease];
        [nodes putWithId:p2 withId:node2];
      }
      if (p1 == self->start_) startNode = node1;
      else if (p1 == self->end_) endNode = node1;
      if (p2 == self->start_) startNode = node2;
      else if (p2 == self->end_) endNode = node2;
      [g addEdgeWithId:[new_GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink_initWithGeogebraCommonKernelDiscreteAlgoShortestDistance_withDouble_withDouble_withGeogebraCommonKernelDiscreteMyNode_withGeogebraCommonKernelDiscreteMyNode_(self, [seg getLength], 1, node1, node2) autorelease] withId:node1 withId:node2 withEduUciIcsJungGraphUtilEdgeTypeEnum:EduUciIcsJungGraphUtilEdgeTypeEnum_get_UNDIRECTED()];
    }
  }
  if (self->al_ == nil) GeogebraCommonKernelDiscreteAlgoShortestDistance_setAndConsume_al_(self, new_JavaUtilArrayList_init());
  else [self->al_ clear];
  if (startNode == nil || endNode == nil) {
    [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) setPointsWithJavaUtilArrayList:self->al_];
    [self->locus_ setDefinedWithBoolean:NO];
    return;
  }
  EduUciIcsJungAlgorithmsShortestpathDijkstraShortestPath *alg;
  if ([((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->weighted_)) getBoolean] == YES) {
    id<OrgApacheCommonsCollections15Transformer> wtTransformer = [new_GeogebraCommonKernelDiscreteAlgoShortestDistance_$1_init() autorelease];
    alg = [new_EduUciIcsJungAlgorithmsShortestpathDijkstraShortestPath_initWithEduUciIcsJungGraphGraph_withOrgApacheCommonsCollections15Transformer_(g, wtTransformer) autorelease];
  }
  else {
    alg = [new_EduUciIcsJungAlgorithmsShortestpathDijkstraShortestPath_initWithEduUciIcsJungGraphGraph_(g) autorelease];
  }
  id<JavaUtilList> list = [((EduUciIcsJungAlgorithmsShortestpathDijkstraShortestPath *) nil_chk(alg)) getPathWithId:startNode withId:endNode];
  IOSDoubleArray *inhom1 = [IOSDoubleArray arrayWithLength:2];
  IOSDoubleArray *inhom2 = [IOSDoubleArray arrayWithLength:2];
  IOSDoubleArray *inhomLast = [IOSDoubleArray arrayWithLength:2];
  GeogebraCommonKernelDiscreteMyNode *n1, *n2;
  GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink *link = [((id<JavaUtilList>) nil_chk(list)) getWithInt:0];
  n1 = ((GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink *) nil_chk(link))->n1_;
  n2 = link->n2_;
  if (n1 == startNode) {
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(((GeogebraCommonKernelDiscreteMyNode *) nil_chk(n1))->id__)) getInhomCoordsWithDoubleArray:inhomLast];
  }
  else if (n2 == startNode) {
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(((GeogebraCommonKernelDiscreteMyNode *) nil_chk(n2))->id__)) getInhomCoordsWithDoubleArray:inhomLast];
  }
  else if (n1 == endNode) {
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(((GeogebraCommonKernelDiscreteMyNode *) nil_chk(n1))->id__)) getInhomCoordsWithDoubleArray:inhomLast];
  }
  else if (n2 == endNode) {
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(((GeogebraCommonKernelDiscreteMyNode *) nil_chk(n2))->id__)) getInhomCoordsWithDoubleArray:inhomLast];
  }
  GeogebraCommonKernelMyPoint *pt = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(IOSDoubleArray_Get(inhomLast, 0), IOSDoubleArray_Get(inhomLast, 1), NO) autorelease];
  [((JavaUtilArrayList *) nil_chk(self->al_)) addWithId:pt];
  for (jint i = 0; i < [list size]; i++) {
    link = [list getWithInt:i];
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(((GeogebraCommonKernelDiscreteMyNode *) nil_chk(((GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink *) nil_chk(link))->n1_))->id__)) getInhomCoordsWithDoubleArray:inhom1];
    [((GeogebraCommonKernelDiscreteMyNode *) nil_chk(link->n2_))->id__ getInhomCoordsWithDoubleArray:inhom2];
    if (IOSDoubleArray_Get(inhom1, 1) == IOSDoubleArray_Get(inhomLast, 1) && IOSDoubleArray_Get(inhom1, 0) == IOSDoubleArray_Get(inhomLast, 0)) {
      pt = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(IOSDoubleArray_Get(inhom2, 0), IOSDoubleArray_Get(inhom2, 1), YES) autorelease];
      *IOSDoubleArray_GetRef(inhomLast, 0) = IOSDoubleArray_Get(inhom2, 0);
      *IOSDoubleArray_GetRef(inhomLast, 1) = IOSDoubleArray_Get(inhom2, 1);
    }
    else {
      pt = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(IOSDoubleArray_Get(inhom1, 0), IOSDoubleArray_Get(inhom1, 1), YES) autorelease];
      *IOSDoubleArray_GetRef(inhomLast, 0) = IOSDoubleArray_Get(inhom1, 0);
      *IOSDoubleArray_GetRef(inhomLast, 1) = IOSDoubleArray_Get(inhom1, 1);
    }
    [self->al_ addWithId:pt];
  }
  [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) setPointsWithJavaUtilArrayList:self->al_];
  [self->locus_ setDefinedWithBoolean:YES];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelDiscreteAlgoShortestDistance)

@implementation GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink

- (instancetype)initWithGeogebraCommonKernelDiscreteAlgoShortestDistance:(GeogebraCommonKernelDiscreteAlgoShortestDistance *)outer$
                                                              withDouble:(jdouble)weight
                                                              withDouble:(jdouble)capacity
                                  withGeogebraCommonKernelDiscreteMyNode:(GeogebraCommonKernelDiscreteMyNode *)n1
                                  withGeogebraCommonKernelDiscreteMyNode:(GeogebraCommonKernelDiscreteMyNode *)n2 {
  GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink_initWithGeogebraCommonKernelDiscreteAlgoShortestDistance_withDouble_withDouble_withGeogebraCommonKernelDiscreteMyNode_withGeogebraCommonKernelDiscreteMyNode_(self, outer$, weight, capacity, n1, n2);
  return self;
}

- (NSString *)description {
  return JreStrcat("$I", @"Edge", id__);
}

- (void)dealloc {
  RELEASE_(n1_);
  RELEASE_(n2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelDiscreteAlgoShortestDistance:withDouble:withDouble:withGeogebraCommonKernelDiscreteMyNode:withGeogebraCommonKernelDiscreteMyNode:", "MyLink", NULL, 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n1_", NULL, 0x4, "Lgeogebra.common.kernel.discrete.MyNode;", NULL, NULL,  },
    { "n2_", NULL, 0x4, "Lgeogebra.common.kernel.discrete.MyNode;", NULL, NULL,  },
    { "capacity_", NULL, 0x0, "D", NULL, NULL,  },
    { "weight_", NULL, 0x0, "D", NULL, NULL,  },
    { "id__", "id", 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink = { 2, "MyLink", "geogebra.common.kernel.discrete", "AlgoShortestDistance", 0x0, 2, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink;
}

@end

void GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink_initWithGeogebraCommonKernelDiscreteAlgoShortestDistance_withDouble_withDouble_withGeogebraCommonKernelDiscreteMyNode_withGeogebraCommonKernelDiscreteMyNode_(GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink *self, GeogebraCommonKernelDiscreteAlgoShortestDistance *outer$, jdouble weight, jdouble capacity, GeogebraCommonKernelDiscreteMyNode *n1, GeogebraCommonKernelDiscreteMyNode *n2) {
  NSObject_init(self);
  self->id__ = outer$->edgeCount_++;
  self->weight_ = weight;
  self->capacity_ = capacity;
  GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink_set_n1_(self, n1);
  GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink_set_n2_(self, n2);
}

GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink *new_GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink_initWithGeogebraCommonKernelDiscreteAlgoShortestDistance_withDouble_withDouble_withGeogebraCommonKernelDiscreteMyNode_withGeogebraCommonKernelDiscreteMyNode_(GeogebraCommonKernelDiscreteAlgoShortestDistance *outer$, jdouble weight, jdouble capacity, GeogebraCommonKernelDiscreteMyNode *n1, GeogebraCommonKernelDiscreteMyNode *n2) {
  GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink *self = [GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink alloc];
  GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink_initWithGeogebraCommonKernelDiscreteAlgoShortestDistance_withDouble_withDouble_withGeogebraCommonKernelDiscreteMyNode_withGeogebraCommonKernelDiscreteMyNode_(self, outer$, weight, capacity, n1, n2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink)

@implementation GeogebraCommonKernelDiscreteAlgoShortestDistance_$1

- (JavaLangDouble *)transformWithId:(GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink *)link {
  return JavaLangDouble_valueOfWithDouble_(((GeogebraCommonKernelDiscreteAlgoShortestDistance_MyLink *) nil_chk(link))->weight_);
}

- (instancetype)init {
  GeogebraCommonKernelDiscreteAlgoShortestDistance_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "transformWithId:", "transform", "Ljava.lang.Double;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelDiscreteAlgoShortestDistance", "compute" };
  static const J2ObjcClassInfo _GeogebraCommonKernelDiscreteAlgoShortestDistance_$1 = { 2, "", "geogebra.common.kernel.discrete", "AlgoShortestDistance", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lorg/apache/commons/collections15/Transformer<Lgeogebra/common/kernel/discrete/AlgoShortestDistance$MyLink;Ljava/lang/Double;>;" };
  return &_GeogebraCommonKernelDiscreteAlgoShortestDistance_$1;
}

@end

void GeogebraCommonKernelDiscreteAlgoShortestDistance_$1_init(GeogebraCommonKernelDiscreteAlgoShortestDistance_$1 *self) {
  NSObject_init(self);
}

GeogebraCommonKernelDiscreteAlgoShortestDistance_$1 *new_GeogebraCommonKernelDiscreteAlgoShortestDistance_$1_init() {
  GeogebraCommonKernelDiscreteAlgoShortestDistance_$1 *self = [GeogebraCommonKernelDiscreteAlgoShortestDistance_$1 alloc];
  GeogebraCommonKernelDiscreteAlgoShortestDistance_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelDiscreteAlgoShortestDistance_$1)
