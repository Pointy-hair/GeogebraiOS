//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/linear/AbstractRealVector.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "org/apache/commons/math/FunctionEvaluationException.h"
#include "org/apache/commons/math/analysis/BinaryFunction.h"
#include "org/apache/commons/math/analysis/ComposableFunction.h"
#include "org/apache/commons/math/analysis/UnivariateRealFunction.h"
#include "org/apache/commons/math/exception/DimensionMismatchException.h"
#include "org/apache/commons/math/exception/MathUnsupportedOperationException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/AbstractRealVector.h"
#include "org/apache/commons/math/linear/Array2DRowRealMatrix.h"
#include "org/apache/commons/math/linear/ArrayRealVector.h"
#include "org/apache/commons/math/linear/MatrixIndexException.h"
#include "org/apache/commons/math/linear/OpenMapRealMatrix.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/linear/RealVector.h"
#include "org/apache/commons/math/linear/SparseRealVector.h"
#include "org/apache/commons/math/util/FastMath.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl () {
 @public
  OrgApacheCommonsMathLinearAbstractRealVector *this$0_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl, this$0_, OrgApacheCommonsMathLinearAbstractRealVector *)

@interface OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator () {
 @public
  jint dim_;
  OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *current_;
  OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *next__;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator, current_, OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator, next__, OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *)

@interface OrgApacheCommonsMathLinearAbstractRealVector_$1 : NSObject < JavaUtilIterator > {
 @public
  jint i_;
  OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *e_;
  jint val$dim_;
}

- (jboolean)hasNext;

- (OrgApacheCommonsMathLinearRealVector_Entry *)next;

- (void)remove;

- (instancetype)initWithOrgApacheCommonsMathLinearAbstractRealVector:(OrgApacheCommonsMathLinearAbstractRealVector *)outer$
                                                             withInt:(jint)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathLinearAbstractRealVector_$1)

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractRealVector_$1, e_, OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *)

__attribute__((unused)) static void OrgApacheCommonsMathLinearAbstractRealVector_$1_initWithOrgApacheCommonsMathLinearAbstractRealVector_withInt_(OrgApacheCommonsMathLinearAbstractRealVector_$1 *self, OrgApacheCommonsMathLinearAbstractRealVector *outer$, jint capture$0);

__attribute__((unused)) static OrgApacheCommonsMathLinearAbstractRealVector_$1 *new_OrgApacheCommonsMathLinearAbstractRealVector_$1_initWithOrgApacheCommonsMathLinearAbstractRealVector_withInt_(OrgApacheCommonsMathLinearAbstractRealVector *outer$, jint capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathLinearAbstractRealVector_$1)

@implementation OrgApacheCommonsMathLinearAbstractRealVector

- (void)checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension]];
}

- (void)checkVectorDimensionsWithInt:(jint)n {
  jint d = [self getDimension];
  if (d != n) {
    @throw [new_OrgApacheCommonsMathExceptionDimensionMismatchException_initWithInt_withInt_(d, n) autorelease];
  }
}

- (void)checkIndexWithInt:(jint)index {
  if (index < 0 || index >= [self getDimension]) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INDEX_OUT_OF_RANGE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(index), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_([self getDimension] - 1) } count:3 type:NSObject_class_()]) autorelease];
  }
}

- (void)setSubVectorWithInt:(jint)index
withOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkIndexWithInt:index];
  [self checkIndexWithInt:index + [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension] - 1];
  [self setSubVectorWithInt:index withDoubleArray:[v getData]];
}

- (void)setSubVectorWithInt:(jint)index
            withDoubleArray:(IOSDoubleArray *)v {
  [self checkIndexWithInt:index];
  [self checkIndexWithInt:index + ((IOSDoubleArray *) nil_chk(v))->size_ - 1];
  for (jint i = 0; i < v->size_; i++) {
    [self setEntryWithInt:i + index withDouble:IOSDoubleArray_Get(v, i)];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)addWithDoubleArray:(IOSDoubleArray *)v {
  IOSDoubleArray *result = [((IOSDoubleArray *) nil_chk(v)) clone];
  id<JavaUtilIterator> it = [self sparseIterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
    *IOSDoubleArray_GetRef(nil_chk(result), [((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getIndex]) += [e getValue];
  }
  return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(result, NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearRealVector>)addWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearArrayRealVector class]]) {
    IOSDoubleArray *values = [((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(((OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])))) getDataRef];
    return [self addWithDoubleArray:values];
  }
  id<OrgApacheCommonsMathLinearRealVector> result = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) copy__];
  id<JavaUtilIterator> it = [self sparseIterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
    jint index = [((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getIndex];
    [result setEntryWithInt:index withDouble:[e getValue] + [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(result)) getEntryWithInt:index]];
  }
  return result;
}

- (id<OrgApacheCommonsMathLinearRealVector>)subtractWithDoubleArray:(IOSDoubleArray *)v {
  IOSDoubleArray *result = [((IOSDoubleArray *) nil_chk(v)) clone];
  id<JavaUtilIterator> it = [self sparseIterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
    jint index = [((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getIndex];
    *IOSDoubleArray_GetRef(nil_chk(result), index) = [e getValue] - IOSDoubleArray_Get(result, index);
  }
  return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(result, NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearRealVector>)subtractWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearArrayRealVector class]]) {
    IOSDoubleArray *values = [((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(((OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])))) getDataRef];
    return [self addWithDoubleArray:values];
  }
  id<OrgApacheCommonsMathLinearRealVector> result = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) copy__];
  id<JavaUtilIterator> it = [self sparseIterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
    jint index = [((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getIndex];
    [v setEntryWithInt:index withDouble:[e getValue] - [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(result)) getEntryWithInt:index]];
  }
  return result;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAddWithDouble:(jdouble)d {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapAddToSelfWithDouble:d];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAddToSelfWithDouble:(jdouble)d {
  if (d != 0) {
    @try {
      return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:[((OrgApacheCommonsMathAnalysisBinaryFunction *) nil_chk(OrgApacheCommonsMathAnalysisBinaryFunction_get_ADD_())) fix1stArgumentWithDouble:d]];
    }
    @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
      @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
    }
  }
  return self;
}

- (OrgApacheCommonsMathLinearAbstractRealVector *)copy__ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)dotProductWithDoubleArray:(IOSDoubleArray *)v {
  return [self dotProductWithOrgApacheCommonsMathLinearRealVector:[new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(v, NO) autorelease]];
}

- (jdouble)dotProductWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:v];
  jdouble d = 0;
  id<JavaUtilIterator> it = [self sparseIterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
    d += [((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getValue] * [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getEntryWithInt:[e getIndex]];
  }
  return d;
}

- (id<OrgApacheCommonsMathLinearRealVector>)ebeDivideWithDoubleArray:(IOSDoubleArray *)v {
  return [self ebeDivideWithOrgApacheCommonsMathLinearRealVector:[new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(v, NO) autorelease]];
}

- (id<OrgApacheCommonsMathLinearRealVector>)ebeMultiplyWithDoubleArray:(IOSDoubleArray *)v {
  return [self ebeMultiplyWithOrgApacheCommonsMathLinearRealVector:[new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(v, NO) autorelease]];
}

- (jdouble)getDistanceWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:v];
  jdouble d = 0;
  id<JavaUtilIterator> it = [self iterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
    jdouble diff = [((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getValue] - [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getEntryWithInt:[e getIndex]];
    d += diff * diff;
  }
  return OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(d);
}

- (jdouble)getNorm {
  jdouble sum = 0;
  id<JavaUtilIterator> it = [self sparseIterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
    jdouble value = [((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getValue];
    sum += value * value;
  }
  return OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(sum);
}

- (jdouble)getL1Norm {
  jdouble norm = 0;
  id<JavaUtilIterator> it = [self sparseIterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
    norm += OrgApacheCommonsMathUtilFastMath_absWithDouble_([((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getValue]);
  }
  return norm;
}

- (jdouble)getLInfNorm {
  jdouble norm = 0;
  id<JavaUtilIterator> it = [self sparseIterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
    norm = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(norm, OrgApacheCommonsMathUtilFastMath_absWithDouble_([((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getValue]));
  }
  return norm;
}

- (jdouble)getDistanceWithDoubleArray:(IOSDoubleArray *)v {
  return [self getDistanceWithOrgApacheCommonsMathLinearRealVector:[new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(v, NO) autorelease]];
}

- (jdouble)getL1DistanceWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:v];
  jdouble d = 0;
  id<JavaUtilIterator> it = [self iterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
    d += OrgApacheCommonsMathUtilFastMath_absWithDouble_([((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getValue] - [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getEntryWithInt:[e getIndex]]);
  }
  return d;
}

- (jdouble)getL1DistanceWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  jdouble d = 0;
  id<JavaUtilIterator> it = [self iterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
    d += OrgApacheCommonsMathUtilFastMath_absWithDouble_([((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getValue] - IOSDoubleArray_Get(v, [e getIndex]));
  }
  return d;
}

- (jdouble)getLInfDistanceWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:v];
  jdouble d = 0;
  id<JavaUtilIterator> it = [self iterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
    d = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(OrgApacheCommonsMathUtilFastMath_absWithDouble_([((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getValue] - [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getEntryWithInt:[e getIndex]]), d);
  }
  return d;
}

- (jdouble)getLInfDistanceWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  jdouble d = 0;
  id<JavaUtilIterator> it = [self iterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
    d = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(OrgApacheCommonsMathUtilFastMath_absWithDouble_([((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getValue] - IOSDoubleArray_Get(v, [e getIndex])), d);
  }
  return d;
}

- (jint)getMinIndex {
  jint minIndex = -1;
  jdouble minValue = JavaLangDouble_POSITIVE_INFINITY;
  id<JavaUtilIterator> iterator = [self iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    OrgApacheCommonsMathLinearRealVector_Entry *entry_ = [iterator next];
    if ([((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(entry_)) getValue] <= minValue) {
      minIndex = [entry_ getIndex];
      minValue = [entry_ getValue];
    }
  }
  return minIndex;
}

- (jdouble)getMinValue {
  jint minIndex = [self getMinIndex];
  return minIndex < 0 ? JavaLangDouble_NaN : [self getEntryWithInt:minIndex];
}

- (jint)getMaxIndex {
  jint maxIndex = -1;
  jdouble maxValue = JavaLangDouble_NEGATIVE_INFINITY;
  id<JavaUtilIterator> iterator = [self iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    OrgApacheCommonsMathLinearRealVector_Entry *entry_ = [iterator next];
    if ([((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(entry_)) getValue] >= maxValue) {
      maxIndex = [entry_ getIndex];
      maxValue = [entry_ getValue];
    }
  }
  return maxIndex;
}

- (jdouble)getMaxValue {
  jint maxIndex = [self getMaxIndex];
  return maxIndex < 0 ? JavaLangDouble_NaN : [self getEntryWithInt:maxIndex];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAbs {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapAbsToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAbsToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_ABS_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAcos {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapAcosToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAcosToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_ACOS_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAsin {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapAsinToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAsinToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_ASIN_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAtan {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapAtanToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAtanToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_ATAN_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapCbrt {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapCbrtToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapCbrtToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_CBRT_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapCeil {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapCeilToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapCeilToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_CEIL_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapCos {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapCosToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapCosToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_COS_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapCosh {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapCoshToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapCoshToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_COSH_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapDivideWithDouble:(jdouble)d {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapDivideToSelfWithDouble:d];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapDivideToSelfWithDouble:(jdouble)d {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:[((OrgApacheCommonsMathAnalysisBinaryFunction *) nil_chk(OrgApacheCommonsMathAnalysisBinaryFunction_get_DIVIDE_())) fix2ndArgumentWithDouble:d]];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapExp {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapExpToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapExpToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_EXP_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapExpm1 {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapExpm1ToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapExpm1ToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_EXPM1_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapFloor {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapFloorToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapFloorToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_FLOOR_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapInv {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapInvToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapInvToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_INVERT_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapLog {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapLogToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapLogToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_LOG_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapLog10 {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapLog10ToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapLog10ToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_LOG10_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapLog1p {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapLog1pToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapLog1pToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_LOG1P_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapMultiplyWithDouble:(jdouble)d {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapMultiplyToSelfWithDouble:d];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapMultiplyToSelfWithDouble:(jdouble)d {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:[((OrgApacheCommonsMathAnalysisBinaryFunction *) nil_chk(OrgApacheCommonsMathAnalysisBinaryFunction_get_MULTIPLY_())) fix1stArgumentWithDouble:d]];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapPowWithDouble:(jdouble)d {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapPowToSelfWithDouble:d];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapPowToSelfWithDouble:(jdouble)d {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:[((OrgApacheCommonsMathAnalysisBinaryFunction *) nil_chk(OrgApacheCommonsMathAnalysisBinaryFunction_get_POW_())) fix2ndArgumentWithDouble:d]];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapRint {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapRintToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapRintToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_RINT_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSignum {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapSignumToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSignumToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_SIGNUM_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSin {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapSinToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSinToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_SIN_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSinh {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapSinhToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSinhToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_SINH_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSqrt {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapSqrtToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSqrtToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_SQRT_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSubtractWithDouble:(jdouble)d {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapSubtractToSelfWithDouble:d];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSubtractToSelfWithDouble:(jdouble)d {
  return [self mapAddToSelfWithDouble:-d];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapTan {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapTanToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapTanToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_TAN_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapTanh {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapTanhToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapTanhToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_TANH_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapUlp {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapUlpToSelf];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapUlpToSelf {
  @try {
    return [self mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:OrgApacheCommonsMathAnalysisComposableFunction_get_ULP_()];
  }
  @catch (OrgApacheCommonsMathFunctionEvaluationException *e) {
    @throw [new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)outerProductWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  id<OrgApacheCommonsMathLinearRealMatrix> product;
  if ([OrgApacheCommonsMathLinearSparseRealVector_class_() isInstance:v] || [OrgApacheCommonsMathLinearSparseRealVector_class_() isInstance:self]) {
    product = [new_OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithInt_withInt_([self getDimension], [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension]) autorelease];
  }
  else {
    product = [new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithInt_withInt_([self getDimension], [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension]) autorelease];
  }
  id<JavaUtilIterator> thisIt = [self sparseIterator];
  OrgApacheCommonsMathLinearRealVector_Entry *thisE = nil;
  while ([((id<JavaUtilIterator>) nil_chk(thisIt)) hasNext] && (thisE = [thisIt next]) != nil) {
    id<JavaUtilIterator> otherIt = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) sparseIterator];
    OrgApacheCommonsMathLinearRealVector_Entry *otherE = nil;
    while ([((id<JavaUtilIterator>) nil_chk(otherIt)) hasNext] && (otherE = [otherIt next]) != nil) {
      [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(product)) setEntryWithInt:[((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(thisE)) getIndex] withInt:[((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(otherE)) getIndex] withDouble:[thisE getValue] * [otherE getValue]];
    }
  }
  return product;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)outerProductWithDoubleArray:(IOSDoubleArray *)v {
  return [self outerProductWithOrgApacheCommonsMathLinearRealVector:[new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(v, NO) autorelease]];
}

- (id<OrgApacheCommonsMathLinearRealVector>)projectionWithDoubleArray:(IOSDoubleArray *)v {
  return [self projectionWithOrgApacheCommonsMathLinearRealVector:[new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(v, NO) autorelease]];
}

- (void)setWithDouble:(jdouble)value {
  id<JavaUtilIterator> it = [self iterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e = nil;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
    [((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) setValueWithDouble:value];
  }
}

- (IOSDoubleArray *)toArray {
  jint dim = [self getDimension];
  IOSDoubleArray *values = [IOSDoubleArray arrayWithLength:dim];
  for (jint i = 0; i < dim; i++) {
    *IOSDoubleArray_GetRef(values, i) = [self getEntryWithInt:i];
  }
  return values;
}

- (IOSDoubleArray *)getData {
  return [self toArray];
}

- (id<OrgApacheCommonsMathLinearRealVector>)unitVector {
  id<OrgApacheCommonsMathLinearRealVector> copy_ = [self copy__];
  [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(copy_)) unitize];
  return copy_;
}

- (void)unitize {
  [self mapDivideToSelfWithDouble:[self getNorm]];
}

- (id<JavaUtilIterator>)sparseIterator {
  return [new_OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator_initWithOrgApacheCommonsMathLinearAbstractRealVector_(self) autorelease];
}

- (id<JavaUtilIterator>)iterator {
  jint dim = [self getDimension];
  return [new_OrgApacheCommonsMathLinearAbstractRealVector_$1_initWithOrgApacheCommonsMathLinearAbstractRealVector_withInt_(self, dim) autorelease];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:(id<OrgApacheCommonsMathAnalysisUnivariateRealFunction>)function {
  return [((OrgApacheCommonsMathLinearAbstractRealVector *) nil_chk([self copy__])) mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:function];
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:(id<OrgApacheCommonsMathAnalysisUnivariateRealFunction>)function {
  id<JavaUtilIterator> it = ([((id<OrgApacheCommonsMathAnalysisUnivariateRealFunction>) nil_chk(function)) valueWithDouble:0] == 0) ? [self sparseIterator] : [self iterator];
  OrgApacheCommonsMathLinearRealVector_Entry *e;
  while ([it hasNext] && (e = [it next]) != nil) {
    [e setValueWithDouble:[function valueWithDouble:[((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getValue]]];
  }
  return self;
}

- (instancetype)init {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:", "checkVectorDimensions", "V", 0x4, NULL, NULL },
    { "checkVectorDimensionsWithInt:", "checkVectorDimensions", "V", 0x4, "Lorg.apache.commons.math.exception.DimensionMismatchException;", NULL },
    { "checkIndexWithInt:", "checkIndex", "V", 0x4, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setSubVectorWithInt:withOrgApacheCommonsMathLinearRealVector:", "setSubVector", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setSubVectorWithInt:withDoubleArray:", "setSubVector", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "addWithDoubleArray:", "add", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "addWithOrgApacheCommonsMathLinearRealVector:", "add", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithDoubleArray:", "subtract", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearRealVector:", "subtract", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "mapAddWithDouble:", "mapAdd", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapAddToSelfWithDouble:", "mapAddToSelf", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.linear.AbstractRealVector;", 0x401, NULL, NULL },
    { "dotProductWithDoubleArray:", "dotProduct", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "dotProductWithOrgApacheCommonsMathLinearRealVector:", "dotProduct", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeDivideWithDoubleArray:", "ebeDivide", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeMultiplyWithDoubleArray:", "ebeMultiply", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getDistanceWithOrgApacheCommonsMathLinearRealVector:", "getDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getNorm", NULL, "D", 0x1, NULL, NULL },
    { "getL1Norm", NULL, "D", 0x1, NULL, NULL },
    { "getLInfNorm", NULL, "D", 0x1, NULL, NULL },
    { "getDistanceWithDoubleArray:", "getDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getL1DistanceWithOrgApacheCommonsMathLinearRealVector:", "getL1Distance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getL1DistanceWithDoubleArray:", "getL1Distance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getLInfDistanceWithOrgApacheCommonsMathLinearRealVector:", "getLInfDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getLInfDistanceWithDoubleArray:", "getLInfDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getMinIndex", NULL, "I", 0x1, NULL, NULL },
    { "getMinValue", NULL, "D", 0x1, NULL, NULL },
    { "getMaxIndex", NULL, "I", 0x1, NULL, NULL },
    { "getMaxValue", NULL, "D", 0x1, NULL, NULL },
    { "mapAbs", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapAbsToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapAcos", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapAcosToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapAsin", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapAsinToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapAtan", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapAtanToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapCbrt", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapCbrtToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapCeil", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapCeilToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapCos", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapCosToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapCosh", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapCoshToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapDivideWithDouble:", "mapDivide", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapDivideToSelfWithDouble:", "mapDivideToSelf", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapExp", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapExpToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapExpm1", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapExpm1ToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapFloor", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapFloorToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapInv", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapInvToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapLog", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapLogToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapLog10", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapLog10ToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapLog1p", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapLog1pToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapMultiplyWithDouble:", "mapMultiply", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapMultiplyToSelfWithDouble:", "mapMultiplyToSelf", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapPowWithDouble:", "mapPow", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapPowToSelfWithDouble:", "mapPowToSelf", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapRint", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapRintToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSignum", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSignumToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSin", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSinToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSinh", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSinhToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSqrt", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSqrtToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSubtractWithDouble:", "mapSubtract", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSubtractToSelfWithDouble:", "mapSubtractToSelf", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapTan", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapTanToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapTanh", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapTanhToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapUlp", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapUlpToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "outerProductWithOrgApacheCommonsMathLinearRealVector:", "outerProduct", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "outerProductWithDoubleArray:", "outerProduct", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "projectionWithDoubleArray:", "projection", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "setWithDouble:", "set", "V", 0x1, NULL, NULL },
    { "toArray", NULL, "[D", 0x1, NULL, NULL },
    { "getData", NULL, "[D", 0x1, NULL, NULL },
    { "unitVector", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "unitize", NULL, "V", 0x1, NULL, NULL },
    { "sparseIterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "mapWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:", "map", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Lorg.apache.commons.math.FunctionEvaluationException;", NULL },
    { "mapToSelfWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:", "mapToSelf", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Lorg.apache.commons.math.FunctionEvaluationException;", NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lorg.apache.commons.math.linear.AbstractRealVector$EntryImpl;", "Lorg.apache.commons.math.linear.AbstractRealVector$SparseEntryIterator;"};
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearAbstractRealVector = { 2, "AbstractRealVector", "org.apache.commons.math.linear", NULL, 0x401, 96, methods, 0, NULL, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgApacheCommonsMathLinearAbstractRealVector;
}

@end

void OrgApacheCommonsMathLinearAbstractRealVector_init(OrgApacheCommonsMathLinearAbstractRealVector *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearAbstractRealVector)

@implementation OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl

- (instancetype)initWithOrgApacheCommonsMathLinearAbstractRealVector:(OrgApacheCommonsMathLinearAbstractRealVector *)outer$ {
  OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl_initWithOrgApacheCommonsMathLinearAbstractRealVector_(self, outer$);
  return self;
}

- (jdouble)getValue {
  return [this$0_ getEntryWithInt:[self getIndex]];
}

- (void)setValueWithDouble:(jdouble)newValue {
  [this$0_ setEntryWithInt:[self getIndex] withDouble:newValue];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsMathLinearAbstractRealVector:", "EntryImpl", NULL, 0x1, NULL, NULL },
    { "getValue", NULL, "D", 0x1, NULL, NULL },
    { "setValueWithDouble:", "setValue", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.commons.math.linear.AbstractRealVector;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl = { 2, "EntryImpl", "org.apache.commons.math.linear", "AbstractRealVector", 0x4, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl;
}

@end

void OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl_initWithOrgApacheCommonsMathLinearAbstractRealVector_(OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *self, OrgApacheCommonsMathLinearAbstractRealVector *outer$) {
  OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl_set_this$0_(self, outer$);
  OrgApacheCommonsMathLinearRealVector_Entry_init(self);
  [self setIndexWithInt:0];
}

OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *new_OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl_initWithOrgApacheCommonsMathLinearAbstractRealVector_(OrgApacheCommonsMathLinearAbstractRealVector *outer$) {
  OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *self = [OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl alloc];
  OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl_initWithOrgApacheCommonsMathLinearAbstractRealVector_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl)

@implementation OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator

- (instancetype)initWithOrgApacheCommonsMathLinearAbstractRealVector:(OrgApacheCommonsMathLinearAbstractRealVector *)outer$ {
  OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator_initWithOrgApacheCommonsMathLinearAbstractRealVector_(self, outer$);
  return self;
}

- (void)advanceWithOrgApacheCommonsMathLinearAbstractRealVector_EntryImpl:(OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *)e {
  if (e == nil) {
    return;
  }
  do {
    [e setIndexWithInt:[((OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *) nil_chk(e)) getIndex] + 1];
  }
  while ([e getIndex] < dim_ && [e getValue] == 0);
  if ([((OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *) nil_chk(e)) getIndex] >= dim_) {
    [e setIndexWithInt:-1];
  }
}

- (jboolean)hasNext {
  return [((OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *) nil_chk(next__)) getIndex] >= 0;
}

- (OrgApacheCommonsMathLinearRealVector_Entry *)next {
  jint index = [((OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *) nil_chk(next__)) getIndex];
  if (index < 0) {
    @throw [new_JavaUtilNoSuchElementException_init() autorelease];
  }
  [((OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *) nil_chk(current_)) setIndexWithInt:index];
  [self advanceWithOrgApacheCommonsMathLinearAbstractRealVector_EntryImpl:next__];
  return current_;
}

- (void)remove {
  @throw [new_OrgApacheCommonsMathExceptionMathUnsupportedOperationException_initWithNSObjectArray_([IOSObjectArray arrayWithLength:0 type:NSObject_class_()]) autorelease];
}

- (void)dealloc {
  RELEASE_(current_);
  RELEASE_(next__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsMathLinearAbstractRealVector:", "SparseEntryIterator", NULL, 0x4, NULL, NULL },
    { "advanceWithOrgApacheCommonsMathLinearAbstractRealVector_EntryImpl:", "advance", "V", 0x4, NULL, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Lorg.apache.commons.math.linear.RealVector$Entry;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dim_", NULL, 0x12, "I", NULL, NULL,  },
    { "current_", NULL, 0x2, "Lorg.apache.commons.math.linear.AbstractRealVector$EntryImpl;", NULL, NULL,  },
    { "next__", "next", 0x2, "Lorg.apache.commons.math.linear.AbstractRealVector$EntryImpl;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator = { 2, "SparseEntryIterator", "org.apache.commons.math.linear", "AbstractRealVector", 0x4, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Iterator<Lorg/apache/commons/math/linear/RealVector$Entry;>;" };
  return &_OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator;
}

@end

void OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator_initWithOrgApacheCommonsMathLinearAbstractRealVector_(OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator *self, OrgApacheCommonsMathLinearAbstractRealVector *outer$) {
  NSObject_init(self);
  self->dim_ = [outer$ getDimension];
  OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator_setAndConsume_current_(self, new_OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl_initWithOrgApacheCommonsMathLinearAbstractRealVector_(outer$));
  OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator_setAndConsume_next__(self, new_OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl_initWithOrgApacheCommonsMathLinearAbstractRealVector_(outer$));
  if ([self->next__ getValue] == 0) {
    [self advanceWithOrgApacheCommonsMathLinearAbstractRealVector_EntryImpl:self->next__];
  }
}

OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator *new_OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator_initWithOrgApacheCommonsMathLinearAbstractRealVector_(OrgApacheCommonsMathLinearAbstractRealVector *outer$) {
  OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator *self = [OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator alloc];
  OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator_initWithOrgApacheCommonsMathLinearAbstractRealVector_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearAbstractRealVector_SparseEntryIterator)

@implementation OrgApacheCommonsMathLinearAbstractRealVector_$1

- (jboolean)hasNext {
  return i_ < val$dim_;
}

- (OrgApacheCommonsMathLinearRealVector_Entry *)next {
  [((OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl *) nil_chk(e_)) setIndexWithInt:i_++];
  return e_;
}

- (void)remove {
  @throw [new_OrgApacheCommonsMathExceptionMathUnsupportedOperationException_initWithNSObjectArray_([IOSObjectArray arrayWithLength:0 type:NSObject_class_()]) autorelease];
}

- (instancetype)initWithOrgApacheCommonsMathLinearAbstractRealVector:(OrgApacheCommonsMathLinearAbstractRealVector *)outer$
                                                             withInt:(jint)capture$0 {
  OrgApacheCommonsMathLinearAbstractRealVector_$1_initWithOrgApacheCommonsMathLinearAbstractRealVector_withInt_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(e_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Lorg.apache.commons.math.linear.RealVector$Entry;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearAbstractRealVector:withInt:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "i_", NULL, 0x2, "I", NULL, NULL,  },
    { "e_", NULL, 0x2, "Lorg.apache.commons.math.linear.AbstractRealVector$EntryImpl;", NULL, NULL,  },
    { "val$dim_", NULL, 0x1012, "I", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheCommonsMathLinearAbstractRealVector", "iterator" };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearAbstractRealVector_$1 = { 2, "", "org.apache.commons.math.linear", "AbstractRealVector", 0x8008, 4, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Iterator<Lorg/apache/commons/math/linear/RealVector$Entry;>;" };
  return &_OrgApacheCommonsMathLinearAbstractRealVector_$1;
}

@end

void OrgApacheCommonsMathLinearAbstractRealVector_$1_initWithOrgApacheCommonsMathLinearAbstractRealVector_withInt_(OrgApacheCommonsMathLinearAbstractRealVector_$1 *self, OrgApacheCommonsMathLinearAbstractRealVector *outer$, jint capture$0) {
  self->val$dim_ = capture$0;
  NSObject_init(self);
  self->i_ = 0;
  OrgApacheCommonsMathLinearAbstractRealVector_$1_setAndConsume_e_(self, new_OrgApacheCommonsMathLinearAbstractRealVector_EntryImpl_initWithOrgApacheCommonsMathLinearAbstractRealVector_(outer$));
}

OrgApacheCommonsMathLinearAbstractRealVector_$1 *new_OrgApacheCommonsMathLinearAbstractRealVector_$1_initWithOrgApacheCommonsMathLinearAbstractRealVector_withInt_(OrgApacheCommonsMathLinearAbstractRealVector *outer$, jint capture$0) {
  OrgApacheCommonsMathLinearAbstractRealVector_$1 *self = [OrgApacheCommonsMathLinearAbstractRealVector_$1 alloc];
  OrgApacheCommonsMathLinearAbstractRealVector_$1_initWithOrgApacheCommonsMathLinearAbstractRealVector_withInt_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearAbstractRealVector_$1)
