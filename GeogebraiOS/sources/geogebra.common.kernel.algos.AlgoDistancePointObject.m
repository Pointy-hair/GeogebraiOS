//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoDistancePointObject.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/EquationSolver.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoClosestPoint.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoDistancePointObject.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoRoots.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/MyMath.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"

#define GeogebraCommonKernelAlgosAlgoDistancePointObject_INTERVAL_START 30.0
#define GeogebraCommonKernelAlgosAlgoDistancePointObject_INTERVAL_GROWTH 2.0
#define GeogebraCommonKernelAlgosAlgoDistancePointObject_MAX_INTERVAL 10000.0

@interface GeogebraCommonKernelAlgosAlgoDistancePointObject () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> P_;
  GeogebraCommonKernelGeosGeoElement *g_;
  GeogebraCommonKernelGeosGeoNumeric *dist_;
  GeogebraCommonKernelAlgosAlgoClosestPoint *closePt_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDistancePointObject, P_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDistancePointObject, g_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDistancePointObject, dist_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDistancePointObject, closePt_, GeogebraCommonKernelAlgosAlgoClosestPoint *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoDistancePointObject, INTERVAL_START, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoDistancePointObject, INTERVAL_GROWTH, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoDistancePointObject, MAX_INTERVAL, jdouble)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoDistancePointObject_compute(GeogebraCommonKernelAlgosAlgoDistancePointObject *self);

@implementation GeogebraCommonKernelAlgosAlgoDistancePointObject

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g {
  GeogebraCommonKernelAlgosAlgoDistancePointObject_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, P, g);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Distance();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_DISTANCE;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, g_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:dist_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getDistance {
  return dist_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getP {
  return P_;
}

- (GeogebraCommonKernelGeosGeoElement *)getg {
  return g_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoDistancePointObject_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"DistanceOfAandB" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(g_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

+ (jdouble)getClosestFunctionValueToPointWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)function
                                                                         withDouble:(jdouble)x
                                                                         withDouble:(jdouble)y {
  return GeogebraCommonKernelAlgosAlgoDistancePointObject_getClosestFunctionValueToPointWithGeogebraCommonKernelArithmeticFunction_withDouble_withDouble_(function, x, y);
}

- (void)dealloc {
  RELEASE_(P_);
  RELEASE_(g_);
  RELEASE_(dist_);
  RELEASE_(closePt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoElement:", "AlgoDistancePointObject", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getDistance", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "getP", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x0, NULL, NULL },
    { "getg", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getClosestFunctionValueToPointWithGeogebraCommonKernelArithmeticFunction:withDouble:withDouble:", "getClosestFunctionValueToPoint", "D", 0x19, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "dist_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "closePt_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoClosestPoint;", NULL, NULL,  },
    { "INTERVAL_START_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelAlgosAlgoDistancePointObject_INTERVAL_START },
    { "INTERVAL_GROWTH_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelAlgosAlgoDistancePointObject_INTERVAL_GROWTH },
    { "MAX_INTERVAL_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelAlgosAlgoDistancePointObject_MAX_INTERVAL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoDistancePointObject = { 2, "AlgoDistancePointObject", "geogebra.common.kernel.algos", NULL, 0x1, 10, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoDistancePointObject;
}

@end

void GeogebraCommonKernelAlgosAlgoDistancePointObject_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoDistancePointObject *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> P, GeogebraCommonKernelGeosGeoElement *g) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoDistancePointObject_set_P_(self, P);
  GeogebraCommonKernelAlgosAlgoDistancePointObject_set_g_(self, g);
  GeogebraCommonKernelAlgosAlgoDistancePointObject_setAndConsume_dist_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelAlgosAlgoDistancePointObject_set_closePt_(self, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getAlgoDispatcher])) getNewAlgoClosestPointWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>) check_protocol_cast(g, @protocol(GeogebraCommonKernelPath)) withGeogebraCommonKernelKernelNDGeoPointND:P]);
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->closePt_];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoDistancePointObject_compute(self);
  [self->dist_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoDistancePointObject *new_GeogebraCommonKernelAlgosAlgoDistancePointObject_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> P, GeogebraCommonKernelGeosGeoElement *g) {
  GeogebraCommonKernelAlgosAlgoDistancePointObject *self = [GeogebraCommonKernelAlgosAlgoDistancePointObject alloc];
  GeogebraCommonKernelAlgosAlgoDistancePointObject_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, P, g);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDistancePointObject_compute(GeogebraCommonKernelAlgosAlgoDistancePointObject *self) {
  if (self->closePt_ != nil) [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->dist_)) setValueWithDouble:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self->closePt_ getP])) distanceWithGeogebraCommonKernelKernelNDGeoPointND:self->P_]];
  else [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->dist_)) setValueWithDouble:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->g_)) distanceWithGeogebraCommonKernelKernelNDGeoPointND:self->P_]];
}

jdouble GeogebraCommonKernelAlgosAlgoDistancePointObject_getClosestFunctionValueToPointWithGeogebraCommonKernelArithmeticFunction_withDouble_withDouble_(GeogebraCommonKernelArithmeticFunction *function, jdouble x, jdouble y) {
  GeogebraCommonKernelAlgosAlgoDistancePointObject_initialize();
  GeogebraCommonKernelKernel *kernel = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(function)) getKernel];
  GeogebraCommonKernelArithmeticPolyFunction *polyFunction = [function expandToPolyFunctionWithGeogebraCommonKernelArithmeticExpressionValue:[function getExpression] withBoolean:NO withBoolean:YES];
  if (polyFunction != nil) {
    GeogebraCommonKernelArithmeticPolyFunction *polyDervi = [polyFunction getDerivative];
    IOSDoubleArray *funCoeffs = [polyFunction getCoeffs];
    IOSDoubleArray *derivCoeffs = [((GeogebraCommonKernelArithmeticPolyFunction *) nil_chk(polyDervi)) getCoeffs];
    jint n = ((IOSDoubleArray *) nil_chk(funCoeffs))->size_ - 1;
    jint m = ((IOSDoubleArray *) nil_chk(derivCoeffs))->size_ - 1;
    IOSDoubleArray *eq = [IOSDoubleArray arrayWithLength:(m + n < 1) ? 2 : m + n + 1];
    for (jint i = 0; i < eq->size_; i++) {
      for (jint j = JavaLangMath_maxWithInt_withInt_(0, i - m); j <= JavaLangMath_minWithInt_withInt_(i, n); j++) {
        *IOSDoubleArray_GetRef(eq, i) += 2 * IOSDoubleArray_Get(funCoeffs, j) * IOSDoubleArray_Get(derivCoeffs, i - j);
      }
    }
    for (jint i = 0; i <= m; i++) {
      *IOSDoubleArray_GetRef(eq, i) += (-2) * y * IOSDoubleArray_Get(derivCoeffs, i);
    }
    *IOSDoubleArray_GetRef(eq, 1) += 2;
    *IOSDoubleArray_GetRef(eq, 0) -= 2 * x;
    GeogebraCommonKernelEquationSolver *solver = [new_GeogebraCommonKernelEquationSolver_initWithGeogebraCommonKernelKernel_(kernel) autorelease];
    jint nrOfRoots = [solver polynomialRootsWithDoubleArray:eq withBoolean:NO];
    if (nrOfRoots == 0) {
      return JavaLangDouble_NaN;
    }
    jint k = 0;
    jdouble min = GeogebraCommonUtilMyMath_distancePointFunctionAtWithGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_withDouble_(polyFunction, x, y, IOSDoubleArray_Get(eq, 0));
    for (jint i = 1; i < nrOfRoots; i++) {
      jdouble val = GeogebraCommonUtilMyMath_distancePointFunctionAtWithGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_withDouble_(polyFunction, x, y, IOSDoubleArray_Get(eq, i));
      if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(min, val)) {
        min = val;
        k = i;
      }
    }
    return IOSDoubleArray_Get(eq, k);
  }
  GeogebraCommonKernelArithmeticFunctionVariable *fVar = [function getFunctionVariable];
  GeogebraCommonKernelArithmeticFunction *deriv = [function getDerivativeWithInt:1 withBoolean:YES];
  [deriv traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_Replacer_getReplacerWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelArithmeticFunction *) nil_chk(deriv)) getFunctionVariable], fVar)];
  GeogebraCommonKernelArithmeticExpressionNode *expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, fVar, GeogebraCommonPluginOperationEnum_get_MINUS(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, x) autorelease]) autorelease];
  expr = [expr multiplyWithDouble:2];
  GeogebraCommonKernelArithmeticExpressionNode *expr2 = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [function getExpression], GeogebraCommonPluginOperationEnum_get_MINUS(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, y) autorelease]) autorelease];
  expr2 = [expr2 multiplyRWithGeogebraCommonKernelArithmeticExpressionValue:[deriv getExpression]];
  expr2 = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expr2)) multiplyWithDouble:2];
  expr = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expr)) plusWithGeogebraCommonKernelArithmeticExpressionValue:expr2];
  GeogebraCommonKernelArithmeticFunction *func = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(expr, fVar) autorelease];
  GeogebraCommonKernelGeosGeoFunction *geoFunc = [new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunction_([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction], func) autorelease];
  IOSDoubleArray *roots;
  jdouble left = GeogebraCommonKernelAlgosAlgoDistancePointObject_INTERVAL_START;
  jdouble right = GeogebraCommonKernelAlgosAlgoDistancePointObject_INTERVAL_START;
  while ((roots = GeogebraCommonKernelAlgosAlgoRoots_findRootsWithGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_withInt_(geoFunc, x - left, y + right, J2ObjCFpToInt(((left + right) * 10)))) == nil && GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(GeogebraCommonKernelAlgosAlgoDistancePointObject_MAX_INTERVAL, left)) {
    left *= GeogebraCommonKernelAlgosAlgoDistancePointObject_INTERVAL_GROWTH;
    right *= GeogebraCommonKernelAlgosAlgoDistancePointObject_INTERVAL_GROWTH;
  }
  if (roots == nil || roots->size_ == 0) {
    return JavaLangDouble_NaN;
  }
  jint k = 0;
  jdouble min = GeogebraCommonUtilMyMath_distancePointFunctionAtWithGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_withDouble_(function, x, y, IOSDoubleArray_Get(nil_chk(roots), 0));
  for (jint i = 1; i < roots->size_; i++) {
    jdouble val = GeogebraCommonUtilMyMath_distancePointFunctionAtWithGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_withDouble_(function, x, y, IOSDoubleArray_Get(roots, i));
    if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(min, val)) {
      min = val;
      k = i;
    }
  }
  return IOSDoubleArray_Get(roots, k);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoDistancePointObject)
