//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/prover/AlgoIsOnPath.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/prover/AlgoIsOnPath.h"
#include "geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "geogebra/common/kernel/prover/polynomial/Variable.h"

@interface GeogebraCommonKernelProverAlgoIsOnPath () {
 @public
  GeogebraCommonKernelGeosGeoPoint *inputPoint_;
  id<GeogebraCommonKernelPath> inputPath_;
  GeogebraCommonKernelGeosGeoBoolean *outputBoolean_;
  IOSObjectArray *botanaPolynomials_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverAlgoIsOnPath, inputPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverAlgoIsOnPath, inputPath_, id<GeogebraCommonKernelPath>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverAlgoIsOnPath, outputBoolean_, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverAlgoIsOnPath, botanaPolynomials_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelProverAlgoIsOnPath_compute(GeogebraCommonKernelProverAlgoIsOnPath *self);

@implementation GeogebraCommonKernelProverAlgoIsOnPath

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)inputPoint
                            withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)inputPath {
  GeogebraCommonKernelProverAlgoIsOnPath_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelPath_(self, cons, label, inputPoint, inputPath);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return nil;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputPoint_);
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(inputPath_, [GeogebraCommonKernelGeosGeoElement class]));
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outputBoolean_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoBoolean *)getResult {
  return outputBoolean_;
}

- (void)compute {
  GeogebraCommonKernelProverAlgoIsOnPath_compute(self);
}

- (IOSObjectArray *)getBotanaPolynomials {
  if (botanaPolynomials_ != nil) {
    return botanaPolynomials_;
  }
  if (inputPoint_ != nil && inputPath_ != nil) {
    if ([inputPath_ isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]]) {
      IOSObjectArray *fv1 = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelProverPolynomialVariable_class_()];
      IOSObjectArray *fv2 = [IOSObjectArray arrayWithLength:4 type:GeogebraCommonKernelProverPolynomialVariable_class_()];
      fv1 = [inputPoint_ getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:inputPoint_];
      fv2 = [((GeogebraCommonKernelGeosGeoLine *) check_class_cast(inputPath_, [GeogebraCommonKernelGeosGeoLine class])) getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(inputPath_, [GeogebraCommonKernelGeosGeoLine class])];
      GeogebraCommonKernelProverAlgoIsOnPath_setAndConsume_botanaPolynomials_(self, [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ 1, 1 } type:GeogebraCommonKernelProverPolynomialPolynomial_class_()]);
      IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(botanaPolynomials_, 0)), 0, GeogebraCommonKernelProverPolynomialPolynomial_collinearWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(fv1), 0), IOSObjectArray_Get(fv1, 1), IOSObjectArray_Get(nil_chk(fv2), 0), IOSObjectArray_Get(fv2, 1), IOSObjectArray_Get(fv2, 2), IOSObjectArray_Get(fv2, 3)));
      return botanaPolynomials_;
    }
    else if ([inputPath_ isKindOfClass:[GeogebraCommonKernelGeosGeoConic class]]) {
      if ([((GeogebraCommonKernelGeosGeoConic *) check_class_cast(inputPath_, [GeogebraCommonKernelGeosGeoConic class])) isCircle]) {
        IOSObjectArray *fv1 = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelProverPolynomialVariable_class_()];
        IOSObjectArray *fv2 = [IOSObjectArray arrayWithLength:4 type:GeogebraCommonKernelProverPolynomialVariable_class_()];
        fv1 = [inputPoint_ getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:inputPoint_];
        fv2 = [((GeogebraCommonKernelGeosGeoConic *) check_class_cast(inputPath_, [GeogebraCommonKernelGeosGeoConic class])) getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(inputPath_, [GeogebraCommonKernelGeosGeoConic class])];
        GeogebraCommonKernelProverAlgoIsOnPath_setAndConsume_botanaPolynomials_(self, [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ 1, 1 } type:GeogebraCommonKernelProverPolynomialPolynomial_class_()]);
        IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(botanaPolynomials_, 0)), 0, GeogebraCommonKernelProverPolynomialPolynomial_equidistantWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(fv1), 0), IOSObjectArray_Get(fv1, 1), IOSObjectArray_Get(nil_chk(fv2), 0), IOSObjectArray_Get(fv2, 1), IOSObjectArray_Get(fv2, 2), IOSObjectArray_Get(fv2, 3)));
        return botanaPolynomials_;
      }
    }
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (void)dealloc {
  RELEASE_(inputPoint_);
  RELEASE_(inputPath_);
  RELEASE_(outputBoolean_);
  RELEASE_(botanaPolynomials_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelPath:", "AlgoIsOnPath", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoBoolean;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getBotanaPolynomials", NULL, "[[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "inputPath_", NULL, 0x2, "Lgeogebra.common.kernel.Path;", NULL, NULL,  },
    { "outputBoolean_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "botanaPolynomials_", NULL, 0x2, "[[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelProverAlgoIsOnPath = { 2, "AlgoIsOnPath", "geogebra.common.kernel.prover", NULL, 0x1, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelProverAlgoIsOnPath;
}

@end

void GeogebraCommonKernelProverAlgoIsOnPath_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelPath_(GeogebraCommonKernelProverAlgoIsOnPath *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *inputPoint, id<GeogebraCommonKernelPath> inputPath) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelProverAlgoIsOnPath_set_inputPoint_(self, inputPoint);
  GeogebraCommonKernelProverAlgoIsOnPath_set_inputPath_(self, inputPath);
  GeogebraCommonKernelProverAlgoIsOnPath_setAndConsume_outputBoolean_(self, new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelProverAlgoIsOnPath_compute(self);
}

GeogebraCommonKernelProverAlgoIsOnPath *new_GeogebraCommonKernelProverAlgoIsOnPath_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelPath_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *inputPoint, id<GeogebraCommonKernelPath> inputPath) {
  GeogebraCommonKernelProverAlgoIsOnPath *self = [GeogebraCommonKernelProverAlgoIsOnPath alloc];
  GeogebraCommonKernelProverAlgoIsOnPath_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelPath_(self, cons, label, inputPoint, inputPath);
  return self;
}

void GeogebraCommonKernelProverAlgoIsOnPath_compute(GeogebraCommonKernelProverAlgoIsOnPath *self) {
  [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->outputBoolean_)) setUndefined];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelProverAlgoIsOnPath)
