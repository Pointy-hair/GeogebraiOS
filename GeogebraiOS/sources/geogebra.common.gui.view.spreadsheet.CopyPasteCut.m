//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/spreadsheet/CopyPasteCut.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/view/spreadsheet/CellRange.h"
#include "geogebra/common/gui/view/spreadsheet/CopyPasteCut.h"
#include "geogebra/common/gui/view/spreadsheet/MyTableInterface.h"
#include "geogebra/common/gui/view/spreadsheet/RelativeCopy.h"
#include "geogebra/common/gui/view/spreadsheet/SpreadsheetViewInterface.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/View.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/main/SpreadsheetTableModel.h"
#include "geogebra/common/main/SpreadsheetTraceManager.h"
#include "geogebra/common/main/settings/Settings.h"
#include "geogebra/common/main/settings/SpreadsheetSettings.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonGuiViewSpreadsheetCopyPasteCut () {
 @public
  GeogebraCommonMainSpreadsheetTableModel *tableModel_;
  id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface> view_;
  id<GeogebraCommonGuiViewSpreadsheetMyTableInterface> table_;
  IOSObjectArray *constructionIndexes_;
}

- (id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>)getView;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCopyPasteCut, tableModel_, GeogebraCommonMainSpreadsheetTableModel *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCopyPasteCut, view_, id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCopyPasteCut, table_, id<GeogebraCommonGuiViewSpreadsheetMyTableInterface>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCopyPasteCut, constructionIndexes_, IOSObjectArray *)

static id<JavaUtilComparator> GeogebraCommonGuiViewSpreadsheetCopyPasteCut_comparator_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewSpreadsheetCopyPasteCut, comparator_, id<JavaUtilComparator>)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCopyPasteCut, comparator_, id<JavaUtilComparator>)

__attribute__((unused)) static id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface> GeogebraCommonGuiViewSpreadsheetCopyPasteCut_getView(GeogebraCommonGuiViewSpreadsheetCopyPasteCut *self);

@interface GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record : NSObject {
 @public
  jint id__, x1_, y1_, x2_, y2_;
}

- (instancetype)initWithInt:(jint)id_
                    withInt:(jint)x1
                    withInt:(jint)y1
                    withInt:(jint)x2
                    withInt:(jint)y2;

- (jint)getx1;

- (jint)getx2;

- (jint)gety1;

- (jint)gety2;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record)

__attribute__((unused)) static void GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record_initWithInt_withInt_withInt_withInt_withInt_(GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record *self, jint id_, jint x1, jint y1, jint x2, jint y2);

__attribute__((unused)) static GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record *new_GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record_initWithInt_withInt_withInt_withInt_withInt_(jint id_, jint x1, jint y1, jint x2, jint y2) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record)

@interface GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(id)a
               withId:(id)b;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1)

__attribute__((unused)) static void GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1_init(GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1 *self);

__attribute__((unused)) static GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1 *new_GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1)

@implementation GeogebraCommonGuiViewSpreadsheetCopyPasteCut

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

- (id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>)getView {
  return GeogebraCommonGuiViewSpreadsheetCopyPasteCut_getView(self);
}

- (id<GeogebraCommonGuiViewSpreadsheetMyTableInterface>)getTable {
  if (table_ == nil) {
    GeogebraCommonGuiViewSpreadsheetCopyPasteCut_set_table_(self, [((id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>) nil_chk(GeogebraCommonGuiViewSpreadsheetCopyPasteCut_getView(self))) getSpreadsheetTable]);
  }
  return table_;
}

- (void)copy__WithInt:(jint)column1
              withInt:(jint)row1
              withInt:(jint)column2
              withInt:(jint)row2
          withBoolean:(jboolean)skipGeoCopy {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)cutWithInt:(jint)column1
               withInt:(jint)row1
               withInt:(jint)column2
               withInt:(jint)row2 {
  [self copy__WithInt:column1 withInt:row1 withInt:column2 withInt:row2 withBoolean:NO];
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_set_cellBufferStr_(self, nil);
  return [self delete__WithInt:column1 withInt:row1 withInt:column2 withInt:row2];
}

- (jboolean)pasteWithGeogebraCommonGuiViewSpreadsheetCellRange:(GeogebraCommonGuiViewSpreadsheetCellRange *)cr {
  return [self pasteWithInt:[((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) getMinColumn] withInt:[cr getMinRow] withInt:[cr getMaxColumn] withInt:[cr getMaxRow]];
}

- (jboolean)pasteWithInt:(jint)column1
                 withInt:(jint)row1
                 withInt:(jint)column2
                 withInt:(jint)row2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)pasteInternalMultipleWithInt:(jint)column1
                                 withInt:(jint)row1
                                 withInt:(jint)column2
                                 withInt:(jint)row2 {
  jboolean succ = YES;
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction];
  @try {
    jint columnStep = ((IOSObjectArray *) nil_chk(cellBufferGeo_))->size_;
    jint rowStep = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(cellBufferGeo_, 0)))->size_;
    jint maxColumn = column2;
    jint maxRow = row2;
    if (row2 == row1 && column2 == column1) {
      maxColumn = column1 + columnStep;
      maxRow = row1 + rowStep;
    }
    [((GeogebraCommonKernelConstruction *) nil_chk(cons)) startCollectingRedefineCalls];
    for (jint c = column1; c <= column2; c += columnStep) for (jint r = row1; r <= row2; r += rowStep) succ = (succ && [self pasteInternalWithInt:c withInt:r withInt:maxColumn withInt:maxRow]);
    [cons processCollectedRedefineCalls];
  }
  @catch (JavaLangException *ex) {
    [((JavaLangException *) nil_chk(ex)) printStackTraceWithJavaIoPrintStream:JavaLangSystem_get_out_()];
    [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:[ex getMessage]];
  }
  @finally {
    [((GeogebraCommonKernelConstruction *) nil_chk(cons)) stopCollectingRedefineCalls];
    [((GeogebraCommonMainApp *) nil_chk(app_)) setDefaultCursor];
  }
  return succ;
}

- (jboolean)pasteInternalWithInt:(jint)column1
                         withInt:(jint)row1
                         withInt:(jint)maxColumn
                         withInt:(jint)maxRow {
  jint width = ((IOSObjectArray *) nil_chk(cellBufferGeo_))->size_;
  if (width == 0) return NO;
  jint height = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(cellBufferGeo_, 0)))->size_;
  if (height == 0) return NO;
  [((GeogebraCommonMainApp *) nil_chk(app_)) setWaitCursor];
  jboolean succ = NO;
  jint x1 = sourceColumn1_;
  jint y1 = sourceRow1_;
  jint x2 = sourceColumn1_ + width - 1;
  jint y2 = sourceRow1_ + height - 1;
  jint x3 = column1;
  jint y3 = row1;
  jint x4 = column1 + width - 1;
  jint y4 = row1 + height - 1;
  IOSObjectArray *values2 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValuesWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, x3, y3, x4, y4);
  jint size = (x2 - x1 + 1) * (y2 - y1 + 1);
  if (constructionIndexes_ == nil || constructionIndexes_->size_ < size) GeogebraCommonGuiViewSpreadsheetCopyPasteCut_setAndConsume_constructionIndexes_(self, [IOSObjectArray newArrayWithLength:size type:NSObject_class_()]);
  jint count = 0;
  if ([((GeogebraCommonMainSpreadsheetTableModel *) nil_chk(tableModel_)) getRowCount] < y4 + 1) {
    [tableModel_ setRowCountWithInt:y4 + 1];
  }
  if ([tableModel_ getColumnCount] < x4 + 1) {
    [tableModel_ setColumnCountWithInt:x4 + 1];
  }
  IOSObjectArray *values1 = cellBufferGeo_;
  @try {
    for (jint x = x1; x <= x2; ++x) {
      jint ix = x - x1;
      for (jint y = y1; y <= y2; ++y) {
        jint iy = y - y1;
        jboolean inSource = x + (x3 - x1) <= x2 && x + (x3 - x1) >= x1 && y + (y3 - y1) <= y2 && y + (y3 - y1) >= y1;
        if (ix + column1 <= maxColumn && iy + row1 <= maxRow && (!inSource)) {
          if (IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(values1, ix)), iy) != nil) {
            IOSObjectArray_SetAndConsume(nil_chk(constructionIndexes_), count, new_GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record_initWithInt_withInt_withInt_withInt_withInt_([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(values1, ix)), iy))) getConstructionIndex], ix, iy, x3 - x1, y3 - y1));
            count++;
          }
        }
      }
    }
    JavaUtilArrays_sortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(constructionIndexes_, 0, count, GeogebraCommonGuiViewSpreadsheetCopyPasteCut_getComparator());
    for (jint i = 0; i < count; i++) {
      GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record *r = (GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record *) check_class_cast(IOSObjectArray_Get(nil_chk(constructionIndexes_), i), [GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record class]);
      jint ix = [((GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record *) nil_chk(r)) getx1];
      jint iy = [r gety1];
      IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(nil_chk(values2), ix)), iy, GeogebraCommonGuiViewSpreadsheetRelativeCopy_doCopyNoStoringUndoInfo0WithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel_, app_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(values1, ix)), iy), IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(values2, ix)), iy), [r getx2], [r gety2]));
    }
    succ = YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    [app_ setDefaultCursor];
  }
  return succ;
}

- (jboolean)pasteExternalMultipleWithNSStringArray2:(IOSObjectArray *)data
      withGeogebraCommonGuiViewSpreadsheetCellRange:(GeogebraCommonGuiViewSpreadsheetCellRange *)cr {
  return [self pasteExternalMultipleWithNSStringArray2:data withInt:[((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) getMinColumn] withInt:[cr getMinRow] withInt:[cr getMaxColumn] withInt:[cr getMaxRow]];
}

- (jboolean)pasteExternalMultipleWithNSStringArray2:(IOSObjectArray *)data
                                            withInt:(jint)column1
                                            withInt:(jint)row1
                                            withInt:(jint)column2
                                            withInt:(jint)row2 {
  jboolean oldEqualsSetting = [((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getSettings])) getSpreadsheet])) equalsRequired];
  [((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getSpreadsheet])) setEqualsRequiredWithBoolean:YES];
  jboolean succ = YES;
  jint rowStep = ((IOSObjectArray *) nil_chk(data))->size_;
  jint columnStep = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(data, 0)))->size_;
  if (columnStep == 0) return NO;
  jint maxColumn = column2;
  jint maxRow = row2;
  if (row2 == row1 && column2 == column1) {
    maxColumn = column1 + columnStep;
    maxRow = row1 + rowStep;
  }
  for (jint c = column1; c <= column2; c += columnStep) for (jint r = row1; r <= row2; r += rowStep) succ = (succ && [self pasteExternalWithNSStringArray2:data withInt:c withInt:r withInt:maxColumn withInt:maxRow]);
  [((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getSpreadsheet])) setEqualsRequiredWithBoolean:oldEqualsSetting];
  return succ;
}

- (jboolean)pasteExternalWithNSStringArray2:(IOSObjectArray *)data
                                    withInt:(jint)column1
                                    withInt:(jint)row1
                                    withInt:(jint)maxColumn
                                    withInt:(jint)maxRow {
  [((GeogebraCommonMainApp *) nil_chk(app_)) setWaitCursor];
  jboolean succ = NO;
  @try {
    if ([((GeogebraCommonMainSpreadsheetTableModel *) nil_chk(tableModel_)) getRowCount] < row1 + ((IOSObjectArray *) nil_chk(data))->size_) {
      [tableModel_ setRowCountWithInt:row1 + data->size_];
    }
    IOSObjectArray *values2 = [IOSObjectArray arrayWithLength:data->size_ type:IOSClass_arrayType(GeogebraCommonKernelGeosGeoElement_class_(), 1)];
    jint maxLen = -1;
    for (jint row = row1; row < row1 + data->size_; ++row) {
      if (row < 0 || row > maxRow) continue;
      jint iy = row - row1;
      IOSObjectArray_SetAndConsume(values2, iy, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(IOSObjectArray_Get(data, iy)))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()]);
      if (maxLen < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(data, iy)))->size_) maxLen = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(data, iy)))->size_;
      if ([tableModel_ getColumnCount] < column1 + ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(data, iy)))->size_) {
        [tableModel_ setColumnCountWithInt:column1 + ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(data, iy)))->size_];
      }
      for (jint column = column1; column < column1 + ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(data, iy)))->size_; ++column) {
        if (column < 0 || column > maxColumn) continue;
        jint ix = column - column1;
        if (IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(data, iy)), ix) == nil) continue;
        IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(data, iy)), ix, [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(data, iy)), ix))) trim]);
        if (((jint) [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(data, iy)), ix))) length]) == 0) {
          GeogebraCommonKernelGeosGeoElement *value0 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, column, row);
          if (value0 != nil) {
            [value0 removeOrSetUndefinedIfHasFixedDescendent];
          }
        }
        else {
          GeogebraCommonKernelGeosGeoElement *value0 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, column, row);
          IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(values2, iy)), ix, GeogebraCommonGuiViewSpreadsheetRelativeCopy_prepareAddingValueToTableNoStoringUndoInfoWithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel_, app_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(data, iy)), ix), value0, column, row));
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(values2, iy)), ix))) setAuxiliaryObjectWithBoolean:YES];
        }
      }
    }
    [app_ repaintSpreadsheet];
    succ = YES;
  }
  @catch (JavaLangException *ex) {
    [((JavaLangException *) nil_chk(ex)) printStackTrace];
  }
  @finally {
    [app_ setDefaultCursor];
  }
  return succ;
}

- (jboolean)delete__WithInt:(jint)column1
                    withInt:(jint)row1
                    withInt:(jint)column2
                    withInt:(jint)row2 {
  return GeogebraCommonGuiViewSpreadsheetCopyPasteCut_delete__WithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_(app_, column1, row1, column2, row2, [((id<GeogebraCommonGuiViewSpreadsheetMyTableInterface>) nil_chk([self getTable])) getSelectionType]);
}

- (void)deleteAll {
  [self delete__WithInt:0 withInt:0 withInt:[((GeogebraCommonMainSpreadsheetTableModel *) nil_chk(tableModel_)) getColumnCount] withInt:[tableModel_ getRowCount]];
}

+ (jboolean)delete__WithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                      withInt:(jint)column1
                                      withInt:(jint)row1
                                      withInt:(jint)column2
                                      withInt:(jint)row2
                                      withInt:(jint)selectionType {
  return GeogebraCommonGuiViewSpreadsheetCopyPasteCut_delete__WithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_(app, column1, row1, column2, row2, selectionType);
}

+ (id<JavaUtilComparator>)getComparator {
  return GeogebraCommonGuiViewSpreadsheetCopyPasteCut_getComparator();
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(app_);
  RELEASE_(tableModel_);
  RELEASE_(view_);
  RELEASE_(table_);
  RELEASE_(cellBufferStr_);
  RELEASE_(cellBufferGeo_);
  RELEASE_(constructionIndexes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:", "CopyPasteCut", NULL, 0x1, NULL, NULL },
    { "getView", NULL, "Lgeogebra.common.gui.view.spreadsheet.SpreadsheetViewInterface;", 0x2, NULL, NULL },
    { "getTable", NULL, "Lgeogebra.common.gui.view.spreadsheet.MyTableInterface;", 0x4, NULL, NULL },
    { "copy__WithInt:withInt:withInt:withInt:withBoolean:", "copy", "V", 0x401, NULL, NULL },
    { "cutWithInt:withInt:withInt:withInt:", "cut", "Z", 0x1, NULL, NULL },
    { "pasteWithGeogebraCommonGuiViewSpreadsheetCellRange:", "paste", "Z", 0x1, NULL, NULL },
    { "pasteWithInt:withInt:withInt:withInt:", "paste", "Z", 0x401, NULL, NULL },
    { "pasteInternalMultipleWithInt:withInt:withInt:withInt:", "pasteInternalMultiple", "Z", 0x1, NULL, NULL },
    { "pasteInternalWithInt:withInt:withInt:withInt:", "pasteInternal", "Z", 0x1, "Ljava.lang.Exception;", NULL },
    { "pasteExternalMultipleWithNSStringArray2:withGeogebraCommonGuiViewSpreadsheetCellRange:", "pasteExternalMultiple", "Z", 0x4, NULL, NULL },
    { "pasteExternalMultipleWithNSStringArray2:withInt:withInt:withInt:withInt:", "pasteExternalMultiple", "Z", 0x4, NULL, NULL },
    { "pasteExternalWithNSStringArray2:withInt:withInt:withInt:withInt:", "pasteExternal", "Z", 0x1, NULL, NULL },
    { "delete__WithInt:withInt:withInt:withInt:", "delete", "Z", 0x1, NULL, NULL },
    { "deleteAll", NULL, "V", 0x1, NULL, NULL },
    { "delete__WithGeogebraCommonMainApp:withInt:withInt:withInt:withInt:withInt:", "delete", "Z", 0x9, NULL, NULL },
    { "getComparator", NULL, "Ljava.util.Comparator;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x4, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "app_", NULL, 0x4, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "tableModel_", NULL, 0x2, "Lgeogebra.common.main.SpreadsheetTableModel;", NULL, NULL,  },
    { "view_", NULL, 0x2, "Lgeogebra.common.gui.view.spreadsheet.SpreadsheetViewInterface;", NULL, NULL,  },
    { "table_", NULL, 0x2, "Lgeogebra.common.gui.view.spreadsheet.MyTableInterface;", NULL, NULL,  },
    { "cellBufferStr_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "cellBufferGeo_", NULL, 0x4, "[[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "sourceColumn1_", NULL, 0x4, "I", NULL, NULL,  },
    { "sourceRow1_", NULL, 0x4, "I", NULL, NULL,  },
    { "constructionIndexes_", NULL, 0x2, "[Ljava.lang.Object;", NULL, NULL,  },
    { "comparator_", NULL, 0xa, "Ljava.util.Comparator;", &GeogebraCommonGuiViewSpreadsheetCopyPasteCut_comparator_, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.view.spreadsheet.CopyPasteCut$Record;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiViewSpreadsheetCopyPasteCut = { 2, "CopyPasteCut", "geogebra.common.gui.view.spreadsheet", NULL, 0x401, 16, methods, 11, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiViewSpreadsheetCopyPasteCut;
}

@end

void GeogebraCommonGuiViewSpreadsheetCopyPasteCut_initWithGeogebraCommonMainApp_(GeogebraCommonGuiViewSpreadsheetCopyPasteCut *self, GeogebraCommonMainApp *app) {
  NSObject_init(self);
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_set_tableModel_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getSpreadsheetTableModel]);
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_set_app_(self, app);
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_set_kernel_(self, [app getKernel]);
}

id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface> GeogebraCommonGuiViewSpreadsheetCopyPasteCut_getView(GeogebraCommonGuiViewSpreadsheetCopyPasteCut *self) {
  if (self->view_ == nil) {
    GeogebraCommonGuiViewSpreadsheetCopyPasteCut_set_view_(self, (id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>) check_protocol_cast([((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getGuiManager])) getSpreadsheetView], @protocol(GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface)));
  }
  return self->view_;
}

jboolean GeogebraCommonGuiViewSpreadsheetCopyPasteCut_delete__WithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_(GeogebraCommonMainApp *app, jint column1, jint row1, jint column2, jint row2, jint selectionType) {
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_initialize();
  jboolean succ = NO;
  JavaUtilTreeSet *toRemove = [new_JavaUtilTreeSet_init() autorelease];
  for (jint column = column1; column <= column2; ++column) {
    for (jint row = row1; row <= row2; ++row) {
      GeogebraCommonKernelGeosGeoElement *value0 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app, column, row);
      if (value0 != nil && ![value0 isFixed]) {
        [toRemove addWithId:value0];
      }
    }
  }
  [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getKernel])) setSpreadsheetBatchRunningWithBoolean:YES];
  jint size = [toRemove size];
  for (jint i = 0; i < size; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([toRemove last])) removeOrSetUndefinedIfHasFixedDescendent];
    succ = YES;
    [toRemove removeWithId:[toRemove last]];
  }
  [((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) setSpreadsheetBatchRunningWithBoolean:NO];
  if (selectionType == GeogebraCommonGuiViewSpreadsheetMyTableInterface_COLUMN_SELECT) {
    [((GeogebraCommonMainSpreadsheetTraceManager *) nil_chk([app getTraceManager])) handleColumnDeleteWithInt:column1 withInt:column2];
  }
  else {
    [((GeogebraCommonMainSpreadsheetTraceManager *) nil_chk([app getTraceManager])) handleColumnDeleteWithInt:column1 withInt:row1 withInt:column2 withInt:row2];
  }
  if (succ) {
    [((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) notifyRepaint];
  }
  return succ;
}

id<JavaUtilComparator> GeogebraCommonGuiViewSpreadsheetCopyPasteCut_getComparator() {
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_initialize();
  if (GeogebraCommonGuiViewSpreadsheetCopyPasteCut_comparator_ == nil) {
    JreStrongAssignAndConsume(&GeogebraCommonGuiViewSpreadsheetCopyPasteCut_comparator_, nil, new_GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1_init());
  }
  return GeogebraCommonGuiViewSpreadsheetCopyPasteCut_comparator_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewSpreadsheetCopyPasteCut)

@implementation GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record

- (instancetype)initWithInt:(jint)id_
                    withInt:(jint)x1
                    withInt:(jint)y1
                    withInt:(jint)x2
                    withInt:(jint)y2 {
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record_initWithInt_withInt_withInt_withInt_withInt_(self, id_, x1, y1, x2, y2);
  return self;
}

- (jint)getx1 {
  return x1_;
}

- (jint)getx2 {
  return x2_;
}

- (jint)gety1 {
  return y1_;
}

- (jint)gety2 {
  return y2_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:withInt:withInt:", "Record", NULL, 0x1, NULL, NULL },
    { "getx1", NULL, "I", 0x1, NULL, NULL },
    { "getx2", NULL, "I", 0x1, NULL, NULL },
    { "gety1", NULL, "I", 0x1, NULL, NULL },
    { "gety2", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "id", 0x0, "I", NULL, NULL,  },
    { "x1_", NULL, 0x0, "I", NULL, NULL,  },
    { "y1_", NULL, 0x0, "I", NULL, NULL,  },
    { "x2_", NULL, 0x0, "I", NULL, NULL,  },
    { "y2_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record = { 2, "Record", "geogebra.common.gui.view.spreadsheet", "CopyPasteCut", 0xa, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record;
}

@end

void GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record_initWithInt_withInt_withInt_withInt_withInt_(GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record *self, jint id_, jint x1, jint y1, jint x2, jint y2) {
  NSObject_init(self);
  self->id__ = id_;
  self->x1_ = x1;
  self->x2_ = x2;
  self->y1_ = y1;
  self->y2_ = y2;
}

GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record *new_GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record_initWithInt_withInt_withInt_withInt_withInt_(jint id_, jint x1, jint y1, jint x2, jint y2) {
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record *self = [GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record alloc];
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record_initWithInt_withInt_withInt_withInt_withInt_(self, id_, x1, y1, x2, y2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record)

@implementation GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1

- (jint)compareWithId:(id)a
               withId:(id)b {
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record *itemA = (GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record *) check_class_cast(a, [GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record class]);
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record *itemB = (GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record *) check_class_cast(b, [GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record class]);
  return ((GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record *) nil_chk(itemA))->id__ - ((GeogebraCommonGuiViewSpreadsheetCopyPasteCut_Record *) nil_chk(itemB))->id__;
}

- (instancetype)init {
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonGuiViewSpreadsheetCopyPasteCut", "getComparator" };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1 = { 2, "", "geogebra.common.gui.view.spreadsheet", "CopyPasteCut", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1;
}

@end

void GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1_init(GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1 *self) {
  NSObject_init(self);
}

GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1 *new_GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1_init() {
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1 *self = [GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1 alloc];
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewSpreadsheetCopyPasteCut_$1)
