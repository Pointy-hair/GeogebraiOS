//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/HittingSphere.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "geogebra/common/geogebra3D/euclidian3D/HittingSphere.h"
#include "geogebra/common/kernel/Matrix/Coords.h"

@implementation GeogebraCommonGeogebra3DEuclidian3DHittingSphere

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view {
  GeogebraCommonGeogebra3DEuclidian3DHittingSphere_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view);
  return self;
}

- (void)setHitsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)pos
                                            withInt:(jint)threshold {
  GeogebraCommonGeogebra3DEuclidian3DHitting_set_origin_(self, pos);
  GeogebraCommonGeogebra3DEuclidian3DHitting_set_direction_(self, [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getViewDirection]);
  self->threshold_ = threshold;
  [self setHits];
}

- (jboolean)isSphere {
  return YES;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "HittingSphere", NULL, 0x1, NULL, NULL },
    { "setHitsWithGeogebraCommonKernelMatrixCoords:withInt:", "setHits", "V", 0x1, NULL, NULL },
    { "isSphere", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DHittingSphere = { 2, "HittingSphere", "geogebra.common.geogebra3D.euclidian3D", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DHittingSphere;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DHittingSphere_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DHittingSphere *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view) {
  GeogebraCommonGeogebra3DEuclidian3DHitting_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view);
}

GeogebraCommonGeogebra3DEuclidian3DHittingSphere *new_GeogebraCommonGeogebra3DEuclidian3DHittingSphere_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view) {
  GeogebraCommonGeogebra3DEuclidian3DHittingSphere *self = [GeogebraCommonGeogebra3DEuclidian3DHittingSphere alloc];
  GeogebraCommonGeogebra3DEuclidian3DHittingSphere_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DHittingSphere)
