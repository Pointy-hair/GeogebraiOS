//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/geom/IntersectionMatrix.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Dimension.h"
#include "com/vividsolutions/jts/geom/IntersectionMatrix.h"
#include "com/vividsolutions/jts/geom/Location.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"

@interface ComVividsolutionsJtsGeomIntersectionMatrix () {
 @public
  IOSObjectArray *matrix_;
}

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomIntersectionMatrix, matrix_, IOSObjectArray *)

@implementation ComVividsolutionsJtsGeomIntersectionMatrix

- (instancetype)init {
  ComVividsolutionsJtsGeomIntersectionMatrix_init(self);
  return self;
}

- (instancetype)initWithNSString:(NSString *)elements {
  ComVividsolutionsJtsGeomIntersectionMatrix_initWithNSString_(self, elements);
  return self;
}

- (instancetype)initWithComVividsolutionsJtsGeomIntersectionMatrix:(ComVividsolutionsJtsGeomIntersectionMatrix *)other {
  ComVividsolutionsJtsGeomIntersectionMatrix_initWithComVividsolutionsJtsGeomIntersectionMatrix_(self, other);
  return self;
}

- (void)addWithComVividsolutionsJtsGeomIntersectionMatrix:(ComVividsolutionsJtsGeomIntersectionMatrix *)im {
  for (jint i = 0; i < 3; i++) {
    for (jint j = 0; j < 3; j++) {
      [self setAtLeastWithInt:i withInt:j withInt:[((ComVividsolutionsJtsGeomIntersectionMatrix *) nil_chk(im)) getWithInt:i withInt:j]];
    }
  }
}

+ (jboolean)matchesWithInt:(jint)actualDimensionValue
                  withChar:(jchar)requiredDimensionSymbol {
  return ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(actualDimensionValue, requiredDimensionSymbol);
}

+ (jboolean)matchesWithNSString:(NSString *)actualDimensionSymbols
                   withNSString:(NSString *)requiredDimensionSymbols {
  return ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithNSString_withNSString_(actualDimensionSymbols, requiredDimensionSymbols);
}

- (void)setWithInt:(jint)row
           withInt:(jint)column
           withInt:(jint)dimensionValue {
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), row)), column) = dimensionValue;
}

- (void)setWithNSString:(NSString *)dimensionSymbols {
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(dimensionSymbols)) length]); i++) {
    jint row = i / 3;
    jint col = i % 3;
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), row)), col) = ComVividsolutionsJtsGeomDimension_toDimensionValueWithChar_([dimensionSymbols charAtWithInt:i]);
  }
}

- (void)setAtLeastWithInt:(jint)row
                  withInt:(jint)column
                  withInt:(jint)minimumDimensionValue {
  if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), row)), column) < minimumDimensionValue) {
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(matrix_, row)), column) = minimumDimensionValue;
  }
}

- (void)setAtLeastIfValidWithInt:(jint)row
                         withInt:(jint)column
                         withInt:(jint)minimumDimensionValue {
  if (row >= 0 && column >= 0) {
    [self setAtLeastWithInt:row withInt:column withInt:minimumDimensionValue];
  }
}

- (void)setAtLeastWithNSString:(NSString *)minimumDimensionSymbols {
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(minimumDimensionSymbols)) length]); i++) {
    jint row = i / 3;
    jint col = i % 3;
    [self setAtLeastWithInt:row withInt:col withInt:ComVividsolutionsJtsGeomDimension_toDimensionValueWithChar_([minimumDimensionSymbols charAtWithInt:i])];
  }
}

- (void)setAllWithInt:(jint)dimensionValue {
  for (jint ai = 0; ai < 3; ai++) {
    for (jint bi = 0; bi < 3; bi++) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ai)), bi) = dimensionValue;
    }
  }
}

- (jint)getWithInt:(jint)row
           withInt:(jint)column {
  return IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), row)), column);
}

- (jboolean)isDisjoint {
  return IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR) == ComVividsolutionsJtsGeomDimension_FALSE && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_BOUNDARY) == ComVividsolutionsJtsGeomDimension_FALSE && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_INTERIOR) == ComVividsolutionsJtsGeomDimension_FALSE && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_BOUNDARY) == ComVividsolutionsJtsGeomDimension_FALSE;
}

- (jboolean)isIntersects {
  return ![self isDisjoint];
}

- (jboolean)isTouchesWithInt:(jint)dimensionOfGeometryA
                     withInt:(jint)dimensionOfGeometryB {
  if (dimensionOfGeometryA > dimensionOfGeometryB) {
    return [self isTouchesWithInt:dimensionOfGeometryB withInt:dimensionOfGeometryA];
  }
  if ((dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_A && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_A) || (dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_L && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_L) || (dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_L && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_A) || (dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_P && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_A) || (dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_P && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_L)) {
    return IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR) == ComVividsolutionsJtsGeomDimension_FALSE && (ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_BOUNDARY), 'T') || ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_INTERIOR), 'T') || ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_BOUNDARY), 'T'));
  }
  return NO;
}

- (jboolean)isCrossesWithInt:(jint)dimensionOfGeometryA
                     withInt:(jint)dimensionOfGeometryB {
  if ((dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_P && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_L) || (dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_P && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_A) || (dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_L && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_A)) {
    return ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR), 'T') && ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_EXTERIOR), 'T');
  }
  if ((dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_L && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_P) || (dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_A && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_P) || (dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_A && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_L)) {
    return ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR), 'T') && ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR), 'T');
  }
  if (dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_L && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_L) {
    return IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR) == 0;
  }
  return NO;
}

- (jboolean)isWithin {
  return ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR), 'T') && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_EXTERIOR) == ComVividsolutionsJtsGeomDimension_FALSE && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_EXTERIOR) == ComVividsolutionsJtsGeomDimension_FALSE;
}

- (jboolean)isContains {
  return ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR), 'T') && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR) == ComVividsolutionsJtsGeomDimension_FALSE && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_BOUNDARY) == ComVividsolutionsJtsGeomDimension_FALSE;
}

- (jboolean)isCovers {
  jboolean hasPointInCommon = ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR), 'T') || ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_BOUNDARY), 'T') || ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_INTERIOR), 'T') || ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_BOUNDARY), 'T');
  return hasPointInCommon && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR) == ComVividsolutionsJtsGeomDimension_FALSE && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_BOUNDARY) == ComVividsolutionsJtsGeomDimension_FALSE;
}

- (jboolean)isCoveredBy {
  jboolean hasPointInCommon = ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR), 'T') || ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_BOUNDARY), 'T') || ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_INTERIOR), 'T') || ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_BOUNDARY), 'T');
  return hasPointInCommon && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_EXTERIOR) == ComVividsolutionsJtsGeomDimension_FALSE && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_EXTERIOR) == ComVividsolutionsJtsGeomDimension_FALSE;
}

- (jboolean)isEqualsWithInt:(jint)dimensionOfGeometryA
                    withInt:(jint)dimensionOfGeometryB {
  if (dimensionOfGeometryA != dimensionOfGeometryB) {
    return NO;
  }
  return ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR), 'T') && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR) == ComVividsolutionsJtsGeomDimension_FALSE && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_EXTERIOR) == ComVividsolutionsJtsGeomDimension_FALSE && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_BOUNDARY) == ComVividsolutionsJtsGeomDimension_FALSE && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_EXTERIOR) == ComVividsolutionsJtsGeomDimension_FALSE;
}

- (jboolean)isOverlapsWithInt:(jint)dimensionOfGeometryA
                      withInt:(jint)dimensionOfGeometryB {
  if ((dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_P && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_P) || (dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_A && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_A)) {
    return ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR), 'T') && ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_EXTERIOR), 'T') && ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR), 'T');
  }
  if (dimensionOfGeometryA == ComVividsolutionsJtsGeomDimension_L && dimensionOfGeometryB == ComVividsolutionsJtsGeomDimension_L) {
    return IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR) == 1 && ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_EXTERIOR), 'T') && ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR), 'T');
  }
  return NO;
}

- (jboolean)matchesWithNSString:(NSString *)requiredDimensionSymbols {
  if (((jint) [((NSString *) nil_chk(requiredDimensionSymbols)) length]) != 9) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Should be length 9: ", requiredDimensionSymbols)) autorelease];
  }
  for (jint ai = 0; ai < 3; ai++) {
    for (jint bi = 0; bi < 3; bi++) {
      if (!ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ai)), bi), [requiredDimensionSymbols charAtWithInt:3 * ai + bi])) {
        return NO;
      }
    }
  }
  return YES;
}

- (ComVividsolutionsJtsGeomIntersectionMatrix *)transpose {
  jint temp = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), 1)), 0);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(matrix_, 1)), 0) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, 0)), 1);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(matrix_, 0)), 1) = temp;
  temp = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, 2)), 0);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(matrix_, 2)), 0) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, 0)), 2);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(matrix_, 0)), 2) = temp;
  temp = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, 2)), 1);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(matrix_, 2)), 1) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(matrix_, 1)), 2);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(matrix_, 1)), 2) = temp;
  return self;
}

- (NSString *)description {
  JavaLangStringBuffer *buf = [new_JavaLangStringBuffer_initWithNSString_(@"123456789") autorelease];
  for (jint ai = 0; ai < 3; ai++) {
    for (jint bi = 0; bi < 3; bi++) {
      [buf setCharAtWithInt:3 * ai + bi withChar:ComVividsolutionsJtsGeomDimension_toDimensionSymbolWithInt_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), ai)), bi))];
    }
  }
  return [buf description];
}

- (void)dealloc {
  RELEASE_(matrix_);
  [super dealloc];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "IntersectionMatrix", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "IntersectionMatrix", NULL, 0x1, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomIntersectionMatrix:", "IntersectionMatrix", NULL, 0x1, NULL, NULL },
    { "addWithComVividsolutionsJtsGeomIntersectionMatrix:", "add", "V", 0x1, NULL, NULL },
    { "matchesWithInt:withChar:", "matches", "Z", 0x9, NULL, NULL },
    { "matchesWithNSString:withNSString:", "matches", "Z", 0x9, NULL, NULL },
    { "setWithInt:withInt:withInt:", "set", "V", 0x1, NULL, NULL },
    { "setWithNSString:", "set", "V", 0x1, NULL, NULL },
    { "setAtLeastWithInt:withInt:withInt:", "setAtLeast", "V", 0x1, NULL, NULL },
    { "setAtLeastIfValidWithInt:withInt:withInt:", "setAtLeastIfValid", "V", 0x1, NULL, NULL },
    { "setAtLeastWithNSString:", "setAtLeast", "V", 0x1, NULL, NULL },
    { "setAllWithInt:", "setAll", "V", 0x1, NULL, NULL },
    { "getWithInt:withInt:", "get", "I", 0x1, NULL, NULL },
    { "isDisjoint", NULL, "Z", 0x1, NULL, NULL },
    { "isIntersects", NULL, "Z", 0x1, NULL, NULL },
    { "isTouchesWithInt:withInt:", "isTouches", "Z", 0x1, NULL, NULL },
    { "isCrossesWithInt:withInt:", "isCrosses", "Z", 0x1, NULL, NULL },
    { "isWithin", NULL, "Z", 0x1, NULL, NULL },
    { "isContains", NULL, "Z", 0x1, NULL, NULL },
    { "isCovers", NULL, "Z", 0x1, NULL, NULL },
    { "isCoveredBy", NULL, "Z", 0x1, NULL, NULL },
    { "isEqualsWithInt:withInt:", "isEquals", "Z", 0x1, NULL, NULL },
    { "isOverlapsWithInt:withInt:", "isOverlaps", "Z", 0x1, NULL, NULL },
    { "matchesWithNSString:", "matches", "Z", 0x1, NULL, NULL },
    { "transpose", NULL, "Lcom.vividsolutions.jts.geom.IntersectionMatrix;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "matrix_", NULL, 0x2, "[[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomIntersectionMatrix = { 2, "IntersectionMatrix", "com.vividsolutions.jts.geom", NULL, 0x1, 26, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomIntersectionMatrix;
}

@end

void ComVividsolutionsJtsGeomIntersectionMatrix_init(ComVividsolutionsJtsGeomIntersectionMatrix *self) {
  NSObject_init(self);
  ComVividsolutionsJtsGeomIntersectionMatrix_setAndConsume_matrix_(self, [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ 3, 3 }]);
  [self setAllWithInt:ComVividsolutionsJtsGeomDimension_FALSE];
}

ComVividsolutionsJtsGeomIntersectionMatrix *new_ComVividsolutionsJtsGeomIntersectionMatrix_init() {
  ComVividsolutionsJtsGeomIntersectionMatrix *self = [ComVividsolutionsJtsGeomIntersectionMatrix alloc];
  ComVividsolutionsJtsGeomIntersectionMatrix_init(self);
  return self;
}

void ComVividsolutionsJtsGeomIntersectionMatrix_initWithNSString_(ComVividsolutionsJtsGeomIntersectionMatrix *self, NSString *elements) {
  ComVividsolutionsJtsGeomIntersectionMatrix_init(self);
  [self setWithNSString:elements];
}

ComVividsolutionsJtsGeomIntersectionMatrix *new_ComVividsolutionsJtsGeomIntersectionMatrix_initWithNSString_(NSString *elements) {
  ComVividsolutionsJtsGeomIntersectionMatrix *self = [ComVividsolutionsJtsGeomIntersectionMatrix alloc];
  ComVividsolutionsJtsGeomIntersectionMatrix_initWithNSString_(self, elements);
  return self;
}

void ComVividsolutionsJtsGeomIntersectionMatrix_initWithComVividsolutionsJtsGeomIntersectionMatrix_(ComVividsolutionsJtsGeomIntersectionMatrix *self, ComVividsolutionsJtsGeomIntersectionMatrix *other) {
  ComVividsolutionsJtsGeomIntersectionMatrix_init(self);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->matrix_), ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(((ComVividsolutionsJtsGeomIntersectionMatrix *) nil_chk(other))->matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_BOUNDARY) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(other->matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_BOUNDARY);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_EXTERIOR) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(other->matrix_, ComVividsolutionsJtsGeomLocation_INTERIOR)), ComVividsolutionsJtsGeomLocation_EXTERIOR);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_INTERIOR) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(other->matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_INTERIOR);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_BOUNDARY) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(other->matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_BOUNDARY);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_EXTERIOR) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(other->matrix_, ComVividsolutionsJtsGeomLocation_BOUNDARY)), ComVividsolutionsJtsGeomLocation_EXTERIOR);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(other->matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_INTERIOR);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_BOUNDARY) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(other->matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_BOUNDARY);
  *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_EXTERIOR) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(other->matrix_, ComVividsolutionsJtsGeomLocation_EXTERIOR)), ComVividsolutionsJtsGeomLocation_EXTERIOR);
}

ComVividsolutionsJtsGeomIntersectionMatrix *new_ComVividsolutionsJtsGeomIntersectionMatrix_initWithComVividsolutionsJtsGeomIntersectionMatrix_(ComVividsolutionsJtsGeomIntersectionMatrix *other) {
  ComVividsolutionsJtsGeomIntersectionMatrix *self = [ComVividsolutionsJtsGeomIntersectionMatrix alloc];
  ComVividsolutionsJtsGeomIntersectionMatrix_initWithComVividsolutionsJtsGeomIntersectionMatrix_(self, other);
  return self;
}

jboolean ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithInt_withChar_(jint actualDimensionValue, jchar requiredDimensionSymbol) {
  ComVividsolutionsJtsGeomIntersectionMatrix_initialize();
  if (requiredDimensionSymbol == '*') {
    return YES;
  }
  if (requiredDimensionSymbol == 'T' && (actualDimensionValue >= 0 || actualDimensionValue == ComVividsolutionsJtsGeomDimension_TRUE)) {
    return YES;
  }
  if (requiredDimensionSymbol == 'F' && actualDimensionValue == ComVividsolutionsJtsGeomDimension_FALSE) {
    return YES;
  }
  if (requiredDimensionSymbol == '0' && actualDimensionValue == ComVividsolutionsJtsGeomDimension_P) {
    return YES;
  }
  if (requiredDimensionSymbol == '1' && actualDimensionValue == ComVividsolutionsJtsGeomDimension_L) {
    return YES;
  }
  if (requiredDimensionSymbol == '2' && actualDimensionValue == ComVividsolutionsJtsGeomDimension_A) {
    return YES;
  }
  return NO;
}

jboolean ComVividsolutionsJtsGeomIntersectionMatrix_matchesWithNSString_withNSString_(NSString *actualDimensionSymbols, NSString *requiredDimensionSymbols) {
  ComVividsolutionsJtsGeomIntersectionMatrix_initialize();
  ComVividsolutionsJtsGeomIntersectionMatrix *m = [new_ComVividsolutionsJtsGeomIntersectionMatrix_initWithNSString_(actualDimensionSymbols) autorelease];
  return [m matchesWithNSString:requiredDimensionSymbols];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomIntersectionMatrix)
