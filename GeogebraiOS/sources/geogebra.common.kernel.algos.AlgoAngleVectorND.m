//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoAngleVectorND.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/draw/DrawAngle.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoAngle.h"
#include "geogebra/common/kernel/algos/AlgoAngleVectorND.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

@implementation GeogebraCommonKernelAlgosAlgoAngleVectorND

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)vec {
  GeogebraCommonKernelAlgosAlgoAngleVectorND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, vec);
  return self;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, vec_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:angle_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoAngle *)getAngle {
  return angle_;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleOfA" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(vec_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (jboolean)updateDrawInfoWithDoubleArray:(IOSDoubleArray *)m
                          withDoubleArray:(IOSDoubleArray *)firstVec
 withGeogebraCommonEuclidianDrawDrawAngle:(GeogebraCommonEuclidianDrawDrawAngle *)drawable {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(vec_)) isGeoVector]) {
    id<GeogebraCommonKernelKernelNDGeoPointND> vertex = [((GeogebraCommonKernelGeosGeoVector *) check_class_cast(vec_, [GeogebraCommonKernelGeosGeoVector class])) getStartPoint];
    if (vertex != nil) [vertex getInhomCoordsWithDoubleArray:m];
    return vertex != nil && [vertex isDefined] && ![vertex isInfinite];
  }
  *IOSDoubleArray_GetRef(nil_chk(m), 0) = 0;
  *IOSDoubleArray_GetRef(m, 1) = 0;
  return [vec_ isDefined];
}

- (void)dealloc {
  RELEASE_(vec_);
  RELEASE_(angle_);
  RELEASE_(coords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:", "AlgoAngleVectorND", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getAngle", NULL, "Lgeogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "updateDrawInfoWithDoubleArray:withDoubleArray:withGeogebraCommonEuclidianDrawDrawAngle:", "updateDrawInfo", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vec_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "angle_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoAngle;", NULL, NULL,  },
    { "coords_", NULL, 0x4, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoAngleVectorND = { 2, "AlgoAngleVectorND", "geogebra.common.kernel.algos", NULL, 0x401, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoAngleVectorND;
}

@end

void GeogebraCommonKernelAlgosAlgoAngleVectorND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoAngleVectorND *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *vec) {
  GeogebraCommonKernelAlgosAlgoAngle_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoAngleVectorND_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelAlgosAlgoAngleVectorND_set_vec_(self, vec);
  GeogebraCommonKernelAlgosAlgoAngleVectorND_set_angle_(self, [self newGeoAngleWithGeogebraCommonKernelConstruction:cons]);
  [self setInputOutput];
  [self compute];
  [((GeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) setLabelWithNSString:label];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoAngleVectorND)
