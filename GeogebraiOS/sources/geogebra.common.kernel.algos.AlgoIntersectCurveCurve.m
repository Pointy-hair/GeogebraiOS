//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoIntersectCurveCurve.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntersectCurveCurve.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLineCurve.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"

@interface GeogebraCommonKernelAlgosAlgoIntersectCurveCurve () {
 @public
  GeogebraCommonKernelGeosGeoCurveCartesian *curve2_;
  id<GeogebraCommonKernelGeosGeoNumberValue> t1_, t2_;
  jboolean numeric_;
}

- (void)checkPointInRangeWithDouble:(jdouble)p1
                         withDouble:(jdouble)p2
withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)point;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve, curve2_, GeogebraCommonKernelGeosGeoCurveCartesian *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve, t1_, id<GeogebraCommonKernelGeosGeoNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve, t2_, id<GeogebraCommonKernelGeosGeoNumberValue>)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_checkPointInRangeWithDouble_withDouble_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *self, jdouble p1, jdouble p2, GeogebraCommonKernelGeosGeoPoint *point);

@interface GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *this$0_;
}

- (GeogebraCommonKernelGeosGeoPoint *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoIntersectCurveCurve:(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1, this$0_, GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 *self, GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *outer$);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 *new_GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1)

@implementation GeogebraCommonKernelAlgosAlgoIntersectCurveCurve

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
           withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)c1
           withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)c2 {
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoCurveCartesian_(self, c, labels, c1, c2);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
           withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)c1
           withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)c2
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)t1
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)t2 {
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_(self, c, labels, c1, c2, t1, t2);
  return self;
}

- (GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)createOutputPoints {
  return [new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_(self) autorelease]) autorelease];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (void)setInputOutput {
  if (t1_ != nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 2, [t1_ toGeoElement]);
    IOSObjectArray_Set(input_, 3, [((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(t2_)) toGeoElement]);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  }
  IOSObjectArray_Set(nil_chk(input_), 0, curve_);
  IOSObjectArray_Set(input_, 1, curve2_);
  [self setDependencies];
}

- (void)compute {
  jint index = 0;
  if (numeric_) {
    GeogebraCommonKernelArithmeticFunction *funx1 = [((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve_)) getFunX];
    GeogebraCommonKernelArithmeticFunction *funx2 = [((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve2_)) getFunX];
    GeogebraCommonKernelArithmeticFunction *funy1 = [curve_ getFunY];
    GeogebraCommonKernelArithmeticFunction *funy2 = [curve2_ getFunY];
    GeogebraCommonKernelArithmeticExpressionNode *enx1 = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(funx1)) getExpression];
    GeogebraCommonKernelArithmeticExpressionNode *eny1 = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(funy1)) getExpression];
    GeogebraCommonKernelArithmeticExpressionNode *enx2 = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(funx2)) getExpression];
    GeogebraCommonKernelArithmeticExpressionNode *eny2 = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(funy2)) getExpression];
    GeogebraCommonKernelArithmeticFunctionVariable *fVarx1 = [funx1 getFunctionVariable];
    GeogebraCommonKernelArithmeticFunctionVariable *fVarx2 = [funx2 getFunctionVariable];
    GeogebraCommonKernelArithmeticFunctionVariable *fVary1 = [funy1 getFunctionVariable];
    GeogebraCommonKernelArithmeticFunctionVariable *fVary2 = [funy2 getFunctionVariable];
    GeogebraCommonKernelArithmeticExpressionNode *j00 = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enx1)) derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:fVarx1];
    GeogebraCommonKernelArithmeticExpressionNode *minusj10 = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enx2)) derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:fVarx2];
    GeogebraCommonKernelArithmeticExpressionNode *j01 = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(eny1)) derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:fVary1];
    GeogebraCommonKernelArithmeticExpressionNode *minusj11 = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(eny2)) derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:fVary2];
    jdouble x1 = [((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(t1_)) getDouble];
    jdouble y1 = [((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(t2_)) getDouble];
    jdouble x0 = x1 + 1;
    jdouble y0 = y1 + 1;
    jint count = 0;
    jint maxCount = 100;
    jdouble EPS = 1e-15;
    while (count < maxCount && (JavaLangMath_absWithDouble_(x0 - x1) > EPS || JavaLangMath_absWithDouble_(y0 - y1) > EPS)) {
      count++;
      x0 = x1;
      y0 = y1;
      [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fVarx1)) setWithDouble:x0];
      [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fVarx2)) setWithDouble:y0];
      [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fVary1)) setWithDouble:x0];
      [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fVary2)) setWithDouble:y0];
      jdouble j00Eval = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(j00)) evaluateDouble];
      jdouble j01Eval = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(j01)) evaluateDouble];
      jdouble j10Eval = -[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(minusj10)) evaluateDouble];
      jdouble j11Eval = -[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(minusj11)) evaluateDouble];
      jdouble f1Eval = [enx1 evaluateDouble] - [enx2 evaluateDouble];
      jdouble f2Eval = [eny1 evaluateDouble] - [eny2 evaluateDouble];
      jdouble determinant = j00Eval * j11Eval - j01Eval * j10Eval;
      x1 = x0 - (j11Eval * f1Eval - j10Eval * f2Eval) / determinant;
      y1 = y0 - (j00Eval * f2Eval - j01Eval * f1Eval) / determinant;
    }
    if (count >= maxCount || JavaLangDouble_isNaNWithDouble_(x1) || JavaLangDouble_isNaNWithDouble_(y1)) {
      x1 = JavaLangDouble_NaN;
      y1 = JavaLangDouble_NaN;
    }
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) adjustOutputSizeWithInt:index + 1];
    GeogebraCommonKernelGeosGeoPoint *point = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([outputPoints_ getElementWithInt:index], [GeogebraCommonKernelGeosGeoPoint class]);
    index++;
    GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_checkPointInRangeWithDouble_withDouble_withGeogebraCommonKernelGeosGeoPoint_(self, x1, y1, point);
  }
  else {
    NSString *fv1 = [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk([((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve_)) getFunX])) getFunctionVariable])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    NSString *fv2 = [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk([((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve2_)) getFunX])) getFunctionVariable])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    NSString *c1X = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([curve_ getFunX])) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_fullFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML())];
    NSString *c1Y = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([curve_ getFunY])) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_fullFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML())];
    NSString *c2X = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([curve2_ getFunX])) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_fullFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML())];
    NSString *c2Y = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([curve2_ getFunY])) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_fullFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML())];
    if ([((NSString *) nil_chk(fv1)) isEqual:fv2]) {
      fv2 = JreStrcat("$C", fv2, '2');
      c2X = [((NSString *) nil_chk(c2X)) replaceAll:fv1 withReplacement:fv2];
      c2Y = [((NSString *) nil_chk(c2Y)) replaceAll:fv1 withReplacement:fv2];
    }
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
    [sb appendWithNSString:@"Solve[{"];
    [sb appendWithNSString:c1X];
    [sb appendWithChar:'='];
    [sb appendWithNSString:c2X];
    [sb appendWithChar:','];
    [sb appendWithNSString:c1Y];
    [sb appendWithChar:'='];
    [sb appendWithNSString:c2Y];
    [sb appendWithNSString:@"},{"];
    [sb appendWithNSString:fv1];
    [sb appendWithChar:','];
    [sb appendWithNSString:fv2];
    [sb appendWithNSString:@"}]"];
    NSString *result = @"";
    @try {
      result = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) evaluateGeoGebraCASWithNSString:[sb description] withGeogebraCommonKernelArithmeticMyArbitraryConstant:nil];
    }
    @catch (JavaLangThrowable *e) {
      for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size]; i++) {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputPoints_ getElementWithInt:i])) setUndefined];
      }
      [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
      return;
    }
    GeogebraCommonKernelCommandsAlgebraProcessor *ap = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor];
    jint firstBrace = [((NSString *) nil_chk(result)) indexOfString:@"{"];
    jint currentBrace = [result indexOfString:@"{" fromIndex:firstBrace + 1];
    while (currentBrace > -1) {
      jint nextComma = [result indexOfString:@"," fromIndex:currentBrace + 1];
      jint nextCloseBrace = [result indexOfString:@"}" fromIndex:currentBrace + 1];
      if (nextComma > -1 && nextCloseBrace > -1) {
        [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) adjustOutputSizeWithInt:index + 1];
        GeogebraCommonKernelGeosGeoPoint *point = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([outputPoints_ getElementWithInt:index], [GeogebraCommonKernelGeosGeoPoint class]);
        index++;
        NSString *s1 = [((NSString *) nil_chk([result substring:currentBrace + 1 endIndex:nextComma])) replaceAll:@" " withReplacement:@""];
        NSString *s2 = [((NSString *) nil_chk([result substring:nextComma + 1 endIndex:nextCloseBrace])) replaceAll:@" " withReplacement:@""];
        if ([((NSString *) nil_chk(s1)) hasPrefix:JreStrcat("$C", fv1, '=')] && [((NSString *) nil_chk(s2)) hasPrefix:JreStrcat("$C", fv2, '=')]) {
          jdouble p1 = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(ap)) evaluateToDoubleWithNSString:[s1 substring:((jint) [fv1 length]) + 1] withBoolean:YES];
          jdouble p2 = [ap evaluateToDoubleWithNSString:[s2 substring:((jint) [((NSString *) nil_chk(fv2)) length]) + 1] withBoolean:YES];
          GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_checkPointInRangeWithDouble_withDouble_withGeogebraCommonKernelGeosGeoPoint_(self, p1, p2, point);
        }
        else if ([s1 hasPrefix:JreStrcat("$C", fv2, '=')] && [((NSString *) nil_chk(s2)) hasPrefix:JreStrcat("$C", fv1, '=')]) {
          jdouble p2 = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(ap)) evaluateToDoubleWithNSString:[s1 substring:((jint) [((NSString *) nil_chk(fv2)) length]) + 1] withBoolean:YES];
          jdouble p1 = [ap evaluateToDoubleWithNSString:[s2 substring:((jint) [fv1 length]) + 1] withBoolean:YES];
          GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_checkPointInRangeWithDouble_withDouble_withGeogebraCommonKernelGeosGeoPoint_(self, p1, p2, point);
        }
        else {
          GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$C$", @"problem: ", s1, ' ', s2));
          [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(point)) setUndefined];
        }
        currentBrace = [result indexOfString:@"{" fromIndex:currentBrace + 1];
      }
      else {
        GeogebraCommonMainApp_debugWithNSString_(@"problem with result");
        currentBrace = -1;
      }
    }
  }
  for (; index < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size]; index++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputPoints_ getElementWithInt:index])) setUndefined];
  }
}

- (void)checkPointInRangeWithDouble:(jdouble)p1
                         withDouble:(jdouble)p2
withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)point {
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_checkPointInRangeWithDouble_withDouble_withGeogebraCommonKernelGeosGeoPoint_(self, p1, p2, point);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionPointOfAB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk((curve_))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk((curve2_))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(curve2_);
  RELEASE_(t1_);
  RELEASE_(t2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoCurveCartesian:withGeogebraCommonKernelGeosGeoCurveCartesian:", "AlgoIntersectCurveCurve", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoCurveCartesian:withGeogebraCommonKernelGeosGeoCurveCartesian:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelGeosGeoNumberValue:", "AlgoIntersectCurveCurve", NULL, 0x1, NULL, NULL },
    { "createOutputPoints", NULL, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "checkPointInRangeWithDouble:withDouble:withGeogebraCommonKernelGeosGeoPoint:", "checkPointInRange", "V", 0x2, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "curve2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoCurveCartesian;", NULL, NULL,  },
    { "t1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumberValue;", NULL, NULL,  },
    { "t2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumberValue;", NULL, NULL,  },
    { "numeric_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoIntersectCurveCurve = { 2, "AlgoIntersectCurveCurve", "geogebra.common.kernel.algos", NULL, 0x1, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoIntersectCurveCurve;
}

@end

void GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoCurveCartesian_(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoCurveCartesian *c1, GeogebraCommonKernelGeosGeoCurveCartesian *c2) {
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithGeogebraCommonKernelConstruction_(self, c);
  self->numeric_ = NO;
  [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) addCASAlgoWithGeogebraCommonKernelAlgosAlgoElement:self];
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_set_outputPoints_(self, [self createOutputPoints]);
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_set_curve_(self, c1);
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_set_curve2_(self, c2);
  [self compute];
  [self setInputOutput];
  [self setLabelsWithNSStringArray:labels];
  [self update];
}

GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *new_GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoCurveCartesian_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoCurveCartesian *c1, GeogebraCommonKernelGeosGeoCurveCartesian *c2) {
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *self = [GeogebraCommonKernelAlgosAlgoIntersectCurveCurve alloc];
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoCurveCartesian_(self, c, labels, c1, c2);
  return self;
}

void GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoCurveCartesian *c1, GeogebraCommonKernelGeosGeoCurveCartesian *c2, id<GeogebraCommonKernelGeosGeoNumberValue> t1, id<GeogebraCommonKernelGeosGeoNumberValue> t2) {
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithGeogebraCommonKernelConstruction_(self, c);
  self->numeric_ = NO;
  [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) addCASAlgoWithGeogebraCommonKernelAlgosAlgoElement:self];
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_set_outputPoints_(self, [self createOutputPoints]);
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_set_curve_(self, c1);
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_set_curve2_(self, c2);
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_set_t1_(self, t1);
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_set_t2_(self, t2);
  self->numeric_ = YES;
  [self compute];
  [self setInputOutput];
  [self setLabelsWithNSStringArray:labels];
  [self update];
}

GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *new_GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoCurveCartesian *c1, GeogebraCommonKernelGeosGeoCurveCartesian *c2, id<GeogebraCommonKernelGeosGeoNumberValue> t1, id<GeogebraCommonKernelGeosGeoNumberValue> t2) {
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *self = [GeogebraCommonKernelAlgosAlgoIntersectCurveCurve alloc];
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_(self, c, labels, c1, c2, t1, t2);
  return self;
}

void GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_checkPointInRangeWithDouble_withDouble_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *self, jdouble p1, jdouble p2, GeogebraCommonKernelGeosGeoPoint *point) {
  if (GeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(p1, [((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(self->curve_)) getMinParameter]) && GeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_([self->curve_ getMaxParameter], p1) && GeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(p2, [((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(self->curve2_)) getMinParameter]) && GeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_([self->curve2_ getMaxParameter], p2)) {
    jdouble x = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([self->curve_ getFunX])) evaluateWithDouble:p1];
    jdouble y = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([self->curve_ getFunY])) evaluateWithDouble:p1];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(point)) setCoordsWithDouble:x withDouble:y withDouble:1.0];
  }
  else {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(point)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve)

@implementation GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1

- (GeogebraCommonKernelGeosGeoPoint *)newElement {
  GeogebraCommonKernelGeosGeoPoint *p = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(this$0_->cons_) autorelease];
  [p setCoordsWithDouble:0 withDouble:0 withDouble:1];
  [p setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:this$0_];
  return p;
}

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoIntersectCurveCurve:(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *)outer$ {
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelAlgosAlgoIntersectCurveCurve:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.algos.AlgoIntersectCurveCurve;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelAlgosAlgoIntersectCurveCurve", "createOutputPoints" };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 = { 2, "", "geogebra.common.kernel.algos", "AlgoIntersectCurveCurve", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/kernel/geos/GeoElement;>;" };
  return &_GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1;
}

@end

void GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 *self, GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *outer$) {
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 *new_GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *outer$) {
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 *self = [GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1 alloc];
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectCurveCurve_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_$1)
