//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdSetPointStyle.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/PointProperties.h"
#include "geogebra/common/kernel/scripting/CmdSetPointStyle.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelScriptingCmdSetPointStyle

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdSetPointStyle_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  jboolean ok;
  switch (n) {
    case 2:
    GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
    if ((ok = [GeogebraCommonKernelGeosPointProperties_class_() isInstance:IOSObjectArray_Get(nil_chk(arg_), 0)]) && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(arg_, 1)]) {
      id<GeogebraCommonKernelGeosPointProperties> point = (id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(IOSObjectArray_Get(arg_, 0), @protocol(GeogebraCommonKernelGeosPointProperties));
      jint style = J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg_, 1), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble]);
      [((id<GeogebraCommonKernelGeosPointProperties>) nil_chk(point)) setPointStyleWithInt:style];
      [point updateRepaint];
      return;
    }
    else if (!ok) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 0)];
    else @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 1)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdSetPointStyle", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x14, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdSetPointStyle = { 2, "CmdSetPointStyle", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdSetPointStyle;
}

@end

void GeogebraCommonKernelScriptingCmdSetPointStyle_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdSetPointStyle *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdSetPointStyle *new_GeogebraCommonKernelScriptingCmdSetPointStyle_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdSetPointStyle *self = [GeogebraCommonKernelScriptingCmdSetPointStyle alloc];
  GeogebraCommonKernelScriptingCmdSetPointStyle_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdSetPointStyle)
