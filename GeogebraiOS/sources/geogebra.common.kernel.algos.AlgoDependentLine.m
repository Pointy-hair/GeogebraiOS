//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoDependentLine.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDependentLine.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/Algos.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Inspecting.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/Polynomial.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "java/lang/Throwable.h"

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoDependentLine_compute(GeogebraCommonKernelAlgosAlgoDependentLine *self);

@implementation GeogebraCommonKernelAlgosAlgoDependentLine

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  GeogebraCommonKernelAlgosAlgoDependentLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_(self, cons, label, equ);
  return self;
}

- (GeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return GeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equation_)) getGeoElementVariables]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoLine *)getLine {
  return g_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoDependentLine_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equation_)) toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (jdouble)evaluateWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P {
  jdouble mat0 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(ev_), 0))) evaluateDouble];
  jdouble mat1 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(ev_, 1))) evaluateDouble];
  jdouble mat2 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(ev_, 2))) evaluateDouble];
  return ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P))->x_ * mat0 + P->y_ * mat1 + P->z_ * mat2;
}

- (void)dealloc {
  RELEASE_(equation_);
  RELEASE_(line1_);
  RELEASE_(line2_);
  RELEASE_(ev_);
  RELEASE_(root_);
  RELEASE_(g_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticEquation:", "AlgoDependentLine", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getLine", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "evaluateWithGeogebraCommonKernelGeosGeoPoint:", "evaluate", "D", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "equation_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.Equation;", NULL, NULL,  },
    { "line1_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "line2_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "ev_", NULL, 0x4, "[Lgeogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "root_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "g_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoDependentLine = { 2, "AlgoDependentLine", "geogebra.common.kernel.algos", NULL, 0x1, 7, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoDependentLine;
}

@end

void GeogebraCommonKernelAlgosAlgoDependentLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelAlgosAlgoDependentLine *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelArithmeticEquation *equ) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_withBoolean_(self, cons, NO);
  GeogebraCommonKernelAlgosAlgoDependentLine_setAndConsume_ev_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelArithmeticExpressionValue_class_()]);
  GeogebraCommonKernelAlgosAlgoDependentLine_set_equation_(self, equ);
  [((GeogebraCommonKernelArithmeticEquation *) nil_chk(self->equation_)) initEquation];
  GeogebraCommonKernelArithmeticPolynomial *lhs = [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getNormalForm];
  IOSObjectArray_Set(self->ev_, 0, [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(lhs)) getCoefficientWithNSString:@"x"]);
  IOSObjectArray_Set(self->ev_, 1, [lhs getCoefficientWithNSString:@"y"]);
  IOSObjectArray_Set(self->ev_, 2, [lhs getConstantCoefficient]);
  for (jint i = 0; i < 3; i++) {
    if (![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(self->ev_, i))) inspectWithGeogebraCommonKernelArithmeticInspecting:GeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_()]) {
      IOSObjectArray_Set(self->ev_, i, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(self->ev_, i))) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
    }
    id<GeogebraCommonKernelArithmeticExpressionValue> eval = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(self->ev_, i))) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(eval, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  }
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self withBoolean:NO];
  GeogebraCommonKernelAlgosAlgoDependentLine_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoDependentLine_compute(self);
  [self->g_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoDependentLine *new_GeogebraCommonKernelAlgosAlgoDependentLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelArithmeticEquation *equ) {
  GeogebraCommonKernelAlgosAlgoDependentLine *self = [GeogebraCommonKernelAlgosAlgoDependentLine alloc];
  GeogebraCommonKernelAlgosAlgoDependentLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_(self, cons, label, equ);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentLine_compute(GeogebraCommonKernelAlgosAlgoDependentLine *self) {
  @try {
    ((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_))->x_ = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(self->ev_), 0))) evaluateDouble];
    self->g_->y_ = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(self->ev_, 1))) evaluateDouble];
    self->g_->z_ = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(self->ev_, 2))) evaluateDouble];
    if ([self->g_ getStartPoint] != nil) [self->g_ setStandardStartPoint];
  }
  @catch (JavaLangThrowable *e) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoDependentLine)
