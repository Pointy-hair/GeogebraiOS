//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoElement.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/awt/MyImage.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/factories/FormatFactory.h"
#include "geogebra/common/factories/LaTeXFactory.h"
#include "geogebra/common/kernel/AnimationManager.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/ConstructionDefaults.h"
#include "geogebra/common/kernel/GraphAlgo.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Locateable.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoAttachCopyToView.h"
#include "geogebra/common/kernel/algos/AlgoBarChart.h"
#include "geogebra/common/kernel/algos/AlgoCirclePointRadiusInterface.h"
#include "geogebra/common/kernel/algos/AlgoDependentText.h"
#include "geogebra/common/kernel/algos/AlgoDynamicCoordinatesInterface.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntegralODE.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "geogebra/common/kernel/algos/AlgoMacroInterface.h"
#include "geogebra/common/kernel/algos/AlgoName.h"
#include "geogebra/common/kernel/algos/AlgoTranslate.h"
#include "geogebra/common/kernel/algos/AlgoVectorPoint.h"
#include "geogebra/common/kernel/algos/AlgorithmSet.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/DrawInformationAlgo.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/GetCommand.h"
#include "geogebra/common/kernel/algos/TableAlgo.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/Inspecting.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/TextValue.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/AbsoluteScreenLocateable.h"
#include "geogebra/common/kernel/geos/FromMeta.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementGraphicsAdapter.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPenStroke.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoTurtle.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/geos/PointRotateable.h"
#include "geogebra/common/kernel/geos/SpreadsheetTraceable.h"
#include "geogebra/common/kernel/geos/Traceable.h"
#include "geogebra/common/kernel/geos/Translateable.h"
#include "geogebra/common/kernel/kernelND/GeoElementND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/locusequ/EquationScope.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/main/SelectionManager.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/plugin/Event.h"
#include "geogebra/common/plugin/EventType.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/plugin/ScriptManager.h"
#include "geogebra/common/plugin/script/Script.h"
#include "geogebra/common/util/IndexHTMLBuilder.h"
#include "geogebra/common/util/LaTeXCache.h"
#include "geogebra/common/util/Language.h"
#include "geogebra/common/util/MyMath.h"
#include "geogebra/common/util/NumberFormatAdapter.h"
#include "geogebra/common/util/SpreadsheetTraceSettings.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/Unicode.h"
#include "geogebra/common/util/debug/GeoGebraProfiler.h"
#include "java/lang/Character.h"
#include "java/lang/Comparable.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/TreeSet.h"

@class GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum;

#define GeogebraCommonKernelGeosGeoElement_MAX_LABEL_OFFSET 80

@interface GeogebraCommonKernelGeosGeoElement () {
 @public
  jint tooltipMode_;
  NSString *realLabel_;
  NSString *oldLabel_;
  NSString *caption_;
  jboolean localVarLabelSet_;
  jboolean euclidianVisible_;
  jboolean forceEuclidianVisible__;
  jboolean algebraVisible_;
  jboolean labelVisible_;
  jboolean isConsProtBreakpoint_;
  jboolean isAlgoMacroOutput__;
  jint layer_;
  id<GeogebraCommonKernelArithmeticNumberValue> animationIncrement_;
  id<GeogebraCommonKernelArithmeticNumberValue> animationSpeedObj_;
  GeogebraCommonKernelGeosGeoCasCell *correspondingCasCell_;
  jboolean animating_;
  jint animationType_;
  jint animationDirection_;
  jboolean inverseFill_;
  NSString *fillSymbol_;
  jint colorSpace_;
  id<JavaUtilList> viewFlags_;
  jint defaultGeoType_;
  jboolean auxiliaryObject_;
  jboolean selectionAllowed_;
  GeogebraCommonAwtGPoint *spreadsheetCoords_, *oldSpreadsheetCoords_;
  jint cellRangeUsers_;
  GeogebraCommonKernelGeosGeoList *colFunction_;
  jboolean useVisualDefaults_;
  jboolean selected_;
  NSString *strAlgebraDescription_, *strAlgebraDescTextOrHTML_, *strAlgebraDescriptionHTML_, *strLabelTextOrHTML_;
  jboolean strAlgebraDescriptionNeedsUpdate_;
  jboolean strAlgebraDescTextOrHTMLneedsUpdate_;
  jboolean strAlgebraDescriptionHTMLneedsUpdate_;
  jboolean strLabelTextOrHTMLUpdate_;
  jint lineOpacity_;
  JavaUtilArrayList *algorithmList_;
  id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim> viewForValueString_;
  jboolean isEmptySpreadsheetCell__;
  id<GeogebraCommonUtilLaTeXCache> latexCache_;
  NSString *strHasIndexLabel_;
  jboolean hasIndexLabel__;
  JavaUtilArrayList *tempMoveObjectList_;
  jboolean spreadsheetTrace_;
  GeogebraCommonUtilSpreadsheetTraceSettings *traceSettings_;
  jboolean inTree_;
  IOSObjectArray *scripts_;
  jboolean showTrimmedIntersectionLines_;
  jboolean isRandomGeo__;
  GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum *visibleInView3D_;
  jboolean isPickable__;
  jboolean needsReplacingInExpressionNode__;
  JavaUtilStack *tempClone_;
  jboolean cloneInUse_;
  GeogebraCommonKernelArithmeticMyStringBuffer *xBracket_, *yBracket_, *zBracket_, *closeBracket_;
  jboolean canBeRemovedAsInput__;
}

- (GeogebraCommonAwtGColor *)getRGBFromListWithFloat:(jfloat)alpha1;

- (GeogebraCommonAwtGColor *)getRGBFromListWithInt:(jint)withAlpha;

- (jint)typePriority;

+ (jboolean)containsOnlyMoveableGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos;

- (void)initAnimationSpeedObject OBJC_METHOD_FAMILY_NONE;

- (void)doSetLabelWithNSString:(NSString *)newLabel;

- (void)updateSpreadsheetCoordinates;

- (void)doRenameLabelWithNSString:(NSString *)newLabel;

- (NSString *)defaultNumberedLabelWithNSString:(NSString *)plainKey;

- (void)algebraStringsNeedUpdate;

- (void)updateDependentObjects;

- (NSString *)getLaTeXAlgebraDescriptionWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                   withBoolean:(jboolean)substituteNumbers
                                        withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (void)getListenerTagXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                               withJavaUtilHashMap:(JavaUtilHashMap *)map
                                      withNSString:(NSString *)type;

- (void)getExtraTagsXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (NSString *)getShowObjectConditionXML;

- (jboolean)moveObjectWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)rwTransVec
                      withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)endPosition
                      withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)viewDirection
                                     withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                  withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view;

+ (void)addParentToUpdateListWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)number
                                              withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                                              withJavaUtilArrayList:(JavaUtilArrayList *)tempMoveObjectList1;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, realLabel_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, oldLabel_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, caption_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, animationIncrement_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, animationSpeedObj_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, correspondingCasCell_, GeogebraCommonKernelGeosGeoCasCell *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, fillSymbol_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, viewFlags_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, spreadsheetCoords_, GeogebraCommonAwtGPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, oldSpreadsheetCoords_, GeogebraCommonAwtGPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, colFunction_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, strAlgebraDescription_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, strAlgebraDescTextOrHTML_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, strAlgebraDescriptionHTML_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, strLabelTextOrHTML_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, algorithmList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, viewForValueString_, id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, latexCache_, id<GeogebraCommonUtilLaTeXCache>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, strHasIndexLabel_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, tempMoveObjectList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, traceSettings_, GeogebraCommonUtilSpreadsheetTraceSettings *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, scripts_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, visibleInView3D_, GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, tempClone_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, xBracket_, GeogebraCommonKernelArithmeticMyStringBuffer *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, yBracket_, GeogebraCommonKernelArithmeticMyStringBuffer *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, zBracket_, GeogebraCommonKernelArithmeticMyStringBuffer *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, closeBracket_, GeogebraCommonKernelArithmeticMyStringBuffer *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, MAX_LABEL_OFFSET, jint)

static IOSCharArray *GeogebraCommonKernelGeosGeoElement_pointLabels_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, pointLabels_, IOSCharArray *)

static IOSCharArray *GeogebraCommonKernelGeosGeoElement_functionLabels_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, functionLabels_, IOSCharArray *)

static IOSCharArray *GeogebraCommonKernelGeosGeoElement_lineLabels_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, lineLabels_, IOSCharArray *)

static IOSCharArray *GeogebraCommonKernelGeosGeoElement_vectorLabels_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, vectorLabels_, IOSCharArray *)

static IOSCharArray *GeogebraCommonKernelGeosGeoElement_conicLabels_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, conicLabels_, IOSCharArray *)

static IOSCharArray *GeogebraCommonKernelGeosGeoElement_lowerCaseLabels_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, lowerCaseLabels_, IOSCharArray *)

static IOSCharArray *GeogebraCommonKernelGeosGeoElement_integerLabels_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, integerLabels_, IOSCharArray *)

static IOSCharArray *GeogebraCommonKernelGeosGeoElement_greekLowerCase_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, greekLowerCase_, IOSCharArray *)

static IOSCharArray *GeogebraCommonKernelGeosGeoElement_arabic_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, arabic_, IOSCharArray *)

static IOSCharArray *GeogebraCommonKernelGeosGeoElement_yiddish_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, yiddish_, IOSCharArray *)

static IOSCharArray *GeogebraCommonKernelGeosGeoElement_greekUpperCase_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, greekUpperCase_, IOSCharArray *)

static NSString *GeogebraCommonKernelGeosGeoElement_subBegin_ = @"<sub><font size=\"-1\">";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, subBegin_, NSString *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, subBegin_, NSString *)

static NSString *GeogebraCommonKernelGeosGeoElement_subEnd_ = @"</font></sub>";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, subEnd_, NSString *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, subEnd_, NSString *)

static JavaUtilArrayList *GeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, moveObjectsUpdateList_, JavaUtilArrayList *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, moveObjectsUpdateList_, JavaUtilArrayList *)

static JavaUtilTreeSet *GeogebraCommonKernelGeosGeoElement_tempSet_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, tempSet_, JavaUtilTreeSet *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, tempSet_, JavaUtilTreeSet *)

static id<JavaUtilComparator> GeogebraCommonKernelGeosGeoElement_algoComparator_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElement, algoComparator_, id<JavaUtilComparator>)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElement, algoComparator_, id<JavaUtilComparator>)

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_setConstructionDefaultsWithBoolean_(GeogebraCommonKernelGeosGeoElement *self, jboolean setEuclidianVisible);

__attribute__((unused)) static GeogebraCommonAwtGColor *GeogebraCommonKernelGeosGeoElement_getRGBFromListWithFloat_(GeogebraCommonKernelGeosGeoElement *self, jfloat alpha1);

__attribute__((unused)) static GeogebraCommonAwtGColor *GeogebraCommonKernelGeosGeoElement_getRGBFromListWithInt_(GeogebraCommonKernelGeosGeoElement *self, jint withAlpha);

__attribute__((unused)) static jint GeogebraCommonKernelGeosGeoElement_typePriority(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoElement_isVisible(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoElement_isEuclidianVisible(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoElement_isAuxiliaryObject(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoElement_isAlgebraVisible(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoElement *GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static JavaUtilArrayList *GeogebraCommonKernelGeosGeoElement_getAlgorithmList(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoElement_hasOnlyFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(GeogebraCommonKernelGeosGeoElement *self, id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim> view);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoElement_containsOnlyMoveableGeosWithJavaUtilArrayList_(JavaUtilArrayList *geos);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_initAnimationSpeedObject(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoElement_isAnimating(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_doSetLabelWithNSString_(GeogebraCommonKernelGeosGeoElement *self, NSString *newLabel);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_updateSpreadsheetCoordinates(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_doRenameLabelWithNSString_(GeogebraCommonKernelGeosGeoElement *self, NSString *newLabel);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(GeogebraCommonKernelGeosGeoElement *self, NSString *plainKey);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_notifyAdd(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_notifyRemove(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_notifyUpdateAuxiliaryObject(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_updateGeo(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_algebraStringsNeedUpdate(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_updateDependentObjects(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(GeogebraCommonKernelGeosGeoElement *self, JavaUtilTreeSet *set, jboolean onlyIndependent);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_addRandomizablePredecessorsToSetWithJavaUtilTreeSet_(GeogebraCommonKernelGeosGeoElement *self, JavaUtilTreeSet *set);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoElement_isParentOfWithGeogebraCommonKernelKernelNDGeoElementND_(GeogebraCommonKernelGeosGeoElement *self, id<GeogebraCommonKernelKernelNDGeoElementND> geo);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoElement_isChildOfWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static JavaUtilTreeSet *GeogebraCommonKernelGeosGeoElement_getAllChildren(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoElement_isGeoElement(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoElement_getCommandDescriptionWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoElement *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoElement_getXMLtypeString(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoElement_getLongDescriptionHTMLWithBoolean_withBoolean_(GeogebraCommonKernelGeosGeoElement *self, jboolean colored, jboolean addHTMLtag);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoElement_toDefinedValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoElement *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoElement_getLabelTextOrHTMLWithBoolean_(GeogebraCommonKernelGeosGeoElement *self, jboolean addHTMLTag);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoElement *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionDefault(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoElement_getLaTeXAlgebraDescriptionWithGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoElement *self, GeogebraCommonKernelGeosGeoElement *geo, jboolean substituteNumbers, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoElement_hasIndexLabel(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_getListenerTagXMLWithJavaLangStringBuilder_withJavaUtilHashMap_withNSString_(GeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb, JavaUtilHashMap *map, NSString *type);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_getCaptionXMLWithJavaLangStringBuilder_(GeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_getAuxiliaryXMLWithJavaLangStringBuilder_(GeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_getExtraTagsXMLWithJavaLangStringBuilder_(GeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoElement_getShowObjectConditionXML(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoElement_isSelected(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoBoolean *GeogebraCommonKernelGeosGeoElement_getShowObjectCondition(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoList *GeogebraCommonKernelGeosGeoElement_getColorFunction(GeogebraCommonKernelGeosGeoElement *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoElement_moveObjectWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withJavaUtilArrayList_withGeogebraCommonEuclidianEuclidianView_(GeogebraCommonKernelGeosGeoElement *self, GeogebraCommonKernelMatrixCoords *rwTransVec, GeogebraCommonKernelMatrixCoords *endPosition, GeogebraCommonKernelMatrixCoords *viewDirection, JavaUtilArrayList *updateGeos, GeogebraCommonEuclidianEuclidianView *view);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_addParentToUpdateListWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(GeogebraCommonKernelGeosGeoElement *number, JavaUtilArrayList *updateGeos, JavaUtilArrayList *tempMoveObjectList1);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoCasCell *GeogebraCommonKernelGeosGeoElement_getCorrespondingCasCell(GeogebraCommonKernelGeosGeoElement *self);

@interface GeogebraCommonKernelGeosGeoElement_FillTypeEnum () {
 @public
  jint value_;
  jboolean hatch_;
}

@end

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(GeogebraCommonKernelGeosGeoElement_FillTypeEnum *self, jint value, jboolean hatch, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement_FillTypeEnum *new_GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(jint value, jboolean hatch, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

typedef NS_ENUM(NSUInteger, GeogebraCommonKernelGeosGeoElement_VisibleInView3D) {
  GeogebraCommonKernelGeosGeoElement_VisibleInView3D_NOT_SET = 0,
  GeogebraCommonKernelGeosGeoElement_VisibleInView3D_TRUE = 1,
  GeogebraCommonKernelGeosGeoElement_VisibleInView3D_FALSE = 2,
};

@interface GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_values();

+ (GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum *GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum)

FOUNDATION_EXPORT GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum *GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_values_[];

#define GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_NOT_SET GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_values_[GeogebraCommonKernelGeosGeoElement_VisibleInView3D_NOT_SET]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum, NOT_SET)

#define GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_TRUE GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_values_[GeogebraCommonKernelGeosGeoElement_VisibleInView3D_TRUE]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum, TRUE)

#define GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_FALSE GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_values_[GeogebraCommonKernelGeosGeoElement_VisibleInView3D_FALSE]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum, FALSE)

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_initWithNSString_withInt_(GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum *new_GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum)

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *new_GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(GeogebraCommonKernelGeosGeoElement_HitTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement_HitTypeEnum *new_GeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface GeogebraCommonKernelGeosGeoElement_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(GeogebraCommonKernelAlgosAlgoElement *)o1
               withId:(GeogebraCommonKernelAlgosAlgoElement *)o2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelGeosGeoElement_$1)

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoElement_$1_init(GeogebraCommonKernelGeosGeoElement_$1 *self);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement_$1 *new_GeogebraCommonKernelGeosGeoElement_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelGeosGeoElement_$1)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelGeosGeoElement)

@implementation GeogebraCommonKernelGeosGeoElement

- (jint)getColorSpace {
  return colorSpace_;
}

- (void)setColorSpaceWithInt:(jint)colorSpace {
  self->colorSpace_ = colorSpace;
}

- (jint)getDefaultGeoType {
  return defaultGeoType_;
}

- (jboolean)isDefaultGeo {
  return defaultGeoType_ != -1;
}

- (void)setDefaultGeoTypeWithInt:(jint)defaultGT {
  defaultGeoType_ = defaultGT;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (NSString *)getLabelSimple {
  return label_;
}

- (void)setLabelSimpleWithNSString:(NSString *)lab {
  GeogebraCommonKernelGeosGeoElement_set_label_(self, lab);
}

- (NSString *)getLabelWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (![((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isUseRealLabels] || (realLabel_ == nil) || [realLabel_ isEqual:@""]) {
    if (!labelSet_ && !localVarLabelSet_) {
      if (algoParent_ == nil) {
        return [self toOutputValueStringWithGeogebraCommonKernelStringTemplate:tpl];
      }
      return [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getCommandDescriptionWithGeogebraCommonKernelStringTemplate:tpl];
    }
    return [tpl printVariableNameWithNSString:label_];
  }
  return [tpl printVariableNameWithNSString:realLabel_];
}

- (void)copyLabelWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)c {
  GeogebraCommonKernelGeosGeoElement_set_label_(self, ((GeogebraCommonKernelGeosGeoElement *) nil_chk(c))->label_);
}

- (void)setLabelModeWithInt:(jint)mode {
  switch (mode) {
    case GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE:
    labelMode_ = GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE;
    break;
    case GeogebraCommonKernelGeosGeoElement_LABEL_VALUE:
    labelMode_ = GeogebraCommonKernelGeosGeoElement_LABEL_VALUE;
    break;
    case GeogebraCommonKernelGeosGeoElement_LABEL_CAPTION:
    labelMode_ = GeogebraCommonKernelGeosGeoElement_LABEL_CAPTION;
    break;
    default:
    labelMode_ = GeogebraCommonKernelGeosGeoElement_LABEL_NAME;
  }
}

- (jint)getLabelMode {
  return labelMode_;
}

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 1) autorelease];
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonKernelGeosGeoElement *)deepCopyGeo {
  return [self copy__];
}

- (GeogebraCommonKernelGeosGeoElement *)copyInternalWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)consToCopy {
  GeogebraCommonKernelGeosGeoElement *geoCopy = [self copy__];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geoCopy)) setConstructionWithGeogebraCommonKernelConstruction:consToCopy];
  return geoCopy;
}

+ (IOSObjectArray *)copyPointsWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                   withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  return GeogebraCommonKernelGeosGeoElement_copyPointsWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, points);
}

+ (IOSObjectArray *)copyPointsNDWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  return GeogebraCommonKernelGeosGeoElement_copyPointsNDWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, points);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel1 {
  return [self copy__];
}

- (void)resolveVariables {
}

- (jboolean)isInfinite {
  return NO;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isDefined {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setUndefined {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setViewForValueStringWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  GeogebraCommonKernelGeosGeoElement_set_viewForValueString_(self, view);
}

- (id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>)getViewForValueString {
  return viewForValueString_;
}

- (jboolean)hasValueStringChangeableRegardingView {
  return NO;
}

- (NSString *)getRedefineStringWithBoolean:(jboolean)useChangeable
                               withBoolean:(jboolean)useOutputValueString {
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_editTemplate_();
  NSString *ret = @"";
  jboolean isIndependent = ![self isPointOnPath] && useChangeable ? [self isChangeable] : [self isIndependent];
  if (isIndependent) {
    ret = useOutputValueString ? [self toOutputValueStringWithGeogebraCommonKernelStringTemplate:tpl] : [self toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
  }
  else if (GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self) != nil) {
    ret = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self))) getCommandDescriptionWithGeogebraCommonKernelStringTemplate:tpl];
  }
  return ret;
}

- (jchar)getLabelDelimiter {
  return '=';
}

- (NSString *)getDefinitionForInputBar {
  NSString *inputBarStr = GeogebraCommonKernelGeosGeoElement_getCommandDescriptionWithGeogebraCommonKernelStringTemplate_(self, GeogebraCommonKernelStringTemplate_get_editTemplate_());
  if (![((NSString *) nil_chk(inputBarStr)) isEqual:@""]) {
    jchar delimiter = [self getLabelDelimiter];
    if ([inputBarStr indexOf:delimiter] < 0) {
      inputBarStr = JreStrcat("$@C$", [self getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_editTemplate_()], (delimiter == '=' ? @" =" : JavaLangCharacter_valueOfWithChar_(delimiter)), ' ', inputBarStr);
    }
  }
  else {
    inputBarStr = GeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionWithGeogebraCommonKernelStringTemplate_(self, GeogebraCommonKernelStringTemplate_get_editTemplate_());
  }
  return inputBarStr;
}

- (NSString *)getValueForInputBar {
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_editTemplate_();
  NSString *ret = [self toOutputValueStringWithGeogebraCommonKernelStringTemplate:tpl];
  return ret;
}

- (void)setZero {
}

- (NSString *)toOutputValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([self isLocalVariable]) {
    return label_;
  }
  return [self toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (void)setConstructionDefaults {
  GeogebraCommonKernelGeosGeoElement_setConstructionDefaultsWithBoolean_(self, YES);
}

- (void)setConstructionDefaultsWithBoolean:(jboolean)setEuclidianVisible {
  GeogebraCommonKernelGeosGeoElement_setConstructionDefaultsWithBoolean_(self, setEuclidianVisible);
}

- (void)setObjColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color {
  isColorSet__ = YES;
  GeogebraCommonKernelGeosGeoElement_set_objColor_(self, color);
  GeogebraCommonKernelGeosGeoElement_set_labelColor_(self, color);
  GeogebraCommonKernelGeosGeoElement_set_fillColor_(self, color);
  [self setAlphaValueWithFloat:alphaValue_];
  if (color != nil) {
    GeogebraCommonKernelGeosGeoElement_set_selColor_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:[color getRed] withInt:[color getGreen] withInt:[color getBlue] withInt:100]);
  }
}

- (jboolean)isColorSet {
  return isColorSet__;
}

- (GeogebraCommonAwtGColor *)getRGBFromListWithFloat:(jfloat)alpha1 {
  return GeogebraCommonKernelGeosGeoElement_getRGBFromListWithFloat_(self, alpha1);
}

- (GeogebraCommonAwtGColor *)getRGBFromListWithInt:(jint)withAlpha {
  return GeogebraCommonKernelGeosGeoElement_getRGBFromListWithInt_(self, withAlpha);
}

- (GeogebraCommonAwtGColor *)getSelColor {
  if (colFunction_ == nil) {
    return selColor_;
  }
  return GeogebraCommonKernelGeosGeoElement_getRGBFromListWithInt_(self, 100);
}

- (GeogebraCommonAwtGColor *)getFillColor {
  if (colFunction_ == nil) {
    return fillColor_;
  }
  return GeogebraCommonKernelGeosGeoElement_getRGBFromListWithFloat_(self, [self getAlphaValue]);
}

- (GeogebraCommonAwtGColor *)getAlgebraColor {
  GeogebraCommonAwtGColor *col = [self getLabelColor];
  return [((GeogebraCommonAwtGColor *) nil_chk(col)) isEqual:GeogebraCommonAwtGColor_get_white_()] ? GeogebraCommonAwtGColor_get_black_() : col;
}

- (GeogebraCommonAwtGColor *)getLabelColor {
  if (colFunction_ == nil) {
    return labelColor_;
  }
  return [self getObjectColor];
}

- (void)setLabelColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color {
  GeogebraCommonKernelGeosGeoElement_set_labelColor_(self, color);
}

- (GeogebraCommonAwtGColor *)getBackgroundColor {
  return bgColor_;
}

- (void)setBackgroundColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)bgCol {
  GeogebraCommonKernelGeosGeoElement_set_bgColor_(self, bgCol);
}

- (GeogebraCommonAwtGColor *)getObjectColor {
  GeogebraCommonAwtGColor *col = objColor_;
  @try {
    if (colFunction_ != nil) {
      col = GeogebraCommonKernelGeosGeoElement_getRGBFromListWithInt_(self, 255);
    }
  }
  @catch (JavaLangException *e) {
    [self removeColorFunction];
  }
  return col;
}

- (void)setLayerWithInt:(jint)layer2 {
  jint newlayer = layer2;
  if (layer2 == self->layer_) {
    return;
  }
  if (newlayer > GeogebraCommonPluginEuclidianStyleConstants_MAX_LAYERS) {
    newlayer = GeogebraCommonPluginEuclidianStyleConstants_MAX_LAYERS;
  }
  else if (newlayer < 0) {
    newlayer = 0;
  }
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyChangeLayerWithGeogebraCommonKernelGeosGeoElement:self withInt:self->layer_ withInt:newlayer];
  self->layer_ = newlayer;
}

- (jint)getLayer {
  return layer_;
}

- (jint)typePriority {
  return GeogebraCommonKernelGeosGeoElement_typePriority(self);
}

- (jboolean)drawBeforeWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)other
                                                 withBoolean:(jboolean)checkLastHitType {
  if ([self getLayer] < [((GeogebraCommonKernelGeosGeoElement *) nil_chk(other)) getLayer]) {
    return YES;
  }
  if ([self getLayer] > [other getLayer]) {
    return NO;
  }
  if (checkLastHitType) {
    if ([self getLastHitType] == GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY() && [other getLastHitType] != GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY()) {
      return YES;
    }
    if ([self getLastHitType] != GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY() && [other getLastHitType] == GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY()) {
      return NO;
    }
  }
  if (GeogebraCommonKernelGeosGeoElement_typePriority(self) < GeogebraCommonKernelGeosGeoElement_typePriority(other)) {
    return YES;
  }
  if (GeogebraCommonKernelGeosGeoElement_typePriority(self) > GeogebraCommonKernelGeosGeoElement_typePriority(other)) {
    return NO;
  }
  if ([self getConstructionIndex] < [other getConstructionIndex]) {
    return YES;
  }
  if ([self getConstructionIndex] > [other getConstructionIndex]) {
    return NO;
  }
  if ([GeogebraCommonKernelAlgosAlgoMacroInterface_class_() isInstance:GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self)]) {
    return [((id<GeogebraCommonKernelAlgosAlgoMacroInterface>) nil_chk(((id<GeogebraCommonKernelAlgosAlgoMacroInterface>) check_protocol_cast(GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self), @protocol(GeogebraCommonKernelAlgosAlgoMacroInterface))))) drawBeforeWithGeogebraCommonKernelGeosGeoElement:self withGeogebraCommonKernelGeosGeoElement:other];
  }
  return YES;
}

- (void)setAlphaValueWithFloat:(jfloat)alpha {
  if ((fillColor_ == nil) || (alpha < 0.0f) || (alpha > 1.0f)) {
    return;
  }
  alphaValue_ = alpha;
  IOSFloatArray *rgb = [IOSFloatArray arrayWithLength:3];
  [((GeogebraCommonAwtGColor *) nil_chk(fillColor_)) getRGBColorComponentsWithFloatArray:rgb];
  GeogebraCommonKernelGeosGeoElement_set_fillColor_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithFloat:IOSFloatArray_Get(rgb, 0) withFloat:IOSFloatArray_Get(rgb, 1) withFloat:IOSFloatArray_Get(rgb, 2) withFloat:alpha]);
}

- (jfloat)getAlphaValue {
  if ((colFunction_ == nil) || ([colFunction_ size] == 3)) {
    return alphaValue_;
  }
  GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelGeosGeoList *) nil_chk(colFunction_)) getWithInt:3];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined]) {
    jdouble alpha = [((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticNumberValue))) getDouble];
    alpha = (alpha / 2) - JavaLangMath_floorWithDouble_(alpha / 2);
    if (alpha > 0.5) {
      alpha = 2 * (1 - alpha);
    }
    else {
      alpha = 2 * alpha;
    }
    return (jfloat) alpha;
  }
  return alphaValue_;
}

- (jboolean)isLimitedPath {
  return NO;
}

- (jboolean)isPath {
  return NO;
}

- (jboolean)isRegion {
  return NO;
}

- (jboolean)isGeoList {
  return NO;
}

- (void)setAllVisualPropertiesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                         withBoolean:(jboolean)keepAdvanced {
  euclidianVisible_ = ((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->euclidianVisible_;
  [self setAllVisualPropertiesExceptEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:keepAdvanced];
}

- (void)setAllVisualPropertiesExceptEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                               withBoolean:(jboolean)keepAdvanced {
  if (keepAdvanced) {
    [self setVisualStyleWithGeogebraCommonKernelGeosGeoElement:geo];
  }
  else {
    [self setAdvancedVisualStyleWithGeogebraCommonKernelGeosGeoElement:geo];
  }
  algebraVisible_ = ((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->algebraVisible_;
  labelOffsetX_ = geo->labelOffsetX_;
  labelOffsetY_ = geo->labelOffsetY_;
  GeogebraCommonKernelGeosGeoElement_set_caption_(self, geo->caption_);
  inverseFill_ = geo->inverseFill_;
  if ([self isTraceable] && [geo isTraceable]) {
    [((id<GeogebraCommonKernelGeosTraceable>) check_protocol_cast(self, @protocol(GeogebraCommonKernelGeosTraceable))) setTraceWithBoolean:[((id<GeogebraCommonKernelGeosTraceable>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosTraceable))) getTrace]];
  }
  if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk([self getGeoClassType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_POINT()] && [((GeogebraCommonPluginGeoClassEnum *) nil_chk([geo getGeoClassType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_POINT()]) {
    [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(self, [GeogebraCommonKernelGeosGeoPoint class])) setSpreadsheetTraceWithBoolean:[((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class])) getSpreadsheetTrace]];
  }
  if (!keepAdvanced) {
    if (geo->colFunction_ != nil) {
      [self setColorFunctionWithGeogebraCommonKernelGeosGeoList:geo->colFunction_];
    }
  }
  if (!keepAdvanced) {
    if (geo->condShowObject_ != nil) {
      @try {
        [self setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:GeogebraCommonKernelGeosGeoElement_getShowObjectCondition(geo)];
      }
      @catch (JavaLangException *e) {
      }
    }
  }
  if ([self isSpreadsheetTraceable] && [geo getSpreadsheetTrace]) {
    [self setSpreadsheetTraceWithBoolean:YES];
    GeogebraCommonKernelGeosGeoElement_set_traceSettings_(self, geo->traceSettings_);
  }
}

- (void)setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [self setVisualStyleWithGeogebraCommonKernelGeosGeoElement:geo];
  [self setFixedWithBoolean:NO];
  [self updateVisualStyle];
}

- (void)setVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  labelVisible_ = ((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->labelVisible_;
  labelMode_ = geo->labelMode_;
  tooltipMode_ = geo->tooltipMode_;
  if ([self getGeoClassType] == [geo getGeoClassType]) {
    toStringMode_ = geo->toStringMode_;
  }
  [self setColorVisualStyleWithGeogebraCommonKernelGeosGeoElement:geo];
  [self setLineThicknessWithInt:geo->lineThickness_];
  [self setLineTypeWithInt:geo->lineType_];
  [self setLineTypeHiddenWithInt:geo->lineTypeHidden_];
  [self setDecorationTypeWithInt:geo->decorationType_];
  [self setLineOpacityWithInt:[geo getLineOpacity]];
  [self setAuxiliaryObjectWithBoolean:GeogebraCommonKernelGeosGeoElement_isAuxiliaryObject(geo)];
  [self setFixedWithBoolean:[geo isFixed]];
  if (layer_ == 0) {
    [self setLayerWithInt:[geo getLayer]];
  }
}

- (void)setColorVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelGeosGeoElement_set_objColor_(self, ((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->objColor_);
  GeogebraCommonKernelGeosGeoElement_set_selColor_(self, geo->selColor_);
  GeogebraCommonKernelGeosGeoElement_set_labelColor_(self, geo->labelColor_);
  if ([geo isFillable]) {
    GeogebraCommonKernelGeosGeoElement_set_fillColor_(self, geo->fillColor_);
    GeogebraCommonKernelGeosGeoElement_set_fillType_(self, geo->fillType_);
    hatchingAngle_ = geo->hatchingAngle_;
    hatchingDistance_ = geo->hatchingDistance_;
    [((GeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk(graphicsadapter_)) setImageFileNameWithNSString:[((GeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([geo getGraphicsAdapter])) getImageFileName]];
    alphaValue_ = geo->alphaValue_;
  }
  else {
    GeogebraCommonKernelGeosGeoElement_set_fillColor_(self, geo->objColor_);
    [self setAlphaValueWithFloat:[geo getAlphaValue]];
  }
  GeogebraCommonKernelGeosGeoElement_set_bgColor_(self, geo->bgColor_);
  isColorSet__ = [geo isColorSet];
}

- (void)setAdvancedVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [self setVisualStyleWithGeogebraCommonKernelGeosGeoElement:geo];
  [self setLayerWithInt:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer]];
  [self setColorFunctionWithGeogebraCommonKernelGeosGeoList:GeogebraCommonKernelGeosGeoElement_getColorFunction(geo)];
  [self setColorSpaceWithInt:[geo getColorSpace]];
  @try {
    [self setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:GeogebraCommonKernelGeosGeoElement_getShowObjectCondition(geo)];
  }
  @catch (JavaLangException *e) {
  }
}

- (void)setAdvancedVisualStyleCopyWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (GeogebraCommonKernelGeosGeoElement_getColorFunction(nil_chk(geo)) != nil) {
    [self setColorFunctionWithGeogebraCommonKernelGeosGeoList:[((GeogebraCommonKernelGeosGeoList *) nil_chk(GeogebraCommonKernelGeosGeoElement_getColorFunction(geo))) deepCopyGeo]];
    [self setColorSpaceWithInt:[geo getColorSpace]];
  }
  if (GeogebraCommonKernelGeosGeoElement_getShowObjectCondition(geo) != nil) {
    @try {
      [self setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:[((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(GeogebraCommonKernelGeosGeoElement_getShowObjectCondition(geo))) copy__]];
    }
    @catch (JavaLangException *e) {
    }
  }
}

- (GeogebraCommonKernelGeosGeoElementGraphicsAdapter *)getGraphicsAdapter {
  return graphicsadapter_;
}

- (void)setLabelOffsetWithInt:(jint)xcoord
                      withInt:(jint)ycoord {
  jint x = xcoord;
  jint y = ycoord;
  jdouble len = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x, y);
  if (len > GeogebraCommonKernelGeosGeoElement_MAX_LABEL_OFFSET) {
    jdouble factor = GeogebraCommonKernelGeosGeoElement_MAX_LABEL_OFFSET / len;
    x = (jint) JavaLangMath_roundWithDouble_(factor * x);
    y = (jint) JavaLangMath_roundWithDouble_(factor * y);
  }
  labelOffsetX_ = x;
  labelOffsetY_ = y;
}

- (jboolean)isVisible {
  return GeogebraCommonKernelGeosGeoElement_isVisible(self);
}

- (jboolean)isEuclidianVisible {
  return GeogebraCommonKernelGeosGeoElement_isEuclidianVisible(self);
}

- (void)setEuclidianVisibleWithBoolean:(jboolean)visible {
  euclidianVisible_ = visible;
}

- (void)setEuclidianVisibleIfNoConditionToShowObjectWithBoolean:(jboolean)visible {
  if (condShowObject_ == nil) {
    [self setEuclidianVisibleWithBoolean:visible];
  }
}

- (void)forceEuclidianVisibleWithBoolean:(jboolean)visible {
  forceEuclidianVisible__ = visible;
}

- (jboolean)isSetEuclidianVisible {
  return euclidianVisible_;
}

- (jboolean)isConsProtocolBreakpoint {
  return isConsProtBreakpoint_;
}

- (void)setConsProtocolBreakpointWithBoolean:(jboolean)flag {
  isConsProtBreakpoint_ = flag;
}

- (IOSObjectArray *)getSiblings {
  if (algoParent_ != nil) {
    return [algoParent_ getOutput];
  }
  return nil;
}

- (jboolean)isDrawable {
  return YES;
}

- (jboolean)isFillable {
  return NO;
}

- (jboolean)isInverseFillable {
  return NO;
}

- (jboolean)isTraceable {
  return NO;
}

- (jboolean)isFixed {
  return fixed_;
}

- (void)setFixedWithBoolean:(jboolean)flag {
  if (!flag) {
    fixed_ = flag;
  }
  else if ([self isFixable]) {
    fixed_ = flag;
  }
}

- (jboolean)isFixable {
  return YES;
}

- (void)removeOrSetUndefinedIfHasFixedDescendent {
  if ([self isFixed]) {
    return;
  }
  jboolean hasFixedDescendent = NO;
  id<JavaUtilSet> tree = GeogebraCommonKernelGeosGeoElement_getAllChildren(self);
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(tree)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (hasFixedDescendent == NO)) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([it next])) isFixed]) {
      hasFixedDescendent = YES;
    }
  }
  if (hasFixedDescendent) {
    [self setUndefined];
    [self updateRepaint];
  }
  else {
    [self remove];
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRemoveGroup];
  }
}

- (jboolean)isAuxiliaryObject {
  return GeogebraCommonKernelGeosGeoElement_isAuxiliaryObject(self);
}

- (jboolean)isAuxiliaryObjectByDefault {
  return NO;
}

- (GeogebraCommonKernelGeosGeoElement *)toGeoElement {
  return self;
}

- (void)setAuxiliaryObjectWithBoolean:(jboolean)flag {
  if (auxiliaryObject_ != flag) {
    auxiliaryObject_ = flag;
    if (labelSet_) {
      GeogebraCommonKernelGeosGeoElement_notifyUpdateAuxiliaryObject(self);
    }
  }
}

- (void)setLabelVisibleWithBoolean:(jboolean)visible {
  labelVisible_ = visible;
}

- (jboolean)isLabelVisible {
  return labelVisible_ && [self isLabelSet];
}

- (jboolean)getLabelVisible {
  return labelVisible_;
}

- (jboolean)isLabelShowable {
  return [self isDrawable] && !([GeogebraCommonKernelArithmeticTextValue_class_() isInstance:self] || [self isGeoImage] || [self isGeoButton] || [self isGeoLocus] || ([self isGeoBoolean] && ![self isIndependent]));
}

- (jboolean)isLabelValueShowable {
  return YES;
}

- (jboolean)isAlgebraVisible {
  return GeogebraCommonKernelGeosGeoElement_isAlgebraVisible(self);
}

- (jboolean)showToolTipText {
  switch (tooltipMode_) {
    default:
    if (!([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isUsingFullGui] && [((GeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) showViewWithInt:GeogebraCommonMainApp_VIEW_ALGEBRA])) {
      return NO;
    }
    return GeogebraCommonKernelGeosGeoElement_isAlgebraVisible(self);
    case GeogebraCommonKernelGeosGeoElement_TOOLTIP_OFF:
    return NO;
    case GeogebraCommonKernelGeosGeoElement_TOOLTIP_ON:
    case GeogebraCommonKernelGeosGeoElement_TOOLTIP_CAPTION:
    case GeogebraCommonKernelGeosGeoElement_TOOLTIP_NEXTCELL:
    return YES;
  }
}

- (NSString *)getTooltipTextWithBoolean:(jboolean)colored
                            withBoolean:(jboolean)alwaysOn {
  if ([GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self) isKindOfClass:[GeogebraCommonKernelAlgosAlgoAttachCopyToView class]]) {
    return @"";
  }
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_defaultTemplate_();
  {
    NSString *ret;
    NSString *cellLabel;
    GeogebraCommonAwtGPoint *coords;
    GeogebraCommonKernelGeosGeoElement *geo;
    switch (tooltipMode_) {
      default:
      case GeogebraCommonKernelGeosGeoElement_TOOLTIP_ALGEBRAVIEW_SHOWING:
      if (!alwaysOn) {
        if (!([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isUsingFullGui] && [((GeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) showViewWithInt:GeogebraCommonMainApp_VIEW_ALGEBRA])) {
          return @"";
        }
      }
      case GeogebraCommonKernelGeosGeoElement_TOOLTIP_ON:
      [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) setTooltipFlag];
      ret = GeogebraCommonKernelGeosGeoElement_getLongDescriptionHTMLWithBoolean_withBoolean_(self, colored, NO);
      [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) clearTooltipFlag];
      return ret;
      case GeogebraCommonKernelGeosGeoElement_TOOLTIP_OFF:
      return @"";
      case GeogebraCommonKernelGeosGeoElement_TOOLTIP_CAPTION:
      return [self getCaptionWithGeogebraCommonKernelStringTemplate:tpl];
      case GeogebraCommonKernelGeosGeoElement_TOOLTIP_NEXTCELL:
      cellLabel = [self getLabelWithGeogebraCommonKernelStringTemplate:tpl];
      coords = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(cellLabel);
      if (coords == nil) {
        return @"";
      }
      ((GeogebraCommonAwtGPoint *) nil_chk(coords))->x_++;
      cellLabel = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(coords->x_, coords->y_);
      if (cellLabel == nil) {
        return @"";
      }
      geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:cellLabel];
      return (geo == nil) ? @"" : [geo toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
    }
  }
}

- (jint)getTooltipMode {
  return tooltipMode_;
}

- (void)setTooltipModeWithInt:(jint)mode {
  switch (mode) {
    default:
    tooltipMode_ = GeogebraCommonKernelGeosGeoElement_TOOLTIP_ALGEBRAVIEW_SHOWING;
    break;
    case GeogebraCommonKernelGeosGeoElement_TOOLTIP_OFF:
    case GeogebraCommonKernelGeosGeoElement_TOOLTIP_ON:
    case GeogebraCommonKernelGeosGeoElement_TOOLTIP_CAPTION:
    case GeogebraCommonKernelGeosGeoElement_TOOLTIP_NEXTCELL:
    tooltipMode_ = mode;
    break;
  }
}

- (void)setAlgebraVisibleWithBoolean:(jboolean)visible {
  algebraVisible_ = visible;
}

- (jboolean)isSetAlgebraVisible {
  return algebraVisible_;
}

- (jboolean)showInAlgebraView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)showInEuclidianView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isAlgebraViewEditable {
  return YES;
}

- (jboolean)isEuclidianShowable {
  return [self showInEuclidianView];
}

- (jboolean)isAlgebraShowable {
  return [self showInAlgebraView];
}

- (void)setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algorithm {
  GeogebraCommonKernelGeosGeoElement_set_algoParent_(self, algorithm);
}

- (GeogebraCommonKernelAlgosAlgoElement *)getParentAlgorithm {
  return GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self);
}

- (void)setDrawAlgorithmWithGeogebraCommonKernelAlgosDrawInformationAlgo:(id<GeogebraCommonKernelAlgosDrawInformationAlgo>)algorithm {
  if ([algorithm isKindOfClass:[GeogebraCommonKernelAlgosAlgoElement class]]) {
    GeogebraCommonKernelGeosGeoElement_set_algoDraw_(self, (GeogebraCommonKernelAlgosAlgoElement *) check_class_cast(algorithm, [GeogebraCommonKernelAlgosAlgoElement class]));
  }
}

- (GeogebraCommonKernelAlgosAlgoElement *)getDrawAlgorithm {
  if (algoDraw_ == nil) {
    return algoParent_;
  }
  return algoDraw_;
}

- (JavaUtilArrayList *)getAlgorithmList {
  return GeogebraCommonKernelGeosGeoElement_getAlgorithmList(self);
}

- (jboolean)isIndependent {
  return (algoParent_ == nil) && (GeogebraCommonKernelGeosGeoElement_getCorrespondingCasCell(self) == nil || ![((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(GeogebraCommonKernelGeosGeoElement_getCorrespondingCasCell(self))) hasVariablesOrCommands]);
}

- (jboolean)isChangeable {
  return !fixed_ && [self isIndependent];
}

- (jboolean)isPointOnPath {
  return NO;
}

- (jboolean)isRedefineable {
  return !fixed_ && [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) letRedefine] && !([GeogebraCommonKernelArithmeticTextValue_class_() isInstance:self] || [self isGeoImage]) && ([self isChangeable] || ![self isIndependent]);
}

- (jboolean)isMoveable {
  return [self isChangeable];
}

- (jboolean)isMoveableWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  return [((id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(view)) isMoveableWithGeogebraCommonKernelGeosGeoElement:self];
}

- (jboolean)hasMoveableInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  switch ([[self getGeoClassType] ordinal]) {
    case GeogebraCommonPluginGeoClass_CONIC:
    case GeogebraCommonPluginGeoClass_CONIC3D:
    if ([GeogebraCommonKernelAlgosAlgoCirclePointRadiusInterface_class_() isInstance:GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self)]) {
      return GeogebraCommonKernelGeosGeoElement_containsOnlyMoveableGeosWithJavaUtilArrayList_([self getFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view]);
    }
    case GeogebraCommonPluginGeoClass_CONICPART:
    case GeogebraCommonPluginGeoClass_IMAGE:
    case GeogebraCommonPluginGeoClass_LINE:
    case GeogebraCommonPluginGeoClass_LINE3D:
    case GeogebraCommonPluginGeoClass_RAY:
    case GeogebraCommonPluginGeoClass_RAY3D:
    case GeogebraCommonPluginGeoClass_SEGMENT:
    case GeogebraCommonPluginGeoClass_SEGMENT3D:
    case GeogebraCommonPluginGeoClass_TEXT:
    return GeogebraCommonKernelGeosGeoElement_hasOnlyFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self, view) && GeogebraCommonKernelGeosGeoElement_containsOnlyMoveableGeosWithJavaUtilArrayList_([self getFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view]);
    case GeogebraCommonPluginGeoClass_POLYGON:
    case GeogebraCommonPluginGeoClass_POLYGON3D:
    case GeogebraCommonPluginGeoClass_POLYLINE:
    case GeogebraCommonPluginGeoClass_POLYLINE3D:
    case GeogebraCommonPluginGeoClass_PENSTROKE:
    return GeogebraCommonKernelGeosGeoElement_containsOnlyMoveableGeosWithJavaUtilArrayList_([self getFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view]);
    case GeogebraCommonPluginGeoClass_VECTOR:
    case GeogebraCommonPluginGeoClass_VECTOR3D:
    if (GeogebraCommonKernelGeosGeoElement_hasOnlyFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self, view) && GeogebraCommonKernelGeosGeoElement_containsOnlyMoveableGeosWithJavaUtilArrayList_([self getFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view])) {
      JavaUtilArrayList *freeInputPoints = [self getFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view];
      if ([((JavaUtilArrayList *) nil_chk(freeInputPoints)) size] > 0) {
        id<GeogebraCommonKernelKernelNDGeoPointND> firstInputPoint = [freeInputPoints getWithInt:0];
        id<GeogebraCommonKernelKernelNDGeoPointND> startPoint = [((id<GeogebraCommonKernelLocateable>) check_protocol_cast(self, @protocol(GeogebraCommonKernelLocateable))) getStartPoint];
        return firstInputPoint == startPoint;
      }
    }
    break;
  }
  return NO;
}

- (JavaUtilArrayList *)getFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  if (algoParent_ == nil) {
    return nil;
  }
  return [((id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(view)) getFreeInputPointsWithGeogebraCommonKernelAlgosAlgoElement:algoParent_];
}

- (jboolean)hasOnlyFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  return GeogebraCommonKernelGeosGeoElement_hasOnlyFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self, view);
}

+ (jboolean)containsOnlyMoveableGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  return GeogebraCommonKernelGeosGeoElement_containsOnlyMoveableGeosWithJavaUtilArrayList_(geos);
}

- (jboolean)isTranslateable {
  return NO;
}

- (jboolean)isRotateMoveable {
  return [self isChangeable] && ([GeogebraCommonKernelGeosPointRotateable_class_() isInstance:self]);
}

- (jboolean)hasProperties {
  return GeogebraCommonKernelGeosGeoElement_isGeoElement(self);
}

- (void)setAnimationStepWithDouble:(jdouble)s {
  [self setAnimationStepWithGeogebraCommonKernelArithmeticNumberValue:[new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, s) autorelease]];
}

- (void)setAnimationStepWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)v {
  GeogebraCommonKernelGeosGeoElement_set_animationIncrement_(self, v);
}

- (jdouble)getAnimationStep {
  if (animationIncrement_ == nil) {
    GeogebraCommonKernelGeosGeoElement_setAndConsume_animationIncrement_(self, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, GeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_INCREMENT_()));
  }
  return [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(animationIncrement_)) getDouble];
}

- (GeogebraCommonKernelGeosGeoElement *)getAnimationStepObject {
  if (animationIncrement_ == nil) {
    return nil;
  }
  return [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(animationIncrement_)) toGeoElement];
}

- (GeogebraCommonKernelGeosGeoElement *)getAnimationSpeedObject {
  if (animationSpeedObj_ == nil) {
    return nil;
  }
  return [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(animationSpeedObj_)) toGeoElement];
}

- (jdouble)getAnimationSpeed {
  if (animationSpeedObj_ == nil) {
    GeogebraCommonKernelGeosGeoElement_initAnimationSpeedObject(self);
  }
  jdouble speed = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(animationSpeedObj_)) getDouble];
  if (JavaLangDouble_isNaNWithDouble_(speed)) {
    speed = 0;
  }
  else if (speed > GeogebraCommonKernelGeosGeoElement_MAX_ANIMATION_SPEED) {
    speed = GeogebraCommonKernelGeosGeoElement_MAX_ANIMATION_SPEED;
  }
  else if (speed < -GeogebraCommonKernelGeosGeoElement_MAX_ANIMATION_SPEED) {
    speed = -GeogebraCommonKernelGeosGeoElement_MAX_ANIMATION_SPEED;
  }
  return speed;
}

- (void)setAnimationSpeedObjectWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)speed {
  GeogebraCommonKernelGeosGeoElement_set_animationSpeedObj_(self, speed);
}

- (void)setAnimationSpeedWithDouble:(jdouble)speed {
  GeogebraCommonKernelGeosGeoElement_initAnimationSpeedObject(self);
  GeogebraCommonKernelGeosGeoElement *speedObj = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(animationSpeedObj_)) toGeoElement];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(speedObj)) isGeoNumeric] && [speedObj isIndependent]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(speedObj, [GeogebraCommonKernelGeosGeoNumeric class])) setValueWithDouble:speed];
  }
}

- (void)initAnimationSpeedObject {
  GeogebraCommonKernelGeosGeoElement_initAnimationSpeedObject(self);
}

- (jint)getAnimationType {
  return animationType_;
}

- (void)setAnimationTypeWithInt:(jint)type {
  switch (type) {
    case GeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING_ONCE:
    case GeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING:
    case GeogebraCommonKernelGeosGeoElement_ANIMATION_OSCILLATING:
    animationType_ = type;
    animationDirection_ = 1;
    break;
    case GeogebraCommonKernelGeosGeoElement_ANIMATION_DECREASING:
    animationType_ = type;
    animationDirection_ = -1;
    break;
  }
}

- (jint)getAnimationDirection {
  return animationDirection_;
}

- (void)changeAnimationDirection {
  animationDirection_ = -animationDirection_;
}

- (void)setAnimatingWithBoolean:(jboolean)flag {
  @synchronized(self) {
    jboolean oldValue = animating_;
    animating_ = (flag && [self isAnimatable]);
    if (oldValue != animating_) {
      GeogebraCommonKernelAnimationManager *am = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAnimatonManager];
      if (animating_) {
        [((GeogebraCommonKernelAnimationManager *) nil_chk(am)) addAnimatedGeoWithGeogebraCommonKernelGeosGeoElement:self];
      }
      else {
        [((GeogebraCommonKernelAnimationManager *) nil_chk(am)) removeAnimatedGeoWithGeogebraCommonKernelGeosGeoElement:self];
      }
    }
  }
}

- (jboolean)isAnimating {
  return GeogebraCommonKernelGeosGeoElement_isAnimating(self);
}

- (jboolean)isAnimatable {
  return NO;
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self getFormulaStringWithGeogebraCommonKernelStringTemplate:tpl withBoolean:!symbolic];
}

- (NSString *)toCasAssignmentWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (!labelSet_) {
    return nil;
  }
  NSString *retval = @"";
  @try {
    NSString *body = [self toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
    retval = JreStrcat("$$$", [self getAssignmentLHSWithGeogebraCommonKernelStringTemplate:tpl], @" := ", body);
  }
  @finally {
  }
  return retval;
}

- (NSString *)getAssignmentLHSWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self getLabelWithGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)getCASStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                     withBoolean:(jboolean)symbolic {
  return symbolic && ![self isIndependent] ? GeogebraCommonKernelGeosGeoElement_getCommandDescriptionWithGeogebraCommonKernelStringTemplate_(self, tpl) : [self toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (void)addCellRangeUser {
  ++cellRangeUsers_;
}

- (void)removeCellRangeUser {
  if (cellRangeUsers_ > 0) {
    --cellRangeUsers_;
  }
}

- (jboolean)isRenameable {
  return cellRangeUsers_ == 0;
}

- (jboolean)renameWithNSString:(NSString *)labelNew {
  NSString *newLabel = labelNew;
  if (![self isRenameable]) {
    return NO;
  }
  if (newLabel == nil) {
    return NO;
  }
  newLabel = [((NSString *) nil_chk(newLabel)) trim];
  if (((jint) [((NSString *) nil_chk(newLabel)) length]) == 0) {
    return NO;
  }
  NSString *labelOld = label_;
  if ([newLabel isEqual:labelOld]) {
    return NO;
  }
  else if ([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFreeLabelWithNSString:newLabel]) {
    [self setLabelWithNSString:newLabel];
    return YES;
  }
  else {
    IOSObjectArray *str = [IOSObjectArray arrayWithObjects:(id[]){ @"NameUsed", newLabel } count:2 type:NSString_class_()];
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSStringArray_([self getLoc], str) autorelease];
  }
}

- (jboolean)isLabelSet {
  return labelSet_;
}

- (void)setLabelWithNSString:(NSString *)labelNew {
  NSString *newLabel = labelNew;
  if ([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive]) {
    return;
  }
  if ((newLabel != nil) && ([newLabel indexOf:'$'] > -1)) {
    newLabel = [newLabel replaceAll:@"\\$" withReplacement:@""];
  }
  labelWanted_ = YES;
  if (!labelSet_) {
    if (GeogebraCommonKernelGeosGeoElement_isVisible(self)) {
      GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:newLabel];
      if (geo != nil) {
        GeogebraCommonKernelGeosGeoElement_doRenameLabelWithNSString_(geo, [self getFreeLabelWithNSString:newLabel]);
      }
      GeogebraCommonKernelGeosGeoElement_doSetLabelWithNSString_(self, [self getFreeLabelWithNSString:newLabel]);
    }
    else {
      GeogebraCommonKernelGeosGeoElement_set_label_(self, newLabel);
    }
  }
  else if ([self isRenameable]) {
    if ([cons_ isFreeLabelWithNSString:newLabel]) {
      GeogebraCommonKernelGeosGeoElement_doRenameLabelWithNSString_(self, newLabel);
    }
    else {
    }
  }
}

- (void)setLoadedLabelWithNSString:(NSString *)label {
  if (labelSet_) {
    GeogebraCommonKernelGeosGeoElement_doRenameLabelWithNSString_(self, label);
  }
  else {
    GeogebraCommonKernelGeosGeoElement_doSetLabelWithNSString_(self, [self getFreeLabelWithNSString:label]);
  }
}

- (jboolean)setCaptionWithNSString:(NSString *)caption1 {
  NSString *caption2 = caption1;
  if ((caption2 == nil) || [caption2 isEqual:label_]) {
    GeogebraCommonKernelGeosGeoElement_set_caption_(self, nil);
    return NO;
  }
  caption2 = [((NSString *) nil_chk(caption2)) trim];
  if (((jint) [((NSString *) nil_chk([((NSString *) nil_chk(caption2)) trim])) length]) == 0) {
    GeogebraCommonKernelGeosGeoElement_set_caption_(self, nil);
    return YES;
  }
  GeogebraCommonKernelGeosGeoElement_set_caption_(self, [caption2 trim]);
  return YES;
}

- (NSString *)getCaptionSimple {
  return caption_;
}

- (NSString *)getCaptionWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (caption_ == nil) {
    return [self getLabelWithGeogebraCommonKernelStringTemplate:tpl];
  }
  if ([((NSString *) nil_chk(caption_)) indexOf:'%'] < 0) {
    return caption_;
  }
  JavaLangStringBuilder *captionSB = [new_JavaLangStringBuilder_init() autorelease];
  for (jint i = 0; i < ((jint) [caption_ length]); i++) {
    jchar ch = [caption_ charAtWithInt:i];
    if ((ch == '%') && (i < (((jint) [caption_ length]) - 1))) {
      i++;
      ch = [caption_ charAtWithInt:i];
      {
        NSString *cText;
        switch (ch) {
          case 'c':
          cText = @"";
          if (label_ != nil) {
            GeogebraCommonAwtGPoint *p = GeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetIndicesWithNSString_(label_);
            if (((GeogebraCommonAwtGPoint *) nil_chk(p))->x_ > -1 && p->y_ > -1) {
              NSString *labelR1 = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(p->x_ + 1, p->y_);
              GeogebraCommonKernelGeosGeoElement *geoR1 = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:labelR1];
              if (geoR1 != nil) {
                cText = [geoR1 toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
              }
            }
          }
          [captionSB appendWithNSString:cText];
          break;
          case 'v':
          [captionSB appendWithNSString:[self toValueStringWithGeogebraCommonKernelStringTemplate:tpl]];
          break;
          case 'n':
          [captionSB appendWithNSString:[self getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
          break;
          case 'x':
          if ([self isGeoPoint]) {
            [captionSB appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(self, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) getInhomCoords])) getX] withGeogebraCommonKernelStringTemplate:tpl]];
          }
          else if ([self isGeoLine]) {
            [captionSB appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((GeogebraCommonKernelGeosGeoLine *) check_class_cast(self, [GeogebraCommonKernelGeosGeoLine class])) getX] withGeogebraCommonKernelStringTemplate:tpl]];
          }
          else {
            [captionSB appendWithNSString:@"%x"];
          }
          break;
          case 'y':
          if ([self isGeoPoint]) {
            [captionSB appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(self, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) getInhomCoords])) getY] withGeogebraCommonKernelStringTemplate:tpl]];
          }
          else if ([self isGeoLine]) {
            [captionSB appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((GeogebraCommonKernelGeosGeoLine *) check_class_cast(self, [GeogebraCommonKernelGeosGeoLine class])) getY] withGeogebraCommonKernelStringTemplate:tpl]];
          }
          else {
            [captionSB appendWithNSString:@"%y"];
          }
          break;
          case 'z':
          if ([self isGeoPoint]) {
            [captionSB appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(self, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) getInhomCoords])) getZ] withGeogebraCommonKernelStringTemplate:tpl]];
          }
          else if ([self isGeoLine]) {
            [captionSB appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((GeogebraCommonKernelGeosGeoLine *) check_class_cast(self, [GeogebraCommonKernelGeosGeoLine class])) getZ] withGeogebraCommonKernelStringTemplate:tpl]];
          }
          else {
            [captionSB appendWithNSString:@"%z"];
          }
          break;
          default:
          [captionSB appendWithChar:'%'];
          [captionSB appendWithChar:ch];
        }
      }
    }
    else {
      [captionSB appendWithChar:ch];
    }
  }
  if ([captionSB length] == 0) {
    return [self getLabelWithGeogebraCommonKernelStringTemplate:tpl];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) translationFixWithNSString:[captionSB description]];
}

- (NSString *)getRawCaption {
  if (caption_ == nil) {
    return @"";
  }
  return caption_;
}

- (NSString *)getCaptionDescriptionWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (caption_ == nil) {
    return @"";
  }
  return [self getCaptionWithGeogebraCommonKernelStringTemplate:tpl];
}

- (void)setLocalVariableLabelWithNSString:(NSString *)label {
  GeogebraCommonKernelGeosGeoElement_set_oldLabel_(self, self->label_);
  GeogebraCommonKernelGeosGeoElement_set_label_(self, label);
  localVarLabelSet_ = YES;
}

- (void)undoLocalVariableLabel {
  if (oldLabel_ != nil) {
    GeogebraCommonKernelGeosGeoElement_set_label_(self, oldLabel_);
    localVarLabelSet_ = NO;
  }
}

- (jboolean)isLocalVariable {
  return localVarLabelSet_;
}

- (void)doSetLabelWithNSString:(NSString *)newLabel {
  GeogebraCommonKernelGeosGeoElement_doSetLabelWithNSString_(self, newLabel);
}

- (void)updateSpreadsheetCoordinates {
  GeogebraCommonKernelGeosGeoElement_updateSpreadsheetCoordinates(self);
}

- (NSString *)getSpreadsheetLabelWithDollarsWithBoolean:(jboolean)col$
                                            withBoolean:(jboolean)row$ {
  NSString *colName = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnNameWithInt_(((GeogebraCommonAwtGPoint *) nil_chk(spreadsheetCoords_))->x_);
  NSString *rowName = JavaLangInteger_toStringWithInt_(spreadsheetCoords_->y_ + 1);
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(((jint) [((NSString *) nil_chk(label_)) length]) + 2) autorelease];
  if (col$) {
    [sb appendWithChar:'$'];
  }
  [sb appendWithNSString:colName];
  if (row$) {
    [sb appendWithChar:'$'];
  }
  [sb appendWithNSString:rowName];
  return [sb description];
}

+ (jint)compareLabelsWithNSString:(NSString *)label1
                     withNSString:(NSString *)label2 {
  return GeogebraCommonKernelGeosGeoElement_compareLabelsWithNSString_withNSString_(label1, label2);
}

- (void)doRenameLabelWithNSString:(NSString *)newLabel {
  GeogebraCommonKernelGeosGeoElement_doRenameLabelWithNSString_(self, newLabel);
}

- (NSString *)getOldLabel {
  return oldLabel_;
}

+ (void)setLabelsWithNSString:(NSString *)labelPrefix
withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)geos {
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSString_withGeogebraCommonKernelGeosGeoElementArray_(labelPrefix, geos);
}

+ (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels
withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)geos {
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(labels, geos);
}

+ (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels
withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)geos
                       withBoolean:(jboolean)indexedOnly {
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_withBoolean_(labels, geos, indexedOnly);
}

- (NSString *)getFreeLabelWithNSString:(NSString *)suggestedLabel {
  if (suggestedLabel != nil) {
    if ([@"x" isEqual:suggestedLabel] || [@"y" isEqual:suggestedLabel]) {
      return [self getDefaultLabelWithBoolean:NO];
    }
    if ([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFreeLabelWithNSString:suggestedLabel]) {
      return suggestedLabel;
    }
    else if (((jint) [suggestedLabel length]) > 0) {
      return [self getIndexLabelWithNSString:suggestedLabel];
    }
  }
  return [self getDefaultLabelWithBoolean:NO];
}

- (NSString *)getDefaultLabelWithBoolean:(jboolean)isInteger {
  return [self getDefaultLabelWithCharArray:nil withBoolean:isInteger];
}

- (NSString *)getDefaultLabel {
  return [self getDefaultLabelWithCharArray:nil withBoolean:NO];
}

- (NSString *)getDefaultLabelWithCharArray:(IOSCharArray *)chars2
                               withBoolean:(jboolean)isInteger {
  IOSCharArray *chars = chars2;
  if (chars == nil) {
    if ([self isGeoPoint] && !([self isKindOfClass:[GeogebraCommonKernelGeosGeoTurtle class]])) {
      if ([((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) isUsingLocalizedLabels]) {
        if ([((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) languageIsWithNSString:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Greek()))->locale_]) {
          chars = GeogebraCommonKernelGeosGeoElement_greekUpperCase_;
        }
        else if ([((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) languageIsWithNSString:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Arabic()))->locale_]) {
          chars = GeogebraCommonKernelGeosGeoElement_arabic_;
        }
        else if ([((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) languageIsWithNSString:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Yiddish()))->locale_]) {
          chars = GeogebraCommonKernelGeosGeoElement_yiddish_;
        }
        else {
          chars = GeogebraCommonKernelGeosGeoElement_pointLabels_;
        }
      }
      else {
        chars = GeogebraCommonKernelGeosGeoElement_pointLabels_;
      }
      id<GeogebraCommonKernelKernelNDGeoPointND> point = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(self, @protocol(GeogebraCommonKernelKernelNDGeoPointND));
      if ([point getMode] == GeogebraCommonKernelKernel_COORD_COMPLEX) {
        NSString *complexLabel = @"z_1";
        jint i = 1;
        while (![((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFreeLabelWithNSString:complexLabel]) {
          i++;
          if (i < 9) {
            complexLabel = JreStrcat("$I", @"z_", i);
          }
          else {
            complexLabel = JreStrcat("$IC", @"z_{", i, '}');
          }
        }
        return complexLabel;
      }
    }
    else if ([self isGeoFunction]) {
      chars = GeogebraCommonKernelGeosGeoElement_functionLabels_;
    }
    else if ([self isGeoLine]) {
      if ([self getMetasLength] == 1 && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelGeosFromMeta>) check_protocol_cast(self, @protocol(GeogebraCommonKernelGeosFromMeta))) getMetas]), 0))) isGeoPolygon]) {
        jint counter = 0;
        NSString *str;
        NSString *name = [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainLabelWithNSString:@"edge"];
        do {
          counter++;
          str = JreStrcat("$$", name, [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) internationalizeDigitsWithNSString:JreStrcat("I", counter) withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
        }
        while (![((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFreeLabelWithNSString:str]);
        return str;
      }
      chars = GeogebraCommonKernelGeosGeoElement_lineLabels_;
    }
    else if ([self isKindOfClass:[GeogebraCommonKernelGeosGeoPenStroke class]]) {
      return GeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"penStroke");
    }
    else if ([self isGeoPolyLine]) {
      chars = GeogebraCommonKernelGeosGeoElement_lineLabels_;
    }
    else if ([self isGeoConic]) {
      chars = GeogebraCommonKernelGeosGeoElement_conicLabels_;
    }
    else if ([self isGeoVector] || [self evaluatesTo3DVector]) {
      chars = GeogebraCommonKernelGeosGeoElement_vectorLabels_;
    }
    else if ([self isGeoAngle]) {
      chars = GeogebraCommonKernelGeosGeoElement_greekLowerCase_;
    }
    else if ([self isGeoText]) {
      return GeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"text");
    }
    else if ([self isGeoImage]) {
      return GeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"picture");
    }
    else if ([self isGeoLocus]) {
      if ([((id<GeogebraCommonKernelAlgosGetCommand>) nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getClassName])) isEqual:GeogebraCommonKernelCommandsCommandsEnum_get_SolveODE()] || [algoParent_ isKindOfClass:[GeogebraCommonKernelAlgosAlgoIntegralODE class]] || [((id<GeogebraCommonKernelAlgosGetCommand>) nil_chk([algoParent_ getClassName])) isEqual:GeogebraCommonKernelCommandsCommandsEnum_get_NSolveODE()]) {
        return GeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"numericalIntegral");
      }
      else if ([((id<GeogebraCommonKernelAlgosGetCommand>) nil_chk([algoParent_ getClassName])) isEqual:GeogebraCommonKernelCommandsCommandsEnum_get_SlopeField()]) {
        return GeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"slopefield");
      }
      else if ([GeogebraCommonKernelGraphAlgo_class_() isInstance:algoParent_]) {
        return GeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"graph");
      }
      return GeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"locus");
    }
    else if ([self isGeoTextField]) {
      return GeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"textfield");
    }
    else if ([self isGeoButton]) {
      return GeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"button");
    }
    else if ([self isGeoTurtle]) {
      return GeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, @"turtle");
    }
    else if ([self isGeoList]) {
      GeogebraCommonKernelGeosGeoList *list = (GeogebraCommonKernelGeosGeoList *) check_class_cast(self, [GeogebraCommonKernelGeosGeoList class]);
      return GeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, [list isMatrix] ? @"matrix" : @"list");
    }
    else if (isInteger && [self isGeoNumeric]) {
      chars = GeogebraCommonKernelGeosGeoElement_integerLabels_;
    }
    else {
      chars = GeogebraCommonKernelGeosGeoElement_lowerCaseLabels_;
    }
  }
  jint counter = 0, q, r;
  JavaLangStringBuilder *sbDefaultLabel = [new_JavaLangStringBuilder_init() autorelease];
  jboolean repeat = YES;
  while (repeat) {
    [sbDefaultLabel setLengthWithInt:0];
    q = counter / ((IOSCharArray *) nil_chk(chars))->size_;
    r = counter % chars->size_;
    jchar ch = IOSCharArray_Get(chars, r);
    [sbDefaultLabel appendWithChar:ch];
    if (ch == 0x0647) {
      [sbDefaultLabel appendWithChar:0x0640];
    }
    if (q > 0) {
      if (q < 10) {
        [sbDefaultLabel appendWithChar:'_'];
        [sbDefaultLabel appendWithInt:q];
      }
      else {
        [sbDefaultLabel appendWithNSString:@"_{"];
        [sbDefaultLabel appendWithInt:q];
        [sbDefaultLabel appendWithChar:'}'];
      }
    }
    counter++;
    repeat = ![((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFreeLabelWithNSString:[sbDefaultLabel description] withBoolean:YES withBoolean:YES];
  }
  return [sbDefaultLabel description];
}

- (NSString *)defaultNumberedLabelWithNSString:(NSString *)plainKey {
  return GeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(self, plainKey);
}

- (NSString *)getIndexLabelWithNSString:(NSString *)prefix {
  if (prefix == nil) {
    return JreStrcat("$$", [self getFreeLabelWithNSString:nil], @"_1");
  }
  return [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) getIndexLabelWithNSString:prefix];
}

- (jboolean)isGeoTextField {
  return NO;
}

- (void)setEmptySpreadsheetCellWithBoolean:(jboolean)isEmptySpreadsheetCell {
  self->isEmptySpreadsheetCell__ = isEmptySpreadsheetCell;
}

- (jboolean)isEmptySpreadsheetCell {
  return isEmptySpreadsheetCell__;
}

- (void)remove {
  if (algoParent_ != nil) {
    [algoParent_ removeWithGeogebraCommonKernelGeosGeoElement:self];
  }
  else {
    if (correspondingCasCell_ != nil) {
      [correspondingCasCell_ doRemove];
    }
    [self doRemove];
  }
}

- (void)doRemove {
  [self setAnimatingWithBoolean:NO];
  if ([self isIndependent]) {
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self];
  }
  GeogebraCommonKernelAlgosAlgoElement *algo = GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self);
  if (algo != nil) {
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) unregisterEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:algo];
  }
  if (condShowObject_ != nil) {
    [condShowObject_ unregisterConditionListenerWithGeogebraCommonKernelGeosGeoElement:self];
  }
  if (colFunction_ != nil) {
    [colFunction_ unregisterColorFunctionListenerWithGeogebraCommonKernelGeosGeoElement:self];
  }
  if (algorithmList_ != nil) {
    IOSObjectArray *algos = [algorithmList_ toArray];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(algos))->size_; i++) {
      algo = (GeogebraCommonKernelAlgosAlgoElement *) check_class_cast(IOSObjectArray_Get(algos, i), [GeogebraCommonKernelAlgosAlgoElement class]);
      [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) removeWithGeogebraCommonKernelGeosGeoElement:self];
    }
  }
  if ([self isLabelSet]) {
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeLabelWithGeogebraCommonKernelGeosGeoElement:self];
  }
  if (GeogebraCommonKernelGeosGeoElement_isSelected(self)) {
    [((GeogebraCommonMainSelectionManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getSelectionManager])) removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement:self withBoolean:NO withBoolean:![((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isRemovingGeoToReplaceIt]];
  }
  GeogebraCommonKernelGeosGeoElement_notifyRemove(self);
  labelSet_ = NO;
  labelWanted_ = NO;
  GeogebraCommonKernelGeosGeoElement_set_correspondingCasCell_(self, nil);
  if (latexCache_ != nil) {
    [latexCache_ remove];
  }
  if ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication] != nil && [((GeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) getActiveEuclidianView] != nil && [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) getActiveEuclidianView])) getEuclidianController] != nil) {
    [((GeogebraCommonEuclidianEuclidianController *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) getActiveEuclidianView])) getEuclidianController])) clearSelections];
  }
}

- (id<GeogebraCommonUtilLaTeXCache>)getLaTeXCache {
  if (latexCache_ == nil) {
    GeogebraCommonKernelGeosGeoElement_set_latexCache_(self, [((GeogebraCommonFactoriesLaTeXFactory *) nil_chk(GeogebraCommonFactoriesLaTeXFactory_get_prototype_())) newLaTeXCache]);
  }
  return latexCache_;
}

- (void)notifyAdd {
  GeogebraCommonKernelGeosGeoElement_notifyAdd(self);
}

- (void)notifyRemove {
  GeogebraCommonKernelGeosGeoElement_notifyRemove(self);
}

- (void)notifyUpdate {
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:self];
}

- (void)notifyUpdateAuxiliaryObject {
  GeogebraCommonKernelGeosGeoElement_notifyUpdateAuxiliaryObject(self);
}

- (void)addAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algorithm {
  if (!([((JavaUtilArrayList *) nil_chk(GeogebraCommonKernelGeosGeoElement_getAlgorithmList(self))) containsWithId:algorithm])) {
    [((JavaUtilArrayList *) nil_chk(algorithmList_)) addWithId:algorithm];
  }
  [self addToUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:algorithm];
}

- (void)addToAlgorithmListOnlyWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algorithm {
  if (![((JavaUtilArrayList *) nil_chk(GeogebraCommonKernelGeosGeoElement_getAlgorithmList(self))) containsWithId:algorithm]) {
    [((JavaUtilArrayList *) nil_chk(algorithmList_)) addWithId:algorithm];
  }
}

- (void)addToUpdateSetOnlyWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algorithm {
  [self addToUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:algorithm];
}

- (void)removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algorithm {
  if (algorithmList_ != nil) {
    [algorithmList_ removeWithId:algorithm];
    [self removeFromUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:algorithm];
  }
}

- (GeogebraCommonKernelAlgosAlgorithmSet *)getAlgoUpdateSet {
  if (algoUpdateSet_ == nil) {
    GeogebraCommonKernelGeosGeoElement_setAndConsume_algoUpdateSet_(self, new_GeogebraCommonKernelAlgosAlgorithmSet_init());
  }
  return algoUpdateSet_;
}

- (jboolean)addToUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algorithm {
  jboolean added = [((GeogebraCommonKernelAlgosAlgorithmSet *) nil_chk([self getAlgoUpdateSet])) addWithGeogebraCommonKernelAlgosAlgoElement:algorithm];
  if (added) {
    if (algoParent_ != nil) {
      IOSObjectArray *input = [algoParent_ getInputForUpdateSetPropagation];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input))->size_; i++) {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) addToUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:algorithm];
      }
    }
  }
  return added;
}

- (jboolean)removeFromUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algorithm {
  jboolean removed = (algoUpdateSet_ != nil) && [algoUpdateSet_ removeWithGeogebraCommonKernelAlgosAlgoElement:algorithm];
  if (removed) {
    if (algoParent_ != nil) {
      IOSObjectArray *input = [algoParent_ getInputForUpdateSetPropagation];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input))->size_; i++) {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) removeFromUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:algorithm];
      }
    }
  }
  return removed;
}

- (void)update {
  GeogebraCommonKernelGeosGeoElement_updateGeo(self);
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:self];
}

- (void)updateGeo {
  GeogebraCommonKernelGeosGeoElement_updateGeo(self);
}

- (void)algebraStringsNeedUpdate {
  GeogebraCommonKernelGeosGeoElement_algebraStringsNeedUpdate(self);
}

- (void)updateCascade {
  jlong l = JavaLangSystem_currentTimeMillis();
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyBatchUpdate];
  [self update];
  GeogebraCommonKernelGeosGeoElement_updateDependentObjects(self);
  GeogebraCommonUtilDebugGeoGebraProfiler_addUpdateCascadeWithLong_(JavaLangSystem_currentTimeMillis() - l);
  [kernel_ notifyEndBatchUpdate];
}

- (void)updateDependentObjects {
  GeogebraCommonKernelGeosGeoElement_updateDependentObjects(self);
}

- (void)updateAlgoUpdateSetWithWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)secondGeo {
  if (algoUpdateSet_ == nil) {
    if (((GeogebraCommonKernelGeosGeoElement *) nil_chk(secondGeo))->algoUpdateSet_ == nil) {
      return;
    }
    [((GeogebraCommonKernelAlgosAlgorithmSet *) nil_chk(secondGeo->algoUpdateSet_)) updateAll];
  }
  else {
    if (((GeogebraCommonKernelGeosGeoElement *) nil_chk(secondGeo))->algoUpdateSet_ == nil) {
      [algoUpdateSet_ updateAll];
    }
    else {
      JavaUtilTreeSet *tempAlgoSet = GeogebraCommonKernelGeosGeoElement_getTempSet();
      [((JavaUtilTreeSet *) nil_chk(tempAlgoSet)) clear];
      [algoUpdateSet_ addAllToCollectionWithJavaUtilCollection:tempAlgoSet];
      [secondGeo->algoUpdateSet_ addAllToCollectionWithJavaUtilCollection:tempAlgoSet];
      for (GeogebraCommonKernelAlgosAlgoElement * __strong algo in tempAlgoSet) {
        [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) update];
      }
    }
  }
}

- (jboolean)hasAlgoUpdateSet {
  return algoUpdateSet_ != nil;
}

+ (void)updateCascadeWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                       withJavaUtilTreeSet:(JavaUtilTreeSet *)tempSet1
                               withBoolean:(jboolean)updateCascadeAll {
  GeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(geos, tempSet1, updateCascadeAll);
}

+ (void)updateCascadeLocationWithJavaUtilArrayList:(JavaUtilArrayList *)geos
              withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelGeosGeoElement_updateCascadeLocationWithJavaUtilArrayList_withGeogebraCommonKernelConstruction_(geos, cons);
}

+ (void)updateCascadeUntilWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                            withJavaUtilTreeSet:(JavaUtilTreeSet *)tempSet2
       withGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)lastAlgo {
  GeogebraCommonKernelGeosGeoElement_updateCascadeUntilWithJavaUtilArrayList_withJavaUtilTreeSet_withGeogebraCommonKernelAlgosAlgoElement_(geos, tempSet2, lastAlgo);
}

- (void)updateRepaint {
  [self updateCascade];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)updateVisualStyle {
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateVisualStyleWithGeogebraCommonKernelGeosGeoElement:self];
}

- (void)updateVisualStyleRepaint {
  [self updateVisualStyle];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (NSString *)description {
  return [self toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
}

- (jboolean)isConstant {
  return NO;
}

- (jboolean)isLeaf {
  return YES;
}

- (jdouble)evaluateDouble {
  if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:self]) return [((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(self, @protocol(GeogebraCommonKernelArithmeticNumberValue))) getDouble];
  return JavaLangDouble_NaN;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)evaluateWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([self isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]]) {
    return [((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(self, [GeogebraCommonKernelGeosGeoCasCell class])) getOutputValidExpression];
  }
  return self;
}

- (JavaUtilHashSet *)getVariables {
  JavaUtilHashSet *ret = [new_JavaUtilHashSet_init() autorelease];
  [ret addWithId:self];
  return ret;
}

- (JavaUtilArrayList *)getRandomNumberPredecessorsWithoutLabels {
  if ([self isIndependent]) {
    return nil;
  }
  JavaUtilArrayList *randNumbers = nil;
  JavaUtilTreeSet *pred = [self getAllPredecessors];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(pred)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) {
      GeogebraCommonKernelGeosGeoNumeric *num = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class]);
      if ([num isRandomGeo] && ![num isLabelSet]) {
        if (randNumbers == nil) {
          randNumbers = [new_JavaUtilArrayList_init() autorelease];
        }
        [((JavaUtilArrayList *) nil_chk(randNumbers)) addWithId:num];
      }
    }
  }
  return randNumbers;
}

- (JavaUtilTreeSet *)getAllPredecessors {
  JavaUtilTreeSet *set = [new_JavaUtilTreeSet_init() autorelease];
  GeogebraCommonKernelGeosGeoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(self, set, NO);
  [set removeWithId:self];
  return set;
}

- (JavaUtilTreeSet *)getAllIndependentPredecessors {
  JavaUtilTreeSet *set = [new_JavaUtilTreeSet_init() autorelease];
  GeogebraCommonKernelGeosGeoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(self, set, YES);
  return set;
}

- (void)addPredecessorsToSetWithJavaUtilTreeSet:(JavaUtilTreeSet *)set
                                    withBoolean:(jboolean)onlyIndependent {
  GeogebraCommonKernelGeosGeoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(self, set, onlyIndependent);
}

- (JavaUtilTreeSet *)getAllRandomizablePredecessors {
  JavaUtilTreeSet *set = [new_JavaUtilTreeSet_init() autorelease];
  GeogebraCommonKernelGeosGeoElement_addRandomizablePredecessorsToSetWithJavaUtilTreeSet_(self, set);
  return set;
}

- (void)addRandomizablePredecessorsToSetWithJavaUtilTreeSet:(JavaUtilTreeSet *)set {
  GeogebraCommonKernelGeosGeoElement_addRandomizablePredecessorsToSetWithJavaUtilTreeSet_(self, set);
}

- (jboolean)isParentOfWithGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)geo {
  return GeogebraCommonKernelGeosGeoElement_isParentOfWithGeogebraCommonKernelKernelNDGeoElementND_(self, geo);
}

- (jboolean)hasChildren {
  return (algorithmList_ != nil) && ([algorithmList_ size] > 0);
}

- (jboolean)isChildOfWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonKernelGeosGeoElement_isChildOfWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (jboolean)isChildOrEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return (self == geo) || GeogebraCommonKernelGeosGeoElement_isChildOfWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (JavaUtilTreeSet *)getAllChildren {
  return GeogebraCommonKernelGeosGeoElement_getAllChildren(self);
}

- (IOSObjectArray *)getGeoElements {
  return [IOSObjectArray arrayWithObjects:(id[]){ self } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

- (jboolean)isAlgoElement {
  return NO;
}

- (jboolean)isGeoElement {
  return GeogebraCommonKernelGeosGeoElement_isGeoElement(self);
}

- (jint)getConstructionIndex {
  if (algoParent_ == nil) {
    return [super getConstructionIndex];
  }
  return [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getConstructionIndex];
}

- (jint)getMinConstructionIndex {
  if (algoParent_ == nil) {
    return 0;
  }
  return [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getMinConstructionIndex];
}

- (jint)getMaxConstructionIndex {
  if (algoParent_ == nil) {
    jint min = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) steps];
    jint size = algorithmList_ == nil ? 0 : [algorithmList_ size];
    for (jint i = 0; i < size; ++i) {
      jint index = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(([((JavaUtilArrayList *) nil_chk(algorithmList_)) getWithInt:i]))) getConstructionIndex];
      if (index < min) {
        min = index;
      }
    }
    return min - 1;
  }
  return [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getMaxConstructionIndex];
}

- (NSString *)getDefinitionDescriptionWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (algoParent_ == nil) {
    return @"";
  }
  return [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)getDefinitionDescriptionHTMLWithBoolean:(jboolean)addHTMLtag {
  if (algoParent_ == nil) {
    return @"";
  }
  return GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_([((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) translationFixWithNSString:[((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]], addHTMLtag);
}

- (NSString *)getCommandDescriptionWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelGeosGeoElement_getCommandDescriptionWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)getCommandDescriptionHTMLWithBoolean:(jboolean)addHTMLtag {
  if (algoParent_ == nil) {
    return @"";
  }
  return GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getCommandDescriptionWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], addHTMLtag);
}

- (jint)getRelatedModeID {
  if (algoParent_ == nil) {
    return -1;
  }
  return [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) getRelatedModeID];
}

+ (void)convertIndicesToHTMLWithNSString:(NSString *)text
  withGeogebraCommonUtilIndexHTMLBuilder:(GeogebraCommonUtilIndexHTMLBuilder *)builder {
  GeogebraCommonKernelGeosGeoElement_convertIndicesToHTMLWithNSString_withGeogebraCommonUtilIndexHTMLBuilder_(text, builder);
}

- (void)addLabelTextOrHTMLWithNSString:(NSString *)desc
withGeogebraCommonUtilIndexHTMLBuilder:(GeogebraCommonUtilIndexHTMLBuilder *)builder {
  NSString *ret;
  jboolean includesEqual = [((NSString *) nil_chk(desc)) indexOf:'='] >= 0;
  if (includesEqual && [desc hasPrefix:JreStrcat("$C", label_, '(')]) {
    ret = desc;
  }
  else {
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
    [sb appendWithNSString:label_];
    if (includesEqual) {
      [sb appendWithNSString:@": "];
    }
    else {
      [sb appendWithNSString:@" = "];
    }
    [sb appendWithNSString:desc];
    ret = [sb description];
  }
  GeogebraCommonKernelGeosGeoElement_convertIndicesToHTMLWithNSString_withGeogebraCommonUtilIndexHTMLBuilder_([((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) translationFixWithNSString:ret], builder);
}

- (NSString *)getCaptionDescriptionHTMLWithBoolean:(jboolean)addHTMLtag
            withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_([self getCaptionDescriptionWithGeogebraCommonKernelStringTemplate:tpl], addHTMLtag);
}

- (NSString *)getXMLtypeString {
  return GeogebraCommonKernelGeosGeoElement_getXMLtypeString(self);
}

- (NSString *)getTypeString {
  return ((GeogebraCommonPluginGeoClassEnum *) nil_chk([self getGeoClassType]))->name_GeoClass_;
}

- (NSString *)getTypeStringForAlgebraView {
  return [self getTypeString];
}

- (NSString *)translatedTypeString {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:[self getTypeString]];
}

- (NSString *)translatedTypeStringForAlgebraView {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:[self getTypeStringForAlgebraView]];
}

- (NSString *)getLongDescription {
  if (algoParent_ == nil) {
    return [self getNameDescription];
  }
  JavaLangStringBuilder *sbLongDesc = [new_JavaLangStringBuilder_init() autorelease];
  [sbLongDesc appendWithNSString:[self getNameDescription]];
  [sbLongDesc appendWithNSString:@": "];
  [sbLongDesc appendWithNSString:[((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  return [sbLongDesc description];
}

- (NSString *)getLongDescriptionHTMLWithBoolean:(jboolean)colored
                                    withBoolean:(jboolean)addHTMLtag {
  return GeogebraCommonKernelGeosGeoElement_getLongDescriptionHTMLWithBoolean_withBoolean_(self, colored, addHTMLtag);
}

- (NSString *)getColoredLabel {
  NSString *formatedLabel = [self getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  GeogebraCommonAwtGColor *colorAdapter = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:[((GeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getRed] withInt:[((GeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getGreen] withInt:[((GeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getBlue]];
  [sb appendWithNSString:@"<b><font color=\"#"];
  [sb appendWithNSString:GeogebraCommonUtilStringUtil_toHexStringWithGeogebraCommonAwtGColor_(colorAdapter)];
  [sb appendWithNSString:@"\">"];
  [sb appendWithNSString:GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(formatedLabel, NO)];
  [sb appendWithNSString:@"</font></b>"];
  return [sb description];
}

+ (NSString *)getToolTipDescriptionHTMLWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                                 withBoolean:(jboolean)colored
                                                 withBoolean:(jboolean)addHTMLtag
                                                 withBoolean:(jboolean)alwaysOn {
  return GeogebraCommonKernelGeosGeoElement_getToolTipDescriptionHTMLWithJavaUtilArrayList_withBoolean_withBoolean_withBoolean_(geos, colored, addHTMLtag, alwaysOn);
}

- (NSString *)getLabelDescription {
  switch (labelMode_) {
    case GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE:
    return GeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionDefault(self);
    case GeogebraCommonKernelGeosGeoElement_LABEL_VALUE:
    return GeogebraCommonKernelGeosGeoElement_toDefinedValueStringWithGeogebraCommonKernelStringTemplate_(self, GeogebraCommonKernelStringTemplate_get_defaultTemplate_());
    case GeogebraCommonKernelGeosGeoElement_LABEL_CAPTION:
    return [self getCaptionWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    default:
    return [self getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  }
}

- (NSString *)toDefinedValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelGeosGeoElement_toDefinedValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)getAlgebraDescriptionTextOrHTMLDefaultWithGeogebraCommonUtilIndexHTMLBuilder:(GeogebraCommonUtilIndexHTMLBuilder *)builder {
  if (strAlgebraDescTextOrHTMLneedsUpdate_) {
    NSString *algDesc = GeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionDefault(self);
    if (GeogebraCommonKernelGeosGeoElement_hasIndexLabel(self)) {
      GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withGeogebraCommonUtilIndexHTMLBuilder_(algDesc, builder);
      GeogebraCommonKernelGeosGeoElement_set_strAlgebraDescTextOrHTML_(self, [((GeogebraCommonUtilIndexHTMLBuilder *) nil_chk(builder)) description]);
    }
    else {
      [((GeogebraCommonUtilIndexHTMLBuilder *) nil_chk(builder)) clear];
      [builder appendWithNSString:algDesc];
      GeogebraCommonKernelGeosGeoElement_set_strAlgebraDescTextOrHTML_(self, algDesc);
    }
    strAlgebraDescTextOrHTMLneedsUpdate_ = NO;
  }
  else {
    if (![((GeogebraCommonUtilIndexHTMLBuilder *) nil_chk(builder)) canAppendRawHtml]) {
      GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withGeogebraCommonUtilIndexHTMLBuilder_(strAlgebraDescription_, builder);
    }
    else {
      [builder clear];
      [builder appendWithNSString:strAlgebraDescTextOrHTML_];
    }
  }
  return strAlgebraDescTextOrHTML_;
}

- (NSString *)getAlgebraDescriptionHTMLDefault {
  if (strAlgebraDescriptionHTMLneedsUpdate_) {
    if ([self isGeoText]) {
      GeogebraCommonKernelGeosGeoElement_set_strAlgebraDescriptionHTML_(self, GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_([self toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], NO));
    }
    else {
      GeogebraCommonKernelGeosGeoElement_set_strAlgebraDescriptionHTML_(self, GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(GeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionDefault(self), NO));
    }
    strAlgebraDescriptionHTMLneedsUpdate_ = NO;
  }
  return strAlgebraDescriptionHTML_;
}

- (NSString *)getLabelTextOrHTML {
  return GeogebraCommonKernelGeosGeoElement_getLabelTextOrHTMLWithBoolean_(self, YES);
}

- (NSString *)getLabelTextOrHTMLWithBoolean:(jboolean)addHTMLTag {
  return GeogebraCommonKernelGeosGeoElement_getLabelTextOrHTMLWithBoolean_(self, addHTMLTag);
}

- (NSString *)getAlgebraDescriptionWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)getAlgebraDescriptionDefault {
  return GeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionDefault(self);
}

- (NSString *)getAlgebraDescriptionRegrOutWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (strAlgebraDescriptionNeedsUpdate_) {
    if ([self isDefined]) {
      GeogebraCommonKernelGeosGeoElement_set_strAlgebraDescription_(self, [self toStringMinimalWithGeogebraCommonKernelStringTemplate:tpl]);
    }
    else {
      JavaLangStringBuilder *sbAlgebraDesc = [new_JavaLangStringBuilder_init() autorelease];
      [sbAlgebraDesc appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"]];
      GeogebraCommonKernelGeosGeoElement_set_strAlgebraDescription_(self, [sbAlgebraDesc description]);
    }
    strAlgebraDescriptionNeedsUpdate_ = NO;
  }
  else {
    GeogebraCommonKernelGeosGeoElement_set_strAlgebraDescription_(self, [self toStringMinimalWithGeogebraCommonKernelStringTemplate:tpl]);
  }
  return strAlgebraDescription_;
}

- (NSString *)toStringMinimalWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)getLaTeXdescription {
  if (strLaTeXneedsUpdate_) {
    if ([self isDefined] && ![self isInfinite]) {
      GeogebraCommonKernelGeosGeoElement_set_strLaTeX_(self, [self toLaTeXStringWithBoolean:NO withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_latexTemplate_()]);
    }
    else {
      GeogebraCommonKernelGeosGeoElement_set_strLaTeX_(self, JreStrcat("$$$", @" \\text{", [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"], @"} "));
    }
  }
  return strLaTeX_;
}

- (NSString *)getLaTeXAlgebraDescriptionWithBoolean:(jboolean)substituteNumbers
             withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelGeosGeoElement_getLaTeXAlgebraDescriptionWithGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonKernelStringTemplate_(self, self, substituteNumbers, tpl);
}

- (NSString *)getLaTeXAlgebraDescriptionWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                   withBoolean:(jboolean)substituteNumbers
                                        withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelGeosGeoElement_getLaTeXAlgebraDescriptionWithGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonKernelStringTemplate_(self, geo, substituteNumbers, tpl);
}

+ (NSString *)indicesToHTMLWithNSString:(NSString *)str
                            withBoolean:(jboolean)addHTMLtag {
  return GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(str, addHTMLtag);
}

+ (void)indicesToHTMLWithNSString:(NSString *)str
withGeogebraCommonUtilIndexHTMLBuilder:(GeogebraCommonUtilIndexHTMLBuilder *)sbIndicesToHTML {
  GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withGeogebraCommonUtilIndexHTMLBuilder_(str, sbIndicesToHTML);
}

- (NSString *)getNameDescription {
  JavaLangStringBuilder *sbNameDescription = [new_JavaLangStringBuilder_init() autorelease];
  NSString *label1 = [self getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  NSString *typeString = [self translatedTypeString];
  if ([((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) isReverseNameDescriptionLanguage]) {
    [sbNameDescription appendWithNSString:label1];
    [sbNameDescription appendWithChar:' '];
    [sbNameDescription appendWithNSString:[((NSString *) nil_chk(typeString)) lowercaseString]];
  }
  else {
    [sbNameDescription appendWithNSString:typeString];
    [sbNameDescription appendWithChar:' '];
    [sbNameDescription appendWithNSString:label1];
  }
  return [sbNameDescription description];
}

- (NSString *)getNameDescriptionTextOrHTML {
  if (GeogebraCommonKernelGeosGeoElement_hasIndexLabel(self)) {
    return [self getNameDescriptionHTMLWithBoolean:NO withBoolean:YES];
  }
  return [self getNameDescription];
}

- (jboolean)hasIndexLabel {
  return GeogebraCommonKernelGeosGeoElement_hasIndexLabel(self);
}

- (NSString *)getNameDescriptionHTMLWithBoolean:(jboolean)colored
                                    withBoolean:(jboolean)addHTMLtag {
  JavaLangStringBuilder *sbNameDescriptionHTML = [new_JavaLangStringBuilder_init() autorelease];
  if (addHTMLtag) {
    [sbNameDescriptionHTML appendWithNSString:@"<html>"];
  }
  NSString *label1 = [self getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  NSString *typeString = [self translatedTypeString];
  jboolean reverseOrder = [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) isReverseNameDescriptionLanguage];
  if (!reverseOrder && ![self isAxis]) {
    [sbNameDescriptionHTML appendWithNSString:typeString];
    [sbNameDescriptionHTML appendWithChar:' '];
  }
  if (colored) {
    GeogebraCommonAwtGColor *colorAdapter = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:[((GeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getRed] withInt:[((GeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getGreen] withInt:[((GeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getBlue]];
    [sbNameDescriptionHTML appendWithNSString:@" <b><font color=\"#"];
    [sbNameDescriptionHTML appendWithNSString:GeogebraCommonUtilStringUtil_toHexStringWithGeogebraCommonAwtGColor_(colorAdapter)];
    [sbNameDescriptionHTML appendWithNSString:@"\">"];
  }
  [sbNameDescriptionHTML appendWithNSString:GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(label1, NO)];
  if (colored) {
    [sbNameDescriptionHTML appendWithNSString:@"</font></b>"];
  }
  if (reverseOrder && ![self isAxis]) {
    [sbNameDescriptionHTML appendWithChar:' '];
    [sbNameDescriptionHTML appendWithNSString:[((NSString *) nil_chk(typeString)) lowercaseString]];
  }
  if (addHTMLtag) {
    [sbNameDescriptionHTML appendWithNSString:@"</html>"];
  }
  return [sbNameDescriptionHTML description];
}

- (jboolean)isAxis {
  return NO;
}

- (NSString *)getXML {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [self getXMLWithBoolean:NO withJavaLangStringBuilder:sb];
  return [sb description];
}

- (void)getXMLWithBoolean:(jboolean)getListenersToo
withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [self getElementOpenTagXMLWithJavaLangStringBuilder:sb];
  [self getXMLtagsWithJavaLangStringBuilder:sb];
  GeogebraCommonKernelGeosGeoElement_getCaptionXMLWithJavaLangStringBuilder_(self, sb);
  GeogebraCommonKernelGeosGeoElement_getExtraTagsXMLWithJavaLangStringBuilder_(self, sb);
  if (getListenersToo) [self getListenerTagsXMLWithJavaLangStringBuilder:sb];
  [self getElementCloseTagXMLWithJavaLangStringBuilder:sb];
}

- (void)getListenerTagsXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonPluginScriptManager *scriptManager = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getScriptManager];
  GeogebraCommonKernelGeosGeoElement_getListenerTagXMLWithJavaLangStringBuilder_withJavaUtilHashMap_withNSString_(self, sb, [((GeogebraCommonPluginScriptManager *) nil_chk(scriptManager)) getUpdateListenerMap], @"objectUpdate");
  GeogebraCommonKernelGeosGeoElement_getListenerTagXMLWithJavaLangStringBuilder_withJavaUtilHashMap_withNSString_(self, sb, [scriptManager getUpdateListenerMap], @"objectClick");
}

- (void)getListenerTagXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                               withJavaUtilHashMap:(JavaUtilHashMap *)map
                                      withNSString:(NSString *)type {
  GeogebraCommonKernelGeosGeoElement_getListenerTagXMLWithJavaLangStringBuilder_withJavaUtilHashMap_withNSString_(self, sb, map, type);
}

- (void)getElementOpenTagXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  NSString *type = GeogebraCommonKernelGeosGeoElement_getXMLtypeString(self);
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<element"];
  [sb appendWithNSString:@" type=\""];
  [sb appendWithNSString:type];
  [sb appendWithNSString:@"\" label=\""];
  GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, label_);
  if (defaultGeoType_ >= 0) {
    [sb appendWithNSString:@"\" default=\""];
    [sb appendWithInt:defaultGeoType_];
  }
  [sb appendWithNSString:@"\">\n"];
}

- (void)getElementCloseTagXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"</element>\n"];
}

- (void)getScriptTagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (scripts_ == nil) {
    return;
  }
  GeogebraCommonPluginScriptScript *clickScript = IOSObjectArray_Get(nil_chk(scripts_), [((GeogebraCommonPluginEventTypeEnum *) nil_chk(GeogebraCommonPluginEventTypeEnum_get_CLICK())) ordinal]);
  GeogebraCommonPluginScriptScript *updateScript = IOSObjectArray_Get(scripts_, [((GeogebraCommonPluginEventTypeEnum *) nil_chk(GeogebraCommonPluginEventTypeEnum_get_UPDATE())) ordinal]);
  if (clickScript != nil) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<"];
    [sb appendWithId:[clickScript getXMLName]];
    [sb appendWithNSString:@" val=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [clickScript getInternalText]);
    [sb appendWithNSString:@"\"/>\n"];
  }
  if (updateScript != nil) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<"];
    [sb appendWithId:[updateScript getXMLName]];
    [sb appendWithNSString:@" onUpdate=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [updateScript getInternalText]);
    [sb appendWithNSString:@"\"/>\n"];
  }
}

- (void)getCaptionXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelGeosGeoElement_getCaptionXMLWithJavaLangStringBuilder_(self, sb);
}

- (void)getAuxiliaryXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelGeosGeoElement_getAuxiliaryXMLWithJavaLangStringBuilder_(self, sb);
}

- (void)getXMLvisualTagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [self getXMLvisualTagsWithJavaLangStringBuilder:sb withBoolean:YES];
}

- (void)getXMLvisualTagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                      withBoolean:(jboolean)withLabelOffset {
  jboolean isDrawable = [self isDrawable];
  if (isDrawable) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<show"];
    [sb appendWithNSString:@" object=\""];
    [sb appendWithBoolean:euclidianVisible_];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@" label=\""];
    [sb appendWithBoolean:labelVisible_];
    [sb appendWithNSString:@"\""];
    jint EVs = 0;
    if (![self isVisibleInViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN]) {
      EVs += 1;
    }
    if ([self isVisibleInViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2]) {
      EVs += 2;
    }
    if ([self hasDrawable3D]) {
      switch ([visibleInView3D_ ordinal]) {
        case GeogebraCommonKernelGeosGeoElement_VisibleInView3D_TRUE:
        EVs += 4;
        break;
        case GeogebraCommonKernelGeosGeoElement_VisibleInView3D_FALSE:
        EVs += 8;
        break;
      }
    }
    if (EVs != 0) {
      [sb appendWithNSString:@" ev=\""];
      [sb appendWithInt:EVs];
      [sb appendWithNSString:@"\""];
    }
    [sb appendWithNSString:@"/>\n"];
  }
  if ([self getShowTrimmedIntersectionLines]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<showTrimmed val=\"true\"/>\n"];
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:GeogebraCommonKernelGeosGeoElement_getShowObjectConditionXML(self)];
  {
    [self appendObjectColorXMLWithJavaLangStringBuilder:sb];
  }
  if (bgColor_ != nil) {
    [sb appendWithNSString:@"\t<bgColor"];
    [sb appendWithNSString:@" r=\""];
    [sb appendWithInt:[bgColor_ getRed]];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@" g=\""];
    [sb appendWithInt:[bgColor_ getGreen]];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@" b=\""];
    [sb appendWithInt:[bgColor_ getBlue]];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@" alpha=\""];
    [sb appendWithInt:[bgColor_ getAlpha]];
    [sb appendWithNSString:@"\"/>\n"];
  }
  if (isDrawable) {
    [sb appendWithNSString:@"\t<layer "];
    [sb appendWithNSString:JreStrcat("$IC", @"val=\"", layer_, '"')];
    [sb appendWithNSString:@"/>\n"];
  }
  if (withLabelOffset && ((labelOffsetX_ != 0) || (labelOffsetY_ != 0))) {
    [sb appendWithNSString:@"\t<labelOffset"];
    [sb appendWithNSString:@" x=\""];
    [sb appendWithInt:labelOffsetX_];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@" y=\""];
    [sb appendWithInt:labelOffsetY_];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@"/>\n"];
  }
  if ([self isDrawable]) {
    [sb appendWithNSString:@"\t<labelMode"];
    [sb appendWithNSString:@" val=\""];
    [sb appendWithInt:labelMode_];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@"/>\n"];
    if (tooltipMode_ != GeogebraCommonKernelGeosGeoElement_TOOLTIP_ALGEBRAVIEW_SHOWING) {
      [sb appendWithNSString:@"\t<tooltipMode"];
      [sb appendWithNSString:@" val=\""];
      [sb appendWithInt:tooltipMode_];
      [sb appendWithNSString:@"\""];
      [sb appendWithNSString:@"/>\n"];
    }
  }
  if ([self isTraceable]) {
    id<GeogebraCommonKernelGeosTraceable> t = (id<GeogebraCommonKernelGeosTraceable>) check_protocol_cast(self, @protocol(GeogebraCommonKernelGeosTraceable));
    if ([t getTrace]) {
      [sb appendWithNSString:@"\t<trace val=\"true\"/>\n"];
    }
  }
  if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isUsingFullGui] && [self isSpreadsheetTraceable] && [self getSpreadsheetTrace]) {
    [sb appendWithNSString:[((GeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) getTraceXMLWithGeogebraCommonKernelGeosGeoElement:self]];
  }
  if (decorationType_ != GeogebraCommonKernelGeosGeoElement_DECORATION_NONE) {
    [sb appendWithNSString:@"\t<decoration"];
    [sb appendWithNSString:@" type=\""];
    [sb appendWithInt:decorationType_];
    [sb appendWithNSString:@"\"/>\n"];
  }
}

- (void)appendObjectColorXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<objColor"];
  [sb appendWithNSString:@" r=\""];
  [sb appendWithInt:[((GeogebraCommonAwtGColor *) nil_chk(objColor_)) getRed]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" g=\""];
  [sb appendWithInt:[objColor_ getGreen]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" b=\""];
  [sb appendWithInt:[objColor_ getBlue]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" alpha=\""];
  [sb appendWithFloat:[self getAlphaValue]];
  [sb appendWithNSString:@"\""];
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_xmlTemplate_();
  if ((colFunction_ != nil) && [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getSaveScriptsToXML]) {
    [sb appendWithNSString:@" dynamicr=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([colFunction_ getWithInt:0])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]);
    [sb appendWithChar:'"'];
    [sb appendWithNSString:@" dynamicg=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([colFunction_ getWithInt:1])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]);
    [sb appendWithChar:'"'];
    [sb appendWithNSString:@" dynamicb=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([colFunction_ getWithInt:2])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]);
    [sb appendWithChar:'"'];
    if ([colFunction_ size] == 4) {
      [sb appendWithNSString:@" dynamica=\""];
      GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([colFunction_ getWithInt:3])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]);
      [sb appendWithChar:'"'];
    }
    [sb appendWithNSString:@" colorSpace=\""];
    [sb appendWithInt:colorSpace_];
    [sb appendWithChar:'"'];
  }
  if ([self isHatchingEnabled]) {
    [sb appendWithNSString:@" fillType=\""];
    [sb appendWithInt:[((GeogebraCommonKernelGeosGeoElement_FillTypeEnum *) nil_chk(fillType_)) ordinal]];
    [sb appendWithNSString:@"\" hatchAngle=\""];
    [sb appendWithInt:hatchingAngle_];
    [sb appendWithNSString:@"\" hatchDistance=\""];
    [sb appendWithInt:hatchingDistance_];
    [sb appendWithNSString:@"\""];
  }
  else if (fillType_ == GeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_IMAGE()) {
    [sb appendWithNSString:@" image=\""];
    [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk(graphicsadapter_)) getImageFileName]];
    [sb appendWithChar:'"'];
  }
  if (fillType_ == GeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_SYMBOLS()) {
    [sb appendWithNSString:@" fillSymbol=\""];
    [sb appendWithNSString:fillSymbol_];
    [sb appendWithChar:'"'];
  }
  if (inverseFill_) {
    [sb appendWithNSString:@" inverseFill=\"true\""];
  }
  [sb appendWithNSString:@"/>\n"];
}

- (void)getXMLanimationTagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_xmlTemplate_();
  if ([self isChangeable]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<animation"];
    NSString *animStep = animationIncrement_ == nil ? @"1" : [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getAnimationStepObject])) getLabelWithGeogebraCommonKernelStringTemplate:tpl];
    [sb appendWithNSString:@" step=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, animStep);
    [sb appendWithNSString:@"\""];
    NSString *animSpeed = animationSpeedObj_ == nil ? @"1" : [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getAnimationSpeedObject])) getLabelWithGeogebraCommonKernelStringTemplate:tpl];
    [sb appendWithNSString:@" speed=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, animSpeed);
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:JreStrcat("$IC", @" type=\"", animationType_, '"')];
    [sb appendWithNSString:@" playing=\""];
    [sb appendWithNSString:(GeogebraCommonKernelGeosGeoElement_isAnimating(self) ? @"true" : @"false")];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@"/>\n"];
  }
}

- (void)getXMLfixedTagWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (fixed_ && [self isFixable]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<fixed val=\""];
    [sb appendWithBoolean:fixed_];
    [sb appendWithNSString:@"\"/>\n"];
  }
  if (!selectionAllowed_) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<selectionAllowed val=\""];
    [sb appendWithBoolean:selectionAllowed_];
    [sb appendWithNSString:@"\"/>\n"];
  }
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [self getXMLvisualTagsWithJavaLangStringBuilder:sb];
  [self getXMLanimationTagsWithJavaLangStringBuilder:sb];
  [self getXMLfixedTagWithJavaLangStringBuilder:sb];
  GeogebraCommonKernelGeosGeoElement_getAuxiliaryXMLWithJavaLangStringBuilder_(self, sb);
  [self getBreakpointXMLWithJavaLangStringBuilder:sb];
  if ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getSaveScriptsToXML]) {
    [self getScriptTagsWithJavaLangStringBuilder:sb];
  }
}

- (void)getExtraTagsXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelGeosGeoElement_getExtraTagsXMLWithJavaLangStringBuilder_(self, sb);
}

- (void)getXMLtagsMinimalWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
            withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[self toValueStringMinimalWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (NSString *)toValueStringMinimalWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)regrFormatWithDouble:(jdouble)number {
  if (JavaLangMath_absWithDouble_(number) < 0.000001) {
    JavaLangDouble *numberD = [new_JavaLangDouble_initWithDouble_(number) autorelease];
    return [numberD description];
  }
  id<GeogebraCommonUtilNumberFormatAdapter> df = [((GeogebraCommonFactoriesFormatFactory *) nil_chk(GeogebraCommonFactoriesFormatFactory_get_prototype_())) getNumberFormatWithNSString:@"#.######" withInt:6];
  return [((id<GeogebraCommonUtilNumberFormatAdapter>) nil_chk(df)) formatWithDouble:number];
}

- (void)getLineStyleXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if ([self isGeoPoint]) {
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<lineStyle"];
  [sb appendWithNSString:@" thickness=\""];
  [sb appendWithInt:lineThickness_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" type=\""];
  [sb appendWithInt:lineType_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" typeHidden=\""];
  [sb appendWithInt:lineTypeHidden_];
  [sb appendWithNSString:@"\""];
  if ([self hasLineOpacity] && [self getLineOpacity] < 255) {
    [sb appendWithNSString:@" opacity=\""];
    [sb appendWithInt:lineOpacity_];
    [sb appendWithNSString:@"\""];
  }
  [sb appendWithNSString:@"/>\n"];
}

- (void)getBreakpointXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (isConsProtBreakpoint_) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<breakpoint val=\""];
    [sb appendWithBoolean:isConsProtBreakpoint_];
    [sb appendWithNSString:@"\"/>\n"];
  }
}

- (NSString *)getShowObjectConditionXML {
  return GeogebraCommonKernelGeosGeoElement_getShowObjectConditionXML(self);
}

- (jint)getLineThickness {
  return lineThickness_;
}

- (jint)getMinimumLineThickness {
  return 1;
}

- (jint)getLineType {
  return lineType_;
}

- (jint)getLineTypeHidden {
  return lineTypeHidden_;
}

- (void)setLineThicknessWithInt:(jint)th {
  lineThickness_ = JavaLangMath_maxWithInt_withInt_(0, th);
}

- (void)setLineThicknessOrVisibilityWithInt:(jint)th {
  if ([self isRegion]) {
    [self setLineThicknessWithInt:th];
  }
  else {
    if (th > 0) {
      [self setEuclidianVisibleIfNoConditionToShowObjectWithBoolean:YES];
      [self setLineThicknessWithInt:th];
    }
    else {
      [self setEuclidianVisibleIfNoConditionToShowObjectWithBoolean:NO];
    }
  }
}

- (void)setLineTypeWithInt:(jint)i {
  lineType_ = i;
}

- (void)setLineTypeHiddenWithInt:(jint)i {
  lineTypeHidden_ = i;
}

- (void)setDecorationTypeWithInt:(jint)type {
  decorationType_ = type;
}

- (jboolean)isGeoElement3D {
  return NO;
}

- (jboolean)hasDrawable3D {
  return [self isGeoElement3D];
}

- (jboolean)hasLevelOfDetail {
  return NO;
}

- (jboolean)isGeoAngle {
  return NO;
}

- (jboolean)isGeoBoolean {
  return NO;
}

- (jboolean)isGeoPolyLine {
  return NO;
}

- (jboolean)isGeoImplicitPoly {
  return NO;
}

- (jboolean)isGeoConic {
  return NO;
}

- (jboolean)isGeoConicPart {
  return NO;
}

- (jboolean)isGeoFunction {
  return NO;
}

- (jboolean)isGeoFunctionNVar {
  return NO;
}

- (jboolean)isGeoFunctionBoolean {
  return NO;
}

- (jboolean)isGeoFunctionConditional {
  return NO;
}

- (jboolean)isGeoFunctionable {
  return NO;
}

- (jboolean)isGeoImage {
  return NO;
}

- (jboolean)isGeoTurtle {
  return NO;
}

- (jboolean)isGeoLine {
  return NO;
}

- (jboolean)isGeoPlane {
  return NO;
}

- (jboolean)isGeoQuadric {
  return NO;
}

- (jboolean)isGeoLocus {
  return NO;
}

- (jboolean)isGeoNumeric {
  return NO;
}

- (jboolean)isGeoPoint {
  return NO;
}

- (jboolean)isGeoCasCell {
  return NO;
}

- (jboolean)isGeoPolygon {
  return NO;
}

- (jboolean)isGeoPolyhedron {
  return NO;
}

- (jboolean)isGeoRay {
  return NO;
}

- (jboolean)isGeoSegment {
  return NO;
}

- (jboolean)isGeoText {
  return NO;
}

- (jboolean)isGeoVector {
  return NO;
}

- (jboolean)isGeoCurveCartesian {
  return NO;
}

- (jboolean)isGeoSurfaceCartesian {
  return NO;
}

- (jboolean)isCasEvaluableObject {
  return NO;
}

- (jboolean)isExpressionNode {
  return NO;
}

- (jboolean)isVariable {
  return NO;
}

- (jboolean)containsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

- (void)setSelectedWithBoolean:(jboolean)flag {
  selected_ = flag;
}

- (void)setHighlightedWithBoolean:(jboolean)flag {
  highlighted_ = flag;
}

- (jboolean)doHighlighting {
  return (highlighted_ || selected_) && (![self isFixed] || [self isSelectionAllowed]);
}

- (jboolean)isSelected {
  return GeogebraCommonKernelGeosGeoElement_isSelected(self);
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)isAngle {
  return NO;
}

- (jboolean)evaluatesToNonComplex2DVector {
  return NO;
}

- (jboolean)evaluatesToVectorNotPoint {
  return NO;
}

- (jboolean)isPolynomialInstance {
  return NO;
}

- (jboolean)evaluatesToText {
  return NO;
}

- (jboolean)evaluatesToList {
  return NO;
}

- (jboolean)isGeoButton {
  return NO;
}

- (jboolean)isUseVisualDefaults {
  return useVisualDefaults_;
}

- (void)setUseVisualDefaultsWithBoolean:(jboolean)useVisualDefaults {
  self->useVisualDefaults_ = useVisualDefaults;
}

- (jboolean)isAbsoluteScreenLocateable {
  return NO;
}

- (GeogebraCommonKernelGeosGeoBoolean *)getShowObjectCondition {
  return GeogebraCommonKernelGeosGeoElement_getShowObjectCondition(self);
}

- (void)setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)cond {
  if (self == cond) {
    @throw [new_GeogebraCommonKernelCircularDefinitionException_init() autorelease];
  }
  if (condShowObject_ != nil) {
    [condShowObject_ unregisterConditionListenerWithGeogebraCommonKernelGeosGeoElement:self];
  }
  GeogebraCommonKernelGeosGeoElement_set_condShowObject_(self, cond);
  if (condShowObject_ != nil) {
    [condShowObject_ registerConditionListenerWithGeogebraCommonKernelGeosGeoElement:self];
  }
}

- (void)removeConditionWithGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)bool_ {
  if (condShowObject_ == bool_) {
    GeogebraCommonKernelGeosGeoElement_set_condShowObject_(self, nil);
  }
}

- (GeogebraCommonKernelGeosGeoList *)getColorFunction {
  return GeogebraCommonKernelGeosGeoElement_getColorFunction(self);
}

- (void)setColorFunctionWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)col {
  if (colFunction_ != nil) {
    [colFunction_ unregisterColorFunctionListenerWithGeogebraCommonKernelGeosGeoElement:self];
  }
  GeogebraCommonKernelGeosGeoElement_set_colFunction_(self, col);
  if (colFunction_ != nil) {
    [colFunction_ registerColorFunctionListenerWithGeogebraCommonKernelGeosGeoElement:self];
  }
}

- (void)removeColorFunction {
  if (colFunction_ != nil) {
    [colFunction_ unregisterColorFunctionListenerWithGeogebraCommonKernelGeosGeoElement:self];
  }
  GeogebraCommonKernelGeosGeoElement_set_colFunction_(self, nil);
}

+ (jboolean)moveObjectsWithJavaUtilArrayList:(JavaUtilArrayList *)geosToMove
        withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)rwTransVec
        withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)endPosition
        withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)viewDirection
    withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view {
  return GeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonEuclidianEuclidianView_(geosToMove, rwTransVec, endPosition, viewDirection, view);
}

+ (JavaUtilTreeSet *)getTempSet {
  return GeogebraCommonKernelGeosGeoElement_getTempSet();
}

- (jboolean)movePointWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)rwTransVec
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)endPosition {
  jboolean movedGeo = NO;
  GeogebraCommonKernelGeosGeoPoint *point = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(self, [GeogebraCommonKernelGeosGeoPoint class]);
  if (endPosition != nil) {
    [point setCoordsWithDouble:[endPosition getX] withDouble:[endPosition getY] withDouble:1];
    movedGeo = YES;
  }
  else {
    jdouble x = [point getInhomX] + [((GeogebraCommonKernelMatrixCoords *) nil_chk(rwTransVec)) getX];
    jdouble y = [point getInhomY] + [rwTransVec getY];
    if (JavaLangMath_absWithDouble_([rwTransVec getX]) > GeogebraCommonKernelKernel_MIN_PRECISION) {
      x = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(x);
    }
    if (JavaLangMath_absWithDouble_([rwTransVec getY]) > GeogebraCommonKernelKernel_MIN_PRECISION) {
      y = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(y);
    }
    [point setCoordsWithDouble:x withDouble:y withDouble:1];
    movedGeo = YES;
  }
  return movedGeo;
}

- (jboolean)moveVectorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)rwTransVec
                      withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)endPosition {
  jboolean movedGeo = NO;
  GeogebraCommonKernelGeosGeoVector *vector = (GeogebraCommonKernelGeosGeoVector *) check_class_cast(self, [GeogebraCommonKernelGeosGeoVector class]);
  if (endPosition != nil) {
    [vector setCoordsWithDouble:[endPosition getX] withDouble:[endPosition getY] withDouble:0];
    movedGeo = YES;
  }
  else {
    jdouble x = [vector getX] + [((GeogebraCommonKernelMatrixCoords *) nil_chk(rwTransVec)) getX];
    jdouble y = [vector getY] + [rwTransVec getY];
    if (JavaLangMath_absWithDouble_([rwTransVec getX]) > GeogebraCommonKernelKernel_MIN_PRECISION) {
      x = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(x);
    }
    if (JavaLangMath_absWithDouble_([rwTransVec getY]) > GeogebraCommonKernelKernel_MIN_PRECISION) {
      y = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(y);
    }
    [vector setCoordsWithDouble:x withDouble:y withDouble:0];
    movedGeo = YES;
  }
  return movedGeo;
}

- (jboolean)moveObjectWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)rwTransVec
                      withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)endPosition
                      withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)viewDirection
                                     withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                  withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view {
  return GeogebraCommonKernelGeosGeoElement_moveObjectWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withJavaUtilArrayList_withGeogebraCommonEuclidianEuclidianView_(self, rwTransVec, endPosition, viewDirection, updateGeos, view);
}

- (jboolean)moveFromChangeableCoordParentNumbersWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)rwTransVec
                                                withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)endPosition
                                                withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)viewDirection
                                                               withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                                                               withJavaUtilArrayList:(JavaUtilArrayList *)tempMoveObjectList1
                                            withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view {
  return NO;
}

- (jboolean)hasChangeableCoordParentNumbers {
  return NO;
}

- (void)recordChangeableCoordParentNumbers {
}

+ (void)addChangeableCoordParentNumberToUpdateListWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)number
                                                                   withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                                                                   withJavaUtilArrayList:(JavaUtilArrayList *)tempMoveObjectList1 {
  GeogebraCommonKernelGeosGeoElement_addChangeableCoordParentNumberToUpdateListWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(number, updateGeos, tempMoveObjectList1);
}

+ (void)addParentToUpdateListWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)number
                                              withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                                              withJavaUtilArrayList:(JavaUtilArrayList *)tempMoveObjectList1 {
  GeogebraCommonKernelGeosGeoElement_addParentToUpdateListWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(number, updateGeos, tempMoveObjectList1);
}

- (GeogebraCommonAwtGPoint *)getSpreadsheetCoords {
  if (spreadsheetCoords_ == nil) {
    GeogebraCommonKernelGeosGeoElement_updateSpreadsheetCoordinates(self);
  }
  return spreadsheetCoords_;
}

- (void)setSpreadsheetCoordsWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)spreadsheetCoords {
  GeogebraCommonKernelGeosGeoElement_set_spreadsheetCoords_(self, spreadsheetCoords);
}

- (GeogebraCommonAwtGPoint *)getOldSpreadsheetCoords {
  return oldSpreadsheetCoords_;
}

- (jboolean)isAlgoMacroOutput {
  return isAlgoMacroOutput__;
}

- (void)setAlgoMacroOutputWithBoolean:(jboolean)isAlgoMacroOutput {
  self->isAlgoMacroOutput__ = isAlgoMacroOutput;
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isDifferenceZeroInCASWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)f {
  @try {
    JavaLangStringBuilder *diffSb = [new_JavaLangStringBuilder_init() autorelease];
    [diffSb appendWithNSString:@"Simplify["];
    [diffSb appendWithNSString:[self getFormulaStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_() withBoolean:YES]];
    [diffSb appendWithNSString:@"-("];
    [diffSb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(f)) getFormulaStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_() withBoolean:YES]];
    [diffSb appendWithNSString:@")]"];
    NSString *diff = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) evaluateGeoGebraCASWithNSString:[diffSb description] withGeogebraCommonKernelArithmeticMyArbitraryConstant:nil];
    return [JavaLangDouble_valueOfWithNSString_(diff) doubleValue] == 0.0;
  }
  @catch (JavaLangThrowable *e) {
    return NO;
  }
}

- (NSString *)getFormulaStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                         withBoolean:(jboolean)substituteNumbers {
  NSString *ret = @"";
  if ([self isGeoList] && [((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [((GeogebraCommonKernelGeosGeoList *) check_class_cast(self, [GeogebraCommonKernelGeosGeoList class])) isMatrix]) {
    ret = [self toLaTeXStringWithBoolean:!substituteNumbers withGeogebraCommonKernelStringTemplate:tpl];
  }
  else if ([self isGeoVector] && [((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    ret = [self toLaTeXStringWithBoolean:!substituteNumbers withGeogebraCommonKernelStringTemplate:tpl];
  }
  else if ([self isGeoCurveCartesian] && [((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    ret = [self toLaTeXStringWithBoolean:!substituteNumbers withGeogebraCommonKernelStringTemplate:tpl];
  }
  else {
    ret = substituteNumbers ? [self toValueStringWithGeogebraCommonKernelStringTemplate:tpl] : GeogebraCommonKernelGeosGeoElement_getCommandDescriptionWithGeogebraCommonKernelStringTemplate_(self, tpl);
  }
  if ([@"" isEqual:ret] && [self isGeoNumeric] && !substituteNumbers && [self isLabelSet]) {
    ret = [((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:label_];
  }
  if ([@"" isEqual:ret] && [self isGeoCasCell] && [((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(self, [GeogebraCommonKernelGeosGeoCasCell class])) getAssignmentVariable] != nil) {
    ret = [self getLabelWithGeogebraCommonKernelStringTemplate:tpl];
  }
  if ([@"" isEqual:ret] && ![self isGeoText]) {
    ret = [self toOutputValueStringWithGeogebraCommonKernelStringTemplate:tpl];
  }
  if ([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    if ([@"?" isEqual:ret]) {
      ret = JreStrcat("$$$", @" \\text{", [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"], @"} ");
    }
    else if ([(JreStrcat("C", GeogebraCommonUtilUnicode_Infinity)) isEqual:ret]) {
      ret = @"\\infty";
    }
    else if ([(GeogebraCommonUtilUnicode_get_MinusInfinity_()) isEqual:ret]) {
      ret = @"-\\infty";
    }
  }
  return ret;
}

- (jboolean)getSpreadsheetTrace {
  return spreadsheetTrace_;
}

- (void)setSpreadsheetTraceWithBoolean:(jboolean)traceFlag {
  if (traceFlag != YES) {
    GeogebraCommonKernelGeosGeoElement_set_traceSettings_(self, nil);
  }
  spreadsheetTrace_ = traceFlag;
  if (spreadsheetTrace_) {
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) addTracingGeo];
  }
}

- (void)resetTraceColumns {
  if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isUsingFullGui]) {
    [((GeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) resetTraceColumnWithGeogebraCommonKernelGeosGeoElement:self];
  }
}

- (jboolean)isSpreadsheetTraceable {
  return [GeogebraCommonKernelGeosSpreadsheetTraceable_class_() isInstance:self];
}

- (jboolean)hasSpreadsheetTraceModeTraceable {
  return [self isSpreadsheetTraceable];
}

- (GeogebraCommonUtilSpreadsheetTraceSettings *)getTraceSettings {
  if (traceSettings_ == nil) {
    GeogebraCommonKernelGeosGeoElement_setAndConsume_traceSettings_(self, new_GeogebraCommonUtilSpreadsheetTraceSettings_init());
    if ([self getTraceModes] == GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONLY_COPY()) {
      traceSettings_->doTraceGeoCopy_ = YES;
    }
  }
  return traceSettings_;
}

- (void)setTraceSettingsWithGeogebraCommonUtilSpreadsheetTraceSettings:(GeogebraCommonUtilSpreadsheetTraceSettings *)t {
  GeogebraCommonKernelGeosGeoElement_set_traceSettings_(self, t);
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElementForPropertiesDialog {
  return self;
}

- (jboolean)isTextCommand {
  return NO;
}

- (jboolean)isInTree {
  return inTree_;
}

- (void)setInTreeWithBoolean:(jboolean)flag {
  inTree_ = flag;
}

- (void)setClickScriptWithGeogebraCommonPluginScriptScript:(GeogebraCommonPluginScriptScript *)script {
  [self setScriptWithGeogebraCommonPluginScriptScript:script withGeogebraCommonPluginEventTypeEnum:GeogebraCommonPluginEventTypeEnum_get_CLICK()];
}

- (void)setUpdateScriptWithGeogebraCommonPluginScriptScript:(GeogebraCommonPluginScriptScript *)script {
  [self setScriptWithGeogebraCommonPluginScriptScript:script withGeogebraCommonPluginEventTypeEnum:GeogebraCommonPluginEventTypeEnum_get_UPDATE()];
}

- (void)setScriptWithGeogebraCommonPluginScriptScript:(GeogebraCommonPluginScriptScript *)script
                withGeogebraCommonPluginEventTypeEnum:(GeogebraCommonPluginEventTypeEnum *)evt {
  if ((evt == GeogebraCommonPluginEventTypeEnum_get_UPDATE() && ![self canHaveUpdateScript]) || (evt == GeogebraCommonPluginEventTypeEnum_get_CLICK() && ![self canHaveClickScript])) {
    return;
  }
  if (self->scripts_ == nil) {
    GeogebraCommonKernelGeosGeoElement_setAndConsume_scripts_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(GeogebraCommonPluginEventTypeEnum_values()))->size_ type:GeogebraCommonPluginScriptScript_class_()]);
  }
  [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) startGeoScriptRunner];
  GeogebraCommonPluginScriptScript *oldScript = IOSObjectArray_Get(nil_chk(scripts_), [((GeogebraCommonPluginEventTypeEnum *) nil_chk(evt)) ordinal]);
  if (oldScript != nil) {
    [oldScript unbindWithGeogebraCommonKernelGeosGeoElement:self withGeogebraCommonPluginEventTypeEnum:evt];
  }
  IOSObjectArray_Set(scripts_, [evt ordinal], script);
  [((GeogebraCommonPluginScriptScript *) nil_chk(script)) bindWithGeogebraCommonKernelGeosGeoElement:self withGeogebraCommonPluginEventTypeEnum:evt];
}

- (jboolean)canHaveUpdateScript {
  return YES;
}

- (GeogebraCommonPluginScriptScript *)getScriptWithGeogebraCommonPluginEventTypeEnum:(GeogebraCommonPluginEventTypeEnum *)type {
  if (scripts_ == nil) {
    return nil;
  }
  return IOSObjectArray_Get(nil_chk(scripts_), [((GeogebraCommonPluginEventTypeEnum *) nil_chk(type)) ordinal]);
}

- (void)runClickScriptsWithNSString:(NSString *)arg {
  [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) dispatchEventWithGeogebraCommonPluginEvent:[new_GeogebraCommonPluginEvent_initWithGeogebraCommonPluginEventTypeEnum_withGeogebraCommonKernelGeosGeoElement_withNSString_(GeogebraCommonPluginEventTypeEnum_get_CLICK(), self, arg) autorelease]];
}

- (void)setShowTrimmedIntersectionLinesWithBoolean:(jboolean)show {
  showTrimmedIntersectionLines_ = show;
}

- (jboolean)getShowTrimmedIntersectionLines {
  return showTrimmedIntersectionLines_;
}

- (jboolean)isPointInRegion {
  return NO;
}

- (void)setRandomGeoWithBoolean:(jboolean)flag {
  isRandomGeo__ = flag;
}

- (jboolean)isRandomGeo {
  return isRandomGeo__;
}

- (void)updateRandomGeo {
  GeogebraCommonKernelAlgosAlgoElement *algo = GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self);
  if (algo != nil) {
    [algo compute];
  }
  else if ([self isGeoNumeric]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self, [GeogebraCommonKernelGeosGeoNumeric class])) updateRandom];
  }
}

- (jboolean)isMatrixTransformable {
  return NO;
}

- (void)setVisibilityWithInt:(jint)viewId
                 withBoolean:(jboolean)setVisible {
  if (self->viewFlags_ == nil) {
    GeogebraCommonKernelGeosGeoElement_setAndConsume_viewFlags_(self, new_JavaUtilArrayList_init());
  }
  if (setVisible) {
    if (![((id<JavaUtilList>) nil_chk(viewFlags_)) containsWithId:JavaLangInteger_valueOfWithInt_(viewId)]) {
      [viewFlags_ addWithId:JavaLangInteger_valueOfWithInt_(viewId)];
    }
  }
  else {
    [((id<JavaUtilList>) nil_chk(viewFlags_)) removeWithId:JavaLangInteger_valueOfWithInt_(viewId)];
  }
}

- (jboolean)isVisibleInViewWithInt:(jint)viewId {
  if (viewFlags_ == nil) {
    return viewId == GeogebraCommonMainApp_VIEW_EUCLIDIAN;
  }
  return [((id<JavaUtilList>) nil_chk(viewFlags_)) containsWithId:JavaLangInteger_valueOfWithInt_(viewId)];
}

- (void)addViewWithInt:(jint)viewId {
  if (viewId == GeogebraCommonMainApp_VIEW_EUCLIDIAN3D) {
    GeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_get_TRUE());
  }
  else {
    [self setVisibilityWithInt:viewId withBoolean:YES];
  }
}

- (void)removeViewWithInt:(jint)viewId {
  if (viewId == GeogebraCommonMainApp_VIEW_EUCLIDIAN3D) {
    GeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_get_FALSE());
  }
  else {
    [self setVisibilityWithInt:viewId withBoolean:NO];
  }
}

- (void)setViewFlagsWithJavaUtilList:(id<JavaUtilList>)flags {
  if (flags == nil) {
    GeogebraCommonKernelGeosGeoElement_set_viewFlags_(self, nil);
    return;
  }
  if (self->viewFlags_ == nil) {
    GeogebraCommonKernelGeosGeoElement_setAndConsume_viewFlags_(self, new_JavaUtilArrayList_init());
  }
  else {
    [viewFlags_ clear];
  }
  [((id<JavaUtilList>) nil_chk(viewFlags_)) addAllWithJavaUtilCollection:flags];
}

- (id<JavaUtilList>)getViewSet {
  if (viewFlags_ == nil) {
    return nil;
  }
  id<JavaUtilList> list = [new_JavaUtilArrayList_init() autorelease];
  [list addAllWithJavaUtilCollection:viewFlags_];
  return list;
}

- (jboolean)isVisibleInView3D {
  switch ([visibleInView3D_ ordinal]) {
    case GeogebraCommonKernelGeosGeoElement_VisibleInView3D_NOT_SET:
    default:
    if ([self hasDrawable3D]) {
      if ([self isGeoElement3D] || [self isVisibleInViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN]) {
        GeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_get_TRUE());
        return YES;
      }
      GeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_get_FALSE());
      return NO;
    }
    case GeogebraCommonKernelGeosGeoElement_VisibleInView3D_TRUE:
    return [self hasDrawable3D];
    case GeogebraCommonKernelGeosGeoElement_VisibleInView3D_FALSE:
    return NO;
  }
}

- (void)setVisibleInView3DWithBoolean:(jboolean)flag {
  if (flag) {
    GeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_get_TRUE());
  }
  else {
    GeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_get_FALSE());
  }
}

- (void)setVisibleInView3DWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, ((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->visibleInView3D_);
}

- (void)setSelectionAllowedWithBoolean:(jboolean)selected2 {
  selectionAllowed_ = selected2;
}

- (jboolean)isSelectionAllowed {
  return selectionAllowed_;
}

- (void)setRealLabelWithNSString:(NSString *)realLabel {
  GeogebraCommonKernelGeosGeoElement_set_realLabel_(self, realLabel);
}

- (jboolean)isHatchingEnabled {
  return [((GeogebraCommonKernelGeosGeoElement_FillTypeEnum *) nil_chk(fillType_)) isHatch];
}

- (void)setHatchingAngleWithInt:(jint)angle {
  hatchingAngle_ = angle;
}

- (jdouble)getHatchingAngle {
  return hatchingAngle_;
}

- (void)setHatchingDistanceWithInt:(jint)distance {
  hatchingDistance_ = distance;
}

- (jint)getHatchingDistance {
  return hatchingDistance_;
}

- (id<GeogebraCommonAwtMyImage>)getFillImage {
  return [((GeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk(graphicsadapter_)) getFillImage];
}

- (void)setFillImageWithNSString:(NSString *)filename {
  [((GeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk(graphicsadapter_)) setFillImageWithNSString:filename];
}

- (GeogebraCommonKernelGeosGeoElement_FillTypeEnum *)getFillType {
  return fillType_;
}

- (void)setFillTypeWithGeogebraCommonKernelGeosGeoElement_FillTypeEnum:(GeogebraCommonKernelGeosGeoElement_FillTypeEnum *)fillType {
  GeogebraCommonKernelGeosGeoElement_set_fillType_(self, fillType);
}

- (void)setImageFileNameWithNSString:(NSString *)fileName {
  [((GeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk(graphicsadapter_)) setImageFileNameWithNSString:fileName];
}

- (NSString *)getImageFileName {
  return [((GeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk(graphicsadapter_)) getImageFileName];
}

- (void)setInverseFillWithBoolean:(jboolean)inverseFill {
  self->inverseFill_ = inverseFill;
}

- (jboolean)isInverseFill {
  return inverseFill_;
}

- (GeogebraCommonKernelMatrixCoords *)getMainDirection {
  return GeogebraCommonKernelMatrixCoords_get_VZ_();
}

- (jdouble)distanceWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  return JavaLangDouble_POSITIVE_INFINITY;
}

- (jdouble)distanceWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  if (([p isKindOfClass:[GeogebraCommonKernelGeosGeoElement class]]) && ([p isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]])) {
    return [self distanceWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p, [GeogebraCommonKernelGeosGeoPoint class])];
  }
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@$", @"TODO : distance from ", [self getGeoClassType], @" to ND point"));
  return JavaLangDouble_POSITIVE_INFINITY;
}

- (jboolean)canHaveClickScript {
  return YES;
}

- (void)setIsPickableWithBoolean:(jboolean)v {
  isPickable__ = v;
}

- (jboolean)isPickable {
  return isPickable__ && [self isSelectionAllowed];
}

- (jboolean)needsReplacingInExpressionNode {
  return needsReplacingInExpressionNode__;
}

- (void)setNeedsReplacingInExpressionNode {
  needsReplacingInExpressionNode__ = YES;
}

- (jboolean)isGeoInterval {
  return NO;
}

- (jdouble)getMeasure {
  return 0;
}

- (void)moveDependenciesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldGeo {
}

- (void)storeClone {
  if (tempClone_ == nil) {
    GeogebraCommonKernelGeosGeoElement_setAndConsume_tempClone_(self, new_JavaUtilStack_init());
  }
  [((JavaUtilStack *) nil_chk(tempClone_)) pushWithId:[self copy__]];
  cloneInUse_ = YES;
}

- (void)recoverFromClone {
  if (tempClone_ != nil) {
    [self setWithGeogebraCommonKernelGeosGeoElement:[tempClone_ pop]];
  }
  cloneInUse_ = NO;
}

- (void)randomizeForProbabilisticChecking {
}

- (jboolean)isRandomizable {
  return NO;
}

- (GeogebraCommonKernelGeosGeoCasCell *)getCorrespondingCasCell {
  return GeogebraCommonKernelGeosGeoElement_getCorrespondingCasCell(self);
}

- (void)setCorrespondingCasCellWithGeogebraCommonKernelGeosGeoCasCell:(GeogebraCommonKernelGeosGeoCasCell *)correspondingCasCell {
  GeogebraCommonKernelGeosGeoElement_set_correspondingCasCell_(self, correspondingCasCell);
}

- (jboolean)isLaTeXDrawableGeo {
  return NO;
}

- (jboolean)hasBackgroundColor {
  return NO;
}

- (jboolean)algoUpdateSetContainsWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)i {
  return [((GeogebraCommonKernelAlgosAlgorithmSet *) nil_chk([self getAlgoUpdateSet])) containsWithGeogebraCommonKernelAlgosAlgoElement:i];
}

- (void)resetSpreadsheetColumnHeadings {
  if (spreadsheetColumnHeadings_ == nil) {
    GeogebraCommonKernelGeosGeoElement_setAndConsume_spreadsheetColumnHeadings_(self, new_JavaUtilArrayList_init());
  }
  else {
    [spreadsheetColumnHeadings_ clear];
  }
}

- (JavaUtilArrayList *)getColumnHeadings {
  if (((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk([self getTraceSettings]))->doTraceGeoCopy_) [self updateColumnHeadingsForTraceGeoCopy];
  else [self updateColumnHeadingsForTraceValues];
  return spreadsheetColumnHeadings_;
}

- (void)updateColumnHeadingsForTraceValues {
  [self updateColumnHeadingsForTraceGeoCopy];
}

- (NSString *)getTraceDialogAsValues {
  return GeogebraCommonKernelGeosGeoElement_getLabelTextOrHTMLWithBoolean_(self, NO);
}

- (GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)getTraceModes {
  return GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONE_VALUE_ONLY();
}

- (void)updateColumnHeadingsForTraceGeoCopy {
  [self resetSpreadsheetColumnHeadings];
  [((JavaUtilArrayList *) nil_chk(spreadsheetColumnHeadings_)) addWithId:[self getNameGeo]];
}

- (GeogebraCommonKernelGeosGeoText *)getNameGeo {
  GeogebraCommonKernelAlgosAlgoName *algo = [new_GeogebraCommonKernelAlgosAlgoName_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_(cons_, self) autorelease];
  GeogebraCommonKernelGeosGeoText *ret = [algo getGeoText];
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(ret)) setEuclidianVisibleWithBoolean:NO];
  return ret;
}

- (GeogebraCommonKernelGeosGeoText *)getColumnHeadingTextWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)node {
  GeogebraCommonKernelGeosGeoText *ret;
  if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(node)) getGeoElementVariables] == nil) {
    ret = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    GeogebraCommonKernelAlgosAlgoDependentText_nodeToGeoTextWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelStringTemplate_(node, ret, [ret getStringTemplate]);
  }
  else {
    GeogebraCommonKernelAlgosAlgoDependentText *algo = [new_GeogebraCommonKernelAlgosAlgoDependentText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(cons_, node) autorelease];
    [algo setProtectedInputWithBoolean:YES];
    ret = [algo getGeoText];
  }
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(ret)) setEuclidianVisibleWithBoolean:NO];
  return ret;
}

- (GeogebraCommonKernelArithmeticMyStringBuffer *)getXBracket {
  if (xBracket_ == nil) GeogebraCommonKernelGeosGeoElement_setAndConsume_xBracket_(self, new_GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"x("));
  return xBracket_;
}

- (GeogebraCommonKernelArithmeticMyStringBuffer *)getYBracket {
  if (yBracket_ == nil) GeogebraCommonKernelGeosGeoElement_setAndConsume_yBracket_(self, new_GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"y("));
  return yBracket_;
}

- (GeogebraCommonKernelArithmeticMyStringBuffer *)getZBracket {
  if (zBracket_ == nil) GeogebraCommonKernelGeosGeoElement_setAndConsume_zBracket_(self, new_GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"z("));
  return zBracket_;
}

- (GeogebraCommonKernelArithmeticMyStringBuffer *)getCloseBracket {
  if (closeBracket_ == nil) GeogebraCommonKernelGeosGeoElement_setAndConsume_closeBracket_(self, new_GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @")"));
  return closeBracket_;
}

- (void)addToSpreadsheetTraceListWithJavaUtilArrayList:(JavaUtilArrayList *)spreadsheetTraceList {
  if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:self]) {
    GeogebraCommonKernelGeosGeoNumeric *xx = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(self, @protocol(GeogebraCommonKernelArithmeticNumberValue))) getDouble]) autorelease];
    [((JavaUtilArrayList *) nil_chk(spreadsheetTraceList)) addWithId:xx];
  }
  else {
    GeogebraCommonMainApp_debugWithNSString_(@"error in getSpreadsheetTraceList(), not a NumberValue");
  }
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return label_;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)traverseWithGeogebraCommonKernelArithmeticTraversing:(id<GeogebraCommonKernelArithmeticTraversing>)t {
  return [((id<GeogebraCommonKernelArithmeticTraversing>) nil_chk(t)) processWithGeogebraCommonKernelArithmeticExpressionValue:self];
}

- (jboolean)inspectWithGeogebraCommonKernelArithmeticInspecting:(id<GeogebraCommonKernelArithmeticInspecting>)t {
  return [((id<GeogebraCommonKernelArithmeticInspecting>) nil_chk(t)) checkWithGeogebraCommonKernelArithmeticExpressionValue:self];
}

- (jint)getMetasLength {
  return 0;
}

- (GeogebraCommonKernelGeosGeoElement *)unwrap {
  return self;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_([self getKernel], self) autorelease];
}

- (jboolean)isLocusEquable {
  return GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self) != nil && [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self))) isLocusEquable];
}

- (jboolean)isPinnable {
  return NO;
}

- (jboolean)isPinned {
  if ([GeogebraCommonKernelGeosAbsoluteScreenLocateable_class_() isInstance:self]) {
    return [((id<GeogebraCommonKernelGeosAbsoluteScreenLocateable>) check_protocol_cast(self, @protocol(GeogebraCommonKernelGeosAbsoluteScreenLocateable))) isAbsoluteScreenLocActive];
  }
  if (![self isPinnable]) {
    return NO;
  }
  return [GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self) isKindOfClass:[GeogebraCommonKernelAlgosAlgoAttachCopyToView class]];
}

- (jboolean)hasCoords {
  return NO;
}

- (void)setScriptingWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldGeo {
  if (((GeogebraCommonKernelGeosGeoElement *) nil_chk(oldGeo))->scripts_ == nil) {
    GeogebraCommonKernelGeosGeoElement_set_scripts_(self, nil);
    return;
  }
  if (self->scripts_ == nil) {
    GeogebraCommonKernelGeosGeoElement_setAndConsume_scripts_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(GeogebraCommonPluginEventTypeEnum_values()))->size_ type:GeogebraCommonPluginScriptScript_class_()]);
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(oldGeo->scripts_))->size_; i++) {
    if (IOSObjectArray_Get(oldGeo->scripts_, i) != nil) {
      IOSObjectArray_Set(scripts_, i, [((GeogebraCommonPluginScriptScript *) nil_chk(IOSObjectArray_Get(oldGeo->scripts_, i))) copy__]);
    }
    else {
      IOSObjectArray_Set(scripts_, i, nil);
    }
  }
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv {
  return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_([((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv)) getKernel], 0) autorelease];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)integralWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv {
  return nil;
}

- (jboolean)isMatrix {
  return NO;
}

- (NSString *)getFillSymbol {
  return fillSymbol_;
}

- (void)setFillSymbolWithNSString:(NSString *)symbol {
  GeogebraCommonKernelGeosGeoElement_set_fillSymbol_(self, symbol);
}

- (jint)getDecorationType {
  return decorationType_;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementWithGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope {
  return nil;
}

- (void)setSendValueToCasWithBoolean:(jboolean)var {
  sendValueToCas_ = var;
}

- (jboolean)getSendValueToCas {
  return sendValueToCas_;
}

- (void)setCaptionBotanaVarsWithNSString:(NSString *)vars {
  labelMode_ = GeogebraCommonKernelGeosGeoElement_LABEL_CAPTION;
  labelVisible_ = YES;
  NSString *labelWithVars = JreStrcat("$$$$", @"{\\bf\\it ", label_, vars, @"}\\\\");
  if (caption_ == nil) {
    GeogebraCommonKernelGeosGeoElement_set_caption_(self, JreStrcat("C$C", '$', labelWithVars, '$'));
    return;
  }
  if ([((NSString *) nil_chk(caption_)) hasPrefix:labelWithVars]) {
    return;
  }
  GeogebraCommonKernelGeosGeoElement_set_caption_(self, JreStrcat("C$$$", '$', labelWithVars, @"\\\\", [caption_ substring:1 endIndex:((jint) [caption_ length])]));
}

- (void)addCaptionBotanaPolynomialWithNSString:(NSString *)poly {
  labelMode_ = GeogebraCommonKernelGeosGeoElement_LABEL_CAPTION;
  labelVisible_ = YES;
  if (caption_ != nil) {
    GeogebraCommonKernelGeosGeoElement_set_caption_(self, JreStrcat("$$$", [caption_ substring:0 endIndex:((jint) [caption_ length]) - 1], poly, @"\\\\$"));
  }
  else {
    GeogebraCommonKernelGeosGeoElement_set_caption_(self, JreStrcat("C$$", '$', poly, @"\\\\$"));
  }
}

- (jboolean)showLineProperties {
  return [self isPath] || (([self isKindOfClass:[GeogebraCommonKernelGeosGeoFunctionNVar class]]) && [((GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(self, [GeogebraCommonKernelGeosGeoFunctionNVar class])) isInequality]);
}

- (jboolean)evaluatesTo3DVector {
  return NO;
}

- (void)setCanBeRemovedAsInputWithBoolean:(jboolean)flag {
  canBeRemovedAsInput__ = flag;
}

- (jboolean)canBeRemovedAsInput {
  return canBeRemovedAsInput__ && (algorithmList_ == nil || [algorithmList_ size] <= 1);
}

- (jboolean)hasLineOpacity {
  return NO;
}

- (jint)getLineOpacity {
  return lineOpacity_;
}

- (void)setLineOpacityWithInt:(jint)lineOpacity {
  self->lineOpacity_ = lineOpacity;
}

- (jboolean)evaluatesToNumberWithBoolean:(jboolean)def {
  return [self isNumberValue];
}

- (jboolean)getTrace {
  return NO;
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(spreadsheetColumnHeadings_);
  RELEASE_(label_);
  RELEASE_(realLabel_);
  RELEASE_(oldLabel_);
  RELEASE_(caption_);
  RELEASE_(objColor_);
  RELEASE_(bgColor_);
  RELEASE_(selColor_);
  RELEASE_(labelColor_);
  RELEASE_(fillColor_);
  RELEASE_(animationIncrement_);
  RELEASE_(animationSpeedObj_);
  RELEASE_(correspondingCasCell_);
  RELEASE_(fillSymbol_);
  RELEASE_(graphicsadapter_);
  RELEASE_(fillType_);
  RELEASE_(viewFlags_);
  RELEASE_(spreadsheetCoords_);
  RELEASE_(oldSpreadsheetCoords_);
  RELEASE_(condShowObject_);
  RELEASE_(colFunction_);
  RELEASE_(strAlgebraDescription_);
  RELEASE_(strAlgebraDescTextOrHTML_);
  RELEASE_(strAlgebraDescriptionHTML_);
  RELEASE_(strLabelTextOrHTML_);
  RELEASE_(strLaTeX_);
  RELEASE_(algoParent_);
  RELEASE_(algoDraw_);
  RELEASE_(algorithmList_);
  RELEASE_(algoUpdateSet_);
  RELEASE_(viewForValueString_);
  RELEASE_(latexCache_);
  RELEASE_(strHasIndexLabel_);
  RELEASE_(tempMoveObjectList_);
  RELEASE_(traceSettings_);
  RELEASE_(scripts_);
  RELEASE_(visibleInView3D_);
  RELEASE_(tempClone_);
  RELEASE_(xBracket_);
  RELEASE_(yBracket_);
  RELEASE_(zBracket_);
  RELEASE_(closeBracket_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelGeosGeoElement class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElement_pointLabels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'Z' } count:24]);
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElement_functionLabels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'f', 'g', 'h', 'p', 'q', 'r', 's', 't' } count:8]);
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElement_lineLabels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't' } count:19]);
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElement_vectorLabels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'u', 'v', 'w', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't' } count:22]);
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElement_conicLabels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'c', 'd', 'e', 'f', 'g', 'h', 'k', 'p', 'q', 'r', 's', 't' } count:12]);
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElement_lowerCaseLabels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w' } count:23]);
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElement_integerLabels_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'n', 'i', 'j', 'k', 'l', 'm' } count:6]);
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElement_greekLowerCase_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 0x03b1, 0x03b2, 0x03b3, 0x03b4, 0x03b5, 0x03b6, 0x03b7, 0x03b8, 0x03b9, 0x03ba, 0x03bb, 0x03bc, 0x03bd, 0x03be, 0x03bf, 0x03c1, 0x03c3, 0x03c4, 0x03c5, 0x03d5, 0x03c7, 0x03c8, 0x03c9 } count:23]);
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElement_arabic_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 0x0623, 0x0628, 0x062a, 0x062b, 0x062c, 0x062d, 0x062e, 0x062f, 0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637, 0x0638, 0x0639, 0x063a, 0x0641, 0x0642, 0x0643, 0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x064a } count:28]);
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElement_yiddish_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 0x05d0, 0x05d1, 0x05d2, 0x05d3, 0x05d4, 0x05d5, 0x05d6, 0x05d7, 0x05d8, 0x05db, 0x05dc, 0x05de, 0x05e0, 0x05e1, 0x05e2, 0x05e4, 0x05e6, 0x05e7, 0x05e8, 0x05e9, 0x05ea } count:21]);
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElement_greekUpperCase_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397, 0x0398, 0x0399, 0x039a, 0x039b, 0x039c, 0x039d, 0x039e, 0x039f, 0x03a0, 0x03a1, 0x03a3, 0x03a4, 0x03a5, 0x03a6, 0x03a7, 0x03a8, 0x03a9 } count:24]);
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElement_algoComparator_, nil, new_GeogebraCommonKernelGeosGeoElement_$1_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelGeosGeoElement)
  }
}

+ (IOSObjectArray *)__annotations_toString {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getColorSpace", NULL, "I", 0x1, NULL, NULL },
    { "setColorSpaceWithInt:", "setColorSpace", "V", 0x1, NULL, NULL },
    { "getDefaultGeoType", NULL, "I", 0x1, NULL, NULL },
    { "isDefaultGeo", NULL, "Z", 0x1, NULL, NULL },
    { "setDefaultGeoTypeWithInt:", "setDefaultGeoType", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "GeoElement", NULL, 0x1, NULL, NULL },
    { "getLabelSimple", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setLabelSimpleWithNSString:", "setLabelSimple", "V", 0x1, NULL, NULL },
    { "getLabelWithGeogebraCommonKernelStringTemplate:", "getLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "copyLabelWithGeogebraCommonKernelGeosGeoElement:", "copyLabel", "V", 0x1, NULL, NULL },
    { "setLabelModeWithInt:", "setLabelMode", "V", 0x1, NULL, NULL },
    { "getLabelMode", NULL, "I", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x401, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x401, NULL, NULL },
    { "deepCopyGeo", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "copyInternalWithGeogebraCommonKernelConstruction:", "copyInternal", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "copyPointsWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "copyPoints", "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x9, NULL, NULL },
    { "copyPointsNDWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "copyPointsND", "[Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x9, NULL, NULL },
    { "deepCopyWithGeogebraCommonKernelKernel:", "deepCopy", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "isInfinite", NULL, "Z", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x401, NULL, NULL },
    { "isDefined", NULL, "Z", 0x401, NULL, NULL },
    { "setUndefined", NULL, "V", 0x401, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "setViewForValueStringWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "setViewForValueString", "V", 0x1, NULL, NULL },
    { "getViewForValueString", NULL, "Lgeogebra.common.euclidian.EuclidianViewInterfaceSlim;", 0x1, NULL, NULL },
    { "hasValueStringChangeableRegardingView", NULL, "Z", 0x1, NULL, NULL },
    { "getRedefineStringWithBoolean:withBoolean:", "getRedefineString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLabelDelimiter", NULL, "C", 0x4, NULL, NULL },
    { "getDefinitionForInputBar", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getValueForInputBar", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setZero", NULL, "V", 0x1, NULL, NULL },
    { "toOutputValueStringWithGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setConstructionDefaults", NULL, "V", 0x11, NULL, NULL },
    { "setConstructionDefaultsWithBoolean:", "setConstructionDefaults", "V", 0x11, NULL, NULL },
    { "setObjColorWithGeogebraCommonAwtGColor:", "setObjColor", "V", 0x1, NULL, NULL },
    { "isColorSet", NULL, "Z", 0x1, NULL, NULL },
    { "getRGBFromListWithFloat:", "getRGBFromList", "Lgeogebra.common.awt.GColor;", 0x2, NULL, NULL },
    { "getRGBFromListWithInt:", "getRGBFromList", "Lgeogebra.common.awt.GColor;", 0x2, NULL, NULL },
    { "getSelColor", NULL, "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getFillColor", NULL, "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getAlgebraColor", NULL, "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getLabelColor", NULL, "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "setLabelColorWithGeogebraCommonAwtGColor:", "setLabelColor", "V", 0x1, NULL, NULL },
    { "getBackgroundColor", NULL, "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "setBackgroundColorWithGeogebraCommonAwtGColor:", "setBackgroundColor", "V", 0x1, NULL, NULL },
    { "getObjectColor", NULL, "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "setLayerWithInt:", "setLayer", "V", 0x1, NULL, NULL },
    { "getLayer", NULL, "I", 0x1, NULL, NULL },
    { "typePriority", NULL, "I", 0x2, NULL, NULL },
    { "drawBeforeWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "drawBefore", "Z", 0x1, NULL, NULL },
    { "setAlphaValueWithFloat:", "setAlphaValue", "V", 0x1, NULL, NULL },
    { "getAlphaValue", NULL, "F", 0x1, NULL, NULL },
    { "isLimitedPath", NULL, "Z", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "isRegion", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoList", NULL, "Z", 0x1, NULL, NULL },
    { "setAllVisualPropertiesWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "setAllVisualProperties", "V", 0x11, NULL, NULL },
    { "setAllVisualPropertiesExceptEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "setAllVisualPropertiesExceptEuclidianVisible", "V", 0x1, NULL, NULL },
    { "setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:", "setVisualStyleForTransformations", "V", 0x1, NULL, NULL },
    { "setVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "setVisualStyle", "V", 0x1, NULL, NULL },
    { "setColorVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "setColorVisualStyle", "V", 0x4, NULL, NULL },
    { "setAdvancedVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "setAdvancedVisualStyle", "V", 0x1, NULL, NULL },
    { "setAdvancedVisualStyleCopyWithGeogebraCommonKernelGeosGeoElement:", "setAdvancedVisualStyleCopy", "V", 0x1, NULL, NULL },
    { "getGraphicsAdapter", NULL, "Lgeogebra.common.kernel.geos.GeoElementGraphicsAdapter;", 0x1, NULL, NULL },
    { "setLabelOffsetWithInt:withInt:", "setLabelOffset", "V", 0x1, NULL, NULL },
    { "isVisible", NULL, "Z", 0x11, NULL, NULL },
    { "isEuclidianVisible", NULL, "Z", 0x11, NULL, NULL },
    { "setEuclidianVisibleWithBoolean:", "setEuclidianVisible", "V", 0x1, NULL, NULL },
    { "setEuclidianVisibleIfNoConditionToShowObjectWithBoolean:", "setEuclidianVisibleIfNoConditionToShowObject", "V", 0x1, NULL, NULL },
    { "forceEuclidianVisibleWithBoolean:", "forceEuclidianVisible", "V", 0x1, NULL, NULL },
    { "isSetEuclidianVisible", NULL, "Z", 0x1, NULL, NULL },
    { "isConsProtocolBreakpoint", NULL, "Z", 0x11, NULL, NULL },
    { "setConsProtocolBreakpointWithBoolean:", "setConsProtocolBreakpoint", "V", 0x1, NULL, NULL },
    { "getSiblings", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isDrawable", NULL, "Z", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "isInverseFillable", NULL, "Z", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "isFixed", NULL, "Z", 0x1, NULL, NULL },
    { "setFixedWithBoolean:", "setFixed", "V", 0x1, NULL, NULL },
    { "isFixable", NULL, "Z", 0x1, NULL, NULL },
    { "removeOrSetUndefinedIfHasFixedDescendent", NULL, "V", 0x11, NULL, NULL },
    { "isAuxiliaryObject", NULL, "Z", 0x11, NULL, NULL },
    { "isAuxiliaryObjectByDefault", NULL, "Z", 0x1, NULL, NULL },
    { "toGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setAuxiliaryObjectWithBoolean:", "setAuxiliaryObject", "V", 0x1, NULL, NULL },
    { "setLabelVisibleWithBoolean:", "setLabelVisible", "V", 0x1, NULL, NULL },
    { "isLabelVisible", NULL, "Z", 0x1, NULL, NULL },
    { "getLabelVisible", NULL, "Z", 0x11, NULL, NULL },
    { "isLabelShowable", NULL, "Z", 0x1, NULL, NULL },
    { "isLabelValueShowable", NULL, "Z", 0x1, NULL, NULL },
    { "isAlgebraVisible", NULL, "Z", 0x11, NULL, NULL },
    { "showToolTipText", NULL, "Z", 0x1, NULL, NULL },
    { "getTooltipTextWithBoolean:withBoolean:", "getTooltipText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTooltipMode", NULL, "I", 0x1, NULL, NULL },
    { "setTooltipModeWithInt:", "setTooltipMode", "V", 0x1, NULL, NULL },
    { "setAlgebraVisibleWithBoolean:", "setAlgebraVisible", "V", 0x1, NULL, NULL },
    { "isSetAlgebraVisible", NULL, "Z", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x401, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x404, NULL, NULL },
    { "isAlgebraViewEditable", NULL, "Z", 0x1, NULL, NULL },
    { "isEuclidianShowable", NULL, "Z", 0x11, NULL, NULL },
    { "isAlgebraShowable", NULL, "Z", 0x1, NULL, NULL },
    { "setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:", "setParentAlgorithm", "V", 0x1, NULL, NULL },
    { "getParentAlgorithm", NULL, "Lgeogebra.common.kernel.algos.AlgoElement;", 0x11, NULL, NULL },
    { "setDrawAlgorithmWithGeogebraCommonKernelAlgosDrawInformationAlgo:", "setDrawAlgorithm", "V", 0x1, NULL, NULL },
    { "getDrawAlgorithm", NULL, "Lgeogebra.common.kernel.algos.AlgoElement;", 0x11, NULL, NULL },
    { "getAlgorithmList", NULL, "Ljava.util.ArrayList;", 0x11, NULL, NULL },
    { "isIndependent", NULL, "Z", 0x1, NULL, NULL },
    { "isChangeable", NULL, "Z", 0x1, NULL, NULL },
    { "isPointOnPath", NULL, "Z", 0x1, NULL, NULL },
    { "isRedefineable", NULL, "Z", 0x1, NULL, NULL },
    { "isMoveable", NULL, "Z", 0x1, NULL, NULL },
    { "isMoveableWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "isMoveable", "Z", 0x1, NULL, NULL },
    { "hasMoveableInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "hasMoveableInputPoints", "Z", 0x1, NULL, NULL },
    { "getFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "getFreeInputPoints", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "hasOnlyFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "hasOnlyFreeInputPoints", "Z", 0x11, NULL, NULL },
    { "containsOnlyMoveableGeosWithJavaUtilArrayList:", "containsOnlyMoveableGeos", "Z", 0xa, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x1, NULL, NULL },
    { "isRotateMoveable", NULL, "Z", 0x1, NULL, NULL },
    { "hasProperties", NULL, "Z", 0x11, NULL, NULL },
    { "setAnimationStepWithDouble:", "setAnimationStep", "V", 0x1, NULL, NULL },
    { "setAnimationStepWithGeogebraCommonKernelArithmeticNumberValue:", "setAnimationStep", "V", 0x1, NULL, NULL },
    { "getAnimationStep", NULL, "D", 0x1, NULL, NULL },
    { "getAnimationStepObject", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getAnimationSpeedObject", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getAnimationSpeed", NULL, "D", 0x1, NULL, NULL },
    { "setAnimationSpeedObjectWithGeogebraCommonKernelArithmeticNumberValue:", "setAnimationSpeedObject", "V", 0x1, NULL, NULL },
    { "setAnimationSpeedWithDouble:", "setAnimationSpeed", "V", 0x1, NULL, NULL },
    { "initAnimationSpeedObject", NULL, "V", 0x2, NULL, NULL },
    { "getAnimationType", NULL, "I", 0x11, NULL, NULL },
    { "setAnimationTypeWithInt:", "setAnimationType", "V", 0x11, NULL, NULL },
    { "getAnimationDirection", NULL, "I", 0x4, NULL, NULL },
    { "changeAnimationDirection", NULL, "V", 0x4, NULL, NULL },
    { "setAnimatingWithBoolean:", "setAnimating", "V", 0x21, NULL, NULL },
    { "isAnimating", NULL, "Z", 0x11, NULL, NULL },
    { "isAnimatable", NULL, "Z", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toCasAssignmentWithGeogebraCommonKernelStringTemplate:", "toCasAssignment", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAssignmentLHSWithGeogebraCommonKernelStringTemplate:", "getAssignmentLHS", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCASStringWithGeogebraCommonKernelStringTemplate:withBoolean:", "getCASString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "addCellRangeUser", NULL, "V", 0x1, NULL, NULL },
    { "removeCellRangeUser", NULL, "V", 0x1, NULL, NULL },
    { "isRenameable", NULL, "Z", 0x1, NULL, NULL },
    { "renameWithNSString:", "rename", "Z", 0x1, NULL, NULL },
    { "isLabelSet", NULL, "Z", 0x1, NULL, NULL },
    { "setLabelWithNSString:", "setLabel", "V", 0x1, NULL, NULL },
    { "setLoadedLabelWithNSString:", "setLoadedLabel", "V", 0x1, NULL, NULL },
    { "setCaptionWithNSString:", "setCaption", "Z", 0x1, NULL, NULL },
    { "getCaptionSimple", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCaptionWithGeogebraCommonKernelStringTemplate:", "getCaption", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getRawCaption", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCaptionDescriptionWithGeogebraCommonKernelStringTemplate:", "getCaptionDescription", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setLocalVariableLabelWithNSString:", "setLocalVariableLabel", "V", 0x1, NULL, NULL },
    { "undoLocalVariableLabel", NULL, "V", 0x1, NULL, NULL },
    { "isLocalVariable", NULL, "Z", 0x1, NULL, NULL },
    { "doSetLabelWithNSString:", "doSetLabel", "V", 0x2, NULL, NULL },
    { "updateSpreadsheetCoordinates", NULL, "V", 0x2, NULL, NULL },
    { "getSpreadsheetLabelWithDollarsWithBoolean:withBoolean:", "getSpreadsheetLabelWithDollars", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "compareLabelsWithNSString:withNSString:", "compareLabels", "I", 0x19, NULL, NULL },
    { "doRenameLabelWithNSString:", "doRenameLabel", "V", 0x2, NULL, NULL },
    { "getOldLabel", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "setLabelsWithNSString:withGeogebraCommonKernelGeosGeoElementArray:", "setLabels", "V", 0x9, NULL, NULL },
    { "setLabelsWithNSStringArray:withGeogebraCommonKernelGeosGeoElementArray:", "setLabels", "V", 0x9, NULL, NULL },
    { "setLabelsWithNSStringArray:withGeogebraCommonKernelGeosGeoElementArray:withBoolean:", "setLabels", "V", 0x8, NULL, NULL },
    { "getFreeLabelWithNSString:", "getFreeLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDefaultLabelWithBoolean:", "getDefaultLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDefaultLabel", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDefaultLabelWithCharArray:withBoolean:", "getDefaultLabel", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "defaultNumberedLabelWithNSString:", "defaultNumberedLabel", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getIndexLabelWithNSString:", "getIndexLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isGeoTextField", NULL, "Z", 0x1, NULL, NULL },
    { "setEmptySpreadsheetCellWithBoolean:", "setEmptySpreadsheetCell", "V", 0x1, NULL, NULL },
    { "isEmptySpreadsheetCell", NULL, "Z", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "getLaTeXCache", NULL, "Lgeogebra.common.util.LaTeXCache;", 0x1, NULL, NULL },
    { "notifyAdd", NULL, "V", 0x11, NULL, NULL },
    { "notifyRemove", NULL, "V", 0x11, NULL, NULL },
    { "notifyUpdate", NULL, "V", 0x11, NULL, NULL },
    { "notifyUpdateAuxiliaryObject", NULL, "V", 0x11, NULL, NULL },
    { "addAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:", "addAlgorithm", "V", 0x11, NULL, NULL },
    { "addToAlgorithmListOnlyWithGeogebraCommonKernelAlgosAlgoElement:", "addToAlgorithmListOnly", "V", 0x11, NULL, NULL },
    { "addToUpdateSetOnlyWithGeogebraCommonKernelAlgosAlgoElement:", "addToUpdateSetOnly", "V", 0x11, NULL, NULL },
    { "removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:", "removeAlgorithm", "V", 0x11, NULL, NULL },
    { "getAlgoUpdateSet", NULL, "Lgeogebra.common.kernel.algos.AlgorithmSet;", 0x1, NULL, NULL },
    { "addToUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:", "addToUpdateSets", "Z", 0x1, NULL, NULL },
    { "removeFromUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:", "removeFromUpdateSets", "Z", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "updateGeo", NULL, "V", 0x14, NULL, NULL },
    { "algebraStringsNeedUpdate", NULL, "V", 0x2, NULL, NULL },
    { "updateCascade", NULL, "V", 0x1, NULL, NULL },
    { "updateDependentObjects", NULL, "V", 0x2, NULL, NULL },
    { "updateAlgoUpdateSetWithWithGeogebraCommonKernelGeosGeoElement:", "updateAlgoUpdateSetWith", "V", 0x4, NULL, NULL },
    { "hasAlgoUpdateSet", NULL, "Z", 0x1, NULL, NULL },
    { "updateCascadeWithJavaUtilArrayList:withJavaUtilTreeSet:withBoolean:", "updateCascade", "V", 0x39, NULL, NULL },
    { "updateCascadeLocationWithJavaUtilArrayList:withGeogebraCommonKernelConstruction:", "updateCascadeLocation", "V", 0x39, NULL, NULL },
    { "updateCascadeUntilWithJavaUtilArrayList:withJavaUtilTreeSet:withGeogebraCommonKernelAlgosAlgoElement:", "updateCascadeUntil", "V", 0x19, NULL, NULL },
    { "updateRepaint", NULL, "V", 0x1, NULL, NULL },
    { "updateVisualStyle", NULL, "V", 0x1, NULL, NULL },
    { "updateVisualStyleRepaint", NULL, "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x11, NULL, NULL },
    { "evaluateDouble", NULL, "D", 0x1, NULL, NULL },
    { "evaluateWithGeogebraCommonKernelStringTemplate:", "evaluate", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x11, NULL, NULL },
    { "getRandomNumberPredecessorsWithoutLabels", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getAllPredecessors", NULL, "Ljava.util.TreeSet;", 0x1, NULL, NULL },
    { "getAllIndependentPredecessors", NULL, "Ljava.util.TreeSet;", 0x1, NULL, NULL },
    { "addPredecessorsToSetWithJavaUtilTreeSet:withBoolean:", "addPredecessorsToSet", "V", 0x11, NULL, NULL },
    { "getAllRandomizablePredecessors", NULL, "Ljava.util.TreeSet;", 0x1, NULL, NULL },
    { "addRandomizablePredecessorsToSetWithJavaUtilTreeSet:", "addRandomizablePredecessorsToSet", "V", 0x11, NULL, NULL },
    { "isParentOfWithGeogebraCommonKernelKernelNDGeoElementND:", "isParentOf", "Z", 0x11, NULL, NULL },
    { "hasChildren", NULL, "Z", 0x11, NULL, NULL },
    { "isChildOfWithGeogebraCommonKernelGeosGeoElement:", "isChildOf", "Z", 0x11, NULL, NULL },
    { "isChildOrEqualWithGeogebraCommonKernelGeosGeoElement:", "isChildOrEqual", "Z", 0x11, NULL, NULL },
    { "getAllChildren", NULL, "Ljava.util.TreeSet;", 0x11, NULL, NULL },
    { "getGeoElements", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "isAlgoElement", NULL, "Z", 0x11, NULL, NULL },
    { "isGeoElement", NULL, "Z", 0x11, NULL, NULL },
    { "getConstructionIndex", NULL, "I", 0x11, NULL, NULL },
    { "getMinConstructionIndex", NULL, "I", 0x11, NULL, NULL },
    { "getMaxConstructionIndex", NULL, "I", 0x11, NULL, NULL },
    { "getDefinitionDescriptionWithGeogebraCommonKernelStringTemplate:", "getDefinitionDescription", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getDefinitionDescriptionHTMLWithBoolean:", "getDefinitionDescriptionHTML", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getCommandDescriptionWithGeogebraCommonKernelStringTemplate:", "getCommandDescription", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getCommandDescriptionHTMLWithBoolean:", "getCommandDescriptionHTML", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "convertIndicesToHTMLWithNSString:withGeogebraCommonUtilIndexHTMLBuilder:", "convertIndicesToHTML", "V", 0x9, NULL, NULL },
    { "addLabelTextOrHTMLWithNSString:withGeogebraCommonUtilIndexHTMLBuilder:", "addLabelTextOrHTML", "V", 0x11, NULL, NULL },
    { "getCaptionDescriptionHTMLWithBoolean:withGeogebraCommonKernelStringTemplate:", "getCaptionDescriptionHTML", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getXMLtypeString", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTypeStringForAlgebraView", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "translatedTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "translatedTypeStringForAlgebraView", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLongDescription", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getLongDescriptionHTMLWithBoolean:withBoolean:", "getLongDescriptionHTML", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getColoredLabel", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getToolTipDescriptionHTMLWithJavaUtilArrayList:withBoolean:withBoolean:withBoolean:", "getToolTipDescriptionHTML", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "getLabelDescription", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toDefinedValueStringWithGeogebraCommonKernelStringTemplate:", "toDefinedValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getAlgebraDescriptionTextOrHTMLDefaultWithGeogebraCommonUtilIndexHTMLBuilder:", "getAlgebraDescriptionTextOrHTMLDefault", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getAlgebraDescriptionHTMLDefault", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getLabelTextOrHTML", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getLabelTextOrHTMLWithBoolean:", "getLabelTextOrHTML", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getAlgebraDescriptionWithGeogebraCommonKernelStringTemplate:", "getAlgebraDescription", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getAlgebraDescriptionDefault", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getAlgebraDescriptionRegrOutWithGeogebraCommonKernelStringTemplate:", "getAlgebraDescriptionRegrOut", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toStringMinimalWithGeogebraCommonKernelStringTemplate:", "toStringMinimal", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLaTeXdescription", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLaTeXAlgebraDescriptionWithBoolean:withGeogebraCommonKernelStringTemplate:", "getLaTeXAlgebraDescription", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLaTeXAlgebraDescriptionWithGeogebraCommonKernelGeosGeoElement:withBoolean:withGeogebraCommonKernelStringTemplate:", "getLaTeXAlgebraDescription", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "indicesToHTMLWithNSString:withBoolean:", "indicesToHTML", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "indicesToHTMLWithNSString:withGeogebraCommonUtilIndexHTMLBuilder:", "indicesToHTML", "V", 0x9, NULL, NULL },
    { "getNameDescription", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNameDescriptionTextOrHTML", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "hasIndexLabel", NULL, "Z", 0x11, NULL, NULL },
    { "getNameDescriptionHTMLWithBoolean:withBoolean:", "getNameDescriptionHTML", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isAxis", NULL, "Z", 0x1, NULL, NULL },
    { "getXML", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLWithBoolean:withJavaLangStringBuilder:", "getXML", "V", 0x1, NULL, NULL },
    { "getListenerTagsXMLWithJavaLangStringBuilder:", "getListenerTagsXML", "V", 0x4, NULL, NULL },
    { "getListenerTagXMLWithJavaLangStringBuilder:withJavaUtilHashMap:withNSString:", "getListenerTagXML", "V", 0x2, NULL, NULL },
    { "getElementOpenTagXMLWithJavaLangStringBuilder:", "getElementOpenTagXML", "V", 0x4, NULL, NULL },
    { "getElementCloseTagXMLWithJavaLangStringBuilder:", "getElementCloseTagXML", "V", 0x4, NULL, NULL },
    { "getScriptTagsWithJavaLangStringBuilder:", "getScriptTags", "V", 0x1, NULL, NULL },
    { "getCaptionXMLWithJavaLangStringBuilder:", "getCaptionXML", "V", 0x11, NULL, NULL },
    { "getAuxiliaryXMLWithJavaLangStringBuilder:", "getAuxiliaryXML", "V", 0x14, NULL, NULL },
    { "getXMLvisualTagsWithJavaLangStringBuilder:", "getXMLvisualTags", "V", 0x4, NULL, NULL },
    { "getXMLvisualTagsWithJavaLangStringBuilder:withBoolean:", "getXMLvisualTags", "V", 0x4, NULL, NULL },
    { "appendObjectColorXMLWithJavaLangStringBuilder:", "appendObjectColorXML", "V", 0x4, NULL, NULL },
    { "getXMLanimationTagsWithJavaLangStringBuilder:", "getXMLanimationTags", "V", 0x4, NULL, NULL },
    { "getXMLfixedTagWithJavaLangStringBuilder:", "getXMLfixedTag", "V", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getExtraTagsXMLWithJavaLangStringBuilder:", "getExtraTagsXML", "V", 0x2, NULL, NULL },
    { "getXMLtagsMinimalWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "getXMLtagsMinimal", "V", 0x1, NULL, NULL },
    { "toValueStringMinimalWithGeogebraCommonKernelStringTemplate:", "toValueStringMinimal", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "regrFormatWithDouble:", "regrFormat", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getLineStyleXMLWithJavaLangStringBuilder:", "getLineStyleXML", "V", 0x4, NULL, NULL },
    { "getBreakpointXMLWithJavaLangStringBuilder:", "getBreakpointXML", "V", 0x1, NULL, NULL },
    { "getShowObjectConditionXML", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getLineThickness", NULL, "I", 0x11, NULL, NULL },
    { "getMinimumLineThickness", NULL, "I", 0x1, NULL, NULL },
    { "getLineType", NULL, "I", 0x11, NULL, NULL },
    { "getLineTypeHidden", NULL, "I", 0x1, NULL, NULL },
    { "setLineThicknessWithInt:", "setLineThickness", "V", 0x1, NULL, NULL },
    { "setLineThicknessOrVisibilityWithInt:", "setLineThicknessOrVisibility", "V", 0x1, NULL, NULL },
    { "setLineTypeWithInt:", "setLineType", "V", 0x1, NULL, NULL },
    { "setLineTypeHiddenWithInt:", "setLineTypeHidden", "V", 0x1, NULL, NULL },
    { "setDecorationTypeWithInt:", "setDecorationType", "V", 0x1, NULL, NULL },
    { "isGeoElement3D", NULL, "Z", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "hasLevelOfDetail", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoAngle", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoBoolean", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoPolyLine", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoImplicitPoly", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoConic", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoConicPart", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoFunction", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoFunctionNVar", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoFunctionBoolean", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoFunctionConditional", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoFunctionable", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoImage", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoTurtle", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoLine", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoPlane", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoQuadric", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoLocus", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoNumeric", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoPoint", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoCasCell", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoPolygon", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoPolyhedron", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoRay", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoSegment", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoText", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoVector", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoCurveCartesian", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoSurfaceCartesian", NULL, "Z", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x1, NULL, NULL },
    { "isExpressionNode", NULL, "Z", 0x11, NULL, NULL },
    { "isVariable", NULL, "Z", 0x11, NULL, NULL },
    { "containsWithGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "setSelectedWithBoolean:", "setSelected", "V", 0x1, NULL, NULL },
    { "setHighlightedWithBoolean:", "setHighlighted", "V", 0x11, NULL, NULL },
    { "doHighlighting", NULL, "Z", 0x11, NULL, NULL },
    { "isSelected", NULL, "Z", 0x11, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "isAngle", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToNonComplex2DVector", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToVectorNotPoint", NULL, "Z", 0x1, NULL, NULL },
    { "isPolynomialInstance", NULL, "Z", 0x11, NULL, NULL },
    { "evaluatesToText", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToList", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoButton", NULL, "Z", 0x1, NULL, NULL },
    { "isUseVisualDefaults", NULL, "Z", 0x11, NULL, NULL },
    { "setUseVisualDefaultsWithBoolean:", "setUseVisualDefaults", "V", 0x11, NULL, NULL },
    { "isAbsoluteScreenLocateable", NULL, "Z", 0x1, NULL, NULL },
    { "getShowObjectCondition", NULL, "Lgeogebra.common.kernel.geos.GeoBoolean;", 0x11, NULL, NULL },
    { "setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:", "setShowObjectCondition", "V", 0x1, "Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
    { "removeConditionWithGeogebraCommonKernelGeosGeoBoolean:", "removeCondition", "V", 0x11, NULL, NULL },
    { "getColorFunction", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x11, NULL, NULL },
    { "setColorFunctionWithGeogebraCommonKernelGeosGeoList:", "setColorFunction", "V", 0x1, NULL, NULL },
    { "removeColorFunction", NULL, "V", 0x1, NULL, NULL },
    { "moveObjectsWithJavaUtilArrayList:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonEuclidianEuclidianView:", "moveObjects", "Z", 0x9, NULL, NULL },
    { "getTempSet", NULL, "Ljava.util.TreeSet;", 0xc, NULL, NULL },
    { "movePointWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "movePoint", "Z", 0x4, NULL, NULL },
    { "moveVectorWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "moveVector", "Z", 0x4, NULL, NULL },
    { "moveObjectWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withJavaUtilArrayList:withGeogebraCommonEuclidianEuclidianView:", "moveObject", "Z", 0x2, NULL, NULL },
    { "moveFromChangeableCoordParentNumbersWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withJavaUtilArrayList:withJavaUtilArrayList:withGeogebraCommonEuclidianEuclidianView:", "moveFromChangeableCoordParentNumbers", "Z", 0x1, NULL, NULL },
    { "hasChangeableCoordParentNumbers", NULL, "Z", 0x1, NULL, NULL },
    { "recordChangeableCoordParentNumbers", NULL, "V", 0x1, NULL, NULL },
    { "addChangeableCoordParentNumberToUpdateListWithGeogebraCommonKernelGeosGeoElement:withJavaUtilArrayList:withJavaUtilArrayList:", "addChangeableCoordParentNumberToUpdateList", "V", 0x1c, NULL, NULL },
    { "addParentToUpdateListWithGeogebraCommonKernelGeosGeoElement:withJavaUtilArrayList:withJavaUtilArrayList:", "addParentToUpdateList", "V", 0x1a, NULL, NULL },
    { "getSpreadsheetCoords", NULL, "Lgeogebra.common.awt.GPoint;", 0x1, NULL, NULL },
    { "setSpreadsheetCoordsWithGeogebraCommonAwtGPoint:", "setSpreadsheetCoords", "V", 0x1, NULL, NULL },
    { "getOldSpreadsheetCoords", NULL, "Lgeogebra.common.awt.GPoint;", 0x1, NULL, NULL },
    { "isAlgoMacroOutput", NULL, "Z", 0x11, NULL, NULL },
    { "setAlgoMacroOutputWithBoolean:", "setAlgoMacroOutput", "V", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x401, NULL, NULL },
    { "isDifferenceZeroInCASWithGeogebraCommonKernelGeosGeoElement:", "isDifferenceZeroInCAS", "Z", 0x11, NULL, NULL },
    { "getFormulaStringWithGeogebraCommonKernelStringTemplate:withBoolean:", "getFormulaString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getSpreadsheetTrace", NULL, "Z", 0x1, NULL, NULL },
    { "setSpreadsheetTraceWithBoolean:", "setSpreadsheetTrace", "V", 0x1, NULL, NULL },
    { "resetTraceColumns", NULL, "V", 0x1, NULL, NULL },
    { "isSpreadsheetTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "hasSpreadsheetTraceModeTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "getTraceSettings", NULL, "Lgeogebra.common.util.SpreadsheetTraceSettings;", 0x1, NULL, NULL },
    { "setTraceSettingsWithGeogebraCommonUtilSpreadsheetTraceSettings:", "setTraceSettings", "V", 0x1, NULL, NULL },
    { "getGeoElementForPropertiesDialog", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isTextCommand", NULL, "Z", 0x1, NULL, NULL },
    { "isInTree", NULL, "Z", 0x11, NULL, NULL },
    { "setInTreeWithBoolean:", "setInTree", "V", 0x11, NULL, NULL },
    { "setClickScriptWithGeogebraCommonPluginScriptScript:", "setClickScript", "V", 0x1, NULL, NULL },
    { "setUpdateScriptWithGeogebraCommonPluginScriptScript:", "setUpdateScript", "V", 0x1, NULL, NULL },
    { "setScriptWithGeogebraCommonPluginScriptScript:withGeogebraCommonPluginEventTypeEnum:", "setScript", "V", 0x1, NULL, NULL },
    { "canHaveUpdateScript", NULL, "Z", 0x1, NULL, NULL },
    { "getScriptWithGeogebraCommonPluginEventTypeEnum:", "getScript", "Lgeogebra.common.plugin.script.Script;", 0x1, NULL, NULL },
    { "runClickScriptsWithNSString:", "runClickScripts", "V", 0x1, NULL, NULL },
    { "setShowTrimmedIntersectionLinesWithBoolean:", "setShowTrimmedIntersectionLines", "V", 0x1, NULL, NULL },
    { "getShowTrimmedIntersectionLines", NULL, "Z", 0x1, NULL, NULL },
    { "isPointInRegion", NULL, "Z", 0x1, NULL, NULL },
    { "setRandomGeoWithBoolean:", "setRandomGeo", "V", 0x1, NULL, NULL },
    { "isRandomGeo", NULL, "Z", 0x1, NULL, NULL },
    { "updateRandomGeo", NULL, "V", 0x1, NULL, NULL },
    { "isMatrixTransformable", NULL, "Z", 0x1, NULL, NULL },
    { "setVisibilityWithInt:withBoolean:", "setVisibility", "V", 0x1, NULL, NULL },
    { "isVisibleInViewWithInt:", "isVisibleInView", "Z", 0x1, NULL, NULL },
    { "addViewWithInt:", "addView", "V", 0x11, NULL, NULL },
    { "removeViewWithInt:", "removeView", "V", 0x1, NULL, NULL },
    { "setViewFlagsWithJavaUtilList:", "setViewFlags", "V", 0x1, NULL, NULL },
    { "getViewSet", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "isVisibleInView3D", NULL, "Z", 0x1, NULL, NULL },
    { "setVisibleInView3DWithBoolean:", "setVisibleInView3D", "V", 0x1, NULL, NULL },
    { "setVisibleInView3DWithGeogebraCommonKernelGeosGeoElement:", "setVisibleInView3D", "V", 0x1, NULL, NULL },
    { "setSelectionAllowedWithBoolean:", "setSelectionAllowed", "V", 0x1, NULL, NULL },
    { "isSelectionAllowed", NULL, "Z", 0x1, NULL, NULL },
    { "setRealLabelWithNSString:", "setRealLabel", "V", 0x1, NULL, NULL },
    { "isHatchingEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "setHatchingAngleWithInt:", "setHatchingAngle", "V", 0x1, NULL, NULL },
    { "getHatchingAngle", NULL, "D", 0x1, NULL, NULL },
    { "setHatchingDistanceWithInt:", "setHatchingDistance", "V", 0x1, NULL, NULL },
    { "getHatchingDistance", NULL, "I", 0x1, NULL, NULL },
    { "getFillImage", NULL, "Lgeogebra.common.awt.MyImage;", 0x1, NULL, NULL },
    { "setFillImageWithNSString:", "setFillImage", "V", 0x1, NULL, NULL },
    { "getFillType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$FillType;", 0x1, NULL, NULL },
    { "setFillTypeWithGeogebraCommonKernelGeosGeoElement_FillTypeEnum:", "setFillType", "V", 0x1, NULL, NULL },
    { "setImageFileNameWithNSString:", "setImageFileName", "V", 0x1, NULL, NULL },
    { "getImageFileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setInverseFillWithBoolean:", "setInverseFill", "V", 0x1, NULL, NULL },
    { "isInverseFill", NULL, "Z", 0x1, NULL, NULL },
    { "getMainDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "distanceWithGeogebraCommonKernelGeosGeoPoint:", "distance", "D", 0x1, NULL, NULL },
    { "distanceWithGeogebraCommonKernelKernelNDGeoPointND:", "distance", "D", 0x1, NULL, NULL },
    { "canHaveClickScript", NULL, "Z", 0x1, NULL, NULL },
    { "setIsPickableWithBoolean:", "setIsPickable", "V", 0x1, NULL, NULL },
    { "isPickable", NULL, "Z", 0x1, NULL, NULL },
    { "needsReplacingInExpressionNode", NULL, "Z", 0x1, NULL, NULL },
    { "setNeedsReplacingInExpressionNode", NULL, "V", 0x1, NULL, NULL },
    { "isGeoInterval", NULL, "Z", 0x1, NULL, NULL },
    { "getMeasure", NULL, "D", 0x1, NULL, NULL },
    { "moveDependenciesWithGeogebraCommonKernelGeosGeoElement:", "moveDependencies", "V", 0x1, NULL, NULL },
    { "storeClone", NULL, "V", 0x1, NULL, NULL },
    { "recoverFromClone", NULL, "V", 0x1, NULL, NULL },
    { "randomizeForProbabilisticChecking", NULL, "V", 0x1, NULL, NULL },
    { "isRandomizable", NULL, "Z", 0x1, NULL, NULL },
    { "getCorrespondingCasCell", NULL, "Lgeogebra.common.kernel.geos.GeoCasCell;", 0x11, NULL, NULL },
    { "setCorrespondingCasCellWithGeogebraCommonKernelGeosGeoCasCell:", "setCorrespondingCasCell", "V", 0x11, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "hasBackgroundColor", NULL, "Z", 0x1, NULL, NULL },
    { "algoUpdateSetContainsWithGeogebraCommonKernelAlgosAlgoElement:", "algoUpdateSetContains", "Z", 0x1, NULL, NULL },
    { "resetSpreadsheetColumnHeadings", NULL, "V", 0x4, NULL, NULL },
    { "getColumnHeadings", NULL, "Ljava.util.ArrayList;", 0x11, NULL, NULL },
    { "updateColumnHeadingsForTraceValues", NULL, "V", 0x1, NULL, NULL },
    { "getTraceDialogAsValues", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTraceModes", NULL, "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", 0x1, NULL, NULL },
    { "updateColumnHeadingsForTraceGeoCopy", NULL, "V", 0x4, NULL, NULL },
    { "getNameGeo", NULL, "Lgeogebra.common.kernel.geos.GeoText;", 0x4, NULL, NULL },
    { "getColumnHeadingTextWithGeogebraCommonKernelArithmeticExpressionNode:", "getColumnHeadingText", "Lgeogebra.common.kernel.geos.GeoText;", 0x4, NULL, NULL },
    { "getXBracket", NULL, "Lgeogebra.common.kernel.arithmetic.MyStringBuffer;", 0x4, NULL, NULL },
    { "getYBracket", NULL, "Lgeogebra.common.kernel.arithmetic.MyStringBuffer;", 0x4, NULL, NULL },
    { "getZBracket", NULL, "Lgeogebra.common.kernel.arithmetic.MyStringBuffer;", 0x4, NULL, NULL },
    { "getCloseBracket", NULL, "Lgeogebra.common.kernel.arithmetic.MyStringBuffer;", 0x4, NULL, NULL },
    { "addToSpreadsheetTraceListWithJavaUtilArrayList:", "addToSpreadsheetTraceList", "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "traverseWithGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, NULL, NULL },
    { "inspectWithGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x11, NULL, NULL },
    { "getMetasLength", NULL, "I", 0x1, NULL, NULL },
    { "unwrap", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "wrap", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "isPinnable", NULL, "Z", 0x1, NULL, NULL },
    { "isPinned", NULL, "Z", 0x11, NULL, NULL },
    { "hasCoords", NULL, "Z", 0x1, NULL, NULL },
    { "setScriptingWithGeogebraCommonKernelGeosGeoElement:", "setScripting", "V", 0x1, NULL, NULL },
    { "derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:", "derivative", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "integralWithGeogebraCommonKernelArithmeticFunctionVariable:", "integral", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "isMatrix", NULL, "Z", 0x1, NULL, NULL },
    { "getFillSymbol", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setFillSymbolWithNSString:", "setFillSymbol", "V", 0x1, NULL, NULL },
    { "getDecorationType", NULL, "I", 0x1, NULL, NULL },
    { "buildEquationElementWithGeogebraCommonKernelLocusequEquationScope:", "buildEquationElement", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
    { "setSendValueToCasWithBoolean:", "setSendValueToCas", "V", 0x1, NULL, NULL },
    { "getSendValueToCas", NULL, "Z", 0x1, NULL, NULL },
    { "setCaptionBotanaVarsWithNSString:", "setCaptionBotanaVars", "V", 0x1, NULL, NULL },
    { "addCaptionBotanaPolynomialWithNSString:", "addCaptionBotanaPolynomial", "V", 0x1, NULL, NULL },
    { "showLineProperties", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesTo3DVector", NULL, "Z", 0x1, NULL, NULL },
    { "setCanBeRemovedAsInputWithBoolean:", "setCanBeRemovedAsInput", "V", 0x1, NULL, NULL },
    { "canBeRemovedAsInput", NULL, "Z", 0x1, NULL, NULL },
    { "hasLineOpacity", NULL, "Z", 0x1, NULL, NULL },
    { "getLineOpacity", NULL, "I", 0x1, NULL, NULL },
    { "setLineOpacityWithInt:", "setLineOpacity", "V", 0x1, NULL, NULL },
    { "evaluatesToNumberWithBoolean:", "evaluatesToNumber", "Z", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x401, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "spreadsheetColumnHeadings_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoText;>;",  },
    { "MIN_EDITING_PRINT_PRECISION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_MIN_EDITING_PRINT_PRECISION },
    { "MAX_LABEL_OFFSET_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_MAX_LABEL_OFFSET },
    { "pointLabels_", NULL, 0x1a, "[C", &GeogebraCommonKernelGeosGeoElement_pointLabels_, NULL,  },
    { "functionLabels_", NULL, 0x1a, "[C", &GeogebraCommonKernelGeosGeoElement_functionLabels_, NULL,  },
    { "lineLabels_", NULL, 0x1a, "[C", &GeogebraCommonKernelGeosGeoElement_lineLabels_, NULL,  },
    { "vectorLabels_", NULL, 0x1a, "[C", &GeogebraCommonKernelGeosGeoElement_vectorLabels_, NULL,  },
    { "conicLabels_", NULL, 0x1a, "[C", &GeogebraCommonKernelGeosGeoElement_conicLabels_, NULL,  },
    { "lowerCaseLabels_", NULL, 0x1a, "[C", &GeogebraCommonKernelGeosGeoElement_lowerCaseLabels_, NULL,  },
    { "integerLabels_", NULL, 0x1a, "[C", &GeogebraCommonKernelGeosGeoElement_integerLabels_, NULL,  },
    { "greekLowerCase_", NULL, 0x1a, "[C", &GeogebraCommonKernelGeosGeoElement_greekLowerCase_, NULL,  },
    { "arabic_", NULL, 0x1a, "[C", &GeogebraCommonKernelGeosGeoElement_arabic_, NULL,  },
    { "yiddish_", NULL, 0x1a, "[C", &GeogebraCommonKernelGeosGeoElement_yiddish_, NULL,  },
    { "greekUpperCase_", NULL, 0x1a, "[C", &GeogebraCommonKernelGeosGeoElement_greekUpperCase_, NULL,  },
    { "LABEL_NAME_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_LABEL_NAME },
    { "LABEL_NAME_VALUE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE },
    { "LABEL_VALUE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_LABEL_VALUE },
    { "LABEL_CAPTION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_LABEL_CAPTION },
    { "TOOLTIP_ALGEBRAVIEW_SHOWING_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_TOOLTIP_ALGEBRAVIEW_SHOWING },
    { "TOOLTIP_ON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_TOOLTIP_ON },
    { "TOOLTIP_OFF_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_TOOLTIP_OFF },
    { "TOOLTIP_CAPTION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_TOOLTIP_CAPTION },
    { "TOOLTIP_NEXTCELL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_TOOLTIP_NEXTCELL },
    { "tooltipMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "label_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "realLabel_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "oldLabel_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "caption_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "labelWanted_", NULL, 0x1, "Z", NULL, NULL,  },
    { "labelSet_", NULL, 0x1, "Z", NULL, NULL,  },
    { "localVarLabelSet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "euclidianVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "forceEuclidianVisible__", "forceEuclidianVisible", 0x2, "Z", NULL, NULL,  },
    { "algebraVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isConsProtBreakpoint_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isAlgoMacroOutput__", "isAlgoMacroOutput", 0x2, "Z", NULL, NULL,  },
    { "fixed_", NULL, 0x4, "Z", NULL, NULL,  },
    { "labelMode_", NULL, 0x1, "I", NULL, NULL,  },
    { "toStringMode_", NULL, 0x1, "I", NULL, NULL,  },
    { "objColor_", NULL, 0x4, "Lgeogebra.common.awt.GColor;", NULL, NULL,  },
    { "bgColor_", NULL, 0x4, "Lgeogebra.common.awt.GColor;", NULL, NULL,  },
    { "selColor_", NULL, 0x4, "Lgeogebra.common.awt.GColor;", NULL, NULL,  },
    { "labelColor_", NULL, 0x4, "Lgeogebra.common.awt.GColor;", NULL, NULL,  },
    { "fillColor_", NULL, 0x4, "Lgeogebra.common.awt.GColor;", NULL, NULL,  },
    { "layer_", NULL, 0x2, "I", NULL, NULL,  },
    { "animationIncrement_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "animationSpeedObj_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "correspondingCasCell_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoCasCell;", NULL, NULL,  },
    { "animating_", NULL, 0x2, "Z", NULL, NULL,  },
    { "MAX_ANIMATION_SPEED_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelGeosGeoElement_MAX_ANIMATION_SPEED },
    { "ANIMATION_OSCILLATING_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_ANIMATION_OSCILLATING },
    { "ANIMATION_INCREASING_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING },
    { "ANIMATION_DECREASING_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_ANIMATION_DECREASING },
    { "ANIMATION_INCREASING_ONCE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING_ONCE },
    { "animationType_", NULL, 0x2, "I", NULL, NULL,  },
    { "animationDirection_", NULL, 0x2, "I", NULL, NULL,  },
    { "alphaValue_", NULL, 0x4, "F", NULL, NULL,  },
    { "hatchingAngle_", NULL, 0x4, "I", NULL, NULL,  },
    { "hatchingDistance_", NULL, 0x4, "I", NULL, NULL,  },
    { "inverseFill_", NULL, 0x2, "Z", NULL, NULL,  },
    { "fillSymbol_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "graphicsadapter_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElementGraphicsAdapter;", NULL, NULL,  },
    { "fillType_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement$FillType;", NULL, NULL,  },
    { "COLORSPACE_RGB_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_COLORSPACE_RGB },
    { "COLORSPACE_HSB_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_COLORSPACE_HSB },
    { "COLORSPACE_HSL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_COLORSPACE_HSL },
    { "colorSpace_", NULL, 0x2, "I", NULL, NULL,  },
    { "viewFlags_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Integer;>;",  },
    { "defaultGeoType_", NULL, 0x2, "I", NULL, NULL,  },
    { "labelOffsetX_", NULL, 0x1, "I", NULL, NULL,  },
    { "labelOffsetY_", NULL, 0x1, "I", NULL, NULL,  },
    { "auxiliaryObject_", NULL, 0x2, "Z", NULL, NULL,  },
    { "selectionAllowed_", NULL, 0x2, "Z", NULL, NULL,  },
    { "spreadsheetCoords_", NULL, 0x2, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "oldSpreadsheetCoords_", NULL, 0x2, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "cellRangeUsers_", NULL, 0x2, "I", NULL, NULL,  },
    { "condShowObject_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "sendValueToCas_", NULL, 0x4, "Z", NULL, NULL,  },
    { "colFunction_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "useVisualDefaults_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isColorSet__", "isColorSet", 0x4, "Z", NULL, NULL,  },
    { "highlighted_", NULL, 0x4, "Z", NULL, NULL,  },
    { "selected_", NULL, 0x2, "Z", NULL, NULL,  },
    { "strAlgebraDescription_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "strAlgebraDescTextOrHTML_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "strAlgebraDescriptionHTML_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "strLabelTextOrHTML_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "strLaTeX_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "strAlgebraDescriptionNeedsUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "strAlgebraDescTextOrHTMLneedsUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "strAlgebraDescriptionHTMLneedsUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "strLabelTextOrHTMLUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "strLaTeXneedsUpdate_", NULL, 0x4, "Z", NULL, NULL,  },
    { "lineThickness_", NULL, 0x1, "I", NULL, NULL,  },
    { "lineType_", NULL, 0x1, "I", NULL, NULL,  },
    { "lineTypeHidden_", NULL, 0x1, "I", NULL, NULL,  },
    { "lineOpacity_", NULL, 0x2, "I", NULL, NULL,  },
    { "decorationType_", NULL, 0x1, "I", NULL, NULL,  },
    { "DECORATION_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_DECORATION_NONE },
    { "DECORATION_SEGMENT_ONE_TICK_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_ONE_TICK },
    { "DECORATION_SEGMENT_TWO_TICKS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_TWO_TICKS },
    { "DECORATION_SEGMENT_THREE_TICKS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_THREE_TICKS },
    { "DECORATION_SEGMENT_ONE_ARROW_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_ONE_ARROW },
    { "DECORATION_SEGMENT_TWO_ARROWS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_TWO_ARROWS },
    { "DECORATION_SEGMENT_THREE_ARROWS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_DECORATION_SEGMENT_THREE_ARROWS },
    { "DECORATION_ANGLE_TWO_ARCS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_ARCS },
    { "DECORATION_ANGLE_THREE_ARCS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_ARCS },
    { "DECORATION_ANGLE_ONE_TICK_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ONE_TICK },
    { "DECORATION_ANGLE_TWO_TICKS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_TICKS },
    { "DECORATION_ANGLE_THREE_TICKS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_TICKS },
    { "DECORATION_ANGLE_ARROW_ANTICLOCKWISE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_ANTICLOCKWISE },
    { "DECORATION_ANGLE_ARROW_CLOCKWISE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_CLOCKWISE },
    { "algoParent_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement;", NULL, NULL,  },
    { "algoDraw_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement;", NULL, NULL,  },
    { "algorithmList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/algos/AlgoElement;>;",  },
    { "algoUpdateSet_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgorithmSet;", NULL, NULL,  },
    { "viewForValueString_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianViewInterfaceSlim;", NULL, NULL,  },
    { "MAX_LINE_WIDTH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElement_MAX_LINE_WIDTH },
    { "isEmptySpreadsheetCell__", "isEmptySpreadsheetCell", 0x2, "Z", NULL, NULL,  },
    { "latexCache_", NULL, 0x2, "Lgeogebra.common.util.LaTeXCache;", NULL, NULL,  },
    { "subBegin_", NULL, 0xa, "Ljava.lang.String;", &GeogebraCommonKernelGeosGeoElement_subBegin_, NULL,  },
    { "subEnd_", NULL, 0xa, "Ljava.lang.String;", &GeogebraCommonKernelGeosGeoElement_subEnd_, NULL,  },
    { "strHasIndexLabel_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "hasIndexLabel__", "hasIndexLabel", 0x2, "Z", NULL, NULL,  },
    { "moveObjectsUpdateList_", NULL, 0x4a, "Ljava.util.ArrayList;", &GeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "tempSet_", NULL, 0x4a, "Ljava.util.TreeSet;", &GeogebraCommonKernelGeosGeoElement_tempSet_, "Ljava/util/TreeSet<Lgeogebra/common/kernel/algos/AlgoElement;>;",  },
    { "algoComparator_", NULL, 0xa, "Ljava.util.Comparator;", &GeogebraCommonKernelGeosGeoElement_algoComparator_, "Ljava/util/Comparator<Lgeogebra/common/kernel/algos/AlgoElement;>;",  },
    { "tempMoveObjectList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "spreadsheetTrace_", NULL, 0x2, "Z", NULL, NULL,  },
    { "traceSettings_", NULL, 0x2, "Lgeogebra.common.util.SpreadsheetTraceSettings;", NULL, NULL,  },
    { "inTree_", NULL, 0x2, "Z", NULL, NULL,  },
    { "scripts_", NULL, 0x2, "[Lgeogebra.common.plugin.script.Script;", NULL, NULL,  },
    { "showTrimmedIntersectionLines_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isRandomGeo__", "isRandomGeo", 0x2, "Z", NULL, NULL,  },
    { "visibleInView3D_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement$VisibleInView3D;", NULL, NULL,  },
    { "isPickable__", "isPickable", 0x2, "Z", NULL, NULL,  },
    { "needsReplacingInExpressionNode__", "needsReplacingInExpressionNode", 0x2, "Z", NULL, NULL,  },
    { "tempClone_", NULL, 0x2, "Ljava.util.Stack;", NULL, "Ljava/util/Stack<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "cloneInUse_", NULL, 0x2, "Z", NULL, NULL,  },
    { "xBracket_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyStringBuffer;", NULL, NULL,  },
    { "yBracket_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyStringBuffer;", NULL, NULL,  },
    { "zBracket_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyStringBuffer;", NULL, NULL,  },
    { "closeBracket_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyStringBuffer;", NULL, NULL,  },
    { "canBeRemovedAsInput__", "canBeRemovedAsInput", 0x2, "Z", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.geos.GeoElement$FillType;", "Lgeogebra.common.kernel.geos.GeoElement$VisibleInView3D;", "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", "Lgeogebra.common.kernel.geos.GeoElement$HitType;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoElement = { 2, "GeoElement", "geogebra.common.kernel.geos", NULL, 0x401, 483, methods, 145, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoElement;
}

@end

void GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoElement *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelAlgosConstructionElement_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelGeosGeoElement_set_spreadsheetColumnHeadings_(self, nil);
  self->tooltipMode_ = GeogebraCommonKernelGeosGeoElement_TOOLTIP_ALGEBRAVIEW_SHOWING;
  self->labelWanted_ = NO;
  self->labelSet_ = NO;
  self->localVarLabelSet_ = NO;
  self->euclidianVisible_ = YES;
  self->forceEuclidianVisible__ = NO;
  self->algebraVisible_ = YES;
  self->labelVisible_ = YES;
  self->fixed_ = NO;
  self->labelMode_ = GeogebraCommonKernelGeosGeoElement_LABEL_NAME;
  self->toStringMode_ = GeogebraCommonKernelKernel_COORD_CARTESIAN;
  GeogebraCommonKernelGeosGeoElement_set_objColor_(self, GeogebraCommonAwtGColor_get_black_());
  GeogebraCommonKernelGeosGeoElement_set_bgColor_(self, nil);
  GeogebraCommonKernelGeosGeoElement_set_selColor_(self, self->objColor_);
  GeogebraCommonKernelGeosGeoElement_set_labelColor_(self, self->objColor_);
  GeogebraCommonKernelGeosGeoElement_set_fillColor_(self, self->objColor_);
  self->layer_ = 0;
  self->animating_ = NO;
  self->animationType_ = GeogebraCommonKernelGeosGeoElement_ANIMATION_OSCILLATING;
  self->animationDirection_ = 1;
  self->alphaValue_ = 0.0f;
  self->hatchingAngle_ = 45;
  self->hatchingDistance_ = 10;
  self->inverseFill_ = NO;
  GeogebraCommonKernelGeosGeoElement_set_fillSymbol_(self, nil);
  GeogebraCommonKernelGeosGeoElement_set_fillType_(self, GeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_STANDARD());
  self->colorSpace_ = GeogebraCommonKernelGeosGeoElement_COLORSPACE_RGB;
  GeogebraCommonKernelGeosGeoElement_set_viewFlags_(self, nil);
  self->defaultGeoType_ = -1;
  self->labelOffsetX_ = 0;
  self->labelOffsetY_ = 0;
  self->auxiliaryObject_ = NO;
  self->selectionAllowed_ = YES;
  self->cellRangeUsers_ = 0;
  self->sendValueToCas_ = YES;
  self->useVisualDefaults_ = YES;
  self->isColorSet__ = NO;
  self->highlighted_ = NO;
  self->selected_ = NO;
  self->strAlgebraDescriptionNeedsUpdate_ = YES;
  self->strAlgebraDescTextOrHTMLneedsUpdate_ = YES;
  self->strAlgebraDescriptionHTMLneedsUpdate_ = YES;
  self->strLabelTextOrHTMLUpdate_ = YES;
  self->strLaTeXneedsUpdate_ = YES;
  self->lineThickness_ = GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_THICKNESS;
  self->lineType_ = GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_TYPE;
  self->lineTypeHidden_ = GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_TYPE_HIDDEN;
  self->lineOpacity_ = 255;
  self->decorationType_ = GeogebraCommonKernelGeosGeoElement_DECORATION_NONE;
  GeogebraCommonKernelGeosGeoElement_set_algoParent_(self, nil);
  GeogebraCommonKernelGeosGeoElement_set_algoDraw_(self, nil);
  self->isEmptySpreadsheetCell__ = NO;
  GeogebraCommonKernelGeosGeoElement_set_latexCache_(self, nil);
  self->hasIndexLabel__ = NO;
  self->inTree_ = NO;
  GeogebraCommonKernelGeosGeoElement_set_scripts_(self, nil);
  self->showTrimmedIntersectionLines_ = NO;
  self->isRandomGeo__ = NO;
  GeogebraCommonKernelGeosGeoElement_set_visibleInView3D_(self, GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_get_NOT_SET());
  self->isPickable__ = YES;
  self->needsReplacingInExpressionNode__ = NO;
  self->cloneInUse_ = NO;
  GeogebraCommonKernelGeosGeoElement_set_xBracket_(self, nil);
  GeogebraCommonKernelGeosGeoElement_set_yBracket_(self, nil);
  GeogebraCommonKernelGeosGeoElement_set_zBracket_(self, nil);
  GeogebraCommonKernelGeosGeoElement_set_closeBracket_(self, nil);
  self->canBeRemovedAsInput__ = YES;
  [((JavaUtilTreeSet *) nil_chk(((GeogebraCommonKernelConstruction *) nil_chk(c))->usedGeos_)) addWithId:[self getGeoClassType]];
  GeogebraCommonKernelGeosGeoElement_set_graphicsadapter_(self, [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) newGeoElementGraphicsAdapter]);
  if ([self->kernel_ getApplication] != nil) {
    self->layer_ = [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getMaxLayerUsed];
  }
  id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim> ev;
  if (([self->kernel_ getApplication] != nil) && ((ev = [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getActiveEuclidianView]) != nil) && ([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getActiveEuclidianView])) getViewID] != GeogebraCommonMainApp_VIEW_EUCLIDIAN)) {
    GeogebraCommonKernelGeosGeoElement_setAndConsume_viewFlags_(self, new_JavaUtilArrayList_init());
    [self->viewFlags_ addWithId:JavaLangInteger_valueOfWithInt_([((id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(ev)) getViewID])];
    if (!([ev isDefault2D])) {
      [self->viewFlags_ addWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonMainApp_VIEW_EUCLIDIAN)];
    }
  }
}

IOSObjectArray *GeogebraCommonKernelGeosGeoElement_copyPointsWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *points) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  if (points == nil) {
    return nil;
  }
  IOSObjectArray *pointsCopy = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(points))->size_ type:GeogebraCommonKernelGeosGeoPoint_class_()];
  for (jint i = 0; i < points->size_; i++) {
    IOSObjectArray_Set(pointsCopy, i, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, i), [GeogebraCommonKernelGeosGeoPoint class])))) copyInternalWithGeogebraCommonKernelConstruction:cons], [GeogebraCommonKernelGeosGeoPoint class]));
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pointsCopy, i))) setWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, i)];
  }
  return pointsCopy;
}

IOSObjectArray *GeogebraCommonKernelGeosGeoElement_copyPointsNDWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *points) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  IOSObjectArray *pointsCopy = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(points))->size_ type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
  for (jint i = 0; i < points->size_; i++) {
    IOSObjectArray_Set(pointsCopy, i, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [GeogebraCommonKernelGeosGeoElement class])))) copyInternalWithGeogebraCommonKernelConstruction:cons], @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(pointsCopy, i), [GeogebraCommonKernelGeosGeoElement class])))) setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [GeogebraCommonKernelGeosGeoElement class])];
  }
  return pointsCopy;
}

void GeogebraCommonKernelGeosGeoElement_setConstructionDefaultsWithBoolean_(GeogebraCommonKernelGeosGeoElement *self, jboolean setEuclidianVisible) {
  if (self->useVisualDefaults_) {
    GeogebraCommonKernelConstructionDefaults *consDef = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getConstructionDefaults];
    if (consDef != nil) {
      [consDef setDefaultVisualStylesWithGeogebraCommonKernelGeosGeoElement:self withBoolean:NO withBoolean:setEuclidianVisible];
    }
  }
}

GeogebraCommonAwtGColor *GeogebraCommonKernelGeosGeoElement_getRGBFromListWithFloat_(GeogebraCommonKernelGeosGeoElement *self, jfloat alpha1) {
  jfloat alpha2 = alpha1;
  if (alpha2 > 1.0f) {
    alpha2 = 1.0f;
  }
  if (alpha2 < 0.0f) {
    alpha2 = 0.0f;
  }
  jint alpha = J2ObjCFpToInt((alpha2 * 255.0f));
  return GeogebraCommonKernelGeosGeoElement_getRGBFromListWithInt_(self, alpha);
}

GeogebraCommonAwtGColor *GeogebraCommonKernelGeosGeoElement_getRGBFromListWithInt_(GeogebraCommonKernelGeosGeoElement *self, jint withAlpha) {
  jint alpha = withAlpha;
  if (alpha > 255) {
    alpha = 255;
  }
  else if (alpha < 0) {
    alpha = 0;
  }
  jdouble redD = 0, greenD = 0, blueD = 0;
  for (jint i = 0; i < 3; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->colFunction_)) getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined]) {
      jdouble val = [((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticNumberValue))) getDouble];
      switch (i) {
        case 0:
        redD = val;
        break;
        case 1:
        greenD = val;
        break;
        case 2:
        blueD = val;
        break;
      }
    }
  }
  redD = (redD / 2) - JavaLangMath_floorWithDouble_(redD / 2);
  greenD = (greenD / 2) - JavaLangMath_floorWithDouble_(greenD / 2);
  blueD = (blueD / 2) - JavaLangMath_floorWithDouble_(blueD / 2);
  if (redD > 0.5) {
    redD = 2 * (1 - redD);
  }
  else {
    redD = 2 * redD;
  }
  if (greenD > 0.5) {
    greenD = 2 * (1 - greenD);
  }
  else {
    greenD = 2 * greenD;
  }
  if (blueD > 0.5) {
    blueD = 2 * (1 - blueD);
  }
  else {
    blueD = 2 * blueD;
  }
  {
    jint rgb;
    jdouble H;
    jdouble S;
    jdouble L;
    jdouble C;
    jdouble X;
    jdouble R1, G1, B1;
    jdouble m;
    GeogebraCommonAwtGColor *c;
    switch (self->colorSpace_) {
      case GeogebraCommonKernelGeosGeoElement_COLORSPACE_HSB:
      rgb = GeogebraCommonAwtGColor_HSBtoRGBWithFloat_withFloat_withFloat_((jfloat) redD, (jfloat) greenD, (jfloat) blueD);
      redD = (RShift32(rgb, 16)) & (jint) 0xFF;
      greenD = (RShift32(rgb, 8)) & (jint) 0xFF;
      blueD = rgb & (jint) 0xFF;
      return [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:J2ObjCFpToInt(redD) withInt:J2ObjCFpToInt(greenD) withInt:J2ObjCFpToInt(blueD) withInt:alpha];
      case GeogebraCommonKernelGeosGeoElement_COLORSPACE_HSL:
      H = redD * 6;
      S = greenD;
      L = blueD;
      C = (1 - JavaLangMath_absWithDouble_((2 * L) - 1)) * S;
      X = C * (1 - JavaLangMath_absWithDouble_((fmod(H, 2)) - 1));
      R1 = 0;
      G1 = 0;
      B1 = 0;
      if (H < 1) {
        R1 = C;
        G1 = X;
        B1 = 0;
      }
      else if (H < 2) {
        R1 = X;
        G1 = C;
        B1 = 0;
      }
      else if (H < 3) {
        R1 = 0;
        G1 = C;
        B1 = X;
      }
      else if (H < 4) {
        R1 = 0;
        G1 = X;
        B1 = C;
      }
      else if (H < 5) {
        R1 = X;
        G1 = 0;
        B1 = C;
      }
      else {
        R1 = C;
        G1 = 0;
        B1 = X;
      }
      m = L - (.5 * C);
      c = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:J2ObjCFpToInt(((R1 + m) * 255.0)) withInt:J2ObjCFpToInt(((G1 + m) * 255.0)) withInt:J2ObjCFpToInt(((B1 + m) * 255.0)) withInt:alpha];
      return c;
      case GeogebraCommonKernelGeosGeoElement_COLORSPACE_RGB:
      default:
      return [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:J2ObjCFpToInt((redD * 255.0)) withInt:J2ObjCFpToInt((greenD * 255.0)) withInt:J2ObjCFpToInt((blueD * 255.0)) withInt:alpha];
    }
  }
}

jint GeogebraCommonKernelGeosGeoElement_typePriority(GeogebraCommonKernelGeosGeoElement *self) {
  switch ([[self getGeoClassType] ordinal]) {
    case GeogebraCommonPluginGeoClass_AXIS:
    return 10;
    case GeogebraCommonPluginGeoClass_PENSTROKE:
    return 15;
    case GeogebraCommonPluginGeoClass_IMAGE:
    case GeogebraCommonPluginGeoClass_TURTLE:
    case GeogebraCommonPluginGeoClass_BOOLEAN:
    return 20;
    case GeogebraCommonPluginGeoClass_LIST:
    return 40;
    case GeogebraCommonPluginGeoClass_POLYGON:
    case GeogebraCommonPluginGeoClass_POLYGON3D:
    return 50;
    case GeogebraCommonPluginGeoClass_POLYLINE:
    return 51;
    case GeogebraCommonPluginGeoClass_IMPLICIT_POLY:
    return 60;
    case GeogebraCommonPluginGeoClass_CONIC:
    case GeogebraCommonPluginGeoClass_CONICPART:
    case GeogebraCommonPluginGeoClass_CONIC3D:
    case GeogebraCommonPluginGeoClass_CONICSECTION:
    return 70;
    case GeogebraCommonPluginGeoClass_ANGLE:
    case GeogebraCommonPluginGeoClass_ANGLE3D:
    case GeogebraCommonPluginGeoClass_NUMERIC:
    return 80;
    case GeogebraCommonPluginGeoClass_SPLINE:
    case GeogebraCommonPluginGeoClass_INTERVAL:
    case GeogebraCommonPluginGeoClass_FUNCTION:
    case GeogebraCommonPluginGeoClass_FUNCTIONCONDITIONAL:
    case GeogebraCommonPluginGeoClass_CURVE_CARTESIAN:
    case GeogebraCommonPluginGeoClass_CURVE_CARTESIAN3D:
    case GeogebraCommonPluginGeoClass_CURVE_POLAR:
    return 90;
    case GeogebraCommonPluginGeoClass_LINE:
    case GeogebraCommonPluginGeoClass_LINE3D:
    return 100;
    case GeogebraCommonPluginGeoClass_FUNCTION_NVAR:
    return 102;
    case GeogebraCommonPluginGeoClass_RAY:
    case GeogebraCommonPluginGeoClass_SEGMENT:
    case GeogebraCommonPluginGeoClass_RAY3D:
    case GeogebraCommonPluginGeoClass_SEGMENT3D:
    return 110;
    case GeogebraCommonPluginGeoClass_VECTOR:
    case GeogebraCommonPluginGeoClass_VECTOR3D:
    return 120;
    case GeogebraCommonPluginGeoClass_LOCUS:
    return 130;
    case GeogebraCommonPluginGeoClass_POINT:
    case GeogebraCommonPluginGeoClass_POINT3D:
    return 140;
    case GeogebraCommonPluginGeoClass_TEXT:
    return 150;
    case GeogebraCommonPluginGeoClass_TEXTFIELD:
    case GeogebraCommonPluginGeoClass_BUTTON:
    return 155;
    default:
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"missing case in getDrawingPriority() for ", [self getGeoClassType]));
    return 160;
  }
}

jboolean GeogebraCommonKernelGeosGeoElement_isVisible(GeogebraCommonKernelGeosGeoElement *self) {
  return GeogebraCommonKernelGeosGeoElement_isEuclidianVisible(self) || GeogebraCommonKernelGeosGeoElement_isAlgebraVisible(self);
}

jboolean GeogebraCommonKernelGeosGeoElement_isEuclidianVisible(GeogebraCommonKernelGeosGeoElement *self) {
  if (self->forceEuclidianVisible__) {
    return YES;
  }
  if (![self showInEuclidianView]) {
    return NO;
  }
  if (self->condShowObject_ == nil) {
    return self->euclidianVisible_;
  }
  return [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->condShowObject_)) getBoolean];
}

jboolean GeogebraCommonKernelGeosGeoElement_isAuxiliaryObject(GeogebraCommonKernelGeosGeoElement *self) {
  return self->auxiliaryObject_;
}

jboolean GeogebraCommonKernelGeosGeoElement_isAlgebraVisible(GeogebraCommonKernelGeosGeoElement *self) {
  return self->algebraVisible_ && [self showInAlgebraView];
}

GeogebraCommonKernelAlgosAlgoElement *GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(GeogebraCommonKernelGeosGeoElement *self) {
  return self->algoParent_;
}

JavaUtilArrayList *GeogebraCommonKernelGeosGeoElement_getAlgorithmList(GeogebraCommonKernelGeosGeoElement *self) {
  if (self->algorithmList_ == nil) {
    GeogebraCommonKernelGeosGeoElement_setAndConsume_algorithmList_(self, new_JavaUtilArrayList_init());
  }
  return self->algorithmList_;
}

jboolean GeogebraCommonKernelGeosGeoElement_hasOnlyFreeInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(GeogebraCommonKernelGeosGeoElement *self, id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim> view) {
  if (self->algoParent_ == nil) {
    return NO;
  }
  if ([self->algoParent_ isKindOfClass:[GeogebraCommonKernelAlgosAlgoJoinPointsSegment class]] && ([((JavaUtilArrayList *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(view)) getFreeInputPointsWithGeogebraCommonKernelAlgosAlgoElement:self->algoParent_])) size] == 2)) {
    return YES;
  }
  return [((JavaUtilArrayList *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(view)) getFreeInputPointsWithGeogebraCommonKernelAlgosAlgoElement:self->algoParent_])) size] == ((IOSObjectArray *) nil_chk(((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(self->algoParent_))->input_))->size_;
}

jboolean GeogebraCommonKernelGeosGeoElement_containsOnlyMoveableGeosWithJavaUtilArrayList_(JavaUtilArrayList *geos) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  if ((geos == nil) || ([geos size] == 0)) {
    return NO;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([geos getWithInt:i], [GeogebraCommonKernelGeosGeoElement class]);
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isMoveable]) {
      return NO;
    }
  }
  return YES;
}

void GeogebraCommonKernelGeosGeoElement_initAnimationSpeedObject(GeogebraCommonKernelGeosGeoElement *self) {
  if (self->animationSpeedObj_ == nil) {
    GeogebraCommonKernelGeosGeoNumeric *num = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
    [num setValueWithDouble:1];
    GeogebraCommonKernelGeosGeoElement_set_animationSpeedObj_(self, num);
  }
}

jboolean GeogebraCommonKernelGeosGeoElement_isAnimating(GeogebraCommonKernelGeosGeoElement *self) {
  return self->animating_;
}

void GeogebraCommonKernelGeosGeoElement_doSetLabelWithNSString_(GeogebraCommonKernelGeosGeoElement *self, NSString *newLabel) {
  if (!self->labelSet_ && [self isIndependent]) {
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self withBoolean:YES];
  }
  GeogebraCommonKernelGeosGeoElement_set_label_(self, newLabel);
  self->labelSet_ = YES;
  self->labelWanted_ = NO;
  [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) putLabelWithGeogebraCommonKernelGeosGeoElement:self];
  GeogebraCommonKernelGeosGeoElement_algebraStringsNeedUpdate(self);
  GeogebraCommonKernelGeosGeoElement_updateSpreadsheetCoordinates(self);
  GeogebraCommonKernelGeosGeoElement_notifyAdd(self);
}

void GeogebraCommonKernelGeosGeoElement_updateSpreadsheetCoordinates(GeogebraCommonKernelGeosGeoElement *self) {
  if (self->labelSet_ && (((jint) [((NSString *) nil_chk(self->label_)) length]) > 0) && GeogebraCommonUtilStringUtil_isLetterWithChar_([self->label_ charAtWithInt:0]) && GeogebraCommonUtilStringUtil_isDigitWithChar_([self->label_ charAtWithInt:((jint) [self->label_ length]) - 1])) {
    if (self->spreadsheetCoords_ == nil) {
      GeogebraCommonKernelGeosGeoElement_set_oldSpreadsheetCoords_(self, nil);
      GeogebraCommonKernelGeosGeoElement_setAndConsume_spreadsheetCoords_(self, new_GeogebraCommonAwtGPoint_init());
    }
    else {
      if (self->oldSpreadsheetCoords_ == nil) {
        GeogebraCommonKernelGeosGeoElement_setAndConsume_oldSpreadsheetCoords_(self, new_GeogebraCommonAwtGPoint_init());
      }
      [((GeogebraCommonAwtGPoint *) nil_chk(self->oldSpreadsheetCoords_)) setLocationWithGeogebraCommonAwtGPoint:self->spreadsheetCoords_];
    }
    GeogebraCommonAwtGPoint *p = GeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetIndicesWithNSString_([self getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
    if ((((GeogebraCommonAwtGPoint *) nil_chk(p))->x_ >= 0) && (p->y_ >= 0)) {
      [((GeogebraCommonAwtGPoint *) nil_chk(self->spreadsheetCoords_)) setLocationWithInt:p->x_ withInt:p->y_];
    }
    else {
      GeogebraCommonKernelGeosGeoElement_set_spreadsheetCoords_(self, nil);
    }
  }
  else {
    GeogebraCommonKernelGeosGeoElement_set_oldSpreadsheetCoords_(self, self->spreadsheetCoords_);
    GeogebraCommonKernelGeosGeoElement_set_spreadsheetCoords_(self, nil);
  }
}

jint GeogebraCommonKernelGeosGeoElement_compareLabelsWithNSString_withNSString_(NSString *label1, NSString *label2) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  if (GeogebraCommonKernelGeosGeoElementSpreadsheet_isSpreadsheetLabelWithNSString_(label1) && GeogebraCommonKernelGeosGeoElementSpreadsheet_isSpreadsheetLabelWithNSString_(label2)) {
    GeogebraCommonAwtGPoint *p1 = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(label1);
    GeogebraCommonAwtGPoint *p2 = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(label2);
    if (((GeogebraCommonAwtGPoint *) nil_chk(p1))->x_ != ((GeogebraCommonAwtGPoint *) nil_chk(p2))->x_) {
      return p1->x_ - p2->x_;
    }
    return p1->y_ - p2->y_;
  }
  return [((NSString *) nil_chk(label1)) compareToWithId:label2];
}

void GeogebraCommonKernelGeosGeoElement_doRenameLabelWithNSString_(GeogebraCommonKernelGeosGeoElement *self, NSString *newLabel) {
  if ((newLabel == nil) || [newLabel isEqual:self->label_]) {
    return;
  }
  [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeLabelWithGeogebraCommonKernelGeosGeoElement:self];
  GeogebraCommonKernelGeosGeoElement_set_oldLabel_(self, self->label_);
  GeogebraCommonKernelGeosGeoElement_set_label_(self, newLabel);
  if (self->correspondingCasCell_ != nil) {
    [self->correspondingCasCell_ setInputFromTwinGeoWithBoolean:NO];
  }
  [self->cons_ putLabelWithGeogebraCommonKernelGeosGeoElement:self];
  GeogebraCommonKernelGeosGeoElement_algebraStringsNeedUpdate(self);
  GeogebraCommonKernelGeosGeoElement_updateSpreadsheetCoordinates(self);
  [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRenameWithGeogebraCommonKernelGeosGeoElement:self];
  [self updateCascade];
  [self->kernel_ notifyRenameUpdatesComplete];
}

void GeogebraCommonKernelGeosGeoElement_setLabelsWithNSString_withGeogebraCommonKernelGeosGeoElementArray_(NSString *labelPrefix, IOSObjectArray *geos) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  if (geos == nil) {
    return;
  }
  jint visible = 0;
  jint firstVisible = 0;
  for (jint i = ((IOSObjectArray *) nil_chk(geos))->size_ - 1; i >= 0; i--) {
    if (GeogebraCommonKernelGeosGeoElement_isVisible(nil_chk(IOSObjectArray_Get(geos, i)))) {
      firstVisible = i;
      visible++;
    }
  }
  {
    GeogebraCommonAwtGPoint *p;
    switch (visible) {
      case 0:
      for (jint i = 0; i < geos->size_; i++) {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) setLabelWithNSString:labelPrefix];
      }
      break;
      case 1:
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, firstVisible))) setLabelWithNSString:labelPrefix];
      break;
      default:
      p = GeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetIndicesWithNSString_(labelPrefix);
      if ((((GeogebraCommonAwtGPoint *) nil_chk(p))->x_ >= 0) && (p->y_ >= 0)) {
        jint col = p->x_;
        jint row = p->y_;
        for (jint i = 0; i < geos->size_; i++) {
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) setLabelWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) getFreeLabelWithNSString:GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(col + i, row)]];
        }
      }
      else {
        for (jint i = 0; i < geos->size_; i++) {
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) setLabelWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) getIndexLabelWithNSString:labelPrefix]];
        }
      }
    }
  }
}

void GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(IOSObjectArray *labels, IOSObjectArray *geos) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_withBoolean_(labels, geos, NO);
}

void GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_withBoolean_(IOSObjectArray *labels, IOSObjectArray *geos, jboolean indexedOnly) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  jint labelLen = (labels == nil) ? 0 : labels->size_;
  if ((labelLen == 1) && (IOSObjectArray_Get(nil_chk(labels), 0) != nil) && ![((NSString *) nil_chk(IOSObjectArray_Get(labels, 0))) isEqual:@""]) {
    GeogebraCommonKernelGeosGeoElement_setLabelsWithNSString_withGeogebraCommonKernelGeosGeoElementArray_(IOSObjectArray_Get(labels, 0), geos);
    return;
  }
  NSString *label;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
    if (i < labelLen) {
      label = IOSObjectArray_Get(nil_chk(labels), i);
    }
    else {
      label = nil;
    }
    if (indexedOnly) {
      label = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) getIndexLabelWithNSString:label];
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) setLabelWithNSString:label];
  }
}

NSString *GeogebraCommonKernelGeosGeoElement_defaultNumberedLabelWithNSString_(GeogebraCommonKernelGeosGeoElement *self, NSString *plainKey) {
  jint counter = 0;
  NSString *str;
  do {
    counter++;
    str = JreStrcat("$$", [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainLabelWithNSString:plainKey], [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) internationalizeDigitsWithNSString:JreStrcat("I", counter) withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
  }
  while (![((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isFreeLabelWithNSString:str]);
  return str;
}

void GeogebraCommonKernelGeosGeoElement_notifyAdd(GeogebraCommonKernelGeosGeoElement *self) {
  [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyAddWithGeogebraCommonKernelGeosGeoElement:self];
}

void GeogebraCommonKernelGeosGeoElement_notifyRemove(GeogebraCommonKernelGeosGeoElement *self) {
  [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRemoveWithGeogebraCommonKernelGeosGeoElement:self];
}

void GeogebraCommonKernelGeosGeoElement_notifyUpdateAuxiliaryObject(GeogebraCommonKernelGeosGeoElement *self) {
  [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyUpdateAuxiliaryObjectWithGeogebraCommonKernelGeosGeoElement:self];
}

void GeogebraCommonKernelGeosGeoElement_updateGeo(GeogebraCommonKernelGeosGeoElement *self) {
  if (self->labelWanted_ && !self->labelSet_) {
    if (GeogebraCommonKernelGeosGeoElement_isVisible(self)) {
      [self setLabelWithNSString:self->label_];
    }
  }
  if (![((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isUpdateConstructionRunning] && self->correspondingCasCell_ != nil) {
    [self->correspondingCasCell_ setInputFromTwinGeoWithBoolean:NO];
  }
  GeogebraCommonKernelGeosGeoElement_algebraStringsNeedUpdate(self);
}

void GeogebraCommonKernelGeosGeoElement_algebraStringsNeedUpdate(GeogebraCommonKernelGeosGeoElement *self) {
  self->strAlgebraDescriptionNeedsUpdate_ = YES;
  self->strAlgebraDescTextOrHTMLneedsUpdate_ = YES;
  self->strAlgebraDescriptionHTMLneedsUpdate_ = YES;
  self->strLabelTextOrHTMLUpdate_ = YES;
  self->strLaTeXneedsUpdate_ = YES;
}

void GeogebraCommonKernelGeosGeoElement_updateDependentObjects(GeogebraCommonKernelGeosGeoElement *self) {
  if ((self->correspondingCasCell_ != nil) && [self isIndependent]) {
    [self updateAlgoUpdateSetWithWithGeogebraCommonKernelGeosGeoElement:self->correspondingCasCell_];
  }
  else if (self->algoUpdateSet_ != nil) {
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setAlgoSetCurrentlyUpdatedWithGeogebraCommonKernelAlgosAlgorithmSet:self->algoUpdateSet_];
    [self->algoUpdateSet_ updateAll];
    [self->cons_ setAlgoSetCurrentlyUpdatedWithGeogebraCommonKernelAlgosAlgorithmSet:nil];
  }
}

void GeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(JavaUtilArrayList *geos, JavaUtilTreeSet *tempSet1, jboolean updateCascadeAll) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  @synchronized(GeogebraCommonKernelGeosGeoElement_class_()) {
    if ([((JavaUtilArrayList *) nil_chk(geos)) size] == 1) {
      id<GeogebraCommonKernelKernelNDGeoElementND> ce = [geos getWithInt:0];
      [((id<GeogebraCommonKernelKernelNDGeoElementND>) nil_chk(ce)) updateCascade];
      return;
    }
    [((JavaUtilTreeSet *) nil_chk(tempSet1)) clear];
    jint size = [geos size];
    for (jint i = 0; i < size; i++) {
      id<GeogebraCommonKernelKernelNDGeoElementND> geo = [geos getWithInt:i];
      [((id<GeogebraCommonKernelKernelNDGeoElementND>) nil_chk(geo)) update];
      if (([geo isIndependent] || [geo isPointOnPath] || updateCascadeAll) && ([geo hasAlgoUpdateSet])) {
        [((GeogebraCommonKernelAlgosAlgorithmSet *) nil_chk([geo getAlgoUpdateSet])) addAllToCollectionWithJavaUtilCollection:tempSet1];
      }
    }
    if ([tempSet1 size] > 0) {
      id<JavaUtilIterator> it = [tempSet1 iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        GeogebraCommonKernelAlgosAlgoElement *algo = [it next];
        [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) update];
      }
    }
  }
}

void GeogebraCommonKernelGeosGeoElement_updateCascadeLocationWithJavaUtilArrayList_withGeogebraCommonKernelConstruction_(JavaUtilArrayList *geos, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  @synchronized(GeogebraCommonKernelGeosGeoElement_class_()) {
    JavaUtilTreeSet *tempSet1 = [new_JavaUtilTreeSet_init() autorelease];
    jint size = [((JavaUtilArrayList *) nil_chk(geos)) size];
    for (jint i = 0; i < size; i++) {
      id<GeogebraCommonKernelLocateable> geo = [geos getWithInt:i];
      [((id<GeogebraCommonKernelLocateable>) nil_chk(geo)) updateLocation];
      if (([geo isIndependent] || [geo isGeoText]) && ([geo hasAlgoUpdateSet])) {
        [((GeogebraCommonKernelAlgosAlgorithmSet *) nil_chk([geo getAlgoUpdateSet])) addAllToCollectionWithJavaUtilCollection:tempSet1];
      }
    }
    GeogebraCommonKernelAlgosAlgorithmSet *algoSetCurrentlyUpdated = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) getAlgoSetCurrentlyUpdated];
    if (algoSetCurrentlyUpdated != nil) {
      [algoSetCurrentlyUpdated removeAllFromCollectionWithJavaUtilCollection:tempSet1];
    }
    if ([tempSet1 size] > 0) {
      id<JavaUtilIterator> it = [tempSet1 iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        @try {
          GeogebraCommonKernelAlgosAlgoElement *algo = [it next];
          [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) update];
        }
        @catch (JavaLangException *e) {
          [((JavaLangException *) nil_chk(e)) printStackTrace];
        }
      }
    }
  }
}

void GeogebraCommonKernelGeosGeoElement_updateCascadeUntilWithJavaUtilArrayList_withJavaUtilTreeSet_withGeogebraCommonKernelAlgosAlgoElement_(JavaUtilArrayList *geos, JavaUtilTreeSet *tempSet2, GeogebraCommonKernelAlgosAlgoElement *lastAlgo) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  if ([((JavaUtilArrayList *) nil_chk(geos)) size] == 1) {
    GeogebraCommonKernelAlgosConstructionElement *ce = (GeogebraCommonKernelAlgosConstructionElement *) check_class_cast([geos getWithInt:0], [GeogebraCommonKernelAlgosConstructionElement class]);
    if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isGeoElement]) {
      [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoElement class])) updateCascade];
    }
    return;
  }
  [((JavaUtilTreeSet *) nil_chk(tempSet2)) clear];
  jint size = [geos size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelAlgosConstructionElement *ce = (GeogebraCommonKernelAlgosConstructionElement *) check_class_cast([geos getWithInt:i], [GeogebraCommonKernelAlgosConstructionElement class]);
    if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isGeoElement]) {
      GeogebraCommonKernelGeosGeoElement *geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([geos getWithInt:i], [GeogebraCommonKernelGeosGeoElement class]);
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) update];
      if (([geo isIndependent] || [geo isPointOnPath]) && (geo->algoUpdateSet_ != nil)) {
        [geo->algoUpdateSet_ addAllToCollectionWithJavaUtilCollection:tempSet2];
      }
    }
  }
  if ([tempSet2 size] > 0) {
    id<JavaUtilIterator> it = [tempSet2 iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonKernelAlgosAlgoElement *algo = [it next];
      [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) update];
      if (algo == lastAlgo) {
        return;
      }
    }
  }
}

void GeogebraCommonKernelGeosGeoElement_addPredecessorsToSetWithJavaUtilTreeSet_withBoolean_(GeogebraCommonKernelGeosGeoElement *self, JavaUtilTreeSet *set, jboolean onlyIndependent) {
  if (self->algoParent_ == nil) {
    [((JavaUtilTreeSet *) nil_chk(set)) addWithId:self];
  }
  else {
    [self->algoParent_ addPredecessorsToSetWithJavaUtilTreeSet:set withBoolean:onlyIndependent];
  }
}

void GeogebraCommonKernelGeosGeoElement_addRandomizablePredecessorsToSetWithJavaUtilTreeSet_(GeogebraCommonKernelGeosGeoElement *self, JavaUtilTreeSet *set) {
  if ([self isRandomizable] && !self->cloneInUse_) {
    [((JavaUtilTreeSet *) nil_chk(set)) addWithId:self];
  }
  if (self->algoParent_ != nil) {
    [self->algoParent_ addRandomizablePredecessorsToSetWithJavaUtilTreeSet:set];
  }
}

jboolean GeogebraCommonKernelGeosGeoElement_isParentOfWithGeogebraCommonKernelKernelNDGeoElementND_(GeogebraCommonKernelGeosGeoElement *self, id<GeogebraCommonKernelKernelNDGeoElementND> geo) {
  if (self->algoUpdateSet_ != nil) {
    id<JavaUtilIterator> it = [self->algoUpdateSet_ getIterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonKernelAlgosAlgoElement *algo = [it next];
      for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutputLength]; i++) {
        if (geo == [algo getOutputWithInt:i]) {
          return YES;
        }
      }
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelGeosGeoElement_isChildOfWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *self, GeogebraCommonKernelGeosGeoElement *geo) {
  if ((geo == nil) || [self isIndependent]) {
    return NO;
  }
  return GeogebraCommonKernelGeosGeoElement_isParentOfWithGeogebraCommonKernelKernelNDGeoElementND_(nil_chk(geo), self);
}

JavaUtilTreeSet *GeogebraCommonKernelGeosGeoElement_getAllChildren(GeogebraCommonKernelGeosGeoElement *self) {
  JavaUtilTreeSet *set = [new_JavaUtilTreeSet_init() autorelease];
  if (self->algoUpdateSet_ != nil) {
    id<JavaUtilIterator> it = [self->algoUpdateSet_ getIterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonKernelAlgosAlgoElement *algo = [it next];
      for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutputLength]; i++) {
        [set addWithId:[algo getOutputWithInt:i]];
      }
    }
  }
  return set;
}

jboolean GeogebraCommonKernelGeosGeoElement_isGeoElement(GeogebraCommonKernelGeosGeoElement *self) {
  return YES;
}

NSString *GeogebraCommonKernelGeosGeoElement_getCommandDescriptionWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoElement *self, GeogebraCommonKernelStringTemplate *tpl) {
  if (self->algoParent_ == nil) {
    return @"";
  }
  return [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(self->algoParent_)) getCommandDescriptionWithGeogebraCommonKernelStringTemplate:tpl];
}

void GeogebraCommonKernelGeosGeoElement_convertIndicesToHTMLWithNSString_withGeogebraCommonUtilIndexHTMLBuilder_(NSString *text, GeogebraCommonUtilIndexHTMLBuilder *builder) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  if ([((NSString *) nil_chk(text)) indexOf:'_'] > -1) {
    GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withGeogebraCommonUtilIndexHTMLBuilder_(text, builder);
    return;
  }
  [((GeogebraCommonUtilIndexHTMLBuilder *) nil_chk(builder)) clear];
  [builder appendWithNSString:text];
}

NSString *GeogebraCommonKernelGeosGeoElement_getXMLtypeString(GeogebraCommonKernelGeosGeoElement *self) {
  return GeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(((GeogebraCommonPluginGeoClassEnum *) nil_chk([self getGeoClassType]))->xmlName_);
}

NSString *GeogebraCommonKernelGeosGeoElement_getLongDescriptionHTMLWithBoolean_withBoolean_(GeogebraCommonKernelGeosGeoElement *self, jboolean colored, jboolean addHTMLtag) {
  if ((self->algoParent_ == nil) || [GeogebraCommonKernelArithmeticTextValue_class_() isInstance:self] || [self isKindOfClass:[GeogebraCommonKernelGeosGeoPenStroke class]]) {
    return [self getNameDescriptionHTMLWithBoolean:colored withBoolean:addHTMLtag];
  }
  JavaLangStringBuilder *sbLongDescHTML = [new_JavaLangStringBuilder_init() autorelease];
  NSString *formatedLabel = [self getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  NSString *typeString = [self translatedTypeString];
  if (addHTMLtag) {
    [sbLongDescHTML appendWithNSString:@"<html>"];
  }
  jboolean reverseOrder = [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) isReverseNameDescriptionLanguage];
  if (!reverseOrder) {
    [sbLongDescHTML appendWithNSString:typeString];
    [sbLongDescHTML appendWithChar:' '];
  }
  if (colored) {
    GeogebraCommonAwtGColor *colorAdapter = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:[((GeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getRed] withInt:[((GeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getGreen] withInt:[((GeogebraCommonAwtGColor *) nil_chk([self getAlgebraColor])) getBlue]];
    [sbLongDescHTML appendWithNSString:@"<b><font color=\"#"];
    [sbLongDescHTML appendWithNSString:GeogebraCommonUtilStringUtil_toHexStringWithGeogebraCommonAwtGColor_(colorAdapter)];
    [sbLongDescHTML appendWithNSString:@"\">"];
  }
  [sbLongDescHTML appendWithNSString:GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(formatedLabel, NO)];
  if (colored) {
    [sbLongDescHTML appendWithNSString:@"</font></b>"];
  }
  if (reverseOrder) {
    [sbLongDescHTML appendWithChar:' '];
    [sbLongDescHTML appendWithNSString:[((NSString *) nil_chk(typeString)) lowercaseString]];
  }
  if (self->algoParent_ != nil) {
    jboolean rightToLeft = [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) isRightToLeftReadingOrder];
    if (rightToLeft) {
      [sbLongDescHTML appendWithChar:GeogebraCommonUtilUnicode_LeftToRightMark];
      [sbLongDescHTML appendWithChar:GeogebraCommonUtilUnicode_RightToLeftMark];
      [sbLongDescHTML appendWithNSString:@": "];
      [sbLongDescHTML appendWithChar:GeogebraCommonUtilUnicode_LeftToRightMark];
    }
    else {
      [sbLongDescHTML appendWithNSString:@": "];
    }
    [sbLongDescHTML appendWithNSString:GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_([((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) translationFixWithNSString:[self->algoParent_ toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]], NO)];
    if (rightToLeft) {
      [sbLongDescHTML appendWithChar:GeogebraCommonUtilUnicode_LeftToRightMark];
    }
  }
  if (addHTMLtag) {
    [sbLongDescHTML appendWithNSString:@"</html>"];
  }
  return [sbLongDescHTML description];
}

NSString *GeogebraCommonKernelGeosGeoElement_getToolTipDescriptionHTMLWithJavaUtilArrayList_withBoolean_withBoolean_withBoolean_(JavaUtilArrayList *geos, jboolean colored, jboolean addHTMLtag, jboolean alwaysOn) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  if (geos == nil) {
    return nil;
  }
  JavaLangStringBuilder *sbToolTipDesc = [new_JavaLangStringBuilder_init() autorelease];
  if (addHTMLtag) {
    [sbToolTipDesc appendWithNSString:@"<html>"];
  }
  jint count = 0;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; ++i) {
    GeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) showToolTipText] || alwaysOn) {
      count++;
      [sbToolTipDesc appendWithNSString:[geo getTooltipTextWithBoolean:colored withBoolean:alwaysOn]];
      if ((i + 1) < [geos size]) {
        [sbToolTipDesc appendWithNSString:@"<br>"];
      }
    }
  }
  if (count == 0) {
    return nil;
  }
  if (addHTMLtag) {
    [sbToolTipDesc appendWithNSString:@"</html>"];
  }
  return [sbToolTipDesc description];
}

NSString *GeogebraCommonKernelGeosGeoElement_toDefinedValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoElement *self, GeogebraCommonKernelStringTemplate *tpl) {
  if ([self isDefined]) {
    return [self toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

NSString *GeogebraCommonKernelGeosGeoElement_getLabelTextOrHTMLWithBoolean_(GeogebraCommonKernelGeosGeoElement *self, jboolean addHTMLTag) {
  if (self->strLabelTextOrHTMLUpdate_) {
    if (GeogebraCommonKernelGeosGeoElement_hasIndexLabel(self)) {
      GeogebraCommonKernelGeosGeoElement_set_strLabelTextOrHTML_(self, GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_([self getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], addHTMLTag));
    }
    else {
      GeogebraCommonKernelGeosGeoElement_set_strLabelTextOrHTML_(self, [self getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
    }
  }
  return self->strLabelTextOrHTML_;
}

NSString *GeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoElement *self, GeogebraCommonKernelStringTemplate *tpl) {
  if ([self isDefined]) {
    return [self toStringWithGeogebraCommonKernelStringTemplate:tpl];
  }
  JavaLangStringBuilder *sbAlgebraDesc = [new_JavaLangStringBuilder_init() autorelease];
  [sbAlgebraDesc appendWithNSString:self->label_];
  [sbAlgebraDesc appendWithChar:' '];
  [sbAlgebraDesc appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"]];
  return [sbAlgebraDesc description];
}

NSString *GeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionDefault(GeogebraCommonKernelGeosGeoElement *self) {
  if (self->strAlgebraDescriptionNeedsUpdate_) {
    if ([self isDefined]) {
      GeogebraCommonKernelGeosGeoElement_set_strAlgebraDescription_(self, [self toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
    }
    else {
      JavaLangStringBuilder *sbAlgebraDesc = [new_JavaLangStringBuilder_init() autorelease];
      [sbAlgebraDesc appendWithNSString:self->label_];
      [sbAlgebraDesc appendWithChar:' '];
      [sbAlgebraDesc appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"]];
      GeogebraCommonKernelGeosGeoElement_set_strAlgebraDescription_(self, [sbAlgebraDesc description]);
    }
    self->strAlgebraDescriptionNeedsUpdate_ = NO;
  }
  return self->strAlgebraDescription_;
}

NSString *GeogebraCommonKernelGeosGeoElement_getLaTeXAlgebraDescriptionWithGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoElement *self, GeogebraCommonKernelGeosGeoElement *geo, jboolean substituteNumbers, GeogebraCommonKernelStringTemplate *tpl) {
  NSString *algebraDesc = GeogebraCommonKernelGeosGeoElement_getAlgebraDescriptionWithGeogebraCommonKernelStringTemplate_(nil_chk(geo), tpl);
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([geo isGeoList] && [((GeogebraCommonPluginGeoClassEnum *) nil_chk([((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])) getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_TEXT()]) {
    return nil;
  }
  if (![geo isDefined]) {
    [sb appendWithNSString:self->label_];
    [sb appendWithNSString:@"\\, \\text{"];
    [sb appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"]];
    [sb appendWithNSString:@"} "];
  }
  else if (([((NSString *) nil_chk(algebraDesc)) indexOfString:@":"] > -1) & ![geo isGeoText]) {
    [sb appendWithNSString:JreStrcat("$$", IOSObjectArray_Get(nil_chk([algebraDesc split:@":"]), 0), @": \\,")];
    [sb appendWithNSString:[geo getFormulaStringWithGeogebraCommonKernelStringTemplate:tpl withBoolean:substituteNumbers]];
  }
  else if (([algebraDesc indexOfString:@"="] > -1) && ![geo isGeoText]) {
    [sb appendWithNSString:JreStrcat("$$", IOSObjectArray_Get(nil_chk([algebraDesc split:@"="]), 0), @"\\, = \\,")];
    [sb appendWithNSString:[geo getFormulaStringWithGeogebraCommonKernelStringTemplate:tpl withBoolean:substituteNumbers]];
  }
  else if ([geo isGeoVector]) {
    [sb appendWithNSString:self->label_];
    [sb appendWithNSString:@"\\, = \\,"];
    [sb appendWithNSString:[geo getFormulaStringWithGeogebraCommonKernelStringTemplate:tpl withBoolean:substituteNumbers]];
  }
  else if ([geo isGeoText] && [((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class])) isLaTeX]) {
    [sb appendWithNSString:IOSObjectArray_Get(nil_chk([algebraDesc split:@"="]), 0)];
    [sb appendWithNSString:@"\\, = \\,"];
    if ([GeogebraCommonKernelAlgosTableAlgo_class_() isInstance:GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(geo)]) {
      [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class])) getTextString]];
    }
    else {
      [sb appendWithNSString:@"\\text{``"];
      [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class])) getTextString]];
      [sb appendWithNSString:@"''}"];
    }
  }
  else {
    return nil;
  }
  return [sb description];
}

NSString *GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(NSString *str, jboolean addHTMLtag) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  GeogebraCommonUtilIndexHTMLBuilder *sbIndicesToHTML = [new_GeogebraCommonUtilIndexHTMLBuilder_initWithBoolean_(addHTMLtag) autorelease];
  GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withGeogebraCommonUtilIndexHTMLBuilder_(str, sbIndicesToHTML);
  return [sbIndicesToHTML description];
}

void GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withGeogebraCommonUtilIndexHTMLBuilder_(NSString *str, GeogebraCommonUtilIndexHTMLBuilder *sbIndicesToHTML) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  [((GeogebraCommonUtilIndexHTMLBuilder *) nil_chk(sbIndicesToHTML)) clear];
  jint depth = 0;
  jint startPos = 0;
  jint length = ((jint) [((NSString *) nil_chk(str)) length]);
  for (jint i = 0; i < length; i++) {
    switch ([str charAtWithInt:i]) {
      case '_':
      if (i > startPos) {
        [sbIndicesToHTML appendHTMLWithNSString:[str substring:startPos endIndex:i]];
      }
      startPos = i + 1;
      depth++;
      if ((startPos < length) && ([str charAtWithInt:startPos] != '{')) {
        [sbIndicesToHTML startIndex];
        [sbIndicesToHTML appendHTMLWithNSString:[str substring:startPos endIndex:startPos + 1]];
        [sbIndicesToHTML endIndex];
        depth--;
      }
      else {
        [sbIndicesToHTML startIndex];
      }
      i++;
      startPos++;
      break;
      case '}':
      if (depth > 0) {
        if (i > startPos) {
          [sbIndicesToHTML appendHTMLWithNSString:[str substring:startPos endIndex:i]];
        }
        [sbIndicesToHTML endIndex];
        startPos = i + 1;
        depth--;
      }
      break;
    }
  }
  if (startPos < length) {
    [sbIndicesToHTML appendHTMLWithNSString:[str substring:startPos]];
  }
}

jboolean GeogebraCommonKernelGeosGeoElement_hasIndexLabel(GeogebraCommonKernelGeosGeoElement *self) {
  if (self->strHasIndexLabel_ != self->label_) {
    self->hasIndexLabel__ = ((self->label_ == nil) || ([self->label_ indexOf:'_'] > -1));
    GeogebraCommonKernelGeosGeoElement_set_strHasIndexLabel_(self, self->label_);
  }
  return self->hasIndexLabel__;
}

void GeogebraCommonKernelGeosGeoElement_getListenerTagXMLWithJavaLangStringBuilder_withJavaUtilHashMap_withNSString_(GeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb, JavaUtilHashMap *map, NSString *type) {
  if (map != nil) {
    ;
    NSString *objectListener = [map getWithId:self];
    if (objectListener != nil) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("$$$", @"\t<listener type=\"", type, @"\" val=\"")];
      [sb appendWithNSString:objectListener];
      [sb appendWithNSString:@"\"/>\n"];
    }
  }
}

void GeogebraCommonKernelGeosGeoElement_getCaptionXMLWithJavaLangStringBuilder_(GeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb) {
  if ((self->caption_ != nil) && (((jint) [self->caption_ length]) > 0) && ![self->caption_ isEqual:self->label_]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<caption val=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, self->caption_);
    [sb appendWithNSString:@"\"/>\n"];
  }
}

void GeogebraCommonKernelGeosGeoElement_getAuxiliaryXMLWithJavaLangStringBuilder_(GeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb) {
  if (![self isAuxiliaryObjectByDefault]) {
    if (self->auxiliaryObject_) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<auxiliary val=\""];
      [sb appendWithNSString:@"true"];
      [sb appendWithNSString:@"\"/>\n"];
    }
    else if ([self getMetasLength] > 0) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<auxiliary val=\""];
      [sb appendWithNSString:@"false"];
      [sb appendWithNSString:@"\"/>\n"];
    }
  }
  else {
    if (!self->auxiliaryObject_) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<auxiliary val=\""];
      [sb appendWithNSString:@"false"];
      [sb appendWithNSString:@"\"/>\n"];
    }
  }
}

void GeogebraCommonKernelGeosGeoElement_getExtraTagsXMLWithJavaLangStringBuilder_(GeogebraCommonKernelGeosGeoElement *self, JavaLangStringBuilder *sb) {
  if ([GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self) isKindOfClass:[GeogebraCommonKernelAlgosAlgoBarChart class]]) {
    [((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(((GeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast(GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self), [GeogebraCommonKernelAlgosAlgoBarChart class])))) barXmlWithJavaLangStringBuilder:sb];
  }
}

NSString *GeogebraCommonKernelGeosGeoElement_getShowObjectConditionXML(GeogebraCommonKernelGeosGeoElement *self) {
  if (self->condShowObject_ != nil && [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getSaveScriptsToXML]) {
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
    [sb appendWithNSString:@"\t<condition showObject=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self->condShowObject_ getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_xmlTemplate_()]);
    [sb appendWithNSString:@"\"/>\n"];
    return [sb description];
  }
  return @"";
}

jboolean GeogebraCommonKernelGeosGeoElement_isSelected(GeogebraCommonKernelGeosGeoElement *self) {
  return self->selected_;
}

GeogebraCommonKernelGeosGeoBoolean *GeogebraCommonKernelGeosGeoElement_getShowObjectCondition(GeogebraCommonKernelGeosGeoElement *self) {
  return self->condShowObject_;
}

GeogebraCommonKernelGeosGeoList *GeogebraCommonKernelGeosGeoElement_getColorFunction(GeogebraCommonKernelGeosGeoElement *self) {
  return self->colFunction_;
}

jboolean GeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonEuclidianEuclidianView_(JavaUtilArrayList *geosToMove, GeogebraCommonKernelMatrixCoords *rwTransVec, GeogebraCommonKernelMatrixCoords *endPosition, GeogebraCommonKernelMatrixCoords *viewDirection, GeogebraCommonEuclidianEuclidianView *view) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  if (GeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_ == nil) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_, nil, new_JavaUtilArrayList_init());
  }
  JavaUtilArrayList *geos = geosToMove;
  JavaUtilArrayList *geos2 = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; i++) {
    if (![geos2 containsWithId:[geos getWithInt:i]]) {
      [geos2 addWithId:[geos getWithInt:i]];
    }
  }
  geos = geos2;
  jboolean moved = NO;
  jint size = [geos size];
  [((JavaUtilArrayList *) nil_chk(GeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_)) clear];
  [GeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_ ensureCapacityWithInt:size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
      [GeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_ addWithId:geo];
      continue;
    }
    GeogebraCommonKernelMatrixCoords *position = (size == 1) && (GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(geo) != nil) ? endPosition : nil;
    moved = (GeogebraCommonKernelGeosGeoElement_moveObjectWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withJavaUtilArrayList_withGeogebraCommonEuclidianEuclidianView_(geo, rwTransVec, position, viewDirection, GeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_, view) || moved);
  }
  GeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(GeogebraCommonKernelGeosGeoElement_moveObjectsUpdateList_, GeogebraCommonKernelGeosGeoElement_getTempSet(), NO);
  return moved;
}

JavaUtilTreeSet *GeogebraCommonKernelGeosGeoElement_getTempSet() {
  GeogebraCommonKernelGeosGeoElement_initialize();
  if (GeogebraCommonKernelGeosGeoElement_tempSet_ == nil) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElement_tempSet_, nil, new_JavaUtilTreeSet_initWithJavaUtilComparator_(GeogebraCommonKernelGeosGeoElement_algoComparator_));
  }
  return GeogebraCommonKernelGeosGeoElement_tempSet_;
}

jboolean GeogebraCommonKernelGeosGeoElement_moveObjectWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withJavaUtilArrayList_withGeogebraCommonEuclidianEuclidianView_(GeogebraCommonKernelGeosGeoElement *self, GeogebraCommonKernelMatrixCoords *rwTransVec, GeogebraCommonKernelMatrixCoords *endPosition, GeogebraCommonKernelMatrixCoords *viewDirection, JavaUtilArrayList *updateGeos, GeogebraCommonEuclidianEuclidianView *view) {
  jboolean movedGeo = NO;
  GeogebraCommonKernelGeosGeoElement *geo = self;
  if ([self isMoveable]) {
    if ([self isGeoPoint]) {
      if ([GeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface_class_() isInstance:GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self)]) {
        GeogebraCommonKernelGeosGeoPoint *p = [((id<GeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface>) nil_chk(((id<GeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface>) check_protocol_cast(GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self), @protocol(GeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface))))) getParentPoint];
        movedGeo = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) movePointWithGeogebraCommonKernelMatrixCoords:rwTransVec withGeogebraCommonKernelMatrixCoords:endPosition];
        geo = p;
      }
      else {
        movedGeo = [self movePointWithGeogebraCommonKernelMatrixCoords:rwTransVec withGeogebraCommonKernelMatrixCoords:endPosition];
      }
    }
    else if ([self isGeoVector]) {
      movedGeo = [self moveVectorWithGeogebraCommonKernelMatrixCoords:rwTransVec withGeogebraCommonKernelMatrixCoords:endPosition];
    }
    else if ([self isTranslateable]) {
      id<GeogebraCommonKernelGeosTranslateable> trans = (id<GeogebraCommonKernelGeosTranslateable>) check_protocol_cast(self, @protocol(GeogebraCommonKernelGeosTranslateable));
      [trans translateWithGeogebraCommonKernelMatrixCoords:rwTransVec];
      movedGeo = YES;
    }
    else if ([self isAbsoluteScreenLocateable]) {
      id<GeogebraCommonKernelGeosAbsoluteScreenLocateable> screenLoc = (id<GeogebraCommonKernelGeosAbsoluteScreenLocateable>) check_protocol_cast(self, @protocol(GeogebraCommonKernelGeosAbsoluteScreenLocateable));
      if ([screenLoc isAbsoluteScreenLocActive]) {
        jint vxPixel = (jint) JavaLangMath_roundWithDouble_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getXscale] * [((GeogebraCommonKernelMatrixCoords *) nil_chk(rwTransVec)) getX]);
        jint vyPixel = -(jint) JavaLangMath_roundWithDouble_([self->kernel_ getYscale] * [rwTransVec getY]);
        jint x = [screenLoc getAbsoluteScreenLocX] + vxPixel;
        jint y = [screenLoc getAbsoluteScreenLocY] + vyPixel;
        [screenLoc setAbsoluteScreenLocWithInt:x withInt:y];
        movedGeo = YES;
      }
      else if ([self isGeoNumeric]) {
        if (![((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) isSliderFixed]) {
          [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) setRealWorldLocWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) getRealWorldLocX] + [((GeogebraCommonKernelMatrixCoords *) nil_chk(rwTransVec)) getX] withDouble:[((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) getRealWorldLocY] + [rwTransVec getY]];
          movedGeo = YES;
        }
      }
      else if ([self isGeoText]) {
        GeogebraCommonKernelGeosGeoText *movedGeoText = (GeogebraCommonKernelGeosGeoText *) check_class_cast(self, [GeogebraCommonKernelGeosGeoText class]);
        if ([movedGeoText hasAbsoluteLocation]) {
          id<GeogebraCommonKernelKernelNDGeoPointND> locPoint = [movedGeoText getStartPoint];
          if (locPoint != nil) {
            [locPoint translateWithGeogebraCommonKernelMatrixCoords:rwTransVec];
            movedGeo = YES;
          }
        }
      }
    }
    if (movedGeo) {
      if (updateGeos != nil) {
        [updateGeos addWithId:geo];
      }
      else {
        [geo updateCascade];
      }
    }
  }
  else if ([self isTranslateable] && [GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self) isKindOfClass:[GeogebraCommonKernelAlgosAlgoTranslate class]]) {
    GeogebraCommonKernelAlgosAlgoElement *algo = GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(self);
    IOSObjectArray *input = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
    GeogebraCommonKernelGeosGeoElement *in = IOSObjectArray_Get(nil_chk(input), 1);
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(in)) isGeoVector]) {
      if ([in isIndependent]) {
        [in moveVectorWithGeogebraCommonKernelMatrixCoords:rwTransVec withGeogebraCommonKernelMatrixCoords:endPosition];
        GeogebraCommonKernelGeosGeoElement_addParentToUpdateListWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(in, updateGeos, self->tempMoveObjectList_);
      }
      else if ([GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(in) isKindOfClass:[GeogebraCommonKernelAlgosAlgoVectorPoint class]]) {
        GeogebraCommonKernelAlgosAlgoVectorPoint *algoVector = (GeogebraCommonKernelAlgosAlgoVectorPoint *) check_class_cast(GeogebraCommonKernelGeosGeoElement_getParentAlgorithm(in), [GeogebraCommonKernelAlgosAlgoVectorPoint class]);
        GeogebraCommonKernelGeosGeoElement *p = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonKernelAlgosAlgoVectorPoint *) nil_chk(algoVector)) getP], [GeogebraCommonKernelGeosGeoElement class]);
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(p)) isIndependent]) {
          [p movePointWithGeogebraCommonKernelMatrixCoords:rwTransVec withGeogebraCommonKernelMatrixCoords:endPosition];
          GeogebraCommonKernelGeosGeoElement_addParentToUpdateListWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(p, updateGeos, self->tempMoveObjectList_);
        }
      }
    }
  }
  else {
    movedGeo = [self moveFromChangeableCoordParentNumbersWithGeogebraCommonKernelMatrixCoords:rwTransVec withGeogebraCommonKernelMatrixCoords:endPosition withGeogebraCommonKernelMatrixCoords:viewDirection withJavaUtilArrayList:updateGeos withJavaUtilArrayList:self->tempMoveObjectList_ withGeogebraCommonEuclidianEuclidianView:view];
  }
  return movedGeo;
}

void GeogebraCommonKernelGeosGeoElement_addChangeableCoordParentNumberToUpdateListWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(GeogebraCommonKernelGeosGeoElement *number, JavaUtilArrayList *updateGeos, JavaUtilArrayList *tempMoveObjectList1) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  GeogebraCommonKernelGeosGeoElement_addParentToUpdateListWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(number, updateGeos, tempMoveObjectList1);
}

void GeogebraCommonKernelGeosGeoElement_addParentToUpdateListWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(GeogebraCommonKernelGeosGeoElement *number, JavaUtilArrayList *updateGeos, JavaUtilArrayList *tempMoveObjectList1) {
  GeogebraCommonKernelGeosGeoElement_initialize();
  if (updateGeos != nil) {
    [updateGeos addWithId:number];
  }
  else {
    JavaUtilArrayList *tempMoveObjectList2 = tempMoveObjectList1;
    if (tempMoveObjectList1 == nil) {
      tempMoveObjectList2 = [new_JavaUtilArrayList_init() autorelease];
    }
    [((JavaUtilArrayList *) nil_chk(tempMoveObjectList2)) addWithId:number];
    GeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(tempMoveObjectList2, GeogebraCommonKernelGeosGeoElement_getTempSet(), NO);
  }
}

GeogebraCommonKernelGeosGeoCasCell *GeogebraCommonKernelGeosGeoElement_getCorrespondingCasCell(GeogebraCommonKernelGeosGeoElement *self) {
  return self->correspondingCasCell_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoElement)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelGeosGeoElement_FillTypeEnum)

GeogebraCommonKernelGeosGeoElement_FillTypeEnum *GeogebraCommonKernelGeosGeoElement_FillTypeEnum_values_[9];

@implementation GeogebraCommonKernelGeosGeoElement_FillTypeEnum

- (jint)getValue {
  return value_;
}

- (instancetype)initWithInt:(jint)value
                withBoolean:(jboolean)hatch
               withNSString:(NSString *)__name
                    withInt:(jint)__ordinal {
  GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(self, value, hatch, __name, __ordinal);
  return self;
}

- (jboolean)isHatch {
  return hatch_;
}

IOSObjectArray *GeogebraCommonKernelGeosGeoElement_FillTypeEnum_values() {
  GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelGeosGeoElement_FillTypeEnum_values_ count:9 type:GeogebraCommonKernelGeosGeoElement_FillTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelGeosGeoElement_FillTypeEnum_values();
}

+ (GeogebraCommonKernelGeosGeoElement_FillTypeEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelGeosGeoElement_FillTypeEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelGeosGeoElement_FillTypeEnum *GeogebraCommonKernelGeosGeoElement_FillTypeEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initialize();
  for (int i = 0; i < 9; i++) {
    GeogebraCommonKernelGeosGeoElement_FillTypeEnum *e = GeogebraCommonKernelGeosGeoElement_FillTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelGeosGeoElement_FillTypeEnum class]) {
    GeogebraCommonKernelGeosGeoElement_FillTypeEnum_STANDARD = new_GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(0, NO, @"STANDARD", 0);
    GeogebraCommonKernelGeosGeoElement_FillTypeEnum_HATCH = new_GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(1, YES, @"HATCH", 1);
    GeogebraCommonKernelGeosGeoElement_FillTypeEnum_CROSSHATCHED = new_GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(2, YES, @"CROSSHATCHED", 2);
    GeogebraCommonKernelGeosGeoElement_FillTypeEnum_CHESSBOARD = new_GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(3, YES, @"CHESSBOARD", 3);
    GeogebraCommonKernelGeosGeoElement_FillTypeEnum_DOTTED = new_GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(4, YES, @"DOTTED", 4);
    GeogebraCommonKernelGeosGeoElement_FillTypeEnum_HONEYCOMB = new_GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(5, YES, @"HONEYCOMB", 5);
    GeogebraCommonKernelGeosGeoElement_FillTypeEnum_BRICK = new_GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(6, YES, @"BRICK", 6);
    GeogebraCommonKernelGeosGeoElement_FillTypeEnum_SYMBOLS = new_GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(7, YES, @"SYMBOLS", 7);
    GeogebraCommonKernelGeosGeoElement_FillTypeEnum_IMAGE = new_GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(8, NO, @"IMAGE", 8);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelGeosGeoElement_FillTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getValue", NULL, "I", 0x1, NULL, NULL },
    { "isHatch", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "STANDARD", "STANDARD", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$FillType;", &GeogebraCommonKernelGeosGeoElement_FillTypeEnum_STANDARD, NULL,  },
    { "HATCH", "HATCH", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$FillType;", &GeogebraCommonKernelGeosGeoElement_FillTypeEnum_HATCH, NULL,  },
    { "CROSSHATCHED", "CROSSHATCHED", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$FillType;", &GeogebraCommonKernelGeosGeoElement_FillTypeEnum_CROSSHATCHED, NULL,  },
    { "CHESSBOARD", "CHESSBOARD", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$FillType;", &GeogebraCommonKernelGeosGeoElement_FillTypeEnum_CHESSBOARD, NULL,  },
    { "DOTTED", "DOTTED", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$FillType;", &GeogebraCommonKernelGeosGeoElement_FillTypeEnum_DOTTED, NULL,  },
    { "HONEYCOMB", "HONEYCOMB", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$FillType;", &GeogebraCommonKernelGeosGeoElement_FillTypeEnum_HONEYCOMB, NULL,  },
    { "BRICK", "BRICK", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$FillType;", &GeogebraCommonKernelGeosGeoElement_FillTypeEnum_BRICK, NULL,  },
    { "SYMBOLS", "SYMBOLS", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$FillType;", &GeogebraCommonKernelGeosGeoElement_FillTypeEnum_SYMBOLS, NULL,  },
    { "IMAGE", "IMAGE", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$FillType;", &GeogebraCommonKernelGeosGeoElement_FillTypeEnum_IMAGE, NULL,  },
    { "value_", NULL, 0x2, "I", NULL, NULL,  },
    { "hatch_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.geos.GeoElement$FillType;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoElement_FillTypeEnum = { 2, "FillType", "geogebra.common.kernel.geos", "GeoElement", 0x4019, 2, methods, 11, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/geos/GeoElement$FillType;>;" };
  return &_GeogebraCommonKernelGeosGeoElement_FillTypeEnum;
}

@end

void GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(GeogebraCommonKernelGeosGeoElement_FillTypeEnum *self, jint value, jboolean hatch, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->value_ = value;
  self->hatch_ = hatch;
}

GeogebraCommonKernelGeosGeoElement_FillTypeEnum *new_GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(jint value, jboolean hatch, NSString *__name, jint __ordinal) {
  GeogebraCommonKernelGeosGeoElement_FillTypeEnum *self = [GeogebraCommonKernelGeosGeoElement_FillTypeEnum alloc];
  GeogebraCommonKernelGeosGeoElement_FillTypeEnum_initWithInt_withBoolean_withNSString_withInt_(self, value, hatch, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoElement_FillTypeEnum)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum)

GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum *GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_values_[3];

@implementation GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_values() {
  GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_values_ count:3 type:GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_values();
}

+ (GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum *GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_initialize();
  for (int i = 0; i < 3; i++) {
    GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum *e = GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum class]) {
    GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_NOT_SET = new_GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_initWithNSString_withInt_(@"NOT_SET", 0);
    GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_TRUE = new_GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_initWithNSString_withInt_(@"TRUE", 1);
    GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_FALSE = new_GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_initWithNSString_withInt_(@"FALSE", 2);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "NOT_SET", "NOT_SET", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$VisibleInView3D;", &GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_NOT_SET, NULL,  },
    { "TRUE", "TRUE", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$VisibleInView3D;", &GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_TRUE, NULL,  },
    { "FALSE", "FALSE", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$VisibleInView3D;", &GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_FALSE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.geos.GeoElement$VisibleInView3D;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum = { 2, "VisibleInView3D", "geogebra.common.kernel.geos", "GeoElement", 0x401a, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/geos/GeoElement$VisibleInView3D;>;" };
  return &_GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum;
}

@end

void GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_initWithNSString_withInt_(GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum *new_GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum *self = [GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum alloc];
  GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoElement_VisibleInView3DEnum)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum)

GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_values_[6];

@implementation GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_values() {
  GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_values_ count:6 type:GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_values();
}

+ (GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initialize();
  for (int i = 0; i < 6; i++) {
    GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *e = GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum class]) {
    GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_ONLY_COPY = new_GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(@"ONLY_COPY", 0);
    GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_ONE_VALUE_OR_COPY = new_GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(@"ONE_VALUE_OR_COPY", 1);
    GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_ONE_VALUE_ONLY = new_GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(@"ONE_VALUE_ONLY", 2);
    GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_SEVERAL_VALUES_OR_COPY = new_GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(@"SEVERAL_VALUES_OR_COPY", 3);
    GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_SEVERAL_VALUES_ONLY = new_GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(@"SEVERAL_VALUES_ONLY", 4);
    GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_NOT_TRACEABLE = new_GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(@"NOT_TRACEABLE", 5);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "ONLY_COPY", "ONLY_COPY", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", &GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_ONLY_COPY, NULL,  },
    { "ONE_VALUE_OR_COPY", "ONE_VALUE_OR_COPY", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", &GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_ONE_VALUE_OR_COPY, NULL,  },
    { "ONE_VALUE_ONLY", "ONE_VALUE_ONLY", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", &GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_ONE_VALUE_ONLY, NULL,  },
    { "SEVERAL_VALUES_OR_COPY", "SEVERAL_VALUES_OR_COPY", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", &GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_SEVERAL_VALUES_OR_COPY, NULL,  },
    { "SEVERAL_VALUES_ONLY", "SEVERAL_VALUES_ONLY", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", &GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_SEVERAL_VALUES_ONLY, NULL,  },
    { "NOT_TRACEABLE", "NOT_TRACEABLE", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", &GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_NOT_TRACEABLE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum = { 2, "TraceModesEnum", "geogebra.common.kernel.geos", "GeoElement", 0x4019, 0, NULL, 6, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/geos/GeoElement$TraceModesEnum;>;" };
  return &_GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum;
}

@end

void GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *new_GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *self = [GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum alloc];
  GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelGeosGeoElement_HitTypeEnum)

GeogebraCommonKernelGeosGeoElement_HitTypeEnum *GeogebraCommonKernelGeosGeoElement_HitTypeEnum_values_[3];

@implementation GeogebraCommonKernelGeosGeoElement_HitTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonKernelGeosGeoElement_HitTypeEnum_values() {
  GeogebraCommonKernelGeosGeoElement_HitTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelGeosGeoElement_HitTypeEnum_values_ count:3 type:GeogebraCommonKernelGeosGeoElement_HitTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_values();
}

+ (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelGeosGeoElement_HitTypeEnum *GeogebraCommonKernelGeosGeoElement_HitTypeEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelGeosGeoElement_HitTypeEnum_initialize();
  for (int i = 0; i < 3; i++) {
    GeogebraCommonKernelGeosGeoElement_HitTypeEnum *e = GeogebraCommonKernelGeosGeoElement_HitTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelGeosGeoElement_HitTypeEnum class]) {
    GeogebraCommonKernelGeosGeoElement_HitTypeEnum_NONE = new_GeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(@"NONE", 0);
    GeogebraCommonKernelGeosGeoElement_HitTypeEnum_ON_BOUNDARY = new_GeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(@"ON_BOUNDARY", 1);
    GeogebraCommonKernelGeosGeoElement_HitTypeEnum_ON_FILLING = new_GeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(@"ON_FILLING", 2);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelGeosGeoElement_HitTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "NONE", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", &GeogebraCommonKernelGeosGeoElement_HitTypeEnum_NONE, NULL,  },
    { "ON_BOUNDARY", "ON_BOUNDARY", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", &GeogebraCommonKernelGeosGeoElement_HitTypeEnum_ON_BOUNDARY, NULL,  },
    { "ON_FILLING", "ON_FILLING", 0x4019, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", &GeogebraCommonKernelGeosGeoElement_HitTypeEnum_ON_FILLING, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.geos.GeoElement$HitType;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoElement_HitTypeEnum = { 2, "HitType", "geogebra.common.kernel.geos", "GeoElement", 0x4019, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/geos/GeoElement$HitType;>;" };
  return &_GeogebraCommonKernelGeosGeoElement_HitTypeEnum;
}

@end

void GeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(GeogebraCommonKernelGeosGeoElement_HitTypeEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonKernelGeosGeoElement_HitTypeEnum *new_GeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonKernelGeosGeoElement_HitTypeEnum *self = [GeogebraCommonKernelGeosGeoElement_HitTypeEnum alloc];
  GeogebraCommonKernelGeosGeoElement_HitTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoElement_HitTypeEnum)

@implementation GeogebraCommonKernelGeosGeoElement_$1

- (jint)compareWithId:(GeogebraCommonKernelAlgosAlgoElement *)o1
               withId:(GeogebraCommonKernelAlgosAlgoElement *)o2 {
  return [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(o1)) compareToWithId:o2];
}

- (instancetype)init {
  GeogebraCommonKernelGeosGeoElement_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoElement_$1 = { 2, "", "geogebra.common.kernel.geos", "GeoElement", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Lgeogebra/common/kernel/algos/AlgoElement;>;" };
  return &_GeogebraCommonKernelGeosGeoElement_$1;
}

@end

void GeogebraCommonKernelGeosGeoElement_$1_init(GeogebraCommonKernelGeosGeoElement_$1 *self) {
  NSObject_init(self);
}

GeogebraCommonKernelGeosGeoElement_$1 *new_GeogebraCommonKernelGeosGeoElement_$1_init() {
  GeogebraCommonKernelGeosGeoElement_$1 *self = [GeogebraCommonKernelGeosGeoElement_$1 alloc];
  GeogebraCommonKernelGeosGeoElement_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoElement_$1)
