//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/MyStringBuffer.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashSet.h"

@interface GeogebraCommonKernelArithmeticMyStringBuffer () {
 @public
  JavaLangStringBuilder *sb_;
  GeogebraCommonKernelKernel *kernel_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticMyStringBuffer, sb_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticMyStringBuffer, kernel_, GeogebraCommonKernelKernel *)

@implementation GeogebraCommonKernelArithmeticMyStringBuffer

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                      withNSString:(NSString *)str {
  GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(self, kernel, str);
  return self;
}

- (void)appendWithNSString:(NSString *)str {
  [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:str];
}

- (void)insertWithInt:(jint)pos
         withNSString:(NSString *)str {
  [((JavaLangStringBuilder *) nil_chk(sb_)) insertWithInt:pos withNSString:str];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *temp = [new_JavaLangStringBuilder_init() autorelease];
  [temp appendWithNSString:@"\""];
  [temp appendWithJavaLangCharSequence:sb_];
  [temp appendWithNSString:@"\""];
  return [temp description];
}

- (void)resolveVariables {
}

- (jboolean)isConstant {
  return YES;
}

- (jboolean)isLeaf {
  return YES;
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)evaluatesToText {
  return YES;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernelForCopy {
  return [self getText];
}

- (JavaUtilHashSet *)getVariables {
  return nil;
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((JavaLangStringBuilder *) nil_chk(sb_)) description];
}

- (NSString *)toOutputValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuffer *sb2 = [new_JavaLangStringBuffer_initWithInt_([((JavaLangStringBuilder *) nil_chk(sb_)) length] + 2) autorelease];
  [sb2 appendWithChar:'"'];
  [sb2 appendWithJavaLangCharSequence:sb_];
  [sb2 appendWithChar:'"'];
  return [sb2 description];
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((JavaLangStringBuilder *) nil_chk(sb_)) description];
}

- (GeogebraCommonKernelArithmeticMyStringBuffer *)getText {
  return [new_GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, [((JavaLangStringBuilder *) nil_chk(sb_)) description]) autorelease];
}

- (jboolean)containsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

- (GeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self) autorelease];
}

- (void)dealloc {
  RELEASE_(sb_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withNSString:", "MyStringBuffer", NULL, 0x1, NULL, NULL },
    { "appendWithNSString:", "append", "V", 0x1, NULL, NULL },
    { "insertWithInt:withNSString:", "insert", "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToText", NULL, "Z", 0x1, NULL, NULL },
    { "deepCopyWithGeogebraCommonKernelKernel:", "deepCopy", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toOutputValueStringWithGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toLaTeXStringWithBoolean:withGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getText", NULL, "Lgeogebra.common.kernel.arithmetic.MyStringBuffer;", 0x1, NULL, NULL },
    { "containsWithGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "wrap", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticMyStringBuffer = { 2, "MyStringBuffer", "geogebra.common.kernel.arithmetic", NULL, 0x1, 18, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticMyStringBuffer;
}

@end

void GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(GeogebraCommonKernelArithmeticMyStringBuffer *self, GeogebraCommonKernelKernel *kernel, NSString *str) {
  GeogebraCommonKernelArithmeticValidExpression_init(self);
  GeogebraCommonKernelArithmeticMyStringBuffer_setAndConsume_sb_(self, new_JavaLangStringBuilder_initWithNSString_(str));
  GeogebraCommonKernelArithmeticMyStringBuffer_set_kernel_(self, kernel);
}

GeogebraCommonKernelArithmeticMyStringBuffer *new_GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(GeogebraCommonKernelKernel *kernel, NSString *str) {
  GeogebraCommonKernelArithmeticMyStringBuffer *self = [GeogebraCommonKernelArithmeticMyStringBuffer alloc];
  GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(self, kernel, str);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticMyStringBuffer)
