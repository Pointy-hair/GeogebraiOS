//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/random/AbstractRandomGenerator.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "org/apache/commons/math/exception/NotStrictlyPositiveException.h"
#include "org/apache/commons/math/random/AbstractRandomGenerator.h"
#include "org/apache/commons/math/util/FastMath.h"

@interface OrgApacheCommonsMathRandomAbstractRandomGenerator () {
 @public
  jdouble cachedNormalDeviate_;
}

@end

@implementation OrgApacheCommonsMathRandomAbstractRandomGenerator

- (instancetype)init {
  OrgApacheCommonsMathRandomAbstractRandomGenerator_init(self);
  return self;
}

- (void)clear {
  cachedNormalDeviate_ = JavaLangDouble_NaN;
}

- (void)setSeedWithInt:(jint)seed {
  [self setSeedWithLong:(jlong) seed];
}

- (void)setSeedWithIntArray:(IOSIntArray *)seed {
  jlong prime = 4294967291l;
  jlong combined = 0l;
  {
    IOSIntArray *a__ = seed;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint s = *b__++;
      combined = combined * prime + s;
    }
  }
  [self setSeedWithLong:combined];
}

- (void)setSeedWithLong:(jlong)seed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)nextBytesWithByteArray:(IOSByteArray *)bytes {
  jint bytesOut = 0;
  while (bytesOut < ((IOSByteArray *) nil_chk(bytes))->size_) {
    jint randInt = [self nextInt];
    for (jint i = 0; i < 3; i++) {
      if (i > 0) {
        randInt = RShift32(randInt, 8);
      }
      *IOSByteArray_GetRef(bytes, bytesOut++) = (jbyte) randInt;
      if (bytesOut == bytes->size_) {
        return;
      }
    }
  }
}

- (jint)nextInt {
  return J2ObjCFpToInt(([self nextDouble] * JavaLangInteger_MAX_VALUE));
}

- (jint)nextIntWithInt:(jint)n {
  if (n <= 0) {
    @throw [new_OrgApacheCommonsMathExceptionNotStrictlyPositiveException_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(n)) autorelease];
  }
  jint result = J2ObjCFpToInt(([self nextDouble] * n));
  return result < n ? result : n - 1;
}

- (jlong)nextLong {
  return J2ObjCFpToLong(([self nextDouble] * JavaLangLong_MAX_VALUE));
}

- (jboolean)nextBoolean {
  return [self nextDouble] <= 0.5;
}

- (jfloat)nextFloat {
  return (jfloat) [self nextDouble];
}

- (jdouble)nextDouble {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)nextGaussian {
  if (!JavaLangDouble_isNaNWithDouble_(cachedNormalDeviate_)) {
    jdouble dev = cachedNormalDeviate_;
    cachedNormalDeviate_ = JavaLangDouble_NaN;
    return dev;
  }
  jdouble v1 = 0;
  jdouble v2 = 0;
  jdouble s = 1;
  while (s >= 1) {
    v1 = 2 * [self nextDouble] - 1;
    v2 = 2 * [self nextDouble] - 1;
    s = v1 * v1 + v2 * v2;
  }
  if (s != 0) {
    s = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(-2 * OrgApacheCommonsMathUtilFastMath_logWithDouble_(s) / s);
  }
  cachedNormalDeviate_ = v2 * s;
  return v1 * s;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AbstractRandomGenerator", NULL, 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "setSeedWithInt:", "setSeed", "V", 0x1, NULL, NULL },
    { "setSeedWithIntArray:", "setSeed", "V", 0x1, NULL, NULL },
    { "setSeedWithLong:", "setSeed", "V", 0x401, NULL, NULL },
    { "nextBytesWithByteArray:", "nextBytes", "V", 0x1, NULL, NULL },
    { "nextInt", NULL, "I", 0x1, NULL, NULL },
    { "nextIntWithInt:", "nextInt", "I", 0x1, NULL, NULL },
    { "nextLong", NULL, "J", 0x1, NULL, NULL },
    { "nextBoolean", NULL, "Z", 0x1, NULL, NULL },
    { "nextFloat", NULL, "F", 0x1, NULL, NULL },
    { "nextDouble", NULL, "D", 0x401, NULL, NULL },
    { "nextGaussian", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cachedNormalDeviate_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathRandomAbstractRandomGenerator = { 2, "AbstractRandomGenerator", "org.apache.commons.math.random", NULL, 0x401, 13, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathRandomAbstractRandomGenerator;
}

@end

void OrgApacheCommonsMathRandomAbstractRandomGenerator_init(OrgApacheCommonsMathRandomAbstractRandomGenerator *self) {
  NSObject_init(self);
  self->cachedNormalDeviate_ = JavaLangDouble_NaN;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathRandomAbstractRandomGenerator)
