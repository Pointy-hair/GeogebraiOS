//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawInequality.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GArea.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/GeneralPathClipped.h"
#include "geogebra/common/euclidian/draw/DrawConic.h"
#include "geogebra/common/euclidian/draw/DrawInequality.h"
#include "geogebra/common/euclidian/draw/DrawInequality1Var.h"
#include "geogebra/common/euclidian/draw/DrawLine.h"
#include "geogebra/common/euclidian/draw/DrawParametricInequality.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/arithmetic/IneqTree.h"
#include "geogebra/common/kernel/arithmetic/Inequality.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonEuclidianDrawDrawInequality () {
 @public
  jboolean isVisible_;
  GeogebraCommonEuclidianDrawable *drawable_;
  GeogebraCommonPluginOperationEnum *operation_;
  GeogebraCommonEuclidianDrawDrawInequality *left_, *right_;
  GeogebraCommonKernelArithmeticInequality *ineq_;
  id<GeogebraCommonKernelArithmeticFunctionalNVar> function_;
  IOSObjectArray *gpAxis_;
}

- (instancetype)initWithGeogebraCommonKernelArithmeticIneqTree:(GeogebraCommonKernelArithmeticIneqTree *)tree
                      withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                        withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (void)updateRecursiveWithGeogebraCommonKernelArithmeticIneqTree:(GeogebraCommonKernelArithmeticIneqTree *)it;

- (void)createDrawable;

- (void)updateShape;

- (void)updateTreesWithGeogebraCommonKernelArithmeticIneqTree:(GeogebraCommonKernelArithmeticIneqTree *)it;

+ (jboolean)matchBorderWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)border
                          withGeogebraCommonEuclidianDrawable:(GeogebraCommonEuclidianDrawable *)d;

- (jboolean)hit2WithInt:(jint)x
                withInt:(jint)y;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawInequality, drawable_, GeogebraCommonEuclidianDrawable *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawInequality, operation_, GeogebraCommonPluginOperationEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawInequality, left_, GeogebraCommonEuclidianDrawDrawInequality *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawInequality, right_, GeogebraCommonEuclidianDrawDrawInequality *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawInequality, ineq_, GeogebraCommonKernelArithmeticInequality *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawInequality, function_, id<GeogebraCommonKernelArithmeticFunctionalNVar>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawInequality, gpAxis_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonKernelArithmeticIneqTree_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonEuclidianDrawDrawInequality *self, GeogebraCommonKernelArithmeticIneqTree *tree, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static GeogebraCommonEuclidianDrawDrawInequality *new_GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonKernelArithmeticIneqTree_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelArithmeticIneqTree *tree, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoElement *geo) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawInequality_update(GeogebraCommonEuclidianDrawDrawInequality *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawInequality_updateRecursiveWithGeogebraCommonKernelArithmeticIneqTree_(GeogebraCommonEuclidianDrawDrawInequality *self, GeogebraCommonKernelArithmeticIneqTree *it);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawInequality_createDrawable(GeogebraCommonEuclidianDrawDrawInequality *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawInequality_updateShape(GeogebraCommonEuclidianDrawDrawInequality *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawInequality_updateTreesWithGeogebraCommonKernelArithmeticIneqTree_(GeogebraCommonEuclidianDrawDrawInequality *self, GeogebraCommonKernelArithmeticIneqTree *it);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianDrawDrawInequality_matchBorderWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonEuclidianDrawable_(GeogebraCommonKernelGeosGeoElement *border, GeogebraCommonEuclidianDrawable *d);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(GeogebraCommonEuclidianDrawDrawInequality *self, jint x, jint y);

@implementation GeogebraCommonEuclidianDrawDrawInequality

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
            withGeogebraCommonKernelArithmeticFunctionalNVar:(id<GeogebraCommonKernelArithmeticFunctionalNVar>)function {
  GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelArithmeticFunctionalNVar_(self, view, function);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelArithmeticIneqTree:(GeogebraCommonKernelArithmeticIneqTree *)tree
                      withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                        withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonKernelArithmeticIneqTree_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_(self, tree, view, geo);
  return self;
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawInequality_update(self);
}

- (void)updateRecursiveWithGeogebraCommonKernelArithmeticIneqTree:(GeogebraCommonKernelArithmeticIneqTree *)it {
  GeogebraCommonEuclidianDrawDrawInequality_updateRecursiveWithGeogebraCommonKernelArithmeticIneqTree_(self, it);
}

- (void)createDrawable {
  GeogebraCommonEuclidianDrawDrawInequality_createDrawable(self);
}

- (void)updateShape {
  GeogebraCommonEuclidianDrawDrawInequality_updateShape(self);
}

- (void)updateTreesWithGeogebraCommonKernelArithmeticIneqTree:(GeogebraCommonKernelArithmeticIneqTree *)it {
  GeogebraCommonEuclidianDrawDrawInequality_updateTreesWithGeogebraCommonKernelArithmeticIneqTree_(self, it);
}

+ (jboolean)matchBorderWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)border
                          withGeogebraCommonEuclidianDrawable:(GeogebraCommonEuclidianDrawable *)d {
  return GeogebraCommonEuclidianDrawDrawInequality_matchBorderWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonEuclidianDrawable_(border, d);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (![self isForceNoFill] && !isVisible_) return;
  if ([((GeogebraCommonPluginOperationEnum *) nil_chk(operation_)) isEqual:GeogebraCommonPluginOperationEnum_get_NO_OPERATION()]) {
    if (drawable_ != nil) {
      [drawable_ updateStrokesJustLineThicknessWithGeogebraCommonKernelGeosGeoElement:geo_];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getLineThickness] > 0) [drawable_ drawWithGeogebraCommonAwtGGraphics2D:g2];
    }
  }
  else {
    if (left_ != nil) {
      [left_ updateStrokesJustLineThicknessWithGeogebraCommonKernelGeosGeoElement:geo_];
      [left_ drawWithGeogebraCommonAwtGGraphics2D:g2];
    }
    if (right_ != nil) {
      [right_ updateStrokesJustLineThicknessWithGeogebraCommonKernelGeosGeoElement:geo_];
      [right_ drawWithGeogebraCommonAwtGGraphics2D:g2];
    }
  }
  if (![self isForceNoFill]) {
    if (gpAxis_ != nil) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
        [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getSelColor]];
        [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
        for (jint i = 0; IOSObjectArray_Get(gpAxis_, i) != nil; i++) {
          [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(gpAxis_, i)];
        }
      }
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[self getObjectColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
      for (jint i = 0; IOSObjectArray_Get(gpAxis_, i) != nil; i++) {
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(gpAxis_, i)];
      }
    }
    else {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getFillType] != GeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_IMAGE()) {
        [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:geo_];
      }
      [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:[self getShape] withBoolean:YES];
    }
  }
  if (labelVisible_) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontConic]];
    [g2 setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getLabelColor]];
    [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (jboolean)hit2WithInt:(jint)x
                withInt:(jint)y {
  return GeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(self, x, y);
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isEuclidianVisible]) return NO;
  if ([geo_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]] && [((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo_, [GeogebraCommonKernelGeosGeoFunction class])) showOnAxis] && JavaLangMath_absWithInt_(y - [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toScreenCoordYWithDouble:0]) > hitThreshold) return NO;
  return GeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(self, x, y) || GeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(self, x - 4, y) || GeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(self, x + 4, y) || GeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(self, x, y - 4) || GeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(self, x, y + 4);
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return NO;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (void)dealloc {
  RELEASE_(drawable_);
  RELEASE_(operation_);
  RELEASE_(left_);
  RELEASE_(right_);
  RELEASE_(ineq_);
  RELEASE_(function_);
  RELEASE_(gpAxis_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelArithmeticFunctionalNVar:", "DrawInequality", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelArithmeticIneqTree:withGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoElement:", "DrawInequality", NULL, 0x2, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "updateRecursiveWithGeogebraCommonKernelArithmeticIneqTree:", "updateRecursive", "V", 0x2, NULL, NULL },
    { "createDrawable", NULL, "V", 0x2, NULL, NULL },
    { "updateShape", NULL, "V", 0x2, NULL, NULL },
    { "updateTreesWithGeogebraCommonKernelArithmeticIneqTree:", "updateTrees", "V", 0x2, NULL, NULL },
    { "matchBorderWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonEuclidianDrawable:", "matchBorder", "Z", 0xa, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "hit2WithInt:withInt:", "hit2", "Z", 0x2, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x1, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x1, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x0, "Z", NULL, NULL,  },
    { "drawable_", NULL, 0x2, "Lgeogebra.common.euclidian.Drawable;", NULL, NULL,  },
    { "operation_", NULL, 0x2, "Lgeogebra.common.plugin.Operation;", NULL, NULL,  },
    { "left_", NULL, 0x2, "Lgeogebra.common.euclidian.draw.DrawInequality;", NULL, NULL,  },
    { "right_", NULL, 0x2, "Lgeogebra.common.euclidian.draw.DrawInequality;", NULL, NULL,  },
    { "ineq_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Inequality;", NULL, NULL,  },
    { "function_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.FunctionalNVar;", NULL, NULL,  },
    { "gpAxis_", NULL, 0x2, "[Lgeogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawInequality = { 2, "DrawInequality", "geogebra.common.euclidian.draw", NULL, 0x1, 14, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawInequality;
}

@end

void GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelArithmeticFunctionalNVar_(GeogebraCommonEuclidianDrawDrawInequality *self, GeogebraCommonEuclidianEuclidianView *view, id<GeogebraCommonKernelArithmeticFunctionalNVar> function) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawInequality_set_operation_(self, GeogebraCommonPluginOperationEnum_get_NO_OPERATION());
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawable_set_geo_(self, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(function, [GeogebraCommonKernelGeosGeoElement class]));
  GeogebraCommonEuclidianDrawDrawInequality_set_function_(self, function);
  GeogebraCommonEuclidianDrawDrawInequality_set_operation_(self, [((GeogebraCommonKernelArithmeticIneqTree *) nil_chk([((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(function)) getIneqs])) getOperation]);
  if ([((GeogebraCommonKernelArithmeticIneqTree *) nil_chk([function getIneqs])) getLeft] != nil) GeogebraCommonEuclidianDrawDrawInequality_setAndConsume_left_(self, new_GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonKernelArithmeticIneqTree_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_([((GeogebraCommonKernelArithmeticIneqTree *) nil_chk([function getIneqs])) getLeft], view, self->geo_));
  if ([((GeogebraCommonKernelArithmeticIneqTree *) nil_chk([function getIneqs])) getRight] != nil) GeogebraCommonEuclidianDrawDrawInequality_setAndConsume_right_(self, new_GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonKernelArithmeticIneqTree_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_([((GeogebraCommonKernelArithmeticIneqTree *) nil_chk([function getIneqs])) getRight], view, self->geo_));
  if ([((GeogebraCommonKernelArithmeticIneqTree *) nil_chk([function getIneqs])) getIneq] != nil) GeogebraCommonEuclidianDrawDrawInequality_set_ineq_(self, [((GeogebraCommonKernelArithmeticIneqTree *) nil_chk([function getIneqs])) getIneq]);
  GeogebraCommonEuclidianDrawDrawInequality_update(self);
}

GeogebraCommonEuclidianDrawDrawInequality *new_GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelArithmeticFunctionalNVar_(GeogebraCommonEuclidianEuclidianView *view, id<GeogebraCommonKernelArithmeticFunctionalNVar> function) {
  GeogebraCommonEuclidianDrawDrawInequality *self = [GeogebraCommonEuclidianDrawDrawInequality alloc];
  GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelArithmeticFunctionalNVar_(self, view, function);
  return self;
}

void GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonKernelArithmeticIneqTree_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonEuclidianDrawDrawInequality *self, GeogebraCommonKernelArithmeticIneqTree *tree, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawInequality_set_operation_(self, GeogebraCommonPluginOperationEnum_get_NO_OPERATION());
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
  [self setForceNoFillWithBoolean:YES];
  GeogebraCommonEuclidianDrawDrawInequality_updateRecursiveWithGeogebraCommonKernelArithmeticIneqTree_(self, tree);
}

GeogebraCommonEuclidianDrawDrawInequality *new_GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonKernelArithmeticIneqTree_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelArithmeticIneqTree *tree, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonEuclidianDrawDrawInequality *self = [GeogebraCommonEuclidianDrawDrawInequality alloc];
  GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonKernelArithmeticIneqTree_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_(self, tree, view, geo);
  return self;
}

void GeogebraCommonEuclidianDrawDrawInequality_update(GeogebraCommonEuclidianDrawDrawInequality *self) {
  self->isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  self->labelVisible_ = [self->geo_ isLabelVisible];
  GeogebraCommonEuclidianDrawDrawInequality_updateRecursiveWithGeogebraCommonKernelArithmeticIneqTree_(self, [((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(self->function_)) getIneqs]);
  GeogebraCommonEuclidianDrawable_set_labelDesc_(self, [self->geo_ getLabelDescription]);
  if (([self->geo_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) && [((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoFunction class])) showOnAxis] && ![@"y" isEqual:[((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoFunction class])) getVarStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
    JavaUtilTreeSet *zeros = [new_JavaUtilTreeSet_init() autorelease];
    [((GeogebraCommonKernelArithmeticIneqTree *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoFunction class])) getIneqs])) getZerosWithJavaUtilSet:zeros];
    jdouble radius = [self->geo_ getLineThickness] * GeogebraCommonEuclidianDrawDrawInequality1Var_DOT_RADIUS;
    [zeros addWithId:JavaLangDouble_valueOfWithDouble_([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getXmin] - 2 * radius * [self->view_ getXscale])];
    [zeros addWithId:JavaLangDouble_valueOfWithDouble_([self->view_ getXmax] + 2 * radius * [self->view_ getXscale])];
    GeogebraCommonEuclidianDrawDrawInequality_setAndConsume_gpAxis_(self, [IOSObjectArray newArrayWithLength:[zeros size] type:GeogebraCommonEuclidianGeneralPathClipped_class_()]);
    JavaLangDouble *last = nil;
    jint gpCount = 0;
    for (JavaLangDouble * __strong zero in zeros) {
      if (last != nil) {
        jboolean value = [((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoFunction class])) evaluateBooleanWithDouble:0.5 * ([last doubleValue] + [((JavaLangDouble *) nil_chk(zero)) doubleValue])];
        if (value) {
          IOSObjectArray_SetAndConsume(self->gpAxis_, gpCount, new_GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self->view_));
          [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(self->gpAxis_, gpCount))) moveToWithDouble:[self->view_ toScreenCoordXdWithDouble:[last doubleValue]] + radius withDouble:[self->view_ toScreenCoordYdWithDouble:0]];
          [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(self->gpAxis_, gpCount))) lineToWithDouble:[self->view_ toScreenCoordXdWithDouble:[zero doubleValue]] - radius withDouble:[self->view_ toScreenCoordYdWithDouble:0]];
          gpCount++;
        }
      }
      last = zero;
    }
    [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:self->geo_];
  }
  else GeogebraCommonEuclidianDrawDrawInequality_set_gpAxis_(self, nil);
}

void GeogebraCommonEuclidianDrawDrawInequality_updateRecursiveWithGeogebraCommonKernelArithmeticIneqTree_(GeogebraCommonEuclidianDrawDrawInequality *self, GeogebraCommonKernelArithmeticIneqTree *it) {
  GeogebraCommonEuclidianDrawDrawInequality_updateTreesWithGeogebraCommonKernelArithmeticIneqTree_(self, it);
  GeogebraCommonEuclidianDrawDrawInequality_set_operation_(self, [((GeogebraCommonKernelArithmeticIneqTree *) nil_chk(it)) getOperation]);
  GeogebraCommonEuclidianDrawDrawInequality_updateShape(self);
  if (self->left_ != nil) {
    self->yLabel_ = self->left_->yLabel_;
    self->xLabel_ = self->left_->xLabel_;
  }
  if (self->ineq_ != [it getIneq]) GeogebraCommonEuclidianDrawDrawInequality_set_ineq_(self, [it getIneq]);
  if (self->ineq_ != nil) {
    if (self->drawable_ == nil || !GeogebraCommonEuclidianDrawDrawInequality_matchBorderWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonEuclidianDrawable_([self->ineq_ getBorder], self->drawable_)) {
      GeogebraCommonEuclidianDrawDrawInequality_createDrawable(self);
    }
    else if ([self->ineq_ getType] == GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_CONIC()) {
      [((GeogebraCommonKernelGeosGeoConic *) nil_chk([self->ineq_ getConicBorder])) setInverseFillWithBoolean:[self->ineq_ isAboveBorder]];
      if ([self->drawable_ isKindOfClass:[GeogebraCommonEuclidianDrawDrawConic class]]) {
        [((GeogebraCommonEuclidianDrawDrawConic *) check_class_cast(self->drawable_, [GeogebraCommonEuclidianDrawDrawConic class])) setIgnoreSingularitiesWithBoolean:![self->ineq_ isStrict] == [self->ineq_ isAboveBorder]];
      }
    }
    [((GeogebraCommonEuclidianDrawable *) nil_chk(self->drawable_)) update];
    [self setShapeWithGeogebraCommonAwtGArea:[self->drawable_ getShape]];
    self->xLabel_ = self->drawable_->xLabel_;
    self->yLabel_ = self->drawable_->yLabel_;
  }
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isInverseFill] && ![self isForceNoFill]) {
    id<GeogebraCommonAwtGArea> b = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithGeogebraCommonAwtGShape:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getBoundingPath]];
    [((id<GeogebraCommonAwtGArea>) nil_chk(b)) subtractWithGeogebraCommonAwtGArea:[self getShape]];
    [self setShapeWithGeogebraCommonAwtGArea:b];
  }
}

void GeogebraCommonEuclidianDrawDrawInequality_createDrawable(GeogebraCommonEuclidianDrawDrawInequality *self) {
  switch ([[((GeogebraCommonKernelArithmeticInequality *) nil_chk(self->ineq_)) getType] ordinal]) {
    case GeogebraCommonKernelArithmeticInequality_IneqType_INEQUALITY_PARAMETRIC_Y:
    GeogebraCommonEuclidianDrawDrawInequality_setAndConsume_drawable_(self, new_GeogebraCommonEuclidianDrawDrawParametricInequality_initWithGeogebraCommonKernelArithmeticInequality_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_(self->ineq_, self->view_, self->geo_));
    break;
    case GeogebraCommonKernelArithmeticInequality_IneqType_INEQUALITY_PARAMETRIC_X:
    GeogebraCommonEuclidianDrawDrawInequality_setAndConsume_drawable_(self, new_GeogebraCommonEuclidianDrawDrawParametricInequality_initWithGeogebraCommonKernelArithmeticInequality_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_(self->ineq_, self->view_, self->geo_));
    break;
    case GeogebraCommonKernelArithmeticInequality_IneqType_INEQUALITY_1VAR_X:
    GeogebraCommonEuclidianDrawDrawInequality_setAndConsume_drawable_(self, new_GeogebraCommonEuclidianDrawDrawInequality1Var_initWithGeogebraCommonKernelArithmeticInequality_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self->ineq_, self->view_, self->geo_, NO));
    break;
    case GeogebraCommonKernelArithmeticInequality_IneqType_INEQUALITY_1VAR_Y:
    GeogebraCommonEuclidianDrawDrawInequality_setAndConsume_drawable_(self, new_GeogebraCommonEuclidianDrawDrawInequality1Var_initWithGeogebraCommonKernelArithmeticInequality_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self->ineq_, self->view_, self->geo_, YES));
    break;
    case GeogebraCommonKernelArithmeticInequality_IneqType_INEQUALITY_CONIC:
    GeogebraCommonEuclidianDrawDrawInequality_setAndConsume_drawable_(self, new_GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(self->view_, [self->ineq_ getConicBorder], ![self->ineq_ isStrict] == [self->ineq_ isAboveBorder]));
    [((GeogebraCommonKernelGeosGeoConic *) nil_chk([self->ineq_ getConicBorder])) setInverseFillWithBoolean:[self->ineq_ isAboveBorder]];
    break;
    case GeogebraCommonKernelArithmeticInequality_IneqType_INEQUALITY_LINEAR:
    GeogebraCommonEuclidianDrawDrawInequality_setAndConsume_drawable_(self, new_GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(self->view_, [self->ineq_ getLineBorder]));
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk([self->ineq_ getLineBorder])) setInverseFillWithBoolean:[self->ineq_ isAboveBorder]];
    break;
    default:
    GeogebraCommonMainApp_debugWithNSString_(@"Unhandled inequality type");
    return;
  }
  [((GeogebraCommonEuclidianDrawable *) nil_chk(self->drawable_)) setGeoElementWithGeogebraCommonKernelGeosGeoElement:self->geo_];
  [self->drawable_ setForceNoFillWithBoolean:YES];
}

void GeogebraCommonEuclidianDrawDrawInequality_updateShape(GeogebraCommonEuclidianDrawDrawInequality *self) {
  if ([((GeogebraCommonPluginOperationEnum *) nil_chk(self->operation_)) isEqual:GeogebraCommonPluginOperationEnum_get_AND()] || [self->operation_ isEqual:GeogebraCommonPluginOperationEnum_get_AND_INTERVAL()]) {
    [self setShapeWithGeogebraCommonAwtGArea:[((GeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->left_)) getShape]];
    [((id<GeogebraCommonAwtGArea>) nil_chk([self getShape])) intersectWithGeogebraCommonAwtGArea:[((GeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->right_)) getShape]];
  }
  else if ([self->operation_ isEqual:GeogebraCommonPluginOperationEnum_get_OR()]) {
    [self setShapeWithGeogebraCommonAwtGArea:[((GeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->left_)) getShape]];
    [((id<GeogebraCommonAwtGArea>) nil_chk([self getShape])) addWithGeogebraCommonAwtGArea:[((GeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->right_)) getShape]];
  }
  else if ([self->operation_ isEqual:GeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN()]) {
    [self setShapeWithGeogebraCommonAwtGArea:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithGeogebraCommonAwtGShape:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getBoundingPath]]];
    [((id<GeogebraCommonAwtGArea>) nil_chk([((GeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->left_)) getShape])) exclusiveOrWithGeogebraCommonAwtGArea:[((GeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->right_)) getShape]];
    [((id<GeogebraCommonAwtGArea>) nil_chk([self getShape])) subtractWithGeogebraCommonAwtGArea:[self->left_ getShape]];
  }
  else if ([self->operation_ isEqual:GeogebraCommonPluginOperationEnum_get_NOT_EQUAL()]) {
    [self setShapeWithGeogebraCommonAwtGArea:[((GeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->left_)) getShape]];
    [((id<GeogebraCommonAwtGArea>) nil_chk([self getShape])) exclusiveOrWithGeogebraCommonAwtGArea:[((GeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->right_)) getShape]];
  }
  else if ([self->operation_ isEqual:GeogebraCommonPluginOperationEnum_get_NOT()]) {
    [self setShapeWithGeogebraCommonAwtGArea:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithGeogebraCommonAwtGShape:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getBoundingPath]]];
    [((id<GeogebraCommonAwtGArea>) nil_chk([self getShape])) subtractWithGeogebraCommonAwtGArea:[((GeogebraCommonEuclidianDrawDrawInequality *) nil_chk(self->left_)) getShape]];
  }
}

void GeogebraCommonEuclidianDrawDrawInequality_updateTreesWithGeogebraCommonKernelArithmeticIneqTree_(GeogebraCommonEuclidianDrawDrawInequality *self, GeogebraCommonKernelArithmeticIneqTree *it) {
  if ([((GeogebraCommonKernelArithmeticIneqTree *) nil_chk(it)) getLeft] != nil && self->left_ == nil) {
    GeogebraCommonEuclidianDrawDrawInequality_setAndConsume_left_(self, new_GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonKernelArithmeticIneqTree_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_([it getLeft], self->view_, self->geo_));
  }
  if ([it getLeft] != nil) {
    GeogebraCommonEuclidianDrawDrawInequality_updateRecursiveWithGeogebraCommonKernelArithmeticIneqTree_(nil_chk(self->left_), [it getLeft]);
  }
  else GeogebraCommonEuclidianDrawDrawInequality_set_left_(self, nil);
  if ([it getRight] != nil && self->right_ == nil) {
    GeogebraCommonEuclidianDrawDrawInequality_setAndConsume_right_(self, new_GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonKernelArithmeticIneqTree_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_([it getLeft], self->view_, self->geo_));
  }
  if ([it getRight] != nil) GeogebraCommonEuclidianDrawDrawInequality_updateRecursiveWithGeogebraCommonKernelArithmeticIneqTree_(nil_chk(self->right_), [it getRight]);
  else GeogebraCommonEuclidianDrawDrawInequality_set_right_(self, nil);
}

jboolean GeogebraCommonEuclidianDrawDrawInequality_matchBorderWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonEuclidianDrawable_(GeogebraCommonKernelGeosGeoElement *border, GeogebraCommonEuclidianDrawable *d) {
  GeogebraCommonEuclidianDrawDrawInequality_initialize();
  if ([d isKindOfClass:[GeogebraCommonEuclidianDrawDrawConic class]] && [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk([((GeogebraCommonEuclidianDrawDrawConic *) nil_chk(((GeogebraCommonEuclidianDrawDrawConic *) check_class_cast(d, [GeogebraCommonEuclidianDrawDrawConic class])))) getConic])) isEqual:border]) return YES;
  if ([d isKindOfClass:[GeogebraCommonEuclidianDrawDrawParametricInequality class]] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonEuclidianDrawDrawParametricInequality *) nil_chk(((GeogebraCommonEuclidianDrawDrawParametricInequality *) check_class_cast(d, [GeogebraCommonEuclidianDrawDrawParametricInequality class])))) getBorder])) isEqual:border]) return [((GeogebraCommonEuclidianDrawDrawParametricInequality *) nil_chk(((GeogebraCommonEuclidianDrawDrawParametricInequality *) check_class_cast(d, [GeogebraCommonEuclidianDrawDrawParametricInequality class])))) isXparametric];
  return NO;
}

jboolean GeogebraCommonEuclidianDrawDrawInequality_hit2WithInt_withInt_(GeogebraCommonEuclidianDrawDrawInequality *self, jint x, jint y) {
  IOSDoubleArray *coords = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:x], [self->view_ toRealWorldCoordYWithDouble:y] } count:2];
  if ([self->geo_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]] && [((NSString *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoFunction class])))) getVarStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@"y"]) return [((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoFunction class])))) getFunction])) evaluateBooleanWithDouble:IOSDoubleArray_Get(coords, 1)];
  return [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))))) getFunction])) evaluateBooleanWithDoubleArray:coords];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawInequality)
