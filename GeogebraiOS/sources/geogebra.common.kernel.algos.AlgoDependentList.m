//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoDependentList.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDependentList.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/Algos.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelAlgosAlgoDependentList () {
 @public
  JavaUtilArrayList *listItems_;
  GeogebraCommonKernelGeosGeoList *geoList_;
  jboolean isCellRange_;
  NSString *cellRangeString_;
  JavaLangStringBuilder *sb_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentList, listItems_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentList, geoList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentList, cellRangeString_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentList, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoDependentList_compute(GeogebraCommonKernelAlgosAlgoDependentList *self);

@implementation GeogebraCommonKernelAlgosAlgoDependentList

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                                   withJavaUtilArrayList:(JavaUtilArrayList *)listItems {
  GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withNSString_withJavaUtilArrayList_(self, cons, label, listItems);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                   withJavaUtilArrayList:(JavaUtilArrayList *)listItems
                                             withBoolean:(jboolean)isCellRange {
  GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withJavaUtilArrayList_withBoolean_(self, cons, listItems, isCellRange);
  return self;
}

- (GeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return GeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (void)updateListWithJavaUtilArrayList:(JavaUtilArrayList *)listItems {
  GeogebraCommonKernelAlgosAlgoDependentList_set_listItems_(self, listItems);
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoDependentList_compute(self);
}

- (void)setInputOutput {
  jint size = [((JavaUtilArrayList *) nil_chk(listItems_)) size];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:size type:GeogebraCommonKernelGeosGeoElement_class_()]);
  for (jint i = 0; i < size; i++) {
    IOSObjectArray_Set(input_, i, [listItems_ getWithInt:i]);
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isLabelSet]) {
      ((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i)))->labelWanted_ = NO;
    }
  }
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:geoList_];
  if (isCellRange_) {
    [self setDependenciesOutputOnly];
  }
  else {
    [self setDependencies];
  }
}

- (void)remove {
  if (removed_) return;
  [super remove];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isLabelSet]) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) remove];
    }
  }
}

- (GeogebraCommonKernelGeosGeoList *)getGeoList {
  return geoList_;
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_CREATE_LIST;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoDependentList_compute(self);
}

- (void)setCellRangeStringWithNSString:(NSString *)cellRangeString {
  GeogebraCommonKernelAlgosAlgoDependentList_set_cellRangeString_(self, cellRangeString);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (isCellRange_ && cellRangeString_ != nil) {
    return cellRangeString_;
  }
  if (sb_ == nil) GeogebraCommonKernelAlgosAlgoDependentList_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  else [sb_ setLengthWithInt:0];
  [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:@"{"];
  if (((IOSObjectArray *) nil_chk(input_))->size_ > 0) {
    for (jint i = 0; i < input_->size_ - 1; i++) {
      [sb_ appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
      [sb_ appendWithNSString:@", "];
    }
    [sb_ appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, input_->size_ - 1))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
  }
  [sb_ appendWithNSString:@"}"];
  return [sb_ description];
}

- (void)dealloc {
  RELEASE_(listItems_);
  RELEASE_(geoList_);
  RELEASE_(cellRangeString_);
  RELEASE_(sb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withJavaUtilArrayList:", "AlgoDependentList", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withJavaUtilArrayList:withBoolean:", "AlgoDependentList", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "updateListWithJavaUtilArrayList:", "updateList", "V", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "getGeoList", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setCellRangeStringWithNSString:", "setCellRangeString", "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listItems_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "geoList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "isCellRange_", NULL, 0x2, "Z", NULL, NULL,  },
    { "cellRangeString_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoDependentList = { 2, "AlgoDependentList", "geogebra.common.kernel.algos", NULL, 0x1, 11, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoDependentList;
}

@end

void GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withNSString_withJavaUtilArrayList_(GeogebraCommonKernelAlgosAlgoDependentList *self, GeogebraCommonKernelConstruction *cons, NSString *label, JavaUtilArrayList *listItems) {
  GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withJavaUtilArrayList_withBoolean_(self, cons, listItems, NO);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoDependentList *new_GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withNSString_withJavaUtilArrayList_(GeogebraCommonKernelConstruction *cons, NSString *label, JavaUtilArrayList *listItems) {
  GeogebraCommonKernelAlgosAlgoDependentList *self = [GeogebraCommonKernelAlgosAlgoDependentList alloc];
  GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withNSString_withJavaUtilArrayList_(self, cons, label, listItems);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withJavaUtilArrayList_withBoolean_(GeogebraCommonKernelAlgosAlgoDependentList *self, GeogebraCommonKernelConstruction *cons, JavaUtilArrayList *listItems, jboolean isCellRange) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoDependentList_set_listItems_(self, listItems);
  self->isCellRange_ = isCellRange;
  GeogebraCommonKernelAlgosAlgoDependentList_setAndConsume_geoList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoDependentList_compute(self);
}

GeogebraCommonKernelAlgosAlgoDependentList *new_GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withJavaUtilArrayList_withBoolean_(GeogebraCommonKernelConstruction *cons, JavaUtilArrayList *listItems, jboolean isCellRange) {
  GeogebraCommonKernelAlgosAlgoDependentList *self = [GeogebraCommonKernelAlgosAlgoDependentList alloc];
  GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withJavaUtilArrayList_withBoolean_(self, cons, listItems, isCellRange);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentList_compute(GeogebraCommonKernelAlgosAlgoDependentList *self) {
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) clear];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->input_))->size_; i++) {
    GeogebraCommonKernelAlgosAlgoElement *algo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) getParentAlgorithm];
    if (algo != nil && [algo getOutputLength] > 1 && [algo hasSingleOutputType]) {
      for (jint k = 0; k < [algo getOutputLength]; k++) {
        GeogebraCommonKernelGeosGeoElement *geo = [algo getOutputWithInt:k];
        if ((geo == IOSObjectArray_Get(self->input_, i) || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined]) && ![self->geoList_ listContainsWithGeogebraCommonKernelGeosGeoElement:geo]) [self->geoList_ addWithGeogebraCommonKernelGeosGeoElement:geo];
      }
    }
    else {
      [self->geoList_ addWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(self->input_, i)];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoDependentList)
