//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawQuadric3D.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPoint3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawQuadric3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DSurfaces.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/PlotterSurface.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/geogebra3D/kernel3D/Kernel3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricNDConstants.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@class GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum;

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D () {
 @public
  jdouble scale__;
  jdouble alpha_DrawQuadric3D_, beta_;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum *visible_;
  GeogebraCommonKernelMatrixCoords *boundsMin_, *boundsMax_;
  JavaUtilArrayList *selectedPoints_;
  GeogebraCommonKernelMatrixCoords *project_, *p1_, *p2_;
  IOSDoubleArray *parameters_;
}

- (void)checkSphereVisibleWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center
                                                    withDouble:(jdouble)radius;

- (void)drawSphereWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *)surface
                                         withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center
                                                                   withDouble:(jdouble)radius;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D, visible_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D, boundsMin_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D, boundsMax_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D, selectedPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D, project_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D, p1_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D, p2_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D, parameters_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_checkSphereVisibleWithGeogebraCommonKernelMatrixCoords_withDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D *self, GeogebraCommonKernelMatrixCoords *center, jdouble radius);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_drawSphereWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface_withGeogebraCommonKernelMatrixCoords_withDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *surface, GeogebraCommonKernelMatrixCoords *center, jdouble radius);

typedef NS_ENUM(NSUInteger, GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_Visible) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_Visible_TOTALLY_OUTSIDE = 0,
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_Visible_TOTALLY_INSIDE = 1,
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_Visible_CENTER_OUTSIDE = 2,
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_Visible_CENTER_INSIDE = 3,
};

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_values();

+ (GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum *GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum)

FOUNDATION_EXPORT GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum *GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_values_[];

#define GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_TOTALLY_OUTSIDE GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_values_[GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_Visible_TOTALLY_OUTSIDE]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum, TOTALLY_OUTSIDE)

#define GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_TOTALLY_INSIDE GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_values_[GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_Visible_TOTALLY_INSIDE]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum, TOTALLY_INSIDE)

#define GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_CENTER_OUTSIDE GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_values_[GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_Visible_CENTER_OUTSIDE]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum, CENTER_OUTSIDE)

#define GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_CENTER_INSIDE GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_values_[GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_Visible_CENTER_INSIDE]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum, CENTER_INSIDE)

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_initWithNSString_withInt_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3d
                      withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)a_quadric {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self, a_view3d, a_quadric);
  return self;
}

- (void)drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) setLayerWithFloat:[self getLayer]];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:[self getSurfaceIndex]];
  [renderer setLayerWithFloat:0];
}

- (void)drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [self drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawGeometryHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [self drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawGeometryHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
}

- (void)drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
}

- (void)checkSphereVisibleWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center
                                                    withDouble:(jdouble)radius {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_checkSphereVisibleWithGeogebraCommonKernelMatrixCoords_withDouble_(self, center, radius);
}

- (void)drawSphereWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *)surface
                                         withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center
                                                                   withDouble:(jdouble)radius {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_drawSphereWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface_withGeogebraCommonKernelMatrixCoords_withDouble_(self, surface, center, radius);
}

- (void)enlargeBoundsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)min
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)max {
  switch ([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class])))) getType]) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SINGLE_POINT:
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(min, max, boundsMin_, boundsMax_);
    break;
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    if ([[self getGeoElement] isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class]]) {
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(min, max, boundsMin_, boundsMax_);
    }
    break;
  }
}

- (jboolean)updateForItSelf {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric = (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]);
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *surface;
  {
    GeogebraCommonKernelMatrixCoords *center;
    jdouble radius;
    GeogebraCommonKernelMatrixCoords *ev1;
    GeogebraCommonKernelMatrixCoords *ev2;
    GeogebraCommonKernelMatrixCoords *ev3;
    GeogebraCommonKernelMatrixCoords *m;
    jdouble thickness;
    switch ([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(quadric)) getType]) {
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
      center = [quadric getMidpoint3D];
      radius = [quadric getHalfAxisWithInt:0];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMin_)) setValuesWithGeogebraCommonKernelMatrixCoords:center withInt:3];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMax_)) setValuesWithGeogebraCommonKernelMatrixCoords:center withInt:3];
      [boundsMin_ addInsideWithDouble:-radius];
      [boundsMax_ addInsideWithDouble:radius];
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_checkSphereVisibleWithGeogebraCommonKernelMatrixCoords_withDouble_(self, center, radius);
      if (visible_ != GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_get_TOTALLY_OUTSIDE()) {
        surface = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getSurface];
        [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) startWithInt:[self getReusableSurfaceIndex]];
        scale__ = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale];
        longitude_ = [surface calcSphereLongitudesNeededWithDouble:radius withDouble:scale__];
        GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_drawSphereWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface_withGeogebraCommonKernelMatrixCoords_withDouble_(self, surface, center, radius);
        [self setSurfaceIndexWithInt:[surface end]];
      }
      else {
        [self setSurfaceIndexWithInt:-1];
      }
      break;
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
      surface = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getSurface];
      [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) startWithInt:[self getReusableSurfaceIndex]];
      if ([quadric isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class]]) {
        jdouble height = [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast(quadric, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class])) getBottomParameter] - [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast(quadric, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class])) getTopParameter];
        GeogebraCommonKernelMatrixCoords *top = [quadric getMidpoint3D];
        GeogebraCommonKernelMatrixCoords *ev1 = [quadric getEigenvec3DWithInt:0];
        GeogebraCommonKernelMatrixCoords *ev2 = [quadric getEigenvec3DWithInt:1];
        radius = [quadric getHalfAxisWithInt:0];
        GeogebraCommonKernelMatrixCoords *bottomCenter = [surface coneWithGeogebraCommonKernelMatrixCoords:top withGeogebraCommonKernelMatrixCoords:ev1 withGeogebraCommonKernelMatrixCoords:ev2 withGeogebraCommonKernelMatrixCoords:[quadric getEigenvec3DWithInt:2] withDouble:radius withDouble:0 withDouble:2 * JavaLangMath_PI withDouble:height withFloat:1.0f];
        [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMin_)) setValuesWithGeogebraCommonKernelMatrixCoords:top withInt:3];
        [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMax_)) setValuesWithGeogebraCommonKernelMatrixCoords:top withInt:3];
        radius *= height;
        GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsToDiagonalWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDouble_withDouble_(boundsMin_, boundsMax_, bottomCenter, ev1, ev2, radius, radius);
      }
      else {
        IOSDoubleArray *minmax = [self getMinMax];
        jdouble min = IOSDoubleArray_Get(nil_chk(minmax), 0);
        jdouble max = IOSDoubleArray_Get(minmax, 1);
        center = [quadric getMidpoint3D];
        GeogebraCommonKernelMatrixCoords *ev1 = [quadric getEigenvec3DWithInt:0];
        GeogebraCommonKernelMatrixCoords *ev2 = [quadric getEigenvec3DWithInt:1];
        GeogebraCommonKernelMatrixCoords *ev3 = [quadric getEigenvec3DWithInt:2];
        radius = [quadric getHalfAxisWithInt:0];
        if (min * max < 0) {
          if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) useClippingCube]) {
            [surface coneWithGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:ev1 withGeogebraCommonKernelMatrixCoords:ev2 withGeogebraCommonKernelMatrixCoords:ev3 withDouble:radius withDouble:0 withDouble:2 * JavaLangMath_PI withDouble:min withFloat:1.0f];
            [surface coneWithGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:ev1 withGeogebraCommonKernelMatrixCoords:ev2 withGeogebraCommonKernelMatrixCoords:ev3 withDouble:radius withDouble:0 withDouble:2 * JavaLangMath_PI withDouble:max withFloat:1.0f];
          }
          else {
            [surface coneWithGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:ev1 withGeogebraCommonKernelMatrixCoords:ev2 withGeogebraCommonKernelMatrixCoords:ev3 withDouble:radius withDouble:0 withDouble:2 * JavaLangMath_PI withDouble:min withFloat:(jfloat) ((-9 * min - max) / (min - max))];
            [surface coneWithGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:ev1 withGeogebraCommonKernelMatrixCoords:ev2 withGeogebraCommonKernelMatrixCoords:ev3 withDouble:radius withDouble:0 withDouble:2 * JavaLangMath_PI withDouble:max withFloat:(jfloat) ((-9 * max - min) / (max - min))];
          }
        }
        else {
          if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) useClippingCube]) {
            [surface coneWithGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:ev1 withGeogebraCommonKernelMatrixCoords:ev2 withGeogebraCommonKernelMatrixCoords:ev3 withDouble:radius withDouble:0 withDouble:2 * JavaLangMath_PI withDouble:min withDouble:max withBoolean:NO withBoolean:NO];
          }
          else {
            jdouble delta = (max - min) / 10;
            [surface coneWithGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:ev1 withGeogebraCommonKernelMatrixCoords:ev2 withGeogebraCommonKernelMatrixCoords:ev3 withDouble:radius withDouble:0 withDouble:2 * JavaLangMath_PI withDouble:min + delta withDouble:max - delta withBoolean:NO withBoolean:NO];
            [surface coneWithGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:ev1 withGeogebraCommonKernelMatrixCoords:ev2 withGeogebraCommonKernelMatrixCoords:ev3 withDouble:radius withDouble:0 withDouble:2 * JavaLangMath_PI withDouble:min withDouble:min + delta withBoolean:YES withBoolean:NO];
            [surface coneWithGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:ev1 withGeogebraCommonKernelMatrixCoords:ev2 withGeogebraCommonKernelMatrixCoords:ev3 withDouble:radius withDouble:0 withDouble:2 * JavaLangMath_PI withDouble:max - delta withDouble:max withBoolean:NO withBoolean:YES];
          }
        }
      }
      [self setSurfaceIndexWithInt:[surface end]];
      break;
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
      center = [quadric getMidpoint3D];
      ev1 = [quadric getEigenvec3DWithInt:0];
      ev2 = [quadric getEigenvec3DWithInt:1];
      ev3 = [quadric getEigenvec3DWithInt:2];
      radius = [quadric getHalfAxisWithInt:0];
      surface = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getSurface];
      [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) startWithInt:[self getReusableSurfaceIndex]];
      if ([quadric isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class]]) {
        longitude_ = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) getLongitudeWithDouble:radius withDouble:[((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale]];
        GeogebraCommonKernelMatrixCoords *bottomCenter = [surface cylinderWithGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:ev1 withGeogebraCommonKernelMatrixCoords:ev2 withGeogebraCommonKernelMatrixCoords:ev3 withDouble:radius withDouble:0 withDouble:2 * JavaLangMath_PI withDouble:[quadric getMinParameterWithInt:1] withDouble:[quadric getMaxParameterWithInt:1] withBoolean:NO withBoolean:NO withInt:longitude_];
        [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMin_)) setWithDouble:JavaLangDouble_POSITIVE_INFINITY];
        [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMax_)) setWithDouble:JavaLangDouble_NEGATIVE_INFINITY];
        GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsToDiagonalWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDouble_withDouble_(boundsMin_, boundsMax_, center, ev1, ev2, radius, radius);
        GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsToDiagonalWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDouble_withDouble_(boundsMin_, boundsMax_, bottomCenter, ev1, ev2, radius, radius);
      }
      else {
        IOSDoubleArray *minmax = [self getMinMax];
        jdouble min = IOSDoubleArray_Get(nil_chk(minmax), 0);
        jdouble max = IOSDoubleArray_Get(minmax, 1);
        longitude_ = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) getLongitudeWithDouble:radius withDouble:[((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale]];
        if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) useClippingCube]) {
          [surface cylinderWithGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:ev1 withGeogebraCommonKernelMatrixCoords:ev2 withGeogebraCommonKernelMatrixCoords:ev3 withDouble:radius withDouble:0 withDouble:2 * JavaLangMath_PI withDouble:min withDouble:max withBoolean:NO withBoolean:NO withInt:longitude_];
        }
        else {
          jdouble delta = (max - min) / 10;
          [surface cylinderWithGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:ev1 withGeogebraCommonKernelMatrixCoords:ev2 withGeogebraCommonKernelMatrixCoords:ev3 withDouble:radius withDouble:0 withDouble:2 * JavaLangMath_PI withDouble:min + delta withDouble:max - delta withBoolean:NO withBoolean:NO withInt:longitude_];
          [surface cylinderWithGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:ev1 withGeogebraCommonKernelMatrixCoords:ev2 withGeogebraCommonKernelMatrixCoords:ev3 withDouble:radius withDouble:0 withDouble:2 * JavaLangMath_PI withDouble:min withDouble:min + delta withBoolean:YES withBoolean:NO withInt:longitude_];
          [surface cylinderWithGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:ev1 withGeogebraCommonKernelMatrixCoords:ev2 withGeogebraCommonKernelMatrixCoords:ev3 withDouble:radius withDouble:0 withDouble:2 * JavaLangMath_PI withDouble:max - delta withDouble:max withBoolean:NO withBoolean:YES withInt:longitude_];
        }
      }
      [self setSurfaceIndexWithInt:[surface end]];
      break;
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SINGLE_POINT:
      surface = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getSurface];
      [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) startWithInt:[self getReusableSurfaceIndex]];
      m = [quadric getMidpoint3D];
      thickness = [quadric getLineThickness] / [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale] * GeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_DRAW_POINT_FACTOR;
      [surface drawSphereWithInt:[quadric getLineThickness] withGeogebraCommonKernelMatrixCoords:m withDouble:thickness];
      [self setSurfaceIndexWithInt:[surface end]];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMin_)) setValuesWithGeogebraCommonKernelMatrixCoords:m withInt:3];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMax_)) setValuesWithGeogebraCommonKernelMatrixCoords:m withInt:3];
      [boundsMin_ addInsideWithDouble:-thickness];
      [boundsMax_ addInsideWithDouble:thickness];
      break;
      default:
      [self setSurfaceIndexWithInt:-1];
    }
  }
  return YES;
}

- (IOSDoubleArray *)getMinMax {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric = (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]);
  IOSDoubleArray *minmax = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ JavaLangDouble_POSITIVE_INFINITY, JavaLangDouble_NEGATIVE_INFINITY } count:2];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getMinIntervalOutsideClippingWithDoubleArray:minmax withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(quadric)) getMidpoint3D] withGeogebraCommonKernelMatrixCoords:[quadric getEigenvec3DWithInt:2]];
  return minmax;
}

- (void)setSurfaceVWithFloat:(jfloat)min
                   withFloat:(jfloat)max
withGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *)surface {
  jfloat fade = (max - min) / 10.0f;
  switch ([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class])))) getType]) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) setVWithFloat:min withFloat:max];
    [surface setNbVWithInt:3];
    [surface setVFadingWithFloat:fade withFloat:fade];
    break;
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    if (min * max < 0) {
      [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) setVWithFloat:min withFloat:0];
      [surface setNbVWithInt:2];
      [surface setVFadingWithFloat:fade withFloat:0];
      [surface draw];
      [surface setVWithFloat:0 withFloat:max];
      [surface setNbVWithInt:2];
      [surface setVFadingWithFloat:0 withFloat:fade];
      [surface draw];
    }
    else {
      [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) setVWithFloat:min withFloat:max];
      [surface setNbVWithInt:3];
      [surface setVFadingWithFloat:fade withFloat:fade];
      [surface draw];
    }
    break;
  }
}

- (void)updateForView {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric = (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]);
  switch ([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(quadric)) getType]) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom]) {
      GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer];
      GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *surface = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getSurface];
      jdouble s = scale__;
      scale__ = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale];
      jdouble radius = [quadric getHalfAxisWithInt:0];
      jint l = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) calcSphereLongitudesNeededWithDouble:radius withDouble:scale__];
      if (visible_ == GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_get_TOTALLY_OUTSIDE() || l != longitude_ || scale__ < s) {
        GeogebraCommonKernelMatrixCoords *center = [quadric getMidpoint3D];
        GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_checkSphereVisibleWithGeogebraCommonKernelMatrixCoords_withDouble_(self, center, radius);
        if (visible_ != GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_get_TOTALLY_OUTSIDE()) {
          longitude_ = l;
          [surface startWithInt:[self getReusableSurfaceIndex]];
          GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_drawSphereWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface_withGeogebraCommonKernelMatrixCoords_withDouble_(self, surface, center, radius);
          [self setSurfaceIndexWithInt:[surface end]];
          [self recordTrace];
        }
        else {
          [self setSurfaceIndexWithInt:-1];
        }
      }
    }
    else if (visible_ != GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_get_TOTALLY_INSIDE() && [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByTranslate]) {
      GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer];
      GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *surface = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getSurface];
      GeogebraCommonKernelMatrixCoords *center = [quadric getMidpoint3D];
      jdouble radius = [quadric getHalfAxisWithInt:0];
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_checkSphereVisibleWithGeogebraCommonKernelMatrixCoords_withDouble_(self, center, radius);
      if (visible_ != GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_get_TOTALLY_OUTSIDE()) {
        [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) startWithInt:[self getReusableSurfaceIndex]];
        GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_drawSphereWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface_withGeogebraCommonKernelMatrixCoords_withDouble_(self, surface, center, radius);
        [self setSurfaceIndexWithInt:[surface end]];
        [self recordTrace];
      }
      else {
        [self setSurfaceIndexWithInt:-1];
      }
    }
    break;
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SINGLE_POINT:
    if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom] || [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByTranslate]) {
      [self updateForItSelf];
    }
    break;
  }
}

- (jint)getPickOrder {
  if ([self getPickingType] == GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()) {
    return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_POINT;
  }
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_SURFACE;
}

- (jboolean)isTransparent {
  if ([self getPickingType] == GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()) {
    return [self getAlpha] <= GeogebraCommonEuclidianEuclidianController_MAX_TRANSPARENT_ALPHA_VALUE;
  }
  return NO;
}

- (void)addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  switch ([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class])))) getType]) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    [self addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_CURVED];
    break;
    default:
    [self addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_SURFACES];
  }
}

- (void)removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  switch ([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class])))) getType]) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    [self removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_CURVED];
    break;
    default:
    [self removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_SURFACES];
  }
}

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D
                                                     withJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints
                                                                   withInt:(jint)type {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withInt_(self, view3D, selectedPoints, type);
  return self;
}

- (void)updateMousePosWithDouble:(jdouble)xRW
                      withDouble:(jdouble)yRW {
}

- (void)updatePreview {
  id<GeogebraCommonKernelKernelNDGeoPointND> firstPoint = nil;
  id<GeogebraCommonKernelKernelNDGeoPointND> secondPoint = nil;
  if ([((JavaUtilArrayList *) nil_chk(selectedPoints_)) size] >= 1) {
    firstPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([selectedPoints_ getWithInt:0], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    if ([selectedPoints_ size] == 2) secondPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([selectedPoints_ getWithInt:1], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    else secondPoint = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getCursor3D];
  }
  if ([selectedPoints_ size] >= 1) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class])))) setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:firstPoint withGeogebraCommonKernelKernelNDGeoPointND:secondPoint];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) setEuclidianVisibleWithBoolean:YES];
    [self setWaitForUpdate];
  }
  else {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) setEuclidianVisibleWithBoolean:NO];
  }
}

- (jboolean)hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting {
  if (waitForReset_) {
    return NO;
  }
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric = (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]);
  if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(quadric)) getType] == GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SINGLE_POINT) {
    if (GeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_hitWithGeogebraCommonGeogebra3DEuclidian3DHitting_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withGeogebraCommonKernelMatrixCoords_withDoubleArray_withBoolean_(hitting, [quadric getMidpoint3D], self, [quadric getLineThickness], project_, parameters_, NO)) {
      [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()];
      return YES;
    }
  }
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getAlphaValue] < GeogebraCommonEuclidianEuclidianController_MIN_VISIBLE_ALPHA_VALUE) {
    return NO;
  }
  if ([quadric getType] != GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE && [quadric getType] != GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER && [quadric getType] != GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE) {
    return NO;
  }
  [quadric getProjectionsWithGeogebraCommonKernelMatrixCoords:nil withGeogebraCommonKernelMatrixCoords:((GeogebraCommonGeogebra3DEuclidian3DHitting *) nil_chk(hitting))->origin_ withGeogebraCommonKernelMatrixCoords:hitting->direction_ withGeogebraCommonKernelMatrixCoords:p1_ withGeogebraCommonKernelMatrixCoords:p2_];
  jdouble z1 = JavaLangDouble_NEGATIVE_INFINITY, z2 = JavaLangDouble_NEGATIVE_INFINITY;
  if ([hitting isInsideClippingWithGeogebraCommonKernelMatrixCoords:p1_]) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(p1_)) projectLineWithGeogebraCommonKernelMatrixCoords:hitting->origin_ withGeogebraCommonKernelMatrixCoords:hitting->direction_ withGeogebraCommonKernelMatrixCoords:project_ withDoubleArray:parameters_];
    jdouble d = [p1_ distanceWithGeogebraCommonKernelMatrixCoords:project_];
    if (d * [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale] <= [hitting getThreshold]) {
      z1 = -IOSDoubleArray_Get(nil_chk(parameters_), 0);
    }
  }
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(p2_)) isDefined] && [hitting isInsideClippingWithGeogebraCommonKernelMatrixCoords:p2_]) {
    [p2_ projectLineWithGeogebraCommonKernelMatrixCoords:hitting->origin_ withGeogebraCommonKernelMatrixCoords:hitting->direction_ withGeogebraCommonKernelMatrixCoords:project_ withDoubleArray:parameters_];
    jdouble d = [p2_ distanceWithGeogebraCommonKernelMatrixCoords:project_];
    if (d * [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale] <= [hitting getThreshold]) {
      z2 = -IOSDoubleArray_Get(nil_chk(parameters_), 0);
    }
  }
  if (z1 < z2) {
    z1 = z2;
  }
  if (JavaLangDouble_isInfiniteWithDouble_(z1)) {
    return NO;
  }
  [self setZPickWithDouble:z1 withDouble:z1];
  [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()];
  return YES;
}

- (void)dealloc {
  RELEASE_(visible_);
  RELEASE_(boundsMin_);
  RELEASE_(boundsMax_);
  RELEASE_(selectedPoints_);
  RELEASE_(project_);
  RELEASE_(p1_);
  RELEASE_(p2_);
  RELEASE_(parameters_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D:", "DrawQuadric3D", NULL, 0x1, NULL, NULL },
    { "drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometry", "V", 0x1, NULL, NULL },
    { "drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawSurfaceGeometry", "V", 0x4, NULL, NULL },
    { "drawGeometryHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometryHiding", "V", 0x0, NULL, NULL },
    { "drawGeometryHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometryHidden", "V", 0x1, NULL, NULL },
    { "drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawOutline", "V", 0x1, NULL, NULL },
    { "checkSphereVisibleWithGeogebraCommonKernelMatrixCoords:withDouble:", "checkSphereVisible", "V", 0x2, NULL, NULL },
    { "drawSphereWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:withGeogebraCommonKernelMatrixCoords:withDouble:", "drawSphere", "V", 0x2, NULL, NULL },
    { "enlargeBoundsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "enlargeBounds", "V", 0x1, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "getMinMax", NULL, "[D", 0x4, NULL, NULL },
    { "setSurfaceVWithFloat:withFloat:withGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:", "setSurfaceV", "V", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "getPickOrder", NULL, "I", 0x1, NULL, NULL },
    { "isTransparent", NULL, "Z", 0x1, NULL, NULL },
    { "addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "addToDrawable3DLists", "V", 0x1, NULL, NULL },
    { "removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "removeFromDrawable3DLists", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withJavaUtilArrayList:withInt:", "DrawQuadric3D", NULL, 0x1, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x1, NULL, NULL },
    { "updatePreview", NULL, "V", 0x1, NULL, NULL },
    { "hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:", "hit", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "longitude_", NULL, 0x4, "I", NULL, NULL,  },
    { "scale__", "scale", 0x2, "D", NULL, NULL,  },
    { "alpha_DrawQuadric3D_", "alpha", 0x2, "D", NULL, NULL,  },
    { "beta_", NULL, 0x2, "D", NULL, NULL,  },
    { "visible_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawQuadric3D$Visible;", NULL, NULL,  },
    { "boundsMin_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "boundsMax_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "selectedPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, NULL,  },
    { "project_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "p1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "p2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "parameters_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawQuadric3D$Visible;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D = { 2, "DrawQuadric3D", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 21, methods, 12, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3d, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *a_quadric) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DSurfaces_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, a_view3d, a_quadric);
  self->longitude_ = 0;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_get_TOTALLY_OUTSIDE());
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_setAndConsume_boundsMin_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_setAndConsume_boundsMax_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_project_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_p1_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_p2_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_setAndConsume_parameters_(self, [IOSDoubleArray newArrayWithLength:2]);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3d, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *a_quadric) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self, a_view3d, a_quadric);
  return self;
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_checkSphereVisibleWithGeogebraCommonKernelMatrixCoords_withDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D *self, GeogebraCommonKernelMatrixCoords *center, jdouble radius) {
  jdouble frustumRadius = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getFrustumRadius];
  GeogebraCommonKernelMatrixCoords *origin = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getCenter];
  GeogebraCommonKernelMatrixCoords *v = [((GeogebraCommonKernelMatrixCoords *) nil_chk(origin)) subWithGeogebraCommonKernelMatrixCoords:center];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) calcNorm];
  jdouble centersDistance = [v getNorm];
  if (centersDistance > radius + frustumRadius) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_get_TOTALLY_OUTSIDE());
  }
  else if (centersDistance + frustumRadius < radius) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_get_TOTALLY_OUTSIDE());
  }
  else if (centersDistance + radius < frustumRadius) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_get_TOTALLY_INSIDE());
  }
  else if (centersDistance < frustumRadius) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_get_CENTER_INSIDE());
  }
  else {
    jdouble horizontalDistance = JavaLangMath_sqrtWithDouble_([v getX] * [v getX] + [v getY] * [v getY]);
    if (horizontalDistance > frustumRadius) {
      self->alpha_DrawQuadric3D_ = JavaLangMath_asinWithDouble_(frustumRadius / horizontalDistance);
      self->beta_ = JavaLangMath_atan2WithDouble_withDouble_([v getY], [v getX]);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_get_CENTER_OUTSIDE());
    }
    else {
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_get_CENTER_INSIDE());
    }
  }
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_drawSphereWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface_withGeogebraCommonKernelMatrixCoords_withDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *surface, GeogebraCommonKernelMatrixCoords *center, jdouble radius) {
  if (self->visible_ == GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_get_CENTER_OUTSIDE()) {
    jint longitudeAlpha = 8;
    while (longitudeAlpha * JavaLangMath_PI < self->alpha_DrawQuadric3D_ * self->longitude_) {
      longitudeAlpha *= 2;
    }
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) drawSphereWithGeogebraCommonKernelMatrixCoords:center withDouble:radius withInt:self->longitude_ withDouble:self->beta_ - longitudeAlpha * JavaLangMath_PI / self->longitude_ withInt:longitudeAlpha];
  }
  else {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) drawSphereWithGeogebraCommonKernelMatrixCoords:center withDouble:radius withInt:self->longitude_];
  }
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withInt_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D, JavaUtilArrayList *selectedPoints, jint type) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DSurfaces_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view3D);
  self->longitude_ = 0;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_get_TOTALLY_OUTSIDE());
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_setAndConsume_boundsMin_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_setAndConsume_boundsMax_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_project_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_p1_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_p2_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_setAndConsume_parameters_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *q = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D)) getKernel])) getConstruction]) autorelease];
  [self setGeoElementWithGeogebraCommonKernelGeosGeoElement:q];
  [q setIsPickableWithBoolean:NO];
  [q setTypeWithInt:type];
  [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_set_selectedPoints_(self, selectedPoints);
  [self updatePreview];
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withInt_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D, JavaUtilArrayList *selectedPoints, jint type) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withInt_(self, view3D, selectedPoints, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum)

GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum *GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_values_[4];

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_values() {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_values_ count:4 type:GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_values();
}

+ (GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_valueOfWithNSString_(name);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum *GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_initialize();
  for (int i = 0; i < 4; i++) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum *e = GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum class]) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_TOTALLY_OUTSIDE = new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_initWithNSString_withInt_(@"TOTALLY_OUTSIDE", 0);
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_TOTALLY_INSIDE = new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_initWithNSString_withInt_(@"TOTALLY_INSIDE", 1);
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_CENTER_OUTSIDE = new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_initWithNSString_withInt_(@"CENTER_OUTSIDE", 2);
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_CENTER_INSIDE = new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_initWithNSString_withInt_(@"CENTER_INSIDE", 3);
    J2OBJC_SET_INITIALIZED(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "TOTALLY_OUTSIDE", "TOTALLY_OUTSIDE", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawQuadric3D$Visible;", &GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_TOTALLY_OUTSIDE, NULL,  },
    { "TOTALLY_INSIDE", "TOTALLY_INSIDE", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawQuadric3D$Visible;", &GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_TOTALLY_INSIDE, NULL,  },
    { "CENTER_OUTSIDE", "CENTER_OUTSIDE", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawQuadric3D$Visible;", &GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_CENTER_OUTSIDE, NULL,  },
    { "CENTER_INSIDE", "CENTER_INSIDE", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawQuadric3D$Visible;", &GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_CENTER_INSIDE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawQuadric3D$Visible;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum = { 2, "Visible", "geogebra.common.geogebra3D.euclidian3D.draw", "DrawQuadric3D", 0x401a, 0, NULL, 4, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/geogebra3D/euclidian3D/draw/DrawQuadric3D$Visible;>;" };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_initWithNSString_withInt_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_VisibleEnum)
