//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoScriptAction.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoScriptAction.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/IllegalArgumentException.h"

@interface GeogebraCommonKernelGeosGeoScriptAction () {
 @public
  GeogebraCommonKernelCommandsCmdScripting *action_;
  GeogebraCommonKernelArithmeticCommand *command_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoScriptAction, action_, GeogebraCommonKernelCommandsCmdScripting *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoScriptAction, command_, GeogebraCommonKernelArithmeticCommand *)

@implementation GeogebraCommonKernelGeosGeoScriptAction

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoScriptAction_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
            withGeogebraCommonKernelCommandsCmdScripting:(GeogebraCommonKernelCommandsCmdScripting *)cmdScripting
               withGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)command {
  GeogebraCommonKernelGeosGeoScriptAction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelCommandsCmdScripting_withGeogebraCommonKernelArithmeticCommand_(self, cons, cmdScripting, command);
  return self;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_DEFAULT();
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  GeogebraCommonKernelGeosGeoScriptAction *n = [new_GeogebraCommonKernelGeosGeoScriptAction_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [n setWithGeogebraCommonKernelGeosGeoElement:self];
  return n;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (!([geo isKindOfClass:[GeogebraCommonKernelGeosGeoScriptAction class]])) @throw [new_JavaLangIllegalArgumentException_init() autorelease];
  GeogebraCommonKernelGeosGeoScriptAction_set_action_(self, ((GeogebraCommonKernelGeosGeoScriptAction *) nil_chk(((GeogebraCommonKernelGeosGeoScriptAction *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoScriptAction class]))))->action_);
  GeogebraCommonKernelGeosGeoScriptAction_set_command_(self, ((GeogebraCommonKernelGeosGeoScriptAction *) nil_chk(((GeogebraCommonKernelGeosGeoScriptAction *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoScriptAction class]))))->command_);
}

- (jboolean)isDefined {
  return action_ != nil;
}

- (void)setUndefined {
  GeogebraCommonKernelGeosGeoScriptAction_set_action_(self, nil);
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return nil;
}

- (jboolean)showInAlgebraView {
  return NO;
}

- (jboolean)showInEuclidianView {
  return NO;
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (!([geo isKindOfClass:[GeogebraCommonKernelGeosGeoScriptAction class]])) return NO;
  return action_ == ((GeogebraCommonKernelGeosGeoScriptAction *) nil_chk(((GeogebraCommonKernelGeosGeoScriptAction *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoScriptAction class]))))->action_;
}

- (void)perform {
  if (action_ != nil) [action_ performAndCleanWithGeogebraCommonKernelArithmeticCommand:command_];
  [self remove];
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_NONE();
}

- (void)dealloc {
  RELEASE_(action_);
  RELEASE_(command_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoScriptAction", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelCommandsCmdScripting:withGeogebraCommonKernelArithmeticCommand:", "GeoScriptAction", NULL, 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "perform", NULL, "V", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "action_", NULL, 0x2, "Lgeogebra.common.kernel.commands.CmdScripting;", NULL, NULL,  },
    { "command_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Command;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoScriptAction = { 2, "GeoScriptAction", "geogebra.common.kernel.geos", NULL, 0x1, 13, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoScriptAction;
}

@end

void GeogebraCommonKernelGeosGeoScriptAction_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoScriptAction *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(self, c);
}

GeogebraCommonKernelGeosGeoScriptAction *new_GeogebraCommonKernelGeosGeoScriptAction_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoScriptAction *self = [GeogebraCommonKernelGeosGeoScriptAction alloc];
  GeogebraCommonKernelGeosGeoScriptAction_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonKernelGeosGeoScriptAction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelCommandsCmdScripting_withGeogebraCommonKernelArithmeticCommand_(GeogebraCommonKernelGeosGeoScriptAction *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelCommandsCmdScripting *cmdScripting, GeogebraCommonKernelArithmeticCommand *command) {
  GeogebraCommonKernelGeosGeoScriptAction_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelGeosGeoScriptAction_set_action_(self, cmdScripting);
  GeogebraCommonKernelGeosGeoScriptAction_set_command_(self, command);
}

GeogebraCommonKernelGeosGeoScriptAction *new_GeogebraCommonKernelGeosGeoScriptAction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelCommandsCmdScripting_withGeogebraCommonKernelArithmeticCommand_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelCommandsCmdScripting *cmdScripting, GeogebraCommonKernelArithmeticCommand *command) {
  GeogebraCommonKernelGeosGeoScriptAction *self = [GeogebraCommonKernelGeosGeoScriptAction alloc];
  GeogebraCommonKernelGeosGeoScriptAction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelCommandsCmdScripting_withGeogebraCommonKernelArithmeticCommand_(self, cons, cmdScripting, command);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoScriptAction)
