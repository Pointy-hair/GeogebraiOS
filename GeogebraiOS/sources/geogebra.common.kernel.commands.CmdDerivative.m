//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdDerivative.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/cas/AlgoDerivative.h"
#include "geogebra/common/kernel/commands/CmdDerivative.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/CasEvaluableFunction.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/Math.h"
#include "java/lang/Throwable.h"

@interface GeogebraCommonKernelCommandsCmdDerivative ()

+ (NSString *)getDerivLabelWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                          withInt:(jint)order;

@end

__attribute__((unused)) static NSString *GeogebraCommonKernelCommandsCmdDerivative_getDerivLabelWithGeogebraCommonKernelGeosGeoElement_withInt_(GeogebraCommonKernelGeosGeoElement *geo, jint order);

@implementation GeogebraCommonKernelCommandsCmdDerivative

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdDerivative_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  NSString *label = [c getLabel];
  IOSObjectArray *arg, *arg2;
  {
    jboolean suppress;
    switch (n) {
      case 1:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ([GeogebraCommonKernelGeosCasEvaluableFunction_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)]) {
        id<GeogebraCommonKernelGeosCasEvaluableFunction> f = (id<GeogebraCommonKernelGeosCasEvaluableFunction>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosCasEvaluableFunction));
        if (label == nil) label = GeogebraCommonKernelCommandsCmdDerivative_getDerivLabelWithGeogebraCommonKernelGeosGeoElement_withInt_([((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f)) toGeoElement], 1);
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [self DerivativeWithNSString:label withGeogebraCommonKernelGeosCasEvaluableFunction:f withGeogebraCommonKernelGeosGeoNumeric:nil withGeogebraCommonKernelArithmeticNumberValue:nil] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      case 2:
      suppress = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
      @try {
        arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
        if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoFunction] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoCurveCartesian]) && [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)]) {
          jdouble order = [((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(((id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue))))) getDouble];
          jboolean constant = NO;
          if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoNumeric]) {
            if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) getParentAlgorithm] == nil) {
              constant = ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isLabelSet];
            }
            else {
              constant = NO;
            }
          }
          id<GeogebraCommonKernelGeosCasEvaluableFunction> f = (id<GeogebraCommonKernelGeosCasEvaluableFunction>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosCasEvaluableFunction));
          if (label == nil && constant) {
            jint iorder = (jint) JavaLangMath_roundWithDouble_(order);
            label = GeogebraCommonKernelCommandsCmdDerivative_getDerivLabelWithGeogebraCommonKernelGeosGeoElement_withInt_([((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f)) toGeoElement], iorder);
          }
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [self DerivativeWithNSString:label withGeogebraCommonKernelGeosCasEvaluableFunction:f withGeogebraCommonKernelGeosGeoNumeric:nil withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue))] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
      }
      @catch (JavaLangThrowable *t) {
        [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
      }
      [cons_ setSuppressLabelCreationWithBoolean:suppress];
      @try {
        arg2 = [self resArgsLocalNumVarWithGeogebraCommonKernelArithmeticCommand:c withInt:1 withInt:1];
        if ([GeogebraCommonKernelGeosCasEvaluableFunction_class_() isInstance:IOSObjectArray_Get(nil_chk(arg2), 0)] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg2, 1))) isGeoNumeric]) {
          id<GeogebraCommonKernelGeosCasEvaluableFunction> f = (id<GeogebraCommonKernelGeosCasEvaluableFunction>) check_protocol_cast(IOSObjectArray_Get(arg2, 0), @protocol(GeogebraCommonKernelGeosCasEvaluableFunction));
          IOSObjectArray *vars = [((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f)) getFunctionVariables];
          NSString *var = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg2, 1))) getLabelSimple];
          jboolean ok = NO;
          if (vars != nil) {
            for (jint i = 0; i < vars->size_; i++) {
              if ([((NSString *) nil_chk([((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(vars, i))) getSetVarString])) isEqual:var]) {
                ok = YES;
                break;
              }
            }
          }
          if (ok) {
            IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [self DerivativeWithNSString:label withGeogebraCommonKernelGeosCasEvaluableFunction:(id<GeogebraCommonKernelGeosCasEvaluableFunction>) check_protocol_cast(IOSObjectArray_Get(arg2, 0), @protocol(GeogebraCommonKernelGeosCasEvaluableFunction)) withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg2, 1), [GeogebraCommonKernelGeosGeoNumeric class]) withGeogebraCommonKernelArithmeticNumberValue:nil] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
            return ret;
          }
        }
      }
      @catch (JavaLangThrowable *t) {
        [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
      }
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ([GeogebraCommonKernelGeosCasEvaluableFunction_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunction]) {
        GeogebraCommonKernelGeosGeoNumeric *var = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
        [var setLocalVariableLabelWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [self DerivativeWithNSString:label withGeogebraCommonKernelGeosCasEvaluableFunction:(id<GeogebraCommonKernelGeosCasEvaluableFunction>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosCasEvaluableFunction)) withGeogebraCommonKernelGeosGeoNumeric:var withGeogebraCommonKernelArithmeticNumberValue:nil] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      case 3:
      @try {
        arg = [self resArgsLocalNumVarWithGeogebraCommonKernelArithmeticCommand:c withInt:1 withInt:1];
        if ([GeogebraCommonKernelGeosCasEvaluableFunction_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoNumeric] && [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]) {
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [self DerivativeWithNSString:label withGeogebraCommonKernelGeosCasEvaluableFunction:(id<GeogebraCommonKernelGeosCasEvaluableFunction>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosCasEvaluableFunction)) withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoNumeric class]) withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
      }
      @catch (JavaLangThrowable *t) {
        [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
      }
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ([IOSObjectArray_Get(nil_chk(arg), 0) isKindOfClass:[GeogebraCommonKernelGeosGeoFunctionNVar class]] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunction] && [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]) {
        GeogebraCommonKernelGeosGeoNumeric *var = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
        [var setLocalVariableLabelWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [self DerivativeWithNSString:label withGeogebraCommonKernelGeosCasEvaluableFunction:(GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoFunctionNVar class]) withGeogebraCommonKernelGeosGeoNumeric:var withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (NSString *)getDerivLabelWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                          withInt:(jint)order {
  return GeogebraCommonKernelCommandsCmdDerivative_getDerivLabelWithGeogebraCommonKernelGeosGeoElement_withInt_(geo, order);
}

- (GeogebraCommonKernelGeosGeoElement *)DerivativeWithNSString:(NSString *)label
              withGeogebraCommonKernelGeosCasEvaluableFunction:(id<GeogebraCommonKernelGeosCasEvaluableFunction>)f
                        withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)var
                 withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)n {
  GeogebraCommonKernelCasAlgoDerivative *algo = [new_GeogebraCommonKernelCasAlgoDerivative_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, f, var, n) autorelease];
  return [algo getResult];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdDerivative", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "getDerivLabelWithGeogebraCommonKernelGeosGeoElement:withInt:", "getDerivLabel", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "DerivativeWithNSString:withGeogebraCommonKernelGeosCasEvaluableFunction:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelArithmeticNumberValue:", "Derivative", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdDerivative = { 2, "CmdDerivative", "geogebra.common.kernel.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdDerivative;
}

@end

void GeogebraCommonKernelCommandsCmdDerivative_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdDerivative *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdDerivative *new_GeogebraCommonKernelCommandsCmdDerivative_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdDerivative *self = [GeogebraCommonKernelCommandsCmdDerivative alloc];
  GeogebraCommonKernelCommandsCmdDerivative_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

NSString *GeogebraCommonKernelCommandsCmdDerivative_getDerivLabelWithGeogebraCommonKernelGeosGeoElement_withInt_(GeogebraCommonKernelGeosGeoElement *geo, jint order) {
  GeogebraCommonKernelCommandsCmdDerivative_initialize();
  NSString *label = nil;
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
    label = [geo getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    for (jint i = 0; i < order; i++) label = JreStrcat("$C", label, '\'');
  }
  return [geo getFreeLabelWithNSString:label];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdDerivative)
