//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/Macro.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/GeoGebraConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Locateable.h"
#include "geogebra/common/kernel/Macro.h"
#include "geogebra/common/kernel/MacroConstruction.h"
#include "geogebra/common/kernel/MacroKernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoMacroInterface.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/geos/Test.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelMacro () {
 @public
  GeogebraCommonKernelKernel *kernel_;
  NSString *cmdName_, *toolName_, *toolHelp_;
  NSString *iconFileName_;
  jboolean showInToolBar_;
  GeogebraCommonKernelConstruction *macroCons_;
  JavaLangStringBuilder *macroConsXML_;
  IOSObjectArray *macroInput_, *macroOutput_;
  IOSObjectArray *macroInputLabels_, *macroOutputLabels_;
  IOSObjectArray *inputTypes_;
  JavaUtilLinkedList *usingAlgos_;
  jboolean copyCaptions_;
}

- (void)initInputOutput OBJC_METHOD_FAMILY_NONE;

- (void)initMacroWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input
                 withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)output OBJC_METHOD_FAMILY_NONE;

- (GeogebraCommonKernelConstruction *)createMacroConstructionWithNSString:(NSString *)macroConsXML;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelMacro, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMacro, cmdName_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMacro, toolName_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMacro, toolHelp_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMacro, iconFileName_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMacro, macroCons_, GeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMacro, macroConsXML_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMacro, macroInput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMacro, macroOutput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMacro, macroInputLabels_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMacro, macroOutputLabels_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMacro, inputTypes_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMacro, usingAlgos_, JavaUtilLinkedList *)

__attribute__((unused)) static void GeogebraCommonKernelMacro_initInputOutput(GeogebraCommonKernelMacro *self);

__attribute__((unused)) static void GeogebraCommonKernelMacro_initMacroWithGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoElementArray_(GeogebraCommonKernelMacro *self, IOSObjectArray *input, IOSObjectArray *output);

__attribute__((unused)) static GeogebraCommonKernelConstruction *GeogebraCommonKernelMacro_createMacroConstructionWithNSString_(GeogebraCommonKernelMacro *self, NSString *macroConsXML);

@implementation GeogebraCommonKernelMacro

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                      withNSString:(NSString *)cmdName
       withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input
       withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)output {
  GeogebraCommonKernelMacro_initWithGeogebraCommonKernelKernel_withNSString_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoElementArray_(self, kernel, cmdName, input, output);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                      withNSString:(NSString *)cmdName {
  GeogebraCommonKernelMacro_initWithGeogebraCommonKernelKernel_withNSString_(self, kernel, cmdName);
  return self;
}

- (IOSObjectArray *)getMacroInput {
  return macroInput_;
}

- (GeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (IOSObjectArray *)getMacroOutput {
  return macroOutput_;
}

- (jboolean)isInMacroConstructionWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return ((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->cons_ == macroCons_;
}

- (GeogebraCommonKernelConstruction *)getMacroConstruction {
  return macroCons_;
}

- (void)initMacroWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)macroCons1
                                    withNSStringArray:(IOSObjectArray *)inputLabels
                                    withNSStringArray:(IOSObjectArray *)outputLabels {
  GeogebraCommonKernelMacro_set_macroCons_(self, macroCons1);
  GeogebraCommonKernelMacro_setAndConsume_macroConsXML_(self, new_JavaLangStringBuilder_init());
  [((GeogebraCommonKernelConstruction *) nil_chk(macroCons_)) getConstructionXMLWithJavaLangStringBuilder:macroConsXML_ withBoolean:NO];
  GeogebraCommonKernelMacro_set_macroInputLabels_(self, inputLabels);
  GeogebraCommonKernelMacro_set_macroOutputLabels_(self, outputLabels);
  GeogebraCommonKernelMacro_initInputOutput(self);
  GeogebraCommonKernelMacro_setAndConsume_inputTypes_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(macroInput_))->size_ type:GeogebraCommonKernelGeosTestEnum_class_()]);
  for (jint i = 0; i < macroInput_->size_; i++) {
    IOSObjectArray_Set(inputTypes_, i, GeogebraCommonKernelGeosTestEnum_getSpecificTestWithId_(IOSObjectArray_Get(macroInput_, i)));
  }
  [((GeogebraCommonKernelMacroConstruction *) nil_chk(((GeogebraCommonKernelMacroConstruction *) check_class_cast(macroCons1, [GeogebraCommonKernelMacroConstruction class])))) setGlobalVariableLookupWithBoolean:YES];
}

- (void)initInputOutput {
  GeogebraCommonKernelMacro_initInputOutput(self);
}

- (void)initMacroWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input
                 withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)output {
  GeogebraCommonKernelMacro_initMacroWithGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoElementArray_(self, input, output);
}

+ (void)addDependentElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                  withJavaUtilSet:(id<JavaUtilSet>)consElementSet
                                                  withJavaUtilSet:(id<JavaUtilSet>)usedAlgoIds {
  GeogebraCommonKernelMacro_addDependentElementWithGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_(geo, consElementSet, usedAlgoIds);
}

+ (void)addSpecialInputElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                     withJavaUtilSet:(id<JavaUtilSet>)consElementSet {
  GeogebraCommonKernelMacro_addSpecialInputElementWithGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_(geo, consElementSet);
}

+ (JavaLangStringBuilder *)buildMacroXMLWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                                       withJavaUtilSet:(id<JavaUtilSet>)macroConsElements {
  return GeogebraCommonKernelMacro_buildMacroXMLWithGeogebraCommonKernelKernel_withJavaUtilSet_(kernel, macroConsElements);
}

- (GeogebraCommonKernelConstruction *)createMacroConstructionWithNSString:(NSString *)macroConsXML {
  return GeogebraCommonKernelMacro_createMacroConstructionWithNSString_(self, macroConsXML);
}

- (void)registerAlgorithmWithGeogebraCommonKernelAlgosAlgoMacroInterface:(id<GeogebraCommonKernelAlgosAlgoMacroInterface>)algoMacro {
  [((JavaUtilLinkedList *) nil_chk(usingAlgos_)) addWithId:(GeogebraCommonKernelAlgosAlgoElement *) check_class_cast(algoMacro, [GeogebraCommonKernelAlgosAlgoElement class])];
}

- (void)unregisterAlgorithmWithGeogebraCommonKernelAlgosAlgoMacroInterface:(id<GeogebraCommonKernelAlgosAlgoMacroInterface>)algoMacro {
  [((JavaUtilLinkedList *) nil_chk(usingAlgos_)) removeWithId:algoMacro];
}

- (jboolean)isUsed {
  return [((JavaUtilLinkedList *) nil_chk(usingAlgos_)) size] > 0;
}

- (void)setUnused {
  [((JavaUtilLinkedList *) nil_chk(usingAlgos_)) clear];
}

- (IOSObjectArray *)getInputTypes {
  return inputTypes_;
}

- (NSString *)getToolHelp {
  if (toolHelp_ == nil || [@"" isEqual:toolHelp_]) {
    return [self description];
  }
  return toolHelp_;
}

- (NSString *)getNeededTypesString {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(macroInput_))->size_; ++i) {
    [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(macroInput_, i))) translatedTypeString]];
    if (i != macroInput_->size_ - 1) {
      [sb appendWithNSString:@", "];
    }
  }
  return [sb description];
}

- (void)setToolHelpWithNSString:(NSString *)toolHelp {
  if (toolHelp == nil || [toolHelp isEqual:@"null"]) GeogebraCommonKernelMacro_set_toolHelp_(self, @"");
  else GeogebraCommonKernelMacro_set_toolHelp_(self, toolHelp);
}

- (NSString *)getCommandName {
  return cmdName_;
}

- (void)setCommandNameWithNSString:(NSString *)name {
  if (name != nil) GeogebraCommonKernelMacro_set_cmdName_(self, name);
}

- (NSString *)getToolName {
  return toolName_;
}

- (NSString *)getToolOrCommandName {
  if (![@"" isEqual:toolName_]) return toolName_;
  return cmdName_;
}

- (void)setToolNameWithNSString:(NSString *)name {
  if (name == nil || [name isEqual:@"null"] || ((jint) [name length]) == 0) GeogebraCommonKernelMacro_set_toolName_(self, cmdName_);
  else GeogebraCommonKernelMacro_set_toolName_(self, name);
}

- (void)setIconFileNameWithNSString:(NSString *)name {
  if (name == nil) GeogebraCommonKernelMacro_set_iconFileName_(self, @"");
  else GeogebraCommonKernelMacro_set_iconFileName_(self, name);
}

- (NSString *)getIconFileName {
  return iconFileName_;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:cmdName_];
  [sb appendWithNSString:@"[ "];
  [sb appendWithChar:'<'];
  [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(macroInput_), 0))) translatedTypeString]];
  [sb appendWithChar:'>'];
  for (jint i = 1; i < macroInput_->size_; ++i) {
    [sb appendWithNSString:@", "];
    [sb appendWithChar:'<'];
    [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(macroInput_, i))) translatedTypeString]];
    [sb appendWithChar:'>'];
  }
  [sb appendWithNSString:@" ]"];
  return [sb description];
}

- (void)getXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<macro cmdName=\""];
  GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, cmdName_);
  [sb appendWithNSString:@"\" toolName=\""];
  GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, toolName_);
  [sb appendWithNSString:@"\" toolHelp=\""];
  GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, toolHelp_);
  [sb appendWithNSString:@"\" iconFile=\""];
  GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, iconFileName_);
  [sb appendWithNSString:@"\" showInToolBar=\""];
  [sb appendWithBoolean:showInToolBar_];
  [sb appendWithNSString:@"\" copyCaptions=\""];
  [sb appendWithBoolean:copyCaptions_];
  [sb appendWithNSString:@"\">\n"];
  [sb appendWithNSString:@"<macroInput"];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(macroInputLabels_))->size_; i++) {
    [sb appendWithNSString:@" a"];
    [sb appendWithInt:i];
    [sb appendWithNSString:@"=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, IOSObjectArray_Get(macroInputLabels_, i));
    [sb appendWithNSString:@"\""];
  }
  [sb appendWithNSString:@"/>\n"];
  [sb appendWithNSString:@"<macroOutput"];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(macroOutputLabels_))->size_; i++) {
    [sb appendWithNSString:@" a"];
    [sb appendWithInt:i];
    [sb appendWithNSString:@"=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, IOSObjectArray_Get(macroOutputLabels_, i));
    [sb appendWithNSString:@"\""];
  }
  [sb appendWithNSString:@"/>\n"];
  if (macroConsXML_ != nil && [macroConsXML_ length] > 0) {
    [sb appendWithNSString:[macroConsXML_ description]];
  }
  else {
    [((GeogebraCommonKernelConstruction *) nil_chk(macroCons_)) getConstructionXMLWithJavaLangStringBuilder:sb withBoolean:NO];
  }
  [sb appendWithNSString:@"</macro>\n"];
}

- (jboolean)isShowInToolBar {
  return showInToolBar_;
}

- (void)setShowInToolBarWithBoolean:(jboolean)showInToolBar {
  self->showInToolBar_ = showInToolBar;
}

- (JavaUtilArrayList *)getUsedMacros {
  return [((GeogebraCommonKernelConstruction *) nil_chk(macroCons_)) getUsedMacros];
}

- (JavaUtilArrayList *)getDependentGeos {
  JavaUtilArrayList *geos = [new_JavaUtilArrayList_init() autorelease];
  id<JavaUtilIterator> curr = [((JavaUtilLinkedList *) nil_chk(usingAlgos_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(curr)) hasNext]) {
    GeogebraCommonKernelAlgosAlgoElement *algo = [curr next];
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutputWithInt:0];
    while (!((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo))->labelSet_ && [((JavaUtilTreeSet *) nil_chk([geo getAllChildren])) size] > 0) {
      geo = [((JavaUtilTreeSet *) nil_chk([geo getAllChildren])) first];
    }
    algo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm];
    for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutputLength]; i++) {
      [geos addWithId:[algo getOutputWithInt:i]];
    }
  }
  return geos;
}

- (void)setCopyCaptionsAndVisibilityWithBoolean:(jboolean)copyCaptions {
  self->copyCaptions_ = copyCaptions;
}

- (jboolean)isCopyCaptionsAndVisibility {
  return copyCaptions_;
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(cmdName_);
  RELEASE_(toolName_);
  RELEASE_(toolHelp_);
  RELEASE_(iconFileName_);
  RELEASE_(macroCons_);
  RELEASE_(macroConsXML_);
  RELEASE_(macroInput_);
  RELEASE_(macroOutput_);
  RELEASE_(macroInputLabels_);
  RELEASE_(macroOutputLabels_);
  RELEASE_(inputTypes_);
  RELEASE_(usingAlgos_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withNSString:withGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonKernelGeosGeoElementArray:", "Macro", NULL, 0x1, "Ljava.lang.Exception;", NULL },
    { "initWithGeogebraCommonKernelKernel:withNSString:", "Macro", NULL, 0x1, NULL, NULL },
    { "getMacroInput", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "getMacroOutput", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isInMacroConstructionWithGeogebraCommonKernelGeosGeoElement:", "isInMacroConstruction", "Z", 0x11, NULL, NULL },
    { "getMacroConstruction", NULL, "Lgeogebra.common.kernel.Construction;", 0x1, NULL, NULL },
    { "initMacroWithGeogebraCommonKernelConstruction:withNSStringArray:withNSStringArray:", "initMacro", "V", 0x1, NULL, NULL },
    { "initInputOutput", NULL, "V", 0x2, NULL, NULL },
    { "initMacroWithGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonKernelGeosGeoElementArray:", "initMacro", "V", 0x2, "Ljava.lang.Exception;", NULL },
    { "addDependentElementWithGeogebraCommonKernelGeosGeoElement:withJavaUtilSet:withJavaUtilSet:", "addDependentElement", "V", 0x9, NULL, NULL },
    { "addSpecialInputElementWithGeogebraCommonKernelGeosGeoElement:withJavaUtilSet:", "addSpecialInputElement", "V", 0x9, NULL, NULL },
    { "buildMacroXMLWithGeogebraCommonKernelKernel:withJavaUtilSet:", "buildMacroXML", "Ljava.lang.StringBuilder;", 0x9, NULL, NULL },
    { "createMacroConstructionWithNSString:", "createMacroConstruction", "Lgeogebra.common.kernel.Construction;", 0x2, "Ljava.lang.Exception;", NULL },
    { "registerAlgorithmWithGeogebraCommonKernelAlgosAlgoMacroInterface:", "registerAlgorithm", "V", 0x1, NULL, NULL },
    { "unregisterAlgorithmWithGeogebraCommonKernelAlgosAlgoMacroInterface:", "unregisterAlgorithm", "V", 0x1, NULL, NULL },
    { "isUsed", NULL, "Z", 0x11, NULL, NULL },
    { "setUnused", NULL, "V", 0x11, NULL, NULL },
    { "getInputTypes", NULL, "[Lgeogebra.common.kernel.geos.Test;", 0x11, NULL, NULL },
    { "getToolHelp", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getNeededTypesString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setToolHelpWithNSString:", "setToolHelp", "V", 0x1, NULL, NULL },
    { "getCommandName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setCommandNameWithNSString:", "setCommandName", "V", 0x1, NULL, NULL },
    { "getToolName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getToolOrCommandName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setToolNameWithNSString:", "setToolName", "V", 0x1, NULL, NULL },
    { "setIconFileNameWithNSString:", "setIconFileName", "V", 0x1, NULL, NULL },
    { "getIconFileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLWithJavaLangStringBuilder:", "getXML", "V", 0x1, NULL, NULL },
    { "isShowInToolBar", NULL, "Z", 0x11, NULL, NULL },
    { "setShowInToolBarWithBoolean:", "setShowInToolBar", "V", 0x11, NULL, NULL },
    { "getUsedMacros", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getDependentGeos", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "setCopyCaptionsAndVisibilityWithBoolean:", "setCopyCaptionsAndVisibility", "V", 0x1, NULL, NULL },
    { "isCopyCaptionsAndVisibility", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cmdName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "toolName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "toolHelp_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "iconFileName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "showInToolBar_", NULL, 0x2, "Z", NULL, NULL,  },
    { "macroCons_", NULL, 0x2, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "macroConsXML_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "macroInput_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "macroOutput_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "macroInputLabels_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "macroOutputLabels_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "inputTypes_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.Test;", NULL, NULL,  },
    { "usingAlgos_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lgeogebra/common/kernel/algos/AlgoElement;>;",  },
    { "copyCaptions_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelMacro = { 2, "Macro", "geogebra.common.kernel", NULL, 0x1, 37, methods, 15, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelMacro;
}

@end

void GeogebraCommonKernelMacro_initWithGeogebraCommonKernelKernel_withNSString_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoElementArray_(GeogebraCommonKernelMacro *self, GeogebraCommonKernelKernel *kernel, NSString *cmdName, IOSObjectArray *input, IOSObjectArray *output) {
  GeogebraCommonKernelMacro_initWithGeogebraCommonKernelKernel_withNSString_(self, kernel, cmdName);
  GeogebraCommonKernelMacro_initMacroWithGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoElementArray_(self, input, output);
}

GeogebraCommonKernelMacro *new_GeogebraCommonKernelMacro_initWithGeogebraCommonKernelKernel_withNSString_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoElementArray_(GeogebraCommonKernelKernel *kernel, NSString *cmdName, IOSObjectArray *input, IOSObjectArray *output) {
  GeogebraCommonKernelMacro *self = [GeogebraCommonKernelMacro alloc];
  GeogebraCommonKernelMacro_initWithGeogebraCommonKernelKernel_withNSString_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoElementArray_(self, kernel, cmdName, input, output);
  return self;
}

void GeogebraCommonKernelMacro_initWithGeogebraCommonKernelKernel_withNSString_(GeogebraCommonKernelMacro *self, GeogebraCommonKernelKernel *kernel, NSString *cmdName) {
  NSObject_init(self);
  GeogebraCommonKernelMacro_set_cmdName_(self, @"");
  GeogebraCommonKernelMacro_set_toolName_(self, @"");
  GeogebraCommonKernelMacro_set_toolHelp_(self, @"");
  GeogebraCommonKernelMacro_set_iconFileName_(self, @"");
  self->showInToolBar_ = YES;
  GeogebraCommonKernelMacro_setAndConsume_usingAlgos_(self, new_JavaUtilLinkedList_init());
  GeogebraCommonKernelMacro_set_kernel_(self, kernel);
  [self setCommandNameWithNSString:cmdName];
  self->copyCaptions_ = YES;
}

GeogebraCommonKernelMacro *new_GeogebraCommonKernelMacro_initWithGeogebraCommonKernelKernel_withNSString_(GeogebraCommonKernelKernel *kernel, NSString *cmdName) {
  GeogebraCommonKernelMacro *self = [GeogebraCommonKernelMacro alloc];
  GeogebraCommonKernelMacro_initWithGeogebraCommonKernelKernel_withNSString_(self, kernel, cmdName);
  return self;
}

void GeogebraCommonKernelMacro_initInputOutput(GeogebraCommonKernelMacro *self) {
  GeogebraCommonKernelMacro_setAndConsume_macroInput_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->macroInputLabels_))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()]);
  GeogebraCommonKernelMacro_setAndConsume_macroOutput_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->macroOutputLabels_))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()]);
  for (jint i = 0; i < self->macroInputLabels_->size_; i++) {
    IOSObjectArray_Set(self->macroInput_, i, [((GeogebraCommonKernelConstruction *) nil_chk(self->macroCons_)) lookupLabelWithNSString:IOSObjectArray_Get(self->macroInputLabels_, i)]);
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->macroInput_, i))) setFixedWithBoolean:NO];
  }
  for (jint i = 0; i < self->macroOutputLabels_->size_; i++) {
    IOSObjectArray_Set(self->macroOutput_, i, [((GeogebraCommonKernelConstruction *) nil_chk(self->macroCons_)) lookupLabelWithNSString:IOSObjectArray_Get(self->macroOutputLabels_, i)]);
  }
}

void GeogebraCommonKernelMacro_initMacroWithGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoElementArray_(GeogebraCommonKernelMacro *self, IOSObjectArray *input, IOSObjectArray *output) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(output))->size_; i++) {
    jboolean dependsOnInput = NO;
    for (jint k = 0; k < ((IOSObjectArray *) nil_chk(input))->size_; k++) {
      jboolean dependencyFound = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i))) isChildOfWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(input, k)];
      if (dependencyFound) {
        dependsOnInput = YES;
      }
    }
    if (!dependsOnInput) {
      @throw [new_JavaLangException_initWithNSString_(JreStrcat("$$$", [((GeogebraCommonMainLocalization *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getLocalization])) getErrorWithNSString:@"Tool.OutputNotDependent"], @": ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i))) getNameDescription])) autorelease];
    }
  }
  JavaUtilTreeSet *outputParents = [new_JavaUtilTreeSet_init() autorelease];
  for (jint i = 0; i < output->size_; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i))) addPredecessorsToSetWithJavaUtilTreeSet:outputParents withBoolean:NO];
    if ([GeogebraCommonKernelLocateable_class_() isInstance:IOSObjectArray_Get(output, i)]) {
      id<GeogebraCommonKernelLocateable> loc = (id<GeogebraCommonKernelLocateable>) check_protocol_cast(IOSObjectArray_Get(output, i), @protocol(GeogebraCommonKernelLocateable));
      IOSObjectArray *points = [((id<GeogebraCommonKernelLocateable>) nil_chk(loc)) getStartPoints];
      if (points != nil) {
        for (jint k = 0; k < points->size_; k++) {
          [outputParents addWithId:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, k), [GeogebraCommonKernelGeosGeoElement class])];
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, k), [GeogebraCommonKernelGeosGeoElement class])))) addPredecessorsToSetWithJavaUtilTreeSet:outputParents withBoolean:NO];
        }
      }
    }
  }
  JavaUtilTreeSet *macroConsOrigElements = [new_JavaUtilTreeSet_init() autorelease];
  JavaUtilTreeSet *usedAlgoIds = [new_JavaUtilTreeSet_init() autorelease];
  id<JavaUtilIterator> it = [outputParents iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *outputParent = [it next];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(outputParent)) isLabelSet]) {
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input))->size_; i++) {
        if ([outputParent isChildOfWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(input, i)]) {
          GeogebraCommonKernelMacro_addDependentElementWithGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_(outputParent, macroConsOrigElements, usedAlgoIds);
          i = input->size_;
        }
      }
    }
  }
  IOSBooleanArray *isInputLabeled = [IOSBooleanArray arrayWithLength:((IOSObjectArray *) nil_chk(input))->size_];
  IOSBooleanArray *isOutputLabeled = [IOSBooleanArray arrayWithLength:output->size_];
  IOSObjectArray *inputLabels = [IOSObjectArray arrayWithLength:input->size_ type:NSString_class_()];
  IOSObjectArray *outputLabels = [IOSObjectArray arrayWithLength:output->size_ type:NSString_class_()];
  IOSObjectArray *startPoints = [IOSObjectArray arrayWithLength:input->size_ type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
  for (jint i = 0; i < input->size_; i++) {
    *IOSBooleanArray_GetRef(isInputLabeled, i) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) isLabelSet];
    if (!IOSBooleanArray_Get(isInputLabeled, i)) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) setLabelSimpleWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) getDefaultLabel]];
      ((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i)))->labelSet_ = YES;
    }
    if ([IOSObjectArray_Get(input, i) isKindOfClass:[GeogebraCommonKernelGeosGeoVector class]]) {
      IOSObjectArray_Set(startPoints, i, [((GeogebraCommonKernelGeosGeoVector *) nil_chk(((GeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(input, i), [GeogebraCommonKernelGeosGeoVector class])))) getStartPoint]);
      [((GeogebraCommonKernelGeosGeoVector *) nil_chk(((GeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(input, i), [GeogebraCommonKernelGeosGeoVector class])))) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:nil];
    }
    IOSObjectArray_Set(inputLabels, i, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) getLabelSimple]);
    {
      GeogebraCommonKernelAlgosAlgoElement *algo;
      switch ([[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) getGeoClassType] ordinal]) {
        case GeogebraCommonPluginGeoClass_SEGMENT:
        case GeogebraCommonPluginGeoClass_RAY:
        case GeogebraCommonPluginGeoClass_POLYGON:
        case GeogebraCommonPluginGeoClass_FUNCTION:
        case GeogebraCommonPluginGeoClass_INTERVAL:
        case GeogebraCommonPluginGeoClass_CURVE_CARTESIAN:
        GeogebraCommonKernelMacro_addSpecialInputElementWithGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_(IOSObjectArray_Get(input, i), macroConsOrigElements);
        break;
        default:
        [macroConsOrigElements addWithId:IOSObjectArray_Get(input, i)];
        algo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i))) getParentAlgorithm];
        if (algo != nil) [macroConsOrigElements removeWithId:algo];
      }
    }
  }
  for (jint i = 0; i < output->size_; i++) {
    *IOSBooleanArray_GetRef(isOutputLabeled, i) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i))) isLabelSet];
    if (!IOSBooleanArray_Get(isOutputLabeled, i)) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i))) setLabelSimpleWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i))) getDefaultLabel]];
      ((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i)))->labelSet_ = YES;
    }
    IOSObjectArray_Set(outputLabels, i, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i))) getLabelSimple]);
    GeogebraCommonKernelMacro_addDependentElementWithGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_(IOSObjectArray_Get(output, i), macroConsOrigElements, usedAlgoIds);
  }
  GeogebraCommonKernelMacro_set_macroConsXML_(self, GeogebraCommonKernelMacro_buildMacroXMLWithGeogebraCommonKernelKernel_withJavaUtilSet_(((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, 0)))->kernel_, macroConsOrigElements));
  for (jint i = 0; i < input->size_; i++) {
    if (!IOSBooleanArray_Get(isInputLabeled, i)) ((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input, i)))->labelSet_ = NO;
    if ([IOSObjectArray_Get(input, i) isKindOfClass:[GeogebraCommonKernelGeosGeoVector class]]) {
      [((GeogebraCommonKernelGeosGeoVector *) nil_chk(((GeogebraCommonKernelGeosGeoVector *) check_class_cast(IOSObjectArray_Get(input, i), [GeogebraCommonKernelGeosGeoVector class])))) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(startPoints, i)];
    }
  }
  for (jint i = 0; i < output->size_; i++) {
    if (!IOSBooleanArray_Get(isOutputLabeled, i)) ((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(output, i)))->labelSet_ = NO;
  }
  GeogebraCommonUtilDebugLog_debugWithId_(self->macroConsXML_);
  GeogebraCommonKernelConstruction *macroCons2 = GeogebraCommonKernelMacro_createMacroConstructionWithNSString_(self, [((JavaLangStringBuilder *) nil_chk(self->macroConsXML_)) description]);
  [self initMacroWithGeogebraCommonKernelConstruction:macroCons2 withNSStringArray:inputLabels withNSStringArray:outputLabels];
}

void GeogebraCommonKernelMacro_addDependentElementWithGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_(GeogebraCommonKernelGeosGeoElement *geo, id<JavaUtilSet> consElementSet, id<JavaUtilSet> usedAlgoIds) {
  GeogebraCommonKernelMacro_initialize();
  GeogebraCommonKernelAlgosAlgoElement *algo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm];
  if ([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) isInConstructionList]) {
    JavaLangLong *algoID = JavaLangLong_valueOfWithLong_([algo getID]);
    if (![((id<JavaUtilSet>) nil_chk(usedAlgoIds)) containsWithId:algoID]) [((id<JavaUtilSet>) nil_chk(consElementSet)) addWithId:algo];
    [usedAlgoIds addWithId:algoID];
    IOSObjectArray *algoOutput = [algo getOutput];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(algoOutput))->size_; i++) {
      [((id<JavaUtilSet>) nil_chk(consElementSet)) addWithId:IOSObjectArray_Get(algoOutput, i)];
    }
  }
  else {
    [((id<JavaUtilSet>) nil_chk(consElementSet)) addWithId:geo];
  }
}

void GeogebraCommonKernelMacro_addSpecialInputElementWithGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_(GeogebraCommonKernelGeosGeoElement *geo, id<JavaUtilSet> consElementSet) {
  GeogebraCommonKernelMacro_initialize();
  [((id<JavaUtilSet>) nil_chk(consElementSet)) addWithId:geo];
  GeogebraCommonKernelAlgosAlgoElement *algo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm];
  if (algo != nil && [algo isInConstructionList]) {
    [consElementSet addWithId:algo];
    IOSObjectArray *algoInput = [algo getInput];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(algoInput))->size_; i++) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(algoInput, i))) isLabelSet]) [consElementSet addWithId:IOSObjectArray_Get(algoInput, i)];
    }
  }
}

JavaLangStringBuilder *GeogebraCommonKernelMacro_buildMacroXMLWithGeogebraCommonKernelKernel_withJavaUtilSet_(GeogebraCommonKernelKernel *kernel, id<JavaUtilSet> macroConsElements) {
  GeogebraCommonKernelMacro_initialize();
  JavaLangStringBuilder *macroConsXML = [new_JavaLangStringBuilder_initWithInt_(500) autorelease];
  [macroConsXML appendWithNSString:@"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"];
  [macroConsXML appendWithNSString:JreStrcat("$$$", @"<geogebra format=\"", GeogebraCommonGeoGebraConstants_get_XML_FILE_FORMAT_(), @"\">\n")];
  [macroConsXML appendWithNSString:@"<construction author=\"\" title=\"\" date=\"\">\n"];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(macroConsElements)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelAlgosConstructionElement *ce = [it next];
    if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isGeoElement]) {
      [ce getXMLWithBoolean:NO withJavaLangStringBuilder:macroConsXML];
    }
    else if ([ce isAlgoElement]) {
      GeogebraCommonKernelAlgosAlgoElement *algo = (GeogebraCommonKernelAlgosAlgoElement *) check_class_cast(ce, [GeogebraCommonKernelAlgosAlgoElement class]);
      [algo getXMLWithJavaLangStringBuilder:macroConsXML withBoolean:NO];
    }
  }
  [macroConsXML appendWithNSString:@"</construction>\n"];
  [macroConsXML appendWithNSString:@"</geogebra>"];
  return macroConsXML;
}

GeogebraCommonKernelConstruction *GeogebraCommonKernelMacro_createMacroConstructionWithNSString_(GeogebraCommonKernelMacro *self, NSString *macroConsXML) {
  GeogebraCommonKernelMacroKernel *mk = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) newMacroKernel];
  [((GeogebraCommonKernelMacroKernel *) nil_chk(mk)) setContinuousWithBoolean:NO];
  [mk setGlobalVariableLookupWithBoolean:NO];
  @try {
    [mk loadXMLWithNSString:macroConsXML];
  }
  @catch (GeogebraCommonMainMyError *e) {
    NSString *msg = [((GeogebraCommonMainMyError *) nil_chk(e)) getLocalizedMessage];
    GeogebraCommonMainApp_debugWithNSString_(msg);
    [e printStackTrace];
    @throw [new_JavaLangException_initWithNSString_(msg) autorelease];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_JavaLangException_initWithNSString_([e getMessage]) autorelease];
  }
  return [mk getConstruction];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelMacro)
