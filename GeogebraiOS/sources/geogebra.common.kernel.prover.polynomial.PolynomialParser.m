//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/prover/polynomial/PolynomialParser.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/prover/polynomial/ParseException.h"
#include "geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "geogebra/common/kernel/prover/polynomial/PolynomialParser.h"
#include "geogebra/common/kernel/prover/polynomial/PolynomialParserConstants.h"
#include "geogebra/common/kernel/prover/polynomial/PolynomialParserTokenManager.h"
#include "geogebra/common/kernel/prover/polynomial/SimpleCharStream.h"
#include "geogebra/common/kernel/prover/polynomial/Term.h"
#include "geogebra/common/kernel/prover/polynomial/Token.h"
#include "geogebra/common/kernel/prover/polynomial/Variable.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Error.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface GeogebraCommonKernelProverPolynomialPolynomialParser () {
 @public
  jint jj_ntk__;
  jint jj_gen_;
  IOSIntArray *jj_la1_;
  id<JavaUtilList> jj_expentries_;
  IOSIntArray *jj_expentry_;
  jint jj_kind_;
}

+ (void)jj_la1_init_0;

- (GeogebraCommonKernelProverPolynomialToken *)jj_consume_tokenWithInt:(jint)kind;

- (jint)jj_ntk;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverPolynomialPolynomialParser, jj_la1_, IOSIntArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverPolynomialPolynomialParser, jj_expentries_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverPolynomialPolynomialParser, jj_expentry_, IOSIntArray *)

static IOSIntArray *GeogebraCommonKernelProverPolynomialPolynomialParser_jj_la1_0_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelProverPolynomialPolynomialParser, jj_la1_0_, IOSIntArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelProverPolynomialPolynomialParser, jj_la1_0_, IOSIntArray *)

__attribute__((unused)) static id<JavaUtilSet> GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialFactoredSetStartingPointWithJavaUtilHashMap_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaUtilHashMap *variables);

__attribute__((unused)) static id<JavaUtilSet> GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialFactorsStartingPointWithJavaUtilHashMap_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaUtilHashMap *variables);

__attribute__((unused)) static GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialStartingPointWithJavaUtilHashMap_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaUtilHashMap *variables);

__attribute__((unused)) static GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialWithJavaUtilHashMap_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaUtilHashMap *variables);

__attribute__((unused)) static GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomialParser_termWithJavaUtilHashMap_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaUtilHashMap *variables);

__attribute__((unused)) static GeogebraCommonKernelProverPolynomialTerm *GeogebraCommonKernelProverPolynomialPolynomialParser_powerWithJavaUtilHashMap_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaUtilHashMap *variables);

__attribute__((unused)) static GeogebraCommonKernelProverPolynomialVariable *GeogebraCommonKernelProverPolynomialPolynomialParser_variableWithJavaUtilHashMap_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaUtilHashMap *variables);

__attribute__((unused)) static void GeogebraCommonKernelProverPolynomialPolynomialParser_jj_la1_init_0();

__attribute__((unused)) static GeogebraCommonKernelProverPolynomialToken *GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, jint kind);

__attribute__((unused)) static jint GeogebraCommonKernelProverPolynomialPolynomialParser_jj_ntk(GeogebraCommonKernelProverPolynomialPolynomialParser *self);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelProverPolynomialPolynomialParser)

@implementation GeogebraCommonKernelProverPolynomialPolynomialParser

+ (GeogebraCommonKernelProverPolynomialPolynomial *)parsePolynomialWithNSString:(NSString *)string
                                                                withJavaUtilSet:(id<JavaUtilSet>)variables {
  return GeogebraCommonKernelProverPolynomialPolynomialParser_parsePolynomialWithNSString_withJavaUtilSet_(string, variables);
}

+ (id<JavaUtilSet>)parsePolynomialFactorsWithNSString:(NSString *)string
                                      withJavaUtilSet:(id<JavaUtilSet>)variables {
  return GeogebraCommonKernelProverPolynomialPolynomialParser_parsePolynomialFactorsWithNSString_withJavaUtilSet_(string, variables);
}

+ (id<JavaUtilSet>)parseFactoredPolynomialSetWithNSString:(NSString *)string
                                          withJavaUtilSet:(id<JavaUtilSet>)variables {
  return GeogebraCommonKernelProverPolynomialPolynomialParser_parseFactoredPolynomialSetWithNSString_withJavaUtilSet_(string, variables);
}

- (id<JavaUtilSet>)polynomialFactoredSetStartingPointWithJavaUtilHashMap:(JavaUtilHashMap *)variables {
  return GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialFactoredSetStartingPointWithJavaUtilHashMap_(self, variables);
}

- (id<JavaUtilSet>)polynomialFactorsStartingPointWithJavaUtilHashMap:(JavaUtilHashMap *)variables {
  return GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialFactorsStartingPointWithJavaUtilHashMap_(self, variables);
}

- (GeogebraCommonKernelProverPolynomialPolynomial *)polynomialStartingPointWithJavaUtilHashMap:(JavaUtilHashMap *)variables {
  return GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialStartingPointWithJavaUtilHashMap_(self, variables);
}

- (GeogebraCommonKernelProverPolynomialPolynomial *)polynomialWithJavaUtilHashMap:(JavaUtilHashMap *)variables {
  return GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialWithJavaUtilHashMap_(self, variables);
}

- (GeogebraCommonKernelProverPolynomialPolynomial *)termWithJavaUtilHashMap:(JavaUtilHashMap *)variables {
  return GeogebraCommonKernelProverPolynomialPolynomialParser_termWithJavaUtilHashMap_(self, variables);
}

- (GeogebraCommonKernelProverPolynomialTerm *)powerWithJavaUtilHashMap:(JavaUtilHashMap *)variables {
  return GeogebraCommonKernelProverPolynomialPolynomialParser_powerWithJavaUtilHashMap_(self, variables);
}

- (GeogebraCommonKernelProverPolynomialVariable *)variableWithJavaUtilHashMap:(JavaUtilHashMap *)variables {
  return GeogebraCommonKernelProverPolynomialPolynomialParser_variableWithJavaUtilHashMap_(self, variables);
}

+ (void)jj_la1_init_0 {
  GeogebraCommonKernelProverPolynomialPolynomialParser_jj_la1_init_0();
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)stream {
  GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoInputStream_(self, stream);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)stream
                             withNSString:(NSString *)encoding {
  GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoInputStream_withNSString_(self, stream, encoding);
  return self;
}

- (void)ReInitWithJavaIoInputStream:(JavaIoInputStream *)stream {
  [self ReInitWithJavaIoInputStream:stream withNSString:nil];
}

- (void)ReInitWithJavaIoInputStream:(JavaIoInputStream *)stream
                       withNSString:(NSString *)encoding {
  @try {
    [((GeogebraCommonKernelProverPolynomialSimpleCharStream *) nil_chk(jj_input_stream_)) ReInitWithJavaIoInputStream:stream withNSString:encoding withInt:1 withInt:1];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [new_JavaLangRuntimeException_initWithJavaLangThrowable_(e) autorelease];
  }
  [((GeogebraCommonKernelProverPolynomialPolynomialParserTokenManager *) nil_chk(token_source_)) ReInitWithGeogebraCommonKernelProverPolynomialSimpleCharStream:jj_input_stream_];
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_token_(self, new_GeogebraCommonKernelProverPolynomialToken_init());
  jj_ntk__ = -1;
  jj_gen_ = 0;
  for (jint i = 0; i < 10; i++) *IOSIntArray_GetRef(nil_chk(jj_la1_), i) = -1;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)stream {
  GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoReader_(self, stream);
  return self;
}

- (void)ReInitWithJavaIoReader:(JavaIoReader *)stream {
  [((GeogebraCommonKernelProverPolynomialSimpleCharStream *) nil_chk(jj_input_stream_)) ReInitWithJavaIoReader:stream withInt:1 withInt:1];
  [((GeogebraCommonKernelProverPolynomialPolynomialParserTokenManager *) nil_chk(token_source_)) ReInitWithGeogebraCommonKernelProverPolynomialSimpleCharStream:jj_input_stream_];
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_token_(self, new_GeogebraCommonKernelProverPolynomialToken_init());
  jj_ntk__ = -1;
  jj_gen_ = 0;
  for (jint i = 0; i < 10; i++) *IOSIntArray_GetRef(nil_chk(jj_la1_), i) = -1;
}

- (instancetype)initWithGeogebraCommonKernelProverPolynomialPolynomialParserTokenManager:(GeogebraCommonKernelProverPolynomialPolynomialParserTokenManager *)tm {
  GeogebraCommonKernelProverPolynomialPolynomialParser_initWithGeogebraCommonKernelProverPolynomialPolynomialParserTokenManager_(self, tm);
  return self;
}

- (void)ReInitWithGeogebraCommonKernelProverPolynomialPolynomialParserTokenManager:(GeogebraCommonKernelProverPolynomialPolynomialParserTokenManager *)tm {
  GeogebraCommonKernelProverPolynomialPolynomialParser_set_token_source_(self, tm);
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_token_(self, new_GeogebraCommonKernelProverPolynomialToken_init());
  jj_ntk__ = -1;
  jj_gen_ = 0;
  for (jint i = 0; i < 10; i++) *IOSIntArray_GetRef(nil_chk(jj_la1_), i) = -1;
}

- (GeogebraCommonKernelProverPolynomialToken *)jj_consume_tokenWithInt:(jint)kind {
  return GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, kind);
}

- (GeogebraCommonKernelProverPolynomialToken *)getNextToken {
  if (((GeogebraCommonKernelProverPolynomialToken *) nil_chk(token_))->next_ != nil) GeogebraCommonKernelProverPolynomialPolynomialParser_set_token_(self, token_->next_);
  else GeogebraCommonKernelProverPolynomialPolynomialParser_set_token_(self, GeogebraCommonKernelProverPolynomialToken_set_next_(token_, [((GeogebraCommonKernelProverPolynomialPolynomialParserTokenManager *) nil_chk(token_source_)) getNextToken]));
  jj_ntk__ = -1;
  jj_gen_++;
  return token_;
}

- (GeogebraCommonKernelProverPolynomialToken *)getTokenWithInt:(jint)index {
  GeogebraCommonKernelProverPolynomialToken *t = token_;
  for (jint i = 0; i < index; i++) {
    if (((GeogebraCommonKernelProverPolynomialToken *) nil_chk(t))->next_ != nil) t = t->next_;
    else t = GeogebraCommonKernelProverPolynomialToken_set_next_(t, [((GeogebraCommonKernelProverPolynomialPolynomialParserTokenManager *) nil_chk(token_source_)) getNextToken]);
  }
  return t;
}

- (jint)jj_ntk {
  return GeogebraCommonKernelProverPolynomialPolynomialParser_jj_ntk(self);
}

- (GeogebraCommonKernelProverPolynomialParseException *)generateParseException {
  [((id<JavaUtilList>) nil_chk(jj_expentries_)) clear];
  IOSBooleanArray *la1tokens = [IOSBooleanArray arrayWithLength:15];
  if (jj_kind_ >= 0) {
    *IOSBooleanArray_GetRef(la1tokens, jj_kind_) = YES;
    jj_kind_ = -1;
  }
  for (jint i = 0; i < 10; i++) {
    if (IOSIntArray_Get(nil_chk(jj_la1_), i) == jj_gen_) {
      for (jint j = 0; j < 32; j++) {
        if ((IOSIntArray_Get(nil_chk(GeogebraCommonKernelProverPolynomialPolynomialParser_jj_la1_0_), i) & (LShift32(1, j))) != 0) {
          *IOSBooleanArray_GetRef(la1tokens, j) = YES;
        }
      }
    }
  }
  for (jint i = 0; i < 15; i++) {
    if (IOSBooleanArray_Get(la1tokens, i)) {
      GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_jj_expentry_(self, [IOSIntArray newArrayWithLength:1]);
      *IOSIntArray_GetRef(jj_expentry_, 0) = i;
      [jj_expentries_ addWithId:jj_expentry_];
    }
  }
  IOSObjectArray *exptokseq = [IOSObjectArray arrayWithLength:[jj_expentries_ size] type:IOSClass_intArray(1)];
  for (jint i = 0; i < [jj_expentries_ size]; i++) {
    IOSObjectArray_Set(exptokseq, i, [jj_expentries_ getWithInt:i]);
  }
  return [new_GeogebraCommonKernelProverPolynomialParseException_initWithGeogebraCommonKernelProverPolynomialToken_withIntArray2_withNSStringArray_(token_, exptokseq, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_get_tokenImage_()) autorelease];
}

- (void)enable_tracing {
}

- (void)disable_tracing {
}

- (void)dealloc {
  RELEASE_(token_source_);
  RELEASE_(jj_input_stream_);
  RELEASE_(token_);
  RELEASE_(jj_nt_);
  RELEASE_(jj_la1_);
  RELEASE_(jj_expentries_);
  RELEASE_(jj_expentry_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelProverPolynomialPolynomialParser class]) {
    {
      GeogebraCommonKernelProverPolynomialPolynomialParser_jj_la1_init_0();
    }
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelProverPolynomialPolynomialParser)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "parsePolynomialWithNSString:withJavaUtilSet:", "parsePolynomial", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, "Lgeogebra.common.kernel.prover.polynomial.ParseException;", NULL },
    { "parsePolynomialFactorsWithNSString:withJavaUtilSet:", "parsePolynomialFactors", "Ljava.util.Set;", 0x9, "Lgeogebra.common.kernel.prover.polynomial.ParseException;", NULL },
    { "parseFactoredPolynomialSetWithNSString:withJavaUtilSet:", "parseFactoredPolynomialSet", "Ljava.util.Set;", 0x9, "Lgeogebra.common.kernel.prover.polynomial.ParseException;", NULL },
    { "polynomialFactoredSetStartingPointWithJavaUtilHashMap:", "polynomialFactoredSetStartingPoint", "Ljava.util.Set;", 0x11, "Lgeogebra.common.kernel.prover.polynomial.ParseException;", NULL },
    { "polynomialFactorsStartingPointWithJavaUtilHashMap:", "polynomialFactorsStartingPoint", "Ljava.util.Set;", 0x11, "Lgeogebra.common.kernel.prover.polynomial.ParseException;", NULL },
    { "polynomialStartingPointWithJavaUtilHashMap:", "polynomialStartingPoint", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x11, "Lgeogebra.common.kernel.prover.polynomial.ParseException;", NULL },
    { "polynomialWithJavaUtilHashMap:", "polynomial", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x11, "Lgeogebra.common.kernel.prover.polynomial.ParseException;", NULL },
    { "termWithJavaUtilHashMap:", "term", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x11, "Lgeogebra.common.kernel.prover.polynomial.ParseException;", NULL },
    { "powerWithJavaUtilHashMap:", "power", "Lgeogebra.common.kernel.prover.polynomial.Term;", 0x11, "Lgeogebra.common.kernel.prover.polynomial.ParseException;", NULL },
    { "variableWithJavaUtilHashMap:", "variable", "Lgeogebra.common.kernel.prover.polynomial.Variable;", 0x11, "Lgeogebra.common.kernel.prover.polynomial.ParseException;", NULL },
    { "jj_la1_init_0", NULL, "V", 0xa, NULL, NULL },
    { "initWithJavaIoInputStream:", "PolynomialParser", NULL, 0x1, NULL, NULL },
    { "initWithJavaIoInputStream:withNSString:", "PolynomialParser", NULL, 0x1, NULL, NULL },
    { "ReInitWithJavaIoInputStream:", "ReInit", "V", 0x1, NULL, NULL },
    { "ReInitWithJavaIoInputStream:withNSString:", "ReInit", "V", 0x1, NULL, NULL },
    { "initWithJavaIoReader:", "PolynomialParser", NULL, 0x1, NULL, NULL },
    { "ReInitWithJavaIoReader:", "ReInit", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelProverPolynomialPolynomialParserTokenManager:", "PolynomialParser", NULL, 0x1, NULL, NULL },
    { "ReInitWithGeogebraCommonKernelProverPolynomialPolynomialParserTokenManager:", "ReInit", "V", 0x1, NULL, NULL },
    { "jj_consume_tokenWithInt:", "jj_consume_token", "Lgeogebra.common.kernel.prover.polynomial.Token;", 0x2, "Lgeogebra.common.kernel.prover.polynomial.ParseException;", NULL },
    { "getNextToken", NULL, "Lgeogebra.common.kernel.prover.polynomial.Token;", 0x11, NULL, NULL },
    { "getTokenWithInt:", "getToken", "Lgeogebra.common.kernel.prover.polynomial.Token;", 0x11, NULL, NULL },
    { "jj_ntk", NULL, "I", 0x2, NULL, NULL },
    { "generateParseException", NULL, "Lgeogebra.common.kernel.prover.polynomial.ParseException;", 0x1, NULL, NULL },
    { "enable_tracing", NULL, "V", 0x11, NULL, NULL },
    { "disable_tracing", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "token_source_", NULL, 0x1, "Lgeogebra.common.kernel.prover.polynomial.PolynomialParserTokenManager;", NULL, NULL,  },
    { "jj_input_stream_", NULL, 0x0, "Lgeogebra.common.kernel.prover.polynomial.SimpleCharStream;", NULL, NULL,  },
    { "token_", NULL, 0x1, "Lgeogebra.common.kernel.prover.polynomial.Token;", NULL, NULL,  },
    { "jj_nt_", NULL, 0x1, "Lgeogebra.common.kernel.prover.polynomial.Token;", NULL, NULL,  },
    { "jj_ntk__", "jj_ntk", 0x2, "I", NULL, NULL,  },
    { "jj_gen_", NULL, 0x2, "I", NULL, NULL,  },
    { "jj_la1_", NULL, 0x12, "[I", NULL, NULL,  },
    { "jj_la1_0_", NULL, 0xa, "[I", &GeogebraCommonKernelProverPolynomialPolynomialParser_jj_la1_0_, NULL,  },
    { "jj_expentries_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<L[I;>;",  },
    { "jj_expentry_", NULL, 0x2, "[I", NULL, NULL,  },
    { "jj_kind_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelProverPolynomialPolynomialParser = { 2, "PolynomialParser", "geogebra.common.kernel.prover.polynomial", NULL, 0x1, 26, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelProverPolynomialPolynomialParser;
}

@end

GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomialParser_parsePolynomialWithNSString_withJavaUtilSet_(NSString *string, id<JavaUtilSet> variables) {
  GeogebraCommonKernelProverPolynomialPolynomialParser_initialize();
  id<JavaUtilIterator> variablesIterator = [((id<JavaUtilSet>) nil_chk(variables)) iterator];
  JavaUtilHashMap *variableMap = [new_JavaUtilHashMap_init() autorelease];
  while ([((id<JavaUtilIterator>) nil_chk(variablesIterator)) hasNext]) {
    GeogebraCommonKernelProverPolynomialVariable *variable = [variablesIterator next];
    [variableMap putWithId:[((GeogebraCommonKernelProverPolynomialVariable *) nil_chk(variable)) getName] withId:variable];
  }
  GeogebraCommonKernelProverPolynomialPolynomialParser *parser = [new_GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoReader_([new_JavaIoStringReader_initWithNSString_(string) autorelease]) autorelease];
  return GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialStartingPointWithJavaUtilHashMap_(parser, variableMap);
}

id<JavaUtilSet> GeogebraCommonKernelProverPolynomialPolynomialParser_parsePolynomialFactorsWithNSString_withJavaUtilSet_(NSString *string, id<JavaUtilSet> variables) {
  GeogebraCommonKernelProverPolynomialPolynomialParser_initialize();
  id<JavaUtilIterator> variablesIterator = [((id<JavaUtilSet>) nil_chk(variables)) iterator];
  JavaUtilHashMap *variableMap = [new_JavaUtilHashMap_init() autorelease];
  while ([((id<JavaUtilIterator>) nil_chk(variablesIterator)) hasNext]) {
    GeogebraCommonKernelProverPolynomialVariable *variable = [variablesIterator next];
    [variableMap putWithId:[((GeogebraCommonKernelProverPolynomialVariable *) nil_chk(variable)) getName] withId:variable];
  }
  GeogebraCommonKernelProverPolynomialPolynomialParser *parser = [new_GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoReader_([new_JavaIoStringReader_initWithNSString_(string) autorelease]) autorelease];
  return GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialFactorsStartingPointWithJavaUtilHashMap_(parser, variableMap);
}

id<JavaUtilSet> GeogebraCommonKernelProverPolynomialPolynomialParser_parseFactoredPolynomialSetWithNSString_withJavaUtilSet_(NSString *string, id<JavaUtilSet> variables) {
  GeogebraCommonKernelProverPolynomialPolynomialParser_initialize();
  id<JavaUtilIterator> variablesIterator = [((id<JavaUtilSet>) nil_chk(variables)) iterator];
  JavaUtilHashMap *variableMap = [new_JavaUtilHashMap_init() autorelease];
  while ([((id<JavaUtilIterator>) nil_chk(variablesIterator)) hasNext]) {
    GeogebraCommonKernelProverPolynomialVariable *variable = [variablesIterator next];
    [variableMap putWithId:[((GeogebraCommonKernelProverPolynomialVariable *) nil_chk(variable)) getName] withId:variable];
  }
  GeogebraCommonKernelProverPolynomialPolynomialParser *parser = [new_GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoReader_([new_JavaIoStringReader_initWithNSString_(string) autorelease]) autorelease];
  return GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialFactoredSetStartingPointWithJavaUtilHashMap_(parser, variableMap);
}

id<JavaUtilSet> GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialFactoredSetStartingPointWithJavaUtilHashMap_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaUtilHashMap *variables) {
  id<JavaUtilSet> factoredPolynomials = [new_JavaUtilHashSet_init() autorelease];
  id<JavaUtilSet> factors;
  GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_STARTFACTLIST);
  factors = GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialFactorsStartingPointWithJavaUtilHashMap_(self, variables);
  [factoredPolynomials addWithId:factors];
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelProverPolynomialPolynomialParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelProverPolynomialPolynomialParserConstants_ANYFACTLIST:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 0) = self->jj_gen_;
      goto break_label_1;
    }
    GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_ANYFACTLIST);
    factors = GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialFactorsStartingPointWithJavaUtilHashMap_(self, variables);
    [factoredPolynomials addWithId:factors];
  }
  break_label_1: ;
  {
    return factoredPolynomials;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<JavaUtilSet> GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialFactorsStartingPointWithJavaUtilHashMap_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaUtilHashMap *variables) {
  id<JavaUtilSet> polynomials = [new_JavaUtilHashSet_init() autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *poly;
  GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_STARTFACTLIST);
  while (YES) {
    GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_INDEXPOLY);
    poly = GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialWithJavaUtilHashMap_(self, variables);
    if ([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) isOne]) {
    }
    else [polynomials addWithId:poly];
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelProverPolynomialPolynomialParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelProverPolynomialPolynomialParserConstants_INDEXPOLY:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 1) = self->jj_gen_;
      goto break_label_2;
    }
  }
  break_label_2: ;
  GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_ANYFACTLIST);
  GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_NUMBER);
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelProverPolynomialPolynomialParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelProverPolynomialPolynomialParserConstants_COMMA:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 2) = self->jj_gen_;
      goto break_label_3;
    }
    GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_COMMA);
    GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_NUMBER);
  }
  break_label_3: ;
  {
    return polynomials;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialStartingPointWithJavaUtilHashMap_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaUtilHashMap *variables) {
  GeogebraCommonKernelProverPolynomialPolynomial *p;
  p = GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialWithJavaUtilHashMap_(self, variables);
  {
    return p;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomialParser_polynomialWithJavaUtilHashMap_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaUtilHashMap *variables) {
  GeogebraCommonKernelProverPolynomialPolynomial *poly;
  GeogebraCommonKernelProverPolynomialPolynomial *t;
  poly = GeogebraCommonKernelProverPolynomialPolynomialParser_termWithJavaUtilHashMap_(self, variables);
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelProverPolynomialPolynomialParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelProverPolynomialPolynomialParserConstants_PLUS:
      case GeogebraCommonKernelProverPolynomialPolynomialParserConstants_MINUS:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 3) = self->jj_gen_;
      goto break_label_4;
    }
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelProverPolynomialPolynomialParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelProverPolynomialPolynomialParserConstants_PLUS:
      GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_PLUS);
      t = GeogebraCommonKernelProverPolynomialPolynomialParser_termWithJavaUtilHashMap_(self, variables);
      poly = [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) addWithGeogebraCommonKernelProverPolynomialPolynomial:t];
      break;
      case GeogebraCommonKernelProverPolynomialPolynomialParserConstants_MINUS:
      GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_MINUS);
      t = GeogebraCommonKernelProverPolynomialPolynomialParser_termWithJavaUtilHashMap_(self, variables);
      poly = [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:t];
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 4) = self->jj_gen_;
      GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelProverPolynomialParseException_init() autorelease];
    }
  }
  break_label_4: ;
  {
    return poly;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomialParser_termWithJavaUtilHashMap_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaUtilHashMap *variables) {
  GeogebraCommonKernelProverPolynomialTerm *t = [new_GeogebraCommonKernelProverPolynomialTerm_init() autorelease];
  GeogebraCommonKernelProverPolynomialTerm *singleTerm;
  GeogebraCommonKernelProverPolynomialToken *numberToken;
  jint number = 1;
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelProverPolynomialPolynomialParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelProverPolynomialPolynomialParserConstants_MINUS:
    GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_MINUS);
    number = -1;
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 5) = self->jj_gen_;
    ;
  }
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelProverPolynomialPolynomialParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelProverPolynomialPolynomialParserConstants_NUMBER:
    numberToken = GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_NUMBER);
    number = number * JavaLangInteger_parseIntWithNSString_(((GeogebraCommonKernelProverPolynomialToken *) nil_chk(numberToken))->image_);
    {
      while (YES) {
        switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelProverPolynomialPolynomialParser_jj_ntk(self) : self->jj_ntk__) {
          case GeogebraCommonKernelProverPolynomialPolynomialParserConstants_TIMES:
          ;
          break;
          default:
          *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 6) = self->jj_gen_;
          goto break_label_5;
        }
        GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_TIMES);
        singleTerm = GeogebraCommonKernelProverPolynomialPolynomialParser_powerWithJavaUtilHashMap_(self, variables);
        t = [t timesWithGeogebraCommonKernelProverPolynomialTerm:singleTerm];
      }
      break_label_5: ;
    }
    break;
    case GeogebraCommonKernelProverPolynomialPolynomialParserConstants_VARIABLE:
    singleTerm = GeogebraCommonKernelProverPolynomialPolynomialParser_powerWithJavaUtilHashMap_(self, variables);
    t = [((GeogebraCommonKernelProverPolynomialTerm *) nil_chk(t)) timesWithGeogebraCommonKernelProverPolynomialTerm:singleTerm];
    {
      while (YES) {
        switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelProverPolynomialPolynomialParser_jj_ntk(self) : self->jj_ntk__) {
          case GeogebraCommonKernelProverPolynomialPolynomialParserConstants_TIMES:
          ;
          break;
          default:
          *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 7) = self->jj_gen_;
          goto break_label_6;
        }
        GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_TIMES);
        singleTerm = GeogebraCommonKernelProverPolynomialPolynomialParser_powerWithJavaUtilHashMap_(self, variables);
        t = [((GeogebraCommonKernelProverPolynomialTerm *) nil_chk(t)) timesWithGeogebraCommonKernelProverPolynomialTerm:singleTerm];
      }
      break_label_6: ;
    }
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 8) = self->jj_gen_;
    GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelProverPolynomialParseException_init() autorelease];
  }
  {
    return [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialTerm_(number, t) autorelease];
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelProverPolynomialTerm *GeogebraCommonKernelProverPolynomialPolynomialParser_powerWithJavaUtilHashMap_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaUtilHashMap *variables) {
  GeogebraCommonKernelProverPolynomialVariable *coefficient;
  GeogebraCommonKernelProverPolynomialToken *numberToken;
  jint number = 1;
  coefficient = GeogebraCommonKernelProverPolynomialPolynomialParser_variableWithJavaUtilHashMap_(self, variables);
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelProverPolynomialPolynomialParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelProverPolynomialPolynomialParserConstants_POWER:
    GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_POWER);
    numberToken = GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_NUMBER);
    number = JavaLangInteger_parseIntWithNSString_(((GeogebraCommonKernelProverPolynomialToken *) nil_chk(numberToken))->image_);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 9) = self->jj_gen_;
    ;
  }
  {
    return [new_GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_withInt_(coefficient, number) autorelease];
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelProverPolynomialVariable *GeogebraCommonKernelProverPolynomialPolynomialParser_variableWithJavaUtilHashMap_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaUtilHashMap *variables) {
  GeogebraCommonKernelProverPolynomialToken *variable;
  GeogebraCommonKernelProverPolynomialVariable *var;
  variable = GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelProverPolynomialPolynomialParserConstants_VARIABLE);
  if ((var = [((JavaUtilHashMap *) nil_chk(variables)) getWithId:[((GeogebraCommonKernelProverPolynomialToken *) nil_chk(variable)) description]]) != nil) {
    return var;
  }
  {
    @throw [new_GeogebraCommonKernelProverPolynomialParseException_init() autorelease];
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

void GeogebraCommonKernelProverPolynomialPolynomialParser_jj_la1_init_0() {
  GeogebraCommonKernelProverPolynomialPolynomialParser_initialize();
  JreStrongAssignAndConsume(&GeogebraCommonKernelProverPolynomialPolynomialParser_jj_la1_0_, nil, [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x100, (jint) 0x200, (jint) 0x400, (jint) 0x1800, (jint) 0x1800, (jint) 0x1000, (jint) 0x2000, (jint) 0x2000, (jint) 0x60, (jint) 0x4000 } count:10]);
}

void GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoInputStream_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaIoInputStream *stream) {
  GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoInputStream_withNSString_(self, stream, nil);
}

GeogebraCommonKernelProverPolynomialPolynomialParser *new_GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoInputStream_(JavaIoInputStream *stream) {
  GeogebraCommonKernelProverPolynomialPolynomialParser *self = [GeogebraCommonKernelProverPolynomialPolynomialParser alloc];
  GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoInputStream_(self, stream);
  return self;
}

void GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoInputStream_withNSString_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaIoInputStream *stream, NSString *encoding) {
  NSObject_init(self);
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_jj_la1_(self, [IOSIntArray newArrayWithLength:10]);
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_jj_expentries_(self, new_JavaUtilArrayList_init());
  self->jj_kind_ = -1;
  @try {
    GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_jj_input_stream_(self, new_GeogebraCommonKernelProverPolynomialSimpleCharStream_initWithJavaIoInputStream_withNSString_withInt_withInt_(stream, encoding, 1, 1));
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [new_JavaLangRuntimeException_initWithJavaLangThrowable_(e) autorelease];
  }
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_token_source_(self, new_GeogebraCommonKernelProverPolynomialPolynomialParserTokenManager_initWithGeogebraCommonKernelProverPolynomialSimpleCharStream_(self->jj_input_stream_));
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_token_(self, new_GeogebraCommonKernelProverPolynomialToken_init());
  self->jj_ntk__ = -1;
  self->jj_gen_ = 0;
  for (jint i = 0; i < 10; i++) *IOSIntArray_GetRef(self->jj_la1_, i) = -1;
}

GeogebraCommonKernelProverPolynomialPolynomialParser *new_GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoInputStream_withNSString_(JavaIoInputStream *stream, NSString *encoding) {
  GeogebraCommonKernelProverPolynomialPolynomialParser *self = [GeogebraCommonKernelProverPolynomialPolynomialParser alloc];
  GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoInputStream_withNSString_(self, stream, encoding);
  return self;
}

void GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoReader_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, JavaIoReader *stream) {
  NSObject_init(self);
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_jj_la1_(self, [IOSIntArray newArrayWithLength:10]);
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_jj_expentries_(self, new_JavaUtilArrayList_init());
  self->jj_kind_ = -1;
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_jj_input_stream_(self, new_GeogebraCommonKernelProverPolynomialSimpleCharStream_initWithJavaIoReader_withInt_withInt_(stream, 1, 1));
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_token_source_(self, new_GeogebraCommonKernelProverPolynomialPolynomialParserTokenManager_initWithGeogebraCommonKernelProverPolynomialSimpleCharStream_(self->jj_input_stream_));
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_token_(self, new_GeogebraCommonKernelProverPolynomialToken_init());
  self->jj_ntk__ = -1;
  self->jj_gen_ = 0;
  for (jint i = 0; i < 10; i++) *IOSIntArray_GetRef(self->jj_la1_, i) = -1;
}

GeogebraCommonKernelProverPolynomialPolynomialParser *new_GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoReader_(JavaIoReader *stream) {
  GeogebraCommonKernelProverPolynomialPolynomialParser *self = [GeogebraCommonKernelProverPolynomialPolynomialParser alloc];
  GeogebraCommonKernelProverPolynomialPolynomialParser_initWithJavaIoReader_(self, stream);
  return self;
}

void GeogebraCommonKernelProverPolynomialPolynomialParser_initWithGeogebraCommonKernelProverPolynomialPolynomialParserTokenManager_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, GeogebraCommonKernelProverPolynomialPolynomialParserTokenManager *tm) {
  NSObject_init(self);
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_jj_la1_(self, [IOSIntArray newArrayWithLength:10]);
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_jj_expentries_(self, new_JavaUtilArrayList_init());
  self->jj_kind_ = -1;
  GeogebraCommonKernelProverPolynomialPolynomialParser_set_token_source_(self, tm);
  GeogebraCommonKernelProverPolynomialPolynomialParser_setAndConsume_token_(self, new_GeogebraCommonKernelProverPolynomialToken_init());
  self->jj_ntk__ = -1;
  self->jj_gen_ = 0;
  for (jint i = 0; i < 10; i++) *IOSIntArray_GetRef(self->jj_la1_, i) = -1;
}

GeogebraCommonKernelProverPolynomialPolynomialParser *new_GeogebraCommonKernelProverPolynomialPolynomialParser_initWithGeogebraCommonKernelProverPolynomialPolynomialParserTokenManager_(GeogebraCommonKernelProverPolynomialPolynomialParserTokenManager *tm) {
  GeogebraCommonKernelProverPolynomialPolynomialParser *self = [GeogebraCommonKernelProverPolynomialPolynomialParser alloc];
  GeogebraCommonKernelProverPolynomialPolynomialParser_initWithGeogebraCommonKernelProverPolynomialPolynomialParserTokenManager_(self, tm);
  return self;
}

GeogebraCommonKernelProverPolynomialToken *GeogebraCommonKernelProverPolynomialPolynomialParser_jj_consume_tokenWithInt_(GeogebraCommonKernelProverPolynomialPolynomialParser *self, jint kind) {
  GeogebraCommonKernelProverPolynomialToken *oldToken;
  if ((oldToken = self->token_)->next_ != nil) GeogebraCommonKernelProverPolynomialPolynomialParser_set_token_(self, ((GeogebraCommonKernelProverPolynomialToken *) nil_chk(self->token_))->next_);
  else GeogebraCommonKernelProverPolynomialPolynomialParser_set_token_(self, GeogebraCommonKernelProverPolynomialToken_set_next_(nil_chk(self->token_), [((GeogebraCommonKernelProverPolynomialPolynomialParserTokenManager *) nil_chk(self->token_source_)) getNextToken]));
  self->jj_ntk__ = -1;
  if (((GeogebraCommonKernelProverPolynomialToken *) nil_chk(self->token_))->kind_ == kind) {
    self->jj_gen_++;
    return self->token_;
  }
  GeogebraCommonKernelProverPolynomialPolynomialParser_set_token_(self, oldToken);
  self->jj_kind_ = kind;
  @throw [self generateParseException];
}

jint GeogebraCommonKernelProverPolynomialPolynomialParser_jj_ntk(GeogebraCommonKernelProverPolynomialPolynomialParser *self) {
  if ((GeogebraCommonKernelProverPolynomialPolynomialParser_set_jj_nt_(self, ((GeogebraCommonKernelProverPolynomialToken *) nil_chk(self->token_))->next_)) == nil) return (self->jj_ntk__ = (GeogebraCommonKernelProverPolynomialToken_set_next_(self->token_, [((GeogebraCommonKernelProverPolynomialPolynomialParserTokenManager *) nil_chk(self->token_source_)) getNextToken]))->kind_);
  else return (self->jj_ntk__ = ((GeogebraCommonKernelProverPolynomialToken *) nil_chk(self->jj_nt_))->kind_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelProverPolynomialPolynomialParser)
