//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/parser/cashandlers/CommandDispatcherGiac.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/CASException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/GetItem.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/MyNumberPair.h"
#include "geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/arithmetic3D/MyVec3DNode.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/parser/cashandlers/CommandDispatcherGiac.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"

@interface GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum () {
 @public
  GeogebraCommonPluginOperationEnum *op_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum, op_, GeogebraCommonPluginOperationEnum *)

__attribute__((unused)) static void GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum *self, GeogebraCommonPluginOperationEnum *op, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum *new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum *op, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation GeogebraCommonKernelParserCashandlersCommandDispatcherGiac

+ (GeogebraCommonKernelArithmeticExpressionNode *)processCommandWithNSString:(NSString *)cmdName
                                   withGeogebraCommonKernelArithmeticGetItem:(id<GeogebraCommonKernelArithmeticGetItem>)args
                                              withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  return GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_processCommandWithNSString_withGeogebraCommonKernelArithmeticGetItem_withGeogebraCommonKernelKernel_(cmdName, args, kernel);
}

- (instancetype)init {
  GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processCommandWithNSString:withGeogebraCommonKernelArithmeticGetItem:withGeogebraCommonKernelKernel:", "processCommand", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelParserCashandlersCommandDispatcherGiac = { 2, "CommandDispatcherGiac", "geogebra.common.kernel.parser.cashandlers", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac;
}

@end

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_processCommandWithNSString_withGeogebraCommonKernelArithmeticGetItem_withGeogebraCommonKernelKernel_(NSString *cmdName, id<GeogebraCommonKernelArithmeticGetItem> args, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_initialize();
  @try {
    id<GeogebraCommonKernelArithmeticExpressionValue> ret = nil;
    {
      GeogebraCommonKernelArithmeticValidExpression *vec;
      switch ([GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_valueOfWithNSString_(cmdName) ordinal]) {
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_sum:
        ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_GeogebraCommonKernelArithmeticMyNumberPair_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [((id<GeogebraCommonKernelArithmeticGetItem>) nil_chk(args)) getItemWithInt:0], [args getItemWithInt:1]) autorelease], GeogebraCommonPluginOperationEnum_get_SUM(), [new_GeogebraCommonKernelArithmeticMyNumberPair_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:2], [args getItemWithInt:3]) autorelease]) autorelease];
        break;
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_piecewise:
        ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_GeogebraCommonKernelArithmeticMyNumberPair_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [((id<GeogebraCommonKernelArithmeticGetItem>) nil_chk(args)) getItemWithInt:0], [args getItemWithInt:1]) autorelease], GeogebraCommonPluginOperationEnum_get_IF_ELSE(), [args getItemWithInt:2]) autorelease];
        break;
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_exact:
        ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [((id<GeogebraCommonKernelArithmeticGetItem>) nil_chk(args)) getItemWithInt:0]) autorelease];
        break;
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_Psi:
        if ([((id<GeogebraCommonKernelArithmeticGetItem>) nil_chk(args)) getLength] == 1) {
          ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], GeogebraCommonPluginOperationEnum_get_PSI(), nil) autorelease];
        }
        else {
          ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:1], GeogebraCommonPluginOperationEnum_get_POLYGAMMA(), [args getItemWithInt:0]) autorelease];
        }
        break;
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_point:
        {
          jdouble a;
          jdouble b;
          jdouble c;
          GeogebraCommonKernelGeosGeoElement *point;
          switch ([((id<GeogebraCommonKernelArithmeticGetItem>) nil_chk(args)) getLength]) {
            case 2:
            a = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([args getItemWithInt:0])) evaluateDouble];
            b = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([args getItemWithInt:1])) evaluateDouble];
            return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction], a, b, 1) autorelease]) autorelease];
            case 3:
            a = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([args getItemWithInt:0])) evaluateDouble];
            b = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([args getItemWithInt:1])) evaluateDouble];
            c = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([args getItemWithInt:2])) evaluateDouble];
            point = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getManager3D])) Point3DWithNSString:nil withDouble:a withDouble:b withDouble:c withBoolean:NO];
            return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, point) autorelease];
            default:
            @throw [new_GeogebraCommonKernelCASException_initWithNSString_(JreStrcat("$I", @"Giac: bad number of args for point(): ", [args getLength])) autorelease];
          }
        }
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_hyperplan:
        {
          id<GeogebraCommonKernelArithmeticExpressionValue> item0;
          id<GeogebraCommonKernelArithmeticExpressionValue> item1;
          GeogebraCommonKernelArithmeticMyList *list1;
          jdouble a;
          jdouble b;
          jdouble c;
          jdouble constant;
          GeogebraCommonKernelArithmeticExpressionNode *expX;
          GeogebraCommonKernelArithmeticExpressionNode *expY;
          GeogebraCommonKernelArithmeticExpressionNode *expZ;
          GeogebraCommonKernelArithmeticExpressionNode *rhs;
          GeogebraCommonKernelArithmeticExpressionNode *sum;
          GeogebraCommonKernelArithmeticEquation *eq;
          switch ([((id<GeogebraCommonKernelArithmeticGetItem>) nil_chk(args)) getLength]) {
            case 2:
            item0 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([args getItemWithInt:0])) unwrap];
            item1 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([args getItemWithInt:1])) unwrap];
            if (!([item0 isKindOfClass:[GeogebraCommonKernelArithmeticMyList class]])) {
              GeogebraCommonUtilDebugLog_errorWithNSString_(JreStrcat("$@", @"wrong class: ", [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(item0)) getClass]));
              return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel, JavaLangDouble_NaN) autorelease];
            }
            list1 = (GeogebraCommonKernelArithmeticMyList *) check_class_cast(item0, [GeogebraCommonKernelArithmeticMyList class]);
            a = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticMyList *) nil_chk(list1)) getListElementWithInt:0])) evaluateDouble];
            b = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list1 getListElementWithInt:1])) evaluateDouble];
            c = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list1 getListElementWithInt:2])) evaluateDouble];
            if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(item1)) isGeoElement] && [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(item1, [GeogebraCommonKernelGeosGeoElement class])) isGeoPoint]) {
              id<GeogebraCommonKernelKernelNDGeoPointND> point = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(item1, @protocol(GeogebraCommonKernelKernelNDGeoPointND));
              GeogebraCommonKernelMatrixCoords *coords = [point getInhomCoordsInD3];
              constant = a * [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getWithInt:1] + b * [coords getWithInt:2] + c * [coords getWithInt:3];
            }
            else if ([item1 isKindOfClass:[GeogebraCommonKernelArithmeticMyList class]]) {
              GeogebraCommonKernelArithmeticMyList *list2 = (GeogebraCommonKernelArithmeticMyList *) check_class_cast(item1, [GeogebraCommonKernelArithmeticMyList class]);
              jdouble d = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list2 getListElementWithInt:0])) evaluateDouble];
              jdouble e = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list2 getListElementWithInt:1])) evaluateDouble];
              jdouble f = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([list2 getListElementWithInt:2])) evaluateDouble];
              if (f != 0) {
                constant = f * c;
              }
              else if (e != 0) {
                constant = e * b;
              }
              else {
                constant = d * a;
              }
            }
            else {
              GeogebraCommonUtilDebugLog_errorWithNSString_(JreStrcat("$@", @"wrong class: ", [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(item0)) getClass]));
              return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel, JavaLangDouble_NaN) autorelease];
            }
            expX = [((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel, @"x") autorelease]) autorelease]) multiplyWithDouble:a];
            expY = [((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel, @"y") autorelease]) autorelease]) multiplyWithDouble:b];
            expZ = [((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel, @"z") autorelease]) autorelease]) multiplyWithDouble:c];
            rhs = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, constant) autorelease]) autorelease];
            sum = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expX)) plusWithGeogebraCommonKernelArithmeticExpressionValue:expY])) plusWithGeogebraCommonKernelArithmeticExpressionValue:expZ];
            eq = [new_GeogebraCommonKernelArithmeticEquation_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, sum, rhs) autorelease];
            return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, eq) autorelease];
            default:
            @throw [new_GeogebraCommonKernelCASException_initWithNSString_(JreStrcat("$I", @"Giac: bad number of args for hyperplan(): ", [args getLength])) autorelease];
          }
        }
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_ggbvect:
        switch ([((id<GeogebraCommonKernelArithmeticGetItem>) nil_chk(args)) getLength]) {
          case 2:
          vec = [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], [args getItemWithInt:1]) autorelease];
          [((GeogebraCommonKernelArithmeticMyVecNode *) check_class_cast(vec, [GeogebraCommonKernelArithmeticMyVecNode class])) setCASVector];
          break;
          case 3:
          vec = [new_GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], [args getItemWithInt:1], [args getItemWithInt:2]) autorelease];
          [((GeogebraCommonKernelArithmetic3DMyVec3DNode *) check_class_cast(vec, [GeogebraCommonKernelArithmetic3DMyVec3DNode class])) setCASVector];
          break;
          default:
          @throw [new_GeogebraCommonKernelCASException_initWithNSString_(JreStrcat("$I", @"Giac: bad number of args for ggbvect(): ", [args getLength])) autorelease];
        }
        ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, vec, GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
        break;
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_arbint:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_arbconst:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_Ci:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_Si:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_Ei:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_Zeta:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_fPart:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_Gamma:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_conj:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_re:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_im:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_sin:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_cos:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_tan:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_asin:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_acos:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_atan:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_sinh:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_cosh:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_tanh:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_sec:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_csc:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_cot:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_ln:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_exp:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_erf:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_abs:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_xcoord:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_ycoord:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_zcoord:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_xcoordsymb:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_ycoordsymb:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_zcoordsymb:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_sqrt:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_sign:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_floor:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_ceiling:
        if ([((id<GeogebraCommonKernelArithmeticGetItem>) nil_chk(args)) getLength] != 1) {
          ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel, JavaLangDouble_NaN) autorelease];
        }
        else {
          ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], [((GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum *) nil_chk(GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_valueOfWithNSString_(cmdName))) getOperation], nil) autorelease];
        }
        break;
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_ggb_ang:
        ret = [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_(kernel) autorelease];
        [((GeogebraCommonKernelArithmeticMyVecNode *) check_class_cast(ret, [GeogebraCommonKernelArithmeticMyVecNode class])) setPolarCoordsWithGeogebraCommonKernelArithmeticExpressionValue:[((id<GeogebraCommonKernelArithmeticGetItem>) nil_chk(args)) getItemWithInt:0] withGeogebraCommonKernelArithmeticExpressionValue:[args getItemWithInt:1]];
        break;
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_igamma:
        if ([((id<GeogebraCommonKernelArithmeticGetItem>) nil_chk(args)) getLength] == 2) {
          ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], GeogebraCommonPluginOperationEnum_get_GAMMA_INCOMPLETE(), [args getItemWithInt:1]) autorelease];
        }
        else {
          ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], GeogebraCommonPluginOperationEnum_get_GAMMA_INCOMPLETE_REGULARIZED(), [args getItemWithInt:1]) autorelease];
        }
        break;
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_when:
        if ([((id<GeogebraCommonKernelArithmeticGetItem>) nil_chk(args)) getLength] == 2) {
          ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], GeogebraCommonPluginOperationEnum_get_IF(), [args getItemWithInt:1]) autorelease];
        }
        else if ([args getLength] == 3) {
          id<GeogebraCommonKernelArithmeticExpressionValue> Else = [args getItemWithInt:2];
          if ([@"?" isEqual:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(Else)) description]]) {
            ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], GeogebraCommonPluginOperationEnum_get_IF(), [args getItemWithInt:1]) autorelease];
          }
          else {
            ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], GeogebraCommonPluginOperationEnum_get_IF_ELSE(), [new_GeogebraCommonKernelArithmeticMyNumberPair_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:1], Else) autorelease]) autorelease];
          }
        }
        else {
          @throw [new_GeogebraCommonKernelCASException_initWithNSString_(JreStrcat("$I", @"Giac: bad number of args for when:", [args getLength])) autorelease];
        }
        break;
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_surd:
        if ([((id<GeogebraCommonKernelArithmeticGetItem>) nil_chk(args)) getLength] == 2) {
          id<GeogebraCommonKernelArithmeticExpressionValue> arg1 = [args getItemWithInt:1];
          jdouble arg1Num = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(arg1)) evaluateDouble];
          if (arg1Num == 3) {
            ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], GeogebraCommonPluginOperationEnum_get_CBRT(), nil) autorelease];
          }
          else if (arg1Num == 2) {
            ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], GeogebraCommonPluginOperationEnum_get_SQRT(), nil) autorelease];
          }
          else {
            ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], GeogebraCommonPluginOperationEnum_get_NROOT(), arg1) autorelease];
          }
        }
        else {
          @throw [new_GeogebraCommonKernelCASException_initWithNSString_(JreStrcat("$I", @"Giac: bad number of args for surd:", [args getLength])) autorelease];
        }
        break;
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_Beta:
        {
          GeogebraCommonKernelArithmeticMyNumberPair *np;
          switch ([((id<GeogebraCommonKernelArithmeticGetItem>) nil_chk(args)) getLength]) {
            default:
            @throw [new_GeogebraCommonKernelCASException_initWithNSString_(JreStrcat("$I", @"Giac: bad number of args for beta:", [args getLength])) autorelease];
            case 2:
            ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], GeogebraCommonPluginOperationEnum_get_BETA(), [args getItemWithInt:1]) autorelease];
            break;
            case 3:
            np = [new_GeogebraCommonKernelArithmeticMyNumberPair_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:1], [args getItemWithInt:2]) autorelease];
            ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], GeogebraCommonPluginOperationEnum_get_BETA_INCOMPLETE(), np) autorelease];
            break;
            case 4:
            np = [new_GeogebraCommonKernelArithmeticMyNumberPair_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:1], [args getItemWithInt:2]) autorelease];
            ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], GeogebraCommonPluginOperationEnum_get_BETA_INCOMPLETE_REGULARIZED(), np) autorelease];
            break;
          }
        }
        break;
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_rootof:
        GeogebraCommonUtilDebugLog_warnWithNSString_(@"'rootof()' returned from giac");
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_laplace:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_ilaplace:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_invlaplace:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_fsolve:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_solve:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_poly1:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_integrate:
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_bounded_function:
        ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel, JavaLangDouble_NaN) autorelease];
        break;
        case GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commands_diff:
        if ([((id<GeogebraCommonKernelArithmeticGetItem>) nil_chk(args)) getLength] == 3 && ![@"1" isEqual:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([args getItemWithInt:2])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_giacTemplate_()]]) {
          return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_GeogebraCommonKernelArithmeticMyNumberPair_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], [args getItemWithInt:1]) autorelease], GeogebraCommonPluginOperationEnum_get_DIFF(), [args getItemWithInt:2]) autorelease];
        }
        ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [args getItemWithInt:0], GeogebraCommonPluginOperationEnum_get_DIFF(), [args getItemWithInt:1]) autorelease];
        break;
      }
    }
    if (ret == nil || [ret isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
      return (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [GeogebraCommonKernelArithmeticExpressionNode class]);
    }
    return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, ret) autorelease];
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$$@", @"CommandDispatcherGiac: error when processing command: ", cmdName, @", ", args));
  }
  return nil;
}

void GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_init(GeogebraCommonKernelParserCashandlersCommandDispatcherGiac *self) {
  NSObject_init(self);
}

GeogebraCommonKernelParserCashandlersCommandDispatcherGiac *new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_init() {
  GeogebraCommonKernelParserCashandlersCommandDispatcherGiac *self = [GeogebraCommonKernelParserCashandlersCommandDispatcherGiac alloc];
  GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelParserCashandlersCommandDispatcherGiac)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum)

GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum *GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_values_[59];

@implementation GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum

- (instancetype)initWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)op
                                             withNSString:(NSString *)__name
                                                  withInt:(jint)__ordinal {
  GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(self, op, __name, __ordinal);
  return self;
}

- (GeogebraCommonPluginOperationEnum *)getOperation {
  return op_;
}

IOSObjectArray *GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_values() {
  GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_values_ count:59 type:GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_values();
}

+ (GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum *GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initialize();
  for (int i = 0; i < 59; i++) {
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum *e = GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum class]) {
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_when = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"when", 0);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_igamma = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"igamma", 1);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_diff = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_DERIVATIVE(), @"diff", 2);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_bounded_function = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"bounded_function", 3);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_integrate = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_INTEGRAL(), @"integrate", 4);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_rootof = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"rootof", 5);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_exact = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"exact", 6);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_Psi = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_PSI(), @"Psi", 7);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_Si = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_SI(), @"Si", 8);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_Ci = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_CI(), @"Ci", 9);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_Ei = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_EI(), @"Ei", 10);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_Zeta = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_ZETA(), @"Zeta", 11);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_Beta = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"Beta", 12);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_Gamma = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_GAMMA(), @"Gamma", 13);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_fPart = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_FRACTIONAL_PART(), @"fPart", 14);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_conj = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_CONJUGATE(), @"conj", 15);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_im = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_IMAGINARY(), @"im", 16);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_re = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_REAL(), @"re", 17);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_surd = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NROOT(), @"surd", 18);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_sqrt = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_SQRT(), @"sqrt", 19);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_sign = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_SGN(), @"sign", 20);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_sin = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_SIN(), @"sin", 21);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_cos = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_COS(), @"cos", 22);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_tan = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_TAN(), @"tan", 23);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_asin = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_ARCSIN(), @"asin", 24);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_acos = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_ARCCOS(), @"acos", 25);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_atan = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_ARCTAN(), @"atan", 26);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_sinh = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_SINH(), @"sinh", 27);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_cosh = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_COSH(), @"cosh", 28);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_tanh = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_TANH(), @"tanh", 29);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_sec = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_SEC(), @"sec", 30);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_csc = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_CSC(), @"csc", 31);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_cot = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_COT(), @"cot", 32);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_ln = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_LOG(), @"ln", 33);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_exp = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_EXP(), @"exp", 34);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_abs = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_ABS(), @"abs", 35);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_erf = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_ERF(), @"erf", 36);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_xcoord = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_XCOORD(), @"xcoord", 37);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_ycoord = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_YCOORD(), @"ycoord", 38);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_zcoord = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_ZCOORD(), @"zcoord", 39);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_xcoordsymb = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_XCOORD(), @"xcoordsymb", 40);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_ycoordsymb = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_YCOORD(), @"ycoordsymb", 41);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_zcoordsymb = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_ZCOORD(), @"zcoordsymb", 42);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_ggbvect = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"ggbvect", 43);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_sum = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_SUM(), @"sum", 44);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_piecewise = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_IF_ELSE(), @"piecewise", 45);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_point = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"point", 46);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_hyperplan = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"hyperplan", 47);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_laplace = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"laplace", 48);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_ilaplace = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"ilaplace", 49);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_invlaplace = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"invlaplace", 50);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_ggb_ang = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"ggb_ang", 51);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_poly1 = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"poly1", 52);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_fsolve = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"fsolve", 53);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_solve = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), @"solve", 54);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_arbconst = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_ARBCONST(), @"arbconst", 55);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_arbint = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_ARBINT(), @"arbint", 56);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_floor = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_FLOOR(), @"floor", 57);
    GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_ceiling = new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum_get_CEIL(), @"ceiling", 58);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getOperation", NULL, "Lgeogebra.common.plugin.Operation;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "when", "when", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_when, NULL,  },
    { "igamma", "igamma", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_igamma, NULL,  },
    { "diff", "diff", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_diff, NULL,  },
    { "bounded_function", "bounded_function", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_bounded_function, NULL,  },
    { "integrate", "integrate", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_integrate, NULL,  },
    { "rootof", "rootof", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_rootof, NULL,  },
    { "exact", "exact", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_exact, NULL,  },
    { "Psi", "Psi", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_Psi, NULL,  },
    { "Si", "Si", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_Si, NULL,  },
    { "Ci", "Ci", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_Ci, NULL,  },
    { "Ei", "Ei", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_Ei, NULL,  },
    { "Zeta", "Zeta", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_Zeta, NULL,  },
    { "Beta", "Beta", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_Beta, NULL,  },
    { "Gamma", "Gamma", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_Gamma, NULL,  },
    { "fPart", "fPart", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_fPart, NULL,  },
    { "conj", "conj", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_conj, NULL,  },
    { "im", "im", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_im, NULL,  },
    { "re", "re", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_re, NULL,  },
    { "surd", "surd", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_surd, NULL,  },
    { "sqrt", "sqrt", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_sqrt, NULL,  },
    { "sign", "sign", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_sign, NULL,  },
    { "sin", "sin", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_sin, NULL,  },
    { "cos", "cos", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_cos, NULL,  },
    { "tan", "tan", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_tan, NULL,  },
    { "asin", "asin", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_asin, NULL,  },
    { "acos", "acos", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_acos, NULL,  },
    { "atan", "atan", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_atan, NULL,  },
    { "sinh", "sinh", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_sinh, NULL,  },
    { "cosh", "cosh", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_cosh, NULL,  },
    { "tanh", "tanh", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_tanh, NULL,  },
    { "sec", "sec", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_sec, NULL,  },
    { "csc", "csc", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_csc, NULL,  },
    { "cot", "cot", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_cot, NULL,  },
    { "ln", "ln", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_ln, NULL,  },
    { "exp", "exp", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_exp, NULL,  },
    { "abs", "abs", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_abs, NULL,  },
    { "erf", "erf", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_erf, NULL,  },
    { "xcoord", "xcoord", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_xcoord, NULL,  },
    { "ycoord", "ycoord", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_ycoord, NULL,  },
    { "zcoord", "zcoord", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_zcoord, NULL,  },
    { "xcoordsymb", "xcoordsymb", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_xcoordsymb, NULL,  },
    { "ycoordsymb", "ycoordsymb", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_ycoordsymb, NULL,  },
    { "zcoordsymb", "zcoordsymb", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_zcoordsymb, NULL,  },
    { "ggbvect", "ggbvect", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_ggbvect, NULL,  },
    { "sum", "sum", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_sum, NULL,  },
    { "piecewise", "piecewise", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_piecewise, NULL,  },
    { "point", "point", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_point, NULL,  },
    { "hyperplan", "hyperplan", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_hyperplan, NULL,  },
    { "laplace", "laplace", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_laplace, NULL,  },
    { "ilaplace", "ilaplace", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_ilaplace, NULL,  },
    { "invlaplace", "invlaplace", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_invlaplace, NULL,  },
    { "ggb_ang", "ggb_ang", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_ggb_ang, NULL,  },
    { "poly1", "poly1", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_poly1, NULL,  },
    { "fsolve", "fsolve", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_fsolve, NULL,  },
    { "solve", "solve", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_solve, NULL,  },
    { "arbconst", "arbconst", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_arbconst, NULL,  },
    { "arbint", "arbint", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_arbint, NULL,  },
    { "floor", "floor", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_floor, NULL,  },
    { "ceiling", "ceiling", 0x4019, "Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;", &GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_ceiling, NULL,  },
    { "op_", NULL, 0x2, "Lgeogebra.common.plugin.Operation;", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.parser.cashandlers.CommandDispatcherGiac$commands;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum = { 2, "commands", "geogebra.common.kernel.parser.cashandlers", "CommandDispatcherGiac", 0x4019, 1, methods, 60, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/parser/cashandlers/CommandDispatcherGiac$commands;>;" };
  return &_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum;
}

@end

void GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum *self, GeogebraCommonPluginOperationEnum *op, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_set_op_(self, op);
}

GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum *new_GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(GeogebraCommonPluginOperationEnum *op, NSString *__name, jint __ordinal) {
  GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum *self = [GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum alloc];
  GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum_initWithGeogebraCommonPluginOperationEnum_withNSString_withInt_(self, op, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_commandsEnum)
