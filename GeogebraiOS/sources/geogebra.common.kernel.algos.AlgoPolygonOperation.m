//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoPolygonOperation.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/LinearRing.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/geom/impl/CoordinateArraySequence.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/ConstructionDefaults.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "geogebra/common/kernel/algos/AlgoPolygonOperation.h"
#include "geogebra/common/kernel/algos/PolyOperation.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelAlgosAlgoPolygonOperation () {
 @public
  GeogebraCommonKernelGeosGeoPolygon *inPoly0_;
  GeogebraCommonKernelGeosGeoPolygon *inPoly1_;
  GeogebraCommonKernelGeosGeoPolygon *poly_;
  IOSObjectArray *points_;
  GeogebraCommonKernelAlgosPolyOperationEnum *operationType_;
  jboolean labelPointsAndSegments_;
  jboolean labelsNeedIniting_;
}

- (void)setOutput;

- (void)updateSegmentsAndPointsLabels;

- (void)updatePointsArrayWithInt:(jint)n;

- (void)removePointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)oldPoint;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolygonOperation, inPoly0_, GeogebraCommonKernelGeosGeoPolygon *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolygonOperation, inPoly1_, GeogebraCommonKernelGeosGeoPolygon *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolygonOperation, poly_, GeogebraCommonKernelGeosGeoPolygon *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolygonOperation, points_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolygonOperation, operationType_, GeogebraCommonKernelAlgosPolyOperationEnum *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolygonOperation_compute(GeogebraCommonKernelAlgosAlgoPolygonOperation *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolygonOperation_updateSegmentsAndPointsLabels(GeogebraCommonKernelAlgosAlgoPolygonOperation *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolygonOperation_updatePointsArrayWithInt_(GeogebraCommonKernelAlgosAlgoPolygonOperation *self, jint n);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolygonOperation_removePointWithGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoPolygonOperation *self, GeogebraCommonKernelGeosGeoPoint *oldPoint);

@implementation GeogebraCommonKernelAlgosAlgoPolygonOperation

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)inPoly0
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)inPoly1
          withGeogebraCommonKernelAlgosPolyOperationEnum:(GeogebraCommonKernelAlgosPolyOperationEnum *)operationType {
  GeogebraCommonKernelAlgosAlgoPolygonOperation_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelAlgosPolyOperationEnum_(self, cons, labels, inPoly0, inPoly1, operationType);
  return self;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inPoly0_);
  IOSObjectArray_Set(input_, 1, inPoly1_);
  for (jint i = 0; i < input_->size_; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) addAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  }
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) addToAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:self];
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:poly_];
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  [cons_ addToAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:self];
}

- (void)setOutput {
  if (points_ == nil) return;
  if (!labelPointsAndSegments_) {
    [super setOutputLengthWithInt:1];
    [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:poly_];
  }
  else {
    IOSObjectArray *segments = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) getSegments];
    IOSObjectArray *pts = [poly_ getPoints];
    jint size = 1 + ((IOSObjectArray *) nil_chk(segments))->size_ + ((IOSObjectArray *) nil_chk(pts))->size_;
    [super setOutputLengthWithInt:size];
    jint k = 0;
    [super setOutputWithInt:k withGeogebraCommonKernelGeosGeoElement:poly_];
    for (jint i = 0; i < segments->size_; i++) {
      [super setOutputWithInt:++k withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(segments, i), [GeogebraCommonKernelGeosGeoElement class])];
    }
    for (jint i = 0; i < pts->size_; i++) {
      [super setOutputWithInt:++k withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(pts, i), [GeogebraCommonKernelGeosGeoElement class])];
    }
  }
}

- (GeogebraCommonKernelGeosGeoPolygon *)getPoly {
  return poly_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoPolygonOperation_compute(self);
}

- (void)updateSegmentsAndPointsLabels {
  GeogebraCommonKernelAlgosAlgoPolygonOperation_updateSegmentsAndPointsLabels(self);
}

- (void)updatePointsArrayWithInt:(jint)n {
  GeogebraCommonKernelAlgosAlgoPolygonOperation_updatePointsArrayWithInt_(self, n);
}

- (void)removePointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)oldPoint {
  GeogebraCommonKernelAlgosAlgoPolygonOperation_removePointWithGeogebraCommonKernelGeosGeoPoint_(self, oldPoint);
}

- (void)dealloc {
  RELEASE_(inPoly0_);
  RELEASE_(inPoly1_);
  RELEASE_(poly_);
  RELEASE_(points_);
  RELEASE_(operationType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelAlgosPolyOperationEnum:", "AlgoPolygonOperation", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "setOutput", NULL, "V", 0x2, NULL, NULL },
    { "getPoly", NULL, "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "updateSegmentsAndPointsLabels", NULL, "V", 0x2, NULL, NULL },
    { "updatePointsArrayWithInt:", "updatePointsArray", "V", 0x2, NULL, NULL },
    { "removePointWithGeogebraCommonKernelGeosGeoPoint:", "removePoint", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inPoly0_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "inPoly1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "poly_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "points_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "operationType_", NULL, 0x2, "Lgeogebra.common.kernel.algos.PolyOperation;", NULL, NULL,  },
    { "labelPointsAndSegments_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelsNeedIniting_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoPolygonOperation = { 2, "AlgoPolygonOperation", "geogebra.common.kernel.algos", NULL, 0x401, 8, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoPolygonOperation;
}

@end

void GeogebraCommonKernelAlgosAlgoPolygonOperation_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelAlgosPolyOperationEnum_(GeogebraCommonKernelAlgosAlgoPolygonOperation *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoPolygon *inPoly0, GeogebraCommonKernelGeosGeoPolygon *inPoly1, GeogebraCommonKernelAlgosPolyOperationEnum *operationType) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoPolygonOperation_set_operationType_(self, operationType);
  GeogebraCommonKernelAlgosAlgoPolygonOperation_set_inPoly0_(self, inPoly0);
  GeogebraCommonKernelAlgosAlgoPolygonOperation_set_inPoly1_(self, inPoly1);
  GeogebraCommonKernelAlgosAlgoPolygonOperation_setAndConsume_points_(self, [IOSObjectArray newArrayWithLength:0 type:GeogebraCommonKernelGeosGeoPoint_class_()]);
  GeogebraCommonKernelAlgosAlgoPolygonOperation_setAndConsume_poly_(self, new_GeogebraCommonKernelGeosGeoPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, self->points_));
  self->labelPointsAndSegments_ = YES;
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoPolygonOperation_compute(self);
  jint labelsLength = labels == nil ? 0 : labels->size_;
  self->labelsNeedIniting_ = YES;
  if (self->labelPointsAndSegments_) {
    [self->poly_ initLabelsWithNSStringArray:labels];
  }
  else if (labelsLength == 1) {
    [self->poly_ setLabelWithNSString:IOSObjectArray_Get(nil_chk(labels), 0)];
  }
  else {
    [self->poly_ setLabelWithNSString:nil];
  }
  self->labelsNeedIniting_ = NO;
}

void GeogebraCommonKernelAlgosAlgoPolygonOperation_compute(GeogebraCommonKernelAlgosAlgoPolygonOperation *self) {
  IOSObjectArray *pts0 = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->inPoly0_)) getPoints];
  IOSObjectArray *pts1 = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->inPoly1_)) getPoints];
  if (((IOSObjectArray *) nil_chk(pts0))->size_ == 0 || ((IOSObjectArray *) nil_chk(pts1))->size_ == 0) {
    return;
  }
  IOSObjectArray *coordinates0 = [IOSObjectArray arrayWithLength:pts0->size_ + 1 type:ComVividsolutionsJtsGeomCoordinate_class_()];
  IOSObjectArray *coordinates1 = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(pts1))->size_ + 1 type:ComVividsolutionsJtsGeomCoordinate_class_()];
  GeogebraCommonKernelMatrixCoords *xy;
  for (jint i = 0; i < pts0->size_; i++) {
    xy = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(pts0, i))) getCoordsInD2];
    IOSObjectArray_SetAndConsume(coordinates0, i, new_ComVividsolutionsJtsGeomCoordinate_initWithDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(xy)) getWithInt:1], [xy getWithInt:2]));
  }
  xy = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(pts0, 0))) getCoordsInD2];
  IOSObjectArray_SetAndConsume(coordinates0, pts0->size_, new_ComVividsolutionsJtsGeomCoordinate_initWithDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(xy)) getWithInt:1], [xy getWithInt:2]));
  for (jint i = 0; i < pts1->size_; i++) {
    xy = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(pts1, i))) getCoordsInD2];
    IOSObjectArray_SetAndConsume(coordinates1, i, new_ComVividsolutionsJtsGeomCoordinate_initWithDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(xy)) getWithInt:1], [xy getWithInt:2]));
  }
  xy = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(pts1, 0))) getCoordsInD2];
  IOSObjectArray_SetAndConsume(coordinates1, pts1->size_, new_ComVividsolutionsJtsGeomCoordinate_initWithDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(xy)) getWithInt:1], [xy getWithInt:2]));
  ComVividsolutionsJtsGeomImplCoordinateArraySequence *cas0 = [new_ComVividsolutionsJtsGeomImplCoordinateArraySequence_initWithComVividsolutionsJtsGeomCoordinateArray_(coordinates0) autorelease];
  ComVividsolutionsJtsGeomImplCoordinateArraySequence *cas1 = [new_ComVividsolutionsJtsGeomImplCoordinateArraySequence_initWithComVividsolutionsJtsGeomCoordinateArray_(coordinates1) autorelease];
  ComVividsolutionsJtsGeomGeometryFactory *fact = [new_ComVividsolutionsJtsGeomGeometryFactory_init() autorelease];
  ComVividsolutionsJtsGeomGeometry *geom;
  @try {
    ComVividsolutionsJtsGeomLinearRing *linear0 = [fact createLinearRingWithComVividsolutionsJtsGeomCoordinateSequence:cas0];
    ComVividsolutionsJtsGeomLinearRing *linear1 = [fact createLinearRingWithComVividsolutionsJtsGeomCoordinateSequence:cas1];
    ComVividsolutionsJtsGeomPolygon *poly0 = [new_ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRingArray_withComVividsolutionsJtsGeomGeometryFactory_(linear0, nil, fact) autorelease];
    ComVividsolutionsJtsGeomPolygon *poly1 = [new_ComVividsolutionsJtsGeomPolygon_initWithComVividsolutionsJtsGeomLinearRing_withComVividsolutionsJtsGeomLinearRingArray_withComVividsolutionsJtsGeomGeometryFactory_(linear1, nil, fact) autorelease];
    switch ([self->operationType_ ordinal]) {
      default:
      case GeogebraCommonKernelAlgosPolyOperation_INTERSECTION:
      geom = [poly1 intersectionWithComVividsolutionsJtsGeomGeometry:poly0];
      break;
      case GeogebraCommonKernelAlgosPolyOperation_UNION:
      geom = [poly1 union__WithComVividsolutionsJtsGeomGeometry:poly0];
      break;
      case GeogebraCommonKernelAlgosPolyOperation_DIFFERENCE:
      geom = [poly1 differenceWithComVividsolutionsJtsGeomGeometry:poly0];
      break;
    }
  }
  @catch (JavaLangException *e) {
    GeogebraCommonKernelAlgosAlgoPolygonOperation_updatePointsArrayWithInt_(self, 0);
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) setPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:self->points_];
    [self setOutput];
    [self->poly_ setUndefined];
    return;
  }
  if (!([geom isKindOfClass:[ComVividsolutionsJtsGeomPolygon class]])) {
    GeogebraCommonUtilDebugLog_warnWithNSString_(JreStrcat("$$", @"result not a polygon: ", [((ComVividsolutionsJtsGeomGeometry *) nil_chk(geom)) getGeometryType]));
    jint dim = [geom getDimension];
    jint ng = [geom getNumGeometries];
    if (dim == 2) {
      jint ng2 = 0;
      jint j2 = 0;
      for (jint j = 0; j < ng; j++) {
        if ([((ComVividsolutionsJtsGeomGeometry *) nil_chk([geom getGeometryNWithInt:j])) getDimension] == 2) {
          ng2++;
          j2 = j;
        }
      }
      if (ng2 == 1) {
        geom = [geom getGeometryNWithInt:j2];
      }
      else {
        GeogebraCommonKernelAlgosAlgoPolygonOperation_updatePointsArrayWithInt_(self, 0);
        [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) setPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:self->points_];
        [self setOutput];
        [self->poly_ setUndefined];
        GeogebraCommonUtilDebugLog_warnWithNSString_(JreStrcat("$I$", @"There are ", ng2, @" polygons"));
        return;
      }
    }
    else {
      GeogebraCommonKernelAlgosAlgoPolygonOperation_updatePointsArrayWithInt_(self, 0);
      [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) setPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:self->points_];
      [self setOutput];
      [self->poly_ setUndefined];
      GeogebraCommonUtilDebugLog_warnWithNSString_(@"Dimension less than 2");
      return;
    }
  }
  ComVividsolutionsJtsGeomPolygon *poly2 = (ComVividsolutionsJtsGeomPolygon *) check_class_cast(geom, [ComVividsolutionsJtsGeomPolygon class]);
  IOSObjectArray *coordinates2 = [((ComVividsolutionsJtsGeomPolygon *) nil_chk(poly2)) getCoordinates];
  jint n = ((IOSObjectArray *) nil_chk(coordinates2))->size_;
  jint oldPointNumber = ((IOSObjectArray *) nil_chk(self->points_))->size_;
  if (n != oldPointNumber) {
    GeogebraCommonKernelAlgosAlgoPolygonOperation_updatePointsArrayWithInt_(self, n);
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) setPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:self->points_];
    [self setOutput];
  }
  for (jint k = 0; k < n; k++) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, k))) setCoordsWithDouble:((ComVividsolutionsJtsGeomCoordinate *) nil_chk(IOSObjectArray_Get(coordinates2, k)))->x_ withDouble:((ComVividsolutionsJtsGeomCoordinate *) nil_chk(IOSObjectArray_Get(coordinates2, k)))->y_ withDouble:1];
  }
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) calcArea];
  if (n != oldPointNumber) {
    GeogebraCommonKernelAlgosAlgoPolygonOperation_updateSegmentsAndPointsLabels(self);
  }
}

void GeogebraCommonKernelAlgosAlgoPolygonOperation_updateSegmentsAndPointsLabels(GeogebraCommonKernelAlgosAlgoPolygonOperation *self) {
  if (self->labelsNeedIniting_) return;
  jboolean pointsSegmentsShowLabel = ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getLabelingStyle] == GeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_ALWAYS_ON) || ([((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getLabelingStyle] == GeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_USE_DEFAULTS && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelConstructionDefaults *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_SEGMENT])) isLabelVisible]);
  if (self->labelPointsAndSegments_) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->points_))->size_; i++) {
      if (![((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, i))) isLabelSet]) {
        [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, i))) setLabelWithNSString:nil];
        [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->points_, i))) setLabelVisibleWithBoolean:pointsSegmentsShowLabel];
      }
    }
  }
  IOSObjectArray *segments = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) getSegments];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(segments))->size_; i++) {
    GeogebraCommonKernelGeosGeoElement *seg = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(segments, i), [GeogebraCommonKernelGeosGeoElement class]);
    if (self->labelPointsAndSegments_) {
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(seg)) isLabelSet]) {
        [seg setLabelWithNSString:nil];
        [seg setAuxiliaryObjectWithBoolean:YES];
        [seg setLabelVisibleWithBoolean:pointsSegmentsShowLabel];
      }
      else {
        pointsSegmentsShowLabel = (pointsSegmentsShowLabel || [seg isLabelVisible]);
      }
    }
    [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(seg)) getParentAlgorithm])) update];
  }
}

void GeogebraCommonKernelAlgosAlgoPolygonOperation_updatePointsArrayWithInt_(GeogebraCommonKernelAlgosAlgoPolygonOperation *self, jint n) {
  IOSObjectArray *oldPoints = self->points_;
  jint oldPointsLength = oldPoints == nil ? 0 : oldPoints->size_;
  GeogebraCommonKernelAlgosAlgoPolygonOperation_setAndConsume_points_(self, [IOSObjectArray newArrayWithLength:n type:GeogebraCommonKernelGeosGeoPoint_class_()]);
  for (jint i = 0; i < oldPointsLength; i++) {
    if (i < self->points_->size_) {
      IOSObjectArray_Set(self->points_, i, IOSObjectArray_Get(nil_chk(oldPoints), i));
    }
    else {
      GeogebraCommonKernelAlgosAlgoPolygonOperation_removePointWithGeogebraCommonKernelGeosGeoPoint_(self, IOSObjectArray_Get(nil_chk(oldPoints), i));
    }
  }
  for (jint i = oldPointsLength; i < self->points_->size_; i++) {
    GeogebraCommonKernelGeosGeoPoint *newPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
    [newPoint setCoordsWithDouble:0 withDouble:0 withDouble:1];
    [newPoint setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
    [newPoint setEuclidianVisibleWithBoolean:YES];
    [newPoint setAuxiliaryObjectWithBoolean:YES];
    IOSObjectArray_Set(self->points_, i, newPoint);
  }
}

void GeogebraCommonKernelAlgosAlgoPolygonOperation_removePointWithGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoPolygonOperation *self, GeogebraCommonKernelGeosGeoPoint *oldPoint) {
  JavaUtilArrayList *algoList = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(oldPoint)) getAlgorithmList];
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(algoList)) size]; k++) {
    GeogebraCommonKernelAlgosAlgoElement *algo = [algoList getWithInt:k];
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(self->input_))->size_; j++) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, j))) removeFromUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:algo];
  }
  [oldPoint setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:nil];
  for (jint k = 0; k < [algoList size]; k++) {
    GeogebraCommonKernelAlgosAlgoElement *algo = [algoList getWithInt:k];
    if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoJoinPointsSegment class]] && [((GeogebraCommonKernelAlgosAlgoJoinPointsSegment *) nil_chk(((GeogebraCommonKernelAlgosAlgoJoinPointsSegment *) check_class_cast(algo, [GeogebraCommonKernelAlgosAlgoJoinPointsSegment class])))) getPoly] == self->poly_) {
      continue;
    }
    [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) remove];
  }
  [algoList clear];
  [oldPoint doRemove];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoPolygonOperation)
