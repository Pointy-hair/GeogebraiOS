//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/handler/RenameInputHandler.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/gui/dialog/handler/RenameInputHandler.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/LabelManager.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/Exception.h"

@interface GeogebraCommonGuiDialogHandlerRenameInputHandler () {
 @public
  GeogebraCommonKernelGeosGeoElement *geo_;
  jboolean storeUndo_;
  GeogebraCommonMainApp *app_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogHandlerRenameInputHandler, geo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogHandlerRenameInputHandler, app_, GeogebraCommonMainApp *)

@implementation GeogebraCommonGuiDialogHandlerRenameInputHandler

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
       withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                  withBoolean:(jboolean)storeUndo {
  GeogebraCommonGuiDialogHandlerRenameInputHandler_initWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, app, geo, storeUndo);
  return self;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGuiDialogHandlerRenameInputHandler_set_geo_(self, geo);
}

- (jboolean)processInputWithNSString:(NSString *)inputValue {
  GeogebraCommonKernelGeosGeoElement *geo = self->geo_;
  if (inputValue == nil) return NO;
  if ([((NSString *) nil_chk(inputValue)) isEqual:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) return YES;
  if (!GeogebraCommonKernelGeosLabelManager_checkNameWithGeogebraCommonKernelGeosGeoElement_withNSString_(geo, inputValue)) {
    [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:inputValue];
    return NO;
  }
  @try {
    GeogebraCommonKernelKernel *kernel = [((GeogebraCommonMainApp *) nil_chk(app_)) getKernel];
    NSString *newLabel = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getAlgebraProcessor])) parseLabelWithNSString:inputValue];
    GeogebraCommonKernelGeosGeoElement *existingGeo = [kernel lookupLabelWithNSString:newLabel];
    if (existingGeo != nil) {
      if ([((GeogebraCommonKernelConstruction *) nil_chk([kernel getConstruction])) isConstantElementWithGeogebraCommonKernelGeosGeoElement:existingGeo] == GeogebraCommonKernelConstruction_ConstantsEnum_get_NOT()) {
        NSString *tempLabel = [existingGeo getIndexLabelWithNSString:newLabel];
        [existingGeo renameWithNSString:tempLabel];
      }
      else newLabel = [existingGeo getIndexLabelWithNSString:newLabel];
    }
    if ([geo renameWithNSString:newLabel] && storeUndo_) {
      [app_ storeUndoInfo];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:inputValue];
  }
  @catch (GeogebraCommonMainMyError *err) {
    [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:inputValue];
  }
  return NO;
}

- (void)dealloc {
  RELEASE_(geo_);
  RELEASE_(app_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonKernelGeosGeoElement:withBoolean:", "RenameInputHandler", NULL, 0x1, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "processInputWithNSString:", "processInput", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "storeUndo_", NULL, 0x2, "Z", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogHandlerRenameInputHandler = { 2, "RenameInputHandler", "geogebra.common.gui.dialog.handler", NULL, 0x1, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogHandlerRenameInputHandler;
}

@end

void GeogebraCommonGuiDialogHandlerRenameInputHandler_initWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonGuiDialogHandlerRenameInputHandler *self, GeogebraCommonMainApp *app, GeogebraCommonKernelGeosGeoElement *geo, jboolean storeUndo) {
  NSObject_init(self);
  GeogebraCommonGuiDialogHandlerRenameInputHandler_set_app_(self, app);
  GeogebraCommonGuiDialogHandlerRenameInputHandler_set_geo_(self, geo);
  self->storeUndo_ = storeUndo;
}

GeogebraCommonGuiDialogHandlerRenameInputHandler *new_GeogebraCommonGuiDialogHandlerRenameInputHandler_initWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonMainApp *app, GeogebraCommonKernelGeosGeoElement *geo, jboolean storeUndo) {
  GeogebraCommonGuiDialogHandlerRenameInputHandler *self = [GeogebraCommonGuiDialogHandlerRenameInputHandler alloc];
  GeogebraCommonGuiDialogHandlerRenameInputHandler_initWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, app, geo, storeUndo);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogHandlerRenameInputHandler)
