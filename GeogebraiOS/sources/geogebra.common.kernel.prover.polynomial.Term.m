//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/prover/polynomial/Term.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/prover/polynomial/Term.h"
#include "geogebra/common/kernel/prover/polynomial/Variable.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/TreeMap.h"

@interface GeogebraCommonKernelProverPolynomialTerm () {
 @public
  JavaUtilTreeMap *variables_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverPolynomialTerm, variables_, JavaUtilTreeMap *)

@implementation GeogebraCommonKernelProverPolynomialTerm

- (instancetype)init {
  GeogebraCommonKernelProverPolynomialTerm_init(self);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelProverPolynomialTerm:(GeogebraCommonKernelProverPolynomialTerm *)t {
  GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialTerm_(self, t);
  return self;
}

- (instancetype)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)variables {
  GeogebraCommonKernelProverPolynomialTerm_initWithJavaUtilTreeMap_(self, variables);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)variable {
  GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_(self, variable);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)variable
                                                             withInt:(jint)exponent {
  GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_withInt_(self, variable, exponent);
  return self;
}

- (GeogebraCommonKernelProverPolynomialTerm *)timesWithGeogebraCommonKernelProverPolynomialTerm:(GeogebraCommonKernelProverPolynomialTerm *)term {
  JavaUtilTreeMap *productTerm = [new_JavaUtilTreeMap_initWithJavaUtilSortedMap_(variables_) autorelease];
  JavaUtilTreeMap *variables2 = [((GeogebraCommonKernelProverPolynomialTerm *) nil_chk(term)) getTerm];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk([term getTerm])) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelProverPolynomialVariable *vp = [it next];
    if ([((JavaUtilTreeMap *) nil_chk(variables_)) containsKeyWithId:vp]) {
      [productTerm putWithId:vp withId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([variables_ getWithId:vp])) intValue] + [((JavaLangInteger *) nil_chk([((JavaUtilTreeMap *) nil_chk(variables2)) getWithId:vp])) intValue])];
    }
    else {
      [productTerm putWithId:vp withId:[((JavaUtilTreeMap *) nil_chk(variables2)) getWithId:vp]];
    }
  }
  return [new_GeogebraCommonKernelProverPolynomialTerm_initWithJavaUtilTreeMap_(productTerm) autorelease];
}

- (JavaUtilTreeMap *)getTerm {
  return variables_;
}

- (GeogebraCommonKernelProverPolynomialVariable *)getHighestVariable {
  return [((JavaUtilTreeMap *) nil_chk(variables_)) lastKey];
}

- (jint)compareToWithId:(GeogebraCommonKernelProverPolynomialTerm *)o {
  check_class_cast(o, [GeogebraCommonKernelProverPolynomialTerm class]);
  if (self == o) {
    return 0;
  }
  JavaUtilTreeMap *t = [((GeogebraCommonKernelProverPolynomialTerm *) nil_chk(o)) getTerm];
  if ([((JavaUtilTreeMap *) nil_chk(t)) isEmpty]) {
    if ([((JavaUtilTreeMap *) nil_chk(variables_)) isEmpty]) {
      return 0;
    }
    return 1;
  }
  if ([((JavaUtilTreeMap *) nil_chk(variables_)) isEmpty]) {
    return -1;
  }
  GeogebraCommonKernelProverPolynomialVariable *variablesLastKey = [variables_ lastKey], *tLastKey = [t lastKey];
  jint compare = [((GeogebraCommonKernelProverPolynomialVariable *) nil_chk(variablesLastKey)) compareToWithId:tLastKey];
  if (compare == 0) {
    compare = [((JavaLangInteger *) nil_chk([variables_ getWithId:variablesLastKey])) compareToWithId:[t getWithId:tLastKey]];
  }
  if (compare != 0) {
    return compare;
  }
  do {
    id<JavaUtilSortedMap> variablesSub = [variables_ headMapWithId:variablesLastKey];
    id<JavaUtilSortedMap> oSub = [t headMapWithId:tLastKey];
    if ([((id<JavaUtilSortedMap>) nil_chk(variablesSub)) isEmpty]) {
      if ([((id<JavaUtilSortedMap>) nil_chk(oSub)) isEmpty]) {
        return 0;
      }
      return -1;
    }
    if ([((id<JavaUtilSortedMap>) nil_chk(oSub)) isEmpty]) {
      return 1;
    }
    variablesLastKey = [variablesSub lastKey];
    tLastKey = [oSub lastKey];
    compare = [((GeogebraCommonKernelProverPolynomialVariable *) nil_chk(variablesLastKey)) compareToWithId:tLastKey];
    if (compare == 0) {
      compare = [((JavaLangInteger *) nil_chk([variablesSub getWithId:variablesLastKey])) compareToWithId:[oSub getWithId:tLastKey]];
    }
  }
  while (compare == 0);
  return compare;
}

- (jboolean)isEqual:(id)o {
  if ([o isKindOfClass:[GeogebraCommonKernelProverPolynomialTerm class]]) {
    return [self compareToWithId:(GeogebraCommonKernelProverPolynomialTerm *) check_class_cast(o, [GeogebraCommonKernelProverPolynomialTerm class])] == 0;
  }
  return [super isEqual:o];
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithNSString_(@"") autorelease];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(variables_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelProverPolynomialVariable *fv = [it next];
    [sb appendWithNSString:@"*"];
    [sb appendWithId:fv];
    jint power = [((JavaLangInteger *) nil_chk([variables_ getWithId:fv])) intValue];
    if (power > 1) {
      [sb appendWithNSString:@"^"];
      [sb appendWithInt:power];
    }
  }
  if ([sb length] > 0) {
    return [sb substringWithInt:1];
  }
  return @"";
}

- (NSString *)toTeX {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithNSString_(@"") autorelease];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(variables_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelProverPolynomialVariable *fv = [it next];
    [sb appendWithNSString:[((GeogebraCommonKernelProverPolynomialVariable *) nil_chk(fv)) toTeX]];
    jint power = [((JavaLangInteger *) nil_chk([variables_ getWithId:fv])) intValue];
    if (power > 1) [sb appendWithNSString:JreStrcat("$IC", @"^{", power, '}')];
  }
  return [sb description];
}

- (JavaUtilHashSet *)getVars {
  JavaUtilHashSet *v = [new_JavaUtilHashSet_init() autorelease];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(variables_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelProverPolynomialVariable *fv = [it next];
    [v addWithId:fv];
  }
  return v;
}

- (NSUInteger)hash {
  if ([((JavaUtilTreeMap *) nil_chk(variables_)) isEmpty]) {
    return 0;
  }
  return RShift32(((jint) [((GeogebraCommonKernelProverPolynomialVariable *) nil_chk([variables_ firstKey])) hash]), ((jint) [((GeogebraCommonKernelProverPolynomialVariable *) nil_chk([variables_ lastKey])) hash]));
}

+ (jboolean)dividesWithGeogebraCommonKernelProverPolynomialTerm:(GeogebraCommonKernelProverPolynomialTerm *)f
                   withGeogebraCommonKernelProverPolynomialTerm:(GeogebraCommonKernelProverPolynomialTerm *)g {
  return GeogebraCommonKernelProverPolynomialTerm_dividesWithGeogebraCommonKernelProverPolynomialTerm_withGeogebraCommonKernelProverPolynomialTerm_(f, g);
}

- (void)dealloc {
  RELEASE_(variables_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Term", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelProverPolynomialTerm:", "Term", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilTreeMap:", "Term", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelProverPolynomialVariable:", "Term", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelProverPolynomialVariable:withInt:", "Term", NULL, 0x1, NULL, NULL },
    { "timesWithGeogebraCommonKernelProverPolynomialTerm:", "times", "Lgeogebra.common.kernel.prover.polynomial.Term;", 0x1, NULL, NULL },
    { "getTerm", NULL, "Ljava.util.TreeMap;", 0x1, NULL, NULL },
    { "getHighestVariable", NULL, "Lgeogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toTeX", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getVars", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "dividesWithGeogebraCommonKernelProverPolynomialTerm:withGeogebraCommonKernelProverPolynomialTerm:", "divides", "Z", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "variables_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Lgeogebra/common/kernel/prover/polynomial/Variable;Ljava/lang/Integer;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelProverPolynomialTerm = { 2, "Term", "geogebra.common.kernel.prover.polynomial", NULL, 0x1, 15, methods, 1, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lgeogebra/common/kernel/prover/polynomial/Term;>;" };
  return &_GeogebraCommonKernelProverPolynomialTerm;
}

@end

void GeogebraCommonKernelProverPolynomialTerm_init(GeogebraCommonKernelProverPolynomialTerm *self) {
  NSObject_init(self);
  GeogebraCommonKernelProverPolynomialTerm_setAndConsume_variables_(self, new_JavaUtilTreeMap_init());
}

GeogebraCommonKernelProverPolynomialTerm *new_GeogebraCommonKernelProverPolynomialTerm_init() {
  GeogebraCommonKernelProverPolynomialTerm *self = [GeogebraCommonKernelProverPolynomialTerm alloc];
  GeogebraCommonKernelProverPolynomialTerm_init(self);
  return self;
}

void GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialTerm_(GeogebraCommonKernelProverPolynomialTerm *self, GeogebraCommonKernelProverPolynomialTerm *t) {
  NSObject_init(self);
  GeogebraCommonKernelProverPolynomialTerm_setAndConsume_variables_(self, new_JavaUtilTreeMap_initWithJavaUtilSortedMap_([((GeogebraCommonKernelProverPolynomialTerm *) nil_chk(t)) getTerm]));
}

GeogebraCommonKernelProverPolynomialTerm *new_GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialTerm_(GeogebraCommonKernelProverPolynomialTerm *t) {
  GeogebraCommonKernelProverPolynomialTerm *self = [GeogebraCommonKernelProverPolynomialTerm alloc];
  GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialTerm_(self, t);
  return self;
}

void GeogebraCommonKernelProverPolynomialTerm_initWithJavaUtilTreeMap_(GeogebraCommonKernelProverPolynomialTerm *self, JavaUtilTreeMap *variables) {
  NSObject_init(self);
  GeogebraCommonKernelProverPolynomialTerm_set_variables_(self, variables);
}

GeogebraCommonKernelProverPolynomialTerm *new_GeogebraCommonKernelProverPolynomialTerm_initWithJavaUtilTreeMap_(JavaUtilTreeMap *variables) {
  GeogebraCommonKernelProverPolynomialTerm *self = [GeogebraCommonKernelProverPolynomialTerm alloc];
  GeogebraCommonKernelProverPolynomialTerm_initWithJavaUtilTreeMap_(self, variables);
  return self;
}

void GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialTerm *self, GeogebraCommonKernelProverPolynomialVariable *variable) {
  NSObject_init(self);
  GeogebraCommonKernelProverPolynomialTerm_setAndConsume_variables_(self, new_JavaUtilTreeMap_init());
  [self->variables_ putWithId:variable withId:JavaLangInteger_valueOfWithInt_(1)];
}

GeogebraCommonKernelProverPolynomialTerm *new_GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialVariable *variable) {
  GeogebraCommonKernelProverPolynomialTerm *self = [GeogebraCommonKernelProverPolynomialTerm alloc];
  GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_(self, variable);
  return self;
}

void GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_withInt_(GeogebraCommonKernelProverPolynomialTerm *self, GeogebraCommonKernelProverPolynomialVariable *variable, jint exponent) {
  NSObject_init(self);
  GeogebraCommonKernelProverPolynomialTerm_setAndConsume_variables_(self, new_JavaUtilTreeMap_init());
  [self->variables_ putWithId:variable withId:JavaLangInteger_valueOfWithInt_(exponent)];
}

GeogebraCommonKernelProverPolynomialTerm *new_GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_withInt_(GeogebraCommonKernelProverPolynomialVariable *variable, jint exponent) {
  GeogebraCommonKernelProverPolynomialTerm *self = [GeogebraCommonKernelProverPolynomialTerm alloc];
  GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_withInt_(self, variable, exponent);
  return self;
}

jboolean GeogebraCommonKernelProverPolynomialTerm_dividesWithGeogebraCommonKernelProverPolynomialTerm_withGeogebraCommonKernelProverPolynomialTerm_(GeogebraCommonKernelProverPolynomialTerm *f, GeogebraCommonKernelProverPolynomialTerm *g) {
  GeogebraCommonKernelProverPolynomialTerm_initialize();
  JavaUtilTreeMap *termG = [((GeogebraCommonKernelProverPolynomialTerm *) nil_chk(g)) getTerm];
  id<JavaUtilIterator> itG = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(termG)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(itG)) hasNext]) {
    GeogebraCommonKernelProverPolynomialVariable *var = [itG next];
    JavaLangInteger *powF = [((JavaUtilTreeMap *) nil_chk([((GeogebraCommonKernelProverPolynomialTerm *) nil_chk(f)) getTerm])) getWithId:var];
    if (powF == nil || [powF intValue] < [((JavaLangInteger *) nil_chk([termG getWithId:var])) intValue]) {
      return NO;
    }
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelProverPolynomialTerm)
