//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoColumnName.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/statistics/AlgoColumnName.h"

@interface GeogebraCommonKernelStatisticsAlgoColumnName () {
 @public
  GeogebraCommonKernelGeosGeoElement *geo_;
  GeogebraCommonKernelGeosGeoText *text_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoColumnName, geo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoColumnName, text_, GeogebraCommonKernelGeosGeoText *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoColumnName_compute(GeogebraCommonKernelStatisticsAlgoColumnName *self);

@implementation GeogebraCommonKernelStatisticsAlgoColumnName

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelStatisticsAlgoColumnName_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, geo);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ColumnName();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geo_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:text_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoText *)getGeoText {
  return text_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoColumnName_compute(self);
}

- (void)dealloc {
  RELEASE_(geo_);
  RELEASE_(text_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:", "AlgoColumnName", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getGeoText", NULL, "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "text_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoColumnName = { 2, "AlgoColumnName", "geogebra.common.kernel.statistics", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoColumnName;
}

@end

void GeogebraCommonKernelStatisticsAlgoColumnName_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelStatisticsAlgoColumnName *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoColumnName_set_geo_(self, geo);
  GeogebraCommonKernelStatisticsAlgoColumnName_setAndConsume_text_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons));
  [self->text_ setIsTextCommandWithBoolean:YES];
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoColumnName_compute(self);
  [self->text_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoColumnName *new_GeogebraCommonKernelStatisticsAlgoColumnName_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonKernelStatisticsAlgoColumnName *self = [GeogebraCommonKernelStatisticsAlgoColumnName alloc];
  GeogebraCommonKernelStatisticsAlgoColumnName_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, geo);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoColumnName_compute(GeogebraCommonKernelStatisticsAlgoColumnName *self) {
  NSString *col = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnNameWithNSString_([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
  if (col == nil) [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) setUndefined];
  else [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) setTextStringWithNSString:col];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoColumnName)
