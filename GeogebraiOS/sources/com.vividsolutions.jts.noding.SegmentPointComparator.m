//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/noding/SegmentPointComparator.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/noding/SegmentPointComparator.h"
#include "com/vividsolutions/jts/util/Assert.h"

@interface ComVividsolutionsJtsNodingSegmentPointComparator ()

+ (jint)compareValueWithInt:(jint)compareSign0
                    withInt:(jint)compareSign1;

@end

__attribute__((unused)) static jint ComVividsolutionsJtsNodingSegmentPointComparator_compareValueWithInt_withInt_(jint compareSign0, jint compareSign1);

@implementation ComVividsolutionsJtsNodingSegmentPointComparator

+ (jint)compareWithInt:(jint)octant
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p0
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1 {
  return ComVividsolutionsJtsNodingSegmentPointComparator_compareWithInt_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(octant, p0, p1);
}

+ (jint)relativeSignWithDouble:(jdouble)x0
                    withDouble:(jdouble)x1 {
  return ComVividsolutionsJtsNodingSegmentPointComparator_relativeSignWithDouble_withDouble_(x0, x1);
}

+ (jint)compareValueWithInt:(jint)compareSign0
                    withInt:(jint)compareSign1 {
  return ComVividsolutionsJtsNodingSegmentPointComparator_compareValueWithInt_withInt_(compareSign0, compareSign1);
}

- (instancetype)init {
  ComVividsolutionsJtsNodingSegmentPointComparator_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithInt:withComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:", "compare", "I", 0x9, NULL, NULL },
    { "relativeSignWithDouble:withDouble:", "relativeSign", "I", 0x9, NULL, NULL },
    { "compareValueWithInt:withInt:", "compareValue", "I", 0xa, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsNodingSegmentPointComparator = { 2, "SegmentPointComparator", "com.vividsolutions.jts.noding", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsNodingSegmentPointComparator;
}

@end

jint ComVividsolutionsJtsNodingSegmentPointComparator_compareWithInt_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(jint octant, ComVividsolutionsJtsGeomCoordinate *p0, ComVividsolutionsJtsGeomCoordinate *p1) {
  ComVividsolutionsJtsNodingSegmentPointComparator_initialize();
  if ([((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p0)) equals2DWithComVividsolutionsJtsGeomCoordinate:p1]) return 0;
  jint xSign = ComVividsolutionsJtsNodingSegmentPointComparator_relativeSignWithDouble_withDouble_(p0->x_, ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p1))->x_);
  jint ySign = ComVividsolutionsJtsNodingSegmentPointComparator_relativeSignWithDouble_withDouble_(p0->y_, p1->y_);
  switch (octant) {
    case 0:
    return ComVividsolutionsJtsNodingSegmentPointComparator_compareValueWithInt_withInt_(xSign, ySign);
    case 1:
    return ComVividsolutionsJtsNodingSegmentPointComparator_compareValueWithInt_withInt_(ySign, xSign);
    case 2:
    return ComVividsolutionsJtsNodingSegmentPointComparator_compareValueWithInt_withInt_(ySign, -xSign);
    case 3:
    return ComVividsolutionsJtsNodingSegmentPointComparator_compareValueWithInt_withInt_(-xSign, ySign);
    case 4:
    return ComVividsolutionsJtsNodingSegmentPointComparator_compareValueWithInt_withInt_(-xSign, -ySign);
    case 5:
    return ComVividsolutionsJtsNodingSegmentPointComparator_compareValueWithInt_withInt_(-ySign, -xSign);
    case 6:
    return ComVividsolutionsJtsNodingSegmentPointComparator_compareValueWithInt_withInt_(-ySign, xSign);
    case 7:
    return ComVividsolutionsJtsNodingSegmentPointComparator_compareValueWithInt_withInt_(xSign, -ySign);
  }
  ComVividsolutionsJtsUtilAssert_shouldNeverReachHereWithNSString_(@"invalid octant value");
  return 0;
}

jint ComVividsolutionsJtsNodingSegmentPointComparator_relativeSignWithDouble_withDouble_(jdouble x0, jdouble x1) {
  ComVividsolutionsJtsNodingSegmentPointComparator_initialize();
  if (x0 < x1) return -1;
  if (x0 > x1) return 1;
  return 0;
}

jint ComVividsolutionsJtsNodingSegmentPointComparator_compareValueWithInt_withInt_(jint compareSign0, jint compareSign1) {
  ComVividsolutionsJtsNodingSegmentPointComparator_initialize();
  if (compareSign0 < 0) return -1;
  if (compareSign0 > 0) return 1;
  if (compareSign1 < 0) return -1;
  if (compareSign1 > 0) return 1;
  return 0;
}

void ComVividsolutionsJtsNodingSegmentPointComparator_init(ComVividsolutionsJtsNodingSegmentPointComparator *self) {
  NSObject_init(self);
}

ComVividsolutionsJtsNodingSegmentPointComparator *new_ComVividsolutionsJtsNodingSegmentPointComparator_init() {
  ComVividsolutionsJtsNodingSegmentPointComparator *self = [ComVividsolutionsJtsNodingSegmentPointComparator alloc];
  ComVividsolutionsJtsNodingSegmentPointComparator_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsNodingSegmentPointComparator)
