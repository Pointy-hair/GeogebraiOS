//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoLocusSlider.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GPoint2D.h"
#include "geogebra/common/awt/GRectangle2D.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Macro.h"
#include "geogebra/common/kernel/MacroKernel.h"
#include "geogebra/common/kernel/PathMover.h"
#include "geogebra/common/kernel/SliderMover.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoLocusSlider.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/geos/GeoLocusND.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/main/App.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelAlgosAlgoLocusSlider () {
 @public
  GeogebraCommonKernelGeosGeoPoint *locusPoint_;
  GeogebraCommonKernelGeosGeoNumeric *movingSlider_;
  GeogebraCommonKernelGeosGeoLocus *locus_;
  IOSObjectArray *efficientInput_AlgoLocusSlider_, *standardInput_;
  GeogebraCommonKernelSliderMover *sliderMover_;
  jint pointCount_;
  GeogebraCommonKernelGeosGeoPoint *Qcopy_, *QstartPos_;
  GeogebraCommonKernelGeosGeoNumeric *Pcopy_, *PstartPos_;
  jdouble lastX_, lastY_, maxXdist_, maxYdist_, xmin_, xmax_, ymin_, ymax_, farXmin_, farXmax_, farYmin_, farYmax_;
  jdouble maxXdist2_, maxYdist2_, xmin2_, xmax2_, ymin2_, ymax2_, farXmin2_, farXmax2_, farYmin2_, farYmax2_;
  id<GeogebraCommonAwtGRectangle2D> nearToScreenRect_;
  id<GeogebraCommonAwtGRectangle2D> nearToScreenRect2_;
  jboolean continuous_;
  jboolean lastFarAway_, lastFarAway2_;
  jboolean foundDefined_;
  jboolean maxTimeExceeded_;
  GeogebraCommonKernelConstruction *macroCons_;
  GeogebraCommonKernelMacroKernel *macroKernel_;
  JavaUtilTreeSet *locusConsOrigElements_;
  JavaUtilTreeSet *Qin_;
  jint views_;
  IOSDoubleArray *paramCache_;
  IOSObjectArray *qcopyCache_;
  jint cacheIndex_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (void)buildLocusMacroConstructionWithJavaUtilTreeSet:(JavaUtilTreeSet *)locusConsElements;

- (void)resetMacroConstruction;

- (void)pcopyUpdateCascade;

- (void)clearCache;

- (GeogebraCommonAwtGPoint2D *)getCachedPointWithDouble:(jdouble)param;

- (void)putCachedPointWithDouble:(jdouble)param
withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Qcopy;

- (void)insertPointWithDouble:(jdouble)x
                   withDouble:(jdouble)y
                  withBoolean:(jboolean)lineTo;

- (jboolean)isFarAwayWithDouble:(jdouble)x
                     withDouble:(jdouble)y;

- (jboolean)isFarAway2WithDouble:(jdouble)x
                      withDouble:(jdouble)y;

- (jboolean)distanceOKWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q;

- (jboolean)distanceSmallWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q
                                                  withBoolean:(jboolean)orInsteadOfAnd;

- (void)updateScreenBorders;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, locusPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, movingSlider_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, locus_, GeogebraCommonKernelGeosGeoLocus *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, efficientInput_AlgoLocusSlider_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, standardInput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, sliderMover_, GeogebraCommonKernelSliderMover *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, Qcopy_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, QstartPos_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, Pcopy_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, PstartPos_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, nearToScreenRect_, id<GeogebraCommonAwtGRectangle2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, nearToScreenRect2_, id<GeogebraCommonAwtGRectangle2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, macroCons_, GeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, macroKernel_, GeogebraCommonKernelMacroKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, locusConsOrigElements_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, Qin_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, paramCache_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, qcopyCache_, IOSObjectArray *)

static jint GeogebraCommonKernelAlgosAlgoLocusSlider_MAX_X_PIXEL_DIST_ = 5;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, MAX_X_PIXEL_DIST_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, MAX_X_PIXEL_DIST_, jint)

static jint GeogebraCommonKernelAlgosAlgoLocusSlider_MAX_Y_PIXEL_DIST_ = 5;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, MAX_Y_PIXEL_DIST_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelAlgosAlgoLocusSlider, MAX_Y_PIXEL_DIST_, jint)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusSlider_init__(GeogebraCommonKernelAlgosAlgoLocusSlider *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusSlider_buildLocusMacroConstructionWithJavaUtilTreeSet_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, JavaUtilTreeSet *locusConsElements);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusSlider_resetMacroConstruction(GeogebraCommonKernelAlgosAlgoLocusSlider *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusSlider_compute(GeogebraCommonKernelAlgosAlgoLocusSlider *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusSlider_pcopyUpdateCascade(GeogebraCommonKernelAlgosAlgoLocusSlider *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusSlider_clearCache(GeogebraCommonKernelAlgosAlgoLocusSlider *self);

__attribute__((unused)) static GeogebraCommonAwtGPoint2D *GeogebraCommonKernelAlgosAlgoLocusSlider_getCachedPointWithDouble_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, jdouble param);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusSlider_putCachedPointWithDouble_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, jdouble param, GeogebraCommonKernelGeosGeoPoint *Qcopy);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusSlider_insertPointWithDouble_withDouble_withBoolean_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, jdouble x, jdouble y, jboolean lineTo);

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoLocusSlider_isFarAwayWithDouble_withDouble_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, jdouble x, jdouble y);

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoLocusSlider_isFarAway2WithDouble_withDouble_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, jdouble x, jdouble y);

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoLocusSlider_distanceOKWithGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, GeogebraCommonKernelGeosGeoPoint *Q);

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoLocusSlider_distanceSmallWithGeogebraCommonKernelGeosGeoPoint_withBoolean_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, GeogebraCommonKernelGeosGeoPoint *Q, jboolean orInsteadOfAnd);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusSlider_updateScreenBorders(GeogebraCommonKernelAlgosAlgoLocusSlider *self);

jint GeogebraCommonKernelAlgosAlgoLocusSlider_MAX_TIME_FOR_ONE_STEP_ = 500;

@implementation GeogebraCommonKernelAlgosAlgoLocusSlider

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)P {
  GeogebraCommonKernelAlgosAlgoLocusSlider_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, Q, P);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Locus();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_LOCUS;
}

- (JavaUtilArrayList *)getMoveableInputPoints {
  return nil;
}

- (GeogebraCommonKernelGeosGeoPoint *)getQ {
  return locusPoint_;
}

- (void)init__ {
  GeogebraCommonKernelAlgosAlgoLocusSlider_init__(self);
}

- (void)setInputOutput {
  JavaUtilTreeSet *inSet = [new_JavaUtilTreeSet_init() autorelease];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(Qin_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent] || [geo isPointOnPath]) {
      [inSet addWithId:geo];
    }
  }
  GeogebraCommonKernelAlgosAlgoLocusSlider_setAndConsume_efficientInput_AlgoLocusSlider_(self, [IOSObjectArray newArrayWithLength:[inSet size] type:GeogebraCommonKernelGeosGeoElement_class_()]);
  it = [inSet iterator];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(efficientInput_AlgoLocusSlider_, i, [it next]);
    i++;
  }
  GeogebraCommonKernelAlgosAlgoLocusSlider_setAndConsume_standardInput_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(standardInput_, 0, locusPoint_);
  IOSObjectArray_Set(standardInput_, 1, movingSlider_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:locus_];
  [self setEfficientDependenciesWithGeogebraCommonKernelGeosGeoElementArray:standardInput_ withGeogebraCommonKernelGeosGeoElementArray:efficientInput_AlgoLocusSlider_];
}

- (GeogebraCommonKernelGeosGeoLocus *)getLocus {
  return locus_;
}

- (void)buildLocusMacroConstructionWithJavaUtilTreeSet:(JavaUtilTreeSet *)locusConsElements {
  GeogebraCommonKernelAlgosAlgoLocusSlider_buildLocusMacroConstructionWithJavaUtilTreeSet_(self, locusConsElements);
}

- (void)resetMacroConstruction {
  GeogebraCommonKernelAlgosAlgoLocusSlider_resetMacroConstruction(self);
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoLocusSlider_compute(self);
}

- (void)pcopyUpdateCascade {
  GeogebraCommonKernelAlgosAlgoLocusSlider_pcopyUpdateCascade(self);
}

- (void)clearCache {
  GeogebraCommonKernelAlgosAlgoLocusSlider_clearCache(self);
}

- (GeogebraCommonAwtGPoint2D *)getCachedPointWithDouble:(jdouble)param {
  return GeogebraCommonKernelAlgosAlgoLocusSlider_getCachedPointWithDouble_(self, param);
}

- (void)putCachedPointWithDouble:(jdouble)param
withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Qcopy {
  GeogebraCommonKernelAlgosAlgoLocusSlider_putCachedPointWithDouble_withGeogebraCommonKernelGeosGeoPoint_(self, param, Qcopy);
}

- (void)insertPointWithDouble:(jdouble)x
                   withDouble:(jdouble)y
                  withBoolean:(jboolean)lineTo {
  GeogebraCommonKernelAlgosAlgoLocusSlider_insertPointWithDouble_withDouble_withBoolean_(self, x, y, lineTo);
}

- (jboolean)isFarAwayWithDouble:(jdouble)x
                     withDouble:(jdouble)y {
  return GeogebraCommonKernelAlgosAlgoLocusSlider_isFarAwayWithDouble_withDouble_(self, x, y);
}

- (jboolean)isFarAway2WithDouble:(jdouble)x
                      withDouble:(jdouble)y {
  return GeogebraCommonKernelAlgosAlgoLocusSlider_isFarAway2WithDouble_withDouble_(self, x, y);
}

- (jboolean)distanceOKWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q {
  return GeogebraCommonKernelAlgosAlgoLocusSlider_distanceOKWithGeogebraCommonKernelGeosGeoPoint_(self, Q);
}

- (jboolean)distanceSmallWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q
                                                  withBoolean:(jboolean)orInsteadOfAnd {
  return GeogebraCommonKernelAlgosAlgoLocusSlider_distanceSmallWithGeogebraCommonKernelGeosGeoPoint_withBoolean_(self, Q, orInsteadOfAnd);
}

- (jboolean)isVisibleInEV1 {
  if (![((GeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) isVisibleInViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN]) return NO;
  if (![((GeogebraCommonEuclidianEuclidianView *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getEuclidianView1])) isShowing]) return NO;
  return YES;
}

- (jboolean)isVisibleInEV2 {
  if (![((GeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) isVisibleInViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2]) return NO;
  if (![((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) hasEuclidianView2WithInt:1]) return NO;
  return YES;
}

- (void)updateScreenBordersIfNecessary {
  if ([self isVisibleInEV1] != visibleEV1_ || [self isVisibleInEV2] != visibleEV2_) {
    GeogebraCommonKernelAlgosAlgoLocusSlider_updateScreenBorders(self);
  }
}

- (void)updateScreenBorders {
  GeogebraCommonKernelAlgosAlgoLocusSlider_updateScreenBorders(self);
}

- (jboolean)euclidianViewUpdate {
  GeogebraCommonKernelAlgosAlgoLocusSlider_updateScreenBorders(self);
  [self update];
  return NO;
}

- (void)dealloc {
  RELEASE_(locusPoint_);
  RELEASE_(movingSlider_);
  RELEASE_(locus_);
  RELEASE_(efficientInput_AlgoLocusSlider_);
  RELEASE_(standardInput_);
  RELEASE_(sliderMover_);
  RELEASE_(Qcopy_);
  RELEASE_(QstartPos_);
  RELEASE_(Pcopy_);
  RELEASE_(PstartPos_);
  RELEASE_(nearToScreenRect_);
  RELEASE_(nearToScreenRect2_);
  RELEASE_(macroCons_);
  RELEASE_(macroKernel_);
  RELEASE_(locusConsOrigElements_);
  RELEASE_(Qin_);
  RELEASE_(paramCache_);
  RELEASE_(qcopyCache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoLocusSlider", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getMoveableInputPoints", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getQ", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "init__", "init", "V", 0x2, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getLocus", NULL, "Lgeogebra.common.kernel.geos.GeoLocus;", 0x1, NULL, NULL },
    { "buildLocusMacroConstructionWithJavaUtilTreeSet:", "buildLocusMacroConstruction", "V", 0x2, NULL, NULL },
    { "resetMacroConstruction", NULL, "V", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "pcopyUpdateCascade", NULL, "V", 0x2, NULL, NULL },
    { "clearCache", NULL, "V", 0x2, NULL, NULL },
    { "getCachedPointWithDouble:", "getCachedPoint", "Lgeogebra.common.awt.GPoint2D;", 0x2, NULL, NULL },
    { "putCachedPointWithDouble:withGeogebraCommonKernelGeosGeoPoint:", "putCachedPoint", "V", 0x2, NULL, NULL },
    { "insertPointWithDouble:withDouble:withBoolean:", "insertPoint", "V", 0x2, NULL, NULL },
    { "isFarAwayWithDouble:withDouble:", "isFarAway", "Z", 0x2, NULL, NULL },
    { "isFarAway2WithDouble:withDouble:", "isFarAway2", "Z", 0x2, NULL, NULL },
    { "distanceOKWithGeogebraCommonKernelGeosGeoPoint:", "distanceOK", "Z", 0x2, NULL, NULL },
    { "distanceSmallWithGeogebraCommonKernelGeosGeoPoint:withBoolean:", "distanceSmall", "Z", 0x2, NULL, NULL },
    { "isVisibleInEV1", NULL, "Z", 0x0, NULL, NULL },
    { "isVisibleInEV2", NULL, "Z", 0x0, NULL, NULL },
    { "updateScreenBordersIfNecessary", NULL, "V", 0x0, NULL, NULL },
    { "updateScreenBorders", NULL, "V", 0x2, NULL, NULL },
    { "euclidianViewUpdate", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_TIME_FOR_ONE_STEP_", NULL, 0x9, "I", &GeogebraCommonKernelAlgosAlgoLocusSlider_MAX_TIME_FOR_ONE_STEP_, NULL,  },
    { "MAX_X_PIXEL_DIST_", NULL, 0xa, "I", &GeogebraCommonKernelAlgosAlgoLocusSlider_MAX_X_PIXEL_DIST_, NULL,  },
    { "MAX_Y_PIXEL_DIST_", NULL, 0xa, "I", &GeogebraCommonKernelAlgosAlgoLocusSlider_MAX_Y_PIXEL_DIST_, NULL,  },
    { "locusPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "movingSlider_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "locus_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLocus;", NULL, NULL,  },
    { "efficientInput_AlgoLocusSlider_", "efficientInput", 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "standardInput_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "sliderMover_", NULL, 0x2, "Lgeogebra.common.kernel.SliderMover;", NULL, NULL,  },
    { "pointCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "Qcopy_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "QstartPos_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "Pcopy_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "PstartPos_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "lastX_", NULL, 0x2, "D", NULL, NULL,  },
    { "lastY_", NULL, 0x2, "D", NULL, NULL,  },
    { "maxXdist_", NULL, 0x2, "D", NULL, NULL,  },
    { "maxYdist_", NULL, 0x2, "D", NULL, NULL,  },
    { "xmin_", NULL, 0x2, "D", NULL, NULL,  },
    { "xmax_", NULL, 0x2, "D", NULL, NULL,  },
    { "ymin_", NULL, 0x2, "D", NULL, NULL,  },
    { "ymax_", NULL, 0x2, "D", NULL, NULL,  },
    { "farXmin_", NULL, 0x2, "D", NULL, NULL,  },
    { "farXmax_", NULL, 0x2, "D", NULL, NULL,  },
    { "farYmin_", NULL, 0x2, "D", NULL, NULL,  },
    { "farYmax_", NULL, 0x2, "D", NULL, NULL,  },
    { "maxXdist2_", NULL, 0x2, "D", NULL, NULL,  },
    { "maxYdist2_", NULL, 0x2, "D", NULL, NULL,  },
    { "xmin2_", NULL, 0x2, "D", NULL, NULL,  },
    { "xmax2_", NULL, 0x2, "D", NULL, NULL,  },
    { "ymin2_", NULL, 0x2, "D", NULL, NULL,  },
    { "ymax2_", NULL, 0x2, "D", NULL, NULL,  },
    { "farXmin2_", NULL, 0x2, "D", NULL, NULL,  },
    { "farXmax2_", NULL, 0x2, "D", NULL, NULL,  },
    { "farYmin2_", NULL, 0x2, "D", NULL, NULL,  },
    { "farYmax2_", NULL, 0x2, "D", NULL, NULL,  },
    { "nearToScreenRect_", NULL, 0x2, "Lgeogebra.common.awt.GRectangle2D;", NULL, NULL,  },
    { "nearToScreenRect2_", NULL, 0x2, "Lgeogebra.common.awt.GRectangle2D;", NULL, NULL,  },
    { "continuous_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lastFarAway_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lastFarAway2_", NULL, 0x2, "Z", NULL, NULL,  },
    { "foundDefined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "maxTimeExceeded_", NULL, 0x2, "Z", NULL, NULL,  },
    { "macroCons_", NULL, 0x2, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "macroKernel_", NULL, 0x2, "Lgeogebra.common.kernel.MacroKernel;", NULL, NULL,  },
    { "locusConsOrigElements_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/kernel/algos/ConstructionElement;>;",  },
    { "Qin_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "views_", NULL, 0x2, "I", NULL, NULL,  },
    { "paramCache_", NULL, 0x2, "[D", NULL, NULL,  },
    { "qcopyCache_", NULL, 0x2, "[Lgeogebra.common.awt.GPoint2D;", NULL, NULL,  },
    { "cacheIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "visibleEV1_", NULL, 0x0, "Z", NULL, NULL,  },
    { "visibleEV2_", NULL, 0x0, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoLocusSlider = { 2, "AlgoLocusSlider", "geogebra.common.kernel.algos", NULL, 0x1, 25, methods, 53, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoLocusSlider;
}

@end

void GeogebraCommonKernelAlgosAlgoLocusSlider_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *Q, GeogebraCommonKernelGeosGeoNumeric *P) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoLocusSlider_set_nearToScreenRect_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangle2D]);
  GeogebraCommonKernelAlgosAlgoLocusSlider_set_nearToScreenRect2_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newRectangle2D]);
  self->views_ = 1;
  GeogebraCommonKernelAlgosAlgoLocusSlider_setAndConsume_paramCache_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonKernelAlgosAlgoLocusSlider_setAndConsume_qcopyCache_(self, [IOSObjectArray newArrayWithLength:self->paramCache_->size_ type:GeogebraCommonAwtGPoint2D_class_()]);
  self->cacheIndex_ = 0;
  self->visibleEV1_ = NO;
  self->visibleEV2_ = NO;
  GeogebraCommonKernelAlgosAlgoLocusSlider_set_movingSlider_(self, P);
  GeogebraCommonKernelAlgosAlgoLocusSlider_set_locusPoint_(self, Q);
  GeogebraCommonKernelAlgosAlgoLocusSlider_setAndConsume_sliderMover_(self, new_GeogebraCommonKernelSliderMover_initWithGeogebraCommonKernelGeosGeoNumeric_(P));
  GeogebraCommonKernelAlgosAlgoLocusSlider_setAndConsume_QstartPos_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelAlgosAlgoLocusSlider_setAndConsume_PstartPos_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelAlgosAlgoLocusSlider_setAndConsume_locus_(self, new_GeogebraCommonKernelGeosGeoLocus_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelAlgosAlgoLocusSlider_init__(self);
  GeogebraCommonKernelAlgosAlgoLocusSlider_updateScreenBorders(self);
  [self setInputOutput];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:self];
  GeogebraCommonKernelAlgosAlgoLocusSlider_compute(self);
  [self->locus_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoLocusSlider *new_GeogebraCommonKernelAlgosAlgoLocusSlider_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *Q, GeogebraCommonKernelGeosGeoNumeric *P) {
  GeogebraCommonKernelAlgosAlgoLocusSlider *self = [GeogebraCommonKernelAlgosAlgoLocusSlider alloc];
  GeogebraCommonKernelAlgosAlgoLocusSlider_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, Q, P);
  return self;
}

void GeogebraCommonKernelAlgosAlgoLocusSlider_init__(GeogebraCommonKernelAlgosAlgoLocusSlider *self) {
  GeogebraCommonKernelAlgosAlgoLocusSlider_set_Qin_(self, [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->locusPoint_)) getAllPredecessors]);
  GeogebraCommonKernelAlgosAlgoLocusSlider_setAndConsume_locusConsOrigElements_(self, new_JavaUtilTreeSet_init());
  JavaUtilTreeSet *usedAlgoIds = [new_JavaUtilTreeSet_init() autorelease];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(self->Qin_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *parent = [it next];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(parent)) isLabelSet] && [parent isChildOfWithGeogebraCommonKernelGeosGeoElement:self->movingSlider_]) {
      GeogebraCommonKernelMacro_addDependentElementWithGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_(parent, self->locusConsOrigElements_, usedAlgoIds);
    }
  }
  jboolean isLabeledP = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->movingSlider_)) isLabelSet];
  if (!isLabeledP) {
    [self->movingSlider_ setLabelSimpleWithNSString:[self->movingSlider_ getDefaultLabel]];
    self->movingSlider_->labelSet_ = YES;
  }
  jboolean isLabeledQ = [self->locusPoint_ isLabelSet];
  if (!isLabeledQ) {
    [self->locusPoint_ setLabelSimpleWithNSString:[self->locusPoint_ getDefaultLabel]];
    self->locusPoint_->labelSet_ = YES;
  }
  [self->locusConsOrigElements_ addWithId:self->movingSlider_];
  GeogebraCommonKernelMacro_addDependentElementWithGeogebraCommonKernelGeosGeoElement_withJavaUtilSet_withJavaUtilSet_(self->locusPoint_, self->locusConsOrigElements_, usedAlgoIds);
  GeogebraCommonKernelAlgosAlgoLocusSlider_buildLocusMacroConstructionWithJavaUtilTreeSet_(self, self->locusConsOrigElements_);
  if (!isLabeledP) self->movingSlider_->labelSet_ = NO;
  if (!isLabeledQ) self->locusPoint_->labelSet_ = NO;
}

void GeogebraCommonKernelAlgosAlgoLocusSlider_buildLocusMacroConstructionWithJavaUtilTreeSet_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, JavaUtilTreeSet *locusConsElements) {
  GeogebraCommonKernelAlgosAlgoLocusSlider_set_macroKernel_(self, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) newMacroKernel]);
  [((GeogebraCommonKernelMacroKernel *) nil_chk(self->macroKernel_)) setGlobalVariableLookupWithBoolean:YES];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(locusConsElements)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelAlgosConstructionElement *ce = [it next];
    if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isGeoElement]) {
      GeogebraCommonKernelGeosGeoElement *geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoElement class]);
      [self->macroKernel_ addReservedLabelWithNSString:[geo getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    }
  }
  @try {
    NSString *locusConsXML = [((JavaLangStringBuilder *) nil_chk(GeogebraCommonKernelMacro_buildMacroXMLWithGeogebraCommonKernelKernel_withJavaUtilSet_(self->kernel_, locusConsElements))) description];
    [self->macroKernel_ loadXMLWithNSString:locusConsXML];
    GeogebraCommonKernelAlgosAlgoLocusSlider_set_Pcopy_(self, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->macroKernel_ lookupLabelWithNSString:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->movingSlider_)) getLabelSimple]], [GeogebraCommonKernelGeosGeoNumeric class]));
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->Pcopy_)) setFixedWithBoolean:NO];
    GeogebraCommonKernelAlgosAlgoLocusSlider_set_Qcopy_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([self->macroKernel_ lookupLabelWithNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->locusPoint_)) getLabelSimple]], [GeogebraCommonKernelGeosGeoPoint class]));
    GeogebraCommonKernelAlgosAlgoLocusSlider_set_macroCons_(self, [self->macroKernel_ getConstruction]);
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) setUndefined];
    GeogebraCommonKernelAlgosAlgoLocusSlider_set_macroCons_(self, nil);
  }
}

void GeogebraCommonKernelAlgosAlgoLocusSlider_resetMacroConstruction(GeogebraCommonKernelAlgosAlgoLocusSlider *self) {
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(self->locusConsOrigElements_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelAlgosConstructionElement *ce = [it next];
    if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isGeoElement]) {
      GeogebraCommonKernelGeosGeoElement *geoOrig = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoElement class]);
      if (![geoOrig isGeoFunction]) {
        GeogebraCommonKernelGeosGeoElement *geoCopy = [((GeogebraCommonKernelConstruction *) nil_chk(self->macroCons_)) lookupLabelWithNSString:[geoOrig getLabelSimple]];
        if (geoCopy != nil) {
          @try {
            [geoCopy setWithGeogebraCommonKernelGeosGeoElement:geoOrig];
            [geoCopy update];
          }
          @catch (JavaLangException *e) {
            GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"AlgoLocusSlider: error in resetMacroConstruction(): ", [((JavaLangException *) nil_chk(e)) getMessage]));
          }
        }
      }
    }
  }
}

void GeogebraCommonKernelAlgosAlgoLocusSlider_compute(GeogebraCommonKernelAlgosAlgoLocusSlider *self) {
  if (![((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->movingSlider_)) isDefined] || ![self->movingSlider_ isSlider] || ![self->movingSlider_ isAnimatable] || self->macroCons_ == nil) {
    [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) setUndefined];
    return;
  }
  [self updateScreenBordersIfNecessary];
  [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) clearPoints];
  GeogebraCommonKernelAlgosAlgoLocusSlider_clearCache(self);
  self->pointCount_ = 0;
  self->lastX_ = JavaLangDouble_MAX_VALUE;
  self->lastY_ = JavaLangDouble_MAX_VALUE;
  self->maxTimeExceeded_ = NO;
  self->foundDefined_ = NO;
  jboolean prevQcopyDefined = NO;
  jint max_runs;
  self->continuous_ = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isContinuous];
  [((GeogebraCommonKernelMacroKernel *) nil_chk(self->macroKernel_)) setContinuousWithBoolean:self->continuous_];
  GeogebraCommonKernelAlgosAlgoLocusSlider_resetMacroConstruction(self);
  [((GeogebraCommonKernelConstruction *) nil_chk(self->macroCons_)) updateConstruction];
  [((GeogebraCommonKernelSliderMover *) nil_chk(self->sliderMover_)) init__WithGeogebraCommonKernelGeosGeoNumeric:self->Pcopy_];
  if (self->continuous_) {
    max_runs = GeogebraCommonKernelGeosGeoLocusND_MAX_PATH_RUNS;
  }
  else {
    max_runs = 1;
  }
  GeogebraCommonKernelAlgosAlgoLocusSlider_pcopyUpdateCascade(self);
  prevQcopyDefined = ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->Qcopy_)) isDefined] && ![self->Qcopy_ isInfinite]);
  jint runs = 1;
  jint MAX_LOOPS = 2 * GeogebraCommonKernelPathMover_MAX_POINTS * self->views_;
  jint whileLoops = 0;
  do {
    jboolean finishedRun = NO;
    while (!finishedRun && !self->maxTimeExceeded_ && self->pointCount_ <= GeogebraCommonKernelPathMover_MAX_POINTS * self->views_ && whileLoops <= MAX_LOOPS) {
      whileLoops++;
      jboolean parameterJump = ![self->sliderMover_ getNextWithGeogebraCommonKernelGeosGeoNumeric:self->Pcopy_];
      jboolean stepChanged = NO;
      GeogebraCommonKernelAlgosAlgoLocusSlider_pcopyUpdateCascade(self);
      if ([self->Qcopy_ isDefined] && ![self->Qcopy_ isInfinite]) {
        if (!parameterJump) {
          while ([self->Qcopy_ isDefined] && ![self->Qcopy_ isInfinite] && !GeogebraCommonKernelAlgosAlgoLocusSlider_distanceOKWithGeogebraCommonKernelGeosGeoPoint_(self, self->Qcopy_) && !self->maxTimeExceeded_) {
            jboolean smallerStep = [self->sliderMover_ smallerStep];
            if (!smallerStep) break;
            stepChanged = YES;
            [self->sliderMover_ stepBack];
            [self->sliderMover_ getNextWithGeogebraCommonKernelGeosGeoNumeric:self->Pcopy_];
            GeogebraCommonKernelAlgosAlgoLocusSlider_pcopyUpdateCascade(self);
          }
          if ([self->Qcopy_ isDefined] && ![self->Qcopy_ isInfinite]) {
            GeogebraCommonKernelAlgosAlgoLocusSlider_insertPointWithDouble_withDouble_withBoolean_(self, self->Qcopy_->inhomX_, self->Qcopy_->inhomY_, GeogebraCommonKernelAlgosAlgoLocusSlider_distanceSmallWithGeogebraCommonKernelGeosGeoPoint_withBoolean_(self, self->Qcopy_, YES));
            prevQcopyDefined = YES;
          }
        }
        else {
          GeogebraCommonKernelAlgosAlgoLocusSlider_insertPointWithDouble_withDouble_withBoolean_(self, self->Qcopy_->inhomX_, self->Qcopy_->inhomY_, GeogebraCommonKernelAlgosAlgoLocusSlider_distanceSmallWithGeogebraCommonKernelGeosGeoPoint_withBoolean_(self, self->Qcopy_, YES));
          prevQcopyDefined = YES;
        }
      }
      else {
        if (prevQcopyDefined && !parameterJump) {
          [self->sliderMover_ stepBack];
          if (![self->sliderMover_ smallerStep]) {
            prevQcopyDefined = NO;
          }
          else stepChanged = YES;
        }
      }
      if (!stepChanged) {
        [self->sliderMover_ biggerStep];
      }
      if (![self->sliderMover_ hasNext]) {
        if (GeogebraCommonKernelAlgosAlgoLocusSlider_distanceSmallWithGeogebraCommonKernelGeosGeoPoint_withBoolean_(self, self->QstartPos_, YES)) {
          GeogebraCommonKernelAlgosAlgoLocusSlider_insertPointWithDouble_withDouble_withBoolean_(self, ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->QstartPos_))->inhomX_, self->QstartPos_->inhomY_, YES);
          finishedRun = YES;
        }
        else {
          while (![self->sliderMover_ hasNext] && [self->sliderMover_ smallerStep]) {
          }
          if (![self->sliderMover_ hasNext]) finishedRun = YES;
        }
      }
    }
    if (self->maxTimeExceeded_) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:@"AlgoLocusSlider: max time exceeded"];
      return;
    }
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->Pcopy_)) setWithGeogebraCommonKernelGeosGeoElement:self->PstartPos_];
    GeogebraCommonKernelAlgosAlgoLocusSlider_pcopyUpdateCascade(self);
    if (self->Qcopy_->inhomX_ != self->lastX_ || self->Qcopy_->inhomY_ != self->lastY_) GeogebraCommonKernelAlgosAlgoLocusSlider_insertPointWithDouble_withDouble_withBoolean_(self, self->Qcopy_->inhomX_, self->Qcopy_->inhomY_, GeogebraCommonKernelAlgosAlgoLocusSlider_distanceSmallWithGeogebraCommonKernelGeosGeoPoint_withBoolean_(self, self->Qcopy_, YES));
    if ([self->sliderMover_ hasPositiveOrientation]) {
      jboolean equal = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->QstartPos_)) isEqualWithGeogebraCommonKernelGeosGeoElement:self->Qcopy_ withDouble:GeogebraCommonKernelKernel_MIN_PRECISION];
      if (equal) break;
    }
    [self->sliderMover_ resetStartParameter];
    runs++;
  }
  while (runs < max_runs);
  [self->locus_ setDefinedWithBoolean:self->foundDefined_];
}

void GeogebraCommonKernelAlgosAlgoLocusSlider_pcopyUpdateCascade(GeogebraCommonKernelAlgosAlgoLocusSlider *self) {
  if (self->continuous_) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->Pcopy_)) updateCascade];
  }
  else {
    jdouble param = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->Pcopy_)) getValue];
    GeogebraCommonAwtGPoint2D *cachedPoint = GeogebraCommonKernelAlgosAlgoLocusSlider_getCachedPointWithDouble_(self, param);
    if (cachedPoint == nil) {
      jlong startTime = JavaLangSystem_currentTimeMillis();
      [self->Pcopy_ updateCascade];
      jlong updateTime = JavaLangSystem_currentTimeMillis() - startTime;
      if (updateTime > GeogebraCommonKernelAlgosAlgoLocusSlider_MAX_TIME_FOR_ONE_STEP_) {
        GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$J", @"AlgoLocusSlider: max time exceeded ", updateTime));
        self->maxTimeExceeded_ = YES;
      }
      GeogebraCommonKernelAlgosAlgoLocusSlider_putCachedPointWithDouble_withGeogebraCommonKernelGeosGeoPoint_(self, param, self->Qcopy_);
    }
    else {
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->Qcopy_)) setCoordsWithDouble:[cachedPoint getX] withDouble:[cachedPoint getY] withDouble:1.0];
    }
  }
  if (!self->foundDefined_ && [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->Qcopy_)) isDefined] && ![self->Qcopy_ isInfinite]) {
    [((GeogebraCommonKernelSliderMover *) nil_chk(self->sliderMover_)) init__WithGeogebraCommonKernelGeosGeoNumeric:self->Pcopy_];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->PstartPos_)) setWithGeogebraCommonKernelGeosGeoElement:self->Pcopy_];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->QstartPos_)) setWithGeogebraCommonKernelGeosGeoElement:self->Qcopy_];
    self->foundDefined_ = YES;
    GeogebraCommonKernelAlgosAlgoLocusSlider_insertPointWithDouble_withDouble_withBoolean_(self, self->Qcopy_->inhomX_, self->Qcopy_->inhomY_, NO);
  }
}

void GeogebraCommonKernelAlgosAlgoLocusSlider_clearCache(GeogebraCommonKernelAlgosAlgoLocusSlider *self) {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(self->paramCache_))->size_; i++) {
    *IOSDoubleArray_GetRef(self->paramCache_, i) = JavaLangDouble_NaN;
    if (IOSObjectArray_Get(nil_chk(self->qcopyCache_), i) == nil) IOSObjectArray_Set(self->qcopyCache_, i, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2D]);
  }
}

GeogebraCommonAwtGPoint2D *GeogebraCommonKernelAlgosAlgoLocusSlider_getCachedPointWithDouble_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, jdouble param) {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(self->paramCache_))->size_; i++) {
    if (param == IOSDoubleArray_Get(self->paramCache_, i)) return IOSObjectArray_Get(nil_chk(self->qcopyCache_), i);
  }
  return nil;
}

void GeogebraCommonKernelAlgosAlgoLocusSlider_putCachedPointWithDouble_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, jdouble param, GeogebraCommonKernelGeosGeoPoint *Qcopy) {
  self->cacheIndex_++;
  if (self->cacheIndex_ >= ((IOSDoubleArray *) nil_chk(self->paramCache_))->size_) self->cacheIndex_ = 0;
  *IOSDoubleArray_GetRef(self->paramCache_, self->cacheIndex_) = param;
  [((GeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(nil_chk(self->qcopyCache_), self->cacheIndex_))) setXWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(Qcopy))->inhomX_];
  [((GeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(self->qcopyCache_, self->cacheIndex_))) setYWithDouble:Qcopy->inhomY_];
}

void GeogebraCommonKernelAlgosAlgoLocusSlider_insertPointWithDouble_withDouble_withBoolean_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, jdouble x, jdouble y, jboolean lineTo) {
  self->pointCount_++;
  [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) insertPointWithDouble:x withDouble:y withBoolean:lineTo];
  self->lastX_ = x;
  self->lastY_ = y;
  self->lastFarAway_ = GeogebraCommonKernelAlgosAlgoLocusSlider_isFarAwayWithDouble_withDouble_(self, self->lastX_, self->lastY_);
  self->lastFarAway2_ = GeogebraCommonKernelAlgosAlgoLocusSlider_isFarAway2WithDouble_withDouble_(self, self->lastX_, self->lastY_);
}

jboolean GeogebraCommonKernelAlgosAlgoLocusSlider_isFarAwayWithDouble_withDouble_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, jdouble x, jdouble y) {
  jboolean farAway = (x > self->farXmax_ || x < self->farXmin_ || y > self->farYmax_ || y < self->farYmin_);
  return farAway;
}

jboolean GeogebraCommonKernelAlgosAlgoLocusSlider_isFarAway2WithDouble_withDouble_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, jdouble x, jdouble y) {
  jboolean farAway = (x > self->farXmax2_ || x < self->farXmin2_ || y > self->farYmax2_ || y < self->farYmin2_);
  return farAway;
}

jboolean GeogebraCommonKernelAlgosAlgoLocusSlider_distanceOKWithGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, GeogebraCommonKernelGeosGeoPoint *Q) {
  jboolean distanceOK, distanceOK2;
  if (self->lastFarAway_ && GeogebraCommonKernelAlgosAlgoLocusSlider_isFarAwayWithDouble_withDouble_(self, ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(Q))->inhomX_, Q->inhomY_)) {
    jdouble minX = self->lastX_;
    jdouble minY = self->lastY_;
    jdouble lengthX = Q->inhomX_ - self->lastX_;
    jdouble lengthY = Q->inhomY_ - self->lastY_;
    if (Q->inhomX_ < minX) minX = Q->inhomX_;
    if (Q->inhomY_ < minY) minY = Q->inhomY_;
    if (lengthX < 0) lengthX = -lengthX;
    if (lengthY < 0) lengthY = -lengthY;
    distanceOK = ![((id<GeogebraCommonAwtGRectangle2D>) nil_chk(self->nearToScreenRect_)) intersectsWithDouble:minX withDouble:minY withDouble:lengthX withDouble:lengthY];
  }
  else {
    distanceOK = GeogebraCommonKernelAlgosAlgoLocusSlider_distanceSmallWithGeogebraCommonKernelGeosGeoPoint_withBoolean_(self, Q, NO);
  }
  if (self->lastFarAway2_ && GeogebraCommonKernelAlgosAlgoLocusSlider_isFarAway2WithDouble_withDouble_(self, ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(Q))->inhomX_, Q->inhomY_)) {
    jdouble minX = self->lastX_;
    jdouble minY = self->lastY_;
    jdouble lengthX = Q->inhomX_ - self->lastX_;
    jdouble lengthY = Q->inhomY_ - self->lastY_;
    if (Q->inhomX_ < minX) minX = Q->inhomX_;
    if (Q->inhomY_ < minY) minY = Q->inhomY_;
    if (lengthX < 0) lengthX = -lengthX;
    if (lengthY < 0) lengthY = -lengthY;
    distanceOK2 = ![((id<GeogebraCommonAwtGRectangle2D>) nil_chk(self->nearToScreenRect2_)) intersectsWithDouble:minX withDouble:minY withDouble:lengthX withDouble:lengthY];
  }
  else {
    distanceOK2 = GeogebraCommonKernelAlgosAlgoLocusSlider_distanceSmallWithGeogebraCommonKernelGeosGeoPoint_withBoolean_(self, Q, NO);
  }
  return distanceOK && distanceOK2;
}

jboolean GeogebraCommonKernelAlgosAlgoLocusSlider_distanceSmallWithGeogebraCommonKernelGeosGeoPoint_withBoolean_(GeogebraCommonKernelAlgosAlgoLocusSlider *self, GeogebraCommonKernelGeosGeoPoint *Q, jboolean orInsteadOfAnd) {
  jboolean distSmall = JavaLangMath_absWithDouble_(((GeogebraCommonKernelGeosGeoPoint *) nil_chk(Q))->inhomX_ - self->lastX_) < self->maxXdist_ && JavaLangMath_absWithDouble_(Q->inhomY_ - self->lastY_) < self->maxYdist_;
  jboolean distSmall2 = JavaLangMath_absWithDouble_(Q->inhomX_ - self->lastX_) < self->maxXdist2_ && JavaLangMath_absWithDouble_(Q->inhomY_ - self->lastY_) < self->maxYdist2_;
  if (orInsteadOfAnd) {
    return (distSmall && self->visibleEV1_) || (distSmall2 && self->visibleEV2_);
  }
  return (distSmall || !self->visibleEV1_) && (distSmall2 || !self->visibleEV2_);
}

void GeogebraCommonKernelAlgosAlgoLocusSlider_updateScreenBorders(GeogebraCommonKernelAlgosAlgoLocusSlider *self) {
  self->visibleEV1_ = [self isVisibleInEV1];
  self->visibleEV2_ = [self isVisibleInEV2];
  if (self->visibleEV1_ && self->visibleEV2_) {
    self->views_ = 2;
  }
  else {
    self->views_ = 1;
  }
  if (self->visibleEV1_) {
    self->xmax_ = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getXmaxWithBoolean:YES withBoolean:NO];
    self->xmin_ = [self->kernel_ getXminWithBoolean:YES withBoolean:NO];
    self->ymax_ = [self->kernel_ getYmaxWithBoolean:YES withBoolean:NO];
    self->ymin_ = [self->kernel_ getYminWithBoolean:YES withBoolean:NO];
    jdouble widthRW = self->xmax_ - self->xmin_;
    jdouble heightRW = self->ymax_ - self->ymin_;
    self->maxXdist_ = GeogebraCommonKernelAlgosAlgoLocusSlider_MAX_X_PIXEL_DIST_ / [self->kernel_ getXscaleWithBoolean:YES withBoolean:NO];
    self->maxYdist_ = GeogebraCommonKernelAlgosAlgoLocusSlider_MAX_Y_PIXEL_DIST_ / [self->kernel_ getYscaleWithBoolean:YES withBoolean:NO];
    self->farXmin_ = self->xmin_ - widthRW / 2;
    self->farXmax_ = self->xmax_ + widthRW / 2;
    self->farYmin_ = self->ymin_ - heightRW / 2;
    self->farYmax_ = self->ymax_ + heightRW / 2;
    [((id<GeogebraCommonAwtGRectangle2D>) nil_chk(self->nearToScreenRect_)) setFrameWithDouble:self->farXmin_ withDouble:self->farYmin_ withDouble:self->farXmax_ - self->farXmin_ withDouble:self->farYmax_ - self->farYmin_];
  }
  if (self->visibleEV2_) {
    self->xmax2_ = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getXmaxWithBoolean:NO withBoolean:YES];
    self->xmin2_ = [self->kernel_ getXminWithBoolean:NO withBoolean:YES];
    self->ymax2_ = [self->kernel_ getYmaxWithBoolean:NO withBoolean:YES];
    self->ymin2_ = [self->kernel_ getYminWithBoolean:NO withBoolean:YES];
    jdouble widthRW = self->xmax2_ - self->xmin2_;
    jdouble heightRW = self->ymax2_ - self->ymin2_;
    self->maxXdist2_ = GeogebraCommonKernelAlgosAlgoLocusSlider_MAX_X_PIXEL_DIST_ / [self->kernel_ getXscaleWithBoolean:NO withBoolean:YES];
    self->maxYdist2_ = GeogebraCommonKernelAlgosAlgoLocusSlider_MAX_Y_PIXEL_DIST_ / [self->kernel_ getYscaleWithBoolean:NO withBoolean:YES];
    self->farXmin2_ = self->xmin2_ - widthRW / 2;
    self->farXmax2_ = self->xmax2_ + widthRW / 2;
    self->farYmin2_ = self->ymin2_ - heightRW / 2;
    self->farYmax2_ = self->ymax2_ + heightRW / 2;
    [((id<GeogebraCommonAwtGRectangle2D>) nil_chk(self->nearToScreenRect2_)) setFrameWithDouble:self->farXmin2_ withDouble:self->farYmin2_ withDouble:self->farXmax2_ - self->farXmin2_ withDouble:self->farYmax2_ - self->farYmin2_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoLocusSlider)
