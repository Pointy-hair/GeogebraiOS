//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoSurfaceCartesian3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoSurfaceCartesian3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSurfaceCartesian3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoSurfaceCartesianND.h"

#define GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_serialVersionUID 1LL

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D () {
 @public
  IOSObjectArray *coords_;
  IOSObjectArray *from_, *to_;
  IOSObjectArray *localVar_;
  GeogebraCommonKernelKernelNDGeoSurfaceCartesianND *surface_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D, coords_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D, from_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D, to_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D, localVar_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D, surface_, GeogebraCommonKernelKernelNDGeoSurfaceCartesianND *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D, serialVersionUID, jlong)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D *self);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
      withGeogebraCommonKernelArithmeticNumberValueArray:(IOSObjectArray *)coords
             withGeogebraCommonKernelGeosGeoNumericArray:(IOSObjectArray *)localVar
      withGeogebraCommonKernelArithmeticNumberValueArray:(IOSObjectArray *)from
      withGeogebraCommonKernelArithmeticNumberValueArray:(IOSObjectArray *)to {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelGeosGeoNumericArray_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelArithmeticNumberValueArray_(self, cons, label, coords, localVar, from, to);
  return self;
}

- (GeogebraCommonKernelKernelNDGeoSurfaceCartesianND *)createCurveWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                   withGeogebraCommonKernelArithmeticFunctionNVarArray:(IOSObjectArray *)fun {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoSurfaceCartesian3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVarArray_(cons, fun) autorelease];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Surface();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(coords_))->size_ + 3 * ((IOSObjectArray *) nil_chk(localVar_))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()]);
  for (jint i = 0; i < coords_->size_; i++) IOSObjectArray_Set(input_, i, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(IOSObjectArray_Get(coords_, i))) toGeoElement]);
  for (jint i = 0; i < localVar_->size_; i++) {
    IOSObjectArray_Set(input_, coords_->size_ + 3 * i, IOSObjectArray_Get(localVar_, i));
    IOSObjectArray_Set(input_, coords_->size_ + 3 * i + 1, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(IOSObjectArray_Get(nil_chk(from_), i))) toGeoElement]);
    IOSObjectArray_Set(input_, coords_->size_ + 3 * i + 2, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(IOSObjectArray_Get(nil_chk(to_), i))) toGeoElement]);
  }
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:surface_];
  [self setDependencies];
}

- (GeogebraCommonKernelKernelNDGeoSurfaceCartesianND *)getSurface {
  return surface_;
}

- (void)compute {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_compute(self);
}

- (void)dealloc {
  RELEASE_(coords_);
  RELEASE_(from_);
  RELEASE_(to_);
  RELEASE_(localVar_);
  RELEASE_(surface_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValueArray:withGeogebraCommonKernelGeosGeoNumericArray:withGeogebraCommonKernelArithmeticNumberValueArray:withGeogebraCommonKernelArithmeticNumberValueArray:", "AlgoSurfaceCartesian3D", NULL, 0x1, NULL, NULL },
    { "createCurveWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticFunctionNVarArray:", "createCurve", "Lgeogebra.common.kernel.kernelND.GeoSurfaceCartesianND;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getSurface", NULL, "Lgeogebra.common.kernel.kernelND.GeoSurfaceCartesianND;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_serialVersionUID },
    { "coords_", NULL, 0x2, "[Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "from_", NULL, 0x2, "[Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "to_", NULL, 0x2, "[Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "localVar_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "surface_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoSurfaceCartesianND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D = { 2, "AlgoSurfaceCartesian3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 6, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelGeosGeoNumericArray_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelArithmeticNumberValueArray_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D *self, GeogebraCommonKernelConstruction *cons, NSString *label, IOSObjectArray *coords, IOSObjectArray *localVar, IOSObjectArray *from, IOSObjectArray *to) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_set_coords_(self, coords);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_set_from_(self, from);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_set_to_(self, to);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_set_localVar_(self, localVar);
  IOSObjectArray *funVar = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(localVar))->size_ type:GeogebraCommonKernelArithmeticFunctionVariable_class_()];
  for (jint i = 0; i < localVar->size_; i++) {
    IOSObjectArray_SetAndConsume(funVar, i, new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_));
    [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(funVar, i))) setVarStringWithNSString:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(IOSObjectArray_Get(localVar, i))) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  IOSObjectArray *exp = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(coords))->size_ type:GeogebraCommonKernelArithmeticExpressionNode_class_()];
  IOSObjectArray *fun = [IOSObjectArray arrayWithLength:coords->size_ type:GeogebraCommonKernelArithmeticFunctionNVar_class_()];
  for (jint i = 0; i < coords->size_; i++) {
    IOSObjectArray_Set(exp, i, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) convertNumberValueToExpressionNodeWithGeogebraCommonKernelGeosGeoElement:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(IOSObjectArray_Get(coords, i))) toGeoElement]]);
    for (jint j = 0; j < localVar->size_; j++) {
      IOSObjectArray_Set(exp, i, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(exp, i))) replaceWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(localVar, j) withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(funVar, j)])) wrap]);
    }
    IOSObjectArray_SetAndConsume(fun, i, new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_(IOSObjectArray_Get(exp, i), funVar));
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_set_surface_(self, [self createCurveWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelArithmeticFunctionNVarArray:fun]);
  [self setInputOutput];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_compute(self);
  [((GeogebraCommonKernelKernelNDGeoSurfaceCartesianND *) nil_chk(self->surface_)) setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelGeosGeoNumericArray_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelArithmeticNumberValueArray_(GeogebraCommonKernelConstruction *cons, NSString *label, IOSObjectArray *coords, IOSObjectArray *localVar, IOSObjectArray *from, IOSObjectArray *to) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelGeosGeoNumericArray_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelArithmeticNumberValueArray_(self, cons, label, coords, localVar, from, to);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D *self) {
  IOSDoubleArray *min = [IOSDoubleArray arrayWithLength:((IOSObjectArray *) nil_chk(self->from_))->size_];
  IOSDoubleArray *max = [IOSDoubleArray arrayWithLength:((IOSObjectArray *) nil_chk(self->to_))->size_];
  for (jint i = 0; i < self->from_->size_; i++) {
    *IOSDoubleArray_GetRef(min, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(IOSObjectArray_Get(self->from_, i))) getDouble];
    *IOSDoubleArray_GetRef(max, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(IOSObjectArray_Get(self->to_, i))) getDouble];
  }
  [((GeogebraCommonKernelKernelNDGeoSurfaceCartesianND *) nil_chk(self->surface_)) setIntervalsWithDoubleArray:min withDoubleArray:max];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoSurfaceCartesian3D)
