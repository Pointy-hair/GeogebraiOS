//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/geomgraph/PlanarGraph.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/CGAlgorithms.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Location.h"
#include "com/vividsolutions/jts/geomgraph/DirectedEdge.h"
#include "com/vividsolutions/jts/geomgraph/DirectedEdgeStar.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/EdgeEnd.h"
#include "com/vividsolutions/jts/geomgraph/EdgeEndStar.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersectionList.h"
#include "com/vividsolutions/jts/geomgraph/Label.h"
#include "com/vividsolutions/jts/geomgraph/Node.h"
#include "com/vividsolutions/jts/geomgraph/NodeFactory.h"
#include "com/vividsolutions/jts/geomgraph/NodeMap.h"
#include "com/vividsolutions/jts/geomgraph/PlanarGraph.h"
#include "com/vividsolutions/jts/geomgraph/Quadrant.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsGeomgraphPlanarGraph ()

- (jboolean)matchInSameDirectionWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p0
                                withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1
                                withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)ep0
                                withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)ep1;

@end

__attribute__((unused)) static jboolean ComVividsolutionsJtsGeomgraphPlanarGraph_matchInSameDirectionWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsGeomgraphPlanarGraph *self, ComVividsolutionsJtsGeomCoordinate *p0, ComVividsolutionsJtsGeomCoordinate *p1, ComVividsolutionsJtsGeomCoordinate *ep0, ComVividsolutionsJtsGeomCoordinate *ep1);

@implementation ComVividsolutionsJtsGeomgraphPlanarGraph

+ (void)linkResultDirectedEdgesWithJavaUtilCollection:(id<JavaUtilCollection>)nodes {
  ComVividsolutionsJtsGeomgraphPlanarGraph_linkResultDirectedEdgesWithJavaUtilCollection_(nodes);
}

- (instancetype)initWithComVividsolutionsJtsGeomgraphNodeFactory:(ComVividsolutionsJtsGeomgraphNodeFactory *)nodeFact {
  ComVividsolutionsJtsGeomgraphPlanarGraph_initWithComVividsolutionsJtsGeomgraphNodeFactory_(self, nodeFact);
  return self;
}

- (instancetype)init {
  ComVividsolutionsJtsGeomgraphPlanarGraph_init(self);
  return self;
}

- (id<JavaUtilIterator>)getEdgeIterator {
  return [((id<JavaUtilList>) nil_chk(edges_)) iterator];
}

- (id<JavaUtilCollection>)getEdgeEnds {
  return edgeEndList_;
}

- (jboolean)isBoundaryNodeWithInt:(jint)geomIndex
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord {
  ComVividsolutionsJtsGeomgraphNode *node = [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(nodes_)) findWithComVividsolutionsJtsGeomCoordinate:coord];
  if (node == nil) return NO;
  ComVividsolutionsJtsGeomgraphLabel *label = [((ComVividsolutionsJtsGeomgraphNode *) nil_chk(node)) getLabel];
  if (label != nil && [label getLocationWithInt:geomIndex] == ComVividsolutionsJtsGeomLocation_BOUNDARY) return YES;
  return NO;
}

- (void)insertEdgeWithComVividsolutionsJtsGeomgraphEdge:(ComVividsolutionsJtsGeomgraphEdge *)e {
  [((id<JavaUtilList>) nil_chk(edges_)) addWithId:e];
}

- (void)addWithComVividsolutionsJtsGeomgraphEdgeEnd:(ComVividsolutionsJtsGeomgraphEdgeEnd *)e {
  [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(nodes_)) addWithComVividsolutionsJtsGeomgraphEdgeEnd:e];
  [((id<JavaUtilList>) nil_chk(edgeEndList_)) addWithId:e];
}

- (id<JavaUtilIterator>)getNodeIterator {
  return [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(nodes_)) iterator];
}

- (id<JavaUtilCollection>)getNodes {
  return [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(nodes_)) values];
}

- (ComVividsolutionsJtsGeomgraphNode *)addNodeWithComVividsolutionsJtsGeomgraphNode:(ComVividsolutionsJtsGeomgraphNode *)node {
  return [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(nodes_)) addNodeWithComVividsolutionsJtsGeomgraphNode:node];
}

- (ComVividsolutionsJtsGeomgraphNode *)addNodeWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord {
  return [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(nodes_)) addNodeWithComVividsolutionsJtsGeomCoordinate:coord];
}

- (ComVividsolutionsJtsGeomgraphNode *)findWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord {
  return [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(nodes_)) findWithComVividsolutionsJtsGeomCoordinate:coord];
}

- (void)addEdgesWithJavaUtilList:(id<JavaUtilList>)edgesToAdd {
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(edgesToAdd)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdge class]);
    [((id<JavaUtilList>) nil_chk(edges_)) addWithId:e];
    ComVividsolutionsJtsGeomgraphDirectedEdge *de1 = [new_ComVividsolutionsJtsGeomgraphDirectedEdge_initWithComVividsolutionsJtsGeomgraphEdge_withBoolean_(e, YES) autorelease];
    ComVividsolutionsJtsGeomgraphDirectedEdge *de2 = [new_ComVividsolutionsJtsGeomgraphDirectedEdge_initWithComVividsolutionsJtsGeomgraphEdge_withBoolean_(e, NO) autorelease];
    [de1 setSymWithComVividsolutionsJtsGeomgraphDirectedEdge:de2];
    [de2 setSymWithComVividsolutionsJtsGeomgraphDirectedEdge:de1];
    [self addWithComVividsolutionsJtsGeomgraphEdgeEnd:de1];
    [self addWithComVividsolutionsJtsGeomgraphEdgeEnd:de2];
  }
}

- (void)linkResultDirectedEdges {
  for (id<JavaUtilIterator> nodeit = [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(nodes_)) iterator]; [((id<JavaUtilIterator>) nil_chk(nodeit)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphNode *node = (ComVividsolutionsJtsGeomgraphNode *) check_class_cast([nodeit next], [ComVividsolutionsJtsGeomgraphNode class]);
    [((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) nil_chk(((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) check_class_cast([((ComVividsolutionsJtsGeomgraphNode *) nil_chk(node)) getEdges], [ComVividsolutionsJtsGeomgraphDirectedEdgeStar class])))) linkResultDirectedEdges];
  }
}

- (void)linkAllDirectedEdges {
  for (id<JavaUtilIterator> nodeit = [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(nodes_)) iterator]; [((id<JavaUtilIterator>) nil_chk(nodeit)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphNode *node = (ComVividsolutionsJtsGeomgraphNode *) check_class_cast([nodeit next], [ComVividsolutionsJtsGeomgraphNode class]);
    [((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) nil_chk(((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) check_class_cast([((ComVividsolutionsJtsGeomgraphNode *) nil_chk(node)) getEdges], [ComVividsolutionsJtsGeomgraphDirectedEdgeStar class])))) linkAllDirectedEdges];
  }
}

- (ComVividsolutionsJtsGeomgraphEdgeEnd *)findEdgeEndWithComVividsolutionsJtsGeomgraphEdge:(ComVividsolutionsJtsGeomgraphEdge *)e {
  for (id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk([self getEdgeEnds])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdgeEnd *ee = (ComVividsolutionsJtsGeomgraphEdgeEnd *) check_class_cast([i next], [ComVividsolutionsJtsGeomgraphEdgeEnd class]);
    if ([((ComVividsolutionsJtsGeomgraphEdgeEnd *) nil_chk(ee)) getEdge] == e) return ee;
  }
  return nil;
}

- (ComVividsolutionsJtsGeomgraphEdge *)findEdgeWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p0
                                               withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1 {
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(edges_)) size]; i++) {
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([edges_ getWithInt:i], [ComVividsolutionsJtsGeomgraphEdge class]);
    IOSObjectArray *eCoord = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e)) getCoordinates];
    if ([((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p0)) isEqual:IOSObjectArray_Get(nil_chk(eCoord), 0)] && [((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p1)) isEqual:IOSObjectArray_Get(eCoord, 1)]) return e;
  }
  return nil;
}

- (ComVividsolutionsJtsGeomgraphEdge *)findEdgeInSameDirectionWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p0
                                                              withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1 {
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(edges_)) size]; i++) {
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([edges_ getWithInt:i], [ComVividsolutionsJtsGeomgraphEdge class]);
    IOSObjectArray *eCoord = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e)) getCoordinates];
    if (ComVividsolutionsJtsGeomgraphPlanarGraph_matchInSameDirectionWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self, p0, p1, IOSObjectArray_Get(nil_chk(eCoord), 0), IOSObjectArray_Get(eCoord, 1))) return e;
    if (ComVividsolutionsJtsGeomgraphPlanarGraph_matchInSameDirectionWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self, p0, p1, IOSObjectArray_Get(eCoord, eCoord->size_ - 1), IOSObjectArray_Get(eCoord, eCoord->size_ - 2))) return e;
  }
  return nil;
}

- (jboolean)matchInSameDirectionWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p0
                                withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1
                                withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)ep0
                                withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)ep1 {
  return ComVividsolutionsJtsGeomgraphPlanarGraph_matchInSameDirectionWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self, p0, p1, ep0, ep1);
}

- (void)printEdgesWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:@"Edges:"];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(edges_)) size]; i++) {
    [outArg printlnWithNSString:JreStrcat("$IC", @"edge ", i, ':')];
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([edges_ getWithInt:i], [ComVividsolutionsJtsGeomgraphEdge class]);
    [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e)) printWithJavaIoPrintStream:outArg];
    [((ComVividsolutionsJtsGeomgraphEdgeIntersectionList *) nil_chk(e->eiList_)) printWithJavaIoPrintStream:outArg];
  }
}

- (void)debugPrintWithId:(id)o {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printWithId:o];
}

- (void)debugPrintlnWithId:(id)o {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithId:o];
}

- (void)dealloc {
  RELEASE_(edges_);
  RELEASE_(nodes_);
  RELEASE_(edgeEndList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "linkResultDirectedEdgesWithJavaUtilCollection:", "linkResultDirectedEdges", "V", 0x9, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomgraphNodeFactory:", "PlanarGraph", NULL, 0x1, NULL, NULL },
    { "init", "PlanarGraph", NULL, 0x1, NULL, NULL },
    { "getEdgeIterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "getEdgeEnds", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "isBoundaryNodeWithInt:withComVividsolutionsJtsGeomCoordinate:", "isBoundaryNode", "Z", 0x1, NULL, NULL },
    { "insertEdgeWithComVividsolutionsJtsGeomgraphEdge:", "insertEdge", "V", 0x4, NULL, NULL },
    { "addWithComVividsolutionsJtsGeomgraphEdgeEnd:", "add", "V", 0x1, NULL, NULL },
    { "getNodeIterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "getNodes", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "addNodeWithComVividsolutionsJtsGeomgraphNode:", "addNode", "Lcom.vividsolutions.jts.geomgraph.Node;", 0x1, NULL, NULL },
    { "addNodeWithComVividsolutionsJtsGeomCoordinate:", "addNode", "Lcom.vividsolutions.jts.geomgraph.Node;", 0x1, NULL, NULL },
    { "findWithComVividsolutionsJtsGeomCoordinate:", "find", "Lcom.vividsolutions.jts.geomgraph.Node;", 0x1, NULL, NULL },
    { "addEdgesWithJavaUtilList:", "addEdges", "V", 0x1, NULL, NULL },
    { "linkResultDirectedEdges", NULL, "V", 0x1, NULL, NULL },
    { "linkAllDirectedEdges", NULL, "V", 0x1, NULL, NULL },
    { "findEdgeEndWithComVividsolutionsJtsGeomgraphEdge:", "findEdgeEnd", "Lcom.vividsolutions.jts.geomgraph.EdgeEnd;", 0x1, NULL, NULL },
    { "findEdgeWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:", "findEdge", "Lcom.vividsolutions.jts.geomgraph.Edge;", 0x1, NULL, NULL },
    { "findEdgeInSameDirectionWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:", "findEdgeInSameDirection", "Lcom.vividsolutions.jts.geomgraph.Edge;", 0x1, NULL, NULL },
    { "matchInSameDirectionWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:", "matchInSameDirection", "Z", 0x2, NULL, NULL },
    { "printEdgesWithJavaIoPrintStream:", "printEdges", "V", 0x1, NULL, NULL },
    { "debugPrintWithId:", "debugPrint", "V", 0x0, NULL, NULL },
    { "debugPrintlnWithId:", "debugPrintln", "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "edges_", NULL, 0x4, "Ljava.util.List;", NULL, NULL,  },
    { "nodes_", NULL, 0x4, "Lcom.vividsolutions.jts.geomgraph.NodeMap;", NULL, NULL,  },
    { "edgeEndList_", NULL, 0x4, "Ljava.util.List;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomgraphPlanarGraph = { 2, "PlanarGraph", "com.vividsolutions.jts.geomgraph", NULL, 0x1, 23, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomgraphPlanarGraph;
}

@end

void ComVividsolutionsJtsGeomgraphPlanarGraph_linkResultDirectedEdgesWithJavaUtilCollection_(id<JavaUtilCollection> nodes) {
  ComVividsolutionsJtsGeomgraphPlanarGraph_initialize();
  for (id<JavaUtilIterator> nodeit = [((id<JavaUtilCollection>) nil_chk(nodes)) iterator]; [((id<JavaUtilIterator>) nil_chk(nodeit)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphNode *node = (ComVividsolutionsJtsGeomgraphNode *) check_class_cast([nodeit next], [ComVividsolutionsJtsGeomgraphNode class]);
    [((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) nil_chk(((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) check_class_cast([((ComVividsolutionsJtsGeomgraphNode *) nil_chk(node)) getEdges], [ComVividsolutionsJtsGeomgraphDirectedEdgeStar class])))) linkResultDirectedEdges];
  }
}

void ComVividsolutionsJtsGeomgraphPlanarGraph_initWithComVividsolutionsJtsGeomgraphNodeFactory_(ComVividsolutionsJtsGeomgraphPlanarGraph *self, ComVividsolutionsJtsGeomgraphNodeFactory *nodeFact) {
  NSObject_init(self);
  ComVividsolutionsJtsGeomgraphPlanarGraph_setAndConsume_edges_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsGeomgraphPlanarGraph_setAndConsume_edgeEndList_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsGeomgraphPlanarGraph_setAndConsume_nodes_(self, new_ComVividsolutionsJtsGeomgraphNodeMap_initWithComVividsolutionsJtsGeomgraphNodeFactory_(nodeFact));
}

ComVividsolutionsJtsGeomgraphPlanarGraph *new_ComVividsolutionsJtsGeomgraphPlanarGraph_initWithComVividsolutionsJtsGeomgraphNodeFactory_(ComVividsolutionsJtsGeomgraphNodeFactory *nodeFact) {
  ComVividsolutionsJtsGeomgraphPlanarGraph *self = [ComVividsolutionsJtsGeomgraphPlanarGraph alloc];
  ComVividsolutionsJtsGeomgraphPlanarGraph_initWithComVividsolutionsJtsGeomgraphNodeFactory_(self, nodeFact);
  return self;
}

void ComVividsolutionsJtsGeomgraphPlanarGraph_init(ComVividsolutionsJtsGeomgraphPlanarGraph *self) {
  NSObject_init(self);
  ComVividsolutionsJtsGeomgraphPlanarGraph_setAndConsume_edges_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsGeomgraphPlanarGraph_setAndConsume_edgeEndList_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsGeomgraphPlanarGraph_setAndConsume_nodes_(self, new_ComVividsolutionsJtsGeomgraphNodeMap_initWithComVividsolutionsJtsGeomgraphNodeFactory_([new_ComVividsolutionsJtsGeomgraphNodeFactory_init() autorelease]));
}

ComVividsolutionsJtsGeomgraphPlanarGraph *new_ComVividsolutionsJtsGeomgraphPlanarGraph_init() {
  ComVividsolutionsJtsGeomgraphPlanarGraph *self = [ComVividsolutionsJtsGeomgraphPlanarGraph alloc];
  ComVividsolutionsJtsGeomgraphPlanarGraph_init(self);
  return self;
}

jboolean ComVividsolutionsJtsGeomgraphPlanarGraph_matchInSameDirectionWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsGeomgraphPlanarGraph *self, ComVividsolutionsJtsGeomCoordinate *p0, ComVividsolutionsJtsGeomCoordinate *p1, ComVividsolutionsJtsGeomCoordinate *ep0, ComVividsolutionsJtsGeomCoordinate *ep1) {
  if (![((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p0)) isEqual:ep0]) return NO;
  if (ComVividsolutionsJtsAlgorithmCGAlgorithms_computeOrientationWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(p0, p1, ep1) == ComVividsolutionsJtsAlgorithmCGAlgorithms_COLLINEAR && ComVividsolutionsJtsGeomgraphQuadrant_quadrantWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(p0, p1) == ComVividsolutionsJtsGeomgraphQuadrant_quadrantWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(ep0, ep1)) return YES;
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomgraphPlanarGraph)
