//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidianForPlane/EuclidianControllerForPlaneCompanion.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "geogebra/common/euclidian/event/AbstractEvent.h"
#include "geogebra/common/geogebra3D/euclidianFor3D/EuclidianControllerFor3DCompanion.h"
#include "geogebra/common/geogebra3D/euclidianForPlane/EuclidianControllerForPlaneCompanion.h"
#include "geogebra/common/geogebra3D/euclidianForPlane/EuclidianViewForPlaneCompanion.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/Region.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion ()

- (GeogebraCommonKernelMatrixCoords *)getCoordsFromViewWithDouble:(jdouble)x
                                                       withDouble:(jdouble)y;

@end

__attribute__((unused)) static GeogebraCommonKernelMatrixCoords *GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion_getCoordsFromViewWithDouble_withDouble_(GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion *self, jdouble x, jdouble y);

@implementation GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion

- (instancetype)initWithGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)ec {
  GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion_initWithGeogebraCommonEuclidianEuclidianController_(self, ec);
  return self;
}

- (IOSObjectArray *)createCircle2WithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p0
                                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1 {
  return [self createCircle2For3DWithGeogebraCommonKernelKernelNDGeoPointND:p0 withGeogebraCommonKernelKernelNDGeoPointND:p1];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)circleWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)center
                                         withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)radius {
  return [self circleFor3DWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelKernelNDGeoPointND:center withGeogebraCommonKernelArithmeticNumberValue:radius];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getSingleIntersectionPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                                                                        withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                                                                   withBoolean:(jboolean)coords2D {
  return [super getSingleIntersectionPointWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b withBoolean:NO];
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsFromViewWithDouble:(jdouble)x
                                                       withDouble:(jdouble)y {
  return GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion_getCoordsFromViewWithDouble_withDouble_(self, x, y);
}

- (void)movePointWithBoolean:(jboolean)repaint
withGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event {
  GeogebraCommonKernelMatrixCoords *coords = GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion_getCoordsFromViewWithDouble_withDouble_(self, ((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->xRW_, ec_->yRW_);
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(ec_->movedGeoPoint_, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(ec_->movedGeoPoint_, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) setWillingCoordsUndefined];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(ec_->movedGeoPoint_, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) setWillingDirectionUndefined];
  }
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(ec_->movedGeoPoint_)) setCoordsWithGeogebraCommonKernelMatrixCoords:coords withBoolean:YES];
  [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(ec_->movedGeoPoint_, [GeogebraCommonKernelGeosGeoElement class])) updateCascade];
  ec_->movedGeoPointDragged_ = YES;
  if (repaint) [((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) notifyRepaint];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)createNewPointWithBoolean:(jboolean)forPreviewable
                                                            withBoolean:(jboolean)complex {
  GeogebraCommonKernelMatrixCoords *coords = GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion_getCoordsFromViewWithDouble_withDouble_(self, ((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->xRW_, ec_->yRW_);
  id<GeogebraCommonKernelKernelNDGeoPointND> ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) getManager3D])) Point3DInWithNSString:nil withGeogebraCommonKernelRegion:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(ec_->view_)) getPlaneContaining] withGeogebraCommonKernelMatrixCoords:coords withBoolean:!forPreviewable withBoolean:NO];
  return ret;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)createNewPointWithBoolean:(jboolean)forPreviewable
                                           withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
                                                            withBoolean:(jboolean)complex {
  GeogebraCommonKernelMatrixCoords *coords = GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion_getCoordsFromViewWithDouble_withDouble_(self, ((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->xRW_, ec_->yRW_);
  return [self createNewPointWithNSString:nil withBoolean:forPreviewable withGeogebraCommonKernelPath:path withDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ] withBoolean:complex withBoolean:NO];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)createNewPointWithBoolean:(jboolean)forPreviewable
                                         withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region
                                                            withBoolean:(jboolean)complex {
  GeogebraCommonKernelMatrixCoords *coords = GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion_getCoordsFromViewWithDouble_withDouble_(self, ((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->xRW_, ec_->yRW_);
  return [ec_ createNewPointWithNSString:nil withBoolean:forPreviewable withGeogebraCommonKernelRegion:region withDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ] withBoolean:complex withBoolean:NO];
}

- (void)processModeLockWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonKernelMatrixCoords *coords = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD3]];
  ec_->xRW_ = [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX];
  ec_->yRW_ = [coords getY];
}

- (void)processModeLockWithGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path {
  id<GeogebraCommonKernelKernelNDGeoPointND> p = [self createNewPointWithBoolean:YES withGeogebraCommonKernelPath:path withBoolean:NO];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [GeogebraCommonKernelGeosGeoElement class])))) update];
  GeogebraCommonKernelMatrixCoords *coords = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) getInhomCoordsInD3]];
  ec_->xRW_ = [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX];
  ec_->yRW_ = [coords getY];
}

- (JavaUtilArrayList *)removeParentsOfViewWithJavaUtilArrayList:(JavaUtilArrayList *)list {
  JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(list)) if ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->view_)) isMoveableWithGeogebraCommonKernelGeosGeoElement:geo]) [ret addWithId:geo];
  return ret;
}

- (jboolean)viewOrientationForClockwiseWithBoolean:(jboolean)clockwise {
  return [((GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(((GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) check_class_cast([((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->view_)) getCompanion], [GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion class])))) viewOrientationForClockwiseWithBoolean:clockwise];
}

- (IOSObjectArray *)rotateByAngleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoRot
                             withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)phi
                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) Rotate3DWithNSString:nil withGeogebraCommonKernelGeosGeoElement:geoRot withGeogebraCommonKernelGeosGeoNumberValue:phi withGeogebraCommonKernelKernelNDGeoPointND:Q withGeogebraCommonKernelKernelNDGeoDirectionND:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(ec_->view_)) getDirection]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianController:", "EuclidianControllerForPlaneCompanion", NULL, 0x1, NULL, NULL },
    { "createCircle2WithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "createCircle2", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "circleWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "circle", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "getSingleIntersectionPointWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withBoolean:", "getSingleIntersectionPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getCoordsFromViewWithDouble:withDouble:", "getCoordsFromView", "Lgeogebra.common.kernel.Matrix.Coords;", 0x2, NULL, NULL },
    { "movePointWithBoolean:withGeogebraCommonEuclidianEventAbstractEvent:", "movePoint", "V", 0x1, NULL, NULL },
    { "createNewPointWithBoolean:withBoolean:", "createNewPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "createNewPointWithBoolean:withGeogebraCommonKernelPath:withBoolean:", "createNewPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "createNewPointWithBoolean:withGeogebraCommonKernelRegion:withBoolean:", "createNewPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "processModeLockWithGeogebraCommonKernelKernelNDGeoPointND:", "processModeLock", "V", 0x4, NULL, NULL },
    { "processModeLockWithGeogebraCommonKernelPath:", "processModeLock", "V", 0x4, NULL, NULL },
    { "removeParentsOfViewWithJavaUtilArrayList:", "removeParentsOfView", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "viewOrientationForClockwiseWithBoolean:", "viewOrientationForClockwise", "Z", 0x1, NULL, NULL },
    { "rotateByAngleWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotateByAngle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion = { 2, "EuclidianControllerForPlaneCompanion", "geogebra.common.geogebra3D.euclidianForPlane", NULL, 0x1, 14, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion;
}

@end

void GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion_initWithGeogebraCommonEuclidianEuclidianController_(GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion *self, GeogebraCommonEuclidianEuclidianController *ec) {
  GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion_initWithGeogebraCommonEuclidianEuclidianController_(self, ec);
}

GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion *new_GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion_initWithGeogebraCommonEuclidianEuclidianController_(GeogebraCommonEuclidianEuclidianController *ec) {
  GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion *self = [GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion alloc];
  GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion_initWithGeogebraCommonEuclidianEuclidianController_(self, ec);
  return self;
}

GeogebraCommonKernelMatrixCoords *GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion_getCoordsFromViewWithDouble_withDouble_(GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion *self, jdouble x, jdouble y) {
  return [((GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(((GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) check_class_cast([((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(self->ec_))->view_)) getCompanion], [GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion class])))) getCoordsFromViewWithDouble:x withDouble:y];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianControllerForPlaneCompanion)
