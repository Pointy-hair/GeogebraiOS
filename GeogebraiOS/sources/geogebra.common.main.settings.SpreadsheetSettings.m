//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/main/settings/SpreadsheetSettings.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/awt/GDimension.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/main/settings/AbstractSettings.h"
#include "geogebra/common/main/settings/SpreadsheetSettings.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/Set.h"

@interface GeogebraCommonMainSettingsSpreadsheetSettings () {
 @public
  jboolean showFormulaBar__;
  jboolean showGrid__;
  jboolean showRowHeader__;
  jboolean showColumnHeader__;
  jboolean showVScrollBar__;
  jboolean showHScrollBar__;
  jboolean isColumnSelect__;
  jboolean allowSpecialEditor__;
  jboolean allowToolTips__;
  jboolean equalsRequired__;
  jboolean enableAutoComplete_;
  JavaUtilHashMap *widthMap_;
  JavaUtilHashMap *heightMap_;
  jint preferredColumnWidth__;
  jint preferredRowHeight__;
  NSString *cellFormat__;
  GeogebraCommonAwtGPoint *scrollPosition__;
  GeogebraCommonAwtGPoint *selectedCell__;
  GeogebraCommonAwtGDimension *preferredSize__;
  jint HScrollBarValue_;
  jint VScrollBarValue_;
}

- (jboolean)hasCellFormat;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonMainSettingsSpreadsheetSettings, widthMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonMainSettingsSpreadsheetSettings, heightMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonMainSettingsSpreadsheetSettings, cellFormat__, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonMainSettingsSpreadsheetSettings, scrollPosition__, GeogebraCommonAwtGPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonMainSettingsSpreadsheetSettings, selectedCell__, GeogebraCommonAwtGPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonMainSettingsSpreadsheetSettings, preferredSize__, GeogebraCommonAwtGDimension *)

__attribute__((unused)) static jboolean GeogebraCommonMainSettingsSpreadsheetSettings_hasCellFormat(GeogebraCommonMainSettingsSpreadsheetSettings *self);

@implementation GeogebraCommonMainSettingsSpreadsheetSettings

- (jboolean)hasInitialized {
  return !(heightMap_ == nil && widthMap_ == nil);
}

- (instancetype)initWithJavaUtilLinkedList:(JavaUtilLinkedList *)listeners {
  GeogebraCommonMainSettingsSpreadsheetSettings_initWithJavaUtilLinkedList_(self, listeners);
  return self;
}

- (instancetype)init {
  GeogebraCommonMainSettingsSpreadsheetSettings_init(self);
  return self;
}

- (JavaUtilHashMap *)getWidthMap {
  if (widthMap_ == nil) GeogebraCommonMainSettingsSpreadsheetSettings_setAndConsume_widthMap_(self, new_JavaUtilHashMap_init());
  return widthMap_;
}

- (void)addWidthWithInt:(jint)index
                withInt:(jint)width {
  [((JavaUtilHashMap *) nil_chk([self getWidthMap])) putWithId:JavaLangInteger_valueOfWithInt_(index) withId:JavaLangInteger_valueOfWithInt_(width)];
  [self settingChanged];
}

- (jint)preferredColumnWidth {
  return preferredColumnWidth__;
}

- (void)setPreferredColumnWidthWithInt:(jint)prefWidth {
  self->preferredColumnWidth__ = prefWidth;
  [self settingChanged];
}

- (JavaUtilHashMap *)getHeightMap {
  if (heightMap_ == nil) GeogebraCommonMainSettingsSpreadsheetSettings_setAndConsume_heightMap_(self, new_JavaUtilHashMap_init());
  return heightMap_;
}

- (void)addHeightWithInt:(jint)index
                 withInt:(jint)height {
  [((JavaUtilHashMap *) nil_chk([self getHeightMap])) putWithId:JavaLangInteger_valueOfWithInt_(index) withId:JavaLangInteger_valueOfWithInt_(height)];
  [self settingChanged];
}

- (jint)preferredRowHeight {
  return preferredRowHeight__;
}

- (void)setPreferredRowHeightWithInt:(jint)preferredRowHeight {
  self->preferredRowHeight__ = preferredRowHeight;
  [self settingChanged];
}

- (jboolean)showFormulaBar {
  return showFormulaBar__;
}

- (void)setShowFormulaBarWithBoolean:(jboolean)showFormulaBar {
  if (self->showFormulaBar__ != showFormulaBar) {
    self->showFormulaBar__ = showFormulaBar;
    [self settingChanged];
  }
}

- (jboolean)showGrid {
  return showGrid__;
}

- (void)setShowGridWithBoolean:(jboolean)showGrid {
  if (self->showGrid__ != showGrid) {
    self->showGrid__ = showGrid;
    [self settingChanged];
  }
}

- (jboolean)showRowHeader {
  return showRowHeader__;
}

- (void)setShowRowHeaderWithBoolean:(jboolean)showRowHeader {
  if (self->showRowHeader__ != showRowHeader) {
    self->showRowHeader__ = showRowHeader;
    [self settingChanged];
  }
}

- (jboolean)showColumnHeader {
  return showColumnHeader__;
}

- (void)setShowColumnHeaderWithBoolean:(jboolean)showColumnHeader {
  if (self->showColumnHeader__ != showColumnHeader) {
    self->showColumnHeader__ = showColumnHeader;
    [self settingChanged];
  }
}

- (jboolean)showVScrollBar {
  return showVScrollBar__;
}

- (void)setShowVScrollBarWithBoolean:(jboolean)showVScrollBar {
  if (self->showVScrollBar__ != showVScrollBar) {
    self->showVScrollBar__ = showVScrollBar;
    [self settingChanged];
  }
}

- (jboolean)showHScrollBar {
  return showHScrollBar__;
}

- (void)setShowHScrollBarWithBoolean:(jboolean)showHScrollBar {
  if (self->showHScrollBar__ != showHScrollBar) {
    self->showHScrollBar__ = showHScrollBar;
    [self settingChanged];
  }
}

- (jboolean)allowSpecialEditor {
  return allowSpecialEditor__;
}

- (void)setAllowSpecialEditorWithBoolean:(jboolean)allowSpecialEditor {
  if (self->allowSpecialEditor__ != allowSpecialEditor) {
    self->allowSpecialEditor__ = allowSpecialEditor;
    [self settingChanged];
  }
}

- (jboolean)allowToolTips {
  return allowToolTips__;
}

- (void)setAllowToolTipsWithBoolean:(jboolean)allowToolTips {
  if (self->allowToolTips__ != allowToolTips) {
    self->allowToolTips__ = allowToolTips;
    [self settingChanged];
  }
}

- (jboolean)equalsRequired {
  return equalsRequired__;
}

- (void)setEqualsRequiredWithBoolean:(jboolean)equalsRequired {
  if (self->equalsRequired__ != equalsRequired) {
    self->equalsRequired__ = equalsRequired;
  }
}

- (jboolean)isColumnSelect {
  return isColumnSelect__;
}

- (void)setColumnSelectWithBoolean:(jboolean)isColumnSelect {
  if (self->isColumnSelect__ != isColumnSelect) {
    self->isColumnSelect__ = isColumnSelect;
    [self settingChanged];
  }
}

- (NSString *)cellFormat {
  return cellFormat__;
}

- (void)setCellFormatWithNSString:(NSString *)cellFormat {
  if (self->cellFormat__ != nil && [self->cellFormat__ isEqual:cellFormat]) return;
  GeogebraCommonMainSettingsSpreadsheetSettings_set_cellFormat__(self, cellFormat);
  [self settingChanged];
}

- (jboolean)hasCellFormat {
  return GeogebraCommonMainSettingsSpreadsheetSettings_hasCellFormat(self);
}

- (GeogebraCommonAwtGPoint *)scrollPosition {
  return scrollPosition__;
}

- (void)setScrollPositionWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)scrollPosition {
  if (self->scrollPosition__ == nil || ![self->scrollPosition__ isEqual:scrollPosition]) {
    GeogebraCommonMainSettingsSpreadsheetSettings_set_scrollPosition__(self, scrollPosition);
    [self settingChanged];
  }
}

- (GeogebraCommonAwtGPoint *)selectedCell {
  return selectedCell__;
}

- (void)setSelectedCellWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)selectedCell {
  if (self->selectedCell__ == nil || ![self->selectedCell__ isEqual:selectedCell]) {
    GeogebraCommonMainSettingsSpreadsheetSettings_set_selectedCell__(self, selectedCell);
    [self settingChanged];
  }
}

- (GeogebraCommonAwtGDimension *)preferredSize {
  return preferredSize__;
}

- (void)setPreferredSizeWithGeogebraCommonAwtGDimension:(GeogebraCommonAwtGDimension *)preferredSize {
  if (self->preferredSize__ == nil || ![self->preferredSize__ isEqual:preferredSize]) {
    GeogebraCommonMainSettingsSpreadsheetSettings_set_preferredSize__(self, preferredSize);
    [self settingChanged];
  }
}

- (void)setEnableAutoCompleteWithBoolean:(jboolean)enableAutoComplete {
  if (self->enableAutoComplete_ != enableAutoComplete) {
    self->enableAutoComplete_ = enableAutoComplete;
    [self settingChanged];
  }
}

- (jboolean)isEnableAutoComplete {
  return enableAutoComplete_;
}

- (jint)getHScrollBarValue {
  return HScrollBarValue_;
}

- (void)setHScrollBalValueWithInt:(jint)hScrollBalValue {
  HScrollBarValue_ = hScrollBalValue;
}

- (jint)getVScrollBarValue {
  return VScrollBarValue_;
}

- (void)setVScrollBalValueWithInt:(jint)vScrollBalValue {
  VScrollBarValue_ = vScrollBalValue;
}

- (jboolean)isAllDefaults {
  return ([self isDefaultPreferredSize] && [self isSelectionDefaults] && [self isLayoutDefaults] && !GeogebraCommonMainSettingsSpreadsheetSettings_hasCellFormat(self) && [self isRowColumnSizeDefaults]);
}

- (jboolean)isRowColumnSizeDefaults {
  return preferredColumnWidth__ == GeogebraCommonMainSettingsSpreadsheetSettings_TABLE_CELL_WIDTH && preferredRowHeight__ == GeogebraCommonMainSettingsSpreadsheetSettings_TABLE_CELL_HEIGHT && [((JavaUtilHashMap *) nil_chk([self getWidthMap])) size] == 0 && [((JavaUtilHashMap *) nil_chk([self getHeightMap])) size] == 0;
}

- (jboolean)isSelectionDefaults {
  return (HScrollBarValue_ == 0 && VScrollBarValue_ == 00 && [((GeogebraCommonAwtGPoint *) nil_chk(selectedCell__)) getX] == 0 && [selectedCell__ getY] == 0);
}

- (jboolean)isLayoutDefaults {
  return ([self isDefaultShowFormulaBar] && [self isDefaultShowGrid] && [self isDefaultShowRowHeader] && [self isDefaultShowColumnHeader] && [self isDefaultVScrollBar] && [self isDefaultHScrollBar] && [self isDefaultColumnSelect] && [self isDefaultSpecialEditorAllowed] && [self isDefaultToolTipsAllowed] && [self isDefaultSpecialEditorAllowed] && ![self equalsRequired] && ![self isEnableAutoComplete]);
}

- (jboolean)isDefaultToolTipsAllowed {
  return allowToolTips__ == GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_ALLOW_TOOLTIPS;
}

- (jboolean)isDefaultSpecialEditorAllowed {
  return allowSpecialEditor__ == GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_ALLOW_SPECIAL_EDITOR;
}

- (jboolean)isDefaultColumnSelect {
  return isColumnSelect__ == GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_IS_COLUMN_SELECT;
}

- (jboolean)isDefaultVScrollBar {
  return showVScrollBar__ == GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_VSCROLLBAR;
}

- (jboolean)isDefaultHScrollBar {
  return showHScrollBar__ == GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_HSCROLLBAR;
}

- (jboolean)isDefaultShowColumnHeader {
  return showColumnHeader__ == GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_COLUMN_HEADER;
}

- (jboolean)isDefaultShowRowHeader {
  return showRowHeader__ == GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_ROW_HEADER;
}

- (jboolean)isDefaultShowFormulaBar {
  return showFormulaBar__ == GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_FORMULA_BAR;
}

- (jboolean)isDefaultShowGrid {
  return showGrid__ == GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_GRID;
}

- (jboolean)isDefaultPreferredSize {
  jint w = [((GeogebraCommonAwtGDimension *) nil_chk(preferredSize__)) getWidth];
  jint h = [preferredSize__ getHeight];
  return (w == 0 && h == 0) || (w == GeogebraCommonMainSettingsSpreadsheetSettings_TABLE_CELL_WIDTH && h == GeogebraCommonMainSettingsSpreadsheetSettings_TABLE_CELL_HEIGHT);
}

- (void)getXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                            withBoolean:(jboolean)asPreference {
  if (![self hasInitialized]) {
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<spreadsheetView>\n"];
  GeogebraCommonAwtGDimension *size = [self preferredSize];
  jint width = [((GeogebraCommonAwtGDimension *) nil_chk(size)) getWidth];
  jint height = [size getHeight];
  if (![self isDefaultPreferredSize]) {
    [sb appendWithNSString:@"\t<size "];
    if (width != 0) {
      [sb appendWithNSString:@" width=\""];
      [sb appendWithInt:width];
      [sb appendWithNSString:@"\""];
    }
    if (height != 0) {
      [sb appendWithNSString:@" height=\""];
      [sb appendWithInt:height];
      [sb appendWithNSString:@"\""];
    }
    [sb appendWithNSString:@"/>\n"];
  }
  jint prefWidth = [self preferredColumnWidth];
  jint prefHeight = [self preferredRowHeight];
  if (prefWidth != GeogebraCommonMainSettingsSpreadsheetSettings_TABLE_CELL_WIDTH || prefHeight != GeogebraCommonMainSettingsSpreadsheetSettings_TABLE_CELL_HEIGHT) {
    [sb appendWithNSString:@"\t<prefCellSize "];
    if (prefWidth != GeogebraCommonMainSettingsSpreadsheetSettings_TABLE_CELL_WIDTH) {
      [sb appendWithNSString:@" width=\""];
      [sb appendWithInt:prefWidth];
      [sb appendWithNSString:@"\""];
      [sb appendWithNSString:@"/>\n"];
    }
    if (prefHeight != GeogebraCommonMainSettingsSpreadsheetSettings_TABLE_CELL_HEIGHT) {
      [sb appendWithNSString:@" height=\""];
      [sb appendWithInt:prefHeight];
      [sb appendWithNSString:@"\""];
      [sb appendWithNSString:@"/>\n"];
    }
  }
  if (!asPreference) {
    JavaUtilHashMap *widthMap = [self getWidthMap];
    for (JavaLangInteger * __strong col in nil_chk([((JavaUtilHashMap *) nil_chk(widthMap)) keySet])) {
      jint colWidth = [((JavaLangInteger *) nil_chk([widthMap getWithId:col])) intValue];
      if (colWidth != [self preferredColumnWidth]) {
        [sb appendWithNSString:JreStrcat("$@$I$", @"\t<spreadsheetColumn id=\"", col, @"\" width=\"", colWidth, @"\"/>\n")];
      }
    }
    JavaUtilHashMap *heightMap = [self getHeightMap];
    for (JavaLangInteger * __strong row in nil_chk([((JavaUtilHashMap *) nil_chk(heightMap)) keySet])) {
      jint rowHeight = [((JavaLangInteger *) nil_chk([heightMap getWithId:row])) intValue];
      if (rowHeight != [self preferredRowHeight]) {
        [sb appendWithNSString:JreStrcat("$@$I$", @"\t<spreadsheetRow id=\"", row, @"\" height=\"", rowHeight, @"\"/>\n")];
      }
    }
    if (![self isSelectionDefaults]) {
      [sb appendWithNSString:@"\t<selection "];
      if (HScrollBarValue_ != 0) {
        [sb appendWithNSString:@" hScroll=\""];
        [sb appendWithInt:HScrollBarValue_];
        [sb appendWithNSString:@"\""];
      }
      if (VScrollBarValue_ != 0) {
        [sb appendWithNSString:@" vScroll=\""];
        [sb appendWithInt:VScrollBarValue_];
        [sb appendWithNSString:@"\""];
      }
      if ([((GeogebraCommonAwtGPoint *) nil_chk(selectedCell__)) getX] != 0) {
        [sb appendWithNSString:@" column=\""];
        [sb appendWithInt:[selectedCell__ getX]];
        [sb appendWithNSString:@"\""];
      }
      if ([selectedCell__ getY] != 0) {
        [sb appendWithNSString:@" row=\""];
        [sb appendWithInt:[selectedCell__ getY]];
        [sb appendWithNSString:@"\""];
        [sb appendWithNSString:@"/>\n"];
      }
    }
  }
  if (![self isLayoutDefaults]) {
    [sb appendWithNSString:@"\t<layout "];
    if (showFormulaBar__) {
      [sb appendWithNSString:@" showFormulaBar=\"true\""];
    }
    if (showGrid__) {
      [sb appendWithNSString:@" showGrid=\"true\""];
    }
    if (showHScrollBar__) {
      [sb appendWithNSString:@" showHScrollBar=\"true\""];
    }
    if (showVScrollBar__) {
      [sb appendWithNSString:@" showVScrollBar=\"true\""];
    }
    if (showColumnHeader__) {
      [sb appendWithNSString:@" showColumnHeader=\"true\""];
    }
    if (showRowHeader__) {
      [sb appendWithNSString:@" showRowHeader=\"true\""];
    }
    if (allowSpecialEditor__) {
      [sb appendWithNSString:@" allowSpecialEditor=\"true\""];
    }
    if (allowToolTips__) {
      [sb appendWithNSString:@" allowToolTips=\"true\""];
    }
    if (equalsRequired__) {
      [sb appendWithNSString:@" equalsRequired=\"true\""];
    }
    if (enableAutoComplete_) {
      [sb appendWithNSString:@" autoComplete=\"true\""];
    }
    [sb appendWithNSString:@"/>\n"];
  }
  if (!asPreference && GeogebraCommonMainSettingsSpreadsheetSettings_hasCellFormat(self)) {
    [sb appendWithNSString:@"\t<spreadsheetCellFormat formatMap=\""];
    [sb appendWithNSString:cellFormat__];
    [sb appendWithNSString:@"\"/>\n"];
  }
  [sb appendWithNSString:@"</spreadsheetView>\n"];
}

- (void)dealloc {
  RELEASE_(widthMap_);
  RELEASE_(heightMap_);
  RELEASE_(cellFormat__);
  RELEASE_(scrollPosition__);
  RELEASE_(selectedCell__);
  RELEASE_(preferredSize__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "hasInitialized", NULL, "Z", 0x1, NULL, NULL },
    { "initWithJavaUtilLinkedList:", "SpreadsheetSettings", NULL, 0x1, NULL, NULL },
    { "init", "SpreadsheetSettings", NULL, 0x1, NULL, NULL },
    { "getWidthMap", NULL, "Ljava.util.HashMap;", 0x1, NULL, NULL },
    { "addWidthWithInt:withInt:", "addWidth", "V", 0x1, NULL, NULL },
    { "preferredColumnWidth", NULL, "I", 0x1, NULL, NULL },
    { "setPreferredColumnWidthWithInt:", "setPreferredColumnWidth", "V", 0x1, NULL, NULL },
    { "getHeightMap", NULL, "Ljava.util.HashMap;", 0x1, NULL, NULL },
    { "addHeightWithInt:withInt:", "addHeight", "V", 0x1, NULL, NULL },
    { "preferredRowHeight", NULL, "I", 0x1, NULL, NULL },
    { "setPreferredRowHeightWithInt:", "setPreferredRowHeight", "V", 0x1, NULL, NULL },
    { "showFormulaBar", NULL, "Z", 0x1, NULL, NULL },
    { "setShowFormulaBarWithBoolean:", "setShowFormulaBar", "V", 0x1, NULL, NULL },
    { "showGrid", NULL, "Z", 0x1, NULL, NULL },
    { "setShowGridWithBoolean:", "setShowGrid", "V", 0x1, NULL, NULL },
    { "showRowHeader", NULL, "Z", 0x1, NULL, NULL },
    { "setShowRowHeaderWithBoolean:", "setShowRowHeader", "V", 0x1, NULL, NULL },
    { "showColumnHeader", NULL, "Z", 0x1, NULL, NULL },
    { "setShowColumnHeaderWithBoolean:", "setShowColumnHeader", "V", 0x1, NULL, NULL },
    { "showVScrollBar", NULL, "Z", 0x1, NULL, NULL },
    { "setShowVScrollBarWithBoolean:", "setShowVScrollBar", "V", 0x1, NULL, NULL },
    { "showHScrollBar", NULL, "Z", 0x1, NULL, NULL },
    { "setShowHScrollBarWithBoolean:", "setShowHScrollBar", "V", 0x1, NULL, NULL },
    { "allowSpecialEditor", NULL, "Z", 0x1, NULL, NULL },
    { "setAllowSpecialEditorWithBoolean:", "setAllowSpecialEditor", "V", 0x1, NULL, NULL },
    { "allowToolTips", NULL, "Z", 0x1, NULL, NULL },
    { "setAllowToolTipsWithBoolean:", "setAllowToolTips", "V", 0x1, NULL, NULL },
    { "equalsRequired", NULL, "Z", 0x1, NULL, NULL },
    { "setEqualsRequiredWithBoolean:", "setEqualsRequired", "V", 0x1, NULL, NULL },
    { "isColumnSelect", NULL, "Z", 0x1, NULL, NULL },
    { "setColumnSelectWithBoolean:", "setColumnSelect", "V", 0x1, NULL, NULL },
    { "cellFormat", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setCellFormatWithNSString:", "setCellFormat", "V", 0x1, NULL, NULL },
    { "hasCellFormat", NULL, "Z", 0x2, NULL, NULL },
    { "scrollPosition", NULL, "Lgeogebra.common.awt.GPoint;", 0x1, NULL, NULL },
    { "setScrollPositionWithGeogebraCommonAwtGPoint:", "setScrollPosition", "V", 0x1, NULL, NULL },
    { "selectedCell", NULL, "Lgeogebra.common.awt.GPoint;", 0x1, NULL, NULL },
    { "setSelectedCellWithGeogebraCommonAwtGPoint:", "setSelectedCell", "V", 0x1, NULL, NULL },
    { "preferredSize", NULL, "Lgeogebra.common.awt.GDimension;", 0x1, NULL, NULL },
    { "setPreferredSizeWithGeogebraCommonAwtGDimension:", "setPreferredSize", "V", 0x1, NULL, NULL },
    { "setEnableAutoCompleteWithBoolean:", "setEnableAutoComplete", "V", 0x1, NULL, NULL },
    { "isEnableAutoComplete", NULL, "Z", 0x1, NULL, NULL },
    { "getHScrollBarValue", NULL, "I", 0x1, NULL, NULL },
    { "setHScrollBalValueWithInt:", "setHScrollBalValue", "V", 0x1, NULL, NULL },
    { "getVScrollBarValue", NULL, "I", 0x1, NULL, NULL },
    { "setVScrollBalValueWithInt:", "setVScrollBalValue", "V", 0x1, NULL, NULL },
    { "isAllDefaults", NULL, "Z", 0x1, NULL, NULL },
    { "isRowColumnSizeDefaults", NULL, "Z", 0x1, NULL, NULL },
    { "isSelectionDefaults", NULL, "Z", 0x1, NULL, NULL },
    { "isLayoutDefaults", NULL, "Z", 0x1, NULL, NULL },
    { "isDefaultToolTipsAllowed", NULL, "Z", 0x1, NULL, NULL },
    { "isDefaultSpecialEditorAllowed", NULL, "Z", 0x1, NULL, NULL },
    { "isDefaultColumnSelect", NULL, "Z", 0x1, NULL, NULL },
    { "isDefaultVScrollBar", NULL, "Z", 0x1, NULL, NULL },
    { "isDefaultHScrollBar", NULL, "Z", 0x1, NULL, NULL },
    { "isDefaultShowColumnHeader", NULL, "Z", 0x1, NULL, NULL },
    { "isDefaultShowRowHeader", NULL, "Z", 0x1, NULL, NULL },
    { "isDefaultShowFormulaBar", NULL, "Z", 0x1, NULL, NULL },
    { "isDefaultShowGrid", NULL, "Z", 0x1, NULL, NULL },
    { "isDefaultPreferredSize", NULL, "Z", 0x1, NULL, NULL },
    { "getXMLWithJavaLangStringBuilder:withBoolean:", "getXML", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TABLE_CELL_WIDTH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonMainSettingsSpreadsheetSettings_TABLE_CELL_WIDTH },
    { "TABLE_CELL_HEIGHT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonMainSettingsSpreadsheetSettings_TABLE_CELL_HEIGHT },
    { "showFormulaBar__", "showFormulaBar", 0x2, "Z", NULL, NULL,  },
    { "showGrid__", "showGrid", 0x2, "Z", NULL, NULL,  },
    { "showRowHeader__", "showRowHeader", 0x2, "Z", NULL, NULL,  },
    { "showColumnHeader__", "showColumnHeader", 0x2, "Z", NULL, NULL,  },
    { "showVScrollBar__", "showVScrollBar", 0x2, "Z", NULL, NULL,  },
    { "showHScrollBar__", "showHScrollBar", 0x2, "Z", NULL, NULL,  },
    { "isColumnSelect__", "isColumnSelect", 0x2, "Z", NULL, NULL,  },
    { "allowSpecialEditor__", "allowSpecialEditor", 0x2, "Z", NULL, NULL,  },
    { "allowToolTips__", "allowToolTips", 0x2, "Z", NULL, NULL,  },
    { "equalsRequired__", "equalsRequired", 0x2, "Z", NULL, NULL,  },
    { "enableAutoComplete_", NULL, 0x2, "Z", NULL, NULL,  },
    { "widthMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/Integer;Ljava/lang/Integer;>;",  },
    { "heightMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/Integer;Ljava/lang/Integer;>;",  },
    { "preferredColumnWidth__", "preferredColumnWidth", 0x2, "I", NULL, NULL,  },
    { "preferredRowHeight__", "preferredRowHeight", 0x2, "I", NULL, NULL,  },
    { "cellFormat__", "cellFormat", 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "scrollPosition__", "scrollPosition", 0x2, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "selectedCell__", "selectedCell", 0x2, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "preferredSize__", "preferredSize", 0x2, "Lgeogebra.common.awt.GDimension;", NULL, NULL,  },
    { "HScrollBarValue_", NULL, 0x2, "I", NULL, NULL,  },
    { "VScrollBarValue_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.main.settings.SpreadsheetSettings$Defaults;"};
  static const J2ObjcClassInfo _GeogebraCommonMainSettingsSpreadsheetSettings = { 2, "SpreadsheetSettings", "geogebra.common.main.settings", NULL, 0x1, 61, methods, 23, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonMainSettingsSpreadsheetSettings;
}

@end

void GeogebraCommonMainSettingsSpreadsheetSettings_initWithJavaUtilLinkedList_(GeogebraCommonMainSettingsSpreadsheetSettings *self, JavaUtilLinkedList *listeners) {
  GeogebraCommonMainSettingsAbstractSettings_initWithJavaUtilLinkedList_(self, listeners);
  self->showFormulaBar__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_FORMULA_BAR;
  self->showGrid__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_GRID;
  self->showRowHeader__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_ROW_HEADER;
  self->showColumnHeader__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_COLUMN_HEADER;
  self->showVScrollBar__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_VSCROLLBAR;
  self->showHScrollBar__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_HSCROLLBAR;
  self->isColumnSelect__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_IS_COLUMN_SELECT;
  self->allowSpecialEditor__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_ALLOW_SPECIAL_EDITOR;
  self->allowToolTips__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_ALLOW_TOOLTIPS;
  self->equalsRequired__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_EQUALS_REQUIRED;
  self->enableAutoComplete_ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_ENABLE_AUTOCOMPLETE;
  self->preferredColumnWidth__ = GeogebraCommonMainSettingsSpreadsheetSettings_TABLE_CELL_WIDTH;
  self->preferredRowHeight__ = GeogebraCommonMainSettingsSpreadsheetSettings_TABLE_CELL_HEIGHT;
  GeogebraCommonMainSettingsSpreadsheetSettings_setAndConsume_scrollPosition__(self, new_GeogebraCommonAwtGPoint_initWithInt_withInt_(0, 0));
  GeogebraCommonMainSettingsSpreadsheetSettings_setAndConsume_selectedCell__(self, new_GeogebraCommonAwtGPoint_initWithInt_withInt_(0, 0));
  GeogebraCommonMainSettingsSpreadsheetSettings_set_preferredSize__(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newDimensionWithInt:0 withInt:0]);
}

GeogebraCommonMainSettingsSpreadsheetSettings *new_GeogebraCommonMainSettingsSpreadsheetSettings_initWithJavaUtilLinkedList_(JavaUtilLinkedList *listeners) {
  GeogebraCommonMainSettingsSpreadsheetSettings *self = [GeogebraCommonMainSettingsSpreadsheetSettings alloc];
  GeogebraCommonMainSettingsSpreadsheetSettings_initWithJavaUtilLinkedList_(self, listeners);
  return self;
}

void GeogebraCommonMainSettingsSpreadsheetSettings_init(GeogebraCommonMainSettingsSpreadsheetSettings *self) {
  GeogebraCommonMainSettingsAbstractSettings_init(self);
  self->showFormulaBar__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_FORMULA_BAR;
  self->showGrid__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_GRID;
  self->showRowHeader__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_ROW_HEADER;
  self->showColumnHeader__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_COLUMN_HEADER;
  self->showVScrollBar__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_VSCROLLBAR;
  self->showHScrollBar__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_HSCROLLBAR;
  self->isColumnSelect__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_IS_COLUMN_SELECT;
  self->allowSpecialEditor__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_ALLOW_SPECIAL_EDITOR;
  self->allowToolTips__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_ALLOW_TOOLTIPS;
  self->equalsRequired__ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_EQUALS_REQUIRED;
  self->enableAutoComplete_ = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_ENABLE_AUTOCOMPLETE;
  self->preferredColumnWidth__ = GeogebraCommonMainSettingsSpreadsheetSettings_TABLE_CELL_WIDTH;
  self->preferredRowHeight__ = GeogebraCommonMainSettingsSpreadsheetSettings_TABLE_CELL_HEIGHT;
  GeogebraCommonMainSettingsSpreadsheetSettings_setAndConsume_scrollPosition__(self, new_GeogebraCommonAwtGPoint_initWithInt_withInt_(0, 0));
  GeogebraCommonMainSettingsSpreadsheetSettings_setAndConsume_selectedCell__(self, new_GeogebraCommonAwtGPoint_initWithInt_withInt_(0, 0));
  GeogebraCommonMainSettingsSpreadsheetSettings_set_preferredSize__(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newDimensionWithInt:0 withInt:0]);
}

GeogebraCommonMainSettingsSpreadsheetSettings *new_GeogebraCommonMainSettingsSpreadsheetSettings_init() {
  GeogebraCommonMainSettingsSpreadsheetSettings *self = [GeogebraCommonMainSettingsSpreadsheetSettings alloc];
  GeogebraCommonMainSettingsSpreadsheetSettings_init(self);
  return self;
}

jboolean GeogebraCommonMainSettingsSpreadsheetSettings_hasCellFormat(GeogebraCommonMainSettingsSpreadsheetSettings *self) {
  return self->cellFormat__ != nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonMainSettingsSpreadsheetSettings)

@implementation GeogebraCommonMainSettingsSpreadsheetSettings_Defaults

- (instancetype)initWithGeogebraCommonMainSettingsSpreadsheetSettings:(GeogebraCommonMainSettingsSpreadsheetSettings *)outer$ {
  GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_initWithGeogebraCommonMainSettingsSpreadsheetSettings_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainSettingsSpreadsheetSettings:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SHOW_FORMULA_BAR_", NULL, 0x19, "Z", NULL, NULL, .constantValue.asBOOL = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_FORMULA_BAR },
    { "SHOW_GRID_", NULL, 0x19, "Z", NULL, NULL, .constantValue.asBOOL = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_GRID },
    { "SHOW_ROW_HEADER_", NULL, 0x19, "Z", NULL, NULL, .constantValue.asBOOL = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_ROW_HEADER },
    { "SHOW_COLUMN_HEADER_", NULL, 0x19, "Z", NULL, NULL, .constantValue.asBOOL = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_COLUMN_HEADER },
    { "SHOW_VSCROLLBAR_", NULL, 0x19, "Z", NULL, NULL, .constantValue.asBOOL = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_VSCROLLBAR },
    { "SHOW_HSCROLLBAR_", NULL, 0x19, "Z", NULL, NULL, .constantValue.asBOOL = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_SHOW_HSCROLLBAR },
    { "IS_COLUMN_SELECT_", NULL, 0x19, "Z", NULL, NULL, .constantValue.asBOOL = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_IS_COLUMN_SELECT },
    { "ALLOW_SPECIAL_EDITOR_", NULL, 0x19, "Z", NULL, NULL, .constantValue.asBOOL = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_ALLOW_SPECIAL_EDITOR },
    { "ALLOW_TOOLTIPS_", NULL, 0x19, "Z", NULL, NULL, .constantValue.asBOOL = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_ALLOW_TOOLTIPS },
    { "EQUALS_REQUIRED_", NULL, 0x19, "Z", NULL, NULL, .constantValue.asBOOL = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_EQUALS_REQUIRED },
    { "ENABLE_AUTOCOMPLETE_", NULL, 0x19, "Z", NULL, NULL, .constantValue.asBOOL = GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_ENABLE_AUTOCOMPLETE },
  };
  static const J2ObjcClassInfo _GeogebraCommonMainSettingsSpreadsheetSettings_Defaults = { 2, "Defaults", "geogebra.common.main.settings", "SpreadsheetSettings", 0x1, 1, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonMainSettingsSpreadsheetSettings_Defaults;
}

@end

void GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_initWithGeogebraCommonMainSettingsSpreadsheetSettings_(GeogebraCommonMainSettingsSpreadsheetSettings_Defaults *self, GeogebraCommonMainSettingsSpreadsheetSettings *outer$) {
  NSObject_init(self);
}

GeogebraCommonMainSettingsSpreadsheetSettings_Defaults *new_GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_initWithGeogebraCommonMainSettingsSpreadsheetSettings_(GeogebraCommonMainSettingsSpreadsheetSettings *outer$) {
  GeogebraCommonMainSettingsSpreadsheetSettings_Defaults *self = [GeogebraCommonMainSettingsSpreadsheetSettings_Defaults alloc];
  GeogebraCommonMainSettingsSpreadsheetSettings_Defaults_initWithGeogebraCommonMainSettingsSpreadsheetSettings_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonMainSettingsSpreadsheetSettings_Defaults)
