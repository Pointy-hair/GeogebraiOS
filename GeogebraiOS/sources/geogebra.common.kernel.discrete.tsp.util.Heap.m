//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/discrete/tsp/util/Heap.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/discrete/tsp/util/Heap.h"
#include "java/lang/Comparable.h"
#include "java/lang/Error.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

#define GeogebraCommonKernelDiscreteTspUtilHeap_DEFAULT_CAPACITY 10

@interface GeogebraCommonKernelDiscreteTspUtilHeap () {
 @public
  IOSObjectArray *entries_;
  jint size__;
  id<JavaUtilMap> table_;
  id<JavaUtilComparator> comparator_;
}

- (void)swapWithInt:(jint)index1
            withInt:(jint)index2;

- (void)fixDownWithInt:(jint)index;

- (void)fixUpWithInt:(jint)index;

- (void)growWithInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelDiscreteTspUtilHeap, entries_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelDiscreteTspUtilHeap, table_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelDiscreteTspUtilHeap, comparator_, id<JavaUtilComparator>)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelDiscreteTspUtilHeap, DEFAULT_CAPACITY, jint)

__attribute__((unused)) static void GeogebraCommonKernelDiscreteTspUtilHeap_swapWithInt_withInt_(GeogebraCommonKernelDiscreteTspUtilHeap *self, jint index1, jint index2);

__attribute__((unused)) static void GeogebraCommonKernelDiscreteTspUtilHeap_fixDownWithInt_(GeogebraCommonKernelDiscreteTspUtilHeap *self, jint index);

__attribute__((unused)) static void GeogebraCommonKernelDiscreteTspUtilHeap_fixUpWithInt_(GeogebraCommonKernelDiscreteTspUtilHeap *self, jint index);

__attribute__((unused)) static void GeogebraCommonKernelDiscreteTspUtilHeap_growWithInt_(GeogebraCommonKernelDiscreteTspUtilHeap *self, jint index);

@implementation GeogebraCommonKernelDiscreteTspUtilHeap

- (instancetype)init {
  GeogebraCommonKernelDiscreteTspUtilHeap_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity {
  GeogebraCommonKernelDiscreteTspUtilHeap_initWithInt_(self, initialCapacity);
  return self;
}

- (instancetype)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  GeogebraCommonKernelDiscreteTspUtilHeap_initWithJavaUtilComparator_(self, comparator);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity
     withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  GeogebraCommonKernelDiscreteTspUtilHeap_initWithInt_withJavaUtilComparator_(self, initialCapacity, comparator);
  return self;
}

- (jboolean)addWithId:(id)key {
  id entry_ = key;
  JavaLangInteger *pointer = [((id<JavaUtilMap>) nil_chk(self->table_)) getWithId:key];
  if (pointer != nil) {
    jint index = [pointer intValue];
    if (self->comparator_ == nil) {
      if ([((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) check_protocol_cast(IOSObjectArray_Get(nil_chk(self->entries_), index), @protocol(JavaLangComparable))))) compareToWithId:entry_] > 0) {
        IOSObjectArray_Set(self->entries_, index, entry_);
        GeogebraCommonKernelDiscreteTspUtilHeap_fixUpWithInt_(self, index);
      }
      else {
        return NO;
      }
    }
    else {
      if ([self->comparator_ compareWithId:IOSObjectArray_Get(nil_chk(self->entries_), index) withId:entry_] > 0) {
        IOSObjectArray_Set(self->entries_, index, entry_);
        GeogebraCommonKernelDiscreteTspUtilHeap_fixUpWithInt_(self, index);
      }
      else {
        return NO;
      }
    }
  }
  else {
    GeogebraCommonKernelDiscreteTspUtilHeap_growWithInt_(self, ++self->size__);
    [self->table_ putWithId:key withId:JavaLangInteger_valueOfWithInt_(self->size__)];
    IOSObjectArray_Set(nil_chk(self->entries_), self->size__, entry_);
    GeogebraCommonKernelDiscreteTspUtilHeap_fixUpWithInt_(self, self->size__);
  }
  return YES;
}

- (void)swapWithInt:(jint)index1
            withInt:(jint)index2 {
  GeogebraCommonKernelDiscreteTspUtilHeap_swapWithInt_withInt_(self, index1, index2);
}

- (id)poll {
  if (self->size__ == 0) {
    return nil;
  }
  id entry_ = IOSObjectArray_Get(nil_chk(self->entries_), 1);
  [((id<JavaUtilMap>) nil_chk(self->table_)) removeWithId:entry_];
  if (self->size__ > 1) {
    IOSObjectArray_Set(self->entries_, 1, IOSObjectArray_Get(self->entries_, self->size__));
    [self->table_ putWithId:IOSObjectArray_Get(self->entries_, 1) withId:JavaLangInteger_valueOfWithInt_(1)];
  }
  IOSObjectArray_Set(self->entries_, self->size__, nil);
  if (--self->size__ > 1) {
    GeogebraCommonKernelDiscreteTspUtilHeap_fixDownWithInt_(self, 1);
  }
  return entry_;
}

- (id)peek {
  return IOSObjectArray_Get(nil_chk(self->entries_), 1);
}

- (jboolean)containsKeyWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(self->table_)) containsKeyWithId:key];
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(self->table_)) clear];
  for (jint i = 0; i <= self->size__; i++) {
    IOSObjectArray_Set(nil_chk(self->entries_), i, nil);
  }
  self->size__ = 0;
}

- (void)fixDownWithInt:(jint)index {
  GeogebraCommonKernelDiscreteTspUtilHeap_fixDownWithInt_(self, index);
}

- (void)fixUpWithInt:(jint)index {
  GeogebraCommonKernelDiscreteTspUtilHeap_fixUpWithInt_(self, index);
}

- (jboolean)isEmpty {
  return self->size__ == 0;
}

- (void)growWithInt:(jint)index {
  GeogebraCommonKernelDiscreteTspUtilHeap_growWithInt_(self, index);
}

- (NSString *)description {
  if (self->size__ == 0) {
    return @"";
  }
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithNSString_([nil_chk(IOSObjectArray_Get(nil_chk(self->entries_), 1)) description]) autorelease];
  for (jint i = 2; i <= self->size__; i++) {
    [sb appendWithNSString:JreStrcat("C$", ',', [nil_chk(IOSObjectArray_Get(self->entries_, i)) description])];
  }
  return [sb description];
}

- (jint)size {
  return self->size__;
}

- (void)dealloc {
  RELEASE_(entries_);
  RELEASE_(table_);
  RELEASE_(comparator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Heap", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "Heap", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilComparator:", "Heap", NULL, 0x1, NULL, NULL },
    { "initWithInt:withJavaUtilComparator:", "Heap", NULL, 0x1, NULL, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL, "(TE;)Z" },
    { "swapWithInt:withInt:", "swap", "V", 0x2, NULL, NULL },
    { "poll", NULL, "TE;", 0x1, NULL, "()TE;" },
    { "peek", NULL, "TE;", 0x1, NULL, "()TE;" },
    { "containsKeyWithId:", "containsKey", "Z", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "fixDownWithInt:", "fixDown", "V", 0x2, NULL, NULL },
    { "fixUpWithInt:", "fixUp", "V", 0x2, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "growWithInt:", "grow", "V", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_CAPACITY_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelDiscreteTspUtilHeap_DEFAULT_CAPACITY },
    { "entries_", NULL, 0x2, "[Ljava.lang.Object;", NULL, "[TE;",  },
    { "size__", "size", 0x2, "I", NULL, NULL,  },
    { "table_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<TE;Ljava/lang/Integer;>;",  },
    { "comparator_", NULL, 0x12, "Ljava.util.Comparator;", NULL, "Ljava/util/Comparator<TE;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelDiscreteTspUtilHeap = { 2, "Heap", "geogebra.common.kernel.discrete.tsp.util", NULL, 0x1, 16, methods, 5, fields, 0, NULL, 0, NULL, NULL, "<E:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_GeogebraCommonKernelDiscreteTspUtilHeap;
}

@end

void GeogebraCommonKernelDiscreteTspUtilHeap_init(GeogebraCommonKernelDiscreteTspUtilHeap *self) {
  GeogebraCommonKernelDiscreteTspUtilHeap_initWithJavaUtilComparator_(self, nil);
}

GeogebraCommonKernelDiscreteTspUtilHeap *new_GeogebraCommonKernelDiscreteTspUtilHeap_init() {
  GeogebraCommonKernelDiscreteTspUtilHeap *self = [GeogebraCommonKernelDiscreteTspUtilHeap alloc];
  GeogebraCommonKernelDiscreteTspUtilHeap_init(self);
  return self;
}

void GeogebraCommonKernelDiscreteTspUtilHeap_initWithInt_(GeogebraCommonKernelDiscreteTspUtilHeap *self, jint initialCapacity) {
  GeogebraCommonKernelDiscreteTspUtilHeap_initWithInt_withJavaUtilComparator_(self, initialCapacity, nil);
}

GeogebraCommonKernelDiscreteTspUtilHeap *new_GeogebraCommonKernelDiscreteTspUtilHeap_initWithInt_(jint initialCapacity) {
  GeogebraCommonKernelDiscreteTspUtilHeap *self = [GeogebraCommonKernelDiscreteTspUtilHeap alloc];
  GeogebraCommonKernelDiscreteTspUtilHeap_initWithInt_(self, initialCapacity);
  return self;
}

void GeogebraCommonKernelDiscreteTspUtilHeap_initWithJavaUtilComparator_(GeogebraCommonKernelDiscreteTspUtilHeap *self, id<JavaUtilComparator> comparator) {
  GeogebraCommonKernelDiscreteTspUtilHeap_initWithInt_withJavaUtilComparator_(self, GeogebraCommonKernelDiscreteTspUtilHeap_DEFAULT_CAPACITY, comparator);
}

GeogebraCommonKernelDiscreteTspUtilHeap *new_GeogebraCommonKernelDiscreteTspUtilHeap_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator) {
  GeogebraCommonKernelDiscreteTspUtilHeap *self = [GeogebraCommonKernelDiscreteTspUtilHeap alloc];
  GeogebraCommonKernelDiscreteTspUtilHeap_initWithJavaUtilComparator_(self, comparator);
  return self;
}

void GeogebraCommonKernelDiscreteTspUtilHeap_initWithInt_withJavaUtilComparator_(GeogebraCommonKernelDiscreteTspUtilHeap *self, jint initialCapacity, id<JavaUtilComparator> comparator) {
  NSObject_init(self);
  if (initialCapacity < 1) {
    @throw [new_JavaLangIllegalArgumentException_init() autorelease];
  }
  self->size__ = 0;
  GeogebraCommonKernelDiscreteTspUtilHeap_set_entries_(self, (IOSObjectArray *) check_class_cast([IOSObjectArray arrayWithLength:initialCapacity + 1 type:NSObject_class_()], [IOSObjectArray class]));
  GeogebraCommonKernelDiscreteTspUtilHeap_setAndConsume_table_(self, new_JavaUtilHashMap_init());
  GeogebraCommonKernelDiscreteTspUtilHeap_set_comparator_(self, comparator);
}

GeogebraCommonKernelDiscreteTspUtilHeap *new_GeogebraCommonKernelDiscreteTspUtilHeap_initWithInt_withJavaUtilComparator_(jint initialCapacity, id<JavaUtilComparator> comparator) {
  GeogebraCommonKernelDiscreteTspUtilHeap *self = [GeogebraCommonKernelDiscreteTspUtilHeap alloc];
  GeogebraCommonKernelDiscreteTspUtilHeap_initWithInt_withJavaUtilComparator_(self, initialCapacity, comparator);
  return self;
}

void GeogebraCommonKernelDiscreteTspUtilHeap_swapWithInt_withInt_(GeogebraCommonKernelDiscreteTspUtilHeap *self, jint index1, jint index2) {
  id tmp = IOSObjectArray_Get(nil_chk(self->entries_), index1);
  IOSObjectArray_Set(self->entries_, index1, IOSObjectArray_Get(self->entries_, index2));
  IOSObjectArray_Set(self->entries_, index2, tmp);
  [((id<JavaUtilMap>) nil_chk(self->table_)) putWithId:IOSObjectArray_Get(self->entries_, index1) withId:JavaLangInteger_valueOfWithInt_(index1)];
  [self->table_ putWithId:IOSObjectArray_Get(self->entries_, index2) withId:JavaLangInteger_valueOfWithInt_(index2)];
}

void GeogebraCommonKernelDiscreteTspUtilHeap_fixDownWithInt_(GeogebraCommonKernelDiscreteTspUtilHeap *self, jint index) {
  jint son;
  if (self->comparator_ == nil) {
    while ((son = LShift32(index, 1)) <= self->size__) {
      if (son < self->size__ && [((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) check_protocol_cast(IOSObjectArray_Get(nil_chk(self->entries_), son), @protocol(JavaLangComparable))))) compareToWithId:IOSObjectArray_Get(self->entries_, son + 1)] > 0) {
        son++;
      }
      if ([((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) check_protocol_cast(IOSObjectArray_Get(nil_chk(self->entries_), index), @protocol(JavaLangComparable))))) compareToWithId:IOSObjectArray_Get(self->entries_, son)] <= 0) {
        break;
      }
      GeogebraCommonKernelDiscreteTspUtilHeap_swapWithInt_withInt_(self, index, son);
      index = son;
    }
  }
  else {
    while ((son = LShift32(index, 1)) <= self->size__) {
      if (son < self->size__ && [self->comparator_ compareWithId:IOSObjectArray_Get(nil_chk(self->entries_), son) withId:IOSObjectArray_Get(self->entries_, son + 1)] > 0) {
        son++;
      }
      if ([self->comparator_ compareWithId:IOSObjectArray_Get(nil_chk(self->entries_), index) withId:IOSObjectArray_Get(self->entries_, son)] <= 0) {
        break;
      }
      GeogebraCommonKernelDiscreteTspUtilHeap_swapWithInt_withInt_(self, index, son);
      index = son;
    }
  }
}

void GeogebraCommonKernelDiscreteTspUtilHeap_fixUpWithInt_(GeogebraCommonKernelDiscreteTspUtilHeap *self, jint index) {
  jint parent;
  if (self->comparator_ == nil) {
    while ((parent = RShift32(index, 1)) > 0) {
      if ([((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) check_protocol_cast(IOSObjectArray_Get(nil_chk(self->entries_), index), @protocol(JavaLangComparable))))) compareToWithId:IOSObjectArray_Get(self->entries_, parent)] >= 0) {
        break;
      }
      GeogebraCommonKernelDiscreteTspUtilHeap_swapWithInt_withInt_(self, index, parent);
      index = parent;
    }
  }
  else {
    while ((parent = RShift32(index, 1)) > 0) {
      if ([self->comparator_ compareWithId:IOSObjectArray_Get(nil_chk(self->entries_), index) withId:IOSObjectArray_Get(self->entries_, parent)] >= 0) {
        break;
      }
      GeogebraCommonKernelDiscreteTspUtilHeap_swapWithInt_withInt_(self, index, parent);
      index = parent;
    }
  }
}

void GeogebraCommonKernelDiscreteTspUtilHeap_growWithInt_(GeogebraCommonKernelDiscreteTspUtilHeap *self, jint index) {
  jint newLength = ((IOSObjectArray *) nil_chk(self->entries_))->size_;
  if (index < newLength) {
    return;
  }
  if (index == JavaLangInteger_MAX_VALUE) {
    @throw [new_JavaLangError_initWithNSString_(@"Out of memory") autorelease];
  }
  while (newLength <= index) {
    if (newLength >= JavaLangInteger_MAX_VALUE / 2) {
      newLength = JavaLangInteger_MAX_VALUE;
    }
    else {
      LShiftAssignInt(&newLength, 2);
    }
  }
  IOSObjectArray *newEntrys = (IOSObjectArray *) check_class_cast([IOSObjectArray arrayWithLength:newLength type:NSObject_class_()], [IOSObjectArray class]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->entries_, 0, newEntrys, 0, self->entries_->size_);
  GeogebraCommonKernelDiscreteTspUtilHeap_set_entries_(self, newEntrys);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelDiscreteTspUtilHeap)
