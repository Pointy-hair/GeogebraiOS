//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/io/WKTWriter.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/CoordinateSequence.h"
#include "com/vividsolutions/jts/io/WKTWriter.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"

@interface ComVividsolutionsJtsIoWKTWriter () {
 @public
  jint outputDimension_;
}

@end

static jint ComVividsolutionsJtsIoWKTWriter_INDENT_ = 2;
J2OBJC_STATIC_FIELD_GETTER(ComVividsolutionsJtsIoWKTWriter, INDENT_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(ComVividsolutionsJtsIoWKTWriter, INDENT_, jint)

@implementation ComVividsolutionsJtsIoWKTWriter

+ (NSString *)toPointWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p0 {
  return ComVividsolutionsJtsIoWKTWriter_toPointWithComVividsolutionsJtsGeomCoordinate_(p0);
}

+ (NSString *)toLineStringWithComVividsolutionsJtsGeomCoordinateSequence:(id<ComVividsolutionsJtsGeomCoordinateSequence>)seq {
  return ComVividsolutionsJtsIoWKTWriter_toLineStringWithComVividsolutionsJtsGeomCoordinateSequence_(seq);
}

+ (NSString *)toLineStringWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p0
                          withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p1 {
  return ComVividsolutionsJtsIoWKTWriter_toLineStringWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(p0, p1);
}

+ (NSString *)stringOfCharWithChar:(jchar)ch
                           withInt:(jint)count {
  return ComVividsolutionsJtsIoWKTWriter_stringOfCharWithChar_withInt_(ch, count);
}

- (instancetype)init {
  ComVividsolutionsJtsIoWKTWriter_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)outputDimension {
  ComVividsolutionsJtsIoWKTWriter_initWithInt_(self, outputDimension);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "toPointWithComVividsolutionsJtsGeomCoordinate:", "toPoint", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toLineStringWithComVividsolutionsJtsGeomCoordinateSequence:", "toLineString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toLineStringWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomCoordinate:", "toLineString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "stringOfCharWithChar:withInt:", "stringOfChar", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "init", "WKTWriter", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "WKTWriter", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INDENT_", NULL, 0xa, "I", &ComVividsolutionsJtsIoWKTWriter_INDENT_, NULL,  },
    { "outputDimension_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsIoWKTWriter = { 2, "WKTWriter", "com.vividsolutions.jts.io", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsIoWKTWriter;
}

@end

NSString *ComVividsolutionsJtsIoWKTWriter_toPointWithComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsGeomCoordinate *p0) {
  ComVividsolutionsJtsIoWKTWriter_initialize();
  return JreStrcat("$DCD$", @"POINT ( ", ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p0))->x_, ' ', p0->y_, @" )");
}

NSString *ComVividsolutionsJtsIoWKTWriter_toLineStringWithComVividsolutionsJtsGeomCoordinateSequence_(id<ComVividsolutionsJtsGeomCoordinateSequence> seq) {
  ComVividsolutionsJtsIoWKTWriter_initialize();
  JavaLangStringBuffer *buf = [new_JavaLangStringBuffer_init() autorelease];
  [buf appendWithNSString:@"LINESTRING "];
  if ([((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(seq)) size] == 0) [buf appendWithNSString:@" EMPTY"];
  else {
    [buf appendWithNSString:@"("];
    for (jint i = 0; i < [seq size]; i++) {
      if (i > 0) [buf appendWithNSString:@", "];
      [buf appendWithNSString:JreStrcat("DCD", [seq getXWithInt:i], ' ', [seq getYWithInt:i])];
    }
    [buf appendWithNSString:@")"];
  }
  return [buf description];
}

NSString *ComVividsolutionsJtsIoWKTWriter_toLineStringWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsGeomCoordinate *p0, ComVividsolutionsJtsGeomCoordinate *p1) {
  ComVividsolutionsJtsIoWKTWriter_initialize();
  return JreStrcat("$DCD$DCD$", @"LINESTRING ( ", ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p0))->x_, ' ', p0->y_, @", ", ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p1))->x_, ' ', p1->y_, @" )");
}

NSString *ComVividsolutionsJtsIoWKTWriter_stringOfCharWithChar_withInt_(jchar ch, jint count) {
  ComVividsolutionsJtsIoWKTWriter_initialize();
  JavaLangStringBuffer *buf = [new_JavaLangStringBuffer_init() autorelease];
  for (jint i = 0; i < count; i++) {
    [buf appendWithChar:ch];
  }
  return [buf description];
}

void ComVividsolutionsJtsIoWKTWriter_init(ComVividsolutionsJtsIoWKTWriter *self) {
  NSObject_init(self);
  self->outputDimension_ = 2;
}

ComVividsolutionsJtsIoWKTWriter *new_ComVividsolutionsJtsIoWKTWriter_init() {
  ComVividsolutionsJtsIoWKTWriter *self = [ComVividsolutionsJtsIoWKTWriter alloc];
  ComVividsolutionsJtsIoWKTWriter_init(self);
  return self;
}

void ComVividsolutionsJtsIoWKTWriter_initWithInt_(ComVividsolutionsJtsIoWKTWriter *self, jint outputDimension) {
  NSObject_init(self);
  self->outputDimension_ = 2;
  self->outputDimension_ = outputDimension;
  if (outputDimension < 2 || outputDimension > 3) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid output dimension (must be 2 or 3)") autorelease];
}

ComVividsolutionsJtsIoWKTWriter *new_ComVividsolutionsJtsIoWKTWriter_initWithInt_(jint outputDimension) {
  ComVividsolutionsJtsIoWKTWriter *self = [ComVividsolutionsJtsIoWKTWriter alloc];
  ComVividsolutionsJtsIoWKTWriter_initWithInt_(self, outputDimension);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsIoWKTWriter)
