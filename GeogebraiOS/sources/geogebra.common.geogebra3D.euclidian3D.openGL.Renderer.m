//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GBufferedImage.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianController3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DListsForView.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/PlotterCompletingCursor.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/PlotterCursor.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/PlotterViewInFrontOf.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Textures.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/util/ImageManager.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"

#define GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DEFAULT_TEXT_SCALE_FACTOR 0.8f
#define GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DILATION_NONE 0
#define GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DILATION_HIGHLITED 1
#define GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DEPTH_FACTOR 2
#define GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PERSP_NEAR_MIN 10.0
#define GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_ONE -1

@interface GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer () {
 @public
  jint m_arrowType_;
  jdouble m_arrowLength_, m_arrowWidth_;
  jint dilation_;
  IOSDoubleArray *dilationValues_;
  jboolean doPick__;
  GeogebraCommonKernelMatrixCoords *obliqueOrthoDirection_;
}

+ (IOSDoubleArray *)updateIntervalInFrustumWithDoubleArray:(IOSDoubleArray *)minmax
                                                withDouble:(jdouble)v1
                                                withDouble:(jdouble)v2;

- (void)updatePerspEye;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, dilationValues_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, obliqueOrthoDirection_, GeogebraCommonKernelMatrixCoords *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, DEFAULT_TEXT_SCALE_FACTOR, jfloat)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, DILATION_NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, DILATION_HIGHLITED, jint)

static jfloat GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_SQRT2_DIV2_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, SQRT2_DIV2_, jfloat)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, DEPTH_FACTOR, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, PERSP_NEAR_MIN, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer, EYE_ONE, jint)

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawLeft(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawRight(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *self);

__attribute__((unused)) static IOSDoubleArray *GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updateIntervalInFrustumWithDoubleArray_withDouble_withDouble_(IOSDoubleArray *minmax, jdouble v1, jdouble v2);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updatePerspEye(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *new_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *new_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer)

IOSFloatArray *GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_LIGHT_POSITION_W_;
IOSFloatArray *GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_LIGHT_POSITION_D_;

@implementation GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view);
  return self;
}

- (void)setDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *)dl {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_set_drawable3DLists_(self, dl);
}

- (void)display {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateViewAndDrawables {
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) update];
  [view3D_ updateOwnDrawablesNow];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) updateAll];
  [view3D_ resetViewChanged];
}

- (void)initRenderingValues {
  if (![((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) isStereoBuffered]) {
    [self clearColorBuffer];
  }
  [self initLighting];
}

- (void)drawScene {
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getEuclidianController], [GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])))) updateInput3D];
  [self useShaderProgram];
  if (waitForPick_) {
    [self doPick];
  }
  if (waitForUpdateClipPlanes_) {
    if (enableClipPlanes__) [self enableClipPlanes];
    else [self disableClipPlanes];
    waitForUpdateClipPlanes_ = NO;
  }
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast([view3D_ getEuclidianController], [GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])))) update];
  [self updateViewAndDrawables];
  if (waitForSetStencilLines_) {
    [self setStencilLines];
  }
  if (waitForDisableStencilLines_) {
    [self disableStencilLines];
  }
  if (waitForUpdateClearColor_) {
    [self updateClearColor];
    waitForUpdateClearColor_ = NO;
  }
  [self initRenderingValues];
  if ([view3D_ getProjection] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES) {
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawLeft(self);
    [self setView];
    [self draw];
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawRight(self);
    [self setView];
    [self draw];
  }
  else {
    [self clearDepthBuffer];
    [self setView];
    [self draw];
  }
  [self setColorMaskWithBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES];
  [self exportImage];
}

- (void)setDrawLeft {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawLeft(self);
}

- (void)setDrawRight {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawRight(self);
}

- (void)setBufferLeft {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setBufferRight {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)clearColorBuffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)clearDepthBuffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setStencilFuncWithInt:(jint)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)exportImage {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableCulling {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableCulling {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setCullFaceFront {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setCullFaceBack {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableBlending {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableBlending {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawTranspNotCurved {
  [self disableCulling];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [drawable3DLists_ drawTranspClosedNotCurvedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [self enableCulling];
}

- (void)drawTransp {
  [self setLightWithInt:1];
  [self drawTranspNotCurved];
  [self setCullFaceFront];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) drawTranspClosedCurvedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if ([drawable3DLists_ containsClippedSurfaces]) {
    [self enableClipPlanesIfNeeded];
    [drawable3DLists_ drawTranspClippedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
    [self disableClipPlanesIfNeeded];
  }
  [self setCullFaceBack];
  [drawable3DLists_ drawTranspClosedCurvedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if ([drawable3DLists_ containsClippedSurfaces]) {
    [self enableClipPlanesIfNeeded];
    [drawable3DLists_ drawTranspClippedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
    [self disableClipPlanesIfNeeded];
  }
  [self setLightWithInt:0];
}

- (void)setLightWithInt:(jint)light {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawNotTransp {
  [self setLightWithInt:1];
  [self enableBlending];
  [self enableCulling];
  [self setCullFaceFront];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) drawNotTransparentSurfacesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [drawable3DLists_ drawNotTransparentSurfacesClosedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if ([drawable3DLists_ containsClippedSurfaces]) {
    [self enableClipPlanesIfNeeded];
    [drawable3DLists_ drawNotTransparentSurfacesClippedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
    [self disableClipPlanesIfNeeded];
  }
  [self setCullFaceBack];
  [drawable3DLists_ drawNotTransparentSurfacesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [drawable3DLists_ drawNotTransparentSurfacesClosedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if ([drawable3DLists_ containsClippedSurfaces]) {
    [self enableClipPlanesIfNeeded];
    [drawable3DLists_ drawNotTransparentSurfacesClippedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
    [self disableClipPlanesIfNeeded];
  }
  [self setLightWithInt:0];
}

- (void)enableTextures {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableTextures {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableMultisample {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableMultisample {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableAlphaTest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableAlphaTest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableLighting {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableLighting {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initLighting {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setLabelOriginWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)origin {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawFaceToScreen {
  [self enableAlphaTest];
  [self disableLighting];
  [self enableBlending];
  [self enableTextures];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [self disableTextures];
  if (enableClipPlanes__) [self disableClipPlanes];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawMouseCursorWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if (enableClipPlanes__) [self enableClipPlanes];
}

- (void)setEnableClipPlanesWithBoolean:(jboolean)flag {
  waitForUpdateClipPlanes_ = YES;
  enableClipPlanes__ = flag;
}

- (void)enableClipPlanes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableClipPlanes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableClipPlanesIfNeeded {
  if (!enableClipPlanes__) [self enableClipPlanes];
}

- (void)disableClipPlanesIfNeeded {
  if (!enableClipPlanes__) [self disableClipPlanes];
}

- (void)setClipPlanesWithDoubleArray2:(IOSObjectArray *)minMax {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setMatrixView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)unsetMatrixView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableDepthMask {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableDepthMask {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableDepthTest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableDepthTest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setColorMaskWithBoolean:(jboolean)r
                    withBoolean:(jboolean)g
                    withBoolean:(jboolean)b
                    withBoolean:(jboolean)a {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)draw {
  [self drawFaceToScreen];
  [self setMatrixView];
  [self setLightPosition];
  [self setLightWithInt:0];
  [self enableLighting];
  [self disableAlphaTest];
  [self enableCulling];
  if (enableClipPlanes__) {
    [self disableClipPlanes];
  }
  [self setCullFaceBack];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawCursorWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if (enableClipPlanes__) {
    [self enableClipPlanes];
  }
  [self enableAlphaTest];
  [self disableTextures];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) drawHiddenNotTexturedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [self enableDash];
  [drawable3DLists_ drawHiddenTexturedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [self enableFading];
  [self drawNotTransp];
  [self disableTextures];
  [self disableAlphaTest];
  [self disableDepthMask];
  [self enableFading];
  [self drawTransp];
  [self enableDepthMask];
  [self disableTextures];
  [self enableCulling];
  [self disableBlending];
  [self setColorMaskWithBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO];
  [self setCullFaceFront];
  [drawable3DLists_ drawClosedSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if ([drawable3DLists_ containsClippedSurfaces]) {
    [self enableClipPlanesIfNeeded];
    [drawable3DLists_ drawClippedSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
    [self disableClipPlanesIfNeeded];
  }
  [self disableCulling];
  [drawable3DLists_ drawSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [self setColorMask];
  [self enableFading];
  [self disableDepthMask];
  [self enableBlending];
  [self drawTransp];
  [self enableDepthMask];
  [self disableTextures];
  [self setColorMaskWithBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO];
  [self disableBlending];
  [self enableCulling];
  [self setCullFaceBack];
  [drawable3DLists_ drawClosedSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  if ([drawable3DLists_ containsClippedSurfaces]) {
    [self enableClipPlanesIfNeeded];
    [drawable3DLists_ drawClippedSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
    [self disableClipPlanesIfNeeded];
  }
  [self setColorMask];
  [self enableFading];
  [self disableDepthMask];
  [self enableBlending];
  [self drawTransp];
  [self enableDepthMask];
  [self enableDash];
  [self enableCulling];
  [self setCullFaceBack];
  [drawable3DLists_ drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self];
  [self disableLighting];
  [self disableDepthTest];
  [self unsetMatrixView];
  [self enableDepthTest];
  [self enableLighting];
}

- (void)drawSurfacesOutline {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setLineWidthWithDouble:(jdouble)width {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setColorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)color {
  [self setColorWithFloat:(jfloat) [((GeogebraCommonKernelMatrixCoords *) nil_chk(color)) getX] withFloat:(jfloat) [color getY] withFloat:(jfloat) [color getZ] withFloat:(jfloat) [color getW]];
}

- (void)setColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color {
  [self setColorWithFloat:[((GeogebraCommonAwtGColor *) nil_chk(color)) getRed] / 255.0f withFloat:[color getGreen] / 255.0f withFloat:[color getBlue] / 255.0f withFloat:[color getAlpha] / 255.0f];
}

- (void)setColorWithFloat:(jfloat)r
                withFloat:(jfloat)g
                withFloat:(jfloat)b
                withFloat:(jfloat)a {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setArrowTypeWithInt:(jint)a_arrowType {
  m_arrowType_ = a_arrowType;
}

- (void)setArrowWidthWithDouble:(jdouble)a_arrowWidth {
  m_arrowWidth_ = a_arrowWidth;
}

- (void)setArrowLengthWithDouble:(jdouble)a_arrowLength {
  m_arrowLength_ = a_arrowLength;
}

- (void)setLayerWithFloat:(jfloat)l {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:(GeogebraCommonKernelMatrixCoordMatrix4x4 *)a_matrix {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_set_m_drawingMatrix_(self, a_matrix);
}

- (GeogebraCommonKernelMatrixCoordMatrix4x4 *)getMatrix {
  return m_drawingMatrix_;
}

- (void)initMatrix {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)resetMatrix {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *)getGeometryManager {
  return geometryManager_;
}

- (GeogebraCommonGeogebra3DEuclidian3DOpenGLTextures *)getTextures {
  return textures_;
}

- (void)drawCursorWithInt:(jint)type {
  if (!GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCursor_isTypeAlreadyWithInt_(type)) [self disableLighting];
  [self initMatrix];
  [geometryManager_ drawWithInt:[((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCursor *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk(geometryManager_))->cursor_)) getIndexWithInt:type]];
  [self resetMatrix];
  if (!GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCursor_isTypeAlreadyWithInt_(type)) [self enableLighting];
}

- (void)drawCompletingCursorWithDouble:(jdouble)value
  withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)color {
  [self initMatrix];
  [self enableBlending];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCompletingCursor *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk(geometryManager_)) getCompletingCursor])) drawWithDouble:value withGeogebraCommonKernelMatrixCoords:color];
  [self disableBlending];
  [self resetMatrix];
}

- (void)drawViewInFrontOf {
  [self initMatrix];
  [self disableBlending];
  [geometryManager_ drawWithInt:[((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterViewInFrontOf *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk(geometryManager_)) getViewInFrontOf])) getIndex]];
  [self enableBlending];
  [self resetMatrix];
}

- (void)drawMouseCursor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)startPolygonsWithInt:(jint)old {
  return [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk(geometryManager_)) startPolygonsWithInt:old];
}

- (void)drawPolygonWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)n
              withGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)v {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk(geometryManager_)) drawPolygonWithGeogebraCommonKernelMatrixCoords:n withGeogebraCommonKernelMatrixCoordsArray:v];
}

- (void)endPolygons {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk(geometryManager_)) endPolygons];
}

- (void)setMouseLocWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)p
                                       withInt:(jint)pickingMode {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_set_mouse_(self, p);
  self->pickingMode_ = pickingMode;
  waitForPick_ = YES;
}

- (void)setHitsWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)mouseLoc
                                   withInt:(jint)threshold {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (GeogebraCommonKernelGeosGeoElement *)getLabelHitWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)mouseLoc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addOneGeoToPick {
  geoToPickSize_++;
}

- (void)removeOneGeoToPick {
  geoToPickSize_--;
}

+ (IOSObjectArray *)createDrawableListForPickingWithInt:(jint)bufSize {
  return GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_createDrawableListForPickingWithInt_(bufSize);
}

- (void)setGLForPicking {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)pushSceneMatrix {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)intersectsMouse3DWithDouble:(jdouble)zNear
                             withDouble:(jdouble)zFar
                             withDouble:(jdouble)mouseZ {
  return mouseZ - GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_MOUSE_PICK_DEPTH < zNear && mouseZ + GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_MOUSE_PICK_DEPTH > zFar;
}

- (void)doPick {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)pickIntersectionCurves {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)glLoadNameWithInt:(jint)loop {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)pickWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d
withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)type {
  [self pickWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d withBoolean:NO withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:type];
}

- (void)pickWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d
                                                      withBoolean:(jboolean)intersection
withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)type {
  [self glLoadNameWithInt:pickingLoop_];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *ret = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) drawForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self withBoolean:intersection withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:type];
  if (ret != nil) {
    IOSObjectArray_Set(nil_chk(drawHits_), pickingLoop_, ret);
    pickingLoop_++;
  }
}

- (void)pickLabelWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d {
  [self glLoadNameWithInt:pickingLoop_];
  if ([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) drawLabelForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:self]) {
    IOSObjectArray_Set(nil_chk(drawHits_), pickingLoop_, d);
    pickingLoop_++;
  }
}

- (jdouble)getScreenZFromPickingDepthWithDouble:(jdouble)z {
  jdouble d = [self getVisibleDepth] / 2;
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getProjection] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_ORTHOGRAPHIC || [view3D_ getProjection] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_OBLIQUE) {
    return d * (1 - z);
  }
  return eyeToScreenDistance_ * (z - 1 - d / eyeToScreenDistance_) / (z - 1 - eyeToScreenDistance_ / d) - [view3D_ getScreenZOffset];
}

- (void)setLightPosition {
  [self setLightPositionWithFloatArray:[self getLightPosition]];
}

- (IOSFloatArray *)getLightPosition {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setLightPositionWithFloatArray:(IOSFloatArray *)values {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setLightAmbiantDiffuseWithFloat:(jfloat)ambiant0
                              withFloat:(jfloat)diffuse0
                              withFloat:(jfloat)ambiant1
                              withFloat:(jfloat)diffuse1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setWaitForUpdateClearColor {
  waitForUpdateClearColor_ = YES;
}

- (void)updateClearColor {
  GeogebraCommonAwtGColor *c = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getBackground];
  jfloat r, g, b;
  if ([view3D_ getProjection] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES && ![view3D_ isPolarized] && ![view3D_ isStereoBuffered]) {
    r = (jfloat) ([((GeogebraCommonAwtGColor *) nil_chk(c)) getGrayScale] / 255);
    g = r;
    b = r;
  }
  else {
    r = (jfloat) [((GeogebraCommonAwtGColor *) nil_chk(c)) getRed] / 255;
    g = [view3D_ isShutDownGreen] ? 0 : (jfloat) [c getGreen] / 255;
    b = (jfloat) [c getBlue] / 255;
  }
  [self setClearColorWithFloat:r withFloat:g withFloat:b withFloat:1.0f];
}

- (void)setClearColorWithFloat:(jfloat)r
                     withFloat:(jfloat)g
                     withFloat:(jfloat)b
                     withFloat:(jfloat)a {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initShaders {
}

- (void)useShaderProgram {
}

- (GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *)createManager {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setColorMaterial {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setLightModel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setAlphaFunc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)resumeAnimator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)getLeft {
  return left_;
}

- (jint)getRight {
  return right_;
}

- (jint)getWidth {
  return right_ - left_;
}

- (jint)getBottom {
  return bottom_;
}

- (jint)getTop {
  return top_;
}

- (jint)getHeight {
  return top_ - bottom_;
}

- (jint)getVisibleDepth {
  return [self getWidth] * 2;
}

- (IOSDoubleArray *)getIntervalInFrustumWithDoubleArray:(IOSDoubleArray *)minmax
                   withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o
                   withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v
                                            withBoolean:(jboolean)extendedDepth {
  jdouble left = ([self getLeft] - [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) getWithInt:1]) / [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getWithInt:1];
  jdouble right = ([self getRight] - [o getWithInt:1]) / [v getWithInt:1];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updateIntervalInFrustumWithDoubleArray_withDouble_withDouble_(minmax, left, right);
  jdouble top = ([self getTop] - [o getWithInt:2]) / [v getWithInt:2];
  jdouble bottom = ([self getBottom] - [o getWithInt:2]) / [v getWithInt:2];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updateIntervalInFrustumWithDoubleArray_withDouble_withDouble_(minmax, top, bottom);
  jdouble halfDepth = [self getVisibleDepth] / 2;
  jdouble front = (-halfDepth - [o getWithInt:3]) / [v getWithInt:3];
  jdouble back = (halfDepth - [o getWithInt:3]) / [v getWithInt:3];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updateIntervalInFrustumWithDoubleArray_withDouble_withDouble_(minmax, front, back);
  return minmax;
}

+ (IOSDoubleArray *)updateIntervalInFrustumWithDoubleArray:(IOSDoubleArray *)minmax
                                                withDouble:(jdouble)v1
                                                withDouble:(jdouble)v2 {
  return GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updateIntervalInFrustumWithDoubleArray_withDouble_withDouble_(minmax, v1, v2);
}

- (void)setView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setWaitForDisableStencilLines {
  waitForDisableStencilLines_ = YES;
}

- (void)disableStencilLines {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setWaitForSetStencilLines {
  waitForSetStencilLines_ = YES;
}

- (void)setStencilLines {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setProjectionMatrixForPicking {
  switch ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getProjection]) {
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_ORTHOGRAPHIC:
    [self viewOrtho];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES:
    [self viewGlasses];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE:
    [self viewPersp];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_OBLIQUE:
    [self viewOblique];
    break;
  }
}

- (void)setProjectionMatrix {
  switch ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getProjection]) {
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_ORTHOGRAPHIC:
    [self viewOrtho];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE:
    [self viewPersp];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES:
    [self viewGlasses];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_OBLIQUE:
    [self viewOblique];
    break;
  }
}

- (void)updateOrthoValues {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)viewOrtho {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setNearWithDouble:(jdouble)val {
  eyeToScreenDistance_ = val;
  [self updatePerspValues];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updatePerspEye(self);
}

- (void)updatePerspValues {
  perspNear_ = eyeToScreenDistance_ - [self getVisibleDepth] / 2;
  if (perspNear_ < GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PERSP_NEAR_MIN) {
    perspNear_ = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PERSP_NEAR_MIN;
  }
  perspFocus_ = -eyeToScreenDistance_ + [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getScreenZOffset];
  perspDistratio_ = perspNear_ / (eyeToScreenDistance_);
  perspLeft_ = [self getLeft] * perspDistratio_;
  perspRight_ = [self getRight] * perspDistratio_;
  perspBottom_ = [self getBottom] * perspDistratio_;
  perspTop_ = [self getTop] * perspDistratio_;
  perspFar_ = perspNear_ + [self getVisibleDepth];
}

- (void)updatePerspEye {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updatePerspEye(self);
}

- (GeogebraCommonKernelMatrixCoords *)getPerspEye {
  return perspEye_;
}

- (jdouble)getEyeSep {
  return glassesEyeSep_;
}

- (void)viewPersp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateGlassesValues {
  glassesEyeSep_ = -[((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getEyeSep] / 2;
  glassesEyesSide_ = [view3D_ getEyesSide];
  glassesEyesHeight_ = [view3D_ getEyesHeight];
  glassesEyeSep1_ = glassesEyeSep_ * perspDistratio_;
  glassesEyesSide1_ = glassesEyesSide_ * perspDistratio_;
  glassesEyesHeight1_ = glassesEyesHeight_ * perspDistratio_;
}

- (void)viewGlasses {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setColorMask {
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getProjection] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES && ![view3D_ isPolarized] && ![view3D_ isStereoBuffered]) {
    if (eye_ == GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_LEFT) {
      [self setColorMaskWithBoolean:YES withBoolean:NO withBoolean:NO withBoolean:YES];
    }
    else {
      [self setColorMaskWithBoolean:NO withBoolean:![view3D_ isGlassesShutDownGreen] withBoolean:YES withBoolean:YES];
    }
  }
  else {
    [self setColorMaskWithBoolean:YES withBoolean:YES withBoolean:YES withBoolean:YES];
  }
}

- (void)updateProjectionObliqueValues {
  jdouble angle = JavaLangMath_toRadiansWithDouble_([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getProjectionObliqueAngle]);
  obliqueX_ = -[view3D_ getProjectionObliqueFactor] * JavaLangMath_cosWithDouble_(angle);
  obliqueY_ = -[view3D_ getProjectionObliqueFactor] * JavaLangMath_sinWithDouble_(angle);
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setAndConsume_obliqueOrthoDirection_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(obliqueX_, obliqueY_, -1, 0));
}

- (void)viewOblique {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jdouble)getObliqueX {
  return obliqueX_;
}

- (jdouble)getObliqueY {
  return obliqueY_;
}

- (GeogebraCommonKernelMatrixCoords *)getObliqueOrthoDirection {
  return obliqueOrthoDirection_;
}

- (void)setViewWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)w
               withInt:(jint)h {
  left_ = x - w / 2;
  bottom_ = y - h / 2;
  right_ = left_ + w;
  top_ = bottom_ + h;
  switch ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getProjection]) {
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_ORTHOGRAPHIC:
    [self updateOrthoValues];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE:
    [self updatePerspValues];
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updatePerspEye(self);
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES:
    [self updatePerspValues];
    [self updateGlassesValues];
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updatePerspEye(self);
    if ([view3D_ isPolarized]) {
      [self setWaitForSetStencilLines];
    }
    break;
  }
  [self setView];
  [view3D_ setViewChanged];
  [view3D_ setWaitForUpdate];
}

- (void)exportToClipboard {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_set_exportType_(self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_get_CLIPBOARD());
}

- (void)uploadToGeoGebraTube {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_set_exportType_(self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_get_UPLOAD_TO_GEOGEBRATUBE());
}

- (jdouble)getEyeToScreenDistance {
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) getProjection] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE || [view3D_ getProjection] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES) {
    return eyeToScreenDistance_;
  }
  return JavaLangDouble_POSITIVE_INFINITY;
}

- (void)enableTextures2D {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)disableTextures2D {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)genTextures2DWithInt:(jint)number
                withIntArray:(IOSIntArray *)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)bindTextureWithInt:(jint)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<GeogebraCommonAwtGBufferedImage>)createBufferedImageWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *)label {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)createAlphaTextureWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *)label
                                             withGeogebraCommonAwtGBufferedImage:(id<GeogebraCommonAwtGBufferedImage>)bimg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (jint)firstPowerOfTwoGreaterThanWithInt:(jint)val {
  return GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_firstPowerOfTwoGreaterThanWithInt_(val);
}

- (void)textureImage2DWithInt:(jint)sizeX
                      withInt:(jint)sizeY
                withByteArray:(IOSByteArray *)buf {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setTextureLinear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setTextureNearest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)init__ {
  [self initShaders];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_set_geometryManager_(self, [self createManager]);
  jfloat ambiant0 = 0.5f;
  jfloat diffuse0 = 1.0f - ambiant0;
  jfloat ambiant1 = 0.4f;
  jfloat diffuse1 = 1.0f - ambiant1;
  [self setLightAmbiantDiffuseWithFloat:ambiant0 withFloat:diffuse0 withFloat:ambiant1 withFloat:diffuse1];
  [self setColorMaterial];
  [self setLightModel];
  [self enableLighting];
  [self enableDepthTest];
  [self setDepthFunc];
  [self enablePolygonOffsetFill];
  [self enableCulling];
  [self setCullFaceBack];
  [self setBlendFunc];
  [self enableBlending];
  [self updateClearColor];
  [self setAlphaFunc];
  [self enableNormalNormalized];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLTextures *) nil_chk(textures_)) init__];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) reset];
  needsNewPickingBuffer_ = YES;
  [self resumeAnimator];
}

- (void)setDepthFunc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enablePolygonOffsetFill {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setBlendFunc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableNormalNormalized {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableFading {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableDash {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setDashTextureWithInt:(jint)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)useLogicalPicking {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonGeogebra3DEuclidian3DHitting *)getHitting {
  return nil;
}

- (void)dealloc {
  RELEASE_(drawHits_);
  RELEASE_(drawable3DLists_);
  RELEASE_(view3D_);
  RELEASE_(m_drawingMatrix_);
  RELEASE_(geometryManager_);
  RELEASE_(textures_);
  RELEASE_(dilationValues_);
  RELEASE_(mouse_);
  RELEASE_(perspEye_);
  RELEASE_(obliqueOrthoDirection_);
  RELEASE_(exportType_);
  RELEASE_(export_num_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer class]) {
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_SQRT2_DIV2_ = (jfloat) JavaLangMath_sqrtWithDouble_(2) / 2;
    JreStrongAssignAndConsume(&GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_LIGHT_POSITION_W_, nil, [IOSFloatArray newArrayWithFloats:(jfloat[]){ GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_SQRT2_DIV2_, 0.0f, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_SQRT2_DIV2_ } count:3]);
    JreStrongAssignAndConsume(&GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_LIGHT_POSITION_D_, nil, [IOSFloatArray newArrayWithFloats:(jfloat[]){ GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_SQRT2_DIV2_, 0.0f, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_SQRT2_DIV2_, 0.0f } count:4]);
    J2OBJC_SET_INITIALIZED(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "Renderer", NULL, 0x1, NULL, NULL },
    { "setDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView:", "setDrawable3DLists", "V", 0x1, NULL, NULL },
    { "display", NULL, "V", 0x401, NULL, NULL },
    { "updateViewAndDrawables", NULL, "V", 0x4, NULL, NULL },
    { "initRenderingValues", NULL, "V", 0x4, NULL, NULL },
    { "drawScene", NULL, "V", 0x1, NULL, NULL },
    { "setDrawLeft", NULL, "V", 0x14, NULL, NULL },
    { "setDrawRight", NULL, "V", 0x14, NULL, NULL },
    { "setBufferLeft", NULL, "V", 0x404, NULL, NULL },
    { "setBufferRight", NULL, "V", 0x404, NULL, NULL },
    { "clearColorBuffer", NULL, "V", 0x404, NULL, NULL },
    { "clearDepthBuffer", NULL, "V", 0x404, NULL, NULL },
    { "setStencilFuncWithInt:", "setStencilFunc", "V", 0x404, NULL, NULL },
    { "exportImage", NULL, "V", 0x404, NULL, NULL },
    { "enableCulling", NULL, "V", 0x401, NULL, NULL },
    { "disableCulling", NULL, "V", 0x401, NULL, NULL },
    { "setCullFaceFront", NULL, "V", 0x401, NULL, NULL },
    { "setCullFaceBack", NULL, "V", 0x401, NULL, NULL },
    { "disableBlending", NULL, "V", 0x401, NULL, NULL },
    { "enableBlending", NULL, "V", 0x401, NULL, NULL },
    { "drawTranspNotCurved", NULL, "V", 0x4, NULL, NULL },
    { "drawTransp", NULL, "V", 0x4, NULL, NULL },
    { "setLightWithInt:", "setLight", "V", 0x404, NULL, NULL },
    { "drawNotTransp", NULL, "V", 0x4, NULL, NULL },
    { "enableTextures", NULL, "V", 0x401, NULL, NULL },
    { "disableTextures", NULL, "V", 0x401, NULL, NULL },
    { "enableMultisample", NULL, "V", 0x401, NULL, NULL },
    { "disableMultisample", NULL, "V", 0x401, NULL, NULL },
    { "enableAlphaTest", NULL, "V", 0x401, NULL, NULL },
    { "disableAlphaTest", NULL, "V", 0x401, NULL, NULL },
    { "disableLighting", NULL, "V", 0x401, NULL, NULL },
    { "enableLighting", NULL, "V", 0x401, NULL, NULL },
    { "initLighting", NULL, "V", 0x401, NULL, NULL },
    { "setLabelOriginWithGeogebraCommonKernelMatrixCoords:", "setLabelOrigin", "V", 0x401, NULL, NULL },
    { "drawFaceToScreen", NULL, "V", 0x4, NULL, NULL },
    { "setEnableClipPlanesWithBoolean:", "setEnableClipPlanes", "V", 0x1, NULL, NULL },
    { "enableClipPlanes", NULL, "V", 0x404, NULL, NULL },
    { "disableClipPlanes", NULL, "V", 0x404, NULL, NULL },
    { "enableClipPlanesIfNeeded", NULL, "V", 0x1, NULL, NULL },
    { "disableClipPlanesIfNeeded", NULL, "V", 0x1, NULL, NULL },
    { "setClipPlanesWithDoubleArray2:", "setClipPlanes", "V", 0x401, NULL, NULL },
    { "setMatrixView", NULL, "V", 0x404, NULL, NULL },
    { "unsetMatrixView", NULL, "V", 0x404, NULL, NULL },
    { "enableDepthMask", NULL, "V", 0x401, NULL, NULL },
    { "disableDepthMask", NULL, "V", 0x401, NULL, NULL },
    { "enableDepthTest", NULL, "V", 0x401, NULL, NULL },
    { "disableDepthTest", NULL, "V", 0x401, NULL, NULL },
    { "setColorMaskWithBoolean:withBoolean:withBoolean:withBoolean:", "setColorMask", "V", 0x401, NULL, NULL },
    { "draw", NULL, "V", 0x4, NULL, NULL },
    { "drawSurfacesOutline", NULL, "V", 0x404, NULL, NULL },
    { "setLineWidthWithDouble:", "setLineWidth", "V", 0x401, NULL, NULL },
    { "setColorWithGeogebraCommonKernelMatrixCoords:", "setColor", "V", 0x11, NULL, NULL },
    { "setColorWithGeogebraCommonAwtGColor:", "setColor", "V", 0x11, NULL, NULL },
    { "setColorWithFloat:withFloat:withFloat:withFloat:", "setColor", "V", 0x404, NULL, NULL },
    { "setArrowTypeWithInt:", "setArrowType", "V", 0x1, NULL, NULL },
    { "setArrowWidthWithDouble:", "setArrowWidth", "V", 0x1, NULL, NULL },
    { "setArrowLengthWithDouble:", "setArrowLength", "V", 0x1, NULL, NULL },
    { "setLayerWithFloat:", "setLayer", "V", 0x401, NULL, NULL },
    { "setMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:", "setMatrix", "V", 0x1, NULL, NULL },
    { "getMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", 0x1, NULL, NULL },
    { "initMatrix", NULL, "V", 0x401, NULL, NULL },
    { "resetMatrix", NULL, "V", 0x401, NULL, NULL },
    { "getGeometryManager", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Manager;", 0x11, NULL, NULL },
    { "getTextures", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Textures;", 0x1, NULL, NULL },
    { "drawCursorWithInt:", "drawCursor", "V", 0x11, NULL, NULL },
    { "drawCompletingCursorWithDouble:withGeogebraCommonKernelMatrixCoords:", "drawCompletingCursor", "V", 0x11, NULL, NULL },
    { "drawViewInFrontOf", NULL, "V", 0x1, NULL, NULL },
    { "drawMouseCursor", NULL, "V", 0x401, NULL, NULL },
    { "startPolygonsWithInt:", "startPolygons", "I", 0x1, NULL, NULL },
    { "drawPolygonWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoordsArray:", "drawPolygon", "V", 0x1, NULL, NULL },
    { "endPolygons", NULL, "V", 0x1, NULL, NULL },
    { "setMouseLocWithGeogebraCommonAwtGPoint:withInt:", "setMouseLoc", "V", 0x1, NULL, NULL },
    { "setHitsWithGeogebraCommonAwtGPoint:withInt:", "setHits", "V", 0x401, NULL, NULL },
    { "getLabelHitWithGeogebraCommonAwtGPoint:", "getLabelHit", "Lgeogebra.common.kernel.geos.GeoElement;", 0x401, NULL, NULL },
    { "addOneGeoToPick", NULL, "V", 0x1, NULL, NULL },
    { "removeOneGeoToPick", NULL, "V", 0x1, NULL, NULL },
    { "createDrawableListForPickingWithInt:", "createDrawableListForPicking", "[Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;", 0xc, NULL, NULL },
    { "setGLForPicking", NULL, "V", 0x404, NULL, NULL },
    { "pushSceneMatrix", NULL, "V", 0x404, NULL, NULL },
    { "intersectsMouse3DWithDouble:withDouble:withDouble:", "intersectsMouse3D", "Z", 0x4, NULL, NULL },
    { "doPick", NULL, "V", 0x404, NULL, NULL },
    { "pickIntersectionCurves", NULL, "V", 0x401, NULL, NULL },
    { "glLoadNameWithInt:", "glLoadName", "V", 0x401, NULL, NULL },
    { "pickWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:", "pick", "V", 0x1, NULL, NULL },
    { "pickWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:withBoolean:withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:", "pick", "V", 0x1, NULL, NULL },
    { "pickLabelWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "pickLabel", "V", 0x1, NULL, NULL },
    { "getScreenZFromPickingDepthWithDouble:", "getScreenZFromPickingDepth", "D", 0x1, NULL, NULL },
    { "setLightPosition", NULL, "V", 0x4, NULL, NULL },
    { "getLightPosition", NULL, "[F", 0x404, NULL, NULL },
    { "setLightPositionWithFloatArray:", "setLightPosition", "V", 0x404, NULL, NULL },
    { "setLightAmbiantDiffuseWithFloat:withFloat:withFloat:withFloat:", "setLightAmbiantDiffuse", "V", 0x404, NULL, NULL },
    { "setWaitForUpdateClearColor", NULL, "V", 0x1, NULL, NULL },
    { "updateClearColor", NULL, "V", 0x4, NULL, NULL },
    { "setClearColorWithFloat:withFloat:withFloat:withFloat:", "setClearColor", "V", 0x401, NULL, NULL },
    { "initShaders", NULL, "V", 0x4, NULL, NULL },
    { "useShaderProgram", NULL, "V", 0x4, NULL, NULL },
    { "createManager", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Manager;", 0x404, NULL, NULL },
    { "setColorMaterial", NULL, "V", 0x404, NULL, NULL },
    { "setLightModel", NULL, "V", 0x404, NULL, NULL },
    { "setAlphaFunc", NULL, "V", 0x404, NULL, NULL },
    { "resumeAnimator", NULL, "V", 0x401, NULL, NULL },
    { "getLeft", NULL, "I", 0x1, NULL, NULL },
    { "getRight", NULL, "I", 0x1, NULL, NULL },
    { "getWidth", NULL, "I", 0x1, NULL, NULL },
    { "getBottom", NULL, "I", 0x1, NULL, NULL },
    { "getTop", NULL, "I", 0x1, NULL, NULL },
    { "getHeight", NULL, "I", 0x1, NULL, NULL },
    { "getVisibleDepth", NULL, "I", 0x1, NULL, NULL },
    { "getIntervalInFrustumWithDoubleArray:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withBoolean:", "getIntervalInFrustum", "[D", 0x1, NULL, NULL },
    { "updateIntervalInFrustumWithDoubleArray:withDouble:withDouble:", "updateIntervalInFrustum", "[D", 0xa, NULL, NULL },
    { "setView", NULL, "V", 0x404, NULL, NULL },
    { "setWaitForDisableStencilLines", NULL, "V", 0x1, NULL, NULL },
    { "disableStencilLines", NULL, "V", 0x404, NULL, NULL },
    { "setWaitForSetStencilLines", NULL, "V", 0x1, NULL, NULL },
    { "setStencilLines", NULL, "V", 0x404, NULL, NULL },
    { "setProjectionMatrixForPicking", NULL, "V", 0x4, NULL, NULL },
    { "setProjectionMatrix", NULL, "V", 0x4, NULL, NULL },
    { "updateOrthoValues", NULL, "V", 0x401, NULL, NULL },
    { "viewOrtho", NULL, "V", 0x404, NULL, NULL },
    { "setNearWithDouble:", "setNear", "V", 0x11, NULL, NULL },
    { "updatePerspValues", NULL, "V", 0x4, NULL, NULL },
    { "updatePerspEye", NULL, "V", 0x2, NULL, NULL },
    { "getPerspEye", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getEyeSep", NULL, "D", 0x1, NULL, NULL },
    { "viewPersp", NULL, "V", 0x404, NULL, NULL },
    { "updateGlassesValues", NULL, "V", 0x1, NULL, NULL },
    { "viewGlasses", NULL, "V", 0x404, NULL, NULL },
    { "setColorMask", NULL, "V", 0x4, NULL, NULL },
    { "updateProjectionObliqueValues", NULL, "V", 0x1, NULL, NULL },
    { "viewOblique", NULL, "V", 0x404, NULL, NULL },
    { "getObliqueX", NULL, "D", 0x1, NULL, NULL },
    { "getObliqueY", NULL, "D", 0x1, NULL, NULL },
    { "getObliqueOrthoDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "setViewWithInt:withInt:withInt:withInt:", "setView", "V", 0x1, NULL, NULL },
    { "exportToClipboard", NULL, "V", 0x1, NULL, NULL },
    { "uploadToGeoGebraTube", NULL, "V", 0x1, NULL, NULL },
    { "getEyeToScreenDistance", NULL, "D", 0x1, NULL, NULL },
    { "enableTextures2D", NULL, "V", 0x401, NULL, NULL },
    { "disableTextures2D", NULL, "V", 0x401, NULL, NULL },
    { "genTextures2DWithInt:withIntArray:", "genTextures2D", "V", 0x401, NULL, NULL },
    { "bindTextureWithInt:", "bindTexture", "V", 0x401, NULL, NULL },
    { "createBufferedImageWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D:", "createBufferedImage", "Lgeogebra.common.awt.GBufferedImage;", 0x401, NULL, NULL },
    { "createAlphaTextureWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D:withGeogebraCommonAwtGBufferedImage:", "createAlphaTexture", "V", 0x401, NULL, NULL },
    { "firstPowerOfTwoGreaterThanWithInt:", "firstPowerOfTwoGreaterThan", "I", 0x19, NULL, NULL },
    { "textureImage2DWithInt:withInt:withByteArray:", "textureImage2D", "V", 0x401, NULL, NULL },
    { "setTextureLinear", NULL, "V", 0x401, NULL, NULL },
    { "setTextureNearest", NULL, "V", 0x401, NULL, NULL },
    { "init__", "init", "V", 0x1, NULL, NULL },
    { "setDepthFunc", NULL, "V", 0x404, NULL, NULL },
    { "enablePolygonOffsetFill", NULL, "V", 0x404, NULL, NULL },
    { "setBlendFunc", NULL, "V", 0x404, NULL, NULL },
    { "enableNormalNormalized", NULL, "V", 0x404, NULL, NULL },
    { "enableFading", NULL, "V", 0x401, NULL, NULL },
    { "enableDash", NULL, "V", 0x401, NULL, NULL },
    { "setDashTextureWithInt:", "setDashTexture", "V", 0x401, NULL, NULL },
    { "useLogicalPicking", NULL, "Z", 0x401, NULL, NULL },
    { "getHitting", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.Hitting;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_TEXT_SCALE_FACTOR_", NULL, 0x1a, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DEFAULT_TEXT_SCALE_FACTOR },
    { "MOUSE_PICK_DEPTH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_MOUSE_PICK_DEPTH },
    { "drawHits_", NULL, 0x4, "[Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;", NULL, NULL,  },
    { "pickingLoop_", NULL, 0x4, "I", NULL, NULL,  },
    { "drawable3DLists_", NULL, 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3DListsForView;", NULL, NULL,  },
    { "view3D_", NULL, 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.EuclidianView3D;", NULL, NULL,  },
    { "m_drawingMatrix_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "geometryManager_", NULL, 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Manager;", NULL, NULL,  },
    { "textures_", NULL, 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Textures;", NULL, NULL,  },
    { "ARROW_TYPE_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ARROW_TYPE_NONE },
    { "ARROW_TYPE_SIMPLE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ARROW_TYPE_SIMPLE },
    { "m_arrowType_", NULL, 0x2, "I", NULL, NULL,  },
    { "m_arrowLength_", NULL, 0x2, "D", NULL, NULL,  },
    { "m_arrowWidth_", NULL, 0x2, "D", NULL, NULL,  },
    { "DILATION_NONE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DILATION_NONE },
    { "DILATION_HIGHLITED_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DILATION_HIGHLITED },
    { "dilation_", NULL, 0x2, "I", NULL, NULL,  },
    { "dilationValues_", NULL, 0x2, "[D", NULL, NULL,  },
    { "mouse_", NULL, 0x4, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "waitForPick_", NULL, 0x4, "Z", NULL, NULL,  },
    { "doPick__", "doPick", 0x2, "Z", NULL, NULL,  },
    { "PICKING_MODE_OBJECTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PICKING_MODE_OBJECTS },
    { "PICKING_MODE_LABELS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PICKING_MODE_LABELS },
    { "pickingMode_", NULL, 0x4, "I", NULL, NULL,  },
    { "enableClipPlanes__", "enableClipPlanes", 0x4, "Z", NULL, NULL,  },
    { "waitForUpdateClipPlanes_", NULL, 0x4, "Z", NULL, NULL,  },
    { "oldGeoToPickSize_", NULL, 0x4, "I", NULL, NULL,  },
    { "geoToPickSize_", NULL, 0x4, "I", NULL, NULL,  },
    { "needsNewPickingBuffer_", NULL, 0x4, "Z", NULL, NULL,  },
    { "SQRT2_DIV2_", NULL, 0x1a, "F", &GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_SQRT2_DIV2_, NULL,  },
    { "LIGHT_POSITION_W_", NULL, 0x1c, "[F", &GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_LIGHT_POSITION_W_, NULL,  },
    { "LIGHT_POSITION_D_", NULL, 0x1c, "[F", &GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_LIGHT_POSITION_D_, NULL,  },
    { "waitForUpdateClearColor_", NULL, 0x4, "Z", NULL, NULL,  },
    { "left_", NULL, 0x4, "I", NULL, NULL,  },
    { "right_", NULL, 0x4, "I", NULL, NULL,  },
    { "bottom_", NULL, 0x4, "I", NULL, NULL,  },
    { "top_", NULL, 0x4, "I", NULL, NULL,  },
    { "DEPTH_FACTOR_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DEPTH_FACTOR },
    { "waitForDisableStencilLines_", NULL, 0x4, "Z", NULL, NULL,  },
    { "waitForSetStencilLines_", NULL, 0x4, "Z", NULL, NULL,  },
    { "eyeToScreenDistance_", NULL, 0x4, "D", NULL, NULL,  },
    { "PERSP_NEAR_MIN_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PERSP_NEAR_MIN },
    { "perspNear_", NULL, 0x4, "D", NULL, NULL,  },
    { "perspLeft_", NULL, 0x4, "D", NULL, NULL,  },
    { "perspRight_", NULL, 0x4, "D", NULL, NULL,  },
    { "perspBottom_", NULL, 0x4, "D", NULL, NULL,  },
    { "perspTop_", NULL, 0x4, "D", NULL, NULL,  },
    { "perspFar_", NULL, 0x4, "D", NULL, NULL,  },
    { "perspDistratio_", NULL, 0x4, "D", NULL, NULL,  },
    { "perspFocus_", NULL, 0x4, "D", NULL, NULL,  },
    { "perspEye_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "glassesEyeSep_", NULL, 0x4, "D", NULL, NULL,  },
    { "glassesEyeSep1_", NULL, 0x4, "D", NULL, NULL,  },
    { "glassesEyesSide_", NULL, 0x4, "D", NULL, NULL,  },
    { "glassesEyesSide1_", NULL, 0x4, "D", NULL, NULL,  },
    { "glassesEyesHeight_", NULL, 0x4, "D", NULL, NULL,  },
    { "glassesEyesHeight1_", NULL, 0x4, "D", NULL, NULL,  },
    { "EYE_ONE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_ONE },
    { "EYE_LEFT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_LEFT },
    { "EYE_RIGHT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_RIGHT },
    { "eye_", NULL, 0x4, "I", NULL, NULL,  },
    { "obliqueX_", NULL, 0x4, "D", NULL, NULL,  },
    { "obliqueY_", NULL, 0x4, "D", NULL, NULL,  },
    { "obliqueOrthoDirection_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "exportType_", NULL, 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;", NULL, NULL,  },
    { "export_n_", NULL, 0x4, "I", NULL, NULL,  },
    { "export_val_", NULL, 0x4, "D", NULL, NULL,  },
    { "export_min_", NULL, 0x4, "D", NULL, NULL,  },
    { "export_max_", NULL, 0x4, "D", NULL, NULL,  },
    { "export_step_", NULL, 0x4, "D", NULL, NULL,  },
    { "export_i_", NULL, 0x4, "I", NULL, NULL,  },
    { "export_num_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$PickingType;", "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer = { 2, "Renderer", "geogebra.common.geogebra3D.euclidian3D.openGL", NULL, 0x401, 157, methods, 72, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view) {
  NSObject_init(self);
  self->m_arrowType_ = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ARROW_TYPE_NONE;
  self->dilation_ = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_DILATION_NONE;
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setAndConsume_dilationValues_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1, 1.3 } count:2]);
  self->waitForPick_ = NO;
  self->doPick__ = NO;
  self->pickingMode_ = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PICKING_MODE_OBJECTS;
  self->waitForUpdateClipPlanes_ = NO;
  self->geoToPickSize_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_DRAWABLES_NB;
  self->needsNewPickingBuffer_ = YES;
  self->waitForUpdateClearColor_ = NO;
  self->left_ = 0;
  self->right_ = 640;
  self->bottom_ = 0;
  self->top_ = 480;
  self->waitForDisableStencilLines_ = NO;
  self->waitForSetStencilLines_ = NO;
  self->eyeToScreenDistance_ = 0;
  self->perspNear_ = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PERSP_NEAR_MIN;
  self->eye_ = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_ONE;
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_set_exportType_(self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_get_NONE());
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_set_view3D_(self, view);
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setAndConsume_textures_(self, new_GeogebraCommonGeogebra3DEuclidian3DOpenGLTextures_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonUtilImageManager_(self, [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) getApplication])) getImageManager]));
}

void GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawLeft(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *self) {
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) isPolarized]) {
    [self setStencilFuncWithInt:0];
  }
  else if ([self->view3D_ isStereoBuffered]) {
    [self setBufferLeft];
    [self clearColorBuffer];
  }
  self->eye_ = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_LEFT;
  [self setColorMask];
  [self clearDepthBuffer];
}

void GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setDrawRight(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *self) {
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(self->view3D_)) isPolarized]) {
    [self setStencilFuncWithInt:1];
  }
  else if ([self->view3D_ isStereoBuffered]) {
    [self setBufferRight];
    [self clearColorBuffer];
  }
  self->eye_ = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_EYE_RIGHT;
  [self setColorMask];
  [self clearDepthBuffer];
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_createDrawableListForPickingWithInt_(jint bufSize) {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_initialize();
  return [IOSObjectArray arrayWithLength:bufSize type:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_class_()];
}

IOSDoubleArray *GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updateIntervalInFrustumWithDoubleArray_withDouble_withDouble_(IOSDoubleArray *minmax, jdouble v1, jdouble v2) {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_initialize();
  if (v1 > v2) {
    jdouble v = v1;
    v1 = v2;
    v2 = v;
  }
  if (v1 > IOSDoubleArray_Get(nil_chk(minmax), 0)) *IOSDoubleArray_GetRef(minmax, 0) = v1;
  if (v2 < IOSDoubleArray_Get(minmax, 1)) *IOSDoubleArray_GetRef(minmax, 1) = v2;
  return minmax;
}

void GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_updatePerspEye(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *self) {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_setAndConsume_perspEye_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(self->glassesEyesSide_, self->glassesEyesHeight_, -self->perspFocus_, 1));
}

jint GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_firstPowerOfTwoGreaterThanWithInt_(jint val) {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_initialize();
  jint ret = 1;
  while (ret < val) ret *= 2;
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum)

GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_values_[3];

@implementation GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_values() {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_values_ count:3 type:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_values();
}

+ (GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_valueOfWithNSString_(name);
}

GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initialize();
  for (int i = 0; i < 3; i++) {
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *e = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum class]) {
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_POINT_OR_CURVE = new_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(@"POINT_OR_CURVE", 0);
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_SURFACE = new_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(@"SURFACE", 1);
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_LABEL = new_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(@"LABEL", 2);
    J2OBJC_SET_INITIALIZED(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "POINT_OR_CURVE", "POINT_OR_CURVE", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$PickingType;", &GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_POINT_OR_CURVE, NULL,  },
    { "SURFACE", "SURFACE", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$PickingType;", &GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_SURFACE, NULL,  },
    { "LABEL", "LABEL", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$PickingType;", &GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_LABEL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$PickingType;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum = { 2, "PickingType", "geogebra.common.geogebra3D.euclidian3D.openGL", "Renderer", 0x4019, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/geogebra3D/euclidian3D/openGL/Renderer$PickingType;>;" };
  return &_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *new_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *self = [GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum alloc];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum)

GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_values_[6];

@implementation GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_values() {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_values_ count:6 type:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_values();
}

+ (GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_valueOfWithNSString_(name);
}

GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initialize();
  for (int i = 0; i < 6; i++) {
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *e = GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum class]) {
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_NONE = new_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(@"NONE", 0);
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_ANIMATEDGIF = new_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(@"ANIMATEDGIF", 1);
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_THUMBNAIL_IN_GGBFILE = new_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(@"THUMBNAIL_IN_GGBFILE", 2);
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_PNG = new_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(@"PNG", 3);
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_CLIPBOARD = new_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(@"CLIPBOARD", 4);
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_UPLOAD_TO_GEOGEBRATUBE = new_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(@"UPLOAD_TO_GEOGEBRATUBE", 5);
    J2OBJC_SET_INITIALIZED(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "NONE", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;", &GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_NONE, NULL,  },
    { "ANIMATEDGIF", "ANIMATEDGIF", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;", &GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_ANIMATEDGIF, NULL,  },
    { "THUMBNAIL_IN_GGBFILE", "THUMBNAIL_IN_GGBFILE", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;", &GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_THUMBNAIL_IN_GGBFILE, NULL,  },
    { "PNG", "PNG", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;", &GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_PNG, NULL,  },
    { "CLIPBOARD", "CLIPBOARD", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;", &GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_CLIPBOARD, NULL,  },
    { "UPLOAD_TO_GEOGEBRATUBE", "UPLOAD_TO_GEOGEBRATUBE", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;", &GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_UPLOAD_TO_GEOGEBRATUBE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$ExportType;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum = { 2, "ExportType", "geogebra.common.geogebra3D.euclidian3D.openGL", "Renderer", 0x401c, 0, NULL, 6, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/geogebra3D/euclidian3D/openGL/Renderer$ExportType;>;" };
  return &_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *new_GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum *self = [GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum alloc];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_ExportTypeEnum)
