//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/AlgebraProcessor3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCurveCartesian3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/AlgebraProcessor3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoVec4D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoCurveCartesian.h"
#include "geogebra/common/kernel/algos/AlgoDependentNumber.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/Polynomial.h"
#include "geogebra/common/kernel/arithmetic3D/Vector3DValue.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/CommandDispatcher.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Character.h"

@interface GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D ()

- (IOSObjectArray *)processQuadricWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ;

- (IOSObjectArray *)processPlaneWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ;

@end

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processQuadricWithGeogebraCommonKernelArithmeticEquation_(GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D *self, GeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processPlaneWithGeogebraCommonKernelArithmeticEquation_(GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D *self, GeogebraCommonKernelArithmeticEquation *equ);

@implementation GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
 withGeogebraCommonKernelCommandsCommandDispatcher:(GeogebraCommonKernelCommandsCommandDispatcher *)cd {
  GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandDispatcher_(self, kernel, cd);
  return self;
}

- (IOSObjectArray *)processPointVector3DWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)n
                                       withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)evaluate {
  NSString *label = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) getLabel];
  IOSDoubleArray *p = [((id<GeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<GeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(evaluate, @protocol(GeogebraCommonKernelArithmetic3DVector3DValue))))) getPointAsDouble];
  jint mode = [((id<GeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<GeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(evaluate, @protocol(GeogebraCommonKernelArithmetic3DVector3DValue))))) getMode];
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  jboolean isIndependent = [n isConstant];
  if (label != nil) {
    if (!([n isForcedPoint] || [n isForcedVector])) {
      if (JavaLangCharacter_isLowerCaseWithChar_([label charAtWithInt:0])) [n setForceVector];
      else [n setForcePoint];
    }
  }
  jboolean isVector = [n shouldEvaluateToGeoVector];
  if (isIndependent) {
    jdouble x = IOSDoubleArray_Get(nil_chk(p), 0);
    jdouble y = IOSDoubleArray_Get(p, 1);
    jdouble z = IOSDoubleArray_Get(p, 2);
    if (isVector) IOSObjectArray_Set(ret, 0, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Vector3DWithNSString:label withDouble:x withDouble:y withDouble:z]);
    else IOSObjectArray_Set(ret, 0, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Point3DWithNSString:label withDouble:x withDouble:y withDouble:z withBoolean:NO]);
  }
  else {
    if (isVector) IOSObjectArray_Set(ret, 0, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) DependentVector3DWithNSString:label withGeogebraCommonKernelArithmeticExpressionNode:n]);
    else IOSObjectArray_Set(ret, 0, [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) DependentPoint3DWithNSString:label withGeogebraCommonKernelArithmeticExpressionNode:n]);
  }
  if (mode == GeogebraCommonKernelKernel_COORD_SPHERICAL) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoVec4D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoVec4D *) check_class_cast(IOSObjectArray_Get(ret, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoVec4D class])))) setModeWithInt:GeogebraCommonKernelKernel_COORD_SPHERICAL];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) updateRepaint];
  }
  return ret;
}

- (void)checkNoTermsInZWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  if ([((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) containsZ]) {
    switch ([equ degree]) {
      case 1:
      [equ setForcePlane];
      break;
      case 2:
      [equ setForceQuadric];
      break;
    }
  }
}

- (IOSObjectArray *)processLineWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  if ([((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) isForcedLine]) return [super processLineWithGeogebraCommonKernelArithmeticEquation:equ];
  if ([equ isForcedPlane] || [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) isParsingFor3D]) {
    return GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processPlaneWithGeogebraCommonKernelArithmeticEquation_(self, equ);
  }
  return [super processLineWithGeogebraCommonKernelArithmeticEquation:equ];
}

- (IOSObjectArray *)processConicWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  if ([((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) isForcedConic]) return [super processConicWithGeogebraCommonKernelArithmeticEquation:equ];
  if ([equ isForcedQuadric] || [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getActiveEuclidianView])) isEuclidianView3D]) {
    return GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processQuadricWithGeogebraCommonKernelArithmeticEquation_(self, equ);
  }
  return [super processConicWithGeogebraCommonKernelArithmeticEquation:equ];
}

- (IOSObjectArray *)processQuadricWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  return GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processQuadricWithGeogebraCommonKernelArithmeticEquation_(self, equ);
}

- (IOSObjectArray *)processPlaneWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  return GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processPlaneWithGeogebraCommonKernelArithmeticEquation_(self, equ);
}

- (IOSObjectArray *)processParametricFunctionWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)exp
                                            withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                           withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                 withNSString:(NSString *)label {
  if ([GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:ev]) {
    GeogebraCommonKernelGeosGeoNumeric *loc = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    [loc setLocalVariableLabelWithNSString:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv)) getSetVarString]];
    [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:fv withGeogebraCommonKernelArithmeticExpressionValue:loc];
    GeogebraCommonKernelArithmeticExpressionNode *cx = [self computeCoordWithGeogebraCommonKernelArithmeticExpressionNode:exp withInt:0];
    GeogebraCommonKernelArithmeticExpressionNode *cy = [self computeCoordWithGeogebraCommonKernelArithmeticExpressionNode:exp withInt:1];
    GeogebraCommonKernelArithmeticExpressionNode *cz = [self computeCoordWithGeogebraCommonKernelArithmeticExpressionNode:exp withInt:2];
    IOSObjectArray *coefX = [IOSObjectArray arrayWithLength:5 type:GeogebraCommonKernelArithmeticExpressionValue_class_()];
    IOSObjectArray *coefY = [IOSObjectArray arrayWithLength:5 type:GeogebraCommonKernelArithmeticExpressionValue_class_()];
    IOSObjectArray *coefZ = [IOSObjectArray arrayWithLength:5 type:GeogebraCommonKernelArithmeticExpressionValue_class_()];
    for (jint i = 0; i < coefX->size_; i++) {
      IOSObjectArray_SetAndConsume(coefX, i, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 0));
      IOSObjectArray_SetAndConsume(coefY, i, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 0));
      IOSObjectArray_SetAndConsume(coefZ, i, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 0));
    }
    jint degX = [self getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:cx withGeogebraCommonKernelArithmeticExpressionValueArray:coefX withGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 1) autorelease] withGeogebraCommonKernelGeosGeoNumeric:loc];
    jint degY = [self getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:cy withGeogebraCommonKernelArithmeticExpressionValueArray:coefY withGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 1) autorelease] withGeogebraCommonKernelGeosGeoNumeric:loc];
    jint degZ = [self getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:cz withGeogebraCommonKernelArithmeticExpressionValueArray:coefZ withGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 1) autorelease] withGeogebraCommonKernelGeosGeoNumeric:loc];
    if ((degX >= 0 && degY >= 0 && degZ >= 0) && (degX < 2 && degY < 2 && degZ < 2)) {
      GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *line = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
      if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 0))) isConstant] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 0))) isConstant] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefZ, 0))) isConstant] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 1))) isConstant] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 1))) isConstant] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefZ, 1))) isConstant]) {
        GeogebraCommonKernelMatrixCoords *start = [new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 0))) evaluateDouble], [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 0))) evaluateDouble], [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefZ, 0))) evaluateDouble] } count:3]) autorelease];
        GeogebraCommonKernelMatrixCoords *v = [new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 1))) evaluateDouble], [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 1))) evaluateDouble], [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefZ, 1))) evaluateDouble] } count:3]) autorelease];
        [line setCoordWithGeogebraCommonKernelMatrixCoords:start withGeogebraCommonKernelMatrixCoords:v];
        [line setParameterWithNSString:[fv getSetVarString]];
        [line setLabelWithNSString:label];
      }
      else {
        line = (GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getManager3D])) Line3DWithNSString:label withGeogebraCommonKernelArithmeticExpressionValueArray:coefX withGeogebraCommonKernelArithmeticExpressionValueArray:coefY withGeogebraCommonKernelArithmeticExpressionValueArray:coefZ], [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class]);
      }
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(line)) setParameterWithNSString:[fv getSetVarString]];
      return [IOSObjectArray arrayWithObjects:(id[]){ line } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
    GeogebraCommonKernelAlgosAlgoDependentNumber *nx = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, cx, NO) autorelease];
    GeogebraCommonKernelAlgosAlgoDependentNumber *ny = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, cy, NO) autorelease];
    GeogebraCommonKernelAlgosAlgoDependentNumber *nz = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, cz, NO) autorelease];
    GeogebraCommonKernelGeosGeoNumeric *from = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, -10) autorelease];
    GeogebraCommonKernelGeosGeoNumeric *to = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, 10) autorelease];
    GeogebraCommonKernelAlgosAlgoCurveCartesian *ac = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCurveCartesian3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, [IOSObjectArray arrayWithObjects:(id[]){ [nx getNumber], [ny getNumber], [nz getNumber] } count:3 type:GeogebraCommonKernelArithmeticNumberValue_class_()], loc, from, to) autorelease];
    return [ac getOutput];
  }
  return [super processParametricFunctionWithGeogebraCommonKernelArithmeticExpressionNode:exp withGeogebraCommonKernelArithmeticExpressionValue:ev withGeogebraCommonKernelArithmeticFunctionVariable:fv withNSString:label];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withGeogebraCommonKernelCommandsCommandDispatcher:", "AlgebraProcessor3D", NULL, 0x1, NULL, NULL },
    { "processPointVector3DWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticExpressionValue:", "processPointVector3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "checkNoTermsInZWithGeogebraCommonKernelArithmeticEquation:", "checkNoTermsInZ", "V", 0x4, NULL, NULL },
    { "processLineWithGeogebraCommonKernelArithmeticEquation:", "processLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "processConicWithGeogebraCommonKernelArithmeticEquation:", "processConic", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "processQuadricWithGeogebraCommonKernelArithmeticEquation:", "processQuadric", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "processPlaneWithGeogebraCommonKernelArithmeticEquation:", "processPlane", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "processParametricFunctionWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticFunctionVariable:withNSString:", "processParametricFunction", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D = { 2, "AlgebraProcessor3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandDispatcher_(GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D *self, GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelCommandsCommandDispatcher *cd) {
  GeogebraCommonKernelCommandsAlgebraProcessor_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandDispatcher_(self, kernel, cd);
}

GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D *new_GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandDispatcher_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelCommandsCommandDispatcher *cd) {
  GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandDispatcher_(self, kernel, cd);
  return self;
}

IOSObjectArray *GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processQuadricWithGeogebraCommonKernelArithmeticEquation_(GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D *self, GeogebraCommonKernelArithmeticEquation *equ) {
  jdouble xx = 0, yy = 0, zz = 0, xy = 0, xz = 0, yz = 0, x = 0, y = 0, z = 0, c = 0;
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric;
  NSString *label = [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getLabel];
  GeogebraCommonKernelArithmeticPolynomial *lhs = [equ getNormalForm];
  jboolean isIndependent = [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(lhs)) isConstant];
  if (isIndependent) {
    xx = [lhs getCoeffValueWithNSString:@"xx"];
    yy = [lhs getCoeffValueWithNSString:@"yy"];
    zz = [lhs getCoeffValueWithNSString:@"zz"];
    c = [lhs getCoeffValueWithNSString:@""];
    xy = [lhs getCoeffValueWithNSString:@"xy"] / 2;
    xz = [lhs getCoeffValueWithNSString:@"xz"] / 2;
    yz = [lhs getCoeffValueWithNSString:@"yz"] / 2;
    x = [lhs getCoeffValueWithNSString:@"x"] / 2;
    y = [lhs getCoeffValueWithNSString:@"y"] / 2;
    z = [lhs getCoeffValueWithNSString:@"z"] / 2;
    IOSDoubleArray *coeffs = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ xx, yy, zz, c, xy, xz, yz, x, y, z } count:10];
    quadric = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonKernelConstruction_withNSString_withDoubleArray_(self->cons_, label, coeffs) autorelease];
  }
  else {
    quadric = (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) DependentQuadric3DWithNSString:label withGeogebraCommonKernelArithmeticEquation:equ], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]);
  }
  IOSObjectArray_Set(ret, 0, quadric);
  return ret;
}

IOSObjectArray *GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D_processPlaneWithGeogebraCommonKernelArithmeticEquation_(GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D *self, GeogebraCommonKernelArithmeticEquation *equ) {
  jdouble a = 0, b = 0, c = 0, d = 0;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane = nil;
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  NSString *label = [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getLabel];
  GeogebraCommonKernelArithmeticPolynomial *lhs = [equ getNormalForm];
  jboolean isIndependent = [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(lhs)) isConstant];
  if (isIndependent) {
    a = [lhs getCoeffValueWithNSString:@"x"];
    b = [lhs getCoeffValueWithNSString:@"y"];
    c = [lhs getCoeffValueWithNSString:@"z"];
    d = [lhs getCoeffValueWithNSString:@""];
    plane = (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) Plane3DWithNSString:label withDouble:a withDouble:b withDouble:c withDouble:d], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  }
  else plane = (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getManager3D])) DependentPlane3DWithNSString:label withGeogebraCommonKernelArithmeticEquation:equ], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  IOSObjectArray_Set(ret, 0, plane);
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsAlgebraProcessor3D)
