//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/random/MersenneTwister.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/apache/commons/math/random/BitsStreamGenerator.h"
#include "org/apache/commons/math/random/MersenneTwister.h"
#include "org/apache/commons/math/util/FastMath.h"

#define OrgApacheCommonsMathRandomMersenneTwister_serialVersionUID 8661194735290153518LL
#define OrgApacheCommonsMathRandomMersenneTwister_N 624
#define OrgApacheCommonsMathRandomMersenneTwister_M 397

@interface OrgApacheCommonsMathRandomMersenneTwister () {
 @public
  IOSIntArray *mt_;
  jint mti_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathRandomMersenneTwister, mt_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathRandomMersenneTwister, serialVersionUID, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathRandomMersenneTwister, N, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathRandomMersenneTwister, M, jint)

static IOSIntArray *OrgApacheCommonsMathRandomMersenneTwister_MAG01_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathRandomMersenneTwister, MAG01_, IOSIntArray *)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsMathRandomMersenneTwister)

@implementation OrgApacheCommonsMathRandomMersenneTwister

- (instancetype)init {
  OrgApacheCommonsMathRandomMersenneTwister_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)seed {
  OrgApacheCommonsMathRandomMersenneTwister_initWithInt_(self, seed);
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)seed {
  OrgApacheCommonsMathRandomMersenneTwister_initWithIntArray_(self, seed);
  return self;
}

- (instancetype)initWithLong:(jlong)seed {
  OrgApacheCommonsMathRandomMersenneTwister_initWithLong_(self, seed);
  return self;
}

- (void)setSeedWithInt:(jint)seed {
  jlong longMT = seed;
  *IOSIntArray_GetRef(nil_chk(mt_), 0) = (jint) longMT;
  for (mti_ = 1; mti_ < OrgApacheCommonsMathRandomMersenneTwister_N; ++mti_) {
    longMT = (1812433253l * (longMT ^ (RShift64(longMT, 30))) + mti_) & (jlong) 0xffffffffLL;
    *IOSIntArray_GetRef(mt_, mti_) = (jint) longMT;
  }
}

- (void)setSeedWithIntArray:(IOSIntArray *)seed {
  if (seed == nil) {
    [self setSeedWithLong:JavaLangSystem_currentTimeMillis()];
    return;
  }
  [self setSeedWithInt:19650218];
  jint i = 1;
  jint j = 0;
  for (jint k = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(OrgApacheCommonsMathRandomMersenneTwister_N, ((IOSIntArray *) nil_chk(seed))->size_); k != 0; k--) {
    jlong l0 = (IOSIntArray_Get(nil_chk(mt_), i) & (jlong) 0x7fffffffl) | ((IOSIntArray_Get(mt_, i) < 0) ? (jlong) 0x80000000l : (jlong) 0x0l);
    jlong l1 = (IOSIntArray_Get(mt_, i - 1) & (jlong) 0x7fffffffl) | ((IOSIntArray_Get(mt_, i - 1) < 0) ? (jlong) 0x80000000l : (jlong) 0x0l);
    jlong l = (l0 ^ ((l1 ^ (RShift64(l1, 30))) * 1664525l)) + IOSIntArray_Get(seed, j) + j;
    *IOSIntArray_GetRef(mt_, i) = (jint) (l & (jlong) 0xffffffffl);
    i++;
    j++;
    if (i >= OrgApacheCommonsMathRandomMersenneTwister_N) {
      *IOSIntArray_GetRef(mt_, 0) = IOSIntArray_Get(mt_, OrgApacheCommonsMathRandomMersenneTwister_N - 1);
      i = 1;
    }
    if (j >= seed->size_) {
      j = 0;
    }
  }
  for (jint k = OrgApacheCommonsMathRandomMersenneTwister_N - 1; k != 0; k--) {
    jlong l0 = (IOSIntArray_Get(nil_chk(mt_), i) & (jlong) 0x7fffffffl) | ((IOSIntArray_Get(mt_, i) < 0) ? (jlong) 0x80000000l : (jlong) 0x0l);
    jlong l1 = (IOSIntArray_Get(mt_, i - 1) & (jlong) 0x7fffffffl) | ((IOSIntArray_Get(mt_, i - 1) < 0) ? (jlong) 0x80000000l : (jlong) 0x0l);
    jlong l = (l0 ^ ((l1 ^ (RShift64(l1, 30))) * 1566083941l)) - i;
    *IOSIntArray_GetRef(mt_, i) = (jint) (l & (jlong) 0xffffffffLL);
    i++;
    if (i >= OrgApacheCommonsMathRandomMersenneTwister_N) {
      *IOSIntArray_GetRef(mt_, 0) = IOSIntArray_Get(mt_, OrgApacheCommonsMathRandomMersenneTwister_N - 1);
      i = 1;
    }
  }
  *IOSIntArray_GetRef(nil_chk(mt_), 0) = -0x7fffffff - 1;
}

- (void)setSeedWithLong:(jlong)seed {
  [self setSeedWithIntArray:[IOSIntArray arrayWithInts:(jint[]){ (jint) (URShift64(seed, 32)), (jint) (seed & (jlong) 0xffffffffl) } count:2]];
}

- (jint)nextWithInt:(jint)bits {
  jint y;
  if (mti_ >= OrgApacheCommonsMathRandomMersenneTwister_N) {
    jint mtNext = IOSIntArray_Get(nil_chk(mt_), 0);
    for (jint k = 0; k < OrgApacheCommonsMathRandomMersenneTwister_N - OrgApacheCommonsMathRandomMersenneTwister_M; ++k) {
      jint mtCurr = mtNext;
      mtNext = IOSIntArray_Get(mt_, k + 1);
      y = (mtCurr & -0x7fffffff - 1) | (mtNext & (jint) 0x7fffffff);
      *IOSIntArray_GetRef(mt_, k) = IOSIntArray_Get(mt_, k + OrgApacheCommonsMathRandomMersenneTwister_M) ^ (URShift32(y, 1)) ^ IOSIntArray_Get(nil_chk(OrgApacheCommonsMathRandomMersenneTwister_MAG01_), y & (jint) 0x1);
    }
    for (jint k = OrgApacheCommonsMathRandomMersenneTwister_N - OrgApacheCommonsMathRandomMersenneTwister_M; k < OrgApacheCommonsMathRandomMersenneTwister_N - 1; ++k) {
      jint mtCurr = mtNext;
      mtNext = IOSIntArray_Get(mt_, k + 1);
      y = (mtCurr & -0x7fffffff - 1) | (mtNext & (jint) 0x7fffffff);
      *IOSIntArray_GetRef(mt_, k) = IOSIntArray_Get(mt_, k + (OrgApacheCommonsMathRandomMersenneTwister_M - OrgApacheCommonsMathRandomMersenneTwister_N)) ^ (URShift32(y, 1)) ^ IOSIntArray_Get(nil_chk(OrgApacheCommonsMathRandomMersenneTwister_MAG01_), y & (jint) 0x1);
    }
    y = (mtNext & -0x7fffffff - 1) | (IOSIntArray_Get(mt_, 0) & (jint) 0x7fffffff);
    *IOSIntArray_GetRef(mt_, OrgApacheCommonsMathRandomMersenneTwister_N - 1) = IOSIntArray_Get(mt_, OrgApacheCommonsMathRandomMersenneTwister_M - 1) ^ (URShift32(y, 1)) ^ IOSIntArray_Get(nil_chk(OrgApacheCommonsMathRandomMersenneTwister_MAG01_), y & (jint) 0x1);
    mti_ = 0;
  }
  y = IOSIntArray_Get(nil_chk(mt_), mti_++);
  y ^= URShift32(y, 11);
  y ^= (LShift32(y, 7)) & (jint) 0x9d2c5680;
  y ^= (LShift32(y, 15)) & (jint) 0xefc60000;
  y ^= URShift32(y, 18);
  return URShift32(y, (32 - bits));
}

- (void)dealloc {
  RELEASE_(mt_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheCommonsMathRandomMersenneTwister class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsMathRandomMersenneTwister_MAG01_, nil, [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x0, (jint) 0x9908b0df } count:2]);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsMathRandomMersenneTwister)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MersenneTwister", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "MersenneTwister", NULL, 0x1, NULL, NULL },
    { "initWithIntArray:", "MersenneTwister", NULL, 0x1, NULL, NULL },
    { "initWithLong:", "MersenneTwister", NULL, 0x1, NULL, NULL },
    { "setSeedWithInt:", "setSeed", "V", 0x1, NULL, NULL },
    { "setSeedWithIntArray:", "setSeed", "V", 0x1, NULL, NULL },
    { "setSeedWithLong:", "setSeed", "V", 0x1, NULL, NULL },
    { "nextWithInt:", "next", "I", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathRandomMersenneTwister_serialVersionUID },
    { "N_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathRandomMersenneTwister_N },
    { "M_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathRandomMersenneTwister_M },
    { "MAG01_", NULL, 0x1a, "[I", &OrgApacheCommonsMathRandomMersenneTwister_MAG01_, NULL,  },
    { "mt_", NULL, 0x2, "[I", NULL, NULL,  },
    { "mti_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathRandomMersenneTwister = { 2, "MersenneTwister", "org.apache.commons.math.random", NULL, 0x1, 8, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathRandomMersenneTwister;
}

@end

void OrgApacheCommonsMathRandomMersenneTwister_init(OrgApacheCommonsMathRandomMersenneTwister *self) {
  OrgApacheCommonsMathRandomBitsStreamGenerator_init(self);
  OrgApacheCommonsMathRandomMersenneTwister_setAndConsume_mt_(self, [IOSIntArray newArrayWithLength:OrgApacheCommonsMathRandomMersenneTwister_N]);
  [self setSeedWithLong:JavaLangSystem_currentTimeMillis()];
}

OrgApacheCommonsMathRandomMersenneTwister *new_OrgApacheCommonsMathRandomMersenneTwister_init() {
  OrgApacheCommonsMathRandomMersenneTwister *self = [OrgApacheCommonsMathRandomMersenneTwister alloc];
  OrgApacheCommonsMathRandomMersenneTwister_init(self);
  return self;
}

void OrgApacheCommonsMathRandomMersenneTwister_initWithInt_(OrgApacheCommonsMathRandomMersenneTwister *self, jint seed) {
  OrgApacheCommonsMathRandomBitsStreamGenerator_init(self);
  OrgApacheCommonsMathRandomMersenneTwister_setAndConsume_mt_(self, [IOSIntArray newArrayWithLength:OrgApacheCommonsMathRandomMersenneTwister_N]);
  [self setSeedWithInt:seed];
}

OrgApacheCommonsMathRandomMersenneTwister *new_OrgApacheCommonsMathRandomMersenneTwister_initWithInt_(jint seed) {
  OrgApacheCommonsMathRandomMersenneTwister *self = [OrgApacheCommonsMathRandomMersenneTwister alloc];
  OrgApacheCommonsMathRandomMersenneTwister_initWithInt_(self, seed);
  return self;
}

void OrgApacheCommonsMathRandomMersenneTwister_initWithIntArray_(OrgApacheCommonsMathRandomMersenneTwister *self, IOSIntArray *seed) {
  OrgApacheCommonsMathRandomBitsStreamGenerator_init(self);
  OrgApacheCommonsMathRandomMersenneTwister_setAndConsume_mt_(self, [IOSIntArray newArrayWithLength:OrgApacheCommonsMathRandomMersenneTwister_N]);
  [self setSeedWithIntArray:seed];
}

OrgApacheCommonsMathRandomMersenneTwister *new_OrgApacheCommonsMathRandomMersenneTwister_initWithIntArray_(IOSIntArray *seed) {
  OrgApacheCommonsMathRandomMersenneTwister *self = [OrgApacheCommonsMathRandomMersenneTwister alloc];
  OrgApacheCommonsMathRandomMersenneTwister_initWithIntArray_(self, seed);
  return self;
}

void OrgApacheCommonsMathRandomMersenneTwister_initWithLong_(OrgApacheCommonsMathRandomMersenneTwister *self, jlong seed) {
  OrgApacheCommonsMathRandomBitsStreamGenerator_init(self);
  OrgApacheCommonsMathRandomMersenneTwister_setAndConsume_mt_(self, [IOSIntArray newArrayWithLength:OrgApacheCommonsMathRandomMersenneTwister_N]);
  [self setSeedWithLong:seed];
}

OrgApacheCommonsMathRandomMersenneTwister *new_OrgApacheCommonsMathRandomMersenneTwister_initWithLong_(jlong seed) {
  OrgApacheCommonsMathRandomMersenneTwister *self = [OrgApacheCommonsMathRandomMersenneTwister alloc];
  OrgApacheCommonsMathRandomMersenneTwister_initWithLong_(self, seed);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathRandomMersenneTwister)
