//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdText.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoText.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdText.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelCommandsCmdText

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdText_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  {
    GeogebraCommonKernelAlgosAlgoText *algo;
    IOSObjectArray *ret;
    jboolean ok;
    jboolean ok1;
    switch (n) {
      case 1:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      algo = [new_GeogebraCommonKernelAlgosAlgoText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(cons_, [c getLabel], IOSObjectArray_Get(nil_chk(arg), 0)) autorelease];
      ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getGeoText] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
      case 2:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 1))) isGeoBoolean]) {
        algo = [new_GeogebraCommonKernelAlgosAlgoText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoBoolean_(cons_, [c getLabel], IOSObjectArray_Get(arg, 0), (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoBoolean class])) autorelease];
        IOSObjectArray *ret2 = [IOSObjectArray arrayWithObjects:(id[]){ [algo getGeoText] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret2;
      }
      else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPoint]) {
        algo = [new_GeogebraCommonKernelAlgosAlgoText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, [c getLabel], IOSObjectArray_Get(arg, 0), (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPointND))) autorelease];
        IOSObjectArray *ret2 = [IOSObjectArray arrayWithObjects:(id[]){ [algo getGeoText] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret2;
      }
      else @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      case 3:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ((ok = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 1))) isGeoPoint]) && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoBoolean]) {
        algo = [new_GeogebraCommonKernelAlgosAlgoText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoBoolean_(cons_, [c getLabel], IOSObjectArray_Get(arg, 0), (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPointND)), (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, 2), [GeogebraCommonKernelGeosGeoBoolean class])) autorelease];
        IOSObjectArray *ret2 = [IOSObjectArray arrayWithObjects:(id[]){ [algo getGeoText] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret2;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:ok ? IOSObjectArray_Get(arg, 2) : IOSObjectArray_Get(arg, 1)];
      case 4:
      ok1 = NO;
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ((ok = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 1))) isGeoPoint]) && (ok1 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoBoolean]) && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 3))) isGeoBoolean]) {
        algo = [new_GeogebraCommonKernelAlgosAlgoText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_(cons_, [c getLabel], IOSObjectArray_Get(arg, 0), (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPointND)), (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, 2), [GeogebraCommonKernelGeosGeoBoolean class]), (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, 3), [GeogebraCommonKernelGeosGeoBoolean class])) autorelease];
        IOSObjectArray *ret2 = [IOSObjectArray arrayWithObjects:(id[]){ [algo getGeoText] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret2;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:ok ? (ok1 ? IOSObjectArray_Get(arg, 3) : IOSObjectArray_Get(arg, 2)) : IOSObjectArray_Get(arg, 1)];
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdText", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdText = { 2, "CmdText", "geogebra.common.kernel.commands", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdText;
}

@end

void GeogebraCommonKernelCommandsCmdText_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdText *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdText *new_GeogebraCommonKernelCommandsCmdText_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdText *self = [GeogebraCommonKernelCommandsCmdText alloc];
  GeogebraCommonKernelCommandsCmdText_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdText)
