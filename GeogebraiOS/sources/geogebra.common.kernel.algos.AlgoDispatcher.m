//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoDispatcher.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/ConstructionDefaults.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/KernelCAS.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/Region.h"
#include "geogebra/common/kernel/Transform.h"
#include "geogebra/common/kernel/TransformDilate.h"
#include "geogebra/common/kernel/TransformMirror.h"
#include "geogebra/common/kernel/TransformRotate.h"
#include "geogebra/common/kernel/TransformTranslate.h"
#include "geogebra/common/kernel/algos/AlgoAngleLines.h"
#include "geogebra/common/kernel/algos/AlgoAnglePoints.h"
#include "geogebra/common/kernel/algos/AlgoAnglePolygon.h"
#include "geogebra/common/kernel/algos/AlgoAngleVectors.h"
#include "geogebra/common/kernel/algos/AlgoAngularBisectorLines.h"
#include "geogebra/common/kernel/algos/AlgoAngularBisectorPoints.h"
#include "geogebra/common/kernel/algos/AlgoAreaConic.h"
#include "geogebra/common/kernel/algos/AlgoCenterConic.h"
#include "geogebra/common/kernel/algos/AlgoCirclePointRadius.h"
#include "geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "geogebra/common/kernel/algos/AlgoCircleTwoPoints.h"
#include "geogebra/common/kernel/algos/AlgoCircumferenceConic.h"
#include "geogebra/common/kernel/algos/AlgoClosestPoint.h"
#include "geogebra/common/kernel/algos/AlgoCommonTangents.h"
#include "geogebra/common/kernel/algos/AlgoConicFivePoints.h"
#include "geogebra/common/kernel/algos/AlgoConicPartCircle.h"
#include "geogebra/common/kernel/algos/AlgoConicPartCircumcircle.h"
#include "geogebra/common/kernel/algos/AlgoDependentFunction.h"
#include "geogebra/common/kernel/algos/AlgoDependentList.h"
#include "geogebra/common/kernel/algos/AlgoDiameterLine.h"
#include "geogebra/common/kernel/algos/AlgoDiameterVector.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoDistanceLineLine.h"
#include "geogebra/common/kernel/algos/AlgoDistancePointObject.h"
#include "geogebra/common/kernel/algos/AlgoDistancePoints.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoEllipseFociLength.h"
#include "geogebra/common/kernel/algos/AlgoEllipseHyperbolaFociPoint.h"
#include "geogebra/common/kernel/algos/AlgoHyperbolaFociLength.h"
#include "geogebra/common/kernel/algos/AlgoIntersect.h"
#include "geogebra/common/kernel/algos/AlgoIntersectAbstract.h"
#include "geogebra/common/kernel/algos/AlgoIntersectConics.h"
#include "geogebra/common/kernel/algos/AlgoIntersectCurveCurve.h"
#include "geogebra/common/kernel/algos/AlgoIntersectFunctionLineNewton.h"
#include "geogebra/common/kernel/algos/AlgoIntersectFunctionsNewton.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLineCurve.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLinePolyLine.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLines.h"
#include "geogebra/common/kernel/algos/AlgoIntersectPolynomialConic.h"
#include "geogebra/common/kernel/algos/AlgoIntersectPolynomialLine.h"
#include "geogebra/common/kernel/algos/AlgoIntersectPolynomials.h"
#include "geogebra/common/kernel/algos/AlgoIntersectSingle.h"
#include "geogebra/common/kernel/algos/AlgoJoinPoints.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsRay.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "geogebra/common/kernel/algos/AlgoLengthLocus.h"
#include "geogebra/common/kernel/algos/AlgoLineBisector.h"
#include "geogebra/common/kernel/algos/AlgoLineBisectorSegment.h"
#include "geogebra/common/kernel/algos/AlgoLinePointLine.h"
#include "geogebra/common/kernel/algos/AlgoLinePointVector.h"
#include "geogebra/common/kernel/algos/AlgoListLength.h"
#include "geogebra/common/kernel/algos/AlgoLocus.h"
#include "geogebra/common/kernel/algos/AlgoLocusList.h"
#include "geogebra/common/kernel/algos/AlgoLocusSlider.h"
#include "geogebra/common/kernel/algos/AlgoMidpoint.h"
#include "geogebra/common/kernel/algos/AlgoMidpointSegment.h"
#include "geogebra/common/kernel/algos/AlgoNSolveODE.h"
#include "geogebra/common/kernel/algos/AlgoOrthoLinePointLine.h"
#include "geogebra/common/kernel/algos/AlgoOrthoLinePointVector.h"
#include "geogebra/common/kernel/algos/AlgoParabolaPointLine.h"
#include "geogebra/common/kernel/algos/AlgoPerimeterPoly.h"
#include "geogebra/common/kernel/algos/AlgoPointInRegion.h"
#include "geogebra/common/kernel/algos/AlgoPointOnPath.h"
#include "geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "geogebra/common/kernel/algos/AlgoPolygon.h"
#include "geogebra/common/kernel/algos/AlgoPolygonIntersection.h"
#include "geogebra/common/kernel/algos/AlgoPolygonRegular.h"
#include "geogebra/common/kernel/algos/AlgoPolygonUnion.h"
#include "geogebra/common/kernel/algos/AlgoRayPointVector.h"
#include "geogebra/common/kernel/algos/AlgoSemicircle.h"
#include "geogebra/common/kernel/algos/AlgoSlope.h"
#include "geogebra/common/kernel/algos/AlgoTangentLine.h"
#include "geogebra/common/kernel/algos/AlgoTangentPoint.h"
#include "geogebra/common/kernel/algos/AlgoTextfield.h"
#include "geogebra/common/kernel/algos/AlgoVector.h"
#include "geogebra/common/kernel/algos/AlgoVectorPoint.h"
#include "geogebra/common/kernel/algos/AlgoVertexPolygon.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/geos/GeoLocusND.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPoly.h"
#include "geogebra/common/kernel/geos/GeoPolyLine.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/GeoRay.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/geos/GeoTextField.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/implicit/AlgoImplicitPolyFunction.h"
#include "geogebra/common/kernel/implicit/AlgoIntersectImplicitpolyParametric.h"
#include "geogebra/common/kernel/implicit/AlgoIntersectImplicitpolys.h"
#include "geogebra/common/kernel/implicit/AlgoTangentImplicitpoly.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

__attribute__((unused)) static GeogebraCommonKernelGeosGeoVector *GeogebraCommonKernelAlgosAlgoDispatcher_VectorWithNSString_withDouble_withDouble_(GeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, jdouble x, jdouble y);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoVector *GeogebraCommonKernelAlgosAlgoDispatcher_VectorWithDouble_withDouble_(GeogebraCommonKernelAlgosAlgoDispatcher *self, jdouble x, jdouble y);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelAlgosAlgoDispatcher_PointWithNSString_withGeogebraCommonKernelPath_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(GeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, id<GeogebraCommonKernelPath> path, jdouble x, jdouble y, jboolean addToConstruction, jboolean complex, jboolean coords2D);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoSegment *GeogebraCommonKernelAlgosAlgoDispatcher_SegmentWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoPoint *Q);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoAngle *GeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoLine *h);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoAngle *GeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B, GeogebraCommonKernelGeosGeoPoint *C);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelAlgosAlgoDispatcher_PointInWithNSString_withGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(GeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, id<GeogebraCommonKernelRegion> region, jdouble x, jdouble y, jboolean addToConstruction, jboolean complex, jboolean coords2D);

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoDispatcher_LocusCheckWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoDispatcher *self, id<GeogebraCommonKernelKernelNDGeoPointND> P, id<GeogebraCommonKernelKernelNDGeoPointND> Q);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelAlgosAlgoDispatcher_TranslateWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoVec3D_(GeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, GeogebraCommonKernelGeosGeoElement *geoTrans, GeogebraCommonKernelGeosGeoVec3D *v);

jint GeogebraCommonKernelAlgosAlgoDispatcher_DETACH_OFFSET_ = 20;

@implementation GeogebraCommonKernelAlgosAlgoDispatcher

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelAlgosAlgoDispatcher_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (void)removeIntersectionAlgorithmWithGeogebraCommonKernelAlgosAlgoIntersectAbstract:(GeogebraCommonKernelAlgosAlgoIntersectAbstract *)algo {
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) removeWithId:algo];
}

- (void)addIntersectionAlgorithmWithGeogebraCommonKernelAlgosAlgoIntersectAbstract:(GeogebraCommonKernelAlgosAlgoIntersectAbstract *)algo {
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
}

- (GeogebraCommonKernelGeosGeoPoint *)PointWithNSString:(NSString *)label
                                             withDouble:(jdouble)x
                                             withDouble:(jdouble)y
                                            withBoolean:(jboolean)complex {
  GeogebraCommonKernelGeosGeoPoint *p = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [p setCoordsWithDouble:x withDouble:y withDouble:1.0];
  if (complex) {
    [p setModeWithInt:GeogebraCommonKernelKernel_COORD_COMPLEX];
  }
  else {
    [p setModeWithInt:GeogebraCommonKernelKernel_COORD_CARTESIAN];
  }
  [p setLabelWithNSString:label];
  return p;
}

- (GeogebraCommonKernelGeosGeoVector *)VectorWithNSString:(NSString *)label
                                               withDouble:(jdouble)x
                                               withDouble:(jdouble)y {
  return GeogebraCommonKernelAlgosAlgoDispatcher_VectorWithNSString_withDouble_withDouble_(self, label, x, y);
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)VectorWithNSString:(NSString *)label {
  return GeogebraCommonKernelAlgosAlgoDispatcher_VectorWithNSString_withDouble_withDouble_(self, label, 0, 0);
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)Vector {
  return GeogebraCommonKernelAlgosAlgoDispatcher_VectorWithDouble_withDouble_(self, 0, 0);
}

- (GeogebraCommonKernelGeosGeoVector *)VectorWithDouble:(jdouble)x
                                             withDouble:(jdouble)y {
  return GeogebraCommonKernelAlgosAlgoDispatcher_VectorWithDouble_withDouble_(self, x, y);
}

- (GeogebraCommonKernelGeosGeoPoint *)PointWithNSString:(NSString *)label
                           withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
                                             withDouble:(jdouble)x
                                             withDouble:(jdouble)y
                                            withBoolean:(jboolean)addToConstruction
                                            withBoolean:(jboolean)complex
                                            withBoolean:(jboolean)coords2D {
  return GeogebraCommonKernelAlgosAlgoDispatcher_PointWithNSString_withGeogebraCommonKernelPath_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(self, label, path, x, y, addToConstruction, complex, coords2D);
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)PointWithNSString:(NSString *)label
                                   withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
                           withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
                                                    withBoolean:(jboolean)addToConstruction
                                                    withBoolean:(jboolean)complex
                                                    withBoolean:(jboolean)coords2D {
  return GeogebraCommonKernelAlgosAlgoDispatcher_PointWithNSString_withGeogebraCommonKernelPath_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(self, label, path, [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX], [coords getY], addToConstruction, complex, coords2D);
}

- (GeogebraCommonKernelGeosGeoPoint *)PointWithNSString:(NSString *)label
                           withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
          withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)param {
  GeogebraCommonKernelAlgosAlgoPointOnPath *algo = nil;
  if (param == nil) {
    algo = [new_GeogebraCommonKernelAlgosAlgoPointOnPath_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelPath_withDouble_withDouble_(cons_, label, path, 0, 0) autorelease];
  }
  else {
    algo = [new_GeogebraCommonKernelAlgosAlgoPointOnPath_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelPath_withDouble_withDouble_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, path, 0, 0, param) autorelease];
  }
  GeogebraCommonKernelGeosGeoPoint *p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelAlgosAlgoPointOnPath *) nil_chk(algo)) getP], [GeogebraCommonKernelGeosGeoPoint class]);
  if (![((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) isDefined]) {
    [p setCoordsWithDouble:1 withDouble:0 withDouble:1];
    [algo update];
  }
  if (![p isDefined]) {
    [p setCoordsWithDouble:JavaLangMath_random() withDouble:0 withDouble:1];
    [algo update];
  }
  return p;
}

- (GeogebraCommonKernelGeosGeoLine *)LineWithNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                 withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q {
  GeogebraCommonKernelAlgosAlgoJoinPoints *algo = [new_GeogebraCommonKernelAlgosAlgoJoinPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons_, label, P, Q) autorelease];
  GeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (GeogebraCommonKernelGeosGeoRay *)RayWithNSString:(NSString *)label
               withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
               withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q {
  GeogebraCommonKernelAlgosAlgoJoinPointsRay *algo = [new_GeogebraCommonKernelAlgosAlgoJoinPointsRay_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons_, label, P, Q) autorelease];
  return [algo getRay];
}

- (GeogebraCommonKernelGeosGeoRay *)RayWithNSString:(NSString *)label
               withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
              withGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *)v {
  GeogebraCommonKernelAlgosAlgoRayPointVector *algo = [new_GeogebraCommonKernelAlgosAlgoRayPointVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoVector_(cons_, label, P, v) autorelease];
  return [algo getRay];
}

- (GeogebraCommonKernelGeosGeoLine *)LineWithNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                  withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l {
  GeogebraCommonKernelAlgosAlgoLinePointLine *algo = [new_GeogebraCommonKernelAlgosAlgoLinePointLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_(cons_, label, P, l) autorelease];
  GeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (GeogebraCommonKernelGeosGeoLine *)OrthogonalLineWithNSString:(NSString *)label
                           withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                          withGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *)v {
  GeogebraCommonKernelAlgosAlgoOrthoLinePointVector *algo = [new_GeogebraCommonKernelAlgosAlgoOrthoLinePointVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoVector_(cons_, label, P, v) autorelease];
  GeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (GeogebraCommonKernelGeosGeoLine *)OrthogonalLineWithNSString:(NSString *)label
                           withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                            withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l {
  GeogebraCommonKernelAlgosAlgoOrthoLinePointLine *algo = [new_GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_(cons_, label, P, l) autorelease];
  GeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (GeogebraCommonKernelGeosGeoLine *)LineBisectorWithNSString:(NSString *)label
                         withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                         withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B {
  GeogebraCommonKernelAlgosAlgoLineBisector *algo = [new_GeogebraCommonKernelAlgosAlgoLineBisector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons_, label, A, B) autorelease];
  GeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (GeogebraCommonKernelGeosGeoLine *)LineBisectorWithNSString:(NSString *)label
                       withGeogebraCommonKernelGeosGeoSegment:(GeogebraCommonKernelGeosGeoSegment *)s {
  GeogebraCommonKernelAlgosAlgoLineBisectorSegment *algo = [new_GeogebraCommonKernelAlgosAlgoLineBisectorSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoSegment_(cons_, label, s) autorelease];
  GeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (GeogebraCommonKernelGeosGeoLine *)AngularBisectorWithNSString:(NSString *)label
                            withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                            withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                            withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)C {
  GeogebraCommonKernelAlgosAlgoAngularBisectorPoints *algo = [new_GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons_, label, A, B, C) autorelease];
  GeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (IOSObjectArray *)AngularBisectorWithNSStringArray:(IOSObjectArray *)labels
                 withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                 withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)h {
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines *algo = [new_GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(cons_, labels, g, h) autorelease];
  IOSObjectArray *lines = [algo getLines];
  return lines;
}

- (GeogebraCommonKernelGeosGeoVector *)VectorWithNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                     withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q {
  GeogebraCommonKernelAlgosAlgoVector *algo = [new_GeogebraCommonKernelAlgosAlgoVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, P, Q) autorelease];
  GeogebraCommonKernelGeosGeoVector *v = (GeogebraCommonKernelGeosGeoVector *) check_class_cast([algo getVector], [GeogebraCommonKernelGeosGeoVector class]);
  [((GeogebraCommonKernelGeosGeoVector *) nil_chk(v)) setEuclidianVisibleWithBoolean:YES];
  [v update];
  return v;
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)VectorWithNSString:(NSString *)label
                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  id<GeogebraCommonKernelKernelNDGeoVectorND> v = [self createVectorWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:P];
  [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v)) setEuclidianVisibleWithBoolean:YES];
  [v update];
  return v;
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)createVectorWithNSString:(NSString *)label
                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonKernelAlgosAlgoVectorPoint *algo = [new_GeogebraCommonKernelAlgosAlgoVectorPoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, P) autorelease];
  return [algo getVector];
}

- (GeogebraCommonKernelGeosGeoNumeric *)SlopeWithNSString:(NSString *)label
                      withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g {
  GeogebraCommonKernelAlgosAlgoSlope *algo = [new_GeogebraCommonKernelAlgosAlgoSlope_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_(cons_, label, g) autorelease];
  GeogebraCommonKernelGeosGeoNumeric *slope = [algo getSlope];
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slope)) update];
  return slope;
}

- (GeogebraCommonKernelGeosGeoSegment *)SegmentWithNSString:(NSString *)label
                       withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                       withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q {
  return GeogebraCommonKernelAlgosAlgoDispatcher_SegmentWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, label, P, Q);
}

- (GeogebraCommonKernelGeosGeoList *)ListWithNSString:(NSString *)label
                                withJavaUtilArrayList:(JavaUtilArrayList *)geoElementList
                                          withBoolean:(jboolean)isIndependent {
  if (isIndependent) {
    GeogebraCommonKernelGeosGeoList *list = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    jint size = [((JavaUtilArrayList *) nil_chk(geoElementList)) size];
    for (jint i = 0; i < size; i++) {
      [list addWithGeogebraCommonKernelGeosGeoElement:[geoElementList getWithInt:i]];
    }
    [list setLabelWithNSString:label];
    return list;
  }
  GeogebraCommonKernelAlgosAlgoDependentList *algoList = [new_GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withNSString_withJavaUtilArrayList_(cons_, label, geoElementList) autorelease];
  return [algoList getGeoList];
}

- (GeogebraCommonKernelGeosGeoFunction *)DependentFunctionWithNSString:(NSString *)label
                            withGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun {
  GeogebraCommonKernelAlgosAlgoDependentFunction *algo = [new_GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunction_(cons_, label, fun) autorelease];
  GeogebraCommonKernelGeosGeoFunction *f = [algo getFunction];
  return f;
}

- (GeogebraCommonKernelGeosGeoTextField *)textfieldWithNSString:(NSString *)label
                         withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoElement {
  GeogebraCommonKernelAlgosAlgoTextfield *at = [new_GeogebraCommonKernelAlgosAlgoTextfield_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(cons_, label, geoElement) autorelease];
  return [at getResult];
}

- (GeogebraCommonKernelGeosGeoLine *)LineWithNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                withGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *)v {
  GeogebraCommonKernelAlgosAlgoLinePointVector *algo = [new_GeogebraCommonKernelAlgosAlgoLinePointVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoVector_(cons_, label, P, v) autorelease];
  GeogebraCommonKernelGeosGeoLine *g = [algo getLine];
  return g;
}

- (IOSObjectArray *)SegmentWithNSStringArray:(IOSObjectArray *)labels
  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)n {
  NSString *pointLabel = nil, *segmentLabel = nil;
  if (labels != nil) {
    switch (labels->size_) {
      case 2:
      pointLabel = IOSObjectArray_Get(labels, 1);
      case 1:
      segmentLabel = IOSObjectArray_Get(labels, 0);
      default:
      ;
    }
  }
  return [self SegmentFixedWithNSString:pointLabel withNSString:segmentLabel withGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelArithmeticNumberValue:n];
}

- (IOSObjectArray *)SegmentFixedWithNSString:(NSString *)pointLabel
                                withNSString:(NSString *)segmentLabel
  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)n {
  GeogebraCommonKernelGeosGeoPoint *A = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(a, [GeogebraCommonKernelGeosGeoPoint class]);
  GeogebraCommonKernelAlgosAlgoCirclePointRadius *algoCircle = [new_GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(cons_, A, n) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoCircle];
  GeogebraCommonKernelAlgosAlgoPointOnPath *algoPoint = [new_GeogebraCommonKernelAlgosAlgoPointOnPath_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelPath_withDouble_withDouble_(cons_, pointLabel, [algoCircle getCircle], ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(A))->inhomX_ + [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(n)) getDouble], A->inhomY_) autorelease];
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelAlgosAlgoDispatcher_SegmentWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, segmentLabel, A, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([algoPoint getP], [GeogebraCommonKernelGeosGeoPoint class])), (GeogebraCommonKernelGeosGeoElement *) check_class_cast([algoPoint getP], [GeogebraCommonKernelGeosGeoElement class]) } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

- (IOSObjectArray *)AngleWithNSStringArray:(IOSObjectArray *)labels
      withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
      withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)alpha
                               withBoolean:(jboolean)posOrientation {
  NSString *pointLabel = nil, *angleLabel = nil;
  if (labels != nil) {
    switch (labels->size_) {
      case 2:
      pointLabel = IOSObjectArray_Get(labels, 1);
      case 1:
      angleLabel = IOSObjectArray_Get(labels, 0);
      default:
      ;
    }
  }
  GeogebraCommonKernelGeosGeoPoint *C = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([self RotateWithNSString:pointLabel withGeogebraCommonKernelGeosGeoElement:B withGeogebraCommonKernelGeosGeoNumberValue:alpha withGeogebraCommonKernelKernelNDGeoPointND:A]), 0), [GeogebraCommonKernelGeosGeoPoint class]);
  GeogebraCommonKernelGeosGeoAngle *angle;
  if (posOrientation) {
    angle = GeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, angleLabel, B, A, C);
  }
  else {
    angle = GeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, angleLabel, C, A, B);
  }
  [((GeogebraCommonKernelGeosGeoAngle *) nil_chk(angle)) setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ANTICLOCKWISE()];
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ angle, C } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

- (IOSObjectArray *)RotateWithNSString:(NSString *)label
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoRot
withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)phi
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonKernelTransformRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, phi, Q) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:geoRot withNSString:label];
}

- (GeogebraCommonKernelGeosGeoAngle *)AngleWithNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                    withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)h {
  return GeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, label, g, h);
}

- (GeogebraCommonKernelGeosGeoAngle *)AngleWithNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *)v
                  withGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *)w {
  GeogebraCommonKernelAlgosAlgoAngleVectors *algo = [new_GeogebraCommonKernelAlgosAlgoAngleVectors_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, v, w) autorelease];
  GeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

- (GeogebraCommonKernelGeosGeoAngle *)AngleWithNSString:(NSString *)label
                   withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                   withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                   withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)C {
  return GeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, label, A, B, C);
}

- (IOSObjectArray *)AnglesWithNSStringArray:(IOSObjectArray *)labels
     withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly {
  GeogebraCommonKernelAlgosAlgoAnglePolygon *algo = [new_GeogebraCommonKernelAlgosAlgoAnglePolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_(cons_, labels, poly) autorelease];
  IOSObjectArray *angles = [algo getAngles];
  return angles;
}

- (GeogebraCommonKernelGeosGeoNumeric *)getDefaultNumberWithBoolean:(jboolean)isAngle {
  return (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((GeogebraCommonKernelConstructionDefaults *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) getConstructionDefaults])) getDefaultGeoWithInt:isAngle ? GeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE : GeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER], [GeogebraCommonKernelGeosGeoNumeric class]);
}

- (GeogebraCommonKernelGeosGeoConic *)CircleWithNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)C {
  GeogebraCommonKernelAlgosAlgoCircleThreePoints *algo = [new_GeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, A, B, C) autorelease];
  GeogebraCommonKernelGeosGeoConic *circle = (GeogebraCommonKernelGeosGeoConic *) check_class_cast([algo getCircle], [GeogebraCommonKernelGeosGeoConic class]);
  [((GeogebraCommonKernelGeosGeoConic *) nil_chk(circle)) setToSpecific];
  [circle update];
  return circle;
}

- (GeogebraCommonKernelGeosGeoConicPart *)CircumcircleArcWithNSString:(NSString *)label
                                 withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                                 withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                                 withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)C {
  GeogebraCommonKernelAlgosAlgoConicPartCircumcircle *algo = [new_GeogebraCommonKernelAlgosAlgoConicPartCircumcircle_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withInt_(cons_, label, A, B, C, GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC) autorelease];
  return [algo getConicPart];
}

- (GeogebraCommonKernelGeosGeoConicPart *)CircumcircleSectorWithNSString:(NSString *)label
                                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)C {
  GeogebraCommonKernelAlgosAlgoConicPartCircumcircle *algo = [new_GeogebraCommonKernelAlgosAlgoConicPartCircumcircle_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withInt_(cons_, label, A, B, C, GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) autorelease];
  return [algo getConicPart];
}

- (GeogebraCommonKernelGeosGeoConicPart *)CircleArcSectorWithNSString:(NSString *)label
                                 withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                                 withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                                 withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)C
                                                              withInt:(jint)type {
  GeogebraCommonKernelAlgosAlgoConicPartCircle *algo = [new_GeogebraCommonKernelAlgosAlgoConicPartCircle_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withInt_(cons_, label, A, B, C, type) autorelease];
  return [algo getConicPart];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)CenterWithNSString:(NSString *)label
                      withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonKernelAlgosAlgoCenterConic *algo = [new_GeogebraCommonKernelAlgosAlgoCenterConic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_(cons_, label, c) autorelease];
  id<GeogebraCommonKernelKernelNDGeoPointND> midpoint = [algo getPoint];
  return midpoint;
}

- (GeogebraCommonKernelKernelNDGeoConicND *)CircleWithNSString:(NSString *)label
                    withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
                 withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  GeogebraCommonKernelAlgosAlgoCirclePointRadius *algo = [new_GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(M, [GeogebraCommonKernelGeosGeoPoint class]), r) autorelease];
  GeogebraCommonKernelGeosGeoConic *circle = [algo getCircle];
  [((GeogebraCommonKernelGeosGeoConic *) nil_chk(circle)) setToSpecific];
  [circle update];
  return circle;
}

- (GeogebraCommonKernelGeosGeoConic *)CircleWithNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                  withGeogebraCommonKernelGeosGeoSegment:(GeogebraCommonKernelGeosGeoSegment *)segment {
  GeogebraCommonKernelAlgosAlgoCirclePointRadius *algo = [new_GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoSegment_withBoolean_(cons_, label, A, segment, YES) autorelease];
  GeogebraCommonKernelGeosGeoConic *circle = [algo getCircle];
  [((GeogebraCommonKernelGeosGeoConic *) nil_chk(circle)) setToSpecific];
  [circle update];
  return circle;
}

- (GeogebraCommonKernelGeosGeoConic *)CircleWithNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)M
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P {
  GeogebraCommonKernelAlgosAlgoCircleTwoPoints *algo = [new_GeogebraCommonKernelAlgosAlgoCircleTwoPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons_, label, M, P) autorelease];
  GeogebraCommonKernelGeosGeoConic *circle = [algo getCircle];
  [((GeogebraCommonKernelGeosGeoConic *) nil_chk(circle)) setToSpecific];
  [circle update];
  return circle;
}

- (GeogebraCommonKernelGeosGeoConicPart *)SemicircleWithNSString:(NSString *)label
                            withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)M
                            withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P {
  GeogebraCommonKernelAlgosAlgoSemicircle *algo = [new_GeogebraCommonKernelAlgosAlgoSemicircle_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons_, label, M, P) autorelease];
  return [algo getSemicircle];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)ParabolaWithNSString:(NSString *)label
                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)F
                       withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)l {
  GeogebraCommonKernelAlgosAlgoParabolaPointLine *algo = [new_GeogebraCommonKernelAlgosAlgoParabolaPointLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, F, l) autorelease];
  return [algo getParabola];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)EllipseWithNSString:(NSString *)label
                     withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                     withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                  withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a {
  GeogebraCommonKernelAlgosAlgoEllipseFociLength *algo = [new_GeogebraCommonKernelAlgosAlgoEllipseFociLength_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, A, B, a) autorelease];
  return [algo getConic];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)EllipseHyperbolaWithNSString:(NSString *)label
                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
                                                                 withInt:(jint)type {
  GeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint *algo = [new_GeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons_, label, A, B, C, type) autorelease];
  return [algo getConic];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)HyperbolaWithNSString:(NSString *)label
                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                    withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a {
  GeogebraCommonKernelAlgosAlgoHyperbolaFociLength *algo = [new_GeogebraCommonKernelAlgosAlgoHyperbolaFociLength_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, A, B, a) autorelease];
  return [algo getConic];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)ConicWithNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)points {
  GeogebraCommonKernelAlgosAlgoConicFivePoints *algo = [new_GeogebraCommonKernelAlgosAlgoConicFivePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, label, points) autorelease];
  GeogebraCommonKernelKernelNDGeoConicND *conic = [algo getConic];
  return conic;
}

- (GeogebraCommonKernelGeosGeoElement *)DiameterLineWithNSString:(NSString *)label
                       withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                      withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonKernelAlgosAlgoDiameterLine *algo = [new_GeogebraCommonKernelAlgosAlgoDiameterLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, label, c, g) autorelease];
  return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getDiameter], [GeogebraCommonKernelGeosGeoElement class]);
}

- (GeogebraCommonKernelGeosGeoElement *)DiameterLineWithNSString:(NSString *)label
                     withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v
                      withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonKernelAlgosAlgoDiameterVector *algo = [new_GeogebraCommonKernelAlgosAlgoDiameterVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, c, v) autorelease];
  return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getDiameter], [GeogebraCommonKernelGeosGeoElement class]);
}

- (IOSObjectArray *)RegularPolygonWithNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
      withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)n {
  GeogebraCommonKernelAlgosAlgoPolygonRegular *algo = [new_GeogebraCommonKernelAlgosAlgoPolygonRegular_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(cons_, labels, A, B, n) autorelease];
  return [algo getOutput];
}

- (GeogebraCommonKernelGeosGeoNumeric *)AreaWithNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonKernelAlgosAlgoAreaConic *algo = [new_GeogebraCommonKernelAlgosAlgoAreaConic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_(cons_, label, c) autorelease];
  GeogebraCommonKernelGeosGeoNumeric *num = [algo getArea];
  return num;
}

- (GeogebraCommonKernelGeosGeoNumeric *)PerimeterWithNSString:(NSString *)label
                       withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon {
  GeogebraCommonKernelAlgosAlgoPerimeterPoly *algo = [new_GeogebraCommonKernelAlgosAlgoPerimeterPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPolygon_(cons_, label, polygon) autorelease];
  return [algo getCircumference];
}

- (GeogebraCommonKernelGeosGeoNumeric *)CircumferenceWithNSString:(NSString *)label
                       withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  GeogebraCommonKernelAlgosAlgoCircumferenceConic *algo = [new_GeogebraCommonKernelAlgosAlgoCircumferenceConic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_(cons_, label, conic) autorelease];
  return [algo getCircumference];
}

- (IOSObjectArray *)DilateWithNSString:(NSString *)label
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoDil
withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
  withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)S {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonKernelTransformDilate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, r, S) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:geoDil withNSString:label];
}

- (GeogebraCommonKernelGeosGeoNumeric *)DistanceWithNSString:(NSString *)label
                  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  GeogebraCommonKernelAlgosAlgoDistancePoints *algo = [new_GeogebraCommonKernelAlgosAlgoDistancePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, P, Q) autorelease];
  GeogebraCommonKernelGeosGeoNumeric *num = [algo getDistance];
  return num;
}

- (GeogebraCommonKernelGeosGeoNumeric *)DistanceWithNSString:(NSString *)label
                  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                      withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g {
  GeogebraCommonKernelAlgosAlgoDistancePointObject *algo = [new_GeogebraCommonKernelAlgosAlgoDistancePointObject_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_(cons_, label, P, g) autorelease];
  GeogebraCommonKernelGeosGeoNumeric *num = [algo getDistance];
  return num;
}

- (GeogebraCommonKernelImplicitGeoImplicitPoly *)ImplicitPolyWithNSString:(NSString *)label
                              withGeogebraCommonKernelGeosGeoFunctionNVar:(GeogebraCommonKernelGeosGeoFunctionNVar *)func {
  GeogebraCommonKernelImplicitAlgoImplicitPolyFunction *algo = [new_GeogebraCommonKernelImplicitAlgoImplicitPolyFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunctionNVar_(cons_, label, func) autorelease];
  GeogebraCommonKernelImplicitGeoImplicitPoly *implicitPoly = [algo getImplicitPoly];
  return implicitPoly;
}

- (GeogebraCommonKernelGeosGeoPoint *)PointInWithNSString:(NSString *)label
                           withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region
                                               withDouble:(jdouble)x
                                               withDouble:(jdouble)y
                                              withBoolean:(jboolean)addToConstruction
                                              withBoolean:(jboolean)complex
                                              withBoolean:(jboolean)coords2D {
  return GeogebraCommonKernelAlgosAlgoDispatcher_PointInWithNSString_withGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(self, label, region, x, y, addToConstruction, complex, coords2D);
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)PointInWithNSString:(NSString *)label
                                   withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region
                             withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
                                                      withBoolean:(jboolean)addToConstruction
                                                      withBoolean:(jboolean)complex
                                                      withBoolean:(jboolean)coords2D {
  return GeogebraCommonKernelAlgosAlgoDispatcher_PointInWithNSString_withGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(self, label, region, [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX], [coords getY], addToConstruction, complex, coords2D);
}

- (GeogebraCommonKernelGeosGeoPoint *)MidpointWithNSString:(NSString *)label
                      withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                      withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q {
  GeogebraCommonKernelAlgosAlgoMidpoint *algo = [new_GeogebraCommonKernelAlgosAlgoMidpoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons_, label, P, Q) autorelease];
  GeogebraCommonKernelGeosGeoPoint *M = [algo getPoint];
  return M;
}

- (GeogebraCommonKernelGeosGeoPoint *)MidpointWithNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoSegment:(GeogebraCommonKernelGeosGeoSegment *)s {
  GeogebraCommonKernelAlgosAlgoMidpointSegment *algo = [new_GeogebraCommonKernelAlgosAlgoMidpointSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoSegment_(cons_, label, s) autorelease];
  GeogebraCommonKernelGeosGeoPoint *M = [algo getPoint];
  return M;
}

- (GeogebraCommonKernelGeosGeoNumeric *)LengthWithNSString:(NSString *)label
                       withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list {
  GeogebraCommonKernelAlgosAlgoListLength *algo = [new_GeogebraCommonKernelAlgosAlgoListLength_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(cons_, label, list) autorelease];
  return [algo getLength];
}

- (GeogebraCommonKernelGeosGeoNumeric *)LengthWithNSString:(NSString *)label
                      withGeogebraCommonKernelGeosGeoLocus:(GeogebraCommonKernelGeosGeoLocus *)locus {
  GeogebraCommonKernelAlgosAlgoLengthLocus *algo = [new_GeogebraCommonKernelAlgosAlgoLengthLocus_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLocus_(cons_, label, locus) autorelease];
  return [algo getLength];
}

- (IOSObjectArray *)PolygonWithNSStringArray:(IOSObjectArray *)labels
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)P {
  GeogebraCommonKernelAlgosAlgoPolygon *algo = [new_GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, labels, P) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PolygonWithNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)pointList {
  GeogebraCommonKernelAlgosAlgoPolygon *algo = [new_GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(cons_, labels, pointList) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)PolyLineWithNSStringArray:(IOSObjectArray *)labels
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)P
                                  withBoolean:(jboolean)penStroke {
  GeogebraCommonKernelAlgosAlgoPolyLine *algo = [new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_(cons_, labels, P, penStroke) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)IntersectPolygonsWithNSStringArray:(IOSObjectArray *)labels
                withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly0
                withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly1 {
  GeogebraCommonKernelAlgosAlgoPolygonIntersection *algo = [new_GeogebraCommonKernelAlgosAlgoPolygonIntersection_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelGeosGeoPolygon_(cons_, labels, poly0, poly1) autorelease];
  IOSObjectArray *polygon = [algo getOutput];
  return polygon;
}

- (IOSObjectArray *)UnionWithNSStringArray:(IOSObjectArray *)labels
    withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly0
    withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly1 {
  GeogebraCommonKernelAlgosAlgoPolygonUnion *algo = [new_GeogebraCommonKernelAlgosAlgoPolygonUnion_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelGeosGeoPolygon_(cons_, labels, poly0, poly1) autorelease];
  IOSObjectArray *polygon = [algo getOutput];
  return polygon;
}

- (GeogebraCommonKernelGeosGeoElement *)LocusWithNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q
               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  if (!GeogebraCommonKernelAlgosAlgoDispatcher_LocusCheckWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, P, Q)) return nil;
  if ([[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPath] isKindOfClass:[GeogebraCommonKernelGeosGeoList class]]) if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast([P getPath], [GeogebraCommonKernelGeosGeoList class])))) shouldUseAlgoLocusListWithBoolean:YES]) return [([new_GeogebraCommonKernelAlgosAlgoLocusList_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons_, label, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(Q, [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [GeogebraCommonKernelGeosGeoPoint class])) autorelease]) getLocus];
  return [([new_GeogebraCommonKernelAlgosAlgoLocus_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, Q, P) autorelease]) getLocus];
}

- (jboolean)LocusCheckWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  return GeogebraCommonKernelAlgosAlgoDispatcher_LocusCheckWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, P, Q);
}

- (GeogebraCommonKernelGeosGeoLocus *)LocusWithNSString:(NSString *)label
                   withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q
                 withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)P {
  if (![((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(P)) isSlider] || ![P isDefined] || ![P isAnimatable] || [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(Q)) getPath] != nil || ![P isParentOfWithGeogebraCommonKernelKernelNDGeoElementND:Q]) return nil;
  GeogebraCommonKernelAlgosAlgoLocusSlider *algo = [new_GeogebraCommonKernelAlgosAlgoLocusSlider_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoNumeric_(cons_, label, Q, P) autorelease];
  return [algo getLocus];
}

- (GeogebraCommonKernelGeosGeoNumeric *)DistanceWithNSString:(NSString *)label
                   withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                   withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  GeogebraCommonKernelAlgosAlgoDistanceLineLine *algo = [new_GeogebraCommonKernelAlgosAlgoDistanceLineLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(cons_, label, (GeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoLine *) check_class_cast(h, [GeogebraCommonKernelGeosGeoLine class])) autorelease];
  GeogebraCommonKernelGeosGeoNumeric *num = [algo getDistance];
  return num;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)IntersectLinesWithNSString:(NSString *)label
                               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  GeogebraCommonKernelAlgosAlgoIntersectLines *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(cons_, label, (GeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoLine *) check_class_cast(h, [GeogebraCommonKernelGeosGeoLine class])) autorelease];
  GeogebraCommonKernelGeosGeoPoint *S = [algo getPoint];
  return S;
}

- (IOSObjectArray *)NSolveODEWithNSStringArray:(IOSObjectArray *)labels
           withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)fun
        withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)startX
           withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)startY
        withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)endX {
  GeogebraCommonKernelAlgosAlgoNSolveODE *algo = [new_GeogebraCommonKernelAlgosAlgoNSolveODE_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(cons_, labels, fun, startX, startY, endX) autorelease];
  return [algo getResult];
}

- (IOSObjectArray *)IntersectLinePolyLineWithNSStringArray:(IOSObjectArray *)labels
                       withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                   withGeogebraCommonKernelGeosGeoPolyLine:(GeogebraCommonKernelGeosGeoPolyLine *)p {
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelGeosGeoPoly_(cons_, labels, g, p) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)IntersectLineCurveWithNSStringArray:(IOSObjectArray *)labels
                    withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
          withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)p {
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoCurveCartesian_(cons_, labels, g, p) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)IntersectCurveCurveWithNSStringArray:(IOSObjectArray *)labels
           withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)g
           withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)p {
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoCurveCartesian_(cons_, labels, g, p) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)IntersectCurveCurveSingleWithNSStringArray:(IOSObjectArray *)labels
                 withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)c1
                 withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)c2
                                                    withDouble:(jdouble)x
                                                    withDouble:(jdouble)y {
  GeogebraCommonKernelGeosGeoPoint *p = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons_, x, y, 1.0) autorelease];
  jdouble t1 = [c1 getClosestParameterWithGeogebraCommonKernelKernelNDGeoPointND:p withDouble:([((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(c1)) getMinParameter] + [c1 getMaxParameter]) / 2];
  jdouble t2 = [c2 getClosestParameterWithGeogebraCommonKernelKernelNDGeoPointND:p withDouble:([((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(c2)) getMinParameter] + [c2 getMaxParameter]) / 2];
  GeogebraCommonKernelAlgosAlgoIntersectCurveCurve *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectCurveCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoCurveCartesian_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_(cons_, labels, c1, c2, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, t1) autorelease], [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, t2) autorelease]) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)IntersectLinePolygonWithNSStringArray:(IOSObjectArray *)labels
                      withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                   withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p {
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelGeosGeoPoly_(cons_, labels, g, p) autorelease];
  return [algo getOutput];
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectFunctionsWithNSString:(NSString *)label
                             withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                             withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)g
                                withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A {
  GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoPoint_(cons_, label, f, g, A) autorelease];
  GeogebraCommonKernelGeosGeoPoint *S = [algo getIntersectionPoint];
  return S;
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectFunctionLineWithNSString:(NSString *)label
                                withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                    withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l
                                   withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A {
  GeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoPoint_(cons_, label, f, l, A) autorelease];
  GeogebraCommonKernelGeosGeoPoint *S = [algo getIntersectionPoint];
  return S;
}

- (IOSObjectArray *)IntersectLineConicWithNSStringArray:(IOSObjectArray *)labels
              withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
             withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonKernelAlgosAlgoIntersectLineConic *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(c, [GeogebraCommonKernelGeosGeoConic class])];
  [((GeogebraCommonKernelAlgosAlgoIntersectLineConic *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(labels, points);
  return points;
}

- (IOSObjectArray *)IntersectConicsWithNSStringArray:(IOSObjectArray *)labels
          withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)a
          withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)b {
  GeogebraCommonKernelAlgosAlgoIntersectConics *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(a, [GeogebraCommonKernelGeosGeoConic class]) withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(b, [GeogebraCommonKernelGeosGeoConic class])];
  [((GeogebraCommonKernelAlgosAlgoIntersectConics *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(labels, points);
  return points;
}

- (IOSObjectArray *)IntersectPolynomialsWithNSStringArray:(IOSObjectArray *)labels
                  withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)a
                  withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)b {
  if (![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(a)) isPolynomialFunctionWithBoolean:NO] || ![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(b)) isPolynomialFunctionWithBoolean:NO]) {
    GeogebraCommonKernelGeosGeoPoint *A = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    [A setZero];
    NSString *label = labels == nil ? nil : IOSObjectArray_Get(labels, 0);
    GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectFunctionsNewton_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoPoint_(cons_, label, a, b, A) autorelease];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getIntersectionPoint] } count:1 type:GeogebraCommonKernelGeosGeoPoint_class_()];
    return ret;
  }
  GeogebraCommonKernelAlgosAlgoIntersectPolynomials *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:a withGeogebraCommonKernelGeosGeoFunction:b];
  [((GeogebraCommonKernelAlgosAlgoIntersectPolynomials *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  [algo setLabelsWithNSStringArray:labels];
  IOSObjectArray *points = [algo getIntersectionPoints];
  return points;
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialsSingleWithNSString:(NSString *)label
                                     withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)a
                                     withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)b
                                                                  withDouble:(jdouble)xRW
                                                                  withDouble:(jdouble)yRW {
  if (![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(a)) isPolynomialFunctionWithBoolean:NO] || ![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(b)) isPolynomialFunctionWithBoolean:NO]) return nil;
  GeogebraCommonKernelAlgosAlgoIntersectPolynomials *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:a withGeogebraCommonKernelGeosGeoFunction:b];
  jint index = [((GeogebraCommonKernelAlgosAlgoIntersectPolynomials *) nil_chk(algo)) getClosestPointIndexWithDouble:xRW withDouble:yRW];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, index) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (IOSObjectArray *)IntersectPolynomialLineWithNSStringArray:(IOSObjectArray *)labels
                     withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                         withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l {
  if (![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) isPolynomialFunctionWithBoolean:NO]) {
    GeogebraCommonKernelGeosGeoPoint *A = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    [A setZero];
    NSString *label = labels == nil ? nil : IOSObjectArray_Get(labels, 0);
    GeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectFunctionLineNewton_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoPoint_(cons_, label, f, l, A) autorelease];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getIntersectionPoint] } count:1 type:GeogebraCommonKernelGeosGeoPoint_class_()];
    return ret;
  }
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:f withGeogebraCommonKernelGeosGeoLine:l];
  [((GeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  [algo setLabelsWithNSStringArray:labels];
  IOSObjectArray *points = [algo getIntersectionPoints];
  return points;
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectConicsSingleWithNSString:(NSString *)label
                                   withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)a
                                   withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)b
                                                             withDouble:(jdouble)xRW
                                                             withDouble:(jdouble)yRW {
  GeogebraCommonKernelAlgosAlgoIntersectConics *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoConic:a withGeogebraCommonKernelGeosGeoConic:b];
  jint index = [((GeogebraCommonKernelAlgosAlgoIntersectConics *) nil_chk(algo)) getClosestPointIndexWithDouble:xRW withDouble:yRW];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, index) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (IOSObjectArray *)IntersectPolynomialConicWithNSStringArray:(IOSObjectArray *)labels
                      withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                         withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c {
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:f withGeogebraCommonKernelGeosGeoConic:c];
  [((GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  [algo setLabelsWithNSStringArray:labels];
  return points;
}

- (IOSObjectArray *)IntersectImplicitpolyLineWithNSStringArray:(IOSObjectArray *)labels
               withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
                           withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:p withGeogebraCommonKernelGeosGeoLine:l];
  [((GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  [algo setLabelsWithNSStringArray:labels];
  return points;
}

- (IOSObjectArray *)IntersectImplicitpolyPolynomialWithNSStringArray:(IOSObjectArray *)labels
                     withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
                             withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:p withGeogebraCommonKernelGeosGeoFunction:f];
  [((GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  [algo setLabelsWithNSStringArray:labels];
  return points;
}

- (IOSObjectArray *)IntersectImplicitpolysWithNSStringArray:(IOSObjectArray *)labels
            withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p1
            withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p2 {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:p1 withGeogebraCommonKernelImplicitGeoImplicitPoly:p2];
  [((GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  [algo setLabelsWithNSStringArray:labels];
  return points;
}

- (IOSObjectArray *)IntersectImplicitpolyConicWithNSStringArray:(IOSObjectArray *)labels
                withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                           withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c1 {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:p1 withGeogebraCommonKernelGeosGeoConic:c1];
  [((GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *) nil_chk(algo)) setPrintedInXMLWithBoolean:YES];
  IOSObjectArray *points = [algo getIntersectionPoints];
  [algo setLabelsWithNSStringArray:labels];
  return points;
}

- (GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *)getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                                                                      withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c {
  GeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:f withGeogebraCommonKernelGeosGeoElement:c];
  if (existingAlgo != nil) return (GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *) check_class_cast(existingAlgo, [GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic class]);
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoConic_(cons_, f, c) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (GeogebraCommonKernelAlgosAlgoIntersectLineConic *)getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                                                                            withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c {
  GeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:g withGeogebraCommonKernelGeosGeoElement:c];
  if (existingAlgo != nil) return (GeogebraCommonKernelAlgosAlgoIntersectLineConic *) check_class_cast(existingAlgo, [GeogebraCommonKernelAlgosAlgoIntersectLineConic class]);
  GeogebraCommonKernelAlgosAlgoIntersectLineConic *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectLineConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_(cons_, g, c) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (GeogebraCommonKernelAlgosAlgoIntersectConics *)getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)a
                                                                          withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)b {
  GeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b];
  if (existingAlgo != nil) return (GeogebraCommonKernelAlgosAlgoIntersectConics *) check_class_cast(existingAlgo, [GeogebraCommonKernelAlgosAlgoIntersectConics class]);
  GeogebraCommonKernelAlgosAlgoIntersectConics *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectConics_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoConic_withGeogebraCommonKernelGeosGeoConic_(cons_, a, b) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (GeogebraCommonKernelAlgosAlgoIntersectPolynomials *)getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)a
                                                                               withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)b {
  GeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b];
  if (existingAlgo != nil) return (GeogebraCommonKernelAlgosAlgoIntersectPolynomials *) check_class_cast(existingAlgo, [GeogebraCommonKernelAlgosAlgoIntersectPolynomials class]);
  GeogebraCommonKernelAlgosAlgoIntersectPolynomials *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectPolynomials_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(cons_, a, b) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (GeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *)getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)a
                                                                                      withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l {
  GeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:l];
  if (existingAlgo != nil) return (GeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *) check_class_cast(existingAlgo, [GeogebraCommonKernelAlgosAlgoIntersectPolynomialLine class]);
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectPolynomialLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoLine_(cons_, a, l) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *)getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                                                                                         withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l {
  GeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:p withGeogebraCommonKernelGeosGeoElement:l];
  if (existingAlgo != nil) return (GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *) check_class_cast(existingAlgo, [GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric class]);
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *algo = [new_GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_(cons_, p, l) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *)getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                                                                                     withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:p withGeogebraCommonKernelGeosGeoElement:f];
  if (existingAlgo != nil) return (GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *) check_class_cast(existingAlgo, [GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric class]);
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *algo = [new_GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_(cons_, p, f) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *)getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                                                                                    withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p2 {
  GeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:p1 withGeogebraCommonKernelGeosGeoElement:p2];
  if (existingAlgo != nil) return (GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *) check_class_cast(existingAlgo, [GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys class]);
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [new_GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelImplicitGeoImplicitPoly_(cons_, p1, p2) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *)getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                                                                                               withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c1 {
  GeogebraCommonKernelAlgosAlgoElement *existingAlgo = [self findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:p1 withGeogebraCommonKernelGeosGeoElement:c1];
  if (existingAlgo != nil) return (GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *) check_class_cast(existingAlgo, [GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys class]);
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [new_GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoConic_(cons_, p1, c1) autorelease];
  [algo setPrintedInXMLWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) addWithId:algo];
  return algo;
}

- (GeogebraCommonKernelAlgosAlgoElement *)findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                                                                           withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b {
  jint size = [((JavaUtilArrayList *) nil_chk(intersectionAlgos_)) size];
  GeogebraCommonKernelAlgosAlgoElement *algo;
  for (jint i = 0; i < size; i++) {
    algo = [intersectionAlgos_ getWithInt:i];
    IOSObjectArray *input = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
    if ((a == IOSObjectArray_Get(nil_chk(input), 0) && b == IOSObjectArray_Get(input, 1)) || (a == IOSObjectArray_Get(input, 1) && b == IOSObjectArray_Get(input, 0))) return algo;
  }
  return nil;
}

- (IOSObjectArray *)TangentWithNSStringArray:(IOSObjectArray *)labels
  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
  withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonKernelAlgosAlgoTangentPoint *algo = [new_GeogebraCommonKernelAlgosAlgoTangentPoint_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(cons_, labels, P, c) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)CommonTangentsWithNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c1
         withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c2 {
  GeogebraCommonKernelAlgosAlgoCommonTangents *algo = [new_GeogebraCommonKernelAlgosAlgoCommonTangents_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_(cons_, labels, c1, c2) autorelease];
  return [algo getOutput];
}

- (IOSObjectArray *)TangentWithNSStringArray:(IOSObjectArray *)labels
   withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
  withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonKernelAlgosAlgoTangentLine *algo = [new_GeogebraCommonKernelAlgosAlgoTangentLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(cons_, labels, g, c) autorelease];
  return [algo getOutput];
}

- (GeogebraCommonKernelGeosGeoLine *)TangentWithNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  return GeogebraCommonKernelKernelCAS_TangentWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(cons_, label, P, f);
}

- (IOSObjectArray *)TangentWithNSStringArray:(IOSObjectArray *)labels
  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)R
withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p {
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *algo = [new_GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, labels, p, R) autorelease];
  [algo setLabelsWithNSStringArray:labels];
  IOSObjectArray *tangents = [algo getTangents];
  return tangents;
}

- (IOSObjectArray *)TranslateWithNSString:(NSString *)label
   withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoTrans
     withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)v {
  return GeogebraCommonKernelAlgosAlgoDispatcher_TranslateWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoVec3D_(self, label, geoTrans, v);
}

- (IOSObjectArray *)TranslateNDWithNSString:(NSString *)label
     withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoTrans
withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v {
  return GeogebraCommonKernelAlgosAlgoDispatcher_TranslateWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoVec3D_(self, label, geoTrans, (GeogebraCommonKernelGeosGeoVec3D *) check_class_cast(v, [GeogebraCommonKernelGeosGeoVec3D class]));
}

- (IOSObjectArray *)MirrorWithNSString:(NSString *)label
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoMir
  withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_(cons_, Q) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:geoMir withNSString:label];
}

- (IOSObjectArray *)MirrorWithNSString:(NSString *)label
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Q
  withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)conic {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoConic_(cons_, conic) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:Q withNSString:label];
}

- (IOSObjectArray *)MirrorWithNSString:(NSString *)label
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoMir
   withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_(cons_, g) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:geoMir withNSString:label];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)attachWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                                                                  withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
                                       withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:(id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>)view
                                                          withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)locRW {
  @try {
    jboolean oldLabelCreationFlag = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    jboolean setDefaultColor = NO;
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class])))) getColorFunction] == nil) {
      setDefaultColor = [((GeogebraCommonAwtGColor *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class])))) getObjectColor])) isEqual:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE])) getObjectColor]];
    }
    id<GeogebraCommonKernelKernelNDGeoPointND> newPoint = [self PointWithNSString:nil withGeogebraCommonKernelPath:path withGeogebraCommonKernelMatrixCoords:locRW withBoolean:NO withBoolean:NO withBoolean:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getMode] != GeogebraCommonKernelKernel_COORD_CARTESIAN_3D];
    [cons_ setSuppressLabelCreationWithBoolean:oldLabelCreationFlag];
    [cons_ replaceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class]) withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(newPoint, [GeogebraCommonKernelGeosGeoElement class])];
    if (setDefaultColor) {
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(newPoint)) setObjColorWithGeogebraCommonAwtGColor:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH])) getObjectColor]];
    }
    return newPoint;
  }
  @catch (JavaLangException *e1) {
    [((JavaLangException *) nil_chk(e1)) printStackTrace];
    return nil;
  }
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)attachWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                                                                withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region
                                       withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:(id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>)view
                                                          withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)locRW {
  @try {
    jboolean oldLabelCreationFlag = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    jboolean setDefaultColor = NO;
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class])))) getColorFunction] == nil) {
      setDefaultColor = [((GeogebraCommonAwtGColor *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class])))) getObjectColor])) isEqual:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE])) getObjectColor]];
    }
    id<GeogebraCommonKernelKernelNDGeoPointND> newPoint = [self PointInWithNSString:nil withGeogebraCommonKernelRegion:region withGeogebraCommonKernelMatrixCoords:locRW withBoolean:NO withBoolean:NO withBoolean:YES];
    [cons_ setSuppressLabelCreationWithBoolean:oldLabelCreationFlag];
    [cons_ replaceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class]) withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(newPoint, [GeogebraCommonKernelGeosGeoElement class])];
    if (setDefaultColor) {
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(newPoint)) setObjColorWithGeogebraCommonAwtGColor:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_IN_REGION])) getObjectColor]];
    }
    return newPoint;
  }
  @catch (JavaLangException *e1) {
    [((JavaLangException *) nil_chk(e1)) printStackTrace];
    return nil;
  }
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)detachWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p
                                       withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:(id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>)view {
  @try {
    jboolean oldLabelCreationFlag = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    jboolean setDefaultColor = NO;
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [GeogebraCommonKernelGeosGeoElement class])))) getColorFunction] == nil) {
      if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) hasPath]) {
        setDefaultColor = [((GeogebraCommonAwtGColor *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [GeogebraCommonKernelGeosGeoElement class])) getObjectColor])) isEqual:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH])) getObjectColor]];
      }
      else if ([p hasRegion]) {
        setDefaultColor = [((GeogebraCommonAwtGColor *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [GeogebraCommonKernelGeosGeoElement class])) getObjectColor])) isEqual:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_IN_REGION])) getObjectColor]];
      }
    }
    id<GeogebraCommonKernelKernelNDGeoPointND> newPoint = [self copyFreePointWithGeogebraCommonKernelKernelNDGeoPointND:p withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:view];
    [cons_ setSuppressLabelCreationWithBoolean:oldLabelCreationFlag];
    [cons_ replaceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [GeogebraCommonKernelGeosGeoElement class]) withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(newPoint, [GeogebraCommonKernelGeosGeoElement class])];
    if (setDefaultColor) {
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(newPoint)) setObjColorWithGeogebraCommonAwtGColor:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE])) getObjectColor]];
    }
    return newPoint;
  }
  @catch (JavaLangException *e1) {
    [((JavaLangException *) nil_chk(e1)) printStackTrace];
    return nil;
  }
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)copyFreePointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                                              withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:(id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>)view {
  jdouble xOffset = 0, yOffset = 0;
  if (![((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(view)) isEuclidianView3D]) {
    xOffset = GeogebraCommonKernelAlgosAlgoDispatcher_DETACH_OFFSET_ * [view getInvXscale];
    yOffset = GeogebraCommonKernelAlgosAlgoDispatcher_DETACH_OFFSET_ * [view getInvYscale];
  }
  return [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons_, nil, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomX] + xOffset, [point getInhomY] + yOffset, 1.0) autorelease];
}

- (jboolean)detachWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                                                  withDouble:(jdouble)d
                                                  withDouble:(jdouble)e
                                                 withBoolean:(jboolean)wasOnPath
                                                 withBoolean:(jboolean)wasOnRegion {
  @try {
    jboolean oldLabelCreationFlag = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    jboolean setDefaultColor = NO;
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class])))) getColorFunction] == nil) {
      if (wasOnPath) {
        setDefaultColor = [((GeogebraCommonAwtGColor *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class])))) getObjectColor])) isEqual:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH])) getObjectColor]];
      }
      else if (wasOnRegion) {
        setDefaultColor = [((GeogebraCommonAwtGColor *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class])))) getObjectColor])) isEqual:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_IN_REGION])) getObjectColor]];
      }
    }
    GeogebraCommonKernelGeosGeoPoint *newPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons_, nil, d, e, 1.0) autorelease];
    [cons_ setSuppressLabelCreationWithBoolean:oldLabelCreationFlag];
    [cons_ replaceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class]) withGeogebraCommonKernelGeosGeoElement:newPoint];
    if (setDefaultColor) {
      [newPoint setObjColorWithGeogebraCommonAwtGColor:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelConstructionDefaults *) nil_chk([cons_ getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE])) getObjectColor]];
    }
  }
  @catch (JavaLangException *e1) {
    [((JavaLangException *) nil_chk(e1)) printStackTrace];
    return NO;
  }
  return YES;
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialLineSingleWithNSString:(NSString *)label
                                        withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                            withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l
                                                                     withDouble:(jdouble)xRW
                                                                     withDouble:(jdouble)yRW {
  if (![((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) getConstruction])) isFileLoading] && ![f isPolynomialFunctionWithBoolean:NO]) return nil;
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:f withGeogebraCommonKernelGeosGeoLine:l];
  jint index = [((GeogebraCommonKernelAlgosAlgoIntersectPolynomialLine *) nil_chk(algo)) getClosestPointIndexWithDouble:xRW withDouble:yRW];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, index) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectPolynomialConicSingleWithNSString:(NSString *)label
                                         withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                            withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c
                                                                      withDouble:(jdouble)x
                                                                      withDouble:(jdouble)y {
  GeogebraCommonKernelAlgosAlgoIntersect *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:f withGeogebraCommonKernelGeosGeoConic:c];
  jint idx = [((GeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo)) getClosestPointIndexWithDouble:x withDouble:y];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, idx) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectLineConicSingleWithNSString:(NSString *)label
                                       withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                                      withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c
                                                                withDouble:(jdouble)xRW
                                                                withDouble:(jdouble)yRW {
  GeogebraCommonKernelAlgosAlgoIntersectLineConic *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoLine:g withGeogebraCommonKernelGeosGeoConic:c];
  jint index = [((GeogebraCommonKernelAlgosAlgoIntersectLineConic *) nil_chk(algo)) getClosestPointIndexWithDouble:xRW withDouble:yRW];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, index) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyLineSingleWithNSString:(NSString *)label
                                  withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                              withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l
                                                                       withDouble:(jdouble)x
                                                                       withDouble:(jdouble)y {
  GeogebraCommonKernelAlgosAlgoIntersect *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:p withGeogebraCommonKernelGeosGeoLine:l];
  jint idx = [((GeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo)) getClosestPointIndexWithDouble:x withDouble:y];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, idx) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyPolynomialSingleWithNSString:(NSString *)label
                                        withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
                                                withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                                                             withDouble:(jdouble)x
                                                                             withDouble:(jdouble)y {
  if (![((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) getConstruction])) isFileLoading] && ![f isPolynomialFunctionWithBoolean:NO]) return nil;
  GeogebraCommonKernelAlgosAlgoIntersect *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:p withGeogebraCommonKernelGeosGeoFunction:f];
  jint idx = [((GeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo)) getClosestPointIndexWithDouble:x withDouble:y];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, idx) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolyConicSingleWithNSString:(NSString *)label
                                   withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                                              withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c1
                                                                        withDouble:(jdouble)x
                                                                        withDouble:(jdouble)y {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:p1 withGeogebraCommonKernelGeosGeoConic:c1];
  jint idx = [((GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *) nil_chk(algo)) getClosestPointIndexWithDouble:x withDouble:y];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, idx) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (GeogebraCommonKernelGeosGeoPoint *)IntersectImplicitpolysSingleWithNSString:(NSString *)label
                               withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p1
                               withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p2
                                                                    withDouble:(jdouble)x
                                                                    withDouble:(jdouble)y {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algo = [self getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:p1 withGeogebraCommonKernelImplicitGeoImplicitPoly:p2];
  jint idx = [((GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *) nil_chk(algo)) getClosestPointIndexWithDouble:x withDouble:y];
  GeogebraCommonKernelAlgosAlgoIntersectSingle *salgo = [new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withInt_(label, algo, idx) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [salgo getPoint];
  return point;
}

- (GeogebraCommonKernelAlgosAlgoClosestPoint *)getNewAlgoClosestPointWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons2
                                                                             withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
                                                               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  return [new_GeogebraCommonKernelAlgosAlgoClosestPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_withGeogebraCommonKernelKernelNDGeoPointND_(cons2, path, point) autorelease];
}

- (GeogebraCommonKernelGeosGeoAngle *)createLineAngleWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line1
                                                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line2 {
  GeogebraCommonKernelGeosGeoAngle *angle = nil;
  if (([line1 isKindOfClass:[GeogebraCommonKernelGeosGeoSegment class]]) && ([line2 isKindOfClass:[GeogebraCommonKernelGeosGeoSegment class]])) {
    GeogebraCommonKernelGeosGeoSegment *a = (GeogebraCommonKernelGeosGeoSegment *) check_class_cast(line1, [GeogebraCommonKernelGeosGeoSegment class]);
    GeogebraCommonKernelGeosGeoSegment *b = (GeogebraCommonKernelGeosGeoSegment *) check_class_cast(line2, [GeogebraCommonKernelGeosGeoSegment class]);
    GeogebraCommonKernelGeosGeoPoint *a1 = ((GeogebraCommonKernelGeosGeoPoint *) [((GeogebraCommonKernelGeosGeoSegment *) nil_chk(a)) getStartPoint]);
    GeogebraCommonKernelGeosGeoPoint *a2 = ((GeogebraCommonKernelGeosGeoPoint *) [a getEndPoint]);
    GeogebraCommonKernelGeosGeoPoint *b1 = ((GeogebraCommonKernelGeosGeoPoint *) [((GeogebraCommonKernelGeosGeoSegment *) nil_chk(b)) getStartPoint]);
    GeogebraCommonKernelGeosGeoPoint *b2 = ((GeogebraCommonKernelGeosGeoPoint *) [b getEndPoint]);
    if (a1 == b1) {
      angle = GeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, nil, a2, a1, b2);
    }
    else if (a1 == b2) {
      angle = GeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, nil, a2, a1, b1);
    }
    else if (a2 == b1) {
      angle = GeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, nil, a1, a2, b2);
    }
    else if (a2 == b2) {
      angle = GeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, nil, a1, a2, b1);
    }
  }
  if (angle == nil) {
    angle = GeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, nil, line1, line2);
  }
  return angle;
}

- (GeogebraCommonKernelAlgosAlgoVertexPolygon *)newAlgoVertexPolygonWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                                                       withNSStringArray:(IOSObjectArray *)labels
                                                                     withGeogebraCommonKernelGeosGeoPoly:(id<GeogebraCommonKernelGeosGeoPoly>)p {
  return [new_GeogebraCommonKernelAlgosAlgoVertexPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPoly_(cons, labels, p) autorelease];
}

- (void)dealloc {
  RELEASE_(cons_);
  RELEASE_(intersectionAlgos_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "AlgoDispatcher", NULL, 0x1, NULL, NULL },
    { "removeIntersectionAlgorithmWithGeogebraCommonKernelAlgosAlgoIntersectAbstract:", "removeIntersectionAlgorithm", "V", 0x1, NULL, NULL },
    { "addIntersectionAlgorithmWithGeogebraCommonKernelAlgosAlgoIntersectAbstract:", "addIntersectionAlgorithm", "V", 0x1, NULL, NULL },
    { "PointWithNSString:withDouble:withDouble:withBoolean:", "Point", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "VectorWithNSString:withDouble:withDouble:", "Vector", "Lgeogebra.common.kernel.geos.GeoVector;", 0x11, NULL, NULL },
    { "VectorWithNSString:", "Vector", "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x1, NULL, NULL },
    { "Vector", NULL, "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x1, NULL, NULL },
    { "VectorWithDouble:withDouble:", "Vector", "Lgeogebra.common.kernel.geos.GeoVector;", 0x11, NULL, NULL },
    { "PointWithNSString:withGeogebraCommonKernelPath:withDouble:withDouble:withBoolean:withBoolean:withBoolean:", "Point", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "PointWithNSString:withGeogebraCommonKernelPath:withGeogebraCommonKernelMatrixCoords:withBoolean:withBoolean:withBoolean:", "Point", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "PointWithNSString:withGeogebraCommonKernelPath:withGeogebraCommonKernelArithmeticNumberValue:", "Point", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "LineWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "Line", "Lgeogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "RayWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "Ray", "Lgeogebra.common.kernel.geos.GeoRay;", 0x11, NULL, NULL },
    { "RayWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoVector:", "Ray", "Lgeogebra.common.kernel.geos.GeoRay;", 0x11, NULL, NULL },
    { "LineWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoLine:", "Line", "Lgeogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "OrthogonalLineWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoVector:", "OrthogonalLine", "Lgeogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "OrthogonalLineWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoLine:", "OrthogonalLine", "Lgeogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "LineBisectorWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "LineBisector", "Lgeogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "LineBisectorWithNSString:withGeogebraCommonKernelGeosGeoSegment:", "LineBisector", "Lgeogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "AngularBisectorWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "AngularBisector", "Lgeogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "AngularBisectorWithNSStringArray:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoLine:", "AngularBisector", "[Lgeogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "VectorWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "Vector", "Lgeogebra.common.kernel.geos.GeoVector;", 0x11, NULL, NULL },
    { "VectorWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:", "Vector", "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x11, NULL, NULL },
    { "createVectorWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:", "createVector", "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
    { "SlopeWithNSString:withGeogebraCommonKernelGeosGeoLine:", "Slope", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "SegmentWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "Segment", "Lgeogebra.common.kernel.geos.GeoSegment;", 0x11, NULL, NULL },
    { "ListWithNSString:withJavaUtilArrayList:withBoolean:", "List", "Lgeogebra.common.kernel.geos.GeoList;", 0x11, NULL, NULL },
    { "DependentFunctionWithNSString:withGeogebraCommonKernelArithmeticFunction:", "DependentFunction", "Lgeogebra.common.kernel.geos.GeoFunction;", 0x11, NULL, NULL },
    { "textfieldWithNSString:withGeogebraCommonKernelGeosGeoElement:", "textfield", "Lgeogebra.common.kernel.geos.GeoTextField;", 0x1, NULL, NULL },
    { "LineWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoVector:", "Line", "Lgeogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "SegmentWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "Segment", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "SegmentFixedWithNSString:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "SegmentFixed", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "AngleWithNSStringArray:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoNumberValue:withBoolean:", "Angle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "RotateWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "Rotate", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "AngleWithNSString:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoLine:", "Angle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "AngleWithNSString:withGeogebraCommonKernelGeosGeoVector:withGeogebraCommonKernelGeosGeoVector:", "Angle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "AngleWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "Angle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x11, NULL, NULL },
    { "AnglesWithNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:", "Angles", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "getDefaultNumberWithBoolean:", "getDefaultNumber", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "CircleWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "Circle", "Lgeogebra.common.kernel.geos.GeoConic;", 0x11, NULL, NULL },
    { "CircumcircleArcWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "CircumcircleArc", "Lgeogebra.common.kernel.geos.GeoConicPart;", 0x11, NULL, NULL },
    { "CircumcircleSectorWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "CircumcircleSector", "Lgeogebra.common.kernel.geos.GeoConicPart;", 0x11, NULL, NULL },
    { "CircleArcSectorWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withInt:", "CircleArcSector", "Lgeogebra.common.kernel.geos.GeoConicPart;", 0x11, NULL, NULL },
    { "CenterWithNSString:withGeogebraCommonKernelKernelNDGeoConicND:", "Center", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x11, NULL, NULL },
    { "CircleWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "Circle", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "CircleWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoSegment:", "Circle", "Lgeogebra.common.kernel.geos.GeoConic;", 0x11, NULL, NULL },
    { "CircleWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "Circle", "Lgeogebra.common.kernel.geos.GeoConic;", 0x11, NULL, NULL },
    { "SemicircleWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "Semicircle", "Lgeogebra.common.kernel.geos.GeoConicPart;", 0x11, NULL, NULL },
    { "ParabolaWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "Parabola", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "EllipseWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "Ellipse", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "EllipseHyperbolaWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withInt:", "EllipseHyperbola", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "HyperbolaWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "Hyperbola", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "ConicWithNSString:withGeogebraCommonKernelGeosGeoPointArray:", "Conic", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x11, NULL, NULL },
    { "DiameterLineWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "DiameterLine", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "DiameterLineWithNSString:withGeogebraCommonKernelKernelNDGeoVectorND:withGeogebraCommonKernelKernelNDGeoConicND:", "DiameterLine", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "RegularPolygonWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "RegularPolygon", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "AreaWithNSString:withGeogebraCommonKernelKernelNDGeoConicND:", "Area", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "PerimeterWithNSString:withGeogebraCommonKernelGeosGeoPolygon:", "Perimeter", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "CircumferenceWithNSString:withGeogebraCommonKernelKernelNDGeoConicND:", "Circumference", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "DilateWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoPoint:", "Dilate", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "DistanceWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "Distance", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "DistanceWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoElement:", "Distance", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "ImplicitPolyWithNSString:withGeogebraCommonKernelGeosGeoFunctionNVar:", "ImplicitPoly", "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", 0x11, NULL, NULL },
    { "PointInWithNSString:withGeogebraCommonKernelRegion:withDouble:withDouble:withBoolean:withBoolean:withBoolean:", "PointIn", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "PointInWithNSString:withGeogebraCommonKernelRegion:withGeogebraCommonKernelMatrixCoords:withBoolean:withBoolean:withBoolean:", "PointIn", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "MidpointWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "Midpoint", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "MidpointWithNSString:withGeogebraCommonKernelGeosGeoSegment:", "Midpoint", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "LengthWithNSString:withGeogebraCommonKernelGeosGeoList:", "Length", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "LengthWithNSString:withGeogebraCommonKernelGeosGeoLocus:", "Length", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "PolygonWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "Polygon", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "PolygonWithNSStringArray:withGeogebraCommonKernelGeosGeoList:", "Polygon", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "PolyLineWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withBoolean:", "PolyLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectPolygonsWithNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelGeosGeoPolygon:", "IntersectPolygons", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "UnionWithNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelGeosGeoPolygon:", "Union", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "LocusWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "Locus", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "LocusCheckWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "LocusCheck", "Z", 0x11, NULL, NULL },
    { "LocusWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoNumeric:", "Locus", "Lgeogebra.common.kernel.geos.GeoLocus;", 0x11, NULL, NULL },
    { "DistanceWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "Distance", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "IntersectLinesWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "IntersectLines", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "NSolveODEWithNSStringArray:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:", "NSolveODE", "[Lgeogebra.common.kernel.geos.GeoLocus;", 0x11, NULL, NULL },
    { "IntersectLinePolyLineWithNSStringArray:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoPolyLine:", "IntersectLinePolyLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectLineCurveWithNSStringArray:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoCurveCartesian:", "IntersectLineCurve", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectCurveCurveWithNSStringArray:withGeogebraCommonKernelGeosGeoCurveCartesian:withGeogebraCommonKernelGeosGeoCurveCartesian:", "IntersectCurveCurve", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectCurveCurveSingleWithNSStringArray:withGeogebraCommonKernelGeosGeoCurveCartesian:withGeogebraCommonKernelGeosGeoCurveCartesian:withDouble:withDouble:", "IntersectCurveCurveSingle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectLinePolygonWithNSStringArray:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoPolygon:", "IntersectLinePolygon", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "IntersectFunctionsWithNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoPoint:", "IntersectFunctions", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectFunctionLineWithNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoPoint:", "IntersectFunctionLine", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectLineConicWithNSStringArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "IntersectLineConic", "[Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "IntersectConicsWithNSStringArray:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoConicND:", "IntersectConics", "[Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "IntersectPolynomialsWithNSStringArray:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoFunction:", "IntersectPolynomials", "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectPolynomialsSingleWithNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoFunction:withDouble:withDouble:", "IntersectPolynomialsSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectPolynomialLineWithNSStringArray:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoLine:", "IntersectPolynomialLine", "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectConicsSingleWithNSString:withGeogebraCommonKernelGeosGeoConic:withGeogebraCommonKernelGeosGeoConic:withDouble:withDouble:", "IntersectConicsSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectPolynomialConicWithNSStringArray:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoConic:", "IntersectPolynomialConic", "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolyLineWithNSStringArray:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoLine:", "IntersectImplicitpolyLine", "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolyPolynomialWithNSStringArray:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoFunction:", "IntersectImplicitpolyPolynomial", "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolysWithNSStringArray:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelImplicitGeoImplicitPoly:", "IntersectImplicitpolys", "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolyConicWithNSStringArray:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoConic:", "IntersectImplicitpolyConic", "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoConic:", "getIntersectionAlgorithm", "Lgeogebra.common.kernel.algos.AlgoIntersectPolynomialConic;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoConic:", "getIntersectionAlgorithm", "Lgeogebra.common.kernel.algos.AlgoIntersectLineConic;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoConic:withGeogebraCommonKernelGeosGeoConic:", "getIntersectionAlgorithm", "Lgeogebra.common.kernel.algos.AlgoIntersectConics;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoFunction:", "getIntersectionAlgorithm", "Lgeogebra.common.kernel.algos.AlgoIntersectPolynomials;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoLine:", "getIntersectionAlgorithm", "Lgeogebra.common.kernel.algos.AlgoIntersectPolynomialLine;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoLine:", "getIntersectionAlgorithm", "Lgeogebra.common.kernel.implicit.AlgoIntersectImplicitpolyParametric;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoFunction:", "getIntersectionAlgorithm", "Lgeogebra.common.kernel.implicit.AlgoIntersectImplicitpolyParametric;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelImplicitGeoImplicitPoly:", "getIntersectionAlgorithm", "Lgeogebra.common.kernel.implicit.AlgoIntersectImplicitpolys;", 0x1, NULL, NULL },
    { "getIntersectionAlgorithmWithGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoConic:", "getIntersectionAlgorithm", "Lgeogebra.common.kernel.implicit.AlgoIntersectImplicitpolys;", 0x1, NULL, NULL },
    { "findExistingIntersectionAlgorithmWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "findExistingIntersectionAlgorithm", "Lgeogebra.common.kernel.algos.AlgoElement;", 0x1, NULL, NULL },
    { "TangentWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoConicND:", "Tangent", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "CommonTangentsWithNSStringArray:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoConicND:", "CommonTangents", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "TangentWithNSStringArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "Tangent", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "TangentWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoFunction:", "Tangent", "Lgeogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "TangentWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelImplicitGeoImplicitPoly:", "Tangent", "[Lgeogebra.common.kernel.geos.GeoLine;", 0x11, NULL, NULL },
    { "TranslateWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoVec3D:", "Translate", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "TranslateNDWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoVectorND:", "TranslateND", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "MirrorWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoPoint:", "Mirror", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "MirrorWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoConic:", "Mirror", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "MirrorWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoLine:", "Mirror", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "attachWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelPath:withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:withGeogebraCommonKernelMatrixCoords:", "attach", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "attachWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelRegion:withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:withGeogebraCommonKernelMatrixCoords:", "attach", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "detachWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:", "detach", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "copyFreePointWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:", "copyFreePoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "detachWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:withDouble:withBoolean:withBoolean:", "detach", "Z", 0x1, NULL, NULL },
    { "IntersectPolynomialLineSingleWithNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoLine:withDouble:withDouble:", "IntersectPolynomialLineSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectPolynomialConicSingleWithNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoConic:withDouble:withDouble:", "IntersectPolynomialConicSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectLineConicSingleWithNSString:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoConic:withDouble:withDouble:", "IntersectLineConicSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolyLineSingleWithNSString:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoLine:withDouble:withDouble:", "IntersectImplicitpolyLineSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolyPolynomialSingleWithNSString:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoFunction:withDouble:withDouble:", "IntersectImplicitpolyPolynomialSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolyConicSingleWithNSString:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoConic:withDouble:withDouble:", "IntersectImplicitpolyConicSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "IntersectImplicitpolysSingleWithNSString:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelImplicitGeoImplicitPoly:withDouble:withDouble:", "IntersectImplicitpolysSingle", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "getNewAlgoClosestPointWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelPath:withGeogebraCommonKernelKernelNDGeoPointND:", "getNewAlgoClosestPoint", "Lgeogebra.common.kernel.algos.AlgoClosestPoint;", 0x1, NULL, NULL },
    { "createLineAngleWithGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoLine:", "createLineAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "newAlgoVertexPolygonWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoPoly:", "newAlgoVertexPolygon", "Lgeogebra.common.kernel.algos.AlgoVertexPolygon;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cons_", NULL, 0x4, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "intersectionAlgos_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/algos/AlgoIntersectAbstract;>;",  },
    { "DETACH_OFFSET_", NULL, 0xc, "I", &GeogebraCommonKernelAlgosAlgoDispatcher_DETACH_OFFSET_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoDispatcher = { 2, "AlgoDispatcher", "geogebra.common.kernel.algos", NULL, 0x1, 133, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoDispatcher;
}

@end

void GeogebraCommonKernelAlgosAlgoDispatcher_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoDispatcher *self, GeogebraCommonKernelConstruction *cons) {
  NSObject_init(self);
  GeogebraCommonKernelAlgosAlgoDispatcher_setAndConsume_intersectionAlgos_(self, new_JavaUtilArrayList_init());
  GeogebraCommonKernelAlgosAlgoDispatcher_set_cons_(self, cons);
}

GeogebraCommonKernelAlgosAlgoDispatcher *new_GeogebraCommonKernelAlgosAlgoDispatcher_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelAlgosAlgoDispatcher *self = [GeogebraCommonKernelAlgosAlgoDispatcher alloc];
  GeogebraCommonKernelAlgosAlgoDispatcher_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

GeogebraCommonKernelGeosGeoVector *GeogebraCommonKernelAlgosAlgoDispatcher_VectorWithNSString_withDouble_withDouble_(GeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, jdouble x, jdouble y) {
  GeogebraCommonKernelGeosGeoVector *v = GeogebraCommonKernelAlgosAlgoDispatcher_VectorWithDouble_withDouble_(self, x, y);
  [((GeogebraCommonKernelGeosGeoVector *) nil_chk(v)) setLabelWithNSString:label];
  return v;
}

GeogebraCommonKernelGeosGeoVector *GeogebraCommonKernelAlgosAlgoDispatcher_VectorWithDouble_withDouble_(GeogebraCommonKernelAlgosAlgoDispatcher *self, jdouble x, jdouble y) {
  GeogebraCommonKernelGeosGeoVector *v = [new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
  [v setCoordsWithDouble:x withDouble:y withDouble:0.0];
  [v setModeWithInt:GeogebraCommonKernelKernel_COORD_CARTESIAN];
  return v;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelAlgosAlgoDispatcher_PointWithNSString_withGeogebraCommonKernelPath_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(GeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, id<GeogebraCommonKernelPath> path, jdouble x, jdouble y, jboolean addToConstruction, jboolean complex, jboolean coords2D) {
  GeogebraCommonKernelAlgosAlgoPointOnPath *algo;
  if (!addToConstruction) {
    algo = [new_GeogebraCommonKernelAlgosAlgoPointOnPath_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_withDouble_withDouble_withDouble_withBoolean_(self->cons_, path, x, y, 0, NO) autorelease];
  }
  else {
    algo = [new_GeogebraCommonKernelAlgosAlgoPointOnPath_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelPath_withDouble_withDouble_withDouble_(self->cons_, label, path, x, y, 0) autorelease];
  }
  GeogebraCommonKernelGeosGeoPoint *p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelAlgosAlgoPointOnPath *) nil_chk(algo)) getP], [GeogebraCommonKernelGeosGeoPoint class]);
  if (complex) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setModeWithInt:GeogebraCommonKernelKernel_COORD_COMPLEX];
    [p update];
  }
  else if (!coords2D) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setCartesian3D];
    [p update];
  }
  return p;
}

GeogebraCommonKernelGeosGeoSegment *GeogebraCommonKernelAlgosAlgoDispatcher_SegmentWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoPoint *Q) {
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment *algo = [new_GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self->cons_, label, P, Q) autorelease];
  GeogebraCommonKernelGeosGeoSegment *s = [algo getSegment];
  return s;
}

GeogebraCommonKernelGeosGeoAngle *GeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoLine *h) {
  GeogebraCommonKernelAlgosAlgoAngleLines *algo = [new_GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self->cons_, label, g, h) autorelease];
  GeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

GeogebraCommonKernelGeosGeoAngle *GeogebraCommonKernelAlgosAlgoDispatcher_AngleWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B, GeogebraCommonKernelGeosGeoPoint *C) {
  GeogebraCommonKernelAlgosAlgoAnglePoints *algo = [new_GeogebraCommonKernelAlgosAlgoAnglePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self->cons_, label, A, B, C) autorelease];
  GeogebraCommonKernelGeosGeoAngle *angle = [algo getAngle];
  return angle;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelAlgosAlgoDispatcher_PointInWithNSString_withGeogebraCommonKernelRegion_withDouble_withDouble_withBoolean_withBoolean_withBoolean_(GeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, id<GeogebraCommonKernelRegion> region, jdouble x, jdouble y, jboolean addToConstruction, jboolean complex, jboolean coords2D) {
  jboolean oldMacroMode = NO;
  if (!addToConstruction) {
    oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  }
  GeogebraCommonKernelAlgosAlgoPointInRegion *algo = [new_GeogebraCommonKernelAlgosAlgoPointInRegion_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelRegion_withDouble_withDouble_(self->cons_, label, region, x, y) autorelease];
  GeogebraCommonKernelGeosGeoPoint *p = [algo getP];
  if (complex) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setModeWithInt:GeogebraCommonKernelKernel_COORD_COMPLEX];
  }
  else if (!coords2D) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setCartesian3D];
    [p update];
  }
  if (!addToConstruction) {
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  return p;
}

jboolean GeogebraCommonKernelAlgosAlgoDispatcher_LocusCheckWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoDispatcher *self, id<GeogebraCommonKernelKernelNDGeoPointND> P, id<GeogebraCommonKernelKernelNDGeoPointND> Q) {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPath] == nil || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Q)) getPath] != nil || ![((GeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [GeogebraCommonKernelGeosGeoElement class])) isParentOfWithGeogebraCommonKernelKernelNDGeoElementND:Q]) {
    return NO;
  }
  return YES;
}

IOSObjectArray *GeogebraCommonKernelAlgosAlgoDispatcher_TranslateWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoVec3D_(GeogebraCommonKernelAlgosAlgoDispatcher *self, NSString *label, GeogebraCommonKernelGeosGeoElement *geoTrans, GeogebraCommonKernelGeosGeoVec3D *v) {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonKernelTransformTranslate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoVec3D_(self->cons_, v) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:geoTrans withNSString:label];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoDispatcher)
