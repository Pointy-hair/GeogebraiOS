//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawIntegralFunctions.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianStatic.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/draw/DrawIntegralFunctions.h"
#include "geogebra/common/euclidian/plot/CurvePlotter.h"
#include "geogebra/common/euclidian/plot/GeneralPathClippedForCurvePlotter.h"
#include "geogebra/common/kernel/AlgoCasCellInterface.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntegralFunctions.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "java/lang/Math.h"

@interface GeogebraCommonEuclidianDrawDrawIntegralFunctions () {
 @public
  GeogebraCommonKernelGeosGeoNumeric *n_;
  GeogebraCommonKernelGeosGeoFunction *f_, *g_;
  id<GeogebraCommonKernelArithmeticNumberValue> a_, b_;
  GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *gp_;
  jboolean isVisible_, labelVisible_;
  jboolean isCasObject_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (void)initFromCasObject OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawIntegralFunctions, n_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawIntegralFunctions, f_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawIntegralFunctions, g_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawIntegralFunctions, a_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawIntegralFunctions, b_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawIntegralFunctions, gp_, GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawIntegralFunctions_init__(GeogebraCommonEuclidianDrawDrawIntegralFunctions *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawIntegralFunctions_initFromCasObject(GeogebraCommonEuclidianDrawDrawIntegralFunctions *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawIntegralFunctions_update(GeogebraCommonEuclidianDrawDrawIntegralFunctions *self);

@implementation GeogebraCommonEuclidianDrawDrawIntegralFunctions

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                      withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n
                                                 withBoolean:(jboolean)casObject {
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(self, view, n, casObject);
  return self;
}

- (void)init__ {
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_init__(self);
}

- (void)initFromCasObject {
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_initFromCasObject(self);
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_update(self);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(n_)) getSelColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:gp_];
    }
    [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:gp_ withBoolean:YES];
    if ([((id<GeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) getLineWidth] > 0) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(n_)) getObjectColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
      [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:gp_];
    }
    if (labelVisible_) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontConic]];
      [g2 setPaintWithGeogebraCommonAwtGPaint:[geo_ getLabelColor]];
      [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return gp_ != nil && ([gp_ containsWithInt:x withInt:y] || [gp_ intersectsWithInt:x withInt:y withInt:hitThreshold]);
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return gp_ != nil && [gp_ intersectsWithGeogebraCommonAwtGRectangle2D:rect];
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return NO;
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return [((GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) getBounds];
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (void)dealloc {
  RELEASE_(n_);
  RELEASE_(f_);
  RELEASE_(g_);
  RELEASE_(a_);
  RELEASE_(b_);
  RELEASE_(gp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoNumeric:withBoolean:", "DrawIntegralFunctions", NULL, 0x1, NULL, NULL },
    { "init__", "init", "V", 0x2, NULL, NULL },
    { "initFromCasObject", NULL, "V", 0x2, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "a_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "b_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lgeogebra.common.euclidian.plot.GeneralPathClippedForCurvePlotter;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isCasObject_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawIntegralFunctions = { 2, "DrawIntegralFunctions", "geogebra.common.euclidian.draw", NULL, 0x1, 11, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawIntegralFunctions;
}

@end

void GeogebraCommonEuclidianDrawDrawIntegralFunctions_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(GeogebraCommonEuclidianDrawDrawIntegralFunctions *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoNumeric *n, jboolean casObject) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_set_n_(self, n);
  GeogebraCommonEuclidianDrawable_set_geo_(self, n);
  self->isCasObject_ = casObject;
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(n)) setDrawableWithBoolean:YES];
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_init__(self);
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_update(self);
}

GeogebraCommonEuclidianDrawDrawIntegralFunctions *new_GeogebraCommonEuclidianDrawDrawIntegralFunctions_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoNumeric *n, jboolean casObject) {
  GeogebraCommonEuclidianDrawDrawIntegralFunctions *self = [GeogebraCommonEuclidianDrawDrawIntegralFunctions alloc];
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(self, view, n, casObject);
  return self;
}

void GeogebraCommonEuclidianDrawDrawIntegralFunctions_init__(GeogebraCommonEuclidianDrawDrawIntegralFunctions *self) {
  if (self->isCasObject_) {
    GeogebraCommonEuclidianDrawDrawIntegralFunctions_initFromCasObject(self);
    return;
  }
  GeogebraCommonKernelAlgosAlgoIntegralFunctions *algo = (GeogebraCommonKernelAlgosAlgoIntegralFunctions *) check_class_cast([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDrawAlgorithm], [GeogebraCommonKernelAlgosAlgoIntegralFunctions class]);
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_set_f_(self, [((GeogebraCommonKernelAlgosAlgoIntegralFunctions *) nil_chk(algo)) getF]);
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_set_g_(self, [algo getG]);
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_set_a_(self, [algo getA]);
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_set_b_(self, [algo getB]);
}

void GeogebraCommonEuclidianDrawDrawIntegralFunctions_initFromCasObject(GeogebraCommonEuclidianDrawDrawIntegralFunctions *self) {
  id<GeogebraCommonKernelAlgoCasCellInterface> algo = (id<GeogebraCommonKernelAlgoCasCellInterface>) check_protocol_cast([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDrawAlgorithm], @protocol(GeogebraCommonKernelAlgoCasCellInterface));
  GeogebraCommonKernelGeosGeoCasCell *cell = [((id<GeogebraCommonKernelAlgoCasCellInterface>) nil_chk(algo)) getCasCell];
  GeogebraCommonKernelArithmeticCommand *cmd = [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk([((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(cell)) getInputVE])) getTopLevelCommand];
  GeogebraCommonKernelKernel *kernel = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(cmd)) getKernel];
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_setAndConsume_f_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunction_([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction], [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:0])) wrap])) replaceCasCommands]) autorelease]));
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunction_([kernel getConstruction], [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:1])) wrap])) replaceCasCommands]) autorelease]));
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_setAndConsume_a_(self, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_([cmd getKernel], [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:2])) wrap])) replaceCasCommands])) evaluateDouble]));
  GeogebraCommonEuclidianDrawDrawIntegralFunctions_setAndConsume_b_(self, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_([cmd getKernel], [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:3])) wrap])) replaceCasCommands])) evaluateDouble]));
}

void GeogebraCommonEuclidianDrawDrawIntegralFunctions_update(GeogebraCommonEuclidianDrawDrawIntegralFunctions *self) {
  self->isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  self->labelVisible_ = [self->geo_ isLabelVisible];
  [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:self->n_];
  if ([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) isAlgoMacroOutput] || self->isCasObject_) GeogebraCommonEuclidianDrawDrawIntegralFunctions_init__(self);
  jdouble aRW = JavaLangMath_minWithDouble_withDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->a_)) getDouble], [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->b_)) getDouble]);
  jdouble bRW = JavaLangMath_maxWithDouble_withDouble_([self->a_ getDouble], [self->b_ getDouble]);
  aRW = JavaLangMath_maxWithDouble_withDouble_(aRW, [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getXmin] - GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  if (aRW > [self->view_ getXmax] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE) return;
  bRW = JavaLangMath_minWithDouble_withDouble_(bRW, [self->view_ getXmax] + GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE);
  if (bRW < [self->view_ getXmin] - GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE) return;
  jdouble ax = [self->view_ toClippedScreenCoordXWithDouble:aRW];
  jdouble ay = [self->view_ toClippedScreenCoordYWithDouble:[((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) evaluateWithDouble:aRW]];
  if (self->gp_ == nil) GeogebraCommonEuclidianDrawDrawIntegralFunctions_setAndConsume_gp_(self, new_GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self->view_));
  [((GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(self->gp_)) reset];
  [self->gp_ moveToWithDouble:ax withDouble:ay];
  GeogebraCommonEuclidianPlotCurvePlotter_plotCurveWithGeogebraCommonKernelKernelNDCurveEvaluable_withDouble_withDouble_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonEuclidianPlotPathPlotter_withBoolean_withGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_(self->f_, aRW, bRW, self->view_, self->gp_, NO, GeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_LINE_TO());
  GeogebraCommonEuclidianPlotCurvePlotter_plotCurveWithGeogebraCommonKernelKernelNDCurveEvaluable_withDouble_withDouble_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonEuclidianPlotPathPlotter_withBoolean_withGeogebraCommonEuclidianPlotCurvePlotter_GapEnum_(self->g_, bRW, aRW, self->view_, self->gp_, NO, GeogebraCommonEuclidianPlotCurvePlotter_GapEnum_get_LINE_TO());
  [self->gp_ closePath];
  if (![self->gp_ intersectsWithInt:0 withInt:0 withInt:[self->view_ getWidth] withInt:[self->view_ getHeight]]) {
    self->isVisible_ = NO;
  }
  if (self->labelVisible_) {
    jint bx = [self->view_ toClippedScreenCoordXWithDouble:bRW];
    self->xLabel_ = (jint) JavaLangMath_roundWithDouble_((ax + bx) / 2);
    aRW = [self->view_ toRealWorldCoordXWithDouble:self->xLabel_];
    jdouble y = ([self->f_ evaluateWithDouble:aRW] + [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) evaluateWithDouble:aRW]) / 2;
    self->yLabel_ = [self->view_ toClippedScreenCoordYWithDouble:y];
    GeogebraCommonEuclidianDrawable_set_labelDesc_(self, [self->geo_ getLabelDescription]);
    [self addLabelOffset];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawIntegralFunctions)
