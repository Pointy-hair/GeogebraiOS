//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/ChangeableCoordParent.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/ChangeableCoordParent.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelGeosChangeableCoordParent () {
 @public
  GeogebraCommonKernelGeosGeoNumeric *changeableCoordNumber_;
  GeogebraCommonKernelGeosGeoElement *changeableCoordDirector_;
  jdouble startValue_;
  GeogebraCommonKernelMatrixCoords *direction_;
  GeogebraCommonKernelGeosGeoElement *child_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosChangeableCoordParent, changeableCoordNumber_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosChangeableCoordParent, changeableCoordDirector_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosChangeableCoordParent, direction_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosChangeableCoordParent, child_, GeogebraCommonKernelGeosGeoElement *)

__attribute__((unused)) static GeogebraCommonKernelGeosGeoNumeric *GeogebraCommonKernelGeosChangeableCoordParent_getNumber(GeogebraCommonKernelGeosChangeableCoordParent *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelGeosChangeableCoordParent_getValue(GeogebraCommonKernelGeosChangeableCoordParent *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelGeosChangeableCoordParent_getStartValue(GeogebraCommonKernelGeosChangeableCoordParent *self);

@implementation GeogebraCommonKernelGeosChangeableCoordParent

- (instancetype)initWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)child
                    withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)number
                    withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)director {
  GeogebraCommonKernelGeosChangeableCoordParent_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoElement_(self, child, number, director);
  return self;
}

- (GeogebraCommonKernelGeosGeoNumeric *)getNumber {
  return GeogebraCommonKernelGeosChangeableCoordParent_getNumber(self);
}

- (jdouble)getValue {
  return GeogebraCommonKernelGeosChangeableCoordParent_getValue(self);
}

- (GeogebraCommonKernelGeosGeoElement *)getDirector {
  return changeableCoordDirector_;
}

- (void)record {
  startValue_ = GeogebraCommonKernelGeosChangeableCoordParent_getValue(self);
  GeogebraCommonKernelGeosChangeableCoordParent_set_direction_(self, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(changeableCoordDirector_)) getMainDirection]);
}

- (jdouble)getStartValue {
  return GeogebraCommonKernelGeosChangeableCoordParent_getStartValue(self);
}

- (jboolean)moveWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)rwTransVec
                withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)endPosition
                withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)viewDirection
                               withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                               withJavaUtilArrayList:(JavaUtilArrayList *)tempMoveObjectList
            withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view {
  GeogebraCommonKernelGeosGeoNumeric *var = GeogebraCommonKernelGeosChangeableCoordParent_getNumber(self);
  if (var == nil) return NO;
  if (endPosition == nil) {
    [var setValueWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(var)) getValue] + [((GeogebraCommonKernelMatrixCoords *) nil_chk(rwTransVec)) getX] + [rwTransVec getY] + [rwTransVec getZ]];
    GeogebraCommonKernelGeosGeoElement_addChangeableCoordParentNumberToUpdateListWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(var, updateGeos, tempMoveObjectList);
    return YES;
  }
  GeogebraCommonKernelMatrixCoords *direction2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(direction_)) subWithGeogebraCommonKernelMatrixCoords:[viewDirection mulWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(viewDirection)) dotproductWithGeogebraCommonKernelMatrixCoords:direction_]]];
  jdouble ld = [((GeogebraCommonKernelMatrixCoords *) nil_chk(direction2)) dotproductWithGeogebraCommonKernelMatrixCoords:direction2];
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(ld)) return NO;
  jdouble val = GeogebraCommonKernelGeosChangeableCoordParent_getStartValue(self) + [direction2 dotproductWithGeogebraCommonKernelMatrixCoords:rwTransVec] / ld;
  {
    jdouble g;
    jdouble valRound;
    switch ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getPointCapturingMode]) {
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_STICKY_POINTS:
      break;
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_AUTOMATIC:
      if (![view isGridOrAxesShown]) {
        break;
      }
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON:
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID:
      g = [view getGridDistancesWithInt:0];
      valRound = GeogebraCommonKernelKernel_roundToScaleWithDouble_withDouble_(val, g);
      if ([view getPointCapturingMode] == GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID || (JavaLangMath_absWithDouble_(valRound - val) < g * [((GeogebraCommonEuclidianEuclidianController *) nil_chk([view getEuclidianController])) getPointCapturingPercentage])) {
        val = valRound;
      }
      break;
    }
  }
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(var)) setValueWithDouble:val];
  GeogebraCommonKernelGeosGeoElement_addChangeableCoordParentNumberToUpdateListWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_(var, updateGeos, tempMoveObjectList);
  return YES;
}

- (void)dealloc {
  RELEASE_(changeableCoordNumber_);
  RELEASE_(changeableCoordDirector_);
  RELEASE_(direction_);
  RELEASE_(child_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoElement:", "ChangeableCoordParent", NULL, 0x1, NULL, NULL },
    { "getNumber", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x11, NULL, NULL },
    { "getValue", NULL, "D", 0x11, NULL, NULL },
    { "getDirector", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "record", NULL, "V", 0x11, NULL, NULL },
    { "getStartValue", NULL, "D", 0x11, NULL, NULL },
    { "moveWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withJavaUtilArrayList:withJavaUtilArrayList:withGeogebraCommonEuclidianEuclidianView:", "move", "Z", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "changeableCoordNumber_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "changeableCoordDirector_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "startValue_", NULL, 0x2, "D", NULL, NULL,  },
    { "direction_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "child_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosChangeableCoordParent = { 2, "ChangeableCoordParent", "geogebra.common.kernel.geos", NULL, 0x1, 7, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosChangeableCoordParent;
}

@end

void GeogebraCommonKernelGeosChangeableCoordParent_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosChangeableCoordParent *self, GeogebraCommonKernelGeosGeoElement *child, GeogebraCommonKernelGeosGeoNumeric *number, GeogebraCommonKernelGeosGeoElement *director) {
  NSObject_init(self);
  GeogebraCommonKernelGeosChangeableCoordParent_set_changeableCoordNumber_(self, nil);
  GeogebraCommonKernelGeosChangeableCoordParent_set_changeableCoordDirector_(self, nil);
  GeogebraCommonKernelGeosChangeableCoordParent_set_child_(self, child);
  GeogebraCommonKernelGeosChangeableCoordParent_set_changeableCoordNumber_(self, number);
  GeogebraCommonKernelGeosChangeableCoordParent_set_changeableCoordDirector_(self, director);
}

GeogebraCommonKernelGeosChangeableCoordParent *new_GeogebraCommonKernelGeosChangeableCoordParent_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *child, GeogebraCommonKernelGeosGeoNumeric *number, GeogebraCommonKernelGeosGeoElement *director) {
  GeogebraCommonKernelGeosChangeableCoordParent *self = [GeogebraCommonKernelGeosChangeableCoordParent alloc];
  GeogebraCommonKernelGeosChangeableCoordParent_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoElement_(self, child, number, director);
  return self;
}

GeogebraCommonKernelGeosGeoNumeric *GeogebraCommonKernelGeosChangeableCoordParent_getNumber(GeogebraCommonKernelGeosChangeableCoordParent *self) {
  return self->changeableCoordNumber_;
}

jdouble GeogebraCommonKernelGeosChangeableCoordParent_getValue(GeogebraCommonKernelGeosChangeableCoordParent *self) {
  return [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->changeableCoordNumber_)) getValue];
}

jdouble GeogebraCommonKernelGeosChangeableCoordParent_getStartValue(GeogebraCommonKernelGeosChangeableCoordParent *self) {
  return self->startValue_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosChangeableCoordParent)
