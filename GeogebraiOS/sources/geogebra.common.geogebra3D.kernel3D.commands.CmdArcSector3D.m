//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/CmdArcSector3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoConicPartConicParameters3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoConicPartConicPoints3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdArcSector3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/commands/CmdArcSector.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation GeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                           withInt:(jint)type {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D_initWithGeogebraCommonKernelKernel_withInt_(self, kernel, type);
  return self;
}

- (GeogebraCommonKernelGeosGeoElement *)arcSectorWithNSString:(NSString *)label
                   withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic
                   withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)start
                   withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)end {
  if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartConicParameters3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartConicParameters3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withInt_(cons_, label, conic, start, end, type_) autorelease];
    return [algo getConicPart];
  }
  return [super arcSectorWithNSString:label withGeogebraCommonKernelKernelNDGeoConicND:conic withGeogebraCommonKernelGeosGeoNumberValue:start withGeogebraCommonKernelGeosGeoNumberValue:end];
}

- (GeogebraCommonKernelGeosGeoElement *)arcSectorWithNSString:(NSString *)label
                   withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic
                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)start
                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)end {
  if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(start)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(end)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartConicPoints3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartConicPoints3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons_, label, conic, start, end, type_) autorelease];
    return [algo getConicPart];
  }
  return [super arcSectorWithNSString:label withGeogebraCommonKernelKernelNDGeoConicND:conic withGeogebraCommonKernelKernelNDGeoPointND:start withGeogebraCommonKernelKernelNDGeoPointND:end];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withInt:", "CmdArcSector3D", NULL, 0x1, NULL, NULL },
    { "arcSectorWithNSString:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelGeosGeoNumberValue:", "arcSector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "arcSectorWithNSString:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "arcSector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D = { 2, "CmdArcSector3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D_initWithGeogebraCommonKernelKernel_withInt_(GeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D *self, GeogebraCommonKernelKernel *kernel, jint type) {
  GeogebraCommonKernelCommandsCmdArcSector_initWithGeogebraCommonKernelKernel_withInt_(self, kernel, type);
}

GeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D *new_GeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D_initWithGeogebraCommonKernelKernel_withInt_(GeogebraCommonKernelKernel *kernel, jint type) {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D_initWithGeogebraCommonKernelKernel_withInt_(self, kernel, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D)
