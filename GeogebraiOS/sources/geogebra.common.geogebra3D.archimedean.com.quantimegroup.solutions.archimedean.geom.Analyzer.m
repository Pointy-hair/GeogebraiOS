//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/Analyzer.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/Analyzer.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiBuilder.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiCorner.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiFacet.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/GeometryUtils.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/Axes.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/IntList.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/Rotater.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"

@interface GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer () {
 @public
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *cornerTabulation_, *sideTabulation_;
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *cornerAxes_, *sideAxes_, *edgeAxes_;
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *savePolySides_;
  jint numAxesOfSymmetry_;
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *oldSideList_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer, cornerTabulation_, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer, sideTabulation_, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer, cornerAxes_, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer, sideAxes_, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer, edgeAxes_, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer, savePolySides_, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer, oldSideList_, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)

@implementation GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer

- (instancetype)init {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_init(self);
  return self;
}

+ (jboolean)isAxisOfSymmetryWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p
                                                                                                                  withInt:(jint)fold
                              withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)b {
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_isAxisOfSymmetryWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(p, fold, b);
}

+ (IOSObjectArray *)getSideDataWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)b {
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getSideDataWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(b);
}

+ (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)getCornerDataWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)b {
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getCornerDataWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(b);
}

+ (IOSIntArray *)getSideSignatureWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s
                               withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)b {
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getSideSignatureWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(s, b);
}

+ (jboolean)patWithIntArray:(IOSIntArray *)sign
                    withInt:(jint)patLen {
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_patWithIntArray_withInt_(sign, patLen);
}

+ (jint)getPatternWithIntArray:(IOSIntArray *)sign {
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getPatternWithIntArray_(sign);
}

- (void)findRotationalAxesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)b {
  numAxesOfSymmetry_ = 0;
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_setAndConsume_cornerAxes_(self, new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(b)) getCornerCount]));
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_setAndConsume_sideAxes_(self, new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_([b getSideCount]));
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_setAndConsume_edgeAxes_(self, new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_([b numEdges]));
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *cornerUnits = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_([b getCornerCount]) autorelease];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *sideUnits = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_([b getSideCount]) autorelease];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *edgeUnits = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_([b numEdges]) autorelease];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *badUnits = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_withInt_(0, 10) autorelease];
  for (jint i = 0; i < [b getCornerCount]; ++i) {
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [b getCornerWithInt:i];
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getHubPoint];
    if (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p)) unit], badUnits) != -1) continue;
    jint foundCorner = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([p unit])) negative], cornerUnits);
    if (foundCorner != -1) {
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_set_point2_(nil_chk(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getAxisWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(cornerAxes_, foundCorner)), p);
      continue;
    }
    jint foundSide = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([p unit])) negative], sideUnits);
    if (foundSide != -1) {
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *foundAxis = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getAxisWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(sideAxes_, foundSide);
      [cornerAxes_ addWithId:[new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_(p, ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *) nil_chk(foundAxis))->point1_, foundAxis->fold_) autorelease]];
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_set_point2_(foundAxis, p);
      [cornerUnits addWithId:[p unit]];
      continue;
    }
    jint foundEdge = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([p unit])) negative], edgeUnits);
    if (foundEdge != -1) {
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *foundAxis = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getAxisWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(edgeAxes_, foundEdge);
      [cornerAxes_ addWithId:[new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_(p, ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *) nil_chk(foundAxis))->point1_, foundAxis->fold_) autorelease]];
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_set_point2_(foundAxis, p);
      [cornerUnits addWithId:[p unit]];
      continue;
    }
    for (jint fold = ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSpokes]))->num_; fold >= 2; --fold) {
      if (((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSpokes]))->num_ % fold != 0) continue;
      if (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_isAxisOfSymmetryWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(p, fold, b)) {
        [cornerAxes_ addWithId:[new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_(p, nil, fold) autorelease]];
        [cornerUnits addWithId:[p unit]];
        numAxesOfSymmetry_++;
        break;
      }
      else {
        [badUnits addWithId:[p unit]];
      }
    }
  }
  for (jint i = 0; i < [b getSideCount]; ++i) {
    jdouble epsilon = 1e-2;
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [b getSideWithInt:i];
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) getIncenter];
    if ([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p)) length] < epsilon) {
      continue;
    }
    if (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_([p unit], badUnits) != -1) continue;
    jint foundSide = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([p unit])) negative], sideUnits);
    if (foundSide != -1) {
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_set_point2_(nil_chk(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getAxisWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(sideAxes_, foundSide)), p);
      continue;
    }
    jint foundCorner = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([p unit])) negative], cornerUnits);
    if (foundCorner != -1) {
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *foundAxis = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getAxisWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(cornerAxes_, foundCorner);
      [sideAxes_ addWithId:[new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_(p, ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *) nil_chk(foundAxis))->point1_, foundAxis->fold_) autorelease]];
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_set_point2_(foundAxis, p);
      [sideUnits addWithId:[p unit]];
      continue;
    }
    jint foundEdge = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([p unit])) negative], edgeUnits);
    if (foundEdge != -1) {
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *foundAxis = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getAxisWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(edgeAxes_, foundEdge);
      [sideAxes_ addWithId:[new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_(p, ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *) nil_chk(foundAxis))->point1_, foundAxis->fold_) autorelease]];
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_set_point2_(foundAxis, p);
      [sideUnits addWithId:[p unit]];
      continue;
    }
    for (jint fold = [s getVertexCount]; fold >= 2; --fold) {
      if ([s getVertexCount] % fold != 0) continue;
      if (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_isAxisOfSymmetryWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(p, fold, b)) {
        [sideAxes_ addWithId:[new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_(p, nil, fold) autorelease]];
        [sideUnits addWithId:[p unit]];
        numAxesOfSymmetry_++;
        break;
      }
      else {
        [badUnits addWithId:[p unit]];
      }
    }
  }
  for (jint i = 0; i < [b getCornerCount]; ++i) {
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [b getCornerWithInt:i];
    for (jint j = 0; j < ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getSpokes]))->num_; ++j) {
      if ([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([c getSpokes])) getWithInt:j] < [c getHub]) continue;
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([c getHubPoint])) midWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[c getSpokeWithInt:j]];
      if (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(p)) unit], badUnits) != -1) continue;
      jint foundEdge = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([p unit])) negative], edgeUnits);
      if (foundEdge != -1) {
        GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_set_point2_(nil_chk(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getAxisWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(edgeAxes_, foundEdge)), p);
        continue;
      }
      jint foundCorner = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([p unit])) negative], cornerUnits);
      if (foundCorner != -1) {
        GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *foundAxis = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getAxisWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(cornerAxes_, foundCorner);
        [edgeAxes_ addWithId:[new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_(p, ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *) nil_chk(foundAxis))->point1_, foundAxis->fold_) autorelease]];
        GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_set_point2_(foundAxis, p);
        [edgeUnits addWithId:[p unit]];
        continue;
      }
      jint foundSide = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([p unit])) negative], sideUnits);
      if (foundSide != -1) {
        GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *foundAxis = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getAxisWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(sideAxes_, foundSide);
        [edgeAxes_ addWithId:[new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_(p, ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *) nil_chk(foundAxis))->point1_, foundAxis->fold_) autorelease]];
        GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_set_point2_(foundAxis, p);
        [edgeUnits addWithId:[p unit]];
        continue;
      }
      if (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_isAxisOfSymmetryWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(p, 2, b)) {
        [edgeAxes_ addWithId:[new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_(p, nil, 2) autorelease]];
        [edgeUnits addWithId:[p unit]];
        numAxesOfSymmetry_++;
      }
      else {
        [badUnits addWithId:[p unit]];
      }
    }
  }
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_setAndConsume_cornerTabulation_(self, new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(100));
  [self tabulateAxesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:cornerAxes_ withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:cornerTabulation_];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_setAndConsume_sideTabulation_(self, new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(100));
  [self tabulateAxesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:sideAxes_ withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:sideTabulation_];
}

- (void)tabulateAxesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)theAxes
                    withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)theTabs {
  IOSIntArray *tab = [IOSIntArray arrayWithLength:100];
  jint maxFold = 0;
  for (jint i = 0; i < ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(theAxes))->num_; ++i) {
    jint fold = ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *) nil_chk(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getAxisWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(theAxes, i)))->fold_;
    (*IOSIntArray_GetRef(tab, fold))++;
    if (fold > maxFold) maxFold = fold;
  }
  for (jint i = 0; i < maxFold + 1; ++i) {
    if (IOSIntArray_Get(tab, i) > 0) {
      IOSIntArray *item = [IOSIntArray arrayWithInts:(jint[]){ i, IOSIntArray_Get(tab, i) } count:2];
      [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(theTabs)) addWithId:item];
    }
  }
}

- (jdouble)getSurfaceAreaWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)b {
  jdouble surfaceArea = 0;
  for (jint i = 0; i < [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(b)) getSideCount]; ++i) {
    surfaceArea += [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk([b getSideWithInt:i])) getArea];
  }
  return surfaceArea;
}

- (jdouble)getPyramidVolumeWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s
                       withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)tip {
  IOSObjectArray *p = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomGeometryUtils_threeDistinctPointsWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomIFacet_(s);
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_pointPlaneDistanceWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(tip, IOSObjectArray_Get(nil_chk(p), 0), IOSObjectArray_Get(p, 1), IOSObjectArray_Get(p, 2)) * [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) getArea] / 3;
}

- (jdouble)getVolumeWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)b {
  jdouble volume = 0;
  for (jint i = 0; i < [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(b)) getSideCount]; ++i) {
    volume += [self getPyramidVolumeWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:[b getSideWithInt:i] withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_origin()];
  }
  return volume;
}

- (jdouble)getSurfaceVolumeQuotientWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)b {
  jdouble r = JavaLangMath_sqrtWithDouble_([self getSurfaceAreaWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:b] / (4 * JavaLangMath_PI));
  jdouble surfaceVolumeQuotient = ([self getSurfaceAreaWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:b] * r) / ([self getVolumeWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:b] * 3);
  return surfaceVolumeQuotient;
}

- (void)showAllCorners {
}

- (void)showCorners {
}

- (void)showSides {
}

- (void)analyzer_ListSelect {
}

- (jint)getFoldWithNSString:(NSString *)s {
  jint dashi = [((NSString *) nil_chk(s)) indexOf:'-'];
  jint tens = 1;
  jchar c;
  jint fold = 0;
  while (--dashi >= 0) {
    c = [s charAtWithInt:dashi];
    if (JavaLangCharacter_isDigitWithChar_(c)) {
      fold += tens * (c - '0');
      tens *= 10;
    }
    else break;
  }
  return fold;
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)makeSideListWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)sides
                                                                                                                                                                                           withInt:(jint)numPoints
                                                                                                                                                                                       withBoolean:(jboolean)regular {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *newSides = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(sides))->num_) autorelease];
  for (jint i = 0; i < sides->num_; ++i) {
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [sides getWithInt:i];
    if ([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) isREGULAR] == regular && [s getVertexCount] == numPoints) {
      [newSides addWithId:[((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(savePolySides_)) getWithInt:[((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(oldSideList_)) getWithInt:i]]];
    }
  }
  return newSides;
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)makeCornerListWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)builder
                                                                                                        withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)corners
                                                                                                                                                                                           withInt:(jint)numSpokes {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *newCorners = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(corners))->num_) autorelease];
  for (jint i = 0; i < corners->num_; ++i) {
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [corners getWithInt:i];
    if (((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getSpokes]))->num_ == numSpokes) {
      jint found = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_([c getHubPoint], [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(builder)) getPoints]);
      if (found == -1) [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"makeCornerList"];
      else [newCorners addWithInt:found];
    }
  }
  return newCorners;
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)makeCornerList {
  return nil;
}

+ (NSString *)polygonNameWithInt:(jint)i
                     withBoolean:(jboolean)regular {
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_polygonNameWithInt_withBoolean_(i, regular);
}

+ (jdouble)getCircumscribedRadiusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)b {
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getCircumscribedRadiusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(b);
}

+ (jdouble)getInscribedRadiusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)b {
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getInscribedRadiusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(b);
}

+ (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *)getAxisWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)l
                                                                                                                                                                                   withInt:(jint)i {
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getAxisWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(l, i);
}

- (void)init__ {
}

- (void)dealloc {
  RELEASE_(cornerTabulation_);
  RELEASE_(sideTabulation_);
  RELEASE_(cornerAxes_);
  RELEASE_(sideAxes_);
  RELEASE_(edgeAxes_);
  RELEASE_(savePolySides_);
  RELEASE_(oldSideList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Analyzer", NULL, 0x1, NULL, NULL },
    { "isAxisOfSymmetryWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withInt:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "isAxisOfSymmetry", "Z", 0x8, NULL, NULL },
    { "getSideDataWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "getSideData", "[Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", 0x8, NULL, NULL },
    { "getCornerDataWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "getCornerData", "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", 0x8, NULL, NULL },
    { "getSideSignatureWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "getSideSignature", "[I", 0x8, NULL, NULL },
    { "patWithIntArray:withInt:", "pat", "Z", 0x8, NULL, NULL },
    { "getPatternWithIntArray:", "getPattern", "I", 0x8, NULL, NULL },
    { "findRotationalAxesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "findRotationalAxes", "V", 0x0, NULL, NULL },
    { "tabulateAxesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:", "tabulateAxes", "V", 0x0, NULL, NULL },
    { "getSurfaceAreaWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "getSurfaceArea", "D", 0x0, NULL, NULL },
    { "getPyramidVolumeWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "getPyramidVolume", "D", 0x0, NULL, NULL },
    { "getVolumeWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "getVolume", "D", 0x0, NULL, NULL },
    { "getSurfaceVolumeQuotientWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "getSurfaceVolumeQuotient", "D", 0x0, NULL, NULL },
    { "showAllCorners", NULL, "V", 0x0, NULL, NULL },
    { "showCorners", NULL, "V", 0x0, NULL, NULL },
    { "showSides", NULL, "V", 0x0, NULL, NULL },
    { "analyzer_ListSelect", NULL, "V", 0x0, NULL, NULL },
    { "getFoldWithNSString:", "getFold", "I", 0x0, NULL, NULL },
    { "makeSideListWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withInt:withBoolean:", "makeSideList", "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", 0x0, NULL, NULL },
    { "makeCornerListWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withInt:", "makeCornerList", "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", 0x0, NULL, NULL },
    { "makeCornerList", NULL, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", 0x0, NULL, NULL },
    { "polygonNameWithInt:withBoolean:", "polygonName", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "getCircumscribedRadiusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "getCircumscribedRadius", "D", 0x8, NULL, NULL },
    { "getInscribedRadiusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "getInscribedRadius", "D", 0x8, NULL, NULL },
    { "getAxisWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withInt:", "getAxis", "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.AxisData;", 0x8, NULL, NULL },
    { "init__", "init", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cornerTabulation_", NULL, 0x2, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<L[I;>;",  },
    { "sideTabulation_", NULL, 0x2, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<L[I;>;",  },
    { "cornerAxes_", NULL, 0x2, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/AxisData;>;",  },
    { "sideAxes_", NULL, 0x2, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/AxisData;>;",  },
    { "edgeAxes_", NULL, 0x2, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/AxisData;>;",  },
    { "savePolySides_", NULL, 0x2, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiFacet;>;",  },
    { "numAxesOfSymmetry_", NULL, 0x2, "I", NULL, NULL,  },
    { "oldSideList_", NULL, 0x2, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer = { 2, "Analyzer", "geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", NULL, 0x1, 26, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer;
}

@end

void GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_init(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer *self) {
  NSObject_init(self);
  self->numAxesOfSymmetry_ = 0;
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_setAndConsume_oldSideList_(self, new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(0));
}

GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer *new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_init() {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer *self = [GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer alloc];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_init(self);
  return self;
}

jboolean GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_isAxisOfSymmetryWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p, jint fold, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *b) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_initialize();
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *points = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(b)) getPointCount]) autorelease];
  for (jint i = 0; i < [b getPointCount]; ++i) {
    [points addWithId:[new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_([b getPointWithInt:i]) autorelease]];
  }
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsRotater *r = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsRotater_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withDouble_(p, JavaLangMath_PI * 2 / fold) autorelease];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsAxes *a = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsAxes_init() autorelease];
  [a timesEqualsWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsQuick3X3Matrix:r];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *copiedPoints = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk([b getPoints])) copy__];
  for (jint i = 0; i < points->num_; ++i) {
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *pi = [points getWithInt:i];
    [a transformPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:pi];
    jint found = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_findApproxPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_(pi, copiedPoints);
    if (found == -1) return NO;
    else [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(copiedPoints)) removeIndexWithInt:found];
  }
  return ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(copiedPoints))->num_ == 0;
}

IOSObjectArray *GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getSideDataWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *b) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_initialize();
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *irregularSides = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_withInt_(0, 10) autorelease];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *regularSides = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_withInt_(0, 10) autorelease];
  for (jint i = 0; i < [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(b)) getSideCount]; ++i) {
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [b getSideWithInt:i];
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *curTable = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) isREGULAR] ? regularSides : irregularSides;
    jint n = [s getVertexCount];
    if (n >= [curTable length]) {
      [curTable setSizeWithInt:n + 1];
      curTable->num_ = n + 1;
    }
    [curTable setWithInt:n withInt:[curTable getWithInt:n] + 1];
  }
  IOSObjectArray *table = [IOSObjectArray arrayWithObjects:(id[]){ regularSides, irregularSides } count:2 type:GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_class_()];
  return table;
}

GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getCornerDataWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *b) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_initialize();
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *table = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_withInt_(0, 10) autorelease];
  for (jint i = 0; i < [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(b)) getCornerCount]; ++i) {
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [b getCornerWithInt:i];
    jint n = ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) getSpokes]))->num_;
    if (n >= [table length]) {
      [table setSizeWithInt:n + 1];
      table->num_ = n + 1;
    }
    [table setWithInt:n withInt:[table getWithInt:n] + 1];
  }
  return table;
}

IOSIntArray *GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getSideSignatureWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *b) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_initialize();
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *adjacentSides = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s)) getVertexCount]) autorelease];
  for (jint i = 0; i < [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(b)) getSideCount]; ++i) {
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *si = [b getSideWithInt:i];
    if (si == s) continue;
    if ([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(si)) isAdjacentWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s]) [adjacentSides addWithId:si];
  }
  IOSIntArray *sign = [IOSIntArray arrayWithLength:[s getVertexCount]];
  jint index = 0;
  while (adjacentSides->num_ > 0) {
    for (jint i = 0; i < adjacentSides->num_; ++i) {
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *si = [adjacentSides getWithInt:i];
      if ([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(si)) findIndexWithInt:[s getIndexWithInt:index]] != -1 && [si findIndexWithInt:[s wrapgetIndexWithInt:index + 1]] != -1) {
        *IOSIntArray_GetRef(sign, index) = [si getVertexCount];
        index++;
        [adjacentSides removeIndexWithInt:i];
        break;
      }
    }
  }
  return sign;
}

jboolean GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_patWithIntArray_withInt_(IOSIntArray *sign, jint patLen) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_initialize();
  for (jint i = 0; i < patLen; ++i) {
    for (jint j = 0; i + (j + 1) * patLen < ((IOSIntArray *) nil_chk(sign))->size_; ++j) {
      if (IOSIntArray_Get(sign, i + j * patLen) != IOSIntArray_Get(sign, i + (j + 1) * patLen)) return NO;
    }
  }
  return YES;
}

jint GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getPatternWithIntArray_(IOSIntArray *sign) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_initialize();
  for (jint i = 1; i <= (((IOSIntArray *) nil_chk(sign))->size_ + 1) / 2; ++i) {
    if (sign->size_ % i == 0 && GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_patWithIntArray_withInt_(sign, i)) return i;
  }
  return -1;
}

NSString *GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_polygonNameWithInt_withBoolean_(jint i, jboolean regular) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_initialize();
  IOSObjectArray *polygonNames = [IOSObjectArray arrayWithObjects:(id[]){ @"", @"", @"", @"Triangle", @"Square", @"Pentagon", @"Hexagon", @"Heptagon", @"Octagon", @"Nonagon", @"Decagon", @"Undecagon", @"Dodecagon" } count:13 type:NSString_class_()];
  if (i == 3) {
    if (regular) return JreStrcat("$$", @"Equilateral ", IOSObjectArray_Get(polygonNames, 3));
    else return IOSObjectArray_Get(polygonNames, 3);
  }
  else if (i == 4) {
    if (regular) return @"Square";
    else return @"Quadrilateral";
  }
  NSString *s = regular ? @"Regular " : @"Irregular ";
  if (i > 12) return JreStrcat("$I$", s, i, @"-gon");
  return JreStrcat("$$", s, IOSObjectArray_Get(polygonNames, i));
}

jdouble GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getCircumscribedRadiusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *b) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_initialize();
  return 100;
}

jdouble GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getInscribedRadiusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *b) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_initialize();
  return 50;
}

GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_getAxisWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *l, jint i) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer_initialize();
  return [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(l)) getWithInt:i];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAnalyzer)

@implementation GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData

- (instancetype)init {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_init(self);
  return self;
}

- (instancetype)initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p1
                    withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p2
                                                                                                          withInt:(jint)f {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_(self, p1, p2, f);
  return self;
}

- (void)dealloc {
  RELEASE_(point1_);
  RELEASE_(point2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AxisData", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withInt:", "AxisData", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "point1_", NULL, 0x0, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", NULL, NULL,  },
    { "point2_", NULL, 0x0, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", NULL, NULL,  },
    { "fold_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData = { 2, "AxisData", "geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", NULL, 0x0, 2, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData;
}

@end

void GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_init(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *self) {
  NSObject_init(self);
}

GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_init() {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *self = [GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData alloc];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_init(self);
  return self;
}

void GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *self, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p1, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p2, jint f) {
  NSObject_init(self);
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_set_point1_(self, p1);
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_set_point2_(self, p2);
  self->fold_ = f;
}

GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p1, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p2, jint f) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData *self = [GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData alloc];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withInt_(self, p1, p2, f);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomAxisData)
