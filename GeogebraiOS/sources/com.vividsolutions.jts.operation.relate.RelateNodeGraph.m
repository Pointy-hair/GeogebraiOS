//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/operation/relate/RelateNodeGraph.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Location.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/EdgeEnd.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersection.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersectionList.h"
#include "com/vividsolutions/jts/geomgraph/GeometryGraph.h"
#include "com/vividsolutions/jts/geomgraph/Label.h"
#include "com/vividsolutions/jts/geomgraph/Node.h"
#include "com/vividsolutions/jts/geomgraph/NodeMap.h"
#include "com/vividsolutions/jts/operation/relate/EdgeEndBuilder.h"
#include "com/vividsolutions/jts/operation/relate/RelateNode.h"
#include "com/vividsolutions/jts/operation/relate/RelateNodeFactory.h"
#include "com/vividsolutions/jts/operation/relate/RelateNodeGraph.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsOperationRelateRelateNodeGraph () {
 @public
  ComVividsolutionsJtsGeomgraphNodeMap *nodes_;
}

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationRelateRelateNodeGraph, nodes_, ComVividsolutionsJtsGeomgraphNodeMap *)

@implementation ComVividsolutionsJtsOperationRelateRelateNodeGraph

- (instancetype)init {
  ComVividsolutionsJtsOperationRelateRelateNodeGraph_init(self);
  return self;
}

- (id<JavaUtilIterator>)getNodeIterator {
  return [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(nodes_)) iterator];
}

- (void)buildWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)geomGraph {
  [self computeIntersectionNodesWithComVividsolutionsJtsGeomgraphGeometryGraph:geomGraph withInt:0];
  [self copyNodesAndLabelsWithComVividsolutionsJtsGeomgraphGeometryGraph:geomGraph withInt:0];
  ComVividsolutionsJtsOperationRelateEdgeEndBuilder *eeBuilder = [new_ComVividsolutionsJtsOperationRelateEdgeEndBuilder_init() autorelease];
  id<JavaUtilList> eeList = [eeBuilder computeEdgeEndsWithJavaUtilIterator:[((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(geomGraph)) getEdgeIterator]];
  [self insertEdgeEndsWithJavaUtilList:eeList];
}

- (void)computeIntersectionNodesWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)geomGraph
                                                                       withInt:(jint)argIndex {
  for (id<JavaUtilIterator> edgeIt = [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(geomGraph)) getEdgeIterator]; [((id<JavaUtilIterator>) nil_chk(edgeIt)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([edgeIt next], [ComVividsolutionsJtsGeomgraphEdge class]);
    jint eLoc = [((ComVividsolutionsJtsGeomgraphLabel *) nil_chk([((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e)) getLabel])) getLocationWithInt:argIndex];
    for (id<JavaUtilIterator> eiIt = [((ComVividsolutionsJtsGeomgraphEdgeIntersectionList *) nil_chk([e getEdgeIntersectionList])) iterator]; [((id<JavaUtilIterator>) nil_chk(eiIt)) hasNext]; ) {
      ComVividsolutionsJtsGeomgraphEdgeIntersection *ei = (ComVividsolutionsJtsGeomgraphEdgeIntersection *) check_class_cast([eiIt next], [ComVividsolutionsJtsGeomgraphEdgeIntersection class]);
      ComVividsolutionsJtsOperationRelateRelateNode *n = (ComVividsolutionsJtsOperationRelateRelateNode *) check_class_cast([((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(nodes_)) addNodeWithComVividsolutionsJtsGeomCoordinate:((ComVividsolutionsJtsGeomgraphEdgeIntersection *) nil_chk(ei))->coord_], [ComVividsolutionsJtsOperationRelateRelateNode class]);
      if (eLoc == ComVividsolutionsJtsGeomLocation_BOUNDARY) [((ComVividsolutionsJtsOperationRelateRelateNode *) nil_chk(n)) setLabelBoundaryWithInt:argIndex];
      else {
        if ([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk([((ComVividsolutionsJtsOperationRelateRelateNode *) nil_chk(n)) getLabel])) isNullWithInt:argIndex]) [n setLabelWithInt:argIndex withInt:ComVividsolutionsJtsGeomLocation_INTERIOR];
      }
    }
  }
}

- (void)copyNodesAndLabelsWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)geomGraph
                                                                 withInt:(jint)argIndex {
  for (id<JavaUtilIterator> nodeIt = [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(geomGraph)) getNodeIterator]; [((id<JavaUtilIterator>) nil_chk(nodeIt)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphNode *graphNode = (ComVividsolutionsJtsGeomgraphNode *) check_class_cast([nodeIt next], [ComVividsolutionsJtsGeomgraphNode class]);
    ComVividsolutionsJtsGeomgraphNode *newNode = [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(nodes_)) addNodeWithComVividsolutionsJtsGeomCoordinate:[((ComVividsolutionsJtsGeomgraphNode *) nil_chk(graphNode)) getCoordinate]];
    [((ComVividsolutionsJtsGeomgraphNode *) nil_chk(newNode)) setLabelWithInt:argIndex withInt:[((ComVividsolutionsJtsGeomgraphLabel *) nil_chk([graphNode getLabel])) getLocationWithInt:argIndex]];
  }
}

- (void)insertEdgeEndsWithJavaUtilList:(id<JavaUtilList>)ee {
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(ee)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdgeEnd *e = (ComVividsolutionsJtsGeomgraphEdgeEnd *) check_class_cast([i next], [ComVividsolutionsJtsGeomgraphEdgeEnd class]);
    [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(nodes_)) addWithComVividsolutionsJtsGeomgraphEdgeEnd:e];
  }
}

- (void)dealloc {
  RELEASE_(nodes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "RelateNodeGraph", NULL, 0x1, NULL, NULL },
    { "getNodeIterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "buildWithComVividsolutionsJtsGeomgraphGeometryGraph:", "build", "V", 0x1, NULL, NULL },
    { "computeIntersectionNodesWithComVividsolutionsJtsGeomgraphGeometryGraph:withInt:", "computeIntersectionNodes", "V", 0x1, NULL, NULL },
    { "copyNodesAndLabelsWithComVividsolutionsJtsGeomgraphGeometryGraph:withInt:", "copyNodesAndLabels", "V", 0x1, NULL, NULL },
    { "insertEdgeEndsWithJavaUtilList:", "insertEdgeEnds", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "nodes_", NULL, 0x2, "Lcom.vividsolutions.jts.geomgraph.NodeMap;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationRelateRelateNodeGraph = { 2, "RelateNodeGraph", "com.vividsolutions.jts.operation.relate", NULL, 0x1, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationRelateRelateNodeGraph;
}

@end

void ComVividsolutionsJtsOperationRelateRelateNodeGraph_init(ComVividsolutionsJtsOperationRelateRelateNodeGraph *self) {
  NSObject_init(self);
  ComVividsolutionsJtsOperationRelateRelateNodeGraph_setAndConsume_nodes_(self, new_ComVividsolutionsJtsGeomgraphNodeMap_initWithComVividsolutionsJtsGeomgraphNodeFactory_([new_ComVividsolutionsJtsOperationRelateRelateNodeFactory_init() autorelease]));
}

ComVividsolutionsJtsOperationRelateRelateNodeGraph *new_ComVividsolutionsJtsOperationRelateRelateNodeGraph_init() {
  ComVividsolutionsJtsOperationRelateRelateNodeGraph *self = [ComVividsolutionsJtsOperationRelateRelateNodeGraph alloc];
  ComVividsolutionsJtsOperationRelateRelateNodeGraph_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationRelateRelateNodeGraph)
