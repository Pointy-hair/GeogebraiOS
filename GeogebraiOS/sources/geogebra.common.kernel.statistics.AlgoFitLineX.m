//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoFitLineX.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/statistics/AlgoFitLineX.h"

@interface GeogebraCommonKernelStatisticsAlgoFitLineX () {
 @public
  GeogebraCommonKernelGeosGeoList *geoList_;
  GeogebraCommonKernelGeosGeoLine *g_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitLineX, geoList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitLineX, g_, GeogebraCommonKernelGeosGeoLine *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitLineX_compute(GeogebraCommonKernelStatisticsAlgoFitLineX *self);

@implementation GeogebraCommonKernelStatisticsAlgoFitLineX

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelStatisticsAlgoFitLineX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelStatisticsAlgoFitLineX_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geoList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_FitLineX();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geoList_);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:g_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoLine *)getFitLineX {
  return g_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoFitLineX_compute(self);
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(g_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoFitLineX", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:", "AlgoFitLineX", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFitLineX", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoFitLineX = { 2, "AlgoFitLineX", "geogebra.common.kernel.statistics", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoFitLineX;
}

@end

void GeogebraCommonKernelStatisticsAlgoFitLineX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFitLineX *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelStatisticsAlgoFitLineX_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geoList);
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoFitLineX *new_GeogebraCommonKernelStatisticsAlgoFitLineX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelStatisticsAlgoFitLineX *self = [GeogebraCommonKernelStatisticsAlgoFitLineX alloc];
  GeogebraCommonKernelStatisticsAlgoFitLineX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFitLineX_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFitLineX *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoFitLineX_set_geoList_(self, geoList);
  GeogebraCommonKernelStatisticsAlgoFitLineX_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  [self->g_ setToExplicit];
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoFitLineX_compute(self);
}

GeogebraCommonKernelStatisticsAlgoFitLineX *new_GeogebraCommonKernelStatisticsAlgoFitLineX_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelStatisticsAlgoFitLineX *self = [GeogebraCommonKernelStatisticsAlgoFitLineX alloc];
  GeogebraCommonKernelStatisticsAlgoFitLineX_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geoList);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFitLineX_compute(GeogebraCommonKernelStatisticsAlgoFitLineX *self) {
  jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) size];
  if (![self->geoList_ isDefined] || size <= 1) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) setUndefined];
    return;
  }
  jdouble sigmax = 0;
  jdouble sigmay = 0;
  jdouble sigmayy = 0;
  jdouble sigmaxy = 0;
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self->geoList_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      IOSDoubleArray *xy = [IOSDoubleArray arrayWithLength:2];
      [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class])) getInhomCoordsWithDoubleArray:xy];
      jdouble x = IOSDoubleArray_Get(xy, 0);
      jdouble y = IOSDoubleArray_Get(xy, 1);
      sigmax += x;
      sigmay += y;
      sigmaxy += x * y;
      sigmayy += y * y;
    }
    else {
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) setUndefined];
      return;
    }
  }
  ((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_))->y_ = size * sigmax * sigmay - size * size * sigmaxy;
  self->g_->x_ = size * size * sigmayy - size * sigmay * sigmay;
  self->g_->z_ = size * sigmay * sigmaxy - size * sigmayy * sigmax;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoFitLineX)
