//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdSpline.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoSpline.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/commands/CmdSpline.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoCurveCartesianND.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Double.h"

@interface GeogebraCommonKernelCommandsCmdSpline ()

- (GeogebraCommonKernelKernelNDGeoCurveCartesianND *)SplineWithNSString:(NSString *)label
                                    withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list;

+ (jboolean)arePointWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList;

@end

__attribute__((unused)) static GeogebraCommonKernelKernelNDGeoCurveCartesianND *GeogebraCommonKernelCommandsCmdSpline_SplineWithNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelCommandsCmdSpline *self, NSString *label, GeogebraCommonKernelGeosGeoList *list);

__attribute__((unused)) static jboolean GeogebraCommonKernelCommandsCmdSpline_arePointWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelGeosGeoList *geoList);

@implementation GeogebraCommonKernelCommandsCmdSpline

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdSpline_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  {
    GeogebraCommonKernelGeosGeoList *list;
    switch (n) {
      case 0:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
      case 1:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList] && GeogebraCommonKernelCommandsCmdSpline_arePointWithGeogebraCommonKernelGeosGeoList_((GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]))) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdSpline_SplineWithNSString_withGeogebraCommonKernelGeosGeoList_(self, [c getLabel], (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class])) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      case 2:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList] && GeogebraCommonKernelCommandsCmdSpline_arePointWithGeogebraCommonKernelGeosGeoList_((GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]))) {
        jint degree = J2ObjCFpToInt([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:1])) evaluateDouble]);
        if (JavaLangDouble_isNaNWithDouble_(degree) || degree > [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class])))) size] || degree < 3) {
          @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:[c getArgumentWithInt:1]];
        }
        id<GeogebraCommonKernelGeosGeoNumberValue> degreeNum = (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue));
        GeogebraCommonKernelAlgosAlgoSpline *algo = [new_GeogebraCommonKernelAlgosAlgoSpline_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumberValue_(cons_, [c getLabel], (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]), degreeNum) autorelease];
        GeogebraCommonKernelKernelNDGeoCurveCartesianND *list = [algo getSpline];
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ list } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      default:
      list = GeogebraCommonKernelCommandsCommandProcessor_wrapInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElementArray_withInt_withGeogebraCommonPluginGeoClassEnum_(kernelA_, arg, ((IOSObjectArray *) nil_chk(arg))->size_, GeogebraCommonPluginGeoClassEnum_get_POINT());
      if (list != nil) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdSpline_SplineWithNSString_withGeogebraCommonKernelGeosGeoList_(self, [c getLabel], list) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

- (GeogebraCommonKernelKernelNDGeoCurveCartesianND *)SplineWithNSString:(NSString *)label
                                    withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list {
  return GeogebraCommonKernelCommandsCmdSpline_SplineWithNSString_withGeogebraCommonKernelGeosGeoList_(self, label, list);
}

+ (jboolean)arePointWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  return GeogebraCommonKernelCommandsCmdSpline_arePointWithGeogebraCommonKernelGeosGeoList_(geoList);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdSpline", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
    { "SplineWithNSString:withGeogebraCommonKernelGeosGeoList:", "Spline", "Lgeogebra.common.kernel.kernelND.GeoCurveCartesianND;", 0x2, NULL, NULL },
    { "arePointWithGeogebraCommonKernelGeosGeoList:", "arePoint", "Z", 0xa, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdSpline = { 2, "CmdSpline", "geogebra.common.kernel.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdSpline;
}

@end

void GeogebraCommonKernelCommandsCmdSpline_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdSpline *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdSpline *new_GeogebraCommonKernelCommandsCmdSpline_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdSpline *self = [GeogebraCommonKernelCommandsCmdSpline alloc];
  GeogebraCommonKernelCommandsCmdSpline_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

GeogebraCommonKernelKernelNDGeoCurveCartesianND *GeogebraCommonKernelCommandsCmdSpline_SplineWithNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelCommandsCmdSpline *self, NSString *label, GeogebraCommonKernelGeosGeoList *list) {
  GeogebraCommonKernelAlgosAlgoSpline *algo = [new_GeogebraCommonKernelAlgosAlgoSpline_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumberValue_(self->cons_, label, list, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, 3) autorelease]) autorelease];
  return [algo getSpline];
}

jboolean GeogebraCommonKernelCommandsCmdSpline_arePointWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelCommandsCmdSpline_initialize();
  for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoList *) nil_chk(geoList)) size] - 1; i++) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([geoList getWithInt:i])) isGeoPoint] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk([geoList getWithInt:i])) isEqualWithGeogebraCommonKernelGeosGeoElement:[geoList getWithInt:i + 1]]) {
      return NO;
    }
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdSpline)
