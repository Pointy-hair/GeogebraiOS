//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPathLinePolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPathPlanePolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntersectPathLinePolygon.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoElementND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/TreeMap.h"
#include "java/util/TreeSet.h"

@class GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent;
@class GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices;
@class GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList;

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron () {
 @public
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *polyhedron_;
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler *outputPolygons_;
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler *outputPoints_;
  jboolean hasLabels_AlgoIntersectRegionPlanePolyhedron_;
  JavaUtilTreeSet *polyhedronVertices_;
  JavaUtilTreeMap *parentToPolygons_;
  JavaUtilTreeMap *newCoordsList_;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *verticesList_;
  JavaUtilArrayList *polyhedronFaces_;
  JavaUtilTreeSet *checkVerticesList_;
  JavaUtilArrayList *segmentCoords_;
  jint removeSegmentCoordsIndex_;
  GeogebraCommonKernelGeosGeoPolygon *removeSegmentCoordsPolygon_;
}

- (JavaUtilTreeSet *)getPolygonsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)coords;

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
   withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)p
                                             withBoolean:(jboolean)hasLabels;

- (void)setNewCoordsList;

- (JavaUtilArrayList *)getSegmentsCoords;

- (void)addSegmentWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)startSegment
                  withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)endSegment
                                                                                         withJavaUtilArrayList:(JavaUtilArrayList *)segmentList;

- (void)addParentToPolygonsWithGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)parent;

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)nextVertexWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p2
                                                  withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)startPoint
                                                                                                  withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)oldPoint;

- (void)removeSegmentCoords;

- (void)removeSegmentCoordsWithInt:(jint)index
withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p2;

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)nextVertexWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)startPoint
                                                                                                                                                        withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)oldParent
                                                                                                                                                        withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)firstParent;

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *)addVertices;

- (void)addPolyhedronVerticesToOutputWithInt:(jint)indexPolygon
                                     withInt:(jint)indexPoint
                                     withInt:(jint)indexSegment;

- (void)addToVerticesListWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *)vertices;

- (void)updateLabelsWithGeogebraCommonKernelAlgosAlgoElement_OutputHandler:(GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)outputHandler;

- (void)createOutput;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, polyhedron_, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, outputPolygons_, GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, outputPoints_, GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, polyhedronVertices_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, parentToPolygons_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, newCoordsList_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, verticesList_, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, polyhedronFaces_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, checkVerticesList_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, segmentCoords_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron, removeSegmentCoordsPolygon_, GeogebraCommonKernelGeosGeoPolygon *)

__attribute__((unused)) static JavaUtilTreeSet *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getPolygonsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *coords);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonKernelConstruction *c, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, jboolean hasLabels);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(GeogebraCommonKernelConstruction *c, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, jboolean hasLabels) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setNewCoordsList(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self);

__attribute__((unused)) static JavaUtilArrayList *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getSegmentsCoords(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addSegmentWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withJavaUtilArrayList_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startSegment, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *endSegment, JavaUtilArrayList *segmentList);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addParentToPolygonsWithGeogebraCommonKernelKernelNDGeoElementND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, id<GeogebraCommonKernelKernelNDGeoElementND> parent);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonKernelKernelNDGeoElementND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonKernelGeosGeoPolygon *p2, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startPoint, id<GeogebraCommonKernelKernelNDGeoElementND> oldPoint);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoords(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoordsWithInt_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, jint index, GeogebraCommonKernelGeosGeoPolygon *p2);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonKernelKernelNDGeoElementND_withGeogebraCommonKernelKernelNDGeoElementND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startPoint, id<GeogebraCommonKernelKernelNDGeoElementND> oldParent, id<GeogebraCommonKernelKernelNDGeoElementND> firstParent);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addVertices(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addPolyhedronVerticesToOutputWithInt_withInt_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, jint indexPolygon, jint indexPoint, jint indexSegment);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addToVerticesListWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *vertices);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_updateLabelsWithGeogebraCommonKernelAlgosAlgoElement_OutputHandler_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonKernelAlgosAlgoElement_OutputHandler *outputHandler);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_createOutput(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self);

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent : GeogebraCommonKernelMatrixCoords < JavaLangComparable > {
 @public
  id<GeogebraCommonKernelKernelNDGeoElementND> parent_;
  JavaLangDouble *parameter_;
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$
                                                                             withJavaLangDouble:(JavaLangDouble *)parameter
                                                           withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v
                                                   withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)parent;

- (jint)compareToWithId:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)o;

- (jint)compareParentToWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)o;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent)

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent, parent_, id<GeogebraCommonKernelKernelNDGeoElementND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent, parameter_, JavaLangDouble *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withJavaLangDouble_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelKernelNDGeoElementND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, JavaLangDouble *parameter, GeogebraCommonKernelMatrixCoords *v, id<GeogebraCommonKernelKernelNDGeoElementND> parent);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withJavaLangDouble_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelKernelNDGeoElementND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, JavaLangDouble *parameter, GeogebraCommonKernelMatrixCoords *v, id<GeogebraCommonKernelKernelNDGeoElementND> parent) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent)

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment : NSObject {
 @public
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p1_, *p2_;
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$
   withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)p1
   withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)p2;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment)

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment, p1_, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment, p2_, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p1, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p2);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p1, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p2) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment)

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices : JavaUtilArrayList < JavaLangComparable > {
 @public
  jint lowest_;
  jshort direction_;
  jint current_;
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$;

- (jboolean)addWithId:(GeogebraCommonKernelMatrixCoords *)e;

- (void)setDirection;

- (GeogebraCommonKernelMatrixCoords *)next;

- (void)start;

- (jint)compareToWithId:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *)o;


@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static GeogebraCommonKernelMatrixCoords *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_next(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_start(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *self);

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices)

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList : JavaUtilArrayList {
 @public
  jint cumulateSize_;
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$;

- (jboolean)addWithId:(JavaUtilArrayList *)vertices;

- (void)clear;


@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList)

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *this$0_;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2)

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2, this$0_, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2)

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *this$0_;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3)

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3, this$0_, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3)

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *this$0_;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4)

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4, this$0_, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4)

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(GeogebraCommonKernelMatrixCoords *)o1
               withId:(GeogebraCommonKernelMatrixCoords *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1_init(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 *self);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron)

id<JavaUtilComparator> GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_COORDS_COMPARATOR_;

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron

- (JavaUtilTreeSet *)getPolygonsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)coords {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getPolygonsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(self, coords);
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
   withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)p {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(self, c, plane, p);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
   withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)p
                                             withBoolean:(jboolean)hasLabels {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(self, c, plane, p, hasLabels);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
   withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)p
                                            withIntArray:(IOSIntArray *)outputSizes {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withIntArray_(self, c, labels, plane, p, outputSizes);
  return self;
}

- (void)setSecondInputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_set_polyhedron_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]));
}

- (GeogebraCommonKernelGeosGeoElement *)getSecondInput {
  return polyhedron_;
}

- (void)addCoordsWithDouble:(jdouble)parameter
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)parent {
  GeogebraCommonKernelMatrixCoords *c = [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) copyVector];
  [((JavaUtilTreeSet *) nil_chk(newCoords_AlgoIntersectRegionPlanePolyhedron_)) addWithId:[new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withJavaLangDouble_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelKernelNDGeoElementND_(self, JavaLangDouble_valueOfWithDouble_(parameter), c, parent) autorelease]];
  if ([GeogebraCommonKernelKernelNDGeoPointND_class_() isInstance:parent]) {
    [((JavaUtilTreeSet *) nil_chk(polyhedronVertices_)) addWithId:c];
  }
}

- (void)setNewCoords {
  if (newCoordsList_ == nil) GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setAndConsume_newCoordsList_(self, new_JavaUtilTreeMap_init());
  else [newCoordsList_ clear];
  if (parentToPolygons_ == nil) GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setAndConsume_parentToPolygons_(self, new_JavaUtilTreeMap_init());
  else [parentToPolygons_ clear];
  if (polyhedronVertices_ == nil) GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setAndConsume_polyhedronVertices_(self, new_JavaUtilTreeSet_initWithJavaUtilComparator_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_COORDS_COMPARATOR_));
  else [polyhedronVertices_ clear];
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) getPolygons])) {
    GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_set_p_(self, polygon);
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setNewCoordsList(self);
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk([polyhedron_ getPolygonsLinked])) {
    GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_set_p_(self, polygon);
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setNewCoordsList(self);
  }
}

- (void)setNewCoordsList {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setNewCoordsList(self);
}

- (JavaUtilArrayList *)getSegmentsCoords {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getSegmentsCoords(self);
}

- (void)addSegmentWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)startSegment
                  withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)endSegment
                                                                                         withJavaUtilArrayList:(JavaUtilArrayList *)segmentList {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addSegmentWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withJavaUtilArrayList_(self, startSegment, endSegment, segmentList);
}

- (void)addParentToPolygonsWithGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)parent {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addParentToPolygonsWithGeogebraCommonKernelKernelNDGeoElementND_(self, parent);
}

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)nextVertexWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p2
                                                  withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)startPoint
                                                                                                  withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)oldPoint {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonKernelKernelNDGeoElementND_(self, p2, startPoint, oldPoint);
}

- (void)removeSegmentCoords {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoords(self);
}

- (void)removeSegmentCoordsWithInt:(jint)index
withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoordsWithInt_withGeogebraCommonKernelGeosGeoPolygon_(self, index, p2);
}

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)nextVertexWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)startPoint
                                                                                                                                                        withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)oldParent
                                                                                                                                                        withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)firstParent {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonKernelKernelNDGeoElementND_withGeogebraCommonKernelKernelNDGeoElementND_(self, startPoint, oldParent, firstParent);
}

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *)addVertices {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addVertices(self);
}

- (void)addPolyhedronVerticesToOutputWithInt:(jint)indexPolygon
                                     withInt:(jint)indexPoint
                                     withInt:(jint)indexSegment {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addPolyhedronVerticesToOutputWithInt_withInt_withInt_(self, indexPolygon, indexPoint, indexSegment);
}

- (void)addToVerticesListWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *)vertices {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addToVerticesListWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_(self, vertices);
}

- (void)updateLabelsWithGeogebraCommonKernelAlgosAlgoElement_OutputHandler:(GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)outputHandler {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_updateLabelsWithGeogebraCommonKernelAlgosAlgoElement_OutputHandler_(self, outputHandler);
}

- (void)compute {
  if (verticesList_ == nil) GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setAndConsume_verticesList_(self, new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self));
  else [verticesList_ clear];
  if (checkVerticesList_ == nil) GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setAndConsume_checkVerticesList_(self, new_JavaUtilTreeSet_init());
  else [checkVerticesList_ clear];
  if (polyhedronFaces_ == nil) GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setAndConsume_polyhedronFaces_(self, new_JavaUtilArrayList_init());
  else [polyhedronFaces_ clear];
  [self setNewCoords];
  if ([((JavaUtilTreeMap *) nil_chk(newCoordsList_)) size] == 0 && [((JavaUtilArrayList *) nil_chk(polyhedronFaces_)) size] == 0) {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygons_)) adjustOutputSizeWithInt:[((JavaUtilTreeSet *) nil_chk(polyhedronVertices_)) size] withBoolean:NO];
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) adjustOutputSizeWithInt:[polyhedronVertices_ size] withBoolean:NO];
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_AlgoIntersectRegionPlanePolyhedron_)) adjustOutputSizeWithInt:[polyhedronVertices_ size] withBoolean:NO];
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addPolyhedronVerticesToOutputWithInt_withInt_withInt_(self, 0, 0, 0);
  }
  else {
    while ([newCoordsList_ size] != 0) {
      GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_set_p_(self, [newCoordsList_ firstKey]);
      GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *vertices = GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addVertices(self);
      if (vertices != nil) {
        [vertices setDirection];
        if ([((JavaUtilTreeSet *) nil_chk(checkVerticesList_)) addWithId:vertices]) {
          GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addToVerticesListWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_(self, vertices);
        }
      }
    }
    for (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices * __strong vertices in nil_chk(polyhedronFaces_)) {
      if ([((JavaUtilTreeSet *) nil_chk(checkVerticesList_)) addWithId:vertices]) {
        GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addToVerticesListWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_(self, vertices);
      }
    }
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) adjustOutputSizeWithInt:((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *) nil_chk(verticesList_))->cumulateSize_ + [((JavaUtilTreeSet *) nil_chk(polyhedronVertices_)) size] withBoolean:NO];
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_updateLabelsWithGeogebraCommonKernelAlgosAlgoElement_OutputHandler_(self, outputPoints_);
    jint segmentIndex = 0;
    for (JavaUtilArrayList * __strong vertices in verticesList_) {
      jint length = [((JavaUtilArrayList *) nil_chk(vertices)) size];
      for (jint i = 0; i < length; i++) {
        GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [outputPoints_ getElementWithInt:segmentIndex];
        [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setCoordsWithGeogebraCommonKernelMatrixCoords:[vertices getWithInt:i]];
        segmentIndex++;
      }
    }
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygons_)) adjustOutputSizeWithInt:[verticesList_ size] + [polyhedronVertices_ size] withBoolean:NO];
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_updateLabelsWithGeogebraCommonKernelAlgosAlgoElement_OutputHandler_(self, outputPolygons_);
    IOSObjectArray *points = [IOSObjectArray arrayWithLength:verticesList_->cumulateSize_ type:GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_class_()];
    points = [outputPoints_ getOutputWithGeogebraCommonKernelGeosGeoElementArray:points];
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_AlgoIntersectRegionPlanePolyhedron_)) adjustOutputSizeWithInt:verticesList_->cumulateSize_ + [polyhedronVertices_ size] withBoolean:NO];
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_updateLabelsWithGeogebraCommonKernelAlgosAlgoElement_OutputHandler_(self, outputSegments_AlgoIntersectRegionPlanePolyhedron_);
    jint pointIndex = 0;
    jint polygonIndex = 0;
    segmentIndex = 0;
    for (JavaUtilArrayList * __strong vertices in verticesList_) {
      jint length = [((JavaUtilArrayList *) nil_chk(vertices)) size];
      GeogebraCommonKernelGeosGeoPolygon *outputPoly = [outputPolygons_ getElementWithInt:polygonIndex];
      IOSObjectArray *polyPoints = [IOSObjectArray arrayWithLength:length type:GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_class_()];
      IOSObjectArray *polySegments = [IOSObjectArray arrayWithLength:length type:GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_class_()];
      for (jint i = 0; i < length; i++) {
        [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk([outputSegments_AlgoIntersectRegionPlanePolyhedron_ getElementWithInt:segmentIndex])) modifyInputPolyAndPointsWithGeogebraCommonKernelGeosGeoElement:outputPoly withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), pointIndex + i) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, pointIndex + (i + 1) % length)];
        IOSObjectArray_Set(polyPoints, i, IOSObjectArray_Get(points, pointIndex + i));
        IOSObjectArray_Set(polySegments, i, [outputSegments_AlgoIntersectRegionPlanePolyhedron_ getElementWithInt:segmentIndex]);
        segmentIndex++;
      }
      [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(outputPoly)) setPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:polyPoints withGeogebraCommonKernelMatrixCoordSys:nil withBoolean:NO];
      [outputPoly setSegmentsWithGeogebraCommonKernelKernelNDGeoSegmentNDArray:polySegments];
      [outputPoly calcArea];
      pointIndex += length;
      polygonIndex++;
    }
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addPolyhedronVerticesToOutputWithInt_withInt_withInt_(self, polygonIndex, pointIndex, segmentIndex);
  }
}

- (jboolean)checkParameterWithDouble:(jdouble)t1 {
  return YES;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_IntersectPath();
}

- (void)createOutput {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_createOutput(self);
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, [self getFirstInput]);
  IOSObjectArray_Set(input_, 1, [self getSecondInput]);
  for (jint i = 0; i < input_->size_; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) addAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  }
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) addToAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:self];
}

- (void)getCmdOutputXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
          withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<outputSizes val=\""];
  [sb appendWithInt:[((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygons_)) size]];
  [sb appendWithNSString:@","];
  [sb appendWithInt:[((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size]];
  [sb appendWithNSString:@","];
  [sb appendWithInt:[((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_AlgoIntersectRegionPlanePolyhedron_)) size]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@"/>\n"];
  [super getCmdOutputXMLWithJavaLangStringBuilder:sb withGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionOfAandB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getFirstInput])) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getSecondInput])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(polyhedron_);
  RELEASE_(outputPolygons_);
  RELEASE_(outputPoints_);
  RELEASE_(outputSegments_AlgoIntersectRegionPlanePolyhedron_);
  RELEASE_(newCoords_AlgoIntersectRegionPlanePolyhedron_);
  RELEASE_(polyhedronVertices_);
  RELEASE_(parentToPolygons_);
  RELEASE_(newCoordsList_);
  RELEASE_(verticesList_);
  RELEASE_(polyhedronFaces_);
  RELEASE_(checkVerticesList_);
  RELEASE_(segmentCoords_);
  RELEASE_(removeSegmentCoordsPolygon_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron class]) {
    JreStrongAssignAndConsume(&GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_COORDS_COMPARATOR_, nil, new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getPolygonsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:", "getPolygons", "Ljava.util.TreeSet;", 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:", "AlgoIntersectRegionPlanePolyhedron", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:withBoolean:", "AlgoIntersectRegionPlanePolyhedron", NULL, 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:withIntArray:", "AlgoIntersectRegionPlanePolyhedron", NULL, 0x1, NULL, NULL },
    { "setSecondInputWithGeogebraCommonKernelGeosGeoElement:", "setSecondInput", "V", 0x4, NULL, NULL },
    { "getSecondInput", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "addCoordsWithDouble:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelKernelNDGeoElementND:", "addCoords", "V", 0x4, NULL, NULL },
    { "setNewCoords", NULL, "V", 0x4, NULL, NULL },
    { "setNewCoordsList", NULL, "V", 0x2, NULL, NULL },
    { "getSegmentsCoords", NULL, "Ljava.util.ArrayList;", 0x2, NULL, NULL },
    { "addSegmentWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:withJavaUtilArrayList:", "addSegment", "V", 0x2, NULL, NULL },
    { "addParentToPolygonsWithGeogebraCommonKernelKernelNDGeoElementND:", "addParentToPolygons", "V", 0x2, NULL, NULL },
    { "nextVertexWithGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:withGeogebraCommonKernelKernelNDGeoElementND:", "nextVertex", "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$CoordsWithParent;", 0x2, NULL, NULL },
    { "removeSegmentCoords", NULL, "V", 0x2, NULL, NULL },
    { "removeSegmentCoordsWithInt:withGeogebraCommonKernelGeosGeoPolygon:", "removeSegmentCoords", "V", 0x2, NULL, NULL },
    { "nextVertexWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:withGeogebraCommonKernelKernelNDGeoElementND:withGeogebraCommonKernelKernelNDGeoElementND:", "nextVertex", "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$CoordsWithParent;", 0x2, NULL, NULL },
    { "addVertices", NULL, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$Vertices;", 0x2, NULL, NULL },
    { "addPolyhedronVerticesToOutputWithInt:withInt:withInt:", "addPolyhedronVerticesToOutput", "V", 0x2, NULL, NULL },
    { "addToVerticesListWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices:", "addToVerticesList", "V", 0x2, NULL, NULL },
    { "updateLabelsWithGeogebraCommonKernelAlgosAlgoElement_OutputHandler:", "updateLabels", "V", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "checkParameterWithDouble:", "checkParameter", "Z", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x11, NULL, NULL },
    { "createOutput", NULL, "V", 0x12, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getCmdOutputXMLWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "getCmdOutputXML", "V", 0x4, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "polyhedron_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPolyhedron;", NULL, NULL,  },
    { "outputPolygons_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D;>;",  },
    { "outputPoints_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D;>;",  },
    { "outputSegments_AlgoIntersectRegionPlanePolyhedron_", "outputSegments", 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D;>;",  },
    { "hasLabels_AlgoIntersectRegionPlanePolyhedron_", "hasLabels", 0x2, "Z", NULL, NULL,  },
    { "newCoords_AlgoIntersectRegionPlanePolyhedron_", "newCoords", 0x4, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron$CoordsWithParent;>;",  },
    { "polyhedronVertices_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/kernel/Matrix/Coords;>;",  },
    { "parentToPolygons_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Lgeogebra/common/kernel/kernelND/GeoElementND;Ljava/util/TreeSet<Lgeogebra/common/kernel/geos/GeoPolygon;>;>;",  },
    { "newCoordsList_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Lgeogebra/common/kernel/geos/GeoPolygon;Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron$Segment;>;>;",  },
    { "verticesList_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$VerticesList;", NULL, NULL,  },
    { "polyhedronFaces_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron$Vertices;>;",  },
    { "checkVerticesList_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron$Vertices;>;",  },
    { "segmentCoords_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron$Segment;>;",  },
    { "removeSegmentCoordsIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "removeSegmentCoordsPolygon_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "COORDS_COMPARATOR_", NULL, 0x19, "Ljava.util.Comparator;", &GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_COORDS_COMPARATOR_, "Ljava/util/Comparator<Lgeogebra/common/kernel/Matrix/Coords;>;",  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$CoordsWithParent;", "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$Segment;", "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$Vertices;", "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$VerticesList;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron = { 2, "AlgoIntersectRegionPlanePolyhedron", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 27, methods, 16, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron;
}

@end

JavaUtilTreeSet *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getPolygonsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *coords) {
  return [((JavaUtilTreeMap *) nil_chk(self->parentToPolygons_)) getWithId:((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(coords))->parent_];
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonKernelConstruction *c, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(self, c, plane, p, NO);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(GeogebraCommonKernelConstruction *c, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(self, c, plane, p);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonKernelConstruction *c, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, jboolean hasLabels) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPathPlanePolygon3D_initWithGeogebraCommonKernelConstruction_(self, c);
  self->hasLabels_AlgoIntersectRegionPlanePolyhedron_ = NO;
  self->hasLabels_AlgoIntersectRegionPlanePolyhedron_ = hasLabels;
  [self setFirstInputWithGeogebraCommonKernelGeosGeoElement:plane];
  [self setSecondInputWithGeogebraCommonKernelGeosGeoElement:p];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_createOutput(self);
  [self setInputOutput];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(GeogebraCommonKernelConstruction *c, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, jboolean hasLabels) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(self, c, plane, p, hasLabels);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withIntArray_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, IOSIntArray *outputSizes) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withBoolean_(self, c, plane, p, YES);
  if (labels == nil) {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPolygons_)) setLabelsWithNSStringArray:nil];
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPoints_)) setLabelsWithNSStringArray:nil];
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegments_AlgoIntersectRegionPlanePolyhedron_)) setLabelsWithNSStringArray:nil];
  }
  else {
    jint labelsLength = labels->size_;
    if (labelsLength > 1) {
      if (outputSizes != nil) {
        [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPolygons_)) adjustOutputSizeWithInt:IOSIntArray_Get(outputSizes, 0) withBoolean:NO];
        [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPoints_)) adjustOutputSizeWithInt:IOSIntArray_Get(outputSizes, 1) withBoolean:NO];
        [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegments_AlgoIntersectRegionPlanePolyhedron_)) adjustOutputSizeWithInt:IOSIntArray_Get(outputSizes, 2) withBoolean:NO];
        jint i1 = 0;
        jint i2 = 0;
        while (i1 < IOSIntArray_Get(outputSizes, 0)) {
          [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk([self->outputPolygons_ getElementWithInt:i1])) setLabelWithNSString:IOSObjectArray_Get(labels, i2)];
          i1++;
          i2++;
        }
        i1 = 0;
        while (i1 < IOSIntArray_Get(outputSizes, 1)) {
          [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self->outputPoints_ getElementWithInt:i1])) setLabelWithNSString:IOSObjectArray_Get(labels, i2)];
          i1++;
          i2++;
        }
        i1 = 0;
        while (i1 < IOSIntArray_Get(outputSizes, 2)) {
          [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk([self->outputSegments_AlgoIntersectRegionPlanePolyhedron_ getElementWithInt:i1])) setLabelWithNSString:IOSObjectArray_Get(labels, i2)];
          i1++;
          i2++;
        }
      }
      else {
        [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPolygons_)) setLabelsWithNSStringArray:nil];
        [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegments_AlgoIntersectRegionPlanePolyhedron_)) setLabelsWithNSStringArray:nil];
        [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPoints_)) setLabelsWithNSStringArray:nil];
      }
    }
    else if (labelsLength == 1) {
      [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPolygons_)) setIndexLabelsWithNSString:IOSObjectArray_Get(labels, 0)];
    }
  }
  [self update];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withIntArray_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, IOSIntArray *outputSizes) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withIntArray_(self, c, labels, plane, p, outputSizes);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setNewCoordsList(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self) {
  if (![((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->p_)) isDefined]) return;
  [self setIntersectionLine];
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(self->d1_)) isZero] && !(GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(self->o1_)) getW]))) {
    IOSObjectArray *points = [self->p_ getPointsND];
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *vertices = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self) autorelease];
    {
      IOSObjectArray *a__ = points;
      id<GeogebraCommonKernelKernelNDGeoPointND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<GeogebraCommonKernelKernelNDGeoPointND> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<GeogebraCommonKernelKernelNDGeoPointND> point = *b__++;
        [vertices addWithId:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD3]];
      }
    }
    [vertices setDirection];
    [((JavaUtilArrayList *) nil_chk(self->polyhedronFaces_)) addWithId:vertices];
  }
  else {
    if (self->newCoords_AlgoIntersectRegionPlanePolyhedron_ == nil) GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setAndConsume_newCoords_AlgoIntersectRegionPlanePolyhedron_(self, new_JavaUtilTreeSet_init());
    else [self->newCoords_AlgoIntersectRegionPlanePolyhedron_ clear];
    [self intersectionsCoordsWithGeogebraCommonKernelGeosGeoPolygon:self->p_];
    [self addPolygonPoints];
    if ([((JavaUtilTreeSet *) nil_chk(self->newCoords_AlgoIntersectRegionPlanePolyhedron_)) size] > 1) {
      GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_set_segmentCoords_(self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getSegmentsCoords(self));
      if ([((JavaUtilArrayList *) nil_chk(self->segmentCoords_)) size] > 0) {
        [((JavaUtilTreeMap *) nil_chk(self->newCoordsList_)) putWithId:self->p_ withId:self->segmentCoords_];
      }
    }
  }
}

JavaUtilArrayList *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getSegmentsCoords(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self) {
  JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(self->newCoords_AlgoIntersectRegionPlanePolyhedron_)) iterator];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *b = [((id<JavaUtilIterator>) nil_chk(it)) next];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startSegment = nil;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *endSegment = nil;
  while ([it hasNext]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *a = b;
    b = [it next];
    if ([self checkMidpointWithGeogebraCommonKernelGeosGeoPolygon:self->p_ withGeogebraCommonKernelMatrixCoords:a withGeogebraCommonKernelMatrixCoords:b]) {
      if (startSegment == nil) startSegment = a;
      endSegment = b;
    }
    else {
      if (startSegment != nil) {
        GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addSegmentWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withJavaUtilArrayList_(self, startSegment, endSegment, ret);
        startSegment = nil;
      }
    }
  }
  if (startSegment != nil) GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addSegmentWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withJavaUtilArrayList_(self, startSegment, endSegment, ret);
  return ret;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addSegmentWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withJavaUtilArrayList_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startSegment, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *endSegment, JavaUtilArrayList *segmentList) {
  [((JavaUtilArrayList *) nil_chk(segmentList)) addWithId:[new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(self, startSegment, endSegment) autorelease]];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addParentToPolygonsWithGeogebraCommonKernelKernelNDGeoElementND_(self, ((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(startSegment))->parent_);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addParentToPolygonsWithGeogebraCommonKernelKernelNDGeoElementND_(self, ((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(endSegment))->parent_);
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addParentToPolygonsWithGeogebraCommonKernelKernelNDGeoElementND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, id<GeogebraCommonKernelKernelNDGeoElementND> parent) {
  JavaUtilTreeSet *polygons = [((JavaUtilTreeMap *) nil_chk(self->parentToPolygons_)) getWithId:parent];
  if (polygons == nil) {
    polygons = [new_JavaUtilTreeSet_init() autorelease];
    [self->parentToPolygons_ putWithId:parent withId:polygons];
  }
  [((JavaUtilTreeSet *) nil_chk(polygons)) addWithId:self->p_];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonKernelKernelNDGeoElementND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonKernelGeosGeoPolygon *p2, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startPoint, id<GeogebraCommonKernelKernelNDGeoElementND> oldPoint) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_set_segmentCoords_(self, [((JavaUtilTreeMap *) nil_chk(self->newCoordsList_)) getWithId:p2]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *a;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *b = nil;
  jboolean notFound = YES;
  jint i;
  for (i = 0; i < [((JavaUtilArrayList *) nil_chk(self->segmentCoords_)) size] && notFound; i++) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *segment = [self->segmentCoords_ getWithInt:i];
    a = ((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *) nil_chk(segment))->p1_;
    if (((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(a))->parent_ == ((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(startPoint))->parent_) {
      b = segment->p2_;
      if (((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(b))->parent_ != oldPoint) {
        notFound = NO;
      }
    }
    else {
      b = a;
      a = segment->p2_;
      if (((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(a))->parent_ == startPoint->parent_) {
        if (b->parent_ != oldPoint) {
          notFound = NO;
        }
      }
    }
  }
  if (notFound) {
    b = nil;
  }
  else {
    self->removeSegmentCoordsIndex_ = i - 1;
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_set_removeSegmentCoordsPolygon_(self, p2);
  }
  return b;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoords(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoordsWithInt_withGeogebraCommonKernelGeosGeoPolygon_(self, self->removeSegmentCoordsIndex_, self->removeSegmentCoordsPolygon_);
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoordsWithInt_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, jint index, GeogebraCommonKernelGeosGeoPolygon *p2) {
  [((JavaUtilArrayList *) nil_chk(self->segmentCoords_)) removeWithInt:index];
  if ([self->segmentCoords_ size] == 0) [((JavaUtilTreeMap *) nil_chk(self->newCoordsList_)) removeWithId:p2];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonKernelKernelNDGeoElementND_withGeogebraCommonKernelKernelNDGeoElementND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startPoint, id<GeogebraCommonKernelKernelNDGeoElementND> oldParent, id<GeogebraCommonKernelKernelNDGeoElementND> firstParent) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *b;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *bFirstPoint = nil;
  GeogebraCommonKernelGeosGeoPolygon *pFirstPoint = nil;
  jint indexFirstPoint = 0;
  if ([((JavaUtilTreeMap *) nil_chk(self->newCoordsList_)) containsKeyWithId:self->p_]) {
    b = GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonKernelKernelNDGeoElementND_(self, self->p_, startPoint, oldParent);
    if (b != nil) {
      if (b->parent_ == firstParent) {
        bFirstPoint = b;
        pFirstPoint = self->p_;
        indexFirstPoint = self->removeSegmentCoordsIndex_;
      }
      else {
        GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoords(self);
        return b;
      }
    }
  }
  JavaUtilTreeSet *polySet = GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_getPolygonsWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(self, startPoint);
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(polySet)) iterator];
  GeogebraCommonKernelGeosGeoPolygon *p2 = nil;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    p2 = [it next];
    if (p2 != self->p_ && [self->newCoordsList_ containsKeyWithId:p2]) {
      b = GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonKernelKernelNDGeoElementND_(self, p2, startPoint, oldParent);
      if (b != nil) {
        if (b->parent_ == firstParent) {
          bFirstPoint = b;
          pFirstPoint = p2;
          indexFirstPoint = self->removeSegmentCoordsIndex_;
        }
        else {
          GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_set_p_(self, p2);
          GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoords(self);
          return b;
        }
      }
    }
  }
  if (bFirstPoint != nil) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoordsWithInt_withGeogebraCommonKernelGeosGeoPolygon_(self, indexFirstPoint, pFirstPoint);
    GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_set_p_(self, pFirstPoint);
    return bFirstPoint;
  }
  return nil;
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addVertices(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *vertices = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self) autorelease];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_set_segmentCoords_(self, [((JavaUtilTreeMap *) nil_chk(self->newCoordsList_)) getWithId:self->p_]);
  if ([((JavaUtilArrayList *) nil_chk(self->segmentCoords_)) isEmpty]) {
    [self->newCoordsList_ removeWithId:self->p_];
    return nil;
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *firstPoint = ((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *) nil_chk([self->segmentCoords_ getWithInt:0]))->p1_;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *startPoint = ((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *) nil_chk([self->segmentCoords_ getWithInt:0]))->p2_;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_removeSegmentCoordsWithInt_withGeogebraCommonKernelGeosGeoPolygon_(self, 0, self->p_);
  [vertices addWithId:firstPoint];
  id<GeogebraCommonKernelKernelNDGeoElementND> oldParent = nil;
  while (((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(startPoint))->parent_ != ((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(firstPoint))->parent_) {
    [vertices addWithId:startPoint];
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *c = GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_nextVertexWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonKernelKernelNDGeoElementND_withGeogebraCommonKernelKernelNDGeoElementND_(self, startPoint, oldParent, firstPoint->parent_);
    if (c == nil) return nil;
    oldParent = startPoint->parent_;
    startPoint = c;
  }
  return vertices;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addPolyhedronVerticesToOutputWithInt_withInt_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, jint indexPolygon, jint indexPoint, jint indexSegment) {
  for (GeogebraCommonKernelMatrixCoords * __strong coords in nil_chk(self->polyhedronVertices_)) {
    GeogebraCommonKernelGeosGeoPolygon *outputPoly = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPolygons_)) getElementWithInt:indexPolygon];
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPoints_)) getElementWithInt:indexPoint];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point)) setCoordsWithGeogebraCommonKernelMatrixCoords:coords];
    GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *seg = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegments_AlgoIntersectRegionPlanePolyhedron_)) getElementWithInt:indexSegment];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg)) modifyInputPolyAndPointsWithGeogebraCommonKernelGeosGeoElement:outputPoly withGeogebraCommonKernelKernelNDGeoPointND:point withGeogebraCommonKernelKernelNDGeoPointND:point];
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(outputPoly)) setPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:[IOSObjectArray arrayWithObjects:(id[]){ point, point } count:2 type:GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_class_()] withGeogebraCommonKernelMatrixCoordSys:nil withBoolean:NO];
    [outputPoly setSegmentsWithGeogebraCommonKernelKernelNDGeoSegmentNDArray:[IOSObjectArray arrayWithObjects:(id[]){ seg, seg } count:2 type:GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_class_()]];
    [outputPoly calcArea];
    indexPolygon++;
    indexPoint++;
    indexSegment++;
  }
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_addToVerticesListWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *vertices) {
  [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *) nil_chk(self->verticesList_)) addWithId:vertices];
  if ([((JavaUtilTreeSet *) nil_chk(self->polyhedronVertices_)) size] > 0) {
    for (GeogebraCommonKernelMatrixCoords * __strong coords in nil_chk(vertices)) {
      [self->polyhedronVertices_ removeWithId:coords];
    }
  }
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_updateLabelsWithGeogebraCommonKernelAlgosAlgoElement_OutputHandler_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self, GeogebraCommonKernelAlgosAlgoElement_OutputHandler *outputHandler) {
  if (self->hasLabels_AlgoIntersectRegionPlanePolyhedron_) [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputHandler)) updateLabels];
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_createOutput(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *self) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setAndConsume_outputPolygons_(self, new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self) autorelease]));
  [self->outputPolygons_ adjustOutputSizeWithInt:1 withBoolean:NO];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setAndConsume_outputPoints_(self, new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self) autorelease]));
  [self->outputPoints_ adjustOutputSizeWithInt:1 withBoolean:NO];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_setAndConsume_outputSegments_AlgoIntersectRegionPlanePolyhedron_(self, new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self) autorelease]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$
                                                                             withJavaLangDouble:(JavaLangDouble *)parameter
                                                           withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v
                                                   withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)parent {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withJavaLangDouble_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelKernelNDGeoElementND_(self, outer$, parameter, v, parent);
  return self;
}

- (jint)compareToWithId:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)o {
  check_class_cast(o, [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent class]);
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_([((JavaLangDouble *) nil_chk(parameter_)) doubleValue], [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(o))->parameter_ doubleValue])) return 1;
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_([o->parameter_ doubleValue], [parameter_ doubleValue])) return -1;
  return [self compareParentToWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:o];
}

- (jint)compareParentToWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)o {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoElementND>) nil_chk(parent_)) toGeoElement])) compareToWithId:[((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *) nil_chk(o))->parent_ toGeoElement]];
}

- (void)dealloc {
  RELEASE_(parent_);
  RELEASE_(parameter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:withJavaLangDouble:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelKernelNDGeoElementND:", "CoordsWithParent", NULL, 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "compareParentToWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:", "compareParentTo", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoElementND;", NULL, NULL,  },
    { "parameter_", NULL, 0x2, "Ljava.lang.Double;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent = { 2, "CoordsWithParent", "geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x2, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, "Lgeogebra/common/kernel/Matrix/Coords;Ljava/lang/Comparable<Lgeogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron$CoordsWithParent;>;" };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withJavaLangDouble_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelKernelNDGeoElementND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, JavaLangDouble *parameter, GeogebraCommonKernelMatrixCoords *v, id<GeogebraCommonKernelKernelNDGeoElementND> parent) {
  GeogebraCommonKernelMatrixCoords_initWithGeogebraCommonKernelMatrixCoords_(self, v);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_set_parent_(self, parent);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_set_parameter_(self, parameter);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withJavaLangDouble_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelKernelNDGeoElementND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, JavaLangDouble *parameter, GeogebraCommonKernelMatrixCoords *v, id<GeogebraCommonKernelKernelNDGeoElementND> parent) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withJavaLangDouble_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelKernelNDGeoElementND_(self, outer$, parameter, v, parent);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$
   withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)p1
   withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *)p2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(self, outer$, p1, p2);
  return self;
}

- (void)dealloc {
  RELEASE_(p1_);
  RELEASE_(p2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent:", "Segment", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "p1_", NULL, 0x4, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$CoordsWithParent;", NULL, NULL,  },
    { "p2_", NULL, 0x4, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron$CoordsWithParent;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment = { 2, "Segment", "geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x2, 1, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p1, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p2) {
  NSObject_init(self);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_set_p1_(self, p1);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_set_p2_(self, p2);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p1, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent *p2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_CoordsWithParent_(self, outer$, p1, p2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Segment)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$ {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

- (jboolean)addWithId:(GeogebraCommonKernelMatrixCoords *)e {
  if (lowest_ == -1) {
    lowest_ = 0;
  }
  else {
    if ([((id<JavaUtilComparator>) nil_chk(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_get_COORDS_COMPARATOR_())) compareWithId:e withId:[self getWithInt:lowest_]] < 0) {
      lowest_ = [self size];
    }
  }
  return [super addWithId:e];
}

- (void)setDirection {
  jint n1 = lowest_ - 1;
  jint n2 = lowest_ + 1;
  if (n1 < 0) {
    n1 = [self size] - 1;
  }
  else if (n2 >= [self size]) {
    n2 = 0;
  }
  if ([((id<JavaUtilComparator>) nil_chk(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_get_COORDS_COMPARATOR_())) compareWithId:[self getWithInt:n1] withId:[self getWithInt:n2]] < 0) {
    direction_ = -1;
  }
  else {
    direction_ = 1;
  }
}

- (GeogebraCommonKernelMatrixCoords *)next {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_next(self);
}

- (void)start {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_start(self);
}

- (jint)compareToWithId:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *)o {
  check_class_cast(o, [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices class]);
  if ([self size] < [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *) nil_chk(o)) size]) return -1;
  if ([o size] < [self size]) return 1;
  if ([((id<JavaUtilComparator>) nil_chk(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_get_COORDS_COMPARATOR_())) compareWithId:[self getWithInt:lowest_] withId:[o getWithInt:o->lowest_]] < 0) return -1;
  if ([GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_get_COORDS_COMPARATOR_() compareWithId:[self getWithInt:lowest_] withId:[o getWithInt:o->lowest_]] > 0) return 1;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_start(self);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_start(o);
  jint visited = 0;
  while (visited < [self size]) {
    GeogebraCommonKernelMatrixCoords *thisCoords = GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_next(self);
    GeogebraCommonKernelMatrixCoords *oCoords = GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_next(o);
    if ([GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_get_COORDS_COMPARATOR_() compareWithId:thisCoords withId:oCoords] < 0) return -1;
    if ([GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_get_COORDS_COMPARATOR_() compareWithId:thisCoords withId:oCoords] > 0) return 1;
    visited++;
  }
  return 0;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:", "Vertices", NULL, 0x1, NULL, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL, NULL },
    { "setDirection", NULL, "V", 0x1, NULL, NULL },
    { "next", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x2, NULL, NULL },
    { "start", NULL, "V", 0x2, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lowest_", NULL, 0x2, "I", NULL, NULL,  },
    { "direction_", NULL, 0x2, "S", NULL, NULL,  },
    { "current_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.Matrix.Coords;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices = { 2, "Vertices", "geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x2, 6, methods, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/Matrix/Coords;>;Ljava/lang/Comparable<Lgeogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectRegionPlanePolyhedron$Vertices;>;" };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  JavaUtilArrayList_init(self);
  self->lowest_ = -1;
  self->direction_ = 0;
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

GeogebraCommonKernelMatrixCoords *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_next(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *self) {
  self->current_ += self->direction_;
  if (self->current_ >= [self size]) {
    self->current_ = 0;
  }
  else if (self->current_ < 0) {
    self->current_ = [self size] - 1;
  }
  return [self getWithInt:self->current_];
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices_start(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices *self) {
  self->current_ = self->lowest_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_Vertices)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$ {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

- (jboolean)addWithId:(JavaUtilArrayList *)vertices {
  cumulateSize_ += [((JavaUtilArrayList *) nil_chk(vertices)) size];
  return [super addWithId:vertices];
}

- (void)clear {
  cumulateSize_ = 0;
  [super clear];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:", "VerticesList", NULL, 0x1, NULL, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cumulateSize_", NULL, 0x4, "I", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Ljava.util.ArrayList;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList = { 2, "VerticesList", "geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x2, 3, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/util/ArrayList<Ljava/util/ArrayList<Lgeogebra/common/kernel/Matrix/Coords;>;>;" };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  JavaUtilArrayList_init(self);
  self->cumulateSize_ = 0;
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_VerticesList)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)newElement {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *p = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withBoolean_(this$0_->cons_, YES) autorelease];
  [p setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:this$0_];
  if ([((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(this$0_->outputPolygons_)) size] > 0) [p setAllVisualPropertiesWithGeogebraCommonKernelGeosGeoElement:[this$0_->outputPolygons_ getElementWithInt:0] withBoolean:NO];
  [p setViewFlagsWithJavaUtilList:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([this$0_ getFirstInput])) getViewSet]];
  [p setVisibleInView3DWithGeogebraCommonKernelGeosGeoElement:[this$0_ getFirstInput]];
  [p setNotFixedPointsLengthWithBoolean:YES];
  [p setOrthoNormalRegionCS];
  if (this$0_->hasLabels_AlgoIntersectRegionPlanePolyhedron_) {
    [p setInitLabelsCalledWithBoolean:YES];
  }
  return p;
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$ {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPolygon3D;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron", "createOutput" };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 = { 2, "", "geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D;>;" };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2 alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$2)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)newElement {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *newPoint = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(this$0_->cons_) autorelease];
  [newPoint setCoordsWithDouble:0 withDouble:0 withDouble:0 withDouble:1];
  [newPoint setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:this$0_];
  [newPoint setAuxiliaryObjectWithBoolean:YES];
  [newPoint setViewFlagsWithJavaUtilList:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([this$0_ getFirstInput])) getViewSet]];
  [newPoint setVisibleInView3DWithGeogebraCommonKernelGeosGeoElement:[this$0_ getFirstInput]];
  jint size = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(this$0_->outputPoints_)) size];
  if (size > 0) {
    jboolean visible = NO;
    jboolean labelVisible = NO;
    for (jint i = 0; i < size && !visible && !labelVisible; i++) {
      visible = (visible || [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([this$0_->outputPoints_ getElementWithInt:i])) isEuclidianVisible]);
      labelVisible = (labelVisible || [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([this$0_->outputPoints_ getElementWithInt:i])) getLabelVisible]);
    }
    [newPoint setEuclidianVisibleWithBoolean:visible];
    if (!visible) {
      [newPoint dontSetEuclidianVisibleBySetParentAlgorithm];
    }
    [newPoint setLabelVisibleWithBoolean:labelVisible];
  }
  if ([((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(this$0_->outputPolygons_)) size] > 0) {
    GeogebraCommonKernelGeosGeoPolygon *polygon = [this$0_->outputPolygons_ getElementWithInt:0];
    if ([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) getShowObjectCondition] != nil) {
      @try {
        [newPoint setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:[polygon getShowObjectCondition]];
      }
      @catch (JavaLangException *e) {
      }
    }
  }
  return newPoint;
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$ {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron", "createOutput" };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 = { 2, "", "geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D;>;" };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3 alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$3)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4

- (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *)newElement {
  GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *segment = (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk([((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(this$0_->outputPolygons_)) getElementWithInt:0])) createSegmentWithGeogebraCommonKernelKernelNDGeoPointND:[((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(this$0_->outputPoints_)) getElementWithInt:0] withGeogebraCommonKernelKernelNDGeoPointND:[this$0_->outputPoints_ getElementWithInt:0] withBoolean:YES], [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class]);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(segment)) setAuxiliaryObjectWithBoolean:YES];
  [segment setViewFlagsWithJavaUtilList:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([this$0_ getFirstInput])) getViewSet]];
  [segment setVisibleInView3DWithGeogebraCommonKernelGeosGeoElement:[this$0_ getFirstInput]];
  return segment;
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *)outer$ {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoSegment3D;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectRegionPlanePolyhedron;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron", "createOutput" };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 = { 2, "", "geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D;>;" };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron *outer$) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4 alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$4)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1

- (jint)compareWithId:(GeogebraCommonKernelMatrixCoords *)o1
               withId:(GeogebraCommonKernelMatrixCoords *)o {
  if (((IOSDoubleArray *) nil_chk(((GeogebraCommonKernelMatrixCoords *) nil_chk(o1))->val_))->size_ < ((GeogebraCommonKernelMatrixCoords *) nil_chk(o))->val_->size_) return -1;
  if (o1->val_->size_ > o->val_->size_) return 1;
  for (jint i = 0; i < o1->val_->size_; i++) {
    if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(IOSDoubleArray_Get(o->val_, i), IOSDoubleArray_Get(o1->val_, i))) return -1;
    if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(IOSDoubleArray_Get(o1->val_, i), IOSDoubleArray_Get(o->val_, i))) return 1;
  }
  return 0;
}

- (instancetype)init {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 = { 2, "", "geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectRegionPlanePolyhedron", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Lgeogebra/common/kernel/Matrix/Coords;>;" };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1_init(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 *self) {
  NSObject_init(self);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1_init() {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1 alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectRegionPlanePolyhedron_$1)
