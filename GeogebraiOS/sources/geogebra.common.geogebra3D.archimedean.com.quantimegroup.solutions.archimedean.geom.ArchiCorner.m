//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiCorner.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiBuilder.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiCorner.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/ArchiFacet.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/MySolver.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/IntList.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/Misc.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"

@interface GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner () {
 @public
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *boss_;
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *firstSides_;
  jint hub_;
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *spokes_;
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *pole_;
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *sides_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner, boss_, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner, firstSides_, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner, spokes_, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner, pole_, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner, sides_, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)

@implementation GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)getBoss {
  return boss_;
}

- (void)setBossWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)p {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_boss_(self, p);
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)getFirstSides {
  return firstSides_;
}

- (void)setFirstSidesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)p {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_firstSides_(self, p);
}

- (jint)getHub {
  return hub_;
}

- (void)setHubWithInt:(jint)p {
  hub_ = p;
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)getSpokes {
  return spokes_;
}

- (void)setSpokesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)p {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_spokes_(self, p);
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)getSides {
  return sides_;
}

- (void)setSidesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *)p {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_sides_(self, p);
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)getPole {
  if (pole_ == nil) return [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getHubPoint])) negative];
  return pole_;
}

- (void)setPoleWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)p {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_pole_(self, p);
}

+ (jdouble)computePoleThetaWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)firstSides
                                                                                                           withDouble:(jdouble)length {
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_computePoleThetaWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_(firstSides, length);
}

- (instancetype)init {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_init(self);
  return self;
}

- (void)init__WithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)hub
                                                                                                    withInt:(jint)numSpokes
                withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_boss_(self, boss);
  self->hub_ = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) registerPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_setAndConsume_spokes_(self, new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(numSpokes));
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_setAndConsume_sides_(self, new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(numSpokes));
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_setAndConsume_firstSides_(self, new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(numSpokes));
}

- (void)init__WithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)hub
                  withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s1
                  withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s2
                                                                                                    withInt:(jint)numSpokes
                                                                                                 withDouble:(jdouble)poleTheta
                withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss
                                                                                                    withInt:(jint)recursionDepth {
  [self init__WithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub withInt:numSpokes withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:boss];
  [self startWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s1 withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s2 withInt:numSpokes withDouble:poleTheta];
  [self completeWithInt:numSpokes withDouble:poleTheta withInt:recursionDepth];
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *)createWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)hub
                                                                                                                                                                                        withInt:(jint)numSpokes
                                                                                                    withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) createArchiCorner];
  [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) init__WithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub withInt:numSpokes withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:boss];
  return c;
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *)createWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)hub
                                                                                                      withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s1
                                                                                                      withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s2
                                                                                                                                                                                        withInt:(jint)numSpokes
                                                                                                                                                                                     withDouble:(jdouble)poleTheta
                                                                                                    withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss
                                                                                                                                                                                        withInt:(jint)recursionDepth {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) createArchiCorner];
  [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) init__WithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s1 withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s2 withInt:numSpokes withDouble:poleTheta withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:boss withInt:recursionDepth];
  return c;
}

+ (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *)simpleCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)hub
                                                                                                            withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s1
                                                                                                            withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s2
                                                                                                                                                                                              withInt:(jint)numSpokes
                                                                                                                                                                                           withDouble:(jdouble)poleTheta
                                                                                                          withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss {
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_simpleCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withDouble_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(hub, s1, s2, numSpokes, poleTheta, boss);
}

+ (void)createFirstCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)firstSides
                                                                                                         withDouble:(jdouble)length
                                                                                                            withInt:(jint)numSpokes
                                                                                                         withDouble:(jdouble)poleTheta
                        withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_createFirstCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_withInt_withDouble_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(firstSides, length, numSpokes, poleTheta, boss);
}

+ (void)createFirstCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)firstSides
                                                                                                         withDouble:(jdouble)length
                                                                                                            withInt:(jint)numSpokes
                                                                                                         withDouble:(jdouble)poleTheta
                        withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss
                                                                                                        withBoolean:(jboolean)finish {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_createFirstCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_withInt_withDouble_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withBoolean_(firstSides, length, numSpokes, poleTheta, boss, finish);
}

- (void)startWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s1
             withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s2
                                                                                               withInt:(jint)numSpokes
                                                                                            withDouble:(jdouble)poleTheta {
  jint i1 = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s1)) findIndexWithInt:hub_];
  jint i2 = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s2)) findIndexWithInt:hub_];
  [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(spokes_)) addWithInt:[s1 wrapgetIndexWithInt:i1 + 1]];
  [spokes_ addWithInt:[s1 wrapgetIndexWithInt:i1 - 1]];
  [spokes_ addWithInt:[s2 wrapgetIndexWithInt:i2 - 1]];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *h = [self getHubPoint];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v1 = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk((([self getSpokeWithInt:0])))) minusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:h];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v2 = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk((([self getSpokeWithInt:1])))) minusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:h];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_pole_(self, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_findThirdVectorWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withDouble_withDouble_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(v1, v2, poleTheta, poleTheta, [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(v1)) crossWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:v2]));
  [self getFirstSidesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s1 withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s2 withInt:0 withInt:numSpokes];
}

- (jint)getFirstSidesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s1
                     withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)s2
                                                                                                       withInt:(jint)start
                                                                                                       withInt:(jint)numSpokes {
  jint foundi = -1, inc = 0;
  for (jint i = start; i < numSpokes; ++i) {
    if ([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s1)) getVertexCount] == ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_))->firstSides_)) getWithInt:i]))->num_) {
      if ([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s2)) getVertexCount] == ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk([boss_->firstSides_ wrapgetWithInt:i + 1]))->num_) {
        foundi = i;
        inc = 1;
        break;
      }
      else if ([s2 getVertexCount] == ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk([boss_->firstSides_ wrapgetWithInt:i - 1]))->num_) {
        foundi = i;
        inc = -1;
        break;
      }
    }
  }
  if (inc == 0 || foundi == -1) {
    NSString *str = NSString_valueOf_(JreStrcat("$I$I", @"EXCEPTION getFirstSides. inc = ", inc, @" foundi = ", foundi));
    str = JreStrcat("$$", str, NSString_valueOf_(JreStrcat("$I$I", @"\ns1.points.num = ", [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s1)) getVertexCount], @" s2.points.num = ", [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s2)) getVertexCount])));
    @throw [new_JavaLangException_initWithNSString_(str) autorelease];
  }
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_firstSides_(self, [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_))->firstSides_)) wrapCopyWithInt:foundi withInt:inc]);
  return foundi + 1;
}

- (void)completeWithInt:(jint)numSpokes
             withDouble:(jdouble)poleTheta
                withInt:(jint)recursionDepth {
  if (recursionDepth > 400) {
    @throw [new_JavaLangException_initWithNSString_(JreStrcat("$I", @"recursion Depth = ", recursionDepth)) autorelease];
  }
  [self completeSpokesWithDouble:poleTheta];
  [self completeSides];
  [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) registerCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner:self];
  [self errorCheck];
  [self propagateCornersWithInt:numSpokes withDouble:poleTheta withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:boss_ withInt:recursionDepth];
}

- (void)completeSpokesWithDouble:(jdouble)poleTheta {
  for (jint i = 1; i < ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(firstSides_))->num_; ++i) {
    if (((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(spokes_))->num_ > i) {
      continue;
    }
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *s = [firstSides_ getWithInt:i - 1];
    jdouble polyTheta = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_polyAngleWithInt_(((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(s))->num_);
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *h = [self getHubPoint];
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *lastSpoke = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self wrapgetSpokeWithInt:i - 1])) minusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:h];
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *nextSpoke = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_findThirdVectorWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withDouble_withDouble_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(pole_, lastSpoke, poleTheta, polyTheta, [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(pole_)) crossWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:lastSpoke]);
    [spokes_ addWithInt:[((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) registerPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(h)) plusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:nextSpoke]]];
  }
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *s1 = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getSpokeWithInt:0])) minusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[self getHubPoint]];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *s2 = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getSpokeWithInt:firstSides_->num_ - 1])) minusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[self getHubPoint]];
  jdouble check1 = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(s1)) radBetweenWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:s2];
  jdouble check2 = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_polyAngleWithInt_(((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk([firstSides_ getLast]))->num_);
  if (!GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_isApproxWithDouble_withDouble_withDouble_(check1, check2, 1e-5)) {
    IOSIntArray *polyTypes = [IOSIntArray arrayWithLength:firstSides_->num_];
    for (jint i = 0; i < firstSides_->num_; ++i) {
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *s = [firstSides_ getWithInt:i];
      *IOSIntArray_GetRef(polyTypes, i) = ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(s))->num_;
    }
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomMySolver *solver1 = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomMySolver_initWithIntArray_withInt_withDouble_withBoolean_(polyTypes, polyTypes->size_, 100, YES) autorelease];
    jdouble r1 = [solver1 solve];
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithDouble:r1];
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomMySolver *solver2 = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomMySolver_initWithIntArray_withInt_withDouble_withBoolean_(polyTypes, polyTypes->size_, 100, NO) autorelease];
    jdouble r2 = [solver2 solve];
    [JavaLangSystem_get_out_() printlnWithDouble:r2];
  }
}

- (void)completeSides {
  for (jint i = 0; i < ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(firstSides_))->num_; ++i) {
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p0 = [self getSpokeWithInt:i];
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p1 = [self getHubPoint];
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *p2 = [self wrapgetSpokeWithInt:i + 1];
    jint index = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) sideIsBuiltWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p2 withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p1 withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:p0];
    if (index == -1) {
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *master = [firstSides_ getWithInt:i];
      GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(p2, p1, p0, master, boss_) autorelease];
      [s setPointsWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:boss_->points_];
      [s setVectorsWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:boss_->vectors_];
      index = [boss_ registerSideWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s];
    }
    [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(sides_)) addWithInt:index];
  }
}

- (void)propagateCornersWithInt:(jint)numSpokes
                     withDouble:(jdouble)poleTheta
withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *)boss
                        withInt:(jint)recursionDepth {
  jint hubIndex, s1index, s2index;
  for (jint i = 0; i < ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(spokes_))->num_; ++i) {
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *newHub = [self getSpokeWithInt:i];
    hubIndex = [spokes_ getWithInt:i];
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s1 = [self getSideWithInt:i];
    s1index = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(sides_)) getWithInt:i];
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s2 = [self wrapgetSideWithInt:i - 1];
    s2index = [sides_ wrapgetWithInt:i - 1];
    if ([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) cornerIsBuiltWithInt:hubIndex withInt:s1index withInt:s2index] == -1) {
      if (!(boss->ambiguous_ && [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s1)) getVertexCount] == boss->ambiguousPoly_ && [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s2)) getVertexCount] == boss->ambiguousPoly_)) {
        GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *newc = [boss createArchiCorner];
        [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(newc)) init__WithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:newHub withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s1 withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:s2 withInt:numSpokes withDouble:poleTheta withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:boss withInt:recursionDepth];
      }
    }
  }
}

- (void)errorCheck {
  if ([((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_))->points_)) size] < [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(boss_->corners_)) size]) {
    @throw [new_JavaLangException_initWithNSString_(@"Error completing solid. More corners than vertices.") autorelease];
  }
}

+ (jdouble)polyAngleWithInt:(jint)numSides {
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_polyAngleWithInt_(numSides);
}

+ (jboolean)isApproxWithDouble:(jdouble)a
                    withDouble:(jdouble)b
                    withDouble:(jdouble)e {
  return GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_isApproxWithDouble_withDouble_withDouble_(a, b, e);
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)getSpokeWithInt:(jint)i {
  return [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) getPointWithInt:[((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(spokes_)) getWithInt:i]];
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)wrapgetSpokeWithInt:(jint)i {
  return [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) getPointWithInt:[((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(spokes_)) wrapgetWithInt:i]];
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)getSideWithInt:(jint)i {
  return [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) getSideWithInt:[((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(sides_)) getWithInt:i]];
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *)wrapgetSideWithInt:(jint)i {
  return [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) getSideWithInt:[((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(sides_)) wrapgetWithInt:i]];
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)getHubPoint {
  return [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss_)) getPointWithInt:hub_];
}

- (IOSIntArray *)getSignature {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *sign = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(sides_))->num_) autorelease];
  for (jint i = 0; i < sides_->num_; ++i) {
    [sign addWithInt:[((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk([self getSideWithInt:i])) getVertexCount]];
  }
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *bestSign = sign, *temp;
  for (jint i = 0; i < sides_->num_; ++i) {
    temp = [sign wrapCopyWithInt:i withInt:1];
    if (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsMisc_arrayCompareWithIntArray_withIntArray_(((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(temp))->ints_, bestSign->ints_) < 0) bestSign = temp;
    temp = [sign wrapCopyWithInt:i withInt:-1];
  }
  return bestSign->ints_;
}

- (void)dealloc {
  RELEASE_(boss_);
  RELEASE_(firstSides_);
  RELEASE_(spokes_);
  RELEASE_(pole_);
  RELEASE_(sides_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getBoss", NULL, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", 0x1, NULL, NULL },
    { "setBossWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "setBoss", "V", 0x1, NULL, NULL },
    { "getFirstSides", NULL, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", 0x1, NULL, NULL },
    { "setFirstSidesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:", "setFirstSides", "V", 0x1, NULL, NULL },
    { "getHub", NULL, "I", 0x1, NULL, NULL },
    { "setHubWithInt:", "setHub", "V", 0x1, NULL, NULL },
    { "getSpokes", NULL, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", 0x1, NULL, NULL },
    { "setSpokesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:", "setSpokes", "V", 0x1, NULL, NULL },
    { "getSides", NULL, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", 0x1, NULL, NULL },
    { "setSidesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList:", "setSides", "V", 0x1, NULL, NULL },
    { "getPole", NULL, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x1, NULL, NULL },
    { "setPoleWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "setPole", "V", 0x1, NULL, NULL },
    { "computePoleThetaWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withDouble:", "computePoleTheta", "D", 0x9, NULL, NULL },
    { "init", "ArchiCorner", NULL, 0x4, NULL, NULL },
    { "init__WithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withInt:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "init", "V", 0x4, "Ljava.lang.Exception;", NULL },
    { "init__WithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withDouble:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:withInt:", "init", "V", 0x4, "Ljava.lang.Exception;", NULL },
    { "createWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withInt:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "create", "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiCorner;", 0x4, "Ljava.lang.Exception;", NULL },
    { "createWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withDouble:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:withInt:", "create", "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiCorner;", 0x4, "Ljava.lang.Exception;", NULL },
    { "simpleCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withDouble:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "simpleCorner", "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiCorner;", 0x9, "Ljava.lang.Exception;", NULL },
    { "createFirstCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withDouble:withInt:withDouble:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:", "createFirstCorner", "V", 0x9, "Ljava.lang.Exception;", NULL },
    { "createFirstCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withDouble:withInt:withDouble:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:withBoolean:", "createFirstCorner", "V", 0x9, "Ljava.lang.Exception;", NULL },
    { "startWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withDouble:", "start", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "getFirstSidesWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet:withInt:withInt:", "getFirstSides", "I", 0x1, "Ljava.lang.Exception;", NULL },
    { "completeWithInt:withDouble:withInt:", "complete", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "completeSpokesWithDouble:", "completeSpokes", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "completeSides", NULL, "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "propagateCornersWithInt:withDouble:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:withInt:", "propagateCorners", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "errorCheck", NULL, "V", 0x4, "Ljava.lang.Exception;", NULL },
    { "polyAngleWithInt:", "polyAngle", "D", 0x8, NULL, NULL },
    { "isApproxWithDouble:withDouble:withDouble:", "isApprox", "Z", 0x8, NULL, NULL },
    { "getSpokeWithInt:", "getSpoke", "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x1, NULL, NULL },
    { "wrapgetSpokeWithInt:", "wrapgetSpoke", "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x0, NULL, NULL },
    { "getSideWithInt:", "getSide", "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiFacet;", 0x0, NULL, NULL },
    { "wrapgetSideWithInt:", "wrapgetSide", "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiFacet;", 0x0, NULL, NULL },
    { "getHubPoint", NULL, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x1, NULL, NULL },
    { "getSignature", NULL, "[I", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "boss_", NULL, 0x2, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.ArchiBuilder;", NULL, NULL,  },
    { "firstSides_", NULL, 0x2, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple;>;>;",  },
    { "hub_", NULL, 0x2, "I", NULL, NULL,  },
    { "spokes_", NULL, 0x2, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", NULL, NULL,  },
    { "pole_", NULL, 0x2, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", NULL, NULL,  },
    { "sides_", NULL, 0x2, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.IntList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner = { 2, "ArchiCorner", "geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", NULL, 0x1, 36, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner;
}

@end

jdouble GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_computePoleThetaWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *firstSides, jdouble length) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_initialize();
  IOSIntArray *polyTypes = [IOSIntArray arrayWithLength:((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(firstSides))->num_];
  for (jint i = 0; i < firstSides->num_; ++i) {
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *s = [firstSides getWithInt:i];
    *IOSIntArray_GetRef(polyTypes, i) = ((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(s))->num_;
  }
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomMySolver *solver = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomMySolver_initWithIntArray_withDouble_(polyTypes, length) autorelease];
  jdouble r = [solver solve];
  return JavaLangMath_asinWithDouble_(r / length);
}

void GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_init(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *self) {
  NSObject_init(self);
}

GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_init() {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *self = [GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner alloc];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_init(self);
  return self;
}

GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_simpleCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet_withInt_withDouble_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *hub, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s1, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *s2, jint numSpokes, jdouble poleTheta, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *boss) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_initialize();
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) createArchiCorner];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_boss_(nil_chk(c), boss);
  c->hub_ = [boss registerPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_setAndConsume_spokes_(c, new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(numSpokes));
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_setAndConsume_sides_(c, new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList_initWithInt_(numSpokes));
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_setAndConsume_firstSides_(c, new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_initWithInt_(numSpokes));
  jint i1 = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s1)) findIndexWithInt:c->hub_];
  jint i2 = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiFacet *) nil_chk(s2)) findIndexWithInt:c->hub_];
  [c->spokes_ addWithInt:[s1 wrapgetIndexWithInt:i1 + 1]];
  [c->spokes_ addWithInt:[s1 wrapgetIndexWithInt:i1 - 1]];
  [c->spokes_ addWithInt:[s2 wrapgetIndexWithInt:i2 - 1]];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *h = [c getHubPoint];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v1 = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([c getSpokeWithInt:0])) minusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:h];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *v2 = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([c getSpokeWithInt:1])) minusWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:h];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_pole_(c, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_findThirdVectorWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_withDouble_withDouble_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(v1, v2, poleTheta, poleTheta, [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(v1)) crossWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:v2]));
  return c;
}

void GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_createFirstCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_withInt_withDouble_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *firstSides, jdouble length, jint numSpokes, jdouble poleTheta, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *boss) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_initialize();
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_createFirstCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_withInt_withDouble_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withBoolean_(firstSides, length, numSpokes, poleTheta, boss, YES);
}

void GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_createFirstCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withDouble_withInt_withDouble_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder_withBoolean_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *firstSides, jdouble length, jint numSpokes, jdouble poleTheta, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *boss, jboolean finish) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_initialize();
  if (finish) {
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *hub = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(0, 0, 0) autorelease];
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) createArchiCorner];
    [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) init__WithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub withInt:numSpokes withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:boss];
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_firstSides_(c, [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(firstSides)) copy__]);
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_pole_(c, [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(0, -1, 0) autorelease]) timesWithDouble:length]);
    jdouble y = length * JavaLangMath_cosWithDouble_(poleTheta);
    jdouble x = JavaLangMath_sqrtWithDouble_(length * length - y * y);
    [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(c->spokes_)) addWithInt:[boss registerPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(x, -y, 0) autorelease]]];
    [c completeWithInt:numSpokes withDouble:poleTheta withInt:0];
  }
  else {
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *hub = [new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(0, 0, 0) autorelease];
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *c = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder *) nil_chk(boss)) createArchiCorner];
    [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner *) nil_chk(c)) init__WithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:hub withInt:numSpokes withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiBuilder:boss];
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_boss_(c, boss);
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_firstSides_(c, [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(firstSides)) copy__]);
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_set_pole_(c, [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_yAxis())) timesWithDouble:length]);
    jdouble y = length * JavaLangMath_cosWithDouble_(poleTheta);
    jdouble x = JavaLangMath_sqrtWithDouble_(length * length - y * y);
    [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsIntList *) nil_chk(c->spokes_)) addWithInt:[boss registerPointWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithDouble_withDouble_withDouble_(x, y, 0) autorelease]]];
    [c completeSpokesWithDouble:poleTheta];
    [c completeSides];
    [c->boss_ registerCornerWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner:c];
    [c errorCheck];
  }
}

jdouble GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_polyAngleWithInt_(jint numSides) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_initialize();
  return JavaLangMath_PI * (1 - 2.0 / numSides);
}

jboolean GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_isApproxWithDouble_withDouble_withDouble_(jdouble a, jdouble b, jdouble e) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner_initialize();
  return JavaLangMath_absWithDouble_(a - b) <= e;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomArchiCorner)
