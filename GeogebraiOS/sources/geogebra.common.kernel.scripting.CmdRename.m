//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdRename.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/LabelManager.h"
#include "geogebra/common/kernel/scripting/CmdRename.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/Error.h"

@implementation GeogebraCommonKernelScriptingCmdRename

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdRename_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  {
    jboolean oldMacroMode;
    IOSObjectArray *args;
    switch (n) {
      case 2:
      oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
      [cons_ setSuppressLabelCreationWithBoolean:YES];
      args = [c getArguments];
      GeogebraCommonKernelCommandsCmdScripting_setAndConsume_arg_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(args))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()]);
      [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(args, 0))) resolveVariables];
      IOSObjectArray_Set(arg_, 0, IOSObjectArray_Get(nil_chk([self resArgWithGeogebraCommonKernelArithmeticExpressionNode:IOSObjectArray_Get(args, 0)]), 0));
      @try {
        [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(args, 1))) resolveVariables];
        IOSObjectArray_Set(arg_, 1, IOSObjectArray_Get(nil_chk([self resArgWithGeogebraCommonKernelArithmeticExpressionNode:IOSObjectArray_Get(args, 1)]), 0));
      }
      @catch (JavaLangError *e) {
        IOSObjectArray_SetAndConsume(arg_, 1, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_(cons_, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(args, 1))) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]));
      }
      [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 1))) isGeoText]) {
        GeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(arg_, 0);
        if (GeogebraCommonKernelGeosLabelManager_checkNameWithGeogebraCommonKernelGeosGeoElement_withNSString_(geo, [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(arg_, 1), [GeogebraCommonKernelGeosGeoText class])))) getTextString])) {
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) renameWithNSString:[((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(arg_, 1), [GeogebraCommonKernelGeosGeoText class])))) getTextString]];
          [geo updateRepaint];
          return;
        }
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 1)];
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 1)];
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdRename", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x14, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdRename = { 2, "CmdRename", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdRename;
}

@end

void GeogebraCommonKernelScriptingCmdRename_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdRename *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdRename *new_GeogebraCommonKernelScriptingCmdRename_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdRename *self = [GeogebraCommonKernelScriptingCmdRename alloc];
  GeogebraCommonKernelScriptingCmdRename_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdRename)
