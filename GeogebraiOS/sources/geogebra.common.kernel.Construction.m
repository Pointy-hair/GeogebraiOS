//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/Construction.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/euclidian/event/PointerEventType.h"
#include "geogebra/common/io/MyXMLio.h"
#include "geogebra/common/kernel/AlgoCasCellInterface.h"
#include "geogebra/common/kernel/CASException.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/ConstructionDefaults.h"
#include "geogebra/common/kernel/EuclidianViewCE.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Macro.h"
#include "geogebra/common/kernel/NameDescriptionComparator.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/UndoManager.h"
#include "geogebra/common/kernel/algos/AlgoCasBase.h"
#include "geogebra/common/kernel/algos/AlgoDependentNumber.h"
#include "geogebra/common/kernel/algos/AlgoDistancePoints.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgorithmSet.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/cas/AlgoUsingTempCASalgo.h"
#include "geogebra/common/kernel/cas/UsesCAS.h"
#include "geogebra/common/kernel/geos/GeoAxis.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/kernelND/GeoAxisND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/optimization/ExtremumFinder.h"
#include "geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "geogebra/common/kernel/prover/AlgoProve.h"
#include "geogebra/common/kernel/prover/AlgoProveDetails.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/AppCompanion.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/main/SelectionManager.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/io/PrintStream.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelConstruction () {
 @public
  JavaUtilArrayList *usedMacros_;
  NSString *title_, *author_, *date_;
  IOSObjectArray *worksheetText_;
  jboolean showOnlyBreakpoints__;
  jint step_;
  jboolean supressLabelCreation_;
  JavaUtilHashMap *geoSetsTypeMap_;
  JavaUtilArrayList *ceList_;
  JavaUtilArrayList *algoList_;
  JavaUtilArrayList *euclidianViewCE_;
  JavaUtilArrayList *corner5Algos_;
  JavaUtilTreeSet *geoSetConsOrder_;
  JavaUtilTreeSet *geoSetLabelOrder_;
  JavaUtilTreeSet *geoSetWithCasCells_;
  JavaUtilTreeSet *randomElements_;
  jboolean collectRedefineCalls_;
  JavaUtilHashMap *redefineMap_;
  GeogebraCommonKernelGeosGeoElement *keepGeo_;
  JavaUtilArrayList *latexGeos_;
  GeogebraCommonKernelGeosGeoAxis *xAxis_, *yAxis_;
  NSString *xAxisLocalName_, *yAxisLocalName_;
  GeogebraCommonKernelGeosGeoPoint *origin_;
  jboolean undoEnabled_;
  jboolean isGettingXMLForReplace__;
  jboolean isRemovingGeoToReplaceIt__;
  GeogebraCommonIoMyXMLio *xmlio_;
  GeogebraCommonKernelGeosGeoElement *outputGeo_;
  JavaUtilTreeSet *registredFV_;
  jboolean fileLoading_;
  jboolean updateConstructionRunning_;
  JavaUtilTreeSet *casDummies_;
  GeogebraCommonKernelAlgosAlgorithmSet *algoSetCurrentlyUpdated_;
  jboolean spreadsheetTraces_;
  jboolean allowUnboundedAngles_;
  JavaUtilArrayList *casAlgos_;
}

- (void)addToGeoSetsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (JavaUtilTreeSet *)createTypeSetWithGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)type;

- (void)removeFromGeoSetsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (GeogebraCommonKernelGeosGeoElement *)checkConstructionStepWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (void)updateConstructionOrderWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldGeo
                               withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)newGeo;

- (void)buildConstructionWithJavaLangStringBuilder:(JavaLangStringBuilder *)consXML;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, usedMacros_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, title_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, author_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, date_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, worksheetText_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, geoSetsTypeMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, ceList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, algoList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, euclidianViewCE_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, corner5Algos_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, geoSetConsOrder_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, geoSetLabelOrder_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, geoSetWithCasCells_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, randomElements_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, redefineMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, keepGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, latexGeos_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, xAxis_, GeogebraCommonKernelGeosGeoAxis *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, yAxis_, GeogebraCommonKernelGeosGeoAxis *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, xAxisLocalName_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, yAxisLocalName_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, origin_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, xmlio_, GeogebraCommonIoMyXMLio *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, outputGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, registredFV_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, casDummies_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, algoSetCurrentlyUpdated_, GeogebraCommonKernelAlgosAlgorithmSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelConstruction, casAlgos_, JavaUtilArrayList *)

__attribute__((unused)) static GeogebraCommonKernelConstructionDefaults *GeogebraCommonKernelConstruction_getConstructionDefaults(GeogebraCommonKernelConstruction *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelConstruction_updateAllConstructionProtocolAlgorithms(GeogebraCommonKernelConstruction *self);

__attribute__((unused)) static void GeogebraCommonKernelConstruction_updateAllFreeRandomGeosNoCascade(GeogebraCommonKernelConstruction *self);

__attribute__((unused)) static void GeogebraCommonKernelConstruction_addToGeoSetsWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static JavaUtilTreeSet *GeogebraCommonKernelConstruction_createTypeSetWithGeogebraCommonPluginGeoClassEnum_(GeogebraCommonKernelConstruction *self, GeogebraCommonPluginGeoClassEnum *type);

__attribute__((unused)) static void GeogebraCommonKernelConstruction_removeFromGeoSetsWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelConstruction_checkConstructionStepWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void GeogebraCommonKernelConstruction_updateConstructionOrderWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *self, GeogebraCommonKernelGeosGeoElement *oldGeo, GeogebraCommonKernelGeosGeoElement *newGeo);

__attribute__((unused)) static void GeogebraCommonKernelConstruction_buildConstructionWithJavaLangStringBuilder_(GeogebraCommonKernelConstruction *self, JavaLangStringBuilder *consXML);

__attribute__((unused)) static void GeogebraCommonKernelConstruction_ConstantsEnum_initWithNSString_withInt_(GeogebraCommonKernelConstruction_ConstantsEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelConstruction_ConstantsEnum *new_GeogebraCommonKernelConstruction_ConstantsEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation GeogebraCommonKernelConstruction

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)k {
  GeogebraCommonKernelConstruction_initWithGeogebraCommonKernelKernel_(self, k);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)k
              withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)parentConstruction {
  GeogebraCommonKernelConstruction_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(self, k, parentConstruction);
  return self;
}

- (void)newConstructionDefaults {
  GeogebraCommonKernelConstruction_setAndConsume_consDefaults_(self, new_GeogebraCommonKernelConstructionDefaults_initWithGeogebraCommonKernelConstruction_(self));
}

- (GeogebraCommonKernelGeosGeoElement *)getKeepGeo {
  return keepGeo_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getOrigin {
  if (origin_ == nil) {
    GeogebraCommonKernelConstruction_setAndConsume_origin_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(self));
    [origin_ setCoordsWithDouble:0.0 withDouble:0.0 withDouble:1.0];
  }
  return origin_;
}

- (GeogebraCommonKernelGeosGeoAxis *)getXAxis {
  return xAxis_;
}

- (GeogebraCommonKernelGeosGeoAxis *)getYAxis {
  return yAxis_;
}

- (void)initAxis {
  GeogebraCommonKernelConstruction_setAndConsume_xAxis_(self, new_GeogebraCommonKernelGeosGeoAxis_initWithGeogebraCommonKernelConstruction_withInt_(self, GeogebraCommonKernelKernelNDGeoAxisND_X_AXIS));
  GeogebraCommonKernelConstruction_setAndConsume_yAxis_(self, new_GeogebraCommonKernelGeosGeoAxis_initWithGeogebraCommonKernelConstruction_withInt_(self, GeogebraCommonKernelKernelNDGeoAxisND_Y_AXIS));
}

- (GeogebraCommonKernelConstruction_ConstantsEnum *)isConstantElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (geo == xAxis_) return GeogebraCommonKernelConstruction_ConstantsEnum_get_X_AXIS();
  if (geo == yAxis_) return GeogebraCommonKernelConstruction_ConstantsEnum_get_Y_AXIS();
  return GeogebraCommonKernelConstruction_ConstantsEnum_get_NOT();
}

- (void)updateLocalAxesNames {
  [((JavaUtilHashMap *) nil_chk(geoTable_)) removeWithId:xAxisLocalName_];
  [geoTable_ removeWithId:yAxisLocalName_];
  GeogebraCommonMainApp *app = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication];
  GeogebraCommonKernelConstruction_set_xAxisLocalName_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getPlainWithNSString:@"xAxis"]);
  GeogebraCommonKernelConstruction_set_yAxisLocalName_(self, [app getPlainWithNSString:@"yAxis"]);
  [geoTable_ putWithId:xAxisLocalName_ withId:xAxis_];
  [geoTable_ putWithId:yAxisLocalName_ withId:yAxis_];
}

- (GeogebraCommonKernelConstructionDefaults *)getConstructionDefaults {
  return GeogebraCommonKernelConstruction_getConstructionDefaults(self);
}

- (NSString *)getAuthor {
  return (author_ != nil) ? author_ : @"";
}

- (NSString *)getDate {
  return (date_ != nil) ? date_ : @"";
}

- (NSString *)getTitle {
  return (title_ != nil) ? title_ : @"";
}

- (void)setAuthorWithNSString:(NSString *)string {
  GeogebraCommonKernelConstruction_set_author_(self, string);
}

- (void)setDateWithNSString:(NSString *)string {
  GeogebraCommonKernelConstruction_set_date_(self, string);
}

- (void)setTitleWithNSString:(NSString *)string {
  GeogebraCommonKernelConstruction_set_title_(self, string);
}

- (NSString *)getWorksheetTextWithInt:(jint)i {
  return (IOSObjectArray_Get(nil_chk(worksheetText_), i) != nil) ? IOSObjectArray_Get(worksheetText_, i) : @"";
}

- (void)setWorksheetTextWithNSString:(NSString *)text
                             withInt:(jint)i {
  IOSObjectArray_Set(nil_chk(worksheetText_), i, text);
}

- (jboolean)worksheetTextDefined {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(worksheetText_))->size_; i++) {
    if (IOSObjectArray_Get(worksheetText_, i) != nil && ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(worksheetText_, i))) length]) > 0) return YES;
  }
  return NO;
}

- (GeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (void)setSuppressLabelCreationWithBoolean:(jboolean)flag {
  supressLabelCreation_ = flag;
}

- (jboolean)isSuppressLabelsActive {
  return supressLabelCreation_;
}

- (GeogebraCommonMainApp *)getApplication {
  return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication];
}

- (jboolean)isEmpty {
  return [((JavaUtilArrayList *) nil_chk(ceList_)) isEmpty];
}

- (jint)steps {
  return [((JavaUtilArrayList *) nil_chk(ceList_)) size];
}

- (GeogebraCommonKernelGeosGeoElement *)getLastGeoElement {
  if ([((JavaUtilTreeSet *) nil_chk(geoSetWithCasCells_)) size] > 0) {
    return [geoSetWithCasCells_ last];
  }
  return nil;
}

- (GeogebraCommonKernelGeosGeoCasCell *)getCasCellWithInt:(jint)row {
  if (row < 0) {
    return nil;
  }
  jint counter = 0;
  for (GeogebraCommonKernelAlgosConstructionElement * __strong ce in nil_chk(ceList_)) {
    if ([ce isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]]) {
      if (counter == row) {
        return (GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoCasCell class]);
      }
      ++counter;
    }
    else if ([GeogebraCommonKernelAlgoCasCellInterface_class_() isInstance:ce]) {
      if (counter == row) {
        return [((id<GeogebraCommonKernelAlgoCasCellInterface>) nil_chk(((id<GeogebraCommonKernelAlgoCasCellInterface>) check_protocol_cast(ce, @protocol(GeogebraCommonKernelAlgoCasCellInterface))))) getCasCell];
      }
      ++counter;
    }
  }
  return nil;
}

- (GeogebraCommonKernelGeosGeoCasCell *)getLastCasCell {
  GeogebraCommonKernelGeosGeoCasCell *lastCell = nil;
  for (GeogebraCommonKernelAlgosConstructionElement * __strong ce in nil_chk(ceList_)) {
    if ([ce isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]]) {
      lastCell = (GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoCasCell class]);
    }
    else if ([GeogebraCommonKernelAlgoCasCellInterface_class_() isInstance:ce]) {
      lastCell = [((id<GeogebraCommonKernelAlgoCasCellInterface>) nil_chk(((id<GeogebraCommonKernelAlgoCasCellInterface>) check_protocol_cast(ce, @protocol(GeogebraCommonKernelAlgoCasCellInterface))))) getCasCell];
    }
  }
  return lastCell;
}

- (void)setCasCellRowWithGeogebraCommonKernelGeosGeoCasCell:(GeogebraCommonKernelGeosGeoCasCell *)casCell
                                                    withInt:(jint)n {
  GeogebraCommonKernelGeosGeoCasCell *nthCasCell = [self getCasCellWithInt:n];
  if (nthCasCell == nil) {
    [self addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:casCell withBoolean:NO];
  }
  else {
    [self addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:casCell withInt:[nthCasCell getConstructionIndex]];
  }
  [self addToGeoSetWithCasCellsWithGeogebraCommonKernelGeosGeoCasCell:casCell];
}

- (void)addLocalVariableWithNSString:(NSString *)varname
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (localVariableTable_ == nil) GeogebraCommonKernelConstruction_setAndConsume_localVariableTable_(self, new_JavaUtilHashMap_init());
  [((JavaUtilHashMap *) nil_chk(localVariableTable_)) putWithId:varname withId:geo];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLocalVariableLabelWithNSString:varname];
}

- (void)removeLocalVariableWithNSString:(NSString *)varname {
  if (localVariableTable_ != nil) {
    GeogebraCommonKernelGeosGeoElement *geo = [localVariableTable_ removeWithId:varname];
    if (geo != nil) [geo undoLocalVariableLabel];
  }
}

- (GeogebraCommonKernelGeosGeoElement *)geoTableVarLookupWithNSString:(NSString *)label {
  GeogebraCommonKernelGeosGeoElement *ret = [((JavaUtilHashMap *) nil_chk(geoTable_)) getWithId:label];
  return ret;
}

- (void)setShowOnlyBreakpointsWithBoolean:(jboolean)flag {
  showOnlyBreakpoints__ = flag;
}

- (jboolean)showOnlyBreakpoints {
  return showOnlyBreakpoints__;
}

- (void)updateConstructionIndexWithInt:(jint)pos {
  if (pos < 0) return;
  jint size = [((JavaUtilArrayList *) nil_chk(ceList_)) size];
  for (jint i = pos; i < size; ++i) {
    [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk([ceList_ getWithInt:i])) setConstructionIndexWithInt:i];
  }
}

- (jboolean)updateAllConstructionProtocolAlgorithms {
  return GeogebraCommonKernelConstruction_updateAllConstructionProtocolAlgorithms(self);
}

- (void)addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:(GeogebraCommonKernelAlgosConstructionElement *)ce
                                                                      withInt:(jint)index {
  ++step_;
  [((JavaUtilArrayList *) nil_chk(ceList_)) addWithInt:index withId:ce];
  [self updateConstructionIndexWithInt:index];
  if ([ce isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]]) [self updateCasCellRows];
  GeogebraCommonKernelConstruction_updateAllConstructionProtocolAlgorithms(self);
}

- (void)updateCasCellRows {
  jint counter = 0;
  for (GeogebraCommonKernelAlgosConstructionElement * __strong ce in nil_chk(ceList_)) {
    if ([ce isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]]) {
      [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoCasCell class])))) setRowNumberWithInt:counter];
      counter++;
    }
    else if ([GeogebraCommonKernelAlgoCasCellInterface_class_() isInstance:ce]) {
      [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk([((id<GeogebraCommonKernelAlgoCasCellInterface>) nil_chk(((id<GeogebraCommonKernelAlgoCasCellInterface>) check_protocol_cast(ce, @protocol(GeogebraCommonKernelAlgoCasCellInterface))))) getCasCell])) setRowNumberWithInt:counter];
      counter++;
    }
  }
  for (GeogebraCommonKernelAlgosConstructionElement * __strong ce in ceList_) {
    if ([ce isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]]) {
      [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoCasCell class])))) updateInputStringWithRowReferences];
    }
    else if ([GeogebraCommonKernelAlgoCasCellInterface_class_() isInstance:ce]) {
      [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk([((id<GeogebraCommonKernelAlgoCasCellInterface>) nil_chk(((id<GeogebraCommonKernelAlgoCasCellInterface>) check_protocol_cast(ce, @protocol(GeogebraCommonKernelAlgoCasCellInterface))))) getCasCell])) updateInputStringWithRowReferences];
    }
  }
}

- (jboolean)moveInConstructionListWithInt:(jint)fromIndex
                                  withInt:(jint)toIndex {
  GeogebraCommonKernelAlgosConstructionElement *ce = [((JavaUtilArrayList *) nil_chk(ceList_)) getWithInt:fromIndex];
  jboolean change = fromIndex != toIndex && [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) getMinConstructionIndex] <= toIndex && toIndex <= [ce getMaxConstructionIndex];
  if (change) {
    if ([ce isKindOfClass:[GeogebraCommonKernelGeosGeoElement class]]) {
      GeogebraCommonMainApp_debugWithNSString_(@"TODO: update Algebra View");
    }
    [ceList_ removeWithInt:fromIndex];
    [ceList_ addWithInt:toIndex withId:ce];
    [self updateConstructionIndexWithInt:JavaLangMath_minWithInt_withInt_(toIndex, fromIndex)];
    if (fromIndex <= step_ && step_ < toIndex) {
      --step_;
      [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) notifyRemove];
    }
    else if (toIndex <= step_ && step_ < fromIndex) {
      ++step_;
      [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) notifyAdd];
    }
    if ([ce isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]] || [GeogebraCommonKernelAlgoCasCellInterface_class_() isInstance:ce]) [self updateCasCellRows];
    GeogebraCommonKernelConstruction_updateAllConstructionProtocolAlgorithms(self);
  }
  return change;
}

- (void)addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:(GeogebraCommonKernelAlgosConstructionElement *)ce
                                                                  withBoolean:(jboolean)checkContains {
  if (supressLabelCreation_) return;
  if (checkContains && [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isInConstructionList]) return;
  [self addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:ce withInt:step_ + 1];
}

- (void)removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:(GeogebraCommonKernelAlgosConstructionElement *)ce {
  jint pos = [((JavaUtilArrayList *) nil_chk(ceList_)) indexOfWithId:ce];
  if (pos == -1) return;
  else if (pos <= step_) {
    [ceList_ removeWithId:ce];
    [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) setConstructionIndexWithInt:-1];
    --step_;
  }
  else {
    [ceList_ removeWithId:ce];
    [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) setConstructionIndexWithInt:-1];
  }
  [self updateConstructionIndexWithInt:pos];
  if ([ce isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]] || ([GeogebraCommonKernelAlgoCasCellInterface_class_() isInstance:ce])) [self updateCasCellRows];
  GeogebraCommonKernelConstruction_updateAllConstructionProtocolAlgorithms(self);
}

- (void)addToAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algo {
  [((JavaUtilArrayList *) nil_chk(algoList_)) addWithId:algo];
}

- (void)removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algo {
  [((JavaUtilArrayList *) nil_chk(algoList_)) removeWithId:algo];
}

- (jboolean)moveInConstructionListWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                 withInt:(jint)toIndex {
  GeogebraCommonKernelAlgosAlgoElement *algoParent = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm];
  jint fromIndex = (algoParent == nil) ? [((JavaUtilArrayList *) nil_chk(ceList_)) indexOfWithId:geo] : [((JavaUtilArrayList *) nil_chk(ceList_)) indexOfWithId:algoParent];
  if (fromIndex >= 0) {
    return [self moveInConstructionListWithInt:fromIndex withInt:toIndex];
  }
  return NO;
}

- (jboolean)isInConstructionListWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent]) {
    return [geo isInConstructionList];
  }
  return [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) isInConstructionList];
}

- (void)updateAllAlgorithms {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(algoList_)) size]; ++i) {
    GeogebraCommonKernelAlgosAlgoElement *algo = [algoList_ getWithInt:i];
    [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) update];
  }
}

- (void)registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:(id<GeogebraCommonKernelEuclidianViewCE>)elem {
  if (![((JavaUtilArrayList *) nil_chk(euclidianViewCE_)) containsWithId:elem]) [euclidianViewCE_ addWithId:elem];
}

- (void)unregisterEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:(id<GeogebraCommonKernelEuclidianViewCE>)elem {
  [((JavaUtilArrayList *) nil_chk(euclidianViewCE_)) removeWithId:elem];
  if (self->corner5Algos_ != nil) {
    [self->corner5Algos_ removeWithId:elem];
  }
}

- (jboolean)notifyEuclidianViewCEWithBoolean:(jboolean)onlyCorner5 {
  jboolean didUpdate = NO;
  JavaUtilArrayList *toUpdate = onlyCorner5 ? self->corner5Algos_ : self->euclidianViewCE_;
  if (toUpdate == nil) {
    return NO;
  }
  jint size = [toUpdate size];
  GeogebraCommonKernelAlgosAlgorithmSet *updateSet = nil;
  for (jint i = 0; i < size; i++) {
    didUpdate = YES;
    jboolean needsUpdateCascade = [((id<GeogebraCommonKernelEuclidianViewCE>) nil_chk([toUpdate getWithInt:i])) euclidianViewUpdate];
    if (needsUpdateCascade) {
      if (updateSet == nil) updateSet = [new_GeogebraCommonKernelAlgosAlgorithmSet_init() autorelease];
      if ([[toUpdate getWithInt:i] isKindOfClass:[GeogebraCommonKernelGeosGeoElement class]]) {
        GeogebraCommonKernelGeosGeoElement *geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([toUpdate getWithInt:i], [GeogebraCommonKernelGeosGeoElement class]);
        [((GeogebraCommonKernelAlgosAlgorithmSet *) nil_chk(updateSet)) addAllWithGeogebraCommonKernelAlgosAlgorithmSet:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAlgoUpdateSet]];
      }
      else if ([[toUpdate getWithInt:i] isKindOfClass:[GeogebraCommonKernelAlgosAlgoElement class]]) {
        GeogebraCommonKernelAlgosAlgoElement *algo = (GeogebraCommonKernelAlgosAlgoElement *) check_class_cast([toUpdate getWithInt:i], [GeogebraCommonKernelAlgosAlgoElement class]);
        IOSObjectArray *geos = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutput];
        {
          IOSObjectArray *a__ = geos;
          GeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            GeogebraCommonKernelGeosGeoElement *geo = *b__++;
            [((GeogebraCommonKernelAlgosAlgorithmSet *) nil_chk(updateSet)) addAllWithGeogebraCommonKernelAlgosAlgorithmSet:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAlgoUpdateSet]];
          }
        }
      }
    }
  }
  if (updateSet != nil) [updateSet updateAll];
  return didUpdate;
}

- (jboolean)hasEuclidianViewCE {
  return [((JavaUtilArrayList *) nil_chk(euclidianViewCE_)) size] > 0;
}

- (void)updateAllRandomGeos {
  if (randomElements_ == nil) return;
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(randomElements_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *num = [it next];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(num)) updateRandomGeo];
  }
}

- (void)updateAllFreeRandomGeosNoCascade {
  GeogebraCommonKernelConstruction_updateAllFreeRandomGeosNoCascade(self);
}

- (void)addRandomGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)num {
  if (randomElements_ == nil) GeogebraCommonKernelConstruction_setAndConsume_randomElements_(self, new_JavaUtilTreeSet_init());
  [((JavaUtilTreeSet *) nil_chk(randomElements_)) addWithId:num];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(num)) setRandomGeoWithBoolean:YES];
}

- (void)removeRandomGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)num {
  if (randomElements_ != nil) [randomElements_ removeWithId:num];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(num)) setRandomGeoWithBoolean:NO];
}

- (void)updateConstruction {
  updateConstructionRunning_ = YES;
  @try {
    jint size = [((JavaUtilArrayList *) nil_chk(ceList_)) size];
    for (jint i = 0; i < size; ++i) {
      GeogebraCommonKernelAlgosConstructionElement *ce = [ceList_ getWithInt:i];
      if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isIndependent]) {
        [ce update];
      }
    }
    GeogebraCommonKernelConstruction_updateAllFreeRandomGeosNoCascade(self);
    size = [((JavaUtilArrayList *) nil_chk(algoList_)) size];
    for (jint i = 0; i < size; ++i) {
      GeogebraCommonKernelAlgosAlgoElement *algo = [algoList_ getWithInt:i];
      [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) initForNearToRelationship];
    }
    JavaUtilArrayList *tempList = [new_JavaUtilArrayList_initWithJavaUtilCollection_(algoList_) autorelease];
    for (jint i = 0; i < size; ++i) {
      GeogebraCommonKernelAlgosAlgoElement *algo = [tempList getWithInt:i];
      [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) initForNearToRelationship];
      [algo update];
    }
  }
  @finally {
    updateConstructionRunning_ = NO;
  }
}

- (void)updateCasCells {
  updateConstructionRunning_ = YES;
  @try {
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(ceList_)) size]; ++i) {
      GeogebraCommonKernelAlgosConstructionElement *ce = [ceList_ getWithInt:i];
      if (([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isGeoElement] && [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoElement class])) isGeoCasCell]) || (([ce isKindOfClass:[GeogebraCommonKernelAlgosAlgoElement class]]) && [GeogebraCommonKernelAlgoCasCellInterface_class_() isInstance:ce])) {
        [ce update];
      }
    }
  }
  @finally {
    updateConstructionRunning_ = NO;
  }
}

- (void)getConstructionXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                        withBoolean:(jboolean)getListenersToo {
  @try {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<construction title=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self getTitle]);
    [sb appendWithNSString:@"\" author=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self getAuthor]);
    [sb appendWithNSString:@"\" date=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self getDate]);
    [sb appendWithNSString:@"\">\n"];
    if ([self worksheetTextDefined]) {
      [sb appendWithNSString:@"\t<worksheetText above=\""];
      GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self getWorksheetTextWithInt:0]);
      [sb appendWithNSString:@"\" below=\""];
      GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self getWorksheetTextWithInt:1]);
      [sb appendWithNSString:@"\"/>\n"];
    }
    [self getConstructionElementsXMLWithJavaLangStringBuilder:sb withBoolean:getListenersToo];
    [sb appendWithNSString:@"</construction>\n"];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

- (void)getConstructionElementsXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                withBoolean:(jboolean)getListenersToo {
  GeogebraCommonKernelAlgosConstructionElement *ce;
  jint size = [((JavaUtilArrayList *) nil_chk(ceList_)) size];
  for (jint i = 0; i < size; ++i) {
    ce = [ceList_ getWithInt:i];
    [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) getXMLWithBoolean:getListenersToo withJavaLangStringBuilder:sb];
  }
}

- (void)getConstructionElementsXML_OGPWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                         withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)statement {
  GeogebraCommonKernelAlgosConstructionElement *ce;
  jint size = [((JavaUtilArrayList *) nil_chk(ceList_)) size];
  for (jint i = 0; i < size; ++i) {
    ce = [ceList_ getWithInt:i];
    if (!([ce isKindOfClass:[GeogebraCommonKernelProverAlgoProve class]]) && !([ce isKindOfClass:[GeogebraCommonKernelProverAlgoProveDetails class]])) {
      [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) getXML_OGPWithJavaLangStringBuilder:sb];
    }
  }
  [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((JavaUtilArrayList *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(statement)) getAlgorithmList])) getWithInt:0])) getXML_OGPWithJavaLangStringBuilder:sb];
}

- (void)getConstructionRegressionOutWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_regression_();
  @try {
    GeogebraCommonKernelAlgosConstructionElement *ce;
    jint size = [((JavaUtilArrayList *) nil_chk(ceList_)) size];
    for (jint i = 0; i < size; ++i) {
      ce = [ceList_ getWithInt:i];
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("$$", [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) getNameDescription], @" = ")];
      if ([ce isKindOfClass:[GeogebraCommonKernelGeosGeoElement class]]) {
        [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoElement class])) getXMLtagsMinimalWithJavaLangStringBuilder:sb withGeogebraCommonKernelStringTemplate:tpl];
      }
      else if ([ce isKindOfClass:[GeogebraCommonKernelAlgosAlgoElement class]]) {
        [sb appendWithNSString:[((GeogebraCommonKernelAlgosAlgoElement *) check_class_cast(ce, [GeogebraCommonKernelAlgosAlgoElement class])) getCommandDescriptionWithGeogebraCommonKernelStringTemplate:tpl]];
        [sb appendWithNSString:@" == "];
        [sb appendWithNSString:[((GeogebraCommonKernelAlgosAlgoElement *) check_class_cast(ce, [GeogebraCommonKernelAlgosAlgoElement class])) getAlgebraDescriptionRegrOutWithGeogebraCommonKernelStringTemplate:tpl]];
      }
      [sb appendWithNSString:@"\n"];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
  }
}

- (jboolean)isUndoEnabled {
  return undoEnabled_;
}

- (void)setUndoEnabledWithBoolean:(jboolean)b {
  undoEnabled_ = b;
}

- (GeogebraCommonKernelAlgosConstructionElement *)getConstructionElementWithInt:(jint)index {
  if (index < 0 || index >= [((JavaUtilArrayList *) nil_chk(ceList_)) size]) return nil;
  return [((JavaUtilArrayList *) nil_chk(ceList_)) getWithInt:index];
}

- (GeogebraCommonKernelGeosGeoElement *)getFirstGeo {
  GeogebraCommonKernelAlgosConstructionElement *ce = nil;
  GeogebraCommonKernelGeosGeoElement *geo = nil;
  jint index = 0;
  while (index < [((JavaUtilArrayList *) nil_chk(ceList_)) size] && geo == nil) {
    ce = [ceList_ getWithInt:index];
    if ([ce isKindOfClass:[GeogebraCommonKernelGeosGeoElement class]]) geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoElement class]);
    index++;
  }
  return geo;
}

- (JavaUtilTreeSet *)getGeoSetConstructionOrder {
  return geoSetConsOrder_;
}

- (JavaUtilTreeSet *)getGeoSetWithCasCellsConstructionOrder {
  return geoSetWithCasCells_;
}

- (JavaUtilTreeSet *)getGeoSetLabelOrder {
  return geoSetLabelOrder_;
}

- (void)startCollectingRedefineCalls {
  collectRedefineCalls_ = YES;
  if (redefineMap_ == nil) GeogebraCommonKernelConstruction_setAndConsume_redefineMap_(self, new_JavaUtilHashMap_init());
  [((JavaUtilHashMap *) nil_chk(redefineMap_)) clear];
}

- (void)stopCollectingRedefineCalls {
  collectRedefineCalls_ = NO;
  if (redefineMap_ != nil) [redefineMap_ clear];
}

- (void)replaceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldGeo
               withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)newGeo {
  if (oldGeo == nil || newGeo == nil || oldGeo == newGeo) return;
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(oldGeo)) isIndependent] && [newGeo isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo)) isIndependent] && ![newGeo isDefined]) {
    [oldGeo setUndefined];
    [oldGeo updateRepaint];
    return;
  }
  if ([((NSString *) nil_chk([oldGeo getCommandDescriptionWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_maxPrecision_()])) isEqual:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo)) getCommandDescriptionWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_maxPrecision_()]] && [oldGeo getParentAlgorithm] != nil) {
    JavaUtilArrayList *ae = [new_JavaUtilArrayList_init() autorelease];
    [ae addWithId:[oldGeo getParentAlgorithm]];
    [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([oldGeo getParentAlgorithm])) updateUnlabeledRandomGeos];
    GeogebraCommonKernelAlgosAlgoElement_updateCascadeAlgosWithJavaUtilArrayList_(ae);
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
    return;
  }
  if (![oldGeo hasChildren]) {
    NSString *oldGeoLabel = [oldGeo getLabelSimple];
    [newGeo moveDependenciesWithGeogebraCommonKernelGeosGeoElement:oldGeo];
    isRemovingGeoToReplaceIt__ = YES;
    [oldGeo remove];
    isRemovingGeoToReplaceIt__ = NO;
    [newGeo setAllVisualPropertiesWithGeogebraCommonKernelGeosGeoElement:oldGeo withBoolean:NO];
    if ([newGeo isIndependent]) [self addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:newGeo withBoolean:YES];
    else {
      GeogebraCommonKernelAlgosAlgoElement *parentAlgo = [newGeo getParentAlgorithm];
      [self addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:parentAlgo withBoolean:YES];
      GeogebraCommonKernelGeosGeoElement_setLabelsWithNSString_withGeogebraCommonKernelGeosGeoElementArray_(oldGeoLabel, [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(parentAlgo)) getOutput]);
    }
    [newGeo setLoadedLabelWithNSString:oldGeoLabel];
    if ([newGeo isGeoText]) [newGeo updateRepaint];
    return;
  }
  if ([newGeo isChildOfWithGeogebraCommonKernelGeosGeoElement:oldGeo]) {
    if ([oldGeo isIndependent] && [oldGeo isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
      [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(oldGeo, [GeogebraCommonKernelGeosGeoNumeric class])) setValueWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(newGeo, [GeogebraCommonKernelGeosGeoNumeric class])) getDouble]];
      [oldGeo updateRepaint];
      [newGeo remove];
      return;
    }
    else if ([oldGeo isIndependent] && [oldGeo isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) {
      [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(oldGeo, [GeogebraCommonKernelGeosGeoPoint class])) setWithGeogebraCommonKernelGeosGeoElement:newGeo];
      [oldGeo updateRepaint];
      [newGeo remove];
      return;
    }
    else if ([oldGeo isIndependent] && [oldGeo isKindOfClass:[GeogebraCommonKernelGeosGeoVector class]]) {
      [((GeogebraCommonKernelGeosGeoVector *) check_class_cast(oldGeo, [GeogebraCommonKernelGeosGeoVector class])) setWithGeogebraCommonKernelGeosGeoElement:newGeo];
      [oldGeo updateRepaint];
      [newGeo remove];
      return;
    }
    else if ([oldGeo isIndependent] && [oldGeo isKindOfClass:[GeogebraCommonKernelGeosGeoBoolean class]]) {
      [((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(oldGeo, [GeogebraCommonKernelGeosGeoBoolean class])) setWithGeogebraCommonKernelGeosGeoElement:newGeo];
      [oldGeo updateRepaint];
      [newGeo remove];
      return;
    }
    else if ([oldGeo isIndependent] && [oldGeo isGeoPoint] && [oldGeo isGeoElement3D]) {
      [oldGeo setWithGeogebraCommonKernelGeosGeoElement:newGeo];
      [oldGeo updateRepaint];
      [newGeo remove];
      return;
    }
    else {
      [self restoreCurrentUndoInfo];
      @throw [new_GeogebraCommonKernelCircularDefinitionException_init() autorelease];
    }
  }
  [self prepareReplaceWithGeogebraCommonKernelGeosGeoElement:oldGeo withGeogebraCommonKernelGeosGeoElement:newGeo];
  if (collectRedefineCalls_) {
    [((JavaUtilHashMap *) nil_chk(redefineMap_)) putWithId:oldGeo withId:newGeo];
    return;
  }
  GeogebraCommonMainApp *app = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication];
  [((GeogebraCommonMainAppCompanion *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getCompanion])) storeViewCreators];
  GeogebraCommonMainSelectionManager *selection = [((GeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) getSelectionManager];
  jboolean moveMode = [app getMode] == GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE && [((JavaUtilArrayList *) nil_chk([((GeogebraCommonMainSelectionManager *) nil_chk(selection)) getSelectedGeos])) size] > 0;
  NSString *oldSelection = nil;
  if (moveMode) {
    oldSelection = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((JavaUtilArrayList *) nil_chk([((GeogebraCommonMainSelectionManager *) nil_chk(selection)) getSelectedGeos])) getWithInt:0])) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  }
  isGettingXMLForReplace__ = YES;
  JavaLangStringBuilder *consXML = [self getCurrentUndoXMLWithBoolean:NO];
  isGettingXMLForReplace__ = NO;
  consXML = [self doReplaceInXMLWithJavaLangStringBuilder:consXML withGeogebraCommonKernelGeosGeoElement:oldGeo withGeogebraCommonKernelGeosGeoElement:newGeo];
  GeogebraCommonKernelConstruction_buildConstructionWithJavaLangStringBuilder_(self, consXML);
  if (moveMode) {
    GeogebraCommonKernelGeosGeoElement *selGeo = [kernel_ lookupLabelWithNSString:oldSelection];
    [((GeogebraCommonMainSelectionManager *) nil_chk(selection)) addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:selGeo withBoolean:NO withBoolean:YES];
    [((GeogebraCommonEuclidianEuclidianController *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([app getActiveEuclidianView])) getEuclidianController])) handleMovedElementWithGeogebraCommonKernelGeosGeoElement:selGeo withBoolean:NO withGeogebraCommonEuclidianEventPointerEventTypeEnum:GeogebraCommonEuclidianEventPointerEventTypeEnum_get_MOUSE()];
  }
  [((GeogebraCommonMainAppCompanion *) nil_chk([app getCompanion])) recallViewCreators];
}

- (jboolean)isGettingXMLForReplace {
  return isGettingXMLForReplace__;
}

- (jboolean)isRemovingGeoToReplaceIt {
  return isRemovingGeoToReplaceIt__;
}

- (void)processCollectedRedefineCalls {
  collectRedefineCalls_ = NO;
  if (redefineMap_ == nil || [redefineMap_ size] == 0) return;
  JavaLangStringBuilder *consXML = [self getCurrentUndoXMLWithBoolean:NO];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(redefineMap_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *oldGeo = [it next];
    GeogebraCommonKernelGeosGeoElement *newGeo = [redefineMap_ getWithId:oldGeo];
    consXML = [self doReplaceInXMLWithJavaLangStringBuilder:consXML withGeogebraCommonKernelGeosGeoElement:oldGeo withGeogebraCommonKernelGeosGeoElement:newGeo];
  }
  @try {
    GeogebraCommonKernelConstruction_buildConstructionWithJavaLangStringBuilder_(self, consXML);
  }
  @catch (JavaLangException *e) {
    @throw e;
  }
  @finally {
    [self stopCollectingRedefineCalls];
    [((JavaLangStringBuilder *) nil_chk(consXML)) setLengthWithInt:0];
    consXML = nil;
  }
}

- (void)changeCasCellWithGeogebraCommonKernelGeosGeoCasCell:(GeogebraCommonKernelGeosGeoCasCell *)casCell {
  [self setUpdateConstructionRunningWithBoolean:YES];
  [self updateConstructionOrderWithGeogebraCommonKernelGeosGeoCasCell:casCell];
  JavaLangStringBuilder *consXML = [self getCurrentUndoXMLWithBoolean:NO];
  GeogebraCommonKernelConstruction_buildConstructionWithJavaLangStringBuilder_(self, consXML);
  [self setUpdateConstructionRunningWithBoolean:NO];
}

- (JavaLangStringBuilder *)doReplaceInXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)consXML
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldGeo
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)newGeo {
  NSString *oldXML, *newXML;
  GeogebraCommonKernelAlgosAlgoElement *oldGeoAlgo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(oldGeo)) getParentAlgorithm];
  GeogebraCommonKernelAlgosAlgoElement *newGeoAlgo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo)) getParentAlgorithm];
  IOSObjectArray *newGeoInputs = nil;
  if ([newGeo isLabelSet]) {
    if (![((NSString *) nil_chk([oldGeo getLabelSimple])) isEqual:[newGeo getLabelSimple]]) {
      [oldGeo setLabelSimpleWithNSString:[newGeo getLabelSimple]];
      isGettingXMLForReplace__ = YES;
      consXML = [self getCurrentUndoXMLWithBoolean:NO];
      isGettingXMLForReplace__ = NO;
    }
    oldXML = (oldGeoAlgo == nil) ? [oldGeo getXML] : [oldGeoAlgo getXML];
    newXML = @"";
  }
  else {
    [newGeo setLabelSimpleWithNSString:[oldGeo getLabelSimple]];
    newGeo->labelSet_ = YES;
    [newGeo setAllVisualPropertiesWithGeogebraCommonKernelGeosGeoElement:oldGeo withBoolean:NO];
    [newGeo setScriptingWithGeogebraCommonKernelGeosGeoElement:oldGeo];
    if (newGeoAlgo != nil && [newGeoAlgo isNearToAlgorithm]) {
      @try {
        [newGeo setWithGeogebraCommonKernelGeosGeoElement:oldGeo];
      }
      @catch (JavaLangException *e) {
      }
    }
    isGettingXMLForReplace__ = YES;
    oldXML = (oldGeoAlgo == nil) ? [oldGeo getXML] : [oldGeoAlgo getXML];
    if (newGeoAlgo == nil) {
      newXML = [newGeo getXML];
    }
    else {
      newXML = [newGeoAlgo getXML];
      newGeoInputs = [newGeoAlgo getInput];
    }
    isGettingXMLForReplace__ = NO;
  }
  jint pos = [((JavaLangStringBuilder *) nil_chk(consXML)) indexOfWithNSString:oldXML];
  if (pos < 0) {
    [self restoreCurrentUndoInfo];
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"replace failed: oldXML string not found:\n", oldXML));
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_([((GeogebraCommonMainApp *) nil_chk([self getApplication])) getLocalization], @"ReplaceFailed") autorelease];
  }
  jint inputEndPos = -1;
  if (newGeoInputs != nil && newGeoInputs->size_ > 0) {
    jint labelPos = 0;
    for (jint i = 0; i < newGeoInputs->size_; i++) {
      NSString *label = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(newGeoInputs, i))) getLabelSimple];
      if (label != nil) {
        jint labelPos0 = [consXML indexOfWithNSString:JreStrcat("$$C", @"label=\"", label, '"')];
        if (labelPos0 > labelPos) {
          labelPos = labelPos0;
          inputEndPos = [consXML indexOfWithNSString:@"</element>" withInt:labelPos] + 11;
        }
      }
    }
  }
  if (pos >= inputEndPos) {
    [consXML replaceWithInt:pos withInt:pos + ((jint) [((NSString *) nil_chk(oldXML)) length]) withNSString:newXML];
  }
  else {
    [consXML insertWithInt:inputEndPos withNSString:newXML];
    [consXML replaceWithInt:pos withInt:pos + ((jint) [((NSString *) nil_chk(oldXML)) length]) withNSString:@""];
  }
  return consXML;
}

- (void)setStepWithInt:(jint)s {
  if (s == step_ || s < -1 || s >= [((JavaUtilArrayList *) nil_chk(ceList_)) size]) return;
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) setAllowVisibilitySideEffectsWithBoolean:NO];
  jboolean cpara = [kernel_ isNotifyConstructionProtocolViewAboutAddRemoveActive];
  [kernel_ setNotifyConstructionProtocolViewAboutAddRemoveActiveWithBoolean:NO];
  if (s < step_) {
    for (jint i = step_; i >= s + 1; i--) {
      [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk([((JavaUtilArrayList *) nil_chk(ceList_)) getWithInt:i])) notifyRemove];
    }
  }
  else {
    for (jint i = step_ + 1; i <= s; ++i) {
      [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk([((JavaUtilArrayList *) nil_chk(ceList_)) getWithInt:i])) notifyAdd];
    }
  }
  [kernel_ setNotifyConstructionProtocolViewAboutAddRemoveActiveWithBoolean:cpara];
  step_ = s;
  [kernel_ setAllowVisibilitySideEffectsWithBoolean:YES];
  GeogebraCommonKernelConstruction_updateAllConstructionProtocolAlgorithms(self);
}

- (jint)getStep {
  return step_;
}

- (void)putLabelWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (supressLabelCreation_ || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelSimple] == nil) return;
  [((JavaUtilHashMap *) nil_chk(geoTable_)) putWithId:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelSimple] withId:geo];
  GeogebraCommonKernelConstruction_addToGeoSetsWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)removeLabelWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [((JavaUtilHashMap *) nil_chk(geoTable_)) removeWithId:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelSimple]];
  GeogebraCommonKernelConstruction_removeFromGeoSetsWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)addToGeoSetsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelConstruction_addToGeoSetsWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (JavaUtilTreeSet *)getGeoSetLabelOrderWithGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)geoClassType {
  JavaUtilTreeSet *typeSet = [((JavaUtilHashMap *) nil_chk(geoSetsTypeMap_)) getWithId:geoClassType];
  if (typeSet == nil) {
    typeSet = GeogebraCommonKernelConstruction_createTypeSetWithGeogebraCommonPluginGeoClassEnum_(self, geoClassType);
  }
  return typeSet;
}

- (JavaUtilTreeSet *)createTypeSetWithGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)type {
  return GeogebraCommonKernelConstruction_createTypeSetWithGeogebraCommonPluginGeoClassEnum_(self, type);
}

- (void)removeFromGeoSetsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelConstruction_removeFromGeoSetsWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)putCasCellLabelWithGeogebraCommonKernelGeosGeoCasCell:(GeogebraCommonKernelGeosGeoCasCell *)geoCasCell
                                                 withNSString:(NSString *)label {
  if (label == nil) return;
  if (geoCasCellTable_ == nil) GeogebraCommonKernelConstruction_setAndConsume_geoCasCellTable_(self, new_JavaUtilHashMap_init());
  [((JavaUtilHashMap *) nil_chk(geoCasCellTable_)) putWithId:label withId:geoCasCell];
}

- (void)removeCasCellLabelWithNSString:(NSString *)variable {
  if (geoCasCellTable_ != nil) {
    [geoCasCellTable_ removeWithId:variable];
  }
}

- (GeogebraCommonKernelGeosGeoElement *)lookupLabelWithNSString:(NSString *)label {
  return [self lookupLabelWithNSString:label withBoolean:NO];
}

- (GeogebraCommonKernelGeosGeoCasCell *)lookupCasCellLabelWithNSString:(NSString *)label {
  GeogebraCommonKernelGeosGeoCasCell *geoCasCell = nil;
  if (geoCasCellTable_ != nil) {
    geoCasCell = [geoCasCellTable_ getWithId:label];
  }
  return geoCasCell;
}

- (GeogebraCommonKernelGeosGeoCasCell *)lookupCasRowReferenceWithNSString:(NSString *)label {
  if (![((NSString *) nil_chk(label)) hasPrefix:GeogebraCommonKernelArithmeticExpressionNodeConstants_get_CAS_ROW_REFERENCE_PREFIX_()]) {
    return nil;
  }
  jint rowRef = -1;
  @try {
    rowRef = JavaLangInteger_parseIntWithNSString_([label substring:1]);
  }
  @catch (JavaLangNumberFormatException *e) {
    GeogebraCommonUtilDebugLog_errorWithNSString_(JreStrcat("$$", @"Malformed CAS row reference: ", label));
    GeogebraCommonKernelCASException *ex = [new_GeogebraCommonKernelCASException_initWithNSString_(@"CAS.InvalidReferenceError") autorelease];
    [ex setKeyWithNSString:@"CAS.InvalidReferenceError"];
    @throw ex;
  }
  GeogebraCommonKernelGeosGeoCasCell *ret = [self getCasCellWithInt:rowRef - 1];
  if (ret == nil) {
    GeogebraCommonUtilDebugLog_errorWithNSString_(JreStrcat("$$", @"invalid CAS row reference: ", label));
    GeogebraCommonKernelCASException *ex = [new_GeogebraCommonKernelCASException_initWithNSString_(@"CAS.InvalidReferenceError") autorelease];
    [ex setKeyWithNSString:@"CAS.InvalidReferenceError"];
    @throw ex;
  }
  return ret;
}

- (GeogebraCommonKernelGeosGeoElement *)lookupLabelWithNSString:(NSString *)label
                                                    withBoolean:(jboolean)allowAutoCreate {
  NSString *label1 = label;
  if (label1 == nil) {
    return nil;
  }
  if (localVariableTable_ != nil) {
    GeogebraCommonKernelGeosGeoElement *localGeo = [localVariableTable_ getWithId:label1];
    if (localGeo != nil) {
      return localGeo;
    }
  }
  GeogebraCommonKernelGeosGeoElement *geo = [self geoTableVarLookupWithNSString:label1];
  if (geo != nil) {
    return GeogebraCommonKernelConstruction_checkConstructionStepWithGeogebraCommonKernelGeosGeoElement_(self, geo);
  }
  label1 = GeogebraCommonKernelKernel_removeCASVariablePrefixWithNSString_(label1);
  geo = [self geoTableVarLookupWithNSString:label1];
  if (geo != nil) {
    return GeogebraCommonKernelConstruction_checkConstructionStepWithGeogebraCommonKernelGeosGeoElement_(self, geo);
  }
  if ([((NSString *) nil_chk(label1)) indexOf:'$'] > -1) {
    JavaLangStringBuilder *labelWithout$ = [new_JavaLangStringBuilder_initWithInt_(((jint) [label1 length]) - 1) autorelease];
    for (jint i = 0; i < ((jint) [label1 length]); i++) {
      jchar ch = [label1 charAtWithInt:i];
      if (ch != '$') {
        [labelWithout$ appendWithChar:ch];
      }
    }
    NSString *labelString = [labelWithout$ description];
    geo = [self lookupLabelWithNSString:labelString withBoolean:allowAutoCreate];
    if (geo != nil) {
      return GeogebraCommonKernelConstruction_checkConstructionStepWithGeogebraCommonKernelGeosGeoElement_(self, geo);
    }
    if ([((NSString *) nil_chk(labelString)) charAtWithInt:0] >= '0' && [labelString charAtWithInt:0] <= '9') {
      jint cell = 0;
      @try {
        cell = JavaLangInteger_parseIntWithNSString_([labelWithout$ description]);
      }
      @catch (JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
      }
      if (cell > 0) {
        return [self getCasCellWithInt:cell - 1];
      }
    }
  }
  if (allowAutoCreate) {
    if (GeogebraCommonUtilStringUtil_isLetterWithChar_([label1 charAtWithInt:0]) && GeogebraCommonUtilStringUtil_isDigitWithChar_([label1 charAtWithInt:((jint) [label1 length]) - 1])) {
      NSString *upperCaseLabel = [label1 uppercaseString];
      geo = [self geoTableVarLookupWithNSString:upperCaseLabel];
      if (geo != nil) {
        return GeogebraCommonKernelConstruction_checkConstructionStepWithGeogebraCommonKernelGeosGeoElement_(self, geo);
      }
    }
  }
  if (allowAutoCreate) {
    return [self autoCreateGeoElementWithNSString:label1];
  }
  return nil;
}

- (GeogebraCommonKernelGeosGeoElement *)checkConstructionStepWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonKernelConstruction_checkConstructionStepWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (jboolean)isFreeLabelWithNSString:(NSString *)label {
  return [self isFreeLabelWithNSString:label withBoolean:YES withBoolean:NO];
}

- (jboolean)isFreeLabelWithNSString:(NSString *)label
                        withBoolean:(jboolean)includeCASvariables
                        withBoolean:(jboolean)includeDummies {
  if (label == nil) {
    return NO;
  }
  if (!fileLoading_ && [((GeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) getApplication])) getParserFunctions])) isReservedWithNSString:label]) return NO;
  if ([((JavaUtilHashMap *) nil_chk(geoTable_)) containsKeyWithId:label]) return NO;
  if (includeCASvariables && geoCasCellTable_ != nil && [geoCasCellTable_ containsKeyWithId:label]) {
    return NO;
  }
  if (includeDummies && [((JavaUtilTreeSet *) nil_chk(casDummies_)) containsWithId:label]) {
    return NO;
  }
  return YES;
}

- (void)updateConstructionOrderWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldGeo
                               withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)newGeo {
  GeogebraCommonKernelConstruction_updateConstructionOrderWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, oldGeo, newGeo);
}

- (jboolean)updateConstructionOrderWithGeogebraCommonKernelGeosGeoCasCell:(GeogebraCommonKernelGeosGeoCasCell *)casCell {
  JavaUtilTreeSet *allPred = [new_JavaUtilTreeSet_init() autorelease];
  if ([((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell)) getGeoElementVariables] != nil) {
    for (GeogebraCommonKernelGeosGeoElement * __strong directInput in nil_chk([casCell getGeoElementVariables])) {
      [allPred addAllWithJavaUtilCollection:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(directInput)) getAllPredecessors]];
      [allPred addWithId:directInput];
    }
  }
  if ([allPred size] == 0) {
    return NO;
  }
  jint maxPredIndex = 0;
  for (GeogebraCommonKernelGeosGeoElement * __strong pred in allPred) {
    jint predIndex = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(pred)) getConstructionIndex];
    if (predIndex > maxPredIndex) maxPredIndex = predIndex;
  }
  if ([casCell getConstructionIndex] > maxPredIndex) return NO;
  jint maxCellIndex = [casCell getMaxConstructionIndex];
  if (maxCellIndex >= maxPredIndex) {
    [self moveInConstructionListWithGeogebraCommonKernelGeosGeoElement:casCell withInt:maxPredIndex + (maxCellIndex > maxPredIndex ? 1 : 0)];
    return YES;
  }
  maxPredIndex = 0;
  for (GeogebraCommonKernelGeosGeoElement * __strong pred in allPred) {
    [self moveInConstructionListWithGeogebraCommonKernelGeosGeoElement:pred withInt:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(pred)) getMinConstructionIndex]];
    maxPredIndex = JavaLangMath_maxWithInt_withInt_(maxPredIndex, [pred getConstructionIndex]);
  }
  if ([casCell getConstructionIndex] < maxPredIndex) {
    return YES;
  }
  if ([casCell getMaxConstructionIndex] > maxPredIndex) {
    [self moveInConstructionListWithGeogebraCommonKernelGeosGeoElement:casCell withInt:maxPredIndex + 1];
    return YES;
  }
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"Construction.updateConstructionOrder(GeoCasCell) failed: ", casCell)];
  return NO;
}

- (void)prepareReplaceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldGeo
                      withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)newGeo {
  GeogebraCommonKernelAlgosAlgoElement *oldGeoAlgo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(oldGeo)) getParentAlgorithm];
  GeogebraCommonKernelAlgosAlgoElement *newGeoAlgo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo)) getParentAlgorithm];
  if (oldGeoAlgo != nil) {
    GeogebraCommonKernelConstruction_set_keepGeo_(self, oldGeo);
    [oldGeoAlgo removeOutputExceptWithGeogebraCommonKernelGeosGeoElement:oldGeo];
    GeogebraCommonKernelConstruction_set_keepGeo_(self, nil);
  }
  if ([newGeo getConstructionIndex] == -1) {
    jint ind = [((JavaUtilArrayList *) nil_chk(ceList_)) size];
    if (newGeoAlgo == nil) [newGeo setConstructionIndexWithInt:ind];
    else [newGeoAlgo setConstructionIndexWithInt:ind];
  }
  if (newGeoAlgo != nil) {
    for (jint i = 0; i < [newGeoAlgo getOutputLength]; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [newGeoAlgo getOutputWithInt:i];
      if (geo != newGeo && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined] && ![geo isLabelSet]) {
        [geo setLabelWithNSString:nil];
      }
    }
  }
  GeogebraCommonKernelConstruction_updateConstructionOrderWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, oldGeo, newGeo);
}

- (void)addToGeoSetWithCasCellsWithGeogebraCommonKernelGeosGeoCasCell:(GeogebraCommonKernelGeosGeoCasCell *)geoCasCell {
  [((JavaUtilTreeSet *) nil_chk(geoSetWithCasCells_)) addWithId:geoCasCell];
}

- (void)removeFromGeoSetWithCasCellsWithGeogebraCommonKernelGeosGeoCasCell:(GeogebraCommonKernelGeosGeoCasCell *)geoCasCell {
  [((JavaUtilTreeSet *) nil_chk(geoSetWithCasCells_)) removeWithId:geoCasCell];
}

- (GeogebraCommonKernelGeosGeoElement *)createSpreadsheetGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)neighbourCell
                                                                                             withNSString:(NSString *)label {
  GeogebraCommonKernelGeosGeoElement *result;
  if (neighbourCell != nil) {
    result = [neighbourCell copy__];
  }
  else {
    result = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self) autorelease];
  }
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(result)) setUndefined];
  [result setEmptySpreadsheetCellWithBoolean:YES];
  jboolean oldSuppressLabelsActive = [self isSuppressLabelsActive];
  [self setSuppressLabelCreationWithBoolean:NO];
  [result setAuxiliaryObjectWithBoolean:YES];
  [result setLabelWithNSString:label];
  [self setSuppressLabelCreationWithBoolean:oldSuppressLabelsActive];
  return result;
}

- (NSString *)getIndexLabelWithNSString:(NSString *)prefix
                                withInt:(jint)startIndex {
  NSString *pref;
  jint pos = [((NSString *) nil_chk(prefix)) indexOf:'_'];
  if (pos == -1) pref = prefix;
  else pref = [prefix substring:0 endIndex:pos];
  JavaLangStringBuilder *sbIndexLabel = [new_JavaLangStringBuilder_init() autorelease];
  jint n = startIndex;
  do {
    [sbIndexLabel setLengthWithInt:0];
    [sbIndexLabel appendWithNSString:pref];
    if (n < 10) {
      [sbIndexLabel appendWithChar:'_'];
      [sbIndexLabel appendWithInt:n];
    }
    else {
      [sbIndexLabel appendWithNSString:@"_{"];
      [sbIndexLabel appendWithInt:n];
      [sbIndexLabel appendWithChar:'}'];
    }
    n++;
  }
  while (![self isFreeLabelWithNSString:[sbIndexLabel description]]);
  return [sbIndexLabel description];
}

- (NSString *)getIndexLabelWithNSString:(NSString *)prefix {
  return [self getIndexLabelWithNSString:prefix withInt:1];
}

- (GeogebraCommonKernelGeosGeoElement *)autoCreateGeoElementWithNSString:(NSString *)labelNew {
  GeogebraCommonKernelGeosGeoElement *createdGeo = nil;
  jboolean fix = YES;
  jboolean auxilliary = YES;
  NSString *label = labelNew;
  if (((jint) [((NSString *) nil_chk(label)) length]) == 2) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:JreStrcat("C", [label charAtWithInt:0])];
    if (geo1 != nil && [geo1 isGeoPoint]) {
      GeogebraCommonKernelGeosGeoElement *geo2 = [kernel_ lookupLabelWithNSString:JreStrcat("C", [label charAtWithInt:1])];
      if (geo2 != nil && [geo2 isGeoPoint]) {
        GeogebraCommonKernelAlgosAlgoDistancePoints *dist = [new_GeogebraCommonKernelAlgosAlgoDistancePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, nil, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo1, @protocol(GeogebraCommonKernelKernelNDGeoPointND)), (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo2, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) autorelease];
        createdGeo = [dist getDistance];
        fix = NO;
      }
    }
    else if (geo1 != nil && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo1]) {
      GeogebraCommonKernelGeosGeoElement *geo2 = [kernel_ lookupLabelWithNSString:JreStrcat("C", [label charAtWithInt:1])];
      if (geo2 != nil && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo2]) {
        GeogebraCommonKernelArithmeticExpressionNode *node = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, geo1, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), geo2) autorelease];
        GeogebraCommonKernelAlgosAlgoDependentNumber *algo = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self, nil, node, NO) autorelease];
        createdGeo = [algo getNumber];
        fix = NO;
      }
    }
  }
  else if (((jint) [label length]) == 1) {
    if ([label isEqual:@"O"]) {
      createdGeo = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self, 0.0, 0.0, 1.0) autorelease];
      label = @"O";
      auxilliary = YES;
      fix = YES;
    }
  }
  if (createdGeo != nil) {
    [createdGeo setAuxiliaryObjectWithBoolean:auxilliary];
    [createdGeo setLabelWithNSString:label];
    [createdGeo setFixedWithBoolean:fix];
    return createdGeo;
  }
  createdGeo = GeogebraCommonKernelGeosGeoElementSpreadsheet_autoCreateWithNSString_withGeogebraCommonKernelConstruction_(label, self);
  return createdGeo;
}

- (void)initGeoTables {
  [((JavaUtilHashMap *) nil_chk(geoTable_)) clear];
  GeogebraCommonKernelConstruction_set_geoCasCellTable_(self, nil);
  GeogebraCommonKernelConstruction_set_localVariableTable_(self, nil);
  [((id<JavaUtilMap>) nil_chk(constsM_)) clear];
  [((id<JavaUtilMap>) nil_chk(complexNumbersM_)) clear];
  [((id<JavaUtilMap>) nil_chk(intsM_)) clear];
  [geoTable_ putWithId:@"xAxis" withId:xAxis_];
  [geoTable_ putWithId:@"yAxis" withId:yAxis_];
  [((JavaUtilTreeSet *) nil_chk(usedGeos_)) clear];
  if (xAxisLocalName_ != nil) {
    [geoTable_ putWithId:xAxisLocalName_ withId:xAxis_];
    [geoTable_ putWithId:yAxisLocalName_ withId:yAxis_];
  }
}

- (JavaUtilTreeSet *)getGeoSetNameDescriptionOrder {
  JavaUtilTreeSet *sortedSet = [new_JavaUtilTreeSet_initWithJavaUtilComparator_([new_GeogebraCommonKernelNameDescriptionComparator_init() autorelease]) autorelease];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(geoSetConsOrder_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    [sortedSet addWithId:geo];
  }
  return sortedSet;
}

- (GeogebraCommonKernelOptimizationExtremumFinder *)getExtremumFinder {
  return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getExtremumFinder];
}

- (void)storeUndoInfo {
  if (![self isUndoEnabled]) return;
  [((GeogebraCommonKernelUndoManager *) nil_chk(undoManager_)) storeUndoInfo];
}

- (void)restoreCurrentUndoInfo {
  collectRedefineCalls_ = NO;
  if (undoManager_ != nil) [undoManager_ restoreCurrentUndoInfo];
}

- (void)redo {
  [((GeogebraCommonKernelUndoManager *) nil_chk(undoManager_)) redo];
}

- (void)undo {
  [((GeogebraCommonKernelUndoManager *) nil_chk(undoManager_)) undo];
}

- (jboolean)undoPossible {
  return undoManager_ != nil && [undoManager_ undoPossible];
}

- (jboolean)redoPossible {
  return undoManager_ != nil && [undoManager_ redoPossible];
}

- (void)addUsedMacroWithGeogebraCommonKernelMacro:(GeogebraCommonKernelMacro *)macro {
  if (usedMacros_ == nil) GeogebraCommonKernelConstruction_setAndConsume_usedMacros_(self, new_JavaUtilArrayList_init());
  [((JavaUtilArrayList *) nil_chk(usedMacros_)) addWithId:macro];
}

- (JavaUtilArrayList *)getUsedMacros {
  return usedMacros_;
}

- (void)clearConstruction {
  [((id<JavaUtilMap>) nil_chk(constsM_)) clear];
  [((id<JavaUtilMap>) nil_chk(complexNumbersM_)) clear];
  [((id<JavaUtilMap>) nil_chk(intsM_)) clear];
  [((JavaUtilArrayList *) nil_chk(ceList_)) clear];
  [((JavaUtilArrayList *) nil_chk(algoList_)) clear];
  [((JavaUtilTreeSet *) nil_chk(geoSetConsOrder_)) clear];
  [((JavaUtilTreeSet *) nil_chk(geoSetWithCasCells_)) clear];
  [((JavaUtilTreeSet *) nil_chk(geoSetLabelOrder_)) clear];
  [((JavaUtilHashMap *) nil_chk(geoSetsTypeMap_)) clear];
  [((JavaUtilArrayList *) nil_chk(euclidianViewCE_)) clear];
  GeogebraCommonKernelConstruction_set_corner5Algos_(self, nil);
  [((JavaUtilTreeSet *) nil_chk(self->casDummies_)) clear];
  [self initGeoTables];
  step_ = -1;
  GeogebraCommonKernelConstruction_set_title_(self, nil);
  GeogebraCommonKernelConstruction_set_author_(self, nil);
  GeogebraCommonKernelConstruction_set_date_(self, nil);
  IOSObjectArray_Set(nil_chk(worksheetText_), 0, nil);
  IOSObjectArray_Set(worksheetText_, 1, nil);
  GeogebraCommonKernelConstruction_set_usedMacros_(self, nil);
  spreadsheetTraces_ = NO;
}

- (JavaLangStringBuilder *)getCurrentUndoXMLWithBoolean:(jboolean)getListenersToo {
  return GeogebraCommonIoMyXMLio_getUndoXMLWithGeogebraCommonKernelConstruction_withBoolean_(self, getListenersToo);
}

- (GeogebraCommonIoMyXMLio *)getXMLio {
  if (xmlio_ == nil) GeogebraCommonKernelConstruction_set_xmlio_(self, [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) createXMLioWithGeogebraCommonKernelConstruction:self]);
  return xmlio_;
}

- (void)initUndoInfo {
  if (undoManager_ == nil) GeogebraCommonKernelConstruction_set_undoManager_(self, [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getUndoManagerWithGeogebraCommonKernelConstruction:self]);
  [((GeogebraCommonKernelUndoManager *) nil_chk(undoManager_)) initUndoInfo];
}

- (void)buildConstructionWithJavaLangStringBuilder:(JavaLangStringBuilder *)consXML {
  GeogebraCommonKernelConstruction_buildConstructionWithJavaLangStringBuilder_(self, consXML);
}

- (GeogebraCommonKernelUndoManager *)getUndoManager {
  return undoManager_;
}

- (void)setOutputGeoWithNSString:(NSString *)type {
  if (type == nil) {
    GeogebraCommonKernelConstruction_set_outputGeo_(self, nil);
    return;
  }
  GeogebraCommonKernelConstruction_set_outputGeo_(self, [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) createGeoElementWithGeogebraCommonKernelConstruction:self withNSString:type]);
}

- (GeogebraCommonKernelGeosGeoElement *)getOutputGeo {
  return outputGeo_ == nil ? [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self) autorelease] : outputGeo_;
}

- (void)registerFunctionVariableWithNSString:(NSString *)fv {
  if (fv == nil) [((JavaUtilTreeSet *) nil_chk(registredFV_)) clear];
  else [((JavaUtilTreeSet *) nil_chk(registredFV_)) addWithId:fv];
}

- (jboolean)isRegistredFunctionVariableWithNSString:(NSString *)s {
  return [((JavaUtilTreeSet *) nil_chk(registredFV_)) containsWithId:s];
}

- (NSString *)getRegisteredFunctionVariable {
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(registredFV_)) iterator];
  if ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) return [it next];
  return nil;
}

- (void)setFileLoadingWithBoolean:(jboolean)b {
  fileLoading_ = b;
}

- (jboolean)isFileLoading {
  return fileLoading_;
}

- (jboolean)isUpdateConstructionRunning {
  return updateConstructionRunning_;
}

- (JavaUtilTreeSet *)getCASdummies {
  return casDummies_;
}

- (void)setAlgoSetCurrentlyUpdatedWithGeogebraCommonKernelAlgosAlgorithmSet:(GeogebraCommonKernelAlgosAlgorithmSet *)algoSetCurrentlyUpdated {
  GeogebraCommonKernelConstruction_set_algoSetCurrentlyUpdated_(self, algoSetCurrentlyUpdated);
}

- (GeogebraCommonKernelAlgosAlgorithmSet *)getAlgoSetCurrentlyUpdated {
  return algoSetCurrentlyUpdated_;
}

- (void)setUpdateConstructionRunningWithBoolean:(jboolean)b {
  updateConstructionRunning_ = b;
}

- (id<JavaUtilSet>)getAllGeoLabels {
  return [new_JavaUtilHashSet_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(geoTable_)) keySet]) autorelease];
}

- (id<JavaUtilSet>)getAllLabels {
  id<JavaUtilSet> ret = [new_JavaUtilHashSet_initWithJavaUtilCollection_([self getAllGeoLabels]) autorelease];
  if (geoCasCellTable_ != nil) {
    [ret addAllWithJavaUtilCollection:[geoCasCellTable_ keySet]];
  }
  return ret;
}

- (jboolean)hasSpreadsheetTracingGeos {
  return spreadsheetTraces_;
}

- (void)addTracingGeo {
  spreadsheetTraces_ = YES;
}

- (void)setAllowUnboundedAnglesWithBoolean:(jboolean)b {
  self->allowUnboundedAngles_ = b;
}

- (jboolean)isAllowUnboundedAngles {
  return self->allowUnboundedAngles_;
}

- (void)addCASAlgoWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algoCasBase {
  [((JavaUtilArrayList *) nil_chk(casAlgos_)) addWithId:algoCasBase];
}

- (void)recomputeCASalgos {
  for (GeogebraCommonKernelAlgosAlgoElement * __strong algo in nil_chk(casAlgos_)) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutputWithInt:0])) isLabelSet]) {
      if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoCasBase class]]) {
        [((GeogebraCommonKernelAlgosAlgoCasBase *) check_class_cast(algo, [GeogebraCommonKernelAlgosAlgoCasBase class])) clearCasEvalMapWithNSString:@""];
        [algo compute];
      }
      else if ([algo isKindOfClass:[GeogebraCommonKernelCasAlgoUsingTempCASalgo class]]) {
        [((GeogebraCommonKernelCasAlgoUsingTempCASalgo *) check_class_cast(algo, [GeogebraCommonKernelCasAlgoUsingTempCASalgo class])) refreshCASResults];
        [algo compute];
      }
      else if ([GeogebraCommonKernelCasUsesCAS_class_() isInstance:algo] || [GeogebraCommonKernelAlgoCasCellInterface_class_() isInstance:algo]) {
        [algo compute];
      }
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([algo getOutputWithInt:0])) updateCascade];
    }
  }
  [casAlgos_ clear];
}

- (void)updateConstructionLanguage {
  updateConstructionRunning_ = YES;
  jboolean oldFlag = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) isBlockUpdateScripts];
  [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) setBlockUpdateScriptsWithBoolean:YES];
  @try {
    jint size = [((JavaUtilArrayList *) nil_chk(ceList_)) size];
    for (jint i = 0; i < size; ++i) {
      GeogebraCommonKernelAlgosConstructionElement *ce = [ceList_ getWithInt:i];
      if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) isGeoElement]) {
        if ([((GeogebraCommonKernelGeosGeoElement *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoElement class])) isGeoText] && [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoElement class])) getParentAlgorithm] != nil) {
          [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) check_class_cast(ce, [GeogebraCommonKernelGeosGeoElement class])) getParentAlgorithm])) update];
        }
        [ce update];
      }
    }
  }
  @finally {
    [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) setBlockUpdateScriptsWithBoolean:oldFlag];
    updateConstructionRunning_ = NO;
  }
}

- (void)updateConstructionLaTeX {
  jboolean oldFlag = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) isBlockUpdateScripts];
  [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) setBlockUpdateScriptsWithBoolean:YES];
  if (latexGeos_ != nil) {
    GeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(latexGeos_, [new_JavaUtilTreeSet_init() autorelease], YES);
  }
  GeogebraCommonKernelConstruction_set_latexGeos_(self, nil);
  [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) setBlockUpdateScriptsWithBoolean:oldFlag];
}

- (void)registerCorner5WithGeogebraCommonKernelEuclidianViewCE:(id<GeogebraCommonKernelEuclidianViewCE>)algo {
  if (self->corner5Algos_ == nil) {
    GeogebraCommonKernelConstruction_setAndConsume_corner5Algos_(self, new_JavaUtilArrayList_init());
  }
  [((JavaUtilArrayList *) nil_chk(self->corner5Algos_)) addWithId:algo];
}

- (IOSObjectArray *)getRegisteredFunctionVariables {
  IOSObjectArray *varNames = [IOSObjectArray arrayWithLength:[((JavaUtilTreeSet *) nil_chk(self->registredFV_)) size] type:NSString_class_()];
  id<JavaUtilIterator> it = [self->registredFV_ iterator];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(varNames, i++, [it next]);
  }
  return varNames;
}

- (void)addLaTeXGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (latexGeos_ == nil) {
    GeogebraCommonKernelConstruction_setAndConsume_latexGeos_(self, new_JavaUtilArrayList_init());
  }
  [((JavaUtilArrayList *) nil_chk(self->latexGeos_)) addWithId:geo];
}

- (void)dealloc {
  RELEASE_(constsM_);
  RELEASE_(intsM_);
  RELEASE_(complexNumbersM_);
  RELEASE_(usedGeos_);
  RELEASE_(usedMacros_);
  RELEASE_(undoManager_);
  RELEASE_(consDefaults_);
  RELEASE_(title_);
  RELEASE_(author_);
  RELEASE_(date_);
  RELEASE_(worksheetText_);
  RELEASE_(kernel_);
  RELEASE_(geoSetsTypeMap_);
  RELEASE_(ceList_);
  RELEASE_(algoList_);
  RELEASE_(geoTable_);
  RELEASE_(euclidianViewCE_);
  RELEASE_(corner5Algos_);
  RELEASE_(localVariableTable_);
  RELEASE_(geoSetConsOrder_);
  RELEASE_(geoSetLabelOrder_);
  RELEASE_(geoSetWithCasCells_);
  RELEASE_(randomElements_);
  RELEASE_(geoCasCellTable_);
  RELEASE_(redefineMap_);
  RELEASE_(keepGeo_);
  RELEASE_(latexGeos_);
  RELEASE_(xAxis_);
  RELEASE_(yAxis_);
  RELEASE_(xAxisLocalName_);
  RELEASE_(yAxisLocalName_);
  RELEASE_(origin_);
  RELEASE_(xmlio_);
  RELEASE_(outputGeo_);
  RELEASE_(registredFV_);
  RELEASE_(casDummies_);
  RELEASE_(algoSetCurrentlyUpdated_);
  RELEASE_(casAlgos_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "Construction", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelKernel:withGeogebraCommonKernelConstruction:", "Construction", NULL, 0x4, NULL, NULL },
    { "newConstructionDefaults", NULL, "V", 0x4, NULL, NULL },
    { "getKeepGeo", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getOrigin", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "getXAxis", NULL, "Lgeogebra.common.kernel.geos.GeoAxis;", 0x11, NULL, NULL },
    { "getYAxis", NULL, "Lgeogebra.common.kernel.geos.GeoAxis;", 0x11, NULL, NULL },
    { "initAxis", NULL, "V", 0x4, NULL, NULL },
    { "isConstantElementWithGeogebraCommonKernelGeosGeoElement:", "isConstantElement", "Lgeogebra.common.kernel.Construction$Constants;", 0x1, NULL, NULL },
    { "updateLocalAxesNames", NULL, "V", 0x1, NULL, NULL },
    { "getConstructionDefaults", NULL, "Lgeogebra.common.kernel.ConstructionDefaults;", 0x11, NULL, NULL },
    { "getAuthor", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDate", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTitle", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setAuthorWithNSString:", "setAuthor", "V", 0x1, NULL, NULL },
    { "setDateWithNSString:", "setDate", "V", 0x1, NULL, NULL },
    { "setTitleWithNSString:", "setTitle", "V", 0x1, NULL, NULL },
    { "getWorksheetTextWithInt:", "getWorksheetText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setWorksheetTextWithNSString:withInt:", "setWorksheetText", "V", 0x1, NULL, NULL },
    { "worksheetTextDefined", NULL, "Z", 0x4, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "setSuppressLabelCreationWithBoolean:", "setSuppressLabelCreation", "V", 0x1, NULL, NULL },
    { "isSuppressLabelsActive", NULL, "Z", 0x1, NULL, NULL },
    { "getApplication", NULL, "Lgeogebra.common.main.App;", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "steps", NULL, "I", 0x1, NULL, NULL },
    { "getLastGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getCasCellWithInt:", "getCasCell", "Lgeogebra.common.kernel.geos.GeoCasCell;", 0x1, NULL, NULL },
    { "getLastCasCell", NULL, "Lgeogebra.common.kernel.geos.GeoCasCell;", 0x1, NULL, NULL },
    { "setCasCellRowWithGeogebraCommonKernelGeosGeoCasCell:withInt:", "setCasCellRow", "V", 0x1, NULL, NULL },
    { "addLocalVariableWithNSString:withGeogebraCommonKernelGeosGeoElement:", "addLocalVariable", "V", 0x11, NULL, NULL },
    { "removeLocalVariableWithNSString:", "removeLocalVariable", "V", 0x11, NULL, NULL },
    { "geoTableVarLookupWithNSString:", "geoTableVarLookup", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setShowOnlyBreakpointsWithBoolean:", "setShowOnlyBreakpoints", "V", 0x1, NULL, NULL },
    { "showOnlyBreakpoints", NULL, "Z", 0x11, NULL, NULL },
    { "updateConstructionIndexWithInt:", "updateConstructionIndex", "V", 0x4, NULL, NULL },
    { "updateAllConstructionProtocolAlgorithms", NULL, "Z", 0x14, NULL, NULL },
    { "addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:withInt:", "addToConstructionList", "V", 0x1, NULL, NULL },
    { "updateCasCellRows", NULL, "V", 0x1, NULL, NULL },
    { "moveInConstructionListWithInt:withInt:", "moveInConstructionList", "Z", 0x1, NULL, NULL },
    { "addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:withBoolean:", "addToConstructionList", "V", 0x1, NULL, NULL },
    { "removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:", "removeFromConstructionList", "V", 0x1, NULL, NULL },
    { "addToAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:", "addToAlgorithmList", "V", 0x1, NULL, NULL },
    { "removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:", "removeFromAlgorithmList", "V", 0x1, NULL, NULL },
    { "moveInConstructionListWithGeogebraCommonKernelGeosGeoElement:withInt:", "moveInConstructionList", "Z", 0x1, NULL, NULL },
    { "isInConstructionListWithGeogebraCommonKernelGeosGeoElement:", "isInConstructionList", "Z", 0x1, NULL, NULL },
    { "updateAllAlgorithms", NULL, "V", 0x11, NULL, NULL },
    { "registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:", "registerEuclidianViewCE", "V", 0x11, NULL, NULL },
    { "unregisterEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:", "unregisterEuclidianViewCE", "V", 0x11, NULL, NULL },
    { "notifyEuclidianViewCEWithBoolean:", "notifyEuclidianViewCE", "Z", 0x1, NULL, NULL },
    { "hasEuclidianViewCE", NULL, "Z", 0x1, NULL, NULL },
    { "updateAllRandomGeos", NULL, "V", 0x11, NULL, NULL },
    { "updateAllFreeRandomGeosNoCascade", NULL, "V", 0x11, NULL, NULL },
    { "addRandomGeoWithGeogebraCommonKernelGeosGeoElement:", "addRandomGeo", "V", 0x1, NULL, NULL },
    { "removeRandomGeoWithGeogebraCommonKernelGeosGeoElement:", "removeRandomGeo", "V", 0x1, NULL, NULL },
    { "updateConstruction", NULL, "V", 0x11, NULL, NULL },
    { "updateCasCells", NULL, "V", 0x11, NULL, NULL },
    { "getConstructionXMLWithJavaLangStringBuilder:withBoolean:", "getConstructionXML", "V", 0x1, NULL, NULL },
    { "getConstructionElementsXMLWithJavaLangStringBuilder:withBoolean:", "getConstructionElementsXML", "V", 0x1, NULL, NULL },
    { "getConstructionElementsXML_OGPWithJavaLangStringBuilder:withGeogebraCommonKernelGeosGeoElement:", "getConstructionElementsXML_OGP", "V", 0x1, NULL, NULL },
    { "getConstructionRegressionOutWithJavaLangStringBuilder:", "getConstructionRegressionOut", "V", 0x1, NULL, NULL },
    { "isUndoEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "setUndoEnabledWithBoolean:", "setUndoEnabled", "V", 0x1, NULL, NULL },
    { "getConstructionElementWithInt:", "getConstructionElement", "Lgeogebra.common.kernel.algos.ConstructionElement;", 0x1, NULL, NULL },
    { "getFirstGeo", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getGeoSetConstructionOrder", NULL, "Ljava.util.TreeSet;", 0x11, NULL, NULL },
    { "getGeoSetWithCasCellsConstructionOrder", NULL, "Ljava.util.TreeSet;", 0x11, NULL, NULL },
    { "getGeoSetLabelOrder", NULL, "Ljava.util.TreeSet;", 0x11, NULL, NULL },
    { "startCollectingRedefineCalls", NULL, "V", 0x1, NULL, NULL },
    { "stopCollectingRedefineCalls", NULL, "V", 0x1, NULL, NULL },
    { "replaceWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "replace", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "isGettingXMLForReplace", NULL, "Z", 0x1, NULL, NULL },
    { "isRemovingGeoToReplaceIt", NULL, "Z", 0x1, NULL, NULL },
    { "processCollectedRedefineCalls", NULL, "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "changeCasCellWithGeogebraCommonKernelGeosGeoCasCell:", "changeCasCell", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "doReplaceInXMLWithJavaLangStringBuilder:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "doReplaceInXML", "Ljava.lang.StringBuilder;", 0x4, NULL, NULL },
    { "setStepWithInt:", "setStep", "V", 0x1, NULL, NULL },
    { "getStep", NULL, "I", 0x1, NULL, NULL },
    { "putLabelWithGeogebraCommonKernelGeosGeoElement:", "putLabel", "V", 0x1, NULL, NULL },
    { "removeLabelWithGeogebraCommonKernelGeosGeoElement:", "removeLabel", "V", 0x1, NULL, NULL },
    { "addToGeoSetsWithGeogebraCommonKernelGeosGeoElement:", "addToGeoSets", "V", 0x2, NULL, NULL },
    { "getGeoSetLabelOrderWithGeogebraCommonPluginGeoClassEnum:", "getGeoSetLabelOrder", "Ljava.util.TreeSet;", 0x11, NULL, NULL },
    { "createTypeSetWithGeogebraCommonPluginGeoClassEnum:", "createTypeSet", "Ljava.util.TreeSet;", 0x2, NULL, NULL },
    { "removeFromGeoSetsWithGeogebraCommonKernelGeosGeoElement:", "removeFromGeoSets", "V", 0x2, NULL, NULL },
    { "putCasCellLabelWithGeogebraCommonKernelGeosGeoCasCell:withNSString:", "putCasCellLabel", "V", 0x1, NULL, NULL },
    { "removeCasCellLabelWithNSString:", "removeCasCellLabel", "V", 0x1, NULL, NULL },
    { "lookupLabelWithNSString:", "lookupLabel", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "lookupCasCellLabelWithNSString:", "lookupCasCellLabel", "Lgeogebra.common.kernel.geos.GeoCasCell;", 0x1, NULL, NULL },
    { "lookupCasRowReferenceWithNSString:", "lookupCasRowReference", "Lgeogebra.common.kernel.geos.GeoCasCell;", 0x1, "Lgeogebra.common.kernel.CASException;", NULL },
    { "lookupLabelWithNSString:withBoolean:", "lookupLabel", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "checkConstructionStepWithGeogebraCommonKernelGeosGeoElement:", "checkConstructionStep", "Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "isFreeLabelWithNSString:", "isFreeLabel", "Z", 0x1, NULL, NULL },
    { "isFreeLabelWithNSString:withBoolean:withBoolean:", "isFreeLabel", "Z", 0x1, NULL, NULL },
    { "updateConstructionOrderWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "updateConstructionOrder", "V", 0x2, NULL, NULL },
    { "updateConstructionOrderWithGeogebraCommonKernelGeosGeoCasCell:", "updateConstructionOrder", "Z", 0x4, NULL, NULL },
    { "prepareReplaceWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "prepareReplace", "V", 0x4, NULL, NULL },
    { "addToGeoSetWithCasCellsWithGeogebraCommonKernelGeosGeoCasCell:", "addToGeoSetWithCasCells", "V", 0x1, NULL, NULL },
    { "removeFromGeoSetWithCasCellsWithGeogebraCommonKernelGeosGeoCasCell:", "removeFromGeoSetWithCasCells", "V", 0x1, NULL, NULL },
    { "createSpreadsheetGeoElementWithGeogebraCommonKernelGeosGeoElement:withNSString:", "createSpreadsheetGeoElement", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "getIndexLabelWithNSString:withInt:", "getIndexLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getIndexLabelWithNSString:", "getIndexLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "autoCreateGeoElementWithNSString:", "autoCreateGeoElement", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "initGeoTables", NULL, "V", 0x4, NULL, NULL },
    { "getGeoSetNameDescriptionOrder", NULL, "Ljava.util.TreeSet;", 0x11, NULL, NULL },
    { "getExtremumFinder", NULL, "Lgeogebra.common.kernel.optimization.ExtremumFinder;", 0x1, NULL, NULL },
    { "storeUndoInfo", NULL, "V", 0x1, NULL, NULL },
    { "restoreCurrentUndoInfo", NULL, "V", 0x1, NULL, NULL },
    { "redo", NULL, "V", 0x1, NULL, NULL },
    { "undo", NULL, "V", 0x1, NULL, NULL },
    { "undoPossible", NULL, "Z", 0x1, NULL, NULL },
    { "redoPossible", NULL, "Z", 0x1, NULL, NULL },
    { "addUsedMacroWithGeogebraCommonKernelMacro:", "addUsedMacro", "V", 0x11, NULL, NULL },
    { "getUsedMacros", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "clearConstruction", NULL, "V", 0x1, NULL, NULL },
    { "getCurrentUndoXMLWithBoolean:", "getCurrentUndoXML", "Ljava.lang.StringBuilder;", 0x1, NULL, NULL },
    { "getXMLio", NULL, "Lgeogebra.common.io.MyXMLio;", 0x1, NULL, NULL },
    { "initUndoInfo", NULL, "V", 0x1, NULL, NULL },
    { "buildConstructionWithJavaLangStringBuilder:", "buildConstruction", "V", 0x2, "Ljava.lang.Exception;", NULL },
    { "getUndoManager", NULL, "Lgeogebra.common.kernel.UndoManager;", 0x1, NULL, NULL },
    { "setOutputGeoWithNSString:", "setOutputGeo", "V", 0x1, NULL, NULL },
    { "getOutputGeo", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "registerFunctionVariableWithNSString:", "registerFunctionVariable", "V", 0x1, NULL, NULL },
    { "isRegistredFunctionVariableWithNSString:", "isRegistredFunctionVariable", "Z", 0x1, NULL, NULL },
    { "getRegisteredFunctionVariable", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setFileLoadingWithBoolean:", "setFileLoading", "V", 0x1, NULL, NULL },
    { "isFileLoading", NULL, "Z", 0x1, NULL, NULL },
    { "isUpdateConstructionRunning", NULL, "Z", 0x1, NULL, NULL },
    { "getCASdummies", NULL, "Ljava.util.TreeSet;", 0x1, NULL, NULL },
    { "setAlgoSetCurrentlyUpdatedWithGeogebraCommonKernelAlgosAlgorithmSet:", "setAlgoSetCurrentlyUpdated", "V", 0x1, NULL, NULL },
    { "getAlgoSetCurrentlyUpdated", NULL, "Lgeogebra.common.kernel.algos.AlgorithmSet;", 0x1, NULL, NULL },
    { "setUpdateConstructionRunningWithBoolean:", "setUpdateConstructionRunning", "V", 0x1, NULL, NULL },
    { "getAllGeoLabels", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "getAllLabels", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "hasSpreadsheetTracingGeos", NULL, "Z", 0x1, NULL, NULL },
    { "addTracingGeo", NULL, "V", 0x1, NULL, NULL },
    { "setAllowUnboundedAnglesWithBoolean:", "setAllowUnboundedAngles", "V", 0x1, NULL, NULL },
    { "isAllowUnboundedAngles", NULL, "Z", 0x1, NULL, NULL },
    { "addCASAlgoWithGeogebraCommonKernelAlgosAlgoElement:", "addCASAlgo", "V", 0x1, NULL, NULL },
    { "recomputeCASalgos", NULL, "V", 0x1, NULL, NULL },
    { "updateConstructionLanguage", NULL, "V", 0x1, NULL, NULL },
    { "updateConstructionLaTeX", NULL, "V", 0x1, NULL, NULL },
    { "registerCorner5WithGeogebraCommonKernelEuclidianViewCE:", "registerCorner5", "V", 0x1, NULL, NULL },
    { "getRegisteredFunctionVariables", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "addLaTeXGeoWithGeogebraCommonKernelGeosGeoElement:", "addLaTeXGeo", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "constsM_", NULL, 0x1, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Integer;Lgeogebra/common/kernel/geos/GeoNumeric;>;",  },
    { "intsM_", NULL, 0x1, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Integer;Lgeogebra/common/kernel/geos/GeoNumeric;>;",  },
    { "complexNumbersM_", NULL, 0x1, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Integer;Lgeogebra/common/kernel/geos/GeoNumeric;>;",  },
    { "usedGeos_", NULL, 0x1, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/plugin/GeoClass;>;",  },
    { "usedMacros_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/Macro;>;",  },
    { "undoManager_", NULL, 0x4, "Lgeogebra.common.kernel.UndoManager;", NULL, NULL,  },
    { "consDefaults_", NULL, 0x4, "Lgeogebra.common.kernel.ConstructionDefaults;", NULL, NULL,  },
    { "title_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "author_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "date_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "worksheetText_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "showOnlyBreakpoints__", "showOnlyBreakpoints", 0x2, "Z", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "step_", NULL, 0x2, "I", NULL, NULL,  },
    { "supressLabelCreation_", NULL, 0x2, "Z", NULL, NULL,  },
    { "geoSetsTypeMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lgeogebra/common/plugin/GeoClass;Ljava/util/TreeSet<Lgeogebra/common/kernel/geos/GeoElement;>;>;",  },
    { "ceList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/algos/ConstructionElement;>;",  },
    { "algoList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/algos/AlgoElement;>;",  },
    { "geoTable_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "euclidianViewCE_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/EuclidianViewCE;>;",  },
    { "corner5Algos_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/EuclidianViewCE;>;",  },
    { "localVariableTable_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "geoSetConsOrder_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "geoSetLabelOrder_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "geoSetWithCasCells_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "randomElements_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "geoCasCellTable_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Lgeogebra/common/kernel/geos/GeoCasCell;>;",  },
    { "collectRedefineCalls_", NULL, 0x2, "Z", NULL, NULL,  },
    { "redefineMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lgeogebra/common/kernel/geos/GeoElement;Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "keepGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "latexGeos_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "xAxis_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoAxis;", NULL, NULL,  },
    { "yAxis_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoAxis;", NULL, NULL,  },
    { "xAxisLocalName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "yAxisLocalName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "origin_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "undoEnabled_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isGettingXMLForReplace__", "isGettingXMLForReplace", 0x2, "Z", NULL, NULL,  },
    { "isRemovingGeoToReplaceIt__", "isRemovingGeoToReplaceIt", 0x2, "Z", NULL, NULL,  },
    { "xmlio_", NULL, 0x2, "Lgeogebra.common.io.MyXMLio;", NULL, NULL,  },
    { "outputGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "registredFV_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Ljava/lang/String;>;",  },
    { "fileLoading_", NULL, 0x2, "Z", NULL, NULL,  },
    { "updateConstructionRunning_", NULL, 0x2, "Z", NULL, NULL,  },
    { "casDummies_", NULL, 0x12, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Ljava/lang/String;>;",  },
    { "algoSetCurrentlyUpdated_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgorithmSet;", NULL, NULL,  },
    { "spreadsheetTraces_", NULL, 0x2, "Z", NULL, NULL,  },
    { "allowUnboundedAngles_", NULL, 0x2, "Z", NULL, NULL,  },
    { "casAlgos_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/algos/AlgoElement;>;",  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.Construction$Constants;", "Lgeogebra.common.kernel.Construction$LabelComparator;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelConstruction = { 2, "Construction", "geogebra.common.kernel", NULL, 0x1, 144, methods, 49, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelConstruction;
}

@end

void GeogebraCommonKernelConstruction_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelConstruction *self, GeogebraCommonKernelKernel *k) {
  GeogebraCommonKernelConstruction_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(self, k, nil);
}

GeogebraCommonKernelConstruction *new_GeogebraCommonKernelConstruction_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *k) {
  GeogebraCommonKernelConstruction *self = [GeogebraCommonKernelConstruction alloc];
  GeogebraCommonKernelConstruction_initWithGeogebraCommonKernelKernel_(self, k);
  return self;
}

void GeogebraCommonKernelConstruction_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *self, GeogebraCommonKernelKernel *k, GeogebraCommonKernelConstruction *parentConstruction) {
  NSObject_init(self);
  GeogebraCommonKernelConstruction_setAndConsume_constsM_(self, new_JavaUtilTreeMap_init());
  GeogebraCommonKernelConstruction_setAndConsume_intsM_(self, new_JavaUtilTreeMap_init());
  GeogebraCommonKernelConstruction_setAndConsume_complexNumbersM_(self, new_JavaUtilTreeMap_init());
  GeogebraCommonKernelConstruction_setAndConsume_usedGeos_(self, new_JavaUtilTreeSet_init());
  GeogebraCommonKernelConstruction_setAndConsume_worksheetText_(self, [IOSObjectArray newArrayWithLength:2 type:NSString_class_()]);
  self->supressLabelCreation_ = NO;
  self->collectRedefineCalls_ = NO;
  self->undoEnabled_ = YES;
  self->isRemovingGeoToReplaceIt__ = NO;
  GeogebraCommonKernelConstruction_setAndConsume_registredFV_(self, new_JavaUtilTreeSet_init());
  GeogebraCommonKernelConstruction_setAndConsume_casDummies_(self, new_JavaUtilTreeSet_init());
  self->allowUnboundedAngles_ = YES;
  GeogebraCommonKernelConstruction_setAndConsume_casAlgos_(self, new_JavaUtilArrayList_init());
  GeogebraCommonKernelConstruction_set_kernel_(self, k);
  GeogebraCommonKernelConstruction_setAndConsume_ceList_(self, new_JavaUtilArrayList_init());
  GeogebraCommonKernelConstruction_setAndConsume_algoList_(self, new_JavaUtilArrayList_init());
  self->step_ = -1;
  GeogebraCommonKernelConstruction_setAndConsume_geoSetConsOrder_(self, new_JavaUtilTreeSet_init());
  GeogebraCommonKernelConstruction_setAndConsume_geoSetWithCasCells_(self, new_JavaUtilTreeSet_init());
  GeogebraCommonKernelConstruction_setAndConsume_geoSetLabelOrder_(self, new_JavaUtilTreeSet_initWithJavaUtilComparator_([new_GeogebraCommonKernelConstruction_LabelComparator_initWithGeogebraCommonKernelConstruction_(self) autorelease]));
  GeogebraCommonKernelConstruction_setAndConsume_geoSetsTypeMap_(self, new_JavaUtilHashMap_init());
  GeogebraCommonKernelConstruction_setAndConsume_euclidianViewCE_(self, new_JavaUtilArrayList_init());
  if (parentConstruction != nil) GeogebraCommonKernelConstruction_set_consDefaults_(self, GeogebraCommonKernelConstruction_getConstructionDefaults(parentConstruction));
  else [self newConstructionDefaults];
  [self initAxis];
  GeogebraCommonKernelConstruction_setAndConsume_geoTable_(self, new_JavaUtilHashMap_initWithInt_(200));
  [self initGeoTables];
}

GeogebraCommonKernelConstruction *new_GeogebraCommonKernelConstruction_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelKernel *k, GeogebraCommonKernelConstruction *parentConstruction) {
  GeogebraCommonKernelConstruction *self = [GeogebraCommonKernelConstruction alloc];
  GeogebraCommonKernelConstruction_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(self, k, parentConstruction);
  return self;
}

GeogebraCommonKernelConstructionDefaults *GeogebraCommonKernelConstruction_getConstructionDefaults(GeogebraCommonKernelConstruction *self) {
  return self->consDefaults_;
}

jboolean GeogebraCommonKernelConstruction_updateAllConstructionProtocolAlgorithms(GeogebraCommonKernelConstruction *self) {
  jint size = [((JavaUtilArrayList *) nil_chk(self->algoList_)) size];
  JavaUtilArrayList *updateAlgos = nil;
  for (jint i = 0; i < size; ++i) {
    GeogebraCommonKernelAlgosAlgoElement *algo = [self->algoList_ getWithInt:i];
    if ([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) wantsConstructionProtocolUpdate]) {
      if (updateAlgos == nil) updateAlgos = [new_JavaUtilArrayList_init() autorelease];
      [((JavaUtilArrayList *) nil_chk(updateAlgos)) addWithId:algo];
    }
  }
  if (updateAlgos != nil) {
    GeogebraCommonKernelAlgosAlgoElement_updateCascadeAlgosWithJavaUtilArrayList_(updateAlgos);
  }
  if (updateAlgos != nil) {
    GeogebraCommonMainApp *app = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication];
    if ([((GeogebraCommonMainApp *) nil_chk(app)) isUsingFullGui] && [app getGuiManager] != nil) [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app getGuiManager])) updateConstructionProtocol];
  }
  return updateAlgos != nil;
}

void GeogebraCommonKernelConstruction_updateAllFreeRandomGeosNoCascade(GeogebraCommonKernelConstruction *self) {
  if (self->randomElements_ == nil) return;
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(self->randomElements_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *num = [it next];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(num)) isGeoNumeric] && [num getParentAlgorithm] == nil) {
      GeogebraCommonKernelGeosGeoNumeric *number = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(num, [GeogebraCommonKernelGeosGeoNumeric class]);
      [number updateRandomNoCascade];
      [number update];
    }
  }
}

void GeogebraCommonKernelConstruction_addToGeoSetsWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *self, GeogebraCommonKernelGeosGeoElement *geo) {
  [((JavaUtilTreeSet *) nil_chk(self->geoSetConsOrder_)) addWithId:geo];
  [((JavaUtilTreeSet *) nil_chk(self->geoSetWithCasCells_)) addWithId:geo];
  [((JavaUtilTreeSet *) nil_chk(self->geoSetLabelOrder_)) addWithId:geo];
  GeogebraCommonPluginGeoClassEnum *type = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType];
  JavaUtilTreeSet *typeSet = [((JavaUtilHashMap *) nil_chk(self->geoSetsTypeMap_)) getWithId:type];
  if (typeSet == nil) {
    typeSet = GeogebraCommonKernelConstruction_createTypeSetWithGeogebraCommonPluginGeoClassEnum_(self, type);
  }
  [((JavaUtilTreeSet *) nil_chk(typeSet)) addWithId:geo];
}

JavaUtilTreeSet *GeogebraCommonKernelConstruction_createTypeSetWithGeogebraCommonPluginGeoClassEnum_(GeogebraCommonKernelConstruction *self, GeogebraCommonPluginGeoClassEnum *type) {
  JavaUtilTreeSet *typeSet = [new_JavaUtilTreeSet_initWithJavaUtilComparator_([new_GeogebraCommonKernelConstruction_LabelComparator_initWithGeogebraCommonKernelConstruction_(self) autorelease]) autorelease];
  [((JavaUtilHashMap *) nil_chk(self->geoSetsTypeMap_)) putWithId:type withId:typeSet];
  return typeSet;
}

void GeogebraCommonKernelConstruction_removeFromGeoSetsWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *self, GeogebraCommonKernelGeosGeoElement *geo) {
  [((JavaUtilTreeSet *) nil_chk(self->geoSetConsOrder_)) removeWithId:geo];
  [((JavaUtilTreeSet *) nil_chk(self->geoSetWithCasCells_)) removeWithId:geo];
  [((JavaUtilTreeSet *) nil_chk(self->geoSetLabelOrder_)) removeWithId:geo];
  GeogebraCommonPluginGeoClassEnum *type = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType];
  JavaUtilTreeSet *typeSet = [((JavaUtilHashMap *) nil_chk(self->geoSetsTypeMap_)) getWithId:type];
  if (typeSet != nil) [typeSet removeWithId:geo];
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelConstruction_checkConstructionStepWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *self, GeogebraCommonKernelGeosGeoElement *geo) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isAvailableAtConstructionStepWithInt:self->step_]) {
    return geo;
  }
  return nil;
}

void GeogebraCommonKernelConstruction_updateConstructionOrderWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *self, GeogebraCommonKernelGeosGeoElement *oldGeo, GeogebraCommonKernelGeosGeoElement *newGeo) {
  JavaUtilTreeSet *predSet = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo)) getAllPredecessors];
  jint maxPredIndex = [newGeo getConstructionIndex];
  for (GeogebraCommonKernelGeosGeoElement * __strong pred in nil_chk(predSet)) {
    jint predIndex = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(pred)) getConstructionIndex];
    if (predIndex > maxPredIndex) maxPredIndex = predIndex;
  }
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(oldGeo)) getConstructionIndex] > maxPredIndex) return;
  for (GeogebraCommonKernelGeosGeoElement * __strong pred in predSet) {
    [self moveInConstructionListWithGeogebraCommonKernelGeosGeoElement:pred withInt:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(pred)) getMinConstructionIndex]];
  }
  [self moveInConstructionListWithGeogebraCommonKernelGeosGeoElement:newGeo withInt:[newGeo getMinConstructionIndex]];
  [self moveInConstructionListWithGeogebraCommonKernelGeosGeoElement:oldGeo withInt:[oldGeo getMaxConstructionIndex]];
}

void GeogebraCommonKernelConstruction_buildConstructionWithJavaLangStringBuilder_(GeogebraCommonKernelConstruction *self, JavaLangStringBuilder *consXML) {
  @try {
    if (self->undoManager_ == nil) GeogebraCommonKernelConstruction_set_undoManager_(self, [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getUndoManagerWithGeogebraCommonKernelConstruction:self]);
    [((GeogebraCommonKernelUndoManager *) nil_chk(self->undoManager_)) processXMLWithNSString:[((JavaLangStringBuilder *) nil_chk(consXML)) description]];
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyReset];
  }
  @catch (JavaLangException *e) {
    [self restoreCurrentUndoInfo];
    @throw e;
  }
  @catch (GeogebraCommonMainMyError *err) {
    [self restoreCurrentUndoInfo];
    @throw err;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelConstruction)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelConstruction_ConstantsEnum)

GeogebraCommonKernelConstruction_ConstantsEnum *GeogebraCommonKernelConstruction_ConstantsEnum_values_[6];

@implementation GeogebraCommonKernelConstruction_ConstantsEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonKernelConstruction_ConstantsEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonKernelConstruction_ConstantsEnum_values() {
  GeogebraCommonKernelConstruction_ConstantsEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelConstruction_ConstantsEnum_values_ count:6 type:GeogebraCommonKernelConstruction_ConstantsEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelConstruction_ConstantsEnum_values();
}

+ (GeogebraCommonKernelConstruction_ConstantsEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelConstruction_ConstantsEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelConstruction_ConstantsEnum *GeogebraCommonKernelConstruction_ConstantsEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelConstruction_ConstantsEnum_initialize();
  for (int i = 0; i < 6; i++) {
    GeogebraCommonKernelConstruction_ConstantsEnum *e = GeogebraCommonKernelConstruction_ConstantsEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelConstruction_ConstantsEnum class]) {
    GeogebraCommonKernelConstruction_ConstantsEnum_NOT = new_GeogebraCommonKernelConstruction_ConstantsEnum_initWithNSString_withInt_(@"NOT", 0);
    GeogebraCommonKernelConstruction_ConstantsEnum_X_AXIS = new_GeogebraCommonKernelConstruction_ConstantsEnum_initWithNSString_withInt_(@"X_AXIS", 1);
    GeogebraCommonKernelConstruction_ConstantsEnum_Y_AXIS = new_GeogebraCommonKernelConstruction_ConstantsEnum_initWithNSString_withInt_(@"Y_AXIS", 2);
    GeogebraCommonKernelConstruction_ConstantsEnum_Z_AXIS = new_GeogebraCommonKernelConstruction_ConstantsEnum_initWithNSString_withInt_(@"Z_AXIS", 3);
    GeogebraCommonKernelConstruction_ConstantsEnum_XOY_PLANE = new_GeogebraCommonKernelConstruction_ConstantsEnum_initWithNSString_withInt_(@"XOY_PLANE", 4);
    GeogebraCommonKernelConstruction_ConstantsEnum_SPACE = new_GeogebraCommonKernelConstruction_ConstantsEnum_initWithNSString_withInt_(@"SPACE", 5);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelConstruction_ConstantsEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "NOT", "NOT", 0x4019, "Lgeogebra.common.kernel.Construction$Constants;", &GeogebraCommonKernelConstruction_ConstantsEnum_NOT, NULL,  },
    { "X_AXIS", "X_AXIS", 0x4019, "Lgeogebra.common.kernel.Construction$Constants;", &GeogebraCommonKernelConstruction_ConstantsEnum_X_AXIS, NULL,  },
    { "Y_AXIS", "Y_AXIS", 0x4019, "Lgeogebra.common.kernel.Construction$Constants;", &GeogebraCommonKernelConstruction_ConstantsEnum_Y_AXIS, NULL,  },
    { "Z_AXIS", "Z_AXIS", 0x4019, "Lgeogebra.common.kernel.Construction$Constants;", &GeogebraCommonKernelConstruction_ConstantsEnum_Z_AXIS, NULL,  },
    { "XOY_PLANE", "XOY_PLANE", 0x4019, "Lgeogebra.common.kernel.Construction$Constants;", &GeogebraCommonKernelConstruction_ConstantsEnum_XOY_PLANE, NULL,  },
    { "SPACE", "SPACE", 0x4019, "Lgeogebra.common.kernel.Construction$Constants;", &GeogebraCommonKernelConstruction_ConstantsEnum_SPACE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.Construction$Constants;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelConstruction_ConstantsEnum = { 2, "Constants", "geogebra.common.kernel", "Construction", 0x4019, 0, NULL, 6, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/Construction$Constants;>;" };
  return &_GeogebraCommonKernelConstruction_ConstantsEnum;
}

@end

void GeogebraCommonKernelConstruction_ConstantsEnum_initWithNSString_withInt_(GeogebraCommonKernelConstruction_ConstantsEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonKernelConstruction_ConstantsEnum *new_GeogebraCommonKernelConstruction_ConstantsEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonKernelConstruction_ConstantsEnum *self = [GeogebraCommonKernelConstruction_ConstantsEnum alloc];
  GeogebraCommonKernelConstruction_ConstantsEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelConstruction_ConstantsEnum)

@implementation GeogebraCommonKernelConstruction_LabelComparator

- (jint)compareWithId:(GeogebraCommonKernelGeosGeoElement *)ob1
               withId:(GeogebraCommonKernelGeosGeoElement *)ob2 {
  GeogebraCommonKernelGeosGeoElement *geo1 = ob1;
  GeogebraCommonKernelGeosGeoElement *geo2 = ob2;
  return GeogebraCommonKernelGeosGeoElement_compareLabelsWithNSString_withNSString_([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) getLabelSimple], [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) getLabelSimple]);
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)outer$ {
  GeogebraCommonKernelConstruction_LabelComparator_initWithGeogebraCommonKernelConstruction_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelConstruction_LabelComparator = { 2, "LabelComparator", "geogebra.common.kernel", "Construction", 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Lgeogebra/common/kernel/geos/GeoElement;>;" };
  return &_GeogebraCommonKernelConstruction_LabelComparator;
}

@end

void GeogebraCommonKernelConstruction_LabelComparator_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction_LabelComparator *self, GeogebraCommonKernelConstruction *outer$) {
  NSObject_init(self);
}

GeogebraCommonKernelConstruction_LabelComparator *new_GeogebraCommonKernelConstruction_LabelComparator_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *outer$) {
  GeogebraCommonKernelConstruction_LabelComparator *self = [GeogebraCommonKernelConstruction_LabelComparator alloc];
  GeogebraCommonKernelConstruction_LabelComparator_initWithGeogebraCommonKernelConstruction_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelConstruction_LabelComparator)
