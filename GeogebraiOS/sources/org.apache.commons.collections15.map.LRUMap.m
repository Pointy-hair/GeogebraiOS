//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/collections15/map/LRUMap.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Map.h"
#include "org/apache/commons/collections15/map/AbstractHashedMap.h"
#include "org/apache/commons/collections15/map/AbstractLinkedMap.h"
#include "org/apache/commons/collections15/map/LRUMap.h"

@interface OrgApacheCommonsCollections15MapLRUMap () {
 @public
  jint maxSize__;
  jboolean scanUntilRemovable_;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

@end

@implementation OrgApacheCommonsCollections15MapLRUMap

- (instancetype)init {
  OrgApacheCommonsCollections15MapLRUMap_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)maxSize {
  OrgApacheCommonsCollections15MapLRUMap_initWithInt_(self, maxSize);
  return self;
}

- (instancetype)initWithInt:(jint)maxSize
                withBoolean:(jboolean)scanUntilRemovable {
  OrgApacheCommonsCollections15MapLRUMap_initWithInt_withBoolean_(self, maxSize, scanUntilRemovable);
  return self;
}

- (instancetype)initWithInt:(jint)maxSize
                  withFloat:(jfloat)loadFactor {
  OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_(self, maxSize, loadFactor);
  return self;
}

- (instancetype)initWithInt:(jint)maxSize
                  withFloat:(jfloat)loadFactor
                withBoolean:(jboolean)scanUntilRemovable {
  OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_withBoolean_(self, maxSize, loadFactor, scanUntilRemovable);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  OrgApacheCommonsCollections15MapLRUMap_initWithJavaUtilMap_(self, map);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map
                        withBoolean:(jboolean)scanUntilRemovable {
  OrgApacheCommonsCollections15MapLRUMap_initWithJavaUtilMap_withBoolean_(self, map, scanUntilRemovable);
  return self;
}

- (id)getWithId:(id)key {
  OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *entry_ = (OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *) check_class_cast([self getEntryWithId:key], [OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry class]);
  if (entry_ == nil) {
    return nil;
  }
  [self moveToMRUWithOrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry:entry_];
  return [((OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *) nil_chk(entry_)) getValue];
}

- (void)moveToMRUWithOrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry:(OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *)entry_ {
  if (((OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *) nil_chk(entry_))->after_ != header_) {
    modCount_++;
    OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry_set_after_(nil_chk(entry_->before_), entry_->after_);
    OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry_set_before_(nil_chk(entry_->after_), entry_->before_);
    OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry_set_after_(entry_, header_);
    OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry_set_before_(entry_, ((OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *) nil_chk(header_))->before_);
    OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry_set_after_(header_->before_, entry_);
    OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry_set_before_(header_, entry_);
  }
}

- (void)updateEntryWithOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:(OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *)entry_
                                                                            withId:(id)newValue {
  [self moveToMRUWithOrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry:(OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *) check_class_cast(entry_, [OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry class])];
  [((OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *) nil_chk(entry_)) setValueWithId:newValue];
}

- (void)addMappingWithInt:(jint)hashIndex
                  withInt:(jint)hashCode
                   withId:(id)key
                   withId:(id)value {
  if ([self isFull]) {
    OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *reuse = ((OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *) nil_chk(header_))->after_;
    jboolean removeLRUEntry = NO;
    if (scanUntilRemovable_) {
      while (reuse != header_) {
        if ([self removeLRUWithOrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry:reuse]) {
          removeLRUEntry = YES;
          break;
        }
        reuse = ((OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *) nil_chk(reuse))->after_;
      }
    }
    else {
      removeLRUEntry = [self removeLRUWithOrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry:reuse];
    }
    if (removeLRUEntry) {
      [self reuseMappingWithOrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry:reuse withInt:hashIndex withInt:hashCode withId:key withId:value];
    }
    else {
      [super addMappingWithInt:hashIndex withInt:hashCode withId:key withId:value];
    }
  }
  else {
    [super addMappingWithInt:hashIndex withInt:hashCode withId:key withId:value];
  }
}

- (void)reuseMappingWithOrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry:(OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *)entry_
                                                                            withInt:(jint)hashIndex
                                                                            withInt:(jint)hashCode
                                                                             withId:(id)key
                                                                             withId:(id)value {
  jint removeIndex = [self hashIndexWithInt:((OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *) nil_chk(entry_))->hashCode__ withInt:((IOSObjectArray *) nil_chk(data_))->size_];
  OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *loop = IOSObjectArray_Get(data_, removeIndex);
  OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *previous = nil;
  while (loop != entry_) {
    previous = loop;
    loop = ((OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *) nil_chk(loop))->next_;
  }
  modCount_++;
  [self removeEntryWithOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:entry_ withInt:removeIndex withOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:previous];
  [self reuseEntryWithOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:entry_ withInt:hashIndex withInt:hashCode withId:key withId:value];
  [self addEntryWithOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:entry_ withInt:hashIndex];
}

- (jboolean)removeLRUWithOrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry:(OrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry *)entry_ {
  return YES;
}

- (jboolean)isFull {
  return (size__ >= maxSize__);
}

- (jint)maxSize {
  return maxSize__;
}

- (jboolean)isScanUntilRemovable {
  return scanUntilRemovable_;
}

- (id)clone {
  return [super clone];
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  [self doWriteObjectWithJavaIoObjectOutputStream:outArg];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  [self doReadObjectWithJavaIoObjectInputStream:inArg];
}

- (void)doWriteObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeIntWithInt:maxSize__];
  [super doWriteObjectWithJavaIoObjectOutputStream:outArg];
}

- (void)doReadObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  maxSize__ = [((JavaIoObjectInputStream *) nil_chk(inArg)) readInt];
  [super doReadObjectWithJavaIoObjectInputStream:inArg];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "LRUMap", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "LRUMap", NULL, 0x1, NULL, NULL },
    { "initWithInt:withBoolean:", "LRUMap", NULL, 0x1, NULL, NULL },
    { "initWithInt:withFloat:", "LRUMap", NULL, 0x1, NULL, NULL },
    { "initWithInt:withFloat:withBoolean:", "LRUMap", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilMap:", "LRUMap", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilMap:withBoolean:", "LRUMap", NULL, 0x1, NULL, NULL },
    { "getWithId:", "get", "TV;", 0x1, NULL, "(Ljava/lang/Object;)TV;" },
    { "moveToMRUWithOrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry:", "moveToMRU", "V", 0x4, NULL, NULL },
    { "updateEntryWithOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:withId:", "updateEntry", "V", 0x4, NULL, "(Lorg/apache/commons/collections15/map/AbstractHashedMap$HashEntry<TK;TV;>;TV;)V" },
    { "addMappingWithInt:withInt:withId:withId:", "addMapping", "V", 0x4, NULL, "(IITK;TV;)V" },
    { "reuseMappingWithOrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry:withInt:withInt:withId:withId:", "reuseMapping", "V", 0x4, NULL, "(Lorg/apache/commons/collections15/map/AbstractLinkedMap$LinkEntry<TK;TV;>;IITK;TV;)V" },
    { "removeLRUWithOrgApacheCommonsCollections15MapAbstractLinkedMap_LinkEntry:", "removeLRU", "Z", 0x4, NULL, NULL },
    { "isFull", NULL, "Z", 0x1, NULL, NULL },
    { "maxSize", NULL, "I", 0x1, NULL, NULL },
    { "isScanUntilRemovable", NULL, "Z", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;", NULL },
    { "doWriteObjectWithJavaIoObjectOutputStream:", "doWriteObject", "V", 0x4, "Ljava.io.IOException;", NULL },
    { "doReadObjectWithJavaIoObjectInputStream:", "doReadObject", "V", 0x4, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x18, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsCollections15MapLRUMap_serialVersionUID },
    { "DEFAULT_MAX_SIZE_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsCollections15MapLRUMap_DEFAULT_MAX_SIZE },
    { "maxSize__", "maxSize", 0x82, "I", NULL, NULL,  },
    { "scanUntilRemovable_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"TK;", "TV;"};
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15MapLRUMap = { 2, "LRUMap", "org.apache.commons.collections15.map", NULL, 0x1, 21, methods, 4, fields, 2, superclass_type_args, 0, NULL, NULL, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Lorg/apache/commons/collections15/map/AbstractLinkedMap<TK;TV;>;Lorg/apache/commons/collections15/BoundedMap<TK;TV;>;Ljava/io/Serializable;Ljava/lang/Cloneable;" };
  return &_OrgApacheCommonsCollections15MapLRUMap;
}

@end

void OrgApacheCommonsCollections15MapLRUMap_init(OrgApacheCommonsCollections15MapLRUMap *self) {
  OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_withBoolean_(self, OrgApacheCommonsCollections15MapLRUMap_DEFAULT_MAX_SIZE, OrgApacheCommonsCollections15MapAbstractHashedMap_DEFAULT_LOAD_FACTOR, NO);
}

OrgApacheCommonsCollections15MapLRUMap *new_OrgApacheCommonsCollections15MapLRUMap_init() {
  OrgApacheCommonsCollections15MapLRUMap *self = [OrgApacheCommonsCollections15MapLRUMap alloc];
  OrgApacheCommonsCollections15MapLRUMap_init(self);
  return self;
}

void OrgApacheCommonsCollections15MapLRUMap_initWithInt_(OrgApacheCommonsCollections15MapLRUMap *self, jint maxSize) {
  OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_(self, maxSize, OrgApacheCommonsCollections15MapAbstractHashedMap_DEFAULT_LOAD_FACTOR);
}

OrgApacheCommonsCollections15MapLRUMap *new_OrgApacheCommonsCollections15MapLRUMap_initWithInt_(jint maxSize) {
  OrgApacheCommonsCollections15MapLRUMap *self = [OrgApacheCommonsCollections15MapLRUMap alloc];
  OrgApacheCommonsCollections15MapLRUMap_initWithInt_(self, maxSize);
  return self;
}

void OrgApacheCommonsCollections15MapLRUMap_initWithInt_withBoolean_(OrgApacheCommonsCollections15MapLRUMap *self, jint maxSize, jboolean scanUntilRemovable) {
  OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_withBoolean_(self, maxSize, OrgApacheCommonsCollections15MapAbstractHashedMap_DEFAULT_LOAD_FACTOR, scanUntilRemovable);
}

OrgApacheCommonsCollections15MapLRUMap *new_OrgApacheCommonsCollections15MapLRUMap_initWithInt_withBoolean_(jint maxSize, jboolean scanUntilRemovable) {
  OrgApacheCommonsCollections15MapLRUMap *self = [OrgApacheCommonsCollections15MapLRUMap alloc];
  OrgApacheCommonsCollections15MapLRUMap_initWithInt_withBoolean_(self, maxSize, scanUntilRemovable);
  return self;
}

void OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_(OrgApacheCommonsCollections15MapLRUMap *self, jint maxSize, jfloat loadFactor) {
  OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_withBoolean_(self, maxSize, loadFactor, NO);
}

OrgApacheCommonsCollections15MapLRUMap *new_OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_(jint maxSize, jfloat loadFactor) {
  OrgApacheCommonsCollections15MapLRUMap *self = [OrgApacheCommonsCollections15MapLRUMap alloc];
  OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_(self, maxSize, loadFactor);
  return self;
}

void OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_withBoolean_(OrgApacheCommonsCollections15MapLRUMap *self, jint maxSize, jfloat loadFactor, jboolean scanUntilRemovable) {
  OrgApacheCommonsCollections15MapAbstractLinkedMap_initWithInt_withFloat_(self, (maxSize < 1 ? OrgApacheCommonsCollections15MapAbstractHashedMap_DEFAULT_CAPACITY : maxSize), loadFactor);
  if (maxSize < 1) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"LRUMap max size must be greater than 0") autorelease];
  }
  self->maxSize__ = maxSize;
  self->scanUntilRemovable_ = scanUntilRemovable;
}

OrgApacheCommonsCollections15MapLRUMap *new_OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_withBoolean_(jint maxSize, jfloat loadFactor, jboolean scanUntilRemovable) {
  OrgApacheCommonsCollections15MapLRUMap *self = [OrgApacheCommonsCollections15MapLRUMap alloc];
  OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_withBoolean_(self, maxSize, loadFactor, scanUntilRemovable);
  return self;
}

void OrgApacheCommonsCollections15MapLRUMap_initWithJavaUtilMap_(OrgApacheCommonsCollections15MapLRUMap *self, id<JavaUtilMap> map) {
  OrgApacheCommonsCollections15MapLRUMap_initWithJavaUtilMap_withBoolean_(self, map, NO);
}

OrgApacheCommonsCollections15MapLRUMap *new_OrgApacheCommonsCollections15MapLRUMap_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  OrgApacheCommonsCollections15MapLRUMap *self = [OrgApacheCommonsCollections15MapLRUMap alloc];
  OrgApacheCommonsCollections15MapLRUMap_initWithJavaUtilMap_(self, map);
  return self;
}

void OrgApacheCommonsCollections15MapLRUMap_initWithJavaUtilMap_withBoolean_(OrgApacheCommonsCollections15MapLRUMap *self, id<JavaUtilMap> map, jboolean scanUntilRemovable) {
  OrgApacheCommonsCollections15MapLRUMap_initWithInt_withFloat_withBoolean_(self, [((id<JavaUtilMap>) nil_chk(map)) size], OrgApacheCommonsCollections15MapAbstractHashedMap_DEFAULT_LOAD_FACTOR, scanUntilRemovable);
  [self putAllWithJavaUtilMap:map];
}

OrgApacheCommonsCollections15MapLRUMap *new_OrgApacheCommonsCollections15MapLRUMap_initWithJavaUtilMap_withBoolean_(id<JavaUtilMap> map, jboolean scanUntilRemovable) {
  OrgApacheCommonsCollections15MapLRUMap *self = [OrgApacheCommonsCollections15MapLRUMap alloc];
  OrgApacheCommonsCollections15MapLRUMap_initWithJavaUtilMap_withBoolean_(self, map, scanUntilRemovable);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15MapLRUMap)
