//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/EuclidianControllerCompanion.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianControllerCompanion.h"
#include "geogebra/common/euclidian/event/AbstractEvent.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/PathNormalizer.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/Region.h"
#include "geogebra/common/kernel/algos/AlgoCirclePointRadius.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "geogebra/common/kernel/algos/AlgoMidpoint.h"
#include "geogebra/common/kernel/algos/AlgoPolarLine.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionable.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@implementation GeogebraCommonEuclidianEuclidianControllerCompanion

- (instancetype)initWithGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)ec {
  GeogebraCommonEuclidianEuclidianControllerCompanion_initWithGeogebraCommonEuclidianEuclidianController_(self, ec);
  return self;
}

- (GeogebraCommonKernelGeosGeoAngle *)createAngleWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) checkZooming];
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([ec_ getAlgoDispatcher])) AngleWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(C, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (IOSObjectArray *)createAnglesWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) AnglesWithNSStringArray:nil withGeogebraCommonKernelGeosGeoPolygon:p];
}

- (GeogebraCommonKernelGeosGeoAngle *)createAngleWithGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v1
                                                 withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v2 {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) AngleWithNSString:nil withGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *) check_class_cast(v1, [GeogebraCommonKernelGeosGeoVector class]) withGeogebraCommonKernelGeosGeoVector:(GeogebraCommonKernelGeosGeoVector *) check_class_cast(v2, [GeogebraCommonKernelGeosGeoVector class])];
}

- (GeogebraCommonKernelGeosGeoAngle *)createAngleWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                                 withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)num
                                                                                withBoolean:(jboolean)clockWise {
  return (GeogebraCommonKernelGeosGeoAngle *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) AngleWithNSStringArray:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoNumberValue:num withBoolean:!clockWise]), 0), [GeogebraCommonKernelGeosGeoAngle class]);
}

- (GeogebraCommonKernelGeosGeoAngle *)createLineAngleWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                                                     withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) createLineAngleWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(h, [GeogebraCommonKernelGeosGeoLine class])];
}

- (IOSObjectArray *)translateWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                        withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)vec {
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) checkZooming];
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([ec_ getAlgoDispatcher])) TranslateWithNSString:nil withGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVector *) check_class_cast(vec, [GeogebraCommonKernelGeosGeoVector class])];
}

- (IOSObjectArray *)mirrorAtPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) MirrorWithNSString:nil withGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(point, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (IOSObjectArray *)mirrorAtLineWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                             withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) MirrorWithNSString:nil withGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(line, [GeogebraCommonKernelGeosGeoLine class])];
}

- (IOSObjectArray *)dilateFromPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                            withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)num
                               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getAlgoDispatcher])) DilateWithNSString:nil withGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelArithmeticNumberValue:num withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(point, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getSingleIntersectionPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                                                                        withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                                                                   withBoolean:(jboolean)coords2D {
  id<GeogebraCommonKernelKernelNDGeoPointND> point = nil;
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(a)) isGeoLine]) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoLine]) {
      if (![((GeogebraCommonKernelGeosGeoLine *) check_class_cast(a, [GeogebraCommonKernelGeosGeoLine class])) linDepWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(b, [GeogebraCommonKernelGeosGeoLine class])]) {
        point = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) IntersectLinesWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(a, [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelKernelNDGeoLineND:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(b, [GeogebraCommonKernelGeosGeoLine class])];
      }
      else return nil;
    }
    else if ([b isGeoConic]) {
      point = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) IntersectLineConicSingleWithNSString:nil withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(a, [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(b, [GeogebraCommonKernelGeosGeoConic class]) withDouble:ec_->xRW_ withDouble:ec_->yRW_];
    }
    else if ([b isGeoCurveCartesian]) {
      return (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) IntersectLineCurveWithNSStringArray:nil withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(a, [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(b, [GeogebraCommonKernelGeosGeoCurveCartesian class])]), 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    }
    else if ([b isGeoFunctionable]) {
      GeogebraCommonKernelGeosGeoFunction *f = [((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(b, @protocol(GeogebraCommonKernelGeosGeoFunctionable))) getGeoFunction];
      if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) isPolynomialFunctionWithBoolean:NO]) {
        point = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) IntersectPolynomialLineSingleWithNSString:nil withGeogebraCommonKernelGeosGeoFunction:f withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(a, [GeogebraCommonKernelGeosGeoLine class]) withDouble:ec_->xRW_ withDouble:ec_->yRW_];
      }
      GeogebraCommonKernelGeosGeoPoint *initPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getConstruction]) autorelease];
      [initPoint setCoordsWithDouble:ec_->xRW_ withDouble:ec_->yRW_ withDouble:1.0];
      point = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([ec_ getAlgoDispatcher])) IntersectFunctionLineWithNSString:nil withGeogebraCommonKernelGeosGeoFunction:f withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(a, [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoPoint:initPoint];
    }
    else {
      return nil;
    }
  }
  else if ([a isGeoConic]) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoLine]) {
      point = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) IntersectLineConicSingleWithNSString:nil withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(b, [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(a, [GeogebraCommonKernelGeosGeoConic class]) withDouble:ec_->xRW_ withDouble:ec_->yRW_];
    }
    else if ([b isGeoConic] && ![a isEqualWithGeogebraCommonKernelGeosGeoElement:b]) {
      point = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) IntersectConicsSingleWithNSString:nil withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(a, [GeogebraCommonKernelGeosGeoConic class]) withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(b, [GeogebraCommonKernelGeosGeoConic class]) withDouble:ec_->xRW_ withDouble:ec_->yRW_];
    }
    else {
      return nil;
    }
  }
  else if ([a isGeoFunctionable]) {
    GeogebraCommonKernelGeosGeoFunction *aFun = [((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(a, @protocol(GeogebraCommonKernelGeosGeoFunctionable))) getGeoFunction];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoLine]) {
      if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(aFun)) isPolynomialFunctionWithBoolean:NO]) {
        point = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) IntersectPolynomialLineSingleWithNSString:nil withGeogebraCommonKernelGeosGeoFunction:aFun withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(b, [GeogebraCommonKernelGeosGeoLine class]) withDouble:ec_->xRW_ withDouble:ec_->yRW_];
      }
      else {
        GeogebraCommonKernelGeosGeoPoint *initPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getConstruction]) autorelease];
        [initPoint setCoordsWithDouble:ec_->xRW_ withDouble:ec_->yRW_ withDouble:1.0];
        point = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([ec_ getAlgoDispatcher])) IntersectFunctionLineWithNSString:nil withGeogebraCommonKernelGeosGeoFunction:aFun withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(b, [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoPoint:initPoint];
      }
    }
    else if ([b isGeoFunctionable]) {
      GeogebraCommonKernelGeosGeoFunction *bFun = [((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(b, @protocol(GeogebraCommonKernelGeosGeoFunctionable))) getGeoFunction];
      if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(aFun)) isPolynomialFunctionWithBoolean:NO] && [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(bFun)) isPolynomialFunctionWithBoolean:NO]) {
        return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) IntersectPolynomialsSingleWithNSString:nil withGeogebraCommonKernelGeosGeoFunction:aFun withGeogebraCommonKernelGeosGeoFunction:bFun withDouble:ec_->xRW_ withDouble:ec_->yRW_];
      }
      GeogebraCommonKernelGeosGeoPoint *initPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getConstruction]) autorelease];
      [initPoint setCoordsWithDouble:ec_->xRW_ withDouble:ec_->yRW_ withDouble:1.0];
      point = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([ec_ getAlgoDispatcher])) IntersectFunctionsWithNSString:nil withGeogebraCommonKernelGeosGeoFunction:aFun withGeogebraCommonKernelGeosGeoFunction:bFun withGeogebraCommonKernelGeosGeoPoint:initPoint];
    }
    else {
      return nil;
    }
  }
  else if ([a isGeoCurveCartesian]) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoCurveCartesian]) {
      return (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) IntersectCurveCurveSingleWithNSStringArray:nil withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(a, [GeogebraCommonKernelGeosGeoCurveCartesian class]) withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(b, [GeogebraCommonKernelGeosGeoCurveCartesian class]) withDouble:ec_->xRW_ withDouble:ec_->yRW_]), 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    }
    else if ([b isGeoLine]) {
      return (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) IntersectLineCurveWithNSStringArray:nil withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(b, [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(a, [GeogebraCommonKernelGeosGeoCurveCartesian class])]), 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    }
  }
  if (point != nil) {
    if (!coords2D) {
      [point setCartesian3D];
      [point update];
    }
  }
  return point;
}

- (IOSObjectArray *)orthogonalWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) checkZooming];
  return [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([ec_ getAlgoDispatcher])) OrthogonalLineWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(point, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(line, [GeogebraCommonKernelGeosGeoLine class])] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)createNewPointWithNSString:(NSString *)label
                                                             withBoolean:(jboolean)forPreviewable
                                            withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
                                                              withDouble:(jdouble)x
                                                              withDouble:(jdouble)y
                                                              withDouble:(jdouble)z
                                                             withBoolean:(jboolean)complex
                                                             withBoolean:(jboolean)coords2D {
  return [((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) createNewPoint2DWithNSString:label withBoolean:forPreviewable withGeogebraCommonKernelPath:path withDouble:x withDouble:y withBoolean:complex withBoolean:coords2D];
}

- (GeogebraCommonKernelGeosGeoElement *)midpointWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) MidpointWithNSString:nil withGeogebraCommonKernelGeosGeoSegment:(GeogebraCommonKernelGeosGeoSegment *) check_class_cast(segment, [GeogebraCommonKernelGeosGeoSegment class])];
}

- (GeogebraCommonKernelGeosGeoElement *)midpointWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) CenterWithNSString:nil withGeogebraCommonKernelKernelNDGeoConicND:conic], [GeogebraCommonKernelGeosGeoElement class]);
}

- (GeogebraCommonKernelGeosGeoElement *)midpointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2 {
  GeogebraCommonKernelAlgosAlgoMidpoint *algo = [new_GeogebraCommonKernelAlgosAlgoMidpoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getConstruction], (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p1, [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p2, [GeogebraCommonKernelGeosGeoPoint class])) autorelease];
  return [algo getPoint];
}

- (IOSObjectArray *)regularPolygonWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint1
                                  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint2
                                  withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)value {
  [((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) addingPolygon];
  IOSObjectArray *elms = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([ec_ getAlgoDispatcher])) RegularPolygonWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointND:geoPoint1 withGeogebraCommonKernelKernelNDGeoPointND:geoPoint2 withGeogebraCommonKernelArithmeticNumberValue:value];
  [ec_->kernel_ notifyPolygonAdded];
  return elms;
}

- (GeogebraCommonKernelAlgosAlgoElement *)segmentAlgoWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                                               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2 {
  return [new_GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(cons, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p1, [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p2, [GeogebraCommonKernelGeosGeoPoint class]), nil) autorelease];
}

- (IOSObjectArray *)createCircle2WithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p0
                                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1 {
  return [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) CircleWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p0, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p1, [GeogebraCommonKernelGeosGeoPoint class])] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

- (GeogebraCommonKernelGeosGeoElement *)semicircleWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                                  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) SemicircleWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)circleWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)center
                                         withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)radius {
  GeogebraCommonKernelAlgosAlgoCirclePointRadius *algo = [new_GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(cons, nil, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(center, [GeogebraCommonKernelGeosGeoPoint class]), radius) autorelease];
  return [algo getCircle];
}

- (IOSObjectArray *)angularBisectorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                                   withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) AngularBisectorWithNSStringArray:nil withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [GeogebraCommonKernelGeosGeoLine class]) withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(h, [GeogebraCommonKernelGeosGeoLine class])];
}

- (GeogebraCommonKernelGeosGeoElement *)angularBisectorWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) AngularBisectorWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(C, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (GeogebraCommonKernelGeosGeoElement *)circleArcSectorWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2
                                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p3
                                                                                          withInt:(jint)type {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) CircleArcSectorWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p1, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p2, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p3, [GeogebraCommonKernelGeosGeoPoint class]) withInt:type];
}

- (GeogebraCommonKernelGeosGeoElement *)circumcircleArcWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2
                                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p3 {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) CircumcircleArcWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p1, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p2, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p3, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (GeogebraCommonKernelGeosGeoElement *)circumcircleSectorWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                                                          withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2
                                                          withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p3 {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) CircumcircleSectorWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p1, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p2, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p3, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (void)movePointWithBoolean:(jboolean)repaint
withGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event {
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->movedGeoPoint_)) setCoordsWithDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(ec_->xRW_) withDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(ec_->yRW_) withDouble:1.0];
  if ([((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(event)) isAltDown]) {
    jdouble multiplier = [ec_->movedGeoPoint_ getAnimationStep];
    jint n = J2ObjCFpToInt(JavaLangMath_ceilWithDouble_(1.0 / multiplier));
    if (n < 1) {
      n = 1;
    }
    if ([ec_->movedGeoPoint_ hasPath]) {
      jdouble dist = JavaLangDouble_MAX_VALUE;
      id<GeogebraCommonKernelPath> path = [ec_->movedGeoPoint_ getPath];
      jdouble t = ((GeogebraCommonKernelPathParameter *) nil_chk([ec_->movedGeoPoint_ getPathParameter]))->t_;
      t = GeogebraCommonKernelPathNormalizer_toNormalizedPathParameterWithDouble_withDouble_withDouble_(t, [((id<GeogebraCommonKernelPath>) nil_chk(path)) getMinParameter], [path getMaxParameter]);
      jdouble t_1 = t;
      for (jint i = 0; i < n; i++) {
        if (JavaLangMath_absWithDouble_(t - i * multiplier) < dist) {
          t_1 = i * multiplier;
          dist = JavaLangMath_absWithDouble_(t - i * multiplier);
        }
      }
      ((GeogebraCommonKernelPathParameter *) nil_chk([ec_->movedGeoPoint_ getPathParameter]))->t_ = GeogebraCommonKernelPathNormalizer_toParentPathParameterWithDouble_withDouble_withDouble_(t_1, [path getMinParameter], [path getMaxParameter]);
      [path pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:ec_->movedGeoPoint_];
      [ec_->movedGeoPoint_ updateCoords];
    }
  }
  [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(ec_->movedGeoPoint_, [GeogebraCommonKernelGeosGeoElement class])) updateCascade];
  ec_->movedGeoPointDragged_ = YES;
  if (repaint) {
    [((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) notifyRepaint];
  }
}

- (void)movePlaneWithBoolean:(jboolean)repaint
withGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)event {
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)createNewPointWithBoolean:(jboolean)forPreviewable
                                                            withBoolean:(jboolean)complex {
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) checkZoomingWithBoolean:forPreviewable];
  id<GeogebraCommonKernelKernelNDGeoPointND> ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([ec_ getAlgoDispatcher])) PointWithNSString:nil withDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(ec_->xRW_) withDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(ec_->yRW_) withBoolean:complex];
  return ret;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)createNewPointWithBoolean:(jboolean)forPreviewable
                                           withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
                                                            withBoolean:(jboolean)complex {
  return [self createNewPointWithNSString:nil withBoolean:forPreviewable withGeogebraCommonKernelPath:path withDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->xRW_) withDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(ec_->yRW_) withDouble:0 withBoolean:complex withBoolean:YES];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)createNewPointWithBoolean:(jboolean)forPreviewable
                                         withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region
                                                            withBoolean:(jboolean)complex {
  return [ec_ createNewPointWithNSString:nil withBoolean:forPreviewable withGeogebraCommonKernelRegion:region withDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->xRW_) withDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(ec_->yRW_) withDouble:0 withBoolean:complex withBoolean:YES];
}

- (void)processModeLockWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonKernelMatrixCoords *coords = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD2];
  ((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->xRW_ = [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX];
  ec_->yRW_ = [coords getY];
}

- (void)processModeLockWithGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path {
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) checkZooming];
  GeogebraCommonKernelGeosGeoPoint *p = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([ec_ getAlgoDispatcher])) PointWithNSString:nil withGeogebraCommonKernelPath:path withDouble:ec_->xRW_ withDouble:ec_->yRW_ withBoolean:NO withBoolean:NO withBoolean:YES];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) update];
  ec_->xRW_ = p->inhomX_;
  ec_->yRW_ = p->inhomY_;
}

- (JavaUtilArrayList *)removeParentsOfViewWithJavaUtilArrayList:(JavaUtilArrayList *)list {
  return list;
}

- (jboolean)viewOrientationForClockwiseWithBoolean:(jboolean)clockwise {
  return clockwise;
}

- (IOSObjectArray *)rotateByAngleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoRot
                             withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)phi
                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getAlgoDispatcher])) RotateWithNSString:nil withGeogebraCommonKernelGeosGeoElement:geoRot withGeogebraCommonKernelGeosGeoNumberValue:phi withGeogebraCommonKernelKernelNDGeoPointND:Q];
}

- (IOSObjectArray *)tangentWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                           withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) TangentWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointND:a withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (IOSObjectArray *)tangentWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)l
                          withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) TangentWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoLineND:l withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (IOSObjectArray *)tangentWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c1
                           withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c2 {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) CommonTangentsWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoConicND:c1 withGeogebraCommonKernelKernelNDGeoConicND:c2];
}

- (GeogebraCommonKernelGeosGeoElement *)polarLineWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                                                 withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonKernelAlgosAlgoPolarLine *algo = [new_GeogebraCommonKernelAlgosAlgoPolarLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoPointND_([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getConstruction], nil, c, P) autorelease];
  return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getLine], [GeogebraCommonKernelGeosGeoElement class]);
}

- (GeogebraCommonKernelGeosGeoElement *)diameterLineWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)l
                                                   withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) DiameterLineWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:l withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (GeogebraCommonKernelGeosGeoElement *)diameterLineWithGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v
                                                     withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) DiameterLineWithNSString:nil withGeogebraCommonKernelKernelNDGeoVectorND:v withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (GeogebraCommonKernelGeosGeoElement *)lineBisectorWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) LineBisectorWithNSString:nil withGeogebraCommonKernelGeosGeoSegment:(GeogebraCommonKernelGeosGeoSegment *) check_class_cast(segment, [GeogebraCommonKernelGeosGeoSegment class])];
}

- (GeogebraCommonKernelGeosGeoElement *)lineBisectorWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                                                    withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)b {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) LineBisectorWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(a, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(b, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)conic5WithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  IOSObjectArray *p = [IOSObjectArray arrayWithLength:5 type:GeogebraCommonKernelGeosGeoPoint_class_()];
  for (jint i = 0; i < 5; i++) {
    IOSObjectArray_Set(p, i, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(points), i), [GeogebraCommonKernelGeosGeoPoint class]));
  }
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) ConicWithNSString:nil withGeogebraCommonKernelGeosGeoPointArray:p];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)ellipseHyperbolaWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                                                            withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)b
                                                            withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)c
                                                                                               withInt:(jint)type {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) EllipseHyperbolaWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:a withGeogebraCommonKernelKernelNDGeoPointND:b withGeogebraCommonKernelKernelNDGeoPointND:c withInt:type];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)parabolaWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                                                     withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)l {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) ParabolaWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:a withGeogebraCommonKernelKernelNDGeoLineND:l];
}

- (GeogebraCommonKernelGeosGeoElement *)vectorPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                                                  withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v {
  GeogebraCommonKernelGeosGeoPoint *endPoint = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) TranslateWithNSString:nil withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(a, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVector *) check_class_cast(v, [GeogebraCommonKernelGeosGeoVector class])]), 0), [GeogebraCommonKernelGeosGeoPoint class]);
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([ec_ getAlgoDispatcher])) VectorWithNSString:nil withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(a, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:endPoint];
}

- (GeogebraCommonKernelGeosGeoElement *)locusWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)b {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) getAlgoDispatcher])) LocusWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:a withGeogebraCommonKernelKernelNDGeoPointND:b];
}

- (void)dealloc {
  RELEASE_(ec_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianController:", "EuclidianControllerCompanion", NULL, 0x1, NULL, NULL },
    { "createAngleWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "createAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x4, NULL, NULL },
    { "createAnglesWithGeogebraCommonKernelGeosGeoPolygon:", "createAngles", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "createAngleWithGeogebraCommonKernelKernelNDGeoVectorND:withGeogebraCommonKernelKernelNDGeoVectorND:", "createAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x4, NULL, NULL },
    { "createAngleWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoNumberValue:withBoolean:", "createAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "createLineAngleWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "createLineAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x4, NULL, NULL },
    { "translateWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoVectorND:", "translate", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "mirrorAtPointWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoPointND:", "mirrorAtPoint", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "mirrorAtLineWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoLineND:", "mirrorAtLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "dilateFromPointWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "dilateFromPoint", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getSingleIntersectionPointWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withBoolean:", "getSingleIntersectionPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "orthogonalWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "orthogonal", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "createNewPointWithNSString:withBoolean:withGeogebraCommonKernelPath:withDouble:withDouble:withDouble:withBoolean:withBoolean:", "createNewPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "midpointWithGeogebraCommonKernelKernelNDGeoSegmentND:", "midpoint", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "midpointWithGeogebraCommonKernelKernelNDGeoConicND:", "midpoint", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "midpointWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "midpoint", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "regularPolygonWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoNumberValue:", "regularPolygon", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "segmentAlgoWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "segmentAlgo", "Lgeogebra.common.kernel.algos.AlgoElement;", 0x4, NULL, NULL },
    { "createCircle2WithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "createCircle2", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "semicircleWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "semicircle", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "circleWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "circle", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "angularBisectorWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "angularBisector", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "angularBisectorWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "angularBisector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "circleArcSectorWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withInt:", "circleArcSector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "circumcircleArcWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "circumcircleArc", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "circumcircleSectorWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "circumcircleSector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "movePointWithBoolean:withGeogebraCommonEuclidianEventAbstractEvent:", "movePoint", "V", 0x1, NULL, NULL },
    { "movePlaneWithBoolean:withGeogebraCommonEuclidianEventAbstractEvent:", "movePlane", "V", 0x4, NULL, NULL },
    { "createNewPointWithBoolean:withBoolean:", "createNewPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "createNewPointWithBoolean:withGeogebraCommonKernelPath:withBoolean:", "createNewPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "createNewPointWithBoolean:withGeogebraCommonKernelRegion:withBoolean:", "createNewPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "processModeLockWithGeogebraCommonKernelKernelNDGeoPointND:", "processModeLock", "V", 0x4, NULL, NULL },
    { "processModeLockWithGeogebraCommonKernelPath:", "processModeLock", "V", 0x4, NULL, NULL },
    { "removeParentsOfViewWithJavaUtilArrayList:", "removeParentsOfView", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "viewOrientationForClockwiseWithBoolean:", "viewOrientationForClockwise", "Z", 0x1, NULL, NULL },
    { "rotateByAngleWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotateByAngle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "tangentWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoConicND:", "tangent", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "tangentWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "tangent", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "tangentWithGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoConicND:", "tangent", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "polarLineWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoConicND:", "polarLine", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "diameterLineWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "diameterLine", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "diameterLineWithGeogebraCommonKernelKernelNDGeoVectorND:withGeogebraCommonKernelKernelNDGeoConicND:", "diameterLine", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "lineBisectorWithGeogebraCommonKernelKernelNDGeoSegmentND:", "lineBisector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "lineBisectorWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "lineBisector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "conic5WithGeogebraCommonKernelKernelNDGeoPointNDArray:", "conic5", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "ellipseHyperbolaWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withInt:", "ellipseHyperbola", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "parabolaWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "parabola", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "vectorPointWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoVectorND:", "vectorPoint", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "locusWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "locus", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ec_", NULL, 0x4, "Lgeogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianEuclidianControllerCompanion = { 2, "EuclidianControllerCompanion", "geogebra.common.euclidian", NULL, 0x1, 49, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianEuclidianControllerCompanion;
}

@end

void GeogebraCommonEuclidianEuclidianControllerCompanion_initWithGeogebraCommonEuclidianEuclidianController_(GeogebraCommonEuclidianEuclidianControllerCompanion *self, GeogebraCommonEuclidianEuclidianController *ec) {
  NSObject_init(self);
  GeogebraCommonEuclidianEuclidianControllerCompanion_set_ec_(self, ec);
}

GeogebraCommonEuclidianEuclidianControllerCompanion *new_GeogebraCommonEuclidianEuclidianControllerCompanion_initWithGeogebraCommonEuclidianEuclidianController_(GeogebraCommonEuclidianEuclidianController *ec) {
  GeogebraCommonEuclidianEuclidianControllerCompanion *self = [GeogebraCommonEuclidianEuclidianControllerCompanion alloc];
  GeogebraCommonEuclidianEuclidianControllerCompanion_initWithGeogebraCommonEuclidianEuclidianController_(self, ec);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianEuclidianControllerCompanion)
