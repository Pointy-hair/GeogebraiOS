//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"
#include "org/apache/commons/math/ode/AbstractIntegrator.h"
#include "org/apache/commons/math/ode/DerivativeException.h"
#include "org/apache/commons/math/ode/FirstOrderDifferentialEquations.h"
#include "org/apache/commons/math/ode/IntegratorException.h"
#include "org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.h"
#include "org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.h"
#include "org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.h"
#include "org/apache/commons/math/ode/sampling/AbstractStepInterpolator.h"
#include "org/apache/commons/math/ode/sampling/DummyStepInterpolator.h"
#include "org/apache/commons/math/ode/sampling/StepHandler.h"
#include "org/apache/commons/math/ode/sampling/StepInterpolator.h"
#include "org/apache/commons/math/util/FastMath.h"

@interface OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator () {
 @public
  jboolean fsal_;
  IOSDoubleArray *c_;
  IOSObjectArray *a_;
  IOSDoubleArray *b_;
  OrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator *prototype_;
  jdouble exp_;
  jdouble safety_;
  jdouble minReduction_;
  jdouble maxGrowth_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator, c_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator, a_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator, b_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator, prototype_, OrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator *)

@implementation OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator

- (instancetype)initWithNSString:(NSString *)name
                     withBoolean:(jboolean)fsal
                 withDoubleArray:(IOSDoubleArray *)c
                withDoubleArray2:(IOSObjectArray *)a
                 withDoubleArray:(IOSDoubleArray *)b
withOrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator:(OrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator *)prototype
                      withDouble:(jdouble)minStep
                      withDouble:(jdouble)maxStep
                      withDouble:(jdouble)scalAbsoluteTolerance
                      withDouble:(jdouble)scalRelativeTolerance {
  OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator_initWithNSString_withBoolean_withDoubleArray_withDoubleArray2_withDoubleArray_withOrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator_withDouble_withDouble_withDouble_withDouble_(self, name, fsal, c, a, b, prototype, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                     withBoolean:(jboolean)fsal
                 withDoubleArray:(IOSDoubleArray *)c
                withDoubleArray2:(IOSObjectArray *)a
                 withDoubleArray:(IOSDoubleArray *)b
withOrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator:(OrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator *)prototype
                      withDouble:(jdouble)minStep
                      withDouble:(jdouble)maxStep
                 withDoubleArray:(IOSDoubleArray *)vecAbsoluteTolerance
                 withDoubleArray:(IOSDoubleArray *)vecRelativeTolerance {
  OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator_initWithNSString_withBoolean_withDoubleArray_withDoubleArray2_withDoubleArray_withOrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator_withDouble_withDouble_withDoubleArray_withDoubleArray_(self, name, fsal, c, a, b, prototype, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
  return self;
}

- (jint)getOrder {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getSafety {
  return safety_;
}

- (void)setSafetyWithDouble:(jdouble)safety {
  self->safety_ = safety;
}

- (jdouble)integrateWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:(id<OrgApacheCommonsMathOdeFirstOrderDifferentialEquations>)equations
                                                                    withDouble:(jdouble)t0
                                                               withDoubleArray:(IOSDoubleArray *)y0
                                                                    withDouble:(jdouble)t
                                                               withDoubleArray:(IOSDoubleArray *)y {
  [self sanityChecksWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:equations withDouble:t0 withDoubleArray:y0 withDouble:t withDoubleArray:y];
  [self setEquationsWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:equations];
  [self resetEvaluations];
  jboolean forward = t > t0;
  jint stages = ((IOSDoubleArray *) nil_chk(c_))->size_ + 1;
  if (y != y0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(y0, 0, y, 0, ((IOSDoubleArray *) nil_chk(y0))->size_);
  }
  IOSObjectArray *yDotK = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ stages, ((IOSDoubleArray *) nil_chk(y0))->size_ }];
  IOSDoubleArray *yTmp = [IOSDoubleArray arrayWithLength:y0->size_];
  IOSDoubleArray *yDotTmp = [IOSDoubleArray arrayWithLength:y0->size_];
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator *interpolator;
  if ([self requiresDenseOutput]) {
    OrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator *rki = (OrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator *) check_class_cast([((OrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator *) nil_chk(prototype_)) copy__], [OrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator class]);
    [((OrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator *) nil_chk(rki)) reinitializeWithOrgApacheCommonsMathOdeAbstractIntegrator:self withDoubleArray:yTmp withDoubleArray2:yDotK withBoolean:forward];
    interpolator = rki;
  }
  else {
    interpolator = [new_OrgApacheCommonsMathOdeSamplingDummyStepInterpolator_initWithDoubleArray_withDoubleArray_withBoolean_(yTmp, IOSObjectArray_Get(yDotK, stages - 1), forward) autorelease];
  }
  [((OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator *) nil_chk(interpolator)) storeTimeWithDouble:t0];
  stepStart_ = t0;
  jdouble hNew = 0;
  jboolean firstTime = YES;
  for (id<OrgApacheCommonsMathOdeSamplingStepHandler> __strong handler in nil_chk(stepHandlers_)) {
    [((id<OrgApacheCommonsMathOdeSamplingStepHandler>) nil_chk(handler)) reset];
  }
  [self setStateInitializedWithBoolean:NO];
  isLastStep_ = NO;
  do {
    [interpolator shift];
    jdouble error = 10;
    while (error >= 1.0) {
      if (firstTime || !fsal_) {
        [self computeDerivativesWithDouble:stepStart_ withDoubleArray:y withDoubleArray:IOSObjectArray_Get(yDotK, 0)];
      }
      if (firstTime) {
        IOSDoubleArray *scale_ = [IOSDoubleArray arrayWithLength:mainSetDimension_];
        if (vecAbsoluteTolerance_ == nil) {
          for (jint i = 0; i < scale_->size_; ++i) {
            *IOSDoubleArray_GetRef(scale_, i) = scalAbsoluteTolerance_ + scalRelativeTolerance_ * OrgApacheCommonsMathUtilFastMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(y), i));
          }
        }
        else {
          for (jint i = 0; i < scale_->size_; ++i) {
            *IOSDoubleArray_GetRef(scale_, i) = IOSDoubleArray_Get(vecAbsoluteTolerance_, i) + IOSDoubleArray_Get(nil_chk(vecRelativeTolerance_), i) * OrgApacheCommonsMathUtilFastMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(y), i));
          }
        }
        hNew = [self initializeStepWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:equations withBoolean:forward withInt:[self getOrder] withDoubleArray:scale_ withDouble:stepStart_ withDoubleArray:y withDoubleArray:IOSObjectArray_Get(yDotK, 0) withDoubleArray:yTmp withDoubleArray:IOSObjectArray_Get(yDotK, 1)];
        firstTime = NO;
      }
      stepSize_ = hNew;
      for (jint k = 1; k < stages; ++k) {
        for (jint j = 0; j < y0->size_; ++j) {
          jdouble sum = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(a_), k - 1)), 0) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(yDotK, 0)), j);
          for (jint l = 1; l < k; ++l) {
            sum += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(a_, k - 1)), l) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(yDotK, l)), j);
          }
          *IOSDoubleArray_GetRef(yTmp, j) = IOSDoubleArray_Get(nil_chk(y), j) + stepSize_ * sum;
        }
        [self computeDerivativesWithDouble:stepStart_ + IOSDoubleArray_Get(c_, k - 1) * stepSize_ withDoubleArray:yTmp withDoubleArray:IOSObjectArray_Get(yDotK, k)];
      }
      for (jint j = 0; j < y0->size_; ++j) {
        jdouble sum = IOSDoubleArray_Get(nil_chk(b_), 0) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(yDotK, 0)), j);
        for (jint l = 1; l < stages; ++l) {
          sum += IOSDoubleArray_Get(b_, l) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(yDotK, l)), j);
        }
        *IOSDoubleArray_GetRef(yTmp, j) = IOSDoubleArray_Get(nil_chk(y), j) + stepSize_ * sum;
      }
      error = [self estimateErrorWithDoubleArray2:yDotK withDoubleArray:y withDoubleArray:yTmp withDouble:stepSize_];
      if (error >= 1.0) {
        jdouble factor = OrgApacheCommonsMathUtilFastMath_minWithDouble_withDouble_(maxGrowth_, OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(minReduction_, safety_ * OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(error, exp_)));
        hNew = [self filterStepWithDouble:stepSize_ * factor withBoolean:forward withBoolean:NO];
      }
    }
    [interpolator storeTimeWithDouble:stepStart_ + stepSize_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(yTmp, 0, y, 0, y0->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(yDotK, stages - 1), 0, yDotTmp, 0, y0->size_);
    stepStart_ = [self acceptStepWithOrgApacheCommonsMathOdeSamplingAbstractStepInterpolator:interpolator withDoubleArray:y withDoubleArray:yDotTmp withDouble:t];
    if (!isLastStep_) {
      [interpolator storeTimeWithDouble:stepStart_];
      if (fsal_) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(yDotTmp, 0, IOSObjectArray_Get(yDotK, 0), 0, y0->size_);
      }
      jdouble factor = OrgApacheCommonsMathUtilFastMath_minWithDouble_withDouble_(maxGrowth_, OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(minReduction_, safety_ * OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(error, exp_)));
      jdouble scaledH = stepSize_ * factor;
      jdouble nextT = stepStart_ + scaledH;
      jboolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
      hNew = [self filterStepWithDouble:scaledH withBoolean:forward withBoolean:nextIsLast];
      jdouble filteredNextT = stepStart_ + hNew;
      jboolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
      if (filteredNextIsLast) {
        hNew = t - stepStart_;
      }
    }
  }
  while (!isLastStep_);
  jdouble stopTime = stepStart_;
  [self resetInternalState];
  return stopTime;
}

- (jdouble)getMinReduction {
  return minReduction_;
}

- (void)setMinReductionWithDouble:(jdouble)minReduction {
  self->minReduction_ = minReduction;
}

- (jdouble)getMaxGrowth {
  return maxGrowth_;
}

- (void)setMaxGrowthWithDouble:(jdouble)maxGrowth {
  self->maxGrowth_ = maxGrowth;
}

- (jdouble)estimateErrorWithDoubleArray2:(IOSObjectArray *)yDotK
                         withDoubleArray:(IOSDoubleArray *)y0
                         withDoubleArray:(IOSDoubleArray *)y1
                              withDouble:(jdouble)h {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(c_);
  RELEASE_(a_);
  RELEASE_(b_);
  RELEASE_(prototype_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withBoolean:withDoubleArray:withDoubleArray2:withDoubleArray:withOrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator:withDouble:withDouble:withDouble:withDouble:", "EmbeddedRungeKuttaIntegrator", NULL, 0x4, NULL, NULL },
    { "initWithNSString:withBoolean:withDoubleArray:withDoubleArray2:withDoubleArray:withOrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator:withDouble:withDouble:withDoubleArray:withDoubleArray:", "EmbeddedRungeKuttaIntegrator", NULL, 0x4, NULL, NULL },
    { "getOrder", NULL, "I", 0x401, NULL, NULL },
    { "getSafety", NULL, "D", 0x1, NULL, NULL },
    { "setSafetyWithDouble:", "setSafety", "V", 0x1, NULL, NULL },
    { "integrateWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:withDouble:withDoubleArray:withDouble:withDoubleArray:", "integrate", "D", 0x1, "Lorg.apache.commons.math.ode.DerivativeException;Lorg.apache.commons.math.ode.IntegratorException;", NULL },
    { "getMinReduction", NULL, "D", 0x1, NULL, NULL },
    { "setMinReductionWithDouble:", "setMinReduction", "V", 0x1, NULL, NULL },
    { "getMaxGrowth", NULL, "D", 0x1, NULL, NULL },
    { "setMaxGrowthWithDouble:", "setMaxGrowth", "V", 0x1, NULL, NULL },
    { "estimateErrorWithDoubleArray2:withDoubleArray:withDoubleArray:withDouble:", "estimateError", "D", 0x404, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fsal_", NULL, 0x12, "Z", NULL, NULL,  },
    { "c_", NULL, 0x12, "[D", NULL, NULL,  },
    { "a_", NULL, 0x12, "[[D", NULL, NULL,  },
    { "b_", NULL, 0x12, "[D", NULL, NULL,  },
    { "prototype_", NULL, 0x12, "Lorg.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator;", NULL, NULL,  },
    { "exp_", NULL, 0x12, "D", NULL, NULL,  },
    { "safety_", NULL, 0x2, "D", NULL, NULL,  },
    { "minReduction_", NULL, 0x2, "D", NULL, NULL,  },
    { "maxGrowth_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator = { 2, "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math.ode.nonstiff", NULL, 0x401, 11, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator;
}

@end

void OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator_initWithNSString_withBoolean_withDoubleArray_withDoubleArray2_withDoubleArray_withOrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator_withDouble_withDouble_withDouble_withDouble_(OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator *self, NSString *name, jboolean fsal, IOSDoubleArray *c, IOSObjectArray *a, IOSDoubleArray *b, OrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator *prototype, jdouble minStep, jdouble maxStep, jdouble scalAbsoluteTolerance, jdouble scalRelativeTolerance) {
  OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator_initWithNSString_withDouble_withDouble_withDouble_withDouble_(self, name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
  self->fsal_ = fsal;
  OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator_set_c_(self, c);
  OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator_set_a_(self, a);
  OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator_set_b_(self, b);
  OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator_set_prototype_(self, prototype);
  self->exp_ = -1.0 / [self getOrder];
  [self setSafetyWithDouble:0.9];
  [self setMinReductionWithDouble:0.2];
  [self setMaxGrowthWithDouble:10.0];
}

void OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator_initWithNSString_withBoolean_withDoubleArray_withDoubleArray2_withDoubleArray_withOrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator_withDouble_withDouble_withDoubleArray_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator *self, NSString *name, jboolean fsal, IOSDoubleArray *c, IOSObjectArray *a, IOSDoubleArray *b, OrgApacheCommonsMathOdeNonstiffRungeKuttaStepInterpolator *prototype, jdouble minStep, jdouble maxStep, IOSDoubleArray *vecAbsoluteTolerance, IOSDoubleArray *vecRelativeTolerance) {
  OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator_initWithNSString_withDouble_withDouble_withDoubleArray_withDoubleArray_(self, name, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
  self->fsal_ = fsal;
  OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator_set_c_(self, c);
  OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator_set_a_(self, a);
  OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator_set_b_(self, b);
  OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator_set_prototype_(self, prototype);
  self->exp_ = -1.0 / [self getOrder];
  [self setSafetyWithDouble:0.9];
  [self setMinReductionWithDouble:0.2];
  [self setMaxGrowthWithDouble:10.0];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathOdeNonstiffEmbeddedRungeKuttaIntegrator)
