//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/cas/AlgoTangentFunctionPoint.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoFunctionFreehand.h"
#include "geogebra/common/kernel/algos/AlgoPointOnPath.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/cas/AlgoDerivative.h"
#include "geogebra/common/kernel/cas/AlgoTangentFunctionPoint.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/statistics/AlgoFitPoly.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonKernelCasAlgoTangentFunctionPoint () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> P_;
  GeogebraCommonKernelGeosGeoLine *tangent_;
  GeogebraCommonKernelGeosGeoFunction *f_;
  GeogebraCommonKernelGeosGeoPoint *T_;
  jboolean pointOnFunction_;
  GeogebraCommonKernelGeosGeoFunction *deriv_;
  GeogebraCommonKernelCasAlgoDerivative *algo_;
  jboolean freehand_;
  GeogebraCommonKernelAlgosAlgoFunctionFreehand *freehandAlgo_;
  GeogebraCommonKernelGeosGeoList *freehandList_;
  GeogebraCommonKernelStatisticsAlgoFitPoly *algoFitPoly_;
  IOSObjectArray *points_;
  GeogebraCommonKernelGeosGeoList *geoList_;
}

- (GeogebraCommonKernelGeosGeoPoint *)newPointWithDouble:(jdouble)a OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionPoint, P_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionPoint, tangent_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionPoint, f_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionPoint, T_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionPoint, deriv_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionPoint, algo_, GeogebraCommonKernelCasAlgoDerivative *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionPoint, freehandAlgo_, GeogebraCommonKernelAlgosAlgoFunctionFreehand *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionPoint, freehandList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionPoint, algoFitPoly_, GeogebraCommonKernelStatisticsAlgoFitPoly *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionPoint, points_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionPoint, geoList_, GeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void GeogebraCommonKernelCasAlgoTangentFunctionPoint_compute(GeogebraCommonKernelCasAlgoTangentFunctionPoint *self);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCasAlgoTangentFunctionPoint_newPointWithDouble_(GeogebraCommonKernelCasAlgoTangentFunctionPoint *self, jdouble a);

@implementation GeogebraCommonKernelCasAlgoTangentFunctionPoint

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelCasAlgoTangentFunctionPoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, P, f);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelCasAlgoTangentFunctionPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(self, cons, P, f);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Tangent();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_TANGENTS;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, f_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:tangent_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoLine *)getTangent {
  return tangent_;
}

- (GeogebraCommonKernelGeosGeoFunction *)getFunction {
  return f_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getPoint {
  return P_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getTangentPoint {
  return T_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getTangentPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                        withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line {
  if (geo != f_) return nil;
  if (line != tangent_) {
    return nil;
  }
  return T_;
}

- (void)compute {
  GeogebraCommonKernelCasAlgoTangentFunctionPoint_compute(self);
}

- (GeogebraCommonKernelGeosGeoPoint *)newPointWithDouble:(jdouble)a {
  return GeogebraCommonKernelCasAlgoTangentFunctionPoint_newPointWithDouble_(self, a);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"TangentToAatB" withNSString:[((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:JreStrcat("$$C", @"x = x(", [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl], ')')];
}

- (void)dealloc {
  RELEASE_(P_);
  RELEASE_(tangent_);
  RELEASE_(f_);
  RELEASE_(T_);
  RELEASE_(deriv_);
  RELEASE_(algo_);
  RELEASE_(freehandAlgo_);
  RELEASE_(freehandList_);
  RELEASE_(algoFitPoly_);
  RELEASE_(points_);
  RELEASE_(geoList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoFunction:", "AlgoTangentFunctionPoint", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoFunction:", "AlgoTangentFunctionPoint", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getTangent", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getFunction", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x0, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x0, NULL, NULL },
    { "getTangentPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x0, NULL, NULL },
    { "getTangentPointWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoLine:", "getTangentPoint", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "newPointWithDouble:", "newPoint", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x2, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "tangent_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "T_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "pointOnFunction_", NULL, 0x2, "Z", NULL, NULL,  },
    { "deriv_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "algo_", NULL, 0x2, "Lgeogebra.common.kernel.cas.AlgoDerivative;", NULL, NULL,  },
    { "freehand_", NULL, 0x2, "Z", NULL, NULL,  },
    { "freehandAlgo_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoFunctionFreehand;", NULL, NULL,  },
    { "freehandList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "algoFitPoly_", NULL, 0x2, "Lgeogebra.common.kernel.statistics.AlgoFitPoly;", NULL, NULL,  },
    { "points_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "geoList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCasAlgoTangentFunctionPoint = { 2, "AlgoTangentFunctionPoint", "geogebra.common.kernel.cas", NULL, 0x1, 13, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCasAlgoTangentFunctionPoint;
}

@end

void GeogebraCommonKernelCasAlgoTangentFunctionPoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelCasAlgoTangentFunctionPoint *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> P, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelCasAlgoTangentFunctionPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(self, cons, P, f);
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->tangent_)) setLabelWithNSString:label];
}

GeogebraCommonKernelCasAlgoTangentFunctionPoint *new_GeogebraCommonKernelCasAlgoTangentFunctionPoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> P, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelCasAlgoTangentFunctionPoint *self = [GeogebraCommonKernelCasAlgoTangentFunctionPoint alloc];
  GeogebraCommonKernelCasAlgoTangentFunctionPoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, P, f);
  return self;
}

void GeogebraCommonKernelCasAlgoTangentFunctionPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelCasAlgoTangentFunctionPoint *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> P, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelCasAlgoTangentFunctionPoint_set_P_(self, P);
  GeogebraCommonKernelCasAlgoTangentFunctionPoint_set_f_(self, f);
  GeogebraCommonKernelCasAlgoTangentFunctionPoint_setAndConsume_tangent_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  self->pointOnFunction_ = NO;
  if ([[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPointOnPath class]]) {
    GeogebraCommonKernelAlgosAlgoPointOnPath *algo = (GeogebraCommonKernelAlgosAlgoPointOnPath *) check_class_cast([P getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoPointOnPath class]);
    self->pointOnFunction_ = ([((GeogebraCommonKernelAlgosAlgoPointOnPath *) nil_chk(algo)) getPath] == f);
  }
  if (self->pointOnFunction_) GeogebraCommonKernelCasAlgoTangentFunctionPoint_set_T_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [GeogebraCommonKernelGeosGeoPoint class]));
  else GeogebraCommonKernelCasAlgoTangentFunctionPoint_setAndConsume_T_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  [self->tangent_ setStartPointWithGeogebraCommonKernelGeosGeoPoint:self->T_];
  if ([[((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoFunctionFreehand class]]) {
    self->freehand_ = YES;
    GeogebraCommonKernelCasAlgoTangentFunctionPoint_set_freehandAlgo_(self, (GeogebraCommonKernelAlgosAlgoFunctionFreehand *) check_class_cast([f getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoFunctionFreehand class]));
    GeogebraCommonKernelCasAlgoTangentFunctionPoint_set_freehandList_(self, [((GeogebraCommonKernelAlgosAlgoFunctionFreehand *) nil_chk(self->freehandAlgo_)) getList]);
    GeogebraCommonKernelCasAlgoTangentFunctionPoint_setAndConsume_geoList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
    jint steps = 10;
    GeogebraCommonKernelCasAlgoTangentFunctionPoint_setAndConsume_points_(self, [IOSObjectArray newArrayWithLength:steps type:GeogebraCommonKernelGeosGeoPoint_class_()]);
    GeogebraCommonKernelCasAlgoTangentFunctionPoint_setAndConsume_algoFitPoly_(self, new_GeogebraCommonKernelStatisticsAlgoFitPoly_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(cons, self->geoList_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_([((GeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel], 5) autorelease]));
    [cons removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->algoFitPoly_];
  }
  else {
    GeogebraCommonKernelCasAlgoTangentFunctionPoint_setAndConsume_algo_(self, new_GeogebraCommonKernelCasAlgoDerivative_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withBoolean_(cons, f, YES));
    GeogebraCommonKernelCasAlgoTangentFunctionPoint_set_deriv_(self, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast([self->algo_ getResult], [GeogebraCommonKernelGeosGeoFunction class]));
    [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->algo_];
  }
  [self setInputOutput];
  GeogebraCommonKernelCasAlgoTangentFunctionPoint_compute(self);
}

GeogebraCommonKernelCasAlgoTangentFunctionPoint *new_GeogebraCommonKernelCasAlgoTangentFunctionPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> P, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelCasAlgoTangentFunctionPoint *self = [GeogebraCommonKernelCasAlgoTangentFunctionPoint alloc];
  GeogebraCommonKernelCasAlgoTangentFunctionPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(self, cons, P, f);
  return self;
}

void GeogebraCommonKernelCasAlgoTangentFunctionPoint_compute(GeogebraCommonKernelCasAlgoTangentFunctionPoint *self) {
  if (!([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) isDefined] && [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) isDefined] && (self->freehand_ || [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->deriv_)) isDefined]))) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->tangent_)) setUndefined];
    return;
  }
  jdouble slope;
  jdouble a = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getInhomX];
  jdouble fa = [self->f_ evaluateWithDouble:a];
  if (self->freehand_) {
    jint steps = ((IOSObjectArray *) nil_chk(self->points_))->size_;
    jdouble min = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoList *) nil_chk(self->freehandList_)) getWithInt:0])) evaluateDouble];
    jdouble max = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->freehandList_ getWithInt:1])) evaluateDouble];
    jdouble step = (max - min) / 100;
    jdouble offset = 0;
    if (a + step * (0 - steps / 2) < min) {
      offset = min - (a + step * (0 - steps / 2));
    }
    else if (a + step * (self->points_->size_ - 1 - steps / 2) > max) {
      offset = max - (a + step * (self->points_->size_ - 1 - steps / 2));
    }
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) clear];
    for (jint i = 0; i < self->points_->size_; i++) {
      IOSObjectArray_Set(self->points_, i, GeogebraCommonKernelCasAlgoTangentFunctionPoint_newPointWithDouble_(self, a + step * (i - steps / 2) + offset));
      [self->geoList_ addWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(self->points_, i)];
    }
    [((GeogebraCommonKernelStatisticsAlgoFitPoly *) nil_chk(self->algoFitPoly_)) compute];
    GeogebraCommonKernelGeosGeoFunction *fun = (GeogebraCommonKernelGeosGeoFunction *) check_class_cast([self->algoFitPoly_ getOutputWithInt:0], [GeogebraCommonKernelGeosGeoFunction class]);
    GeogebraCommonKernelArithmeticFunctionVariable *fv = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(fun)) getFunction])) getFunctionVariable];
    id<GeogebraCommonKernelArithmeticExpressionValue> derivFit = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([fun getFunction])) derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:fv];
    [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv)) setWithDouble:a];
    slope = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(derivFit)) evaluateDouble];
  }
  else {
    slope = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->deriv_)) evaluateWithDouble:a];
  }
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->tangent_)) setCoordsWithDouble:-slope withDouble:1.0 withDouble:a * slope - fa];
  if (!self->pointOnFunction_) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->T_)) setCoordsWithDouble:a withDouble:fa withDouble:1.0];
  }
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCasAlgoTangentFunctionPoint_newPointWithDouble_(GeogebraCommonKernelCasAlgoTangentFunctionPoint *self, jdouble a) {
  return [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self->cons_, a, [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) evaluateWithDouble:a], 1) autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCasAlgoTangentFunctionPoint)
