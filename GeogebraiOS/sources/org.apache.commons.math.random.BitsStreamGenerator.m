//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/random/BitsStreamGenerator.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "org/apache/commons/math/exception/NotStrictlyPositiveException.h"
#include "org/apache/commons/math/random/BitsStreamGenerator.h"
#include "org/apache/commons/math/util/FastMath.h"

@interface OrgApacheCommonsMathRandomBitsStreamGenerator () {
 @public
  jdouble nextGaussian__;
}

@end

@implementation OrgApacheCommonsMathRandomBitsStreamGenerator

- (instancetype)init {
  OrgApacheCommonsMathRandomBitsStreamGenerator_init(self);
  return self;
}

- (void)setSeedWithInt:(jint)seed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setSeedWithIntArray:(IOSIntArray *)seed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setSeedWithLong:(jlong)seed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)nextWithInt:(jint)bits {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)nextBoolean {
  return [self nextWithInt:1] != 0;
}

- (void)nextBytesWithByteArray:(IOSByteArray *)bytes {
  jint i = 0;
  jint iEnd = ((IOSByteArray *) nil_chk(bytes))->size_ - 3;
  while (i < iEnd) {
    jint random = [self nextWithInt:32];
    *IOSByteArray_GetRef(bytes, i) = (jbyte) (random & (jint) 0xff);
    *IOSByteArray_GetRef(bytes, i + 1) = (jbyte) ((RShift32(random, 8)) & (jint) 0xff);
    *IOSByteArray_GetRef(bytes, i + 2) = (jbyte) ((RShift32(random, 16)) & (jint) 0xff);
    *IOSByteArray_GetRef(bytes, i + 3) = (jbyte) ((RShift32(random, 24)) & (jint) 0xff);
    i += 4;
  }
  jint random = [self nextWithInt:32];
  while (i < bytes->size_) {
    *IOSByteArray_GetRef(bytes, i++) = (jbyte) (random & (jint) 0xff);
    random = RShift32(random, 8);
  }
}

- (jdouble)nextDouble {
  jlong high = LShift64(((jlong) [self nextWithInt:26]), 26);
  jint low = [self nextWithInt:26];
  return (high | low) * 2.220446049250313E-16;
}

- (jfloat)nextFloat {
  return [self nextWithInt:23] * 1.1920928955078125E-7f;
}

- (jdouble)nextGaussian {
  jdouble random;
  if (JavaLangDouble_isNaNWithDouble_(nextGaussian__)) {
    jdouble x = [self nextDouble];
    jdouble y = [self nextDouble];
    jdouble alpha = 2 * OrgApacheCommonsMathUtilFastMath_PI * x;
    jdouble r = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(-2 * OrgApacheCommonsMathUtilFastMath_logWithDouble_(y));
    random = r * OrgApacheCommonsMathUtilFastMath_cosWithDouble_(alpha);
    nextGaussian__ = r * OrgApacheCommonsMathUtilFastMath_sinWithDouble_(alpha);
  }
  else {
    random = nextGaussian__;
    nextGaussian__ = JavaLangDouble_NaN;
  }
  return random;
}

- (jint)nextInt {
  return [self nextWithInt:32];
}

- (jint)nextIntWithInt:(jint)n {
  if (n < 1) {
    @throw [new_OrgApacheCommonsMathExceptionNotStrictlyPositiveException_initWithNSNumber_(JavaLangInteger_valueOfWithInt_(n)) autorelease];
  }
  jint mask = n;
  mask |= RShift32(mask, 1);
  mask |= RShift32(mask, 2);
  mask |= RShift32(mask, 4);
  mask |= RShift32(mask, 8);
  mask |= RShift32(mask, 16);
  while (YES) {
    jint random = [self nextWithInt:32] & mask;
    if (random < n) {
      return random;
    }
  }
}

- (jlong)nextLong {
  jlong high = LShift64(((jlong) [self nextWithInt:32]), 32);
  jlong low = ([self nextWithInt:32]) & (jlong) 0xffffffffLL;
  return high | low;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BitsStreamGenerator", NULL, 0x1, NULL, NULL },
    { "setSeedWithInt:", "setSeed", "V", 0x401, NULL, NULL },
    { "setSeedWithIntArray:", "setSeed", "V", 0x401, NULL, NULL },
    { "setSeedWithLong:", "setSeed", "V", 0x401, NULL, NULL },
    { "nextWithInt:", "next", "I", 0x404, NULL, NULL },
    { "nextBoolean", NULL, "Z", 0x1, NULL, NULL },
    { "nextBytesWithByteArray:", "nextBytes", "V", 0x1, NULL, NULL },
    { "nextDouble", NULL, "D", 0x1, NULL, NULL },
    { "nextFloat", NULL, "F", 0x1, NULL, NULL },
    { "nextGaussian", NULL, "D", 0x1, NULL, NULL },
    { "nextInt", NULL, "I", 0x1, NULL, NULL },
    { "nextIntWithInt:", "nextInt", "I", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "nextLong", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "nextGaussian__", "nextGaussian", 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathRandomBitsStreamGenerator = { 2, "BitsStreamGenerator", "org.apache.commons.math.random", NULL, 0x401, 13, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathRandomBitsStreamGenerator;
}

@end

void OrgApacheCommonsMathRandomBitsStreamGenerator_init(OrgApacheCommonsMathRandomBitsStreamGenerator *self) {
  NSObject_init(self);
  self->nextGaussian__ = JavaLangDouble_NaN;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathRandomBitsStreamGenerator)
