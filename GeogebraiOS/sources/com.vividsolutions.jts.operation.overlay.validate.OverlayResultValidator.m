//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/operation/overlay/validate/OverlayResultValidator.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/Location.h"
#include "com/vividsolutions/jts/operation/overlay/OverlayOp.h"
#include "com/vividsolutions/jts/operation/overlay/snap/GeometrySnapper.h"
#include "com/vividsolutions/jts/operation/overlay/validate/FuzzyPointLocator.h"
#include "com/vividsolutions/jts/operation/overlay/validate/OffsetPointGenerator.h"
#include "com/vividsolutions/jts/operation/overlay/validate/OverlayResultValidator.h"
#include "java/io/PrintStream.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

#define ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_TOLERANCE 1.0E-6

@interface ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator () {
 @public
  IOSObjectArray *geom_;
  IOSObjectArray *locFinder_;
  IOSIntArray *location_;
  ComVividsolutionsJtsGeomCoordinate *invalidLocation_;
  jdouble boundaryDistanceTolerance_;
  id<JavaUtilList> testCoords_;
}

+ (jdouble)computeBoundaryDistanceToleranceWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g0
                                           withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g1;

- (void)addTestPtsWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g;

- (jboolean)checkValidWithInt:(jint)overlayOp;

- (jboolean)checkValidWithInt:(jint)overlayOp
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt;

+ (jboolean)hasLocationWithIntArray:(IOSIntArray *)location
                            withInt:(jint)loc;

- (jboolean)isValidResultWithInt:(jint)overlayOp
                    withIntArray:(IOSIntArray *)location;

- (void)reportResultWithInt:(jint)overlayOp
               withIntArray:(IOSIntArray *)location
                withBoolean:(jboolean)expectedInterior;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator, geom_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator, locFinder_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator, location_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator, invalidLocation_, ComVividsolutionsJtsGeomCoordinate *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator, testCoords_, id<JavaUtilList>)

J2OBJC_STATIC_FIELD_GETTER(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator, TOLERANCE, jdouble)

__attribute__((unused)) static jdouble ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_computeBoundaryDistanceToleranceWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *g0, ComVividsolutionsJtsGeomGeometry *g1);

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_addTestPtsWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator *self, ComVividsolutionsJtsGeomGeometry *g);

__attribute__((unused)) static jboolean ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_checkValidWithInt_(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator *self, jint overlayOp);

__attribute__((unused)) static jboolean ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_checkValidWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator *self, jint overlayOp, ComVividsolutionsJtsGeomCoordinate *pt);

__attribute__((unused)) static jboolean ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_hasLocationWithIntArray_withInt_(IOSIntArray *location, jint loc);

__attribute__((unused)) static jboolean ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_isValidResultWithInt_withIntArray_(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator *self, jint overlayOp, IOSIntArray *location);

__attribute__((unused)) static void ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_reportResultWithInt_withIntArray_withBoolean_(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator *self, jint overlayOp, IOSIntArray *location, jboolean expectedInterior);

@implementation ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator

+ (jboolean)isValidWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)a
                   withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)b
                                                withInt:(jint)overlayOp
                   withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)result {
  return ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_isValidWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_withInt_withComVividsolutionsJtsGeomGeometry_(a, b, overlayOp, result);
}

+ (jdouble)computeBoundaryDistanceToleranceWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g0
                                           withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g1 {
  return ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_computeBoundaryDistanceToleranceWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(g0, g1);
}

- (instancetype)initWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)a
                    withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)b
                    withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)result {
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(self, a, b, result);
  return self;
}

- (jboolean)isValidWithInt:(jint)overlayOp {
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_addTestPtsWithComVividsolutionsJtsGeomGeometry_(self, IOSObjectArray_Get(nil_chk(geom_), 0));
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_addTestPtsWithComVividsolutionsJtsGeomGeometry_(self, IOSObjectArray_Get(geom_, 1));
  jboolean isValid = ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_checkValidWithInt_(self, overlayOp);
  return isValid;
}

- (ComVividsolutionsJtsGeomCoordinate *)getInvalidLocation {
  return invalidLocation_;
}

- (void)addTestPtsWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_addTestPtsWithComVividsolutionsJtsGeomGeometry_(self, g);
}

- (jboolean)checkValidWithInt:(jint)overlayOp {
  return ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_checkValidWithInt_(self, overlayOp);
}

- (jboolean)checkValidWithInt:(jint)overlayOp
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt {
  return ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_checkValidWithInt_withComVividsolutionsJtsGeomCoordinate_(self, overlayOp, pt);
}

+ (jboolean)hasLocationWithIntArray:(IOSIntArray *)location
                            withInt:(jint)loc {
  return ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_hasLocationWithIntArray_withInt_(location, loc);
}

- (jboolean)isValidResultWithInt:(jint)overlayOp
                    withIntArray:(IOSIntArray *)location {
  return ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_isValidResultWithInt_withIntArray_(self, overlayOp, location);
}

- (void)reportResultWithInt:(jint)overlayOp
               withIntArray:(IOSIntArray *)location
                withBoolean:(jboolean)expectedInterior {
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_reportResultWithInt_withIntArray_withBoolean_(self, overlayOp, location, expectedInterior);
}

- (void)dealloc {
  RELEASE_(geom_);
  RELEASE_(locFinder_);
  RELEASE_(location_);
  RELEASE_(invalidLocation_);
  RELEASE_(testCoords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isValidWithComVividsolutionsJtsGeomGeometry:withComVividsolutionsJtsGeomGeometry:withInt:withComVividsolutionsJtsGeomGeometry:", "isValid", "Z", 0x9, NULL, NULL },
    { "computeBoundaryDistanceToleranceWithComVividsolutionsJtsGeomGeometry:withComVividsolutionsJtsGeomGeometry:", "computeBoundaryDistanceTolerance", "D", 0xa, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomGeometry:withComVividsolutionsJtsGeomGeometry:withComVividsolutionsJtsGeomGeometry:", "OverlayResultValidator", NULL, 0x1, NULL, NULL },
    { "isValidWithInt:", "isValid", "Z", 0x1, NULL, NULL },
    { "getInvalidLocation", NULL, "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "addTestPtsWithComVividsolutionsJtsGeomGeometry:", "addTestPts", "V", 0x2, NULL, NULL },
    { "checkValidWithInt:", "checkValid", "Z", 0x2, NULL, NULL },
    { "checkValidWithInt:withComVividsolutionsJtsGeomCoordinate:", "checkValid", "Z", 0x2, NULL, NULL },
    { "hasLocationWithIntArray:withInt:", "hasLocation", "Z", 0xa, NULL, NULL },
    { "isValidResultWithInt:withIntArray:", "isValidResult", "Z", 0x2, NULL, NULL },
    { "reportResultWithInt:withIntArray:withBoolean:", "reportResult", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TOLERANCE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_TOLERANCE },
    { "geom_", NULL, 0x2, "[Lcom.vividsolutions.jts.geom.Geometry;", NULL, NULL,  },
    { "locFinder_", NULL, 0x2, "[Lcom.vividsolutions.jts.operation.overlay.validate.FuzzyPointLocator;", NULL, NULL,  },
    { "location_", NULL, 0x2, "[I", NULL, NULL,  },
    { "invalidLocation_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
    { "boundaryDistanceTolerance_", NULL, 0x2, "D", NULL, NULL,  },
    { "testCoords_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator = { 2, "OverlayResultValidator", "com.vividsolutions.jts.operation.overlay.validate", NULL, 0x1, 11, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator;
}

@end

jboolean ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_isValidWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_withInt_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *a, ComVividsolutionsJtsGeomGeometry *b, jint overlayOp, ComVividsolutionsJtsGeomGeometry *result) {
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_initialize();
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator *validator = [new_ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(a, b, result) autorelease];
  return [validator isValidWithInt:overlayOp];
}

jdouble ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_computeBoundaryDistanceToleranceWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *g0, ComVividsolutionsJtsGeomGeometry *g1) {
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_initialize();
  return JavaLangMath_minWithDouble_withDouble_(ComVividsolutionsJtsOperationOverlaySnapGeometrySnapper_computeSizeBasedSnapToleranceWithComVividsolutionsJtsGeomGeometry_(g0), ComVividsolutionsJtsOperationOverlaySnapGeometrySnapper_computeSizeBasedSnapToleranceWithComVividsolutionsJtsGeomGeometry_(g1));
}

void ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator *self, ComVividsolutionsJtsGeomGeometry *a, ComVividsolutionsJtsGeomGeometry *b, ComVividsolutionsJtsGeomGeometry *result) {
  NSObject_init(self);
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_setAndConsume_location_(self, [IOSIntArray newArrayWithLength:3]);
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_set_invalidLocation_(self, nil);
  self->boundaryDistanceTolerance_ = ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_TOLERANCE;
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_setAndConsume_testCoords_(self, new_JavaUtilArrayList_init());
  self->boundaryDistanceTolerance_ = ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_computeBoundaryDistanceToleranceWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(a, b);
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_setAndConsume_geom_(self, [IOSObjectArray newArrayWithObjects:(id[]){ a, b, result } count:3 type:ComVividsolutionsJtsGeomGeometry_class_()]);
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_setAndConsume_locFinder_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [new_ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_initWithComVividsolutionsJtsGeomGeometry_withDouble_(IOSObjectArray_Get(self->geom_, 0), self->boundaryDistanceTolerance_) autorelease], [new_ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_initWithComVividsolutionsJtsGeomGeometry_withDouble_(IOSObjectArray_Get(self->geom_, 1), self->boundaryDistanceTolerance_) autorelease], [new_ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_initWithComVividsolutionsJtsGeomGeometry_withDouble_(IOSObjectArray_Get(self->geom_, 2), self->boundaryDistanceTolerance_) autorelease] } count:3 type:ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_class_()]);
}

ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator *new_ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *a, ComVividsolutionsJtsGeomGeometry *b, ComVividsolutionsJtsGeomGeometry *result) {
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator *self = [ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator alloc];
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsGeomGeometry_(self, a, b, result);
  return self;
}

void ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_addTestPtsWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator *self, ComVividsolutionsJtsGeomGeometry *g) {
  ComVividsolutionsJtsOperationOverlayValidateOffsetPointGenerator *ptGen = [new_ComVividsolutionsJtsOperationOverlayValidateOffsetPointGenerator_initWithComVividsolutionsJtsGeomGeometry_withDouble_(g, 5 * self->boundaryDistanceTolerance_) autorelease];
  [((id<JavaUtilList>) nil_chk(self->testCoords_)) addAllWithJavaUtilCollection:[ptGen getPoints]];
}

jboolean ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_checkValidWithInt_(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator *self, jint overlayOp) {
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->testCoords_)) size]; i++) {
    ComVividsolutionsJtsGeomCoordinate *pt = (ComVividsolutionsJtsGeomCoordinate *) check_class_cast([self->testCoords_ getWithInt:i], [ComVividsolutionsJtsGeomCoordinate class]);
    if (!ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_checkValidWithInt_withComVividsolutionsJtsGeomCoordinate_(self, overlayOp, pt)) {
      ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_set_invalidLocation_(self, pt);
      return NO;
    }
  }
  return YES;
}

jboolean ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_checkValidWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator *self, jint overlayOp, ComVividsolutionsJtsGeomCoordinate *pt) {
  *IOSIntArray_GetRef(nil_chk(self->location_), 0) = [((ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator *) nil_chk(IOSObjectArray_Get(nil_chk(self->locFinder_), 0))) getLocationWithComVividsolutionsJtsGeomCoordinate:pt];
  *IOSIntArray_GetRef(self->location_, 1) = [((ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator *) nil_chk(IOSObjectArray_Get(self->locFinder_, 1))) getLocationWithComVividsolutionsJtsGeomCoordinate:pt];
  *IOSIntArray_GetRef(self->location_, 2) = [((ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator *) nil_chk(IOSObjectArray_Get(self->locFinder_, 2))) getLocationWithComVividsolutionsJtsGeomCoordinate:pt];
  if (ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_hasLocationWithIntArray_withInt_(self->location_, ComVividsolutionsJtsGeomLocation_BOUNDARY)) return YES;
  return ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_isValidResultWithInt_withIntArray_(self, overlayOp, self->location_);
}

jboolean ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_hasLocationWithIntArray_withInt_(IOSIntArray *location, jint loc) {
  ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_initialize();
  for (jint i = 0; i < 3; i++) {
    if (IOSIntArray_Get(nil_chk(location), i) == loc) return YES;
  }
  return NO;
}

jboolean ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_isValidResultWithInt_withIntArray_(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator *self, jint overlayOp, IOSIntArray *location) {
  jboolean expectedInterior = ComVividsolutionsJtsOperationOverlayOverlayOp_isResultOfOpWithInt_withInt_withInt_(IOSIntArray_Get(nil_chk(location), 0), IOSIntArray_Get(location, 1), overlayOp);
  jboolean resultInInterior = IOSIntArray_Get(location, 2) == ComVividsolutionsJtsGeomLocation_INTERIOR;
  jboolean isValid = !(expectedInterior ^ resultInInterior);
  if (!isValid) ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_reportResultWithInt_withIntArray_withBoolean_(self, overlayOp, location, expectedInterior);
  return isValid;
}

void ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator_reportResultWithInt_withIntArray_withBoolean_(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator *self, jint overlayOp, IOSIntArray *location, jboolean expectedInterior) {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$C$C$C$C", @"Overlay result invalid - A:", ComVividsolutionsJtsGeomLocation_toLocationSymbolWithInt_(IOSIntArray_Get(nil_chk(location), 0)), @" B:", ComVividsolutionsJtsGeomLocation_toLocationSymbolWithInt_(IOSIntArray_Get(location, 1)), @" expected:", (expectedInterior ? 'i' : 'e'), @" actual:", ComVividsolutionsJtsGeomLocation_toLocationSymbolWithInt_(IOSIntArray_Get(location, 2)))];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationOverlayValidateOverlayResultValidator)
