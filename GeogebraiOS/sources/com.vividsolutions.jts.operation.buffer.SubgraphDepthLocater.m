//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/operation/buffer/SubgraphDepthLocater.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/CGAlgorithms.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Envelope.h"
#include "com/vividsolutions/jts/geom/LineSegment.h"
#include "com/vividsolutions/jts/geomgraph/DirectedEdge.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/Position.h"
#include "com/vividsolutions/jts/operation/buffer/BufferSubgraph.h"
#include "com/vividsolutions/jts/operation/buffer/SubgraphDepthLocater.h"
#include "java/lang/Comparable.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsOperationBufferSubgraphDepthLocater () {
 @public
  id<JavaUtilCollection> subgraphs_;
  ComVividsolutionsJtsGeomLineSegment *seg_;
  ComVividsolutionsJtsAlgorithmCGAlgorithms *cga_;
}

- (id<JavaUtilList>)findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)stabbingRayLeftPt;

- (void)findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)stabbingRayLeftPt
                                                 withJavaUtilList:(id<JavaUtilList>)dirEdges
                                                 withJavaUtilList:(id<JavaUtilList>)stabbedSegments;

- (void)findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)stabbingRayLeftPt
                    withComVividsolutionsJtsGeomgraphDirectedEdge:(ComVividsolutionsJtsGeomgraphDirectedEdge *)dirEdge
                                                 withJavaUtilList:(id<JavaUtilList>)stabbedSegments;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater, subgraphs_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater, seg_, ComVividsolutionsJtsGeomLineSegment *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater, cga_, ComVividsolutionsJtsAlgorithmCGAlgorithms *)

__attribute__((unused)) static id<JavaUtilList> ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *self, ComVividsolutionsJtsGeomCoordinate *stabbingRayLeftPt);

__attribute__((unused)) static void ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate_withJavaUtilList_withJavaUtilList_(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *self, ComVividsolutionsJtsGeomCoordinate *stabbingRayLeftPt, id<JavaUtilList> dirEdges, id<JavaUtilList> stabbedSegments);

__attribute__((unused)) static void ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomgraphDirectedEdge_withJavaUtilList_(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *self, ComVividsolutionsJtsGeomCoordinate *stabbingRayLeftPt, ComVividsolutionsJtsGeomgraphDirectedEdge *dirEdge, id<JavaUtilList> stabbedSegments);

@interface ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment : NSObject < JavaLangComparable > {
 @public
  ComVividsolutionsJtsGeomLineSegment *upwardSeg_;
  jint leftDepth_;
}

- (instancetype)initWithComVividsolutionsJtsOperationBufferSubgraphDepthLocater:(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *)outer$
                                        withComVividsolutionsJtsGeomLineSegment:(ComVividsolutionsJtsGeomLineSegment *)seg
                                                                        withInt:(jint)depth;

- (jint)compareToWithId:(id)obj;

- (jint)compareXWithComVividsolutionsJtsGeomLineSegment:(ComVividsolutionsJtsGeomLineSegment *)seg0
                withComVividsolutionsJtsGeomLineSegment:(ComVividsolutionsJtsGeomLineSegment *)seg1;

@end

J2OBJC_EMPTY_STATIC_INIT(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment)

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment, upwardSeg_, ComVividsolutionsJtsGeomLineSegment *)

__attribute__((unused)) static void ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment_initWithComVividsolutionsJtsOperationBufferSubgraphDepthLocater_withComVividsolutionsJtsGeomLineSegment_withInt_(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment *self, ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *outer$, ComVividsolutionsJtsGeomLineSegment *seg, jint depth);

__attribute__((unused)) static ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment *new_ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment_initWithComVividsolutionsJtsOperationBufferSubgraphDepthLocater_withComVividsolutionsJtsGeomLineSegment_withInt_(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *outer$, ComVividsolutionsJtsGeomLineSegment *seg, jint depth) NS_RETURNS_RETAINED;

__attribute__((unused)) static jint ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment_compareXWithComVividsolutionsJtsGeomLineSegment_withComVividsolutionsJtsGeomLineSegment_(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment *self, ComVividsolutionsJtsGeomLineSegment *seg0, ComVividsolutionsJtsGeomLineSegment *seg1);

J2OBJC_TYPE_LITERAL_HEADER(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment)

@implementation ComVividsolutionsJtsOperationBufferSubgraphDepthLocater

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)subgraphs {
  ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_initWithJavaUtilList_(self, subgraphs);
  return self;
}

- (jint)getDepthWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p {
  id<JavaUtilList> stabbedSegments = ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate_(self, p);
  if ([((id<JavaUtilList>) nil_chk(stabbedSegments)) size] == 0) return 0;
  JavaUtilCollections_sortWithJavaUtilList_(stabbedSegments);
  ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment *ds = (ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment *) check_class_cast([stabbedSegments getWithInt:0], [ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment class]);
  return ((ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment *) nil_chk(ds))->leftDepth_;
}

- (id<JavaUtilList>)findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)stabbingRayLeftPt {
  return ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate_(self, stabbingRayLeftPt);
}

- (void)findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)stabbingRayLeftPt
                                                 withJavaUtilList:(id<JavaUtilList>)dirEdges
                                                 withJavaUtilList:(id<JavaUtilList>)stabbedSegments {
  ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate_withJavaUtilList_withJavaUtilList_(self, stabbingRayLeftPt, dirEdges, stabbedSegments);
}

- (void)findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)stabbingRayLeftPt
                    withComVividsolutionsJtsGeomgraphDirectedEdge:(ComVividsolutionsJtsGeomgraphDirectedEdge *)dirEdge
                                                 withJavaUtilList:(id<JavaUtilList>)stabbedSegments {
  ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomgraphDirectedEdge_withJavaUtilList_(self, stabbingRayLeftPt, dirEdge, stabbedSegments);
}

- (void)dealloc {
  RELEASE_(subgraphs_);
  RELEASE_(seg_);
  RELEASE_(cga_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilList:", "SubgraphDepthLocater", NULL, 0x1, NULL, NULL },
    { "getDepthWithComVividsolutionsJtsGeomCoordinate:", "getDepth", "I", 0x1, NULL, NULL },
    { "findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate:", "findStabbedSegments", "Ljava.util.List;", 0x2, NULL, NULL },
    { "findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate:withJavaUtilList:withJavaUtilList:", "findStabbedSegments", "V", 0x2, NULL, NULL },
    { "findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomgraphDirectedEdge:withJavaUtilList:", "findStabbedSegments", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "subgraphs_", NULL, 0x2, "Ljava.util.Collection;", NULL, NULL,  },
    { "seg_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.LineSegment;", NULL, NULL,  },
    { "cga_", NULL, 0x2, "Lcom.vividsolutions.jts.algorithm.CGAlgorithms;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lcom.vividsolutions.jts.operation.buffer.SubgraphDepthLocater$DepthSegment;"};
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationBufferSubgraphDepthLocater = { 2, "SubgraphDepthLocater", "com.vividsolutions.jts.operation.buffer", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComVividsolutionsJtsOperationBufferSubgraphDepthLocater;
}

@end

void ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_initWithJavaUtilList_(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *self, id<JavaUtilList> subgraphs) {
  NSObject_init(self);
  ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_setAndConsume_seg_(self, new_ComVividsolutionsJtsGeomLineSegment_init());
  ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_setAndConsume_cga_(self, new_ComVividsolutionsJtsAlgorithmCGAlgorithms_init());
  ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_set_subgraphs_(self, subgraphs);
}

ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *new_ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_initWithJavaUtilList_(id<JavaUtilList> subgraphs) {
  ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *self = [ComVividsolutionsJtsOperationBufferSubgraphDepthLocater alloc];
  ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_initWithJavaUtilList_(self, subgraphs);
  return self;
}

id<JavaUtilList> ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *self, ComVividsolutionsJtsGeomCoordinate *stabbingRayLeftPt) {
  id<JavaUtilList> stabbedSegments = [new_JavaUtilArrayList_init() autorelease];
  for (id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk(self->subgraphs_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsOperationBufferBufferSubgraph *bsg = (ComVividsolutionsJtsOperationBufferBufferSubgraph *) check_class_cast([i next], [ComVividsolutionsJtsOperationBufferBufferSubgraph class]);
    ComVividsolutionsJtsGeomEnvelope *env = [((ComVividsolutionsJtsOperationBufferBufferSubgraph *) nil_chk(bsg)) getEnvelope];
    if (((ComVividsolutionsJtsGeomCoordinate *) nil_chk(stabbingRayLeftPt))->y_ < [((ComVividsolutionsJtsGeomEnvelope *) nil_chk(env)) getMinY] || stabbingRayLeftPt->y_ > [env getMaxY]) continue;
    ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate_withJavaUtilList_withJavaUtilList_(self, stabbingRayLeftPt, [bsg getDirectedEdges], stabbedSegments);
  }
  return stabbedSegments;
}

void ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate_withJavaUtilList_withJavaUtilList_(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *self, ComVividsolutionsJtsGeomCoordinate *stabbingRayLeftPt, id<JavaUtilList> dirEdges, id<JavaUtilList> stabbedSegments) {
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(dirEdges)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphDirectedEdge *de = (ComVividsolutionsJtsGeomgraphDirectedEdge *) check_class_cast([i next], [ComVividsolutionsJtsGeomgraphDirectedEdge class]);
    if (![((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) isForward]) continue;
    ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomgraphDirectedEdge_withJavaUtilList_(self, stabbingRayLeftPt, de, stabbedSegments);
  }
}

void ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_findStabbedSegmentsWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomgraphDirectedEdge_withJavaUtilList_(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *self, ComVividsolutionsJtsGeomCoordinate *stabbingRayLeftPt, ComVividsolutionsJtsGeomgraphDirectedEdge *dirEdge, id<JavaUtilList> stabbedSegments) {
  IOSObjectArray *pts = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(dirEdge)) getEdge])) getCoordinates];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(pts))->size_ - 1; i++) {
    ComVividsolutionsJtsGeomLineSegment_set_p0_(nil_chk(self->seg_), IOSObjectArray_Get(pts, i));
    ComVividsolutionsJtsGeomLineSegment_set_p1_(self->seg_, IOSObjectArray_Get(pts, i + 1));
    if (((ComVividsolutionsJtsGeomCoordinate *) nil_chk(self->seg_->p0_))->y_ > ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(self->seg_->p1_))->y_) [self->seg_ reverse];
    jdouble maxx = JavaLangMath_maxWithDouble_withDouble_(self->seg_->p0_->x_, self->seg_->p1_->x_);
    if (maxx < ((ComVividsolutionsJtsGeomCoordinate *) nil_chk(stabbingRayLeftPt))->x_) continue;
    if ([self->seg_ isHorizontal]) continue;
    if (stabbingRayLeftPt->y_ < self->seg_->p0_->y_ || stabbingRayLeftPt->y_ > self->seg_->p1_->y_) continue;
    if (ComVividsolutionsJtsAlgorithmCGAlgorithms_computeOrientationWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinate_(self->seg_->p0_, self->seg_->p1_, stabbingRayLeftPt) == ComVividsolutionsJtsAlgorithmCGAlgorithms_RIGHT) continue;
    jint depth = [dirEdge getDepthWithInt:ComVividsolutionsJtsGeomgraphPosition_LEFT];
    if (![self->seg_->p0_ isEqual:IOSObjectArray_Get(pts, i)]) depth = [dirEdge getDepthWithInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT];
    ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment *ds = [new_ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment_initWithComVividsolutionsJtsOperationBufferSubgraphDepthLocater_withComVividsolutionsJtsGeomLineSegment_withInt_(self, self->seg_, depth) autorelease];
    [((id<JavaUtilList>) nil_chk(stabbedSegments)) addWithId:ds];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater)

@implementation ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment

- (instancetype)initWithComVividsolutionsJtsOperationBufferSubgraphDepthLocater:(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *)outer$
                                        withComVividsolutionsJtsGeomLineSegment:(ComVividsolutionsJtsGeomLineSegment *)seg
                                                                        withInt:(jint)depth {
  ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment_initWithComVividsolutionsJtsOperationBufferSubgraphDepthLocater_withComVividsolutionsJtsGeomLineSegment_withInt_(self, outer$, seg, depth);
  return self;
}

- (jint)compareToWithId:(id)obj {
  ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment *other = (ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment *) check_class_cast(obj, [ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment class]);
  jint orientIndex = [((ComVividsolutionsJtsGeomLineSegment *) nil_chk(upwardSeg_)) orientationIndexWithComVividsolutionsJtsGeomLineSegment:((ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment *) nil_chk(other))->upwardSeg_];
  if (orientIndex == 0) orientIndex = -1 * [other->upwardSeg_ orientationIndexWithComVividsolutionsJtsGeomLineSegment:upwardSeg_];
  if (orientIndex != 0) return orientIndex;
  return ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment_compareXWithComVividsolutionsJtsGeomLineSegment_withComVividsolutionsJtsGeomLineSegment_(self, self->upwardSeg_, other->upwardSeg_);
}

- (jint)compareXWithComVividsolutionsJtsGeomLineSegment:(ComVividsolutionsJtsGeomLineSegment *)seg0
                withComVividsolutionsJtsGeomLineSegment:(ComVividsolutionsJtsGeomLineSegment *)seg1 {
  return ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment_compareXWithComVividsolutionsJtsGeomLineSegment_withComVividsolutionsJtsGeomLineSegment_(self, seg0, seg1);
}

- (void)dealloc {
  RELEASE_(upwardSeg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsOperationBufferSubgraphDepthLocater:withComVividsolutionsJtsGeomLineSegment:withInt:", "DepthSegment", NULL, 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "compareXWithComVividsolutionsJtsGeomLineSegment:withComVividsolutionsJtsGeomLineSegment:", "compareX", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "upwardSeg_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.LineSegment;", NULL, NULL,  },
    { "leftDepth_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment = { 2, "DepthSegment", "com.vividsolutions.jts.operation.buffer", "SubgraphDepthLocater", 0x2, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment;
}

@end

void ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment_initWithComVividsolutionsJtsOperationBufferSubgraphDepthLocater_withComVividsolutionsJtsGeomLineSegment_withInt_(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment *self, ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *outer$, ComVividsolutionsJtsGeomLineSegment *seg, jint depth) {
  NSObject_init(self);
  ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment_setAndConsume_upwardSeg_(self, new_ComVividsolutionsJtsGeomLineSegment_initWithComVividsolutionsJtsGeomLineSegment_(seg));
  self->leftDepth_ = depth;
}

ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment *new_ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment_initWithComVividsolutionsJtsOperationBufferSubgraphDepthLocater_withComVividsolutionsJtsGeomLineSegment_withInt_(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater *outer$, ComVividsolutionsJtsGeomLineSegment *seg, jint depth) {
  ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment *self = [ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment alloc];
  ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment_initWithComVividsolutionsJtsOperationBufferSubgraphDepthLocater_withComVividsolutionsJtsGeomLineSegment_withInt_(self, outer$, seg, depth);
  return self;
}

jint ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment_compareXWithComVividsolutionsJtsGeomLineSegment_withComVividsolutionsJtsGeomLineSegment_(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment *self, ComVividsolutionsJtsGeomLineSegment *seg0, ComVividsolutionsJtsGeomLineSegment *seg1) {
  jint compare0 = [((ComVividsolutionsJtsGeomCoordinate *) nil_chk(((ComVividsolutionsJtsGeomLineSegment *) nil_chk(seg0))->p0_)) compareToWithId:((ComVividsolutionsJtsGeomLineSegment *) nil_chk(seg1))->p0_];
  if (compare0 != 0) return compare0;
  return [((ComVividsolutionsJtsGeomCoordinate *) nil_chk(seg0->p1_)) compareToWithId:seg1->p1_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationBufferSubgraphDepthLocater_DepthSegment)
