//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoTurtle.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GImage.h"
#include "geogebra/common/awt/MyImage.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementGraphicsAdapter.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoTurtle.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelGeosGeoTurtle () {
 @public
  jboolean defined_;
  JavaUtilArrayList *turtleImageList_;
  JavaUtilArrayList *cmdList_;
  id<GeogebraCommonKernelKernelNDGeoPointND> startPoint_;
  jint turtleImageIndex_;
  jint nCompletedCommands_;
  jdouble currentCommandProgress_;
  jdouble speed_;
  jboolean autoUpdate_;
  id<GeogebraCommonAwtMyImage> turtleImage_;
}

- (jboolean)doStepTurtleWithDouble:(jdouble)nSteps;

- (void)doUpdate;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTurtle, turtleImageList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTurtle, cmdList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTurtle, startPoint_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTurtle, turtleImage_, id<GeogebraCommonAwtMyImage>)

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoTurtle_doStepTurtleWithDouble_(GeogebraCommonKernelGeosGeoTurtle *self, jdouble nSteps);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoTurtle_doUpdate(GeogebraCommonKernelGeosGeoTurtle *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *new_GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface GeogebraCommonKernelGeosGeoTurtle_Command : NSObject
@end

@interface GeogebraCommonKernelGeosGeoTurtle_DrawState : NSObject
@end

@interface GeogebraCommonKernelGeosGeoTurtle_CmdForward () {
 @public
  GeogebraCommonKernelGeosGeoTurtle *this$0_;
  jdouble length_;
  jdouble time_;
  GeogebraCommonKernelGeosGeoPoint *destination_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTurtle_CmdForward, this$0_, GeogebraCommonKernelGeosGeoTurtle *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTurtle_CmdForward, destination_, GeogebraCommonKernelGeosGeoPoint *)

@interface GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords () {
 @public
  GeogebraCommonKernelGeosGeoTurtle *this$0_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords, this$0_, GeogebraCommonKernelGeosGeoTurtle *)

@interface GeogebraCommonKernelGeosGeoTurtle_CmdSetPosition () {
 @public
  jdouble time_;
}

@end

@interface GeogebraCommonKernelGeosGeoTurtle_CmdTurn () {
 @public
  GeogebraCommonKernelGeosGeoTurtle *this$0_;
  jdouble degAngle_;
  jdouble angle_;
  jdouble time_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTurtle_CmdTurn, this$0_, GeogebraCommonKernelGeosGeoTurtle *)

@interface GeogebraCommonKernelGeosGeoTurtle_CmdSetColor () {
 @public
  GeogebraCommonKernelGeosGeoTurtle *this$0_;
  GeogebraCommonAwtGColor *color_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTurtle_CmdSetColor, this$0_, GeogebraCommonKernelGeosGeoTurtle *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTurtle_CmdSetColor, color_, GeogebraCommonAwtGColor *)

@interface GeogebraCommonKernelGeosGeoTurtle_CmdSetPen () {
 @public
  GeogebraCommonKernelGeosGeoTurtle *this$0_;
  jboolean down_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTurtle_CmdSetPen, this$0_, GeogebraCommonKernelGeosGeoTurtle *)

@interface GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness () {
 @public
  GeogebraCommonKernelGeosGeoTurtle *this$0_;
  jint thickness_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness, this$0_, GeogebraCommonKernelGeosGeoTurtle *)

@implementation GeogebraCommonKernelGeosGeoTurtle

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label {
  GeogebraCommonKernelGeosGeoTurtle_initWithGeogebraCommonKernelConstruction_withNSString_(self, c, label);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoTurtle_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return nil;
}

- (GeogebraCommonKernelGeosGeoPoint *)copy__ {
  return [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
}

- (GeogebraCommonKernelGeosGeoElement *)copyInternalWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons1 {
  GeogebraCommonKernelGeosGeoTurtle *ret = [new_GeogebraCommonKernelGeosGeoTurtle_initWithGeogebraCommonKernelConstruction_withNSString_(cons1, nil) autorelease];
  [ret setWithGeogebraCommonKernelGeosGeoElement:self];
  return ret;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_TURTLE();
}

- (JavaUtilArrayList *)getTurtleCommandList {
  return cmdList_;
}

- (jdouble)getTurnAngle {
  return fmod((turnAngle_ * 180 / JavaLangMath_PI), 360);
}

- (void)setTurnAngleWithDouble:(jdouble)a {
  [self turnWithDouble:a - turnAngle_ * 180 / JavaLangMath_PI];
}

- (IOSDoubleArray *)getAngleRotators {
  IOSDoubleArray *ar = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ self->cosAngle_, self->sinAngle_ } count:2];
  return ar;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getPosition {
  return self;
}

- (jint)getPenThickness {
  return penThickness_;
}

- (GeogebraCommonAwtGColor *)getPenColor {
  return penColor_;
}

- (jboolean)getPenDown {
  return penDown_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getStartPoint {
  return startPoint_;
}

- (JavaUtilArrayList *)getTurtleImageList {
  return turtleImageList_;
}

- (void)addTurtleImageWithGeogebraCommonAwtGImage:(id<GeogebraCommonAwtGImage>)image {
  [((JavaUtilArrayList *) nil_chk(turtleImageList_)) addWithId:image];
}

- (jint)getTurtle {
  return turtleImageIndex_;
}

- (void)setTurtleWithInt:(jint)index {
  jint index1 = index % 4;
  self->turtleImageIndex_ = index1;
}

- (jboolean)isAutoUpdate {
  return autoUpdate_;
}

- (void)setAutoUpdateWithBoolean:(jboolean)autoUpdate {
  self->autoUpdate_ = autoUpdate;
}

- (jdouble)getSpeed {
  return speed_;
}

- (void)setSpeedWithDouble:(jdouble)s {
  if (s < 0.0) {
    speed_ = 0.0;
  }
  else {
    speed_ = s;
  }
}

- (jint)getNumberOfCompletedCommands {
  return nCompletedCommands_;
}

- (jdouble)getCurrentCommandProgress {
  if (currentCommandProgress_ == 0.0) {
    return 0.0;
  }
  return currentCommandProgress_ / [((id<GeogebraCommonKernelGeosGeoTurtle_Command>) nil_chk([((JavaUtilArrayList *) nil_chk(cmdList_)) getWithInt:nCompletedCommands_])) getTime];
}

- (void)resetProgress {
  nCompletedCommands_ = 0;
  currentCommandProgress_ = 0.0;
  GeogebraCommonKernelGeosGeoTurtle_doUpdate(self);
}

- (void)stepTurtle {
  [self stepTurtleWithDouble:1.0];
}

- (jboolean)doStepTurtleWithDouble:(jdouble)nSteps {
  return GeogebraCommonKernelGeosGeoTurtle_doStepTurtleWithDouble_(self, nSteps);
}

- (void)stepTurtleWithDouble:(jdouble)nSteps {
  if (GeogebraCommonKernelGeosGeoTurtle_doStepTurtleWithDouble_(self, nSteps)) {
    GeogebraCommonKernelGeosGeoTurtle_doUpdate(self);
  }
}

- (void)forwardWithDouble:(jdouble)distance {
  [self addCommandWithGeogebraCommonKernelGeosGeoTurtle_Command:[new_GeogebraCommonKernelGeosGeoTurtle_CmdForward_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_(self, distance) autorelease]];
}

- (void)setPositionWithDouble:(jdouble)x
                   withDouble:(jdouble)y {
  [self addCommandWithGeogebraCommonKernelGeosGeoTurtle_Command:[new_GeogebraCommonKernelGeosGeoTurtle_CmdSetPosition_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(self, x, y) autorelease]];
}

- (void)setCoordsWithDouble:(jdouble)x
                 withDouble:(jdouble)y {
  jboolean currPenDown = [self getPenDown];
  [self setPenDownWithBoolean:NO];
  [self addCommandWithGeogebraCommonKernelGeosGeoTurtle_Command:[new_GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(self, x, y) autorelease]];
  [self setPenDownWithBoolean:currPenDown];
}

- (void)turnWithDouble:(jdouble)turnAngleChange {
  [self addCommandWithGeogebraCommonKernelGeosGeoTurtle_Command:[new_GeogebraCommonKernelGeosGeoTurtle_CmdTurn_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_(self, turnAngleChange) autorelease]];
}

- (void)setPenDownWithBoolean:(jboolean)penDown {
  [self addCommandWithGeogebraCommonKernelGeosGeoTurtle_Command:[new_GeogebraCommonKernelGeosGeoTurtle_CmdSetPen_initWithGeogebraCommonKernelGeosGeoTurtle_withBoolean_(self, penDown) autorelease]];
}

- (void)setPenColorWithInt:(jint)r
                   withInt:(jint)g
                   withInt:(jint)b {
  [self setPenColorWithGeogebraCommonAwtGColor:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:r withInt:g withInt:b]];
}

- (void)setPenColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)penColor {
  [self addCommandWithGeogebraCommonKernelGeosGeoTurtle_Command:[new_GeogebraCommonKernelGeosGeoTurtle_CmdSetColor_initWithGeogebraCommonKernelGeosGeoTurtle_withGeogebraCommonAwtGColor_(self, penColor) autorelease]];
}

- (void)setPenThicknessWithInt:(jint)thickness {
  [self addCommandWithGeogebraCommonKernelGeosGeoTurtle_Command:[new_GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness_initWithGeogebraCommonKernelGeosGeoTurtle_withInt_(self, thickness) autorelease]];
}

- (void)clear {
  jdouble s = speed_;
  speed_ = 0;
  [self resetProgress];
  [((JavaUtilArrayList *) nil_chk(cmdList_)) clear];
  turnAngle_ = 0.0;
  sinAngle_ = 0.0;
  cosAngle_ = 1.0;
  *IOSDoubleArray_GetRef(nil_chk(position_), 0) = 0.0;
  *IOSDoubleArray_GetRef(position_, 1) = 0.0;
  [self setCoordsWithDouble:0.0 withDouble:0.0 withDouble:1.0];
  speed_ = s;
  GeogebraCommonKernelGeosGeoTurtle_doUpdate(self);
}

- (void)doUpdate {
  GeogebraCommonKernelGeosGeoTurtle_doUpdate(self);
}

- (jboolean)isGeoTurtle {
  return YES;
}

- (jboolean)isDefined {
  return defined_;
}

- (void)setUndefined {
  defined_ = NO;
}

- (jboolean)isAnimatable {
  return YES;
}

- (jboolean)doAnimationStepWithDouble:(jdouble)frameRate {
  @synchronized(self) {
    return GeogebraCommonKernelGeosGeoTurtle_doStepTurtleWithDouble_(self, 1.0 / frameRate);
  }
}

- (void)addCommandWithGeogebraCommonKernelGeosGeoTurtle_Command:(id<GeogebraCommonKernelGeosGeoTurtle_Command>)cmd {
  [((JavaUtilArrayList *) nil_chk(cmdList_)) addWithId:cmd];
  [((id<GeogebraCommonKernelGeosGeoTurtle_Command>) nil_chk(cmd)) perform];
  GeogebraCommonKernelGeosGeoTurtle_doUpdate(self);
}

- (jboolean)isFillable {
  return YES;
}

- (GeogebraCommonKernelGeosGeoElement_FillTypeEnum *)getFillType {
  return GeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_IMAGE();
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  if ([self getFillImage] != nil) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<file name=\""];
    [sb appendWithNSString:GeogebraCommonUtilStringUtil_encodeXMLWithNSString_([((GeogebraCommonKernelGeosGeoElementGraphicsAdapter *) nil_chk([self getGraphicsAdapter])) getImageFileName])];
    [sb appendWithNSString:@"\"/>\n"];
  }
}

- (void)dealloc {
  RELEASE_(turtleImageList_);
  RELEASE_(cmdList_);
  RELEASE_(startPoint_);
  RELEASE_(position_);
  RELEASE_(penColor_);
  RELEASE_(turtleImage_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:", "GeoTurtle", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "GeoTurtle", NULL, 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "copyInternalWithGeogebraCommonKernelConstruction:", "copyInternal", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "getTurtleCommandList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getTurnAngle", NULL, "D", 0x1, NULL, NULL },
    { "setTurnAngleWithDouble:", "setTurnAngle", "V", 0x1, NULL, NULL },
    { "getAngleRotators", NULL, "[D", 0x1, NULL, NULL },
    { "getPosition", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getPenThickness", NULL, "I", 0x1, NULL, NULL },
    { "getPenColor", NULL, "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getPenDown", NULL, "Z", 0x1, NULL, NULL },
    { "getStartPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getTurtleImageList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "addTurtleImageWithGeogebraCommonAwtGImage:", "addTurtleImage", "V", 0x1, NULL, NULL },
    { "getTurtle", NULL, "I", 0x1, NULL, NULL },
    { "setTurtleWithInt:", "setTurtle", "V", 0x1, NULL, NULL },
    { "isAutoUpdate", NULL, "Z", 0x1, NULL, NULL },
    { "setAutoUpdateWithBoolean:", "setAutoUpdate", "V", 0x1, NULL, NULL },
    { "getSpeed", NULL, "D", 0x1, NULL, NULL },
    { "setSpeedWithDouble:", "setSpeed", "V", 0x1, NULL, NULL },
    { "getNumberOfCompletedCommands", NULL, "I", 0x1, NULL, NULL },
    { "getCurrentCommandProgress", NULL, "D", 0x1, NULL, NULL },
    { "resetProgress", NULL, "V", 0x1, NULL, NULL },
    { "stepTurtle", NULL, "V", 0x1, NULL, NULL },
    { "doStepTurtleWithDouble:", "doStepTurtle", "Z", 0x2, NULL, NULL },
    { "stepTurtleWithDouble:", "stepTurtle", "V", 0x1, NULL, NULL },
    { "forwardWithDouble:", "forward", "V", 0x1, NULL, NULL },
    { "setPositionWithDouble:withDouble:", "setPosition", "V", 0x1, NULL, NULL },
    { "setCoordsWithDouble:withDouble:", "setCoords", "V", 0x1, NULL, NULL },
    { "turnWithDouble:", "turn", "V", 0x1, NULL, NULL },
    { "setPenDownWithBoolean:", "setPenDown", "V", 0x1, NULL, NULL },
    { "setPenColorWithInt:withInt:withInt:", "setPenColor", "V", 0x1, NULL, NULL },
    { "setPenColorWithGeogebraCommonAwtGColor:", "setPenColor", "V", 0x1, NULL, NULL },
    { "setPenThicknessWithInt:", "setPenThickness", "V", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "doUpdate", NULL, "V", 0x2, NULL, NULL },
    { "isGeoTurtle", NULL, "Z", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "isAnimatable", NULL, "Z", 0x1, NULL, NULL },
    { "doAnimationStepWithDouble:", "doAnimationStep", "Z", 0x21, NULL, NULL },
    { "addCommandWithGeogebraCommonKernelGeosGeoTurtle_Command:", "addCommand", "V", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "getFillType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$FillType;", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "turtleImageList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/awt/GImage;>;",  },
    { "cmdList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoTurtle$Command;>;",  },
    { "startPoint_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "position_", NULL, 0x4, "[D", NULL, NULL,  },
    { "penColor_", NULL, 0x4, "Lgeogebra.common.awt.GColor;", NULL, NULL,  },
    { "penThickness_", NULL, 0x4, "I", NULL, NULL,  },
    { "penDown_", NULL, 0x4, "Z", NULL, NULL,  },
    { "turnAngle_", NULL, 0x4, "D", NULL, NULL,  },
    { "sinAngle_", NULL, 0x4, "D", NULL, NULL,  },
    { "cosAngle_", NULL, 0x4, "D", NULL, NULL,  },
    { "turtleImageIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "nCompletedCommands_", NULL, 0x2, "I", NULL, NULL,  },
    { "currentCommandProgress_", NULL, 0x2, "D", NULL, NULL,  },
    { "speed_", NULL, 0x2, "D", NULL, NULL,  },
    { "autoUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "turtleImage_", NULL, 0x2, "Lgeogebra.common.awt.MyImage;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", "Lgeogebra.common.kernel.geos.GeoTurtle$Command;", "Lgeogebra.common.kernel.geos.GeoTurtle$DrawState;", "Lgeogebra.common.kernel.geos.GeoTurtle$CmdForward;", "Lgeogebra.common.kernel.geos.GeoTurtle$CmdSetCoords;", "Lgeogebra.common.kernel.geos.GeoTurtle$CmdSetPosition;", "Lgeogebra.common.kernel.geos.GeoTurtle$CmdTurn;", "Lgeogebra.common.kernel.geos.GeoTurtle$CmdSetColor;", "Lgeogebra.common.kernel.geos.GeoTurtle$CmdSetPen;", "Lgeogebra.common.kernel.geos.GeoTurtle$CmdSetThickness;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoTurtle = { 2, "GeoTurtle", "geogebra.common.kernel.geos", NULL, 0x1, 48, methods, 17, fields, 0, NULL, 10, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoTurtle;
}

@end

void GeogebraCommonKernelGeosGeoTurtle_initWithGeogebraCommonKernelConstruction_withNSString_(GeogebraCommonKernelGeosGeoTurtle *self, GeogebraCommonKernelConstruction *c, NSString *label) {
  GeogebraCommonKernelGeosGeoTurtle_initWithGeogebraCommonKernelConstruction_(self, c);
  [self setLabelWithNSString:label];
}

GeogebraCommonKernelGeosGeoTurtle *new_GeogebraCommonKernelGeosGeoTurtle_initWithGeogebraCommonKernelConstruction_withNSString_(GeogebraCommonKernelConstruction *c, NSString *label) {
  GeogebraCommonKernelGeosGeoTurtle *self = [GeogebraCommonKernelGeosGeoTurtle alloc];
  GeogebraCommonKernelGeosGeoTurtle_initWithGeogebraCommonKernelConstruction_withNSString_(self, c, label);
  return self;
}

void GeogebraCommonKernelGeosGeoTurtle_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoTurtle *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(self, c);
  self->defined_ = YES;
  GeogebraCommonKernelGeosGeoTurtle_setAndConsume_startPoint_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self->cons_, 0.0, 0.0, 1.0));
  GeogebraCommonKernelGeosGeoTurtle_setAndConsume_position_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.0, 0.0, 1.0 } count:3]);
  GeogebraCommonKernelGeosGeoTurtle_set_penColor_(self, GeogebraCommonAwtGColor_get_BLACK_());
  self->penThickness_ = 1;
  self->penDown_ = YES;
  self->turnAngle_ = 0.0;
  self->sinAngle_ = 0.0;
  self->cosAngle_ = 1.0;
  self->turtleImageIndex_ = 1;
  self->nCompletedCommands_ = 0;
  self->currentCommandProgress_ = 0.0;
  self->speed_ = 1.0;
  self->autoUpdate_ = YES;
  GeogebraCommonKernelGeosGeoTurtle_set_turtleImage_(self, nil);
  GeogebraCommonKernelGeosGeoTurtle_setAndConsume_cmdList_(self, new_JavaUtilArrayList_init());
  [self setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_GRAY_()];
  GeogebraCommonKernelGeosGeoTurtle_setAndConsume_turtleImageList_(self, new_JavaUtilArrayList_init());
  [self->turtleImageList_ addWithId:[((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(c)) getApplication])) getInternalImageAdapterWithNSString:@"/gui/images/go-next.png"]];
  [self setCoordsWithDouble:0 withDouble:0 withDouble:1];
}

GeogebraCommonKernelGeosGeoTurtle *new_GeogebraCommonKernelGeosGeoTurtle_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoTurtle *self = [GeogebraCommonKernelGeosGeoTurtle alloc];
  GeogebraCommonKernelGeosGeoTurtle_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

jboolean GeogebraCommonKernelGeosGeoTurtle_doStepTurtleWithDouble_(GeogebraCommonKernelGeosGeoTurtle *self, jdouble nSteps) {
  jint totalNCommands = [((JavaUtilArrayList *) nil_chk(self->cmdList_)) size];
  if (self->speed_ == 0.0 || self->nCompletedCommands_ >= totalNCommands) {
    return NO;
  }
  self->currentCommandProgress_ += self->speed_ * nSteps;
  jdouble t;
  while (self->currentCommandProgress_ >= (t = [((id<GeogebraCommonKernelGeosGeoTurtle_Command>) nil_chk([self->cmdList_ getWithInt:self->nCompletedCommands_])) getTime])) {
    self->nCompletedCommands_ += 1;
    self->currentCommandProgress_ -= t;
    if (self->nCompletedCommands_ == totalNCommands) {
      self->currentCommandProgress_ = 0.0;
      break;
    }
  }
  return YES;
}

void GeogebraCommonKernelGeosGeoTurtle_doUpdate(GeogebraCommonKernelGeosGeoTurtle *self) {
  if (self->autoUpdate_) [self updateRepaint];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoTurtle)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum)

GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_values_[6];

@implementation GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_values() {
  GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_values_ count:6 type:GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_values();
}

+ (GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initialize();
  for (int i = 0; i < 6; i++) {
    GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *e = GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum class]) {
    GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_FORWARD = new_GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(@"FORWARD", 0);
    GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_POSITION = new_GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(@"SET_POSITION", 1);
    GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_TURN = new_GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(@"TURN", 2);
    GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_COLOR = new_GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(@"SET_COLOR", 3);
    GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_PEN = new_GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(@"SET_PEN", 4);
    GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_THICKNESS = new_GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(@"SET_THICKNESS", 5);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "FORWARD", "FORWARD", 0x4019, "Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", &GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_FORWARD, NULL,  },
    { "SET_POSITION", "SET_POSITION", 0x4019, "Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", &GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_POSITION, NULL,  },
    { "TURN", "TURN", 0x4019, "Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", &GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_TURN, NULL,  },
    { "SET_COLOR", "SET_COLOR", 0x4019, "Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", &GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_COLOR, NULL,  },
    { "SET_PEN", "SET_PEN", 0x4019, "Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", &GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_PEN, NULL,  },
    { "SET_THICKNESS", "SET_THICKNESS", 0x4019, "Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", &GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_SET_THICKNESS, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum = { 2, "CmdType", "geogebra.common.kernel.geos", "GeoTurtle", 0x4019, 0, NULL, 6, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/geos/GeoTurtle$CmdType;>;" };
  return &_GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum;
}

@end

void GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *new_GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *self = [GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum alloc];
  GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum)

@implementation GeogebraCommonKernelGeosGeoTurtle_Command

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getType", NULL, "Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x401, NULL, NULL },
    { "getTime", NULL, "D", 0x401, NULL, NULL },
    { "perform", NULL, "V", 0x401, NULL, NULL },
    { "drawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:", "draw", "V", 0x401, NULL, NULL },
    { "partialDrawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:withDouble:", "partialDraw", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoTurtle_Command = { 2, "Command", "geogebra.common.kernel.geos", "GeoTurtle", 0x609, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoTurtle_Command;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoTurtle_Command)

@implementation GeogebraCommonKernelGeosGeoTurtle_DrawState

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setPenWithBoolean:", "setPen", "V", 0x401, NULL, NULL },
    { "moveWithGeogebraCommonKernelKernelNDGeoPointND:", "move", "V", 0x401, NULL, NULL },
    { "turnWithDouble:", "turn", "V", 0x401, NULL, NULL },
    { "partialMoveWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "partialMove", "V", 0x401, NULL, NULL },
    { "partialTurnWithDouble:withDouble:", "partialTurn", "V", 0x401, NULL, NULL },
    { "setColorWithGeogebraCommonAwtGColor:", "setColor", "V", 0x401, NULL, NULL },
    { "setThicknessWithInt:", "setThickness", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoTurtle_DrawState = { 2, "DrawState", "geogebra.common.kernel.geos", "GeoTurtle", 0x609, 7, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoTurtle_DrawState;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoTurtle_DrawState)

@implementation GeogebraCommonKernelGeosGeoTurtle_CmdForward

- (instancetype)initWithGeogebraCommonKernelGeosGeoTurtle:(GeogebraCommonKernelGeosGeoTurtle *)outer$
                                               withDouble:(jdouble)l {
  GeogebraCommonKernelGeosGeoTurtle_CmdForward_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_(self, outer$, l);
  return self;
}

- (GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)getType {
  return GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_get_FORWARD();
}

- (jdouble)getTime {
  return time_;
}

- (void)perform {
  *IOSDoubleArray_GetRef(nil_chk(this$0_->position_), 0) += length_ * this$0_->cosAngle_;
  *IOSDoubleArray_GetRef(this$0_->position_, 1) += length_ * this$0_->sinAngle_;
  GeogebraCommonKernelGeosGeoTurtle_CmdForward_setAndConsume_destination_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(this$0_->cons_, IOSDoubleArray_Get(this$0_->position_, 0), IOSDoubleArray_Get(this$0_->position_, 1), 1.0));
  [this$0_ setCoordsWithDouble:IOSDoubleArray_Get(this$0_->position_, 0) withDouble:IOSDoubleArray_Get(this$0_->position_, 1) withDouble:1.0];
}

- (void)drawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<GeogebraCommonKernelGeosGeoTurtle_DrawState>)ds {
  [((id<GeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) moveWithGeogebraCommonKernelKernelNDGeoPointND:destination_];
}

- (void)partialDrawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<GeogebraCommonKernelGeosGeoTurtle_DrawState>)ds
                                                        withDouble:(jdouble)progress {
  [((id<GeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) partialMoveWithGeogebraCommonKernelKernelNDGeoPointND:destination_ withDouble:progress];
}

- (NSString *)description {
  return JreStrcat("$D", @"fd ", length_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(destination_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoTurtle:withDouble:", "CmdForward", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x1, NULL, NULL },
    { "getTime", NULL, "D", 0x1, NULL, NULL },
    { "perform", NULL, "V", 0x1, NULL, NULL },
    { "drawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:", "draw", "V", 0x1, NULL, NULL },
    { "partialDrawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:withDouble:", "partialDraw", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.geos.GeoTurtle;", NULL, NULL,  },
    { "length_", NULL, 0x2, "D", NULL, NULL,  },
    { "time_", NULL, 0x2, "D", NULL, NULL,  },
    { "destination_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoTurtle_CmdForward = { 2, "CmdForward", "geogebra.common.kernel.geos", "GeoTurtle", 0x1, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoTurtle_CmdForward;
}

@end

void GeogebraCommonKernelGeosGeoTurtle_CmdForward_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_(GeogebraCommonKernelGeosGeoTurtle_CmdForward *self, GeogebraCommonKernelGeosGeoTurtle *outer$, jdouble l) {
  GeogebraCommonKernelGeosGeoTurtle_CmdForward_set_this$0_(self, outer$);
  NSObject_init(self);
  self->length_ = l;
  self->time_ = JavaLangMath_absWithDouble_(l);
}

GeogebraCommonKernelGeosGeoTurtle_CmdForward *new_GeogebraCommonKernelGeosGeoTurtle_CmdForward_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_(GeogebraCommonKernelGeosGeoTurtle *outer$, jdouble l) {
  GeogebraCommonKernelGeosGeoTurtle_CmdForward *self = [GeogebraCommonKernelGeosGeoTurtle_CmdForward alloc];
  GeogebraCommonKernelGeosGeoTurtle_CmdForward_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_(self, outer$, l);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoTurtle_CmdForward)

@implementation GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords

- (instancetype)initWithGeogebraCommonKernelGeosGeoTurtle:(GeogebraCommonKernelGeosGeoTurtle *)outer$
                                               withDouble:(jdouble)x
                                               withDouble:(jdouble)y {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(self, outer$, x, y);
  return self;
}

- (GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)getType {
  return GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_get_SET_POSITION();
}

- (jdouble)getTime {
  return 0;
}

- (void)perform {
  *IOSDoubleArray_GetRef(nil_chk(this$0_->position_), 0) = destX_;
  *IOSDoubleArray_GetRef(this$0_->position_, 1) = destY_;
  GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_setAndConsume_destination_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(this$0_->cons_, IOSDoubleArray_Get(this$0_->position_, 0), IOSDoubleArray_Get(this$0_->position_, 1), 1.0));
  jboolean currPenDown = [this$0_ getPenDown];
  [this$0_ setPenDownWithBoolean:NO];
  [this$0_ setCoordsWithDouble:IOSDoubleArray_Get(this$0_->position_, 0) withDouble:IOSDoubleArray_Get(this$0_->position_, 1) withDouble:1.0];
  [this$0_ setPenDownWithBoolean:currPenDown];
}

- (void)drawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<GeogebraCommonKernelGeosGeoTurtle_DrawState>)ds {
  [((id<GeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) moveWithGeogebraCommonKernelKernelNDGeoPointND:destination_];
}

- (void)partialDrawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<GeogebraCommonKernelGeosGeoTurtle_DrawState>)ds
                                                        withDouble:(jdouble)progress {
  [((id<GeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) partialMoveWithGeogebraCommonKernelKernelNDGeoPointND:destination_ withDouble:progress];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(destination_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoTurtle:withDouble:withDouble:", "CmdSetCoords", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x1, NULL, NULL },
    { "getTime", NULL, "D", 0x1, NULL, NULL },
    { "perform", NULL, "V", 0x1, NULL, NULL },
    { "drawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:", "draw", "V", 0x1, NULL, NULL },
    { "partialDrawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:withDouble:", "partialDraw", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.geos.GeoTurtle;", NULL, NULL,  },
    { "destX_", NULL, 0x4, "D", NULL, NULL,  },
    { "destY_", NULL, 0x4, "D", NULL, NULL,  },
    { "destination_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords = { 2, "CmdSetCoords", "geogebra.common.kernel.geos", "GeoTurtle", 0x1, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords;
}

@end

void GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords *self, GeogebraCommonKernelGeosGeoTurtle *outer$, jdouble x, jdouble y) {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_set_this$0_(self, outer$);
  NSObject_init(self);
  self->destX_ = x;
  self->destY_ = y;
}

GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords *new_GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(GeogebraCommonKernelGeosGeoTurtle *outer$, jdouble x, jdouble y) {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords *self = [GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords alloc];
  GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(self, outer$, x, y);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords)

@implementation GeogebraCommonKernelGeosGeoTurtle_CmdSetPosition

- (instancetype)initWithGeogebraCommonKernelGeosGeoTurtle:(GeogebraCommonKernelGeosGeoTurtle *)outer$
                                               withDouble:(jdouble)x
                                               withDouble:(jdouble)y {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetPosition_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(self, outer$, x, y);
  return self;
}

- (GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)getType {
  return GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_get_SET_POSITION();
}

- (jdouble)getTime {
  return time_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoTurtle:withDouble:withDouble:", "CmdSetPosition", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x1, NULL, NULL },
    { "getTime", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "time_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoTurtle_CmdSetPosition = { 2, "CmdSetPosition", "geogebra.common.kernel.geos", "GeoTurtle", 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoTurtle_CmdSetPosition;
}

@end

void GeogebraCommonKernelGeosGeoTurtle_CmdSetPosition_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(GeogebraCommonKernelGeosGeoTurtle_CmdSetPosition *self, GeogebraCommonKernelGeosGeoTurtle *outer$, jdouble x, jdouble y) {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetCoords_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(self, outer$, x, y);
  self->time_ = JavaLangMath_hypotWithDouble_withDouble_(x - IOSDoubleArray_Get(nil_chk(outer$->position_), 0), y - IOSDoubleArray_Get(outer$->position_, 1));
}

GeogebraCommonKernelGeosGeoTurtle_CmdSetPosition *new_GeogebraCommonKernelGeosGeoTurtle_CmdSetPosition_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(GeogebraCommonKernelGeosGeoTurtle *outer$, jdouble x, jdouble y) {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetPosition *self = [GeogebraCommonKernelGeosGeoTurtle_CmdSetPosition alloc];
  GeogebraCommonKernelGeosGeoTurtle_CmdSetPosition_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_withDouble_(self, outer$, x, y);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoTurtle_CmdSetPosition)

@implementation GeogebraCommonKernelGeosGeoTurtle_CmdTurn

- (instancetype)initWithGeogebraCommonKernelGeosGeoTurtle:(GeogebraCommonKernelGeosGeoTurtle *)outer$
                                               withDouble:(jdouble)a {
  GeogebraCommonKernelGeosGeoTurtle_CmdTurn_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_(self, outer$, a);
  return self;
}

- (GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)getType {
  return GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_get_TURN();
}

- (jdouble)getTime {
  return time_;
}

- (void)perform {
  this$0_->turnAngle_ += angle_;
  this$0_->sinAngle_ = JavaLangMath_sinWithDouble_(this$0_->turnAngle_);
  this$0_->cosAngle_ = JavaLangMath_cosWithDouble_(this$0_->turnAngle_);
}

- (void)drawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<GeogebraCommonKernelGeosGeoTurtle_DrawState>)ds {
  [((id<GeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) turnWithDouble:angle_];
}

- (void)partialDrawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<GeogebraCommonKernelGeosGeoTurtle_DrawState>)ds
                                                        withDouble:(jdouble)progress {
  [((id<GeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) partialTurnWithDouble:angle_ withDouble:progress];
}

- (NSString *)description {
  if (degAngle_ > 0) {
    return JreStrcat("$D", @"tl ", degAngle_);
  }
  return JreStrcat("$D", @"tr ", (-degAngle_));
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoTurtle:withDouble:", "CmdTurn", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x1, NULL, NULL },
    { "getTime", NULL, "D", 0x1, NULL, NULL },
    { "perform", NULL, "V", 0x1, NULL, NULL },
    { "drawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:", "draw", "V", 0x1, NULL, NULL },
    { "partialDrawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:withDouble:", "partialDraw", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.geos.GeoTurtle;", NULL, NULL,  },
    { "degAngle_", NULL, 0x2, "D", NULL, NULL,  },
    { "angle_", NULL, 0x2, "D", NULL, NULL,  },
    { "time_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoTurtle_CmdTurn = { 2, "CmdTurn", "geogebra.common.kernel.geos", "GeoTurtle", 0x1, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoTurtle_CmdTurn;
}

@end

void GeogebraCommonKernelGeosGeoTurtle_CmdTurn_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_(GeogebraCommonKernelGeosGeoTurtle_CmdTurn *self, GeogebraCommonKernelGeosGeoTurtle *outer$, jdouble a) {
  GeogebraCommonKernelGeosGeoTurtle_CmdTurn_set_this$0_(self, outer$);
  NSObject_init(self);
  self->degAngle_ = a;
  self->angle_ = a * JavaLangMath_PI / 180;
  self->time_ = JavaLangMath_absWithDouble_(a) / 90;
}

GeogebraCommonKernelGeosGeoTurtle_CmdTurn *new_GeogebraCommonKernelGeosGeoTurtle_CmdTurn_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_(GeogebraCommonKernelGeosGeoTurtle *outer$, jdouble a) {
  GeogebraCommonKernelGeosGeoTurtle_CmdTurn *self = [GeogebraCommonKernelGeosGeoTurtle_CmdTurn alloc];
  GeogebraCommonKernelGeosGeoTurtle_CmdTurn_initWithGeogebraCommonKernelGeosGeoTurtle_withDouble_(self, outer$, a);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoTurtle_CmdTurn)

@implementation GeogebraCommonKernelGeosGeoTurtle_CmdSetColor

- (instancetype)initWithGeogebraCommonKernelGeosGeoTurtle:(GeogebraCommonKernelGeosGeoTurtle *)outer$
                              withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)c {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetColor_initWithGeogebraCommonKernelGeosGeoTurtle_withGeogebraCommonAwtGColor_(self, outer$, c);
  return self;
}

- (GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)getType {
  return GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_get_SET_COLOR();
}

- (jdouble)getTime {
  return 0.0;
}

- (void)perform {
  GeogebraCommonKernelGeosGeoTurtle_set_penColor_(this$0_, color_);
}

- (void)drawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<GeogebraCommonKernelGeosGeoTurtle_DrawState>)ds {
  [((id<GeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) setColorWithGeogebraCommonAwtGColor:color_];
}

- (void)partialDrawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<GeogebraCommonKernelGeosGeoTurtle_DrawState>)ds
                                                        withDouble:(jdouble)progress {
}

- (NSString *)description {
  return JreStrcat("$@", @"color ", color_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(color_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoTurtle:withGeogebraCommonAwtGColor:", "CmdSetColor", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x1, NULL, NULL },
    { "getTime", NULL, "D", 0x1, NULL, NULL },
    { "perform", NULL, "V", 0x1, NULL, NULL },
    { "drawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:", "draw", "V", 0x1, NULL, NULL },
    { "partialDrawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:withDouble:", "partialDraw", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.geos.GeoTurtle;", NULL, NULL,  },
    { "color_", NULL, 0x2, "Lgeogebra.common.awt.GColor;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoTurtle_CmdSetColor = { 2, "CmdSetColor", "geogebra.common.kernel.geos", "GeoTurtle", 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoTurtle_CmdSetColor;
}

@end

void GeogebraCommonKernelGeosGeoTurtle_CmdSetColor_initWithGeogebraCommonKernelGeosGeoTurtle_withGeogebraCommonAwtGColor_(GeogebraCommonKernelGeosGeoTurtle_CmdSetColor *self, GeogebraCommonKernelGeosGeoTurtle *outer$, GeogebraCommonAwtGColor *c) {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetColor_set_this$0_(self, outer$);
  NSObject_init(self);
  GeogebraCommonKernelGeosGeoTurtle_CmdSetColor_set_color_(self, c);
}

GeogebraCommonKernelGeosGeoTurtle_CmdSetColor *new_GeogebraCommonKernelGeosGeoTurtle_CmdSetColor_initWithGeogebraCommonKernelGeosGeoTurtle_withGeogebraCommonAwtGColor_(GeogebraCommonKernelGeosGeoTurtle *outer$, GeogebraCommonAwtGColor *c) {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetColor *self = [GeogebraCommonKernelGeosGeoTurtle_CmdSetColor alloc];
  GeogebraCommonKernelGeosGeoTurtle_CmdSetColor_initWithGeogebraCommonKernelGeosGeoTurtle_withGeogebraCommonAwtGColor_(self, outer$, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoTurtle_CmdSetColor)

@implementation GeogebraCommonKernelGeosGeoTurtle_CmdSetPen

- (instancetype)initWithGeogebraCommonKernelGeosGeoTurtle:(GeogebraCommonKernelGeosGeoTurtle *)outer$
                                              withBoolean:(jboolean)d {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetPen_initWithGeogebraCommonKernelGeosGeoTurtle_withBoolean_(self, outer$, d);
  return self;
}

- (GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)getType {
  return GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_get_SET_PEN();
}

- (jdouble)getTime {
  return 0.0;
}

- (void)perform {
  this$0_->penDown_ = down_;
}

- (void)drawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<GeogebraCommonKernelGeosGeoTurtle_DrawState>)ds {
  [((id<GeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) setPenWithBoolean:down_];
}

- (void)partialDrawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<GeogebraCommonKernelGeosGeoTurtle_DrawState>)ds
                                                        withDouble:(jdouble)progress {
}

- (NSString *)description {
  return down_ ? @"pd" : @"pu";
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoTurtle:withBoolean:", "CmdSetPen", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x1, NULL, NULL },
    { "getTime", NULL, "D", 0x1, NULL, NULL },
    { "perform", NULL, "V", 0x1, NULL, NULL },
    { "drawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:", "draw", "V", 0x1, NULL, NULL },
    { "partialDrawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:withDouble:", "partialDraw", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.geos.GeoTurtle;", NULL, NULL,  },
    { "down_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoTurtle_CmdSetPen = { 2, "CmdSetPen", "geogebra.common.kernel.geos", "GeoTurtle", 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoTurtle_CmdSetPen;
}

@end

void GeogebraCommonKernelGeosGeoTurtle_CmdSetPen_initWithGeogebraCommonKernelGeosGeoTurtle_withBoolean_(GeogebraCommonKernelGeosGeoTurtle_CmdSetPen *self, GeogebraCommonKernelGeosGeoTurtle *outer$, jboolean d) {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetPen_set_this$0_(self, outer$);
  NSObject_init(self);
  self->down_ = d;
}

GeogebraCommonKernelGeosGeoTurtle_CmdSetPen *new_GeogebraCommonKernelGeosGeoTurtle_CmdSetPen_initWithGeogebraCommonKernelGeosGeoTurtle_withBoolean_(GeogebraCommonKernelGeosGeoTurtle *outer$, jboolean d) {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetPen *self = [GeogebraCommonKernelGeosGeoTurtle_CmdSetPen alloc];
  GeogebraCommonKernelGeosGeoTurtle_CmdSetPen_initWithGeogebraCommonKernelGeosGeoTurtle_withBoolean_(self, outer$, d);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoTurtle_CmdSetPen)

@implementation GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness

- (instancetype)initWithGeogebraCommonKernelGeosGeoTurtle:(GeogebraCommonKernelGeosGeoTurtle *)outer$
                                                  withInt:(jint)th {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness_initWithGeogebraCommonKernelGeosGeoTurtle_withInt_(self, outer$, th);
  return self;
}

- (GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum *)getType {
  return GeogebraCommonKernelGeosGeoTurtle_CmdTypeEnum_get_SET_THICKNESS();
}

- (jdouble)getTime {
  return 0.0;
}

- (void)perform {
  this$0_->penThickness_ = thickness_;
}

- (void)drawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<GeogebraCommonKernelGeosGeoTurtle_DrawState>)ds {
  [((id<GeogebraCommonKernelGeosGeoTurtle_DrawState>) nil_chk(ds)) setThicknessWithInt:thickness_];
}

- (void)partialDrawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:(id<GeogebraCommonKernelGeosGeoTurtle_DrawState>)ds
                                                        withDouble:(jdouble)progress {
}

- (NSString *)description {
  return JreStrcat("$I", @"thickness ", thickness_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoTurtle:withInt:", "CmdSetThickness", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "Lgeogebra.common.kernel.geos.GeoTurtle$CmdType;", 0x1, NULL, NULL },
    { "getTime", NULL, "D", 0x1, NULL, NULL },
    { "perform", NULL, "V", 0x1, NULL, NULL },
    { "drawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:", "draw", "V", 0x1, NULL, NULL },
    { "partialDrawWithGeogebraCommonKernelGeosGeoTurtle_DrawState:withDouble:", "partialDraw", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.geos.GeoTurtle;", NULL, NULL,  },
    { "thickness_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness = { 2, "CmdSetThickness", "geogebra.common.kernel.geos", "GeoTurtle", 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness;
}

@end

void GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness_initWithGeogebraCommonKernelGeosGeoTurtle_withInt_(GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness *self, GeogebraCommonKernelGeosGeoTurtle *outer$, jint th) {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness_set_this$0_(self, outer$);
  NSObject_init(self);
  self->thickness_ = th;
}

GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness *new_GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness_initWithGeogebraCommonKernelGeosGeoTurtle_withInt_(GeogebraCommonKernelGeosGeoTurtle *outer$, jint th) {
  GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness *self = [GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness alloc];
  GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness_initWithGeogebraCommonKernelGeosGeoTurtle_withInt_(self, outer$, th);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoTurtle_CmdSetThickness)
