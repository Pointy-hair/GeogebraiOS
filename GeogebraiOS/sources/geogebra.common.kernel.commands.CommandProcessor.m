//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CommandProcessor.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoFunctionFreehand.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/MySpecialDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/arithmetic/Variable.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/parser/ParseException.h"
#include "geogebra/common/kernel/parser/Parser.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/Unicode.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelCommandsCommandProcessor () {
 @public
  GeogebraCommonKernelCommandsAlgebraProcessor *algProcessor_;
  JavaLangStringBuilder *sb_;
}

- (void)replaceZvarIfNeededWithNSString:(NSString *)name
withGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCommandsCommandProcessor, algProcessor_, GeogebraCommonKernelCommandsAlgebraProcessor *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCommandsCommandProcessor, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsCommandProcessor_resArgsWithGeogebraCommonKernelArithmeticCommand_(GeogebraCommonKernelCommandsCommandProcessor *self, GeogebraCommonKernelArithmeticCommand *c);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsCommandProcessor_resArgWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelCommandsCommandProcessor *self, GeogebraCommonKernelArithmeticExpressionNode *arg);

__attribute__((unused)) static void GeogebraCommonKernelCommandsCommandProcessor_replaceZvarIfNeededWithNSString_withGeogebraCommonKernelArithmeticCommand_(GeogebraCommonKernelCommandsCommandProcessor *self, NSString *name, GeogebraCommonKernelArithmeticCommand *c);

__attribute__((unused)) static GeogebraCommonMainMyError *GeogebraCommonKernelCommandsCommandProcessor_argErrWithGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelCommandsCommandProcessor *self, GeogebraCommonMainApp *app1, NSString *cmd, id<GeogebraCommonKernelArithmeticExpressionValue> arg);

__attribute__((unused)) static GeogebraCommonMainMyError *GeogebraCommonKernelCommandsCommandProcessor_argErrWithGeogebraCommonMainLocalization_withNSString_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelCommandsCommandProcessor *self, GeogebraCommonMainLocalization *app1, NSString *cmd, id<GeogebraCommonKernelArithmeticExpressionValue> arg);

@implementation GeogebraCommonKernelCommandsCommandProcessor

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)resArgsWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  return GeogebraCommonKernelCommandsCommandProcessor_resArgsWithGeogebraCommonKernelArithmeticCommand_(self, c);
}

- (IOSObjectArray *)resArgsWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                                         withBoolean:(jboolean)keepCAScells {
  jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  IOSObjectArray *arg = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArguments];
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(arg))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()];
  for (jint i = 0; i < arg->size_; ++i) {
    [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(arg, i))) resolveVariables];
    if (keepCAScells && [[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(arg, i))) unwrap] isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]]) {
      IOSObjectArray_Set(result, i, (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(arg, i))) unwrap], [GeogebraCommonKernelGeosGeoElement class]));
    }
    else {
      IOSObjectArray_Set(result, i, IOSObjectArray_Get(nil_chk(GeogebraCommonKernelCommandsCommandProcessor_resArgWithGeogebraCommonKernelArithmeticExpressionNode_(self, IOSObjectArray_Get(arg, i))), 0));
    }
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return result;
}

- (IOSObjectArray *)resArgWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)arg {
  return GeogebraCommonKernelCommandsCommandProcessor_resArgWithGeogebraCommonKernelArithmeticExpressionNode_(self, arg);
}

- (IOSObjectArray *)resArgsLocalNumVarWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                                                        withInt:(jint)varPos
                                                                        withInt:(jint)initPos {
  NSString *localVarName = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getVariableNameWithInt:varPos];
  if (localVarName == nil) {
    @throw GeogebraCommonKernelCommandsCommandProcessor_argErrWithGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelArithmeticExpressionValue_(self, app_, [c getName], [c getArgumentWithInt:varPos]);
  }
  else if ([localVarName isEqual:GeogebraCommonUtilUnicode_get_IMAGINARY_()]) {
    localVarName = @"i";
    GeogebraCommonKernelArithmeticVariable *localVar = [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernelA_, localVarName) autorelease];
    [c traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_Replacer_getReplacerWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getImaginaryUnit], localVar)];
  }
  else if ([localVarName isEqual:GeogebraCommonUtilUnicode_get_EULER_STRING_()]) {
    localVarName = @"e";
    GeogebraCommonKernelArithmeticVariable *localVar = [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernelA_, localVarName) autorelease];
    [c traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_Replacer_getReplacerWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmeticMySpecialDouble_getEulerConstantWithGeogebraCommonKernelKernel_(kernelA_), localVar)];
  }
  GeogebraCommonKernelConstruction *cmdCons = [((GeogebraCommonKernelKernel *) nil_chk([c getKernel])) getConstruction];
  GeogebraCommonKernelGeosGeoNumeric *num = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cmdCons) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cmdCons)) addLocalVariableWithNSString:localVarName withGeogebraCommonKernelGeosGeoElement:num];
  GeogebraCommonKernelCommandsCommandProcessor_replaceZvarIfNeededWithNSString_withGeogebraCommonKernelArithmeticCommand_(self, localVarName, c);
  if (initPos != varPos) {
    jboolean oldval = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    id<GeogebraCommonKernelArithmeticNumberValue> initValue = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(GeogebraCommonKernelCommandsCommandProcessor_resArgWithGeogebraCommonKernelArithmeticExpressionNode_(self, [c getArgumentWithInt:initPos])), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue));
    [cons_ setSuppressLabelCreationWithBoolean:oldval];
    [num setValueWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(initValue)) getDouble]];
  }
  [c setArgumentWithInt:varPos withGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_([c getKernel], num) autorelease]];
  IOSObjectArray *arg = GeogebraCommonKernelCommandsCommandProcessor_resArgsWithGeogebraCommonKernelArithmeticCommand_(self, c);
  [cmdCons removeLocalVariableWithNSString:localVarName];
  return arg;
}

- (void)replaceZvarIfNeededWithNSString:(NSString *)name
withGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  GeogebraCommonKernelCommandsCommandProcessor_replaceZvarIfNeededWithNSString_withGeogebraCommonKernelArithmeticCommand_(self, name, c);
}

- (GeogebraCommonKernelGeosGeoElement *)resArgsForZipWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                                   withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)vars
                                                      withGeogebraCommonKernelGeosGeoListArray:(IOSObjectArray *)over {
  jint numArgs = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  GeogebraCommonKernelConstruction *cmdCons = [((GeogebraCommonKernelKernel *) nil_chk([c getKernel])) getConstruction];
  for (jint varPos = 1; varPos < numArgs; varPos += 2) {
    NSString *localVarName = [c getVariableNameWithInt:varPos];
    if (localVarName == nil && [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:varPos])) isTopLevelCommand]) {
      localVarName = [((GeogebraCommonKernelArithmeticCommand *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:varPos])) getTopLevelCommand])) getVariableNameWithInt:0];
    }
    if (localVarName == nil) {
      @throw GeogebraCommonKernelCommandsCommandProcessor_argErrWithGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelArithmeticExpressionValue_(self, app_, [c getName], [c getArgumentWithInt:varPos]);
    }
    GeogebraCommonKernelGeosGeoElement *num = nil;
    GeogebraCommonKernelGeosGeoList *gl = nil;
    if ([c getArgumentNumber] > varPos + 1) {
      gl = (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk(GeogebraCommonKernelCommandsCommandProcessor_resArgWithGeogebraCommonKernelArithmeticExpressionNode_(self, [c getArgumentWithInt:varPos + 1])), 0), [GeogebraCommonKernelGeosGeoList class]);
    }
    if (gl == nil) {
      num = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    }
    else if ([gl size] == 0) {
      if ([gl getTypeStringForXML] != nil) {
        num = [((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) createGeoElementWithGeogebraCommonKernelConstruction:cons_ withNSString:[gl getTypeStringForXML]];
      }
      else {
        num = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
      }
    }
    else {
      num = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([gl getWithInt:0])) copyInternalWithGeogebraCommonKernelConstruction:cons_];
    }
    [((GeogebraCommonKernelConstruction *) nil_chk(cmdCons)) addLocalVariableWithNSString:localVarName withGeogebraCommonKernelGeosGeoElement:num];
    GeogebraCommonKernelCommandsCommandProcessor_replaceZvarIfNeededWithNSString_withGeogebraCommonKernelArithmeticCommand_(self, localVarName, c);
    [c setArgumentWithInt:varPos withGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_([c getKernel], num) autorelease]];
    IOSObjectArray_Set(nil_chk(vars), varPos / 2, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(num)) toGeoElement]);
    if (gl != nil) {
      IOSObjectArray_Set(nil_chk(over), varPos / 2, gl);
    }
  }
  IOSObjectArray *arg = GeogebraCommonKernelCommandsCommandProcessor_resArgWithGeogebraCommonKernelArithmeticExpressionNode_(self, [c getArgumentWithInt:0]);
  return IOSObjectArray_Get(nil_chk(arg), 0);
}

- (IOSObjectArray *)resArgsLocalNumVarWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                                                   withIntArray:(IOSIntArray *)varPos
                                                                   withIntArray:(IOSIntArray *)initPos {
  IOSObjectArray *localVarName = [IOSObjectArray arrayWithLength:((IOSIntArray *) nil_chk(varPos))->size_ type:NSString_class_()];
  for (jint i = 0; i < varPos->size_; i++) {
    IOSObjectArray_Set(localVarName, i, [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getVariableNameWithInt:IOSIntArray_Get(varPos, i)]);
    if (IOSObjectArray_Get(localVarName, i) == nil) {
      @throw GeogebraCommonKernelCommandsCommandProcessor_argErrWithGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelArithmeticExpressionValue_(self, app_, [c getName], [c getArgumentWithInt:IOSIntArray_Get(varPos, i)]);
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(localVarName, i))) isEqual:GeogebraCommonUtilUnicode_get_IMAGINARY_()]) {
      IOSObjectArray_Set(localVarName, i, @"i");
      GeogebraCommonKernelArithmeticVariable *localVar = [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernelA_, IOSObjectArray_Get(localVarName, i)) autorelease];
      [c traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_Replacer_getReplacerWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getImaginaryUnit], localVar)];
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(localVarName, i))) isEqual:GeogebraCommonUtilUnicode_get_EULER_STRING_()]) {
      IOSObjectArray_Set(localVarName, i, @"e");
      GeogebraCommonKernelArithmeticVariable *localVar = [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernelA_, IOSObjectArray_Get(localVarName, i)) autorelease];
      [c traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_Replacer_getReplacerWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmeticMySpecialDouble_getEulerConstantWithGeogebraCommonKernelKernel_(kernelA_), localVar)];
    }
  }
  GeogebraCommonKernelConstruction *cmdCons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getKernel])) getConstruction];
  IOSObjectArray *num = [IOSObjectArray arrayWithLength:varPos->size_ type:GeogebraCommonKernelGeosGeoNumeric_class_()];
  for (jint i = 0; i < varPos->size_; i++) {
    IOSObjectArray_SetAndConsume(num, i, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cmdCons));
    [((GeogebraCommonKernelConstruction *) nil_chk(cmdCons)) addLocalVariableWithNSString:IOSObjectArray_Get(localVarName, i) withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(num, i)];
    GeogebraCommonKernelCommandsCommandProcessor_replaceZvarIfNeededWithNSString_withGeogebraCommonKernelArithmeticCommand_(self, IOSObjectArray_Get(localVarName, i), c);
  }
  for (jint i = 0; i < varPos->size_; i++) {
    if (IOSIntArray_Get(nil_chk(initPos), i) != IOSIntArray_Get(varPos, i)) {
      jboolean oldval = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
      [cons_ setSuppressLabelCreationWithBoolean:YES];
      id<GeogebraCommonKernelArithmeticNumberValue> initValue = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(GeogebraCommonKernelCommandsCommandProcessor_resArgWithGeogebraCommonKernelArithmeticExpressionNode_(self, [c getArgumentWithInt:IOSIntArray_Get(initPos, i)])), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue));
      [cons_ setSuppressLabelCreationWithBoolean:oldval];
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(IOSObjectArray_Get(num, i))) setValueWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(initValue)) getDouble]];
    }
  }
  for (jint i = 0; i < varPos->size_; i++) [c setArgumentWithInt:IOSIntArray_Get(varPos, i) withGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_([c getKernel], IOSObjectArray_Get(num, i)) autorelease]];
  IOSObjectArray *arg = GeogebraCommonKernelCommandsCommandProcessor_resArgsWithGeogebraCommonKernelArithmeticCommand_(self, c);
  for (jint i = 0; i < varPos->size_; i++) [((GeogebraCommonKernelConstruction *) nil_chk(cmdCons)) removeLocalVariableWithNSString:IOSObjectArray_Get(localVarName, i)];
  return arg;
}

- (GeogebraCommonMainMyError *)argErrWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app1
                                                  withNSString:(NSString *)cmd
             withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)arg {
  return GeogebraCommonKernelCommandsCommandProcessor_argErrWithGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelArithmeticExpressionValue_(self, app1, cmd, arg);
}

- (GeogebraCommonMainMyError *)argErrWithGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)app1
                                                           withNSString:(NSString *)cmd
                      withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)arg {
  return GeogebraCommonKernelCommandsCommandProcessor_argErrWithGeogebraCommonMainLocalization_withNSString_withGeogebraCommonKernelArithmeticExpressionValue_(self, app1, cmd, arg);
}

- (GeogebraCommonMainMyError *)argNumErrWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app1
                                                     withNSString:(NSString *)cmd
                                                          withInt:(jint)argNumber {
  if (sb_ == nil) GeogebraCommonKernelCommandsCommandProcessor_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  else [sb_ setLengthWithInt:0];
  GeogebraCommonKernelCommandsCommandProcessor_getCommandSyntaxWithJavaLangStringBuilder_withGeogebraCommonMainLocalization_withNSString_withInt_(sb_, [((GeogebraCommonMainApp *) nil_chk(app1)) getLocalization], cmd, argNumber);
  GeogebraCommonMainApp_debugWithNSString_([[self getClass] getName]);
  return [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_withNSString_([app1 getLocalization], [((JavaLangStringBuilder *) nil_chk(sb_)) description], cmd) autorelease];
}

+ (void)getCommandSyntaxWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
               withGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)app
                                     withNSString:(NSString *)cmd
                                          withInt:(jint)argNumber {
  GeogebraCommonKernelCommandsCommandProcessor_getCommandSyntaxWithJavaLangStringBuilder_withGeogebraCommonMainLocalization_withNSString_withInt_(sb, app, cmd, argNumber);
}

+ (GeogebraCommonMainMyError *)chDepErrWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app1
                          withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonKernelCommandsCommandProcessor_chDepErrWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoElement_(app1, geo);
}

+ (GeogebraCommonKernelGeosGeoElement *)getBadArgWithBooleanArray:(IOSBooleanArray *)ok
                      withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg {
  return GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg);
}

+ (GeogebraCommonKernelGeosGeoList *)wrapInListWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                  withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)args
                                                                      withInt:(jint)length
                                         withGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)type {
  return GeogebraCommonKernelCommandsCommandProcessor_wrapInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElementArray_withInt_withGeogebraCommonPluginGeoClassEnum_(kernel, args, length, type);
}

+ (GeogebraCommonKernelGeosGeoList *)wrapFreehandFunctionArgInListWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernelA
                                               withGeogebraCommonKernelAlgosAlgoFunctionFreehand:(GeogebraCommonKernelAlgosAlgoFunctionFreehand *)algo {
  return GeogebraCommonKernelCommandsCommandProcessor_wrapFreehandFunctionArgInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelAlgosAlgoFunctionFreehand_(kernelA, algo);
}

- (void)checkDependencyWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                                                      withNSString:(NSString *)name
                                                           withInt:(jint)i
                                                           withInt:(jint)j {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), i))) isChildOrEqualWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, j)]) {
    if ([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getConstruction])) isFileLoading]) {
      GeogebraCommonUtilDebugLog_warnWithNSString_(JreStrcat("$$", @"wrong dependency in ", name));
    }
    else {
      @throw GeogebraCommonKernelCommandsCommandProcessor_argErrWithGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelArithmeticExpressionValue_(self, app_, name, IOSObjectArray_Get(arg, i));
    }
  }
}

- (GeogebraCommonKernelAlgosAlgoDispatcher *)getAlgoDispatcher {
  return [((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getAlgoDispatcher];
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(loc_);
  RELEASE_(kernelA_);
  RELEASE_(cons_);
  RELEASE_(algProcessor_);
  RELEASE_(sb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CommandProcessor", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x401, "Lgeogebra.common.main.MyError;Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
    { "resArgsWithGeogebraCommonKernelArithmeticCommand:", "resArgs", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, "Lgeogebra.common.main.MyError;", NULL },
    { "resArgsWithGeogebraCommonKernelArithmeticCommand:withBoolean:", "resArgs", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, "Lgeogebra.common.main.MyError;", NULL },
    { "resArgWithGeogebraCommonKernelArithmeticExpressionNode:", "resArg", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, "Lgeogebra.common.main.MyError;", NULL },
    { "resArgsLocalNumVarWithGeogebraCommonKernelArithmeticCommand:withInt:withInt:", "resArgsLocalNumVar", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "replaceZvarIfNeededWithNSString:withGeogebraCommonKernelArithmeticCommand:", "replaceZvarIfNeeded", "V", 0x2, NULL, NULL },
    { "resArgsForZipWithGeogebraCommonKernelArithmeticCommand:withGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonKernelGeosGeoListArray:", "resArgsForZip", "Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "resArgsLocalNumVarWithGeogebraCommonKernelArithmeticCommand:withIntArray:withIntArray:", "resArgsLocalNumVar", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x14, NULL, NULL },
    { "argErrWithGeogebraCommonMainApp:withNSString:withGeogebraCommonKernelArithmeticExpressionValue:", "argErr", "Lgeogebra.common.main.MyError;", 0x14, NULL, NULL },
    { "argErrWithGeogebraCommonMainLocalization:withNSString:withGeogebraCommonKernelArithmeticExpressionValue:", "argErr", "Lgeogebra.common.main.MyError;", 0x14, NULL, NULL },
    { "argNumErrWithGeogebraCommonMainApp:withNSString:withInt:", "argNumErr", "Lgeogebra.common.main.MyError;", 0x14, NULL, NULL },
    { "getCommandSyntaxWithJavaLangStringBuilder:withGeogebraCommonMainLocalization:withNSString:withInt:", "getCommandSyntax", "V", 0x9, NULL, NULL },
    { "chDepErrWithGeogebraCommonMainApp:withGeogebraCommonKernelGeosGeoElement:", "chDepErr", "Lgeogebra.common.main.MyError;", 0x18, NULL, NULL },
    { "getBadArgWithBooleanArray:withGeogebraCommonKernelGeosGeoElementArray:", "getBadArg", "Lgeogebra.common.kernel.geos.GeoElement;", 0xc, NULL, NULL },
    { "wrapInListWithGeogebraCommonKernelKernel:withGeogebraCommonKernelGeosGeoElementArray:withInt:withGeogebraCommonPluginGeoClassEnum:", "wrapInList", "Lgeogebra.common.kernel.geos.GeoList;", 0x9, NULL, NULL },
    { "wrapFreehandFunctionArgInListWithGeogebraCommonKernelKernel:withGeogebraCommonKernelAlgosAlgoFunctionFreehand:", "wrapFreehandFunctionArgInList", "Lgeogebra.common.kernel.geos.GeoList;", 0x9, NULL, NULL },
    { "checkDependencyWithGeogebraCommonKernelGeosGeoElementArray:withNSString:withInt:withInt:", "checkDependency", "V", 0x4, NULL, NULL },
    { "getAlgoDispatcher", NULL, "Lgeogebra.common.kernel.algos.AlgoDispatcher;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x4, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "loc_", NULL, 0x4, "Lgeogebra.common.main.Localization;", NULL, NULL,  },
    { "kernelA_", NULL, 0x4, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cons_", NULL, 0x4, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "algProcessor_", NULL, 0x2, "Lgeogebra.common.kernel.commands.AlgebraProcessor;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCommandProcessor = { 2, "CommandProcessor", "geogebra.common.kernel.commands", NULL, 0x401, 19, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCommandProcessor;
}

@end

void GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCommandProcessor *self, GeogebraCommonKernelKernel *kernel) {
  NSObject_init(self);
  GeogebraCommonKernelCommandsCommandProcessor_set_kernelA_(self, kernel);
  GeogebraCommonKernelCommandsCommandProcessor_set_cons_(self, [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction]);
  GeogebraCommonKernelCommandsCommandProcessor_set_app_(self, [kernel getApplication]);
  GeogebraCommonKernelCommandsCommandProcessor_set_loc_(self, [((GeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization]);
  GeogebraCommonKernelCommandsCommandProcessor_set_algProcessor_(self, [kernel getAlgebraProcessor]);
}

IOSObjectArray *GeogebraCommonKernelCommandsCommandProcessor_resArgsWithGeogebraCommonKernelArithmeticCommand_(GeogebraCommonKernelCommandsCommandProcessor *self, GeogebraCommonKernelArithmeticCommand *c) {
  jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
  [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  IOSObjectArray *arg = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArguments];
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(arg))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()];
  for (jint i = 0; i < arg->size_; ++i) {
    [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(arg, i))) resolveVariables];
    IOSObjectArray_Set(result, i, IOSObjectArray_Get(nil_chk(GeogebraCommonKernelCommandsCommandProcessor_resArgWithGeogebraCommonKernelArithmeticExpressionNode_(self, IOSObjectArray_Get(arg, i))), 0));
  }
  [self->cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return result;
}

IOSObjectArray *GeogebraCommonKernelCommandsCommandProcessor_resArgWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelCommandsCommandProcessor *self, GeogebraCommonKernelArithmeticExpressionNode *arg) {
  IOSObjectArray *geos = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(self->algProcessor_)) processExpressionNodeWithGeogebraCommonKernelArithmeticExpressionNode:arg];
  if (geos != nil) {
    return geos;
  }
  IOSObjectArray *str = [IOSObjectArray arrayWithObjects:(id[]){ @"IllegalArgument", [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(arg)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()] } count:2 type:NSString_class_()];
  @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSStringArray_(self->loc_, str) autorelease];
}

void GeogebraCommonKernelCommandsCommandProcessor_replaceZvarIfNeededWithNSString_withGeogebraCommonKernelArithmeticCommand_(GeogebraCommonKernelCommandsCommandProcessor *self, NSString *name, GeogebraCommonKernelArithmeticCommand *c) {
  if ([((NSString *) nil_chk(name)) isEqual:@"z"]) {
    @try {
      [c setArgumentWithInt:0 withGeogebraCommonKernelArithmeticExpressionNode:[((GeogebraCommonKernelArithmeticValidExpression *) nil_chk([((GeogebraCommonKernelParserParser *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernelA_)) getParser])) parseGeoGebraExpressionWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentWithInt:0])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_xmlTemplate_()]])) wrap]];
    }
    @catch (GeogebraCommonKernelParserParseException *e) {
      [((GeogebraCommonKernelParserParseException *) nil_chk(e)) printStackTrace];
    }
  }
}

GeogebraCommonMainMyError *GeogebraCommonKernelCommandsCommandProcessor_argErrWithGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelCommandsCommandProcessor *self, GeogebraCommonMainApp *app1, NSString *cmd, id<GeogebraCommonKernelArithmeticExpressionValue> arg) {
  return GeogebraCommonKernelCommandsCommandProcessor_argErrWithGeogebraCommonMainLocalization_withNSString_withGeogebraCommonKernelArithmeticExpressionValue_(self, [((GeogebraCommonMainApp *) nil_chk(app1)) getLocalization], cmd, arg);
}

GeogebraCommonMainMyError *GeogebraCommonKernelCommandsCommandProcessor_argErrWithGeogebraCommonMainLocalization_withNSString_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelCommandsCommandProcessor *self, GeogebraCommonMainLocalization *app1, NSString *cmd, id<GeogebraCommonKernelArithmeticExpressionValue> arg) {
  NSString *localName = [((GeogebraCommonMainLocalization *) nil_chk(app1)) getCommandWithNSString:cmd];
  if (self->sb_ == nil) GeogebraCommonKernelCommandsCommandProcessor_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  else [self->sb_ setLengthWithInt:0];
  jboolean reverseOrder = [app1 isReverseNameDescriptionLanguage];
  if (!reverseOrder) {
    [((JavaLangStringBuilder *) nil_chk(self->sb_)) appendWithNSString:[app1 getCommandWithNSString:@"Command"]];
    [self->sb_ appendWithChar:' '];
    [self->sb_ appendWithNSString:localName];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(self->sb_)) appendWithNSString:localName];
    [self->sb_ appendWithChar:' '];
    [self->sb_ appendWithNSString:[((NSString *) nil_chk([app1 getCommandWithNSString:@"Command"])) lowercaseString]];
  }
  [((JavaLangStringBuilder *) nil_chk(self->sb_)) appendWithNSString:@":\n"];
  [self->sb_ appendWithNSString:[app1 getErrorWithNSString:@"IllegalArgument"]];
  [self->sb_ appendWithNSString:@": "];
  if ([arg isKindOfClass:[GeogebraCommonKernelGeosGeoElement class]]) [self->sb_ appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(arg, [GeogebraCommonKernelGeosGeoElement class])))) getNameDescription]];
  else if (arg != nil) [self->sb_ appendWithNSString:[arg toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  [self->sb_ appendWithNSString:@"\n\n"];
  [self->sb_ appendWithNSString:[app1 getPlainWithNSString:@"Syntax"]];
  [self->sb_ appendWithNSString:@":\n"];
  [self->sb_ appendWithNSString:[app1 getCommandSyntaxWithNSString:cmd]];
  return [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_withNSString_(app1, [self->sb_ description], cmd) autorelease];
}

void GeogebraCommonKernelCommandsCommandProcessor_getCommandSyntaxWithJavaLangStringBuilder_withGeogebraCommonMainLocalization_withNSString_withInt_(JavaLangStringBuilder *sb, GeogebraCommonMainLocalization *app, NSString *cmd, jint argNumber) {
  GeogebraCommonKernelCommandsCommandProcessor_initialize();
  jboolean reverseOrder = [((GeogebraCommonMainLocalization *) nil_chk(app)) isReverseNameDescriptionLanguage];
  if (!reverseOrder) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[app getCommandWithNSString:@"Command"]];
    [sb appendWithChar:' '];
    [sb appendWithNSString:[app getCommandWithNSString:cmd]];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[app getCommandWithNSString:cmd]];
    [sb appendWithChar:' '];
    [sb appendWithNSString:[((NSString *) nil_chk([app getCommandWithNSString:@"Command"])) lowercaseString]];
  }
  if (argNumber > -1) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@":\n"];
    [sb appendWithNSString:[app getErrorWithNSString:@"IllegalArgumentNumber"]];
    [sb appendWithNSString:@": "];
    [sb appendWithInt:argNumber];
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\n\n"];
  [sb appendWithNSString:[app getPlainWithNSString:@"Syntax"]];
  [sb appendWithNSString:@":\n"];
  [sb appendWithNSString:[app getCommandSyntaxWithNSString:cmd]];
}

GeogebraCommonMainMyError *GeogebraCommonKernelCommandsCommandProcessor_chDepErrWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonMainApp *app1, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonKernelCommandsCommandProcessor_initialize();
  IOSObjectArray *strs = [IOSObjectArray arrayWithObjects:(id[]){ @"ChangeDependent", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLongDescription] } count:2 type:NSString_class_()];
  return [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSStringArray_([((GeogebraCommonMainApp *) nil_chk(app1)) getLocalization], strs) autorelease];
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(IOSBooleanArray *ok, IOSObjectArray *arg) {
  GeogebraCommonKernelCommandsCommandProcessor_initialize();
  for (jint i = 0; i < ((IOSBooleanArray *) nil_chk(ok))->size_; i++) {
    if (!IOSBooleanArray_Get(ok, i)) return IOSObjectArray_Get(nil_chk(arg), i);
  }
  return IOSObjectArray_Get(arg, ((IOSObjectArray *) nil_chk(arg))->size_ - 1);
}

GeogebraCommonKernelGeosGeoList *GeogebraCommonKernelCommandsCommandProcessor_wrapInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElementArray_withInt_withGeogebraCommonPluginGeoClassEnum_(GeogebraCommonKernelKernel *kernel, IOSObjectArray *args, jint length, GeogebraCommonPluginGeoClassEnum *type) {
  GeogebraCommonKernelCommandsCommandProcessor_initialize();
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction];
  jboolean correctType = YES;
  JavaUtilArrayList *geoElementList = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < length; i++) {
    if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk(type)) isEqual:GeogebraCommonPluginGeoClassEnum_get_DEFAULT()] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(args), i))) getGeoClassType] == type) [geoElementList addWithId:IOSObjectArray_Get(nil_chk(args), i)];
    else {
      correctType = NO;
      break;
    }
  }
  GeogebraCommonKernelGeosGeoList *list = nil;
  if (correctType) {
    jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive];
    [cons setSuppressLabelCreationWithBoolean:YES];
    list = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel getAlgoDispatcher])) ListWithNSString:nil withJavaUtilArrayList:geoElementList withBoolean:NO];
    [cons setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  if (list != nil && [list size] == 0) list = nil;
  return list;
}

GeogebraCommonKernelGeosGeoList *GeogebraCommonKernelCommandsCommandProcessor_wrapFreehandFunctionArgInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelAlgosAlgoFunctionFreehand_(GeogebraCommonKernelKernel *kernelA, GeogebraCommonKernelAlgosAlgoFunctionFreehand *algo) {
  GeogebraCommonKernelCommandsCommandProcessor_initialize();
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(kernelA)) getConstruction];
  GeogebraCommonKernelGeosGeoList *list = (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoFunctionFreehand *) nil_chk(algo)) getInput]), 0), [GeogebraCommonKernelGeosGeoList class]);
  jdouble start = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(list)) getWithInt:0], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  jdouble end = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([list getWithInt:1], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  jint size = [list size] - 2;
  jdouble step = (end - start) / (size - 1);
  JavaUtilArrayList *geoElementList = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoPoint *p = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons, start + i * step, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([list getWithInt:2 + i], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble], 1.0) autorelease];
    [geoElementList addWithId:p];
  }
  jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive];
  [cons setSuppressLabelCreationWithBoolean:YES];
  list = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernelA getAlgoDispatcher])) ListWithNSString:nil withJavaUtilArrayList:geoElementList withBoolean:NO];
  [cons setSuppressLabelCreationWithBoolean:oldMacroMode];
  return list;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCommandProcessor)
