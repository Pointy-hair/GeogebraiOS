//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/EquationSolver.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/EquationSolver.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "geogebra/common/kernel/roots/RealRootAdapter.h"
#include "geogebra/common/kernel/roots/RealRootDerivAdapter.h"
#include "geogebra/common/main/App.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"
#include "org/apache/commons/math/analysis/solvers/LaguerreSolver.h"
#include "org/apache/commons/math/analysis/solvers/UnivariateRealSolver.h"
#include "org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.h"
#include "org/apache/commons/math/complex/Complex.h"

#define GeogebraCommonKernelEquationSolver_LAGUERRE_EPS 1.0E-5
#define GeogebraCommonKernelEquationSolver_BELOW -2
#define GeogebraCommonKernelEquationSolver_LOWEDGE -1
#define GeogebraCommonKernelEquationSolver_INSIDE 0
#define GeogebraCommonKernelEquationSolver_HIGHEDGE 1
#define GeogebraCommonKernelEquationSolver_ABOVE 2
#define GeogebraCommonKernelEquationSolver_LAGUERRE_START -1.0

@interface GeogebraCommonKernelEquationSolver () {
 @public
  OrgApacheCommonsMathAnalysisSolversLaguerreSolver *laguerreSolver_;
  id<OrgApacheCommonsMathAnalysisSolversUnivariateRealSolver> rootFinderBrent_, rootFinderNewton_;
}

+ (void)fixRootsWithDoubleArray:(IOSDoubleArray *)res
                withDoubleArray:(IOSDoubleArray *)eqn;

+ (jdouble)solveEqnWithDoubleArray:(IOSDoubleArray *)eqn
                           withInt:(jint)order
                        withDouble:(jdouble)t;

+ (jdouble)findZeroWithDouble:(jdouble)init_
                   withDouble:(jdouble)target
              withDoubleArray:(IOSDoubleArray *)eqn;

+ (jint)getTagWithDouble:(jdouble)coord
              withDouble:(jdouble)low
              withDouble:(jdouble)high;

- (jint)laguerreAllWithDoubleArray:(IOSDoubleArray *)eqn;

- (jint)laguerreAllComplexWithDoubleArray:(IOSDoubleArray *)real
                          withDoubleArray:(IOSDoubleArray *)complex;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelEquationSolver, laguerreSolver_, OrgApacheCommonsMathAnalysisSolversLaguerreSolver *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelEquationSolver, rootFinderBrent_, id<OrgApacheCommonsMathAnalysisSolversUnivariateRealSolver>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelEquationSolver, rootFinderNewton_, id<OrgApacheCommonsMathAnalysisSolversUnivariateRealSolver>)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelEquationSolver, LAGUERRE_EPS, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelEquationSolver, BELOW, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelEquationSolver, LOWEDGE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelEquationSolver, INSIDE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelEquationSolver, HIGHEDGE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelEquationSolver, ABOVE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelEquationSolver, LAGUERRE_START, jdouble)

static id<JavaUtilComparator> GeogebraCommonKernelEquationSolver_comparatorReal_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelEquationSolver, comparatorReal_, id<JavaUtilComparator>)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelEquationSolver, comparatorReal_, id<JavaUtilComparator>)

__attribute__((unused)) static jint GeogebraCommonKernelEquationSolver_solveQuadraticWithDoubleArray_withDoubleArray_withDouble_(GeogebraCommonKernelEquationSolver *self, IOSDoubleArray *eqn, IOSDoubleArray *res, jdouble eps);

__attribute__((unused)) static jint GeogebraCommonKernelEquationSolver_solveCubicWithDoubleArray_withDoubleArray_withDouble_(GeogebraCommonKernelEquationSolver *self, IOSDoubleArray *eqn, IOSDoubleArray *res, jdouble eps);

__attribute__((unused)) static void GeogebraCommonKernelEquationSolver_fixRootsWithDoubleArray_withDoubleArray_(IOSDoubleArray *res, IOSDoubleArray *eqn);

__attribute__((unused)) static jdouble GeogebraCommonKernelEquationSolver_solveEqnWithDoubleArray_withInt_withDouble_(IOSDoubleArray *eqn, jint order, jdouble t);

__attribute__((unused)) static jdouble GeogebraCommonKernelEquationSolver_findZeroWithDouble_withDouble_withDoubleArray_(jdouble init_, jdouble target, IOSDoubleArray *eqn);

__attribute__((unused)) static jint GeogebraCommonKernelEquationSolver_getTagWithDouble_withDouble_withDouble_(jdouble coord, jdouble low, jdouble high);

__attribute__((unused)) static jint GeogebraCommonKernelEquationSolver_laguerreAllWithDoubleArray_(GeogebraCommonKernelEquationSolver *self, IOSDoubleArray *eqn);

__attribute__((unused)) static jint GeogebraCommonKernelEquationSolver_laguerreAllComplexWithDoubleArray_withDoubleArray_(GeogebraCommonKernelEquationSolver *self, IOSDoubleArray *real, IOSDoubleArray *complex);

@interface GeogebraCommonKernelEquationSolver_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(OrgApacheCommonsMathComplexComplex *)itemA
               withId:(OrgApacheCommonsMathComplexComplex *)itemB;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelEquationSolver_$1)

__attribute__((unused)) static void GeogebraCommonKernelEquationSolver_$1_init(GeogebraCommonKernelEquationSolver_$1 *self);

__attribute__((unused)) static GeogebraCommonKernelEquationSolver_$1 *new_GeogebraCommonKernelEquationSolver_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelEquationSolver_$1)

@implementation GeogebraCommonKernelEquationSolver

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelEquationSolver_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (jint)polynomialRootsWithDoubleArray:(IOSDoubleArray *)roots
                           withBoolean:(jboolean)multiple {
  jint realRoots;
  jint degree = ((IOSDoubleArray *) nil_chk(roots))->size_ - 1;
  for (jint i = degree; i >= 0 && IOSDoubleArray_Get(roots, i) == 0; i--) degree--;
  switch (degree) {
    case 0:
    realRoots = 0;
    break;
    case 1:
    *IOSDoubleArray_GetRef(roots, 0) = -IOSDoubleArray_Get(roots, 0) / IOSDoubleArray_Get(roots, 1);
    realRoots = 1;
    break;
    case 2:
    realRoots = GeogebraCommonKernelEquationSolver_solveQuadraticWithDoubleArray_withDoubleArray_withDouble_(self, roots, roots, GeogebraCommonKernelKernel_STANDARD_PRECISION);
    if (multiple && realRoots == 1) {
      realRoots = 2;
      *IOSDoubleArray_GetRef(roots, 1) = IOSDoubleArray_Get(roots, 0);
    }
    break;
    case 3:
    realRoots = GeogebraCommonKernelEquationSolver_solveCubicWithDoubleArray_withDoubleArray_withDouble_(self, roots, roots, GeogebraCommonKernelKernel_STANDARD_PRECISION);
    break;
    default:
    realRoots = GeogebraCommonKernelEquationSolver_laguerreAllWithDoubleArray_(self, roots);
  }
  return JavaLangMath_maxWithInt_withInt_(0, realRoots);
}

- (jint)polynomialComplexRootsWithDoubleArray:(IOSDoubleArray *)real
                              withDoubleArray:(IOSDoubleArray *)complex {
  jint ret = -1;
  switch (((IOSDoubleArray *) nil_chk(real))->size_ - 1) {
    case 0:
    ret = 0;
    break;
    case 1:
    *IOSDoubleArray_GetRef(real, 0) = -IOSDoubleArray_Get(real, 0) / IOSDoubleArray_Get(real, 1);
    *IOSDoubleArray_GetRef(nil_chk(complex), 0) = 0;
    ret = 1;
    break;
    case 2:
    ret = GeogebraCommonKernelEquationSolver_solveQuadraticComplexWithDoubleArray_withDoubleArray_(real, complex);
    break;
    default:
    ret = GeogebraCommonKernelEquationSolver_laguerreAllComplexWithDoubleArray_withDoubleArray_(self, real, complex);
  }
  return ret;
}

- (jint)solveQuadraticWithDoubleArray:(IOSDoubleArray *)eqn {
  return GeogebraCommonKernelEquationSolver_solveQuadraticWithDoubleArray_withDoubleArray_withDouble_(self, eqn, eqn, GeogebraCommonKernelKernel_STANDARD_PRECISION);
}

- (jint)solveQuadraticWithDoubleArray:(IOSDoubleArray *)eqn
                      withDoubleArray:(IOSDoubleArray *)res
                           withDouble:(jdouble)eps {
  return GeogebraCommonKernelEquationSolver_solveQuadraticWithDoubleArray_withDoubleArray_withDouble_(self, eqn, res, eps);
}

+ (jint)solveQuadraticComplexWithDoubleArray:(IOSDoubleArray *)real
                             withDoubleArray:(IOSDoubleArray *)complex {
  return GeogebraCommonKernelEquationSolver_solveQuadraticComplexWithDoubleArray_withDoubleArray_(real, complex);
}

- (jint)solveCubicWithDoubleArray:(IOSDoubleArray *)eqn {
  return GeogebraCommonKernelEquationSolver_solveCubicWithDoubleArray_withDoubleArray_withDouble_(self, eqn, eqn, GeogebraCommonKernelKernel_STANDARD_PRECISION);
}

- (jint)solveCubicWithDoubleArray:(IOSDoubleArray *)eqn
                  withDoubleArray:(IOSDoubleArray *)res
                       withDouble:(jdouble)eps {
  return GeogebraCommonKernelEquationSolver_solveCubicWithDoubleArray_withDoubleArray_withDouble_(self, eqn, res, eps);
}

+ (void)fixRootsWithDoubleArray:(IOSDoubleArray *)res
                withDoubleArray:(IOSDoubleArray *)eqn {
  GeogebraCommonKernelEquationSolver_fixRootsWithDoubleArray_withDoubleArray_(res, eqn);
}

+ (jdouble)solveEqnWithDoubleArray:(IOSDoubleArray *)eqn
                           withInt:(jint)order
                        withDouble:(jdouble)t {
  return GeogebraCommonKernelEquationSolver_solveEqnWithDoubleArray_withInt_withDouble_(eqn, order, t);
}

+ (jdouble)findZeroWithDouble:(jdouble)init_
                   withDouble:(jdouble)target
              withDoubleArray:(IOSDoubleArray *)eqn {
  return GeogebraCommonKernelEquationSolver_findZeroWithDouble_withDouble_withDoubleArray_(init_, target, eqn);
}

+ (jint)getTagWithDouble:(jdouble)coord
              withDouble:(jdouble)low
              withDouble:(jdouble)high {
  return GeogebraCommonKernelEquationSolver_getTagWithDouble_withDouble_withDouble_(coord, low, high);
}

- (jint)laguerreAllWithDoubleArray:(IOSDoubleArray *)eqn {
  return GeogebraCommonKernelEquationSolver_laguerreAllWithDoubleArray_(self, eqn);
}

- (jint)laguerreAllComplexWithDoubleArray:(IOSDoubleArray *)real
                          withDoubleArray:(IOSDoubleArray *)complex {
  return GeogebraCommonKernelEquationSolver_laguerreAllComplexWithDoubleArray_withDoubleArray_(self, real, complex);
}

- (jint)solveQuarticWithDoubleArray:(IOSDoubleArray *)eqn
                    withDoubleArray:(IOSDoubleArray *)res
                         withDouble:(jdouble)eps {
  if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(eqn), 4)) < 0) return GeogebraCommonKernelEquationSolver_solveCubicWithDoubleArray_withDoubleArray_withDouble_(self, eqn, res, GeogebraCommonKernelKernel_STANDARD_PRECISION);
  jdouble a = IOSDoubleArray_Get(eqn, 3) / IOSDoubleArray_Get(eqn, 4), b = IOSDoubleArray_Get(eqn, 2) / IOSDoubleArray_Get(eqn, 4), c = IOSDoubleArray_Get(eqn, 1) / IOSDoubleArray_Get(eqn, 4), d = IOSDoubleArray_Get(eqn, 0) / IOSDoubleArray_Get(eqn, 4);
  IOSDoubleArray *u = [IOSDoubleArray arrayWithLength:3], *v = [IOSDoubleArray arrayWithLength:3], *zarr = [IOSDoubleArray arrayWithLength:4];
  jdouble aa, pp, qq, rr, rc, sc, tc, mt;
  jdouble w1r, w1i, w2r, w2i, w3r;
  jdouble v1, v2, arg, theta;
  jdouble disc, h;
  jint k1 = 0, k2 = 0;
  jint roots = 0;
  if (0 == b && 0 == c) {
    if (0 == d) {
      if (a > 0) {
        *IOSDoubleArray_GetRef(nil_chk(res), roots++) = -a;
        *IOSDoubleArray_GetRef(res, roots++) = 0.0;
        *IOSDoubleArray_GetRef(res, roots++) = 0.0;
        *IOSDoubleArray_GetRef(res, roots++) = 0.0;
      }
      else {
        *IOSDoubleArray_GetRef(nil_chk(res), roots++) = 0.0;
        *IOSDoubleArray_GetRef(res, roots++) = 0.0;
        *IOSDoubleArray_GetRef(res, roots++) = 0.0;
        *IOSDoubleArray_GetRef(res, roots++) = -a;
      }
      return 4;
    }
    else if (0 == a) {
      if (d > 0) {
        return 0;
      }
      *IOSDoubleArray_GetRef(nil_chk(res), roots++) = JavaLangMath_sqrtWithDouble_(JavaLangMath_sqrtWithDouble_(-d));
      *IOSDoubleArray_GetRef(res, roots) = -IOSDoubleArray_Get(res, roots - 1);
      roots++;
      return 2;
    }
  }
  if (0.0 == c && 0.0 == d) {
    *IOSDoubleArray_GetRef(nil_chk(res), roots++) = 0.0;
    *IOSDoubleArray_GetRef(res, roots++) = 0.0;
    IOSDoubleArray *res2 = [IOSDoubleArray arrayWithLength:3];
    *IOSDoubleArray_GetRef(res2, 2) = 1.0;
    *IOSDoubleArray_GetRef(res2, 1) = a;
    *IOSDoubleArray_GetRef(res2, 0) = b;
    jint n = GeogebraCommonKernelEquationSolver_solveQuadraticWithDoubleArray_withDoubleArray_withDouble_(self, res2, res2, eps);
    *IOSDoubleArray_GetRef(res, roots++) = IOSDoubleArray_Get(res2, 0);
    *IOSDoubleArray_GetRef(res, roots++) = IOSDoubleArray_Get(res2, 1);
    if (n == 0) {
      mt = 3;
    }
    else {
      mt = 1;
    }
  }
  else {
    aa = a * a;
    pp = b - (3.0 / 8.0) * aa;
    qq = c - (1.0 / 2.0) * a * (b - (1.0 / 4.0) * aa);
    rr = d - (1.0 / 4.0) * (a * c - (1.0 / 4.0) * aa * (b - (3.0 / 16.0) * aa));
    rc = (1.0 / 2.0) * pp;
    sc = (1.0 / 4.0) * ((1.0 / 4.0) * pp * pp - rr);
    tc = -((1.0 / 8.0) * qq * (1.0 / 8.0) * qq);
    {
      jdouble qcub = (rc * rc - 3 * sc);
      jdouble rcub = (2 * rc * rc * rc - 9 * rc * sc + 27 * tc);
      jdouble Q = qcub / 9;
      jdouble R = rcub / 54;
      jdouble Q3 = Q * Q * Q;
      jdouble R2 = R * R;
      jdouble CR2 = 729 * rcub * rcub;
      jdouble CQ3 = 2916 * qcub * qcub * qcub;
      disc = (CR2 - CQ3) / 2125764.0;
      if (0 == R && 0 == Q) {
        *IOSDoubleArray_GetRef(u, 0) = -rc / 3;
        *IOSDoubleArray_GetRef(u, 1) = -rc / 3;
        *IOSDoubleArray_GetRef(u, 2) = -rc / 3;
      }
      else if (CR2 == CQ3) {
        jdouble sqrtQ = JavaLangMath_sqrtWithDouble_(Q);
        if (R > 0) {
          *IOSDoubleArray_GetRef(u, 0) = -2 * sqrtQ - rc / 3;
          *IOSDoubleArray_GetRef(u, 1) = sqrtQ - rc / 3;
          *IOSDoubleArray_GetRef(u, 2) = sqrtQ - rc / 3;
        }
        else {
          *IOSDoubleArray_GetRef(u, 0) = -sqrtQ - rc / 3;
          *IOSDoubleArray_GetRef(u, 1) = -sqrtQ - rc / 3;
          *IOSDoubleArray_GetRef(u, 2) = 2 * sqrtQ - rc / 3;
        }
      }
      else if (CR2 < CQ3) {
        jdouble sqrtQ = JavaLangMath_sqrtWithDouble_(Q);
        jdouble sqrtQ3 = sqrtQ * sqrtQ * sqrtQ;
        theta = JavaLangMath_acosWithDouble_(R / sqrtQ3);
        if (R / sqrtQ3 >= 1.0) theta = 0.0;
        {
          jdouble norm = -2 * sqrtQ;
          *IOSDoubleArray_GetRef(u, 0) = norm * JavaLangMath_cosWithDouble_(theta / 3) - rc / 3;
          *IOSDoubleArray_GetRef(u, 1) = norm * JavaLangMath_cosWithDouble_((theta + 2.0 * JavaLangMath_PI) / 3) - rc / 3;
          *IOSDoubleArray_GetRef(u, 2) = norm * JavaLangMath_cosWithDouble_((theta - 2.0 * JavaLangMath_PI) / 3) - rc / 3;
        }
      }
      else {
        jdouble sgnR = (R >= 0 ? 1 : -1);
        jdouble modR = JavaLangMath_absWithDouble_(R);
        jdouble sqrt_disc = JavaLangMath_sqrtWithDouble_(R2 - Q3);
        jdouble A = -sgnR * JavaLangMath_powWithDouble_withDouble_(modR + sqrt_disc, 1.0 / 3.0);
        jdouble B = Q / A;
        jdouble mod_diffAB = JavaLangMath_absWithDouble_(A - B);
        *IOSDoubleArray_GetRef(u, 0) = A + B - rc / 3;
        *IOSDoubleArray_GetRef(u, 1) = -0.5 * (A + B) - rc / 3;
        *IOSDoubleArray_GetRef(u, 2) = -(JavaLangMath_sqrtWithDouble_(3.0) / 2.0) * mod_diffAB;
      }
    }
    if (0.0 == disc) *IOSDoubleArray_GetRef(u, 2) = IOSDoubleArray_Get(u, 1);
    if (0 >= disc) {
      mt = 2;
      *IOSDoubleArray_GetRef(v, 0) = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(u, 0));
      *IOSDoubleArray_GetRef(v, 1) = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(u, 1));
      *IOSDoubleArray_GetRef(v, 2) = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(u, 2));
      v1 = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(v, 0), IOSDoubleArray_Get(v, 1)), IOSDoubleArray_Get(v, 2));
      k1 = 0;
      k2 = 0;
      if (v1 == IOSDoubleArray_Get(v, 0)) {
        k1 = 0;
        v2 = JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(v, 1), IOSDoubleArray_Get(v, 2));
      }
      else if (v1 == IOSDoubleArray_Get(v, 1)) {
        k1 = 1;
        v2 = JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(v, 0), IOSDoubleArray_Get(v, 2));
      }
      else {
        k1 = 2;
        v2 = JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(v, 0), IOSDoubleArray_Get(v, 1));
      }
      if (v2 == IOSDoubleArray_Get(v, 0)) {
        k2 = 0;
      }
      else if (v2 == IOSDoubleArray_Get(v, 1)) {
        k2 = 1;
      }
      else {
        k2 = 2;
      }
      if (0.0 <= IOSDoubleArray_Get(u, k1)) {
        w1r = JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(u, k1));
        w1i = 0.0;
      }
      else {
        w1r = 0.0;
        w1i = JavaLangMath_sqrtWithDouble_(-IOSDoubleArray_Get(u, k1));
      }
      if (0.0 <= IOSDoubleArray_Get(u, k2)) {
        w2r = JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(u, k2));
        w2i = 0.0;
      }
      else {
        w2r = 0.0;
        w2i = JavaLangMath_sqrtWithDouble_(-IOSDoubleArray_Get(u, k2));
      }
    }
    else {
      mt = 3;
      if (0.0 == IOSDoubleArray_Get(u, 1) && 0.0 == IOSDoubleArray_Get(u, 2)) {
        arg = 0.0;
      }
      else {
        arg = JavaLangMath_sqrtWithDouble_(JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(u, 1) * IOSDoubleArray_Get(u, 1) + IOSDoubleArray_Get(u, 2) * IOSDoubleArray_Get(u, 2)));
      }
      theta = JavaLangMath_atan2WithDouble_withDouble_(IOSDoubleArray_Get(u, 2), IOSDoubleArray_Get(u, 1));
      w1r = arg * JavaLangMath_cosWithDouble_(theta / 2.0);
      w1i = arg * JavaLangMath_sinWithDouble_(theta / 2.0);
      w2r = w1r;
      w2i = -w1i;
    }
    w3r = qq / 8.0 * (w1i * w2i - w1r * w2r) / (w1i * w1i + w1r * w1r) / (w2i * w2i + w2r * w2r);
    h = a / 4.0;
    *IOSDoubleArray_GetRef(zarr, 0) = w1r + w2r + w3r - h;
    *IOSDoubleArray_GetRef(zarr, 1) = -w1r - w2r + w3r - h;
    *IOSDoubleArray_GetRef(zarr, 2) = -w1r + w2r - w3r - h;
    *IOSDoubleArray_GetRef(zarr, 3) = w1r - w2r - w3r - h;
    if (2 == mt) {
      if (IOSDoubleArray_Get(u, k1) >= 0 && IOSDoubleArray_Get(u, k2) >= 0) {
        mt = 1;
        *IOSDoubleArray_GetRef(nil_chk(res), roots++) = IOSDoubleArray_Get(zarr, 0);
        *IOSDoubleArray_GetRef(res, roots++) = IOSDoubleArray_Get(zarr, 1);
        *IOSDoubleArray_GetRef(res, roots++) = IOSDoubleArray_Get(zarr, 2);
        *IOSDoubleArray_GetRef(res, roots++) = IOSDoubleArray_Get(zarr, 3);
      }
      else {
        return 0;
      }
    }
    else {
      *IOSDoubleArray_GetRef(nil_chk(res), roots++) = IOSDoubleArray_Get(zarr, 0);
      *IOSDoubleArray_GetRef(res, roots++) = IOSDoubleArray_Get(zarr, 1);
    }
  }
  if (1 == mt) {
    return 4;
  }
  return 2;
}

+ (id<JavaUtilComparator>)getComparatorReal {
  return GeogebraCommonKernelEquationSolver_getComparatorReal();
}

- (void)dealloc {
  RELEASE_(laguerreSolver_);
  RELEASE_(rootFinderBrent_);
  RELEASE_(rootFinderNewton_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "EquationSolver", NULL, 0x1, NULL, NULL },
    { "polynomialRootsWithDoubleArray:withBoolean:", "polynomialRoots", "I", 0x11, NULL, NULL },
    { "polynomialComplexRootsWithDoubleArray:withDoubleArray:", "polynomialComplexRoots", "I", 0x11, NULL, NULL },
    { "solveQuadraticWithDoubleArray:", "solveQuadratic", "I", 0x11, NULL, NULL },
    { "solveQuadraticWithDoubleArray:withDoubleArray:withDouble:", "solveQuadratic", "I", 0x11, NULL, NULL },
    { "solveQuadraticComplexWithDoubleArray:withDoubleArray:", "solveQuadraticComplex", "I", 0x19, NULL, NULL },
    { "solveCubicWithDoubleArray:", "solveCubic", "I", 0x11, NULL, NULL },
    { "solveCubicWithDoubleArray:withDoubleArray:withDouble:", "solveCubic", "I", 0x11, NULL, NULL },
    { "fixRootsWithDoubleArray:withDoubleArray:", "fixRoots", "V", 0xa, NULL, NULL },
    { "solveEqnWithDoubleArray:withInt:withDouble:", "solveEqn", "D", 0xa, NULL, NULL },
    { "findZeroWithDouble:withDouble:withDoubleArray:", "findZero", "D", 0xa, NULL, NULL },
    { "getTagWithDouble:withDouble:withDouble:", "getTag", "I", 0xa, NULL, NULL },
    { "laguerreAllWithDoubleArray:", "laguerreAll", "I", 0x2, NULL, NULL },
    { "laguerreAllComplexWithDoubleArray:withDoubleArray:", "laguerreAllComplex", "I", 0x2, NULL, NULL },
    { "solveQuarticWithDoubleArray:withDoubleArray:withDouble:", "solveQuartic", "I", 0x1, NULL, NULL },
    { "getComparatorReal", NULL, "Ljava.util.Comparator;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LAGUERRE_EPS_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelEquationSolver_LAGUERRE_EPS },
    { "laguerreSolver_", NULL, 0x2, "Lorg.apache.commons.math.analysis.solvers.LaguerreSolver;", NULL, NULL,  },
    { "rootFinderBrent_", NULL, 0x2, "Lorg.apache.commons.math.analysis.solvers.UnivariateRealSolver;", NULL, NULL,  },
    { "rootFinderNewton_", NULL, 0x2, "Lorg.apache.commons.math.analysis.solvers.UnivariateRealSolver;", NULL, NULL,  },
    { "BELOW_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelEquationSolver_BELOW },
    { "LOWEDGE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelEquationSolver_LOWEDGE },
    { "INSIDE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelEquationSolver_INSIDE },
    { "HIGHEDGE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelEquationSolver_HIGHEDGE },
    { "ABOVE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelEquationSolver_ABOVE },
    { "LAGUERRE_START_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelEquationSolver_LAGUERRE_START },
    { "comparatorReal_", NULL, 0xa, "Ljava.util.Comparator;", &GeogebraCommonKernelEquationSolver_comparatorReal_, "Ljava/util/Comparator<Lorg/apache/commons/math/complex/Complex;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelEquationSolver = { 2, "EquationSolver", "geogebra.common.kernel", NULL, 0x1, 16, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelEquationSolver;
}

@end

void GeogebraCommonKernelEquationSolver_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelEquationSolver *self, GeogebraCommonKernelKernel *kernel) {
  NSObject_init(self);
}

GeogebraCommonKernelEquationSolver *new_GeogebraCommonKernelEquationSolver_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelEquationSolver *self = [GeogebraCommonKernelEquationSolver alloc];
  GeogebraCommonKernelEquationSolver_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

jint GeogebraCommonKernelEquationSolver_solveQuadraticWithDoubleArray_withDoubleArray_withDouble_(GeogebraCommonKernelEquationSolver *self, IOSDoubleArray *eqn, IOSDoubleArray *res, jdouble eps) {
  jdouble a = IOSDoubleArray_Get(nil_chk(eqn), 2);
  jdouble b = IOSDoubleArray_Get(eqn, 1);
  jdouble c = IOSDoubleArray_Get(eqn, 0);
  jint roots = 0;
  if (JavaLangMath_absWithDouble_(a) < eps) {
    if (JavaLangMath_absWithDouble_(b) < eps) return -1;
    *IOSDoubleArray_GetRef(nil_chk(res), roots++) = -c / b;
  }
  else if (JavaLangMath_absWithDouble_(b) < eps * a) {
    jdouble x2 = -c / a;
    if (GeogebraCommonKernelKernel_isZeroWithDouble_withDouble_(x2, eps)) {
      *IOSDoubleArray_GetRef(nil_chk(res), roots++) = 0;
    }
    else if (x2 < 0) {
      return 0;
    }
    else {
      *IOSDoubleArray_GetRef(nil_chk(res), roots++) = JavaLangMath_sqrtWithDouble_(x2);
      *IOSDoubleArray_GetRef(res, roots++) = -JavaLangMath_sqrtWithDouble_(x2);
    }
  }
  else {
    jdouble d = b * b - 4.0 * a * c;
    if (JavaLangMath_absWithDouble_(d) < eps * b * b) {
      *IOSDoubleArray_GetRef(nil_chk(res), roots++) = -b / (2.0 * a);
    }
    else {
      if (d < 0.0) return 0;
      d = JavaLangMath_sqrtWithDouble_(d);
      if (b < 0.0) {
        d = -d;
      }
      jdouble q = (b + d) / -2.0;
      *IOSDoubleArray_GetRef(nil_chk(res), roots++) = q / a;
      *IOSDoubleArray_GetRef(res, roots++) = c / q;
    }
  }
  return roots;
}

jint GeogebraCommonKernelEquationSolver_solveQuadraticComplexWithDoubleArray_withDoubleArray_(IOSDoubleArray *real, IOSDoubleArray *complex) {
  GeogebraCommonKernelEquationSolver_initialize();
  jdouble a = IOSDoubleArray_Get(nil_chk(real), 2);
  jdouble b = IOSDoubleArray_Get(real, 1);
  jdouble c = IOSDoubleArray_Get(real, 0);
  jint roots = 0;
  if (JavaLangMath_absWithDouble_(a) < GeogebraCommonKernelKernel_STANDARD_PRECISION) {
    if (JavaLangMath_absWithDouble_(b) < GeogebraCommonKernelKernel_STANDARD_PRECISION) return -1;
    *IOSDoubleArray_GetRef(nil_chk(complex), roots) = 0;
    *IOSDoubleArray_GetRef(real, roots++) = -c / b;
  }
  else {
    jdouble d = b * b - 4.0 * a * c;
    if (JavaLangMath_absWithDouble_(d) < GeogebraCommonKernelKernel_STANDARD_PRECISION) {
      *IOSDoubleArray_GetRef(nil_chk(complex), roots) = 0;
      *IOSDoubleArray_GetRef(real, roots++) = -b / (2.0 * a);
    }
    else {
      if (d < 0.0) {
        d = JavaLangMath_sqrtWithDouble_(-d);
        *IOSDoubleArray_GetRef(nil_chk(complex), 0) = d / (2.0 * a);
        *IOSDoubleArray_GetRef(real, 0) = -b / (2.0 * a);
        *IOSDoubleArray_GetRef(complex, 1) = -IOSDoubleArray_Get(complex, 0);
        *IOSDoubleArray_GetRef(real, 1) = IOSDoubleArray_Get(real, 0);
        roots = 2;
      }
      else {
        d = JavaLangMath_sqrtWithDouble_(d);
        if (b < 0.0) {
          d = -d;
        }
        jdouble q = (b + d) / -2.0;
        *IOSDoubleArray_GetRef(nil_chk(complex), roots) = 0;
        *IOSDoubleArray_GetRef(real, roots++) = q / a;
        *IOSDoubleArray_GetRef(complex, roots) = 0;
        *IOSDoubleArray_GetRef(real, roots++) = c / q;
      }
    }
  }
  return roots;
}

jint GeogebraCommonKernelEquationSolver_solveCubicWithDoubleArray_withDoubleArray_withDouble_(GeogebraCommonKernelEquationSolver *self, IOSDoubleArray *eqn, IOSDoubleArray *res, jdouble eps) {
  jint roots = 0;
  jdouble d = IOSDoubleArray_Get(nil_chk(eqn), 3);
  if (JavaLangMath_absWithDouble_(d) < eps) {
    return GeogebraCommonKernelEquationSolver_solveQuadraticWithDoubleArray_withDoubleArray_withDouble_(self, eqn, res, eps);
  }
  jdouble a = IOSDoubleArray_Get(eqn, 2) / d;
  jdouble b = IOSDoubleArray_Get(eqn, 1) / d;
  jdouble c = IOSDoubleArray_Get(eqn, 0) / d;
  jdouble q = (a * a - 3 * b);
  jdouble r = (2 * a * a * a - 9 * a * b + 27 * c);
  jdouble Q = q / 9;
  jdouble R = r / 54;
  jdouble Q3 = Q * Q * Q;
  jdouble R2 = R * R;
  jdouble CR2 = 729 * r * r;
  jdouble CQ3 = 2916 * q * q * q;
  if (JavaLangMath_absWithDouble_(R) < GeogebraCommonKernelKernel_STANDARD_PRECISION && JavaLangMath_absWithDouble_(Q) < GeogebraCommonKernelKernel_STANDARD_PRECISION) {
    *IOSDoubleArray_GetRef(nil_chk(res), roots++) = -a / 3;
    *IOSDoubleArray_GetRef(res, roots++) = -a / 3;
    *IOSDoubleArray_GetRef(res, roots++) = -a / 3;
    return 3;
  }
  else if (JavaLangMath_absWithDouble_(CR2 - CQ3) < JavaLangMath_maxWithDouble_withDouble_(CR2, CQ3) * 10 / JavaLangMath_maxWithDouble_withDouble_(1, JavaLangMath_absWithDouble_(2 * a + 3)) * GeogebraCommonKernelKernel_STANDARD_PRECISION) {
    jdouble sqrtQ = JavaLangMath_sqrtWithDouble_(Q);
    if (R > 0) {
      *IOSDoubleArray_GetRef(nil_chk(res), roots++) = -2 * sqrtQ - a / 3;
      *IOSDoubleArray_GetRef(res, roots++) = sqrtQ - a / 3;
      *IOSDoubleArray_GetRef(res, roots++) = sqrtQ - a / 3;
    }
    else {
      *IOSDoubleArray_GetRef(nil_chk(res), roots++) = -sqrtQ - a / 3;
      *IOSDoubleArray_GetRef(res, roots++) = -sqrtQ - a / 3;
      *IOSDoubleArray_GetRef(res, roots++) = 2 * sqrtQ - a / 3;
    }
    return 3;
  }
  else if (CR2 < CQ3) {
    jdouble sqrtQ = JavaLangMath_sqrtWithDouble_(Q);
    jdouble sqrtQ3 = sqrtQ * sqrtQ * sqrtQ;
    jdouble theta = JavaLangMath_acosWithDouble_(R / sqrtQ3);
    jdouble norm = -2 * sqrtQ;
    *IOSDoubleArray_GetRef(nil_chk(res), roots++) = norm * JavaLangMath_cosWithDouble_(theta / 3) - a / 3;
    *IOSDoubleArray_GetRef(res, roots++) = norm * JavaLangMath_cosWithDouble_((theta + 2.0 * JavaLangMath_PI) / 3) - a / 3;
    *IOSDoubleArray_GetRef(res, roots++) = norm * JavaLangMath_cosWithDouble_((theta - 2.0 * JavaLangMath_PI) / 3) - a / 3;
    if (res != eqn) GeogebraCommonKernelEquationSolver_fixRootsWithDoubleArray_withDoubleArray_(res, eqn);
    return 3;
  }
  else {
    jdouble sgnR = (R >= 0 ? 1 : -1);
    jdouble A = -sgnR * JavaLangMath_powWithDouble_withDouble_(JavaLangMath_absWithDouble_(R) + JavaLangMath_sqrtWithDouble_(R2 - Q3), 1.0 / 3.0);
    jdouble B = Q / A;
    *IOSDoubleArray_GetRef(nil_chk(res), roots++) = A + B - a / 3;
    return 1;
  }
}

void GeogebraCommonKernelEquationSolver_fixRootsWithDoubleArray_withDoubleArray_(IOSDoubleArray *res, IOSDoubleArray *eqn) {
  GeogebraCommonKernelEquationSolver_initialize();
  jdouble myepsilon = 1E-5;
  for (jint i = 0; i < 3; i++) {
    jdouble t = IOSDoubleArray_Get(nil_chk(res), i);
    if (JavaLangMath_absWithDouble_(t) < myepsilon) {
      *IOSDoubleArray_GetRef(res, i) = GeogebraCommonKernelEquationSolver_findZeroWithDouble_withDouble_withDoubleArray_(t, 0, eqn);
    }
    else if (JavaLangMath_absWithDouble_(t - 1) < myepsilon) {
      *IOSDoubleArray_GetRef(res, i) = GeogebraCommonKernelEquationSolver_findZeroWithDouble_withDouble_withDoubleArray_(t, 1, eqn);
    }
  }
}

jdouble GeogebraCommonKernelEquationSolver_solveEqnWithDoubleArray_withInt_withDouble_(IOSDoubleArray *eqn, jint order, jdouble t) {
  GeogebraCommonKernelEquationSolver_initialize();
  jdouble v = IOSDoubleArray_Get(nil_chk(eqn), order);
  jint counter = order;
  while (--counter >= 0) {
    v = v * t + IOSDoubleArray_Get(eqn, counter);
  }
  return v;
}

jdouble GeogebraCommonKernelEquationSolver_findZeroWithDouble_withDouble_withDoubleArray_(jdouble init_, jdouble target, IOSDoubleArray *eqn) {
  GeogebraCommonKernelEquationSolver_initialize();
  jdouble t = init_;
  IOSDoubleArray *slopeqn = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ IOSDoubleArray_Get(nil_chk(eqn), 1), 2 * IOSDoubleArray_Get(eqn, 2), 3 * IOSDoubleArray_Get(eqn, 3) } count:3];
  jdouble slope;
  jdouble origdelta = 0;
  jdouble origt = t;
  while (YES) {
    slope = GeogebraCommonKernelEquationSolver_solveEqnWithDoubleArray_withInt_withDouble_(slopeqn, 2, t);
    if (slope == 0.0) return t;
    jdouble y = GeogebraCommonKernelEquationSolver_solveEqnWithDoubleArray_withInt_withDouble_(eqn, 3, t);
    if (y == 0.0) return t;
    jdouble delta = -(y / slope);
    if (origdelta == 0.0) {
      origdelta = delta;
    }
    if (t < target) {
      if (delta < 0) return t;
    }
    else if (t > target) {
      if (delta > 0) return t;
    }
    else return (delta > 0 ? (target + JavaLangDouble_MIN_VALUE) : (target - JavaLangDouble_MIN_VALUE));
    jdouble newt = t + delta;
    if (t == newt) return t;
    if (delta * origdelta < 0) {
      jint tag = (origt < t ? GeogebraCommonKernelEquationSolver_getTagWithDouble_withDouble_withDouble_(target, origt, t) : GeogebraCommonKernelEquationSolver_getTagWithDouble_withDouble_withDouble_(target, t, origt));
      if (tag != GeogebraCommonKernelEquationSolver_INSIDE) return (origt + t) / 2;
      t = target;
    }
    else {
      t = newt;
    }
  }
}

jint GeogebraCommonKernelEquationSolver_getTagWithDouble_withDouble_withDouble_(jdouble coord, jdouble low, jdouble high) {
  GeogebraCommonKernelEquationSolver_initialize();
  if (coord <= low) return (coord < low ? GeogebraCommonKernelEquationSolver_BELOW : GeogebraCommonKernelEquationSolver_LOWEDGE);
  if (coord >= high) return (coord > high ? GeogebraCommonKernelEquationSolver_ABOVE : GeogebraCommonKernelEquationSolver_HIGHEDGE);
  return GeogebraCommonKernelEquationSolver_INSIDE;
}

jint GeogebraCommonKernelEquationSolver_laguerreAllWithDoubleArray_(GeogebraCommonKernelEquationSolver *self, IOSDoubleArray *eqn) {
  GeogebraCommonKernelArithmeticPolyFunction *polyFunc = [new_GeogebraCommonKernelArithmeticPolyFunction_initWithDoubleArray_(eqn) autorelease];
  GeogebraCommonKernelArithmeticPolyFunction *derivFunc = [polyFunc getDerivative];
  IOSObjectArray *complexRoots = nil;
  @try {
    if (self->laguerreSolver_ == nil) {
      GeogebraCommonKernelEquationSolver_setAndConsume_laguerreSolver_(self, new_OrgApacheCommonsMathAnalysisSolversLaguerreSolver_init());
    }
    complexRoots = [((OrgApacheCommonsMathAnalysisSolversLaguerreSolver *) nil_chk(self->laguerreSolver_)) solveAllWithDoubleArray:eqn withDouble:GeogebraCommonKernelEquationSolver_LAGUERRE_START];
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"EquationSolver.LaguerreSolver: ", [((JavaLangException *) nil_chk(e)) getLocalizedMessage])];
  }
  if (complexRoots == nil) complexRoots = [IOSObjectArray arrayWithLength:0 type:OrgApacheCommonsMathComplexComplex_class_()];
  IOSDoubleArray *laguerreRoots = [IOSDoubleArray arrayWithLength:((IOSObjectArray *) nil_chk(complexRoots))->size_];
  for (jint i = 0; i < laguerreRoots->size_; i++) {
    *IOSDoubleArray_GetRef(laguerreRoots, i) = [((OrgApacheCommonsMathComplexComplex *) nil_chk(IOSObjectArray_Get(complexRoots, i))) getReal];
  }
  JavaUtilArrays_sortWithDoubleArray_(laguerreRoots);
  jint realRoots = 0;
  jdouble root;
  for (jint i = 0; i < laguerreRoots->size_; i++) {
    root = IOSDoubleArray_Get(laguerreRoots, i);
    jdouble left = i == 0 ? root - 1 : (root + IOSDoubleArray_Get(laguerreRoots, i - 1)) / 2;
    jdouble right = i == laguerreRoots->size_ - 1 ? root + 1 : (root + IOSDoubleArray_Get(laguerreRoots, i + 1)) / 2;
    jdouble f_left = [polyFunc evaluateWithDouble:left];
    jdouble f_right = [polyFunc evaluateWithDouble:right];
    jboolean bounded = f_left * f_right < 0.0;
    @try {
      if (bounded) {
        if (self->rootFinderBrent_ == nil) {
          OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverFactory *fact = OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverFactory_newInstance();
          GeogebraCommonKernelEquationSolver_set_rootFinderBrent_(self, [((OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverFactory *) nil_chk(fact)) newBrentSolver]);
        }
        jdouble brentRoot = [((id<OrgApacheCommonsMathAnalysisSolversUnivariateRealSolver>) nil_chk(self->rootFinderBrent_)) solveWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:[new_GeogebraCommonKernelRootsRealRootAdapter_initWithGeogebraCommonKernelRootsRealRootFunction_(polyFunc) autorelease] withDouble:left withDouble:right withDouble:root];
        if (JavaLangMath_absWithDouble_([polyFunc evaluateWithDouble:brentRoot]) < JavaLangMath_absWithDouble_([polyFunc evaluateWithDouble:root])) {
          root = brentRoot;
        }
      }
      else {
        if (self->rootFinderNewton_ == nil) {
          OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverFactory *fact = OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverFactory_newInstance();
          GeogebraCommonKernelEquationSolver_set_rootFinderNewton_(self, [((OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverFactory *) nil_chk(fact)) newNewtonSolver]);
        }
        jdouble newtonRoot = [((id<OrgApacheCommonsMathAnalysisSolversUnivariateRealSolver>) nil_chk(self->rootFinderNewton_)) solveWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:[new_GeogebraCommonKernelRootsRealRootDerivAdapter_initWithGeogebraCommonKernelRootsRealRootDerivFunction_(polyFunc) autorelease] withDouble:left withDouble:right withDouble:root];
        if (JavaLangMath_absWithDouble_([polyFunc evaluateWithDouble:newtonRoot]) < JavaLangMath_absWithDouble_([polyFunc evaluateWithDouble:root])) {
          root = newtonRoot;
        }
      }
    }
    @catch (JavaLangException *e) {
      @try {
        if (self->rootFinderBrent_ == nil) {
          OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverFactory *fact = OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverFactory_newInstance();
          GeogebraCommonKernelEquationSolver_set_rootFinderBrent_(self, [((OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverFactory *) nil_chk(fact)) newBrentSolver]);
        }
        jdouble brentRoot = [((id<OrgApacheCommonsMathAnalysisSolversUnivariateRealSolver>) nil_chk(self->rootFinderBrent_)) solveWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:[new_GeogebraCommonKernelRootsRealRootAdapter_initWithGeogebraCommonKernelRootsRealRootFunction_(derivFunc) autorelease] withDouble:left withDouble:right];
        if (JavaLangMath_absWithDouble_([polyFunc evaluateWithDouble:brentRoot]) < JavaLangMath_absWithDouble_([polyFunc evaluateWithDouble:root])) {
          root = brentRoot;
        }
      }
      @catch (JavaLangException *ex) {
        GeogebraCommonMainApp_debugWithNSString_([((JavaLangException *) nil_chk(ex)) getMessage]);
      }
    }
    IOSDoubleArray *val = [polyFunc evaluateDerivFuncWithDouble:root];
    jdouble error = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(val), 0));
    jdouble slope = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(val, 1));
    jboolean success;
    if (slope < 1) success = (error < GeogebraCommonKernelEquationSolver_LAGUERRE_EPS);
    else success = (error < GeogebraCommonKernelEquationSolver_LAGUERRE_EPS * slope);
    if (success) {
      *IOSDoubleArray_GetRef(nil_chk(eqn), realRoots) = root;
      realRoots++;
    }
    else {
    }
  }
  return realRoots;
}

jint GeogebraCommonKernelEquationSolver_laguerreAllComplexWithDoubleArray_withDoubleArray_(GeogebraCommonKernelEquationSolver *self, IOSDoubleArray *real, IOSDoubleArray *complex) {
  IOSObjectArray *complexRoots = nil;
  @try {
    if (self->laguerreSolver_ == nil) {
      GeogebraCommonKernelEquationSolver_setAndConsume_laguerreSolver_(self, new_OrgApacheCommonsMathAnalysisSolversLaguerreSolver_init());
    }
    complexRoots = [((OrgApacheCommonsMathAnalysisSolversLaguerreSolver *) nil_chk(self->laguerreSolver_)) solveAllWithDoubleArray:real withDouble:GeogebraCommonKernelEquationSolver_LAGUERRE_START];
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"Problem solving with LaguerreSolver", [((JavaLangException *) nil_chk(e)) getLocalizedMessage]));
    return 0;
  }
  JavaUtilTreeSet *sortedSet = [new_JavaUtilTreeSet_initWithJavaUtilComparator_(GeogebraCommonKernelEquationSolver_getComparatorReal()) autorelease];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(complexRoots))->size_; i++) {
    [sortedSet addWithId:IOSObjectArray_Get(complexRoots, i)];
  }
  jint roots = 0;
  OrgApacheCommonsMathComplexComplex *temp;
  id<JavaUtilIterator> iterator = [sortedSet iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    temp = [iterator next];
    *IOSDoubleArray_GetRef(nil_chk(real), roots) = [((OrgApacheCommonsMathComplexComplex *) nil_chk(temp)) getReal];
    *IOSDoubleArray_GetRef(nil_chk(complex), roots) = [temp getImaginary];
    roots++;
  }
  return roots;
}

id<JavaUtilComparator> GeogebraCommonKernelEquationSolver_getComparatorReal() {
  GeogebraCommonKernelEquationSolver_initialize();
  if (GeogebraCommonKernelEquationSolver_comparatorReal_ == nil) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelEquationSolver_comparatorReal_, nil, new_GeogebraCommonKernelEquationSolver_$1_init());
  }
  return GeogebraCommonKernelEquationSolver_comparatorReal_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelEquationSolver)

@implementation GeogebraCommonKernelEquationSolver_$1

- (jint)compareWithId:(OrgApacheCommonsMathComplexComplex *)itemA
               withId:(OrgApacheCommonsMathComplexComplex *)itemB {
  jdouble compReal = [((OrgApacheCommonsMathComplexComplex *) nil_chk(itemA)) getReal] - [((OrgApacheCommonsMathComplexComplex *) nil_chk(itemB)) getReal];
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(compReal)) {
    jdouble compImaginary = [itemA getImaginary] - [itemB getImaginary];
    if (!GeogebraCommonKernelKernel_isZeroWithDouble_(compImaginary)) return compImaginary < 0 ? -1 : +1;
    return 0;
  }
  return compReal < 0 ? -1 : +1;
}

- (instancetype)init {
  GeogebraCommonKernelEquationSolver_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelEquationSolver", "getComparatorReal" };
  static const J2ObjcClassInfo _GeogebraCommonKernelEquationSolver_$1 = { 2, "", "geogebra.common.kernel", "EquationSolver", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/commons/math/complex/Complex;>;" };
  return &_GeogebraCommonKernelEquationSolver_$1;
}

@end

void GeogebraCommonKernelEquationSolver_$1_init(GeogebraCommonKernelEquationSolver_$1 *self) {
  NSObject_init(self);
}

GeogebraCommonKernelEquationSolver_$1 *new_GeogebraCommonKernelEquationSolver_$1_init() {
  GeogebraCommonKernelEquationSolver_$1 *self = [GeogebraCommonKernelEquationSolver_$1 alloc];
  GeogebraCommonKernelEquationSolver_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelEquationSolver_$1)
