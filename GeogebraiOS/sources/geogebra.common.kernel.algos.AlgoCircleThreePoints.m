//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoCircleThreePoints.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/algos/SymbolicParametersBotanaAlgo.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "geogebra/common/kernel/prover/polynomial/Variable.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/util/MyMath.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelAlgosAlgoCircleThreePoints () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> A_, B_, C_;
  IOSObjectArray *botanaVars_;
  IOSObjectArray *botanaPolynomials_;
  GeogebraCommonKernelGeosGeoLine *s0_, *s1_;
  GeogebraCommonKernelGeosGeoPoint *center_;
  IOSDoubleArray *det_;
  jdouble ax_, ay_, bx_, by_, cx_, cy_, ABx_, ABy_, ACx_, ACy_, BCx_, BCy_, maxDet_;
  jint casenr_;
}

- (void)setIncidence;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCircleThreePoints, A_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCircleThreePoints, B_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCircleThreePoints, C_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCircleThreePoints, botanaVars_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCircleThreePoints, botanaPolynomials_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCircleThreePoints, s0_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCircleThreePoints, s1_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCircleThreePoints, center_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCircleThreePoints, det_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoCircleThreePoints_setIncidence(GeogebraCommonKernelAlgosAlgoCircleThreePoints *self);

@implementation GeogebraCommonKernelAlgosAlgoCircleThreePoints

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, A, B, C);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, A, B, C);
  return self;
}

- (void)setIncidence {
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_setIncidence(self);
}

- (void)setPointsWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_set_A_(self, A);
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_set_B_(self, B);
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_set_C_(self, C);
}

- (void)createCircle {
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_setAndConsume_circle_(self, new_GeogebraCommonKernelGeosGeoConic_initWithGeogebraCommonKernelConstruction_(cons_));
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Circle();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS;
}

- (void)setInputOutput {
  [self setInput];
  [self setOutput];
  [self setDependencies];
}

- (void)setInput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) toGeoElement]);
  IOSObjectArray_Set(input_, 1, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B_)) toGeoElement]);
  IOSObjectArray_Set(input_, 2, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(C_)) toGeoElement]);
}

- (void)setOutput {
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:circle_];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)getCircle {
  return circle_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getA {
  return (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A_, [GeogebraCommonKernelGeosGeoPoint class]);
}

- (GeogebraCommonKernelGeosGeoPoint *)getB {
  return (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B_, [GeogebraCommonKernelGeosGeoPoint class]);
}

- (GeogebraCommonKernelGeosGeoPoint *)getC {
  return (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(C_, [GeogebraCommonKernelGeosGeoPoint class]);
}

- (void)compute {
  if (![((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getA])) isFinite] || ![((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getB])) isFinite] || ![((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getC])) isFinite]) {
    [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle_)) setUndefined];
    return;
  }
  ax_ = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getA]))->inhomX_;
  ay_ = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getA]))->inhomY_;
  bx_ = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getB]))->inhomX_;
  by_ = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getB]))->inhomY_;
  cx_ = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getC]))->inhomX_;
  cy_ = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getC]))->inhomY_;
  if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(ax_, bx_) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(ay_, by_)) {
    if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(ax_, cx_) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(ay_, cy_)) {
      [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle_)) setCircleWithGeogebraCommonKernelGeosGeoPoint:[self getA] withDouble:0.0];
      return;
    }
    ACx_ = cx_ - ax_;
    ACy_ = cy_ - ay_;
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(center_)) setCoordsWithDouble:-ACy_ withDouble:ACx_ withDouble:0.0];
    [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle_)) setCircleWithGeogebraCommonKernelGeosGeoPoint:center_ withGeogebraCommonKernelGeosGeoPoint:[self getA]];
    return;
  }
  else if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(ax_, cx_) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(ay_, cy_)) {
    ABx_ = bx_ - ax_;
    ABy_ = by_ - ay_;
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(center_)) setCoordsWithDouble:-ABy_ withDouble:ABx_ withDouble:0.0];
    [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle_)) setCircleWithGeogebraCommonKernelGeosGeoPoint:center_ withGeogebraCommonKernelGeosGeoPoint:[self getA]];
    return;
  }
  else if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(bx_, cx_) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(by_, cy_)) {
    ACx_ = cx_ - ax_;
    ACy_ = cy_ - ay_;
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(center_)) setCoordsWithDouble:-ACy_ withDouble:ACx_ withDouble:0.0];
    [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle_)) setCircleWithGeogebraCommonKernelGeosGeoPoint:center_ withGeogebraCommonKernelGeosGeoPoint:[self getA]];
    return;
  }
  ABx_ = bx_ - ax_;
  ABy_ = by_ - ay_;
  ACx_ = cx_ - ax_;
  ACy_ = cy_ - ay_;
  BCx_ = cx_ - bx_;
  BCy_ = cy_ - by_;
  jdouble lengthAB = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(ABx_, ABy_);
  jdouble lengthAC = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(ACx_, ACy_);
  jdouble lengthBC = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(BCx_, BCy_);
  *IOSDoubleArray_GetRef(nil_chk(det_), 0) = JavaLangMath_absWithDouble_(ABx_ * ACy_ - ABy_ * ACx_) / (lengthAB * lengthAC);
  *IOSDoubleArray_GetRef(det_, 1) = JavaLangMath_absWithDouble_(ACx_ * BCy_ - ACy_ * BCx_) / (lengthAC * lengthBC);
  *IOSDoubleArray_GetRef(det_, 2) = JavaLangMath_absWithDouble_(ABx_ * BCy_ - ABy_ * BCx_) / (lengthAB * lengthBC);
  maxDet_ = IOSDoubleArray_Get(det_, 0);
  casenr_ = 0;
  if (IOSDoubleArray_Get(det_, 1) > maxDet_) {
    casenr_ = 1;
    maxDet_ = IOSDoubleArray_Get(det_, 1);
  }
  if (IOSDoubleArray_Get(det_, 2) > maxDet_) {
    casenr_ = 2;
    maxDet_ = IOSDoubleArray_Get(det_, 2);
  }
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(maxDet_)) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(center_)) setCoordsWithDouble:-ABy_ withDouble:ABx_ withDouble:0.0];
    [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle_)) setCircleWithGeogebraCommonKernelGeosGeoPoint:center_ withGeogebraCommonKernelGeosGeoPoint:[self getA]];
  }
  else {
    switch (casenr_) {
      case 0:
      ((GeogebraCommonKernelGeosGeoLine *) nil_chk(s0_))->x_ = ABx_;
      s0_->y_ = ABy_;
      s0_->z_ = -((ax_ + bx_) * s0_->x_ + (ay_ + by_) * s0_->y_) / 2.0;
      ((GeogebraCommonKernelGeosGeoLine *) nil_chk(s1_))->x_ = ACx_;
      s1_->y_ = ACy_;
      s1_->z_ = -((ax_ + cx_) * s1_->x_ + (ay_ + cy_) * s1_->y_) / 2.0;
      break;
      case 1:
      ((GeogebraCommonKernelGeosGeoLine *) nil_chk(s1_))->x_ = ACx_;
      s1_->y_ = ACy_;
      s1_->z_ = -((ax_ + cx_) * s1_->x_ + (ay_ + cy_) * s1_->y_) / 2.0;
      ((GeogebraCommonKernelGeosGeoLine *) nil_chk(s0_))->x_ = BCx_;
      s0_->y_ = BCy_;
      s0_->z_ = -((bx_ + cx_) * s0_->x_ + (by_ + cy_) * s0_->y_) / 2.0;
      break;
      case 2:
      ((GeogebraCommonKernelGeosGeoLine *) nil_chk(s0_))->x_ = ABx_;
      s0_->y_ = ABy_;
      s0_->z_ = -((ax_ + bx_) * s0_->x_ + (ay_ + by_) * s0_->y_) / 2.0;
      ((GeogebraCommonKernelGeosGeoLine *) nil_chk(s1_))->x_ = BCx_;
      s1_->y_ = BCy_;
      s1_->z_ = -((bx_ + cx_) * s1_->x_ + (by_ + cy_) * s1_->y_) / 2.0;
      break;
    }
    GeogebraCommonKernelGeosGeoVec3D_crossWithGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_(s0_, s1_, center_);
    [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(circle_)) setCircleWithGeogebraCommonKernelGeosGeoPoint:center_ withDouble:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(center_)) distanceWithGeogebraCommonKernelGeosGeoPoint:[self getA]]];
  }
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"CircleThroughABC" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(C_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (IOSObjectArray *)getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return botanaVars_;
}

- (IOSObjectArray *)getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (botanaPolynomials_ != nil) {
    return botanaPolynomials_;
  }
  IOSObjectArray *circle1vars = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelProverPolynomialVariable_class_()];
  IOSObjectArray *circle2vars = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelProverPolynomialVariable_class_()];
  IOSObjectArray *circle3vars = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelProverPolynomialVariable_class_()];
  circle1vars = [((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(IOSObjectArray_Get(nil_chk(input_), 0), @protocol(GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(input_, 0)];
  if (botanaVars_ == nil) {
    GeogebraCommonKernelAlgosAlgoCircleThreePoints_setAndConsume_botanaVars_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelProverPolynomialVariable_class_()]);
    IOSObjectArray_SetAndConsume(botanaVars_, 0, new_GeogebraCommonKernelProverPolynomialVariable_init());
    IOSObjectArray_SetAndConsume(botanaVars_, 1, new_GeogebraCommonKernelProverPolynomialVariable_init());
    IOSObjectArray_Set(botanaVars_, 2, IOSObjectArray_Get(nil_chk(circle1vars), 0));
    IOSObjectArray_Set(botanaVars_, 3, IOSObjectArray_Get(circle1vars, 1));
  }
  IOSObjectArray *centerVars = [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk(botanaVars_), 0), IOSObjectArray_Get(botanaVars_, 1) } count:2 type:GeogebraCommonKernelProverPolynomialVariable_class_()];
  circle2vars = [((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(IOSObjectArray_Get(input_, 1), @protocol(GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(input_, 1)];
  circle3vars = [((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(IOSObjectArray_Get(input_, 2), @protocol(GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(input_, 2)];
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_setAndConsume_botanaPolynomials_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelProverPolynomialPolynomial_class_()]);
  IOSObjectArray_Set(botanaPolynomials_, 0, GeogebraCommonKernelProverPolynomialPolynomial_equidistantWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(circle1vars), 0), IOSObjectArray_Get(circle1vars, 1), IOSObjectArray_Get(centerVars, 0), IOSObjectArray_Get(centerVars, 1), IOSObjectArray_Get(nil_chk(circle2vars), 0), IOSObjectArray_Get(circle2vars, 1)));
  IOSObjectArray_Set(botanaPolynomials_, 1, GeogebraCommonKernelProverPolynomialPolynomial_equidistantWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(circle1vars, 0), IOSObjectArray_Get(circle1vars, 1), IOSObjectArray_Get(centerVars, 0), IOSObjectArray_Get(centerVars, 1), IOSObjectArray_Get(nil_chk(circle3vars), 0), IOSObjectArray_Get(circle3vars, 1)));
  return botanaPolynomials_;
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnCircleThreePointsWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(B_);
  RELEASE_(C_);
  RELEASE_(circle_);
  RELEASE_(botanaVars_);
  RELEASE_(botanaPolynomials_);
  RELEASE_(s0_);
  RELEASE_(s1_);
  RELEASE_(center_);
  RELEASE_(det_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoCircleThreePoints", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoCircleThreePoints", NULL, 0x1, NULL, NULL },
    { "setIncidence", NULL, "V", 0x2, NULL, NULL },
    { "setPointsWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "setPoints", "V", 0x4, NULL, NULL },
    { "createCircle", NULL, "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "setInput", NULL, "V", 0x4, NULL, NULL },
    { "setOutput", NULL, "V", 0x4, NULL, NULL },
    { "getCircle", NULL, "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "getA", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getB", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getC", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lgeogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "B_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "C_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "circle_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "botanaVars_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Variable;", NULL, NULL,  },
    { "botanaPolynomials_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
    { "s0_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "s1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "center_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "det_", NULL, 0x2, "[D", NULL, NULL,  },
    { "ax_", NULL, 0x82, "D", NULL, NULL,  },
    { "ay_", NULL, 0x82, "D", NULL, NULL,  },
    { "bx_", NULL, 0x82, "D", NULL, NULL,  },
    { "by_", NULL, 0x82, "D", NULL, NULL,  },
    { "cx_", NULL, 0x82, "D", NULL, NULL,  },
    { "cy_", NULL, 0x82, "D", NULL, NULL,  },
    { "ABx_", NULL, 0x82, "D", NULL, NULL,  },
    { "ABy_", NULL, 0x82, "D", NULL, NULL,  },
    { "ACx_", NULL, 0x82, "D", NULL, NULL,  },
    { "ACy_", NULL, 0x82, "D", NULL, NULL,  },
    { "BCx_", NULL, 0x82, "D", NULL, NULL,  },
    { "BCy_", NULL, 0x82, "D", NULL, NULL,  },
    { "maxDet_", NULL, 0x82, "D", NULL, NULL,  },
    { "casenr_", NULL, 0x82, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoCircleThreePoints = { 2, "AlgoCircleThreePoints", "geogebra.common.kernel.algos", NULL, 0x1, 20, methods, 24, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoCircleThreePoints;
}

@end

void GeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoCircleThreePoints *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C) {
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, A, B, C);
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->circle_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoCircleThreePoints *new_GeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C) {
  GeogebraCommonKernelAlgosAlgoCircleThreePoints *self = [GeogebraCommonKernelAlgosAlgoCircleThreePoints alloc];
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, A, B, C);
  return self;
}

void GeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoCircleThreePoints *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_setAndConsume_det_(self, [IOSDoubleArray newArrayWithLength:3]);
  [self setPointsWithGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelKernelNDGeoPointND:B withGeogebraCommonKernelKernelNDGeoPointND:C];
  [self createCircle];
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->circle_)) addPointOnConicWithGeogebraCommonKernelKernelNDGeoPointND:[self getA]];
  [self->circle_ addPointOnConicWithGeogebraCommonKernelKernelNDGeoPointND:[self getB]];
  [self->circle_ addPointOnConicWithGeogebraCommonKernelKernelNDGeoPointND:[self getC]];
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_setAndConsume_s0_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_setAndConsume_s1_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_setAndConsume_center_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self compute];
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_setIncidence(self);
}

GeogebraCommonKernelAlgosAlgoCircleThreePoints *new_GeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C) {
  GeogebraCommonKernelAlgosAlgoCircleThreePoints *self = [GeogebraCommonKernelAlgosAlgoCircleThreePoints alloc];
  GeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, A, B, C);
  return self;
}

void GeogebraCommonKernelAlgosAlgoCircleThreePoints_setIncidence(GeogebraCommonKernelAlgosAlgoCircleThreePoints *self) {
  if ([self->A_ isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->A_, [GeogebraCommonKernelGeosGeoPoint class])))) addIncidenceWithGeogebraCommonKernelGeosGeoElement:self->circle_ withBoolean:NO];
  if ([self->B_ isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->B_, [GeogebraCommonKernelGeosGeoPoint class])))) addIncidenceWithGeogebraCommonKernelGeosGeoElement:self->circle_ withBoolean:NO];
  if ([self->C_ isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->C_, [GeogebraCommonKernelGeosGeoPoint class])))) addIncidenceWithGeogebraCommonKernelGeosGeoElement:self->circle_ withBoolean:NO];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoCircleThreePoints)
