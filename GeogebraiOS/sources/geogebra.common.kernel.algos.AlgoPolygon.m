//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoPolygon.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPolygon.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelAlgosAlgoPolygon () {
 @public
  IOSDoubleArray *tmp3_;
}

- (void)updatePointArrayWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)pointList;

- (void)setOutput;

+ (jdouble)pointsClosedXWithInt:(jint)i
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points2;

+ (jdouble)pointsClosedYWithInt:(jint)i
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points2;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolygon, tmp3_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolygon_updatePointArrayWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoPolygon *self, GeogebraCommonKernelGeosGeoList *pointList);

__attribute__((unused)) static jdouble GeogebraCommonKernelAlgosAlgoPolygon_pointsClosedXWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_(jint i, IOSObjectArray *points2);

__attribute__((unused)) static jdouble GeogebraCommonKernelAlgosAlgoPolygon_pointsClosedYWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_(jint i, IOSObjectArray *points2);

@implementation GeogebraCommonKernelAlgosAlgoPolygon

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, geoList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, cons, labels, points);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, points, geoList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList
                  withGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)cs2D
                                             withBoolean:(jboolean)createSegments
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)polyhedron
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelMatrixCoordSys_withBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, points, geoList, cs2D, createSegments, polyhedron, direction);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList
                  withGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)cs2D
                                             withBoolean:(jboolean)createSegments
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)polyhedron
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelMatrixCoordSys_withBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, labels, points, geoList, cs2D, createSegments, polyhedron, direction);
  return self;
}

- (void)createPolygonWithBoolean:(jboolean)createSegments {
  GeogebraCommonKernelAlgosAlgoPolygon_setAndConsume_poly_(self, new_GeogebraCommonKernelGeosGeoPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self->cons_, self->points_));
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Polygon();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_POLYGON;
}

- (void)updatePointArrayWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)pointList {
  GeogebraCommonKernelAlgosAlgoPolygon_updatePointArrayWithGeogebraCommonKernelGeosGeoList_(self, pointList);
}

- (IOSObjectArray *)createEfficientInput {
  IOSObjectArray *efficientInput;
  if (geoList_ != nil) {
    efficientInput = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray_Set(efficientInput, 0, geoList_);
  }
  else {
    efficientInput = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(points_))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()];
    for (jint i = 0; i < points_->size_; i++) IOSObjectArray_Set(efficientInput, i, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points_, i), [GeogebraCommonKernelGeosGeoElement class]));
  }
  return efficientInput;
}

- (void)modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)newPoints {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  GeogebraCommonKernelAlgosAlgoPolygon_set_points_(self, newPoints);
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) setPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:points_ withGeogebraCommonKernelMatrixCoordSys:nil withBoolean:NO];
  [self setInputOutput];
  [self compute];
}

- (void)setInputOutput {
  IOSObjectArray *efficientInput = [self createEfficientInput];
  if (polyhedron_ == nil) {
    GeogebraCommonKernelAlgosAlgoElement_set_input_(self, efficientInput);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(efficientInput))->size_ + 1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    for (jint i = 0; i < efficientInput->size_; i++) IOSObjectArray_Set(input_, i, IOSObjectArray_Get(efficientInput, i));
    IOSObjectArray_Set(input_, efficientInput->size_, polyhedron_);
  }
  [self setEfficientDependenciesWithGeogebraCommonKernelGeosGeoElementArray:input_ withGeogebraCommonKernelGeosGeoElementArray:efficientInput];
  [self setOutput];
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) addToAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:self];
}

- (void)setOutput {
  IOSObjectArray *segments = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) getSegments];
  jint size = 1;
  if (segments != nil && polyhedron_ == nil && geoList_ == nil) {
    size += segments->size_;
  }
  [super setOutputLengthWithInt:size];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:poly_];
  if (polyhedron_ == nil && geoList_ == nil) {
    for (jint i = 0; i < size - 1; i++) {
      [super setOutputWithInt:i + 1 withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(segments), i), [GeogebraCommonKernelGeosGeoElement class])];
    }
  }
}

- (void)removeOutput {
  if (polyhedron_ == nil) [super removeOutput];
}

- (void)update {
  [self compute];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk([super getOutputWithInt:0])) update];
}

- (GeogebraCommonKernelGeosGeoPolygon *)getPoly {
  return poly_;
}

- (IOSObjectArray *)getPoints {
  return points_;
}

- (GeogebraCommonKernelGeosGeoElement *)getPolyhedron {
  return polyhedron_;
}

- (void)remove {
  if (removed_) return;
  [super remove];
  if (polyhedron_ != nil) [polyhedron_ remove];
}

- (void)compute {
  if (geoList_ != nil) {
    GeogebraCommonKernelAlgosAlgoPolygon_updatePointArrayWithGeogebraCommonKernelGeosGeoList_(self, geoList_);
  }
  [self calcArea];
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) updateRegionCS];
}

+ (jdouble)calcAreaWithSignWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points2 {
  return GeogebraCommonKernelAlgosAlgoPolygon_calcAreaWithSignWithGeogebraCommonKernelKernelNDGeoPointNDArray_(points2);
}

+ (void)calcCentroidWithDoubleArray:(IOSDoubleArray *)centroid
                         withDouble:(jdouble)signedArea
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points2 {
  GeogebraCommonKernelAlgosAlgoPolygon_calcCentroidWithDoubleArray_withDouble_withGeogebraCommonKernelKernelNDGeoPointNDArray_(centroid, signedArea, points2);
}

+ (jdouble)pointsClosedXWithInt:(jint)i
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points2 {
  return GeogebraCommonKernelAlgosAlgoPolygon_pointsClosedXWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_(i, points2);
}

+ (jdouble)pointsClosedYWithInt:(jint)i
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points2 {
  return GeogebraCommonKernelAlgosAlgoPolygon_pointsClosedYWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_(i, points2);
}

- (void)createStringBuilderWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (sb_ == nil) {
    GeogebraCommonKernelAlgosAlgoPolygon_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  }
  else {
    [sb_ setLengthWithInt:0];
  }
  NSString *label;
  if (geoList_ != nil) {
    label = [geoList_ getLabelWithGeogebraCommonKernelStringTemplate:tpl];
  }
  else {
    jint last = ((IOSObjectArray *) nil_chk(points_))->size_ - 1;
    for (jint i = 0; i < last; i++) {
      [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, i))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
      [sb_ appendWithNSString:@", "];
    }
    [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, last))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
    label = [sb_ description];
    [sb_ setLengthWithInt:0];
  }
  [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"PolygonA" withNSString:label]];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [self createStringBuilderWithGeogebraCommonKernelStringTemplate:tpl];
  return [((JavaLangStringBuilder *) nil_chk(sb_)) description];
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnPolygonWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (void)calcArea {
  IOSObjectArray *points2d = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) getPoints];
  [poly_ setAreaWithDouble:GeogebraCommonKernelAlgosAlgoPolygon_calcAreaWithSignWithGeogebraCommonKernelKernelNDGeoPointNDArray_(points2d)];
}

- (void)calcCentroidWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  IOSObjectArray *points2d = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) getPoints];
  if (tmp3_ == nil) {
    GeogebraCommonKernelAlgosAlgoPolygon_setAndConsume_tmp3_(self, [IOSDoubleArray newArrayWithLength:3]);
  }
  GeogebraCommonKernelAlgosAlgoPolygon_calcCentroidWithDoubleArray_withDouble_withGeogebraCommonKernelKernelNDGeoPointNDArray_(tmp3_, [poly_ getAreaWithSign], points2d);
  if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(tmp3_), 0))) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setUndefined];
  }
  else {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setCoordsWithDouble:IOSDoubleArray_Get(tmp3_, 0) withDouble:IOSDoubleArray_Get(tmp3_, 1) withDouble:IOSDoubleArray_Get(tmp3_, 2)];
  }
}

- (void)dealloc {
  RELEASE_(points_);
  RELEASE_(geoList_);
  RELEASE_(poly_);
  RELEASE_(cs2D_);
  RELEASE_(polyhedron_);
  RELEASE_(direction_);
  RELEASE_(sb_);
  RELEASE_(tmp3_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoList:", "AlgoPolygon", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "AlgoPolygon", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoList:", "AlgoPolygon", NULL, 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelMatrixCoordSys:withBoolean:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoPolygon", NULL, 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelMatrixCoordSys:withBoolean:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoPolygon", NULL, 0x4, NULL, NULL },
    { "createPolygonWithBoolean:", "createPolygon", "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "updatePointArrayWithGeogebraCommonKernelGeosGeoList:", "updatePointArray", "V", 0x2, NULL, NULL },
    { "createEfficientInput", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:", "modifyInputPoints", "V", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "setOutput", NULL, "V", 0x2, NULL, NULL },
    { "removeOutput", NULL, "V", 0x4, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "getPoly", NULL, "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x1, NULL, NULL },
    { "getPoints", NULL, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getPolyhedron", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "calcAreaWithSignWithGeogebraCommonKernelKernelNDGeoPointNDArray:", "calcAreaWithSign", "D", 0x19, NULL, NULL },
    { "calcCentroidWithDoubleArray:withDouble:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "calcCentroid", "V", 0x9, NULL, NULL },
    { "pointsClosedXWithInt:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "pointsClosedX", "D", 0xa, NULL, NULL },
    { "pointsClosedYWithInt:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "pointsClosedY", "D", 0xa, NULL, NULL },
    { "createStringBuilderWithGeogebraCommonKernelStringTemplate:", "createStringBuilder", "V", 0x4, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
    { "calcArea", NULL, "V", 0x1, NULL, NULL },
    { "calcCentroidWithGeogebraCommonKernelGeosGeoPoint:", "calcCentroid", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "points_", NULL, 0x4, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "geoList_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "poly_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "cs2D_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.CoordSys;", NULL, NULL,  },
    { "polyhedron_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "direction_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoDirectionND;", NULL, NULL,  },
    { "sb_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "tmp3_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoPolygon = { 2, "AlgoPolygon", "geogebra.common.kernel.algos", NULL, 0x1, 30, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoPolygon;
}

@end

void GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoPolygon *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, nil, geoList);
}

GeogebraCommonKernelAlgosAlgoPolygon *new_GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoPolygon *self = [GeogebraCommonKernelAlgosAlgoPolygon alloc];
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, geoList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonKernelAlgosAlgoPolygon *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points) {
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, points, nil);
}

GeogebraCommonKernelAlgosAlgoPolygon *new_GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points) {
  GeogebraCommonKernelAlgosAlgoPolygon *self = [GeogebraCommonKernelAlgosAlgoPolygon alloc];
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, cons, labels, points);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoPolygon *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelMatrixCoordSys_withBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, labels, points, geoList, nil, YES, nil, nil);
}

GeogebraCommonKernelAlgosAlgoPolygon *new_GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoPolygon *self = [GeogebraCommonKernelAlgosAlgoPolygon alloc];
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, points, geoList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelMatrixCoordSys_withBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelAlgosAlgoPolygon *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *points, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelMatrixCoordSys *cs2D, jboolean createSegments, GeogebraCommonKernelGeosGeoElement *polyhedron, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoPolygon_set_points_(self, points);
  GeogebraCommonKernelAlgosAlgoPolygon_set_geoList_(self, geoList);
  GeogebraCommonKernelAlgosAlgoPolygon_set_cs2D_(self, cs2D);
  GeogebraCommonKernelAlgosAlgoPolygon_set_polyhedron_(self, polyhedron);
  GeogebraCommonKernelAlgosAlgoPolygon_set_direction_(self, direction);
  if (polyhedron != nil) {
    [self setUpdateAfterAlgoWithGeogebraCommonKernelAlgosAlgoElement:[polyhedron getParentAlgorithm]];
  }
  [self createPolygonWithBoolean:createSegments];
  [self compute];
  [self setInputOutput];
}

GeogebraCommonKernelAlgosAlgoPolygon *new_GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelMatrixCoordSys_withBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *points, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelMatrixCoordSys *cs2D, jboolean createSegments, GeogebraCommonKernelGeosGeoElement *polyhedron, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction) {
  GeogebraCommonKernelAlgosAlgoPolygon *self = [GeogebraCommonKernelAlgosAlgoPolygon alloc];
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelMatrixCoordSys_withBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, points, geoList, cs2D, createSegments, polyhedron, direction);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelMatrixCoordSys_withBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelAlgosAlgoPolygon *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelMatrixCoordSys *cs2D, jboolean createSegments, GeogebraCommonKernelGeosGeoElement *polyhedron, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction) {
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelMatrixCoordSys_withBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, points, geoList, cs2D, createSegments, polyhedron, direction);
  if (geoList == nil) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) initLabelsWithNSStringArray:labels];
  }
  else {
    if (labels != nil) [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) setLabelWithNSString:IOSObjectArray_Get(labels, 0)];
  }
}

GeogebraCommonKernelAlgosAlgoPolygon *new_GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelMatrixCoordSys_withBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelMatrixCoordSys *cs2D, jboolean createSegments, GeogebraCommonKernelGeosGeoElement *polyhedron, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction) {
  GeogebraCommonKernelAlgosAlgoPolygon *self = [GeogebraCommonKernelAlgosAlgoPolygon alloc];
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelMatrixCoordSys_withBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, labels, points, geoList, cs2D, createSegments, polyhedron, direction);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolygon_updatePointArrayWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoPolygon *self, GeogebraCommonKernelGeosGeoList *pointList) {
  if (![((GeogebraCommonPluginGeoClassEnum *) nil_chk([((GeogebraCommonKernelGeosGeoList *) nil_chk(pointList)) getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_POINT()]) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) setUndefined];
    return;
  }
  jint oldPointsLength = self->points_ == nil ? 0 : self->points_->size_;
  jint size = [pointList size];
  GeogebraCommonKernelAlgosAlgoPolygon_setAndConsume_points_(self, [IOSObjectArray newArrayWithLength:size type:GeogebraCommonKernelGeosGeoPoint_class_()]);
  for (jint i = 0; i < size; i++) {
    IOSObjectArray_Set(self->points_, i, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([pointList getWithInt:i], [GeogebraCommonKernelGeosGeoPoint class]));
  }
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->poly_)) setPointsAndSegmentsWithGeogebraCommonKernelKernelNDGeoPointNDArray:self->points_];
  if (oldPointsLength != self->points_->size_) [self setOutput];
}

jdouble GeogebraCommonKernelAlgosAlgoPolygon_calcAreaWithSignWithGeogebraCommonKernelKernelNDGeoPointNDArray_(IOSObjectArray *points2) {
  GeogebraCommonKernelAlgosAlgoPolygon_initialize();
  if (points2 == nil || points2->size_ < 2) return JavaLangDouble_NaN;
  jint i = 0;
  for (; i < ((IOSObjectArray *) nil_chk(points2))->size_; i++) {
    if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points2, i))) isInfinite]) {
      return JavaLangDouble_NaN;
    }
  }
  jint last = points2->size_ - 1;
  jdouble sum = 0;
  for (i = 0; i < last; i++) {
    sum += GeogebraCommonKernelGeosGeoPoint_detWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points2, i), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points2, i + 1), [GeogebraCommonKernelGeosGeoPoint class]));
  }
  sum += GeogebraCommonKernelGeosGeoPoint_detWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points2, last), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points2, 0), [GeogebraCommonKernelGeosGeoPoint class]));
  return sum / 2.0;
}

void GeogebraCommonKernelAlgosAlgoPolygon_calcCentroidWithDoubleArray_withDouble_withGeogebraCommonKernelKernelNDGeoPointNDArray_(IOSDoubleArray *centroid, jdouble signedArea, IOSObjectArray *points2) {
  GeogebraCommonKernelAlgosAlgoPolygon_initialize();
  if (JavaLangDouble_isNaNWithDouble_(signedArea) || JavaLangDouble_isInfiniteWithDouble_(signedArea)) {
    *IOSDoubleArray_GetRef(nil_chk(centroid), 0) = JavaLangDouble_NaN;
    return;
  }
  jdouble xsum = 0;
  jdouble ysum = 0;
  jdouble factor = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points2))->size_; i++) {
    factor = GeogebraCommonKernelAlgosAlgoPolygon_pointsClosedXWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_(i, points2) * GeogebraCommonKernelAlgosAlgoPolygon_pointsClosedYWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_(i + 1, points2) - GeogebraCommonKernelAlgosAlgoPolygon_pointsClosedXWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_(i + 1, points2) * GeogebraCommonKernelAlgosAlgoPolygon_pointsClosedYWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_(i, points2);
    xsum += (GeogebraCommonKernelAlgosAlgoPolygon_pointsClosedXWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_(i, points2) + GeogebraCommonKernelAlgosAlgoPolygon_pointsClosedXWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_(i + 1, points2)) * factor;
    ysum += (GeogebraCommonKernelAlgosAlgoPolygon_pointsClosedYWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_(i, points2) + GeogebraCommonKernelAlgosAlgoPolygon_pointsClosedYWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_(i + 1, points2)) * factor;
  }
  *IOSDoubleArray_GetRef(nil_chk(centroid), 0) = xsum;
  *IOSDoubleArray_GetRef(centroid, 1) = ysum;
  *IOSDoubleArray_GetRef(centroid, 2) = 6.0 * signedArea;
}

jdouble GeogebraCommonKernelAlgosAlgoPolygon_pointsClosedXWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_(jint i, IOSObjectArray *points2) {
  GeogebraCommonKernelAlgosAlgoPolygon_initialize();
  if (i == ((IOSObjectArray *) nil_chk(points2))->size_) {
    return ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points2, 0), [GeogebraCommonKernelGeosGeoPoint class]))))->inhomX_;
  }
  return ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points2, i), [GeogebraCommonKernelGeosGeoPoint class]))))->inhomX_;
}

jdouble GeogebraCommonKernelAlgosAlgoPolygon_pointsClosedYWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_(jint i, IOSObjectArray *points2) {
  GeogebraCommonKernelAlgosAlgoPolygon_initialize();
  if (i == ((IOSObjectArray *) nil_chk(points2))->size_) {
    return ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points2, 0), [GeogebraCommonKernelGeosGeoPoint class]))))->inhomY_;
  }
  return ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points2, i), [GeogebraCommonKernelGeosGeoPoint class]))))->inhomY_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoPolygon)
