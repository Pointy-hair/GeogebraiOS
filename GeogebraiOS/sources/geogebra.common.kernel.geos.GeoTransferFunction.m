//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoTransferFunction.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoTransferFunction.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/parser/ParseException.h"
#include "geogebra/common/kernel/parser/Parser.h"
#include "geogebra/common/kernel/parser/ParserInterface.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/Complex.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface GeogebraCommonKernelGeosGeoTransferFunction () {
 @public
  jboolean isDefined__;
  id<GeogebraCommonKernelParserParserInterface> parser_;
  GeogebraCommonKernelArithmeticFunction *originalFunction_;
  GeogebraCommonKernelArithmeticFunction *currentFunction_;
  id<GeogebraCommonKernelArithmeticTraversing> t_;
  GeogebraCommonKernelArithmeticExpressionNode *exp_;
  jint omegaStart_;
  id<JavaUtilList> coordsList_;
  GeogebraCommonKernelGeosGeoVec2D *v_;
  GeogebraCommonKernelGeosGeoFunction *geoFunction_;
  jdouble step_;
}

- (GeogebraCommonKernelArithmeticFunction *)createFunctionWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)num
                                                          withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)den;

+ (GeogebraCommonKernelArithmeticExpressionNode *)createPolynomWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)values
                                                withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)s;

- (jint)getOmega;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTransferFunction, parser_, id<GeogebraCommonKernelParserParserInterface>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTransferFunction, originalFunction_, GeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTransferFunction, currentFunction_, GeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTransferFunction, t_, id<GeogebraCommonKernelArithmeticTraversing>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTransferFunction, exp_, GeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTransferFunction, coordsList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTransferFunction, v_, GeogebraCommonKernelGeosGeoVec2D *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTransferFunction, geoFunction_, GeogebraCommonKernelGeosGeoFunction *)

__attribute__((unused)) static GeogebraCommonKernelArithmeticFunction *GeogebraCommonKernelGeosGeoTransferFunction_createFunctionWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelGeosGeoTransferFunction *self, GeogebraCommonKernelGeosGeoList *num, GeogebraCommonKernelGeosGeoList *den);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelGeosGeoTransferFunction_createPolynomWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticFunctionVariable_(GeogebraCommonKernelGeosGeoList *values, GeogebraCommonKernelArithmeticFunctionVariable *s);

__attribute__((unused)) static jint GeogebraCommonKernelGeosGeoTransferFunction_getOmega(GeogebraCommonKernelGeosGeoTransferFunction *self);

@implementation GeogebraCommonKernelGeosGeoTransferFunction

- (instancetype)initWithGeogebraCommonKernelGeosGeoTransferFunction:(GeogebraCommonKernelGeosGeoTransferFunction *)gcf {
  GeogebraCommonKernelGeosGeoTransferFunction_initWithGeogebraCommonKernelGeosGeoTransferFunction_(self, gcf);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)num
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)den
                                                 withInt:(jint)omega {
  GeogebraCommonKernelGeosGeoTransferFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withInt_(self, c, label, num, den, omega);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)num
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)den {
  GeogebraCommonKernelGeosGeoTransferFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, c, label, num, den);
  return self;
}

- (GeogebraCommonKernelArithmeticFunction *)createFunctionWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)num
                                                          withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)den {
  return GeogebraCommonKernelGeosGeoTransferFunction_createFunctionWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, num, den);
}

+ (GeogebraCommonKernelArithmeticExpressionNode *)createPolynomWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)values
                                                withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)s {
  return GeogebraCommonKernelGeosGeoTransferFunction_createPolynomWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticFunctionVariable_(values, s);
}

- (GeogebraCommonKernelGeosGeoFunction *)getGeoFunction {
  return geoFunction_;
}

- (void)evaluate {
  [((id<JavaUtilList>) nil_chk(coordsList_)) clear];
  GeogebraCommonKernelMatrixCoords *po = [self evaluateWithDouble:omegaStart_];
  [coordsList_ addWithId:po];
  jdouble p = omegaStart_ / step_;
  for (; !GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(p, 0, 0.01); p /= step_) {
    po = [self evaluateWithDouble:p];
    if (![coordsList_ containsWithId:po]) {
      [coordsList_ addWithId:po];
    }
  }
}

- (id<JavaUtilList>)getCoordsList {
  return coordsList_;
}

- (jint)getOmega {
  return GeogebraCommonKernelGeosGeoTransferFunction_getOmega(self);
}

- (GeogebraCommonKernelArithmeticFunction *)getFunction {
  return originalFunction_;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_CURVE_POLAR();
}

- (void)setDefinedWithBoolean:(jboolean)isDefined {
  self->isDefined__ = isDefined;
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_GeogebraCommonKernelGeosGeoTransferFunction_initWithGeogebraCommonKernelGeosGeoTransferFunction_(self) autorelease];
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelGeosGeoTransferFunction *gcf = (GeogebraCommonKernelGeosGeoTransferFunction *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoTransferFunction class]);
  GeogebraCommonKernelGeosGeoTransferFunction_set_originalFunction_(self, [((GeogebraCommonKernelGeosGeoTransferFunction *) nil_chk(gcf)) getFunction]);
  omegaStart_ = GeogebraCommonKernelGeosGeoTransferFunction_getOmega(gcf);
  GeogebraCommonKernelGeosGeoTransferFunction_set_coordsList_(self, [gcf getCoordsList]);
}

- (jboolean)isDefined {
  return isDefined__;
}

- (void)setUndefined {
  isDefined__ = NO;
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return isDefined__;
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return NO;
}

- (GeogebraCommonKernelMatrixCoords *)evaluateWithGeogebraCommonUtilComplex:(GeogebraCommonUtilComplex *)z {
  @try {
    if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([((GeogebraCommonUtilComplex *) nil_chk(z)) getRe], 0, GeogebraCommonKernelKernel_MIN_PRECISION)) {
      return ([new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_([((GeogebraCommonKernelArithmeticFunction *) nil_chk(originalFunction_)) evaluateWithDouble:0], 0, 1) autorelease]);
    }
    GeogebraCommonKernelGeosGeoTransferFunction_set_exp_(self, [((id<GeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseExpressionWithNSString:[z description]]);
    GeogebraCommonKernelGeosGeoTransferFunction_setAndConsume_currentFunction_(self, new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelKernel_(originalFunction_, kernel_));
    GeogebraCommonKernelGeosGeoTransferFunction_set_t_(self, GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_([currentFunction_ getVarStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], exp_, kernel_));
    [currentFunction_ traverseWithGeogebraCommonKernelArithmeticTraversing:t_];
    GeogebraCommonKernelGeosGeoTransferFunction_set_v_(self, (GeogebraCommonKernelGeosGeoVec2D *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticFunction *) nil_chk([currentFunction_ evaluateComplex])) getExpression])) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], [GeogebraCommonKernelGeosGeoVec2D class]));
    return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_([((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(v_)) getX], [v_ getY]) autorelease];
  }
  @catch (GeogebraCommonKernelParserParseException *e) {
    [((GeogebraCommonKernelParserParseException *) nil_chk(e)) printStackTrace];
    [self setUndefined];
  }
  return nil;
}

- (GeogebraCommonKernelMatrixCoords *)evaluateWithDouble:(jdouble)x {
  @try {
    if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(x, 0, GeogebraCommonKernelKernel_MIN_PRECISION)) {
      return ([new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_([((GeogebraCommonKernelArithmeticFunction *) nil_chk(originalFunction_)) evaluateWithDouble:0], 0, 1) autorelease]);
    }
    GeogebraCommonKernelGeosGeoVec2D *xi = [new_GeogebraCommonKernelGeosGeoVec2D_initWithGeogebraCommonKernelKernel_withDouble_withDouble_(kernel_, 0, x) autorelease];
    [xi setModeWithInt:GeogebraCommonKernelKernel_COORD_COMPLEX];
    GeogebraCommonKernelGeosGeoTransferFunction_set_exp_(self, [xi wrap]);
    GeogebraCommonKernelGeosGeoTransferFunction_setAndConsume_currentFunction_(self, new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelKernel_(originalFunction_, kernel_));
    GeogebraCommonKernelGeosGeoTransferFunction_set_t_(self, GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_([currentFunction_ getVarStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], exp_, kernel_));
    [currentFunction_ traverseWithGeogebraCommonKernelArithmeticTraversing:t_];
    GeogebraCommonKernelGeosGeoTransferFunction_set_v_(self, (GeogebraCommonKernelGeosGeoVec2D *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticFunction *) nil_chk([currentFunction_ evaluateComplex])) getExpression])) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], [GeogebraCommonKernelGeosGeoVec2D class]));
    return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_([((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(v_)) getX], [v_ getY], 1) autorelease];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    [self setUndefined];
  }
  return nil;
}

- (NSString *)getLaTeXAlgebraDescriptionWithBoolean:(jboolean)substituteNumbers
             withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self toLaTeXStringWithBoolean:substituteNumbers withGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (isDefined__) {
    return [((GeogebraCommonKernelArithmeticFunction *) nil_chk(originalFunction_)) toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
  }
  else {
    return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
  }
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (isDefined__) {
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
    if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isHTML5Applet]) {
      [sb appendWithNSString:[((GeogebraCommonKernelArithmeticFunction *) nil_chk(originalFunction_)) toLaTeXStringWithBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl]];
      [sb appendWithNSString:@" , "];
      [sb appendWithNSString:[kernel_ formatWithDouble:-omegaStart_ withGeogebraCommonKernelStringTemplate:tpl]];
      [sb appendWithNSString:@" \\le "];
      [sb appendWithChar:GeogebraCommonUtilUnicode_omega];
      [sb appendWithNSString:@" \\le "];
      [sb appendWithNSString:[kernel_ formatWithDouble:omegaStart_ withGeogebraCommonKernelStringTemplate:tpl]];
    }
    else {
      [sb appendWithNSString:@"\\left."];
      [sb appendWithNSString:JreStrcat("$$", label_, @":  ")];
      [sb appendWithNSString:[((GeogebraCommonKernelArithmeticFunction *) nil_chk(originalFunction_)) toLaTeXStringWithBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl]];
      [sb appendWithNSString:@"\\right\\} \\; "];
      [sb appendWithNSString:[kernel_ formatWithDouble:-omegaStart_ withGeogebraCommonKernelStringTemplate:tpl]];
      [sb appendWithNSString:@" \\le "];
      [sb appendWithChar:GeogebraCommonUtilUnicode_omega];
      [sb appendWithNSString:@" \\le "];
      [sb appendWithNSString:[kernel_ formatWithDouble:omegaStart_ withGeogebraCommonKernelStringTemplate:tpl]];
    }
    return [sb description];
  }
  return JreStrcat("$$$", @" \\text{", [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getPlainWithNSString:@"Undefined"], @"} ");
}

- (jboolean)isLaTeXDrawableGeo {
  return YES;
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (void)dealloc {
  RELEASE_(parser_);
  RELEASE_(originalFunction_);
  RELEASE_(currentFunction_);
  RELEASE_(t_);
  RELEASE_(exp_);
  RELEASE_(coordsList_);
  RELEASE_(v_);
  RELEASE_(geoFunction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoTransferFunction:", "GeoTransferFunction", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withInt:", "GeoTransferFunction", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "GeoTransferFunction", NULL, 0x1, NULL, NULL },
    { "createFunctionWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "createFunction", "Lgeogebra.common.kernel.arithmetic.Function;", 0x2, NULL, NULL },
    { "createPolynomWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelArithmeticFunctionVariable:", "createPolynom", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0xa, NULL, NULL },
    { "getGeoFunction", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "evaluate", NULL, "V", 0x1, NULL, NULL },
    { "getCoordsList", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "getOmega", NULL, "I", 0x2, NULL, NULL },
    { "getFunction", NULL, "Lgeogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "setDefinedWithBoolean:", "setDefined", "V", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "evaluateWithGeogebraCommonUtilComplex:", "evaluate", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getLaTeXAlgebraDescriptionWithBoolean:withGeogebraCommonKernelStringTemplate:", "getLaTeXAlgebraDescription", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isDefined__", "isDefined", 0x2, "Z", NULL, NULL,  },
    { "parser_", NULL, 0x2, "Lgeogebra.common.kernel.parser.ParserInterface;", NULL, NULL,  },
    { "originalFunction_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "currentFunction_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "t_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Traversing;", NULL, NULL,  },
    { "exp_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "omegaStart_", NULL, 0x2, "I", NULL, NULL,  },
    { "coordsList_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lgeogebra/common/kernel/Matrix/Coords;>;",  },
    { "v_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoVec2D;", NULL, NULL,  },
    { "geoFunction_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "step_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoTransferFunction = { 2, "GeoTransferFunction", "geogebra.common.kernel.geos", NULL, 0x1, 26, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoTransferFunction;
}

@end

void GeogebraCommonKernelGeosGeoTransferFunction_initWithGeogebraCommonKernelGeosGeoTransferFunction_(GeogebraCommonKernelGeosGeoTransferFunction *self, GeogebraCommonKernelGeosGeoTransferFunction *gcf) {
  GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(self, ((GeogebraCommonKernelGeosGeoTransferFunction *) nil_chk(gcf))->cons_);
  self->isDefined__ = YES;
  self->omegaStart_ = 50;
  GeogebraCommonKernelGeosGeoTransferFunction_setAndConsume_coordsList_(self, new_JavaUtilArrayList_init());
  self->step_ = 1.001;
  [self setWithGeogebraCommonKernelGeosGeoElement:gcf];
}

GeogebraCommonKernelGeosGeoTransferFunction *new_GeogebraCommonKernelGeosGeoTransferFunction_initWithGeogebraCommonKernelGeosGeoTransferFunction_(GeogebraCommonKernelGeosGeoTransferFunction *gcf) {
  GeogebraCommonKernelGeosGeoTransferFunction *self = [GeogebraCommonKernelGeosGeoTransferFunction alloc];
  GeogebraCommonKernelGeosGeoTransferFunction_initWithGeogebraCommonKernelGeosGeoTransferFunction_(self, gcf);
  return self;
}

void GeogebraCommonKernelGeosGeoTransferFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withInt_(GeogebraCommonKernelGeosGeoTransferFunction *self, GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelGeosGeoList *num, GeogebraCommonKernelGeosGeoList *den, jint omega) {
  GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  self->isDefined__ = YES;
  self->omegaStart_ = 50;
  GeogebraCommonKernelGeosGeoTransferFunction_setAndConsume_coordsList_(self, new_JavaUtilArrayList_init());
  self->step_ = 1.001;
  if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk([((GeogebraCommonKernelGeosGeoList *) nil_chk(num)) getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()] && [((GeogebraCommonPluginGeoClassEnum *) nil_chk([((GeogebraCommonKernelGeosGeoList *) nil_chk(den)) getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()]) {
    self->omegaStart_ = omega;
    GeogebraCommonKernelCommandsAlgebraProcessor *ap = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor];
    GeogebraCommonKernelArithmeticFunction *strFunc = GeogebraCommonKernelGeosGeoTransferFunction_createFunctionWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, num, den);
    GeogebraCommonKernelGeosGeoFunction *f = [new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunction_(c, strFunc) autorelease];
    GeogebraCommonKernelGeosGeoTransferFunction_setAndConsume_geoFunction_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelGeosGeoFunction_(f));
    GeogebraCommonKernelGeosGeoTransferFunction_set_originalFunction_(self, [self->geoFunction_ getFunction]);
    GeogebraCommonKernelGeosGeoTransferFunction_set_parser_(self, [self->kernel_ getParser]);
    [self setEuclidianVisibleWithBoolean:YES];
  }
  else {
    self->isDefined__ = NO;
  }
}

GeogebraCommonKernelGeosGeoTransferFunction *new_GeogebraCommonKernelGeosGeoTransferFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withInt_(GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelGeosGeoList *num, GeogebraCommonKernelGeosGeoList *den, jint omega) {
  GeogebraCommonKernelGeosGeoTransferFunction *self = [GeogebraCommonKernelGeosGeoTransferFunction alloc];
  GeogebraCommonKernelGeosGeoTransferFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withInt_(self, c, label, num, den, omega);
  return self;
}

void GeogebraCommonKernelGeosGeoTransferFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelGeosGeoTransferFunction *self, GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelGeosGeoList *num, GeogebraCommonKernelGeosGeoList *den) {
  GeogebraCommonKernelGeosGeoTransferFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withInt_(self, c, label, num, den, 10);
}

GeogebraCommonKernelGeosGeoTransferFunction *new_GeogebraCommonKernelGeosGeoTransferFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelGeosGeoList *num, GeogebraCommonKernelGeosGeoList *den) {
  GeogebraCommonKernelGeosGeoTransferFunction *self = [GeogebraCommonKernelGeosGeoTransferFunction alloc];
  GeogebraCommonKernelGeosGeoTransferFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, c, label, num, den);
  return self;
}

GeogebraCommonKernelArithmeticFunction *GeogebraCommonKernelGeosGeoTransferFunction_createFunctionWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelGeosGeoTransferFunction *self, GeogebraCommonKernelGeosGeoList *num, GeogebraCommonKernelGeosGeoList *den) {
  GeogebraCommonKernelArithmeticFunctionVariable *s = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"s") autorelease];
  return [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(GeogebraCommonKernelGeosGeoTransferFunction_createPolynomWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticFunctionVariable_(num, s))) divideWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelGeosGeoTransferFunction_createPolynomWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticFunctionVariable_(den, s)], s) autorelease];
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelGeosGeoTransferFunction_createPolynomWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticFunctionVariable_(GeogebraCommonKernelGeosGeoList *values, GeogebraCommonKernelArithmeticFunctionVariable *s) {
  GeogebraCommonKernelGeosGeoTransferFunction_initialize();
  GeogebraCommonKernelArithmeticExpressionNode *exs = [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(s)) wrap];
  jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(values)) size];
  GeogebraCommonKernelArithmeticExpressionNode *ret = [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk([((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(((id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast([values getWithInt:[values size] - 1], @protocol(GeogebraCommonKernelGeosGeoNumberValue))))) getNumber])) wrap];
  for (jint i = 1; i < size; i++) {
    GeogebraCommonKernelArithmeticMyDouble *coeff = [((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(((id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast([values getWithInt:[values size] - 1 - i], @protocol(GeogebraCommonKernelGeosGeoNumberValue))))) getNumber];
    ret = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exs)) powerWithDouble:i])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:coeff])) plusWithGeogebraCommonKernelArithmeticExpressionValue:ret];
  }
  return ret;
}

jint GeogebraCommonKernelGeosGeoTransferFunction_getOmega(GeogebraCommonKernelGeosGeoTransferFunction *self) {
  return self->omegaStart_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoTransferFunction)
