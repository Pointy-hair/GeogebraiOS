//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/cas/AlgoPolynomialCD.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "geogebra/common/kernel/cas/AlgoPolynomialCD.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"

@interface GeogebraCommonKernelCasAlgoPolynomialCD () {
 @public
  GeogebraCommonKernelGeosGeoFunction *f1_, *f2_;
  GeogebraCommonKernelGeosGeoFunction *g_;
  JavaLangStringBuilder *sb_;
  GeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoPolynomialCD, f1_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoPolynomialCD, f2_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoPolynomialCD, g_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoPolynomialCD, sb_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoPolynomialCD, arbconst_, GeogebraCommonKernelArithmeticMyArbitraryConstant *)

__attribute__((unused)) static void GeogebraCommonKernelCasAlgoPolynomialCD_compute(GeogebraCommonKernelCasAlgoPolynomialCD *self);

@implementation GeogebraCommonKernelCasAlgoPolynomialCD

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f1
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f2 {
  GeogebraCommonKernelCasAlgoPolynomialCD_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f1, f2);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_CommonDenominator();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, f1_);
  IOSObjectArray_Set(input_, 1, f2_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunction *)getResult {
  return g_;
}

- (void)compute {
  GeogebraCommonKernelCasAlgoPolynomialCD_compute(self);
}

- (void)dealloc {
  RELEASE_(f1_);
  RELEASE_(f2_);
  RELEASE_(g_);
  RELEASE_(sb_);
  RELEASE_(arbconst_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoFunction:", "AlgoPolynomialCD", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "f2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "arbconst_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyArbitraryConstant;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCasAlgoPolynomialCD = { 2, "AlgoPolynomialCD", "geogebra.common.kernel.cas", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCasAlgoPolynomialCD;
}

@end

void GeogebraCommonKernelCasAlgoPolynomialCD_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelCasAlgoPolynomialCD *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f1, GeogebraCommonKernelGeosGeoFunction *f2) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelCasAlgoPolynomialCD_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  GeogebraCommonKernelCasAlgoPolynomialCD_setAndConsume_arbconst_(self, new_GeogebraCommonKernelArithmeticMyArbitraryConstant_initWithGeogebraCommonKernelAlgosConstructionElement_(self));
  GeogebraCommonKernelCasAlgoPolynomialCD_set_f1_(self, f1);
  GeogebraCommonKernelCasAlgoPolynomialCD_set_f2_(self, f2);
  GeogebraCommonKernelCasAlgoPolynomialCD_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelCasAlgoPolynomialCD_compute(self);
  [self->g_ setLabelWithNSString:label];
}

GeogebraCommonKernelCasAlgoPolynomialCD *new_GeogebraCommonKernelCasAlgoPolynomialCD_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f1, GeogebraCommonKernelGeosGeoFunction *f2) {
  GeogebraCommonKernelCasAlgoPolynomialCD *self = [GeogebraCommonKernelCasAlgoPolynomialCD alloc];
  GeogebraCommonKernelCasAlgoPolynomialCD_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f1, f2);
  return self;
}

void GeogebraCommonKernelCasAlgoPolynomialCD_compute(GeogebraCommonKernelCasAlgoPolynomialCD *self) {
  if (![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f1_)) isDefined] || ![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f2_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  @try {
    IOSObjectArray *funVarStr1 = [self->f1_ getTempVarCASStringWithBoolean:NO];
    IOSObjectArray *funVarStr2 = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f2_)) getTempVarCASStringWithBoolean:NO];
    [((JavaLangStringBuilder *) nil_chk(self->sb_)) setLengthWithInt:0];
    [self->sb_ appendWithNSString:@"CommonDenominator("];
    [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(funVarStr1), 0)];
    [self->sb_ appendWithNSString:@","];
    [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(funVarStr2), 0)];
    [self->sb_ appendWithNSString:@")"];
    NSString *functionOut = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) evaluateCachedGeoGebraCASWithNSString:[self->sb_ description] withGeogebraCommonKernelArithmeticMyArbitraryConstant:self->arbconst_];
    if (functionOut == nil || ((jint) [functionOut length]) == 0) {
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    }
    else {
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self->kernel_ getAlgebraProcessor])) evaluateToFunctionWithNSString:functionOut withBoolean:NO]];
    }
  }
  @catch (JavaLangThrowable *th) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCasAlgoPolynomialCD)
