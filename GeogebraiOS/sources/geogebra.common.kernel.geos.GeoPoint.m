//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoPoint.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/kernel/AnimationManager.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Locateable.h"
#include "geogebra/common/kernel/LocateableList.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/PathAlgo.h"
#include "geogebra/common/kernel/PathMover.h"
#include "geogebra/common/kernel/PathNormalizer.h"
#include "geogebra/common/kernel/PathOrPoint.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/Region.h"
#include "geogebra/common/kernel/RegionParameters.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDependentPoint.h"
#include "geogebra/common/kernel/algos/AlgoDynamicCoordinatesInterface.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPointOnPath.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/SymbolicParameters.h"
#include "geogebra/common/kernel/algos/SymbolicParametersAlgo.h"
#include "geogebra/common/kernel/algos/SymbolicParametersBotanaAlgo.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/geos/PointProperties.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoCurveCartesianND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/prover/AbstractProverReciosMethod.h"
#include "geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "geogebra/common/kernel/prover/polynomial/Variable.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/MyMath.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelGeosGeoPoint () {
 @public
  jint pointSize_;
  jint pointStyle_;
  jdouble animationValue_;
  id<GeogebraCommonKernelPath> path_;
  GeogebraCommonKernelPathParameter *pathParameter_;
  id<GeogebraCommonKernelRegion> region_;
  GeogebraCommonKernelRegionParameters *regionParameters_;
  jdouble x2D_;
  jdouble y2D_;
  jboolean isInfinite__, isDefined__;
  jboolean showUndefinedInAlgebraView__;
  GeogebraCommonKernelProverPolynomialVariable *variableCoordinate1_, *variableCoordinate2_;
  IOSObjectArray *botanaVars_;
  GeogebraCommonKernelLocateableList *locateableList_;
  JavaUtilArrayList *changeableCoordNumbers_;
  jboolean hasPolarParentNumbers__;
  GeogebraCommonKernelPathParameter *tempPathParameter_;
  JavaLangStringBuilder *sbToString_GeoPoint_;
  JavaLangStringBuilder *sbBuildValueString_;
  GeogebraCommonKernelMatrixCoords *coords2D_;
  GeogebraCommonKernelMatrixCoords *inhomCoords3D_, *inhomCoords2D_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *tmpMatrix4x4_;
  GeogebraCommonKernelMatrixCoords *tmpCoords_;
  JavaUtilArrayList *incidenceList_;
  JavaUtilArrayList *nonIncidenceList_;
}

- (id<GeogebraCommonKernelArithmeticNumberValue>)getCoordNumberWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                                                     withBoolean:(jboolean)allowPlusNode;

- (GeogebraCommonKernelPathParameter *)getTempPathparameter;

- (jboolean)isEqualPoint2DWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P;

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, path_, id<GeogebraCommonKernelPath>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, pathParameter_, GeogebraCommonKernelPathParameter *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, region_, id<GeogebraCommonKernelRegion>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, regionParameters_, GeogebraCommonKernelRegionParameters *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, variableCoordinate1_, GeogebraCommonKernelProverPolynomialVariable *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, variableCoordinate2_, GeogebraCommonKernelProverPolynomialVariable *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, botanaVars_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, locateableList_, GeogebraCommonKernelLocateableList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, changeableCoordNumbers_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, tempPathParameter_, GeogebraCommonKernelPathParameter *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, sbToString_GeoPoint_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, sbBuildValueString_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, coords2D_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, inhomCoords3D_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, inhomCoords2D_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, tmpMatrix4x4_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, tmpCoords_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, incidenceList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, nonIncidenceList_, JavaUtilArrayList *)

static JavaUtilTreeSet *GeogebraCommonKernelGeosGeoPoint_tempSet_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoPoint, tempSet_, JavaUtilTreeSet *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, tempSet_, JavaUtilTreeSet *)

static id<JavaUtilComparator> GeogebraCommonKernelGeosGeoPoint_comparatorX_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoPoint, comparatorX_, id<JavaUtilComparator>)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelGeosGeoPoint, comparatorX_, id<JavaUtilComparator>)

__attribute__((unused)) static GeogebraCommonKernelPathParameter *GeogebraCommonKernelGeosGeoPoint_getPathParameter(GeogebraCommonKernelGeosGeoPoint *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoPoint_hasChangeableCoordParentNumbers(GeogebraCommonKernelGeosGeoPoint *self);

__attribute__((unused)) static JavaUtilArrayList *GeogebraCommonKernelGeosGeoPoint_getCoordParentNumbers(GeogebraCommonKernelGeosGeoPoint *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticNumberValue> GeogebraCommonKernelGeosGeoPoint_getCoordNumberWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(GeogebraCommonKernelGeosGeoPoint *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev, jboolean allowPlusNode);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoPoint_isPointOnPath(GeogebraCommonKernelGeosGeoPoint *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoPoint_isInfinite(GeogebraCommonKernelGeosGeoPoint *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoPoint_isFinite(GeogebraCommonKernelGeosGeoPoint *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(GeogebraCommonKernelGeosGeoPoint *self, jdouble x, jdouble y, jdouble z);

__attribute__((unused)) static GeogebraCommonKernelPathParameter *GeogebraCommonKernelGeosGeoPoint_getTempPathparameter(GeogebraCommonKernelGeosGeoPoint *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoPoint_updateCoords(GeogebraCommonKernelGeosGeoPoint *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoPoint_setCoordsWithGeogebraCommonKernelGeosGeoVec3D_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelGeosGeoVec3D *v);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoPoint_isEqualWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoPoint_isEqualWithGeogebraCommonKernelGeosGeoElement_withDouble_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelGeosGeoElement *geo, jdouble eps);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoPoint_isEqualPoint2DWithGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelGeosGeoPoint *P);

__attribute__((unused)) static jdouble GeogebraCommonKernelGeosGeoPoint_getInhomX(GeogebraCommonKernelGeosGeoPoint *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelGeosGeoPoint_getInhomY(GeogebraCommonKernelGeosGeoPoint *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelGeosGeoPoint_distanceWithGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelGeosGeoPoint *P);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoPoint_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelGeosGeoPoint *self, id<GeogebraCommonKernelArithmeticNumberValue> phiValue, GeogebraCommonKernelMatrixCoords *point);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoPoint_toValueStringMinimalWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static JavaLangStringBuilder *GeogebraCommonKernelGeosGeoPoint_buildValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoPoint_isAbsoluteStartPoint(GeogebraCommonKernelGeosGeoPoint *self);

@interface GeogebraCommonKernelGeosGeoPoint_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(GeogebraCommonKernelGeosGeoPoint *)itemA
               withId:(GeogebraCommonKernelGeosGeoPoint *)itemB;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelGeosGeoPoint_$1)

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoPoint_$1_init(GeogebraCommonKernelGeosGeoPoint_$1 *self);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint_$1 *new_GeogebraCommonKernelGeosGeoPoint_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelGeosGeoPoint_$1)

@implementation GeogebraCommonKernelGeosGeoPoint

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                             withBoolean:(jboolean)isHelper {
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, isHelper);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
                                              withDouble:(jdouble)x
                                              withDouble:(jdouble)y
                                              withDouble:(jdouble)z {
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self, c, label, x, y, z);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                              withDouble:(jdouble)x
                                              withDouble:(jdouble)y
                                              withDouble:(jdouble)z {
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self, c, x, y, z);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                            withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path {
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_(self, c, path);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                          withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region {
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelRegion_(self, c, region);
  return self;
}

- (void)setZero {
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, 0, 0, 1);
}

- (void)clearPathParameter {
  GeogebraCommonKernelGeosGeoPoint_set_pathParameter_(self, nil);
}

- (GeogebraCommonKernelPathParameter *)getPathParameter {
  return GeogebraCommonKernelGeosGeoPoint_getPathParameter(self);
}

- (GeogebraCommonKernelRegionParameters *)getRegionParameters {
  if (regionParameters_ == nil) GeogebraCommonKernelGeosGeoPoint_setAndConsume_regionParameters_(self, new_GeogebraCommonKernelRegionParameters_init());
  return regionParameters_;
}

- (jint)getRelatedModeID {
  return toStringMode_ == GeogebraCommonKernelKernel_COORD_COMPLEX ? GeogebraCommonEuclidianEuclidianConstants_MODE_COMPLEX_NUMBER : GeogebraCommonEuclidianEuclidianConstants_MODE_POINT;
}

- (NSString *)getTypeString {
  if (toStringMode_ == GeogebraCommonKernelKernel_COORD_COMPLEX) {
    return @"ComplexNumber";
  }
  return @"Point";
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_POINT();
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)point {
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelGeosGeoPoint_(self, point);
  return self;
}

- (void)setWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  [self setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [GeogebraCommonKernelGeosGeoElement class])];
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  self->isDefined__ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined];
  if ([geo isGeoPoint]) {
    GeogebraCommonKernelGeosGeoPoint *p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class]);
    if (p->pathParameter_ != nil) {
      GeogebraCommonKernelGeosGeoPoint_set_pathParameter_(self, GeogebraCommonKernelGeosGeoPoint_getPathParameter(self));
      [((GeogebraCommonKernelPathParameter *) nil_chk(pathParameter_)) setWithGeogebraCommonKernelPathParameter:p->pathParameter_];
    }
    animationValue_ = p->animationValue_;
    GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, p->x_, p->y_, p->z_);
    [self setModeWithInt:p->toStringMode_];
  }
  else if ([geo isGeoVector]) {
    GeogebraCommonKernelGeosGeoVector *v = (GeogebraCommonKernelGeosGeoVector *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoVector class]);
    GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, [v getX], [v getY], 1.0);
    [self setModeWithInt:[v getMode]];
  }
  else if ([geo isGeoNumeric]) {
    GeogebraCommonKernelGeosGeoNumeric *v = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class]);
    GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, [v getDouble], 0, 1.0);
    [self setModeWithInt:GeogebraCommonKernelKernel_COORD_COMPLEX];
  }
  else {
    GeogebraCommonMainApp_errorWithNSString_(JreStrcat("@$", [geo getGeoClassType], @" invalid as point"));
    @throw [new_JavaLangIllegalArgumentException_init() autorelease];
  }
}

- (GeogebraCommonKernelGeosGeoPoint *)copy__ {
  return [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelGeosGeoPoint_(self) autorelease];
}

- (void)setPointSizeWithInt:(jint)i {
  pointSize_ = i;
}

- (jint)getPointSize {
  return pointSize_;
}

- (jint)getPointStyle {
  return pointStyle_;
}

- (void)setPointStyleWithInt:(jint)style {
  if (style > -1 && style <= GeogebraCommonPluginEuclidianStyleConstants_MAX_POINT_STYLE) pointStyle_ = style;
  else pointStyle_ = -1;
}

- (jboolean)isChangeable {
  return GeogebraCommonKernelGeosGeoPoint_isPointChangeableWithGeogebraCommonKernelGeosGeoElement_(self);
}

+ (jboolean)isPointChangeableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)point {
  return GeogebraCommonKernelGeosGeoPoint_isPointChangeableWithGeogebraCommonKernelGeosGeoElement_(point);
}

- (jboolean)moveFromChangeableCoordParentNumbersWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)rwTransVec
                                                withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)targetPosition
                                                withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)viewDirection
                                                               withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                                                               withJavaUtilArrayList:(JavaUtilArrayList *)tempMoveObjectList
                                            withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view {
  GeogebraCommonKernelMatrixCoords *endPosition = targetPosition;
  if (!GeogebraCommonKernelGeosGeoPoint_hasChangeableCoordParentNumbers(self)) return NO;
  if (endPosition == nil) {
    endPosition = [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getInhomCoords])) addWithGeogebraCommonKernelMatrixCoords:rwTransVec];
  }
  JavaUtilArrayList *freeCoordNumbers = GeogebraCommonKernelGeosGeoPoint_getCoordParentNumbers(self);
  id<GeogebraCommonKernelArithmeticNumberValue> xvar = [((JavaUtilArrayList *) nil_chk(freeCoordNumbers)) getWithInt:0];
  id<GeogebraCommonKernelArithmeticNumberValue> yvar = [freeCoordNumbers getWithInt:1];
  if ([self hasPolarParentNumbers]) {
    jdouble radius = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(endPosition)) getX], [endPosition getY]);
    if ([xvar isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xvar, [GeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:radius];
    }
    if ([yvar isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
      jdouble angle = GeogebraCommonKernelKernel_convertToAngleValueWithDouble_(JavaLangMath_atan2WithDouble_withDouble_([endPosition getY], [endPosition getX]));
      if ([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yvar, [GeogebraCommonKernelGeosGeoNumeric class])))) isIntervalMinActive] && [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yvar, [GeogebraCommonKernelGeosGeoNumeric class])))) isIntervalMaxActive] && (angle < [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yvar, [GeogebraCommonKernelGeosGeoNumeric class])))) getIntervalMin] || angle > [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yvar, [GeogebraCommonKernelGeosGeoNumeric class])))) getIntervalMax])) {
        jdouble minDiff = JavaLangMath_absWithDouble_((angle - [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yvar, [GeogebraCommonKernelGeosGeoNumeric class])))) getIntervalMin]));
        if (minDiff > JavaLangMath_PI) minDiff = GeogebraCommonKernelKernel_PI_2 - minDiff;
        jdouble maxDiff = JavaLangMath_absWithDouble_((angle - [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yvar, [GeogebraCommonKernelGeosGeoNumeric class])))) getIntervalMax]));
        if (maxDiff > JavaLangMath_PI) maxDiff = GeogebraCommonKernelKernel_PI_2 - maxDiff;
        if (minDiff < maxDiff) angle = angle - GeogebraCommonKernelKernel_PI_2;
        else angle = angle + GeogebraCommonKernelKernel_PI_2;
      }
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yvar, [GeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:angle];
    }
  }
  else {
    jdouble newXval = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(xvar)) getDouble] - inhomX_ + [((GeogebraCommonKernelMatrixCoords *) nil_chk(endPosition)) getX];
    jdouble newYval = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(yvar)) getDouble] - inhomY_ + [endPosition getY];
    if ([xvar isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
      [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xvar, [GeogebraCommonKernelGeosGeoNumeric class])) setValueWithDouble:newXval];
    }
    if ([yvar isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
      [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yvar, [GeogebraCommonKernelGeosGeoNumeric class])) setValueWithDouble:newYval];
    }
  }
  if ([xvar isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
    GeogebraCommonKernelGeosGeoElement_addChangeableCoordParentNumberToUpdateListWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xvar, [GeogebraCommonKernelGeosGeoNumeric class]), updateGeos, tempMoveObjectList);
  }
  if ([yvar isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
    GeogebraCommonKernelGeosGeoElement_addChangeableCoordParentNumberToUpdateListWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_withJavaUtilArrayList_((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yvar, [GeogebraCommonKernelGeosGeoNumeric class]), updateGeos, tempMoveObjectList);
  }
  return YES;
}

- (jboolean)hasChangeableCoordParentNumbers {
  return GeogebraCommonKernelGeosGeoPoint_hasChangeableCoordParentNumbers(self);
}

- (JavaUtilArrayList *)getCoordParentNumbers {
  return GeogebraCommonKernelGeosGeoPoint_getCoordParentNumbers(self);
}

- (jboolean)hasPolarParentNumbers {
  return hasPolarParentNumbers__;
}

- (id<GeogebraCommonKernelArithmeticNumberValue>)getCoordNumberWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                                                     withBoolean:(jboolean)allowPlusNode {
  return GeogebraCommonKernelGeosGeoPoint_getCoordNumberWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(self, ev, allowPlusNode);
}

- (jboolean)isPointOnPath {
  return GeogebraCommonKernelGeosGeoPoint_isPointOnPath(self);
}

- (jboolean)isAnimatable {
  return GeogebraCommonKernelGeosGeoPoint_isPointOnPath(self) && [self isChangeable];
}

- (jboolean)hasPath {
  return path_ != nil;
}

- (id<GeogebraCommonKernelPath>)getPath {
  return path_;
}

- (void)setPathWithGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)p {
  GeogebraCommonKernelGeosGeoPoint_set_path_(self, p);
  GeogebraCommonKernelGeosGeoElement *geo = [((id<GeogebraCommonKernelPath>) nil_chk(path_)) toGeoElement];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConic]) {
    [((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoConicND class])) addPointOnConicWithGeogebraCommonKernelKernelNDGeoPointND:self];
  }
}

- (void)addToPathParameterWithDouble:(jdouble)a {
  GeogebraCommonKernelPathParameter *parameter = GeogebraCommonKernelGeosGeoPoint_getPathParameter(self);
  ((GeogebraCommonKernelPathParameter *) nil_chk(parameter))->t_ += a;
  [((id<GeogebraCommonKernelPath>) nil_chk(path_)) pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:self];
  GeogebraCommonKernelGeosGeoPoint_updateCoords(self);
}

- (jboolean)isInfinite {
  return GeogebraCommonKernelGeosGeoPoint_isInfinite(self);
}

- (jboolean)isFinite {
  return GeogebraCommonKernelGeosGeoPoint_isFinite(self);
}

- (jboolean)showInEuclidianView {
  return isDefined__ && !isInfinite__;
}

- (jboolean)showInAlgebraView {
  return (isDefined__ || showUndefinedInAlgebraView__);
}

- (jboolean)isDefined {
  return isDefined__;
}

- (void)setUndefined {
  isDefined__ = NO;
  [super setUndefined];
}

- (jboolean)isFixable {
  return path_ != nil || [super isFixable];
}

- (void)setCoords2DWithDouble:(jdouble)x
                   withDouble:(jdouble)y
                   withDouble:(jdouble)z {
  self->x_ = x;
  self->y_ = y;
  self->z_ = z;
}

- (void)setCoordsWithDouble:(jdouble)x
                 withDouble:(jdouble)y
                 withDouble:(jdouble)z {
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, x, y, z);
}

- (void)setUndefinedCoords {
  self->x_ = JavaLangDouble_NaN;
  self->y_ = JavaLangDouble_NaN;
  self->z_ = JavaLangDouble_NaN;
  inhomX_ = JavaLangDouble_NaN;
  inhomY_ = JavaLangDouble_NaN;
  if (path_ != nil) {
    GeogebraCommonKernelPathParameter *parameter = GeogebraCommonKernelGeosGeoPoint_getPathParameter(self);
    GeogebraCommonKernelPathParameter *tempParameter = GeogebraCommonKernelGeosGeoPoint_getTempPathparameter(self);
    [((GeogebraCommonKernelPathParameter *) nil_chk(parameter)) setWithGeogebraCommonKernelPathParameter:tempParameter];
  }
}

- (void)setCoordsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v
                                          withBoolean:(jboolean)doPathOrRegion {
  if (doPathOrRegion) GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX], [v getY], [v getLast]);
  else {
    self->x_ = [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX];
    self->y_ = [v getY];
    self->z_ = [v getLast];
  }
  GeogebraCommonKernelGeosGeoPoint_updateCoords(self);
}

- (GeogebraCommonKernelPathParameter *)getTempPathparameter {
  return GeogebraCommonKernelGeosGeoPoint_getTempPathparameter(self);
}

- (void)updateCoords {
  GeogebraCommonKernelGeosGeoPoint_updateCoords(self);
}

- (void)setPolarCoordsWithDouble:(jdouble)r
                      withDouble:(jdouble)phi {
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, r * JavaLangMath_cosWithDouble_(phi), r * JavaLangMath_sinWithDouble_(phi), 1.0);
}

- (void)setCoordsWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)v {
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithGeogebraCommonKernelGeosGeoVec3D_(self, v);
}

- (void)setCoordsWithGeogebraCommonKernelGeosGeoVec2D:(GeogebraCommonKernelGeosGeoVec2D *)v {
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(v)) getX], [v getY], 1.0);
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonKernelGeosGeoPoint_isEqualWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                               withDouble:(jdouble)eps {
  return GeogebraCommonKernelGeosGeoPoint_isEqualWithGeogebraCommonKernelGeosGeoElement_withDouble_(self, geo, eps);
}

- (jboolean)isEqualPointNDWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geo {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(geo)) isGeoElement3D]) {
    return [geo isEqualPointNDWithGeogebraCommonKernelKernelNDGeoPointND:self];
  }
  return GeogebraCommonKernelGeosGeoPoint_isEqualPoint2DWithGeogebraCommonKernelGeosGeoPoint_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class]));
}

- (jboolean)isEqualPoint2DWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P {
  return GeogebraCommonKernelGeosGeoPoint_isEqualPoint2DWithGeogebraCommonKernelGeosGeoPoint_(self, P);
}

- (void)getInhomCoordsWithDoubleArray:(IOSDoubleArray *)res {
  *IOSDoubleArray_GetRef(nil_chk(res), 0) = inhomX_;
  *IOSDoubleArray_GetRef(res, 1) = inhomY_;
}

- (void)getPolarCoordsWithDoubleArray:(IOSDoubleArray *)res {
  *IOSDoubleArray_GetRef(nil_chk(res), 0) = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(inhomX_, inhomY_);
  *IOSDoubleArray_GetRef(res, 1) = JavaLangMath_atan2WithDouble_withDouble_(inhomY_, inhomX_);
}

- (jdouble)getInhomX {
  return GeogebraCommonKernelGeosGeoPoint_getInhomX(self);
}

- (jdouble)getInhomY {
  return GeogebraCommonKernelGeosGeoPoint_getInhomY(self);
}

- (jdouble)getInhomZ {
  return 0;
}

- (IOSDoubleArray *)vectorToWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)QI {
  GeogebraCommonKernelGeosGeoPoint *Q = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(QI, [GeogebraCommonKernelGeosGeoPoint class]);
  return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ GeogebraCommonKernelGeosGeoPoint_getInhomX(nil_chk(Q)) - GeogebraCommonKernelGeosGeoPoint_getInhomX(self), GeogebraCommonKernelGeosGeoPoint_getInhomY(Q) - GeogebraCommonKernelGeosGeoPoint_getInhomY(self), 0 } count:3];
}

- (jdouble)distanceWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getInhomCoordsInD3])) distanceWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getInhomCoordsInD3]];
}

- (jdouble)distanceWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P {
  return GeogebraCommonKernelGeosGeoPoint_distanceWithGeogebraCommonKernelGeosGeoPoint_(self, P);
}

- (jdouble)distanceWithDouble:(jdouble)x
                   withDouble:(jdouble)y {
  return GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x - inhomX_, y - inhomY_);
}

+ (jboolean)samePositionWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                        withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q {
  return GeogebraCommonKernelGeosGeoPoint_samePositionWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(P, Q);
}

- (jdouble)distanceSqrWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P {
  jdouble vx = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P))->inhomX_ - inhomX_;
  jdouble vy = P->inhomY_ - inhomY_;
  return vx * vx + vy * vy;
}

+ (jboolean)collinearWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                     withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                     withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)C {
  return GeogebraCommonKernelGeosGeoPoint_collinearWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(A, B, C);
}

+ (jdouble)detWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
              withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q {
  return GeogebraCommonKernelGeosGeoPoint_detWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(P, Q);
}

+ (jdouble)affineRatioWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                      withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                      withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)C {
  return GeogebraCommonKernelGeosGeoPoint_affineRatioWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(A, B, C);
}

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, x_ + [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX] * z_, y_ + [v getY] * z_, z_);
}

- (jboolean)isTranslateable {
  return YES;
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)rval
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)S {
  jdouble r = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble];
  jdouble temp = (1 - r);
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, r * x_ + temp * [((GeogebraCommonKernelMatrixCoords *) nil_chk(S)) getX] * z_, r * y_ + temp * [S getY] * z_, z_);
}

- (void)dilateWithDouble:(jdouble)r {
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, r * x_, r * y_, z_);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue {
  jdouble phi = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, x_ * cos - y_ * sin, x_ * sin + y_ * cos, z_);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point {
  GeogebraCommonKernelGeosGeoPoint_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_(self, phiValue, point);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonKernelGeosGeoPoint_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_(self, phiValue, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoords]);
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Q {
  jdouble qx = z_ * [((GeogebraCommonKernelMatrixCoords *) nil_chk(Q)) getX];
  jdouble qy = z_ * [Q getY];
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, 2.0 * qx - x_, 2.0 * qy - y_, z_);
}

- (void)mirrorWithGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c {
  if ([((GeogebraCommonKernelGeosGeoConic *) nil_chk(c)) getType] == 4) {
    jdouble r = IOSDoubleArray_Get(nil_chk([c getHalfAxes]), 0);
    GeogebraCommonKernelGeosGeoVec2D *midpoint = ([c getTranslationVector]);
    jdouble a = [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(midpoint)) getX];
    jdouble b = [midpoint getY];
    if (JavaLangDouble_isInfiniteWithDouble_(x_) || JavaLangDouble_isInfiniteWithDouble_(y2D_)) GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, a, b, 1.0);
    else {
      jdouble sf = r * r / ((inhomX_ - a) * (inhomX_ - a) + (inhomY_ - b) * (inhomY_ - b));
      GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, a + sf * (inhomX_ - a), b + sf * (inhomY_ - b), 1.0);
    }
  }
  else {
    [self setUndefined];
  }
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g1 {
  GeogebraCommonKernelGeosGeoLine *g = (GeogebraCommonKernelGeosGeoLine *) check_class_cast(g1, [GeogebraCommonKernelGeosGeoLine class]);
  jdouble qx, qy;
  if (JavaLangMath_absWithDouble_([((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) getX]) > JavaLangMath_absWithDouble_([g getY])) {
    qx = -z_ * [g getZ] / [g getX];
    qy = 0.0;
  }
  else {
    qx = 0.0;
    qy = -z_ * [g getZ] / [g getY];
  }
  x_ -= qx;
  y_ -= qy;
  [self mirrorXYWithDouble:2.0 * JavaLangMath_atan2WithDouble_withDouble_(-[g getX], [g getY])];
  x_ += qx;
  y_ += qy;
  GeogebraCommonKernelGeosGeoPoint_updateCoords(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_GeoPoint_)) setLengthWithInt:0];
  [sbToString_GeoPoint_ appendWithNSString:label_];
  GeogebraCommonKernelGeosGeoPoint_addEqualSignToStringWithJavaLangStringBuilder_withInt_withInt_(sbToString_GeoPoint_, toStringMode_, [((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getCoordStyleWithInt:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getCoordStyle]]);
  [sbToString_GeoPoint_ appendWithNSString:[((JavaLangStringBuilder *) nil_chk(GeogebraCommonKernelGeosGeoPoint_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl))) description]];
  return [sbToString_GeoPoint_ description];
}

+ (void)addEqualSignToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbToString
                                              withInt:(jint)toStringMode
                                              withInt:(jint)coordStyle {
  GeogebraCommonKernelGeosGeoPoint_addEqualSignToStringWithJavaLangStringBuilder_withInt_withInt_(sbToString, toStringMode, coordStyle);
}

- (NSString *)toStringMinimalWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_GeoPoint_)) setLengthWithInt:0];
  [sbToString_GeoPoint_ appendWithNSString:GeogebraCommonKernelGeosGeoPoint_toValueStringMinimalWithGeogebraCommonKernelStringTemplate_(self, tpl)];
  return [sbToString_GeoPoint_ description];
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((JavaLangStringBuilder *) nil_chk(GeogebraCommonKernelGeosGeoPoint_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl))) description];
}

- (NSString *)toValueStringMinimalWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelGeosGeoPoint_toValueStringMinimalWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelGeosGeoPoint_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

+ (void)buildValueStringCoordCartesian3DWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                            withDouble:(jdouble)x
                                                            withDouble:(jdouble)y
                                                            withDouble:(jdouble)z
                                             withJavaLangStringBuilder:(JavaLangStringBuilder *)sbBuildValueString {
  GeogebraCommonKernelGeosGeoPoint_buildValueStringCoordCartesian3DWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(kernel, tpl, x, y, z, sbBuildValueString);
}

+ (NSString *)buildValueStringSeparatorWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                               withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelGeosGeoPoint_buildValueStringSeparatorWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_(kernel, tpl);
}

+ (void)buildValueStringCoordSphericalWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                              withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                          withDouble:(jdouble)x
                                                          withDouble:(jdouble)y
                                                          withDouble:(jdouble)z
                                           withJavaLangStringBuilder:(JavaLangStringBuilder *)sbBuildValueString {
  GeogebraCommonKernelGeosGeoPoint_buildValueStringCoordSphericalWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(kernel, tpl, x, y, z, sbBuildValueString);
}

+ (void)buildValueStringWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                               withInt:(jint)toStringMode
                                            withDouble:(jdouble)x
                                            withDouble:(jdouble)y
                             withJavaLangStringBuilder:(JavaLangStringBuilder *)sbBuildValueString {
  GeogebraCommonKernelGeosGeoPoint_buildValueStringWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withInt_withDouble_withDouble_withJavaLangStringBuilder_(kernel, tpl, toStringMode, x, y, sbBuildValueString);
}

- (GeogebraCommonKernelGeosGeoVec2D *)getVector {
  GeogebraCommonKernelGeosGeoVec2D *ret = [new_GeogebraCommonKernelGeosGeoVec2D_initWithGeogebraCommonKernelKernel_withDouble_withDouble_(kernel_, inhomX_, inhomY_) autorelease];
  [ret setModeWithInt:toStringMode_];
  return ret;
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelAlgosAlgoElement *algo;
  if (([(algo = [self getParentAlgorithm]) isKindOfClass:[GeogebraCommonKernelAlgosAlgoPointOnPath class]])) {
    if ([[((GeogebraCommonKernelAlgosAlgoPointOnPath *) nil_chk(((GeogebraCommonKernelAlgosAlgoPointOnPath *) check_class_cast(algo, [GeogebraCommonKernelAlgosAlgoPointOnPath class])))) getPath] isKindOfClass:[GeogebraCommonKernelKernelNDGeoCurveCartesianND class]]) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<curveParam"];
      [sb appendWithNSString:@" t=\""];
      [sb appendWithDouble:((GeogebraCommonKernelPathParameter *) nil_chk(GeogebraCommonKernelGeosGeoPoint_getPathParameter(self)))->t_];
      [sb appendWithNSString:@"\""];
      [sb appendWithNSString:@"/>\n"];
    }
  }
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  switch (toStringMode_) {
    case GeogebraCommonKernelKernel_COORD_POLAR:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"polar\"/>\n"];
    break;
    case GeogebraCommonKernelKernel_COORD_COMPLEX:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"complex\"/>\n"];
    break;
    case GeogebraCommonKernelKernel_COORD_CARTESIAN_3D:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"cartesian3d\"/>\n"];
    break;
    case GeogebraCommonKernelKernel_COORD_SPHERICAL:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"spherical\"/>\n"];
    break;
    default:
    ;
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<pointSize val=\""];
  [sb appendWithInt:[self getPointSize]];
  [sb appendWithNSString:@"\"/>\n"];
  if (pointStyle_ >= 0) {
    [sb appendWithNSString:@"\t<pointStyle val=\""];
    [sb appendWithInt:pointStyle_];
    [sb appendWithNSString:@"\"/>\n"];
  }
}

- (NSString *)getStartPointXML {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"\t<startPoint "];
  if (GeogebraCommonKernelGeosGeoPoint_isAbsoluteStartPoint(self)) {
    [sb appendWithNSString:JreStrcat("$DC", @" x=\"", x_, '"')];
    [sb appendWithNSString:JreStrcat("$DC", @" y=\"", y_, '"')];
    [sb appendWithNSString:JreStrcat("$DC", @" z=\"", z_, '"')];
  }
  else {
    [sb appendWithNSString:@"exp=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_xmlTemplate_()]);
    [sb appendWithNSString:@"\""];
  }
  [sb appendWithNSString:@"/>\n"];
  return [sb description];
}

- (jboolean)isAbsoluteStartPoint {
  return GeogebraCommonKernelGeosGeoPoint_isAbsoluteStartPoint(self);
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)evaluatesToNonComplex2DVector {
  return [self getMode] != GeogebraCommonKernelKernel_COORD_COMPLEX;
}

- (jboolean)evaluatesToVectorNotPoint {
  return NO;
}

- (void)update {
  [super update];
  if (locateableList_ != nil) {
    GeogebraCommonKernelGeosGeoElement_updateCascadeLocationWithJavaUtilArrayList_withGeogebraCommonKernelConstruction_(locateableList_, cons_);
  }
}

+ (JavaUtilTreeSet *)getTempSet {
  return GeogebraCommonKernelGeosGeoPoint_getTempSet();
}

- (GeogebraCommonKernelLocateableList *)getLocateableList {
  if (locateableList_ == nil) GeogebraCommonKernelGeosGeoPoint_setAndConsume_locateableList_(self, new_GeogebraCommonKernelLocateableList_initWithGeogebraCommonKernelKernelNDGeoPointND_(self));
  return locateableList_;
}

- (void)doRemove {
  if (locateableList_ != nil) {
    [locateableList_ doRemove];
  }
  if (path_ != nil) {
    GeogebraCommonKernelGeosGeoElement *geo = [path_ toGeoElement];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConic]) {
      [((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoConicND class])) removePointOnConicWithGeogebraCommonKernelKernelNDGeoPointND:self];
    }
  }
  if (incidenceList_ != nil) {
    for (jint i = 0; i < [incidenceList_ size]; ++i) {
      GeogebraCommonKernelGeosGeoElement *geo = [incidenceList_ getWithInt:i];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConic]) {
        [((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoConicND class])) removePointOnConicWithGeogebraCommonKernelKernelNDGeoPointND:self];
      }
      else if ([geo isGeoLine]) {
        [((id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoLineND))) removePointOnLineWithGeogebraCommonKernelKernelNDGeoPointND:self];
      }
    }
  }
  [super doRemove];
}

- (void)setVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [super setVisualStyleWithGeogebraCommonKernelGeosGeoElement:geo];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
    [self setPointSizeWithInt:[((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) getPointSize]];
    pointStyle_ = [((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) getPointStyle];
  }
  else if ([GeogebraCommonKernelGeosPointProperties_class_() isInstance:geo]) {
    [self setPointSizeWithInt:[((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosPointProperties))) getPointSize]];
    [self setPointStyleWithInt:[((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosPointProperties))) getPointStyle]];
  }
}

- (jboolean)isGeoPoint {
  return YES;
}

- (void)showUndefinedInAlgebraViewWithBoolean:(jboolean)flag {
  showUndefinedInAlgebraView__ = flag;
}

+ (id<JavaUtilComparator>)getComparatorX {
  return GeogebraCommonKernelGeosGeoPoint_getComparatorX();
}

- (jboolean)isPointInRegion {
  return region_ != nil;
}

- (jboolean)hasRegion {
  return region_ != nil;
}

- (id<GeogebraCommonKernelRegion>)getRegion {
  return region_;
}

- (void)setRegionWithGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)a_region {
  GeogebraCommonKernelGeosGeoPoint_set_region_(self, a_region);
}

- (void)updateCoords2D {
  x2D_ = x_ / z_;
  y2D_ = y_ / z_;
}

- (jdouble)getX2D {
  return x2D_;
}

- (jdouble)getY2D {
  return y2D_;
}

- (void)updateCoordsFrom2DWithBoolean:(jboolean)doPathOrRegion
withGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)coordsys {
  if (coordsys != nil) {
    [self updateCoords2D];
    [self setCoordsWithGeogebraCommonKernelMatrixCoords:[coordsys getPointWithDouble:[self getX2D] withDouble:[self getY2D]] withBoolean:doPathOrRegion];
  }
}

- (void)updateCoordsFrom2DWithBoolean:(jboolean)doPathOrRegion {
}

- (GeogebraCommonKernelMatrixCoords *)getInhomCoords {
  if (inhomCoords2D_ == nil) {
    GeogebraCommonKernelGeosGeoPoint_setAndConsume_inhomCoords2D_(self, new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ inhomX_, inhomY_ } count:2]));
  }
  else {
    [self->inhomCoords2D_ setWithInt:1 withDouble:inhomX_];
    [self->inhomCoords2D_ setWithInt:2 withDouble:inhomY_];
  }
  return inhomCoords2D_;
}

- (GeogebraCommonKernelMatrixCoords *)getInhomCoordsInDWithInt:(jint)dimension {
  switch (dimension) {
    case 2:
    return [self getInhomCoords];
    case 3:
    return [self getInhomCoordsInD3];
    default:
    return nil;
  }
}

- (GeogebraCommonKernelMatrixCoords *)getInhomCoordsInD3 {
  if (inhomCoords3D_ == nil) {
    GeogebraCommonKernelGeosGeoPoint_setAndConsume_inhomCoords3D_(self, new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ inhomX_, inhomY_, 0, 1 } count:4]));
  }
  else {
    [self->inhomCoords3D_ setWithInt:1 withDouble:inhomX_];
    [self->inhomCoords3D_ setWithInt:2 withDouble:inhomY_];
  }
  return inhomCoords3D_;
}

- (GeogebraCommonKernelMatrixCoords *)getInhomCoordsInD2 {
  return [self getInhomCoords];
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsInD2WithGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)coordSys {
  if (coords2D_ == nil) {
    GeogebraCommonKernelGeosGeoPoint_setAndConsume_coords2D_(self, new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ x_, y_, z_ } count:3]));
  }
  else {
    if (coordSys == nil) {
      [coords2D_ setWithInt:1 withDouble:x_];
      [coords2D_ setWithInt:2 withDouble:y_];
      [coords2D_ setWithInt:3 withDouble:z_];
    }
    else {
      if (tmpMatrix4x4_ == nil) {
        GeogebraCommonKernelGeosGeoPoint_setAndConsume_tmpMatrix4x4_(self, new_GeogebraCommonKernelMatrixCoordMatrix4x4_init());
      }
      [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_)) setWithGeogebraCommonKernelMatrixCoordMatrix:[coordSys getMatrixOrthonormal]];
      if (tmpCoords_ == nil) {
        GeogebraCommonKernelGeosGeoPoint_setAndConsume_tmpCoords_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
      }
      [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getCoordsInD3])) projectPlaneInPlaneCoordsWithGeogebraCommonKernelMatrixCoordMatrix:tmpMatrix4x4_ withGeogebraCommonKernelMatrixCoords:tmpCoords_];
      [coords2D_ setXWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) getX]];
      [coords2D_ setYWithDouble:[tmpCoords_ getY]];
      [coords2D_ setZWithDouble:[tmpCoords_ getW]];
    }
  }
  return coords2D_;
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsInD2 {
  return [self getCoordsInD2WithGeogebraCommonKernelMatrixCoordSys:nil];
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsInD3 {
  return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(x_, y_, 0, z_) autorelease];
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsInDWithInt:(jint)dimension {
  switch (dimension) {
    case 2:
    return [self getCoordsInD2];
    case 3:
    return [self getCoordsInD3];
    default:
    return nil;
  }
}

- (jboolean)isMatrixTransformable {
  return YES;
}

- (void)matrixTransformWithDouble:(jdouble)a
                       withDouble:(jdouble)b
                       withDouble:(jdouble)c
                       withDouble:(jdouble)d {
  JavaLangDouble *x1 = JavaLangDouble_valueOfWithDouble_(a * x_ + b * y_);
  JavaLangDouble *y1 = JavaLangDouble_valueOfWithDouble_(c * x_ + d * y_);
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, [x1 doubleValue], [y1 doubleValue], z_);
}

- (jboolean)hasDrawable3D {
  return YES;
}

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [self getInhomCoordsInD3];
}

- (void)pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  GeogebraCommonKernelGeosGeoPoint_pointChangedWithGeogebraCommonKernelKernelNDGeoPointND_withDouble_withDouble_withDouble_(p, x_, y_, z_);
}

+ (void)pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p
                                                    withDouble:(jdouble)x
                                                    withDouble:(jdouble)y
                                                    withDouble:(jdouble)z {
  GeogebraCommonKernelGeosGeoPoint_pointChangedWithGeogebraCommonKernelKernelNDGeoPointND_withDouble_withDouble_withDouble_(p, x, y, z);
}

- (void)pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI {
  [self pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:PI];
}

- (jboolean)isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI
                                                    withDouble:(jdouble)eps {
  return GeogebraCommonKernelGeosGeoPoint_isEqualWithGeogebraCommonKernelGeosGeoElement_(self, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(PI, [GeogebraCommonKernelGeosGeoElement class]));
}

- (jdouble)getMinParameter {
  return 0;
}

- (jdouble)getMaxParameter {
  return 0;
}

- (jboolean)isClosedPath {
  return NO;
}

- (id<GeogebraCommonKernelPathMover>)createPathMover {
  return nil;
}

- (jdouble)getAnimationValue {
  return animationValue_;
}

- (void)setAnimationValueWithDouble:(jdouble)val {
  animationValue_ = val;
}

+ (jboolean)doAnimationStepWithDouble:(jdouble)frameRate
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p
         withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path {
  return GeogebraCommonKernelGeosGeoPoint_doAnimationStepWithDouble_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelPath_(frameRate, p, path);
}

- (jboolean)doAnimationStepWithDouble:(jdouble)frameRate {
  @synchronized(self) {
    return GeogebraCommonKernelGeosGeoPoint_doAnimationStepWithDouble_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelPath_(frameRate, self, path_);
  }
}

- (void)switchMoveModeWithInt:(jint)mode {
}

- (jint)getMoveMode {
  if (![self isIndependent] || [self isFixed]) return GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_NONE;
  else if ([self hasPath]) return GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_Z;
  else return GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY;
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (jboolean)isFixed {
  return fixed_;
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  jdouble x1 = a00 * x_ + a01 * y_ + a02 * z_;
  jdouble y1 = a10 * x_ + a11 * y_ + a12 * z_;
  jdouble z1 = a20 * x_ + a21 * y_ + a22 * z_;
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, x1, y1, z1);
}

- (void)removePath {
  GeogebraCommonKernelGeosGeoPoint_set_path_(self, nil);
  GeogebraCommonKernelGeosGeoPoint_set_pathParameter_(self, nil);
}

- (void)setCoordsWithDouble:(jdouble)x
                 withDouble:(jdouble)y
                 withDouble:(jdouble)z
                 withDouble:(jdouble)w {
}

- (void)moveDependenciesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldGeo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(oldGeo)) isGeoPoint] && [((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(oldGeo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) hasLocateableList]) {
    GeogebraCommonKernelGeosGeoPoint_set_locateableList_(self, [((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(oldGeo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) getLocateableList]);
    for (id<GeogebraCommonKernelLocateable> __strong locPoint in nil_chk(locateableList_)) {
      IOSObjectArray *pts = [((id<GeogebraCommonKernelLocateable>) nil_chk(locPoint)) getStartPoints];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(pts))->size_; i++) if (IOSObjectArray_Get(pts, i) == (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(oldGeo, [GeogebraCommonKernelGeosGeoPoint class])) IOSObjectArray_Set(pts, i, self);
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([locPoint toGeoElement])) updateRepaint];
    }
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(oldGeo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) setLocateableListWithGeogebraCommonKernelLocateableList:nil];
  }
}

- (JavaUtilArrayList *)getIncidenceList {
  return incidenceList_;
}

- (JavaUtilArrayList *)getNonIncidenceList {
  return nonIncidenceList_;
}

- (void)setIncidenceListWithJavaUtilArrayList:(JavaUtilArrayList *)list {
  if (list == nil) GeogebraCommonKernelGeosGeoPoint_setAndConsume_incidenceList_(self, new_JavaUtilArrayList_init());
  else GeogebraCommonKernelGeosGeoPoint_setAndConsume_incidenceList_(self, new_JavaUtilArrayList_initWithJavaUtilCollection_(list));
}

- (void)createIncidenceList {
  GeogebraCommonKernelGeosGeoPoint_setAndConsume_incidenceList_(self, new_JavaUtilArrayList_init());
  [incidenceList_ addWithId:self];
}

- (void)createNonIncidenceList {
  GeogebraCommonKernelGeosGeoPoint_setAndConsume_nonIncidenceList_(self, new_JavaUtilArrayList_init());
}

- (void)addIncidenceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                               withBoolean:(jboolean)isStartPoint {
  if (incidenceList_ == nil) [self createIncidenceList];
  if (![((JavaUtilArrayList *) nil_chk(incidenceList_)) containsWithId:geo]) [incidenceList_ addWithId:geo];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConic]) [((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoConicND class])) addPointOnConicWithGeogebraCommonKernelKernelNDGeoPointND:self];
  else if ([geo isGeoLine] && !isStartPoint) [((id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoLineND))) addPointOnLineWithGeogebraCommonKernelKernelNDGeoPointND:self];
}

- (void)addNonIncidenceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (nonIncidenceList_ == nil) [self createNonIncidenceList];
  if (![((JavaUtilArrayList *) nil_chk(nonIncidenceList_)) containsWithId:geo]) [nonIncidenceList_ addWithId:geo];
}

- (void)removeIncidenceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (incidenceList_ != nil) [incidenceList_ removeWithId:geo];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConic]) [((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoConicND class])) removePointOnConicWithGeogebraCommonKernelKernelNDGeoPointND:self];
  else if ([geo isGeoLine]) [((id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoLineND))) removePointOnLineWithGeogebraCommonKernelKernelNDGeoPointND:self];
}

- (jboolean)addIncidenceWithProbabilisticCheckingWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  jboolean incident = NO;
  if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint] && GeogebraCommonKernelGeosGeoPoint_isEqualWithGeogebraCommonKernelGeosGeoElement_(self, geo)) || ([geo isPath] && [((id<GeogebraCommonKernelPath>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelPath))) isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:self withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION])) {
    incident = YES;
    JavaUtilTreeSet *pred = [self getAllRandomizablePredecessors];
    JavaUtilArrayList *predList = [new_JavaUtilArrayList_init() autorelease];
    JavaUtilTreeSet *tmpSet = GeogebraCommonKernelGeosGeoElement_getTempSet();
    [predList addAllWithJavaUtilCollection:pred];
    [((JavaUtilTreeSet *) nil_chk(pred)) addAllWithJavaUtilCollection:[geo getAllRandomizablePredecessors]];
    id<JavaUtilIterator> it = [pred iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonKernelGeosGeoElement *predGeo = [it next];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(predGeo)) storeClone];
    }
    for (jint i = 0; i < 5; ++i) {
      it = [pred iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        GeogebraCommonKernelGeosGeoElement *predGeo = [it next];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(predGeo)) randomizeForProbabilisticChecking];
      }
      GeogebraCommonKernelGeosGeoElement_updateCascadeUntilWithJavaUtilArrayList_withJavaUtilTreeSet_withGeogebraCommonKernelAlgosAlgoElement_(predList, [new_JavaUtilTreeSet_init() autorelease], self->algoParent_);
      GeogebraCommonKernelGeosGeoElement_updateCascadeUntilWithJavaUtilArrayList_withJavaUtilTreeSet_withGeogebraCommonKernelAlgosAlgoElement_(predList, [new_JavaUtilTreeSet_init() autorelease], geo->algoParent_);
      if ([geo isGeoPoint]) {
        if (!GeogebraCommonKernelGeosGeoPoint_isEqualWithGeogebraCommonKernelGeosGeoElement_(self, geo)) incident = NO;
      }
      else if ([geo isPath]) {
        if (![((id<GeogebraCommonKernelPath>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelPath))) isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:self withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) incident = NO;
      }
      else {
        incident = NO;
      }
      if (!incident) break;
    }
    it = [pred iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonKernelGeosGeoElement *predGeo = [it next];
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(predGeo)) isIndependent]) {
        GeogebraCommonKernelGeosGeoElement_updateCascadeUntilWithJavaUtilArrayList_withJavaUtilTreeSet_withGeogebraCommonKernelAlgosAlgoElement_(predList, tmpSet, predGeo->algoParent_);
      }
      [predGeo recoverFromClone];
    }
    GeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(predList, tmpSet, NO);
    if (incident) [self addIncidenceWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:NO];
    else [self addNonIncidenceWithGeogebraCommonKernelGeosGeoElement:geo];
  }
  return incident;
}

- (jboolean)isRandomizable {
  return [self isChangeable];
}

- (void)randomizeForProbabilisticChecking {
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, x_ + (JavaLangMath_random() * 2 - 1) * z_, y_ + (JavaLangMath_random() * 2 - 1) * z_, z_);
}

- (void)setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algorithm {
  [super setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algorithm];
  if (algorithm != nil) [self setConstructionDefaults];
}

- (jboolean)movePointWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)a
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)b {
  return [super movePointWithGeogebraCommonKernelMatrixCoords:a withGeogebraCommonKernelMatrixCoords:b];
}

- (void)setXWithDouble:(jdouble)x {
  self->x_ = x;
}

- (void)setYWithDouble:(jdouble)y {
  self->y_ = y;
}

- (void)setZWithDouble:(jdouble)z {
  self->z_ = z;
}

- (void)updateColumnHeadingsForTraceValues {
  [self resetSpreadsheetColumnHeadings];
  [((JavaUtilArrayList *) nil_chk(spreadsheetColumnHeadings_)) addWithId:[self getColumnHeadingTextWithGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getXBracket], GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getNameGeo], GeogebraCommonPluginOperationEnum_get_PLUS(), [self getCloseBracket]) autorelease]) autorelease]]];
  [spreadsheetColumnHeadings_ addWithId:[self getColumnHeadingTextWithGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getYBracket], GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getNameGeo], GeogebraCommonPluginOperationEnum_get_PLUS(), [self getCloseBracket]) autorelease]) autorelease]]];
}

- (GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)getTraceModes {
  return GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_SEVERAL_VALUES_OR_COPY();
}

- (NSString *)getTraceDialogAsValues {
  NSString *name = [self getLabelTextOrHTMLWithBoolean:NO];
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"x("];
  [sb appendWithNSString:name];
  [sb appendWithNSString:@"), y("];
  [sb appendWithNSString:name];
  [sb appendWithNSString:@")"];
  return [sb description];
}

- (void)addToSpreadsheetTraceListWithJavaUtilArrayList:(JavaUtilArrayList *)spreadsheetTraceList {
  GeogebraCommonKernelGeosGeoNumeric *xx = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, inhomX_) autorelease];
  [((JavaUtilArrayList *) nil_chk(spreadsheetTraceList)) addWithId:xx];
  if ([self isPolar]) {
    GeogebraCommonKernelGeosGeoAngle *yy = [new_GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, inhomY_) autorelease];
    [spreadsheetTraceList addWithId:yy];
  }
  else {
    GeogebraCommonKernelGeosGeoNumeric *yy = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, inhomY_) autorelease];
    [spreadsheetTraceList addWithId:yy];
  }
}

- (GeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  return [new_GeogebraCommonKernelAlgosSymbolicParameters_initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self) autorelease];
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if (algoParent_ == nil) {
    if (variableCoordinate1_ == nil) {
      GeogebraCommonKernelGeosGeoPoint_setAndConsume_variableCoordinate1_(self, new_GeogebraCommonKernelProverPolynomialVariable_initWithGeogebraCommonKernelGeosGeoElement_(self));
    }
    if (variableCoordinate2_ == nil) {
      GeogebraCommonKernelGeosGeoPoint_setAndConsume_variableCoordinate2_(self, new_GeogebraCommonKernelProverPolynomialVariable_initWithGeogebraCommonKernelGeosGeoElement_(self));
    }
    [((GeogebraCommonKernelProverPolynomialVariable *) nil_chk(variableCoordinate1_)) setTwinWithGeogebraCommonKernelProverPolynomialVariable:variableCoordinate2_];
    [((GeogebraCommonKernelProverPolynomialVariable *) nil_chk(variableCoordinate2_)) setTwinWithGeogebraCommonKernelProverPolynomialVariable:variableCoordinate1_];
    [((JavaUtilHashSet *) nil_chk(variables)) addWithId:variableCoordinate1_];
    [variables addWithId:variableCoordinate2_];
    return;
  }
  if (algoParent_ != nil && [GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_]) {
    [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSIntArray *)getDegrees {
  if (algoParent_ == nil) {
    IOSObjectArray *fixedElements = GeogebraCommonKernelProverAbstractProverReciosMethod_getFixedPoints();
    if (fixedElements != nil) {
      jboolean isContained = NO;
      {
        IOSObjectArray *a__ = fixedElements;
        GeogebraCommonKernelGeosGeoElement * const *b__ = a__->buffer_;
        GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          GeogebraCommonKernelGeosGeoElement *ge = *b__++;
          if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(ge)) isEqual:self]) {
            isContained = YES;
          }
        }
      }
      if (isContained) {
        IOSIntArray *result = [IOSIntArray arrayWithInts:(jint[]){ 0, 0, 0 } count:3];
        return result;
      }
    }
    IOSIntArray *result = [IOSIntArray arrayWithInts:(jint[]){ 1, 1, 0 } count:3];
    return result;
  }
  if ([GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_]) {
    return [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getDegrees];
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if (algoParent_ == nil) {
    IOSObjectArray *result = [IOSObjectArray arrayWithLength:3 type:JavaMathBigInteger_class_()];
    IOSObjectArray_Set(result, 0, [((JavaUtilHashMap *) nil_chk(values)) getWithId:variableCoordinate1_]);
    IOSObjectArray_Set(result, 1, [values getWithId:variableCoordinate2_]);
    IOSObjectArray_Set(result, 2, JavaMathBigInteger_get_ONE_());
    if (IOSObjectArray_Get(result, 0) == nil || IOSObjectArray_Get(result, 1) == nil) {
      @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
    }
    return result;
  }
  if ([GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_]) {
    return [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getExactCoordinatesWithJavaUtilHashMap:values];
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getPolynomials {
  if (algoParent_ == nil) {
    if (variableCoordinate1_ == nil) {
      GeogebraCommonKernelGeosGeoPoint_setAndConsume_variableCoordinate1_(self, new_GeogebraCommonKernelProverPolynomialVariable_initWithGeogebraCommonKernelGeosGeoElement_(self));
    }
    if (variableCoordinate2_ == nil) {
      GeogebraCommonKernelGeosGeoPoint_setAndConsume_variableCoordinate2_(self, new_GeogebraCommonKernelProverPolynomialVariable_initWithGeogebraCommonKernelGeosGeoElement_(self));
    }
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(variableCoordinate1_) autorelease], [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(variableCoordinate2_) autorelease], [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(1) autorelease] } count:3 type:GeogebraCommonKernelProverPolynomialPolynomial_class_()];
    return ret;
  }
  if (algoParent_ != nil && [GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_]) {
    return [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) getPolynomials];
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (algoParent_ != nil && [GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo_class_() isInstance:algoParent_]) {
    return [((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(algoParent_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))) getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:self];
  }
  if (algoParent_ == nil) {
    if (botanaVars_ == nil) {
      GeogebraCommonKernelGeosGeoPoint_setAndConsume_botanaVars_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelProverPolynomialVariable_class_()]);
      IOSObjectArray_SetAndConsume(botanaVars_, 0, new_GeogebraCommonKernelProverPolynomialVariable_initWithBoolean_(YES));
      IOSObjectArray_SetAndConsume(botanaVars_, 1, new_GeogebraCommonKernelProverPolynomialVariable_initWithBoolean_(YES));
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$C@C@C", @"Free point ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelSimple], '(', IOSObjectArray_Get(botanaVars_, 0), ',', IOSObjectArray_Get(botanaVars_, 1), ')'));
    }
  }
  return botanaVars_;
}

- (IOSObjectArray *)getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (algoParent_ != nil && [GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo_class_() isInstance:algoParent_]) {
    return [((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(algoParent_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))) getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:self];
  }
  return nil;
}

- (jint)getDimension {
  return 2;
}

- (jdouble)distanceToPathWithGeogebraCommonKernelPathOrPoint:(id<GeogebraCommonKernelPathOrPoint>)path1 {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((id<GeogebraCommonKernelPathOrPoint>) nil_chk(path1)) toGeoElement])) distanceWithGeogebraCommonKernelGeosGeoPoint:self];
}

- (jboolean)hasLocateableList {
  return locateableList_ != nil;
}

- (void)setLocateableListWithGeogebraCommonKernelLocateableList:(GeogebraCommonKernelLocateableList *)locateableList {
  GeogebraCommonKernelGeosGeoPoint_set_locateableList_(self, locateableList);
}

- (void)setCoordsFromPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithGeogebraCommonKernelGeosGeoVec3D_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(point, [GeogebraCommonKernelGeosGeoPoint class]));
}

- (void)setWithDouble:(jdouble)param1
           withDouble:(jdouble)param2
withGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)leftPoint
withGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)rightPoint {
  x_ = param2 * ((GeogebraCommonKernelMyPoint *) nil_chk(leftPoint))->x_ + param1 * ((GeogebraCommonKernelMyPoint *) nil_chk(rightPoint))->x_;
  y_ = param2 * leftPoint->y_ + param1 * rightPoint->y_;
  z_ = 1.0;
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (void)dealloc {
  RELEASE_(path_);
  RELEASE_(pathParameter_);
  RELEASE_(region_);
  RELEASE_(regionParameters_);
  RELEASE_(variableCoordinate1_);
  RELEASE_(variableCoordinate2_);
  RELEASE_(botanaVars_);
  RELEASE_(locateableList_);
  RELEASE_(changeableCoordNumbers_);
  RELEASE_(tempPathParameter_);
  RELEASE_(sbToString_GeoPoint_);
  RELEASE_(sbBuildValueString_);
  RELEASE_(coords2D_);
  RELEASE_(inhomCoords3D_);
  RELEASE_(inhomCoords2D_);
  RELEASE_(tmpMatrix4x4_);
  RELEASE_(tmpCoords_);
  RELEASE_(incidenceList_);
  RELEASE_(nonIncidenceList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoPoint", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withBoolean:", "GeoPoint", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withDouble:withDouble:withDouble:", "GeoPoint", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withDouble:withDouble:withDouble:", "GeoPoint", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelPath:", "GeoPoint", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelRegion:", "GeoPoint", NULL, 0x1, NULL, NULL },
    { "setZero", NULL, "V", 0x1, NULL, NULL },
    { "clearPathParameter", NULL, "V", 0x11, NULL, NULL },
    { "getPathParameter", NULL, "Lgeogebra.common.kernel.PathParameter;", 0x11, NULL, NULL },
    { "getRegionParameters", NULL, "Lgeogebra.common.kernel.RegionParameters;", 0x11, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelGeosGeoPoint:", "GeoPoint", NULL, 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelKernelNDGeoPointND:", "set", "V", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "setPointSizeWithInt:", "setPointSize", "V", 0x1, NULL, NULL },
    { "getPointSize", NULL, "I", 0x1, NULL, NULL },
    { "getPointStyle", NULL, "I", 0x11, NULL, NULL },
    { "setPointStyleWithInt:", "setPointStyle", "V", 0x1, NULL, NULL },
    { "isChangeable", NULL, "Z", 0x1, NULL, NULL },
    { "isPointChangeableWithGeogebraCommonKernelGeosGeoElement:", "isPointChangeable", "Z", 0x19, NULL, NULL },
    { "moveFromChangeableCoordParentNumbersWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withJavaUtilArrayList:withJavaUtilArrayList:withGeogebraCommonEuclidianEuclidianView:", "moveFromChangeableCoordParentNumbers", "Z", 0x1, NULL, NULL },
    { "hasChangeableCoordParentNumbers", NULL, "Z", 0x11, NULL, NULL },
    { "getCoordParentNumbers", NULL, "Ljava.util.ArrayList;", 0x11, NULL, NULL },
    { "hasPolarParentNumbers", NULL, "Z", 0x1, NULL, NULL },
    { "getCoordNumberWithGeogebraCommonKernelArithmeticExpressionValue:withBoolean:", "getCoordNumber", "Lgeogebra.common.kernel.arithmetic.NumberValue;", 0x2, "Ljava.lang.Throwable;", NULL },
    { "isPointOnPath", NULL, "Z", 0x11, NULL, NULL },
    { "isAnimatable", NULL, "Z", 0x1, NULL, NULL },
    { "hasPath", NULL, "Z", 0x1, NULL, NULL },
    { "getPath", NULL, "Lgeogebra.common.kernel.Path;", 0x11, NULL, NULL },
    { "setPathWithGeogebraCommonKernelPath:", "setPath", "V", 0x1, NULL, NULL },
    { "addToPathParameterWithDouble:", "addToPathParameter", "V", 0x1, NULL, NULL },
    { "isInfinite", NULL, "Z", 0x11, NULL, NULL },
    { "isFinite", NULL, "Z", 0x11, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x11, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x11, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "isFixable", NULL, "Z", 0x11, NULL, NULL },
    { "setCoords2DWithDouble:withDouble:withDouble:", "setCoords2D", "V", 0x1, NULL, NULL },
    { "setCoordsWithDouble:withDouble:withDouble:", "setCoords", "V", 0x11, NULL, NULL },
    { "setUndefinedCoords", NULL, "V", 0x4, NULL, NULL },
    { "setCoordsWithGeogebraCommonKernelMatrixCoords:withBoolean:", "setCoords", "V", 0x1, NULL, NULL },
    { "getTempPathparameter", NULL, "Lgeogebra.common.kernel.PathParameter;", 0x2, NULL, NULL },
    { "updateCoords", NULL, "V", 0x11, NULL, NULL },
    { "setPolarCoordsWithDouble:withDouble:", "setPolarCoords", "V", 0x11, NULL, NULL },
    { "setCoordsWithGeogebraCommonKernelGeosGeoVec3D:", "setCoords", "V", 0x11, NULL, NULL },
    { "setCoordsWithGeogebraCommonKernelGeosGeoVec2D:", "setCoords", "V", 0x11, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x11, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:withDouble:", "isEqual", "Z", 0x11, NULL, NULL },
    { "isEqualPointNDWithGeogebraCommonKernelKernelNDGeoPointND:", "isEqualPointND", "Z", 0x1, NULL, NULL },
    { "isEqualPoint2DWithGeogebraCommonKernelGeosGeoPoint:", "isEqualPoint2D", "Z", 0x2, NULL, NULL },
    { "getInhomCoordsWithDoubleArray:", "getInhomCoords", "V", 0x11, NULL, NULL },
    { "getPolarCoordsWithDoubleArray:", "getPolarCoords", "V", 0x11, NULL, NULL },
    { "getInhomX", NULL, "D", 0x11, NULL, NULL },
    { "getInhomY", NULL, "D", 0x11, NULL, NULL },
    { "getInhomZ", NULL, "D", 0x11, NULL, NULL },
    { "vectorToWithGeogebraCommonKernelKernelNDGeoPointND:", "vectorTo", "[D", 0x11, NULL, NULL },
    { "distanceWithGeogebraCommonKernelKernelNDGeoPointND:", "distance", "D", 0x1, NULL, NULL },
    { "distanceWithGeogebraCommonKernelGeosGeoPoint:", "distance", "D", 0x11, NULL, NULL },
    { "distanceWithDouble:withDouble:", "distance", "D", 0x11, NULL, NULL },
    { "samePositionWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "samePosition", "Z", 0x19, NULL, NULL },
    { "distanceSqrWithGeogebraCommonKernelGeosGeoPoint:", "distanceSqr", "D", 0x11, NULL, NULL },
    { "collinearWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "collinear", "Z", 0x9, NULL, NULL },
    { "detWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "det", "D", 0x19, NULL, NULL },
    { "affineRatioWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "affineRatio", "D", 0x19, NULL, NULL },
    { "translateWithGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x11, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x11, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x11, NULL, NULL },
    { "dilateWithDouble:", "dilate", "V", 0x11, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x11, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x11, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelGeosGeoConic:", "mirror", "V", 0x11, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "addEqualSignToStringWithJavaLangStringBuilder:withInt:withInt:", "addEqualSignToString", "V", 0x19, NULL, NULL },
    { "toStringMinimalWithGeogebraCommonKernelStringTemplate:", "toStringMinimal", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringMinimalWithGeogebraCommonKernelStringTemplate:", "toValueStringMinimal", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "buildValueStringWithGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x2, NULL, NULL },
    { "buildValueStringCoordCartesian3DWithGeogebraCommonKernelKernel:withGeogebraCommonKernelStringTemplate:withDouble:withDouble:withDouble:withJavaLangStringBuilder:", "buildValueStringCoordCartesian3D", "V", 0x19, NULL, NULL },
    { "buildValueStringSeparatorWithGeogebraCommonKernelKernel:withGeogebraCommonKernelStringTemplate:", "buildValueStringSeparator", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "buildValueStringCoordSphericalWithGeogebraCommonKernelKernel:withGeogebraCommonKernelStringTemplate:withDouble:withDouble:withDouble:withJavaLangStringBuilder:", "buildValueStringCoordSpherical", "V", 0x19, NULL, NULL },
    { "buildValueStringWithGeogebraCommonKernelKernel:withGeogebraCommonKernelStringTemplate:withInt:withDouble:withDouble:withJavaLangStringBuilder:", "buildValueString", "V", 0x19, NULL, NULL },
    { "getVector", NULL, "Lgeogebra.common.kernel.geos.GeoVec2D;", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getStartPointXML", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isAbsoluteStartPoint", NULL, "Z", 0x11, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToNonComplex2DVector", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToVectorNotPoint", NULL, "Z", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "getTempSet", NULL, "Ljava.util.TreeSet;", 0xc, NULL, NULL },
    { "getLocateableList", NULL, "Lgeogebra.common.kernel.LocateableList;", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "setVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "setVisualStyle", "V", 0x1, NULL, NULL },
    { "isGeoPoint", NULL, "Z", 0x11, NULL, NULL },
    { "showUndefinedInAlgebraViewWithBoolean:", "showUndefinedInAlgebraView", "V", 0x1, NULL, NULL },
    { "getComparatorX", NULL, "Ljava.util.Comparator;", 0x9, NULL, NULL },
    { "isPointInRegion", NULL, "Z", 0x11, NULL, NULL },
    { "hasRegion", NULL, "Z", 0x1, NULL, NULL },
    { "getRegion", NULL, "Lgeogebra.common.kernel.Region;", 0x1, NULL, NULL },
    { "setRegionWithGeogebraCommonKernelRegion:", "setRegion", "V", 0x1, NULL, NULL },
    { "updateCoords2D", NULL, "V", 0x1, NULL, NULL },
    { "getX2D", NULL, "D", 0x1, NULL, NULL },
    { "getY2D", NULL, "D", 0x1, NULL, NULL },
    { "updateCoordsFrom2DWithBoolean:withGeogebraCommonKernelMatrixCoordSys:", "updateCoordsFrom2D", "V", 0x1, NULL, NULL },
    { "updateCoordsFrom2DWithBoolean:", "updateCoordsFrom2D", "V", 0x1, NULL, NULL },
    { "getInhomCoords", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getInhomCoordsInDWithInt:", "getInhomCoordsInD", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getInhomCoordsInD3", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getInhomCoordsInD2", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsInD2WithGeogebraCommonKernelMatrixCoordSys:", "getCoordsInD2", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsInD2", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsInD3", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsInDWithInt:", "getCoordsInD", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isMatrixTransformable", NULL, "Z", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:withDouble:withDouble:", "pointChanged", "V", 0x9, NULL, NULL },
    { "pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lgeogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "getAnimationValue", NULL, "D", 0x1, NULL, NULL },
    { "setAnimationValueWithDouble:", "setAnimationValue", "V", 0x1, NULL, NULL },
    { "doAnimationStepWithDouble:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelPath:", "doAnimationStep", "Z", 0x9, NULL, NULL },
    { "doAnimationStepWithDouble:", "doAnimationStep", "Z", 0x21, NULL, NULL },
    { "switchMoveModeWithInt:", "switchMoveMode", "V", 0x1, NULL, NULL },
    { "getMoveMode", NULL, "I", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x11, NULL, NULL },
    { "isFixed", NULL, "Z", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "removePath", NULL, "V", 0x1, NULL, NULL },
    { "setCoordsWithDouble:withDouble:withDouble:withDouble:", "setCoords", "V", 0x1, NULL, NULL },
    { "moveDependenciesWithGeogebraCommonKernelGeosGeoElement:", "moveDependencies", "V", 0x1, NULL, NULL },
    { "getIncidenceList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getNonIncidenceList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "setIncidenceListWithJavaUtilArrayList:", "setIncidenceList", "V", 0x1, NULL, NULL },
    { "createIncidenceList", NULL, "V", 0x1, NULL, NULL },
    { "createNonIncidenceList", NULL, "V", 0x1, NULL, NULL },
    { "addIncidenceWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "addIncidence", "V", 0x1, NULL, NULL },
    { "addNonIncidenceWithGeogebraCommonKernelGeosGeoElement:", "addNonIncidence", "V", 0x1, NULL, NULL },
    { "removeIncidenceWithGeogebraCommonKernelGeosGeoElement:", "removeIncidence", "V", 0x11, NULL, NULL },
    { "addIncidenceWithProbabilisticCheckingWithGeogebraCommonKernelGeosGeoElement:", "addIncidenceWithProbabilisticChecking", "Z", 0x1, NULL, NULL },
    { "isRandomizable", NULL, "Z", 0x1, NULL, NULL },
    { "randomizeForProbabilisticChecking", NULL, "V", 0x1, NULL, NULL },
    { "setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:", "setParentAlgorithm", "V", 0x1, NULL, NULL },
    { "movePointWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "movePoint", "Z", 0x1, NULL, NULL },
    { "setXWithDouble:", "setX", "V", 0x1, NULL, NULL },
    { "setYWithDouble:", "setY", "V", 0x1, NULL, NULL },
    { "setZWithDouble:", "setZ", "V", 0x1, NULL, NULL },
    { "updateColumnHeadingsForTraceValues", NULL, "V", 0x1, NULL, NULL },
    { "getTraceModes", NULL, "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", 0x1, NULL, NULL },
    { "getTraceDialogAsValues", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "addToSpreadsheetTraceListWithJavaUtilArrayList:", "addToSpreadsheetTraceList", "V", 0x1, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lgeogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lgeogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "distanceToPathWithGeogebraCommonKernelPathOrPoint:", "distanceToPath", "D", 0x1, NULL, NULL },
    { "hasLocateableList", NULL, "Z", 0x1, NULL, NULL },
    { "setLocateableListWithGeogebraCommonKernelLocateableList:", "setLocateableList", "V", 0x1, NULL, NULL },
    { "setCoordsFromPointWithGeogebraCommonKernelKernelNDGeoPointND:", "setCoordsFromPoint", "V", 0x1, NULL, NULL },
    { "setWithDouble:withDouble:withGeogebraCommonKernelMyPoint:withGeogebraCommonKernelMyPoint:", "set", "V", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pointSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "pointStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "animationValue_", NULL, 0x2, "D", NULL, NULL,  },
    { "path_", NULL, 0x2, "Lgeogebra.common.kernel.Path;", NULL, NULL,  },
    { "pathParameter_", NULL, 0x2, "Lgeogebra.common.kernel.PathParameter;", NULL, NULL,  },
    { "region_", NULL, 0x2, "Lgeogebra.common.kernel.Region;", NULL, NULL,  },
    { "regionParameters_", NULL, 0x2, "Lgeogebra.common.kernel.RegionParameters;", NULL, NULL,  },
    { "x2D_", NULL, 0x2, "D", NULL, NULL,  },
    { "y2D_", NULL, 0x2, "D", NULL, NULL,  },
    { "inhomX_", NULL, 0x1, "D", NULL, NULL,  },
    { "inhomY_", NULL, 0x1, "D", NULL, NULL,  },
    { "isInfinite__", "isInfinite", 0x2, "Z", NULL, NULL,  },
    { "isDefined__", "isDefined", 0x2, "Z", NULL, NULL,  },
    { "showUndefinedInAlgebraView__", "showUndefinedInAlgebraView", 0x2, "Z", NULL, NULL,  },
    { "variableCoordinate1_", NULL, 0x2, "Lgeogebra.common.kernel.prover.polynomial.Variable;", NULL, NULL,  },
    { "variableCoordinate2_", NULL, 0x2, "Lgeogebra.common.kernel.prover.polynomial.Variable;", NULL, NULL,  },
    { "botanaVars_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Variable;", NULL, NULL,  },
    { "locateableList_", NULL, 0x2, "Lgeogebra.common.kernel.LocateableList;", NULL, NULL,  },
    { "changeableCoordNumbers_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/arithmetic/NumberValue;>;",  },
    { "hasPolarParentNumbers__", "hasPolarParentNumbers", 0x2, "Z", NULL, NULL,  },
    { "tempPathParameter_", NULL, 0x2, "Lgeogebra.common.kernel.PathParameter;", NULL, NULL,  },
    { "sbToString_GeoPoint_", "sbToString", 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sbBuildValueString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "tempSet_", NULL, 0x4a, "Ljava.util.TreeSet;", &GeogebraCommonKernelGeosGeoPoint_tempSet_, "Ljava/util/TreeSet<Lgeogebra/common/kernel/algos/AlgoElement;>;",  },
    { "comparatorX_", NULL, 0x4a, "Ljava.util.Comparator;", &GeogebraCommonKernelGeosGeoPoint_comparatorX_, "Ljava/util/Comparator<Lgeogebra/common/kernel/geos/GeoPoint;>;",  },
    { "coords2D_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "inhomCoords3D_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "inhomCoords2D_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpMatrix4x4_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "tmpCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "incidenceList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "nonIncidenceList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoPoint = { 2, "GeoPoint", "geogebra.common.kernel.geos", NULL, 0x1, 178, methods, 32, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoPoint;
}

@end

void GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, NO);
}

GeogebraCommonKernelGeosGeoPoint *new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoPoint *self = [GeogebraCommonKernelGeosGeoPoint alloc];
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelConstruction *c, jboolean isHelper) {
  GeogebraCommonKernelGeosGeoVec3D_initWithGeogebraCommonKernelConstruction_(self, c);
  self->x2D_ = 0;
  self->y2D_ = 0;
  self->showUndefinedInAlgebraView__ = YES;
  GeogebraCommonKernelGeosGeoPoint_set_variableCoordinate1_(self, nil);
  GeogebraCommonKernelGeosGeoPoint_set_variableCoordinate2_(self, nil);
  GeogebraCommonKernelGeosGeoPoint_set_changeableCoordNumbers_(self, nil);
  self->hasPolarParentNumbers__ = NO;
  GeogebraCommonKernelGeosGeoPoint_setAndConsume_sbToString_GeoPoint_(self, new_JavaLangStringBuilder_initWithInt_(50));
  GeogebraCommonKernelGeosGeoPoint_setAndConsume_sbBuildValueString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  if (!isHelper) {
    [self setConstructionDefaults];
    [self setAnimationTypeWithInt:GeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING];
  }
  [self setUndefined];
}

GeogebraCommonKernelGeosGeoPoint *new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonKernelConstruction *c, jboolean isHelper) {
  GeogebraCommonKernelGeosGeoPoint *self = [GeogebraCommonKernelGeosGeoPoint alloc];
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, isHelper);
  return self;
}

void GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelConstruction *c, NSString *label, jdouble x, jdouble y, jdouble z) {
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self, c, x, y, z);
  [self setLabelWithNSString:label];
}

GeogebraCommonKernelGeosGeoPoint *new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(GeogebraCommonKernelConstruction *c, NSString *label, jdouble x, jdouble y, jdouble z) {
  GeogebraCommonKernelGeosGeoPoint *self = [GeogebraCommonKernelGeosGeoPoint alloc];
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self, c, label, x, y, z);
  return self;
}

void GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelConstruction *c, jdouble x, jdouble y, jdouble z) {
  GeogebraCommonKernelGeosGeoVec3D_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self, c, x, y, z);
  self->x2D_ = 0;
  self->y2D_ = 0;
  self->showUndefinedInAlgebraView__ = YES;
  GeogebraCommonKernelGeosGeoPoint_set_variableCoordinate1_(self, nil);
  GeogebraCommonKernelGeosGeoPoint_set_variableCoordinate2_(self, nil);
  GeogebraCommonKernelGeosGeoPoint_set_changeableCoordNumbers_(self, nil);
  self->hasPolarParentNumbers__ = NO;
  GeogebraCommonKernelGeosGeoPoint_setAndConsume_sbToString_GeoPoint_(self, new_JavaLangStringBuilder_initWithInt_(50));
  GeogebraCommonKernelGeosGeoPoint_setAndConsume_sbBuildValueString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  [self setConstructionDefaults];
  [self setAnimationTypeWithInt:GeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING];
  [self setIncidenceListWithJavaUtilArrayList:nil];
}

GeogebraCommonKernelGeosGeoPoint *new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(GeogebraCommonKernelConstruction *c, jdouble x, jdouble y, jdouble z) {
  GeogebraCommonKernelGeosGeoPoint *self = [GeogebraCommonKernelGeosGeoPoint alloc];
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self, c, x, y, z);
  return self;
}

void GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelPath> path) {
  GeogebraCommonKernelGeosGeoVec3D_initWithGeogebraCommonKernelConstruction_(self, c);
  self->x2D_ = 0;
  self->y2D_ = 0;
  self->showUndefinedInAlgebraView__ = YES;
  GeogebraCommonKernelGeosGeoPoint_set_variableCoordinate1_(self, nil);
  GeogebraCommonKernelGeosGeoPoint_set_variableCoordinate2_(self, nil);
  GeogebraCommonKernelGeosGeoPoint_set_changeableCoordNumbers_(self, nil);
  self->hasPolarParentNumbers__ = NO;
  GeogebraCommonKernelGeosGeoPoint_setAndConsume_sbToString_GeoPoint_(self, new_JavaLangStringBuilder_initWithInt_(50));
  GeogebraCommonKernelGeosGeoPoint_setAndConsume_sbBuildValueString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  [self setConstructionDefaults];
  [self setAnimationTypeWithInt:GeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING];
  GeogebraCommonKernelGeosGeoPoint_set_path_(self, path);
}

GeogebraCommonKernelGeosGeoPoint *new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_(GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelPath> path) {
  GeogebraCommonKernelGeosGeoPoint *self = [GeogebraCommonKernelGeosGeoPoint alloc];
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_(self, c, path);
  return self;
}

void GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelRegion_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelRegion> region) {
  GeogebraCommonKernelGeosGeoVec3D_initWithGeogebraCommonKernelConstruction_(self, c);
  self->x2D_ = 0;
  self->y2D_ = 0;
  self->showUndefinedInAlgebraView__ = YES;
  GeogebraCommonKernelGeosGeoPoint_set_variableCoordinate1_(self, nil);
  GeogebraCommonKernelGeosGeoPoint_set_variableCoordinate2_(self, nil);
  GeogebraCommonKernelGeosGeoPoint_set_changeableCoordNumbers_(self, nil);
  self->hasPolarParentNumbers__ = NO;
  GeogebraCommonKernelGeosGeoPoint_setAndConsume_sbToString_GeoPoint_(self, new_JavaLangStringBuilder_initWithInt_(50));
  GeogebraCommonKernelGeosGeoPoint_setAndConsume_sbBuildValueString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  [self setConstructionDefaults];
  GeogebraCommonKernelGeosGeoPoint_set_region_(self, region);
}

GeogebraCommonKernelGeosGeoPoint *new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelRegion_(GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelRegion> region) {
  GeogebraCommonKernelGeosGeoPoint *self = [GeogebraCommonKernelGeosGeoPoint alloc];
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelRegion_(self, c, region);
  return self;
}

GeogebraCommonKernelPathParameter *GeogebraCommonKernelGeosGeoPoint_getPathParameter(GeogebraCommonKernelGeosGeoPoint *self) {
  if (self->pathParameter_ == nil) GeogebraCommonKernelGeosGeoPoint_setAndConsume_pathParameter_(self, new_GeogebraCommonKernelPathParameter_initWithDouble_(0));
  return self->pathParameter_;
}

void GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelGeosGeoPoint *point) {
  GeogebraCommonKernelGeosGeoVec3D_initWithGeogebraCommonKernelConstruction_(self, ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(point))->cons_);
  self->x2D_ = 0;
  self->y2D_ = 0;
  self->showUndefinedInAlgebraView__ = YES;
  GeogebraCommonKernelGeosGeoPoint_set_variableCoordinate1_(self, nil);
  GeogebraCommonKernelGeosGeoPoint_set_variableCoordinate2_(self, nil);
  GeogebraCommonKernelGeosGeoPoint_set_changeableCoordNumbers_(self, nil);
  self->hasPolarParentNumbers__ = NO;
  GeogebraCommonKernelGeosGeoPoint_setAndConsume_sbToString_GeoPoint_(self, new_JavaLangStringBuilder_initWithInt_(50));
  GeogebraCommonKernelGeosGeoPoint_setAndConsume_sbBuildValueString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  [self setConstructionDefaults];
  [self setWithGeogebraCommonKernelGeosGeoElement:point];
}

GeogebraCommonKernelGeosGeoPoint *new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelGeosGeoPoint *point) {
  GeogebraCommonKernelGeosGeoPoint *self = [GeogebraCommonKernelGeosGeoPoint alloc];
  GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelGeosGeoPoint_(self, point);
  return self;
}

jboolean GeogebraCommonKernelGeosGeoPoint_isPointChangeableWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *point) {
  GeogebraCommonKernelGeosGeoPoint_initialize();
  GeogebraCommonKernelAlgosAlgoElement *algo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(point)) getParentAlgorithm];
  if (algo != nil && [GeogebraCommonKernelAlgosAlgoDynamicCoordinatesInterface_class_() isInstance:algo]) return YES;
  if ([GeogebraCommonKernelPathAlgo_class_() isInstance:algo]) {
    return [((id<GeogebraCommonKernelPathAlgo>) nil_chk(((id<GeogebraCommonKernelPathAlgo>) check_protocol_cast(algo, @protocol(GeogebraCommonKernelPathAlgo))))) isChangeable] && ![point isFixed];
  }
  return ![point isFixed] && ([point isIndependent] || [point isPointOnPath] || [point isPointInRegion]);
}

jboolean GeogebraCommonKernelGeosGeoPoint_hasChangeableCoordParentNumbers(GeogebraCommonKernelGeosGeoPoint *self) {
  if ([self isFixed]) {
    return NO;
  }
  JavaUtilArrayList *coords = GeogebraCommonKernelGeosGeoPoint_getCoordParentNumbers(self);
  if ([((JavaUtilArrayList *) nil_chk(coords)) size] == 0) {
    return NO;
  }
  id<GeogebraCommonKernelArithmeticNumberValue> num1 = [coords getWithInt:0];
  id<GeogebraCommonKernelArithmeticNumberValue> num2 = [coords getWithInt:1];
  if (num1 == nil || num2 == nil) return NO;
  if ([num1 isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]] && [num2 isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
    GeogebraCommonKernelGeosGeoElement *maxObj1 = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(num1, [GeogebraCommonKernelGeosGeoNumeric class])))) getIntervalMaxObject];
    GeogebraCommonKernelGeosGeoElement *maxObj2 = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(num2, [GeogebraCommonKernelGeosGeoNumeric class])))) getIntervalMaxObject];
    GeogebraCommonKernelGeosGeoElement *minObj1 = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(num1, [GeogebraCommonKernelGeosGeoNumeric class])))) getIntervalMinObject];
    GeogebraCommonKernelGeosGeoElement *minObj2 = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(num2, [GeogebraCommonKernelGeosGeoNumeric class])))) getIntervalMinObject];
    if (maxObj1 != nil && [maxObj1 isChildOrEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(num2, [GeogebraCommonKernelGeosGeoElement class])]) return NO;
    if (minObj1 != nil && [minObj1 isChildOrEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(num2, [GeogebraCommonKernelGeosGeoElement class])]) return NO;
    if (maxObj2 != nil && [maxObj2 isChildOrEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(num1, [GeogebraCommonKernelGeosGeoElement class])]) return NO;
    if (minObj2 != nil && [minObj2 isChildOrEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(num1, [GeogebraCommonKernelGeosGeoElement class])]) return NO;
  }
  jboolean ret = ([num1 isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]] || [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(num1, [GeogebraCommonKernelGeosGeoNumeric class])))) isChangeable]) && ([num2 isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]] || [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(num2, [GeogebraCommonKernelGeosGeoNumeric class])))) isChangeable]);
  return ret;
}

JavaUtilArrayList *GeogebraCommonKernelGeosGeoPoint_getCoordParentNumbers(GeogebraCommonKernelGeosGeoPoint *self) {
  if (self->changeableCoordNumbers_ == nil) {
    GeogebraCommonKernelGeosGeoPoint_setAndConsume_changeableCoordNumbers_(self, new_JavaUtilArrayList_initWithInt_(2));
    GeogebraCommonKernelAlgosAlgoElement *parentAlgo = [self getParentAlgorithm];
    if ([parentAlgo isKindOfClass:[GeogebraCommonKernelAlgosAlgoDependentPoint class]]) {
      GeogebraCommonKernelAlgosAlgoDependentPoint *algo = (GeogebraCommonKernelAlgosAlgoDependentPoint *) check_class_cast(parentAlgo, [GeogebraCommonKernelAlgosAlgoDependentPoint class]);
      GeogebraCommonKernelArithmeticExpressionNode *en = [((GeogebraCommonKernelAlgosAlgoDependentPoint *) nil_chk(algo)) getExpressionNode];
      if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) isLeaf] && [[en getLeft] isKindOfClass:[GeogebraCommonKernelArithmeticMyVecNode class]]) {
        GeogebraCommonKernelArithmeticMyVecNode *vn = (GeogebraCommonKernelArithmeticMyVecNode *) check_class_cast([en getLeft], [GeogebraCommonKernelArithmeticMyVecNode class]);
        self->hasPolarParentNumbers__ = [((GeogebraCommonKernelArithmeticMyVecNode *) nil_chk(vn)) hasPolarCoords];
        @try {
          id<GeogebraCommonKernelArithmeticExpressionValue> xcoord = [vn getX];
          id<GeogebraCommonKernelArithmeticExpressionValue> ycoord = [vn getY];
          id<GeogebraCommonKernelArithmeticNumberValue> xNum = GeogebraCommonKernelGeosGeoPoint_getCoordNumberWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(self, xcoord, !self->hasPolarParentNumbers__);
          id<GeogebraCommonKernelArithmeticNumberValue> yNum = GeogebraCommonKernelGeosGeoPoint_getCoordNumberWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(self, ycoord, !self->hasPolarParentNumbers__);
          if ([xNum isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]] && [yNum isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
            GeogebraCommonKernelGeosGeoNumeric *xvar = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xNum, [GeogebraCommonKernelGeosGeoNumeric class]);
            GeogebraCommonKernelGeosGeoNumeric *yvar = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yNum, [GeogebraCommonKernelGeosGeoNumeric class]);
            if (![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(xcoord)) containsWithGeogebraCommonKernelArithmeticExpressionValue:yvar] && ![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ycoord)) containsWithGeogebraCommonKernelArithmeticExpressionValue:xvar]) {
              [self->changeableCoordNumbers_ addWithId:xvar];
              [self->changeableCoordNumbers_ addWithId:yvar];
            }
          }
          else if (([xNum isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]] && [yNum isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]]) || ([yNum isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]] && [xNum isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]])) {
            [self->changeableCoordNumbers_ addWithId:xNum];
            [self->changeableCoordNumbers_ addWithId:yNum];
          }
        }
        @catch (JavaLangThrowable *e) {
          [self->changeableCoordNumbers_ clear];
          [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
        }
      }
    }
  }
  return self->changeableCoordNumbers_;
}

id<GeogebraCommonKernelArithmeticNumberValue> GeogebraCommonKernelGeosGeoPoint_getCoordNumberWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(GeogebraCommonKernelGeosGeoPoint *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev, jboolean allowPlusNode) {
  if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isLeaf]) {
    if ([ev isExpressionNode]) {
      if ([[((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class])) getLeft] isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]]) {
        return (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class])) getLeft], @protocol(GeogebraCommonKernelArithmeticNumberValue));
      }
    }
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:[ev isGeoElement] ? [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoElement class])) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()] : [ev toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    if (geo != nil && [geo isGeoNumeric]) {
      return (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class]);
    }
    return nil;
  }
  if (!allowPlusNode) {
    return nil;
  }
  GeogebraCommonKernelGeosGeoNumeric *coordNumeric = nil;
  GeogebraCommonKernelArithmeticExpressionNode *en = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
  if ([((GeogebraCommonPluginOperationEnum *) nil_chk([en getOperation])) isEqual:GeogebraCommonPluginOperationEnum_get_PLUS()] && [[en getLeft] isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
    coordNumeric = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([en getLeft], [GeogebraCommonKernelGeosGeoNumeric class]);
    JavaUtilHashSet *rightVars = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getRight])) getVariables];
    if (rightVars != nil) {
      id<JavaUtilIterator> it = [rightVars iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        GeogebraCommonKernelGeosGeoElement *var = [it next];
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(var)) isChildOrEqualWithGeogebraCommonKernelGeosGeoElement:coordNumeric]) @throw [new_JavaLangException_initWithNSString_(JreStrcat("$@", @"dependent var: ", var)) autorelease];
      }
    }
  }
  return coordNumeric;
}

jboolean GeogebraCommonKernelGeosGeoPoint_isPointOnPath(GeogebraCommonKernelGeosGeoPoint *self) {
  return self->path_ != nil;
}

jboolean GeogebraCommonKernelGeosGeoPoint_isInfinite(GeogebraCommonKernelGeosGeoPoint *self) {
  return self->isInfinite__;
}

jboolean GeogebraCommonKernelGeosGeoPoint_isFinite(GeogebraCommonKernelGeosGeoPoint *self) {
  return self->isDefined__ && !self->isInfinite__;
}

void GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(GeogebraCommonKernelGeosGeoPoint *self, jdouble x, jdouble y, jdouble z) {
  self->x_ = x;
  self->y_ = y;
  self->z_ = z;
  if (self->path_ != nil) {
    GeogebraCommonKernelPathParameter *tempParameter = GeogebraCommonKernelGeosGeoPoint_getTempPathparameter(self);
    [((GeogebraCommonKernelPathParameter *) nil_chk(tempParameter)) setWithGeogebraCommonKernelPathParameter:GeogebraCommonKernelGeosGeoPoint_getPathParameter(self)];
    [self->path_ pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:self];
    self->animationValue_ = GeogebraCommonKernelPathNormalizer_toNormalizedPathParameterWithDouble_withDouble_withDouble_(((GeogebraCommonKernelPathParameter *) nil_chk(GeogebraCommonKernelGeosGeoPoint_getPathParameter(self)))->t_, [self->path_ getMinParameter], [self->path_ getMaxParameter]);
  }
  if ([self hasRegion]) {
    [((id<GeogebraCommonKernelRegion>) nil_chk(self->region_)) pointChangedForRegionWithGeogebraCommonKernelKernelNDGeoPointND:self];
  }
  GeogebraCommonKernelGeosGeoPoint_updateCoords(self);
  if (self->path_ != nil) {
    if (!self->isDefined__) {
      GeogebraCommonKernelPathParameter *parameter = GeogebraCommonKernelGeosGeoPoint_getPathParameter(self);
      GeogebraCommonKernelPathParameter *tempParameter = GeogebraCommonKernelGeosGeoPoint_getTempPathparameter(self);
      [((GeogebraCommonKernelPathParameter *) nil_chk(parameter)) setWithGeogebraCommonKernelPathParameter:tempParameter];
    }
    else {
      GeogebraCommonKernelPathParameter *tempParameter = GeogebraCommonKernelGeosGeoPoint_getTempPathparameter(self);
      [((GeogebraCommonKernelPathParameter *) nil_chk(tempParameter)) setWithGeogebraCommonKernelPathParameter:GeogebraCommonKernelGeosGeoPoint_getPathParameter(self)];
    }
  }
}

GeogebraCommonKernelPathParameter *GeogebraCommonKernelGeosGeoPoint_getTempPathparameter(GeogebraCommonKernelGeosGeoPoint *self) {
  if (self->tempPathParameter_ == nil) {
    GeogebraCommonKernelGeosGeoPoint_setAndConsume_tempPathParameter_(self, new_GeogebraCommonKernelPathParameter_init());
  }
  return self->tempPathParameter_;
}

void GeogebraCommonKernelGeosGeoPoint_updateCoords(GeogebraCommonKernelGeosGeoPoint *self) {
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(self->z_)) {
    self->isInfinite__ = YES;
    self->isDefined__ = !(JavaLangDouble_isNaNWithDouble_(self->x_) || JavaLangDouble_isNaNWithDouble_(self->y_));
    self->inhomX_ = JavaLangDouble_NaN;
    self->inhomY_ = JavaLangDouble_NaN;
  }
  else {
    self->isInfinite__ = NO;
    self->isDefined__ = !(JavaLangDouble_isNaNWithDouble_(self->x_) || JavaLangDouble_isNaNWithDouble_(self->y_) || JavaLangDouble_isNaNWithDouble_(self->z_));
    if (self->isDefined__) {
      if (self->z_ < 0) {
        self->x_ = -self->x_;
        self->y_ = -self->y_;
        self->z_ = -self->z_;
      }
      if (self->z_ == 1.0) {
        self->inhomX_ = self->x_;
        self->inhomY_ = self->y_;
      }
      else {
        self->inhomX_ = self->x_ / self->z_;
        self->inhomY_ = self->y_ / self->z_;
      }
    }
    else {
      self->inhomX_ = JavaLangDouble_NaN;
      self->inhomY_ = JavaLangDouble_NaN;
    }
  }
}

void GeogebraCommonKernelGeosGeoPoint_setCoordsWithGeogebraCommonKernelGeosGeoVec3D_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelGeosGeoVec3D *v) {
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, ((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(v))->x_, v->y_, v->z_);
}

jboolean GeogebraCommonKernelGeosGeoPoint_isEqualWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelGeosGeoElement *geo) {
  return GeogebraCommonKernelGeosGeoPoint_isEqualWithGeogebraCommonKernelGeosGeoElement_withDouble_(self, geo, GeogebraCommonKernelKernel_STANDARD_PRECISION);
}

jboolean GeogebraCommonKernelGeosGeoPoint_isEqualWithGeogebraCommonKernelGeosGeoElement_withDouble_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelGeosGeoElement *geo, jdouble eps) {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) return NO;
  if ([geo isGeoElement3D]) {
    return [geo isEqualWithGeogebraCommonKernelGeosGeoElement:self];
  }
  return GeogebraCommonKernelGeosGeoPoint_isEqualPoint2DWithGeogebraCommonKernelGeosGeoPoint_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class]));
}

jboolean GeogebraCommonKernelGeosGeoPoint_isEqualPoint2DWithGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelGeosGeoPoint *P) {
  if (!([self isDefined] && [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) isDefined])) return NO;
  if (GeogebraCommonKernelGeosGeoPoint_isFinite(self) && GeogebraCommonKernelGeosGeoPoint_isFinite(nil_chk(P))) {
    return GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(self->inhomX_, P->inhomX_) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(self->inhomY_, P->inhomY_);
  }
  else if (GeogebraCommonKernelGeosGeoPoint_isInfinite(self) && GeogebraCommonKernelGeosGeoPoint_isInfinite(nil_chk(P))) return [self linDepWithGeogebraCommonKernelGeosGeoVec3D:P];
  else return NO;
}

jdouble GeogebraCommonKernelGeosGeoPoint_getInhomX(GeogebraCommonKernelGeosGeoPoint *self) {
  return self->inhomX_;
}

jdouble GeogebraCommonKernelGeosGeoPoint_getInhomY(GeogebraCommonKernelGeosGeoPoint *self) {
  return self->inhomY_;
}

jdouble GeogebraCommonKernelGeosGeoPoint_distanceWithGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelGeosGeoPoint *P) {
  return GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P))->inhomX_ - self->inhomX_, P->inhomY_ - self->inhomY_);
}

jboolean GeogebraCommonKernelGeosGeoPoint_samePositionWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoPoint *Q) {
  GeogebraCommonKernelGeosGeoPoint_initialize();
  return GeogebraCommonKernelKernel_isZeroWithDouble_(GeogebraCommonKernelGeosGeoPoint_distanceWithGeogebraCommonKernelGeosGeoPoint_(nil_chk(P), Q));
}

jboolean GeogebraCommonKernelGeosGeoPoint_collinearWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B, GeogebraCommonKernelGeosGeoPoint *C) {
  GeogebraCommonKernelGeosGeoPoint_initialize();
  jdouble sum1 = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(A))->x_ * ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(B))->y_ * ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(C))->z_ + B->x_ * C->y_ * A->z_ + C->x_ * A->y_ * B->z_;
  jdouble sum2 = A->z_ * B->y_ * C->x_ + B->z_ * C->y_ * A->x_ + C->z_ * A->y_ * B->x_;
  jdouble eps = JavaLangMath_maxWithDouble_withDouble_(GeogebraCommonKernelKernel_MIN_PRECISION, GeogebraCommonKernelKernel_MIN_PRECISION * A->z_ * B->z_ * C->z_);
  return GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(sum1, sum2, eps);
}

jdouble GeogebraCommonKernelGeosGeoPoint_detWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoPoint *Q) {
  GeogebraCommonKernelGeosGeoPoint_initialize();
  return (((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P))->x_ * ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(Q))->y_ - Q->x_ * P->y_) / (P->z_ * Q->z_);
}

jdouble GeogebraCommonKernelGeosGeoPoint_affineRatioWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B, GeogebraCommonKernelGeosGeoPoint *C) {
  GeogebraCommonKernelGeosGeoPoint_initialize();
  jdouble ABx = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(B))->inhomX_ - ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(A))->inhomX_;
  jdouble ABy = B->inhomY_ - A->inhomY_;
  if (JavaLangMath_absWithDouble_(ABx) > JavaLangMath_absWithDouble_(ABy)) {
    return (((GeogebraCommonKernelGeosGeoPoint *) nil_chk(C))->inhomX_ - A->inhomX_) / ABx;
  }
  return (((GeogebraCommonKernelGeosGeoPoint *) nil_chk(C))->inhomY_ - A->inhomY_) / ABy;
}

void GeogebraCommonKernelGeosGeoPoint_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelGeosGeoPoint *self, id<GeogebraCommonKernelArithmeticNumberValue> phiValue, GeogebraCommonKernelMatrixCoords *point) {
  GeogebraCommonKernelMatrixCoords *Q = point;
  jdouble phi = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  jdouble qx = self->z_ * [((GeogebraCommonKernelMatrixCoords *) nil_chk(Q)) getX];
  jdouble qy = self->z_ * [Q getY];
  GeogebraCommonKernelGeosGeoPoint_setCoordsWithDouble_withDouble_withDouble_(self, (self->x_ - qx) * cos + (qy - self->y_) * sin + qx, (self->x_ - qx) * sin + (self->y_ - qy) * cos + qy, self->z_);
}

void GeogebraCommonKernelGeosGeoPoint_addEqualSignToStringWithJavaLangStringBuilder_withInt_withInt_(JavaLangStringBuilder *sbToString, jint toStringMode, jint coordStyle) {
  GeogebraCommonKernelGeosGeoPoint_initialize();
  if (toStringMode == GeogebraCommonKernelKernel_COORD_COMPLEX) {
    [((JavaLangStringBuilder *) nil_chk(sbToString)) appendWithNSString:@" = "];
  }
  else {
    switch (coordStyle) {
      case GeogebraCommonKernelKernel_COORD_STYLE_FRENCH:
      [((JavaLangStringBuilder *) nil_chk(sbToString)) appendWithNSString:@": "];
      case GeogebraCommonKernelKernel_COORD_STYLE_AUSTRIAN:
      break;
      default:
      [((JavaLangStringBuilder *) nil_chk(sbToString)) appendWithNSString:@" = "];
    }
  }
}

NSString *GeogebraCommonKernelGeosGeoPoint_toValueStringMinimalWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelStringTemplate *tpl) {
  [((JavaLangStringBuilder *) nil_chk(self->sbBuildValueString_)) setLengthWithInt:0];
  if (GeogebraCommonKernelGeosGeoPoint_isInfinite(self)) {
    [self->sbBuildValueString_ appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"]];
    return [self->sbBuildValueString_ description];
  }
  [self->sbBuildValueString_ appendWithNSString:JreStrcat("$C$", [self regrFormatWithDouble:self->inhomX_], ' ', [self regrFormatWithDouble:self->inhomY_])];
  return [self->sbBuildValueString_ description];
}

JavaLangStringBuilder *GeogebraCommonKernelGeosGeoPoint_buildValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoPoint *self, GeogebraCommonKernelStringTemplate *tpl) {
  [((JavaLangStringBuilder *) nil_chk(self->sbBuildValueString_)) setLengthWithInt:0];
  {
    NSString *xStr;
    NSString *yStr;
    switch ([[((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      xStr = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:GeogebraCommonKernelGeosGeoPoint_getInhomX(self) withGeogebraCommonKernelStringTemplate:tpl];
      yStr = [self->kernel_ formatWithDouble:GeogebraCommonKernelGeosGeoPoint_getInhomY(self) withGeogebraCommonKernelStringTemplate:tpl];
      if (self->toStringMode_ == GeogebraCommonKernelKernel_COORD_COMPLEX) {
        [self->sbBuildValueString_ appendWithNSString:@"("];
        [self->sbBuildValueString_ appendWithNSString:xStr];
        [self->sbBuildValueString_ appendWithNSString:@"+i*"];
        [self->sbBuildValueString_ appendWithNSString:yStr];
        [self->sbBuildValueString_ appendWithNSString:@")"];
      }
      else {
        [self->sbBuildValueString_ appendWithNSString:@"point("];
        [self->sbBuildValueString_ appendWithNSString:xStr];
        [self->sbBuildValueString_ appendWithChar:','];
        [self->sbBuildValueString_ appendWithNSString:yStr];
        [self->sbBuildValueString_ appendWithNSString:@")"];
      }
      return self->sbBuildValueString_;
      default:
      ;
    }
  }
  if (GeogebraCommonKernelGeosGeoPoint_isInfinite(self)) {
    [self->sbBuildValueString_ appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"]];
    return self->sbBuildValueString_;
  }
  if ([self getMode] == GeogebraCommonKernelKernel_COORD_CARTESIAN_3D) {
    GeogebraCommonKernelGeosGeoPoint_buildValueStringCoordCartesian3DWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(self->kernel_, tpl, GeogebraCommonKernelGeosGeoPoint_getInhomX(self), GeogebraCommonKernelGeosGeoPoint_getInhomY(self), 0, self->sbBuildValueString_);
  }
  else if ([self getMode] == GeogebraCommonKernelKernel_COORD_SPHERICAL) {
    GeogebraCommonKernelGeosGeoPoint_buildValueStringCoordSphericalWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(self->kernel_, tpl, GeogebraCommonKernelGeosGeoPoint_getInhomX(self), GeogebraCommonKernelGeosGeoPoint_getInhomY(self), 0, self->sbBuildValueString_);
  }
  else {
    GeogebraCommonKernelGeosGeoPoint_buildValueStringWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withInt_withDouble_withDouble_withJavaLangStringBuilder_(self->kernel_, tpl, self->toStringMode_, GeogebraCommonKernelGeosGeoPoint_getInhomX(self), GeogebraCommonKernelGeosGeoPoint_getInhomY(self), self->sbBuildValueString_);
  }
  return self->sbBuildValueString_;
}

void GeogebraCommonKernelGeosGeoPoint_buildValueStringCoordCartesian3DWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelStringTemplate *tpl, jdouble x, jdouble y, jdouble z, JavaLangStringBuilder *sbBuildValueString) {
  GeogebraCommonKernelGeosGeoPoint_initialize();
  if ([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
    [((JavaLangStringBuilder *) nil_chk(sbBuildValueString)) appendWithNSString:@"point("];
    [sbBuildValueString appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:x withGeogebraCommonKernelStringTemplate:tpl]];
    [sbBuildValueString appendWithChar:','];
    [sbBuildValueString appendWithNSString:[kernel formatWithDouble:y withGeogebraCommonKernelStringTemplate:tpl]];
    [sbBuildValueString appendWithChar:','];
    [sbBuildValueString appendWithNSString:[kernel formatWithDouble:z withGeogebraCommonKernelStringTemplate:tpl]];
    [sbBuildValueString appendWithNSString:@")"];
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(sbBuildValueString)) appendWithChar:'('];
  [sbBuildValueString appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:x withGeogebraCommonKernelStringTemplate:tpl]];
  NSString *separator = GeogebraCommonKernelGeosGeoPoint_buildValueStringSeparatorWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_(kernel, tpl);
  [sbBuildValueString appendWithNSString:separator];
  [sbBuildValueString appendWithNSString:@" "];
  [sbBuildValueString appendWithNSString:[kernel formatWithDouble:y withGeogebraCommonKernelStringTemplate:tpl]];
  [sbBuildValueString appendWithNSString:separator];
  [sbBuildValueString appendWithNSString:@" "];
  [sbBuildValueString appendWithNSString:[kernel formatWithDouble:z withGeogebraCommonKernelStringTemplate:tpl]];
  [sbBuildValueString appendWithChar:')'];
}

NSString *GeogebraCommonKernelGeosGeoPoint_buildValueStringSeparatorWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelStringTemplate *tpl) {
  GeogebraCommonKernelGeosGeoPoint_initialize();
  NSString *separator;
  switch ([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getCoordStyleWithInt:[((GeogebraCommonKernelKernel *) nil_chk(kernel)) getCoordStyle]]) {
    case GeogebraCommonKernelKernel_COORD_STYLE_AUSTRIAN:
    separator = @" |";
    break;
    default:
    separator = JavaLangCharacter_toStringWithChar_(((GeogebraCommonMainLocalization *) nil_chk([kernel getLocalization]))->unicodeComma_);
  }
  if ([tpl hasCASType]) {
    separator = @",";
  }
  return separator;
}

void GeogebraCommonKernelGeosGeoPoint_buildValueStringCoordSphericalWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelStringTemplate *tpl, jdouble x, jdouble y, jdouble z, JavaLangStringBuilder *sbBuildValueString) {
  GeogebraCommonKernelGeosGeoPoint_initialize();
  jdouble lengthXY = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x, y);
  [((JavaLangStringBuilder *) nil_chk(sbBuildValueString)) appendWithChar:'('];
  [sbBuildValueString appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(lengthXY, z) withGeogebraCommonKernelStringTemplate:tpl]];
  [sbBuildValueString appendWithNSString:@"; "];
  [sbBuildValueString appendWithJavaLangCharSequence:[kernel formatAngleWithDouble:JavaLangMath_atan2WithDouble_withDouble_(y, x) withGeogebraCommonKernelStringTemplate:tpl withBoolean:NO]];
  [sbBuildValueString appendWithNSString:@"; "];
  [sbBuildValueString appendWithJavaLangCharSequence:[kernel formatAngleWithDouble:JavaLangMath_atan2WithDouble_withDouble_(z, lengthXY) withGeogebraCommonKernelStringTemplate:tpl withBoolean:YES]];
  [sbBuildValueString appendWithChar:')'];
}

void GeogebraCommonKernelGeosGeoPoint_buildValueStringWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withInt_withDouble_withDouble_withJavaLangStringBuilder_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelStringTemplate *tpl, jint toStringMode, jdouble x, jdouble y, JavaLangStringBuilder *sbBuildValueString) {
  GeogebraCommonKernelGeosGeoPoint_initialize();
  switch (toStringMode) {
    case GeogebraCommonKernelKernel_COORD_POLAR:
    [((JavaLangStringBuilder *) nil_chk(sbBuildValueString)) appendWithChar:'('];
    [sbBuildValueString appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x, y) withGeogebraCommonKernelStringTemplate:tpl]];
    [sbBuildValueString appendWithNSString:@"; "];
    [sbBuildValueString appendWithJavaLangCharSequence:[kernel formatAngleWithDouble:JavaLangMath_atan2WithDouble_withDouble_(y, x) withGeogebraCommonKernelStringTemplate:tpl withBoolean:NO]];
    [sbBuildValueString appendWithChar:')'];
    break;
    case GeogebraCommonKernelKernel_COORD_COMPLEX:
    [((JavaLangStringBuilder *) nil_chk(sbBuildValueString)) appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:x withGeogebraCommonKernelStringTemplate:tpl]];
    [sbBuildValueString appendWithNSString:@" "];
    [kernel formatSignedCoefficientWithDouble:y withJavaLangStringBuilder:sbBuildValueString withGeogebraCommonKernelStringTemplate:tpl];
    [sbBuildValueString appendWithNSString:GeogebraCommonUtilUnicode_get_IMAGINARY_()];
    break;
    default:
    [((JavaLangStringBuilder *) nil_chk(sbBuildValueString)) appendWithChar:'('];
    [sbBuildValueString appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:x withGeogebraCommonKernelStringTemplate:tpl]];
    switch ([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getCoordStyleWithInt:[kernel getCoordStyle]]) {
      case GeogebraCommonKernelKernel_COORD_STYLE_AUSTRIAN:
      [sbBuildValueString appendWithNSString:@" | "];
      break;
      default:
      [sbBuildValueString appendWithChar:((GeogebraCommonMainLocalization *) nil_chk([kernel getLocalization]))->unicodeComma_];
      [sbBuildValueString appendWithNSString:@" "];
    }
    [sbBuildValueString appendWithNSString:[kernel formatWithDouble:y withGeogebraCommonKernelStringTemplate:tpl]];
    [sbBuildValueString appendWithChar:')'];
  }
}

jboolean GeogebraCommonKernelGeosGeoPoint_isAbsoluteStartPoint(GeogebraCommonKernelGeosGeoPoint *self) {
  return [self isIndependent] && ![self isLabelSet];
}

JavaUtilTreeSet *GeogebraCommonKernelGeosGeoPoint_getTempSet() {
  GeogebraCommonKernelGeosGeoPoint_initialize();
  if (GeogebraCommonKernelGeosGeoPoint_tempSet_ == nil) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoPoint_tempSet_, nil, new_JavaUtilTreeSet_init());
  }
  return GeogebraCommonKernelGeosGeoPoint_tempSet_;
}

id<JavaUtilComparator> GeogebraCommonKernelGeosGeoPoint_getComparatorX() {
  GeogebraCommonKernelGeosGeoPoint_initialize();
  if (GeogebraCommonKernelGeosGeoPoint_comparatorX_ == nil) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoPoint_comparatorX_, nil, new_GeogebraCommonKernelGeosGeoPoint_$1_init());
  }
  return GeogebraCommonKernelGeosGeoPoint_comparatorX_;
}

void GeogebraCommonKernelGeosGeoPoint_pointChangedWithGeogebraCommonKernelKernelNDGeoPointND_withDouble_withDouble_withDouble_(id<GeogebraCommonKernelKernelNDGeoPointND> p, jdouble x, jdouble y, jdouble z) {
  GeogebraCommonKernelGeosGeoPoint_initialize();
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) setCoords2DWithDouble:x withDouble:y withDouble:z];
  [p updateCoordsFrom2DWithBoolean:NO withGeogebraCommonKernelMatrixCoordSys:nil];
  [((GeogebraCommonKernelPathParameter *) nil_chk([p getPathParameter])) setTWithDouble:0];
}

jboolean GeogebraCommonKernelGeosGeoPoint_doAnimationStepWithDouble_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelPath_(jdouble frameRate, id<GeogebraCommonKernelKernelNDGeoPointND> p, id<GeogebraCommonKernelPath> path) {
  GeogebraCommonKernelGeosGeoPoint_initialize();
  GeogebraCommonKernelPathParameter *pp = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) getPathParameter];
  GeogebraCommonKernelGeosGeoElement *geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [GeogebraCommonKernelGeosGeoElement class]);
  jdouble oldValue = ((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_;
  jdouble intervalWidth = 1;
  jdouble step = intervalWidth * [geo getAnimationSpeed] * [geo getAnimationDirection] / (GeogebraCommonKernelAnimationManager_STANDARD_ANIMATION_TIME * frameRate);
  if (JavaLangDouble_isNaNWithDouble_([p getAnimationValue])) [p setAnimationValueWithDouble:oldValue];
  [p setAnimationValueWithDouble:[p getAnimationValue] + step];
  switch ([geo getAnimationType]) {
    case GeogebraCommonKernelGeosGeoElement_ANIMATION_DECREASING:
    case GeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING:
    if ([p getAnimationValue] > 1) [p setAnimationValueWithDouble:[p getAnimationValue] - intervalWidth];
    else if ([p getAnimationValue] < 0) [p setAnimationValueWithDouble:[p getAnimationValue] + intervalWidth];
    break;
    case GeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING_ONCE:
    if ([p getAnimationValue] > 1) {
      [p setAnimationValueWithDouble:1];
      [geo setAnimatingWithBoolean:NO];
    }
    else if ([p getAnimationValue] < 0) {
      [p setAnimationValueWithDouble:0];
      [geo setAnimatingWithBoolean:NO];
    }
    break;
    case GeogebraCommonKernelGeosGeoElement_ANIMATION_OSCILLATING:
    default:
    if ([p getAnimationValue] >= 1) {
      [p setAnimationValueWithDouble:1];
      [geo changeAnimationDirection];
    }
    else if ([p getAnimationValue] <= 0) {
      [p setAnimationValueWithDouble:0];
      [geo changeAnimationDirection];
    }
    break;
  }
  pp->t_ = GeogebraCommonKernelPathNormalizer_toParentPathParameterWithDouble_withDouble_withDouble_([p getAnimationValue], [((id<GeogebraCommonKernelPath>) nil_chk(path)) getMinParameter], [path getMaxParameter]);
  if (pp->t_ != oldValue) {
    [path pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:p];
    [p updateCoords];
    return YES;
  }
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoPoint)

@implementation GeogebraCommonKernelGeosGeoPoint_$1

- (jint)compareWithId:(GeogebraCommonKernelGeosGeoPoint *)itemA
               withId:(GeogebraCommonKernelGeosGeoPoint *)itemB {
  jdouble compX = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(itemA))->inhomX_ - ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(itemB))->inhomX_;
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(compX)) {
    jdouble compY = itemA->inhomY_ - itemB->inhomY_;
    if (!GeogebraCommonKernelKernel_isZeroWithDouble_(compY)) return compY < 0 ? -1 : +1;
    return [itemA getConstructionIndex] > [itemB getConstructionIndex] ? -1 : 1;
  }
  return compX < 0 ? -1 : +1;
}

- (instancetype)init {
  GeogebraCommonKernelGeosGeoPoint_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelGeosGeoPoint", "getComparatorX" };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoPoint_$1 = { 2, "", "geogebra.common.kernel.geos", "GeoPoint", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Comparator<Lgeogebra/common/kernel/geos/GeoPoint;>;" };
  return &_GeogebraCommonKernelGeosGeoPoint_$1;
}

@end

void GeogebraCommonKernelGeosGeoPoint_$1_init(GeogebraCommonKernelGeosGeoPoint_$1 *self) {
  NSObject_init(self);
}

GeogebraCommonKernelGeosGeoPoint_$1 *new_GeogebraCommonKernelGeosGeoPoint_$1_init() {
  GeogebraCommonKernelGeosGeoPoint_$1 *self = [GeogebraCommonKernelGeosGeoPoint_$1 alloc];
  GeogebraCommonKernelGeosGeoPoint_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoPoint_$1)
