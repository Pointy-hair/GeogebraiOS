//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoCentroidPolygon.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/advanced/AlgoCentroidPolygon.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonKernelAdvancedAlgoCentroidPolygon () {
 @public
  GeogebraCommonKernelGeosGeoPolygon *p_;
  id<GeogebraCommonKernelKernelNDGeoPointND> centroid_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCentroidPolygon, p_, GeogebraCommonKernelGeosGeoPolygon *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCentroidPolygon, centroid_, id<GeogebraCommonKernelKernelNDGeoPointND>)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoCentroidPolygon_compute(GeogebraCommonKernelAdvancedAlgoCentroidPolygon *self);

@implementation GeogebraCommonKernelAdvancedAlgoCentroidPolygon

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p {
  GeogebraCommonKernelAdvancedAlgoCentroidPolygon_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPolygon_(self, cons, label, p);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Centroid();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, p_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(centroid_, [GeogebraCommonKernelGeosGeoElement class])];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoPolygon *)getPolygon {
  return p_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getPoint {
  return centroid_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoCentroidPolygon_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"CentroidOfA" withNSString:[((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(p_);
  RELEASE_(centroid_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPolygon:", "AlgoCentroidPolygon", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getPolygon", NULL, "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x0, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "p_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "centroid_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoCentroidPolygon = { 2, "AlgoCentroidPolygon", "geogebra.common.kernel.advanced", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoCentroidPolygon;
}

@end

void GeogebraCommonKernelAdvancedAlgoCentroidPolygon_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelAdvancedAlgoCentroidPolygon *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPolygon *p) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoCentroidPolygon_set_p_(self, p);
  GeogebraCommonKernelAdvancedAlgoCentroidPolygon_set_centroid_(self, [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) newGeoPointWithGeogebraCommonKernelConstruction:cons]);
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoCentroidPolygon_compute(self);
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->centroid_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoCentroidPolygon *new_GeogebraCommonKernelAdvancedAlgoCentroidPolygon_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPolygon *p) {
  GeogebraCommonKernelAdvancedAlgoCentroidPolygon *self = [GeogebraCommonKernelAdvancedAlgoCentroidPolygon alloc];
  GeogebraCommonKernelAdvancedAlgoCentroidPolygon_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPolygon_(self, cons, label, p);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCentroidPolygon_compute(GeogebraCommonKernelAdvancedAlgoCentroidPolygon *self) {
  if (![((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(self->p_)) isDefined]) {
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->centroid_)) setUndefined];
    return;
  }
  [self->p_ calcCentroidWithGeogebraCommonKernelKernelNDGeoPointND:self->centroid_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoCentroidPolygon)
