//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/locusequ/elements/EquationAngularBisectorLines.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/algos/AlgoAngularBisectorLines.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/locusequ/EquationElement.h"
#include "geogebra/common/kernel/locusequ/EquationPoint.h"
#include "geogebra/common/kernel/locusequ/EquationScope.h"
#include "geogebra/common/kernel/locusequ/SymbolicVector.h"
#include "geogebra/common/kernel/locusequ/elements/EquationAngularBisectorLines.h"
#include "geogebra/common/kernel/locusequ/elements/EquationGenericAngularBisector.h"
#include "geogebra/common/kernel/locusequ/elements/EquationGenericLine.h"

@implementation GeogebraCommonKernelLocusequElementsEquationAngularBisectorLines

- (instancetype)initWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)line
             withGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope {
  GeogebraCommonKernelLocusequElementsEquationAngularBisectorLines_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelLocusequEquationScope_(self, line, scope);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelLocusequEquationScope:", "EquationAngularBisectorLines", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelLocusequElementsEquationAngularBisectorLines = { 2, "EquationAngularBisectorLines", "geogebra.common.kernel.locusequ.elements", NULL, 0x1, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelLocusequElementsEquationAngularBisectorLines;
}

@end

void GeogebraCommonKernelLocusequElementsEquationAngularBisectorLines_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelLocusequElementsEquationAngularBisectorLines *self, GeogebraCommonKernelGeosGeoElement *line, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequElementsEquationGenericAngularBisector_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelLocusequEquationScope_(self, line, scope);
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines *algo = (GeogebraCommonKernelAlgosAlgoAngularBisectorLines *) check_class_cast([((GeogebraCommonKernelGeosGeoElement *) nil_chk(line)) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoAngularBisectorLines class]);
  GeogebraCommonKernelLocusequElementsEquationGenericLine *g, *h;
  g = (GeogebraCommonKernelLocusequElementsEquationGenericLine *) check_class_cast([((GeogebraCommonKernelLocusequEquationScope *) nil_chk([self getScope])) getElementWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelAlgosAlgoAngularBisectorLines *) nil_chk(algo)) getg]], [GeogebraCommonKernelLocusequElementsEquationGenericLine class]);
  h = (GeogebraCommonKernelLocusequElementsEquationGenericLine *) check_class_cast([((GeogebraCommonKernelLocusequEquationScope *) nil_chk([self getScope])) getElementWithGeogebraCommonKernelGeosGeoElement:[algo geth]], [GeogebraCommonKernelLocusequElementsEquationGenericLine class]);
  GeogebraCommonKernelLocusequEquationPoint *b = [((GeogebraCommonKernelLocusequEquationScope *) nil_chk([self getScope])) getPointWithGeogebraCommonKernelGeosGeoPoint:[algo getB]];
  [self setPointWithGeogebraCommonKernelLocusequEquationPoint:b];
  [self setVectorsWithGeogebraCommonKernelLocusequSymbolicVector:[((GeogebraCommonKernelLocusequElementsEquationGenericLine *) nil_chk(g)) getVector] withGeogebraCommonKernelLocusequSymbolicVector:[((GeogebraCommonKernelLocusequElementsEquationGenericLine *) nil_chk(h)) getVector]];
  if (line == IOSObjectArray_Get(nil_chk([algo getLines]), 1)) {
    [self setVectorWithGeogebraCommonKernelLocusequSymbolicVector:[((GeogebraCommonKernelLocusequSymbolicVector *) nil_chk([self getVector])) getNormal]];
  }
}

GeogebraCommonKernelLocusequElementsEquationAngularBisectorLines *new_GeogebraCommonKernelLocusequElementsEquationAngularBisectorLines_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelGeosGeoElement *line, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequElementsEquationAngularBisectorLines *self = [GeogebraCommonKernelLocusequElementsEquationAngularBisectorLines alloc];
  GeogebraCommonKernelLocusequElementsEquationAngularBisectorLines_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelLocusequEquationScope_(self, line, scope);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelLocusequElementsEquationAngularBisectorLines)
