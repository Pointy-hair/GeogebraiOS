//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoClosestPointLines3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoClosestPointLines3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D () {
 @public
  id<GeogebraCommonKernelKernelNDGeoLineND> g3D_, h3D_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *geoPointOnG_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D, g3D_, id<GeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D, h3D_, id<GeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D, geoPointOnG_, GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g3D
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h3D {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, c, label, g3D, h3D);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ClosestPoint();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(g3D_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(h3D_, [GeogebraCommonKernelGeosGeoElement class]));
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:geoPointOnG_];
  [self setDependencies];
}

- (id<GeogebraCommonKernelKernelNDGeoLineND>)getg {
  return g3D_;
}

- (id<GeogebraCommonKernelKernelNDGeoLineND>)geth {
  return h3D_;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)getPoint {
  return geoPointOnG_;
}

- (void)compute {
  if (![((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g3D_)) isDefined] || ![((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(h3D_)) isDefined]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(geoPointOnG_)) setUndefined];
    return;
  }
  IOSObjectArray *points = GeogebraCommonKernelMatrixCoordMatrixUtil_nearestPointsFromTwoLinesWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_([g3D_ getStartInhomCoords], [g3D_ getDirectionInD3], [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(h3D_)) getStartInhomCoords], [h3D_ getDirectionInD3]);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(geoPointOnG_)) setCoordsWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk(points), 0) withBoolean:NO];
}

- (void)dealloc {
  RELEASE_(g3D_);
  RELEASE_(h3D_);
  RELEASE_(geoPointOnG_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "AlgoClosestPointLines3D", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getg", NULL, "Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x0, NULL, NULL },
    { "geth", NULL, "Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x0, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g3D_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "h3D_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "geoPointOnG_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D = { 2, "AlgoClosestPointLines3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D *self, GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g3D, id<GeogebraCommonKernelKernelNDGeoLineND> h3D) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D_set_g3D_(self, g3D);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D_set_h3D_(self, h3D);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D_setAndConsume_geoPointOnG_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(c));
  [self setInputOutput];
  [self compute];
  [self->geoPointOnG_ setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g3D, id<GeogebraCommonKernelKernelNDGeoLineND> h3D) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, c, label, g3D, h3D);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoClosestPointLines3D)
