//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoFunctionInvert.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/advanced/AlgoFunctionInvert.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoFractionText.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/plugin/Operation.h"

@interface GeogebraCommonKernelAdvancedAlgoFunctionInvert () {
 @public
  GeogebraCommonKernelGeosGeoFunction *f_;
  GeogebraCommonKernelGeosGeoFunction *g_;
}

+ (GeogebraCommonPluginOperationEnum *)inverseWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)op;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoFunctionInvert, f_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoFunctionInvert, g_, GeogebraCommonKernelGeosGeoFunction *)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoFunctionInvert_compute(GeogebraCommonKernelAdvancedAlgoFunctionInvert *self);

__attribute__((unused)) static GeogebraCommonPluginOperationEnum *GeogebraCommonKernelAdvancedAlgoFunctionInvert_inverseWithGeogebraCommonPluginOperationEnum_(GeogebraCommonPluginOperationEnum *op);

@implementation GeogebraCommonKernelAdvancedAlgoFunctionInvert

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelAdvancedAlgoFunctionInvert_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelAdvancedAlgoFunctionInvert_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_(self, cons, f);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Invert();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, f_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunction *)getResult {
  return g_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoFunctionInvert_compute(self);
}

+ (GeogebraCommonPluginOperationEnum *)inverseWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)op {
  return GeogebraCommonKernelAdvancedAlgoFunctionInvert_inverseWithGeogebraCommonPluginOperationEnum_(op);
}

- (void)dealloc {
  RELEASE_(f_);
  RELEASE_(g_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunction:", "AlgoFunctionInvert", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoFunction:", "AlgoFunctionInvert", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "inverseWithGeogebraCommonPluginOperationEnum:", "inverse", "Lgeogebra.common.plugin.Operation;", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoFunctionInvert = { 2, "AlgoFunctionInvert", "geogebra.common.kernel.advanced", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoFunctionInvert;
}

@end

void GeogebraCommonKernelAdvancedAlgoFunctionInvert_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelAdvancedAlgoFunctionInvert *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAdvancedAlgoFunctionInvert_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_(self, cons, f);
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoFunctionInvert *new_GeogebraCommonKernelAdvancedAlgoFunctionInvert_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAdvancedAlgoFunctionInvert *self = [GeogebraCommonKernelAdvancedAlgoFunctionInvert alloc];
  GeogebraCommonKernelAdvancedAlgoFunctionInvert_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoFunctionInvert_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelAdvancedAlgoFunctionInvert *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoFunctionInvert_set_f_(self, f);
  GeogebraCommonKernelAdvancedAlgoFunctionInvert_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoFunctionInvert_compute(self);
}

GeogebraCommonKernelAdvancedAlgoFunctionInvert *new_GeogebraCommonKernelAdvancedAlgoFunctionInvert_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAdvancedAlgoFunctionInvert *self = [GeogebraCommonKernelAdvancedAlgoFunctionInvert alloc];
  GeogebraCommonKernelAdvancedAlgoFunctionInvert_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_(self, cons, f);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoFunctionInvert_compute(GeogebraCommonKernelAdvancedAlgoFunctionInvert *self) {
  if (![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  id<GeogebraCommonKernelArithmeticExpressionValue> root = [self->f_ getFunctionExpression];
  if (root == nil || [root isConstant]) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  GeogebraCommonKernelArithmeticFunctionVariable *oldFV = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([self->f_ getFunction])) getFunctionVariable];
  GeogebraCommonKernelArithmeticFunctionVariable *x = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(oldFV)) getSetVarString]) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, x) autorelease];
  jboolean fvLeft;
  while (root != nil && ![root isLeaf] && [root isExpressionNode]) {
    id<GeogebraCommonKernelArithmeticExpressionValue> left = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(root, [GeogebraCommonKernelArithmeticExpressionNode class])))) getLeft];
    id<GeogebraCommonKernelArithmeticExpressionValue> right = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(root, [GeogebraCommonKernelArithmeticExpressionNode class])))) getRight];
    GeogebraCommonPluginOperationEnum *op;
    switch ([op = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(root, [GeogebraCommonKernelArithmeticExpressionNode class])))) getOperation] ordinal]) {
      case GeogebraCommonPluginOperation_SIN:
      case GeogebraCommonPluginOperation_COS:
      case GeogebraCommonPluginOperation_TAN:
      case GeogebraCommonPluginOperation_ARCSIN:
      case GeogebraCommonPluginOperation_ARCCOS:
      case GeogebraCommonPluginOperation_ARCTAN:
      case GeogebraCommonPluginOperation_SINH:
      case GeogebraCommonPluginOperation_COSH:
      case GeogebraCommonPluginOperation_TANH:
      case GeogebraCommonPluginOperation_ASINH:
      case GeogebraCommonPluginOperation_ACOSH:
      case GeogebraCommonPluginOperation_ATANH:
      case GeogebraCommonPluginOperation_EXP:
      case GeogebraCommonPluginOperation_LOG:
      newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, newRoot, GeogebraCommonKernelAdvancedAlgoFunctionInvert_inverseWithGeogebraCommonPluginOperationEnum_(op), nil) autorelease];
      root = left;
      break;
      case GeogebraCommonPluginOperation_COT:
      newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0) autorelease], GeogebraCommonPluginOperationEnum_get_DIVIDE(), newRoot) autorelease], GeogebraCommonPluginOperationEnum_get_ARCTAN(), nil) autorelease];
      root = left;
      break;
      case GeogebraCommonPluginOperation_SEC:
      newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0) autorelease], GeogebraCommonPluginOperationEnum_get_DIVIDE(), newRoot) autorelease], GeogebraCommonPluginOperationEnum_get_ARCCOS(), nil) autorelease];
      root = left;
      break;
      case GeogebraCommonPluginOperation_CSC:
      newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0) autorelease], GeogebraCommonPluginOperationEnum_get_DIVIDE(), newRoot) autorelease], GeogebraCommonPluginOperationEnum_get_ARCSIN(), nil) autorelease];
      root = left;
      break;
      case GeogebraCommonPluginOperation_COTH:
      newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0) autorelease], GeogebraCommonPluginOperationEnum_get_DIVIDE(), newRoot) autorelease], GeogebraCommonPluginOperationEnum_get_ATANH(), nil) autorelease];
      root = left;
      break;
      case GeogebraCommonPluginOperation_SECH:
      newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0) autorelease], GeogebraCommonPluginOperationEnum_get_DIVIDE(), newRoot) autorelease], GeogebraCommonPluginOperationEnum_get_ACOSH(), nil) autorelease];
      root = left;
      break;
      case GeogebraCommonPluginOperation_CSCH:
      newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0) autorelease], GeogebraCommonPluginOperationEnum_get_DIVIDE(), newRoot) autorelease], GeogebraCommonPluginOperationEnum_get_ASINH(), nil) autorelease];
      root = left;
      break;
      case GeogebraCommonPluginOperation_CBRT:
      newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, newRoot, GeogebraCommonPluginOperationEnum_get_POWER(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 3.0) autorelease]) autorelease];
      root = left;
      break;
      case GeogebraCommonPluginOperation_SQRT:
      case GeogebraCommonPluginOperation_SQRT_SHORT:
      newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, newRoot, GeogebraCommonPluginOperationEnum_get_POWER(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 2.0) autorelease]) autorelease];
      root = left;
      break;
      case GeogebraCommonPluginOperation_LOG2:
      newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 2.0) autorelease], GeogebraCommonPluginOperationEnum_get_POWER(), newRoot) autorelease];
      root = left;
      break;
      case GeogebraCommonPluginOperation_LOG10:
      newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 10.0) autorelease], GeogebraCommonPluginOperationEnum_get_POWER(), newRoot) autorelease];
      root = left;
      break;
      case GeogebraCommonPluginOperation_LOGB:
      if ((fvLeft = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) containsWithGeogebraCommonKernelArithmeticExpressionValue:oldFV]) && ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) containsWithGeogebraCommonKernelArithmeticExpressionValue:oldFV])) {
        [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
        return;
      }
      newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, GeogebraCommonPluginOperationEnum_get_POWER(), right) autorelease];
      root = left;
      break;
      case GeogebraCommonPluginOperation_POWER:
      if (![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) containsWithGeogebraCommonKernelArithmeticExpressionValue:oldFV]) {
        newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, GeogebraCommonPluginOperationEnum_get_LOGB(), newRoot) autorelease];
        root = right;
      }
      else if (![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) containsWithGeogebraCommonKernelArithmeticExpressionValue:oldFV]) {
        if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right]) {
          jdouble index = ([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([right evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_maxPrecision_()]), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble]);
          if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(index, 3)) {
            newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, newRoot, GeogebraCommonPluginOperationEnum_get_CBRT(), nil) autorelease];
          }
          else if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(index, 2)) {
            newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, newRoot, GeogebraCommonPluginOperationEnum_get_SQRT(), nil) autorelease];
          }
          else if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(index, -1)) {
            newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, newRoot, GeogebraCommonPluginOperationEnum_get_POWER(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, -1.0) autorelease]) autorelease];
          }
          else if ([right isExpressionNode] && [((GeogebraCommonPluginOperationEnum *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class])) getOperation])) isEqual:GeogebraCommonPluginOperationEnum_get_DIVIDE()]) {
            id<GeogebraCommonKernelArithmeticExpressionValue> num = [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class])) getLeft];
            id<GeogebraCommonKernelArithmeticExpressionValue> den = [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class])) getRight];
            newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, newRoot, GeogebraCommonPluginOperationEnum_get_POWER(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, den, GeogebraCommonPluginOperationEnum_get_DIVIDE(), num) autorelease]) autorelease];
          }
          else {
            IOSDoubleArray *frac = GeogebraCommonKernelAlgosAlgoFractionText_DecimalToFractionWithDouble_withDouble_(index, GeogebraCommonKernelKernel_STANDARD_PRECISION);
            if (IOSDoubleArray_Get(nil_chk(frac), 0) < 0) {
              *IOSDoubleArray_GetRef(frac, 0) *= -1;
              *IOSDoubleArray_GetRef(frac, 1) *= -1;
            }
            if (IOSDoubleArray_Get(frac, 1) == 0 || IOSDoubleArray_Get(frac, 0) == 0) {
              [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
              return;
            }
            else if (IOSDoubleArray_Get(frac, 0) < 100 && IOSDoubleArray_Get(frac, 1) < 100) {
              newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, newRoot, GeogebraCommonPluginOperationEnum_get_POWER(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, IOSDoubleArray_Get(frac, 1)) autorelease], GeogebraCommonPluginOperationEnum_get_DIVIDE(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, IOSDoubleArray_Get(frac, 0)) autorelease]) autorelease]) autorelease];
            }
            else {
              newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, newRoot, GeogebraCommonPluginOperationEnum_get_POWER(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0 / index) autorelease]) autorelease];
            }
          }
        }
        else {
          newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, newRoot, GeogebraCommonPluginOperationEnum_get_POWER(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0) autorelease], GeogebraCommonPluginOperationEnum_get_DIVIDE(), right) autorelease]) autorelease];
        }
        root = left;
      }
      else {
        [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
        return;
      }
      break;
      case GeogebraCommonPluginOperation_PLUS:
      case GeogebraCommonPluginOperation_MULTIPLY:
      if ((fvLeft = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) containsWithGeogebraCommonKernelArithmeticExpressionValue:oldFV]) && ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) containsWithGeogebraCommonKernelArithmeticExpressionValue:oldFV])) {
        [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
        return;
      }
      if (!fvLeft) {
        newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, newRoot, GeogebraCommonKernelAdvancedAlgoFunctionInvert_inverseWithGeogebraCommonPluginOperationEnum_(op), left) autorelease];
        root = right;
      }
      else {
        newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, newRoot, GeogebraCommonKernelAdvancedAlgoFunctionInvert_inverseWithGeogebraCommonPluginOperationEnum_(op), right) autorelease];
        root = left;
      }
      break;
      case GeogebraCommonPluginOperation_MINUS:
      case GeogebraCommonPluginOperation_DIVIDE:
      if ((fvLeft = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) containsWithGeogebraCommonKernelArithmeticExpressionValue:oldFV]) && ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) containsWithGeogebraCommonKernelArithmeticExpressionValue:oldFV])) {
        [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
        return;
      }
      if (!fvLeft) {
        newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, op, newRoot) autorelease];
        root = right;
      }
      else {
        if ([((GeogebraCommonPluginOperationEnum *) nil_chk(op)) isEqual:GeogebraCommonPluginOperationEnum_get_DIVIDE()]) {
          newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, right, GeogebraCommonKernelAdvancedAlgoFunctionInvert_inverseWithGeogebraCommonPluginOperationEnum_(op), newRoot) autorelease];
        }
        else {
          newRoot = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, newRoot, GeogebraCommonKernelAdvancedAlgoFunctionInvert_inverseWithGeogebraCommonPluginOperationEnum_(op), right) autorelease];
        }
        root = left;
      }
      break;
      default:
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
      return;
    }
  }
  GeogebraCommonKernelArithmeticFunction *tempFun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(newRoot, x) autorelease];
  [tempFun initFunction];
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setDefinedWithBoolean:YES];
  [self->g_ setFunctionWithGeogebraCommonKernelArithmeticFunction:tempFun];
}

GeogebraCommonPluginOperationEnum *GeogebraCommonKernelAdvancedAlgoFunctionInvert_inverseWithGeogebraCommonPluginOperationEnum_(GeogebraCommonPluginOperationEnum *op) {
  GeogebraCommonKernelAdvancedAlgoFunctionInvert_initialize();
  switch ([op ordinal]) {
    case GeogebraCommonPluginOperation_PLUS:
    return GeogebraCommonPluginOperationEnum_get_MINUS();
    case GeogebraCommonPluginOperation_MINUS:
    return GeogebraCommonPluginOperationEnum_get_PLUS();
    case GeogebraCommonPluginOperation_MULTIPLY:
    return GeogebraCommonPluginOperationEnum_get_DIVIDE();
    case GeogebraCommonPluginOperation_DIVIDE:
    return GeogebraCommonPluginOperationEnum_get_MULTIPLY();
    case GeogebraCommonPluginOperation_SIN:
    return GeogebraCommonPluginOperationEnum_get_ARCSIN();
    case GeogebraCommonPluginOperation_COS:
    return GeogebraCommonPluginOperationEnum_get_ARCCOS();
    case GeogebraCommonPluginOperation_TAN:
    return GeogebraCommonPluginOperationEnum_get_ARCTAN();
    case GeogebraCommonPluginOperation_ARCSIN:
    return GeogebraCommonPluginOperationEnum_get_SIN();
    case GeogebraCommonPluginOperation_ARCCOS:
    return GeogebraCommonPluginOperationEnum_get_COS();
    case GeogebraCommonPluginOperation_ARCTAN:
    return GeogebraCommonPluginOperationEnum_get_TAN();
    case GeogebraCommonPluginOperation_SINH:
    return GeogebraCommonPluginOperationEnum_get_ASINH();
    case GeogebraCommonPluginOperation_COSH:
    return GeogebraCommonPluginOperationEnum_get_ACOSH();
    case GeogebraCommonPluginOperation_TANH:
    return GeogebraCommonPluginOperationEnum_get_ATANH();
    case GeogebraCommonPluginOperation_ASINH:
    return GeogebraCommonPluginOperationEnum_get_SINH();
    case GeogebraCommonPluginOperation_ACOSH:
    return GeogebraCommonPluginOperationEnum_get_COSH();
    case GeogebraCommonPluginOperation_ATANH:
    return GeogebraCommonPluginOperationEnum_get_TANH();
    case GeogebraCommonPluginOperation_EXP:
    return GeogebraCommonPluginOperationEnum_get_LOG();
    case GeogebraCommonPluginOperation_LOG:
    return GeogebraCommonPluginOperationEnum_get_EXP();
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoFunctionInvert)
