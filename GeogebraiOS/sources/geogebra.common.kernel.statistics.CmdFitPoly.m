//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/CmdFitPoly.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoFunctionFreehand.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/statistics/AlgoFitPoly.h"
#include "geogebra/common/kernel/statistics/CmdFitPoly.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/GeoClass.h"

@interface GeogebraCommonKernelStatisticsCmdFitPoly ()

- (GeogebraCommonKernelGeosGeoFunction *)FitPolyWithNSString:(NSString *)label
                         withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list
               withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)degree;

@end

__attribute__((unused)) static GeogebraCommonKernelGeosGeoFunction *GeogebraCommonKernelStatisticsCmdFitPoly_FitPolyWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelStatisticsCmdFitPoly *self, NSString *label, GeogebraCommonKernelGeosGeoList *list, id<GeogebraCommonKernelArithmeticNumberValue> degree);

@implementation GeogebraCommonKernelStatisticsCmdFitPoly

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelStatisticsCmdFitPoly_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  {
    GeogebraCommonKernelGeosGeoList *list;
    switch (n) {
      case 2:
      if ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 1)]) {
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoList]) {
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelStatisticsCmdFitPoly_FitPolyWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self, [c getLabel], (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
        else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunction]) {
          GeogebraCommonKernelGeosGeoFunction *fun = (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoFunction class]);
          if ([[((GeogebraCommonKernelGeosGeoFunction *) nil_chk(fun)) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoFunctionFreehand class]]) {
            GeogebraCommonKernelGeosGeoList *list = GeogebraCommonKernelCommandsCommandProcessor_wrapFreehandFunctionArgInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelAlgosAlgoFunctionFreehand_(kernelA_, (GeogebraCommonKernelAlgosAlgoFunctionFreehand *) check_class_cast([fun getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoFunctionFreehand class]));
            if (list != nil) {
              IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelStatisticsCmdFitPoly_FitPolyWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self, [c getLabel], list, (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelArithmeticNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
              return ret;
            }
          }
        }
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      default:
      list = GeogebraCommonKernelCommandsCommandProcessor_wrapInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElementArray_withInt_withGeogebraCommonPluginGeoClassEnum_(kernelA_, arg, ((IOSObjectArray *) nil_chk(arg))->size_ - 1, GeogebraCommonPluginGeoClassEnum_get_POINT());
      if (list != nil) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelStatisticsCmdFitPoly_FitPolyWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self, [c getLabel], list, (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, arg->size_ - 1), @protocol(GeogebraCommonKernelArithmeticNumberValue))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

- (GeogebraCommonKernelGeosGeoFunction *)FitPolyWithNSString:(NSString *)label
                         withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list
               withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)degree {
  return GeogebraCommonKernelStatisticsCmdFitPoly_FitPolyWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self, label, list, degree);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdFitPoly", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "FitPolyWithNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelArithmeticNumberValue:", "FitPoly", "Lgeogebra.common.kernel.geos.GeoFunction;", 0x12, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsCmdFitPoly = { 2, "CmdFitPoly", "geogebra.common.kernel.statistics", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsCmdFitPoly;
}

@end

void GeogebraCommonKernelStatisticsCmdFitPoly_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelStatisticsCmdFitPoly *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelStatisticsCmdFitPoly *new_GeogebraCommonKernelStatisticsCmdFitPoly_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelStatisticsCmdFitPoly *self = [GeogebraCommonKernelStatisticsCmdFitPoly alloc];
  GeogebraCommonKernelStatisticsCmdFitPoly_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

GeogebraCommonKernelGeosGeoFunction *GeogebraCommonKernelStatisticsCmdFitPoly_FitPolyWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelStatisticsCmdFitPoly *self, NSString *label, GeogebraCommonKernelGeosGeoList *list, id<GeogebraCommonKernelArithmeticNumberValue> degree) {
  GeogebraCommonKernelStatisticsAlgoFitPoly *algo = [new_GeogebraCommonKernelStatisticsAlgoFitPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, label, list, degree) autorelease];
  GeogebraCommonKernelGeosGeoFunction *function = [algo getFitPoly];
  return function;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsCmdFitPoly)
