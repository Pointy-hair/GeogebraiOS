//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/cas/AlgoTangentFunctionNumber.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/cas/AlgoDerivative.h"
#include "geogebra/common/kernel/cas/AlgoTangentFunctionNumber.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Double.h"

@interface GeogebraCommonKernelCasAlgoTangentFunctionNumber () {
 @public
  id<GeogebraCommonKernelArithmeticNumberValue> n_;
  GeogebraCommonKernelGeosGeoElement *ngeo_;
  GeogebraCommonKernelGeosGeoFunction *f_;
  GeogebraCommonKernelGeosGeoLine *tangent_;
  GeogebraCommonKernelGeosGeoPoint *T_;
  GeogebraCommonKernelGeosGeoFunction *deriv_;
  GeogebraCommonKernelCasAlgoDerivative *algo_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionNumber, n_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionNumber, ngeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionNumber, f_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionNumber, tangent_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionNumber, T_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionNumber, deriv_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentFunctionNumber, algo_, GeogebraCommonKernelCasAlgoDerivative *)

__attribute__((unused)) static void GeogebraCommonKernelCasAlgoTangentFunctionNumber_compute(GeogebraCommonKernelCasAlgoTangentFunctionNumber *self);

@implementation GeogebraCommonKernelCasAlgoTangentFunctionNumber

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)n
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelCasAlgoTangentFunctionNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, n, f);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Tangent();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_TANGENTS;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, ngeo_);
  IOSObjectArray_Set(input_, 1, f_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:tangent_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoLine *)getTangent {
  return tangent_;
}

- (GeogebraCommonKernelGeosGeoFunction *)getFunction {
  return f_;
}

- (void)compute {
  GeogebraCommonKernelCasAlgoTangentFunctionNumber_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"TangentToAatB" withNSString:[((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:JreStrcat("$$", @"x = ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(ngeo_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl])];
}

- (GeogebraCommonKernelGeosGeoPoint *)getTangentPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                        withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line {
  if (geo == f_ && line == tangent_) {
    return T_;
  }
  return nil;
}

- (void)dealloc {
  RELEASE_(n_);
  RELEASE_(ngeo_);
  RELEASE_(f_);
  RELEASE_(tangent_);
  RELEASE_(T_);
  RELEASE_(deriv_);
  RELEASE_(algo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoFunction:", "AlgoTangentFunctionNumber", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getTangent", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getFunction", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getTangentPointWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoLine:", "getTangentPoint", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "ngeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "tangent_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "T_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "deriv_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "algo_", NULL, 0x2, "Lgeogebra.common.kernel.cas.AlgoDerivative;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCasAlgoTangentFunctionNumber = { 2, "AlgoTangentFunctionNumber", "geogebra.common.kernel.cas", NULL, 0x1, 9, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCasAlgoTangentFunctionNumber;
}

@end

void GeogebraCommonKernelCasAlgoTangentFunctionNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelCasAlgoTangentFunctionNumber *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> n, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelCasAlgoTangentFunctionNumber_set_n_(self, n);
  GeogebraCommonKernelCasAlgoTangentFunctionNumber_set_ngeo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(n)) toGeoElement]);
  GeogebraCommonKernelCasAlgoTangentFunctionNumber_set_f_(self, f);
  GeogebraCommonKernelCasAlgoTangentFunctionNumber_setAndConsume_tangent_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelCasAlgoTangentFunctionNumber_setAndConsume_T_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  [self->tangent_ setStartPointWithGeogebraCommonKernelGeosGeoPoint:self->T_];
  GeogebraCommonKernelCasAlgoTangentFunctionNumber_setAndConsume_algo_(self, new_GeogebraCommonKernelCasAlgoDerivative_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withBoolean_(cons, f, YES));
  GeogebraCommonKernelCasAlgoTangentFunctionNumber_set_deriv_(self, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast([self->algo_ getResult], [GeogebraCommonKernelGeosGeoFunction class]));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->algo_];
  [self setInputOutput];
  GeogebraCommonKernelCasAlgoTangentFunctionNumber_compute(self);
  [self->tangent_ setLabelWithNSString:label];
}

GeogebraCommonKernelCasAlgoTangentFunctionNumber *new_GeogebraCommonKernelCasAlgoTangentFunctionNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> n, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelCasAlgoTangentFunctionNumber *self = [GeogebraCommonKernelCasAlgoTangentFunctionNumber alloc];
  GeogebraCommonKernelCasAlgoTangentFunctionNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, n, f);
  return self;
}

void GeogebraCommonKernelCasAlgoTangentFunctionNumber_compute(GeogebraCommonKernelCasAlgoTangentFunctionNumber *self) {
  jdouble a = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->n_)) getDouble];
  if (![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) isDefined] || ![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->deriv_)) isDefined] || JavaLangDouble_isInfiniteWithDouble_(a) || JavaLangDouble_isNaNWithDouble_(a)) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->tangent_)) setUndefined];
    return;
  }
  jdouble fa = [self->f_ evaluateWithDouble:a];
  jdouble slope = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->deriv_)) evaluateWithDouble:a];
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->tangent_)) setCoordsWithDouble:-slope withDouble:1.0 withDouble:a * slope - fa];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->T_)) setCoordsWithDouble:a withDouble:fa withDouble:1.0];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCasAlgoTangentFunctionNumber)
