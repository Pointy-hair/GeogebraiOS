//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoRootNewton.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntersectAbstract.h"
#include "geogebra/common/kernel/algos/AlgoRootNewton.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/roots/RealRootAdapter.h"
#include "geogebra/common/kernel/roots/RealRootDerivAdapter.h"
#include "geogebra/common/kernel/roots/RealRootDerivFunction.h"
#include "geogebra/common/kernel/roots/RealRootUtil.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "org/apache/commons/math/analysis/solvers/BrentSolver.h"
#include "org/apache/commons/math/analysis/solvers/NewtonSolver.h"

@interface GeogebraCommonKernelAlgosAlgoRootNewton () {
 @public
  GeogebraCommonKernelGeosGeoFunction *f_;
  id<GeogebraCommonKernelArithmeticNumberValue> start_;
  GeogebraCommonKernelGeosGeoPoint *rootPoint_;
  GeogebraCommonKernelGeosGeoElement *startGeo_;
  OrgApacheCommonsMathAnalysisSolversNewtonSolver *rootFinderNewton_;
  OrgApacheCommonsMathAnalysisSolversBrentSolver *rootFinderBrent_;
}

+ (jboolean)checkRootWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun
                                                     withDouble:(jdouble)root;

- (IOSDoubleArray *)getDomainWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun
                                                             withDouble:(jdouble)start;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootNewton, f_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootNewton, start_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootNewton, rootPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootNewton, startGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootNewton, rootFinderNewton_, OrgApacheCommonsMathAnalysisSolversNewtonSolver *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootNewton, rootFinderBrent_, OrgApacheCommonsMathAnalysisSolversBrentSolver *)

__attribute__((unused)) static jdouble GeogebraCommonKernelAlgosAlgoRootNewton_calcRootWithGeogebraCommonKernelArithmeticFunction_withDouble_(GeogebraCommonKernelAlgosAlgoRootNewton *self, GeogebraCommonKernelArithmeticFunction *fun, jdouble start);

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoRootNewton_checkRootWithGeogebraCommonKernelArithmeticFunction_withDouble_(GeogebraCommonKernelArithmeticFunction *fun, jdouble root);

__attribute__((unused)) static IOSDoubleArray *GeogebraCommonKernelAlgosAlgoRootNewton_getDomainWithGeogebraCommonKernelArithmeticFunction_withDouble_(GeogebraCommonKernelAlgosAlgoRootNewton *self, GeogebraCommonKernelArithmeticFunction *fun, jdouble start);

@implementation GeogebraCommonKernelAlgosAlgoRootNewton

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)start {
  GeogebraCommonKernelAlgosAlgoRootNewton_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, f, start);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelAlgosAlgoRootNewton_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Root();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, f_);
  IOSObjectArray_Set(input_, 1, startGeo_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:rootPoint_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoPoint *)getRootPoint {
  return rootPoint_;
}

- (void)compute {
  if (!([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(startGeo_)) isDefined])) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(rootPoint_)) setUndefined];
  }
  else {
    jdouble startValue = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(start_)) getDouble];
    GeogebraCommonKernelArithmeticFunction *fun = [f_ getFunctionWithDouble:startValue];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(rootPoint_)) setCoordsWithDouble:GeogebraCommonKernelAlgosAlgoRootNewton_calcRootWithGeogebraCommonKernelArithmeticFunction_withDouble_(self, fun, startValue) withDouble:0.0 withDouble:1.0];
  }
}

- (jdouble)calcRootWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun
                                                   withDouble:(jdouble)start {
  return GeogebraCommonKernelAlgosAlgoRootNewton_calcRootWithGeogebraCommonKernelArithmeticFunction_withDouble_(self, fun, start);
}

+ (jboolean)checkRootWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun
                                                     withDouble:(jdouble)root {
  return GeogebraCommonKernelAlgosAlgoRootNewton_checkRootWithGeogebraCommonKernelArithmeticFunction_withDouble_(fun, root);
}

- (IOSDoubleArray *)getDomainWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun
                                                             withDouble:(jdouble)start {
  return GeogebraCommonKernelAlgosAlgoRootNewton_getDomainWithGeogebraCommonKernelArithmeticFunction_withDouble_(self, fun, start);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"RootOfAWithInitialValueB" withNSString:[((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(startGeo_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(f_);
  RELEASE_(start_);
  RELEASE_(rootPoint_);
  RELEASE_(startGeo_);
  RELEASE_(rootFinderNewton_);
  RELEASE_(rootFinderBrent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoRootNewton", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "AlgoRootNewton", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getRootPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "calcRootWithGeogebraCommonKernelArithmeticFunction:withDouble:", "calcRoot", "D", 0x11, NULL, NULL },
    { "checkRootWithGeogebraCommonKernelArithmeticFunction:withDouble:", "checkRoot", "Z", 0xa, NULL, NULL },
    { "getDomainWithGeogebraCommonKernelArithmeticFunction:withDouble:", "getDomain", "[D", 0x2, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_ITERATIONS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoRootNewton_MAX_ITERATIONS },
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "start_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "rootPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "startGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "rootFinderNewton_", NULL, 0x2, "Lorg.apache.commons.math.analysis.solvers.NewtonSolver;", NULL, NULL,  },
    { "rootFinderBrent_", NULL, 0x2, "Lorg.apache.commons.math.analysis.solvers.BrentSolver;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoRootNewton = { 2, "AlgoRootNewton", "geogebra.common.kernel.algos", NULL, 0x1, 10, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoRootNewton;
}

@end

void GeogebraCommonKernelAlgosAlgoRootNewton_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoRootNewton *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, id<GeogebraCommonKernelArithmeticNumberValue> start) {
  GeogebraCommonKernelAlgosAlgoIntersectAbstract_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoRootNewton_set_f_(self, f);
  GeogebraCommonKernelAlgosAlgoRootNewton_set_start_(self, start);
  GeogebraCommonKernelAlgosAlgoRootNewton_set_startGeo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(start)) toGeoElement]);
  GeogebraCommonKernelAlgosAlgoRootNewton_setAndConsume_rootPoint_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self compute];
  [self->rootPoint_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoRootNewton *new_GeogebraCommonKernelAlgosAlgoRootNewton_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, id<GeogebraCommonKernelArithmeticNumberValue> start) {
  GeogebraCommonKernelAlgosAlgoRootNewton *self = [GeogebraCommonKernelAlgosAlgoRootNewton alloc];
  GeogebraCommonKernelAlgosAlgoRootNewton_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, f, start);
  return self;
}

void GeogebraCommonKernelAlgosAlgoRootNewton_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoRootNewton *self, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelAlgosAlgoIntersectAbstract_initWithGeogebraCommonKernelConstruction_(self, cons);
}

GeogebraCommonKernelAlgosAlgoRootNewton *new_GeogebraCommonKernelAlgosAlgoRootNewton_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelAlgosAlgoRootNewton *self = [GeogebraCommonKernelAlgosAlgoRootNewton alloc];
  GeogebraCommonKernelAlgosAlgoRootNewton_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

jdouble GeogebraCommonKernelAlgosAlgoRootNewton_calcRootWithGeogebraCommonKernelArithmeticFunction_withDouble_(GeogebraCommonKernelAlgosAlgoRootNewton *self, GeogebraCommonKernelArithmeticFunction *fun, jdouble start) {
  jdouble root = JavaLangDouble_NaN;
  if (self->rootFinderBrent_ == nil) GeogebraCommonKernelAlgosAlgoRootNewton_setAndConsume_rootFinderBrent_(self, new_OrgApacheCommonsMathAnalysisSolversBrentSolver_initWithDouble_(GeogebraCommonKernelKernel_STANDARD_PRECISION));
  @try {
    jdouble step = 1;
    root = [((OrgApacheCommonsMathAnalysisSolversBrentSolver *) nil_chk(self->rootFinderBrent_)) solveWithInt:GeogebraCommonKernelAlgosAlgoRootNewton_MAX_ITERATIONS withOrgApacheCommonsMathAnalysisUnivariateRealFunction:[new_GeogebraCommonKernelRootsRealRootAdapter_initWithGeogebraCommonKernelRootsRealRootFunction_(fun) autorelease] withDouble:start - step withDouble:start + step withDouble:start];
    if (GeogebraCommonKernelAlgosAlgoRootNewton_checkRootWithGeogebraCommonKernelArithmeticFunction_withDouble_(fun, root)) {
      return root;
    }
  }
  @catch (JavaLangException *e) {
    root = JavaLangDouble_NaN;
  }
  IOSDoubleArray *borders = GeogebraCommonKernelAlgosAlgoRootNewton_getDomainWithGeogebraCommonKernelArithmeticFunction_withDouble_(self, fun, start);
  @try {
    root = [((OrgApacheCommonsMathAnalysisSolversBrentSolver *) nil_chk(self->rootFinderBrent_)) solveWithInt:GeogebraCommonKernelAlgosAlgoRootNewton_MAX_ITERATIONS withOrgApacheCommonsMathAnalysisUnivariateRealFunction:[new_GeogebraCommonKernelRootsRealRootAdapter_initWithGeogebraCommonKernelRootsRealRootFunction_(fun) autorelease] withDouble:IOSDoubleArray_Get(nil_chk(borders), 0) withDouble:IOSDoubleArray_Get(borders, 1) withDouble:start];
    if (GeogebraCommonKernelAlgosAlgoRootNewton_checkRootWithGeogebraCommonKernelArithmeticFunction_withDouble_(fun, root)) {
      return root;
    }
  }
  @catch (JavaLangException *e) {
    root = JavaLangDouble_NaN;
  }
  id<GeogebraCommonKernelRootsRealRootDerivFunction> derivFun = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) getRealRootDerivFunction];
  if (derivFun != nil) {
    jdouble eval = [fun evaluateWithDouble:start];
    if (JavaLangDouble_isNaNWithDouble_(eval) || JavaLangDouble_isInfiniteWithDouble_(eval)) {
      *IOSDoubleArray_GetRef(nil_chk(borders), 0) = 0.9 * IOSDoubleArray_Get(borders, 0) + 0.1 * IOSDoubleArray_Get(borders, 1);
      start = (IOSDoubleArray_Get(borders, 0) + IOSDoubleArray_Get(borders, 1)) / 2;
    }
    if (self->rootFinderNewton_ == nil) {
      GeogebraCommonKernelAlgosAlgoRootNewton_setAndConsume_rootFinderNewton_(self, new_OrgApacheCommonsMathAnalysisSolversNewtonSolver_init());
    }
    @try {
      root = [((OrgApacheCommonsMathAnalysisSolversNewtonSolver *) nil_chk(self->rootFinderNewton_)) solveWithInt:GeogebraCommonKernelAlgosAlgoRootNewton_MAX_ITERATIONS withOrgApacheCommonsMathAnalysisUnivariateRealFunction:[new_GeogebraCommonKernelRootsRealRootDerivAdapter_initWithGeogebraCommonKernelRootsRealRootDerivFunction_(derivFun) autorelease] withDouble:IOSDoubleArray_Get(nil_chk(borders), 0) withDouble:IOSDoubleArray_Get(borders, 1) withDouble:start];
      if (GeogebraCommonKernelAlgosAlgoRootNewton_checkRootWithGeogebraCommonKernelArithmeticFunction_withDouble_(fun, root)) {
        return root;
      }
    }
    @catch (JavaLangException *e) {
      root = JavaLangDouble_NaN;
    }
  }
  return JavaLangDouble_NaN;
}

jboolean GeogebraCommonKernelAlgosAlgoRootNewton_checkRootWithGeogebraCommonKernelArithmeticFunction_withDouble_(GeogebraCommonKernelArithmeticFunction *fun, jdouble root) {
  GeogebraCommonKernelAlgosAlgoRootNewton_initialize();
  return !JavaLangDouble_isNaNWithDouble_(root) && (JavaLangMath_absWithDouble_([((GeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) evaluateWithDouble:root]) < GeogebraCommonKernelKernel_MIN_PRECISION);
}

IOSDoubleArray *GeogebraCommonKernelAlgosAlgoRootNewton_getDomainWithGeogebraCommonKernelArithmeticFunction_withDouble_(GeogebraCommonKernelAlgosAlgoRootNewton *self, GeogebraCommonKernelArithmeticFunction *fun, jdouble start) {
  return GeogebraCommonKernelRootsRealRootUtil_getDefinedIntervalWithGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(fun, start - 0.5, start + 0.5);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoRootNewton)
