//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdSetDynamicColor.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoDependentList.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/scripting/CmdSetDynamicColor.h"
#include "geogebra/common/main/MyError.h"
#include "java/util/ArrayList.h"

@implementation GeogebraCommonKernelScriptingCmdSetDynamicColor

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdSetDynamicColor_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg2;
  {
    IOSBooleanArray *ok;
    switch (n) {
      case 4:
      ok = [IOSBooleanArray arrayWithLength:n];
      arg2 = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ((*IOSBooleanArray_GetRef(ok, 1) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg2), 1)]) && (*IOSBooleanArray_GetRef(ok, 2) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg2, 2)]) && (*IOSBooleanArray_GetRef(ok, 3) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg2, 3)])) {
        GeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(arg2, 0);
        JavaUtilArrayList *listItems = [new_JavaUtilArrayList_init() autorelease];
        [listItems addWithId:IOSObjectArray_Get(arg2, 1)];
        [listItems addWithId:IOSObjectArray_Get(arg2, 2)];
        [listItems addWithId:IOSObjectArray_Get(arg2, 3)];
        GeogebraCommonKernelAlgosAlgoDependentList *algo = [new_GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withJavaUtilArrayList_withBoolean_(cons_, listItems, NO) autorelease];
        [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getConstruction])) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
        GeogebraCommonKernelGeosGeoList *list = [algo getGeoList];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setColorFunctionWithGeogebraCommonKernelGeosGeoList:list];
        [geo updateRepaint];
        return;
      }
      else if (!IOSBooleanArray_Get(ok, 1)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg2, 1)];
      else if (!IOSBooleanArray_Get(ok, 2)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg2, 2)];
      else @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg2, 3)];
      case 5:
      ok = [IOSBooleanArray arrayWithLength:n];
      arg2 = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ((*IOSBooleanArray_GetRef(ok, 1) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg2), 1)]) && (*IOSBooleanArray_GetRef(ok, 2) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg2, 2)]) && (*IOSBooleanArray_GetRef(ok, 3) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg2, 3)]) && (*IOSBooleanArray_GetRef(ok, 4) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg2, 4)])) {
        GeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(arg2, 0);
        JavaUtilArrayList *listItems = [new_JavaUtilArrayList_init() autorelease];
        [listItems addWithId:IOSObjectArray_Get(arg2, 1)];
        [listItems addWithId:IOSObjectArray_Get(arg2, 2)];
        [listItems addWithId:IOSObjectArray_Get(arg2, 3)];
        [listItems addWithId:IOSObjectArray_Get(arg2, 4)];
        GeogebraCommonKernelAlgosAlgoDependentList *algo = [new_GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withJavaUtilArrayList_withBoolean_(cons_, listItems, NO) autorelease];
        [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getConstruction])) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
        GeogebraCommonKernelGeosGeoList *list = [algo getGeoList];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setColorFunctionWithGeogebraCommonKernelGeosGeoList:list];
        [geo updateRepaint];
        return;
      }
      else if (!IOSBooleanArray_Get(ok, 1)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg2, 1)];
      else if (!IOSBooleanArray_Get(ok, 2)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg2, 2)];
      else if (!IOSBooleanArray_Get(ok, 3)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg2, 3)];
      else @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg2, 4)];
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdSetDynamicColor", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x14, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdSetDynamicColor = { 2, "CmdSetDynamicColor", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdSetDynamicColor;
}

@end

void GeogebraCommonKernelScriptingCmdSetDynamicColor_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdSetDynamicColor *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdSetDynamicColor *new_GeogebraCommonKernelScriptingCmdSetDynamicColor_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdSetDynamicColor *self = [GeogebraCommonKernelScriptingCmdSetDynamicColor alloc];
  GeogebraCommonKernelScriptingCmdSetDynamicColor_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdSetDynamicColor)
