//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/AlgebraProcessor.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gwt/regexp/shared/MatchResult.h"
#include "com/google/gwt/regexp/shared/RegExp.h"
#include "geogebra/common/io/MathMLParser.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/KernelCAS.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoCurveCartesian.h"
#include "geogebra/common/kernel/algos/AlgoDependentBoolean.h"
#include "geogebra/common/kernel/algos/AlgoDependentConic.h"
#include "geogebra/common/kernel/algos/AlgoDependentFunctionNVar.h"
#include "geogebra/common/kernel/algos/AlgoDependentGeoCopy.h"
#include "geogebra/common/kernel/algos/AlgoDependentInterval.h"
#include "geogebra/common/kernel/algos/AlgoDependentLine.h"
#include "geogebra/common/kernel/algos/AlgoDependentListExpression.h"
#include "geogebra/common/kernel/algos/AlgoDependentNumber.h"
#include "geogebra/common/kernel/algos/AlgoDependentPoint.h"
#include "geogebra/common/kernel/algos/AlgoDependentText.h"
#include "geogebra/common/kernel/algos/AlgoDependentVector.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoLaTeX.h"
#include "geogebra/common/kernel/arithmetic/AssignmentType.h"
#include "geogebra/common/kernel/arithmetic/BooleanValue.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/Inspecting.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/Polynomial.h"
#include "geogebra/common/kernel/arithmetic/TextValue.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/arithmetic/Variable.h"
#include "geogebra/common/kernel/arithmetic/VectorValue.h"
#include "geogebra/common/kernel/arithmetic3D/MyVec3DNode.h"
#include "geogebra/common/kernel/arithmetic3D/Vector3DValue.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/CommandDispatcher.h"
#include "geogebra/common/kernel/commands/MyException.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoFunctionable.h"
#include "geogebra/common/kernel/geos/GeoInterval.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoScriptAction.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoUserInputElement.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/implicit/AlgoDependentImplicitPoly.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/parser/ParseException.h"
#include "geogebra/common/kernel/parser/Parser.h"
#include "geogebra/common/kernel/parser/ParserInterface.h"
#include "geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/AppCompanion.h"
#include "geogebra/common/main/BracketsError.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/AsyncOperation.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelCommandsAlgebraProcessor () {
 @public
  GeogebraCommonMainLocalization *loc_;
  id<GeogebraCommonKernelParserParserInterface> parser_;
  GeogebraCommonIoMathMLParser *mathmlParserGGB_;
  GeogebraCommonIoMathMLParser *mathmlParserLaTeX_;
}

- (GeogebraCommonKernelArithmeticValidExpression *)checkParametricEquationFWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)ve
                                                                           withGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)fallback;

- (IOSObjectArray *)checkParametricEquationWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)ve
                                                                         withJavaUtilTreeSet:(JavaUtilTreeSet *)undefinedVariables;

- (IOSObjectArray *)tryReplacingProductsWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)ve;

- (IOSObjectArray *)parseMathmlWithNSString:(NSString *)cmd
                                withBoolean:(jboolean)storeUndo
                                withBoolean:(jboolean)allowErrorDialog
                                withBoolean:(jboolean)throwMyError
                                withBoolean:(jboolean)autoCreateSliders
       withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)callback0;

+ (jboolean)compatibleTypesWithGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)type
                           withGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)type2;

- (GeogebraCommonKernelArithmeticExpressionNode *)exprWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev;

- (jboolean)getTrigCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)cx
                   withGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefX
                         withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)scale_
                                   withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)var;

- (void)addWithGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefX
                                                          withInt:(jint)i
                 withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)scale_;

+ (jint)getDirectionWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)enLeft;

- (GeogebraCommonKernelGeosGeoFunction *)DependentIntervalWithNSString:(NSString *)label
                            withGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun;

- (GeogebraCommonKernelGeosGeoElement *)DependentGeoCopyWithNSString:(NSString *)label
                              withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)origGeoNode;

- (GeogebraCommonKernelGeosGeoFunctionNVar *)DependentFunctionNVarWithNSString:(NSString *)label
                                withGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *)fun;

- (GeogebraCommonKernelGeosGeoLine *)DependentLineWithNSString:(NSString *)label
                    withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ;

- (GeogebraCommonKernelGeosGeoConic *)DependentConicWithNSString:(NSString *)label
                      withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ;

- (IOSObjectArray *)processNumberWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)n
                                withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)evaluate;

- (GeogebraCommonKernelGeosGeoNumeric *)DependentNumberWithNSString:(NSString *)label
                   withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root
                                                        withBoolean:(jboolean)isAngle;

- (IOSObjectArray *)processListWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)n
                                       withGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)evalList;

- (IOSObjectArray *)processTextWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)n
                              withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)evaluate;

- (GeogebraCommonKernelGeosGeoText *)DependentTextWithNSString:(NSString *)label
              withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root;

- (IOSObjectArray *)processBooleanWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)n
                                 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)evaluate;

- (IOSObjectArray *)processPointVectorWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)n
                                     withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)evaluate;

- (GeogebraCommonKernelGeosGeoPoint *)DependentPointWithNSString:(NSString *)label
                withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root
                                                     withBoolean:(jboolean)complex;

- (GeogebraCommonKernelGeosGeoVector *)DependentVectorWithNSString:(NSString *)label
                  withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root;

- (IOSObjectArray *)processGeoCopyWithNSString:(NSString *)copyLabel
withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)origGeoNode;

- (GeogebraCommonKernelGeosGeoElement *)DependentGeoCopyWithNSString:(NSString *)label
                    withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)origGeoNode;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCommandsAlgebraProcessor, loc_, GeogebraCommonMainLocalization *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCommandsAlgebraProcessor, parser_, id<GeogebraCommonKernelParserParserInterface>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCommandsAlgebraProcessor, mathmlParserGGB_, GeogebraCommonIoMathMLParser *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCommandsAlgebraProcessor, mathmlParserLaTeX_, GeogebraCommonIoMathMLParser *)

__attribute__((unused)) static void GeogebraCommonKernelCommandsAlgebraProcessor_processCasCellWithGeogebraCommonKernelGeosGeoCasCell_withBoolean_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelGeosGeoCasCell *casCell, jboolean isLastRow);

__attribute__((unused)) static GeogebraCommonKernelArithmeticValidExpression *GeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationFWithGeogebraCommonKernelArithmeticValidExpression_withGeogebraCommonKernelArithmeticValidExpression_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticValidExpression *ve, GeogebraCommonKernelArithmeticValidExpression *fallback);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationWithGeogebraCommonKernelArithmeticValidExpression_withJavaUtilTreeSet_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticValidExpression *ve, JavaUtilTreeSet *undefinedVariables);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_tryReplacingProductsWithGeogebraCommonKernelArithmeticValidExpression_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticValidExpression *ve);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_parseMathmlWithNSString_withBoolean_withBoolean_withBoolean_withBoolean_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *cmd, jboolean storeUndo, jboolean allowErrorDialog, jboolean throwMyError, jboolean autoCreateSliders, GeogebraCommonUtilAsyncOperation *callback0);

__attribute__((unused)) static jboolean GeogebraCommonKernelCommandsAlgebraProcessor_compatibleTypesWithGeogebraCommonPluginGeoClassEnum_withGeogebraCommonPluginGeoClassEnum_(GeogebraCommonPluginGeoClassEnum *type, GeogebraCommonPluginGeoClassEnum *type2);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processFunctionWithGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticFunction *fun);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelCommandsAlgebraProcessor_exprWithGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelCommandsAlgebraProcessor *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev);

__attribute__((unused)) static jboolean GeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValueArray_withGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticExpressionNode *cx, IOSObjectArray *coefX, GeogebraCommonKernelArithmeticExpressionNode *scale_, GeogebraCommonKernelGeosGeoElement *var);

__attribute__((unused)) static void GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelCommandsAlgebraProcessor *self, IOSObjectArray *coefX, jint i, GeogebraCommonKernelArithmeticExpressionNode *scale_);

__attribute__((unused)) static jint GeogebraCommonKernelCommandsAlgebraProcessor_getDirectionWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelArithmeticExpressionNode *enLeft);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoFunction *GeogebraCommonKernelCommandsAlgebraProcessor_DependentIntervalWithNSString_withGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticFunction *fun);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelGeosGeoElement *origGeoNode);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoFunctionNVar *GeogebraCommonKernelCommandsAlgebraProcessor_DependentFunctionNVarWithNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticFunctionNVar *fun);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithGeogebraCommonKernelArithmeticEquation_withBoolean_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticEquation *equ, jboolean allowConstant);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoLine *GeogebraCommonKernelCommandsAlgebraProcessor_DependentLineWithNSString_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoConic *GeogebraCommonKernelCommandsAlgebraProcessor_DependentConicWithNSString_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processNumberWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticExpressionNode *n, id<GeogebraCommonKernelArithmeticExpressionValue> evaluate);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoNumeric *GeogebraCommonKernelCommandsAlgebraProcessor_DependentNumberWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root, jboolean isAngle);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processListWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticMyList_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticExpressionNode *n, GeogebraCommonKernelArithmeticMyList *evalList);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoList *GeogebraCommonKernelCommandsAlgebraProcessor_ListExpressionWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processTextWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticExpressionNode *n, id<GeogebraCommonKernelArithmeticExpressionValue> evaluate);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoText *GeogebraCommonKernelCommandsAlgebraProcessor_DependentTextWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoText *GeogebraCommonKernelCommandsAlgebraProcessor_TextWithNSString_withNSString_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, NSString *text);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processBooleanWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticExpressionNode *n, id<GeogebraCommonKernelArithmeticExpressionValue> evaluate);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processPointVectorWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticExpressionNode *n, id<GeogebraCommonKernelArithmeticExpressionValue> evaluate);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsAlgebraProcessor_DependentPointWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root, jboolean complex);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoVector *GeogebraCommonKernelCommandsAlgebraProcessor_DependentVectorWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processGeoCopyWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *copyLabel, GeogebraCommonKernelArithmeticExpressionNode *origGeoNode);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *origGeoNode);

@interface GeogebraCommonKernelCommandsAlgebraProcessor_$1 : GeogebraCommonUtilAsyncOperation {
 @public
  GeogebraCommonKernelCommandsAlgebraProcessor *this$0_;
  GeogebraCommonKernelArithmeticValidExpression *val$ve2_;
  jboolean val$storeUndo_;
  jboolean val$allowErrorDialog_;
  jboolean val$throwMyError_;
  GeogebraCommonUtilAsyncOperation *val$callback0_;
}

- (void)callbackWithId:(id)obj;

- (instancetype)initWithGeogebraCommonKernelCommandsAlgebraProcessor:(GeogebraCommonKernelCommandsAlgebraProcessor *)outer$
                   withGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)capture$0
                                                         withBoolean:(jboolean)capture$1
                                                         withBoolean:(jboolean)capture$2
                                                         withBoolean:(jboolean)capture$3
                                withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)capture$4;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelCommandsAlgebraProcessor_$1)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCommandsAlgebraProcessor_$1, this$0_, GeogebraCommonKernelCommandsAlgebraProcessor *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCommandsAlgebraProcessor_$1, val$ve2_, GeogebraCommonKernelArithmeticValidExpression *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCommandsAlgebraProcessor_$1, val$callback0_, GeogebraCommonUtilAsyncOperation *)

__attribute__((unused)) static void GeogebraCommonKernelCommandsAlgebraProcessor_$1_initWithGeogebraCommonKernelCommandsAlgebraProcessor_withGeogebraCommonKernelArithmeticValidExpression_withBoolean_withBoolean_withBoolean_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonKernelCommandsAlgebraProcessor_$1 *self, GeogebraCommonKernelCommandsAlgebraProcessor *outer$, GeogebraCommonKernelArithmeticValidExpression *capture$0, jboolean capture$1, jboolean capture$2, jboolean capture$3, GeogebraCommonUtilAsyncOperation *capture$4);

__attribute__((unused)) static GeogebraCommonKernelCommandsAlgebraProcessor_$1 *new_GeogebraCommonKernelCommandsAlgebraProcessor_$1_initWithGeogebraCommonKernelCommandsAlgebraProcessor_withGeogebraCommonKernelArithmeticValidExpression_withBoolean_withBoolean_withBoolean_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonKernelCommandsAlgebraProcessor *outer$, GeogebraCommonKernelArithmeticValidExpression *capture$0, jboolean capture$1, jboolean capture$2, jboolean capture$3, GeogebraCommonUtilAsyncOperation *capture$4) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelCommandsAlgebraProcessor_$1)

@interface GeogebraCommonKernelCommandsAlgebraProcessor_$2 : NSObject < GeogebraCommonKernelArithmeticTraversing > {
 @public
  GeogebraCommonKernelCommandsAlgebraProcessor *this$0_;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev;

- (instancetype)initWithGeogebraCommonKernelCommandsAlgebraProcessor:(GeogebraCommonKernelCommandsAlgebraProcessor *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelCommandsAlgebraProcessor_$2)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCommandsAlgebraProcessor_$2, this$0_, GeogebraCommonKernelCommandsAlgebraProcessor *)

__attribute__((unused)) static void GeogebraCommonKernelCommandsAlgebraProcessor_$2_initWithGeogebraCommonKernelCommandsAlgebraProcessor_(GeogebraCommonKernelCommandsAlgebraProcessor_$2 *self, GeogebraCommonKernelCommandsAlgebraProcessor *outer$);

__attribute__((unused)) static GeogebraCommonKernelCommandsAlgebraProcessor_$2 *new_GeogebraCommonKernelCommandsAlgebraProcessor_$2_initWithGeogebraCommonKernelCommandsAlgebraProcessor_(GeogebraCommonKernelCommandsAlgebraProcessor *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelCommandsAlgebraProcessor_$2)

@implementation GeogebraCommonKernelCommandsAlgebraProcessor

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
 withGeogebraCommonKernelCommandsCommandDispatcher:(GeogebraCommonKernelCommandsCommandDispatcher *)commandDispatcher {
  GeogebraCommonKernelCommandsAlgebraProcessor_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandDispatcher_(self, kernel, commandDispatcher);
  return self;
}

- (NSString *)getSubCommandSetNameWithInt:(jint)index {
  return [((GeogebraCommonKernelCommandsCommandDispatcher *) nil_chk(cmdDispatcher_)) getSubCommandSetNameWithInt:index];
}

- (jboolean)isCommandAvailableWithNSString:(NSString *)cmd {
  return [((GeogebraCommonKernelCommandsCommandDispatcher *) nil_chk(cmdDispatcher_)) isCommandAvailableWithNSString:cmd];
}

- (IOSObjectArray *)processCommandWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                                                withBoolean:(jboolean)labelOutput {
  return [((GeogebraCommonKernelCommandsCommandDispatcher *) nil_chk(cmdDispatcher_)) processCommandWithGeogebraCommonKernelArithmeticCommand:c withBoolean:labelOutput];
}

- (void)processCasCellWithGeogebraCommonKernelGeosGeoCasCell:(GeogebraCommonKernelGeosGeoCasCell *)casCell
                                                 withBoolean:(jboolean)isLastRow {
  GeogebraCommonKernelCommandsAlgebraProcessor_processCasCellWithGeogebraCommonKernelGeosGeoCasCell_withBoolean_(self, casCell, isLastRow);
}

- (GeogebraCommonKernelGeosGeoElement *)changeGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                                  withNSString:(NSString *)newValue
                                                                                   withBoolean:(jboolean)redefineIndependent
                                                                                   withBoolean:(jboolean)storeUndoInfo {
  @try {
    return [self changeGeoElementNoExceptionHandlingWithGeogebraCommonKernelGeosGeoElement:geo withNSString:newValue withBoolean:redefineIndependent withBoolean:storeUndoInfo];
  }
  @catch (GeogebraCommonMainMyError *e) {
    [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithGeogebraCommonMainMyError:e];
    return nil;
  }
  @catch (JavaLangException *e) {
    [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
    return nil;
  }
}

- (GeogebraCommonKernelArithmeticValidExpression *)checkParametricEquationFWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)ve
                                                                           withGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)fallback {
  return GeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationFWithGeogebraCommonKernelArithmeticValidExpression_withGeogebraCommonKernelArithmeticValidExpression_(self, ve, fallback);
}

- (GeogebraCommonKernelGeosGeoElement *)changeGeoElementNoExceptionHandlingWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                                                     withNSString:(NSString *)newValue
                                                                                                      withBoolean:(jboolean)redefineIndependent
                                                                                                      withBoolean:(jboolean)storeUndoInfo {
  @try {
    GeogebraCommonKernelArithmeticValidExpression *ve = [((id<GeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:newValue];
    if ([ve isKindOfClass:[GeogebraCommonKernelArithmeticEquation class]] && [[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticEquation *) nil_chk(((GeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [GeogebraCommonKernelArithmeticEquation class])))) getLHS])) unwrap] isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]] && [@"X" isEqual:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticEquation *) nil_chk(((GeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [GeogebraCommonKernelArithmeticEquation class])))) getLHS])) unwrap])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]] && [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:@"X"] == nil) {
      GeogebraCommonKernelArithmeticValidExpression *ve2 = GeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationFWithGeogebraCommonKernelArithmeticValidExpression_withGeogebraCommonKernelArithmeticValidExpression_(self, [((GeogebraCommonKernelArithmeticEquation *) nil_chk(((GeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [GeogebraCommonKernelArithmeticEquation class])))) getRHS], nil);
      if (ve2 != nil) {
        [ve2 setLabelWithNSString:[((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) getLabel]];
        ve = ve2;
      }
    }
    else if ([@"X" isEqual:[((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) getLabel]]) {
      ve = GeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationFWithGeogebraCommonKernelArithmeticValidExpression_withGeogebraCommonKernelArithmeticValidExpression_(self, ve, ve);
    }
    return [self changeGeoElementNoExceptionHandlingWithGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelArithmeticValidExpression:ve withBoolean:redefineIndependent withBoolean:storeUndoInfo];
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_JavaLangException_initWithNSString_(JreStrcat("$$$", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", newValue)) autorelease];
  }
  @catch (GeogebraCommonMainMyError *e) {
    [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    @throw e;
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    @throw [new_JavaLangException_initWithNSString_(JreStrcat("$$$", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", newValue)) autorelease];
  }
}

- (GeogebraCommonKernelGeosGeoElement *)changeGeoElementNoExceptionHandlingWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                withGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)newValue
                                                                                                      withBoolean:(jboolean)redefineIndependent
                                                                                                      withBoolean:(jboolean)storeUndoInfo {
  NSString *oldLabel, *newLabel;
  IOSObjectArray *result;
  @try {
    [((GeogebraCommonMainAppCompanion *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getCompanion])) storeViewCreators];
    oldLabel = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]] && [((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoFunction class])) isDefined]) {
      [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) registerFunctionVariableWithNSString:[((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoFunction class])) getFunction])) getVarStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    }
    newLabel = [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(newValue)) getLabel];
    if (newLabel == nil) {
      newLabel = oldLabel;
      [newValue setLabelWithNSString:newLabel];
    }
    if ([newValue isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
      GeogebraCommonKernelArithmeticExpressionNode *n = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(newValue, [GeogebraCommonKernelArithmeticExpressionNode class]);
      if ([geo isGeoPoint]) [n setForcePoint];
      else if ([geo isGeoVector]) [n setForceVector];
      else if ([geo isGeoFunction]) [n setForceFunction];
    }
    if ([((NSString *) nil_chk(newLabel)) isEqual:oldLabel]) {
      result = [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:newValue withBoolean:redefineIndependent];
      if (result != nil) {
        [((GeogebraCommonMainAppCompanion *) nil_chk([app_ getCompanion])) recallViewCreators];
        if (storeUndoInfo) [app_ storeUndoInfo];
      }
      return IOSObjectArray_Get(nil_chk(result), 0);
    }
    else if ([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isFreeLabelWithNSString:newLabel]) {
      [newValue setLabelWithNSString:oldLabel];
      result = [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:newValue withBoolean:redefineIndependent];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(result), 0))) setLabelWithNSString:newLabel];
      [((GeogebraCommonMainAppCompanion *) nil_chk([app_ getCompanion])) recallViewCreators];
      if (storeUndoInfo) [app_ storeUndoInfo];
      return IOSObjectArray_Get(result, 0);
    }
    else {
      IOSObjectArray *str = [IOSObjectArray arrayWithObjects:(id[]){ @"NameUsed", newLabel } count:2 type:NSString_class_()];
      @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSStringArray_(loc_, str) autorelease];
    }
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    GeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
    @throw e;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_JavaLangException_initWithNSString_(JreStrcat("$$@", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", newValue)) autorelease];
  }
  @catch (GeogebraCommonMainMyError *e) {
    @throw e;
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    @throw [new_JavaLangException_initWithNSString_(JreStrcat("$$@", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", newValue)) autorelease];
  }
  @finally {
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) registerFunctionVariableWithNSString:nil];
  }
}

- (IOSObjectArray *)processAlgebraCommandWithNSString:(NSString *)cmd
                                          withBoolean:(jboolean)storeUndo {
  @try {
    return [self processAlgebraCommandNoExceptionHandlingWithNSString:cmd withBoolean:storeUndo withBoolean:YES withBoolean:NO withBoolean:NO];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:[e getMessage]];
    return nil;
  }
}

- (IOSObjectArray *)processAlgebraCommandNoExceptionsWithNSString:(NSString *)cmd
                                                      withBoolean:(jboolean)storeUndo {
  @try {
    return [self processAlgebraCommandNoExceptionHandlingWithNSString:cmd withBoolean:storeUndo withBoolean:YES withBoolean:NO withBoolean:NO];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (IOSObjectArray *)processAlgebraCommandNoExceptionsOrErrorsWithNSString:(NSString *)str
                                                              withBoolean:(jboolean)storeUndo {
  @try {
    return [self processAlgebraCommandNoExceptionHandlingWithNSString:str withBoolean:storeUndo withBoolean:NO withBoolean:NO withBoolean:NO];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
  @catch (GeogebraCommonMainMyError *e) {
    return nil;
  }
}

- (IOSObjectArray *)processAlgebraCommandNoExceptionHandlingWithNSString:(NSString *)cmd
                                                             withBoolean:(jboolean)storeUndo
                                                             withBoolean:(jboolean)allowErrorDialog
                                                             withBoolean:(jboolean)throwMyError
                                                             withBoolean:(jboolean)autoCreateSliders {
  return [self processAlgebraCommandNoExceptionHandlingWithNSString:cmd withBoolean:storeUndo withBoolean:allowErrorDialog withBoolean:throwMyError withBoolean:autoCreateSliders withGeogebraCommonUtilAsyncOperation:nil];
}

- (IOSObjectArray *)processAlgebraCommandNoExceptionHandlingWithNSString:(NSString *)cmd
                                                             withBoolean:(jboolean)storeUndo
                                                             withBoolean:(jboolean)allowErrorDialog
                                                             withBoolean:(jboolean)throwMyError
                                                             withBoolean:(jboolean)autoCreateSliders
                                    withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)callback0 {
  if (((jint) [((NSString *) nil_chk(cmd)) length]) > 0 && [cmd charAtWithInt:0] == '<' && [cmd hasPrefix:@"<math"]) {
    return GeogebraCommonKernelCommandsAlgebraProcessor_parseMathmlWithNSString_withBoolean_withBoolean_withBoolean_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, cmd, storeUndo, allowErrorDialog, throwMyError, autoCreateSliders, callback0);
  }
  GeogebraCommonKernelArithmeticValidExpression *ve;
  @try {
    ve = [((id<GeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:cmd];
    GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables *collecter = [new_GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_init() autorelease];
    [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithGeogebraCommonKernelArithmeticTraversing:collecter];
    JavaUtilTreeSet *undefinedVariables = [collecter getResult];
    GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables *fvCollecter = [new_GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables_init() autorelease];
    [ve traverseWithGeogebraCommonKernelArithmeticTraversing:fvCollecter];
    JavaUtilArrayList *fvTree = [fvCollecter getResult];
    GeogebraCommonKernelArithmeticFunctionVariable *fvX = nil;
    id<JavaUtilIterator> fvIt = [((JavaUtilArrayList *) nil_chk(fvTree)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(fvIt)) hasNext]) {
      GeogebraCommonKernelArithmeticFunctionVariable *fv = [fvIt next];
      if ([@"x" isEqual:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv)) getLabel]]) {
        fvX = fv;
        break;
      }
    }
    if (fvX == nil) {
      fvX = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"x") autorelease];
    }
    IOSObjectArray *ret = GeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationWithGeogebraCommonKernelArithmeticValidExpression_withJavaUtilTreeSet_(self, ve, undefinedVariables);
    if (ret != nil) {
      return ret;
    }
    if ([((JavaUtilTreeSet *) nil_chk(undefinedVariables)) size] > 0) {
      IOSObjectArray *geoElements = nil;
      @try {
        geoElements = [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:ve];
        if (storeUndo && geoElements != nil) [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
      }
      @catch (JavaLangThrowable *ex) {
        [((JavaLangThrowable *) nil_chk(ex)) printStackTrace];
      }
      if (geoElements != nil) {
        [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) registerFunctionVariableWithNSString:nil];
        return geoElements;
      }
      JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
      JavaUtilArrayList *toRemove = [new_JavaUtilArrayList_init() autorelease];
      id<JavaUtilIterator> it2 = [toRemove iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
        [undefinedVariables removeWithId:[it2 next]];
      }
      id<JavaUtilIterator> it = [undefinedVariables iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        NSString *label = [it next];
        if ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:label] == nil) {
          GeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("$$", @"not found", label));
          [sb appendWithNSString:label];
          [sb appendWithNSString:@", "];
        }
        else {
          GeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("$$", @"found", label));
        }
      }
      if ([((NSString *) nil_chk([sb description])) hasSuffix:@", "]) {
        [sb setLengthWithInt:[sb length] - 2];
      }
      if ([sb length] > 0) {
        if (!autoCreateSliders) {
          return GeogebraCommonKernelCommandsAlgebraProcessor_tryReplacingProductsWithGeogebraCommonKernelArithmeticValidExpression_(self, ve);
        }
        if ([((GeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] != nil) {
          GeogebraCommonUtilAsyncOperation *callback = nil;
          if (callback0 != nil) {
            GeogebraCommonKernelArithmeticFunctionVariable *fvX2 = fvX;
            GeogebraCommonKernelArithmeticValidExpression *ve2 = ve;
            callback = [new_GeogebraCommonKernelCommandsAlgebraProcessor_$1_initWithGeogebraCommonKernelCommandsAlgebraProcessor_withGeogebraCommonKernelArithmeticValidExpression_withBoolean_withBoolean_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, ve2, storeUndo, allowErrorDialog, throwMyError, callback0) autorelease];
          }
          jboolean autoCreateSlidersAnswer = [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([self->app_ getGuiManager])) checkAutoCreateSlidersWithNSString:[sb description] withGeogebraCommonUtilAsyncOperation:callback];
          if (!autoCreateSlidersAnswer) {
            return nil;
          }
        }
      }
      [self replaceUndefinedVariablesWithGeogebraCommonKernelArithmeticValidExpression:ve];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    if (allowErrorDialog) {
      [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:JreStrcat("$$$", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", cmd)];
      return nil;
    }
    @throw [new_GeogebraCommonKernelCommandsMyException_initWithNSString_withInt_(JreStrcat("$$$", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", cmd), GeogebraCommonKernelCommandsMyException_INVALID_INPUT) autorelease];
  }
  @catch (GeogebraCommonMainBracketsError *e) {
    [((GeogebraCommonMainBracketsError *) nil_chk(e)) printStackTrace];
    if (allowErrorDialog) {
      [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:[e getLocalizedMessage]];
      return nil;
    }
    @throw [new_GeogebraCommonKernelCommandsMyException_initWithGeogebraCommonMainMyError_withInt_(e, GeogebraCommonKernelCommandsMyException_IMBALANCED_BRACKETS) autorelease];
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    if (allowErrorDialog) {
      [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:JreStrcat("$$$", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", cmd)];
      return nil;
    }
    @throw [new_JavaLangException_initWithNSString_(JreStrcat("$$$", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", cmd)) autorelease];
  }
  IOSObjectArray *geos = [self processValidExpressionWithBoolean:storeUndo withBoolean:allowErrorDialog withBoolean:throwMyError withGeogebraCommonKernelArithmeticValidExpression:ve];
  if (callback0 != nil) [callback0 callbackWithId:geos];
  return geos;
}

- (IOSObjectArray *)checkParametricEquationWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)ve
                                                                         withJavaUtilTreeSet:(JavaUtilTreeSet *)undefinedVariables {
  return GeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationWithGeogebraCommonKernelArithmeticValidExpression_withJavaUtilTreeSet_(self, ve, undefinedVariables);
}

- (IOSObjectArray *)tryReplacingProductsWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)ve {
  return GeogebraCommonKernelCommandsAlgebraProcessor_tryReplacingProductsWithGeogebraCommonKernelArithmeticValidExpression_(self, ve);
}

- (IOSObjectArray *)parseMathmlWithNSString:(NSString *)cmd
                                withBoolean:(jboolean)storeUndo
                                withBoolean:(jboolean)allowErrorDialog
                                withBoolean:(jboolean)throwMyError
                                withBoolean:(jboolean)autoCreateSliders
       withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)callback0 {
  return GeogebraCommonKernelCommandsAlgebraProcessor_parseMathmlWithNSString_withBoolean_withBoolean_withBoolean_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, cmd, storeUndo, allowErrorDialog, throwMyError, autoCreateSliders, callback0);
}

- (IOSObjectArray *)processValidExpressionWithBoolean:(jboolean)storeUndo
                                          withBoolean:(jboolean)allowErrorDialog
                                          withBoolean:(jboolean)throwMyError
    withGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)ve {
  IOSObjectArray *geoElements = nil;
  @try {
    geoElements = [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:ve];
    if (storeUndo && geoElements != nil) [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
  }
  @catch (GeogebraCommonMainMyError *e) {
    [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    if (allowErrorDialog) {
      [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithGeogebraCommonMainMyError:e];
      [e printStackTrace];
    }
    else if (throwMyError) {
      @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_withNSString_(loc_, [e getLocalizedMessage], [e getcommandName]) autorelease];
    }
    return nil;
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    GeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
    @throw e;
  }
  @catch (JavaLangException *ex) {
    GeogebraCommonMainApp_debugWithNSString_(@"Exception");
    [((JavaLangException *) nil_chk(ex)) printStackTrace];
    @throw [new_JavaLangException_initWithNSString_(JreStrcat("$$$", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"Error"], @":\n", [ex getLocalizedMessage])) autorelease];
  }
  @finally {
    [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) registerFunctionVariableWithNSString:nil];
  }
  return geoElements;
}

- (void)replaceUndefinedVariablesWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)ve {
  GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables *replacer = [new_GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
  [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithGeogebraCommonKernelArithmeticTraversing:replacer];
}

- (jdouble)evaluateToDoubleWithNSString:(NSString *)str {
  return [self evaluateToDoubleWithNSString:str withBoolean:NO];
}

- (jdouble)evaluateToDoubleWithNSString:(NSString *)str
                            withBoolean:(jboolean)suppressErrors {
  @try {
    GeogebraCommonKernelArithmeticValidExpression *ve = [((id<GeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseExpressionWithNSString:str];
    GeogebraCommonKernelArithmeticExpressionNode *en = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ve, [GeogebraCommonKernelArithmeticExpressionNode class]);
    [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) resolveVariables];
    id<GeogebraCommonKernelArithmeticNumberValue> nv = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([en evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @protocol(GeogebraCommonKernelArithmeticNumberValue));
    return [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(nv)) getDouble];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
    return JavaLangDouble_NaN;
  }
  @catch (GeogebraCommonMainMyError *e) {
    [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithGeogebraCommonMainMyError:e];
    return JavaLangDouble_NaN;
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
    return JavaLangDouble_NaN;
  }
}

- (GeogebraCommonKernelGeosGeoBoolean *)evaluateToBooleanWithNSString:(NSString *)str {
  jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  GeogebraCommonKernelGeosGeoBoolean *bool_ = nil;
  @try {
    GeogebraCommonKernelArithmeticValidExpression *ve = [((id<GeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    IOSObjectArray *temp = [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:ve];
    bool_ = (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(nil_chk(temp), 0), [GeogebraCommonKernelGeosGeoBoolean class]);
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    GeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
    [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  @catch (GeogebraCommonMainMyError *e) {
    [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithGeogebraCommonMainMyError:e];
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return bool_;
}

- (GeogebraCommonKernelGeosGeoList *)evaluateToListWithNSString:(NSString *)str {
  jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  GeogebraCommonKernelGeosGeoList *list = nil;
  @try {
    GeogebraCommonKernelArithmeticValidExpression *ve = [((id<GeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    IOSObjectArray *temp = [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:ve];
    if ([IOSObjectArray_Get(nil_chk(temp), 0) isKindOfClass:[GeogebraCommonKernelGeosGeoList class]]) {
      list = (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(temp, 0), [GeogebraCommonKernelGeosGeoList class]);
    }
    else {
      GeogebraCommonMainApp_errorWithNSString_(@"return value was not a list");
    }
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    GeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @catch (GeogebraCommonMainMyError *e) {
    [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return list;
}

- (GeogebraCommonKernelGeosGeoFunction *)evaluateToFunctionWithNSString:(NSString *)str
                                                            withBoolean:(jboolean)suppressErrors {
  jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  GeogebraCommonKernelGeosGeoFunction *func = nil;
  @try {
    GeogebraCommonKernelArithmeticValidExpression *ve = [((id<GeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    IOSObjectArray *temp = [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:ve];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(temp), 0))) isGeoFunctionable]) {
      id<GeogebraCommonKernelGeosGeoFunctionable> f = (id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(temp, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable));
      func = [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(f)) getGeoFunction];
    }
    else if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    GeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  @catch (GeogebraCommonMainMyError *e) {
    [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithGeogebraCommonMainMyError:e];
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return func;
}

- (GeogebraCommonKernelGeosGeoFunctionNVar *)evaluateToFunctionNVarWithNSString:(NSString *)str
                                                                    withBoolean:(jboolean)suppressErrors {
  jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  GeogebraCommonKernelGeosGeoFunctionNVar *func = nil;
  @try {
    GeogebraCommonKernelArithmeticValidExpression *ve = [((id<GeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    IOSObjectArray *temp = [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:ve];
    if ([IOSObjectArray_Get(nil_chk(temp), 0) isKindOfClass:[GeogebraCommonKernelGeosGeoFunctionNVar class]]) {
      func = (GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(temp, 0), [GeogebraCommonKernelGeosGeoFunctionNVar class]);
    }
    else if ([IOSObjectArray_Get(temp, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
      IOSObjectArray *funVars;
      if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(temp, 0), [GeogebraCommonKernelGeosGeoFunction class])))) isFunctionOfY]) {
        funVars = [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(temp, 0), [GeogebraCommonKernelGeosGeoFunction class])))) getFunction])) getFunctionVariable], [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"y") autorelease] } count:2 type:GeogebraCommonKernelArithmeticFunctionVariable_class_()];
      }
      else {
        funVars = [IOSObjectArray arrayWithObjects:(id[]){ [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"y") autorelease], [((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(temp, 0), [GeogebraCommonKernelGeosGeoFunction class])))) getFunction])) getFunctionVariable] } count:2 type:GeogebraCommonKernelArithmeticFunctionVariable_class_()];
      }
      GeogebraCommonKernelArithmeticFunctionNVar *fn = [new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(temp, 0), [GeogebraCommonKernelGeosGeoFunction class])))) getFunctionExpression], funVars) autorelease];
      func = [new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVar_(cons_, fn) autorelease];
    }
    else if ([IOSObjectArray_Get(temp, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
      IOSObjectArray *funVars = [IOSObjectArray arrayWithObjects:(id[]){ [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"x") autorelease], [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"y") autorelease] } count:2 type:GeogebraCommonKernelArithmeticFunctionVariable_class_()];
      GeogebraCommonKernelArithmeticFunctionNVar *fn = [new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_([new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, IOSObjectArray_Get(temp, 0)) autorelease], funVars) autorelease];
      func = [new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVar_(cons_, fn) autorelease];
    }
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    GeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  @catch (GeogebraCommonMainMyError *e) {
    [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithGeogebraCommonMainMyError:e];
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return func;
}

- (id<GeogebraCommonKernelGeosGeoNumberValue>)evaluateToNumericWithNSString:(NSString *)str
                                                                withBoolean:(jboolean)suppressErrors {
  jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  id<GeogebraCommonKernelGeosGeoNumberValue> num = nil;
  @try {
    GeogebraCommonKernelArithmeticValidExpression *ve = [((id<GeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    IOSObjectArray *temp = [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:ve];
    num = (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(temp), 0), @protocol(GeogebraCommonKernelGeosGeoNumberValue));
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    GeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  @catch (GeogebraCommonMainMyError *e) {
    [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithGeogebraCommonMainMyError:e];
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    if (!suppressErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return num;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)evaluateToPointWithNSString:(NSString *)str
                                                              withBoolean:(jboolean)showErrors
                                                              withBoolean:(jboolean)suppressLabels {
  jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  if (suppressLabels) {
    [cons_ setSuppressLabelCreationWithBoolean:YES];
  }
  id<GeogebraCommonKernelKernelNDGeoPointND> p = nil;
  IOSObjectArray *temp = nil;
  @try {
    GeogebraCommonKernelArithmeticValidExpression *ve = [((id<GeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    if ([ve isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
      GeogebraCommonKernelArithmeticExpressionNode *en = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ve, [GeogebraCommonKernelArithmeticExpressionNode class]);
      [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) setForcePoint];
    }
    temp = [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:ve];
    p = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk(temp), 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND));
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    if (showErrors) {
      GeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
      [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
    }
  }
  @catch (JavaLangException *e) {
    if (showErrors) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
    }
  }
  @catch (GeogebraCommonMainMyError *e) {
    if (showErrors) {
      [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
      [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithGeogebraCommonMainMyError:e];
    }
  }
  @catch (JavaLangError *e) {
    if (showErrors) {
      [((JavaLangError *) nil_chk(e)) printStackTrace];
      [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
    }
  }
  if (suppressLabels) {
    [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  return p;
}

- (GeogebraCommonKernelGeosGeoText *)evaluateToTextWithNSString:(NSString *)str
                                                    withBoolean:(jboolean)createLabel
                                                    withBoolean:(jboolean)showErrors {
  jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:!createLabel];
  GeogebraCommonKernelGeosGeoText *text = nil;
  IOSObjectArray *temp = nil;
  @try {
    GeogebraCommonKernelArithmeticValidExpression *ve = [((id<GeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    temp = [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:ve];
    text = (GeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(nil_chk(temp), 0), [GeogebraCommonKernelGeosGeoText class]);
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    if (showErrors) {
      GeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
      [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
    }
  }
  @catch (JavaLangException *e) {
    if (showErrors) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
    }
  }
  @catch (GeogebraCommonMainMyError *e) {
    if (showErrors) {
      [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
      [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithGeogebraCommonMainMyError:e];
    }
  }
  @catch (JavaLangError *e) {
    if (showErrors) {
      [((JavaLangError *) nil_chk(e)) printStackTrace];
      [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
    }
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return text;
}

- (GeogebraCommonKernelGeosGeoElement *)evaluateToGeoElementWithNSString:(NSString *)str
                                                             withBoolean:(jboolean)showErrors {
  jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  GeogebraCommonKernelGeosGeoElement *geo = nil;
  @try {
    GeogebraCommonKernelArithmeticValidExpression *ve = [((id<GeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseGeoGebraExpressionWithNSString:str];
    IOSObjectArray *temp = [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:ve];
    geo = IOSObjectArray_Get(nil_chk(temp), 0);
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    GeogebraCommonMainApp_debugWithNSString_(@"CircularDefinition");
    [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"CircularDefinition"];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    if (showErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  @catch (GeogebraCommonMainMyError *e) {
    [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
    if (showErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithGeogebraCommonMainMyError:e];
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    if (showErrors) [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput" withNSString:str];
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  return geo;
}

- (NSString *)parseLabelWithNSString:(NSString *)label {
  return [((id<GeogebraCommonKernelParserParserInterface>) nil_chk(parser_)) parseLabelWithNSString:label];
}

- (IOSObjectArray *)processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)ve {
  return [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:ve withBoolean:YES];
}

- (IOSObjectArray *)processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)ve
                                                                                withBoolean:(jboolean)redefineIndependent {
  IOSObjectArray *labels = [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) getLabels];
  GeogebraCommonKernelGeosGeoElement *replaceable = nil;
  if (labels != nil && labels->size_ > 0) {
    jboolean firstTime = YES;
    for (jint i = 0; i < labels->size_; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:IOSObjectArray_Get(labels, i)];
      if (geo != nil) {
        if ([geo isFixed]) {
          IOSObjectArray *strs = [IOSObjectArray arrayWithObjects:(id[]){ @"IllegalAssignment", @"AssignmentToFixed", @":\n", [geo getLongDescription] } count:4 type:NSString_class_()];
          @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSStringArray_(loc_, strs) autorelease];
        }
        if (firstTime) {
          replaceable = geo;
          firstTime = NO;
        }
      }
    }
  }
  IOSObjectArray *ret;
  jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  if (replaceable != nil) [cons_ setSuppressLabelCreationWithBoolean:YES];
  @try {
    ret = [self doProcessValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:ve];
    if (ret == nil) {
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"Unhandled ValidExpression : ", ve));
      @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(loc_, JreStrcat("$$@", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"InvalidInput"], @":\n", ve)) autorelease];
    }
  }
  @finally {
    [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  if (replaceable != nil && ((IOSObjectArray *) nil_chk(ret))->size_ > 0) {
    if (!redefineIndependent && [replaceable isChangeable] && !([replaceable isGeoText])) {
      @try {
        [replaceable setWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(ret, 0)];
        [replaceable updateRepaint];
        IOSObjectArray_Set(ret, 0, replaceable);
      }
      @catch (JavaLangException *e) {
        NSString *errStr = JreStrcat("$C$$$", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"IllegalAssignment"], 0x000a, [replaceable getLongDescription], @"     =     ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) getLongDescription]);
        @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(loc_, errStr) autorelease];
      }
    }
    else {
      @try {
        if ([replaceable isIndependent] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) isIndependent] && GeogebraCommonKernelCommandsAlgebraProcessor_compatibleTypesWithGeogebraCommonPluginGeoClassEnum_withGeogebraCommonPluginGeoClassEnum_([replaceable getGeoClassType], [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) getGeoClassType])) {
          [replaceable setWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(ret, 0)];
          [replaceable updateRepaint];
          IOSObjectArray_Set(ret, 0, replaceable);
        }
        else {
          GeogebraCommonKernelGeosGeoElement *newGeo = IOSObjectArray_Get(ret, 0);
          GeogebraCommonKernelGeosGeoCasCell *cell = [replaceable getCorrespondingCasCell];
          if (cell != nil) {
            GeogebraCommonKernelArithmeticValidExpression *vexp = (GeogebraCommonKernelArithmeticValidExpression *) check_class_cast([ve unwrap], [GeogebraCommonKernelArithmeticValidExpression class]);
            [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(vexp)) setAssignmentTypeWithGeogebraCommonKernelArithmeticAssignmentTypeEnum:GeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DEFAULT()];
            [cell setInputWithNSString:[vexp toAssignmentStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
            GeogebraCommonKernelCommandsAlgebraProcessor_processCasCellWithGeogebraCommonKernelGeosGeoCasCell_withBoolean_(self, cell, NO);
          }
          else {
            [cons_ replaceWithGeogebraCommonKernelGeosGeoElement:replaceable withGeogebraCommonKernelGeosGeoElement:newGeo];
          }
          NSString *newLabel = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo)) isLabelSet] ? [newGeo getLabelSimple] : [replaceable getLabelSimple];
          IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:newLabel]);
        }
      }
      @catch (GeogebraCommonKernelCircularDefinitionException *e) {
        @throw e;
      }
      @catch (JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
        @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(loc_, @"ReplaceFailed") autorelease];
      }
      @catch (GeogebraCommonMainMyError *e) {
        [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
        @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(loc_, @"ReplaceFailed") autorelease];
      }
    }
  }
  return ret;
}

+ (jboolean)compatibleTypesWithGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)type
                           withGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)type2 {
  return GeogebraCommonKernelCommandsAlgebraProcessor_compatibleTypesWithGeogebraCommonPluginGeoClassEnum_withGeogebraCommonPluginGeoClassEnum_(type, type2);
}

- (IOSObjectArray *)doProcessValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)ve {
  IOSObjectArray *ret = nil;
  if ([ve isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
    ret = [self processExpressionNodeWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ve, [GeogebraCommonKernelArithmeticExpressionNode class])];
    if (ret != nil && ret->size_ > 0 && [IOSObjectArray_Get(ret, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoScriptAction class]]) {
      [((GeogebraCommonKernelGeosGeoScriptAction *) nil_chk(((GeogebraCommonKernelGeosGeoScriptAction *) check_class_cast(IOSObjectArray_Get(ret, 0), [GeogebraCommonKernelGeosGeoScriptAction class])))) perform];
      return [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:GeogebraCommonKernelGeosGeoElement_class_()];
    }
    else if (ret != nil && ret->size_ > 0 && [IOSObjectArray_Get(ret, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoList class]]) {
      jint actions = [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(ret, 0), [GeogebraCommonKernelGeosGeoList class])))) performScriptActions];
      if (actions > 0) {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) remove];
        return [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:GeogebraCommonKernelGeosGeoElement_class_()];
      }
    }
  }
  else if ([ve isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]]) {
    ret = [((GeogebraCommonKernelCommandsCommandDispatcher *) nil_chk(cmdDispatcher_)) processCommandWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *) check_class_cast(ve, [GeogebraCommonKernelArithmeticCommand class]) withBoolean:YES];
  }
  else if ([ve isKindOfClass:[GeogebraCommonKernelArithmeticEquation class]]) {
    ret = GeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithGeogebraCommonKernelArithmeticEquation_(self, (GeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [GeogebraCommonKernelArithmeticEquation class]));
  }
  else if ([ve isKindOfClass:[GeogebraCommonKernelArithmeticFunction class]]) {
    ret = GeogebraCommonKernelCommandsAlgebraProcessor_processFunctionWithGeogebraCommonKernelArithmeticFunction_(self, (GeogebraCommonKernelArithmeticFunction *) check_class_cast(ve, [GeogebraCommonKernelArithmeticFunction class]));
  }
  else if ([ve isKindOfClass:[GeogebraCommonKernelArithmeticFunctionNVar class]]) {
    ret = [self processFunctionNVarWithGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(ve, [GeogebraCommonKernelArithmeticFunctionNVar class])];
  }
  return ret;
}

- (IOSObjectArray *)processFunctionWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun {
  return GeogebraCommonKernelCommandsAlgebraProcessor_processFunctionWithGeogebraCommonKernelArithmeticFunction_(self, fun);
}

- (IOSObjectArray *)processParametricFunctionWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)exp
                                            withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                           withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv
                                                                                 withNSString:(NSString *)label {
  if ([GeogebraCommonKernelArithmeticVectorValue_class_() isInstance:ev]) {
    GeogebraCommonKernelGeosGeoNumeric *loc = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    [loc setLocalVariableLabelWithNSString:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv)) getSetVarString]];
    [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:fv withGeogebraCommonKernelArithmeticExpressionValue:loc];
    GeogebraCommonKernelArithmeticExpressionNode *cx = [self computeCoordWithGeogebraCommonKernelArithmeticExpressionNode:exp withInt:0];
    GeogebraCommonKernelArithmeticExpressionNode *cy = [self computeCoordWithGeogebraCommonKernelArithmeticExpressionNode:exp withInt:1];
    IOSObjectArray *coefX = [IOSObjectArray arrayWithLength:5 type:GeogebraCommonKernelArithmeticExpressionValue_class_()], *coefY = [IOSObjectArray arrayWithLength:5 type:GeogebraCommonKernelArithmeticExpressionValue_class_()];
    if (GeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValueArray_withGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoElement_(self, cx, coefX, [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0) autorelease], loc) && GeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValueArray_withGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoElement_(self, cy, coefY, [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0) autorelease], loc)) {
      GeogebraCommonKernelArithmeticExpressionNode *a, *b, *c, *d, *xx, *xy, *yy;
      GeogebraCommonKernelArithmeticExpressionNode *x = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticFunctionVariable *) [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"x") autorelease]) wrap])) subtractWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsAlgebraProcessor_exprWithGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefX, 0))];
      GeogebraCommonKernelArithmeticExpressionNode *y = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticFunctionVariable *) [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"y") autorelease]) wrap])) subtractWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsAlgebraProcessor_exprWithGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefY, 0))];
      if (IOSObjectArray_Get(coefX, 1) != nil || IOSObjectArray_Get(coefX, 2) != nil) {
        a = GeogebraCommonKernelCommandsAlgebraProcessor_exprWithGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefX, 1));
        b = GeogebraCommonKernelCommandsAlgebraProcessor_exprWithGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefX, 2));
        c = GeogebraCommonKernelCommandsAlgebraProcessor_exprWithGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefY, 1));
        d = GeogebraCommonKernelCommandsAlgebraProcessor_exprWithGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefY, 2));
        GeogebraCommonUtilDebugLog_debugWithId_(a);
        GeogebraCommonUtilDebugLog_debugWithId_(b);
        xx = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(c)) powerWithDouble:2])) plusWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(d)) powerWithDouble:2]])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:x])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:x];
        xy = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c multiplyWithGeogebraCommonKernelArithmeticExpressionValue:a])) plusWithGeogebraCommonKernelArithmeticExpressionValue:[d multiplyWithGeogebraCommonKernelArithmeticExpressionValue:b]])) multiplyWithDouble:-2])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:x])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:y];
        yy = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(a)) powerWithDouble:2])) plusWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(b)) powerWithDouble:2]])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:y])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:y];
      }
      else {
        a = GeogebraCommonKernelCommandsAlgebraProcessor_exprWithGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefX, 3));
        b = GeogebraCommonKernelCommandsAlgebraProcessor_exprWithGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefX, 4));
        c = GeogebraCommonKernelCommandsAlgebraProcessor_exprWithGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefY, 3));
        d = GeogebraCommonKernelCommandsAlgebraProcessor_exprWithGeogebraCommonKernelArithmeticExpressionValue_(self, IOSObjectArray_Get(coefY, 4));
        xx = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(c)) powerWithDouble:2])) subtractWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(d)) powerWithDouble:2]])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:x])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:x];
        xy = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c multiplyWithGeogebraCommonKernelArithmeticExpressionValue:a])) subtractWithGeogebraCommonKernelArithmeticExpressionValue:[d multiplyWithGeogebraCommonKernelArithmeticExpressionValue:b]])) multiplyWithDouble:-2])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:x])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:y];
        yy = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(a)) powerWithDouble:2])) subtractWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(b)) powerWithDouble:2]])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:y])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:y];
      }
      GeogebraCommonKernelArithmeticExpressionNode *den = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(a)) powerWithDouble:2])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(d)) powerWithDouble:2]])) plusWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(b)) powerWithDouble:2])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(c)) powerWithDouble:2]]])) subtractWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([a multiplyWithGeogebraCommonKernelArithmeticExpressionValue:b])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:c])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:d])) multiplyWithDouble:2]];
      GeogebraCommonKernelArithmeticEquation *eq = [new_GeogebraCommonKernelArithmeticEquation_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(xx)) plusWithGeogebraCommonKernelArithmeticExpressionValue:xy])) plusWithGeogebraCommonKernelArithmeticExpressionValue:yy])) wrap], den) autorelease];
      [eq initEquation];
      return [self processConicWithGeogebraCommonKernelArithmeticEquation:eq];
    }
    coefX = [self arrayOfZerosWithInt:coefX->size_];
    coefY = [self arrayOfZerosWithInt:coefY->size_];
    jint degX = [self getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:cx withGeogebraCommonKernelArithmeticExpressionValueArray:coefX withGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0) autorelease] withGeogebraCommonKernelGeosGeoNumeric:loc];
    jint degY = [self getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:cy withGeogebraCommonKernelArithmeticExpressionValueArray:coefY withGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0) autorelease] withGeogebraCommonKernelGeosGeoNumeric:loc];
    if ((degX >= 0 && degY >= 0) && (degX < 2 && degY < 2)) {
      GeogebraCommonKernelArithmeticFunctionVariable *px = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"x") autorelease];
      GeogebraCommonKernelArithmeticFunctionVariable *py = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"y") autorelease];
      GeogebraCommonKernelArithmeticEquation *eq = [new_GeogebraCommonKernelArithmeticEquation_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(coefX), 1))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:py])) subtractWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(coefY), 1))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:px]], [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 1))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefY, 0)])) subtractWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 0))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefY, 1)]]) autorelease];
      [eq setForceLine];
      [eq initEquation];
      [eq setLabelWithNSString:label];
      IOSObjectArray *line = [self processLineWithGeogebraCommonKernelArithmeticEquation:eq];
      [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(nil_chk(line), 0), @protocol(GeogebraCommonKernelKernelNDGeoLineND))))) setToParametricWithNSString:[fv getSetVarString]];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(line, 0))) update];
      return line;
    }
    else if (degX >= 0 && degY >= 0) {
      GeogebraCommonKernelArithmeticFunctionVariable *px = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"x") autorelease];
      GeogebraCommonKernelArithmeticFunctionVariable *py = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"y") autorelease];
      GeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("@C@C@", IOSObjectArray_Get(nil_chk(coefX), 2), ',', IOSObjectArray_Get(coefX, 1), ',', IOSObjectArray_Get(coefX, 0)));
      GeogebraCommonKernelArithmeticExpressionNode *t = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([px wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(coefY), 2)])) subtractWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([py wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefX, 2)]])) plusWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 2))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefY, 0)]])) subtractWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 2))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefX, 0)]];
      GeogebraCommonKernelArithmeticExpressionNode *d = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 1))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefY, 2)])) subtractWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 1))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefX, 2)]];
      GeogebraCommonKernelArithmeticEquation *eq;
      eq = [new_GeogebraCommonKernelArithmeticEquation_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(d)) powerWithDouble:2])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:px])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefX, 2)])) plusWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([d powerWithDouble:2])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:py])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefY, 2)]], [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(t)) powerWithDouble:2])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 2))) wrap])) powerWithDouble:2])) plusWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 2))) wrap])) powerWithDouble:2]]])) plusWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([t multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 1))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefY, 2)])) plusWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 1))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefX, 2)]]])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:d]])) plusWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([d powerWithDouble:2])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefY, 0))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefY, 2)])) plusWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(coefX, 0))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefX, 2)]]]]) autorelease];
      [eq initEquation];
      return [self processConicWithGeogebraCommonKernelArithmeticEquation:eq];
    }
    GeogebraCommonKernelAlgosAlgoDependentNumber *nx = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, cx, NO) autorelease];
    GeogebraCommonKernelAlgosAlgoDependentNumber *ny = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, cy, NO) autorelease];
    GeogebraCommonKernelGeosGeoNumeric *from = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, -10) autorelease];
    GeogebraCommonKernelGeosGeoNumeric *to = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, 10) autorelease];
    GeogebraCommonKernelAlgosAlgoCurveCartesian *ac = [new_GeogebraCommonKernelAlgosAlgoCurveCartesian_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, [IOSObjectArray arrayWithObjects:(id[]){ [nx getNumber], [ny getNumber] } count:2 type:GeogebraCommonKernelArithmeticNumberValue_class_()], loc, from, to) autorelease];
    return [ac getOutput];
  }
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"InvalidFunction:", [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]));
  @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getLocalization], @"InvalidFunction") autorelease];
}

- (IOSObjectArray *)arrayOfZerosWithInt:(jint)length {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:length type:GeogebraCommonKernelArithmeticExpressionValue_class_()];
  for (jint i = 0; i < length; i++) {
    IOSObjectArray_SetAndConsume(ret, i, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 0));
  }
  return ret;
}

- (jint)getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)cx
               withGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefX
                     withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)mult
                               withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)loc2 {
  if (![((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(cx)) containsWithGeogebraCommonKernelArithmeticExpressionValue:loc2]) {
    GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 0, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(mult)) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:cx]);
    return 0;
  }
  else if ([cx getOperation] == GeogebraCommonPluginOperationEnum_get_PLUS()) {
    jint deg1 = [self getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:[cx getLeftTree] withGeogebraCommonKernelArithmeticExpressionValueArray:coefX withGeogebraCommonKernelArithmeticExpressionNode:mult withGeogebraCommonKernelGeosGeoNumeric:loc2];
    jint deg2 = [self getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:[cx getRightTree] withGeogebraCommonKernelArithmeticExpressionValueArray:coefX withGeogebraCommonKernelArithmeticExpressionNode:mult withGeogebraCommonKernelGeosGeoNumeric:loc2];
    if (deg1 < 0 || deg2 < 0) {
      return -1;
    }
    return JavaLangMath_maxWithInt_withInt_(deg1, deg2);
  }
  else if ([cx getOperation] == GeogebraCommonPluginOperationEnum_get_MINUS()) {
    jint deg1 = [self getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:[cx getLeftTree] withGeogebraCommonKernelArithmeticExpressionValueArray:coefX withGeogebraCommonKernelArithmeticExpressionNode:mult withGeogebraCommonKernelGeosGeoNumeric:loc2];
    jint deg2 = [self getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:[cx getRightTree] withGeogebraCommonKernelArithmeticExpressionValueArray:coefX withGeogebraCommonKernelArithmeticExpressionNode:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(mult)) multiplyWithDouble:-1] withGeogebraCommonKernelGeosGeoNumeric:loc2];
    if (deg1 < 0 || deg2 < 0) {
      return -1;
    }
    return JavaLangMath_maxWithInt_withInt_(deg1, deg2);
  }
  else if ([cx getOperation] == GeogebraCommonPluginOperationEnum_get_MULTIPLY()) {
    if (![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) containsWithGeogebraCommonKernelArithmeticExpressionValue:loc2]) {
      return [self getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:[cx getRightTree] withGeogebraCommonKernelArithmeticExpressionValueArray:coefX withGeogebraCommonKernelArithmeticExpressionNode:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(mult)) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) unwrap]] withGeogebraCommonKernelGeosGeoNumeric:loc2];
    }
    else if (![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getRight])) containsWithGeogebraCommonKernelArithmeticExpressionValue:loc2]) {
      return [self getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:[cx getLeftTree] withGeogebraCommonKernelArithmeticExpressionValueArray:coefX withGeogebraCommonKernelArithmeticExpressionNode:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(mult)) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getRight])) unwrap]] withGeogebraCommonKernelGeosGeoNumeric:loc2];
    }
    else {
      IOSObjectArray *left = [self arrayOfZerosWithInt:3];
      IOSObjectArray *right = [self arrayOfZerosWithInt:3];
      jint degL = [self getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:[cx getLeftTree] withGeogebraCommonKernelArithmeticExpressionValueArray:left withGeogebraCommonKernelArithmeticExpressionNode:mult withGeogebraCommonKernelGeosGeoNumeric:loc2];
      jint degR = [self getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:[cx getRightTree] withGeogebraCommonKernelArithmeticExpressionValueArray:right withGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 1) autorelease] withGeogebraCommonKernelGeosGeoNumeric:loc2];
      if (degL == 1 && degR == 1) {
        GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 0, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(left), 0))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(right), 0)]);
        GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 1, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(left, 1))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(right, 0)]);
        GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 1, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(left, 0))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(right, 1)]);
        GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 2, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(left, 1))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(right, 1)]);
        return 2;
      }
      return -1;
    }
  }
  else if ([cx getOperation] == GeogebraCommonPluginOperationEnum_get_POWER()) {
    if ([[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getRight])) unwrap] isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]] && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(2, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getRight])) evaluateDouble])) {
      IOSObjectArray *left = [self arrayOfZerosWithInt:3];
      jint degL = [self getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:[cx getLeftTree] withGeogebraCommonKernelArithmeticExpressionValueArray:left withGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 1) autorelease] withGeogebraCommonKernelGeosGeoNumeric:loc2];
      if (degL == 1) {
        GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 0, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(left), 0))) wrap])) powerWithDouble:2])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:mult]);
        GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 1, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(left, 1))) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(left, 0)])) multiplyWithDouble:2])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:mult]);
        GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 2, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(left, 1))) wrap])) powerWithDouble:2])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:mult]);
        return 2;
      }
      return -1;
    }
  }
  else if ([cx unwrap] == loc2) {
    GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 1, mult);
    return 1;
  }
  return -1;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)exprWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  return GeogebraCommonKernelCommandsAlgebraProcessor_exprWithGeogebraCommonKernelArithmeticExpressionValue_(self, ev);
}

- (jboolean)getTrigCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)cx
                   withGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefX
                         withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)scale_
                                   withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)var {
  return GeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValueArray_withGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoElement_(self, cx, coefX, scale_, var);
}

- (void)addWithGeogebraCommonKernelArithmeticExpressionValueArray:(IOSObjectArray *)coefX
                                                          withInt:(jint)i
                 withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)scale_ {
  GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, i, scale_);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)computeCoordWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)exp
                                                                                                       withInt:(jint)i {
  IOSObjectArray *ops = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonPluginOperationEnum_get_XCOORD(), GeogebraCommonPluginOperationEnum_get_YCOORD(), GeogebraCommonPluginOperationEnum_get_ZCOORD() } count:3 type:GeogebraCommonPluginOperationEnum_class_()];
  if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) isLeaf]) {
    if ([[exp getLeft] isKindOfClass:[GeogebraCommonKernelArithmeticMyVecNode class]]) {
      return i == 0 ? [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticMyVecNode *) nil_chk(((GeogebraCommonKernelArithmeticMyVecNode *) check_class_cast([exp getLeft], [GeogebraCommonKernelArithmeticMyVecNode class])))) getX])) wrap] : [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticMyVecNode *) nil_chk(((GeogebraCommonKernelArithmeticMyVecNode *) check_class_cast([exp getLeft], [GeogebraCommonKernelArithmeticMyVecNode class])))) getY])) wrap];
    }
    if ([[exp getLeft] isKindOfClass:[GeogebraCommonKernelArithmetic3DMyVec3DNode class]]) {
      return i == 0 ? [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmetic3DMyVec3DNode *) nil_chk(((GeogebraCommonKernelArithmetic3DMyVec3DNode *) check_class_cast([exp getLeft], [GeogebraCommonKernelArithmetic3DMyVec3DNode class])))) getX])) wrap] : (i == 1 ? [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmetic3DMyVec3DNode *) nil_chk(((GeogebraCommonKernelArithmetic3DMyVec3DNode *) check_class_cast([exp getLeft], [GeogebraCommonKernelArithmetic3DMyVec3DNode class])))) getY])) wrap] : [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmetic3DMyVec3DNode *) nil_chk(((GeogebraCommonKernelArithmetic3DMyVec3DNode *) check_class_cast([exp getLeft], [GeogebraCommonKernelArithmetic3DMyVec3DNode class])))) getZ])) wrap]);
    }
  }
  switch ([[exp getOperation] ordinal]) {
    case GeogebraCommonPluginOperation_PLUS:
    return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self computeCoordWithGeogebraCommonKernelArithmeticExpressionNode:[exp getLeftTree] withInt:i])) plusWithGeogebraCommonKernelArithmeticExpressionValue:[self computeCoordWithGeogebraCommonKernelArithmeticExpressionNode:[exp getRightTree] withInt:i]];
    case GeogebraCommonPluginOperation_MINUS:
    return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self computeCoordWithGeogebraCommonKernelArithmeticExpressionNode:[exp getLeftTree] withInt:i])) subtractWithGeogebraCommonKernelArithmeticExpressionValue:[self computeCoordWithGeogebraCommonKernelArithmeticExpressionNode:[exp getRightTree] withInt:i]];
    case GeogebraCommonPluginOperation_MULTIPLY:
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([exp getRight])) evaluatesToNonComplex2DVector] || [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([exp getRight])) evaluatesTo3DVector]) {
      return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self computeCoordWithGeogebraCommonKernelArithmeticExpressionNode:[exp getRightTree] withInt:i])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[exp getLeft]];
    }
    else if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([exp getLeft])) evaluatesToNonComplex2DVector] || [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([exp getLeft])) evaluatesTo3DVector]) {
      return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self computeCoordWithGeogebraCommonKernelArithmeticExpressionNode:[exp getLeftTree] withInt:i])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[exp getRight]];
    }
  }
  return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, exp, IOSObjectArray_Get(ops, i), nil) autorelease];
}

+ (jint)getDirectionWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)enLeft {
  return GeogebraCommonKernelCommandsAlgebraProcessor_getDirectionWithGeogebraCommonKernelArithmeticExpressionNode_(enLeft);
}

- (GeogebraCommonKernelGeosGeoFunction *)DependentIntervalWithNSString:(NSString *)label
                            withGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun {
  return GeogebraCommonKernelCommandsAlgebraProcessor_DependentIntervalWithNSString_withGeogebraCommonKernelArithmeticFunction_(self, label, fun);
}

- (GeogebraCommonKernelGeosGeoElement *)DependentGeoCopyWithNSString:(NSString *)label
                              withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)origGeoNode {
  return GeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withGeogebraCommonKernelGeosGeoElement_(self, label, origGeoNode);
}

- (IOSObjectArray *)processFunctionNVarWithGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *)fun {
  if (![((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun)) initFunction]) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"InvalidFunction:", [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fun getExpression])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]));
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getLocalization], @"InvalidFunction") autorelease];
  }
  NSString *label = [fun getLabel];
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  IOSObjectArray *vars = [fun getGeoElementVariables];
  jboolean isIndependent = (vars == nil || vars->size_ == 0);
  if (isIndependent) {
    IOSObjectArray_SetAndConsume(ret, 0, new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(cons_, label, fun));
  }
  else {
    IOSObjectArray_Set(ret, 0, GeogebraCommonKernelCommandsAlgebraProcessor_DependentFunctionNVarWithNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(self, label, fun));
  }
  return ret;
}

- (GeogebraCommonKernelGeosGeoFunctionNVar *)DependentFunctionNVarWithNSString:(NSString *)label
                                withGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *)fun {
  return GeogebraCommonKernelCommandsAlgebraProcessor_DependentFunctionNVarWithNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(self, label, fun);
}

- (IOSObjectArray *)processEquationWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  return GeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithGeogebraCommonKernelArithmeticEquation_(self, equ);
}

- (IOSObjectArray *)processEquationWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ
                                                                  withBoolean:(jboolean)allowConstant {
  return GeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithGeogebraCommonKernelArithmeticEquation_withBoolean_(self, equ, allowConstant);
}

- (void)checkNoTermsInZWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  if (![((GeogebraCommonKernelArithmeticPolynomial *) nil_chk([((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getNormalForm])) isFreeOfWithChar:'z']) [equ setIsPolynomialWithBoolean:NO];
}

- (IOSObjectArray *)processLineWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  jdouble a = 0, b = 0, c = 0;
  GeogebraCommonKernelGeosGeoLine *line;
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  NSString *label = [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getLabel];
  GeogebraCommonKernelArithmeticPolynomial *lhs = [equ getNormalForm];
  jboolean isExplicit = [equ isExplicitWithNSString:@"y"];
  jboolean isIndependent = [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(lhs)) isConstant];
  if (isIndependent) {
    a = [lhs getCoeffValueWithNSString:@"x"];
    b = [lhs getCoeffValueWithNSString:@"y"];
    c = [lhs getCoeffValueWithNSString:@""];
    line = [new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons_, label, a, b, c) autorelease];
  }
  else line = GeogebraCommonKernelCommandsAlgebraProcessor_DependentLineWithNSString_withGeogebraCommonKernelArithmeticEquation_(self, label, equ);
  if (isExplicit) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(line)) setToExplicit];
    [line updateRepaint];
  }
  IOSObjectArray_Set(ret, 0, line);
  return ret;
}

- (GeogebraCommonKernelGeosGeoLine *)DependentLineWithNSString:(NSString *)label
                    withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  return GeogebraCommonKernelCommandsAlgebraProcessor_DependentLineWithNSString_withGeogebraCommonKernelArithmeticEquation_(self, label, equ);
}

- (IOSObjectArray *)processConicWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  jdouble a = 0, b = 0, c = 0, d = 0, e = 0, f = 0;
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  GeogebraCommonKernelGeosGeoConic *conic;
  NSString *label = [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getLabel];
  GeogebraCommonKernelArithmeticPolynomial *lhs = [equ getNormalForm];
  jboolean isExplicit = [equ isExplicitWithNSString:@"y"];
  jboolean isSpecific = !isExplicit && ([equ isExplicitWithNSString:@"yy"] || [equ isExplicitWithNSString:@"xx"]);
  jboolean isIndependent = [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(lhs)) isConstant];
  if (isIndependent) {
    a = [lhs getCoeffValueWithNSString:@"xx"];
    b = [lhs getCoeffValueWithNSString:@"xy"];
    c = [lhs getCoeffValueWithNSString:@"yy"];
    d = [lhs getCoeffValueWithNSString:@"x"];
    e = [lhs getCoeffValueWithNSString:@"y"];
    f = [lhs getCoeffValueWithNSString:@""];
    IOSDoubleArray *coeffs = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ a, b, c, d, e, f } count:6];
    conic = [new_GeogebraCommonKernelGeosGeoConic_initWithGeogebraCommonKernelConstruction_withNSString_withDoubleArray_(cons_, label, coeffs) autorelease];
  }
  else conic = GeogebraCommonKernelCommandsAlgebraProcessor_DependentConicWithNSString_withGeogebraCommonKernelArithmeticEquation_(self, label, equ);
  if (isExplicit) {
    [((GeogebraCommonKernelGeosGeoConic *) nil_chk(conic)) setToExplicit];
    [conic updateRepaint];
  }
  else if (isSpecific || [((GeogebraCommonKernelGeosGeoConic *) nil_chk(conic)) getType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE) {
    [((GeogebraCommonKernelGeosGeoConic *) nil_chk(conic)) setToSpecific];
    [conic updateRepaint];
  }
  IOSObjectArray_Set(ret, 0, conic);
  return ret;
}

- (GeogebraCommonKernelGeosGeoConic *)DependentConicWithNSString:(NSString *)label
                      withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  return GeogebraCommonKernelCommandsAlgebraProcessor_DependentConicWithNSString_withGeogebraCommonKernelArithmeticEquation_(self, label, equ);
}

- (IOSObjectArray *)processImplicitPolyWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  NSString *label = [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getLabel];
  GeogebraCommonKernelArithmeticPolynomial *lhs = [equ getNormalForm];
  jboolean isIndependent = ![equ isFunctionDependent] && [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(lhs)) isConstant] && ![equ hasVariableDegree];
  GeogebraCommonKernelImplicitGeoImplicitPoly *poly;
  GeogebraCommonKernelGeosGeoElement *geo = nil;
  if (isIndependent) {
    poly = [new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticPolynomial_(cons_, label, lhs) autorelease];
    [poly setUserInputWithGeogebraCommonKernelArithmeticValidExpression:equ];
    geo = poly;
  }
  else {
    GeogebraCommonKernelImplicitAlgoDependentImplicitPoly *algo = [new_GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_withBoolean_(cons_, label, equ, YES) autorelease];
    geo = [algo getGeo];
    if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoUserInputElement class]]) {
      [((GeogebraCommonKernelGeosGeoUserInputElement *) nil_chk(((GeogebraCommonKernelGeosGeoUserInputElement *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoUserInputElement class])))) setUserInputWithGeogebraCommonKernelArithmeticValidExpression:equ];
    }
  }
  IOSObjectArray_Set(ret, 0, geo);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) updateRepaint];
  return ret;
}

- (IOSObjectArray *)processExpressionNodeWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)node {
  GeogebraCommonKernelArithmeticExpressionNode *n = node;
  if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) isLeaf]) {
    id<GeogebraCommonKernelArithmeticExpressionValue> leaf = [n getLeft];
    if ([leaf isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]]) {
      GeogebraCommonKernelArithmeticCommand *c = (GeogebraCommonKernelArithmeticCommand *) check_class_cast(leaf, [GeogebraCommonKernelArithmeticCommand class]);
      [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) setLabelsWithNSStringArray:[n getLabels]];
      return [((GeogebraCommonKernelCommandsCommandDispatcher *) nil_chk(cmdDispatcher_)) processCommandWithGeogebraCommonKernelArithmeticCommand:c withBoolean:YES];
    }
    else if ([leaf isKindOfClass:[GeogebraCommonKernelArithmeticEquation class]]) {
      GeogebraCommonKernelArithmeticEquation *eqn = (GeogebraCommonKernelArithmeticEquation *) check_class_cast(leaf, [GeogebraCommonKernelArithmeticEquation class]);
      [((GeogebraCommonKernelArithmeticEquation *) nil_chk(eqn)) setLabelsWithNSStringArray:[n getLabels]];
      return GeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithGeogebraCommonKernelArithmeticEquation_(self, eqn);
    }
    else if ([leaf isKindOfClass:[GeogebraCommonKernelArithmeticFunction class]]) {
      GeogebraCommonKernelArithmeticFunction *fun = (GeogebraCommonKernelArithmeticFunction *) check_class_cast(leaf, [GeogebraCommonKernelArithmeticFunction class]);
      [((GeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) setLabelsWithNSStringArray:[n getLabels]];
      return GeogebraCommonKernelCommandsAlgebraProcessor_processFunctionWithGeogebraCommonKernelArithmeticFunction_(self, fun);
    }
    else if ([leaf isKindOfClass:[GeogebraCommonKernelArithmeticFunctionNVar class]]) {
      GeogebraCommonKernelArithmeticFunctionNVar *fun = (GeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(leaf, [GeogebraCommonKernelArithmeticFunctionNVar class]);
      [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun)) setLabelsWithNSStringArray:[n getLabels]];
      return [self processFunctionNVarWithGeogebraCommonKernelArithmeticFunctionNVar:fun];
    }
  }
  id<GeogebraCommonKernelArithmeticExpressionValue> eval;
  [n resolveVariables];
  NSString *label = [n getLabel];
  if ([n containsFreeFunctionVariable]) {
    id<JavaUtilSet> fvSet = [new_JavaUtilTreeSet_init() autorelease];
    GeogebraCommonKernelArithmeticTraversing_FVarCollector *fvc = GeogebraCommonKernelArithmeticTraversing_FVarCollector_getCollectorWithJavaUtilSet_(fvSet);
    [n traverseWithGeogebraCommonKernelArithmeticTraversing:fvc];
    if ([fvSet size] == 1) {
      n = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(n, [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, [((id<JavaUtilIterator>) nil_chk([fvSet iterator])) next]) autorelease]) autorelease]) autorelease];
    }
    else {
      IOSObjectArray *fvArray = [IOSObjectArray arrayWithLength:[fvSet size] type:GeogebraCommonKernelArithmeticFunctionVariable_class_()];
      id<JavaUtilIterator> it = [fvSet iterator];
      jint i = 0;
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        IOSObjectArray_SetAndConsume(fvArray, i++, new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, [it next]));
      }
      n = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_(n, fvArray) autorelease]) autorelease];
    }
  }
  eval = [n evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  if ([eval isKindOfClass:[GeogebraCommonKernelArithmeticValidExpression class]] && label != nil) {
    [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(((GeogebraCommonKernelArithmeticValidExpression *) check_class_cast(eval, [GeogebraCommonKernelArithmeticValidExpression class])))) setLabelWithNSString:label];
  }
  jboolean dollarLabelFound = NO;
  GeogebraCommonKernelArithmeticExpressionNode *myNode = n;
  if ([myNode isLeaf]) myNode = [myNode getLeftTree];
  if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(eval)) isGeoElement] && [n getLabel] == nil && !([((GeogebraCommonPluginOperationEnum *) nil_chk([n getOperation])) isEqual:GeogebraCommonPluginOperationEnum_get_ELEMENT_OF()])) {
    {
      IOSObjectArray *ret;
      switch ([[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(myNode)) getOperation] ordinal]) {
        case GeogebraCommonPluginOperation_$VAR_COL:
        case GeogebraCommonPluginOperation_$VAR_ROW:
        case GeogebraCommonPluginOperation_$VAR_ROW_COL:
        dollarLabelFound = YES;
        break;
        default:
        ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(eval, [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
    }
  }
  if ([GeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:eval]) return GeogebraCommonKernelCommandsAlgebraProcessor_processBooleanWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(self, n, eval);
  else if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:eval]) return GeogebraCommonKernelCommandsAlgebraProcessor_processNumberWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(self, n, eval);
  else if ([GeogebraCommonKernelArithmeticVectorValue_class_() isInstance:eval]) return GeogebraCommonKernelCommandsAlgebraProcessor_processPointVectorWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(self, n, eval);
  else if ([GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:eval]) return [self processPointVector3DWithGeogebraCommonKernelArithmeticExpressionNode:n withGeogebraCommonKernelArithmeticExpressionValue:eval];
  else if ([GeogebraCommonKernelArithmeticTextValue_class_() isInstance:eval]) return GeogebraCommonKernelCommandsAlgebraProcessor_processTextWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(self, n, eval);
  else if ([eval isKindOfClass:[GeogebraCommonKernelArithmeticMyList class]]) {
    return GeogebraCommonKernelCommandsAlgebraProcessor_processListWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticMyList_(self, n, (GeogebraCommonKernelArithmeticMyList *) check_class_cast(eval, [GeogebraCommonKernelArithmeticMyList class]));
  }
  else if ([eval isKindOfClass:[GeogebraCommonKernelArithmeticFunction class]]) {
    return GeogebraCommonKernelCommandsAlgebraProcessor_processFunctionWithGeogebraCommonKernelArithmeticFunction_(self, (GeogebraCommonKernelArithmeticFunction *) check_class_cast(eval, [GeogebraCommonKernelArithmeticFunction class]));
  }
  else if ([eval isKindOfClass:[GeogebraCommonKernelArithmeticFunctionNVar class]]) {
    return [self processFunctionNVarWithGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(eval, [GeogebraCommonKernelArithmeticFunctionNVar class])];
  }
  else if ([eval isKindOfClass:[GeogebraCommonKernelGeosGeoList class]] && [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(myNode)) hasOperations]) {
    return GeogebraCommonKernelCommandsAlgebraProcessor_processListWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticMyList_(self, n, [((GeogebraCommonKernelGeosGeoList *) check_class_cast(eval, [GeogebraCommonKernelGeosGeoList class])) getMyList]);
  }
  else if ([eval isGeoElement]) {
    if ([n getLabel] != nil || dollarLabelFound) {
      return GeogebraCommonKernelCommandsAlgebraProcessor_processGeoCopyWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self, [n getLabel], n);
    }
  }
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@$@", @"Unhandled ExpressionNode: ", eval, @", ", [eval getClass]));
  return nil;
}

- (IOSObjectArray *)processNumberWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)n
                                withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)evaluate {
  return GeogebraCommonKernelCommandsAlgebraProcessor_processNumberWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(self, n, evaluate);
}

- (GeogebraCommonKernelGeosGeoNumeric *)DependentNumberWithNSString:(NSString *)label
                   withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root
                                                        withBoolean:(jboolean)isAngle {
  return GeogebraCommonKernelCommandsAlgebraProcessor_DependentNumberWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self, label, root, isAngle);
}

- (IOSObjectArray *)processListWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)n
                                       withGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)evalList {
  return GeogebraCommonKernelCommandsAlgebraProcessor_processListWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticMyList_(self, n, evalList);
}

- (GeogebraCommonKernelGeosGeoList *)ListExpressionWithNSString:(NSString *)label
               withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root {
  return GeogebraCommonKernelCommandsAlgebraProcessor_ListExpressionWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self, label, root);
}

- (IOSObjectArray *)processTextWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)n
                              withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)evaluate {
  return GeogebraCommonKernelCommandsAlgebraProcessor_processTextWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(self, n, evaluate);
}

- (GeogebraCommonKernelGeosGeoText *)DependentTextWithNSString:(NSString *)label
              withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root {
  return GeogebraCommonKernelCommandsAlgebraProcessor_DependentTextWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self, label, root);
}

- (GeogebraCommonKernelGeosGeoText *)TextWithNSString:(NSString *)label
                                         withNSString:(NSString *)text {
  return GeogebraCommonKernelCommandsAlgebraProcessor_TextWithNSString_withNSString_(self, label, text);
}

- (IOSObjectArray *)processBooleanWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)n
                                 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)evaluate {
  return GeogebraCommonKernelCommandsAlgebraProcessor_processBooleanWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(self, n, evaluate);
}

- (IOSObjectArray *)processPointVectorWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)n
                                     withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)evaluate {
  return GeogebraCommonKernelCommandsAlgebraProcessor_processPointVectorWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(self, n, evaluate);
}

- (GeogebraCommonKernelGeosGeoPoint *)DependentPointWithNSString:(NSString *)label
                withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root
                                                     withBoolean:(jboolean)complex {
  return GeogebraCommonKernelCommandsAlgebraProcessor_DependentPointWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self, label, root, complex);
}

- (GeogebraCommonKernelGeosGeoVector *)DependentVectorWithNSString:(NSString *)label
                  withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root {
  return GeogebraCommonKernelCommandsAlgebraProcessor_DependentVectorWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self, label, root);
}

- (IOSObjectArray *)processPointVector3DWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)n
                                       withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)evaluate {
  return nil;
}

- (IOSObjectArray *)processGeoCopyWithNSString:(NSString *)copyLabel
withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)origGeoNode {
  return GeogebraCommonKernelCommandsAlgebraProcessor_processGeoCopyWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self, copyLabel, origGeoNode);
}

- (GeogebraCommonKernelGeosGeoElement *)DependentGeoCopyWithNSString:(NSString *)label
                    withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)origGeoNode {
  return GeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self, label, origGeoNode);
}

- (void)enableCAS {
  [((GeogebraCommonKernelCommandsCommandDispatcher *) nil_chk(cmdDispatcher_)) initCASCommands];
}

- (void)showErrorWithNSString:(NSString *)key {
  [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:key]];
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(cons_);
  RELEASE_(app_);
  RELEASE_(loc_);
  RELEASE_(parser_);
  RELEASE_(cmdDispatcher_);
  RELEASE_(mathmlParserGGB_);
  RELEASE_(mathmlParserLaTeX_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withGeogebraCommonKernelCommandsCommandDispatcher:", "AlgebraProcessor", NULL, 0x1, NULL, NULL },
    { "getSubCommandSetNameWithInt:", "getSubCommandSetName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isCommandAvailableWithNSString:", "isCommandAvailable", "Z", 0x1, NULL, NULL },
    { "processCommandWithGeogebraCommonKernelArithmeticCommand:withBoolean:", "processCommand", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "processCasCellWithGeogebraCommonKernelGeosGeoCasCell:withBoolean:", "processCasCell", "V", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "changeGeoElementWithGeogebraCommonKernelGeosGeoElement:withNSString:withBoolean:withBoolean:", "changeGeoElement", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "checkParametricEquationFWithGeogebraCommonKernelArithmeticValidExpression:withGeogebraCommonKernelArithmeticValidExpression:", "checkParametricEquationF", "Lgeogebra.common.kernel.arithmetic.ValidExpression;", 0x2, NULL, NULL },
    { "changeGeoElementNoExceptionHandlingWithGeogebraCommonKernelGeosGeoElement:withNSString:withBoolean:withBoolean:", "changeGeoElementNoExceptionHandling", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Ljava.lang.Exception;Lgeogebra.common.main.MyError;", NULL },
    { "changeGeoElementNoExceptionHandlingWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelArithmeticValidExpression:withBoolean:withBoolean:", "changeGeoElementNoExceptionHandling", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Ljava.lang.Exception;", NULL },
    { "processAlgebraCommandWithNSString:withBoolean:", "processAlgebraCommand", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "processAlgebraCommandNoExceptionsWithNSString:withBoolean:", "processAlgebraCommandNoExceptions", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "processAlgebraCommandNoExceptionsOrErrorsWithNSString:withBoolean:", "processAlgebraCommandNoExceptionsOrErrors", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "processAlgebraCommandNoExceptionHandlingWithNSString:withBoolean:withBoolean:withBoolean:withBoolean:", "processAlgebraCommandNoExceptionHandling", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Ljava.lang.Exception;", NULL },
    { "processAlgebraCommandNoExceptionHandlingWithNSString:withBoolean:withBoolean:withBoolean:withBoolean:withGeogebraCommonUtilAsyncOperation:", "processAlgebraCommandNoExceptionHandling", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Ljava.lang.Exception;", NULL },
    { "checkParametricEquationWithGeogebraCommonKernelArithmeticValidExpression:withJavaUtilTreeSet:", "checkParametricEquation", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "tryReplacingProductsWithGeogebraCommonKernelArithmeticValidExpression:", "tryReplacingProducts", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "parseMathmlWithNSString:withBoolean:withBoolean:withBoolean:withBoolean:withGeogebraCommonUtilAsyncOperation:", "parseMathml", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "processValidExpressionWithBoolean:withBoolean:withBoolean:withGeogebraCommonKernelArithmeticValidExpression:", "processValidExpression", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Ljava.lang.Exception;", NULL },
    { "replaceUndefinedVariablesWithGeogebraCommonKernelArithmeticValidExpression:", "replaceUndefinedVariables", "V", 0x1, NULL, NULL },
    { "evaluateToDoubleWithNSString:", "evaluateToDouble", "D", 0x1, NULL, NULL },
    { "evaluateToDoubleWithNSString:withBoolean:", "evaluateToDouble", "D", 0x1, NULL, NULL },
    { "evaluateToBooleanWithNSString:", "evaluateToBoolean", "Lgeogebra.common.kernel.geos.GeoBoolean;", 0x1, NULL, NULL },
    { "evaluateToListWithNSString:", "evaluateToList", "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "evaluateToFunctionWithNSString:withBoolean:", "evaluateToFunction", "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "evaluateToFunctionNVarWithNSString:withBoolean:", "evaluateToFunctionNVar", "Lgeogebra.common.kernel.geos.GeoFunctionNVar;", 0x1, NULL, NULL },
    { "evaluateToNumericWithNSString:withBoolean:", "evaluateToNumeric", "Lgeogebra.common.kernel.geos.GeoNumberValue;", 0x1, NULL, NULL },
    { "evaluateToPointWithNSString:withBoolean:withBoolean:", "evaluateToPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "evaluateToTextWithNSString:withBoolean:withBoolean:", "evaluateToText", "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "evaluateToGeoElementWithNSString:withBoolean:", "evaluateToGeoElement", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "parseLabelWithNSString:", "parseLabel", "Ljava.lang.String;", 0x1, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:", "processValidExpression", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;Ljava.lang.Exception;", NULL },
    { "processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:withBoolean:", "processValidExpression", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;Ljava.lang.Exception;", NULL },
    { "compatibleTypesWithGeogebraCommonPluginGeoClassEnum:withGeogebraCommonPluginGeoClassEnum:", "compatibleTypes", "Z", 0xa, NULL, NULL },
    { "doProcessValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:", "doProcessValidExpression", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
    { "processFunctionWithGeogebraCommonKernelArithmeticFunction:", "processFunction", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "processParametricFunctionWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticFunctionVariable:withNSString:", "processParametricFunction", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "arrayOfZerosWithInt:", "arrayOfZeros", "[Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x4, NULL, NULL },
    { "getPolyCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticExpressionValueArray:withGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelGeosGeoNumeric:", "getPolyCoeffs", "I", 0x4, NULL, NULL },
    { "exprWithGeogebraCommonKernelArithmeticExpressionValue:", "expr", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "getTrigCoeffsWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticExpressionValueArray:withGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelGeosGeoElement:", "getTrigCoeffs", "Z", 0x2, NULL, NULL },
    { "addWithGeogebraCommonKernelArithmeticExpressionValueArray:withInt:withGeogebraCommonKernelArithmeticExpressionNode:", "add", "V", 0x2, NULL, NULL },
    { "computeCoordWithGeogebraCommonKernelArithmeticExpressionNode:withInt:", "computeCoord", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x4, NULL, NULL },
    { "getDirectionWithGeogebraCommonKernelArithmeticExpressionNode:", "getDirection", "I", 0xa, NULL, NULL },
    { "DependentIntervalWithNSString:withGeogebraCommonKernelArithmeticFunction:", "DependentInterval", "Lgeogebra.common.kernel.geos.GeoFunction;", 0x12, NULL, NULL },
    { "DependentGeoCopyWithNSString:withGeogebraCommonKernelGeosGeoElement:", "DependentGeoCopy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
    { "processFunctionNVarWithGeogebraCommonKernelArithmeticFunctionNVar:", "processFunctionNVar", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "DependentFunctionNVarWithNSString:withGeogebraCommonKernelArithmeticFunctionNVar:", "DependentFunctionNVar", "Lgeogebra.common.kernel.geos.GeoFunctionNVar;", 0x12, NULL, NULL },
    { "processEquationWithGeogebraCommonKernelArithmeticEquation:", "processEquation", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "processEquationWithGeogebraCommonKernelArithmeticEquation:withBoolean:", "processEquation", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "checkNoTermsInZWithGeogebraCommonKernelArithmeticEquation:", "checkNoTermsInZ", "V", 0x4, NULL, NULL },
    { "processLineWithGeogebraCommonKernelArithmeticEquation:", "processLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "DependentLineWithNSString:withGeogebraCommonKernelArithmeticEquation:", "DependentLine", "Lgeogebra.common.kernel.geos.GeoLine;", 0x12, NULL, NULL },
    { "processConicWithGeogebraCommonKernelArithmeticEquation:", "processConic", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "DependentConicWithNSString:withGeogebraCommonKernelArithmeticEquation:", "DependentConic", "Lgeogebra.common.kernel.geos.GeoConic;", 0x12, NULL, NULL },
    { "processImplicitPolyWithGeogebraCommonKernelArithmeticEquation:", "processImplicitPoly", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "processExpressionNodeWithGeogebraCommonKernelArithmeticExpressionNode:", "processExpressionNode", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "processNumberWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticExpressionValue:", "processNumber", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "DependentNumberWithNSString:withGeogebraCommonKernelArithmeticExpressionNode:withBoolean:", "DependentNumber", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x12, NULL, NULL },
    { "processListWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticMyList:", "processList", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "ListExpressionWithNSString:withGeogebraCommonKernelArithmeticExpressionNode:", "ListExpression", "Lgeogebra.common.kernel.geos.GeoList;", 0x11, NULL, NULL },
    { "processTextWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticExpressionValue:", "processText", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "DependentTextWithNSString:withGeogebraCommonKernelArithmeticExpressionNode:", "DependentText", "Lgeogebra.common.kernel.geos.GeoText;", 0x12, NULL, NULL },
    { "TextWithNSString:withNSString:", "Text", "Lgeogebra.common.kernel.geos.GeoText;", 0x11, NULL, NULL },
    { "processBooleanWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticExpressionValue:", "processBoolean", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "processPointVectorWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticExpressionValue:", "processPointVector", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "DependentPointWithNSString:withGeogebraCommonKernelArithmeticExpressionNode:withBoolean:", "DependentPoint", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
    { "DependentVectorWithNSString:withGeogebraCommonKernelArithmeticExpressionNode:", "DependentVector", "Lgeogebra.common.kernel.geos.GeoVector;", 0x12, NULL, NULL },
    { "processPointVector3DWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticExpressionValue:", "processPointVector3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "processGeoCopyWithNSString:withGeogebraCommonKernelArithmeticExpressionNode:", "processGeoCopy", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "DependentGeoCopyWithNSString:withGeogebraCommonKernelArithmeticExpressionNode:", "DependentGeoCopy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
    { "enableCAS", NULL, "V", 0x1, NULL, NULL },
    { "showErrorWithNSString:", "showError", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x14, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cons_", NULL, 0x14, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "app_", NULL, 0x10, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "loc_", NULL, 0x12, "Lgeogebra.common.main.Localization;", NULL, NULL,  },
    { "parser_", NULL, 0x12, "Lgeogebra.common.kernel.parser.ParserInterface;", NULL, NULL,  },
    { "cmdDispatcher_", NULL, 0x14, "Lgeogebra.common.kernel.commands.CommandDispatcher;", NULL, NULL,  },
    { "mathmlParserGGB_", NULL, 0x2, "Lgeogebra.common.io.MathMLParser;", NULL, NULL,  },
    { "mathmlParserLaTeX_", NULL, 0x2, "Lgeogebra.common.io.MathMLParser;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsAlgebraProcessor = { 2, "AlgebraProcessor", "geogebra.common.kernel.commands", NULL, 0x1, 72, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsAlgebraProcessor;
}

@end

void GeogebraCommonKernelCommandsAlgebraProcessor_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandDispatcher_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelCommandsCommandDispatcher *commandDispatcher) {
  NSObject_init(self);
  GeogebraCommonKernelCommandsAlgebraProcessor_set_kernel_(self, kernel);
  GeogebraCommonKernelCommandsAlgebraProcessor_set_cons_(self, [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction]);
  GeogebraCommonKernelCommandsAlgebraProcessor_set_cmdDispatcher_(self, commandDispatcher);
  GeogebraCommonKernelCommandsAlgebraProcessor_set_app_(self, [kernel getApplication]);
  GeogebraCommonKernelCommandsAlgebraProcessor_set_loc_(self, [((GeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization]);
  GeogebraCommonKernelCommandsAlgebraProcessor_set_parser_(self, [kernel getParser]);
}

GeogebraCommonKernelCommandsAlgebraProcessor *new_GeogebraCommonKernelCommandsAlgebraProcessor_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandDispatcher_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelCommandsCommandDispatcher *commandDispatcher) {
  GeogebraCommonKernelCommandsAlgebraProcessor *self = [GeogebraCommonKernelCommandsAlgebraProcessor alloc];
  GeogebraCommonKernelCommandsAlgebraProcessor_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandDispatcher_(self, kernel, commandDispatcher);
  return self;
}

void GeogebraCommonKernelCommandsAlgebraProcessor_processCasCellWithGeogebraCommonKernelGeosGeoCasCell_withBoolean_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelGeosGeoCasCell *casCell, jboolean isLastRow) {
  if ([((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell)) isCircularDefinition]) {
    [casCell computeOutput];
    [casCell updateCascade];
    [((GeogebraCommonMainApp *) nil_chk(self->app_)) showErrorWithNSString:@"CircularDefinition"];
    return;
  }
  GeogebraCommonKernelAlgosAlgoElement *algoParent = [casCell getParentAlgorithm];
  jboolean prevFree = algoParent == nil;
  jboolean nowFree = ![casCell hasVariablesOrCommands];
  jboolean needsRedefinition = NO;
  jboolean needsConsUpdate = NO;
  if (prevFree) {
    if (nowFree) {
      [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:casCell withBoolean:YES];
      [casCell computeOutput];
      [casCell setLabelOfTwinGeo];
      needsRedefinition = NO;
    }
    else {
      if ([casCell isOutputEmpty] && ![casCell hasChildren]) {
        [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:casCell];
        GeogebraCommonKernelKernelCAS_DependentCasCellWithGeogebraCommonKernelGeosGeoCasCell_(casCell);
        needsRedefinition = NO;
        needsConsUpdate = !isLastRow;
      }
      else {
        needsRedefinition = YES;
      }
    }
  }
  else {
    if (nowFree) {
      needsRedefinition = YES;
    }
    else {
      needsRedefinition = YES;
    }
  }
  if (needsRedefinition) {
    @try {
      [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) changeCasCellWithGeogebraCommonKernelGeosGeoCasCell:casCell];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      [casCell setErrorWithNSString:@"RedefinitionFailed"];
    }
  }
  else {
    [casCell notifyAdd];
    [casCell updateCascade];
    if (needsConsUpdate) [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) updateCasCells];
  }
}

GeogebraCommonKernelArithmeticValidExpression *GeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationFWithGeogebraCommonKernelArithmeticValidExpression_withGeogebraCommonKernelArithmeticValidExpression_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticValidExpression *ve, GeogebraCommonKernelArithmeticValidExpression *fallback) {
  GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables *collecter = [new_GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_init() autorelease];
  [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithGeogebraCommonKernelArithmeticTraversing:collecter];
  JavaUtilTreeSet *undefinedVariables = [collecter getResult];
  if ([((JavaUtilTreeSet *) nil_chk(undefinedVariables)) size] == 1) {
    @try {
      NSString *varName = [undefinedVariables first];
      GeogebraCommonKernelArithmeticFunctionVariable *fv = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, varName) autorelease];
      GeogebraCommonKernelArithmeticExpressionNode *exp = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ve deepCopyWithGeogebraCommonKernelKernel:self->kernel_])) traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(varName, fv, self->kernel_)])) wrap];
      [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) resolveVariables];
      jboolean flag = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
      [self->cons_ setSuppressLabelCreationWithBoolean:YES];
      IOSObjectArray *ret = [self processParametricFunctionWithGeogebraCommonKernelArithmeticExpressionNode:exp withGeogebraCommonKernelArithmeticExpressionValue:[exp evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()] withGeogebraCommonKernelArithmeticFunctionVariable:fv withNSString:nil];
      [self->cons_ setSuppressLabelCreationWithBoolean:flag];
      if (ret != nil) {
        return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) wrap];
      }
    }
    @catch (JavaLangThrowable *t) {
      [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
      GeogebraCommonUtilDebugLog_debugWithNSString_(@"X is not parametric");
    }
  }
  return fallback;
}

IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_checkParametricEquationWithGeogebraCommonKernelArithmeticValidExpression_withJavaUtilTreeSet_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticValidExpression *ve, JavaUtilTreeSet *undefinedVariables) {
  if ([((JavaUtilTreeSet *) nil_chk(undefinedVariables)) size] == 1 && [@"X" isEqual:[((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) getLabel]]) {
    @try {
      NSString *varName = [undefinedVariables first];
      GeogebraCommonKernelArithmeticFunctionVariable *fv = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, varName) autorelease];
      GeogebraCommonKernelArithmeticExpressionNode *exp = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ve deepCopyWithGeogebraCommonKernelKernel:self->kernel_])) traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(varName, fv, self->kernel_)])) wrap];
      [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) resolveVariables];
      IOSObjectArray *ret = [self processParametricFunctionWithGeogebraCommonKernelArithmeticExpressionNode:exp withGeogebraCommonKernelArithmeticExpressionValue:[exp evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()] withGeogebraCommonKernelArithmeticFunctionVariable:fv withNSString:nil];
      if (ret != nil) {
        return ret;
      }
    }
    @catch (JavaLangThrowable *t) {
      [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
      GeogebraCommonUtilDebugLog_debugWithNSString_(@"X is not parametric");
    }
  }
  else if ([undefinedVariables size] == 2 && [[((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) unwrap] isKindOfClass:[GeogebraCommonKernelArithmeticEquation class]] && [@"X" isEqual:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticEquation *) nil_chk(((GeogebraCommonKernelArithmeticEquation *) check_class_cast([ve unwrap], [GeogebraCommonKernelArithmeticEquation class])))) getLHS])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
    @try {
      id<JavaUtilIterator> t = [undefinedVariables iterator];
      NSString *varName = [((id<JavaUtilIterator>) nil_chk(t)) next];
      if ([@"X" isEqual:varName]) {
        varName = [t next];
      }
      GeogebraCommonKernelArithmeticFunctionVariable *fv = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, varName) autorelease];
      GeogebraCommonKernelArithmeticExpressionNode *exp = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticEquation *) nil_chk(((GeogebraCommonKernelArithmeticEquation *) check_class_cast([ve unwrap], [GeogebraCommonKernelArithmeticEquation class])))) getRHS])) deepCopyWithGeogebraCommonKernelKernel:self->kernel_])) traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(varName, fv, self->kernel_)])) wrap];
      [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) resolveVariables];
      IOSObjectArray *ret = [self processParametricFunctionWithGeogebraCommonKernelArithmeticExpressionNode:exp withGeogebraCommonKernelArithmeticExpressionValue:[exp evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()] withGeogebraCommonKernelArithmeticFunctionVariable:fv withNSString:[ve getLabel]];
      if (ret != nil) {
        return ret;
      }
    }
    @catch (JavaLangThrowable *t) {
      [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
      GeogebraCommonUtilDebugLog_debugWithNSString_(@"X is not parametric");
    }
  }
  return nil;
}

IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_tryReplacingProductsWithGeogebraCommonKernelArithmeticValidExpression_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticValidExpression *ve) {
  GeogebraCommonKernelArithmeticValidExpression *ve2 = (GeogebraCommonKernelArithmeticValidExpression *) check_class_cast([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithGeogebraCommonKernelArithmeticTraversing:[new_GeogebraCommonKernelCommandsAlgebraProcessor_$2_initWithGeogebraCommonKernelCommandsAlgebraProcessor_(self) autorelease]], [GeogebraCommonKernelArithmeticValidExpression class]);
  IOSObjectArray *ret = nil;
  @try {
    ret = [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:ve2];
  }
  @catch (JavaLangThrowable *t) {
  }
  return ret;
}

IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_parseMathmlWithNSString_withBoolean_withBoolean_withBoolean_withBoolean_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *cmd, jboolean storeUndo, jboolean allowErrorDialog, jboolean throwMyError, jboolean autoCreateSliders, GeogebraCommonUtilAsyncOperation *callback0) {
  if (self->mathmlParserGGB_ == nil) {
    GeogebraCommonKernelCommandsAlgebraProcessor_setAndConsume_mathmlParserGGB_(self, new_GeogebraCommonIoMathMLParser_initWithBoolean_(YES));
  }
  IOSObjectArray *ret = nil;
  @try {
    NSString *ggb = [((GeogebraCommonIoMathMLParser *) nil_chk(self->mathmlParserGGB_)) parseWithNSString:cmd withBoolean:NO withBoolean:YES];
    ComGoogleGwtRegexpSharedRegExp *assignment = ComGoogleGwtRegexpSharedRegExp_compileWithNSString_(@"^(\\w+) \\(x\\)=(.*)$");
    ComGoogleGwtRegexpSharedMatchResult *lhs = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(assignment)) execWithNSString:ggb];
    if (lhs != nil) {
      ggb = JreStrcat("$$$", [lhs getGroupWithInt:1], @"(x)=", [lhs getGroupWithInt:2]);
    }
    GeogebraCommonUtilDebugLog_debugWithNSString_(cmd);
    GeogebraCommonUtilDebugLog_debugWithNSString_(ggb);
    ret = [self processAlgebraCommandNoExceptionHandlingWithNSString:ggb withBoolean:storeUndo withBoolean:NO withBoolean:throwMyError withBoolean:NO withGeogebraCommonUtilAsyncOperation:callback0];
  }
  @catch (JavaLangThrowable *t) {
    GeogebraCommonUtilDebugLog_warnWithNSString_([((JavaLangThrowable *) nil_chk(t)) getMessage]);
  }
  if (ret != nil && ret->size_ != 0) {
    return ret;
  }
  if (self->mathmlParserLaTeX_ == nil) {
    GeogebraCommonKernelCommandsAlgebraProcessor_setAndConsume_mathmlParserLaTeX_(self, new_GeogebraCommonIoMathMLParser_initWithBoolean_(NO));
  }
  NSString *latex = [((GeogebraCommonIoMathMLParser *) nil_chk(self->mathmlParserLaTeX_)) parseWithNSString:cmd withBoolean:NO withBoolean:NO];
  GeogebraCommonKernelGeosGeoText *arg = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_(self->cons_, latex) autorelease];
  GeogebraCommonKernelAlgosAlgoLaTeX *texAlgo = [new_GeogebraCommonKernelAlgosAlgoLaTeX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self->cons_, nil, arg) autorelease];
  return [IOSObjectArray arrayWithObjects:(id[]){ [texAlgo getOutputWithInt:0] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

jboolean GeogebraCommonKernelCommandsAlgebraProcessor_compatibleTypesWithGeogebraCommonPluginGeoClassEnum_withGeogebraCommonPluginGeoClassEnum_(GeogebraCommonPluginGeoClassEnum *type, GeogebraCommonPluginGeoClassEnum *type2) {
  GeogebraCommonKernelCommandsAlgebraProcessor_initialize();
  if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk(type2)) isEqual:type]) return YES;
  if ([type2 isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()] && [((GeogebraCommonPluginGeoClassEnum *) nil_chk(type)) isEqual:GeogebraCommonPluginGeoClassEnum_get_ANGLE()]) return YES;
  if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk(type)) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()] && [type2 isEqual:GeogebraCommonPluginGeoClassEnum_get_ANGLE()]) return YES;
  return NO;
}

IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processFunctionWithGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticFunction *fun) {
  if (![((GeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) initFunction]) {
    return [self processParametricFunctionWithGeogebraCommonKernelArithmeticExpressionNode:[fun getExpression] withGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fun getExpression])) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()] withGeogebraCommonKernelArithmeticFunctionVariable:[fun getFunctionVariable] withNSString:[fun getLabel]];
  }
  NSString *label = [fun getLabel];
  GeogebraCommonKernelGeosGeoFunction *f;
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  IOSObjectArray *vars = [fun getGeoElementVariables];
  jboolean isIndependent = YES;
  for (jint i = 0; vars != nil && i < vars->size_; i++) {
    if ([((id<GeogebraCommonKernelArithmeticInspecting>) nil_chk(GeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_())) checkWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(vars), i)]) {
      isIndependent = NO;
    }
  }
  GeogebraCommonKernelArithmeticExpressionNode *en = [fun getExpression];
  if ([((GeogebraCommonPluginOperationEnum *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation])) isEqual:GeogebraCommonPluginOperationEnum_get_AND()] || [((GeogebraCommonPluginOperationEnum *) nil_chk([en getOperation])) isEqual:GeogebraCommonPluginOperationEnum_get_AND_INTERVAL()]) {
    id<GeogebraCommonKernelArithmeticExpressionValue> left = [en getLeft];
    id<GeogebraCommonKernelArithmeticExpressionValue> right = [en getRight];
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isExpressionNode] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isExpressionNode]) {
      GeogebraCommonKernelArithmeticExpressionNode *enLeft = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class]);
      GeogebraCommonKernelArithmeticExpressionNode *enRight = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class]);
      jint leftDir = GeogebraCommonKernelCommandsAlgebraProcessor_getDirectionWithGeogebraCommonKernelArithmeticExpressionNode_(enLeft);
      jint rightDir = GeogebraCommonKernelCommandsAlgebraProcessor_getDirectionWithGeogebraCommonKernelArithmeticExpressionNode_(enRight);
      if (leftDir * rightDir < 0) {
        if (isIndependent) {
          f = [new_GeogebraCommonKernelGeosGeoInterval_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunction_(self->cons_, label, fun) autorelease];
        }
        else {
          f = GeogebraCommonKernelCommandsAlgebraProcessor_DependentIntervalWithNSString_withGeogebraCommonKernelArithmeticFunction_(self, label, fun);
        }
        IOSObjectArray_Set(ret, 0, f);
        return ret;
      }
    }
  }
  else if ([((GeogebraCommonPluginOperationEnum *) nil_chk([en getOperation])) isEqual:GeogebraCommonPluginOperationEnum_get_FUNCTION()]) {
    id<GeogebraCommonKernelArithmeticExpressionValue> left = [en getLeft];
    id<GeogebraCommonKernelArithmeticExpressionValue> right = [en getRight];
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf] && [left isGeoElement] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isLeaf] && [right isNumberValue] && ![right isConstant] && !isIndependent) {
      f = (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(GeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withGeogebraCommonKernelGeosGeoElement_(self, label, [((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(left, @protocol(GeogebraCommonKernelGeosGeoFunctionable))) getGeoFunction]), [GeogebraCommonKernelGeosGeoFunction class]);
      IOSObjectArray_Set(ret, 0, f);
      return ret;
    }
  }
  if (isIndependent) {
    f = [new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunction_(self->cons_, label, fun) autorelease];
  }
  else {
    f = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgoDispatcher])) DependentFunctionWithNSString:label withGeogebraCommonKernelArithmeticFunction:fun];
  }
  IOSObjectArray_Set(ret, 0, f);
  return ret;
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelCommandsAlgebraProcessor_exprWithGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelCommandsAlgebraProcessor *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev) {
  if (ev == nil) {
    return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0) autorelease];
  }
  return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) wrap];
}

jboolean GeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValueArray_withGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticExpressionNode *cx, IOSObjectArray *coefX, GeogebraCommonKernelArithmeticExpressionNode *scale_, GeogebraCommonKernelGeosGeoElement *var) {
  jboolean childrenOK = YES;
  if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(cx)) getOperation] == GeogebraCommonPluginOperationEnum_get_PLUS()) {
    childrenOK = (GeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValueArray_withGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoElement_(self, [cx getLeftTree], coefX, scale_, var) && GeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValueArray_withGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoElement_(self, [cx getRightTree], coefX, scale_, var));
  }
  else if ([cx getOperation] == GeogebraCommonPluginOperationEnum_get_MINUS()) {
    childrenOK = (GeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValueArray_withGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoElement_(self, [cx getLeftTree], coefX, scale_, var) && GeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValueArray_withGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoElement_(self, [cx getRightTree], coefX, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(scale_)) multiplyWithDouble:-1], var));
  }
  else if ([cx getOperation] == GeogebraCommonPluginOperationEnum_get_MULTIPLY()) {
    if ([[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) unwrap] isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) isConstant]) {
      return GeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValueArray_withGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoElement_(self, [cx getRightTree], coefX, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(scale_)) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) unwrap]], var);
    }
    else if ([[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getRight])) unwrap] isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getRight])) isConstant]) {
      return GeogebraCommonKernelCommandsAlgebraProcessor_getTrigCoeffsWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValueArray_withGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoElement_(self, [cx getLeftTree], coefX, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(scale_)) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getRight])) unwrap]], var);
    }
    return NO;
  }
  else if ([cx getOperation] == GeogebraCommonPluginOperationEnum_get_SIN()) {
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) unwrap] != var) {
      return NO;
    }
    GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 1, scale_);
  }
  else if ([cx getOperation] == GeogebraCommonPluginOperationEnum_get_COS()) {
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) unwrap] != var) {
      return NO;
    }
    GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 2, scale_);
  }
  else if ([cx getOperation] == GeogebraCommonPluginOperationEnum_get_SINH()) {
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) unwrap] != var) {
      return NO;
    }
    GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 3, scale_);
  }
  else if ([cx getOperation] == GeogebraCommonPluginOperationEnum_get_COSH()) {
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) unwrap] != var) {
      return NO;
    }
    GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 4, scale_);
  }
  else if ([cx isLeaf]) {
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([cx getLeft])) containsWithGeogebraCommonKernelArithmeticExpressionValue:var]) {
      return NO;
    }
    GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(self, coefX, 0, [cx multiplyWithGeogebraCommonKernelArithmeticExpressionValue:scale_]);
  }
  else {
    return NO;
  }
  return childrenOK && ((IOSObjectArray_Get(nil_chk(coefX), 1) == nil && IOSObjectArray_Get(coefX, 2) == nil) || (IOSObjectArray_Get(coefX, 3) == nil && IOSObjectArray_Get(coefX, 4) == nil));
}

void GeogebraCommonKernelCommandsAlgebraProcessor_addWithGeogebraCommonKernelArithmeticExpressionValueArray_withInt_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelCommandsAlgebraProcessor *self, IOSObjectArray *coefX, jint i, GeogebraCommonKernelArithmeticExpressionNode *scale_) {
  if (IOSObjectArray_Get(nil_chk(coefX), i) == nil) {
    IOSObjectArray_Set(coefX, i, scale_);
  }
  else {
    IOSObjectArray_Set(coefX, i, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(scale_)) plusWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coefX, i)]);
  }
}

jint GeogebraCommonKernelCommandsAlgebraProcessor_getDirectionWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelArithmeticExpressionNode *enLeft) {
  GeogebraCommonKernelCommandsAlgebraProcessor_initialize();
  jint dir = 0;
  id<GeogebraCommonKernelArithmeticExpressionValue> left = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enLeft)) getLeft];
  id<GeogebraCommonKernelArithmeticExpressionValue> right = [enLeft getRight];
  GeogebraCommonPluginOperationEnum *op = [enLeft getOperation];
  if (([((GeogebraCommonPluginOperationEnum *) nil_chk(op)) isEqual:GeogebraCommonPluginOperationEnum_get_LESS()] || [op isEqual:GeogebraCommonPluginOperationEnum_get_LESS_EQUAL()])) {
    if ([left isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isNumberValue] && [right isConstant]) dir = -1;
    else if ([right isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isNumberValue] && [left isConstant]) dir = +1;
  }
  else if (([op isEqual:GeogebraCommonPluginOperationEnum_get_GREATER()] || [op isEqual:GeogebraCommonPluginOperationEnum_get_GREATER_EQUAL()])) {
    if ([left isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isNumberValue] && [right isConstant]) dir = +1;
    else if ([right isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isNumberValue] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isConstant]) dir = -1;
  }
  return dir;
}

GeogebraCommonKernelGeosGeoFunction *GeogebraCommonKernelCommandsAlgebraProcessor_DependentIntervalWithNSString_withGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticFunction *fun) {
  GeogebraCommonKernelAlgosAlgoDependentInterval *algo = [new_GeogebraCommonKernelAlgosAlgoDependentInterval_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunction_(self->cons_, label, fun) autorelease];
  GeogebraCommonKernelGeosGeoFunction *f = [algo getFunction];
  return f;
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelGeosGeoElement *origGeoNode) {
  GeogebraCommonKernelAlgosAlgoDependentGeoCopy *algo = [new_GeogebraCommonKernelAlgosAlgoDependentGeoCopy_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self->cons_, label, origGeoNode) autorelease];
  return [algo getGeo];
}

GeogebraCommonKernelGeosGeoFunctionNVar *GeogebraCommonKernelCommandsAlgebraProcessor_DependentFunctionNVarWithNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticFunctionNVar *fun) {
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar *algo = [new_GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(self->cons_, label, fun) autorelease];
  GeogebraCommonKernelGeosGeoFunctionNVar *f = [algo getFunction];
  return f;
}

IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticEquation *equ) {
  if ([[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getLHS])) unwrap] isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]] && ![((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([equ getRHS])) containsFreeFunctionVariable] && ![((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([equ getRHS])) evaluatesToNumberWithBoolean:YES]) {
    [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([equ getRHS])) setLabelWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([equ getLHS])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    @try {
      return [self processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:[equ getRHS]];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
  }
  return GeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithGeogebraCommonKernelArithmeticEquation_withBoolean_(self, equ, [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) isFileLoading]);
}

IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processEquationWithGeogebraCommonKernelArithmeticEquation_withBoolean_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticEquation *equ, jboolean allowConstant) {
  [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) initEquation];
  [self checkNoTermsInZWithGeogebraCommonKernelArithmeticEquation:equ];
  if ([equ isFunctionDependent]) {
    return [self processImplicitPolyWithGeogebraCommonKernelArithmeticEquation:equ];
  }
  jint deg = [equ mayBePolynomial] && ![equ hasVariableDegree] ? [equ degree] : -1;
  {
    NSString *lhsStr;
    IOSObjectArray *errors;
    switch (deg) {
      case 1:
      return [self processLineWithGeogebraCommonKernelArithmeticEquation:equ];
      case 2:
      return [self processConicWithGeogebraCommonKernelArithmeticEquation:equ];
      case 0:
      if (!allowConstant) {
        @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_([((GeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization], @"InvalidEquation") autorelease];
      }
      default:
      lhsStr = [((NSString *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([equ getLHS])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_xmlTemplate_()])) trim];
      if ([((NSString *) nil_chk(lhsStr)) isEqual:@"y"]) {
        GeogebraCommonKernelArithmeticFunction *fun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_([equ getRHS]) autorelease];
        [fun setLabelWithNSString:[equ getLabel]];
        return GeogebraCommonKernelCommandsAlgebraProcessor_processFunctionWithGeogebraCommonKernelArithmeticFunction_(self, fun);
      }
      if ([equ mayBePolynomial]) {
        return [self processImplicitPolyWithGeogebraCommonKernelArithmeticEquation:equ];
      }
      errors = [IOSObjectArray arrayWithObjects:(id[]){ @"InvalidEquation" } count:1 type:NSString_class_()];
      @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSStringArray_(self->loc_, errors) autorelease];
    }
  }
}

GeogebraCommonKernelGeosGeoLine *GeogebraCommonKernelCommandsAlgebraProcessor_DependentLineWithNSString_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticEquation *equ) {
  GeogebraCommonKernelAlgosAlgoDependentLine *algo = [new_GeogebraCommonKernelAlgosAlgoDependentLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_(self->cons_, label, equ) autorelease];
  GeogebraCommonKernelGeosGeoLine *line = [algo getLine];
  return line;
}

GeogebraCommonKernelGeosGeoConic *GeogebraCommonKernelCommandsAlgebraProcessor_DependentConicWithNSString_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticEquation *equ) {
  GeogebraCommonKernelAlgosAlgoDependentConic *algo = [new_GeogebraCommonKernelAlgosAlgoDependentConic_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_(self->cons_, label, equ) autorelease];
  GeogebraCommonKernelGeosGeoConic *conic = [algo getConic];
  return conic;
}

IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processNumberWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticExpressionNode *n, id<GeogebraCommonKernelArithmeticExpressionValue> evaluate) {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  NSString *label = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) getLabel];
  jboolean isIndependent = ![n inspectWithGeogebraCommonKernelArithmeticInspecting:GeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_()];
  GeogebraCommonKernelArithmeticMyDouble *val = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(evaluate, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getNumber];
  jboolean isAngle = [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(val)) isAngle];
  jdouble value = [val getDouble];
  if (isIndependent) {
    if (isAngle) IOSObjectArray_SetAndConsume(ret, 0, new_GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_(self->cons_, label, value, GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_UNBOUNDED()));
    else IOSObjectArray_SetAndConsume(ret, 0, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_(self->cons_, label, value));
  }
  else {
    IOSObjectArray_Set(ret, 0, GeogebraCommonKernelCommandsAlgebraProcessor_DependentNumberWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self, label, n, isAngle));
  }
  if ([n isForcedFunction]) {
    IOSObjectArray_Set(ret, 0, [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast((IOSObjectArray_Get(ret, 0)), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction]);
  }
  return ret;
}

GeogebraCommonKernelGeosGeoNumeric *GeogebraCommonKernelCommandsAlgebraProcessor_DependentNumberWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root, jboolean isAngle) {
  GeogebraCommonKernelAlgosAlgoDependentNumber *algo = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self->cons_, label, root, isAngle) autorelease];
  GeogebraCommonKernelGeosGeoNumeric *number = [algo getNumber];
  return number;
}

IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processListWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticMyList_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticExpressionNode *n, GeogebraCommonKernelArithmeticMyList *evalList) {
  NSString *label = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) getLabel];
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  if (![n hasOperations] || [n isConstant]) {
    JavaUtilArrayList *geoElements = [new_JavaUtilArrayList_init() autorelease];
    jboolean isIndependent = YES;
    jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    [self->cons_ setSuppressLabelCreationWithBoolean:YES];
    jint size = [((GeogebraCommonKernelArithmeticMyList *) nil_chk(evalList)) size];
    for (jint i = 0; i < size; i++) {
      GeogebraCommonKernelArithmeticExpressionNode *en = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([evalList getListElementWithInt:i], [GeogebraCommonKernelArithmeticExpressionNode class]);
      IOSObjectArray *results = [self processExpressionNodeWithGeogebraCommonKernelArithmeticExpressionNode:en];
      GeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk(results), 0);
      [geoElements addWithId:geo];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet] || ![geo isIndependent]) isIndependent = NO;
    }
    [self->cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
    IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgoDispatcher])) ListWithNSString:label withJavaUtilArrayList:geoElements withBoolean:isIndependent]);
  }
  else {
    IOSObjectArray_Set(ret, 0, GeogebraCommonKernelCommandsAlgebraProcessor_ListExpressionWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self, label, n));
  }
  return ret;
}

GeogebraCommonKernelGeosGeoList *GeogebraCommonKernelCommandsAlgebraProcessor_ListExpressionWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root) {
  GeogebraCommonKernelAlgosAlgoDependentListExpression *algo = [new_GeogebraCommonKernelAlgosAlgoDependentListExpression_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self->cons_, label, root) autorelease];
  return [algo getList];
}

IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processTextWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticExpressionNode *n, id<GeogebraCommonKernelArithmeticExpressionValue> evaluate) {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  NSString *label = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) getLabel];
  jboolean isIndependent = [n isConstant];
  if (isIndependent) {
    GeogebraCommonKernelArithmeticMyStringBuffer *val = [((id<GeogebraCommonKernelArithmeticTextValue>) nil_chk(((id<GeogebraCommonKernelArithmeticTextValue>) check_protocol_cast(evaluate, @protocol(GeogebraCommonKernelArithmeticTextValue))))) getText];
    IOSObjectArray_Set(ret, 0, GeogebraCommonKernelCommandsAlgebraProcessor_TextWithNSString_withNSString_(self, label, [((GeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(val)) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]));
  }
  else IOSObjectArray_Set(ret, 0, GeogebraCommonKernelCommandsAlgebraProcessor_DependentTextWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self, label, n));
  return ret;
}

GeogebraCommonKernelGeosGeoText *GeogebraCommonKernelCommandsAlgebraProcessor_DependentTextWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root) {
  GeogebraCommonKernelAlgosAlgoDependentText *algo = [new_GeogebraCommonKernelAlgosAlgoDependentText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self->cons_, label, root) autorelease];
  GeogebraCommonKernelGeosGeoText *t = [algo getGeoText];
  return t;
}

GeogebraCommonKernelGeosGeoText *GeogebraCommonKernelCommandsAlgebraProcessor_TextWithNSString_withNSString_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, NSString *text) {
  GeogebraCommonKernelGeosGeoText *t = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
  [t setTextStringWithNSString:text];
  [t setLabelWithNSString:label];
  return t;
}

IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processBooleanWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticExpressionNode *n, id<GeogebraCommonKernelArithmeticExpressionValue> evaluate) {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  NSString *label = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) getLabel];
  jboolean isIndependent = ![n inspectWithGeogebraCommonKernelArithmeticInspecting:GeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_()];
  if (isIndependent) {
    IOSObjectArray_SetAndConsume(ret, 0, new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(self->cons_));
    [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(ret, 0), [GeogebraCommonKernelGeosGeoBoolean class])))) setValueWithBoolean:[((id<GeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<GeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast(evaluate, @protocol(GeogebraCommonKernelArithmeticBooleanValue))))) getBoolean]];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, 0))) setLabelWithNSString:label];
  }
  else {
    IOSObjectArray_Set(ret, 0, [([new_GeogebraCommonKernelAlgosAlgoDependentBoolean_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self->cons_, label, n) autorelease]) getGeoBoolean]);
  }
  return ret;
}

IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processPointVectorWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelCommandsAlgebraProcessor *self, GeogebraCommonKernelArithmeticExpressionNode *n, id<GeogebraCommonKernelArithmeticExpressionValue> evaluate) {
  NSString *label = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) getLabel];
  GeogebraCommonKernelGeosGeoVec2D *p = [((id<GeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<GeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(evaluate, @protocol(GeogebraCommonKernelArithmeticVectorValue))))) getVector];
  jboolean polar = [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(p)) getMode] == GeogebraCommonKernelKernel_COORD_POLAR;
  jboolean complex = [p getMode] == GeogebraCommonKernelKernel_COORD_COMPLEX;
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoVec3D_class_()];
  jboolean isIndependent = ![n inspectWithGeogebraCommonKernelArithmeticInspecting:GeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_()];
  if (complex) {
    [n setForcePoint];
  }
  else if (label != nil) {
    if (!([n isForcedPoint] || [n isForcedVector])) {
      if (JavaLangCharacter_isLowerCaseWithChar_([label charAtWithInt:0])) [n setForceVector];
      else [n setForcePoint];
    }
  }
  jboolean isVector = [n shouldEvaluateToGeoVector];
  if (isIndependent) {
    jdouble x = [p getX];
    jdouble y = [p getY];
    if (isVector) IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgoDispatcher])) VectorWithNSString:label withDouble:x withDouble:y]);
    else IOSObjectArray_Set(ret, 0, [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgoDispatcher])) PointWithNSString:label withDouble:x withDouble:y withBoolean:complex]);
  }
  else {
    if (isVector) IOSObjectArray_Set(ret, 0, GeogebraCommonKernelCommandsAlgebraProcessor_DependentVectorWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self, label, n));
    else IOSObjectArray_Set(ret, 0, GeogebraCommonKernelCommandsAlgebraProcessor_DependentPointWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self, label, n, complex));
  }
  if (polar) {
    [((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(IOSObjectArray_Get(ret, 0))) setModeWithInt:GeogebraCommonKernelKernel_COORD_POLAR];
    [((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(IOSObjectArray_Get(ret, 0))) updateRepaint];
  }
  else if (complex) {
    [((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(IOSObjectArray_Get(ret, 0))) setModeWithInt:GeogebraCommonKernelKernel_COORD_COMPLEX];
    [((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(IOSObjectArray_Get(ret, 0))) updateRepaint];
  }
  return ret;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelCommandsAlgebraProcessor_DependentPointWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root, jboolean complex) {
  GeogebraCommonKernelAlgosAlgoDependentPoint *algo = [new_GeogebraCommonKernelAlgosAlgoDependentPoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self->cons_, label, root, complex) autorelease];
  GeogebraCommonKernelGeosGeoPoint *P = [algo getPoint];
  return P;
}

GeogebraCommonKernelGeosGeoVector *GeogebraCommonKernelCommandsAlgebraProcessor_DependentVectorWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root) {
  GeogebraCommonKernelAlgosAlgoDependentVector *algo = [new_GeogebraCommonKernelAlgosAlgoDependentVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self->cons_, label, root) autorelease];
  GeogebraCommonKernelGeosGeoVector *v = [algo getVector];
  return v;
}

IOSObjectArray *GeogebraCommonKernelCommandsAlgebraProcessor_processGeoCopyWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *copyLabel, GeogebraCommonKernelArithmeticExpressionNode *origGeoNode) {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  IOSObjectArray_Set(ret, 0, GeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self, copyLabel, origGeoNode));
  return ret;
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelCommandsAlgebraProcessor_DependentGeoCopyWithNSString_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelCommandsAlgebraProcessor *self, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *origGeoNode) {
  GeogebraCommonKernelAlgosAlgoDependentGeoCopy *algo = [new_GeogebraCommonKernelAlgosAlgoDependentGeoCopy_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self->cons_, label, origGeoNode) autorelease];
  return [algo getGeo];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsAlgebraProcessor)

@implementation GeogebraCommonKernelCommandsAlgebraProcessor_$1

- (void)callbackWithId:(id)obj {
  IOSObjectArray *dialogResult = (IOSObjectArray *) check_class_cast(obj, [IOSObjectArray class]);
  IOSObjectArray *geos = nil;
  if ([@"0" isEqual:IOSObjectArray_Get(nil_chk(dialogResult), 0)]) {
    [this$0_ replaceUndefinedVariablesWithGeogebraCommonKernelArithmeticValidExpression:val$ve2_];
    @try {
      geos = [this$0_ processValidExpressionWithBoolean:val$storeUndo_ withBoolean:val$allowErrorDialog_ withBoolean:val$throwMyError_ withGeogebraCommonKernelArithmeticValidExpression:val$ve2_];
    }
    @catch (JavaLangException *ee) {
      [((GeogebraCommonMainApp *) nil_chk(this$0_->app_)) showErrorWithNSString:[((JavaLangException *) nil_chk(ee)) getMessage]];
      return;
    }
  }
  [((GeogebraCommonUtilAsyncOperation *) nil_chk(val$callback0_)) callbackWithId:geos];
}

- (instancetype)initWithGeogebraCommonKernelCommandsAlgebraProcessor:(GeogebraCommonKernelCommandsAlgebraProcessor *)outer$
                   withGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)capture$0
                                                         withBoolean:(jboolean)capture$1
                                                         withBoolean:(jboolean)capture$2
                                                         withBoolean:(jboolean)capture$3
                                withGeogebraCommonUtilAsyncOperation:(GeogebraCommonUtilAsyncOperation *)capture$4 {
  GeogebraCommonKernelCommandsAlgebraProcessor_$1_initWithGeogebraCommonKernelCommandsAlgebraProcessor_withGeogebraCommonKernelArithmeticValidExpression_withBoolean_withBoolean_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0, capture$1, capture$2, capture$3, capture$4);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$ve2_);
  RELEASE_(val$callback0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callbackWithId:", "callback", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelCommandsAlgebraProcessor:withGeogebraCommonKernelArithmeticValidExpression:withBoolean:withBoolean:withBoolean:withGeogebraCommonUtilAsyncOperation:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.commands.AlgebraProcessor;", NULL, NULL,  },
    { "val$ve2_", NULL, 0x1012, "Lgeogebra.common.kernel.arithmetic.ValidExpression;", NULL, NULL,  },
    { "val$storeUndo_", NULL, 0x1012, "Z", NULL, NULL,  },
    { "val$allowErrorDialog_", NULL, 0x1012, "Z", NULL, NULL,  },
    { "val$throwMyError_", NULL, 0x1012, "Z", NULL, NULL,  },
    { "val$callback0_", NULL, 0x1012, "Lgeogebra.common.util.AsyncOperation;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelCommandsAlgebraProcessor", "processAlgebraCommandNoExceptionHandlingWithNSString:withBoolean:withBoolean:withBoolean:withBoolean:withGeogebraCommonUtilAsyncOperation:" };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsAlgebraProcessor_$1 = { 2, "", "geogebra.common.kernel.commands", "AlgebraProcessor", 0x8008, 2, methods, 6, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonKernelCommandsAlgebraProcessor_$1;
}

@end

void GeogebraCommonKernelCommandsAlgebraProcessor_$1_initWithGeogebraCommonKernelCommandsAlgebraProcessor_withGeogebraCommonKernelArithmeticValidExpression_withBoolean_withBoolean_withBoolean_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonKernelCommandsAlgebraProcessor_$1 *self, GeogebraCommonKernelCommandsAlgebraProcessor *outer$, GeogebraCommonKernelArithmeticValidExpression *capture$0, jboolean capture$1, jboolean capture$2, jboolean capture$3, GeogebraCommonUtilAsyncOperation *capture$4) {
  GeogebraCommonKernelCommandsAlgebraProcessor_$1_set_this$0_(self, outer$);
  GeogebraCommonKernelCommandsAlgebraProcessor_$1_set_val$ve2_(self, capture$0);
  self->val$storeUndo_ = capture$1;
  self->val$allowErrorDialog_ = capture$2;
  self->val$throwMyError_ = capture$3;
  GeogebraCommonKernelCommandsAlgebraProcessor_$1_set_val$callback0_(self, capture$4);
  GeogebraCommonUtilAsyncOperation_init(self);
}

GeogebraCommonKernelCommandsAlgebraProcessor_$1 *new_GeogebraCommonKernelCommandsAlgebraProcessor_$1_initWithGeogebraCommonKernelCommandsAlgebraProcessor_withGeogebraCommonKernelArithmeticValidExpression_withBoolean_withBoolean_withBoolean_withGeogebraCommonUtilAsyncOperation_(GeogebraCommonKernelCommandsAlgebraProcessor *outer$, GeogebraCommonKernelArithmeticValidExpression *capture$0, jboolean capture$1, jboolean capture$2, jboolean capture$3, GeogebraCommonUtilAsyncOperation *capture$4) {
  GeogebraCommonKernelCommandsAlgebraProcessor_$1 *self = [GeogebraCommonKernelCommandsAlgebraProcessor_$1 alloc];
  GeogebraCommonKernelCommandsAlgebraProcessor_$1_initWithGeogebraCommonKernelCommandsAlgebraProcessor_withGeogebraCommonKernelArithmeticValidExpression_withBoolean_withBoolean_withBoolean_withGeogebraCommonUtilAsyncOperation_(self, outer$, capture$0, capture$1, capture$2, capture$3, capture$4);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsAlgebraProcessor_$1)

@implementation GeogebraCommonKernelCommandsAlgebraProcessor_$2

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode] && [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class])) getOperation] == GeogebraCommonPluginOperationEnum_get_MULTIPLY()) {
    NSString *lt = [((NSString *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class])) getLeft])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) replace:@" " withSequence:@""];
    GeogebraCommonPluginOperationEnum *op = [((GeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([((GeogebraCommonMainApp *) nil_chk(this$0_->app_)) getParserFunctions])) getWithNSString:lt withInt:1];
    if (op != nil) {
      return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(this$0_->kernel_, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class])) getRight])) traverseWithGeogebraCommonKernelArithmeticTraversing:self], op, nil) autorelease];
    }
  }
  return ev;
}

- (instancetype)initWithGeogebraCommonKernelCommandsAlgebraProcessor:(GeogebraCommonKernelCommandsAlgebraProcessor *)outer$ {
  GeogebraCommonKernelCommandsAlgebraProcessor_$2_initWithGeogebraCommonKernelCommandsAlgebraProcessor_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelCommandsAlgebraProcessor:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.commands.AlgebraProcessor;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelCommandsAlgebraProcessor", "tryReplacingProductsWithGeogebraCommonKernelArithmeticValidExpression:" };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsAlgebraProcessor_$2 = { 2, "", "geogebra.common.kernel.commands", "AlgebraProcessor", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonKernelCommandsAlgebraProcessor_$2;
}

@end

void GeogebraCommonKernelCommandsAlgebraProcessor_$2_initWithGeogebraCommonKernelCommandsAlgebraProcessor_(GeogebraCommonKernelCommandsAlgebraProcessor_$2 *self, GeogebraCommonKernelCommandsAlgebraProcessor *outer$) {
  GeogebraCommonKernelCommandsAlgebraProcessor_$2_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonKernelCommandsAlgebraProcessor_$2 *new_GeogebraCommonKernelCommandsAlgebraProcessor_$2_initWithGeogebraCommonKernelCommandsAlgebraProcessor_(GeogebraCommonKernelCommandsAlgebraProcessor *outer$) {
  GeogebraCommonKernelCommandsAlgebraProcessor_$2 *self = [GeogebraCommonKernelCommandsAlgebraProcessor_$2 alloc];
  GeogebraCommonKernelCommandsAlgebraProcessor_$2_initWithGeogebraCommonKernelCommandsAlgebraProcessor_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsAlgebraProcessor_$2)
