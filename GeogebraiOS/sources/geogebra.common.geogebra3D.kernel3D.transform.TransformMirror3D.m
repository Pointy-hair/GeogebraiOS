//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/transform/TransformMirror3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoMirror3D.h"
#include "geogebra/common/geogebra3D/kernel3D/transform/TransformMirror3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/TransformMirror.h"
#include "geogebra/common/kernel/algos/AlgoTransformation.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, point);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, line);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
           withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, cons, plane);
  return self;
}

- (GeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelAlgosAlgoTransformation *algo = nil;
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(mirror_)) isGeoPoint]) algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, geo, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(mirror_, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) autorelease];
  else if ([mirror_ isGeoLine]) algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoLineND_(cons_, geo, (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(mirror_, @protocol(GeogebraCommonKernelKernelNDGeoLineND))) autorelease];
  else if ([GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:mirror_]) algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(cons_, geo, (id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast(mirror_, @protocol(GeogebraCommonKernelKernelNDGeoCoordSys2D))) autorelease];
  return algo;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:", "TransformMirror3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoLineND:", "TransformMirror3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoCoordSys2D:", "TransformMirror3D", NULL, 0x1, NULL, NULL },
    { "getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:", "getTransformAlgo", "Lgeogebra.common.kernel.algos.AlgoTransformation;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D = { 2, "TransformMirror3D", "geogebra.common.geogebra3D.kernel3D.transform", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_(self, cons, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class]));
}

GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *new_GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *self = [GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D alloc];
  GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, point);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoLineND> line) {
  GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_(self, cons, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [GeogebraCommonKernelGeosGeoElement class]));
}

GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *new_GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoLineND> line) {
  GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *self = [GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D alloc];
  GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, line);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoCoordSys2D> plane) {
  GeogebraCommonKernelTransformMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_(self, cons, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(plane, [GeogebraCommonKernelGeosGeoElement class]));
}

GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *new_GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoCoordSys2D> plane) {
  GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D *self = [GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D alloc];
  GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, cons, plane);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DTransformTransformMirror3D)
