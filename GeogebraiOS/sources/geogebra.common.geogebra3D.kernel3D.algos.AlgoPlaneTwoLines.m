//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneTwoLines.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneTwoLines.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines () {
 @public
  id<GeogebraCommonKernelKernelNDGeoLineND> a_, b_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines, a_, id<GeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines, b_, id<GeogebraCommonKernelKernelNDGeoLineND>)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)a
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)b {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, c, label, a, b);
  return self;
}

- (void)compute {
  GeogebraCommonKernelMatrixCoordSys *coordsys = [((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(cs_)) getCoordSys];
  if ((![((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(a_)) isDefined]) || (![((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(b_)) isDefined])) {
    [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys)) setUndefined];
    return;
  }
  GeogebraCommonKernelMatrixCoords *oa = [a_ getStartInhomCoords];
  GeogebraCommonKernelMatrixCoords *va = [a_ getDirectionInD3];
  GeogebraCommonKernelMatrixCoords *ob = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(b_)) getStartInhomCoords];
  GeogebraCommonKernelMatrixCoords *vb = [b_ getDirectionInD3];
  GeogebraCommonKernelMatrixCoords *vn = [((GeogebraCommonKernelMatrixCoords *) nil_chk(va)) crossProductWithGeogebraCommonKernelMatrixCoords:vb];
  GeogebraCommonKernelMatrixCoords *oo = [((GeogebraCommonKernelMatrixCoords *) nil_chk(ob)) subWithGeogebraCommonKernelMatrixCoords:oa];
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) dotproductWithGeogebraCommonKernelMatrixCoords:oo])) {
    [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys)) resetCoordSys];
  [coordsys addPointWithGeogebraCommonKernelMatrixCoords:oa];
  [coordsys addVectorWithGeogebraCommonKernelMatrixCoords:va];
  if ([vn isZero]) {
    [coordsys addVectorWithGeogebraCommonKernelMatrixCoords:oo];
    vn = [va crossProductWithGeogebraCommonKernelMatrixCoords:oo];
  }
  else {
    [coordsys addVectorWithGeogebraCommonKernelMatrixCoords:vb];
  }
  if ([coordsys makeOrthoMatrixWithBoolean:NO withBoolean:NO]) {
    if ([coordsys isDefined]) [coordsys setEquationVectorWithGeogebraCommonKernelMatrixCoords:oa withGeogebraCommonKernelMatrixCoords:vn];
  }
}

- (id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)getCoordSys {
  return cs_;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Plane();
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"PlaneThroughAB" withNSString:[((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(a_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(b_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(cs_);
  RELEASE_(a_);
  RELEASE_(b_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "AlgoPlaneTwoLines", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getCoordSys", NULL, "Lgeogebra.common.kernel.kernelND.GeoCoordSys2D;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cs_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoCoordSys2D;", NULL, NULL,  },
    { "a_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "b_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines = { 2, "AlgoPlaneTwoLines", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines *self, GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> a, id<GeogebraCommonKernelKernelNDGeoLineND> b) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines_set_a_(self, a);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines_set_b_(self, b);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines_setAndConsume_cs_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithGeogebraCommonKernelConstruction_(c));
  [self setInputOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(a, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(b, [GeogebraCommonKernelGeosGeoElement class]) } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()] withGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->cs_, [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]];
  [self compute];
  [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->cs_, [GeogebraCommonKernelGeosGeoElement class])) setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> a, id<GeogebraCommonKernelKernelNDGeoLineND> b) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, c, label, a, b);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneTwoLines)
