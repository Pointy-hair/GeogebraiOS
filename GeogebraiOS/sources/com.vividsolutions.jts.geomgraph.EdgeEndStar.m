//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/geomgraph/EdgeEndStar.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/BoundaryNodeRule.h"
#include "com/vividsolutions/jts/algorithm/locate/SimplePointInAreaLocator.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/Location.h"
#include "com/vividsolutions/jts/geom/TopologyException.h"
#include "com/vividsolutions/jts/geomgraph/EdgeEnd.h"
#include "com/vividsolutions/jts/geomgraph/EdgeEndStar.h"
#include "com/vividsolutions/jts/geomgraph/GeometryGraph.h"
#include "com/vividsolutions/jts/geomgraph/Label.h"
#include "com/vividsolutions/jts/geomgraph/Position.h"
#include "com/vividsolutions/jts/util/Assert.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/TreeMap.h"

@interface ComVividsolutionsJtsGeomgraphEdgeEndStar () {
 @public
  IOSIntArray *ptInAreaLocation_;
}

- (void)computeEdgeEndLabelsWithComVividsolutionsJtsAlgorithmBoundaryNodeRule:(id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule>)boundaryNodeRule;

- (jint)getLocationWithInt:(jint)geomIndex
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p
withComVividsolutionsJtsGeomgraphGeometryGraphArray:(IOSObjectArray *)geom;

- (jboolean)checkAreaLabelsConsistentWithInt:(jint)geomIndex;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphEdgeEndStar, ptInAreaLocation_, IOSIntArray *)

__attribute__((unused)) static void ComVividsolutionsJtsGeomgraphEdgeEndStar_computeEdgeEndLabelsWithComVividsolutionsJtsAlgorithmBoundaryNodeRule_(ComVividsolutionsJtsGeomgraphEdgeEndStar *self, id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule> boundaryNodeRule);

__attribute__((unused)) static jint ComVividsolutionsJtsGeomgraphEdgeEndStar_getLocationWithInt_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomgraphGeometryGraphArray_(ComVividsolutionsJtsGeomgraphEdgeEndStar *self, jint geomIndex, ComVividsolutionsJtsGeomCoordinate *p, IOSObjectArray *geom);

__attribute__((unused)) static jboolean ComVividsolutionsJtsGeomgraphEdgeEndStar_checkAreaLabelsConsistentWithInt_(ComVividsolutionsJtsGeomgraphEdgeEndStar *self, jint geomIndex);

@implementation ComVividsolutionsJtsGeomgraphEdgeEndStar

- (instancetype)init {
  ComVividsolutionsJtsGeomgraphEdgeEndStar_init(self);
  return self;
}

- (void)insertWithComVividsolutionsJtsGeomgraphEdgeEnd:(ComVividsolutionsJtsGeomgraphEdgeEnd *)e {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)insertEdgeEndWithComVividsolutionsJtsGeomgraphEdgeEnd:(ComVividsolutionsJtsGeomgraphEdgeEnd *)e
                                                       withId:(id)obj {
  [((id<JavaUtilMap>) nil_chk(edgeMap_)) putWithId:e withId:obj];
  ComVividsolutionsJtsGeomgraphEdgeEndStar_set_edgeList_(self, nil);
}

- (ComVividsolutionsJtsGeomCoordinate *)getCoordinate {
  id<JavaUtilIterator> it = [self iterator];
  if (![((id<JavaUtilIterator>) nil_chk(it)) hasNext]) return nil;
  ComVividsolutionsJtsGeomgraphEdgeEnd *e = (ComVividsolutionsJtsGeomgraphEdgeEnd *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdgeEnd class]);
  return [((ComVividsolutionsJtsGeomgraphEdgeEnd *) nil_chk(e)) getCoordinate];
}

- (jint)getDegree {
  return [((id<JavaUtilMap>) nil_chk(edgeMap_)) size];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilList>) nil_chk([self getEdges])) iterator];
}

- (id<JavaUtilList>)getEdges {
  if (edgeList_ == nil) {
    ComVividsolutionsJtsGeomgraphEdgeEndStar_setAndConsume_edgeList_(self, new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(edgeMap_)) values]));
  }
  return edgeList_;
}

- (ComVividsolutionsJtsGeomgraphEdgeEnd *)getNextCWWithComVividsolutionsJtsGeomgraphEdgeEnd:(ComVividsolutionsJtsGeomgraphEdgeEnd *)ee {
  [self getEdges];
  jint i = [((id<JavaUtilList>) nil_chk(edgeList_)) indexOfWithId:ee];
  jint iNextCW = i - 1;
  if (i == 0) iNextCW = [edgeList_ size] - 1;
  return (ComVividsolutionsJtsGeomgraphEdgeEnd *) check_class_cast([edgeList_ getWithInt:iNextCW], [ComVividsolutionsJtsGeomgraphEdgeEnd class]);
}

- (void)computeLabellingWithComVividsolutionsJtsGeomgraphGeometryGraphArray:(IOSObjectArray *)geomGraph {
  ComVividsolutionsJtsGeomgraphEdgeEndStar_computeEdgeEndLabelsWithComVividsolutionsJtsAlgorithmBoundaryNodeRule_(self, [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(IOSObjectArray_Get(nil_chk(geomGraph), 0))) getBoundaryNodeRule]);
  [self propagateSideLabelsWithInt:0];
  [self propagateSideLabelsWithInt:1];
  IOSBooleanArray *hasDimensionalCollapseEdge = [IOSBooleanArray arrayWithBooleans:(jboolean[]){ NO, NO } count:2];
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdgeEnd *e = (ComVividsolutionsJtsGeomgraphEdgeEnd *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdgeEnd class]);
    ComVividsolutionsJtsGeomgraphLabel *label = [((ComVividsolutionsJtsGeomgraphEdgeEnd *) nil_chk(e)) getLabel];
    for (jint geomi = 0; geomi < 2; geomi++) {
      if ([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label)) isLineWithInt:geomi] && [label getLocationWithInt:geomi] == ComVividsolutionsJtsGeomLocation_BOUNDARY) *IOSBooleanArray_GetRef(hasDimensionalCollapseEdge, geomi) = YES;
    }
  }
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdgeEnd *e = (ComVividsolutionsJtsGeomgraphEdgeEnd *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdgeEnd class]);
    ComVividsolutionsJtsGeomgraphLabel *label = [((ComVividsolutionsJtsGeomgraphEdgeEnd *) nil_chk(e)) getLabel];
    for (jint geomi = 0; geomi < 2; geomi++) {
      if ([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label)) isAnyNullWithInt:geomi]) {
        jint loc = ComVividsolutionsJtsGeomLocation_NONE;
        if (IOSBooleanArray_Get(hasDimensionalCollapseEdge, geomi)) {
          loc = ComVividsolutionsJtsGeomLocation_EXTERIOR;
        }
        else {
          ComVividsolutionsJtsGeomCoordinate *p = [e getCoordinate];
          loc = ComVividsolutionsJtsGeomgraphEdgeEndStar_getLocationWithInt_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomgraphGeometryGraphArray_(self, geomi, p, geomGraph);
        }
        [label setAllLocationsIfNullWithInt:geomi withInt:loc];
      }
    }
  }
}

- (void)computeEdgeEndLabelsWithComVividsolutionsJtsAlgorithmBoundaryNodeRule:(id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule>)boundaryNodeRule {
  ComVividsolutionsJtsGeomgraphEdgeEndStar_computeEdgeEndLabelsWithComVividsolutionsJtsAlgorithmBoundaryNodeRule_(self, boundaryNodeRule);
}

- (jint)getLocationWithInt:(jint)geomIndex
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p
withComVividsolutionsJtsGeomgraphGeometryGraphArray:(IOSObjectArray *)geom {
  return ComVividsolutionsJtsGeomgraphEdgeEndStar_getLocationWithInt_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomgraphGeometryGraphArray_(self, geomIndex, p, geom);
}

- (jboolean)isAreaLabelsConsistentWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)geomGraph {
  ComVividsolutionsJtsGeomgraphEdgeEndStar_computeEdgeEndLabelsWithComVividsolutionsJtsAlgorithmBoundaryNodeRule_(self, [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(geomGraph)) getBoundaryNodeRule]);
  return ComVividsolutionsJtsGeomgraphEdgeEndStar_checkAreaLabelsConsistentWithInt_(self, 0);
}

- (jboolean)checkAreaLabelsConsistentWithInt:(jint)geomIndex {
  return ComVividsolutionsJtsGeomgraphEdgeEndStar_checkAreaLabelsConsistentWithInt_(self, geomIndex);
}

- (void)propagateSideLabelsWithInt:(jint)geomIndex {
  jint startLoc = ComVividsolutionsJtsGeomLocation_NONE;
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdgeEnd *e = (ComVividsolutionsJtsGeomgraphEdgeEnd *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdgeEnd class]);
    ComVividsolutionsJtsGeomgraphLabel *label = [((ComVividsolutionsJtsGeomgraphEdgeEnd *) nil_chk(e)) getLabel];
    if ([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label)) isAreaWithInt:geomIndex] && [label getLocationWithInt:geomIndex withInt:ComVividsolutionsJtsGeomgraphPosition_LEFT] != ComVividsolutionsJtsGeomLocation_NONE) startLoc = [label getLocationWithInt:geomIndex withInt:ComVividsolutionsJtsGeomgraphPosition_LEFT];
  }
  if (startLoc == ComVividsolutionsJtsGeomLocation_NONE) return;
  jint currLoc = startLoc;
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdgeEnd *e = (ComVividsolutionsJtsGeomgraphEdgeEnd *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdgeEnd class]);
    ComVividsolutionsJtsGeomgraphLabel *label = [((ComVividsolutionsJtsGeomgraphEdgeEnd *) nil_chk(e)) getLabel];
    if ([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label)) getLocationWithInt:geomIndex withInt:ComVividsolutionsJtsGeomgraphPosition_ON] == ComVividsolutionsJtsGeomLocation_NONE) [label setLocationWithInt:geomIndex withInt:ComVividsolutionsJtsGeomgraphPosition_ON withInt:currLoc];
    if ([label isAreaWithInt:geomIndex]) {
      jint leftLoc = [label getLocationWithInt:geomIndex withInt:ComVividsolutionsJtsGeomgraphPosition_LEFT];
      jint rightLoc = [label getLocationWithInt:geomIndex withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT];
      if (rightLoc != ComVividsolutionsJtsGeomLocation_NONE) {
        if (rightLoc != currLoc) @throw [new_ComVividsolutionsJtsGeomTopologyException_initWithNSString_withComVividsolutionsJtsGeomCoordinate_(@"side location conflict", [e getCoordinate]) autorelease];
        if (leftLoc == ComVividsolutionsJtsGeomLocation_NONE) {
          ComVividsolutionsJtsUtilAssert_shouldNeverReachHereWithNSString_(JreStrcat("$@C", @"found single null side (at ", [e getCoordinate], ')'));
        }
        currLoc = leftLoc;
      }
      else {
        ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_([label getLocationWithInt:geomIndex withInt:ComVividsolutionsJtsGeomgraphPosition_LEFT] == ComVividsolutionsJtsGeomLocation_NONE, @"found single null side");
        [label setLocationWithInt:geomIndex withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT withInt:currLoc];
        [label setLocationWithInt:geomIndex withInt:ComVividsolutionsJtsGeomgraphPosition_LEFT withInt:currLoc];
      }
    }
  }
}

- (jint)findIndexWithComVividsolutionsJtsGeomgraphEdgeEnd:(ComVividsolutionsJtsGeomgraphEdgeEnd *)eSearch {
  [self iterator];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(edgeList_)) size]; i++) {
    ComVividsolutionsJtsGeomgraphEdgeEnd *e = (ComVividsolutionsJtsGeomgraphEdgeEnd *) check_class_cast([edgeList_ getWithInt:i], [ComVividsolutionsJtsGeomgraphEdgeEnd class]);
    if (e == eSearch) return i;
  }
  return -1;
}

- (void)printWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$@", @"EdgeEndStar:   ", [self getCoordinate])];
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdgeEnd *e = (ComVividsolutionsJtsGeomgraphEdgeEnd *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdgeEnd class]);
    [((ComVividsolutionsJtsGeomgraphEdgeEnd *) nil_chk(e)) printWithJavaIoPrintStream:outArg];
  }
}

- (void)dealloc {
  RELEASE_(edgeMap_);
  RELEASE_(edgeList_);
  RELEASE_(ptInAreaLocation_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "EdgeEndStar", NULL, 0x1, NULL, NULL },
    { "insertWithComVividsolutionsJtsGeomgraphEdgeEnd:", "insert", "V", 0x401, NULL, NULL },
    { "insertEdgeEndWithComVividsolutionsJtsGeomgraphEdgeEnd:withId:", "insertEdgeEnd", "V", 0x4, NULL, NULL },
    { "getCoordinate", NULL, "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "getDegree", NULL, "I", 0x1, NULL, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "getEdges", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "getNextCWWithComVividsolutionsJtsGeomgraphEdgeEnd:", "getNextCW", "Lcom.vividsolutions.jts.geomgraph.EdgeEnd;", 0x1, NULL, NULL },
    { "computeLabellingWithComVividsolutionsJtsGeomgraphGeometryGraphArray:", "computeLabelling", "V", 0x1, NULL, NULL },
    { "computeEdgeEndLabelsWithComVividsolutionsJtsAlgorithmBoundaryNodeRule:", "computeEdgeEndLabels", "V", 0x2, NULL, NULL },
    { "getLocationWithInt:withComVividsolutionsJtsGeomCoordinate:withComVividsolutionsJtsGeomgraphGeometryGraphArray:", "getLocation", "I", 0x2, NULL, NULL },
    { "isAreaLabelsConsistentWithComVividsolutionsJtsGeomgraphGeometryGraph:", "isAreaLabelsConsistent", "Z", 0x1, NULL, NULL },
    { "checkAreaLabelsConsistentWithInt:", "checkAreaLabelsConsistent", "Z", 0x2, NULL, NULL },
    { "propagateSideLabelsWithInt:", "propagateSideLabels", "V", 0x0, NULL, NULL },
    { "findIndexWithComVividsolutionsJtsGeomgraphEdgeEnd:", "findIndex", "I", 0x1, NULL, NULL },
    { "printWithJavaIoPrintStream:", "print", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "edgeMap_", NULL, 0x4, "Ljava.util.Map;", NULL, NULL,  },
    { "edgeList_", NULL, 0x4, "Ljava.util.List;", NULL, NULL,  },
    { "ptInAreaLocation_", NULL, 0x2, "[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomgraphEdgeEndStar = { 2, "EdgeEndStar", "com.vividsolutions.jts.geomgraph", NULL, 0x401, 16, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomgraphEdgeEndStar;
}

@end

void ComVividsolutionsJtsGeomgraphEdgeEndStar_init(ComVividsolutionsJtsGeomgraphEdgeEndStar *self) {
  NSObject_init(self);
  ComVividsolutionsJtsGeomgraphEdgeEndStar_setAndConsume_edgeMap_(self, new_JavaUtilTreeMap_init());
  ComVividsolutionsJtsGeomgraphEdgeEndStar_setAndConsume_ptInAreaLocation_(self, [IOSIntArray newArrayWithInts:(jint[]){ ComVividsolutionsJtsGeomLocation_NONE, ComVividsolutionsJtsGeomLocation_NONE } count:2]);
}

void ComVividsolutionsJtsGeomgraphEdgeEndStar_computeEdgeEndLabelsWithComVividsolutionsJtsAlgorithmBoundaryNodeRule_(ComVividsolutionsJtsGeomgraphEdgeEndStar *self, id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule> boundaryNodeRule) {
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdgeEnd *ee = (ComVividsolutionsJtsGeomgraphEdgeEnd *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdgeEnd class]);
    [((ComVividsolutionsJtsGeomgraphEdgeEnd *) nil_chk(ee)) computeLabelWithComVividsolutionsJtsAlgorithmBoundaryNodeRule:boundaryNodeRule];
  }
}

jint ComVividsolutionsJtsGeomgraphEdgeEndStar_getLocationWithInt_withComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomgraphGeometryGraphArray_(ComVividsolutionsJtsGeomgraphEdgeEndStar *self, jint geomIndex, ComVividsolutionsJtsGeomCoordinate *p, IOSObjectArray *geom) {
  if (IOSIntArray_Get(nil_chk(self->ptInAreaLocation_), geomIndex) == ComVividsolutionsJtsGeomLocation_NONE) {
    *IOSIntArray_GetRef(self->ptInAreaLocation_, geomIndex) = ComVividsolutionsJtsAlgorithmLocateSimplePointInAreaLocator_locateWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomGeometry_(p, [((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(IOSObjectArray_Get(nil_chk(geom), geomIndex))) getGeometry]);
  }
  return IOSIntArray_Get(self->ptInAreaLocation_, geomIndex);
}

jboolean ComVividsolutionsJtsGeomgraphEdgeEndStar_checkAreaLabelsConsistentWithInt_(ComVividsolutionsJtsGeomgraphEdgeEndStar *self, jint geomIndex) {
  id<JavaUtilList> edges = [self getEdges];
  if ([((id<JavaUtilList>) nil_chk(edges)) size] <= 0) return YES;
  jint lastEdgeIndex = [edges size] - 1;
  ComVividsolutionsJtsGeomgraphLabel *startLabel = [((ComVividsolutionsJtsGeomgraphEdgeEnd *) nil_chk(((ComVividsolutionsJtsGeomgraphEdgeEnd *) check_class_cast([edges getWithInt:lastEdgeIndex], [ComVividsolutionsJtsGeomgraphEdgeEnd class])))) getLabel];
  jint startLoc = [((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(startLabel)) getLocationWithInt:geomIndex withInt:ComVividsolutionsJtsGeomgraphPosition_LEFT];
  ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_(startLoc != ComVividsolutionsJtsGeomLocation_NONE, @"Found unlabelled area edge");
  jint currLoc = startLoc;
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdgeEnd *e = (ComVividsolutionsJtsGeomgraphEdgeEnd *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphEdgeEnd class]);
    ComVividsolutionsJtsGeomgraphLabel *label = [((ComVividsolutionsJtsGeomgraphEdgeEnd *) nil_chk(e)) getLabel];
    ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label)) isAreaWithInt:geomIndex], @"Found non-area edge");
    jint leftLoc = [label getLocationWithInt:geomIndex withInt:ComVividsolutionsJtsGeomgraphPosition_LEFT];
    jint rightLoc = [label getLocationWithInt:geomIndex withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT];
    if (leftLoc == rightLoc) {
      return NO;
    }
    if (rightLoc != currLoc) {
      return NO;
    }
    currLoc = leftLoc;
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomgraphEdgeEndStar)
