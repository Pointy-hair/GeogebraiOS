//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/main/SpreadsheetTraceManager.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/view/spreadsheet/CopyPasteCut.h"
#include "geogebra/common/gui/view/spreadsheet/MyTableInterface.h"
#include "geogebra/common/gui/view/spreadsheet/RelativeCopy.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/SpreadsheetTraceable.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/SpreadsheetTableModel.h"
#include "geogebra/common/main/SpreadsheetTraceManager.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/SpreadsheetTraceSettings.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonMainSpreadsheetTraceManager () {
 @public
  GeogebraCommonMainApp *app_;
  GeogebraCommonKernelKernel *kernel_;
  JavaUtilHashSet *storedTraces_;
  jboolean collectingTraces_;
  jboolean doShiftCellsUp_;
  IOSDoubleArray *coords_;
}

- (jint)getHighestTraceColumn;

- (void)togglePauseTraceGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                   withGeogebraCommonUtilSpreadsheetTraceSettings:(GeogebraCommonUtilSpreadsheetTraceSettings *)t;

- (void)clearAllTraceColumns;

- (void)traceToSpreadsheetWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                  withGeogebraCommonUtilSpreadsheetTraceSettings:(GeogebraCommonUtilSpreadsheetTraceSettings *)t;

- (void)createTraceListCellWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                        withInt:(jint)column
                                                        withInt:(jint)row;

- (void)updateTraceListCellWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                         withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                        withInt:(jint)column
                                                        withInt:(jint)row
                                          withJavaUtilArrayList:(JavaUtilArrayList *)values
                                                        withInt:(jint)index;

- (void)clearTraceListCellWithInt:(jint)column
                          withInt:(jint)row;

- (void)getCurrentTraceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                        withJavaUtilArrayList:(JavaUtilArrayList *)trace;

- (void)setHeaderWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                   withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonMainSpreadsheetTraceManager, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonMainSpreadsheetTraceManager, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonMainSpreadsheetTraceManager, storedTraces_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonMainSpreadsheetTraceManager, coords_, IOSDoubleArray *)

__attribute__((unused)) static jint GeogebraCommonMainSpreadsheetTraceManager_getHighestTraceColumn(GeogebraCommonMainSpreadsheetTraceManager *self);

__attribute__((unused)) static void GeogebraCommonMainSpreadsheetTraceManager_togglePauseTraceGeoWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonUtilSpreadsheetTraceSettings_(GeogebraCommonMainSpreadsheetTraceManager *self, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonUtilSpreadsheetTraceSettings *t);

__attribute__((unused)) static void GeogebraCommonMainSpreadsheetTraceManager_traceToSpreadsheetWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonUtilSpreadsheetTraceSettings_(GeogebraCommonMainSpreadsheetTraceManager *self, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonUtilSpreadsheetTraceSettings *t);

__attribute__((unused)) static void GeogebraCommonMainSpreadsheetTraceManager_createTraceListCellWithGeogebraCommonKernelConstruction_withInt_withInt_(GeogebraCommonMainSpreadsheetTraceManager *self, GeogebraCommonKernelConstruction *cons, jint column, jint row);

__attribute__((unused)) static void GeogebraCommonMainSpreadsheetTraceManager_updateTraceListCellWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_withJavaUtilArrayList_withInt_(GeogebraCommonMainSpreadsheetTraceManager *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *geo, jint column, jint row, JavaUtilArrayList *values, jint index);

__attribute__((unused)) static void GeogebraCommonMainSpreadsheetTraceManager_clearTraceListCellWithInt_withInt_(GeogebraCommonMainSpreadsheetTraceManager *self, jint column, jint row);

__attribute__((unused)) static void GeogebraCommonMainSpreadsheetTraceManager_getCurrentTraceWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_(GeogebraCommonMainSpreadsheetTraceManager *self, GeogebraCommonKernelGeosGeoElement *geo, JavaUtilArrayList *trace);

__attribute__((unused)) static void GeogebraCommonMainSpreadsheetTraceManager_setHeaderWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelConstruction_(GeogebraCommonMainSpreadsheetTraceManager *self, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelConstruction *cons);

@implementation GeogebraCommonMainSpreadsheetTraceManager

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonMainSpreadsheetTraceManager_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

- (void)addSpreadsheetTraceGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)spreadsheetTraceable {
  GeogebraCommonUtilSpreadsheetTraceSettings *t = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(spreadsheetTraceable)) getTraceSettings];
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction];
  if (((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ == -1) {
    t->traceColumn1_ = [self getNextTraceColumn];
  }
  if (t->doTraceGeoCopy_) {
    t->traceColumn2_ = t->traceColumn1_;
  }
  else {
    JavaUtilArrayList *traceList = [new_JavaUtilArrayList_init() autorelease];
    [spreadsheetTraceable addToSpreadsheetTraceListWithJavaUtilArrayList:traceList];
    t->traceColumn2_ = t->traceColumn1_ + [traceList size] - 1;
  }
  if (t->traceRow1_ == -1) {
    t->traceRow1_ = 0;
  }
  t->headerOffset_ = 0;
  if (t->showLabel_) ++t->headerOffset_;
  if (t->showTraceList_) ++t->headerOffset_;
  if (t->doRowLimit_) {
    t->traceRow2_ = t->traceRow1_ + t->numRows_ - 1 + t->headerOffset_;
  }
  else {
    t->traceRow2_ = GeogebraCommonKernelKernel_get_MAX_SPREADSHEET_ROWS_VISIBLE_();
  }
  t->tracingRow_ = t->traceRow1_;
  [((JavaUtilArrayList *) nil_chk(t->lastTrace_)) clear];
  [((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) putWithId:spreadsheetTraceable withId:t];
  [spreadsheetTraceable setSpreadsheetTraceWithBoolean:YES];
  [self clearGeoTraceColumnsWithGeogebraCommonKernelGeosGeoElement:spreadsheetTraceable];
  if (t->showTraceList_) {
    for (jint column = t->traceColumn1_; column <= t->traceColumn2_; column++) {
      GeogebraCommonMainSpreadsheetTraceManager_createTraceListCellWithGeogebraCommonKernelConstruction_withInt_withInt_(self, cons, column, t->traceRow1_);
    }
  }
  GeogebraCommonMainSpreadsheetTraceManager_setHeaderWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelConstruction_(self, spreadsheetTraceable, cons);
  [app_ repaintSpreadsheet];
}

- (void)updateTraceSettingsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (geo == nil) return;
  GeogebraCommonUtilSpreadsheetTraceSettings *t = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings];
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_delete__WithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_(app_, ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_, t->traceRow1_, t->traceColumn2_, GeogebraCommonKernelKernel_get_MAX_SPREADSHEET_ROWS_VISIBLE_(), GeogebraCommonGuiViewSpreadsheetMyTableInterface_CELL_SELECT);
  [self addSpreadsheetTraceGeoWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)clearGeoTraceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (geo == nil) return;
  GeogebraCommonUtilSpreadsheetTraceSettings *t = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings];
  [self clearGeoTraceColumnsWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:YES];
  for (jint column = ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_; column <= t->traceColumn2_; column++) GeogebraCommonMainSpreadsheetTraceManager_clearTraceListCellWithInt_withInt_(self, column, t->traceRow1_);
  t->tracingRow_ = t->traceRow1_;
}

- (void)removeSpreadsheetTraceGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (![((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) containsKeyWithId:geo]) return;
  [traceGeoCollection_ removeWithId:geo];
  [((GeogebraCommonMainApp *) nil_chk(app_)) repaintSpreadsheet];
}

- (void)removeAllSpreadsheetTraceGeos {
  [((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) clear];
  [((GeogebraCommonMainApp *) nil_chk(app_)) repaintSpreadsheet];
}

- (void)loadTraceGeoCollection {
  [((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) clear];
  JavaUtilTreeSet *ts = [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction])) getGeoSetConstructionOrder];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(ts)) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getSpreadsheetTrace]) {
      [traceGeoCollection_ putWithId:geo withId:[geo getTraceSettings]];
    }
  }
  [app_ repaintSpreadsheet];
}

- (jint)getNextTraceColumn {
  return JavaLangMath_maxWithInt_withInt_([((GeogebraCommonMainSpreadsheetTableModel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getSpreadsheetTableModel])) getHighestUsedColumn], GeogebraCommonMainSpreadsheetTraceManager_getHighestTraceColumn(self)) + 1;
}

- (jint)getHighestTraceColumn {
  return GeogebraCommonMainSpreadsheetTraceManager_getHighestTraceColumn(self);
}

- (jboolean)isTraceGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) containsKeyWithId:geo];
}

- (jboolean)isTraceColumnWithInt:(jint)column {
  GeogebraCommonUtilSpreadsheetTraceSettings *t = [new_GeogebraCommonUtilSpreadsheetTraceSettings_init() autorelease];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    t = [traceGeoCollection_ getWithId:geo];
    if (column >= ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ && column <= t->traceColumn2_) return YES;
  }
  return NO;
}

- (GeogebraCommonUtilSpreadsheetTraceSettings *)getTraceSettingsWithInt:(jint)column {
  GeogebraCommonUtilSpreadsheetTraceSettings *t;
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    t = [traceGeoCollection_ getWithId:geo];
    if (column >= ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ && column <= t->traceColumn2_) return t;
  }
  return nil;
}

- (JavaUtilArrayList *)getTraceGeoList {
  JavaUtilArrayList *traceGeoList = [new_JavaUtilArrayList_init() autorelease];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    [traceGeoList addWithId:geo];
  }
  return traceGeoList;
}

- (GeogebraCommonKernelGeosGeoElement *)getTraceGeoWithInt:(jint)column {
  GeogebraCommonUtilSpreadsheetTraceSettings *t = [new_GeogebraCommonUtilSpreadsheetTraceSettings_init() autorelease];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    t = [traceGeoCollection_ getWithId:geo];
    if (column >= ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ && column <= t->traceColumn2_) return geo;
  }
  return nil;
}

- (void)togglePauseTraceGeoWithInt:(jint)column {
  GeogebraCommonUtilSpreadsheetTraceSettings *t;
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    t = [traceGeoCollection_ getWithId:geo];
    if (column >= ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ && column <= t->traceColumn2_) {
      GeogebraCommonMainSpreadsheetTraceManager_togglePauseTraceGeoWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonUtilSpreadsheetTraceSettings_(self, geo, t);
      return;
    }
  }
}

- (void)togglePauseTraceGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                   withGeogebraCommonUtilSpreadsheetTraceSettings:(GeogebraCommonUtilSpreadsheetTraceSettings *)t {
  GeogebraCommonMainSpreadsheetTraceManager_togglePauseTraceGeoWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonUtilSpreadsheetTraceSettings_(self, geo, t);
}

- (void)pauseAllTracesWithBoolean:(jboolean)pause {
  GeogebraCommonUtilSpreadsheetTraceSettings *t;
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    t = [traceGeoCollection_ getWithId:geo];
    ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->pause_ = pause;
    if (!t->pause_) {
      GeogebraCommonMainSpreadsheetTraceManager_traceToSpreadsheetWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonUtilSpreadsheetTraceSettings_(self, geo, t);
    }
  }
}

- (GeogebraCommonKernelGeosGeoElement *)getFirstTraceGeo {
  if ([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) isEmpty]) {
    return nil;
  }
  return (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk([((id<JavaUtilSet>) nil_chk([traceGeoCollection_ keySet])) toArray]), 0), [GeogebraCommonKernelGeosGeoElement class]);
}

- (GeogebraCommonUtilSpreadsheetTraceSettings *)getTraceSettingsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) getWithId:geo];
}

- (void)clearAllTraceColumns {
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    [self clearGeoTraceColumnsWithGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (void)clearGeoTraceColumnsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [self clearGeoTraceColumnsWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:NO];
}

- (void)clearGeoTraceColumnsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                       withBoolean:(jboolean)keepHeader {
  GeogebraCommonUtilSpreadsheetTraceSettings *t = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings];
  if (t == nil) return;
  jint row1 = ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceRow1_;
  if (keepHeader) row1 += t->headerOffset_;
  GeogebraCommonGuiViewSpreadsheetCopyPasteCut_delete__WithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_(app_, t->traceColumn1_, row1, t->traceColumn2_, GeogebraCommonKernelKernel_get_MAX_SPREADSHEET_ROWS_VISIBLE_(), GeogebraCommonGuiViewSpreadsheetMyTableInterface_CELL_SELECT);
}

- (void)handleColumnDeleteWithInt:(jint)column1
                          withInt:(jint)column2 {
  GeogebraCommonUtilSpreadsheetTraceSettings *t;
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    t = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings];
    if (column2 >= ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ && column1 <= t->traceColumn2_) {
      GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction];
      GeogebraCommonMainSpreadsheetTraceManager_setHeaderWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelConstruction_(self, geo, cons);
      t->tracingRow_ = 0;
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) repaintSpreadsheet];
}

- (void)handleColumnDeleteWithInt:(jint)column1
                          withInt:(jint)row1
                          withInt:(jint)column2
                          withInt:(jint)row2 {
  GeogebraCommonUtilSpreadsheetTraceSettings *t;
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) keySet])) {
    t = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings];
    if (column2 >= ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ && column1 <= t->traceColumn2_) {
      if (row1 < row2 && row1 < t->headerOffset_) {
        GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction];
        GeogebraCommonMainSpreadsheetTraceManager_setHeaderWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelConstruction_(self, geo, cons);
      }
      if (row2 >= t->tracingRow_ - 1 + t->headerOffset_) {
        t->tracingRow_ = row1 - t->headerOffset_;
        if (t->tracingRow_ <= 0) {
          t->tracingRow_ = 0;
        }
        else {
          jboolean emptyCells = YES;
          jint row = t->tracingRow_ + t->headerOffset_;
          do {
            row--;
            jint col = t->traceColumn1_;
            do {
              GeogebraCommonKernelGeosGeoElement *cell = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, col, row);
              if (cell != nil) {
                emptyCells = NO;
              }
              col++;
            }
            while (emptyCells && col <= t->traceColumn2_);
          }
          while (emptyCells && row >= t->headerOffset_);
          t->tracingRow_ = row + 1 - t->headerOffset_;
        }
      }
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) repaintSpreadsheet];
}

- (GeogebraCommonUtilSpreadsheetTraceSettings *)getDefaultTraceSettings {
  return [new_GeogebraCommonUtilSpreadsheetTraceSettings_init() autorelease];
}

- (void)setNeedsColumnResetWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                      withBoolean:(jboolean)flag {
  if (![((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) containsKeyWithId:geo]) return;
  ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk([traceGeoCollection_ getWithId:geo]))->needsColumnReset_ = flag;
}

- (NSString *)getTraceXMLWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonUtilSpreadsheetTraceSettings *t = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings];
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"\t<spreadsheetTrace val=\"true\""];
  [sb appendWithNSString:@" traceColumn1=\""];
  [sb appendWithInt:((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" traceColumn2=\""];
  [sb appendWithInt:t->traceColumn2_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" traceRow1=\""];
  [sb appendWithInt:t->traceRow1_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" traceRow2=\""];
  [sb appendWithInt:t->traceRow2_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" tracingRow=\""];
  [sb appendWithInt:t->tracingRow_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" numRows=\""];
  [sb appendWithInt:t->numRows_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" headerOffset=\""];
  [sb appendWithInt:t->headerOffset_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" doColumnReset=\""];
  [sb appendWithNSString:t->doColumnReset_ ? @"true" : @"false"];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" doRowLimit=\""];
  [sb appendWithNSString:t->doRowLimit_ ? @"true" : @"false"];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" showLabel=\""];
  [sb appendWithNSString:t->showLabel_ ? @"true" : @"false"];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" showTraceList=\""];
  [sb appendWithNSString:t->showTraceList_ ? @"true" : @"false"];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" doTraceGeoCopy=\""];
  [sb appendWithNSString:t->doTraceGeoCopy_ ? @"true" : @"false"];
  [sb appendWithNSString:@"\""];
  if (t->pause_) {
    [sb appendWithNSString:@" pause=\"true\""];
  }
  [sb appendWithNSString:@"/>\n"];
  return [sb description];
}

- (void)startCollectingSpreadsheetTraces {
  collectingTraces_ = YES;
  [((JavaUtilHashSet *) nil_chk(storedTraces_)) clear];
}

- (void)stopCollectingSpreadsheetTraces {
  collectingTraces_ = NO;
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(storedTraces_)) {
    [self traceToSpreadsheetWithGeogebraCommonKernelGeosGeoElement:geo];
  }
  [storedTraces_ clear];
}

- (void)traceToSpreadsheetWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) isViewReiniting]) return;
  if (![((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) containsKeyWithId:geo]) return;
  GeogebraCommonUtilSpreadsheetTraceSettings *t = [traceGeoCollection_ getWithId:geo];
  if (((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->pause_) {
    return;
  }
  GeogebraCommonMainSpreadsheetTraceManager_traceToSpreadsheetWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonUtilSpreadsheetTraceSettings_(self, geo, t);
}

- (void)traceToSpreadsheetWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                  withGeogebraCommonUtilSpreadsheetTraceSettings:(GeogebraCommonUtilSpreadsheetTraceSettings *)t {
  GeogebraCommonMainSpreadsheetTraceManager_traceToSpreadsheetWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonUtilSpreadsheetTraceSettings_(self, geo, t);
}

- (jboolean)setGeoTraceRowWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                            withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                           withJavaUtilArrayList:(JavaUtilArrayList *)traceArray
                                                         withInt:(jint)row {
  GeogebraCommonUtilSpreadsheetTraceSettings *t = [((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) getWithId:geo];
  jint column = ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_;
  jint traceIndex = 0;
  IOSObjectArray *geos = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoElements];
  if (t->doTraceGeoCopy_) {
    [self setTraceCellAsGeoCopyWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelGeosGeoElement:geo withInt:t->traceColumn1_ withInt:row];
    return YES;
  }
  if (traceArray == nil) {
    traceArray = [new_JavaUtilArrayList_init() autorelease];
    [traceArray addWithId:JavaLangDouble_valueOfWithDouble_(JavaLangDouble_NaN)];
    [traceArray addWithId:JavaLangDouble_valueOfWithDouble_(JavaLangDouble_NaN)];
  }
  JavaUtilArrayList *traceList = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
    if ([GeogebraCommonKernelGeosSpreadsheetTraceable_class_() isInstance:IOSObjectArray_Get(geos, i)]) {
      id<GeogebraCommonKernelGeosSpreadsheetTraceable> traceGeo = (id<GeogebraCommonKernelGeosSpreadsheetTraceable>) check_protocol_cast(IOSObjectArray_Get(geos, i), @protocol(GeogebraCommonKernelGeosSpreadsheetTraceable));
      [traceList clear];
      [((id<GeogebraCommonKernelGeosSpreadsheetTraceable>) nil_chk(traceGeo)) addToSpreadsheetTraceListWithJavaUtilArrayList:traceList];
      for (jint j = 0; j < [traceList size]; j++) {
        [self setTraceCellWithGeogebraCommonKernelConstruction:cons withInt:column withInt:row withId:[((JavaUtilArrayList *) nil_chk(traceArray)) getWithInt:traceIndex] withGeogebraCommonPluginGeoClassEnum:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk([traceList getWithInt:j])) isGeoAngle] ? GeogebraCommonPluginGeoClassEnum_get_ANGLE() : GeogebraCommonPluginGeoClassEnum_get_NUMERIC()];
        ++column;
        ++traceIndex;
      }
    }
    else {
      GeogebraCommonUtilDebugLog_warnWithNSString_(JreStrcat("$@", @"not SpreadsheetTraceable ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, i))) getGeoClassType]));
    }
  }
  return NO;
}

- (void)setTraceCellAsGeoCopyWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                           withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                          withInt:(jint)column
                                                          withInt:(jint)row {
  GeogebraCommonKernelGeosGeoElement *cell = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, column, row);
  @try {
    if (cell == nil || ![((GeogebraCommonPluginGeoClassEnum *) nil_chk([cell getGeoClassType])) isEqual:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType]]) {
      cell = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) deepCopyGeo];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(cell)) setLabelWithNSString:GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column, row)];
      [cell setAllVisualPropertiesWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:YES];
      [cell setSpreadsheetTraceWithBoolean:NO];
      [cell setTraceSettingsWithGeogebraCommonUtilSpreadsheetTraceSettings:nil];
      [cell setAuxiliaryObjectWithBoolean:YES];
      [cell setLabelVisibleWithBoolean:NO];
      if ([cell isGeoText]) [cell setEuclidianVisibleWithBoolean:NO];
    }
    else {
      [cell setWithGeogebraCommonKernelGeosGeoElement:geo];
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(cell)) updateCascade];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

- (void)setTraceCellWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                 withInt:(jint)column
                                                 withInt:(jint)row
                                                  withId:(id)value
                    withGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)geoClassType {
  GeogebraCommonKernelGeosGeoElement *cell = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, column, row);
  jboolean isUpdateCell = cell != nil && [((GeogebraCommonPluginGeoClassEnum *) nil_chk([cell getGeoClassType])) isEqual:geoClassType];
  if (isUpdateCell) {
    switch ([geoClassType ordinal]) {
      case GeogebraCommonPluginGeoClass_NUMERIC:
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(cell, [GeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:[((JavaLangDouble *) nil_chk((JavaLangDouble *) check_class_cast(value, [JavaLangDouble class]))) doubleValue]];
      break;
      case GeogebraCommonPluginGeoClass_ANGLE:
      [((GeogebraCommonKernelGeosGeoAngle *) nil_chk(((GeogebraCommonKernelGeosGeoAngle *) check_class_cast(cell, [GeogebraCommonKernelGeosGeoAngle class])))) setValueWithDouble:[((JavaLangDouble *) nil_chk((JavaLangDouble *) check_class_cast(value, [JavaLangDouble class]))) doubleValue]];
      break;
      case GeogebraCommonPluginGeoClass_TEXT:
      [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(cell, [GeogebraCommonKernelGeosGeoText class])))) setTextStringWithNSString:(NSString *) check_class_cast(value, [NSString class])];
      break;
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(cell)) updateCascade];
  }
  else {
    if (cell != nil) GeogebraCommonGuiViewSpreadsheetCopyPasteCut_delete__WithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_(app_, column, row, column, row, GeogebraCommonGuiViewSpreadsheetMyTableInterface_CELL_SELECT);
    NSString *cellName = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column, row);
    switch ([geoClassType ordinal]) {
      case GeogebraCommonPluginGeoClass_NUMERIC:
      cell = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_(cons, cellName, [((JavaLangDouble *) nil_chk((JavaLangDouble *) check_class_cast(value, [JavaLangDouble class]))) doubleValue]) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_ANGLE:
      cell = [new_GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_(cons, cellName, [((JavaLangDouble *) nil_chk((JavaLangDouble *) check_class_cast(value, [JavaLangDouble class]))) doubleValue]) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_TEXT:
      cell = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_withNSString_(cons, cellName, (NSString *) check_class_cast(value, [NSString class])) autorelease];
      break;
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(cell)) setEuclidianVisibleWithBoolean:NO];
  }
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(cell)) setAuxiliaryObjectWithBoolean:YES];
}

- (void)createTraceListCellWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                        withInt:(jint)column
                                                        withInt:(jint)row {
  GeogebraCommonMainSpreadsheetTraceManager_createTraceListCellWithGeogebraCommonKernelConstruction_withInt_withInt_(self, cons, column, row);
}

- (void)updateTraceListCellWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                         withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                        withInt:(jint)column
                                                        withInt:(jint)row
                                          withJavaUtilArrayList:(JavaUtilArrayList *)values
                                                        withInt:(jint)index {
  GeogebraCommonMainSpreadsheetTraceManager_updateTraceListCellWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_withJavaUtilArrayList_withInt_(self, cons, geo, column, row, values, index);
}

- (void)clearTraceListCellWithInt:(jint)column
                          withInt:(jint)row {
  GeogebraCommonMainSpreadsheetTraceManager_clearTraceListCellWithInt_withInt_(self, column, row);
}

- (void)getCurrentTraceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                        withJavaUtilArrayList:(JavaUtilArrayList *)trace {
  GeogebraCommonMainSpreadsheetTraceManager_getCurrentTraceWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_(self, geo, trace);
}

- (jboolean)addElementTraceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                             withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withJavaUtilArrayList:(JavaUtilArrayList *)currentTrace {
  if ([GeogebraCommonKernelGeosSpreadsheetTraceable_class_() isInstance:geo]) {
    id<GeogebraCommonKernelGeosSpreadsheetTraceable> traceGeo = (id<GeogebraCommonKernelGeosSpreadsheetTraceable>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosSpreadsheetTraceable));
    JavaUtilArrayList *traceList = [new_JavaUtilArrayList_init() autorelease];
    [((id<GeogebraCommonKernelGeosSpreadsheetTraceable>) nil_chk(traceGeo)) addToSpreadsheetTraceListWithJavaUtilArrayList:traceList];
    for (jint i = 0; i < [traceList size]; i++) {
      [((JavaUtilArrayList *) nil_chk(currentTrace)) addWithId:JavaLangDouble_valueOfWithDouble_([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk([traceList getWithInt:i])) getValue])];
    }
  }
  return NO;
}

- (void)setHeaderWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                   withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonMainSpreadsheetTraceManager_setHeaderWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelConstruction_(self, geo, cons);
}

- (jboolean)hasGeoTraced {
  return ![((JavaUtilHashMap *) nil_chk(traceGeoCollection_)) isEmpty];
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(kernel_);
  RELEASE_(traceGeoCollection_);
  RELEASE_(storedTraces_);
  RELEASE_(coords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:", "SpreadsheetTraceManager", NULL, 0x1, NULL, NULL },
    { "addSpreadsheetTraceGeoWithGeogebraCommonKernelGeosGeoElement:", "addSpreadsheetTraceGeo", "V", 0x1, NULL, NULL },
    { "updateTraceSettingsWithGeogebraCommonKernelGeosGeoElement:", "updateTraceSettings", "V", 0x1, NULL, NULL },
    { "clearGeoTraceWithGeogebraCommonKernelGeosGeoElement:", "clearGeoTrace", "V", 0x1, NULL, NULL },
    { "removeSpreadsheetTraceGeoWithGeogebraCommonKernelGeosGeoElement:", "removeSpreadsheetTraceGeo", "V", 0x1, NULL, NULL },
    { "removeAllSpreadsheetTraceGeos", NULL, "V", 0x1, NULL, NULL },
    { "loadTraceGeoCollection", NULL, "V", 0x1, NULL, NULL },
    { "getNextTraceColumn", NULL, "I", 0x1, NULL, NULL },
    { "getHighestTraceColumn", NULL, "I", 0x2, NULL, NULL },
    { "isTraceGeoWithGeogebraCommonKernelGeosGeoElement:", "isTraceGeo", "Z", 0x1, NULL, NULL },
    { "isTraceColumnWithInt:", "isTraceColumn", "Z", 0x1, NULL, NULL },
    { "getTraceSettingsWithInt:", "getTraceSettings", "Lgeogebra.common.util.SpreadsheetTraceSettings;", 0x1, NULL, NULL },
    { "getTraceGeoList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getTraceGeoWithInt:", "getTraceGeo", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "togglePauseTraceGeoWithInt:", "togglePauseTraceGeo", "V", 0x1, NULL, NULL },
    { "togglePauseTraceGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonUtilSpreadsheetTraceSettings:", "togglePauseTraceGeo", "V", 0x2, NULL, NULL },
    { "pauseAllTracesWithBoolean:", "pauseAllTraces", "V", 0x1, NULL, NULL },
    { "getFirstTraceGeo", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getTraceSettingsWithGeogebraCommonKernelGeosGeoElement:", "getTraceSettings", "Lgeogebra.common.util.SpreadsheetTraceSettings;", 0x1, NULL, NULL },
    { "clearAllTraceColumns", NULL, "V", 0x2, NULL, NULL },
    { "clearGeoTraceColumnsWithGeogebraCommonKernelGeosGeoElement:", "clearGeoTraceColumns", "V", 0x1, NULL, NULL },
    { "clearGeoTraceColumnsWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "clearGeoTraceColumns", "V", 0x1, NULL, NULL },
    { "handleColumnDeleteWithInt:withInt:", "handleColumnDelete", "V", 0x1, NULL, NULL },
    { "handleColumnDeleteWithInt:withInt:withInt:withInt:", "handleColumnDelete", "V", 0x1, NULL, NULL },
    { "getDefaultTraceSettings", NULL, "Lgeogebra.common.util.SpreadsheetTraceSettings;", 0x1, NULL, NULL },
    { "setNeedsColumnResetWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "setNeedsColumnReset", "V", 0x1, NULL, NULL },
    { "getTraceXMLWithGeogebraCommonKernelGeosGeoElement:", "getTraceXML", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "startCollectingSpreadsheetTraces", NULL, "V", 0x1, NULL, NULL },
    { "stopCollectingSpreadsheetTraces", NULL, "V", 0x1, NULL, NULL },
    { "traceToSpreadsheetWithGeogebraCommonKernelGeosGeoElement:", "traceToSpreadsheet", "V", 0x1, NULL, NULL },
    { "traceToSpreadsheetWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonUtilSpreadsheetTraceSettings:", "traceToSpreadsheet", "V", 0x2, NULL, NULL },
    { "setGeoTraceRowWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelConstruction:withJavaUtilArrayList:withInt:", "setGeoTraceRow", "Z", 0x4, NULL, NULL },
    { "setTraceCellAsGeoCopyWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:withInt:withInt:", "setTraceCellAsGeoCopy", "V", 0x4, NULL, NULL },
    { "setTraceCellWithGeogebraCommonKernelConstruction:withInt:withInt:withId:withGeogebraCommonPluginGeoClassEnum:", "setTraceCell", "V", 0x4, NULL, NULL },
    { "createTraceListCellWithGeogebraCommonKernelConstruction:withInt:withInt:", "createTraceListCell", "V", 0x2, NULL, NULL },
    { "updateTraceListCellWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:withInt:withInt:withJavaUtilArrayList:withInt:", "updateTraceListCell", "V", 0x2, NULL, NULL },
    { "clearTraceListCellWithInt:withInt:", "clearTraceListCell", "V", 0x2, NULL, NULL },
    { "getCurrentTraceWithGeogebraCommonKernelGeosGeoElement:withJavaUtilArrayList:", "getCurrentTrace", "V", 0x2, NULL, NULL },
    { "addElementTraceWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelConstruction:withJavaUtilArrayList:", "addElementTrace", "Z", 0x4, NULL, NULL },
    { "setHeaderWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelConstruction:", "setHeader", "V", 0x2, NULL, NULL },
    { "hasGeoTraced", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "traceGeoCollection_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lgeogebra/common/kernel/geos/GeoElement;Lgeogebra/common/util/SpreadsheetTraceSettings;>;",  },
    { "storedTraces_", NULL, 0x2, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "collectingTraces_", NULL, 0x2, "Z", NULL, NULL,  },
    { "doShiftCellsUp_", NULL, 0x2, "Z", NULL, NULL,  },
    { "coords_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonMainSpreadsheetTraceManager = { 2, "SpreadsheetTraceManager", "geogebra.common.main", NULL, 0x1, 41, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonMainSpreadsheetTraceManager;
}

@end

void GeogebraCommonMainSpreadsheetTraceManager_initWithGeogebraCommonMainApp_(GeogebraCommonMainSpreadsheetTraceManager *self, GeogebraCommonMainApp *app) {
  NSObject_init(self);
  self->collectingTraces_ = NO;
  self->doShiftCellsUp_ = YES;
  GeogebraCommonMainSpreadsheetTraceManager_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonMainSpreadsheetTraceManager_set_app_(self, app);
  GeogebraCommonMainSpreadsheetTraceManager_set_kernel_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getKernel]);
  GeogebraCommonMainSpreadsheetTraceManager_setAndConsume_traceGeoCollection_(self, new_JavaUtilHashMap_init());
  GeogebraCommonMainSpreadsheetTraceManager_setAndConsume_storedTraces_(self, new_JavaUtilHashSet_init());
}

GeogebraCommonMainSpreadsheetTraceManager *new_GeogebraCommonMainSpreadsheetTraceManager_initWithGeogebraCommonMainApp_(GeogebraCommonMainApp *app) {
  GeogebraCommonMainSpreadsheetTraceManager *self = [GeogebraCommonMainSpreadsheetTraceManager alloc];
  GeogebraCommonMainSpreadsheetTraceManager_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

jint GeogebraCommonMainSpreadsheetTraceManager_getHighestTraceColumn(GeogebraCommonMainSpreadsheetTraceManager *self) {
  jint max = -1;
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(self->traceGeoCollection_)) keySet])) {
    if (((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings]))->traceColumn2_ > max) max = ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk([geo getTraceSettings]))->traceColumn2_;
  }
  return max;
}

void GeogebraCommonMainSpreadsheetTraceManager_togglePauseTraceGeoWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonUtilSpreadsheetTraceSettings_(GeogebraCommonMainSpreadsheetTraceManager *self, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonUtilSpreadsheetTraceSettings *t) {
  ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->pause_ = !t->pause_;
  if (!t->pause_) {
    GeogebraCommonMainSpreadsheetTraceManager_traceToSpreadsheetWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonUtilSpreadsheetTraceSettings_(self, geo, t);
  }
}

void GeogebraCommonMainSpreadsheetTraceManager_traceToSpreadsheetWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonUtilSpreadsheetTraceSettings_(GeogebraCommonMainSpreadsheetTraceManager *self, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonUtilSpreadsheetTraceSettings *t) {
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getConstruction];
  if (!((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->doTraceGeoCopy_) GeogebraCommonMainSpreadsheetTraceManager_getCurrentTraceWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_(self, geo, t->lastTrace_);
  if (self->collectingTraces_) {
    [((JavaUtilHashSet *) nil_chk(self->storedTraces_)) addWithId:geo];
    return;
  }
  if (t->needsColumnReset_ && t->doColumnReset_) {
    t->traceColumn1_ = [self getNextTraceColumn];
    t->tracingRow_ = t->traceRow1_;
    t->needsColumnReset_ = NO;
  }
  [self->app_ setScrollToShowWithBoolean:YES];
  jint row = t->tracingRow_ + t->headerOffset_;
  if (t->tracingRow_ == -1) row = t->traceRow2_;
  if (t->tracingRow_ != -1) {
    [self setGeoTraceRowWithGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelConstruction:cons withJavaUtilArrayList:t->lastTrace_ withInt:row];
  }
  else if (self->doShiftCellsUp_) {
    GeogebraCommonKernelGeosGeoElement *sourceCell;
    jint minTraceRow = t->traceRow1_ + t->headerOffset_ + 1;
    if (t->numRows_ == 1) --minTraceRow;
    for (jint c = t->traceColumn1_; c <= t->traceColumn2_; c++) {
      for (jint r = minTraceRow; r <= t->traceRow2_; r++) {
        sourceCell = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(self->app_, c, r);
        if (t->numRows_ > 1) {
          if (sourceCell != nil) {
            if (t->doTraceGeoCopy_) {
              [self setTraceCellAsGeoCopyWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelGeosGeoElement:sourceCell withInt:c withInt:r - 1];
            }
            else {
              [self setTraceCellWithGeogebraCommonKernelConstruction:cons withInt:c withInt:r - 1 withId:JavaLangDouble_valueOfWithDouble_([((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(sourceCell, [GeogebraCommonKernelGeosGeoNumeric class])) getValue]) withGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()];
            }
          }
        }
        if (r == t->traceRow2_) {
          if (t->doTraceGeoCopy_) {
            [self setTraceCellAsGeoCopyWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelGeosGeoElement:geo withInt:c withInt:r];
          }
          else {
            [self setTraceCellWithGeogebraCommonKernelConstruction:cons withInt:c withInt:r withId:[((JavaUtilArrayList *) nil_chk(t->lastTrace_)) getWithInt:c - t->traceColumn1_] withGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()];
          }
        }
      }
    }
  }
  t->tracingRow_ = (row < t->traceRow2_) ? t->tracingRow_ + 1 : -1;
  if (t->showTraceList_) {
    jint traceIndex = 0;
    for (jint column = t->traceColumn1_; column <= t->traceColumn2_; column++) {
      GeogebraCommonMainSpreadsheetTraceManager_updateTraceListCellWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_withJavaUtilArrayList_withInt_(self, cons, geo, column, t->traceRow1_, t->lastTrace_, traceIndex);
      ++traceIndex;
    }
  }
  [self->app_ setScrollToShowWithBoolean:NO];
}

void GeogebraCommonMainSpreadsheetTraceManager_createTraceListCellWithGeogebraCommonKernelConstruction_withInt_withInt_(GeogebraCommonMainSpreadsheetTraceManager *self, GeogebraCommonKernelConstruction *cons, jint column, jint row) {
  GeogebraCommonKernelGeosGeoElement *cell = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(self->app_, column, row);
  if (cell != nil) GeogebraCommonGuiViewSpreadsheetCopyPasteCut_delete__WithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_withInt_(self->app_, column, row, column, row, GeogebraCommonGuiViewSpreadsheetMyTableInterface_CELL_SELECT);
  @try {
    cell = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
    [cell setLabelWithNSString:GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column, row)];
    [cell setEuclidianVisibleWithBoolean:NO];
    [cell setAuxiliaryObjectWithBoolean:YES];
    [cell updateCascade];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

void GeogebraCommonMainSpreadsheetTraceManager_updateTraceListCellWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_withJavaUtilArrayList_withInt_(GeogebraCommonMainSpreadsheetTraceManager *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *geo, jint column, jint row, JavaUtilArrayList *values, jint index) {
  GeogebraCommonKernelGeosGeoElement *cell = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(self->app_, column, row);
  if (cell == nil || ![cell isGeoList]) return;
  if (((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getTraceSettings]))->doTraceGeoCopy_) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(cell, [GeogebraCommonKernelGeosGeoList class])))) addWithGeogebraCommonKernelGeosGeoElement:[geo copyInternalWithGeogebraCommonKernelConstruction:cons]];
  }
  else {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(cell, [GeogebraCommonKernelGeosGeoList class])))) addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons, [((JavaLangDouble *) nil_chk([((JavaUtilArrayList *) nil_chk(values)) getWithInt:index])) doubleValue]) autorelease]];
  }
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(cell)) updateCascade];
}

void GeogebraCommonMainSpreadsheetTraceManager_clearTraceListCellWithInt_withInt_(GeogebraCommonMainSpreadsheetTraceManager *self, jint column, jint row) {
  GeogebraCommonKernelGeosGeoElement *cell = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(self->app_, column, row);
  if (cell == nil || ![cell isGeoList]) return;
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(cell, [GeogebraCommonKernelGeosGeoList class])))) clear];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(cell)) updateCascade];
}

void GeogebraCommonMainSpreadsheetTraceManager_getCurrentTraceWithGeogebraCommonKernelGeosGeoElement_withJavaUtilArrayList_(GeogebraCommonMainSpreadsheetTraceManager *self, GeogebraCommonKernelGeosGeoElement *geo, JavaUtilArrayList *trace) {
  [((JavaUtilArrayList *) nil_chk(trace)) clear];
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getConstruction];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
    for (jint elem = 0; elem < [((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])) size]; elem++) {
      [self addElementTraceWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])) getWithInt:elem] withGeogebraCommonKernelConstruction:cons withJavaUtilArrayList:trace];
    }
  }
  else {
    [self addElementTraceWithGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelConstruction:cons withJavaUtilArrayList:trace];
  }
}

void GeogebraCommonMainSpreadsheetTraceManager_setHeaderWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelConstruction_(GeogebraCommonMainSpreadsheetTraceManager *self, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonUtilSpreadsheetTraceSettings *t = [((JavaUtilHashMap *) nil_chk(self->traceGeoCollection_)) getWithId:geo];
  jint column, row;
  GeogebraCommonKernelGeosGeoText *headerText = nil;
  IOSObjectArray *geos = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoElements];
  if (((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->showLabel_) {
    row = t->traceRow1_ + t->headerOffset_ - 1;
    column = t->traceColumn1_;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
      if ([GeogebraCommonKernelGeosSpreadsheetTraceable_class_() isInstance:IOSObjectArray_Get(geos, i)]) {
        JavaUtilArrayList *strings = [((id<GeogebraCommonKernelGeosSpreadsheetTraceable>) nil_chk(((id<GeogebraCommonKernelGeosSpreadsheetTraceable>) check_protocol_cast(IOSObjectArray_Get(geos, i), @protocol(GeogebraCommonKernelGeosSpreadsheetTraceable))))) getColumnHeadings];
        for (jint j = 0; j < [((JavaUtilArrayList *) nil_chk(strings)) size]; j++) {
          headerText = [strings getWithInt:j];
          NSString *cellName = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column, row);
          [((GeogebraCommonKernelGeosGeoText *) nil_chk(headerText)) setLabelWithNSString:cellName];
          column++;
        }
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonMainSpreadsheetTraceManager)
